// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10715 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10334 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10591 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10591 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10591 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10591 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10334 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10591 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10591 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10591 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10591 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10591 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 26923 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL 27045 0 2
// if GetSide ( un ) = 1 then
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 255
9819: PUSH
9820: LD_INT 1
9822: EQUAL
9823: IFFALSE 9840
// ComMoveXY ( un , 57 , 52 ) ;
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_INT 57
9832: PPUSH
9833: LD_INT 52
9835: PPUSH
9836: CALL_OW 111
// end ;
9840: PPOPN 2
9842: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9843: LD_EXP 21
9847: NOT
9848: IFFALSE 9898
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9850: LD_VAR 0 1
9854: PUSH
9855: LD_INT 3
9857: EQUAL
9858: PUSH
9859: LD_VAR 0 2
9863: PUSH
9864: LD_INT 1
9866: EQUAL
9867: AND
9868: PUSH
9869: LD_VAR 0 1
9873: PUSH
9874: LD_INT 1
9876: EQUAL
9877: PUSH
9878: LD_VAR 0 2
9882: PUSH
9883: LD_INT 3
9885: EQUAL
9886: AND
9887: OR
9888: IFFALSE 9898
// us_alert := true ;
9890: LD_ADDR_EXP 21
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9898: LD_VAR 0 1
9902: PUSH
9903: LD_INT 6
9905: EQUAL
9906: PUSH
9907: LD_VAR 0 2
9911: PUSH
9912: LD_INT 3
9914: EQUAL
9915: AND
9916: PUSH
9917: LD_VAR 0 1
9921: PUSH
9922: LD_INT 3
9924: EQUAL
9925: PUSH
9926: LD_VAR 0 2
9930: PUSH
9931: LD_INT 6
9933: EQUAL
9934: AND
9935: OR
9936: IFFALSE 9945
// YouLost ( alat ) ;
9938: LD_STRING alat
9940: PPUSH
9941: CALL_OW 104
// end ;
9945: PPOPN 2
9947: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 255
9957: PUSH
9958: LD_INT 2
9960: EQUAL
9961: PUSH
9962: LD_VAR 0 1
9966: PUSH
9967: LD_INT 58
9969: PUSH
9970: EMPTY
9971: LIST
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: IN
9992: AND
9993: IFFALSE 10114
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9995: LD_OWVAR 3
9999: PUSH
10000: LD_VAR 0 1
10004: DIFF
10005: PPUSH
10006: LD_VAR 0 1
10010: PPUSH
10011: CALL_OW 74
10015: PPUSH
10016: CALL_OW 255
10020: PUSH
10021: LD_INT 2
10023: NONEQUAL
10024: IFFALSE 10114
// begin Wait ( 0 0$1.3 ) ;
10026: LD_INT 46
10028: PPUSH
10029: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10033: LD_VAR 0 1
10037: PPUSH
10038: CALL_OW 250
10042: PPUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 251
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 250
10069: PPUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: CALL_OW 251
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10087: LD_VAR 0 1
10091: PPUSH
10092: CALL_OW 250
10096: PPUSH
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 251
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 453
// end ; end ;
10114: PPOPN 1
10116: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10117: LD_VAR 0 2
10121: PUSH
10122: LD_INT 22
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 21
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: IN
10151: PUSH
10152: LD_VAR 0 2
10156: PPUSH
10157: CALL 10636 0 1
10161: PPUSH
10162: CALL_OW 255
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: NOT
10171: AND
10172: IFFALSE 10297
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10174: LD_INT 105
10176: PPUSH
10177: LD_INT 210
10179: PPUSH
10180: CALL_OW 12
10184: PPUSH
10185: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 250
10198: PPUSH
10199: LD_VAR 0 2
10203: PPUSH
10204: CALL_OW 251
10208: PPUSH
10209: LD_INT 3
10211: PPUSH
10212: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10216: LD_VAR 0 2
10220: PPUSH
10221: CALL_OW 250
10225: PPUSH
10226: LD_VAR 0 2
10230: PPUSH
10231: CALL_OW 251
10235: PPUSH
10236: LD_INT 3
10238: PPUSH
10239: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10243: LD_VAR 0 2
10247: PPUSH
10248: CALL_OW 250
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL_OW 251
10262: PPUSH
10263: LD_INT 3
10265: PPUSH
10266: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10270: LD_VAR 0 2
10274: PPUSH
10275: CALL_OW 250
10279: PPUSH
10280: LD_VAR 0 2
10284: PPUSH
10285: CALL_OW 251
10289: PPUSH
10290: LD_INT 3
10292: PPUSH
10293: CALL_OW 453
// end ; end ;
10297: PPOPN 4
10299: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10300: LD_VAR 0 1
10304: PPUSH
10305: LD_VAR 0 2
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: CALL 27021 0 3
// end ;
10319: PPOPN 3
10321: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL 27029 0 1
// end ; end_of_file
10331: PPOPN 1
10333: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10334: LD_INT 0
10336: PPUSH
10337: PPUSH
10338: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10339: LD_ADDR_VAR 0 7
10343: PUSH
10344: LD_VAR 0 1
10348: PUSH
10349: LD_VAR 0 2
10353: ARRAY
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_VAR 0 4
10364: PPUSH
10365: CALL_OW 1
10369: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_VAR 0 1
10379: PPUSH
10380: LD_VAR 0 2
10384: PPUSH
10385: LD_VAR 0 7
10389: PPUSH
10390: CALL_OW 1
10394: ST_TO_ADDR
// result := tab ;
10395: LD_ADDR_VAR 0 5
10399: PUSH
10400: LD_VAR 0 1
10404: ST_TO_ADDR
// end ;
10405: LD_VAR 0 5
10409: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10410: LD_INT 0
10412: PPUSH
10413: PPUSH
10414: PPUSH
// if not GetControl ( veh ) = control_manual then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 263
10424: PUSH
10425: LD_INT 1
10427: EQUAL
10428: NOT
10429: IFFALSE 10441
// result := false else
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
10439: GO 10586
// if veh in FilterAllUnits ( [ f_empty ] ) then
10441: LD_VAR 0 1
10445: PUSH
10446: LD_INT 58
10448: PUSH
10449: EMPTY
10450: LIST
10451: PPUSH
10452: CALL_OW 69
10456: IN
10457: IFFALSE 10469
// result := false else
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_INT 0
10466: ST_TO_ADDR
10467: GO 10586
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10469: LD_ADDR_VAR 0 4
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 55
10493: PUSH
10494: EMPTY
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: ST_TO_ADDR
// if not filter then
10506: LD_VAR 0 4
10510: NOT
10511: IFFALSE 10523
// result := false else
10513: LD_ADDR_VAR 0 2
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
10521: GO 10586
// for i = 1 to filter do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: DOUBLE
10529: LD_INT 1
10531: DEC
10532: ST_TO_ADDR
10533: LD_VAR 0 4
10537: PUSH
10538: FOR_TO
10539: IFFALSE 10584
// if IsDriver ( filter [ i ] ) = veh then
10541: LD_VAR 0 4
10545: PUSH
10546: LD_VAR 0 3
10550: ARRAY
10551: PPUSH
10552: CALL 66244 0 1
10556: PUSH
10557: LD_VAR 0 1
10561: EQUAL
10562: IFFALSE 10582
// begin result := filter [ i ] ;
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_VAR 0 4
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: ST_TO_ADDR
// break ;
10580: GO 10584
// end ;
10582: GO 10538
10584: POP
10585: POP
// end ; end ;
10586: LD_VAR 0 2
10590: RET
// export function FindTarget ( unit ) ; begin
10591: LD_INT 0
10593: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_INT 81
10601: PUSH
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 255
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 69
10620: PPUSH
10621: LD_VAR 0 1
10625: PPUSH
10626: CALL_OW 74
10630: ST_TO_ADDR
// end ;
10631: LD_VAR 0 2
10635: RET
// export function NearestUnit ( unit ) ; begin
10636: LD_INT 0
10638: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_OWVAR 3
10648: PUSH
10649: LD_VAR 0 1
10653: DIFF
10654: PPUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 74
10664: ST_TO_ADDR
// end ; end_of_file
10665: LD_VAR 0 2
10669: RET
// every 12 12$00 do
10670: GO 10672
10672: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10673: LD_INT 1
10675: PPUSH
10676: LD_INT 570
10678: PPUSH
10679: LD_INT 350
10681: PPUSH
10682: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10686: LD_INT 10500
10688: PPUSH
10689: LD_INT 21000
10691: PPUSH
10692: CALL_OW 12
10696: PPUSH
10697: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10701: LD_INT 0
10703: PPUSH
10704: LD_INT 570
10706: PPUSH
10707: LD_INT 350
10709: PPUSH
10710: CALL_OW 550
// end ;
10714: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10715: LD_INT 0
10717: PPUSH
10718: PPUSH
10719: PPUSH
10720: PPUSH
10721: PPUSH
// uc_nation = nation_nature ;
10722: LD_ADDR_OWVAR 21
10726: PUSH
10727: LD_INT 0
10729: ST_TO_ADDR
// uc_side = 0 ;
10730: LD_ADDR_OWVAR 20
10734: PUSH
10735: LD_INT 0
10737: ST_TO_ADDR
// l = 0 ;
10738: LD_ADDR_VAR 0 6
10742: PUSH
10743: LD_INT 0
10745: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10746: LD_ADDR_OWVAR 24
10750: PUSH
10751: LD_INT 0
10753: PPUSH
10754: LD_INT 5
10756: PPUSH
10757: CALL_OW 12
10761: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10762: LD_ADDR_OWVAR 35
10766: PUSH
10767: LD_INT 5
10769: NEG
10770: PPUSH
10771: LD_INT 5
10773: PPUSH
10774: CALL_OW 12
10778: ST_TO_ADDR
// hc_gallery =  ;
10779: LD_ADDR_OWVAR 33
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hc_class = class_apeman ;
10787: LD_ADDR_OWVAR 28
10791: PUSH
10792: LD_INT 12
10794: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10795: LD_ADDR_OWVAR 29
10799: PUSH
10800: LD_INT 11
10802: PPUSH
10803: LD_INT 13
10805: PPUSH
10806: CALL_OW 12
10810: PUSH
10811: LD_INT 10
10813: PPUSH
10814: LD_INT 11
10816: PPUSH
10817: CALL_OW 12
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// hc_sex = sex_male ;
10826: LD_ADDR_OWVAR 27
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10834: LD_ADDR_OWVAR 31
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 2
10844: PPUSH
10845: CALL_OW 12
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: LD_INT 0
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// apeman = CreateHuman ;
10865: LD_ADDR_VAR 0 7
10869: PUSH
10870: CALL_OW 44
10874: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10875: LD_VAR 0 7
10879: PPUSH
10880: LD_VAR 0 4
10884: PPUSH
10885: LD_INT 0
10887: PPUSH
10888: CALL_OW 49
// l = l + 1 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_VAR 0 6
10901: PUSH
10902: LD_INT 1
10904: PLUS
10905: ST_TO_ADDR
// end until l = num1 ;
10906: LD_VAR 0 6
10910: PUSH
10911: LD_VAR 0 1
10915: EQUAL
10916: IFFALSE 10746
// l = 0 ;
10918: LD_ADDR_VAR 0 6
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10926: LD_ADDR_OWVAR 35
10930: PUSH
10931: LD_INT 0
10933: PPUSH
10934: LD_INT 25
10936: PPUSH
10937: CALL_OW 12
10941: ST_TO_ADDR
// hc_class = class_tiger ;
10942: LD_ADDR_OWVAR 28
10946: PUSH
10947: LD_INT 14
10949: ST_TO_ADDR
// hc_sex = sex_male ;
10950: LD_ADDR_OWVAR 27
10954: PUSH
10955: LD_INT 1
10957: ST_TO_ADDR
// hc_gallery = sandnature ;
10958: LD_ADDR_OWVAR 33
10962: PUSH
10963: LD_STRING sandnature
10965: ST_TO_ADDR
// hc_face_number = 3 ;
10966: LD_ADDR_OWVAR 34
10970: PUSH
10971: LD_INT 3
10973: ST_TO_ADDR
// tiger = CreateHuman ;
10974: LD_ADDR_VAR 0 8
10978: PUSH
10979: CALL_OW 44
10983: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10984: LD_VAR 0 8
10988: PPUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: LD_INT 0
10996: PPUSH
10997: CALL_OW 49
// l = l + 1 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_VAR 0 6
11010: PUSH
11011: LD_INT 1
11013: PLUS
11014: ST_TO_ADDR
// end until l = num2 ;
11015: LD_VAR 0 6
11019: PUSH
11020: LD_VAR 0 2
11024: EQUAL
11025: IFFALSE 10926
// l = 0 ;
11027: LD_ADDR_VAR 0 6
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11035: LD_ADDR_OWVAR 28
11039: PUSH
11040: LD_INT 18
11042: ST_TO_ADDR
// hc_gallery = sandnature ;
11043: LD_ADDR_OWVAR 33
11047: PUSH
11048: LD_STRING sandnature
11050: ST_TO_ADDR
// hc_face_number = 1 ;
11051: LD_ADDR_OWVAR 34
11055: PUSH
11056: LD_INT 1
11058: ST_TO_ADDR
// bird = CreateHuman ;
11059: LD_ADDR_VAR 0 9
11063: PUSH
11064: CALL_OW 44
11068: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11069: LD_VAR 0 9
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 51
// l = l + 1 ;
11081: LD_ADDR_VAR 0 6
11085: PUSH
11086: LD_VAR 0 6
11090: PUSH
11091: LD_INT 1
11093: PLUS
11094: ST_TO_ADDR
// end until l = num3 ;
11095: LD_VAR 0 6
11099: PUSH
11100: LD_VAR 0 3
11104: EQUAL
11105: IFFALSE 11035
// end ; end_of_file
11107: LD_VAR 0 5
11111: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
11112: LD_INT 0
11114: PPUSH
// ar_miner := 81 ;
11115: LD_ADDR_EXP 33
11119: PUSH
11120: LD_INT 81
11122: ST_TO_ADDR
// ar_crane := 88 ;
11123: LD_ADDR_EXP 32
11127: PUSH
11128: LD_INT 88
11130: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11131: LD_ADDR_EXP 27
11135: PUSH
11136: LD_INT 89
11138: ST_TO_ADDR
// us_hack := 99 ;
11139: LD_ADDR_EXP 28
11143: PUSH
11144: LD_INT 99
11146: ST_TO_ADDR
// us_artillery := 97 ;
11147: LD_ADDR_EXP 29
11151: PUSH
11152: LD_INT 97
11154: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11155: LD_ADDR_EXP 30
11159: PUSH
11160: LD_INT 91
11162: ST_TO_ADDR
// ar_mortar := 92 ;
11163: LD_ADDR_EXP 31
11167: PUSH
11168: LD_INT 92
11170: ST_TO_ADDR
// ru_flamethrower := 93 ;
11171: LD_ADDR_EXP 34
11175: PUSH
11176: LD_INT 93
11178: ST_TO_ADDR
// ru_radar := 98 ;
11179: LD_ADDR_EXP 26
11183: PUSH
11184: LD_INT 98
11186: ST_TO_ADDR
// tech_Artillery := 80 ;
11187: LD_ADDR_EXP 35
11191: PUSH
11192: LD_INT 80
11194: ST_TO_ADDR
// tech_RadMat := 81 ;
11195: LD_ADDR_EXP 36
11199: PUSH
11200: LD_INT 81
11202: ST_TO_ADDR
// tech_BasicTools := 82 ;
11203: LD_ADDR_EXP 37
11207: PUSH
11208: LD_INT 82
11210: ST_TO_ADDR
// tech_Cargo := 83 ;
11211: LD_ADDR_EXP 38
11215: PUSH
11216: LD_INT 83
11218: ST_TO_ADDR
// tech_Track := 84 ;
11219: LD_ADDR_EXP 39
11223: PUSH
11224: LD_INT 84
11226: ST_TO_ADDR
// tech_Crane := 85 ;
11227: LD_ADDR_EXP 40
11231: PUSH
11232: LD_INT 85
11234: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11235: LD_ADDR_EXP 41
11239: PUSH
11240: LD_INT 86
11242: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11243: LD_ADDR_EXP 42
11247: PUSH
11248: LD_INT 87
11250: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11251: LD_ADDR_EXP 43
11255: PUSH
11256: LD_INT 88
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 1
11263: RET
// every 1 do
11264: GO 11266
11266: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11267: CALL 11112 0 0
11271: END
// every 0 0$1 do
11272: GO 11274
11274: DISABLE
// begin enable ;
11275: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11276: LD_STRING updateTimer(
11278: PUSH
11279: LD_OWVAR 1
11283: STR
11284: PUSH
11285: LD_STRING );
11287: STR
11288: PPUSH
11289: CALL_OW 559
// end ;
11293: END
// export function SOS_MapStart ( ) ; begin
11294: LD_INT 0
11296: PPUSH
// if streamModeActive then
11297: LD_EXP 44
11301: IFFALSE 11310
// DefineStreamItems ( true ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 12964 0 1
// UpdateFactoryWaypoints ( ) ;
11310: CALL 25825 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11314: CALL 26082 0 0
// end ;
11318: LD_VAR 0 1
11322: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11323: LD_INT 0
11325: PPUSH
// if p2 = 100 then
11326: LD_VAR 0 2
11330: PUSH
11331: LD_INT 100
11333: EQUAL
11334: IFFALSE 12337
// begin if not StreamModeActive then
11336: LD_EXP 44
11340: NOT
11341: IFFALSE 11351
// StreamModeActive := true ;
11343: LD_ADDR_EXP 44
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 0 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 0
11358: EQUAL
11359: IFFALSE 11365
// InitStreamMode ;
11361: CALL 12500 0 0
// if p3 = 1 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 1
11372: EQUAL
11373: IFFALSE 11383
// sRocket := true ;
11375: LD_ADDR_EXP 49
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 2 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 2
11390: EQUAL
11391: IFFALSE 11401
// sSpeed := true ;
11393: LD_ADDR_EXP 48
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 3 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 3
11408: EQUAL
11409: IFFALSE 11419
// sEngine := true ;
11411: LD_ADDR_EXP 50
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 4 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 4
11426: EQUAL
11427: IFFALSE 11437
// sSpec := true ;
11429: LD_ADDR_EXP 47
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 5 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 5
11444: EQUAL
11445: IFFALSE 11455
// sLevel := true ;
11447: LD_ADDR_EXP 51
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 6 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 6
11462: EQUAL
11463: IFFALSE 11473
// sArmoury := true ;
11465: LD_ADDR_EXP 52
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 7 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 7
11480: EQUAL
11481: IFFALSE 11491
// sRadar := true ;
11483: LD_ADDR_EXP 53
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 8 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 8
11498: EQUAL
11499: IFFALSE 11509
// sBunker := true ;
11501: LD_ADDR_EXP 54
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 9 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 9
11516: EQUAL
11517: IFFALSE 11527
// sHack := true ;
11519: LD_ADDR_EXP 55
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 10 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 10
11534: EQUAL
11535: IFFALSE 11545
// sFire := true ;
11537: LD_ADDR_EXP 56
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 11 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 11
11552: EQUAL
11553: IFFALSE 11563
// sRefresh := true ;
11555: LD_ADDR_EXP 57
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 12 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 12
11570: EQUAL
11571: IFFALSE 11581
// sExp := true ;
11573: LD_ADDR_EXP 58
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 13 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 13
11588: EQUAL
11589: IFFALSE 11599
// sDepot := true ;
11591: LD_ADDR_EXP 59
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 14 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 14
11606: EQUAL
11607: IFFALSE 11617
// sFlag := true ;
11609: LD_ADDR_EXP 60
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 15 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 15
11624: EQUAL
11625: IFFALSE 11635
// sKamikadze := true ;
11627: LD_ADDR_EXP 68
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 16 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 16
11642: EQUAL
11643: IFFALSE 11653
// sTroll := true ;
11645: LD_ADDR_EXP 69
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 17 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 17
11660: EQUAL
11661: IFFALSE 11671
// sSlow := true ;
11663: LD_ADDR_EXP 70
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 18 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 18
11678: EQUAL
11679: IFFALSE 11689
// sLack := true ;
11681: LD_ADDR_EXP 71
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 19 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 19
11696: EQUAL
11697: IFFALSE 11707
// sTank := true ;
11699: LD_ADDR_EXP 73
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 20 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 20
11714: EQUAL
11715: IFFALSE 11725
// sRemote := true ;
11717: LD_ADDR_EXP 74
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 21 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 21
11732: EQUAL
11733: IFFALSE 11743
// sPowell := true ;
11735: LD_ADDR_EXP 75
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 22 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 22
11750: EQUAL
11751: IFFALSE 11761
// sTeleport := true ;
11753: LD_ADDR_EXP 78
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 23 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 23
11768: EQUAL
11769: IFFALSE 11779
// sOilTower := true ;
11771: LD_ADDR_EXP 80
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 24 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 24
11786: EQUAL
11787: IFFALSE 11797
// sShovel := true ;
11789: LD_ADDR_EXP 81
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 25 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 25
11804: EQUAL
11805: IFFALSE 11815
// sSheik := true ;
11807: LD_ADDR_EXP 82
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 26 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 26
11822: EQUAL
11823: IFFALSE 11833
// sEarthquake := true ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 27 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 27
11840: EQUAL
11841: IFFALSE 11851
// sAI := true ;
11843: LD_ADDR_EXP 85
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 28 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 28
11858: EQUAL
11859: IFFALSE 11869
// sCargo := true ;
11861: LD_ADDR_EXP 88
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 29 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 29
11876: EQUAL
11877: IFFALSE 11887
// sDLaser := true ;
11879: LD_ADDR_EXP 89
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 30 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 30
11894: EQUAL
11895: IFFALSE 11905
// sExchange := true ;
11897: LD_ADDR_EXP 90
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 31 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 31
11912: EQUAL
11913: IFFALSE 11923
// sFac := true ;
11915: LD_ADDR_EXP 91
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 32 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 32
11930: EQUAL
11931: IFFALSE 11941
// sPower := true ;
11933: LD_ADDR_EXP 92
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 33 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 33
11948: EQUAL
11949: IFFALSE 11959
// sRandom := true ;
11951: LD_ADDR_EXP 93
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 34 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 34
11966: EQUAL
11967: IFFALSE 11977
// sShield := true ;
11969: LD_ADDR_EXP 94
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 35 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 35
11984: EQUAL
11985: IFFALSE 11995
// sTime := true ;
11987: LD_ADDR_EXP 95
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 36 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 36
12002: EQUAL
12003: IFFALSE 12013
// sTools := true ;
12005: LD_ADDR_EXP 96
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 101 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 101
12020: EQUAL
12021: IFFALSE 12031
// sSold := true ;
12023: LD_ADDR_EXP 61
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 102 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 102
12038: EQUAL
12039: IFFALSE 12049
// sDiff := true ;
12041: LD_ADDR_EXP 62
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 103 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 103
12056: EQUAL
12057: IFFALSE 12067
// sFog := true ;
12059: LD_ADDR_EXP 65
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 104 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 104
12074: EQUAL
12075: IFFALSE 12085
// sReset := true ;
12077: LD_ADDR_EXP 66
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 105 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 105
12092: EQUAL
12093: IFFALSE 12103
// sSun := true ;
12095: LD_ADDR_EXP 67
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 106 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 106
12110: EQUAL
12111: IFFALSE 12121
// sTiger := true ;
12113: LD_ADDR_EXP 63
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 107 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 107
12128: EQUAL
12129: IFFALSE 12139
// sBomb := true ;
12131: LD_ADDR_EXP 64
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 108 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 108
12146: EQUAL
12147: IFFALSE 12157
// sWound := true ;
12149: LD_ADDR_EXP 72
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 109 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 109
12164: EQUAL
12165: IFFALSE 12175
// sBetray := true ;
12167: LD_ADDR_EXP 76
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 110 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 110
12182: EQUAL
12183: IFFALSE 12193
// sContamin := true ;
12185: LD_ADDR_EXP 77
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 111 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 111
12200: EQUAL
12201: IFFALSE 12211
// sOil := true ;
12203: LD_ADDR_EXP 79
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 112 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 112
12218: EQUAL
12219: IFFALSE 12229
// sStu := true ;
12221: LD_ADDR_EXP 83
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 113 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 113
12236: EQUAL
12237: IFFALSE 12247
// sBazooka := true ;
12239: LD_ADDR_EXP 86
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 114 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 114
12254: EQUAL
12255: IFFALSE 12265
// sMortar := true ;
12257: LD_ADDR_EXP 87
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 115 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 115
12272: EQUAL
12273: IFFALSE 12283
// sRanger := true ;
12275: LD_ADDR_EXP 97
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 116 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 116
12290: EQUAL
12291: IFFALSE 12301
// sComputer := true ;
12293: LD_ADDR_EXP 98
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 117 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 117
12308: EQUAL
12309: IFFALSE 12319
// s30 := true ;
12311: LD_ADDR_EXP 99
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 118 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 118
12326: EQUAL
12327: IFFALSE 12337
// s60 := true ;
12329: LD_ADDR_EXP 100
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// end ; if p2 = 101 then
12337: LD_VAR 0 2
12341: PUSH
12342: LD_INT 101
12344: EQUAL
12345: IFFALSE 12473
// begin case p3 of 1 :
12347: LD_VAR 0 3
12351: PUSH
12352: LD_INT 1
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12367
12360: POP
// hHackUnlimitedResources ; 2 :
12361: CALL 24571 0 0
12365: GO 12473
12367: LD_INT 2
12369: DOUBLE
12370: EQUAL
12371: IFTRUE 12375
12373: GO 12382
12375: POP
// hHackSetLevel10 ; 3 :
12376: CALL 24704 0 0
12380: GO 12473
12382: LD_INT 3
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12397
12390: POP
// hHackSetLevel10YourUnits ; 4 :
12391: CALL 24789 0 0
12395: GO 12473
12397: LD_INT 4
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12412
12405: POP
// hHackInvincible ; 5 :
12406: CALL 25237 0 0
12410: GO 12473
12412: LD_INT 5
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12427
12420: POP
// hHackInvisible ; 6 :
12421: CALL 25348 0 0
12425: GO 12473
12427: LD_INT 6
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12442
12435: POP
// hHackChangeYourSide ; 7 :
12436: CALL 25405 0 0
12440: GO 12473
12442: LD_INT 7
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12457
12450: POP
// hHackChangeUnitSide ; 8 :
12451: CALL 25447 0 0
12455: GO 12473
12457: LD_INT 8
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12472
12465: POP
// hHackFog ; end ;
12466: CALL 25548 0 0
12470: GO 12473
12472: POP
// end ; end ;
12473: LD_VAR 0 7
12477: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12478: GO 12480
12480: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12481: LD_STRING initStreamRollete();
12483: PPUSH
12484: CALL_OW 559
// InitStreamMode ;
12488: CALL 12500 0 0
// DefineStreamItems ( false ) ;
12492: LD_INT 0
12494: PPUSH
12495: CALL 12964 0 1
// end ;
12499: END
// function InitStreamMode ; begin
12500: LD_INT 0
12502: PPUSH
// streamModeActive := false ;
12503: LD_ADDR_EXP 44
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// normalCounter := 36 ;
12511: LD_ADDR_EXP 45
12515: PUSH
12516: LD_INT 36
12518: ST_TO_ADDR
// hardcoreCounter := 18 ;
12519: LD_ADDR_EXP 46
12523: PUSH
12524: LD_INT 18
12526: ST_TO_ADDR
// sRocket := false ;
12527: LD_ADDR_EXP 49
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// sSpeed := false ;
12535: LD_ADDR_EXP 48
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// sEngine := false ;
12543: LD_ADDR_EXP 50
12547: PUSH
12548: LD_INT 0
12550: ST_TO_ADDR
// sSpec := false ;
12551: LD_ADDR_EXP 47
12555: PUSH
12556: LD_INT 0
12558: ST_TO_ADDR
// sLevel := false ;
12559: LD_ADDR_EXP 51
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// sArmoury := false ;
12567: LD_ADDR_EXP 52
12571: PUSH
12572: LD_INT 0
12574: ST_TO_ADDR
// sRadar := false ;
12575: LD_ADDR_EXP 53
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// sBunker := false ;
12583: LD_ADDR_EXP 54
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// sHack := false ;
12591: LD_ADDR_EXP 55
12595: PUSH
12596: LD_INT 0
12598: ST_TO_ADDR
// sFire := false ;
12599: LD_ADDR_EXP 56
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// sRefresh := false ;
12607: LD_ADDR_EXP 57
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// sExp := false ;
12615: LD_ADDR_EXP 58
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// sDepot := false ;
12623: LD_ADDR_EXP 59
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// sFlag := false ;
12631: LD_ADDR_EXP 60
12635: PUSH
12636: LD_INT 0
12638: ST_TO_ADDR
// sKamikadze := false ;
12639: LD_ADDR_EXP 68
12643: PUSH
12644: LD_INT 0
12646: ST_TO_ADDR
// sTroll := false ;
12647: LD_ADDR_EXP 69
12651: PUSH
12652: LD_INT 0
12654: ST_TO_ADDR
// sSlow := false ;
12655: LD_ADDR_EXP 70
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// sLack := false ;
12663: LD_ADDR_EXP 71
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// sTank := false ;
12671: LD_ADDR_EXP 73
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// sRemote := false ;
12679: LD_ADDR_EXP 74
12683: PUSH
12684: LD_INT 0
12686: ST_TO_ADDR
// sPowell := false ;
12687: LD_ADDR_EXP 75
12691: PUSH
12692: LD_INT 0
12694: ST_TO_ADDR
// sTeleport := false ;
12695: LD_ADDR_EXP 78
12699: PUSH
12700: LD_INT 0
12702: ST_TO_ADDR
// sOilTower := false ;
12703: LD_ADDR_EXP 80
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// sShovel := false ;
12711: LD_ADDR_EXP 81
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// sSheik := false ;
12719: LD_ADDR_EXP 82
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// sEarthquake := false ;
12727: LD_ADDR_EXP 84
12731: PUSH
12732: LD_INT 0
12734: ST_TO_ADDR
// sAI := false ;
12735: LD_ADDR_EXP 85
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// sCargo := false ;
12743: LD_ADDR_EXP 88
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// sDLaser := false ;
12751: LD_ADDR_EXP 89
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// sExchange := false ;
12759: LD_ADDR_EXP 90
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sFac := false ;
12767: LD_ADDR_EXP 91
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sPower := false ;
12775: LD_ADDR_EXP 92
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sRandom := false ;
12783: LD_ADDR_EXP 93
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sShield := false ;
12791: LD_ADDR_EXP 94
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sTime := false ;
12799: LD_ADDR_EXP 95
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sTools := false ;
12807: LD_ADDR_EXP 96
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sSold := false ;
12815: LD_ADDR_EXP 61
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sDiff := false ;
12823: LD_ADDR_EXP 62
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sFog := false ;
12831: LD_ADDR_EXP 65
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sReset := false ;
12839: LD_ADDR_EXP 66
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sSun := false ;
12847: LD_ADDR_EXP 67
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sTiger := false ;
12855: LD_ADDR_EXP 63
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sBomb := false ;
12863: LD_ADDR_EXP 64
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sWound := false ;
12871: LD_ADDR_EXP 72
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sBetray := false ;
12879: LD_ADDR_EXP 76
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sContamin := false ;
12887: LD_ADDR_EXP 77
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sOil := false ;
12895: LD_ADDR_EXP 79
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sStu := false ;
12903: LD_ADDR_EXP 83
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sBazooka := false ;
12911: LD_ADDR_EXP 86
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sMortar := false ;
12919: LD_ADDR_EXP 87
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sRanger := false ;
12927: LD_ADDR_EXP 97
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sComputer := false ;
12935: LD_ADDR_EXP 98
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// s30 := false ;
12943: LD_ADDR_EXP 99
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// s60 := false ;
12951: LD_ADDR_EXP 100
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// end ;
12959: LD_VAR 0 1
12963: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12964: LD_INT 0
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
12970: PPUSH
12971: PPUSH
12972: PPUSH
// result := [ ] ;
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: EMPTY
12979: ST_TO_ADDR
// if campaign_id = 1 then
12980: LD_OWVAR 69
12984: PUSH
12985: LD_INT 1
12987: EQUAL
12988: IFFALSE 16154
// begin case mission_number of 1 :
12990: LD_OWVAR 70
12994: PUSH
12995: LD_INT 1
12997: DOUBLE
12998: EQUAL
12999: IFTRUE 13003
13001: GO 13079
13003: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: LD_INT 4
13014: PUSH
13015: LD_INT 11
13017: PUSH
13018: LD_INT 12
13020: PUSH
13021: LD_INT 15
13023: PUSH
13024: LD_INT 16
13026: PUSH
13027: LD_INT 22
13029: PUSH
13030: LD_INT 23
13032: PUSH
13033: LD_INT 26
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 101
13049: PUSH
13050: LD_INT 102
13052: PUSH
13053: LD_INT 106
13055: PUSH
13056: LD_INT 116
13058: PUSH
13059: LD_INT 117
13061: PUSH
13062: LD_INT 118
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: ST_TO_ADDR
13077: GO 16152
13079: LD_INT 2
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13171
13087: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: LD_INT 2
13095: PUSH
13096: LD_INT 4
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 12
13104: PUSH
13105: LD_INT 15
13107: PUSH
13108: LD_INT 16
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_INT 23
13116: PUSH
13117: LD_INT 26
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 101
13133: PUSH
13134: LD_INT 102
13136: PUSH
13137: LD_INT 105
13139: PUSH
13140: LD_INT 106
13142: PUSH
13143: LD_INT 108
13145: PUSH
13146: LD_INT 116
13148: PUSH
13149: LD_INT 117
13151: PUSH
13152: LD_INT 118
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: ST_TO_ADDR
13169: GO 16152
13171: LD_INT 3
13173: DOUBLE
13174: EQUAL
13175: IFTRUE 13179
13177: GO 13267
13179: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13180: LD_ADDR_VAR 0 2
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: LD_INT 4
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: LD_INT 11
13196: PUSH
13197: LD_INT 12
13199: PUSH
13200: LD_INT 15
13202: PUSH
13203: LD_INT 16
13205: PUSH
13206: LD_INT 22
13208: PUSH
13209: LD_INT 26
13211: PUSH
13212: LD_INT 36
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 101
13229: PUSH
13230: LD_INT 102
13232: PUSH
13233: LD_INT 105
13235: PUSH
13236: LD_INT 106
13238: PUSH
13239: LD_INT 108
13241: PUSH
13242: LD_INT 116
13244: PUSH
13245: LD_INT 117
13247: PUSH
13248: LD_INT 118
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: ST_TO_ADDR
13265: GO 16152
13267: LD_INT 4
13269: DOUBLE
13270: EQUAL
13271: IFTRUE 13275
13273: GO 13371
13275: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13276: LD_ADDR_VAR 0 2
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: LD_INT 4
13286: PUSH
13287: LD_INT 5
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 11
13295: PUSH
13296: LD_INT 12
13298: PUSH
13299: LD_INT 15
13301: PUSH
13302: LD_INT 16
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 23
13310: PUSH
13311: LD_INT 26
13313: PUSH
13314: LD_INT 36
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 101
13333: PUSH
13334: LD_INT 102
13336: PUSH
13337: LD_INT 105
13339: PUSH
13340: LD_INT 106
13342: PUSH
13343: LD_INT 108
13345: PUSH
13346: LD_INT 116
13348: PUSH
13349: LD_INT 117
13351: PUSH
13352: LD_INT 118
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 16152
13371: LD_INT 5
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13491
13379: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 4
13390: PUSH
13391: LD_INT 5
13393: PUSH
13394: LD_INT 6
13396: PUSH
13397: LD_INT 8
13399: PUSH
13400: LD_INT 11
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: LD_INT 15
13408: PUSH
13409: LD_INT 16
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 23
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 36
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 101
13445: PUSH
13446: LD_INT 102
13448: PUSH
13449: LD_INT 105
13451: PUSH
13452: LD_INT 106
13454: PUSH
13455: LD_INT 108
13457: PUSH
13458: LD_INT 109
13460: PUSH
13461: LD_INT 112
13463: PUSH
13464: LD_INT 116
13466: PUSH
13467: LD_INT 117
13469: PUSH
13470: LD_INT 118
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: ST_TO_ADDR
13489: GO 16152
13491: LD_INT 6
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13631
13499: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 5
13513: PUSH
13514: LD_INT 6
13516: PUSH
13517: LD_INT 8
13519: PUSH
13520: LD_INT 11
13522: PUSH
13523: LD_INT 12
13525: PUSH
13526: LD_INT 15
13528: PUSH
13529: LD_INT 16
13531: PUSH
13532: LD_INT 20
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 23
13543: PUSH
13544: LD_INT 25
13546: PUSH
13547: LD_INT 26
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 31
13555: PUSH
13556: LD_INT 32
13558: PUSH
13559: LD_INT 36
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 101
13585: PUSH
13586: LD_INT 102
13588: PUSH
13589: LD_INT 105
13591: PUSH
13592: LD_INT 106
13594: PUSH
13595: LD_INT 108
13597: PUSH
13598: LD_INT 109
13600: PUSH
13601: LD_INT 112
13603: PUSH
13604: LD_INT 116
13606: PUSH
13607: LD_INT 117
13609: PUSH
13610: LD_INT 118
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: ST_TO_ADDR
13629: GO 16152
13631: LD_INT 7
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13751
13639: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: LD_INT 7
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: LD_INT 16
13668: PUSH
13669: LD_INT 20
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 23
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 105
13714: PUSH
13715: LD_INT 106
13717: PUSH
13718: LD_INT 108
13720: PUSH
13721: LD_INT 112
13723: PUSH
13724: LD_INT 116
13726: PUSH
13727: LD_INT 117
13729: PUSH
13730: LD_INT 118
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: ST_TO_ADDR
13749: GO 16152
13751: LD_INT 8
13753: DOUBLE
13754: EQUAL
13755: IFTRUE 13759
13757: GO 13899
13759: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13760: LD_ADDR_VAR 0 2
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: LD_INT 6
13776: PUSH
13777: LD_INT 7
13779: PUSH
13780: LD_INT 8
13782: PUSH
13783: LD_INT 11
13785: PUSH
13786: LD_INT 12
13788: PUSH
13789: LD_INT 15
13791: PUSH
13792: LD_INT 16
13794: PUSH
13795: LD_INT 20
13797: PUSH
13798: LD_INT 21
13800: PUSH
13801: LD_INT 22
13803: PUSH
13804: LD_INT 23
13806: PUSH
13807: LD_INT 25
13809: PUSH
13810: LD_INT 26
13812: PUSH
13813: LD_INT 30
13815: PUSH
13816: LD_INT 31
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: LD_INT 36
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 101
13849: PUSH
13850: LD_INT 102
13852: PUSH
13853: LD_INT 103
13855: PUSH
13856: LD_INT 105
13858: PUSH
13859: LD_INT 106
13861: PUSH
13862: LD_INT 108
13864: PUSH
13865: LD_INT 109
13867: PUSH
13868: LD_INT 112
13870: PUSH
13871: LD_INT 116
13873: PUSH
13874: LD_INT 117
13876: PUSH
13877: LD_INT 118
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
13897: GO 16152
13899: LD_INT 9
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 14055
13907: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 4
13918: PUSH
13919: LD_INT 5
13921: PUSH
13922: LD_INT 6
13924: PUSH
13925: LD_INT 7
13927: PUSH
13928: LD_INT 8
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 12
13936: PUSH
13937: LD_INT 15
13939: PUSH
13940: LD_INT 16
13942: PUSH
13943: LD_INT 20
13945: PUSH
13946: LD_INT 21
13948: PUSH
13949: LD_INT 22
13951: PUSH
13952: LD_INT 23
13954: PUSH
13955: LD_INT 25
13957: PUSH
13958: LD_INT 26
13960: PUSH
13961: LD_INT 28
13963: PUSH
13964: LD_INT 30
13966: PUSH
13967: LD_INT 31
13969: PUSH
13970: LD_INT 32
13972: PUSH
13973: LD_INT 36
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 101
14001: PUSH
14002: LD_INT 102
14004: PUSH
14005: LD_INT 103
14007: PUSH
14008: LD_INT 105
14010: PUSH
14011: LD_INT 106
14013: PUSH
14014: LD_INT 108
14016: PUSH
14017: LD_INT 109
14019: PUSH
14020: LD_INT 112
14022: PUSH
14023: LD_INT 114
14025: PUSH
14026: LD_INT 116
14028: PUSH
14029: LD_INT 117
14031: PUSH
14032: LD_INT 118
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: ST_TO_ADDR
14053: GO 16152
14055: LD_INT 10
14057: DOUBLE
14058: EQUAL
14059: IFTRUE 14063
14061: GO 14259
14063: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_INT 2
14071: PUSH
14072: LD_INT 4
14074: PUSH
14075: LD_INT 5
14077: PUSH
14078: LD_INT 6
14080: PUSH
14081: LD_INT 7
14083: PUSH
14084: LD_INT 8
14086: PUSH
14087: LD_INT 9
14089: PUSH
14090: LD_INT 10
14092: PUSH
14093: LD_INT 11
14095: PUSH
14096: LD_INT 12
14098: PUSH
14099: LD_INT 13
14101: PUSH
14102: LD_INT 14
14104: PUSH
14105: LD_INT 15
14107: PUSH
14108: LD_INT 16
14110: PUSH
14111: LD_INT 17
14113: PUSH
14114: LD_INT 18
14116: PUSH
14117: LD_INT 19
14119: PUSH
14120: LD_INT 20
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 24
14134: PUSH
14135: LD_INT 25
14137: PUSH
14138: LD_INT 26
14140: PUSH
14141: LD_INT 28
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 31
14149: PUSH
14150: LD_INT 32
14152: PUSH
14153: LD_INT 36
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 101
14189: PUSH
14190: LD_INT 102
14192: PUSH
14193: LD_INT 103
14195: PUSH
14196: LD_INT 104
14198: PUSH
14199: LD_INT 105
14201: PUSH
14202: LD_INT 106
14204: PUSH
14205: LD_INT 107
14207: PUSH
14208: LD_INT 108
14210: PUSH
14211: LD_INT 109
14213: PUSH
14214: LD_INT 110
14216: PUSH
14217: LD_INT 111
14219: PUSH
14220: LD_INT 112
14222: PUSH
14223: LD_INT 114
14225: PUSH
14226: LD_INT 116
14228: PUSH
14229: LD_INT 117
14231: PUSH
14232: LD_INT 118
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: ST_TO_ADDR
14257: GO 16152
14259: LD_INT 11
14261: DOUBLE
14262: EQUAL
14263: IFTRUE 14267
14265: GO 14471
14267: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14268: LD_ADDR_VAR 0 2
14272: PUSH
14273: LD_INT 2
14275: PUSH
14276: LD_INT 3
14278: PUSH
14279: LD_INT 4
14281: PUSH
14282: LD_INT 5
14284: PUSH
14285: LD_INT 6
14287: PUSH
14288: LD_INT 7
14290: PUSH
14291: LD_INT 8
14293: PUSH
14294: LD_INT 9
14296: PUSH
14297: LD_INT 10
14299: PUSH
14300: LD_INT 11
14302: PUSH
14303: LD_INT 12
14305: PUSH
14306: LD_INT 13
14308: PUSH
14309: LD_INT 14
14311: PUSH
14312: LD_INT 15
14314: PUSH
14315: LD_INT 16
14317: PUSH
14318: LD_INT 17
14320: PUSH
14321: LD_INT 18
14323: PUSH
14324: LD_INT 19
14326: PUSH
14327: LD_INT 20
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 23
14338: PUSH
14339: LD_INT 24
14341: PUSH
14342: LD_INT 25
14344: PUSH
14345: LD_INT 26
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: LD_INT 30
14353: PUSH
14354: LD_INT 31
14356: PUSH
14357: LD_INT 32
14359: PUSH
14360: LD_INT 34
14362: PUSH
14363: LD_INT 36
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 101
14401: PUSH
14402: LD_INT 102
14404: PUSH
14405: LD_INT 103
14407: PUSH
14408: LD_INT 104
14410: PUSH
14411: LD_INT 105
14413: PUSH
14414: LD_INT 106
14416: PUSH
14417: LD_INT 107
14419: PUSH
14420: LD_INT 108
14422: PUSH
14423: LD_INT 109
14425: PUSH
14426: LD_INT 110
14428: PUSH
14429: LD_INT 111
14431: PUSH
14432: LD_INT 112
14434: PUSH
14435: LD_INT 114
14437: PUSH
14438: LD_INT 116
14440: PUSH
14441: LD_INT 117
14443: PUSH
14444: LD_INT 118
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: ST_TO_ADDR
14469: GO 16152
14471: LD_INT 12
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14699
14479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14480: LD_ADDR_VAR 0 2
14484: PUSH
14485: LD_INT 1
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 3
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: LD_INT 5
14499: PUSH
14500: LD_INT 6
14502: PUSH
14503: LD_INT 7
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: LD_INT 9
14511: PUSH
14512: LD_INT 10
14514: PUSH
14515: LD_INT 11
14517: PUSH
14518: LD_INT 12
14520: PUSH
14521: LD_INT 13
14523: PUSH
14524: LD_INT 14
14526: PUSH
14527: LD_INT 15
14529: PUSH
14530: LD_INT 16
14532: PUSH
14533: LD_INT 17
14535: PUSH
14536: LD_INT 18
14538: PUSH
14539: LD_INT 19
14541: PUSH
14542: LD_INT 20
14544: PUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 22
14550: PUSH
14551: LD_INT 23
14553: PUSH
14554: LD_INT 24
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 26
14562: PUSH
14563: LD_INT 27
14565: PUSH
14566: LD_INT 28
14568: PUSH
14569: LD_INT 30
14571: PUSH
14572: LD_INT 31
14574: PUSH
14575: LD_INT 32
14577: PUSH
14578: LD_INT 33
14580: PUSH
14581: LD_INT 34
14583: PUSH
14584: LD_INT 36
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 101
14625: PUSH
14626: LD_INT 102
14628: PUSH
14629: LD_INT 103
14631: PUSH
14632: LD_INT 104
14634: PUSH
14635: LD_INT 105
14637: PUSH
14638: LD_INT 106
14640: PUSH
14641: LD_INT 107
14643: PUSH
14644: LD_INT 108
14646: PUSH
14647: LD_INT 109
14649: PUSH
14650: LD_INT 110
14652: PUSH
14653: LD_INT 111
14655: PUSH
14656: LD_INT 112
14658: PUSH
14659: LD_INT 113
14661: PUSH
14662: LD_INT 114
14664: PUSH
14665: LD_INT 116
14667: PUSH
14668: LD_INT 117
14670: PUSH
14671: LD_INT 118
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: ST_TO_ADDR
14697: GO 16152
14699: LD_INT 13
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14915
14707: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_INT 1
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: LD_INT 5
14727: PUSH
14728: LD_INT 8
14730: PUSH
14731: LD_INT 9
14733: PUSH
14734: LD_INT 10
14736: PUSH
14737: LD_INT 11
14739: PUSH
14740: LD_INT 12
14742: PUSH
14743: LD_INT 14
14745: PUSH
14746: LD_INT 15
14748: PUSH
14749: LD_INT 16
14751: PUSH
14752: LD_INT 17
14754: PUSH
14755: LD_INT 18
14757: PUSH
14758: LD_INT 19
14760: PUSH
14761: LD_INT 20
14763: PUSH
14764: LD_INT 21
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 23
14772: PUSH
14773: LD_INT 24
14775: PUSH
14776: LD_INT 25
14778: PUSH
14779: LD_INT 26
14781: PUSH
14782: LD_INT 27
14784: PUSH
14785: LD_INT 28
14787: PUSH
14788: LD_INT 30
14790: PUSH
14791: LD_INT 31
14793: PUSH
14794: LD_INT 32
14796: PUSH
14797: LD_INT 33
14799: PUSH
14800: LD_INT 34
14802: PUSH
14803: LD_INT 36
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 101
14841: PUSH
14842: LD_INT 102
14844: PUSH
14845: LD_INT 103
14847: PUSH
14848: LD_INT 104
14850: PUSH
14851: LD_INT 105
14853: PUSH
14854: LD_INT 106
14856: PUSH
14857: LD_INT 107
14859: PUSH
14860: LD_INT 108
14862: PUSH
14863: LD_INT 109
14865: PUSH
14866: LD_INT 110
14868: PUSH
14869: LD_INT 111
14871: PUSH
14872: LD_INT 112
14874: PUSH
14875: LD_INT 113
14877: PUSH
14878: LD_INT 114
14880: PUSH
14881: LD_INT 116
14883: PUSH
14884: LD_INT 117
14886: PUSH
14887: LD_INT 118
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: ST_TO_ADDR
14913: GO 16152
14915: LD_INT 14
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 15147
14923: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14924: LD_ADDR_VAR 0 2
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: LD_INT 4
14940: PUSH
14941: LD_INT 5
14943: PUSH
14944: LD_INT 6
14946: PUSH
14947: LD_INT 7
14949: PUSH
14950: LD_INT 8
14952: PUSH
14953: LD_INT 9
14955: PUSH
14956: LD_INT 10
14958: PUSH
14959: LD_INT 11
14961: PUSH
14962: LD_INT 12
14964: PUSH
14965: LD_INT 13
14967: PUSH
14968: LD_INT 14
14970: PUSH
14971: LD_INT 15
14973: PUSH
14974: LD_INT 16
14976: PUSH
14977: LD_INT 17
14979: PUSH
14980: LD_INT 18
14982: PUSH
14983: LD_INT 19
14985: PUSH
14986: LD_INT 20
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 22
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 24
15000: PUSH
15001: LD_INT 25
15003: PUSH
15004: LD_INT 26
15006: PUSH
15007: LD_INT 27
15009: PUSH
15010: LD_INT 28
15012: PUSH
15013: LD_INT 29
15015: PUSH
15016: LD_INT 30
15018: PUSH
15019: LD_INT 31
15021: PUSH
15022: LD_INT 32
15024: PUSH
15025: LD_INT 33
15027: PUSH
15028: LD_INT 34
15030: PUSH
15031: LD_INT 36
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 101
15073: PUSH
15074: LD_INT 102
15076: PUSH
15077: LD_INT 103
15079: PUSH
15080: LD_INT 104
15082: PUSH
15083: LD_INT 105
15085: PUSH
15086: LD_INT 106
15088: PUSH
15089: LD_INT 107
15091: PUSH
15092: LD_INT 108
15094: PUSH
15095: LD_INT 109
15097: PUSH
15098: LD_INT 110
15100: PUSH
15101: LD_INT 111
15103: PUSH
15104: LD_INT 112
15106: PUSH
15107: LD_INT 113
15109: PUSH
15110: LD_INT 114
15112: PUSH
15113: LD_INT 116
15115: PUSH
15116: LD_INT 117
15118: PUSH
15119: LD_INT 118
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: ST_TO_ADDR
15145: GO 16152
15147: LD_INT 15
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15379
15155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15156: LD_ADDR_VAR 0 2
15160: PUSH
15161: LD_INT 1
15163: PUSH
15164: LD_INT 2
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: LD_INT 4
15172: PUSH
15173: LD_INT 5
15175: PUSH
15176: LD_INT 6
15178: PUSH
15179: LD_INT 7
15181: PUSH
15182: LD_INT 8
15184: PUSH
15185: LD_INT 9
15187: PUSH
15188: LD_INT 10
15190: PUSH
15191: LD_INT 11
15193: PUSH
15194: LD_INT 12
15196: PUSH
15197: LD_INT 13
15199: PUSH
15200: LD_INT 14
15202: PUSH
15203: LD_INT 15
15205: PUSH
15206: LD_INT 16
15208: PUSH
15209: LD_INT 17
15211: PUSH
15212: LD_INT 18
15214: PUSH
15215: LD_INT 19
15217: PUSH
15218: LD_INT 20
15220: PUSH
15221: LD_INT 21
15223: PUSH
15224: LD_INT 22
15226: PUSH
15227: LD_INT 23
15229: PUSH
15230: LD_INT 24
15232: PUSH
15233: LD_INT 25
15235: PUSH
15236: LD_INT 26
15238: PUSH
15239: LD_INT 27
15241: PUSH
15242: LD_INT 28
15244: PUSH
15245: LD_INT 29
15247: PUSH
15248: LD_INT 30
15250: PUSH
15251: LD_INT 31
15253: PUSH
15254: LD_INT 32
15256: PUSH
15257: LD_INT 33
15259: PUSH
15260: LD_INT 34
15262: PUSH
15263: LD_INT 36
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 101
15305: PUSH
15306: LD_INT 102
15308: PUSH
15309: LD_INT 103
15311: PUSH
15312: LD_INT 104
15314: PUSH
15315: LD_INT 105
15317: PUSH
15318: LD_INT 106
15320: PUSH
15321: LD_INT 107
15323: PUSH
15324: LD_INT 108
15326: PUSH
15327: LD_INT 109
15329: PUSH
15330: LD_INT 110
15332: PUSH
15333: LD_INT 111
15335: PUSH
15336: LD_INT 112
15338: PUSH
15339: LD_INT 113
15341: PUSH
15342: LD_INT 114
15344: PUSH
15345: LD_INT 116
15347: PUSH
15348: LD_INT 117
15350: PUSH
15351: LD_INT 118
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: ST_TO_ADDR
15377: GO 16152
15379: LD_INT 16
15381: DOUBLE
15382: EQUAL
15383: IFTRUE 15387
15385: GO 15523
15387: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 4
15398: PUSH
15399: LD_INT 5
15401: PUSH
15402: LD_INT 7
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 15
15413: PUSH
15414: LD_INT 16
15416: PUSH
15417: LD_INT 20
15419: PUSH
15420: LD_INT 21
15422: PUSH
15423: LD_INT 22
15425: PUSH
15426: LD_INT 23
15428: PUSH
15429: LD_INT 25
15431: PUSH
15432: LD_INT 26
15434: PUSH
15435: LD_INT 30
15437: PUSH
15438: LD_INT 31
15440: PUSH
15441: LD_INT 32
15443: PUSH
15444: LD_INT 33
15446: PUSH
15447: LD_INT 34
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 101
15473: PUSH
15474: LD_INT 102
15476: PUSH
15477: LD_INT 103
15479: PUSH
15480: LD_INT 106
15482: PUSH
15483: LD_INT 108
15485: PUSH
15486: LD_INT 112
15488: PUSH
15489: LD_INT 113
15491: PUSH
15492: LD_INT 114
15494: PUSH
15495: LD_INT 116
15497: PUSH
15498: LD_INT 117
15500: PUSH
15501: LD_INT 118
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: ST_TO_ADDR
15521: GO 16152
15523: LD_INT 17
15525: DOUBLE
15526: EQUAL
15527: IFTRUE 15531
15529: GO 15755
15531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: LD_INT 2
15542: PUSH
15543: LD_INT 3
15545: PUSH
15546: LD_INT 4
15548: PUSH
15549: LD_INT 5
15551: PUSH
15552: LD_INT 6
15554: PUSH
15555: LD_INT 7
15557: PUSH
15558: LD_INT 8
15560: PUSH
15561: LD_INT 9
15563: PUSH
15564: LD_INT 10
15566: PUSH
15567: LD_INT 11
15569: PUSH
15570: LD_INT 12
15572: PUSH
15573: LD_INT 13
15575: PUSH
15576: LD_INT 14
15578: PUSH
15579: LD_INT 15
15581: PUSH
15582: LD_INT 16
15584: PUSH
15585: LD_INT 17
15587: PUSH
15588: LD_INT 18
15590: PUSH
15591: LD_INT 19
15593: PUSH
15594: LD_INT 20
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_INT 23
15605: PUSH
15606: LD_INT 24
15608: PUSH
15609: LD_INT 25
15611: PUSH
15612: LD_INT 26
15614: PUSH
15615: LD_INT 27
15617: PUSH
15618: LD_INT 28
15620: PUSH
15621: LD_INT 29
15623: PUSH
15624: LD_INT 30
15626: PUSH
15627: LD_INT 31
15629: PUSH
15630: LD_INT 32
15632: PUSH
15633: LD_INT 33
15635: PUSH
15636: LD_INT 34
15638: PUSH
15639: LD_INT 36
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 101
15681: PUSH
15682: LD_INT 102
15684: PUSH
15685: LD_INT 103
15687: PUSH
15688: LD_INT 104
15690: PUSH
15691: LD_INT 105
15693: PUSH
15694: LD_INT 106
15696: PUSH
15697: LD_INT 107
15699: PUSH
15700: LD_INT 108
15702: PUSH
15703: LD_INT 109
15705: PUSH
15706: LD_INT 110
15708: PUSH
15709: LD_INT 111
15711: PUSH
15712: LD_INT 112
15714: PUSH
15715: LD_INT 113
15717: PUSH
15718: LD_INT 114
15720: PUSH
15721: LD_INT 116
15723: PUSH
15724: LD_INT 117
15726: PUSH
15727: LD_INT 118
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: ST_TO_ADDR
15753: GO 16152
15755: LD_INT 18
15757: DOUBLE
15758: EQUAL
15759: IFTRUE 15763
15761: GO 15911
15763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15764: LD_ADDR_VAR 0 2
15768: PUSH
15769: LD_INT 2
15771: PUSH
15772: LD_INT 4
15774: PUSH
15775: LD_INT 5
15777: PUSH
15778: LD_INT 7
15780: PUSH
15781: LD_INT 11
15783: PUSH
15784: LD_INT 12
15786: PUSH
15787: LD_INT 15
15789: PUSH
15790: LD_INT 16
15792: PUSH
15793: LD_INT 20
15795: PUSH
15796: LD_INT 21
15798: PUSH
15799: LD_INT 22
15801: PUSH
15802: LD_INT 23
15804: PUSH
15805: LD_INT 25
15807: PUSH
15808: LD_INT 26
15810: PUSH
15811: LD_INT 30
15813: PUSH
15814: LD_INT 31
15816: PUSH
15817: LD_INT 32
15819: PUSH
15820: LD_INT 33
15822: PUSH
15823: LD_INT 34
15825: PUSH
15826: LD_INT 35
15828: PUSH
15829: LD_INT 36
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 101
15857: PUSH
15858: LD_INT 102
15860: PUSH
15861: LD_INT 103
15863: PUSH
15864: LD_INT 106
15866: PUSH
15867: LD_INT 108
15869: PUSH
15870: LD_INT 112
15872: PUSH
15873: LD_INT 113
15875: PUSH
15876: LD_INT 114
15878: PUSH
15879: LD_INT 115
15881: PUSH
15882: LD_INT 116
15884: PUSH
15885: LD_INT 117
15887: PUSH
15888: LD_INT 118
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: ST_TO_ADDR
15909: GO 16152
15911: LD_INT 19
15913: DOUBLE
15914: EQUAL
15915: IFTRUE 15919
15917: GO 16151
15919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15920: LD_ADDR_VAR 0 2
15924: PUSH
15925: LD_INT 1
15927: PUSH
15928: LD_INT 2
15930: PUSH
15931: LD_INT 3
15933: PUSH
15934: LD_INT 4
15936: PUSH
15937: LD_INT 5
15939: PUSH
15940: LD_INT 6
15942: PUSH
15943: LD_INT 7
15945: PUSH
15946: LD_INT 8
15948: PUSH
15949: LD_INT 9
15951: PUSH
15952: LD_INT 10
15954: PUSH
15955: LD_INT 11
15957: PUSH
15958: LD_INT 12
15960: PUSH
15961: LD_INT 13
15963: PUSH
15964: LD_INT 14
15966: PUSH
15967: LD_INT 15
15969: PUSH
15970: LD_INT 16
15972: PUSH
15973: LD_INT 17
15975: PUSH
15976: LD_INT 18
15978: PUSH
15979: LD_INT 19
15981: PUSH
15982: LD_INT 20
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 22
15990: PUSH
15991: LD_INT 23
15993: PUSH
15994: LD_INT 24
15996: PUSH
15997: LD_INT 25
15999: PUSH
16000: LD_INT 26
16002: PUSH
16003: LD_INT 27
16005: PUSH
16006: LD_INT 28
16008: PUSH
16009: LD_INT 29
16011: PUSH
16012: LD_INT 30
16014: PUSH
16015: LD_INT 31
16017: PUSH
16018: LD_INT 32
16020: PUSH
16021: LD_INT 33
16023: PUSH
16024: LD_INT 34
16026: PUSH
16027: LD_INT 35
16029: PUSH
16030: LD_INT 36
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 101
16073: PUSH
16074: LD_INT 102
16076: PUSH
16077: LD_INT 103
16079: PUSH
16080: LD_INT 104
16082: PUSH
16083: LD_INT 105
16085: PUSH
16086: LD_INT 106
16088: PUSH
16089: LD_INT 107
16091: PUSH
16092: LD_INT 108
16094: PUSH
16095: LD_INT 109
16097: PUSH
16098: LD_INT 110
16100: PUSH
16101: LD_INT 111
16103: PUSH
16104: LD_INT 112
16106: PUSH
16107: LD_INT 113
16109: PUSH
16110: LD_INT 114
16112: PUSH
16113: LD_INT 115
16115: PUSH
16116: LD_INT 116
16118: PUSH
16119: LD_INT 117
16121: PUSH
16122: LD_INT 118
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: ST_TO_ADDR
16149: GO 16152
16151: POP
// end else
16152: GO 16383
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16154: LD_ADDR_VAR 0 2
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: LD_INT 4
16170: PUSH
16171: LD_INT 5
16173: PUSH
16174: LD_INT 6
16176: PUSH
16177: LD_INT 7
16179: PUSH
16180: LD_INT 8
16182: PUSH
16183: LD_INT 9
16185: PUSH
16186: LD_INT 10
16188: PUSH
16189: LD_INT 11
16191: PUSH
16192: LD_INT 12
16194: PUSH
16195: LD_INT 13
16197: PUSH
16198: LD_INT 14
16200: PUSH
16201: LD_INT 15
16203: PUSH
16204: LD_INT 16
16206: PUSH
16207: LD_INT 17
16209: PUSH
16210: LD_INT 18
16212: PUSH
16213: LD_INT 19
16215: PUSH
16216: LD_INT 20
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 22
16224: PUSH
16225: LD_INT 23
16227: PUSH
16228: LD_INT 24
16230: PUSH
16231: LD_INT 25
16233: PUSH
16234: LD_INT 26
16236: PUSH
16237: LD_INT 27
16239: PUSH
16240: LD_INT 28
16242: PUSH
16243: LD_INT 29
16245: PUSH
16246: LD_INT 30
16248: PUSH
16249: LD_INT 31
16251: PUSH
16252: LD_INT 32
16254: PUSH
16255: LD_INT 33
16257: PUSH
16258: LD_INT 34
16260: PUSH
16261: LD_INT 35
16263: PUSH
16264: LD_INT 36
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 101
16307: PUSH
16308: LD_INT 102
16310: PUSH
16311: LD_INT 103
16313: PUSH
16314: LD_INT 104
16316: PUSH
16317: LD_INT 105
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 107
16325: PUSH
16326: LD_INT 108
16328: PUSH
16329: LD_INT 109
16331: PUSH
16332: LD_INT 110
16334: PUSH
16335: LD_INT 111
16337: PUSH
16338: LD_INT 112
16340: PUSH
16341: LD_INT 113
16343: PUSH
16344: LD_INT 114
16346: PUSH
16347: LD_INT 115
16349: PUSH
16350: LD_INT 116
16352: PUSH
16353: LD_INT 117
16355: PUSH
16356: LD_INT 118
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: ST_TO_ADDR
// if result then
16383: LD_VAR 0 2
16387: IFFALSE 17173
// begin normal :=  ;
16389: LD_ADDR_VAR 0 5
16393: PUSH
16394: LD_STRING 
16396: ST_TO_ADDR
// hardcore :=  ;
16397: LD_ADDR_VAR 0 6
16401: PUSH
16402: LD_STRING 
16404: ST_TO_ADDR
// active :=  ;
16405: LD_ADDR_VAR 0 7
16409: PUSH
16410: LD_STRING 
16412: ST_TO_ADDR
// for i = 1 to normalCounter do
16413: LD_ADDR_VAR 0 8
16417: PUSH
16418: DOUBLE
16419: LD_INT 1
16421: DEC
16422: ST_TO_ADDR
16423: LD_EXP 45
16427: PUSH
16428: FOR_TO
16429: IFFALSE 16530
// begin tmp := 0 ;
16431: LD_ADDR_VAR 0 3
16435: PUSH
16436: LD_STRING 0
16438: ST_TO_ADDR
// if result [ 1 ] then
16439: LD_VAR 0 2
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: IFFALSE 16512
// if result [ 1 ] [ 1 ] = i then
16449: LD_VAR 0 2
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PUSH
16458: LD_INT 1
16460: ARRAY
16461: PUSH
16462: LD_VAR 0 8
16466: EQUAL
16467: IFFALSE 16512
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16469: LD_ADDR_VAR 0 2
16473: PUSH
16474: LD_VAR 0 2
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: LD_VAR 0 2
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 3
16498: PPUSH
16499: CALL_OW 1
16503: ST_TO_ADDR
// tmp := 1 ;
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_STRING 1
16511: ST_TO_ADDR
// end ; normal := normal & tmp ;
16512: LD_ADDR_VAR 0 5
16516: PUSH
16517: LD_VAR 0 5
16521: PUSH
16522: LD_VAR 0 3
16526: STR
16527: ST_TO_ADDR
// end ;
16528: GO 16428
16530: POP
16531: POP
// for i = 1 to hardcoreCounter do
16532: LD_ADDR_VAR 0 8
16536: PUSH
16537: DOUBLE
16538: LD_INT 1
16540: DEC
16541: ST_TO_ADDR
16542: LD_EXP 46
16546: PUSH
16547: FOR_TO
16548: IFFALSE 16653
// begin tmp := 0 ;
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_STRING 0
16557: ST_TO_ADDR
// if result [ 2 ] then
16558: LD_VAR 0 2
16562: PUSH
16563: LD_INT 2
16565: ARRAY
16566: IFFALSE 16635
// if result [ 2 ] [ 1 ] = 100 + i then
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: PUSH
16581: LD_INT 100
16583: PUSH
16584: LD_VAR 0 8
16588: PLUS
16589: EQUAL
16590: IFFALSE 16635
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16592: LD_ADDR_VAR 0 2
16596: PUSH
16597: LD_VAR 0 2
16601: PPUSH
16602: LD_INT 2
16604: PPUSH
16605: LD_VAR 0 2
16609: PUSH
16610: LD_INT 2
16612: ARRAY
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 3
16621: PPUSH
16622: CALL_OW 1
16626: ST_TO_ADDR
// tmp := 1 ;
16627: LD_ADDR_VAR 0 3
16631: PUSH
16632: LD_STRING 1
16634: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16635: LD_ADDR_VAR 0 6
16639: PUSH
16640: LD_VAR 0 6
16644: PUSH
16645: LD_VAR 0 3
16649: STR
16650: ST_TO_ADDR
// end ;
16651: GO 16547
16653: POP
16654: POP
// if isGameLoad then
16655: LD_VAR 0 1
16659: IFFALSE 17134
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_EXP 49
16670: PUSH
16671: LD_EXP 48
16675: PUSH
16676: LD_EXP 50
16680: PUSH
16681: LD_EXP 47
16685: PUSH
16686: LD_EXP 51
16690: PUSH
16691: LD_EXP 52
16695: PUSH
16696: LD_EXP 53
16700: PUSH
16701: LD_EXP 54
16705: PUSH
16706: LD_EXP 55
16710: PUSH
16711: LD_EXP 56
16715: PUSH
16716: LD_EXP 57
16720: PUSH
16721: LD_EXP 58
16725: PUSH
16726: LD_EXP 59
16730: PUSH
16731: LD_EXP 60
16735: PUSH
16736: LD_EXP 68
16740: PUSH
16741: LD_EXP 69
16745: PUSH
16746: LD_EXP 70
16750: PUSH
16751: LD_EXP 71
16755: PUSH
16756: LD_EXP 73
16760: PUSH
16761: LD_EXP 74
16765: PUSH
16766: LD_EXP 75
16770: PUSH
16771: LD_EXP 78
16775: PUSH
16776: LD_EXP 80
16780: PUSH
16781: LD_EXP 81
16785: PUSH
16786: LD_EXP 82
16790: PUSH
16791: LD_EXP 84
16795: PUSH
16796: LD_EXP 85
16800: PUSH
16801: LD_EXP 88
16805: PUSH
16806: LD_EXP 89
16810: PUSH
16811: LD_EXP 90
16815: PUSH
16816: LD_EXP 91
16820: PUSH
16821: LD_EXP 92
16825: PUSH
16826: LD_EXP 93
16830: PUSH
16831: LD_EXP 94
16835: PUSH
16836: LD_EXP 95
16840: PUSH
16841: LD_EXP 96
16845: PUSH
16846: LD_EXP 61
16850: PUSH
16851: LD_EXP 62
16855: PUSH
16856: LD_EXP 65
16860: PUSH
16861: LD_EXP 66
16865: PUSH
16866: LD_EXP 67
16870: PUSH
16871: LD_EXP 63
16875: PUSH
16876: LD_EXP 64
16880: PUSH
16881: LD_EXP 72
16885: PUSH
16886: LD_EXP 76
16890: PUSH
16891: LD_EXP 77
16895: PUSH
16896: LD_EXP 79
16900: PUSH
16901: LD_EXP 83
16905: PUSH
16906: LD_EXP 86
16910: PUSH
16911: LD_EXP 87
16915: PUSH
16916: LD_EXP 97
16920: PUSH
16921: LD_EXP 98
16925: PUSH
16926: LD_EXP 99
16930: PUSH
16931: LD_EXP 100
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: ST_TO_ADDR
// tmp :=  ;
16992: LD_ADDR_VAR 0 3
16996: PUSH
16997: LD_STRING 
16999: ST_TO_ADDR
// for i = 1 to normalCounter do
17000: LD_ADDR_VAR 0 8
17004: PUSH
17005: DOUBLE
17006: LD_INT 1
17008: DEC
17009: ST_TO_ADDR
17010: LD_EXP 45
17014: PUSH
17015: FOR_TO
17016: IFFALSE 17052
// begin if flags [ i ] then
17018: LD_VAR 0 4
17022: PUSH
17023: LD_VAR 0 8
17027: ARRAY
17028: IFFALSE 17050
// tmp := tmp & i & ; ;
17030: LD_ADDR_VAR 0 3
17034: PUSH
17035: LD_VAR 0 3
17039: PUSH
17040: LD_VAR 0 8
17044: STR
17045: PUSH
17046: LD_STRING ;
17048: STR
17049: ST_TO_ADDR
// end ;
17050: GO 17015
17052: POP
17053: POP
// for i = 1 to hardcoreCounter do
17054: LD_ADDR_VAR 0 8
17058: PUSH
17059: DOUBLE
17060: LD_INT 1
17062: DEC
17063: ST_TO_ADDR
17064: LD_EXP 46
17068: PUSH
17069: FOR_TO
17070: IFFALSE 17116
// begin if flags [ normalCounter + i ] then
17072: LD_VAR 0 4
17076: PUSH
17077: LD_EXP 45
17081: PUSH
17082: LD_VAR 0 8
17086: PLUS
17087: ARRAY
17088: IFFALSE 17114
// tmp := tmp & ( 100 + i ) & ; ;
17090: LD_ADDR_VAR 0 3
17094: PUSH
17095: LD_VAR 0 3
17099: PUSH
17100: LD_INT 100
17102: PUSH
17103: LD_VAR 0 8
17107: PLUS
17108: STR
17109: PUSH
17110: LD_STRING ;
17112: STR
17113: ST_TO_ADDR
// end ;
17114: GO 17069
17116: POP
17117: POP
// if tmp then
17118: LD_VAR 0 3
17122: IFFALSE 17134
// active := tmp ;
17124: LD_ADDR_VAR 0 7
17128: PUSH
17129: LD_VAR 0 3
17133: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17134: LD_STRING getStreamItemsFromMission("
17136: PUSH
17137: LD_VAR 0 5
17141: STR
17142: PUSH
17143: LD_STRING ","
17145: STR
17146: PUSH
17147: LD_VAR 0 6
17151: STR
17152: PUSH
17153: LD_STRING ","
17155: STR
17156: PUSH
17157: LD_VAR 0 7
17161: STR
17162: PUSH
17163: LD_STRING ")
17165: STR
17166: PPUSH
17167: CALL_OW 559
// end else
17171: GO 17180
// ToLua ( getStreamItemsFromMission("","","") ) ;
17173: LD_STRING getStreamItemsFromMission("","","")
17175: PPUSH
17176: CALL_OW 559
// end ;
17180: LD_VAR 0 2
17184: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17185: LD_EXP 44
17189: PUSH
17190: LD_EXP 49
17194: AND
17195: IFFALSE 17319
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
// begin enable ;
17204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: LD_INT 34
17227: PUSH
17228: LD_INT 7
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 34
17247: PUSH
17248: LD_INT 28
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 34
17257: PUSH
17258: LD_INT 47
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PPUSH
17276: CALL_OW 69
17280: ST_TO_ADDR
// if not tmp then
17281: LD_VAR 0 2
17285: NOT
17286: IFFALSE 17290
// exit ;
17288: GO 17319
// for i in tmp do
17290: LD_ADDR_VAR 0 1
17294: PUSH
17295: LD_VAR 0 2
17299: PUSH
17300: FOR_IN
17301: IFFALSE 17317
// begin SetLives ( i , 0 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 0
17310: PPUSH
17311: CALL_OW 234
// end ;
17315: GO 17300
17317: POP
17318: POP
// end ;
17319: PPOPN 2
17321: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17322: LD_EXP 44
17326: PUSH
17327: LD_EXP 50
17331: AND
17332: IFFALSE 17416
17334: GO 17336
17336: DISABLE
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// begin enable ;
17341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_OWVAR 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 32
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 69
17377: ST_TO_ADDR
// if not tmp then
17378: LD_VAR 0 2
17382: NOT
17383: IFFALSE 17387
// exit ;
17385: GO 17416
// for i in tmp do
17387: LD_ADDR_VAR 0 1
17391: PUSH
17392: LD_VAR 0 2
17396: PUSH
17397: FOR_IN
17398: IFFALSE 17414
// begin SetLives ( i , 0 ) ;
17400: LD_VAR 0 1
17404: PPUSH
17405: LD_INT 0
17407: PPUSH
17408: CALL_OW 234
// end ;
17412: GO 17397
17414: POP
17415: POP
// end ;
17416: PPOPN 2
17418: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17419: LD_EXP 44
17423: PUSH
17424: LD_EXP 47
17428: AND
17429: IFFALSE 17522
17431: GO 17433
17433: DISABLE
17434: LD_INT 0
17436: PPUSH
// begin enable ;
17437: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17438: LD_ADDR_VAR 0 1
17442: PUSH
17443: LD_INT 22
17445: PUSH
17446: LD_OWVAR 2
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 25
17460: PUSH
17461: LD_INT 5
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 25
17470: PUSH
17471: LD_INT 9
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 25
17480: PUSH
17481: LD_INT 8
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PPUSH
17498: CALL_OW 69
17502: PUSH
17503: FOR_IN
17504: IFFALSE 17520
// begin SetClass ( i , 1 ) ;
17506: LD_VAR 0 1
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 336
// end ;
17518: GO 17503
17520: POP
17521: POP
// end ;
17522: PPOPN 1
17524: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17525: LD_EXP 44
17529: PUSH
17530: LD_EXP 48
17534: AND
17535: PUSH
17536: LD_OWVAR 65
17540: PUSH
17541: LD_INT 7
17543: LESS
17544: AND
17545: IFFALSE 17559
17547: GO 17549
17549: DISABLE
// begin enable ;
17550: ENABLE
// game_speed := 7 ;
17551: LD_ADDR_OWVAR 65
17555: PUSH
17556: LD_INT 7
17558: ST_TO_ADDR
// end ;
17559: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17560: LD_EXP 44
17564: PUSH
17565: LD_EXP 51
17569: AND
17570: IFFALSE 17772
17572: GO 17574
17574: DISABLE
17575: LD_INT 0
17577: PPUSH
17578: PPUSH
17579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_INT 81
17587: PUSH
17588: LD_OWVAR 2
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 21
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: ST_TO_ADDR
// if not tmp then
17616: LD_VAR 0 3
17620: NOT
17621: IFFALSE 17625
// exit ;
17623: GO 17772
// if tmp > 5 then
17625: LD_VAR 0 3
17629: PUSH
17630: LD_INT 5
17632: GREATER
17633: IFFALSE 17645
// k := 5 else
17635: LD_ADDR_VAR 0 2
17639: PUSH
17640: LD_INT 5
17642: ST_TO_ADDR
17643: GO 17655
// k := tmp ;
17645: LD_ADDR_VAR 0 2
17649: PUSH
17650: LD_VAR 0 3
17654: ST_TO_ADDR
// for i := 1 to k do
17655: LD_ADDR_VAR 0 1
17659: PUSH
17660: DOUBLE
17661: LD_INT 1
17663: DEC
17664: ST_TO_ADDR
17665: LD_VAR 0 2
17669: PUSH
17670: FOR_TO
17671: IFFALSE 17770
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17673: LD_VAR 0 3
17677: PUSH
17678: LD_VAR 0 1
17682: ARRAY
17683: PPUSH
17684: LD_VAR 0 1
17688: PUSH
17689: LD_INT 4
17691: MOD
17692: PUSH
17693: LD_INT 1
17695: PLUS
17696: PPUSH
17697: CALL_OW 259
17701: PUSH
17702: LD_INT 10
17704: LESS
17705: IFFALSE 17768
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17707: LD_VAR 0 3
17711: PUSH
17712: LD_VAR 0 1
17716: ARRAY
17717: PPUSH
17718: LD_VAR 0 1
17722: PUSH
17723: LD_INT 4
17725: MOD
17726: PUSH
17727: LD_INT 1
17729: PLUS
17730: PPUSH
17731: LD_VAR 0 3
17735: PUSH
17736: LD_VAR 0 1
17740: ARRAY
17741: PPUSH
17742: LD_VAR 0 1
17746: PUSH
17747: LD_INT 4
17749: MOD
17750: PUSH
17751: LD_INT 1
17753: PLUS
17754: PPUSH
17755: CALL_OW 259
17759: PUSH
17760: LD_INT 1
17762: PLUS
17763: PPUSH
17764: CALL_OW 237
17768: GO 17670
17770: POP
17771: POP
// end ;
17772: PPOPN 3
17774: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17775: LD_EXP 44
17779: PUSH
17780: LD_EXP 52
17784: AND
17785: IFFALSE 17805
17787: GO 17789
17789: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17790: LD_INT 4
17792: PPUSH
17793: LD_OWVAR 2
17797: PPUSH
17798: LD_INT 0
17800: PPUSH
17801: CALL_OW 324
17805: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17806: LD_EXP 44
17810: PUSH
17811: LD_EXP 81
17815: AND
17816: IFFALSE 17836
17818: GO 17820
17820: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17821: LD_INT 19
17823: PPUSH
17824: LD_OWVAR 2
17828: PPUSH
17829: LD_INT 0
17831: PPUSH
17832: CALL_OW 324
17836: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17837: LD_EXP 44
17841: PUSH
17842: LD_EXP 53
17846: AND
17847: IFFALSE 17949
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// begin enable ;
17856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17857: LD_ADDR_VAR 0 2
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_OWVAR 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: LD_INT 34
17879: PUSH
17880: LD_INT 11
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 34
17889: PUSH
17890: LD_INT 30
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: ST_TO_ADDR
// if not tmp then
17911: LD_VAR 0 2
17915: NOT
17916: IFFALSE 17920
// exit ;
17918: GO 17949
// for i in tmp do
17920: LD_ADDR_VAR 0 1
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17947
// begin SetLives ( i , 0 ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_INT 0
17940: PPUSH
17941: CALL_OW 234
// end ;
17945: GO 17930
17947: POP
17948: POP
// end ;
17949: PPOPN 2
17951: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17952: LD_EXP 44
17956: PUSH
17957: LD_EXP 54
17961: AND
17962: IFFALSE 17982
17964: GO 17966
17966: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17967: LD_INT 32
17969: PPUSH
17970: LD_OWVAR 2
17974: PPUSH
17975: LD_INT 0
17977: PPUSH
17978: CALL_OW 324
17982: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17983: LD_EXP 44
17987: PUSH
17988: LD_EXP 55
17992: AND
17993: IFFALSE 18174
17995: GO 17997
17997: DISABLE
17998: LD_INT 0
18000: PPUSH
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 33
18022: PUSH
18023: LD_INT 3
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18174
// side := 0 ;
18048: LD_ADDR_VAR 0 3
18052: PUSH
18053: LD_INT 0
18055: ST_TO_ADDR
// for i := 1 to 8 do
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: DOUBLE
18062: LD_INT 1
18064: DEC
18065: ST_TO_ADDR
18066: LD_INT 8
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18118
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18072: LD_OWVAR 2
18076: PUSH
18077: LD_VAR 0 1
18081: NONEQUAL
18082: PUSH
18083: LD_OWVAR 2
18087: PPUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 81
18097: PUSH
18098: LD_INT 2
18100: EQUAL
18101: AND
18102: IFFALSE 18116
// begin side := i ;
18104: LD_ADDR_VAR 0 3
18108: PUSH
18109: LD_VAR 0 1
18113: ST_TO_ADDR
// break ;
18114: GO 18118
// end ;
18116: GO 18069
18118: POP
18119: POP
// if not side then
18120: LD_VAR 0 3
18124: NOT
18125: IFFALSE 18129
// exit ;
18127: GO 18174
// for i := 1 to tmp do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_VAR 0 2
18143: PUSH
18144: FOR_TO
18145: IFFALSE 18172
// if Prob ( 60 ) then
18147: LD_INT 60
18149: PPUSH
18150: CALL_OW 13
18154: IFFALSE 18170
// SetSide ( i , side ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: CALL_OW 235
18170: GO 18144
18172: POP
18173: POP
// end ;
18174: PPOPN 3
18176: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18177: LD_EXP 44
18181: PUSH
18182: LD_EXP 57
18186: AND
18187: IFFALSE 18306
18189: GO 18191
18191: DISABLE
18192: LD_INT 0
18194: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18195: LD_ADDR_VAR 0 1
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_OWVAR 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 21
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 3
18224: PUSH
18225: LD_INT 23
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: PUSH
18249: FOR_IN
18250: IFFALSE 18304
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 257
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 3
18270: PUSH
18271: LD_INT 4
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: IN
18280: IFFALSE 18302
// SetClass ( un , rand ( 1 , 4 ) ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: LD_INT 4
18292: PPUSH
18293: CALL_OW 12
18297: PPUSH
18298: CALL_OW 336
18302: GO 18249
18304: POP
18305: POP
// end ;
18306: PPOPN 1
18308: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18309: LD_EXP 44
18313: PUSH
18314: LD_EXP 56
18318: AND
18319: IFFALSE 18398
18321: GO 18323
18323: DISABLE
18324: LD_INT 0
18326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18327: LD_ADDR_VAR 0 1
18331: PUSH
18332: LD_INT 22
18334: PUSH
18335: LD_OWVAR 2
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 21
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PPUSH
18358: CALL_OW 69
18362: ST_TO_ADDR
// if not tmp then
18363: LD_VAR 0 1
18367: NOT
18368: IFFALSE 18372
// exit ;
18370: GO 18398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18372: LD_VAR 0 1
18376: PUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 12
18389: ARRAY
18390: PPUSH
18391: LD_INT 100
18393: PPUSH
18394: CALL_OW 234
// end ;
18398: PPOPN 1
18400: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18401: LD_EXP 44
18405: PUSH
18406: LD_EXP 58
18410: AND
18411: IFFALSE 18509
18413: GO 18415
18415: DISABLE
18416: LD_INT 0
18418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18419: LD_ADDR_VAR 0 1
18423: PUSH
18424: LD_INT 22
18426: PUSH
18427: LD_OWVAR 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 21
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: ST_TO_ADDR
// if not tmp then
18455: LD_VAR 0 1
18459: NOT
18460: IFFALSE 18464
// exit ;
18462: GO 18509
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18464: LD_VAR 0 1
18468: PUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 12
18481: ARRAY
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: LD_INT 4
18488: PPUSH
18489: CALL_OW 12
18493: PPUSH
18494: LD_INT 3000
18496: PPUSH
18497: LD_INT 9000
18499: PPUSH
18500: CALL_OW 12
18504: PPUSH
18505: CALL_OW 492
// end ;
18509: PPOPN 1
18511: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18512: LD_EXP 44
18516: PUSH
18517: LD_EXP 59
18521: AND
18522: IFFALSE 18542
18524: GO 18526
18526: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18527: LD_INT 1
18529: PPUSH
18530: LD_OWVAR 2
18534: PPUSH
18535: LD_INT 0
18537: PPUSH
18538: CALL_OW 324
18542: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18543: LD_EXP 44
18547: PUSH
18548: LD_EXP 60
18552: AND
18553: IFFALSE 18636
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18562: LD_ADDR_VAR 0 2
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_OWVAR 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 21
18581: PUSH
18582: LD_INT 3
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PPUSH
18593: CALL_OW 69
18597: ST_TO_ADDR
// if not tmp then
18598: LD_VAR 0 2
18602: NOT
18603: IFFALSE 18607
// exit ;
18605: GO 18636
// for i in tmp do
18607: LD_ADDR_VAR 0 1
18611: PUSH
18612: LD_VAR 0 2
18616: PUSH
18617: FOR_IN
18618: IFFALSE 18634
// SetBLevel ( i , 10 ) ;
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_INT 10
18627: PPUSH
18628: CALL_OW 241
18632: GO 18617
18634: POP
18635: POP
// end ;
18636: PPOPN 2
18638: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18639: LD_EXP 44
18643: PUSH
18644: LD_EXP 61
18648: AND
18649: IFFALSE 18760
18651: GO 18653
18653: DISABLE
18654: LD_INT 0
18656: PPUSH
18657: PPUSH
18658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18659: LD_ADDR_VAR 0 3
18663: PUSH
18664: LD_INT 22
18666: PUSH
18667: LD_OWVAR 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: ST_TO_ADDR
// if not tmp then
18695: LD_VAR 0 3
18699: NOT
18700: IFFALSE 18704
// exit ;
18702: GO 18760
// un := tmp [ rand ( 1 , tmp ) ] ;
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: LD_VAR 0 3
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: CALL_OW 12
18726: ARRAY
18727: ST_TO_ADDR
// if Crawls ( un ) then
18728: LD_VAR 0 2
18732: PPUSH
18733: CALL_OW 318
18737: IFFALSE 18748
// ComWalk ( un ) ;
18739: LD_VAR 0 2
18743: PPUSH
18744: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18748: LD_VAR 0 2
18752: PPUSH
18753: LD_INT 5
18755: PPUSH
18756: CALL_OW 336
// end ;
18760: PPOPN 3
18762: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18763: LD_EXP 44
18767: PUSH
18768: LD_EXP 62
18772: AND
18773: PUSH
18774: LD_OWVAR 67
18778: PUSH
18779: LD_INT 4
18781: LESS
18782: AND
18783: IFFALSE 18802
18785: GO 18787
18787: DISABLE
// begin Difficulty := Difficulty + 1 ;
18788: LD_ADDR_OWVAR 67
18792: PUSH
18793: LD_OWVAR 67
18797: PUSH
18798: LD_INT 1
18800: PLUS
18801: ST_TO_ADDR
// end ;
18802: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18803: LD_EXP 44
18807: PUSH
18808: LD_EXP 63
18812: AND
18813: IFFALSE 18916
18815: GO 18817
18817: DISABLE
18818: LD_INT 0
18820: PPUSH
// begin for i := 1 to 5 do
18821: LD_ADDR_VAR 0 1
18825: PUSH
18826: DOUBLE
18827: LD_INT 1
18829: DEC
18830: ST_TO_ADDR
18831: LD_INT 5
18833: PUSH
18834: FOR_TO
18835: IFFALSE 18914
// begin uc_nation := nation_nature ;
18837: LD_ADDR_OWVAR 21
18841: PUSH
18842: LD_INT 0
18844: ST_TO_ADDR
// uc_side := 0 ;
18845: LD_ADDR_OWVAR 20
18849: PUSH
18850: LD_INT 0
18852: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18853: LD_ADDR_OWVAR 29
18857: PUSH
18858: LD_INT 12
18860: PUSH
18861: LD_INT 12
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// hc_agressivity := 20 ;
18868: LD_ADDR_OWVAR 35
18872: PUSH
18873: LD_INT 20
18875: ST_TO_ADDR
// hc_class := class_tiger ;
18876: LD_ADDR_OWVAR 28
18880: PUSH
18881: LD_INT 14
18883: ST_TO_ADDR
// hc_gallery :=  ;
18884: LD_ADDR_OWVAR 33
18888: PUSH
18889: LD_STRING 
18891: ST_TO_ADDR
// hc_name :=  ;
18892: LD_ADDR_OWVAR 26
18896: PUSH
18897: LD_STRING 
18899: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18900: CALL_OW 44
18904: PPUSH
18905: LD_INT 0
18907: PPUSH
18908: CALL_OW 51
// end ;
18912: GO 18834
18914: POP
18915: POP
// end ;
18916: PPOPN 1
18918: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18919: LD_EXP 44
18923: PUSH
18924: LD_EXP 64
18928: AND
18929: IFFALSE 18938
18931: GO 18933
18933: DISABLE
// StreamSibBomb ;
18934: CALL 18939 0 0
18938: END
// export function StreamSibBomb ; var i , x , y ; begin
18939: LD_INT 0
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
// result := false ;
18945: LD_ADDR_VAR 0 1
18949: PUSH
18950: LD_INT 0
18952: ST_TO_ADDR
// for i := 1 to 16 do
18953: LD_ADDR_VAR 0 2
18957: PUSH
18958: DOUBLE
18959: LD_INT 1
18961: DEC
18962: ST_TO_ADDR
18963: LD_INT 16
18965: PUSH
18966: FOR_TO
18967: IFFALSE 19166
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18969: LD_ADDR_VAR 0 3
18973: PUSH
18974: LD_INT 10
18976: PUSH
18977: LD_INT 20
18979: PUSH
18980: LD_INT 30
18982: PUSH
18983: LD_INT 40
18985: PUSH
18986: LD_INT 50
18988: PUSH
18989: LD_INT 60
18991: PUSH
18992: LD_INT 70
18994: PUSH
18995: LD_INT 80
18997: PUSH
18998: LD_INT 90
19000: PUSH
19001: LD_INT 100
19003: PUSH
19004: LD_INT 110
19006: PUSH
19007: LD_INT 120
19009: PUSH
19010: LD_INT 130
19012: PUSH
19013: LD_INT 140
19015: PUSH
19016: LD_INT 150
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PPUSH
19039: LD_INT 15
19041: PPUSH
19042: CALL_OW 12
19046: ARRAY
19047: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19048: LD_ADDR_VAR 0 4
19052: PUSH
19053: LD_INT 10
19055: PUSH
19056: LD_INT 20
19058: PUSH
19059: LD_INT 30
19061: PUSH
19062: LD_INT 40
19064: PUSH
19065: LD_INT 50
19067: PUSH
19068: LD_INT 60
19070: PUSH
19071: LD_INT 70
19073: PUSH
19074: LD_INT 80
19076: PUSH
19077: LD_INT 90
19079: PUSH
19080: LD_INT 100
19082: PUSH
19083: LD_INT 110
19085: PUSH
19086: LD_INT 120
19088: PUSH
19089: LD_INT 130
19091: PUSH
19092: LD_INT 140
19094: PUSH
19095: LD_INT 150
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 15
19120: PPUSH
19121: CALL_OW 12
19125: ARRAY
19126: ST_TO_ADDR
// if ValidHex ( x , y ) then
19127: LD_VAR 0 3
19131: PPUSH
19132: LD_VAR 0 4
19136: PPUSH
19137: CALL_OW 488
19141: IFFALSE 19164
// begin result := [ x , y ] ;
19143: LD_ADDR_VAR 0 1
19147: PUSH
19148: LD_VAR 0 3
19152: PUSH
19153: LD_VAR 0 4
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: ST_TO_ADDR
// break ;
19162: GO 19166
// end ; end ;
19164: GO 18966
19166: POP
19167: POP
// if result then
19168: LD_VAR 0 1
19172: IFFALSE 19232
// begin ToLua ( playSibBomb() ) ;
19174: LD_STRING playSibBomb()
19176: PPUSH
19177: CALL_OW 559
// wait ( 0 0$14 ) ;
19181: LD_INT 490
19183: PPUSH
19184: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19188: LD_VAR 0 1
19192: PUSH
19193: LD_INT 1
19195: ARRAY
19196: PPUSH
19197: LD_VAR 0 1
19201: PUSH
19202: LD_INT 2
19204: ARRAY
19205: PPUSH
19206: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19210: LD_VAR 0 1
19214: PUSH
19215: LD_INT 1
19217: ARRAY
19218: PPUSH
19219: LD_VAR 0 1
19223: PUSH
19224: LD_INT 2
19226: ARRAY
19227: PPUSH
19228: CALL_OW 429
// end ; end ;
19232: LD_VAR 0 1
19236: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19237: LD_EXP 44
19241: PUSH
19242: LD_EXP 66
19246: AND
19247: IFFALSE 19259
19249: GO 19251
19251: DISABLE
// YouLost (  ) ;
19252: LD_STRING 
19254: PPUSH
19255: CALL_OW 104
19259: END
// every 0 0$1 trigger StreamModeActive and sFog do
19260: LD_EXP 44
19264: PUSH
19265: LD_EXP 65
19269: AND
19270: IFFALSE 19284
19272: GO 19274
19274: DISABLE
// FogOff ( your_side ) ;
19275: LD_OWVAR 2
19279: PPUSH
19280: CALL_OW 344
19284: END
// every 0 0$1 trigger StreamModeActive and sSun do
19285: LD_EXP 44
19289: PUSH
19290: LD_EXP 67
19294: AND
19295: IFFALSE 19323
19297: GO 19299
19299: DISABLE
// begin solar_recharge_percent := 0 ;
19300: LD_ADDR_OWVAR 79
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19308: LD_INT 10500
19310: PPUSH
19311: CALL_OW 67
// solar_recharge_percent := 100 ;
19315: LD_ADDR_OWVAR 79
19319: PUSH
19320: LD_INT 100
19322: ST_TO_ADDR
// end ;
19323: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19324: LD_EXP 44
19328: PUSH
19329: LD_EXP 68
19333: AND
19334: IFFALSE 19573
19336: GO 19338
19338: DISABLE
19339: LD_INT 0
19341: PPUSH
19342: PPUSH
19343: PPUSH
// begin tmp := [ ] ;
19344: LD_ADDR_VAR 0 3
19348: PUSH
19349: EMPTY
19350: ST_TO_ADDR
// for i := 1 to 6 do
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: DOUBLE
19357: LD_INT 1
19359: DEC
19360: ST_TO_ADDR
19361: LD_INT 6
19363: PUSH
19364: FOR_TO
19365: IFFALSE 19470
// begin uc_nation := nation_nature ;
19367: LD_ADDR_OWVAR 21
19371: PUSH
19372: LD_INT 0
19374: ST_TO_ADDR
// uc_side := 0 ;
19375: LD_ADDR_OWVAR 20
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19383: LD_ADDR_OWVAR 29
19387: PUSH
19388: LD_INT 12
19390: PUSH
19391: LD_INT 12
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: ST_TO_ADDR
// hc_agressivity := 20 ;
19398: LD_ADDR_OWVAR 35
19402: PUSH
19403: LD_INT 20
19405: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19406: LD_ADDR_OWVAR 28
19410: PUSH
19411: LD_INT 17
19413: ST_TO_ADDR
// hc_gallery :=  ;
19414: LD_ADDR_OWVAR 33
19418: PUSH
19419: LD_STRING 
19421: ST_TO_ADDR
// hc_name :=  ;
19422: LD_ADDR_OWVAR 26
19426: PUSH
19427: LD_STRING 
19429: ST_TO_ADDR
// un := CreateHuman ;
19430: LD_ADDR_VAR 0 2
19434: PUSH
19435: CALL_OW 44
19439: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19440: LD_VAR 0 2
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 51
// tmp := tmp ^ un ;
19452: LD_ADDR_VAR 0 3
19456: PUSH
19457: LD_VAR 0 3
19461: PUSH
19462: LD_VAR 0 2
19466: ADD
19467: ST_TO_ADDR
// end ;
19468: GO 19364
19470: POP
19471: POP
// repeat wait ( 0 0$1 ) ;
19472: LD_INT 35
19474: PPUSH
19475: CALL_OW 67
// for un in tmp do
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: LD_VAR 0 3
19488: PUSH
19489: FOR_IN
19490: IFFALSE 19564
// begin if IsDead ( un ) then
19492: LD_VAR 0 2
19496: PPUSH
19497: CALL_OW 301
19501: IFFALSE 19521
// begin tmp := tmp diff un ;
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_VAR 0 3
19512: PUSH
19513: LD_VAR 0 2
19517: DIFF
19518: ST_TO_ADDR
// continue ;
19519: GO 19489
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19521: LD_VAR 0 2
19525: PPUSH
19526: LD_INT 3
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 69
19547: PPUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 74
19557: PPUSH
19558: CALL_OW 115
// end ;
19562: GO 19489
19564: POP
19565: POP
// until not tmp ;
19566: LD_VAR 0 3
19570: NOT
19571: IFFALSE 19472
// end ;
19573: PPOPN 3
19575: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19576: LD_EXP 44
19580: PUSH
19581: LD_EXP 69
19585: AND
19586: IFFALSE 19640
19588: GO 19590
19590: DISABLE
// begin ToLua ( displayTroll(); ) ;
19591: LD_STRING displayTroll();
19593: PPUSH
19594: CALL_OW 559
// wait ( 3 3$00 ) ;
19598: LD_INT 6300
19600: PPUSH
19601: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19605: LD_STRING hideTroll();
19607: PPUSH
19608: CALL_OW 559
// wait ( 1 1$00 ) ;
19612: LD_INT 2100
19614: PPUSH
19615: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19619: LD_STRING displayTroll();
19621: PPUSH
19622: CALL_OW 559
// wait ( 1 1$00 ) ;
19626: LD_INT 2100
19628: PPUSH
19629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19633: LD_STRING hideTroll();
19635: PPUSH
19636: CALL_OW 559
// end ;
19640: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19641: LD_EXP 44
19645: PUSH
19646: LD_EXP 70
19650: AND
19651: IFFALSE 19714
19653: GO 19655
19655: DISABLE
19656: LD_INT 0
19658: PPUSH
// begin p := 0 ;
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_INT 0
19666: ST_TO_ADDR
// repeat game_speed := 1 ;
19667: LD_ADDR_OWVAR 65
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19675: LD_INT 35
19677: PPUSH
19678: CALL_OW 67
// p := p + 1 ;
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: PLUS
19695: ST_TO_ADDR
// until p >= 60 ;
19696: LD_VAR 0 1
19700: PUSH
19701: LD_INT 60
19703: GREATEREQUAL
19704: IFFALSE 19667
// game_speed := 4 ;
19706: LD_ADDR_OWVAR 65
19710: PUSH
19711: LD_INT 4
19713: ST_TO_ADDR
// end ;
19714: PPOPN 1
19716: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19717: LD_EXP 44
19721: PUSH
19722: LD_EXP 71
19726: AND
19727: IFFALSE 19873
19729: GO 19731
19731: DISABLE
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19736: LD_ADDR_VAR 0 1
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 30
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not depot then
19790: LD_VAR 0 1
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19873
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_VAR 0 1
19808: PUSH
19809: LD_INT 1
19811: PPUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 12
19821: ARRAY
19822: PPUSH
19823: CALL_OW 274
19827: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19828: LD_VAR 0 2
19832: PPUSH
19833: LD_INT 1
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19843: LD_VAR 0 2
19847: PPUSH
19848: LD_INT 2
19850: PPUSH
19851: LD_INT 0
19853: PPUSH
19854: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19858: LD_VAR 0 2
19862: PPUSH
19863: LD_INT 3
19865: PPUSH
19866: LD_INT 0
19868: PPUSH
19869: CALL_OW 277
// end ;
19873: PPOPN 2
19875: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19876: LD_EXP 44
19880: PUSH
19881: LD_EXP 72
19885: AND
19886: IFFALSE 19983
19888: GO 19890
19890: DISABLE
19891: LD_INT 0
19893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19894: LD_ADDR_VAR 0 1
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_OWVAR 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 21
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 3
19923: PUSH
19924: LD_INT 23
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: ST_TO_ADDR
// if not tmp then
19948: LD_VAR 0 1
19952: NOT
19953: IFFALSE 19957
// exit ;
19955: GO 19983
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19957: LD_VAR 0 1
19961: PUSH
19962: LD_INT 1
19964: PPUSH
19965: LD_VAR 0 1
19969: PPUSH
19970: CALL_OW 12
19974: ARRAY
19975: PPUSH
19976: LD_INT 200
19978: PPUSH
19979: CALL_OW 234
// end ;
19983: PPOPN 1
19985: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19986: LD_EXP 44
19990: PUSH
19991: LD_EXP 73
19995: AND
19996: IFFALSE 20075
19998: GO 20000
20000: DISABLE
20001: LD_INT 0
20003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20004: LD_ADDR_VAR 0 1
20008: PUSH
20009: LD_INT 22
20011: PUSH
20012: LD_OWVAR 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 21
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 1
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20049: LD_VAR 0 1
20053: PUSH
20054: LD_INT 1
20056: PPUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 12
20066: ARRAY
20067: PPUSH
20068: LD_INT 60
20070: PPUSH
20071: CALL_OW 234
// end ;
20075: PPOPN 1
20077: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20078: LD_EXP 44
20082: PUSH
20083: LD_EXP 74
20087: AND
20088: IFFALSE 20187
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
// begin enable ;
20097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20098: LD_ADDR_VAR 0 1
20102: PUSH
20103: LD_INT 22
20105: PUSH
20106: LD_OWVAR 2
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 61
20117: PUSH
20118: EMPTY
20119: LIST
20120: PUSH
20121: LD_INT 33
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: PPUSH
20136: CALL_OW 69
20140: ST_TO_ADDR
// if not tmp then
20141: LD_VAR 0 1
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20187
// for i in tmp do
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: LD_VAR 0 1
20159: PUSH
20160: FOR_IN
20161: IFFALSE 20185
// if IsControledBy ( i ) then
20163: LD_VAR 0 2
20167: PPUSH
20168: CALL_OW 312
20172: IFFALSE 20183
// ComUnlink ( i ) ;
20174: LD_VAR 0 2
20178: PPUSH
20179: CALL_OW 136
20183: GO 20160
20185: POP
20186: POP
// end ;
20187: PPOPN 2
20189: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20190: LD_EXP 44
20194: PUSH
20195: LD_EXP 75
20199: AND
20200: IFFALSE 20340
20202: GO 20204
20204: DISABLE
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
// begin ToLua ( displayPowell(); ) ;
20209: LD_STRING displayPowell();
20211: PPUSH
20212: CALL_OW 559
// uc_side := 0 ;
20216: LD_ADDR_OWVAR 20
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// uc_nation := 2 ;
20224: LD_ADDR_OWVAR 21
20228: PUSH
20229: LD_INT 2
20231: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20232: LD_ADDR_OWVAR 37
20236: PUSH
20237: LD_INT 14
20239: ST_TO_ADDR
// vc_engine := engine_siberite ;
20240: LD_ADDR_OWVAR 39
20244: PUSH
20245: LD_INT 3
20247: ST_TO_ADDR
// vc_control := control_apeman ;
20248: LD_ADDR_OWVAR 38
20252: PUSH
20253: LD_INT 5
20255: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20256: LD_ADDR_OWVAR 40
20260: PUSH
20261: LD_INT 29
20263: ST_TO_ADDR
// un := CreateVehicle ;
20264: LD_ADDR_VAR 0 2
20268: PUSH
20269: CALL_OW 45
20273: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20274: LD_VAR 0 2
20278: PPUSH
20279: LD_INT 1
20281: PPUSH
20282: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20286: LD_INT 35
20288: PPUSH
20289: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20293: LD_VAR 0 2
20297: PPUSH
20298: LD_INT 22
20300: PUSH
20301: LD_OWVAR 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 69
20314: PPUSH
20315: LD_VAR 0 2
20319: PPUSH
20320: CALL_OW 74
20324: PPUSH
20325: CALL_OW 115
// until IsDead ( un ) ;
20329: LD_VAR 0 2
20333: PPUSH
20334: CALL_OW 301
20338: IFFALSE 20286
// end ;
20340: PPOPN 2
20342: END
// every 0 0$1 trigger StreamModeActive and sStu do
20343: LD_EXP 44
20347: PUSH
20348: LD_EXP 83
20352: AND
20353: IFFALSE 20369
20355: GO 20357
20357: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20358: LD_STRING displayStucuk();
20360: PPUSH
20361: CALL_OW 559
// ResetFog ;
20365: CALL_OW 335
// end ;
20369: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20370: LD_EXP 44
20374: PUSH
20375: LD_EXP 76
20379: AND
20380: IFFALSE 20521
20382: GO 20384
20384: DISABLE
20385: LD_INT 0
20387: PPUSH
20388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20389: LD_ADDR_VAR 0 2
20393: PUSH
20394: LD_INT 22
20396: PUSH
20397: LD_OWVAR 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 21
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PPUSH
20420: CALL_OW 69
20424: ST_TO_ADDR
// if not tmp then
20425: LD_VAR 0 2
20429: NOT
20430: IFFALSE 20434
// exit ;
20432: GO 20521
// un := tmp [ rand ( 1 , tmp ) ] ;
20434: LD_ADDR_VAR 0 1
20438: PUSH
20439: LD_VAR 0 2
20443: PUSH
20444: LD_INT 1
20446: PPUSH
20447: LD_VAR 0 2
20451: PPUSH
20452: CALL_OW 12
20456: ARRAY
20457: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20458: LD_VAR 0 1
20462: PPUSH
20463: LD_INT 0
20465: PPUSH
20466: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20470: LD_VAR 0 1
20474: PPUSH
20475: LD_OWVAR 3
20479: PUSH
20480: LD_VAR 0 1
20484: DIFF
20485: PPUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 74
20495: PPUSH
20496: CALL_OW 115
// wait ( 0 0$20 ) ;
20500: LD_INT 700
20502: PPUSH
20503: CALL_OW 67
// SetSide ( un , your_side ) ;
20507: LD_VAR 0 1
20511: PPUSH
20512: LD_OWVAR 2
20516: PPUSH
20517: CALL_OW 235
// end ;
20521: PPOPN 2
20523: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20524: LD_EXP 44
20528: PUSH
20529: LD_EXP 77
20533: AND
20534: IFFALSE 20640
20536: GO 20538
20538: DISABLE
20539: LD_INT 0
20541: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20542: LD_ADDR_VAR 0 1
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_OWVAR 2
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 30
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 30
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PPUSH
20591: CALL_OW 69
20595: ST_TO_ADDR
// if not depot then
20596: LD_VAR 0 1
20600: NOT
20601: IFFALSE 20605
// exit ;
20603: GO 20640
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20605: LD_VAR 0 1
20609: PUSH
20610: LD_INT 1
20612: ARRAY
20613: PPUSH
20614: CALL_OW 250
20618: PPUSH
20619: LD_VAR 0 1
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PPUSH
20628: CALL_OW 251
20632: PPUSH
20633: LD_INT 70
20635: PPUSH
20636: CALL_OW 495
// end ;
20640: PPOPN 1
20642: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20643: LD_EXP 44
20647: PUSH
20648: LD_EXP 78
20652: AND
20653: IFFALSE 20864
20655: GO 20657
20657: DISABLE
20658: LD_INT 0
20660: PPUSH
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20665: LD_ADDR_VAR 0 5
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_OWVAR 2
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 21
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 69
20700: ST_TO_ADDR
// if not tmp then
20701: LD_VAR 0 5
20705: NOT
20706: IFFALSE 20710
// exit ;
20708: GO 20864
// for i in tmp do
20710: LD_ADDR_VAR 0 1
20714: PUSH
20715: LD_VAR 0 5
20719: PUSH
20720: FOR_IN
20721: IFFALSE 20862
// begin d := rand ( 0 , 5 ) ;
20723: LD_ADDR_VAR 0 4
20727: PUSH
20728: LD_INT 0
20730: PPUSH
20731: LD_INT 5
20733: PPUSH
20734: CALL_OW 12
20738: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20739: LD_ADDR_VAR 0 2
20743: PUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL_OW 250
20753: PPUSH
20754: LD_VAR 0 4
20758: PPUSH
20759: LD_INT 3
20761: PPUSH
20762: LD_INT 12
20764: PPUSH
20765: CALL_OW 12
20769: PPUSH
20770: CALL_OW 272
20774: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20775: LD_ADDR_VAR 0 3
20779: PUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 251
20789: PPUSH
20790: LD_VAR 0 4
20794: PPUSH
20795: LD_INT 3
20797: PPUSH
20798: LD_INT 12
20800: PPUSH
20801: CALL_OW 12
20805: PPUSH
20806: CALL_OW 273
20810: ST_TO_ADDR
// if ValidHex ( x , y ) then
20811: LD_VAR 0 2
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 488
20825: IFFALSE 20860
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_VAR 0 2
20836: PPUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_INT 3
20844: PPUSH
20845: LD_INT 6
20847: PPUSH
20848: CALL_OW 12
20852: PPUSH
20853: LD_INT 1
20855: PPUSH
20856: CALL_OW 483
// end ;
20860: GO 20720
20862: POP
20863: POP
// end ;
20864: PPOPN 5
20866: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20867: LD_EXP 44
20871: PUSH
20872: LD_EXP 79
20876: AND
20877: IFFALSE 20971
20879: GO 20881
20881: DISABLE
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20886: LD_ADDR_VAR 0 2
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_OWVAR 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 32
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 21
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PPUSH
20928: CALL_OW 69
20932: ST_TO_ADDR
// if not tmp then
20933: LD_VAR 0 2
20937: NOT
20938: IFFALSE 20942
// exit ;
20940: GO 20971
// for i in tmp do
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: LD_VAR 0 2
20951: PUSH
20952: FOR_IN
20953: IFFALSE 20969
// SetFuel ( i , 0 ) ;
20955: LD_VAR 0 1
20959: PPUSH
20960: LD_INT 0
20962: PPUSH
20963: CALL_OW 240
20967: GO 20952
20969: POP
20970: POP
// end ;
20971: PPOPN 2
20973: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20974: LD_EXP 44
20978: PUSH
20979: LD_EXP 80
20983: AND
20984: IFFALSE 21050
20986: GO 20988
20988: DISABLE
20989: LD_INT 0
20991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20992: LD_ADDR_VAR 0 1
20996: PUSH
20997: LD_INT 22
20999: PUSH
21000: LD_OWVAR 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 29
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: ST_TO_ADDR
// if not tmp then
21028: LD_VAR 0 1
21032: NOT
21033: IFFALSE 21037
// exit ;
21035: GO 21050
// DestroyUnit ( tmp [ 1 ] ) ;
21037: LD_VAR 0 1
21041: PUSH
21042: LD_INT 1
21044: ARRAY
21045: PPUSH
21046: CALL_OW 65
// end ;
21050: PPOPN 1
21052: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21053: LD_EXP 44
21057: PUSH
21058: LD_EXP 82
21062: AND
21063: IFFALSE 21192
21065: GO 21067
21067: DISABLE
21068: LD_INT 0
21070: PPUSH
// begin uc_side := 0 ;
21071: LD_ADDR_OWVAR 20
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// uc_nation := nation_arabian ;
21079: LD_ADDR_OWVAR 21
21083: PUSH
21084: LD_INT 2
21086: ST_TO_ADDR
// hc_gallery :=  ;
21087: LD_ADDR_OWVAR 33
21091: PUSH
21092: LD_STRING 
21094: ST_TO_ADDR
// hc_name :=  ;
21095: LD_ADDR_OWVAR 26
21099: PUSH
21100: LD_STRING 
21102: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21103: LD_INT 1
21105: PPUSH
21106: LD_INT 11
21108: PPUSH
21109: LD_INT 10
21111: PPUSH
21112: CALL_OW 380
// un := CreateHuman ;
21116: LD_ADDR_VAR 0 1
21120: PUSH
21121: CALL_OW 44
21125: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21126: LD_VAR 0 1
21130: PPUSH
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21138: LD_INT 35
21140: PPUSH
21141: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_INT 22
21152: PUSH
21153: LD_OWVAR 2
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: PPUSH
21167: LD_VAR 0 1
21171: PPUSH
21172: CALL_OW 74
21176: PPUSH
21177: CALL_OW 115
// until IsDead ( un ) ;
21181: LD_VAR 0 1
21185: PPUSH
21186: CALL_OW 301
21190: IFFALSE 21138
// end ;
21192: PPOPN 1
21194: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21195: LD_EXP 44
21199: PUSH
21200: LD_EXP 84
21204: AND
21205: IFFALSE 21217
21207: GO 21209
21209: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21210: LD_STRING earthquake(getX(game), 0, 32)
21212: PPUSH
21213: CALL_OW 559
21217: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21218: LD_EXP 44
21222: PUSH
21223: LD_EXP 85
21227: AND
21228: IFFALSE 21319
21230: GO 21232
21232: DISABLE
21233: LD_INT 0
21235: PPUSH
// begin enable ;
21236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21237: LD_ADDR_VAR 0 1
21241: PUSH
21242: LD_INT 22
21244: PUSH
21245: LD_OWVAR 2
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 33
21266: PUSH
21267: LD_INT 3
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PPUSH
21279: CALL_OW 69
21283: ST_TO_ADDR
// if not tmp then
21284: LD_VAR 0 1
21288: NOT
21289: IFFALSE 21293
// exit ;
21291: GO 21319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21293: LD_VAR 0 1
21297: PUSH
21298: LD_INT 1
21300: PPUSH
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL_OW 12
21310: ARRAY
21311: PPUSH
21312: LD_INT 1
21314: PPUSH
21315: CALL_OW 234
// end ;
21319: PPOPN 1
21321: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21322: LD_EXP 44
21326: PUSH
21327: LD_EXP 86
21331: AND
21332: IFFALSE 21473
21334: GO 21336
21336: DISABLE
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21342: LD_ADDR_VAR 0 3
21346: PUSH
21347: LD_INT 22
21349: PUSH
21350: LD_OWVAR 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 25
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PPUSH
21373: CALL_OW 69
21377: ST_TO_ADDR
// if not tmp then
21378: LD_VAR 0 3
21382: NOT
21383: IFFALSE 21387
// exit ;
21385: GO 21473
// un := tmp [ rand ( 1 , tmp ) ] ;
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_VAR 0 3
21396: PUSH
21397: LD_INT 1
21399: PPUSH
21400: LD_VAR 0 3
21404: PPUSH
21405: CALL_OW 12
21409: ARRAY
21410: ST_TO_ADDR
// if Crawls ( un ) then
21411: LD_VAR 0 2
21415: PPUSH
21416: CALL_OW 318
21420: IFFALSE 21431
// ComWalk ( un ) ;
21422: LD_VAR 0 2
21426: PPUSH
21427: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21431: LD_VAR 0 2
21435: PPUSH
21436: LD_INT 9
21438: PPUSH
21439: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21443: LD_INT 28
21445: PPUSH
21446: LD_OWVAR 2
21450: PPUSH
21451: LD_INT 2
21453: PPUSH
21454: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21458: LD_INT 29
21460: PPUSH
21461: LD_OWVAR 2
21465: PPUSH
21466: LD_INT 2
21468: PPUSH
21469: CALL_OW 322
// end ;
21473: PPOPN 3
21475: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21476: LD_EXP 44
21480: PUSH
21481: LD_EXP 87
21485: AND
21486: IFFALSE 21597
21488: GO 21490
21490: DISABLE
21491: LD_INT 0
21493: PPUSH
21494: PPUSH
21495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: LD_INT 22
21503: PUSH
21504: LD_OWVAR 2
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 25
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 69
21531: ST_TO_ADDR
// if not tmp then
21532: LD_VAR 0 3
21536: NOT
21537: IFFALSE 21541
// exit ;
21539: GO 21597
// un := tmp [ rand ( 1 , tmp ) ] ;
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_VAR 0 3
21550: PUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_VAR 0 3
21558: PPUSH
21559: CALL_OW 12
21563: ARRAY
21564: ST_TO_ADDR
// if Crawls ( un ) then
21565: LD_VAR 0 2
21569: PPUSH
21570: CALL_OW 318
21574: IFFALSE 21585
// ComWalk ( un ) ;
21576: LD_VAR 0 2
21580: PPUSH
21581: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21585: LD_VAR 0 2
21589: PPUSH
21590: LD_INT 8
21592: PPUSH
21593: CALL_OW 336
// end ;
21597: PPOPN 3
21599: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21600: LD_EXP 44
21604: PUSH
21605: LD_EXP 88
21609: AND
21610: IFFALSE 21754
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 22
21626: PUSH
21627: LD_OWVAR 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 34
21651: PUSH
21652: LD_INT 12
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 34
21661: PUSH
21662: LD_INT 51
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 34
21671: PUSH
21672: LD_INT 32
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: PPUSH
21690: CALL_OW 69
21694: ST_TO_ADDR
// if not tmp then
21695: LD_VAR 0 2
21699: NOT
21700: IFFALSE 21704
// exit ;
21702: GO 21754
// for i in tmp do
21704: LD_ADDR_VAR 0 1
21708: PUSH
21709: LD_VAR 0 2
21713: PUSH
21714: FOR_IN
21715: IFFALSE 21752
// if GetCargo ( i , mat_artifact ) = 0 then
21717: LD_VAR 0 1
21721: PPUSH
21722: LD_INT 4
21724: PPUSH
21725: CALL_OW 289
21729: PUSH
21730: LD_INT 0
21732: EQUAL
21733: IFFALSE 21750
// SetCargo ( i , mat_siberit , 100 ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: LD_INT 3
21742: PPUSH
21743: LD_INT 100
21745: PPUSH
21746: CALL_OW 290
21750: GO 21714
21752: POP
21753: POP
// end ;
21754: PPOPN 2
21756: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21757: LD_EXP 44
21761: PUSH
21762: LD_EXP 89
21766: AND
21767: IFFALSE 21950
21769: GO 21771
21771: DISABLE
21772: LD_INT 0
21774: PPUSH
21775: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21776: LD_ADDR_VAR 0 2
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_OWVAR 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PPUSH
21793: CALL_OW 69
21797: ST_TO_ADDR
// if not tmp then
21798: LD_VAR 0 2
21802: NOT
21803: IFFALSE 21807
// exit ;
21805: GO 21950
// for i := 1 to 2 do
21807: LD_ADDR_VAR 0 1
21811: PUSH
21812: DOUBLE
21813: LD_INT 1
21815: DEC
21816: ST_TO_ADDR
21817: LD_INT 2
21819: PUSH
21820: FOR_TO
21821: IFFALSE 21948
// begin uc_side := your_side ;
21823: LD_ADDR_OWVAR 20
21827: PUSH
21828: LD_OWVAR 2
21832: ST_TO_ADDR
// uc_nation := nation_american ;
21833: LD_ADDR_OWVAR 21
21837: PUSH
21838: LD_INT 1
21840: ST_TO_ADDR
// vc_chassis := us_morphling ;
21841: LD_ADDR_OWVAR 37
21845: PUSH
21846: LD_INT 5
21848: ST_TO_ADDR
// vc_engine := engine_siberite ;
21849: LD_ADDR_OWVAR 39
21853: PUSH
21854: LD_INT 3
21856: ST_TO_ADDR
// vc_control := control_computer ;
21857: LD_ADDR_OWVAR 38
21861: PUSH
21862: LD_INT 3
21864: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21865: LD_ADDR_OWVAR 40
21869: PUSH
21870: LD_INT 10
21872: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21873: LD_VAR 0 2
21877: PUSH
21878: LD_INT 1
21880: ARRAY
21881: PPUSH
21882: CALL_OW 310
21886: NOT
21887: IFFALSE 21934
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21889: CALL_OW 45
21893: PPUSH
21894: LD_VAR 0 2
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: PPUSH
21903: CALL_OW 250
21907: PPUSH
21908: LD_VAR 0 2
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: PPUSH
21917: CALL_OW 251
21921: PPUSH
21922: LD_INT 12
21924: PPUSH
21925: LD_INT 1
21927: PPUSH
21928: CALL_OW 50
21932: GO 21946
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21934: CALL_OW 45
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: CALL_OW 51
// end ;
21946: GO 21820
21948: POP
21949: POP
// end ;
21950: PPOPN 2
21952: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21953: LD_EXP 44
21957: PUSH
21958: LD_EXP 90
21962: AND
21963: IFFALSE 22185
21965: GO 21967
21967: DISABLE
21968: LD_INT 0
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21976: LD_ADDR_VAR 0 6
21980: PUSH
21981: LD_INT 22
21983: PUSH
21984: LD_OWVAR 2
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 21
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: LD_INT 23
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: PPUSH
22025: CALL_OW 69
22029: ST_TO_ADDR
// if not tmp then
22030: LD_VAR 0 6
22034: NOT
22035: IFFALSE 22039
// exit ;
22037: GO 22185
// s1 := rand ( 1 , 4 ) ;
22039: LD_ADDR_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: PPUSH
22047: LD_INT 4
22049: PPUSH
22050: CALL_OW 12
22054: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22055: LD_ADDR_VAR 0 4
22059: PUSH
22060: LD_VAR 0 6
22064: PUSH
22065: LD_INT 1
22067: ARRAY
22068: PPUSH
22069: LD_VAR 0 2
22073: PPUSH
22074: CALL_OW 259
22078: ST_TO_ADDR
// if s1 = 1 then
22079: LD_VAR 0 2
22083: PUSH
22084: LD_INT 1
22086: EQUAL
22087: IFFALSE 22107
// s2 := rand ( 2 , 4 ) else
22089: LD_ADDR_VAR 0 3
22093: PUSH
22094: LD_INT 2
22096: PPUSH
22097: LD_INT 4
22099: PPUSH
22100: CALL_OW 12
22104: ST_TO_ADDR
22105: GO 22115
// s2 := 1 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_INT 1
22114: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22115: LD_ADDR_VAR 0 5
22119: PUSH
22120: LD_VAR 0 6
22124: PUSH
22125: LD_INT 1
22127: ARRAY
22128: PPUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: CALL_OW 259
22138: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22139: LD_VAR 0 6
22143: PUSH
22144: LD_INT 1
22146: ARRAY
22147: PPUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22162: LD_VAR 0 6
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: PPUSH
22171: LD_VAR 0 3
22175: PPUSH
22176: LD_VAR 0 4
22180: PPUSH
22181: CALL_OW 237
// end ;
22185: PPOPN 6
22187: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22188: LD_EXP 44
22192: PUSH
22193: LD_EXP 91
22197: AND
22198: IFFALSE 22277
22200: GO 22202
22202: DISABLE
22203: LD_INT 0
22205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 30
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ST_TO_ADDR
// if not tmp then
22242: LD_VAR 0 1
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22251: LD_VAR 0 1
22255: PUSH
22256: LD_INT 1
22258: PPUSH
22259: LD_VAR 0 1
22263: PPUSH
22264: CALL_OW 12
22268: ARRAY
22269: PPUSH
22270: LD_INT 1
22272: PPUSH
22273: CALL_OW 234
// end ;
22277: PPOPN 1
22279: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22280: LD_EXP 44
22284: PUSH
22285: LD_EXP 92
22289: AND
22290: IFFALSE 22402
22292: GO 22294
22294: DISABLE
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22299: LD_ADDR_VAR 0 2
22303: PUSH
22304: LD_INT 22
22306: PUSH
22307: LD_OWVAR 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 27
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 30
22331: PUSH
22332: LD_INT 26
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 30
22341: PUSH
22342: LD_INT 28
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: ST_TO_ADDR
// if not tmp then
22364: LD_VAR 0 2
22368: NOT
22369: IFFALSE 22373
// exit ;
22371: GO 22402
// for i in tmp do
22373: LD_ADDR_VAR 0 1
22377: PUSH
22378: LD_VAR 0 2
22382: PUSH
22383: FOR_IN
22384: IFFALSE 22400
// SetLives ( i , 1 ) ;
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_INT 1
22393: PPUSH
22394: CALL_OW 234
22398: GO 22383
22400: POP
22401: POP
// end ;
22402: PPOPN 2
22404: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22405: LD_EXP 44
22409: PUSH
22410: LD_EXP 93
22414: AND
22415: IFFALSE 22702
22417: GO 22419
22419: DISABLE
22420: LD_INT 0
22422: PPUSH
22423: PPUSH
22424: PPUSH
// begin i := rand ( 1 , 7 ) ;
22425: LD_ADDR_VAR 0 1
22429: PUSH
22430: LD_INT 1
22432: PPUSH
22433: LD_INT 7
22435: PPUSH
22436: CALL_OW 12
22440: ST_TO_ADDR
// case i of 1 :
22441: LD_VAR 0 1
22445: PUSH
22446: LD_INT 1
22448: DOUBLE
22449: EQUAL
22450: IFTRUE 22454
22452: GO 22464
22454: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22455: LD_STRING earthquake(getX(game), 0, 32)
22457: PPUSH
22458: CALL_OW 559
22462: GO 22702
22464: LD_INT 2
22466: DOUBLE
22467: EQUAL
22468: IFTRUE 22472
22470: GO 22486
22472: POP
// begin ToLua ( displayStucuk(); ) ;
22473: LD_STRING displayStucuk();
22475: PPUSH
22476: CALL_OW 559
// ResetFog ;
22480: CALL_OW 335
// end ; 3 :
22484: GO 22702
22486: LD_INT 3
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22494
22492: GO 22598
22494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22495: LD_ADDR_VAR 0 2
22499: PUSH
22500: LD_INT 22
22502: PUSH
22503: LD_OWVAR 2
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 25
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PPUSH
22526: CALL_OW 69
22530: ST_TO_ADDR
// if not tmp then
22531: LD_VAR 0 2
22535: NOT
22536: IFFALSE 22540
// exit ;
22538: GO 22702
// un := tmp [ rand ( 1 , tmp ) ] ;
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_VAR 0 2
22549: PUSH
22550: LD_INT 1
22552: PPUSH
22553: LD_VAR 0 2
22557: PPUSH
22558: CALL_OW 12
22562: ARRAY
22563: ST_TO_ADDR
// if Crawls ( un ) then
22564: LD_VAR 0 3
22568: PPUSH
22569: CALL_OW 318
22573: IFFALSE 22584
// ComWalk ( un ) ;
22575: LD_VAR 0 3
22579: PPUSH
22580: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22584: LD_VAR 0 3
22588: PPUSH
22589: LD_INT 8
22591: PPUSH
22592: CALL_OW 336
// end ; 4 :
22596: GO 22702
22598: LD_INT 4
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22680
22606: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 22
22614: PUSH
22615: LD_OWVAR 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 30
22626: PUSH
22627: LD_INT 29
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PPUSH
22638: CALL_OW 69
22642: ST_TO_ADDR
// if not tmp then
22643: LD_VAR 0 2
22647: NOT
22648: IFFALSE 22652
// exit ;
22650: GO 22702
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22652: LD_VAR 0 2
22656: PUSH
22657: LD_INT 1
22659: ARRAY
22660: PPUSH
22661: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22665: LD_VAR 0 2
22669: PUSH
22670: LD_INT 1
22672: ARRAY
22673: PPUSH
22674: CALL_OW 65
// end ; 5 .. 7 :
22678: GO 22702
22680: LD_INT 5
22682: DOUBLE
22683: GREATEREQUAL
22684: IFFALSE 22692
22686: LD_INT 7
22688: DOUBLE
22689: LESSEQUAL
22690: IFTRUE 22694
22692: GO 22701
22694: POP
// StreamSibBomb ; end ;
22695: CALL 18939 0 0
22699: GO 22702
22701: POP
// end ;
22702: PPOPN 3
22704: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22705: LD_EXP 44
22709: PUSH
22710: LD_EXP 94
22714: AND
22715: IFFALSE 22871
22717: GO 22719
22719: DISABLE
22720: LD_INT 0
22722: PPUSH
22723: PPUSH
22724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22725: LD_ADDR_VAR 0 2
22729: PUSH
22730: LD_INT 81
22732: PUSH
22733: LD_OWVAR 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 21
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PPUSH
22774: CALL_OW 69
22778: ST_TO_ADDR
// if not tmp then
22779: LD_VAR 0 2
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 22871
// p := 0 ;
22788: LD_ADDR_VAR 0 3
22792: PUSH
22793: LD_INT 0
22795: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22796: LD_INT 35
22798: PPUSH
22799: CALL_OW 67
// p := p + 1 ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_VAR 0 3
22812: PUSH
22813: LD_INT 1
22815: PLUS
22816: ST_TO_ADDR
// for i in tmp do
22817: LD_ADDR_VAR 0 1
22821: PUSH
22822: LD_VAR 0 2
22826: PUSH
22827: FOR_IN
22828: IFFALSE 22859
// if GetLives ( i ) < 1000 then
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 256
22839: PUSH
22840: LD_INT 1000
22842: LESS
22843: IFFALSE 22857
// SetLives ( i , 1000 ) ;
22845: LD_VAR 0 1
22849: PPUSH
22850: LD_INT 1000
22852: PPUSH
22853: CALL_OW 234
22857: GO 22827
22859: POP
22860: POP
// until p > 20 ;
22861: LD_VAR 0 3
22865: PUSH
22866: LD_INT 20
22868: GREATER
22869: IFFALSE 22796
// end ;
22871: PPOPN 3
22873: END
// every 0 0$1 trigger StreamModeActive and sTime do
22874: LD_EXP 44
22878: PUSH
22879: LD_EXP 95
22883: AND
22884: IFFALSE 22919
22886: GO 22888
22888: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22889: LD_INT 28
22891: PPUSH
22892: LD_OWVAR 2
22896: PPUSH
22897: LD_INT 2
22899: PPUSH
22900: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22904: LD_INT 30
22906: PPUSH
22907: LD_OWVAR 2
22911: PPUSH
22912: LD_INT 2
22914: PPUSH
22915: CALL_OW 322
// end ;
22919: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22920: LD_EXP 44
22924: PUSH
22925: LD_EXP 96
22929: AND
22930: IFFALSE 23051
22932: GO 22934
22934: DISABLE
22935: LD_INT 0
22937: PPUSH
22938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_INT 22
22946: PUSH
22947: LD_OWVAR 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 21
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: LD_INT 23
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: PPUSH
22988: CALL_OW 69
22992: ST_TO_ADDR
// if not tmp then
22993: LD_VAR 0 2
22997: NOT
22998: IFFALSE 23002
// exit ;
23000: GO 23051
// for i in tmp do
23002: LD_ADDR_VAR 0 1
23006: PUSH
23007: LD_VAR 0 2
23011: PUSH
23012: FOR_IN
23013: IFFALSE 23049
// begin if Crawls ( i ) then
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 318
23024: IFFALSE 23035
// ComWalk ( i ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 138
// SetClass ( i , 2 ) ;
23035: LD_VAR 0 1
23039: PPUSH
23040: LD_INT 2
23042: PPUSH
23043: CALL_OW 336
// end ;
23047: GO 23012
23049: POP
23050: POP
// end ;
23051: PPOPN 2
23053: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23054: LD_EXP 44
23058: PUSH
23059: LD_EXP 97
23063: AND
23064: IFFALSE 23352
23066: GO 23068
23068: DISABLE
23069: LD_INT 0
23071: PPUSH
23072: PPUSH
23073: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23074: LD_OWVAR 2
23078: PPUSH
23079: LD_INT 9
23081: PPUSH
23082: LD_INT 1
23084: PPUSH
23085: LD_INT 1
23087: PPUSH
23088: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23092: LD_INT 9
23094: PPUSH
23095: LD_OWVAR 2
23099: PPUSH
23100: CALL_OW 343
// uc_side := 9 ;
23104: LD_ADDR_OWVAR 20
23108: PUSH
23109: LD_INT 9
23111: ST_TO_ADDR
// uc_nation := 2 ;
23112: LD_ADDR_OWVAR 21
23116: PUSH
23117: LD_INT 2
23119: ST_TO_ADDR
// hc_name := Dark Warrior ;
23120: LD_ADDR_OWVAR 26
23124: PUSH
23125: LD_STRING Dark Warrior
23127: ST_TO_ADDR
// hc_gallery :=  ;
23128: LD_ADDR_OWVAR 33
23132: PUSH
23133: LD_STRING 
23135: ST_TO_ADDR
// hc_noskilllimit := true ;
23136: LD_ADDR_OWVAR 76
23140: PUSH
23141: LD_INT 1
23143: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23144: LD_ADDR_OWVAR 31
23148: PUSH
23149: LD_INT 30
23151: PUSH
23152: LD_INT 30
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 30
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: ST_TO_ADDR
// un := CreateHuman ;
23167: LD_ADDR_VAR 0 3
23171: PUSH
23172: CALL_OW 44
23176: ST_TO_ADDR
// hc_noskilllimit := false ;
23177: LD_ADDR_OWVAR 76
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23185: LD_VAR 0 3
23189: PPUSH
23190: LD_INT 1
23192: PPUSH
23193: CALL_OW 51
// ToLua ( playRanger() ) ;
23197: LD_STRING playRanger()
23199: PPUSH
23200: CALL_OW 559
// p := 0 ;
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: LD_INT 0
23211: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23212: LD_INT 35
23214: PPUSH
23215: CALL_OW 67
// p := p + 1 ;
23219: LD_ADDR_VAR 0 2
23223: PUSH
23224: LD_VAR 0 2
23228: PUSH
23229: LD_INT 1
23231: PLUS
23232: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23233: LD_VAR 0 3
23237: PPUSH
23238: CALL_OW 256
23242: PUSH
23243: LD_INT 1000
23245: LESS
23246: IFFALSE 23260
// SetLives ( un , 1000 ) ;
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 1000
23255: PPUSH
23256: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23260: LD_VAR 0 3
23264: PPUSH
23265: LD_INT 81
23267: PUSH
23268: LD_OWVAR 2
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 91
23279: PUSH
23280: LD_VAR 0 3
23284: PUSH
23285: LD_INT 30
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: PPUSH
23302: LD_VAR 0 3
23306: PPUSH
23307: CALL_OW 74
23311: PPUSH
23312: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23316: LD_VAR 0 2
23320: PUSH
23321: LD_INT 80
23323: GREATER
23324: PUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 301
23334: OR
23335: IFFALSE 23212
// if un then
23337: LD_VAR 0 3
23341: IFFALSE 23352
// RemoveUnit ( un ) ;
23343: LD_VAR 0 3
23347: PPUSH
23348: CALL_OW 64
// end ;
23352: PPOPN 3
23354: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23355: LD_EXP 98
23359: IFFALSE 23475
23361: GO 23363
23363: DISABLE
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23369: LD_ADDR_VAR 0 2
23373: PUSH
23374: LD_INT 81
23376: PUSH
23377: LD_OWVAR 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23405: LD_STRING playComputer()
23407: PPUSH
23408: CALL_OW 559
// if not tmp then
23412: LD_VAR 0 2
23416: NOT
23417: IFFALSE 23421
// exit ;
23419: GO 23475
// for i in tmp do
23421: LD_ADDR_VAR 0 1
23425: PUSH
23426: LD_VAR 0 2
23430: PUSH
23431: FOR_IN
23432: IFFALSE 23473
// for j := 1 to 4 do
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: DOUBLE
23440: LD_INT 1
23442: DEC
23443: ST_TO_ADDR
23444: LD_INT 4
23446: PUSH
23447: FOR_TO
23448: IFFALSE 23469
// SetSkill ( i , j , 10 ) ;
23450: LD_VAR 0 1
23454: PPUSH
23455: LD_VAR 0 3
23459: PPUSH
23460: LD_INT 10
23462: PPUSH
23463: CALL_OW 237
23467: GO 23447
23469: POP
23470: POP
23471: GO 23431
23473: POP
23474: POP
// end ;
23475: PPOPN 3
23477: END
// every 0 0$1 trigger s30 do var i , tmp ;
23478: LD_EXP 99
23482: IFFALSE 23551
23484: GO 23486
23486: DISABLE
23487: LD_INT 0
23489: PPUSH
23490: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23491: LD_ADDR_VAR 0 2
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_OWVAR 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PPUSH
23508: CALL_OW 69
23512: ST_TO_ADDR
// if not tmp then
23513: LD_VAR 0 2
23517: NOT
23518: IFFALSE 23522
// exit ;
23520: GO 23551
// for i in tmp do
23522: LD_ADDR_VAR 0 1
23526: PUSH
23527: LD_VAR 0 2
23531: PUSH
23532: FOR_IN
23533: IFFALSE 23549
// SetLives ( i , 300 ) ;
23535: LD_VAR 0 1
23539: PPUSH
23540: LD_INT 300
23542: PPUSH
23543: CALL_OW 234
23547: GO 23532
23549: POP
23550: POP
// end ;
23551: PPOPN 2
23553: END
// every 0 0$1 trigger s60 do var i , tmp ;
23554: LD_EXP 100
23558: IFFALSE 23627
23560: GO 23562
23562: DISABLE
23563: LD_INT 0
23565: PPUSH
23566: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23567: LD_ADDR_VAR 0 2
23571: PUSH
23572: LD_INT 22
23574: PUSH
23575: LD_OWVAR 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PPUSH
23584: CALL_OW 69
23588: ST_TO_ADDR
// if not tmp then
23589: LD_VAR 0 2
23593: NOT
23594: IFFALSE 23598
// exit ;
23596: GO 23627
// for i in tmp do
23598: LD_ADDR_VAR 0 1
23602: PUSH
23603: LD_VAR 0 2
23607: PUSH
23608: FOR_IN
23609: IFFALSE 23625
// SetLives ( i , 600 ) ;
23611: LD_VAR 0 1
23615: PPUSH
23616: LD_INT 600
23618: PPUSH
23619: CALL_OW 234
23623: GO 23608
23625: POP
23626: POP
// end ;
23627: PPOPN 2
23629: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23630: LD_INT 0
23632: PPUSH
// case cmd of 301 :
23633: LD_VAR 0 1
23637: PUSH
23638: LD_INT 301
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23678
23646: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23647: LD_VAR 0 6
23651: PPUSH
23652: LD_VAR 0 7
23656: PPUSH
23657: LD_VAR 0 8
23661: PPUSH
23662: LD_VAR 0 4
23666: PPUSH
23667: LD_VAR 0 5
23671: PPUSH
23672: CALL 24879 0 5
23676: GO 23799
23678: LD_INT 302
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23723
23686: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23687: LD_VAR 0 6
23691: PPUSH
23692: LD_VAR 0 7
23696: PPUSH
23697: LD_VAR 0 8
23701: PPUSH
23702: LD_VAR 0 9
23706: PPUSH
23707: LD_VAR 0 4
23711: PPUSH
23712: LD_VAR 0 5
23716: PPUSH
23717: CALL 24970 0 6
23721: GO 23799
23723: LD_INT 303
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23768
23731: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23732: LD_VAR 0 6
23736: PPUSH
23737: LD_VAR 0 7
23741: PPUSH
23742: LD_VAR 0 8
23746: PPUSH
23747: LD_VAR 0 9
23751: PPUSH
23752: LD_VAR 0 4
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: CALL 23804 0 6
23766: GO 23799
23768: LD_INT 304
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23798
23776: POP
// hHackTeleport ( unit , x , y ) ; end ;
23777: LD_VAR 0 2
23781: PPUSH
23782: LD_VAR 0 4
23786: PPUSH
23787: LD_VAR 0 5
23791: PPUSH
23792: CALL 25563 0 3
23796: GO 23799
23798: POP
// end ;
23799: LD_VAR 0 12
23803: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23808: LD_VAR 0 1
23812: PUSH
23813: LD_INT 1
23815: LESS
23816: PUSH
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 3
23824: GREATER
23825: OR
23826: PUSH
23827: LD_VAR 0 5
23831: PPUSH
23832: LD_VAR 0 6
23836: PPUSH
23837: CALL_OW 428
23841: OR
23842: IFFALSE 23846
// exit ;
23844: GO 24566
// uc_side := your_side ;
23846: LD_ADDR_OWVAR 20
23850: PUSH
23851: LD_OWVAR 2
23855: ST_TO_ADDR
// uc_nation := nation ;
23856: LD_ADDR_OWVAR 21
23860: PUSH
23861: LD_VAR 0 1
23865: ST_TO_ADDR
// bc_level = 1 ;
23866: LD_ADDR_OWVAR 43
23870: PUSH
23871: LD_INT 1
23873: ST_TO_ADDR
// case btype of 1 :
23874: LD_VAR 0 2
23878: PUSH
23879: LD_INT 1
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23887
23885: GO 23898
23887: POP
// bc_type := b_depot ; 2 :
23888: LD_ADDR_OWVAR 42
23892: PUSH
23893: LD_INT 0
23895: ST_TO_ADDR
23896: GO 24510
23898: LD_INT 2
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23917
23906: POP
// bc_type := b_warehouse ; 3 :
23907: LD_ADDR_OWVAR 42
23911: PUSH
23912: LD_INT 1
23914: ST_TO_ADDR
23915: GO 24510
23917: LD_INT 3
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 23936
23925: POP
// bc_type := b_lab ; 4 .. 9 :
23926: LD_ADDR_OWVAR 42
23930: PUSH
23931: LD_INT 6
23933: ST_TO_ADDR
23934: GO 24510
23936: LD_INT 4
23938: DOUBLE
23939: GREATEREQUAL
23940: IFFALSE 23948
23942: LD_INT 9
23944: DOUBLE
23945: LESSEQUAL
23946: IFTRUE 23950
23948: GO 24002
23950: POP
// begin bc_type := b_lab_half ;
23951: LD_ADDR_OWVAR 42
23955: PUSH
23956: LD_INT 7
23958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23959: LD_ADDR_OWVAR 44
23963: PUSH
23964: LD_INT 10
23966: PUSH
23967: LD_INT 11
23969: PUSH
23970: LD_INT 12
23972: PUSH
23973: LD_INT 15
23975: PUSH
23976: LD_INT 14
23978: PUSH
23979: LD_INT 13
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: LD_VAR 0 2
23994: PUSH
23995: LD_INT 3
23997: MINUS
23998: ARRAY
23999: ST_TO_ADDR
// end ; 10 .. 13 :
24000: GO 24510
24002: LD_INT 10
24004: DOUBLE
24005: GREATEREQUAL
24006: IFFALSE 24014
24008: LD_INT 13
24010: DOUBLE
24011: LESSEQUAL
24012: IFTRUE 24016
24014: GO 24093
24016: POP
// begin bc_type := b_lab_full ;
24017: LD_ADDR_OWVAR 42
24021: PUSH
24022: LD_INT 8
24024: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24025: LD_ADDR_OWVAR 44
24029: PUSH
24030: LD_INT 10
24032: PUSH
24033: LD_INT 12
24035: PUSH
24036: LD_INT 14
24038: PUSH
24039: LD_INT 13
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: LD_VAR 0 2
24052: PUSH
24053: LD_INT 9
24055: MINUS
24056: ARRAY
24057: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24058: LD_ADDR_OWVAR 45
24062: PUSH
24063: LD_INT 11
24065: PUSH
24066: LD_INT 15
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: LD_INT 15
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: PUSH
24081: LD_VAR 0 2
24085: PUSH
24086: LD_INT 9
24088: MINUS
24089: ARRAY
24090: ST_TO_ADDR
// end ; 14 :
24091: GO 24510
24093: LD_INT 14
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24112
24101: POP
// bc_type := b_workshop ; 15 :
24102: LD_ADDR_OWVAR 42
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
24110: GO 24510
24112: LD_INT 15
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24131
24120: POP
// bc_type := b_factory ; 16 :
24121: LD_ADDR_OWVAR 42
24125: PUSH
24126: LD_INT 3
24128: ST_TO_ADDR
24129: GO 24510
24131: LD_INT 16
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24150
24139: POP
// bc_type := b_ext_gun ; 17 :
24140: LD_ADDR_OWVAR 42
24144: PUSH
24145: LD_INT 17
24147: ST_TO_ADDR
24148: GO 24510
24150: LD_INT 17
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24186
24158: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24159: LD_ADDR_OWVAR 42
24163: PUSH
24164: LD_INT 19
24166: PUSH
24167: LD_INT 23
24169: PUSH
24170: LD_INT 19
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: LD_VAR 0 1
24182: ARRAY
24183: ST_TO_ADDR
24184: GO 24510
24186: LD_INT 18
24188: DOUBLE
24189: EQUAL
24190: IFTRUE 24194
24192: GO 24205
24194: POP
// bc_type := b_ext_radar ; 19 :
24195: LD_ADDR_OWVAR 42
24199: PUSH
24200: LD_INT 20
24202: ST_TO_ADDR
24203: GO 24510
24205: LD_INT 19
24207: DOUBLE
24208: EQUAL
24209: IFTRUE 24213
24211: GO 24224
24213: POP
// bc_type := b_ext_radio ; 20 :
24214: LD_ADDR_OWVAR 42
24218: PUSH
24219: LD_INT 22
24221: ST_TO_ADDR
24222: GO 24510
24224: LD_INT 20
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24243
24232: POP
// bc_type := b_ext_siberium ; 21 :
24233: LD_ADDR_OWVAR 42
24237: PUSH
24238: LD_INT 21
24240: ST_TO_ADDR
24241: GO 24510
24243: LD_INT 21
24245: DOUBLE
24246: EQUAL
24247: IFTRUE 24251
24249: GO 24262
24251: POP
// bc_type := b_ext_computer ; 22 :
24252: LD_ADDR_OWVAR 42
24256: PUSH
24257: LD_INT 24
24259: ST_TO_ADDR
24260: GO 24510
24262: LD_INT 22
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24281
24270: POP
// bc_type := b_ext_track ; 23 :
24271: LD_ADDR_OWVAR 42
24275: PUSH
24276: LD_INT 16
24278: ST_TO_ADDR
24279: GO 24510
24281: LD_INT 23
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24300
24289: POP
// bc_type := b_ext_laser ; 24 :
24290: LD_ADDR_OWVAR 42
24294: PUSH
24295: LD_INT 25
24297: ST_TO_ADDR
24298: GO 24510
24300: LD_INT 24
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24319
24308: POP
// bc_type := b_control_tower ; 25 :
24309: LD_ADDR_OWVAR 42
24313: PUSH
24314: LD_INT 36
24316: ST_TO_ADDR
24317: GO 24510
24319: LD_INT 25
24321: DOUBLE
24322: EQUAL
24323: IFTRUE 24327
24325: GO 24338
24327: POP
// bc_type := b_breastwork ; 26 :
24328: LD_ADDR_OWVAR 42
24332: PUSH
24333: LD_INT 31
24335: ST_TO_ADDR
24336: GO 24510
24338: LD_INT 26
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24357
24346: POP
// bc_type := b_bunker ; 27 :
24347: LD_ADDR_OWVAR 42
24351: PUSH
24352: LD_INT 32
24354: ST_TO_ADDR
24355: GO 24510
24357: LD_INT 27
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24376
24365: POP
// bc_type := b_turret ; 28 :
24366: LD_ADDR_OWVAR 42
24370: PUSH
24371: LD_INT 33
24373: ST_TO_ADDR
24374: GO 24510
24376: LD_INT 28
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24395
24384: POP
// bc_type := b_armoury ; 29 :
24385: LD_ADDR_OWVAR 42
24389: PUSH
24390: LD_INT 4
24392: ST_TO_ADDR
24393: GO 24510
24395: LD_INT 29
24397: DOUBLE
24398: EQUAL
24399: IFTRUE 24403
24401: GO 24414
24403: POP
// bc_type := b_barracks ; 30 :
24404: LD_ADDR_OWVAR 42
24408: PUSH
24409: LD_INT 5
24411: ST_TO_ADDR
24412: GO 24510
24414: LD_INT 30
24416: DOUBLE
24417: EQUAL
24418: IFTRUE 24422
24420: GO 24433
24422: POP
// bc_type := b_solar_power ; 31 :
24423: LD_ADDR_OWVAR 42
24427: PUSH
24428: LD_INT 27
24430: ST_TO_ADDR
24431: GO 24510
24433: LD_INT 31
24435: DOUBLE
24436: EQUAL
24437: IFTRUE 24441
24439: GO 24452
24441: POP
// bc_type := b_oil_power ; 32 :
24442: LD_ADDR_OWVAR 42
24446: PUSH
24447: LD_INT 26
24449: ST_TO_ADDR
24450: GO 24510
24452: LD_INT 32
24454: DOUBLE
24455: EQUAL
24456: IFTRUE 24460
24458: GO 24471
24460: POP
// bc_type := b_siberite_power ; 33 :
24461: LD_ADDR_OWVAR 42
24465: PUSH
24466: LD_INT 28
24468: ST_TO_ADDR
24469: GO 24510
24471: LD_INT 33
24473: DOUBLE
24474: EQUAL
24475: IFTRUE 24479
24477: GO 24490
24479: POP
// bc_type := b_oil_mine ; 34 :
24480: LD_ADDR_OWVAR 42
24484: PUSH
24485: LD_INT 29
24487: ST_TO_ADDR
24488: GO 24510
24490: LD_INT 34
24492: DOUBLE
24493: EQUAL
24494: IFTRUE 24498
24496: GO 24509
24498: POP
// bc_type := b_siberite_mine ; end ;
24499: LD_ADDR_OWVAR 42
24503: PUSH
24504: LD_INT 30
24506: ST_TO_ADDR
24507: GO 24510
24509: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24510: LD_ADDR_VAR 0 8
24514: PUSH
24515: LD_VAR 0 5
24519: PPUSH
24520: LD_VAR 0 6
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: CALL_OW 47
24534: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24535: LD_OWVAR 42
24539: PUSH
24540: LD_INT 32
24542: PUSH
24543: LD_INT 33
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: IN
24550: IFFALSE 24566
// PlaceWeaponTurret ( b , weapon ) ;
24552: LD_VAR 0 8
24556: PPUSH
24557: LD_VAR 0 4
24561: PPUSH
24562: CALL_OW 431
// end ;
24566: LD_VAR 0 7
24570: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24571: LD_INT 0
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24577: LD_ADDR_VAR 0 4
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_OWVAR 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 30
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 30
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: ST_TO_ADDR
// if not tmp then
24631: LD_VAR 0 4
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24699
// for i in tmp do
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_VAR 0 4
24649: PUSH
24650: FOR_IN
24651: IFFALSE 24697
// for j = 1 to 3 do
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: DOUBLE
24659: LD_INT 1
24661: DEC
24662: ST_TO_ADDR
24663: LD_INT 3
24665: PUSH
24666: FOR_TO
24667: IFFALSE 24693
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24669: LD_VAR 0 2
24673: PPUSH
24674: CALL_OW 274
24678: PPUSH
24679: LD_VAR 0 3
24683: PPUSH
24684: LD_INT 99999
24686: PPUSH
24687: CALL_OW 277
24691: GO 24666
24693: POP
24694: POP
24695: GO 24650
24697: POP
24698: POP
// end ;
24699: LD_VAR 0 1
24703: RET
// export function hHackSetLevel10 ; var i , j ; begin
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
24708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: LD_INT 21
24716: PUSH
24717: LD_INT 1
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 69
24728: PUSH
24729: FOR_IN
24730: IFFALSE 24782
// if IsSelected ( i ) then
24732: LD_VAR 0 2
24736: PPUSH
24737: CALL_OW 306
24741: IFFALSE 24780
// begin for j := 1 to 4 do
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: DOUBLE
24749: LD_INT 1
24751: DEC
24752: ST_TO_ADDR
24753: LD_INT 4
24755: PUSH
24756: FOR_TO
24757: IFFALSE 24778
// SetSkill ( i , j , 10 ) ;
24759: LD_VAR 0 2
24763: PPUSH
24764: LD_VAR 0 3
24768: PPUSH
24769: LD_INT 10
24771: PPUSH
24772: CALL_OW 237
24776: GO 24756
24778: POP
24779: POP
// end ;
24780: GO 24729
24782: POP
24783: POP
// end ;
24784: LD_VAR 0 1
24788: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24794: LD_ADDR_VAR 0 2
24798: PUSH
24799: LD_INT 22
24801: PUSH
24802: LD_OWVAR 2
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PPUSH
24825: CALL_OW 69
24829: PUSH
24830: FOR_IN
24831: IFFALSE 24872
// begin for j := 1 to 4 do
24833: LD_ADDR_VAR 0 3
24837: PUSH
24838: DOUBLE
24839: LD_INT 1
24841: DEC
24842: ST_TO_ADDR
24843: LD_INT 4
24845: PUSH
24846: FOR_TO
24847: IFFALSE 24868
// SetSkill ( i , j , 10 ) ;
24849: LD_VAR 0 2
24853: PPUSH
24854: LD_VAR 0 3
24858: PPUSH
24859: LD_INT 10
24861: PPUSH
24862: CALL_OW 237
24866: GO 24846
24868: POP
24869: POP
// end ;
24870: GO 24830
24872: POP
24873: POP
// end ;
24874: LD_VAR 0 1
24878: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24879: LD_INT 0
24881: PPUSH
// uc_side := your_side ;
24882: LD_ADDR_OWVAR 20
24886: PUSH
24887: LD_OWVAR 2
24891: ST_TO_ADDR
// uc_nation := nation ;
24892: LD_ADDR_OWVAR 21
24896: PUSH
24897: LD_VAR 0 1
24901: ST_TO_ADDR
// InitHc ;
24902: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24906: LD_INT 0
24908: PPUSH
24909: LD_VAR 0 2
24913: PPUSH
24914: LD_VAR 0 3
24918: PPUSH
24919: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24923: LD_VAR 0 4
24927: PPUSH
24928: LD_VAR 0 5
24932: PPUSH
24933: CALL_OW 428
24937: PUSH
24938: LD_INT 0
24940: EQUAL
24941: IFFALSE 24965
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24943: CALL_OW 44
24947: PPUSH
24948: LD_VAR 0 4
24952: PPUSH
24953: LD_VAR 0 5
24957: PPUSH
24958: LD_INT 1
24960: PPUSH
24961: CALL_OW 48
// end ;
24965: LD_VAR 0 6
24969: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
// uc_side := your_side ;
24974: LD_ADDR_OWVAR 20
24978: PUSH
24979: LD_OWVAR 2
24983: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24984: LD_VAR 0 1
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: LD_INT 4
25000: PUSH
25001: LD_INT 5
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: IN
25011: IFFALSE 25023
// uc_nation := nation_american else
25013: LD_ADDR_OWVAR 21
25017: PUSH
25018: LD_INT 1
25020: ST_TO_ADDR
25021: GO 25066
// if chassis in [ 11 , 12 , 13 , 14 ] then
25023: LD_VAR 0 1
25027: PUSH
25028: LD_INT 11
25030: PUSH
25031: LD_INT 12
25033: PUSH
25034: LD_INT 13
25036: PUSH
25037: LD_INT 14
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: IN
25046: IFFALSE 25058
// uc_nation := nation_arabian else
25048: LD_ADDR_OWVAR 21
25052: PUSH
25053: LD_INT 2
25055: ST_TO_ADDR
25056: GO 25066
// uc_nation := nation_russian ;
25058: LD_ADDR_OWVAR 21
25062: PUSH
25063: LD_INT 3
25065: ST_TO_ADDR
// vc_chassis := chassis ;
25066: LD_ADDR_OWVAR 37
25070: PUSH
25071: LD_VAR 0 1
25075: ST_TO_ADDR
// vc_engine := engine ;
25076: LD_ADDR_OWVAR 39
25080: PUSH
25081: LD_VAR 0 2
25085: ST_TO_ADDR
// vc_control := control ;
25086: LD_ADDR_OWVAR 38
25090: PUSH
25091: LD_VAR 0 3
25095: ST_TO_ADDR
// vc_weapon := weapon ;
25096: LD_ADDR_OWVAR 40
25100: PUSH
25101: LD_VAR 0 4
25105: ST_TO_ADDR
// un := CreateVehicle ;
25106: LD_ADDR_VAR 0 8
25110: PUSH
25111: CALL_OW 45
25115: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25116: LD_VAR 0 8
25120: PPUSH
25121: LD_INT 0
25123: PPUSH
25124: LD_INT 5
25126: PPUSH
25127: CALL_OW 12
25131: PPUSH
25132: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25136: LD_VAR 0 8
25140: PPUSH
25141: LD_VAR 0 5
25145: PPUSH
25146: LD_VAR 0 6
25150: PPUSH
25151: LD_INT 1
25153: PPUSH
25154: CALL_OW 48
// end ;
25158: LD_VAR 0 7
25162: RET
// export hInvincible ; every 1 do
25163: GO 25165
25165: DISABLE
// hInvincible := [ ] ;
25166: LD_ADDR_EXP 101
25170: PUSH
25171: EMPTY
25172: ST_TO_ADDR
25173: END
// every 10 do var i ;
25174: GO 25176
25176: DISABLE
25177: LD_INT 0
25179: PPUSH
// begin enable ;
25180: ENABLE
// if not hInvincible then
25181: LD_EXP 101
25185: NOT
25186: IFFALSE 25190
// exit ;
25188: GO 25234
// for i in hInvincible do
25190: LD_ADDR_VAR 0 1
25194: PUSH
25195: LD_EXP 101
25199: PUSH
25200: FOR_IN
25201: IFFALSE 25232
// if GetLives ( i ) < 1000 then
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 256
25212: PUSH
25213: LD_INT 1000
25215: LESS
25216: IFFALSE 25230
// SetLives ( i , 1000 ) ;
25218: LD_VAR 0 1
25222: PPUSH
25223: LD_INT 1000
25225: PPUSH
25226: CALL_OW 234
25230: GO 25200
25232: POP
25233: POP
// end ;
25234: PPOPN 1
25236: END
// export function hHackInvincible ; var i ; begin
25237: LD_INT 0
25239: PPUSH
25240: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 21
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 21
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: PPUSH
25274: CALL_OW 69
25278: PUSH
25279: FOR_IN
25280: IFFALSE 25341
// if IsSelected ( i ) then
25282: LD_VAR 0 2
25286: PPUSH
25287: CALL_OW 306
25291: IFFALSE 25339
// begin if i in hInvincible then
25293: LD_VAR 0 2
25297: PUSH
25298: LD_EXP 101
25302: IN
25303: IFFALSE 25323
// hInvincible := hInvincible diff i else
25305: LD_ADDR_EXP 101
25309: PUSH
25310: LD_EXP 101
25314: PUSH
25315: LD_VAR 0 2
25319: DIFF
25320: ST_TO_ADDR
25321: GO 25339
// hInvincible := hInvincible union i ;
25323: LD_ADDR_EXP 101
25327: PUSH
25328: LD_EXP 101
25332: PUSH
25333: LD_VAR 0 2
25337: UNION
25338: ST_TO_ADDR
// end ;
25339: GO 25279
25341: POP
25342: POP
// end ;
25343: LD_VAR 0 1
25347: RET
// export function hHackInvisible ; var i , j ; begin
25348: LD_INT 0
25350: PPUSH
25351: PPUSH
25352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25353: LD_ADDR_VAR 0 2
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: PUSH
25373: FOR_IN
25374: IFFALSE 25398
// if IsSelected ( i ) then
25376: LD_VAR 0 2
25380: PPUSH
25381: CALL_OW 306
25385: IFFALSE 25396
// ComForceInvisible ( i ) ;
25387: LD_VAR 0 2
25391: PPUSH
25392: CALL_OW 496
25396: GO 25373
25398: POP
25399: POP
// end ;
25400: LD_VAR 0 1
25404: RET
// export function hHackChangeYourSide ; begin
25405: LD_INT 0
25407: PPUSH
// if your_side = 8 then
25408: LD_OWVAR 2
25412: PUSH
25413: LD_INT 8
25415: EQUAL
25416: IFFALSE 25428
// your_side := 0 else
25418: LD_ADDR_OWVAR 2
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
25426: GO 25442
// your_side := your_side + 1 ;
25428: LD_ADDR_OWVAR 2
25432: PUSH
25433: LD_OWVAR 2
25437: PUSH
25438: LD_INT 1
25440: PLUS
25441: ST_TO_ADDR
// end ;
25442: LD_VAR 0 1
25446: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25447: LD_INT 0
25449: PPUSH
25450: PPUSH
25451: PPUSH
// for i in all_units do
25452: LD_ADDR_VAR 0 2
25456: PUSH
25457: LD_OWVAR 3
25461: PUSH
25462: FOR_IN
25463: IFFALSE 25541
// if IsSelected ( i ) then
25465: LD_VAR 0 2
25469: PPUSH
25470: CALL_OW 306
25474: IFFALSE 25539
// begin j := GetSide ( i ) ;
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_VAR 0 2
25485: PPUSH
25486: CALL_OW 255
25490: ST_TO_ADDR
// if j = 8 then
25491: LD_VAR 0 3
25495: PUSH
25496: LD_INT 8
25498: EQUAL
25499: IFFALSE 25511
// j := 0 else
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_INT 0
25508: ST_TO_ADDR
25509: GO 25525
// j := j + 1 ;
25511: LD_ADDR_VAR 0 3
25515: PUSH
25516: LD_VAR 0 3
25520: PUSH
25521: LD_INT 1
25523: PLUS
25524: ST_TO_ADDR
// SetSide ( i , j ) ;
25525: LD_VAR 0 2
25529: PPUSH
25530: LD_VAR 0 3
25534: PPUSH
25535: CALL_OW 235
// end ;
25539: GO 25462
25541: POP
25542: POP
// end ;
25543: LD_VAR 0 1
25547: RET
// export function hHackFog ; begin
25548: LD_INT 0
25550: PPUSH
// FogOff ( true ) ;
25551: LD_INT 1
25553: PPUSH
25554: CALL_OW 344
// end ;
25558: LD_VAR 0 1
25562: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25563: LD_INT 0
25565: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25566: LD_VAR 0 1
25570: PPUSH
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: LD_INT 1
25583: PPUSH
25584: LD_INT 1
25586: PPUSH
25587: CALL_OW 483
// CenterOnXY ( x , y ) ;
25591: LD_VAR 0 2
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: CALL_OW 84
// end ;
25605: LD_VAR 0 4
25609: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25614: LD_VAR 0 1
25618: NOT
25619: PUSH
25620: LD_VAR 0 2
25624: PPUSH
25625: LD_VAR 0 3
25629: PPUSH
25630: CALL_OW 488
25634: NOT
25635: OR
25636: PUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 266
25646: PUSH
25647: LD_INT 3
25649: NONEQUAL
25650: PUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 247
25660: PUSH
25661: LD_INT 1
25663: EQUAL
25664: NOT
25665: AND
25666: OR
25667: IFFALSE 25671
// exit ;
25669: GO 25820
// if GetType ( factory ) = unit_human then
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL_OW 247
25680: PUSH
25681: LD_INT 1
25683: EQUAL
25684: IFFALSE 25701
// factory := IsInUnit ( factory ) ;
25686: LD_ADDR_VAR 0 1
25690: PUSH
25691: LD_VAR 0 1
25695: PPUSH
25696: CALL_OW 310
25700: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25701: LD_VAR 0 1
25705: PPUSH
25706: CALL_OW 266
25710: PUSH
25711: LD_INT 3
25713: NONEQUAL
25714: IFFALSE 25718
// exit ;
25716: GO 25820
// if HexInfo ( x , y ) = factory then
25718: LD_VAR 0 2
25722: PPUSH
25723: LD_VAR 0 3
25727: PPUSH
25728: CALL_OW 428
25732: PUSH
25733: LD_VAR 0 1
25737: EQUAL
25738: IFFALSE 25765
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25740: LD_ADDR_EXP 102
25744: PUSH
25745: LD_EXP 102
25749: PPUSH
25750: LD_VAR 0 1
25754: PPUSH
25755: LD_INT 0
25757: PPUSH
25758: CALL_OW 1
25762: ST_TO_ADDR
25763: GO 25816
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25765: LD_ADDR_EXP 102
25769: PUSH
25770: LD_EXP 102
25774: PPUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 255
25789: PUSH
25790: LD_VAR 0 1
25794: PUSH
25795: LD_VAR 0 2
25799: PUSH
25800: LD_VAR 0 3
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: PPUSH
25811: CALL_OW 1
25815: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25816: CALL 25825 0 0
// end ;
25820: LD_VAR 0 4
25824: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25825: LD_INT 0
25827: PPUSH
25828: PPUSH
25829: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25830: LD_STRING resetFactoryWaypoint();
25832: PPUSH
25833: CALL_OW 559
// if factoryWaypoints then
25837: LD_EXP 102
25841: IFFALSE 25967
// begin list := PrepareArray ( factoryWaypoints ) ;
25843: LD_ADDR_VAR 0 3
25847: PUSH
25848: LD_EXP 102
25852: PPUSH
25853: CALL 72399 0 1
25857: ST_TO_ADDR
// for i := 1 to list do
25858: LD_ADDR_VAR 0 2
25862: PUSH
25863: DOUBLE
25864: LD_INT 1
25866: DEC
25867: ST_TO_ADDR
25868: LD_VAR 0 3
25872: PUSH
25873: FOR_TO
25874: IFFALSE 25965
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25876: LD_STRING setFactoryWaypointXY(
25878: PUSH
25879: LD_VAR 0 3
25883: PUSH
25884: LD_VAR 0 2
25888: ARRAY
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: STR
25894: PUSH
25895: LD_STRING ,
25897: STR
25898: PUSH
25899: LD_VAR 0 3
25903: PUSH
25904: LD_VAR 0 2
25908: ARRAY
25909: PUSH
25910: LD_INT 2
25912: ARRAY
25913: STR
25914: PUSH
25915: LD_STRING ,
25917: STR
25918: PUSH
25919: LD_VAR 0 3
25923: PUSH
25924: LD_VAR 0 2
25928: ARRAY
25929: PUSH
25930: LD_INT 3
25932: ARRAY
25933: STR
25934: PUSH
25935: LD_STRING ,
25937: STR
25938: PUSH
25939: LD_VAR 0 3
25943: PUSH
25944: LD_VAR 0 2
25948: ARRAY
25949: PUSH
25950: LD_INT 4
25952: ARRAY
25953: STR
25954: PUSH
25955: LD_STRING )
25957: STR
25958: PPUSH
25959: CALL_OW 559
25963: GO 25873
25965: POP
25966: POP
// end ; end ;
25967: LD_VAR 0 1
25971: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25972: LD_INT 0
25974: PPUSH
// if HexInfo ( x , y ) = warehouse then
25975: LD_VAR 0 2
25979: PPUSH
25980: LD_VAR 0 3
25984: PPUSH
25985: CALL_OW 428
25989: PUSH
25990: LD_VAR 0 1
25994: EQUAL
25995: IFFALSE 26022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25997: LD_ADDR_EXP 103
26001: PUSH
26002: LD_EXP 103
26006: PPUSH
26007: LD_VAR 0 1
26011: PPUSH
26012: LD_INT 0
26014: PPUSH
26015: CALL_OW 1
26019: ST_TO_ADDR
26020: GO 26073
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26022: LD_ADDR_EXP 103
26026: PUSH
26027: LD_EXP 103
26031: PPUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: LD_VAR 0 1
26041: PPUSH
26042: CALL_OW 255
26046: PUSH
26047: LD_VAR 0 1
26051: PUSH
26052: LD_VAR 0 2
26056: PUSH
26057: LD_VAR 0 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 1
26072: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26073: CALL 26082 0 0
// end ;
26077: LD_VAR 0 4
26081: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26082: LD_INT 0
26084: PPUSH
26085: PPUSH
26086: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26087: LD_STRING resetWarehouseGatheringPoints();
26089: PPUSH
26090: CALL_OW 559
// if warehouseGatheringPoints then
26094: LD_EXP 103
26098: IFFALSE 26224
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_EXP 103
26109: PPUSH
26110: CALL 72399 0 1
26114: ST_TO_ADDR
// for i := 1 to list do
26115: LD_ADDR_VAR 0 2
26119: PUSH
26120: DOUBLE
26121: LD_INT 1
26123: DEC
26124: ST_TO_ADDR
26125: LD_VAR 0 3
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26222
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26133: LD_STRING setWarehouseGatheringPointXY(
26135: PUSH
26136: LD_VAR 0 3
26140: PUSH
26141: LD_VAR 0 2
26145: ARRAY
26146: PUSH
26147: LD_INT 1
26149: ARRAY
26150: STR
26151: PUSH
26152: LD_STRING ,
26154: STR
26155: PUSH
26156: LD_VAR 0 3
26160: PUSH
26161: LD_VAR 0 2
26165: ARRAY
26166: PUSH
26167: LD_INT 2
26169: ARRAY
26170: STR
26171: PUSH
26172: LD_STRING ,
26174: STR
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: LD_VAR 0 2
26185: ARRAY
26186: PUSH
26187: LD_INT 3
26189: ARRAY
26190: STR
26191: PUSH
26192: LD_STRING ,
26194: STR
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 2
26205: ARRAY
26206: PUSH
26207: LD_INT 4
26209: ARRAY
26210: STR
26211: PUSH
26212: LD_STRING )
26214: STR
26215: PPUSH
26216: CALL_OW 559
26220: GO 26130
26222: POP
26223: POP
// end ; end ;
26224: LD_VAR 0 1
26228: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26229: LD_EXP 103
26233: IFFALSE 26920
26235: GO 26237
26237: DISABLE
26238: LD_INT 0
26240: PPUSH
26241: PPUSH
26242: PPUSH
26243: PPUSH
26244: PPUSH
26245: PPUSH
26246: PPUSH
26247: PPUSH
26248: PPUSH
// begin enable ;
26249: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26250: LD_ADDR_VAR 0 3
26254: PUSH
26255: LD_EXP 103
26259: PPUSH
26260: CALL 72399 0 1
26264: ST_TO_ADDR
// if not list then
26265: LD_VAR 0 3
26269: NOT
26270: IFFALSE 26274
// exit ;
26272: GO 26920
// for i := 1 to list do
26274: LD_ADDR_VAR 0 1
26278: PUSH
26279: DOUBLE
26280: LD_INT 1
26282: DEC
26283: ST_TO_ADDR
26284: LD_VAR 0 3
26288: PUSH
26289: FOR_TO
26290: IFFALSE 26918
// begin depot := list [ i ] [ 2 ] ;
26292: LD_ADDR_VAR 0 8
26296: PUSH
26297: LD_VAR 0 3
26301: PUSH
26302: LD_VAR 0 1
26306: ARRAY
26307: PUSH
26308: LD_INT 2
26310: ARRAY
26311: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26312: LD_ADDR_VAR 0 5
26316: PUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_VAR 0 1
26326: ARRAY
26327: PUSH
26328: LD_INT 1
26330: ARRAY
26331: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26332: LD_VAR 0 8
26336: PPUSH
26337: CALL_OW 301
26341: PUSH
26342: LD_VAR 0 5
26346: PUSH
26347: LD_VAR 0 8
26351: PPUSH
26352: CALL_OW 255
26356: NONEQUAL
26357: OR
26358: IFFALSE 26387
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26360: LD_ADDR_EXP 103
26364: PUSH
26365: LD_EXP 103
26369: PPUSH
26370: LD_VAR 0 8
26374: PPUSH
26375: LD_INT 0
26377: PPUSH
26378: CALL_OW 1
26382: ST_TO_ADDR
// exit ;
26383: POP
26384: POP
26385: GO 26920
// end ; x := list [ i ] [ 3 ] ;
26387: LD_ADDR_VAR 0 6
26391: PUSH
26392: LD_VAR 0 3
26396: PUSH
26397: LD_VAR 0 1
26401: ARRAY
26402: PUSH
26403: LD_INT 3
26405: ARRAY
26406: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26407: LD_ADDR_VAR 0 7
26411: PUSH
26412: LD_VAR 0 3
26416: PUSH
26417: LD_VAR 0 1
26421: ARRAY
26422: PUSH
26423: LD_INT 4
26425: ARRAY
26426: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26427: LD_ADDR_VAR 0 9
26431: PUSH
26432: LD_VAR 0 6
26436: PPUSH
26437: LD_VAR 0 7
26441: PPUSH
26442: LD_INT 16
26444: PPUSH
26445: CALL 70983 0 3
26449: ST_TO_ADDR
// if not cratesNearbyPoint then
26450: LD_VAR 0 9
26454: NOT
26455: IFFALSE 26461
// exit ;
26457: POP
26458: POP
26459: GO 26920
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26461: LD_ADDR_VAR 0 4
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_VAR 0 5
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 3
26480: PUSH
26481: LD_INT 60
26483: PUSH
26484: EMPTY
26485: LIST
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 91
26493: PUSH
26494: LD_VAR 0 8
26498: PUSH
26499: LD_INT 6
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 25
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 16
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 69
26545: PUSH
26546: LD_VAR 0 8
26550: PPUSH
26551: CALL_OW 313
26555: PPUSH
26556: LD_INT 3
26558: PUSH
26559: LD_INT 60
26561: PUSH
26562: EMPTY
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: LD_INT 25
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 25
26584: PUSH
26585: LD_INT 16
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 72
26605: UNION
26606: ST_TO_ADDR
// if tmp then
26607: LD_VAR 0 4
26611: IFFALSE 26691
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26613: LD_ADDR_VAR 0 4
26617: PUSH
26618: LD_VAR 0 4
26622: PPUSH
26623: LD_INT 3
26625: PPUSH
26626: CALL 68950 0 2
26630: ST_TO_ADDR
// for j in tmp do
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: LD_VAR 0 4
26640: PUSH
26641: FOR_IN
26642: IFFALSE 26685
// begin if IsInUnit ( j ) then
26644: LD_VAR 0 2
26648: PPUSH
26649: CALL_OW 310
26653: IFFALSE 26664
// ComExit ( j ) ;
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL 69033 0 1
// AddComCollect ( j , x , y ) ;
26664: LD_VAR 0 2
26668: PPUSH
26669: LD_VAR 0 6
26673: PPUSH
26674: LD_VAR 0 7
26678: PPUSH
26679: CALL_OW 177
// end ;
26683: GO 26641
26685: POP
26686: POP
// exit ;
26687: POP
26688: POP
26689: GO 26920
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_INT 22
26698: PUSH
26699: LD_VAR 0 5
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 91
26710: PUSH
26711: LD_VAR 0 8
26715: PUSH
26716: LD_INT 8
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: LD_INT 34
26729: PUSH
26730: LD_INT 12
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 34
26739: PUSH
26740: LD_INT 51
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 34
26749: PUSH
26750: LD_INT 32
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_EXP 27
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: PPUSH
26781: CALL_OW 69
26785: ST_TO_ADDR
// if tmp then
26786: LD_VAR 0 4
26790: IFFALSE 26916
// begin for j in tmp do
26792: LD_ADDR_VAR 0 2
26796: PUSH
26797: LD_VAR 0 4
26801: PUSH
26802: FOR_IN
26803: IFFALSE 26914
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26805: LD_VAR 0 2
26809: PPUSH
26810: CALL_OW 262
26814: PUSH
26815: LD_INT 3
26817: EQUAL
26818: PUSH
26819: LD_VAR 0 2
26823: PPUSH
26824: CALL_OW 261
26828: PUSH
26829: LD_INT 20
26831: GREATER
26832: OR
26833: PUSH
26834: LD_VAR 0 2
26838: PPUSH
26839: CALL_OW 314
26843: NOT
26844: AND
26845: PUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: CALL_OW 263
26855: PUSH
26856: LD_INT 1
26858: NONEQUAL
26859: PUSH
26860: LD_VAR 0 2
26864: PPUSH
26865: CALL_OW 311
26869: OR
26870: AND
26871: IFFALSE 26912
// begin ComCollect ( j , x , y ) ;
26873: LD_VAR 0 2
26877: PPUSH
26878: LD_VAR 0 6
26882: PPUSH
26883: LD_VAR 0 7
26887: PPUSH
26888: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26892: LD_VAR 0 2
26896: PPUSH
26897: LD_VAR 0 8
26901: PPUSH
26902: CALL_OW 172
// exit ;
26906: POP
26907: POP
26908: POP
26909: POP
26910: GO 26920
// end ;
26912: GO 26802
26914: POP
26915: POP
// end ; end ;
26916: GO 26289
26918: POP
26919: POP
// end ; end_of_file
26920: PPOPN 9
26922: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 264
26938: PUSH
26939: LD_EXP 30
26943: EQUAL
26944: IFFALSE 27016
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26946: LD_INT 68
26948: PPUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 255
26958: PPUSH
26959: CALL_OW 321
26963: PUSH
26964: LD_INT 2
26966: EQUAL
26967: IFFALSE 26979
// eff := 70 else
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_INT 70
26976: ST_TO_ADDR
26977: GO 26987
// eff := 30 ;
26979: LD_ADDR_VAR 0 4
26983: PUSH
26984: LD_INT 30
26986: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 250
26996: PPUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: CALL_OW 251
27006: PPUSH
27007: LD_VAR 0 4
27011: PPUSH
27012: CALL_OW 495
// end ; end ;
27016: LD_VAR 0 2
27020: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27021: LD_INT 0
27023: PPUSH
// end ;
27024: LD_VAR 0 4
27028: RET
// export function SOS_Command ( cmd ) ; begin
27029: LD_INT 0
27031: PPUSH
// end ;
27032: LD_VAR 0 2
27036: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27037: LD_INT 0
27039: PPUSH
// end ;
27040: LD_VAR 0 6
27044: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27045: LD_INT 0
27047: PPUSH
27048: PPUSH
// if not vehicle or not factory then
27049: LD_VAR 0 1
27053: NOT
27054: PUSH
27055: LD_VAR 0 2
27059: NOT
27060: OR
27061: IFFALSE 27065
// exit ;
27063: GO 27296
// if factoryWaypoints >= factory then
27065: LD_EXP 102
27069: PUSH
27070: LD_VAR 0 2
27074: GREATEREQUAL
27075: IFFALSE 27296
// if factoryWaypoints [ factory ] then
27077: LD_EXP 102
27081: PUSH
27082: LD_VAR 0 2
27086: ARRAY
27087: IFFALSE 27296
// begin if GetControl ( vehicle ) = control_manual then
27089: LD_VAR 0 1
27093: PPUSH
27094: CALL_OW 263
27098: PUSH
27099: LD_INT 1
27101: EQUAL
27102: IFFALSE 27183
// begin driver := IsDrivenBy ( vehicle ) ;
27104: LD_ADDR_VAR 0 4
27108: PUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 311
27118: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27119: LD_VAR 0 4
27123: PPUSH
27124: LD_EXP 102
27128: PUSH
27129: LD_VAR 0 2
27133: ARRAY
27134: PUSH
27135: LD_INT 3
27137: ARRAY
27138: PPUSH
27139: LD_EXP 102
27143: PUSH
27144: LD_VAR 0 2
27148: ARRAY
27149: PUSH
27150: LD_INT 4
27152: ARRAY
27153: PPUSH
27154: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27158: LD_VAR 0 4
27162: PPUSH
27163: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27167: LD_VAR 0 4
27171: PPUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 180
// end else
27181: GO 27296
// if GetControl ( vehicle ) = control_remote then
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 263
27192: PUSH
27193: LD_INT 2
27195: EQUAL
27196: IFFALSE 27257
// begin wait ( 0 0$2 ) ;
27198: LD_INT 70
27200: PPUSH
27201: CALL_OW 67
// if Connect ( vehicle ) then
27205: LD_VAR 0 1
27209: PPUSH
27210: CALL 39344 0 1
27214: IFFALSE 27255
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27216: LD_VAR 0 1
27220: PPUSH
27221: LD_EXP 102
27225: PUSH
27226: LD_VAR 0 2
27230: ARRAY
27231: PUSH
27232: LD_INT 3
27234: ARRAY
27235: PPUSH
27236: LD_EXP 102
27240: PUSH
27241: LD_VAR 0 2
27245: ARRAY
27246: PUSH
27247: LD_INT 4
27249: ARRAY
27250: PPUSH
27251: CALL_OW 171
// end else
27255: GO 27296
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27257: LD_VAR 0 1
27261: PPUSH
27262: LD_EXP 102
27266: PUSH
27267: LD_VAR 0 2
27271: ARRAY
27272: PUSH
27273: LD_INT 3
27275: ARRAY
27276: PPUSH
27277: LD_EXP 102
27281: PUSH
27282: LD_VAR 0 2
27286: ARRAY
27287: PUSH
27288: LD_INT 4
27290: ARRAY
27291: PPUSH
27292: CALL_OW 171
// end ; end ;
27296: LD_VAR 0 3
27300: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27301: LD_INT 0
27303: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27304: LD_VAR 0 1
27308: PUSH
27309: LD_INT 250
27311: EQUAL
27312: PUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 264
27322: PUSH
27323: LD_EXP 33
27327: EQUAL
27328: AND
27329: IFFALSE 27350
// MinerPlaceMine ( unit , x , y ) ;
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: CALL 29749 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27350: LD_VAR 0 1
27354: PUSH
27355: LD_INT 251
27357: EQUAL
27358: PUSH
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL_OW 264
27368: PUSH
27369: LD_EXP 33
27373: EQUAL
27374: AND
27375: IFFALSE 27396
// MinerDetonateMine ( unit , x , y ) ;
27377: LD_VAR 0 2
27381: PPUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: LD_VAR 0 5
27391: PPUSH
27392: CALL 30026 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27396: LD_VAR 0 1
27400: PUSH
27401: LD_INT 252
27403: EQUAL
27404: PUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: CALL_OW 264
27414: PUSH
27415: LD_EXP 33
27419: EQUAL
27420: AND
27421: IFFALSE 27442
// MinerCreateMinefield ( unit , x , y ) ;
27423: LD_VAR 0 2
27427: PPUSH
27428: LD_VAR 0 4
27432: PPUSH
27433: LD_VAR 0 5
27437: PPUSH
27438: CALL 30443 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27442: LD_VAR 0 1
27446: PUSH
27447: LD_INT 253
27449: EQUAL
27450: PUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 257
27460: PUSH
27461: LD_INT 5
27463: EQUAL
27464: AND
27465: IFFALSE 27486
// ComBinocular ( unit , x , y ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 4
27476: PPUSH
27477: LD_VAR 0 5
27481: PPUSH
27482: CALL 30814 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27486: LD_VAR 0 1
27490: PUSH
27491: LD_INT 254
27493: EQUAL
27494: PUSH
27495: LD_VAR 0 2
27499: PPUSH
27500: CALL_OW 264
27504: PUSH
27505: LD_EXP 28
27509: EQUAL
27510: AND
27511: PUSH
27512: LD_VAR 0 3
27516: PPUSH
27517: CALL_OW 263
27521: PUSH
27522: LD_INT 3
27524: EQUAL
27525: AND
27526: IFFALSE 27542
// HackDestroyVehicle ( unit , selectedUnit ) ;
27528: LD_VAR 0 2
27532: PPUSH
27533: LD_VAR 0 3
27537: PPUSH
27538: CALL 29109 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27542: LD_VAR 0 1
27546: PUSH
27547: LD_INT 255
27549: EQUAL
27550: PUSH
27551: LD_VAR 0 2
27555: PPUSH
27556: CALL_OW 264
27560: PUSH
27561: LD_INT 14
27563: PUSH
27564: LD_INT 53
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: IN
27571: AND
27572: PUSH
27573: LD_VAR 0 4
27577: PPUSH
27578: LD_VAR 0 5
27582: PPUSH
27583: CALL_OW 488
27587: AND
27588: IFFALSE 27612
// CutTreeXYR ( unit , x , y , 12 ) ;
27590: LD_VAR 0 2
27594: PPUSH
27595: LD_VAR 0 4
27599: PPUSH
27600: LD_VAR 0 5
27604: PPUSH
27605: LD_INT 12
27607: PPUSH
27608: CALL 27675 0 4
// if cmd = 256 then
27612: LD_VAR 0 1
27616: PUSH
27617: LD_INT 256
27619: EQUAL
27620: IFFALSE 27641
// SetFactoryWaypoint ( unit , x , y ) ;
27622: LD_VAR 0 2
27626: PPUSH
27627: LD_VAR 0 4
27631: PPUSH
27632: LD_VAR 0 5
27636: PPUSH
27637: CALL 25610 0 3
// if cmd = 257 then
27641: LD_VAR 0 1
27645: PUSH
27646: LD_INT 257
27648: EQUAL
27649: IFFALSE 27670
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_VAR 0 4
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL 25972 0 3
// end ;
27670: LD_VAR 0 6
27674: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27675: LD_INT 0
27677: PPUSH
27678: PPUSH
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27686: LD_VAR 0 1
27690: NOT
27691: PUSH
27692: LD_VAR 0 2
27696: PPUSH
27697: LD_VAR 0 3
27701: PPUSH
27702: CALL_OW 488
27706: NOT
27707: OR
27708: PUSH
27709: LD_VAR 0 4
27713: NOT
27714: OR
27715: IFFALSE 27719
// exit ;
27717: GO 28059
// list := [ ] ;
27719: LD_ADDR_VAR 0 13
27723: PUSH
27724: EMPTY
27725: ST_TO_ADDR
// if x - r < 0 then
27726: LD_VAR 0 2
27730: PUSH
27731: LD_VAR 0 4
27735: MINUS
27736: PUSH
27737: LD_INT 0
27739: LESS
27740: IFFALSE 27752
// min_x := 0 else
27742: LD_ADDR_VAR 0 7
27746: PUSH
27747: LD_INT 0
27749: ST_TO_ADDR
27750: GO 27768
// min_x := x - r ;
27752: LD_ADDR_VAR 0 7
27756: PUSH
27757: LD_VAR 0 2
27761: PUSH
27762: LD_VAR 0 4
27766: MINUS
27767: ST_TO_ADDR
// if y - r < 0 then
27768: LD_VAR 0 3
27772: PUSH
27773: LD_VAR 0 4
27777: MINUS
27778: PUSH
27779: LD_INT 0
27781: LESS
27782: IFFALSE 27794
// min_y := 0 else
27784: LD_ADDR_VAR 0 8
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
27792: GO 27810
// min_y := y - r ;
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: LD_VAR 0 3
27803: PUSH
27804: LD_VAR 0 4
27808: MINUS
27809: ST_TO_ADDR
// max_x := x + r ;
27810: LD_ADDR_VAR 0 9
27814: PUSH
27815: LD_VAR 0 2
27819: PUSH
27820: LD_VAR 0 4
27824: PLUS
27825: ST_TO_ADDR
// max_y := y + r ;
27826: LD_ADDR_VAR 0 10
27830: PUSH
27831: LD_VAR 0 3
27835: PUSH
27836: LD_VAR 0 4
27840: PLUS
27841: ST_TO_ADDR
// for _x = min_x to max_x do
27842: LD_ADDR_VAR 0 11
27846: PUSH
27847: DOUBLE
27848: LD_VAR 0 7
27852: DEC
27853: ST_TO_ADDR
27854: LD_VAR 0 9
27858: PUSH
27859: FOR_TO
27860: IFFALSE 27977
// for _y = min_y to max_y do
27862: LD_ADDR_VAR 0 12
27866: PUSH
27867: DOUBLE
27868: LD_VAR 0 8
27872: DEC
27873: ST_TO_ADDR
27874: LD_VAR 0 10
27878: PUSH
27879: FOR_TO
27880: IFFALSE 27973
// begin if not ValidHex ( _x , _y ) then
27882: LD_VAR 0 11
27886: PPUSH
27887: LD_VAR 0 12
27891: PPUSH
27892: CALL_OW 488
27896: NOT
27897: IFFALSE 27901
// continue ;
27899: GO 27879
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27901: LD_VAR 0 11
27905: PPUSH
27906: LD_VAR 0 12
27910: PPUSH
27911: CALL_OW 351
27915: PUSH
27916: LD_VAR 0 11
27920: PPUSH
27921: LD_VAR 0 12
27925: PPUSH
27926: CALL_OW 554
27930: AND
27931: IFFALSE 27971
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27933: LD_ADDR_VAR 0 13
27937: PUSH
27938: LD_VAR 0 13
27942: PPUSH
27943: LD_VAR 0 13
27947: PUSH
27948: LD_INT 1
27950: PLUS
27951: PPUSH
27952: LD_VAR 0 11
27956: PUSH
27957: LD_VAR 0 12
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PPUSH
27966: CALL_OW 2
27970: ST_TO_ADDR
// end ;
27971: GO 27879
27973: POP
27974: POP
27975: GO 27859
27977: POP
27978: POP
// if not list then
27979: LD_VAR 0 13
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28059
// for i in list do
27988: LD_ADDR_VAR 0 6
27992: PUSH
27993: LD_VAR 0 13
27997: PUSH
27998: FOR_IN
27999: IFFALSE 28057
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28001: LD_VAR 0 1
28005: PPUSH
28006: LD_STRING M
28008: PUSH
28009: LD_VAR 0 6
28013: PUSH
28014: LD_INT 1
28016: ARRAY
28017: PUSH
28018: LD_VAR 0 6
28022: PUSH
28023: LD_INT 2
28025: ARRAY
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: PPUSH
28051: CALL_OW 447
28055: GO 27998
28057: POP
28058: POP
// end ;
28059: LD_VAR 0 5
28063: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28064: LD_EXP 105
28068: NOT
28069: IFFALSE 28119
28071: GO 28073
28073: DISABLE
// begin initHack := true ;
28074: LD_ADDR_EXP 105
28078: PUSH
28079: LD_INT 1
28081: ST_TO_ADDR
// hackTanks := [ ] ;
28082: LD_ADDR_EXP 106
28086: PUSH
28087: EMPTY
28088: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28089: LD_ADDR_EXP 107
28093: PUSH
28094: EMPTY
28095: ST_TO_ADDR
// hackLimit := 3 ;
28096: LD_ADDR_EXP 108
28100: PUSH
28101: LD_INT 3
28103: ST_TO_ADDR
// hackDist := 12 ;
28104: LD_ADDR_EXP 109
28108: PUSH
28109: LD_INT 12
28111: ST_TO_ADDR
// hackCounter := [ ] ;
28112: LD_ADDR_EXP 110
28116: PUSH
28117: EMPTY
28118: ST_TO_ADDR
// end ;
28119: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28120: LD_EXP 105
28124: PUSH
28125: LD_INT 34
28127: PUSH
28128: LD_EXP 28
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PPUSH
28137: CALL_OW 69
28141: AND
28142: IFFALSE 28397
28144: GO 28146
28146: DISABLE
28147: LD_INT 0
28149: PPUSH
28150: PPUSH
// begin enable ;
28151: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28152: LD_ADDR_VAR 0 1
28156: PUSH
28157: LD_INT 34
28159: PUSH
28160: LD_EXP 28
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PPUSH
28169: CALL_OW 69
28173: PUSH
28174: FOR_IN
28175: IFFALSE 28395
// begin if not i in hackTanks then
28177: LD_VAR 0 1
28181: PUSH
28182: LD_EXP 106
28186: IN
28187: NOT
28188: IFFALSE 28271
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28190: LD_ADDR_EXP 106
28194: PUSH
28195: LD_EXP 106
28199: PPUSH
28200: LD_EXP 106
28204: PUSH
28205: LD_INT 1
28207: PLUS
28208: PPUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 1
28218: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28219: LD_ADDR_EXP 107
28223: PUSH
28224: LD_EXP 107
28228: PPUSH
28229: LD_EXP 107
28233: PUSH
28234: LD_INT 1
28236: PLUS
28237: PPUSH
28238: EMPTY
28239: PPUSH
28240: CALL_OW 1
28244: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28245: LD_ADDR_EXP 110
28249: PUSH
28250: LD_EXP 110
28254: PPUSH
28255: LD_EXP 110
28259: PUSH
28260: LD_INT 1
28262: PLUS
28263: PPUSH
28264: EMPTY
28265: PPUSH
28266: CALL_OW 1
28270: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 302
28280: NOT
28281: IFFALSE 28294
// begin HackUnlinkAll ( i ) ;
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL 28400 0 1
// continue ;
28292: GO 28174
// end ; HackCheckCapturedStatus ( i ) ;
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL 28843 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28303: LD_ADDR_VAR 0 2
28307: PUSH
28308: LD_INT 81
28310: PUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 255
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 33
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 91
28337: PUSH
28338: LD_VAR 0 1
28342: PUSH
28343: LD_EXP 109
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 50
28355: PUSH
28356: EMPTY
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: ST_TO_ADDR
// if not tmp then
28370: LD_VAR 0 2
28374: NOT
28375: IFFALSE 28379
// continue ;
28377: GO 28174
// HackLink ( i , tmp ) ;
28379: LD_VAR 0 1
28383: PPUSH
28384: LD_VAR 0 2
28388: PPUSH
28389: CALL 28536 0 2
// end ;
28393: GO 28174
28395: POP
28396: POP
// end ;
28397: PPOPN 2
28399: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28400: LD_INT 0
28402: PPUSH
28403: PPUSH
28404: PPUSH
// if not hack in hackTanks then
28405: LD_VAR 0 1
28409: PUSH
28410: LD_EXP 106
28414: IN
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28531
// index := GetElementIndex ( hackTanks , hack ) ;
28420: LD_ADDR_VAR 0 4
28424: PUSH
28425: LD_EXP 106
28429: PPUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: CALL 36158 0 2
28439: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28440: LD_EXP 107
28444: PUSH
28445: LD_VAR 0 4
28449: ARRAY
28450: IFFALSE 28531
// begin for i in hackTanksCaptured [ index ] do
28452: LD_ADDR_VAR 0 3
28456: PUSH
28457: LD_EXP 107
28461: PUSH
28462: LD_VAR 0 4
28466: ARRAY
28467: PUSH
28468: FOR_IN
28469: IFFALSE 28495
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28471: LD_VAR 0 3
28475: PUSH
28476: LD_INT 1
28478: ARRAY
28479: PPUSH
28480: LD_VAR 0 3
28484: PUSH
28485: LD_INT 2
28487: ARRAY
28488: PPUSH
28489: CALL_OW 235
28493: GO 28468
28495: POP
28496: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28497: LD_ADDR_EXP 107
28501: PUSH
28502: LD_EXP 107
28506: PPUSH
28507: LD_VAR 0 4
28511: PPUSH
28512: EMPTY
28513: PPUSH
28514: CALL_OW 1
28518: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28519: LD_VAR 0 1
28523: PPUSH
28524: LD_INT 0
28526: PPUSH
28527: CALL_OW 505
// end ; end ;
28531: LD_VAR 0 2
28535: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28536: LD_INT 0
28538: PPUSH
28539: PPUSH
28540: PPUSH
// if not hack in hackTanks or not vehicles then
28541: LD_VAR 0 1
28545: PUSH
28546: LD_EXP 106
28550: IN
28551: NOT
28552: PUSH
28553: LD_VAR 0 2
28557: NOT
28558: OR
28559: IFFALSE 28563
// exit ;
28561: GO 28838
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28563: LD_ADDR_VAR 0 2
28567: PUSH
28568: LD_VAR 0 1
28572: PPUSH
28573: LD_VAR 0 2
28577: PPUSH
28578: LD_INT 1
28580: PPUSH
28581: LD_INT 1
28583: PPUSH
28584: CALL 36808 0 4
28588: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28589: LD_ADDR_VAR 0 5
28593: PUSH
28594: LD_EXP 106
28598: PPUSH
28599: LD_VAR 0 1
28603: PPUSH
28604: CALL 36158 0 2
28608: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28609: LD_EXP 107
28613: PUSH
28614: LD_VAR 0 5
28618: ARRAY
28619: PUSH
28620: LD_EXP 108
28624: LESS
28625: IFFALSE 28814
// begin for i := 1 to vehicles do
28627: LD_ADDR_VAR 0 4
28631: PUSH
28632: DOUBLE
28633: LD_INT 1
28635: DEC
28636: ST_TO_ADDR
28637: LD_VAR 0 2
28641: PUSH
28642: FOR_TO
28643: IFFALSE 28812
// begin if hackTanksCaptured [ index ] = hackLimit then
28645: LD_EXP 107
28649: PUSH
28650: LD_VAR 0 5
28654: ARRAY
28655: PUSH
28656: LD_EXP 108
28660: EQUAL
28661: IFFALSE 28665
// break ;
28663: GO 28812
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28665: LD_ADDR_EXP 110
28669: PUSH
28670: LD_EXP 110
28674: PPUSH
28675: LD_VAR 0 5
28679: PPUSH
28680: LD_EXP 110
28684: PUSH
28685: LD_VAR 0 5
28689: ARRAY
28690: PUSH
28691: LD_INT 1
28693: PLUS
28694: PPUSH
28695: CALL_OW 1
28699: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28700: LD_ADDR_EXP 107
28704: PUSH
28705: LD_EXP 107
28709: PPUSH
28710: LD_VAR 0 5
28714: PUSH
28715: LD_EXP 107
28719: PUSH
28720: LD_VAR 0 5
28724: ARRAY
28725: PUSH
28726: LD_INT 1
28728: PLUS
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: LD_VAR 0 2
28738: PUSH
28739: LD_VAR 0 4
28743: ARRAY
28744: PUSH
28745: LD_VAR 0 2
28749: PUSH
28750: LD_VAR 0 4
28754: ARRAY
28755: PPUSH
28756: CALL_OW 255
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PPUSH
28765: CALL 36373 0 3
28769: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28770: LD_VAR 0 2
28774: PUSH
28775: LD_VAR 0 4
28779: ARRAY
28780: PPUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL_OW 255
28790: PPUSH
28791: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28795: LD_VAR 0 2
28799: PUSH
28800: LD_VAR 0 4
28804: ARRAY
28805: PPUSH
28806: CALL_OW 141
// end ;
28810: GO 28642
28812: POP
28813: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28814: LD_VAR 0 1
28818: PPUSH
28819: LD_EXP 107
28823: PUSH
28824: LD_VAR 0 5
28828: ARRAY
28829: PUSH
28830: LD_INT 0
28832: PLUS
28833: PPUSH
28834: CALL_OW 505
// end ;
28838: LD_VAR 0 3
28842: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28843: LD_INT 0
28845: PPUSH
28846: PPUSH
28847: PPUSH
28848: PPUSH
// if not hack in hackTanks then
28849: LD_VAR 0 1
28853: PUSH
28854: LD_EXP 106
28858: IN
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 29104
// index := GetElementIndex ( hackTanks , hack ) ;
28864: LD_ADDR_VAR 0 4
28868: PUSH
28869: LD_EXP 106
28873: PPUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL 36158 0 2
28883: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: DOUBLE
28890: LD_EXP 107
28894: PUSH
28895: LD_VAR 0 4
28899: ARRAY
28900: INC
28901: ST_TO_ADDR
28902: LD_INT 1
28904: PUSH
28905: FOR_DOWNTO
28906: IFFALSE 29078
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28908: LD_ADDR_VAR 0 5
28912: PUSH
28913: LD_EXP 107
28917: PUSH
28918: LD_VAR 0 4
28922: ARRAY
28923: PUSH
28924: LD_VAR 0 3
28928: ARRAY
28929: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28930: LD_VAR 0 5
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 302
28943: NOT
28944: PUSH
28945: LD_VAR 0 5
28949: PUSH
28950: LD_INT 1
28952: ARRAY
28953: PPUSH
28954: CALL_OW 255
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 255
28968: NONEQUAL
28969: OR
28970: IFFALSE 29076
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28972: LD_VAR 0 5
28976: PUSH
28977: LD_INT 1
28979: ARRAY
28980: PPUSH
28981: CALL_OW 305
28985: PUSH
28986: LD_VAR 0 5
28990: PUSH
28991: LD_INT 1
28993: ARRAY
28994: PPUSH
28995: CALL_OW 255
28999: PUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 255
29009: EQUAL
29010: AND
29011: IFFALSE 29035
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29013: LD_VAR 0 5
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: PPUSH
29022: LD_VAR 0 5
29026: PUSH
29027: LD_INT 2
29029: ARRAY
29030: PPUSH
29031: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29035: LD_ADDR_EXP 107
29039: PUSH
29040: LD_EXP 107
29044: PPUSH
29045: LD_VAR 0 4
29049: PPUSH
29050: LD_EXP 107
29054: PUSH
29055: LD_VAR 0 4
29059: ARRAY
29060: PPUSH
29061: LD_VAR 0 3
29065: PPUSH
29066: CALL_OW 3
29070: PPUSH
29071: CALL_OW 1
29075: ST_TO_ADDR
// end ; end ;
29076: GO 28905
29078: POP
29079: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29080: LD_VAR 0 1
29084: PPUSH
29085: LD_EXP 107
29089: PUSH
29090: LD_VAR 0 4
29094: ARRAY
29095: PUSH
29096: LD_INT 0
29098: PLUS
29099: PPUSH
29100: CALL_OW 505
// end ;
29104: LD_VAR 0 2
29108: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
// if not hack in hackTanks then
29115: LD_VAR 0 1
29119: PUSH
29120: LD_EXP 106
29124: IN
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29215
// index := GetElementIndex ( hackTanks , hack ) ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_EXP 106
29139: PPUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL 36158 0 2
29149: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29150: LD_ADDR_VAR 0 4
29154: PUSH
29155: DOUBLE
29156: LD_INT 1
29158: DEC
29159: ST_TO_ADDR
29160: LD_EXP 107
29164: PUSH
29165: LD_VAR 0 5
29169: ARRAY
29170: PUSH
29171: FOR_TO
29172: IFFALSE 29213
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29174: LD_EXP 107
29178: PUSH
29179: LD_VAR 0 5
29183: ARRAY
29184: PUSH
29185: LD_VAR 0 4
29189: ARRAY
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PUSH
29195: LD_VAR 0 2
29199: EQUAL
29200: IFFALSE 29211
// KillUnit ( vehicle ) ;
29202: LD_VAR 0 2
29206: PPUSH
29207: CALL_OW 66
29211: GO 29171
29213: POP
29214: POP
// end ;
29215: LD_VAR 0 3
29219: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29220: LD_EXP 111
29224: NOT
29225: IFFALSE 29260
29227: GO 29229
29229: DISABLE
// begin initMiner := true ;
29230: LD_ADDR_EXP 111
29234: PUSH
29235: LD_INT 1
29237: ST_TO_ADDR
// minersList := [ ] ;
29238: LD_ADDR_EXP 112
29242: PUSH
29243: EMPTY
29244: ST_TO_ADDR
// minerMinesList := [ ] ;
29245: LD_ADDR_EXP 113
29249: PUSH
29250: EMPTY
29251: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29252: LD_ADDR_EXP 114
29256: PUSH
29257: LD_INT 5
29259: ST_TO_ADDR
// end ;
29260: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29261: LD_EXP 111
29265: PUSH
29266: LD_INT 34
29268: PUSH
29269: LD_EXP 33
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PPUSH
29278: CALL_OW 69
29282: AND
29283: IFFALSE 29746
29285: GO 29287
29287: DISABLE
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
// begin enable ;
29294: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29295: LD_ADDR_VAR 0 1
29299: PUSH
29300: LD_INT 34
29302: PUSH
29303: LD_EXP 33
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PPUSH
29312: CALL_OW 69
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29390
// begin if not i in minersList then
29320: LD_VAR 0 1
29324: PUSH
29325: LD_EXP 112
29329: IN
29330: NOT
29331: IFFALSE 29388
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29333: LD_ADDR_EXP 112
29337: PUSH
29338: LD_EXP 112
29342: PPUSH
29343: LD_EXP 112
29347: PUSH
29348: LD_INT 1
29350: PLUS
29351: PPUSH
29352: LD_VAR 0 1
29356: PPUSH
29357: CALL_OW 1
29361: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29362: LD_ADDR_EXP 113
29366: PUSH
29367: LD_EXP 113
29371: PPUSH
29372: LD_EXP 113
29376: PUSH
29377: LD_INT 1
29379: PLUS
29380: PPUSH
29381: EMPTY
29382: PPUSH
29383: CALL_OW 1
29387: ST_TO_ADDR
// end end ;
29388: GO 29317
29390: POP
29391: POP
// for i := minerMinesList downto 1 do
29392: LD_ADDR_VAR 0 1
29396: PUSH
29397: DOUBLE
29398: LD_EXP 113
29402: INC
29403: ST_TO_ADDR
29404: LD_INT 1
29406: PUSH
29407: FOR_DOWNTO
29408: IFFALSE 29744
// begin if IsLive ( minersList [ i ] ) then
29410: LD_EXP 112
29414: PUSH
29415: LD_VAR 0 1
29419: ARRAY
29420: PPUSH
29421: CALL_OW 300
29425: IFFALSE 29453
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29427: LD_EXP 112
29431: PUSH
29432: LD_VAR 0 1
29436: ARRAY
29437: PPUSH
29438: LD_EXP 113
29442: PUSH
29443: LD_VAR 0 1
29447: ARRAY
29448: PPUSH
29449: CALL_OW 505
// if not minerMinesList [ i ] then
29453: LD_EXP 113
29457: PUSH
29458: LD_VAR 0 1
29462: ARRAY
29463: NOT
29464: IFFALSE 29468
// continue ;
29466: GO 29407
// for j := minerMinesList [ i ] downto 1 do
29468: LD_ADDR_VAR 0 2
29472: PUSH
29473: DOUBLE
29474: LD_EXP 113
29478: PUSH
29479: LD_VAR 0 1
29483: ARRAY
29484: INC
29485: ST_TO_ADDR
29486: LD_INT 1
29488: PUSH
29489: FOR_DOWNTO
29490: IFFALSE 29740
// begin side := GetSide ( minersList [ i ] ) ;
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_EXP 112
29501: PUSH
29502: LD_VAR 0 1
29506: ARRAY
29507: PPUSH
29508: CALL_OW 255
29512: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29513: LD_ADDR_VAR 0 4
29517: PUSH
29518: LD_EXP 113
29522: PUSH
29523: LD_VAR 0 1
29527: ARRAY
29528: PUSH
29529: LD_VAR 0 2
29533: ARRAY
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: PPUSH
29539: LD_EXP 113
29543: PUSH
29544: LD_VAR 0 1
29548: ARRAY
29549: PUSH
29550: LD_VAR 0 2
29554: ARRAY
29555: PUSH
29556: LD_INT 2
29558: ARRAY
29559: PPUSH
29560: CALL_OW 428
29564: ST_TO_ADDR
// if not tmp then
29565: LD_VAR 0 4
29569: NOT
29570: IFFALSE 29574
// continue ;
29572: GO 29489
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29574: LD_VAR 0 4
29578: PUSH
29579: LD_INT 81
29581: PUSH
29582: LD_VAR 0 3
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 69
29595: IN
29596: PUSH
29597: LD_EXP 113
29601: PUSH
29602: LD_VAR 0 1
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 2
29612: ARRAY
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: LD_EXP 113
29622: PUSH
29623: LD_VAR 0 1
29627: ARRAY
29628: PUSH
29629: LD_VAR 0 2
29633: ARRAY
29634: PUSH
29635: LD_INT 2
29637: ARRAY
29638: PPUSH
29639: CALL_OW 458
29643: AND
29644: IFFALSE 29738
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29646: LD_EXP 113
29650: PUSH
29651: LD_VAR 0 1
29655: ARRAY
29656: PUSH
29657: LD_VAR 0 2
29661: ARRAY
29662: PUSH
29663: LD_INT 1
29665: ARRAY
29666: PPUSH
29667: LD_EXP 113
29671: PUSH
29672: LD_VAR 0 1
29676: ARRAY
29677: PUSH
29678: LD_VAR 0 2
29682: ARRAY
29683: PUSH
29684: LD_INT 2
29686: ARRAY
29687: PPUSH
29688: LD_VAR 0 3
29692: PPUSH
29693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29697: LD_ADDR_EXP 113
29701: PUSH
29702: LD_EXP 113
29706: PPUSH
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_EXP 113
29716: PUSH
29717: LD_VAR 0 1
29721: ARRAY
29722: PPUSH
29723: LD_VAR 0 2
29727: PPUSH
29728: CALL_OW 3
29732: PPUSH
29733: CALL_OW 1
29737: ST_TO_ADDR
// end ; end ;
29738: GO 29489
29740: POP
29741: POP
// end ;
29742: GO 29407
29744: POP
29745: POP
// end ;
29746: PPOPN 4
29748: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29749: LD_INT 0
29751: PPUSH
29752: PPUSH
// result := false ;
29753: LD_ADDR_VAR 0 4
29757: PUSH
29758: LD_INT 0
29760: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29761: LD_VAR 0 1
29765: PPUSH
29766: CALL_OW 264
29770: PUSH
29771: LD_EXP 33
29775: EQUAL
29776: NOT
29777: IFFALSE 29781
// exit ;
29779: GO 30021
// index := GetElementIndex ( minersList , unit ) ;
29781: LD_ADDR_VAR 0 5
29785: PUSH
29786: LD_EXP 112
29790: PPUSH
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL 36158 0 2
29800: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29801: LD_EXP 113
29805: PUSH
29806: LD_VAR 0 5
29810: ARRAY
29811: PUSH
29812: LD_EXP 114
29816: GREATEREQUAL
29817: IFFALSE 29821
// exit ;
29819: GO 30021
// ComMoveXY ( unit , x , y ) ;
29821: LD_VAR 0 1
29825: PPUSH
29826: LD_VAR 0 2
29830: PPUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29840: LD_INT 35
29842: PPUSH
29843: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29847: LD_VAR 0 1
29851: PPUSH
29852: LD_VAR 0 2
29856: PPUSH
29857: LD_VAR 0 3
29861: PPUSH
29862: CALL 67444 0 3
29866: NOT
29867: PUSH
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 314
29877: AND
29878: IFFALSE 29882
// exit ;
29880: GO 30021
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29882: LD_VAR 0 2
29886: PPUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: CALL_OW 428
29896: PUSH
29897: LD_VAR 0 1
29901: EQUAL
29902: PUSH
29903: LD_VAR 0 1
29907: PPUSH
29908: CALL_OW 314
29912: NOT
29913: AND
29914: IFFALSE 29840
// PlaySoundXY ( x , y , PlantMine ) ;
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 3
29925: PPUSH
29926: LD_STRING PlantMine
29928: PPUSH
29929: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29933: LD_VAR 0 2
29937: PPUSH
29938: LD_VAR 0 3
29942: PPUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL_OW 255
29952: PPUSH
29953: LD_INT 0
29955: PPUSH
29956: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29960: LD_ADDR_EXP 113
29964: PUSH
29965: LD_EXP 113
29969: PPUSH
29970: LD_VAR 0 5
29974: PUSH
29975: LD_EXP 113
29979: PUSH
29980: LD_VAR 0 5
29984: ARRAY
29985: PUSH
29986: LD_INT 1
29988: PLUS
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: LD_VAR 0 2
29998: PUSH
29999: LD_VAR 0 3
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PPUSH
30008: CALL 36373 0 3
30012: ST_TO_ADDR
// result := true ;
30013: LD_ADDR_VAR 0 4
30017: PUSH
30018: LD_INT 1
30020: ST_TO_ADDR
// end ;
30021: LD_VAR 0 4
30025: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30026: LD_INT 0
30028: PPUSH
30029: PPUSH
30030: PPUSH
// if not unit in minersList then
30031: LD_VAR 0 1
30035: PUSH
30036: LD_EXP 112
30040: IN
30041: NOT
30042: IFFALSE 30046
// exit ;
30044: GO 30438
// index := GetElementIndex ( minersList , unit ) ;
30046: LD_ADDR_VAR 0 6
30050: PUSH
30051: LD_EXP 112
30055: PPUSH
30056: LD_VAR 0 1
30060: PPUSH
30061: CALL 36158 0 2
30065: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30066: LD_ADDR_VAR 0 5
30070: PUSH
30071: DOUBLE
30072: LD_EXP 113
30076: PUSH
30077: LD_VAR 0 6
30081: ARRAY
30082: INC
30083: ST_TO_ADDR
30084: LD_INT 1
30086: PUSH
30087: FOR_DOWNTO
30088: IFFALSE 30249
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30090: LD_EXP 113
30094: PUSH
30095: LD_VAR 0 6
30099: ARRAY
30100: PUSH
30101: LD_VAR 0 5
30105: ARRAY
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: PUSH
30111: LD_VAR 0 2
30115: EQUAL
30116: PUSH
30117: LD_EXP 113
30121: PUSH
30122: LD_VAR 0 6
30126: ARRAY
30127: PUSH
30128: LD_VAR 0 5
30132: ARRAY
30133: PUSH
30134: LD_INT 2
30136: ARRAY
30137: PUSH
30138: LD_VAR 0 3
30142: EQUAL
30143: AND
30144: IFFALSE 30247
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30146: LD_EXP 113
30150: PUSH
30151: LD_VAR 0 6
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 5
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_EXP 113
30171: PUSH
30172: LD_VAR 0 6
30176: ARRAY
30177: PUSH
30178: LD_VAR 0 5
30182: ARRAY
30183: PUSH
30184: LD_INT 2
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 255
30197: PPUSH
30198: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30202: LD_ADDR_EXP 113
30206: PUSH
30207: LD_EXP 113
30211: PPUSH
30212: LD_VAR 0 6
30216: PPUSH
30217: LD_EXP 113
30221: PUSH
30222: LD_VAR 0 6
30226: ARRAY
30227: PPUSH
30228: LD_VAR 0 5
30232: PPUSH
30233: CALL_OW 3
30237: PPUSH
30238: CALL_OW 1
30242: ST_TO_ADDR
// exit ;
30243: POP
30244: POP
30245: GO 30438
// end ; end ;
30247: GO 30087
30249: POP
30250: POP
// for i := minerMinesList [ index ] downto 1 do
30251: LD_ADDR_VAR 0 5
30255: PUSH
30256: DOUBLE
30257: LD_EXP 113
30261: PUSH
30262: LD_VAR 0 6
30266: ARRAY
30267: INC
30268: ST_TO_ADDR
30269: LD_INT 1
30271: PUSH
30272: FOR_DOWNTO
30273: IFFALSE 30436
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30275: LD_EXP 113
30279: PUSH
30280: LD_VAR 0 6
30284: ARRAY
30285: PUSH
30286: LD_VAR 0 5
30290: ARRAY
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: PPUSH
30296: LD_EXP 113
30300: PUSH
30301: LD_VAR 0 6
30305: ARRAY
30306: PUSH
30307: LD_VAR 0 5
30311: ARRAY
30312: PUSH
30313: LD_INT 2
30315: ARRAY
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: CALL_OW 298
30331: PUSH
30332: LD_INT 6
30334: LESS
30335: IFFALSE 30434
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30337: LD_EXP 113
30341: PUSH
30342: LD_VAR 0 6
30346: ARRAY
30347: PUSH
30348: LD_VAR 0 5
30352: ARRAY
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PPUSH
30358: LD_EXP 113
30362: PUSH
30363: LD_VAR 0 6
30367: ARRAY
30368: PUSH
30369: LD_VAR 0 5
30373: ARRAY
30374: PUSH
30375: LD_INT 2
30377: ARRAY
30378: PPUSH
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 255
30388: PPUSH
30389: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30393: LD_ADDR_EXP 113
30397: PUSH
30398: LD_EXP 113
30402: PPUSH
30403: LD_VAR 0 6
30407: PPUSH
30408: LD_EXP 113
30412: PUSH
30413: LD_VAR 0 6
30417: ARRAY
30418: PPUSH
30419: LD_VAR 0 5
30423: PPUSH
30424: CALL_OW 3
30428: PPUSH
30429: CALL_OW 1
30433: ST_TO_ADDR
// end ; end ;
30434: GO 30272
30436: POP
30437: POP
// end ;
30438: LD_VAR 0 4
30442: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
30447: PPUSH
30448: PPUSH
30449: PPUSH
30450: PPUSH
30451: PPUSH
30452: PPUSH
30453: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30454: LD_VAR 0 1
30458: PPUSH
30459: CALL_OW 264
30463: PUSH
30464: LD_EXP 33
30468: EQUAL
30469: NOT
30470: PUSH
30471: LD_VAR 0 1
30475: PUSH
30476: LD_EXP 112
30480: IN
30481: NOT
30482: OR
30483: IFFALSE 30487
// exit ;
30485: GO 30809
// index := GetElementIndex ( minersList , unit ) ;
30487: LD_ADDR_VAR 0 6
30491: PUSH
30492: LD_EXP 112
30496: PPUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL 36158 0 2
30506: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30507: LD_ADDR_VAR 0 8
30511: PUSH
30512: LD_EXP 114
30516: PUSH
30517: LD_EXP 113
30521: PUSH
30522: LD_VAR 0 6
30526: ARRAY
30527: MINUS
30528: ST_TO_ADDR
// if not minesFreeAmount then
30529: LD_VAR 0 8
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30809
// tmp := [ ] ;
30538: LD_ADDR_VAR 0 7
30542: PUSH
30543: EMPTY
30544: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30545: LD_ADDR_VAR 0 5
30549: PUSH
30550: DOUBLE
30551: LD_INT 1
30553: DEC
30554: ST_TO_ADDR
30555: LD_VAR 0 8
30559: PUSH
30560: FOR_TO
30561: IFFALSE 30756
// begin _d := rand ( 0 , 5 ) ;
30563: LD_ADDR_VAR 0 11
30567: PUSH
30568: LD_INT 0
30570: PPUSH
30571: LD_INT 5
30573: PPUSH
30574: CALL_OW 12
30578: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30579: LD_ADDR_VAR 0 12
30583: PUSH
30584: LD_INT 2
30586: PPUSH
30587: LD_INT 6
30589: PPUSH
30590: CALL_OW 12
30594: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30595: LD_ADDR_VAR 0 9
30599: PUSH
30600: LD_VAR 0 2
30604: PPUSH
30605: LD_VAR 0 11
30609: PPUSH
30610: LD_VAR 0 12
30614: PPUSH
30615: CALL_OW 272
30619: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30620: LD_ADDR_VAR 0 10
30624: PUSH
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_VAR 0 11
30634: PPUSH
30635: LD_VAR 0 12
30639: PPUSH
30640: CALL_OW 273
30644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30645: LD_VAR 0 9
30649: PPUSH
30650: LD_VAR 0 10
30654: PPUSH
30655: CALL_OW 488
30659: PUSH
30660: LD_VAR 0 9
30664: PUSH
30665: LD_VAR 0 10
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_VAR 0 7
30678: IN
30679: NOT
30680: AND
30681: PUSH
30682: LD_VAR 0 9
30686: PPUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: CALL_OW 458
30696: NOT
30697: AND
30698: IFFALSE 30740
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30700: LD_ADDR_VAR 0 7
30704: PUSH
30705: LD_VAR 0 7
30709: PPUSH
30710: LD_VAR 0 7
30714: PUSH
30715: LD_INT 1
30717: PLUS
30718: PPUSH
30719: LD_VAR 0 9
30723: PUSH
30724: LD_VAR 0 10
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PPUSH
30733: CALL_OW 1
30737: ST_TO_ADDR
30738: GO 30754
// i := i - 1 ;
30740: LD_ADDR_VAR 0 5
30744: PUSH
30745: LD_VAR 0 5
30749: PUSH
30750: LD_INT 1
30752: MINUS
30753: ST_TO_ADDR
// end ;
30754: GO 30560
30756: POP
30757: POP
// for i in tmp do
30758: LD_ADDR_VAR 0 5
30762: PUSH
30763: LD_VAR 0 7
30767: PUSH
30768: FOR_IN
30769: IFFALSE 30807
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30771: LD_VAR 0 1
30775: PPUSH
30776: LD_VAR 0 5
30780: PUSH
30781: LD_INT 1
30783: ARRAY
30784: PPUSH
30785: LD_VAR 0 5
30789: PUSH
30790: LD_INT 2
30792: ARRAY
30793: PPUSH
30794: CALL 29749 0 3
30798: NOT
30799: IFFALSE 30805
// exit ;
30801: POP
30802: POP
30803: GO 30809
30805: GO 30768
30807: POP
30808: POP
// end ;
30809: LD_VAR 0 4
30813: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30814: LD_INT 0
30816: PPUSH
30817: PPUSH
30818: PPUSH
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
// if not GetClass ( unit ) = class_sniper then
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 257
30832: PUSH
30833: LD_INT 5
30835: EQUAL
30836: NOT
30837: IFFALSE 30841
// exit ;
30839: GO 31229
// dist := 8 ;
30841: LD_ADDR_VAR 0 5
30845: PUSH
30846: LD_INT 8
30848: ST_TO_ADDR
// viewRange := 12 ;
30849: LD_ADDR_VAR 0 7
30853: PUSH
30854: LD_INT 12
30856: ST_TO_ADDR
// side := GetSide ( unit ) ;
30857: LD_ADDR_VAR 0 6
30861: PUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 255
30871: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30872: LD_INT 61
30874: PPUSH
30875: LD_VAR 0 6
30879: PPUSH
30880: CALL_OW 321
30884: PUSH
30885: LD_INT 2
30887: EQUAL
30888: IFFALSE 30898
// viewRange := 16 ;
30890: LD_ADDR_VAR 0 7
30894: PUSH
30895: LD_INT 16
30897: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30898: LD_VAR 0 1
30902: PPUSH
30903: LD_VAR 0 2
30907: PPUSH
30908: LD_VAR 0 3
30912: PPUSH
30913: CALL_OW 297
30917: PUSH
30918: LD_VAR 0 5
30922: GREATER
30923: IFFALSE 31002
// begin ComMoveXY ( unit , x , y ) ;
30925: LD_VAR 0 1
30929: PPUSH
30930: LD_VAR 0 2
30934: PPUSH
30935: LD_VAR 0 3
30939: PPUSH
30940: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30944: LD_INT 35
30946: PPUSH
30947: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30951: LD_VAR 0 1
30955: PPUSH
30956: LD_VAR 0 2
30960: PPUSH
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL 67444 0 3
30970: NOT
30971: IFFALSE 30975
// exit ;
30973: GO 31229
// until GetDistUnitXY ( unit , x , y ) < dist ;
30975: LD_VAR 0 1
30979: PPUSH
30980: LD_VAR 0 2
30984: PPUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: CALL_OW 297
30994: PUSH
30995: LD_VAR 0 5
30999: LESS
31000: IFFALSE 30944
// end ; ComTurnXY ( unit , x , y ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_VAR 0 2
31011: PPUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: CALL_OW 118
// wait ( 5 ) ;
31021: LD_INT 5
31023: PPUSH
31024: CALL_OW 67
// _d := GetDir ( unit ) ;
31028: LD_ADDR_VAR 0 10
31032: PUSH
31033: LD_VAR 0 1
31037: PPUSH
31038: CALL_OW 254
31042: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31043: LD_ADDR_VAR 0 8
31047: PUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 250
31057: PPUSH
31058: LD_VAR 0 10
31062: PPUSH
31063: LD_VAR 0 5
31067: PPUSH
31068: CALL_OW 272
31072: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31073: LD_ADDR_VAR 0 9
31077: PUSH
31078: LD_VAR 0 1
31082: PPUSH
31083: CALL_OW 251
31087: PPUSH
31088: LD_VAR 0 10
31092: PPUSH
31093: LD_VAR 0 5
31097: PPUSH
31098: CALL_OW 273
31102: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31103: LD_VAR 0 8
31107: PPUSH
31108: LD_VAR 0 9
31112: PPUSH
31113: CALL_OW 488
31117: NOT
31118: IFFALSE 31122
// exit ;
31120: GO 31229
// ComAnimCustom ( unit , 1 ) ;
31122: LD_VAR 0 1
31126: PPUSH
31127: LD_INT 1
31129: PPUSH
31130: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31134: LD_VAR 0 8
31138: PPUSH
31139: LD_VAR 0 9
31143: PPUSH
31144: LD_VAR 0 6
31148: PPUSH
31149: LD_VAR 0 7
31153: PPUSH
31154: CALL_OW 330
// repeat wait ( 1 ) ;
31158: LD_INT 1
31160: PPUSH
31161: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31165: LD_VAR 0 1
31169: PPUSH
31170: CALL_OW 316
31174: PUSH
31175: LD_VAR 0 1
31179: PPUSH
31180: CALL_OW 314
31184: OR
31185: PUSH
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 302
31195: NOT
31196: OR
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 301
31207: OR
31208: IFFALSE 31158
// RemoveSeeing ( _x , _y , side ) ;
31210: LD_VAR 0 8
31214: PPUSH
31215: LD_VAR 0 9
31219: PPUSH
31220: LD_VAR 0 6
31224: PPUSH
31225: CALL_OW 331
// end ; end_of_file
31229: LD_VAR 0 4
31233: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
// if exist_mode then
31238: LD_VAR 0 2
31242: IFFALSE 31267
// unit := CreateCharacter ( prefix & ident ) else
31244: LD_ADDR_VAR 0 5
31248: PUSH
31249: LD_VAR 0 3
31253: PUSH
31254: LD_VAR 0 1
31258: STR
31259: PPUSH
31260: CALL_OW 34
31264: ST_TO_ADDR
31265: GO 31282
// unit := NewCharacter ( ident ) ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 1
31276: PPUSH
31277: CALL_OW 25
31281: ST_TO_ADDR
// result := unit ;
31282: LD_ADDR_VAR 0 4
31286: PUSH
31287: LD_VAR 0 5
31291: ST_TO_ADDR
// end ;
31292: LD_VAR 0 4
31296: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31297: LD_INT 0
31299: PPUSH
31300: PPUSH
// if not side or not nation then
31301: LD_VAR 0 1
31305: NOT
31306: PUSH
31307: LD_VAR 0 2
31311: NOT
31312: OR
31313: IFFALSE 31317
// exit ;
31315: GO 32085
// case nation of nation_american :
31317: LD_VAR 0 2
31321: PUSH
31322: LD_INT 1
31324: DOUBLE
31325: EQUAL
31326: IFTRUE 31330
31328: GO 31544
31330: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31331: LD_ADDR_VAR 0 4
31335: PUSH
31336: LD_INT 35
31338: PUSH
31339: LD_INT 45
31341: PUSH
31342: LD_INT 46
31344: PUSH
31345: LD_INT 47
31347: PUSH
31348: LD_INT 82
31350: PUSH
31351: LD_INT 83
31353: PUSH
31354: LD_INT 84
31356: PUSH
31357: LD_INT 85
31359: PUSH
31360: LD_INT 86
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 6
31371: PUSH
31372: LD_INT 15
31374: PUSH
31375: LD_INT 16
31377: PUSH
31378: LD_INT 7
31380: PUSH
31381: LD_INT 12
31383: PUSH
31384: LD_INT 13
31386: PUSH
31387: LD_INT 10
31389: PUSH
31390: LD_INT 14
31392: PUSH
31393: LD_INT 20
31395: PUSH
31396: LD_INT 21
31398: PUSH
31399: LD_INT 22
31401: PUSH
31402: LD_INT 25
31404: PUSH
31405: LD_INT 32
31407: PUSH
31408: LD_INT 27
31410: PUSH
31411: LD_INT 36
31413: PUSH
31414: LD_INT 69
31416: PUSH
31417: LD_INT 39
31419: PUSH
31420: LD_INT 34
31422: PUSH
31423: LD_INT 40
31425: PUSH
31426: LD_INT 48
31428: PUSH
31429: LD_INT 49
31431: PUSH
31432: LD_INT 50
31434: PUSH
31435: LD_INT 51
31437: PUSH
31438: LD_INT 52
31440: PUSH
31441: LD_INT 53
31443: PUSH
31444: LD_INT 54
31446: PUSH
31447: LD_INT 55
31449: PUSH
31450: LD_INT 56
31452: PUSH
31453: LD_INT 57
31455: PUSH
31456: LD_INT 58
31458: PUSH
31459: LD_INT 59
31461: PUSH
31462: LD_INT 60
31464: PUSH
31465: LD_INT 61
31467: PUSH
31468: LD_INT 62
31470: PUSH
31471: LD_INT 80
31473: PUSH
31474: LD_INT 82
31476: PUSH
31477: LD_INT 83
31479: PUSH
31480: LD_INT 84
31482: PUSH
31483: LD_INT 85
31485: PUSH
31486: LD_INT 86
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
31542: GO 32009
31544: LD_INT 2
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31552
31550: GO 31778
31552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31553: LD_ADDR_VAR 0 4
31557: PUSH
31558: LD_INT 35
31560: PUSH
31561: LD_INT 45
31563: PUSH
31564: LD_INT 46
31566: PUSH
31567: LD_INT 47
31569: PUSH
31570: LD_INT 82
31572: PUSH
31573: LD_INT 83
31575: PUSH
31576: LD_INT 84
31578: PUSH
31579: LD_INT 85
31581: PUSH
31582: LD_INT 87
31584: PUSH
31585: LD_INT 70
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 11
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 4
31599: PUSH
31600: LD_INT 5
31602: PUSH
31603: LD_INT 6
31605: PUSH
31606: LD_INT 15
31608: PUSH
31609: LD_INT 18
31611: PUSH
31612: LD_INT 7
31614: PUSH
31615: LD_INT 17
31617: PUSH
31618: LD_INT 8
31620: PUSH
31621: LD_INT 20
31623: PUSH
31624: LD_INT 21
31626: PUSH
31627: LD_INT 22
31629: PUSH
31630: LD_INT 72
31632: PUSH
31633: LD_INT 26
31635: PUSH
31636: LD_INT 69
31638: PUSH
31639: LD_INT 39
31641: PUSH
31642: LD_INT 40
31644: PUSH
31645: LD_INT 41
31647: PUSH
31648: LD_INT 42
31650: PUSH
31651: LD_INT 43
31653: PUSH
31654: LD_INT 48
31656: PUSH
31657: LD_INT 49
31659: PUSH
31660: LD_INT 50
31662: PUSH
31663: LD_INT 51
31665: PUSH
31666: LD_INT 52
31668: PUSH
31669: LD_INT 53
31671: PUSH
31672: LD_INT 54
31674: PUSH
31675: LD_INT 55
31677: PUSH
31678: LD_INT 56
31680: PUSH
31681: LD_INT 60
31683: PUSH
31684: LD_INT 61
31686: PUSH
31687: LD_INT 62
31689: PUSH
31690: LD_INT 66
31692: PUSH
31693: LD_INT 67
31695: PUSH
31696: LD_INT 68
31698: PUSH
31699: LD_INT 81
31701: PUSH
31702: LD_INT 82
31704: PUSH
31705: LD_INT 83
31707: PUSH
31708: LD_INT 84
31710: PUSH
31711: LD_INT 85
31713: PUSH
31714: LD_INT 87
31716: PUSH
31717: LD_INT 88
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
31776: GO 32009
31778: LD_INT 3
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 32008
31786: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31787: LD_ADDR_VAR 0 4
31791: PUSH
31792: LD_INT 46
31794: PUSH
31795: LD_INT 47
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 82
31806: PUSH
31807: LD_INT 83
31809: PUSH
31810: LD_INT 84
31812: PUSH
31813: LD_INT 85
31815: PUSH
31816: LD_INT 86
31818: PUSH
31819: LD_INT 11
31821: PUSH
31822: LD_INT 9
31824: PUSH
31825: LD_INT 20
31827: PUSH
31828: LD_INT 19
31830: PUSH
31831: LD_INT 21
31833: PUSH
31834: LD_INT 24
31836: PUSH
31837: LD_INT 22
31839: PUSH
31840: LD_INT 25
31842: PUSH
31843: LD_INT 28
31845: PUSH
31846: LD_INT 29
31848: PUSH
31849: LD_INT 30
31851: PUSH
31852: LD_INT 31
31854: PUSH
31855: LD_INT 37
31857: PUSH
31858: LD_INT 38
31860: PUSH
31861: LD_INT 32
31863: PUSH
31864: LD_INT 27
31866: PUSH
31867: LD_INT 33
31869: PUSH
31870: LD_INT 69
31872: PUSH
31873: LD_INT 39
31875: PUSH
31876: LD_INT 34
31878: PUSH
31879: LD_INT 40
31881: PUSH
31882: LD_INT 71
31884: PUSH
31885: LD_INT 23
31887: PUSH
31888: LD_INT 44
31890: PUSH
31891: LD_INT 48
31893: PUSH
31894: LD_INT 49
31896: PUSH
31897: LD_INT 50
31899: PUSH
31900: LD_INT 51
31902: PUSH
31903: LD_INT 52
31905: PUSH
31906: LD_INT 53
31908: PUSH
31909: LD_INT 54
31911: PUSH
31912: LD_INT 55
31914: PUSH
31915: LD_INT 56
31917: PUSH
31918: LD_INT 57
31920: PUSH
31921: LD_INT 58
31923: PUSH
31924: LD_INT 59
31926: PUSH
31927: LD_INT 63
31929: PUSH
31930: LD_INT 64
31932: PUSH
31933: LD_INT 65
31935: PUSH
31936: LD_INT 82
31938: PUSH
31939: LD_INT 83
31941: PUSH
31942: LD_INT 84
31944: PUSH
31945: LD_INT 85
31947: PUSH
31948: LD_INT 86
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
32006: GO 32009
32008: POP
// if state > - 1 and state < 3 then
32009: LD_VAR 0 3
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: GREATER
32018: PUSH
32019: LD_VAR 0 3
32023: PUSH
32024: LD_INT 3
32026: LESS
32027: AND
32028: IFFALSE 32085
// for i in result do
32030: LD_ADDR_VAR 0 5
32034: PUSH
32035: LD_VAR 0 4
32039: PUSH
32040: FOR_IN
32041: IFFALSE 32083
// if GetTech ( i , side ) <> state then
32043: LD_VAR 0 5
32047: PPUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: CALL_OW 321
32057: PUSH
32058: LD_VAR 0 3
32062: NONEQUAL
32063: IFFALSE 32081
// result := result diff i ;
32065: LD_ADDR_VAR 0 4
32069: PUSH
32070: LD_VAR 0 4
32074: PUSH
32075: LD_VAR 0 5
32079: DIFF
32080: ST_TO_ADDR
32081: GO 32040
32083: POP
32084: POP
// end ;
32085: LD_VAR 0 4
32089: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32090: LD_INT 0
32092: PPUSH
32093: PPUSH
32094: PPUSH
// result := true ;
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_INT 1
32102: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32103: LD_ADDR_VAR 0 5
32107: PUSH
32108: LD_VAR 0 2
32112: PPUSH
32113: CALL_OW 480
32117: ST_TO_ADDR
// if not tmp then
32118: LD_VAR 0 5
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32176
// for i in tmp do
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: LD_VAR 0 5
32136: PUSH
32137: FOR_IN
32138: IFFALSE 32174
// if GetTech ( i , side ) <> state_researched then
32140: LD_VAR 0 4
32144: PPUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 321
32154: PUSH
32155: LD_INT 2
32157: NONEQUAL
32158: IFFALSE 32172
// begin result := false ;
32160: LD_ADDR_VAR 0 3
32164: PUSH
32165: LD_INT 0
32167: ST_TO_ADDR
// exit ;
32168: POP
32169: POP
32170: GO 32176
// end ;
32172: GO 32137
32174: POP
32175: POP
// end ;
32176: LD_VAR 0 3
32180: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32181: LD_INT 0
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
32187: PPUSH
32188: PPUSH
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32196: LD_VAR 0 1
32200: NOT
32201: PUSH
32202: LD_VAR 0 1
32206: PPUSH
32207: CALL_OW 257
32211: PUSH
32212: LD_INT 9
32214: NONEQUAL
32215: OR
32216: IFFALSE 32220
// exit ;
32218: GO 32793
// side := GetSide ( unit ) ;
32220: LD_ADDR_VAR 0 9
32224: PUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 255
32234: ST_TO_ADDR
// tech_space := tech_spacanom ;
32235: LD_ADDR_VAR 0 12
32239: PUSH
32240: LD_INT 29
32242: ST_TO_ADDR
// tech_time := tech_taurad ;
32243: LD_ADDR_VAR 0 13
32247: PUSH
32248: LD_INT 28
32250: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32251: LD_ADDR_VAR 0 11
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 310
32265: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32266: LD_VAR 0 11
32270: PPUSH
32271: CALL_OW 247
32275: PUSH
32276: LD_INT 2
32278: EQUAL
32279: IFFALSE 32283
// exit ;
32281: GO 32793
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32283: LD_ADDR_VAR 0 8
32287: PUSH
32288: LD_INT 81
32290: PUSH
32291: LD_VAR 0 9
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 21
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PPUSH
32321: CALL_OW 69
32325: ST_TO_ADDR
// if not tmp then
32326: LD_VAR 0 8
32330: NOT
32331: IFFALSE 32335
// exit ;
32333: GO 32793
// if in_unit then
32335: LD_VAR 0 11
32339: IFFALSE 32363
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32341: LD_ADDR_VAR 0 10
32345: PUSH
32346: LD_VAR 0 8
32350: PPUSH
32351: LD_VAR 0 11
32355: PPUSH
32356: CALL_OW 74
32360: ST_TO_ADDR
32361: GO 32383
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32363: LD_ADDR_VAR 0 10
32367: PUSH
32368: LD_VAR 0 8
32372: PPUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 74
32382: ST_TO_ADDR
// if not enemy then
32383: LD_VAR 0 10
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32793
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32392: LD_VAR 0 11
32396: PUSH
32397: LD_VAR 0 11
32401: PPUSH
32402: LD_VAR 0 10
32406: PPUSH
32407: CALL_OW 296
32411: PUSH
32412: LD_INT 13
32414: GREATER
32415: AND
32416: PUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 10
32426: PPUSH
32427: CALL_OW 296
32431: PUSH
32432: LD_INT 12
32434: GREATER
32435: OR
32436: IFFALSE 32440
// exit ;
32438: GO 32793
// missile := [ 1 ] ;
32440: LD_ADDR_VAR 0 14
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32451: LD_VAR 0 9
32455: PPUSH
32456: LD_VAR 0 12
32460: PPUSH
32461: CALL_OW 325
32465: IFFALSE 32494
// missile := Replace ( missile , missile + 1 , 2 ) ;
32467: LD_ADDR_VAR 0 14
32471: PUSH
32472: LD_VAR 0 14
32476: PPUSH
32477: LD_VAR 0 14
32481: PUSH
32482: LD_INT 1
32484: PLUS
32485: PPUSH
32486: LD_INT 2
32488: PPUSH
32489: CALL_OW 1
32493: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32494: LD_VAR 0 9
32498: PPUSH
32499: LD_VAR 0 13
32503: PPUSH
32504: CALL_OW 325
32508: PUSH
32509: LD_VAR 0 10
32513: PPUSH
32514: CALL_OW 255
32518: PPUSH
32519: LD_VAR 0 13
32523: PPUSH
32524: CALL_OW 325
32528: NOT
32529: AND
32530: IFFALSE 32559
// missile := Replace ( missile , missile + 1 , 3 ) ;
32532: LD_ADDR_VAR 0 14
32536: PUSH
32537: LD_VAR 0 14
32541: PPUSH
32542: LD_VAR 0 14
32546: PUSH
32547: LD_INT 1
32549: PLUS
32550: PPUSH
32551: LD_INT 3
32553: PPUSH
32554: CALL_OW 1
32558: ST_TO_ADDR
// if missile < 2 then
32559: LD_VAR 0 14
32563: PUSH
32564: LD_INT 2
32566: LESS
32567: IFFALSE 32571
// exit ;
32569: GO 32793
// x := GetX ( enemy ) ;
32571: LD_ADDR_VAR 0 4
32575: PUSH
32576: LD_VAR 0 10
32580: PPUSH
32581: CALL_OW 250
32585: ST_TO_ADDR
// y := GetY ( enemy ) ;
32586: LD_ADDR_VAR 0 5
32590: PUSH
32591: LD_VAR 0 10
32595: PPUSH
32596: CALL_OW 251
32600: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 4
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PPUSH
32615: LD_INT 1
32617: PPUSH
32618: CALL_OW 12
32622: PLUS
32623: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32624: LD_ADDR_VAR 0 7
32628: PUSH
32629: LD_VAR 0 5
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PPUSH
32638: LD_INT 1
32640: PPUSH
32641: CALL_OW 12
32645: PLUS
32646: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32647: LD_VAR 0 6
32651: PPUSH
32652: LD_VAR 0 7
32656: PPUSH
32657: CALL_OW 488
32661: NOT
32662: IFFALSE 32684
// begin _x := x ;
32664: LD_ADDR_VAR 0 6
32668: PUSH
32669: LD_VAR 0 4
32673: ST_TO_ADDR
// _y := y ;
32674: LD_ADDR_VAR 0 7
32678: PUSH
32679: LD_VAR 0 5
32683: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 1
32691: PPUSH
32692: LD_VAR 0 14
32696: PPUSH
32697: CALL_OW 12
32701: ST_TO_ADDR
// case i of 1 :
32702: LD_VAR 0 3
32706: PUSH
32707: LD_INT 1
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32732
32715: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_VAR 0 10
32725: PPUSH
32726: CALL_OW 115
32730: GO 32793
32732: LD_INT 2
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32740
32738: GO 32762
32740: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32741: LD_VAR 0 1
32745: PPUSH
32746: LD_VAR 0 6
32750: PPUSH
32751: LD_VAR 0 7
32755: PPUSH
32756: CALL_OW 153
32760: GO 32793
32762: LD_INT 3
32764: DOUBLE
32765: EQUAL
32766: IFTRUE 32770
32768: GO 32792
32770: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32771: LD_VAR 0 1
32775: PPUSH
32776: LD_VAR 0 6
32780: PPUSH
32781: LD_VAR 0 7
32785: PPUSH
32786: CALL_OW 154
32790: GO 32793
32792: POP
// end ;
32793: LD_VAR 0 2
32797: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32798: LD_INT 0
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
// if not unit or not building then
32806: LD_VAR 0 1
32810: NOT
32811: PUSH
32812: LD_VAR 0 2
32816: NOT
32817: OR
32818: IFFALSE 32822
// exit ;
32820: GO 32980
// x := GetX ( building ) ;
32822: LD_ADDR_VAR 0 5
32826: PUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: CALL_OW 250
32836: ST_TO_ADDR
// y := GetY ( building ) ;
32837: LD_ADDR_VAR 0 6
32841: PUSH
32842: LD_VAR 0 2
32846: PPUSH
32847: CALL_OW 251
32851: ST_TO_ADDR
// for i = 0 to 5 do
32852: LD_ADDR_VAR 0 4
32856: PUSH
32857: DOUBLE
32858: LD_INT 0
32860: DEC
32861: ST_TO_ADDR
32862: LD_INT 5
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32978
// begin _x := ShiftX ( x , i , 3 ) ;
32868: LD_ADDR_VAR 0 7
32872: PUSH
32873: LD_VAR 0 5
32877: PPUSH
32878: LD_VAR 0 4
32882: PPUSH
32883: LD_INT 3
32885: PPUSH
32886: CALL_OW 272
32890: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32891: LD_ADDR_VAR 0 8
32895: PUSH
32896: LD_VAR 0 6
32900: PPUSH
32901: LD_VAR 0 4
32905: PPUSH
32906: LD_INT 3
32908: PPUSH
32909: CALL_OW 273
32913: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32914: LD_VAR 0 7
32918: PPUSH
32919: LD_VAR 0 8
32923: PPUSH
32924: CALL_OW 488
32928: NOT
32929: IFFALSE 32933
// continue ;
32931: GO 32865
// if HexInfo ( _x , _y ) = 0 then
32933: LD_VAR 0 7
32937: PPUSH
32938: LD_VAR 0 8
32942: PPUSH
32943: CALL_OW 428
32947: PUSH
32948: LD_INT 0
32950: EQUAL
32951: IFFALSE 32976
// begin ComMoveXY ( unit , _x , _y ) ;
32953: LD_VAR 0 1
32957: PPUSH
32958: LD_VAR 0 7
32962: PPUSH
32963: LD_VAR 0 8
32967: PPUSH
32968: CALL_OW 111
// exit ;
32972: POP
32973: POP
32974: GO 32980
// end ; end ;
32976: GO 32865
32978: POP
32979: POP
// end ;
32980: LD_VAR 0 3
32984: RET
// export function ScanBase ( side , base_area ) ; begin
32985: LD_INT 0
32987: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32988: LD_ADDR_VAR 0 3
32992: PUSH
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_INT 81
33000: PUSH
33001: LD_VAR 0 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PPUSH
33010: CALL_OW 70
33014: ST_TO_ADDR
// end ;
33015: LD_VAR 0 3
33019: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33020: LD_INT 0
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
// result := false ;
33026: LD_ADDR_VAR 0 2
33030: PUSH
33031: LD_INT 0
33033: ST_TO_ADDR
// side := GetSide ( unit ) ;
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 255
33048: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33049: LD_ADDR_VAR 0 4
33053: PUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 248
33063: ST_TO_ADDR
// case nat of 1 :
33064: LD_VAR 0 4
33068: PUSH
33069: LD_INT 1
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33088
33077: POP
// tech := tech_lassight ; 2 :
33078: LD_ADDR_VAR 0 5
33082: PUSH
33083: LD_INT 12
33085: ST_TO_ADDR
33086: GO 33127
33088: LD_INT 2
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33096
33094: GO 33107
33096: POP
// tech := tech_mortar ; 3 :
33097: LD_ADDR_VAR 0 5
33101: PUSH
33102: LD_INT 41
33104: ST_TO_ADDR
33105: GO 33127
33107: LD_INT 3
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// tech := tech_bazooka ; end ;
33116: LD_ADDR_VAR 0 5
33120: PUSH
33121: LD_INT 44
33123: ST_TO_ADDR
33124: GO 33127
33126: POP
// if Researched ( side , tech ) then
33127: LD_VAR 0 3
33131: PPUSH
33132: LD_VAR 0 5
33136: PPUSH
33137: CALL_OW 325
33141: IFFALSE 33168
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33143: LD_ADDR_VAR 0 2
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: LD_INT 8
33153: PUSH
33154: LD_INT 9
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: PUSH
33162: LD_VAR 0 4
33166: ARRAY
33167: ST_TO_ADDR
// end ;
33168: LD_VAR 0 2
33172: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
// if not mines then
33178: LD_VAR 0 2
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 33331
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33187: LD_ADDR_VAR 0 5
33191: PUSH
33192: LD_INT 81
33194: PUSH
33195: LD_VAR 0 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: LD_INT 21
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PPUSH
33225: CALL_OW 69
33229: ST_TO_ADDR
// for i in mines do
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_VAR 0 2
33239: PUSH
33240: FOR_IN
33241: IFFALSE 33329
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33243: LD_VAR 0 4
33247: PUSH
33248: LD_INT 1
33250: ARRAY
33251: PPUSH
33252: LD_VAR 0 4
33256: PUSH
33257: LD_INT 2
33259: ARRAY
33260: PPUSH
33261: CALL_OW 458
33265: NOT
33266: IFFALSE 33270
// continue ;
33268: GO 33240
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33270: LD_VAR 0 4
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: PPUSH
33279: LD_VAR 0 4
33283: PUSH
33284: LD_INT 2
33286: ARRAY
33287: PPUSH
33288: CALL_OW 428
33292: PUSH
33293: LD_VAR 0 5
33297: IN
33298: IFFALSE 33327
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33300: LD_VAR 0 4
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_VAR 0 4
33313: PUSH
33314: LD_INT 2
33316: ARRAY
33317: PPUSH
33318: LD_VAR 0 1
33322: PPUSH
33323: CALL_OW 456
// end ;
33327: GO 33240
33329: POP
33330: POP
// end ;
33331: LD_VAR 0 3
33335: RET
// export function Count ( array ) ; var i ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
// result := 0 ;
33340: LD_ADDR_VAR 0 2
33344: PUSH
33345: LD_INT 0
33347: ST_TO_ADDR
// for i in array do
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: LD_VAR 0 1
33357: PUSH
33358: FOR_IN
33359: IFFALSE 33383
// if i then
33361: LD_VAR 0 3
33365: IFFALSE 33381
// result := result + 1 ;
33367: LD_ADDR_VAR 0 2
33371: PUSH
33372: LD_VAR 0 2
33376: PUSH
33377: LD_INT 1
33379: PLUS
33380: ST_TO_ADDR
33381: GO 33358
33383: POP
33384: POP
// end ;
33385: LD_VAR 0 2
33389: RET
// export function IsEmpty ( building ) ; begin
33390: LD_INT 0
33392: PPUSH
// if not building then
33393: LD_VAR 0 1
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 33445
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33402: LD_ADDR_VAR 0 2
33406: PUSH
33407: LD_VAR 0 1
33411: PUSH
33412: LD_INT 22
33414: PUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: CALL_OW 255
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 58
33431: PUSH
33432: EMPTY
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PPUSH
33439: CALL_OW 69
33443: IN
33444: ST_TO_ADDR
// end ;
33445: LD_VAR 0 2
33449: RET
// export function IsNotFull ( building ) ; var places ; begin
33450: LD_INT 0
33452: PPUSH
33453: PPUSH
// if not building then
33454: LD_VAR 0 1
33458: NOT
33459: IFFALSE 33463
// exit ;
33461: GO 33634
// result := false ;
33463: LD_ADDR_VAR 0 2
33467: PUSH
33468: LD_INT 0
33470: ST_TO_ADDR
// places := 0 ;
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 0
33478: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33479: LD_VAR 0 1
33483: PPUSH
33484: CALL_OW 266
33488: PUSH
33489: LD_INT 0
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33551
33495: LD_INT 1
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33551
33501: LD_INT 6
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33551
33507: LD_INT 7
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33551
33513: LD_INT 8
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33551
33519: LD_INT 4
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33551
33525: LD_INT 5
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33551
33531: LD_INT 2
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33551
33537: LD_INT 3
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33551
33543: LD_INT 35
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33562
33551: POP
// places := 6 ; b_bunker , b_breastwork :
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_INT 6
33559: ST_TO_ADDR
33560: GO 33607
33562: LD_INT 32
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33576
33568: LD_INT 31
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33587
33576: POP
// places := 1 ; b_control_tower :
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: LD_INT 1
33584: ST_TO_ADDR
33585: GO 33607
33587: LD_INT 36
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33606
33595: POP
// places := 3 ; end ;
33596: LD_ADDR_VAR 0 3
33600: PUSH
33601: LD_INT 3
33603: ST_TO_ADDR
33604: GO 33607
33606: POP
// if places then
33607: LD_VAR 0 3
33611: IFFALSE 33634
// result := UnitsInside ( building ) < places ;
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 313
33627: PUSH
33628: LD_VAR 0 3
33632: LESS
33633: ST_TO_ADDR
// end ;
33634: LD_VAR 0 2
33638: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
// tmp := [ ] ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: EMPTY
33651: ST_TO_ADDR
// list := [ ] ;
33652: LD_ADDR_VAR 0 5
33656: PUSH
33657: EMPTY
33658: ST_TO_ADDR
// for i = 16 to 25 do
33659: LD_ADDR_VAR 0 4
33663: PUSH
33664: DOUBLE
33665: LD_INT 16
33667: DEC
33668: ST_TO_ADDR
33669: LD_INT 25
33671: PUSH
33672: FOR_TO
33673: IFFALSE 33746
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33675: LD_ADDR_VAR 0 3
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_INT 22
33687: PUSH
33688: LD_VAR 0 1
33692: PPUSH
33693: CALL_OW 255
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 91
33704: PUSH
33705: LD_VAR 0 1
33709: PUSH
33710: LD_INT 6
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 30
33720: PUSH
33721: LD_VAR 0 4
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: PPUSH
33738: CALL_OW 69
33742: ADD
33743: ST_TO_ADDR
33744: GO 33672
33746: POP
33747: POP
// for i = 1 to tmp do
33748: LD_ADDR_VAR 0 4
33752: PUSH
33753: DOUBLE
33754: LD_INT 1
33756: DEC
33757: ST_TO_ADDR
33758: LD_VAR 0 3
33762: PUSH
33763: FOR_TO
33764: IFFALSE 33852
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33766: LD_ADDR_VAR 0 5
33770: PUSH
33771: LD_VAR 0 5
33775: PUSH
33776: LD_VAR 0 3
33780: PUSH
33781: LD_VAR 0 4
33785: ARRAY
33786: PPUSH
33787: CALL_OW 266
33791: PUSH
33792: LD_VAR 0 3
33796: PUSH
33797: LD_VAR 0 4
33801: ARRAY
33802: PPUSH
33803: CALL_OW 250
33807: PUSH
33808: LD_VAR 0 3
33812: PUSH
33813: LD_VAR 0 4
33817: ARRAY
33818: PPUSH
33819: CALL_OW 251
33823: PUSH
33824: LD_VAR 0 3
33828: PUSH
33829: LD_VAR 0 4
33833: ARRAY
33834: PPUSH
33835: CALL_OW 254
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: PUSH
33846: EMPTY
33847: LIST
33848: ADD
33849: ST_TO_ADDR
33850: GO 33763
33852: POP
33853: POP
// result := list ;
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_VAR 0 5
33863: ST_TO_ADDR
// end ;
33864: LD_VAR 0 2
33868: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33869: LD_INT 0
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
// if not factory then
33878: LD_VAR 0 1
33882: NOT
33883: IFFALSE 33887
// exit ;
33885: GO 34480
// if control = control_apeman then
33887: LD_VAR 0 4
33891: PUSH
33892: LD_INT 5
33894: EQUAL
33895: IFFALSE 34004
// begin tmp := UnitsInside ( factory ) ;
33897: LD_ADDR_VAR 0 8
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 313
33911: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33912: LD_VAR 0 8
33916: PPUSH
33917: LD_INT 25
33919: PUSH
33920: LD_INT 12
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PPUSH
33927: CALL_OW 72
33931: NOT
33932: IFFALSE 33942
// control := control_manual ;
33934: LD_ADDR_VAR 0 4
33938: PUSH
33939: LD_INT 1
33941: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33942: LD_ADDR_VAR 0 8
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL 33639 0 1
33956: ST_TO_ADDR
// if tmp then
33957: LD_VAR 0 8
33961: IFFALSE 34004
// begin for i in tmp do
33963: LD_ADDR_VAR 0 7
33967: PUSH
33968: LD_VAR 0 8
33972: PUSH
33973: FOR_IN
33974: IFFALSE 34002
// if i [ 1 ] = b_ext_radio then
33976: LD_VAR 0 7
33980: PUSH
33981: LD_INT 1
33983: ARRAY
33984: PUSH
33985: LD_INT 22
33987: EQUAL
33988: IFFALSE 34000
// begin control := control_remote ;
33990: LD_ADDR_VAR 0 4
33994: PUSH
33995: LD_INT 2
33997: ST_TO_ADDR
// break ;
33998: GO 34002
// end ;
34000: GO 33973
34002: POP
34003: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34004: LD_VAR 0 1
34008: PPUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 3
34018: PPUSH
34019: LD_VAR 0 4
34023: PPUSH
34024: LD_VAR 0 5
34028: PPUSH
34029: CALL_OW 448
34033: IFFALSE 34068
// begin result := [ chassis , engine , control , weapon ] ;
34035: LD_ADDR_VAR 0 6
34039: PUSH
34040: LD_VAR 0 2
34044: PUSH
34045: LD_VAR 0 3
34049: PUSH
34050: LD_VAR 0 4
34054: PUSH
34055: LD_VAR 0 5
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: ST_TO_ADDR
// exit ;
34066: GO 34480
// end ; _chassis := AvailableChassisList ( factory ) ;
34068: LD_ADDR_VAR 0 9
34072: PUSH
34073: LD_VAR 0 1
34077: PPUSH
34078: CALL_OW 475
34082: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34083: LD_ADDR_VAR 0 11
34087: PUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 476
34097: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34098: LD_ADDR_VAR 0 12
34102: PUSH
34103: LD_VAR 0 1
34107: PPUSH
34108: CALL_OW 477
34112: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34113: LD_ADDR_VAR 0 10
34117: PUSH
34118: LD_VAR 0 1
34122: PPUSH
34123: CALL_OW 478
34127: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34128: LD_VAR 0 9
34132: NOT
34133: PUSH
34134: LD_VAR 0 11
34138: NOT
34139: OR
34140: PUSH
34141: LD_VAR 0 12
34145: NOT
34146: OR
34147: PUSH
34148: LD_VAR 0 10
34152: NOT
34153: OR
34154: IFFALSE 34189
// begin result := [ chassis , engine , control , weapon ] ;
34156: LD_ADDR_VAR 0 6
34160: PUSH
34161: LD_VAR 0 2
34165: PUSH
34166: LD_VAR 0 3
34170: PUSH
34171: LD_VAR 0 4
34175: PUSH
34176: LD_VAR 0 5
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
// exit ;
34187: GO 34480
// end ; if not chassis in _chassis then
34189: LD_VAR 0 2
34193: PUSH
34194: LD_VAR 0 9
34198: IN
34199: NOT
34200: IFFALSE 34226
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34202: LD_ADDR_VAR 0 2
34206: PUSH
34207: LD_VAR 0 9
34211: PUSH
34212: LD_INT 1
34214: PPUSH
34215: LD_VAR 0 9
34219: PPUSH
34220: CALL_OW 12
34224: ARRAY
34225: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34226: LD_VAR 0 2
34230: PPUSH
34231: LD_VAR 0 3
34235: PPUSH
34236: CALL 34485 0 2
34240: NOT
34241: IFFALSE 34300
// repeat engine := _engine [ 1 ] ;
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_VAR 0 11
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34257: LD_ADDR_VAR 0 11
34261: PUSH
34262: LD_VAR 0 11
34266: PPUSH
34267: LD_INT 1
34269: PPUSH
34270: CALL_OW 3
34274: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34275: LD_VAR 0 2
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL 34485 0 2
34289: PUSH
34290: LD_VAR 0 11
34294: PUSH
34295: EMPTY
34296: EQUAL
34297: OR
34298: IFFALSE 34243
// if not control in _control then
34300: LD_VAR 0 4
34304: PUSH
34305: LD_VAR 0 12
34309: IN
34310: NOT
34311: IFFALSE 34337
// control := _control [ rand ( 1 , _control ) ] ;
34313: LD_ADDR_VAR 0 4
34317: PUSH
34318: LD_VAR 0 12
34322: PUSH
34323: LD_INT 1
34325: PPUSH
34326: LD_VAR 0 12
34330: PPUSH
34331: CALL_OW 12
34335: ARRAY
34336: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34337: LD_VAR 0 2
34341: PPUSH
34342: LD_VAR 0 5
34346: PPUSH
34347: CALL 34705 0 2
34351: NOT
34352: IFFALSE 34411
// repeat weapon := _weapon [ 1 ] ;
34354: LD_ADDR_VAR 0 5
34358: PUSH
34359: LD_VAR 0 10
34363: PUSH
34364: LD_INT 1
34366: ARRAY
34367: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34368: LD_ADDR_VAR 0 10
34372: PUSH
34373: LD_VAR 0 10
34377: PPUSH
34378: LD_INT 1
34380: PPUSH
34381: CALL_OW 3
34385: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34386: LD_VAR 0 2
34390: PPUSH
34391: LD_VAR 0 5
34395: PPUSH
34396: CALL 34705 0 2
34400: PUSH
34401: LD_VAR 0 10
34405: PUSH
34406: EMPTY
34407: EQUAL
34408: OR
34409: IFFALSE 34354
// result := [ ] ;
34411: LD_ADDR_VAR 0 6
34415: PUSH
34416: EMPTY
34417: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34418: LD_VAR 0 1
34422: PPUSH
34423: LD_VAR 0 2
34427: PPUSH
34428: LD_VAR 0 3
34432: PPUSH
34433: LD_VAR 0 4
34437: PPUSH
34438: LD_VAR 0 5
34442: PPUSH
34443: CALL_OW 448
34447: IFFALSE 34480
// result := [ chassis , engine , control , weapon ] ;
34449: LD_ADDR_VAR 0 6
34453: PUSH
34454: LD_VAR 0 2
34458: PUSH
34459: LD_VAR 0 3
34463: PUSH
34464: LD_VAR 0 4
34468: PUSH
34469: LD_VAR 0 5
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// end ;
34480: LD_VAR 0 6
34484: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34485: LD_INT 0
34487: PPUSH
// if not chassis or not engine then
34488: LD_VAR 0 1
34492: NOT
34493: PUSH
34494: LD_VAR 0 2
34498: NOT
34499: OR
34500: IFFALSE 34504
// exit ;
34502: GO 34700
// case engine of engine_solar :
34504: LD_VAR 0 2
34508: PUSH
34509: LD_INT 2
34511: DOUBLE
34512: EQUAL
34513: IFTRUE 34517
34515: GO 34555
34517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: LD_INT 11
34525: PUSH
34526: LD_INT 12
34528: PUSH
34529: LD_INT 13
34531: PUSH
34532: LD_INT 14
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: ST_TO_ADDR
34553: GO 34684
34555: LD_INT 1
34557: DOUBLE
34558: EQUAL
34559: IFTRUE 34563
34561: GO 34625
34563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34564: LD_ADDR_VAR 0 3
34568: PUSH
34569: LD_INT 11
34571: PUSH
34572: LD_INT 12
34574: PUSH
34575: LD_INT 13
34577: PUSH
34578: LD_INT 14
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: LD_INT 21
34598: PUSH
34599: LD_INT 23
34601: PUSH
34602: LD_INT 22
34604: PUSH
34605: LD_INT 24
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: ST_TO_ADDR
34623: GO 34684
34625: LD_INT 3
34627: DOUBLE
34628: EQUAL
34629: IFTRUE 34633
34631: GO 34683
34633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: LD_INT 13
34641: PUSH
34642: LD_INT 14
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 4
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 21
34659: PUSH
34660: LD_INT 22
34662: PUSH
34663: LD_INT 23
34665: PUSH
34666: LD_INT 24
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
34681: GO 34684
34683: POP
// result := ( chassis in result ) ;
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_VAR 0 1
34693: PUSH
34694: LD_VAR 0 3
34698: IN
34699: ST_TO_ADDR
// end ;
34700: LD_VAR 0 3
34704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34705: LD_INT 0
34707: PPUSH
// if not chassis or not weapon then
34708: LD_VAR 0 1
34712: NOT
34713: PUSH
34714: LD_VAR 0 2
34718: NOT
34719: OR
34720: IFFALSE 34724
// exit ;
34722: GO 35786
// case weapon of us_machine_gun :
34724: LD_VAR 0 2
34728: PUSH
34729: LD_INT 2
34731: DOUBLE
34732: EQUAL
34733: IFTRUE 34737
34735: GO 34767
34737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: LD_INT 4
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
34765: GO 35770
34767: LD_INT 3
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34805
34775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: LD_INT 4
34792: PUSH
34793: LD_INT 5
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
34803: GO 35770
34805: LD_INT 11
34807: DOUBLE
34808: EQUAL
34809: IFTRUE 34813
34811: GO 34843
34813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34814: LD_ADDR_VAR 0 3
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: LD_INT 5
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
34841: GO 35770
34843: LD_INT 4
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34877
34851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34852: LD_ADDR_VAR 0 3
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: LD_INT 4
34865: PUSH
34866: LD_INT 5
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: ST_TO_ADDR
34875: GO 35770
34877: LD_INT 5
34879: DOUBLE
34880: EQUAL
34881: IFTRUE 34885
34883: GO 34911
34885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34886: LD_ADDR_VAR 0 3
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 3
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: LD_INT 5
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
34909: GO 35770
34911: LD_INT 9
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 34945
34919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34920: LD_ADDR_VAR 0 3
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 5
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
34943: GO 35770
34945: LD_INT 7
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34953
34951: GO 34979
34953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: LD_INT 4
34967: PUSH
34968: LD_INT 5
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: ST_TO_ADDR
34977: GO 35770
34979: LD_INT 12
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35013
34987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: LD_INT 3
34998: PUSH
34999: LD_INT 4
35001: PUSH
35002: LD_INT 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
35011: GO 35770
35013: LD_INT 13
35015: DOUBLE
35016: EQUAL
35017: IFTRUE 35021
35019: GO 35047
35021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
35045: GO 35770
35047: LD_INT 14
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35055
35053: GO 35073
35055: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_INT 4
35063: PUSH
35064: LD_INT 5
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: ST_TO_ADDR
35071: GO 35770
35073: LD_INT 6
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35081
35079: GO 35099
35081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35770
35099: LD_INT 10
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35125
35107: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 4
35115: PUSH
35116: LD_INT 5
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: ST_TO_ADDR
35123: GO 35770
35125: LD_INT 22
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35159
35133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_INT 11
35141: PUSH
35142: LD_INT 12
35144: PUSH
35145: LD_INT 13
35147: PUSH
35148: LD_INT 14
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
35157: GO 35770
35159: LD_INT 23
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 35193
35167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35168: LD_ADDR_VAR 0 3
35172: PUSH
35173: LD_INT 11
35175: PUSH
35176: LD_INT 12
35178: PUSH
35179: LD_INT 13
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
35191: GO 35770
35193: LD_INT 24
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35227
35201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35202: LD_ADDR_VAR 0 3
35206: PUSH
35207: LD_INT 11
35209: PUSH
35210: LD_INT 12
35212: PUSH
35213: LD_INT 13
35215: PUSH
35216: LD_INT 14
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
35225: GO 35770
35227: LD_INT 30
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35261
35235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 11
35243: PUSH
35244: LD_INT 12
35246: PUSH
35247: LD_INT 13
35249: PUSH
35250: LD_INT 14
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: ST_TO_ADDR
35259: GO 35770
35261: LD_INT 25
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35287
35269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_INT 13
35277: PUSH
35278: LD_INT 14
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: ST_TO_ADDR
35285: GO 35770
35287: LD_INT 27
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35313
35295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 13
35303: PUSH
35304: LD_INT 14
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: ST_TO_ADDR
35311: GO 35770
35313: LD_EXP 31
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35349
35323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_INT 11
35331: PUSH
35332: LD_INT 12
35334: PUSH
35335: LD_INT 13
35337: PUSH
35338: LD_INT 14
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
35347: GO 35770
35349: LD_INT 28
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35375
35357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35358: LD_ADDR_VAR 0 3
35362: PUSH
35363: LD_INT 13
35365: PUSH
35366: LD_INT 14
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: ST_TO_ADDR
35373: GO 35770
35375: LD_INT 29
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35383
35381: GO 35401
35383: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35384: LD_ADDR_VAR 0 3
35388: PUSH
35389: LD_INT 13
35391: PUSH
35392: LD_INT 14
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: ST_TO_ADDR
35399: GO 35770
35401: LD_INT 31
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35427
35409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 13
35417: PUSH
35418: LD_INT 14
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: ST_TO_ADDR
35425: GO 35770
35427: LD_INT 26
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35453
35435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35436: LD_ADDR_VAR 0 3
35440: PUSH
35441: LD_INT 13
35443: PUSH
35444: LD_INT 14
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 35770
35453: LD_INT 42
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35487
35461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 21
35469: PUSH
35470: LD_INT 22
35472: PUSH
35473: LD_INT 23
35475: PUSH
35476: LD_INT 24
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: ST_TO_ADDR
35485: GO 35770
35487: LD_INT 43
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35495
35493: GO 35521
35495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_INT 21
35503: PUSH
35504: LD_INT 22
35506: PUSH
35507: LD_INT 23
35509: PUSH
35510: LD_INT 24
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 35770
35521: LD_INT 44
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35555
35529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 21
35537: PUSH
35538: LD_INT 22
35540: PUSH
35541: LD_INT 23
35543: PUSH
35544: LD_INT 24
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
35553: GO 35770
35555: LD_INT 45
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35589
35563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_INT 21
35571: PUSH
35572: LD_INT 22
35574: PUSH
35575: LD_INT 23
35577: PUSH
35578: LD_INT 24
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: ST_TO_ADDR
35587: GO 35770
35589: LD_INT 49
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35597
35595: GO 35623
35597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35598: LD_ADDR_VAR 0 3
35602: PUSH
35603: LD_INT 21
35605: PUSH
35606: LD_INT 22
35608: PUSH
35609: LD_INT 23
35611: PUSH
35612: LD_INT 24
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: ST_TO_ADDR
35621: GO 35770
35623: LD_INT 51
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35631
35629: GO 35657
35631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35632: LD_ADDR_VAR 0 3
35636: PUSH
35637: LD_INT 21
35639: PUSH
35640: LD_INT 22
35642: PUSH
35643: LD_INT 23
35645: PUSH
35646: LD_INT 24
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
35655: GO 35770
35657: LD_INT 52
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35691
35665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_INT 21
35673: PUSH
35674: LD_INT 22
35676: PUSH
35677: LD_INT 23
35679: PUSH
35680: LD_INT 24
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
35689: GO 35770
35691: LD_INT 53
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 35717
35699: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35700: LD_ADDR_VAR 0 3
35704: PUSH
35705: LD_INT 23
35707: PUSH
35708: LD_INT 24
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: ST_TO_ADDR
35715: GO 35770
35717: LD_INT 46
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35725
35723: GO 35743
35725: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_INT 23
35733: PUSH
35734: LD_INT 24
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: ST_TO_ADDR
35741: GO 35770
35743: LD_INT 47
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35769
35751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 23
35759: PUSH
35760: LD_INT 24
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: ST_TO_ADDR
35767: GO 35770
35769: POP
// result := ( chassis in result ) ;
35770: LD_ADDR_VAR 0 3
35774: PUSH
35775: LD_VAR 0 1
35779: PUSH
35780: LD_VAR 0 3
35784: IN
35785: ST_TO_ADDR
// end ;
35786: LD_VAR 0 3
35790: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35791: LD_INT 0
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
// result := array ;
35800: LD_ADDR_VAR 0 5
35804: PUSH
35805: LD_VAR 0 1
35809: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35810: LD_VAR 0 1
35814: NOT
35815: PUSH
35816: LD_VAR 0 2
35820: NOT
35821: OR
35822: PUSH
35823: LD_VAR 0 3
35827: NOT
35828: OR
35829: PUSH
35830: LD_VAR 0 2
35834: PUSH
35835: LD_VAR 0 1
35839: GREATER
35840: OR
35841: PUSH
35842: LD_VAR 0 3
35846: PUSH
35847: LD_VAR 0 1
35851: GREATER
35852: OR
35853: IFFALSE 35857
// exit ;
35855: GO 36153
// if direction then
35857: LD_VAR 0 4
35861: IFFALSE 35925
// begin d := 1 ;
35863: LD_ADDR_VAR 0 9
35867: PUSH
35868: LD_INT 1
35870: ST_TO_ADDR
// if i_from > i_to then
35871: LD_VAR 0 2
35875: PUSH
35876: LD_VAR 0 3
35880: GREATER
35881: IFFALSE 35907
// length := ( array - i_from ) + i_to else
35883: LD_ADDR_VAR 0 11
35887: PUSH
35888: LD_VAR 0 1
35892: PUSH
35893: LD_VAR 0 2
35897: MINUS
35898: PUSH
35899: LD_VAR 0 3
35903: PLUS
35904: ST_TO_ADDR
35905: GO 35923
// length := i_to - i_from ;
35907: LD_ADDR_VAR 0 11
35911: PUSH
35912: LD_VAR 0 3
35916: PUSH
35917: LD_VAR 0 2
35921: MINUS
35922: ST_TO_ADDR
// end else
35923: GO 35986
// begin d := - 1 ;
35925: LD_ADDR_VAR 0 9
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: ST_TO_ADDR
// if i_from > i_to then
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 3
35943: GREATER
35944: IFFALSE 35964
// length := i_from - i_to else
35946: LD_ADDR_VAR 0 11
35950: PUSH
35951: LD_VAR 0 2
35955: PUSH
35956: LD_VAR 0 3
35960: MINUS
35961: ST_TO_ADDR
35962: GO 35986
// length := ( array - i_to ) + i_from ;
35964: LD_ADDR_VAR 0 11
35968: PUSH
35969: LD_VAR 0 1
35973: PUSH
35974: LD_VAR 0 3
35978: MINUS
35979: PUSH
35980: LD_VAR 0 2
35984: PLUS
35985: ST_TO_ADDR
// end ; if not length then
35986: LD_VAR 0 11
35990: NOT
35991: IFFALSE 35995
// exit ;
35993: GO 36153
// tmp := array ;
35995: LD_ADDR_VAR 0 10
35999: PUSH
36000: LD_VAR 0 1
36004: ST_TO_ADDR
// for i = 1 to length do
36005: LD_ADDR_VAR 0 6
36009: PUSH
36010: DOUBLE
36011: LD_INT 1
36013: DEC
36014: ST_TO_ADDR
36015: LD_VAR 0 11
36019: PUSH
36020: FOR_TO
36021: IFFALSE 36141
// begin for j = 1 to array do
36023: LD_ADDR_VAR 0 7
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_VAR 0 1
36037: PUSH
36038: FOR_TO
36039: IFFALSE 36127
// begin k := j + d ;
36041: LD_ADDR_VAR 0 8
36045: PUSH
36046: LD_VAR 0 7
36050: PUSH
36051: LD_VAR 0 9
36055: PLUS
36056: ST_TO_ADDR
// if k > array then
36057: LD_VAR 0 8
36061: PUSH
36062: LD_VAR 0 1
36066: GREATER
36067: IFFALSE 36077
// k := 1 ;
36069: LD_ADDR_VAR 0 8
36073: PUSH
36074: LD_INT 1
36076: ST_TO_ADDR
// if not k then
36077: LD_VAR 0 8
36081: NOT
36082: IFFALSE 36094
// k := array ;
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 1
36093: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36094: LD_ADDR_VAR 0 10
36098: PUSH
36099: LD_VAR 0 10
36103: PPUSH
36104: LD_VAR 0 8
36108: PPUSH
36109: LD_VAR 0 1
36113: PUSH
36114: LD_VAR 0 7
36118: ARRAY
36119: PPUSH
36120: CALL_OW 1
36124: ST_TO_ADDR
// end ;
36125: GO 36038
36127: POP
36128: POP
// array := tmp ;
36129: LD_ADDR_VAR 0 1
36133: PUSH
36134: LD_VAR 0 10
36138: ST_TO_ADDR
// end ;
36139: GO 36020
36141: POP
36142: POP
// result := array ;
36143: LD_ADDR_VAR 0 5
36147: PUSH
36148: LD_VAR 0 1
36152: ST_TO_ADDR
// end ;
36153: LD_VAR 0 5
36157: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36158: LD_INT 0
36160: PPUSH
36161: PPUSH
// result := 0 ;
36162: LD_ADDR_VAR 0 3
36166: PUSH
36167: LD_INT 0
36169: ST_TO_ADDR
// if not array or not value in array then
36170: LD_VAR 0 1
36174: NOT
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 1
36185: IN
36186: NOT
36187: OR
36188: IFFALSE 36192
// exit ;
36190: GO 36246
// for i = 1 to array do
36192: LD_ADDR_VAR 0 4
36196: PUSH
36197: DOUBLE
36198: LD_INT 1
36200: DEC
36201: ST_TO_ADDR
36202: LD_VAR 0 1
36206: PUSH
36207: FOR_TO
36208: IFFALSE 36244
// if value = array [ i ] then
36210: LD_VAR 0 2
36214: PUSH
36215: LD_VAR 0 1
36219: PUSH
36220: LD_VAR 0 4
36224: ARRAY
36225: EQUAL
36226: IFFALSE 36242
// begin result := i ;
36228: LD_ADDR_VAR 0 3
36232: PUSH
36233: LD_VAR 0 4
36237: ST_TO_ADDR
// exit ;
36238: POP
36239: POP
36240: GO 36246
// end ;
36242: GO 36207
36244: POP
36245: POP
// end ;
36246: LD_VAR 0 3
36250: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36251: LD_INT 0
36253: PPUSH
// vc_chassis := chassis ;
36254: LD_ADDR_OWVAR 37
36258: PUSH
36259: LD_VAR 0 1
36263: ST_TO_ADDR
// vc_engine := engine ;
36264: LD_ADDR_OWVAR 39
36268: PUSH
36269: LD_VAR 0 2
36273: ST_TO_ADDR
// vc_control := control ;
36274: LD_ADDR_OWVAR 38
36278: PUSH
36279: LD_VAR 0 3
36283: ST_TO_ADDR
// vc_weapon := weapon ;
36284: LD_ADDR_OWVAR 40
36288: PUSH
36289: LD_VAR 0 4
36293: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36294: LD_ADDR_OWVAR 41
36298: PUSH
36299: LD_VAR 0 5
36303: ST_TO_ADDR
// end ;
36304: LD_VAR 0 6
36308: RET
// export function WantPlant ( unit ) ; var task ; begin
36309: LD_INT 0
36311: PPUSH
36312: PPUSH
// result := false ;
36313: LD_ADDR_VAR 0 2
36317: PUSH
36318: LD_INT 0
36320: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36321: LD_ADDR_VAR 0 3
36325: PUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 437
36335: ST_TO_ADDR
// if task then
36336: LD_VAR 0 3
36340: IFFALSE 36368
// if task [ 1 ] [ 1 ] = p then
36342: LD_VAR 0 3
36346: PUSH
36347: LD_INT 1
36349: ARRAY
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PUSH
36355: LD_STRING p
36357: EQUAL
36358: IFFALSE 36368
// result := true ;
36360: LD_ADDR_VAR 0 2
36364: PUSH
36365: LD_INT 1
36367: ST_TO_ADDR
// end ;
36368: LD_VAR 0 2
36372: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36373: LD_INT 0
36375: PPUSH
36376: PPUSH
36377: PPUSH
36378: PPUSH
// if pos < 1 then
36379: LD_VAR 0 2
36383: PUSH
36384: LD_INT 1
36386: LESS
36387: IFFALSE 36391
// exit ;
36389: GO 36694
// if pos = 1 then
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 1
36398: EQUAL
36399: IFFALSE 36432
// result := Replace ( arr , pos [ 1 ] , value ) else
36401: LD_ADDR_VAR 0 4
36405: PUSH
36406: LD_VAR 0 1
36410: PPUSH
36411: LD_VAR 0 2
36415: PUSH
36416: LD_INT 1
36418: ARRAY
36419: PPUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: CALL_OW 1
36429: ST_TO_ADDR
36430: GO 36694
// begin tmp := arr ;
36432: LD_ADDR_VAR 0 6
36436: PUSH
36437: LD_VAR 0 1
36441: ST_TO_ADDR
// s_arr := [ tmp ] ;
36442: LD_ADDR_VAR 0 7
36446: PUSH
36447: LD_VAR 0 6
36451: PUSH
36452: EMPTY
36453: LIST
36454: ST_TO_ADDR
// for i = 1 to pos - 1 do
36455: LD_ADDR_VAR 0 5
36459: PUSH
36460: DOUBLE
36461: LD_INT 1
36463: DEC
36464: ST_TO_ADDR
36465: LD_VAR 0 2
36469: PUSH
36470: LD_INT 1
36472: MINUS
36473: PUSH
36474: FOR_TO
36475: IFFALSE 36520
// begin tmp := tmp [ pos [ i ] ] ;
36477: LD_ADDR_VAR 0 6
36481: PUSH
36482: LD_VAR 0 6
36486: PUSH
36487: LD_VAR 0 2
36491: PUSH
36492: LD_VAR 0 5
36496: ARRAY
36497: ARRAY
36498: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36499: LD_ADDR_VAR 0 7
36503: PUSH
36504: LD_VAR 0 7
36508: PUSH
36509: LD_VAR 0 6
36513: PUSH
36514: EMPTY
36515: LIST
36516: ADD
36517: ST_TO_ADDR
// end ;
36518: GO 36474
36520: POP
36521: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36522: LD_ADDR_VAR 0 6
36526: PUSH
36527: LD_VAR 0 6
36531: PPUSH
36532: LD_VAR 0 2
36536: PUSH
36537: LD_VAR 0 2
36541: ARRAY
36542: PPUSH
36543: LD_VAR 0 3
36547: PPUSH
36548: CALL_OW 1
36552: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36553: LD_ADDR_VAR 0 7
36557: PUSH
36558: LD_VAR 0 7
36562: PPUSH
36563: LD_VAR 0 7
36567: PPUSH
36568: LD_VAR 0 6
36572: PPUSH
36573: CALL_OW 1
36577: ST_TO_ADDR
// for i = s_arr downto 2 do
36578: LD_ADDR_VAR 0 5
36582: PUSH
36583: DOUBLE
36584: LD_VAR 0 7
36588: INC
36589: ST_TO_ADDR
36590: LD_INT 2
36592: PUSH
36593: FOR_DOWNTO
36594: IFFALSE 36678
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36596: LD_ADDR_VAR 0 6
36600: PUSH
36601: LD_VAR 0 7
36605: PUSH
36606: LD_VAR 0 5
36610: PUSH
36611: LD_INT 1
36613: MINUS
36614: ARRAY
36615: PPUSH
36616: LD_VAR 0 2
36620: PUSH
36621: LD_VAR 0 5
36625: PUSH
36626: LD_INT 1
36628: MINUS
36629: ARRAY
36630: PPUSH
36631: LD_VAR 0 7
36635: PUSH
36636: LD_VAR 0 5
36640: ARRAY
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36647: LD_ADDR_VAR 0 7
36651: PUSH
36652: LD_VAR 0 7
36656: PPUSH
36657: LD_VAR 0 5
36661: PUSH
36662: LD_INT 1
36664: MINUS
36665: PPUSH
36666: LD_VAR 0 6
36670: PPUSH
36671: CALL_OW 1
36675: ST_TO_ADDR
// end ;
36676: GO 36593
36678: POP
36679: POP
// result := s_arr [ 1 ] ;
36680: LD_ADDR_VAR 0 4
36684: PUSH
36685: LD_VAR 0 7
36689: PUSH
36690: LD_INT 1
36692: ARRAY
36693: ST_TO_ADDR
// end ; end ;
36694: LD_VAR 0 4
36698: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36699: LD_INT 0
36701: PPUSH
36702: PPUSH
// if not list then
36703: LD_VAR 0 1
36707: NOT
36708: IFFALSE 36712
// exit ;
36710: GO 36803
// i := list [ pos1 ] ;
36712: LD_ADDR_VAR 0 5
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_VAR 0 2
36726: ARRAY
36727: ST_TO_ADDR
// if not i then
36728: LD_VAR 0 5
36732: NOT
36733: IFFALSE 36737
// exit ;
36735: GO 36803
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36737: LD_ADDR_VAR 0 1
36741: PUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: LD_VAR 0 2
36751: PPUSH
36752: LD_VAR 0 1
36756: PUSH
36757: LD_VAR 0 3
36761: ARRAY
36762: PPUSH
36763: CALL_OW 1
36767: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36768: LD_ADDR_VAR 0 1
36772: PUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: LD_VAR 0 3
36782: PPUSH
36783: LD_VAR 0 5
36787: PPUSH
36788: CALL_OW 1
36792: ST_TO_ADDR
// result := list ;
36793: LD_ADDR_VAR 0 4
36797: PUSH
36798: LD_VAR 0 1
36802: ST_TO_ADDR
// end ;
36803: LD_VAR 0 4
36807: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36808: LD_INT 0
36810: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36811: LD_ADDR_VAR 0 5
36815: PUSH
36816: LD_VAR 0 1
36820: PPUSH
36821: CALL_OW 250
36825: PPUSH
36826: LD_VAR 0 1
36830: PPUSH
36831: CALL_OW 251
36835: PPUSH
36836: LD_VAR 0 2
36840: PPUSH
36841: LD_VAR 0 3
36845: PPUSH
36846: LD_VAR 0 4
36850: PPUSH
36851: CALL 36861 0 5
36855: ST_TO_ADDR
// end ;
36856: LD_VAR 0 5
36860: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36861: LD_INT 0
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
// if not list then
36867: LD_VAR 0 3
36871: NOT
36872: IFFALSE 36876
// exit ;
36874: GO 37264
// result := [ ] ;
36876: LD_ADDR_VAR 0 6
36880: PUSH
36881: EMPTY
36882: ST_TO_ADDR
// for i in list do
36883: LD_ADDR_VAR 0 7
36887: PUSH
36888: LD_VAR 0 3
36892: PUSH
36893: FOR_IN
36894: IFFALSE 37096
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_VAR 0 7
36905: PPUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: LD_VAR 0 2
36915: PPUSH
36916: CALL_OW 297
36920: ST_TO_ADDR
// if not result then
36921: LD_VAR 0 6
36925: NOT
36926: IFFALSE 36952
// result := [ [ i , tmp ] ] else
36928: LD_ADDR_VAR 0 6
36932: PUSH
36933: LD_VAR 0 7
36937: PUSH
36938: LD_VAR 0 9
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: ST_TO_ADDR
36950: GO 37094
// begin if result [ result ] [ 2 ] < tmp then
36952: LD_VAR 0 6
36956: PUSH
36957: LD_VAR 0 6
36961: ARRAY
36962: PUSH
36963: LD_INT 2
36965: ARRAY
36966: PUSH
36967: LD_VAR 0 9
36971: LESS
36972: IFFALSE 37014
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36974: LD_ADDR_VAR 0 6
36978: PUSH
36979: LD_VAR 0 6
36983: PPUSH
36984: LD_VAR 0 6
36988: PUSH
36989: LD_INT 1
36991: PLUS
36992: PPUSH
36993: LD_VAR 0 7
36997: PUSH
36998: LD_VAR 0 9
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 2
37011: ST_TO_ADDR
37012: GO 37094
// for j = 1 to result do
37014: LD_ADDR_VAR 0 8
37018: PUSH
37019: DOUBLE
37020: LD_INT 1
37022: DEC
37023: ST_TO_ADDR
37024: LD_VAR 0 6
37028: PUSH
37029: FOR_TO
37030: IFFALSE 37092
// begin if tmp < result [ j ] [ 2 ] then
37032: LD_VAR 0 9
37036: PUSH
37037: LD_VAR 0 6
37041: PUSH
37042: LD_VAR 0 8
37046: ARRAY
37047: PUSH
37048: LD_INT 2
37050: ARRAY
37051: LESS
37052: IFFALSE 37090
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37054: LD_ADDR_VAR 0 6
37058: PUSH
37059: LD_VAR 0 6
37063: PPUSH
37064: LD_VAR 0 8
37068: PPUSH
37069: LD_VAR 0 7
37073: PUSH
37074: LD_VAR 0 9
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 2
37087: ST_TO_ADDR
// break ;
37088: GO 37092
// end ; end ;
37090: GO 37029
37092: POP
37093: POP
// end ; end ;
37094: GO 36893
37096: POP
37097: POP
// if result and not asc then
37098: LD_VAR 0 6
37102: PUSH
37103: LD_VAR 0 4
37107: NOT
37108: AND
37109: IFFALSE 37184
// begin tmp := result ;
37111: LD_ADDR_VAR 0 9
37115: PUSH
37116: LD_VAR 0 6
37120: ST_TO_ADDR
// for i = tmp downto 1 do
37121: LD_ADDR_VAR 0 7
37125: PUSH
37126: DOUBLE
37127: LD_VAR 0 9
37131: INC
37132: ST_TO_ADDR
37133: LD_INT 1
37135: PUSH
37136: FOR_DOWNTO
37137: IFFALSE 37182
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37139: LD_ADDR_VAR 0 6
37143: PUSH
37144: LD_VAR 0 6
37148: PPUSH
37149: LD_VAR 0 9
37153: PUSH
37154: LD_VAR 0 7
37158: MINUS
37159: PUSH
37160: LD_INT 1
37162: PLUS
37163: PPUSH
37164: LD_VAR 0 9
37168: PUSH
37169: LD_VAR 0 7
37173: ARRAY
37174: PPUSH
37175: CALL_OW 1
37179: ST_TO_ADDR
37180: GO 37136
37182: POP
37183: POP
// end ; tmp := [ ] ;
37184: LD_ADDR_VAR 0 9
37188: PUSH
37189: EMPTY
37190: ST_TO_ADDR
// if mode then
37191: LD_VAR 0 5
37195: IFFALSE 37264
// begin for i = 1 to result do
37197: LD_ADDR_VAR 0 7
37201: PUSH
37202: DOUBLE
37203: LD_INT 1
37205: DEC
37206: ST_TO_ADDR
37207: LD_VAR 0 6
37211: PUSH
37212: FOR_TO
37213: IFFALSE 37252
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37215: LD_ADDR_VAR 0 9
37219: PUSH
37220: LD_VAR 0 9
37224: PPUSH
37225: LD_VAR 0 7
37229: PPUSH
37230: LD_VAR 0 6
37234: PUSH
37235: LD_VAR 0 7
37239: ARRAY
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: CALL_OW 1
37249: ST_TO_ADDR
37250: GO 37212
37252: POP
37253: POP
// result := tmp ;
37254: LD_ADDR_VAR 0 6
37258: PUSH
37259: LD_VAR 0 9
37263: ST_TO_ADDR
// end ; end ;
37264: LD_VAR 0 6
37268: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37269: LD_INT 0
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37277: LD_ADDR_VAR 0 5
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: EMPTY
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// if not x or not y then
37299: LD_VAR 0 2
37303: NOT
37304: PUSH
37305: LD_VAR 0 3
37309: NOT
37310: OR
37311: IFFALSE 37315
// exit ;
37313: GO 38967
// if not range then
37315: LD_VAR 0 4
37319: NOT
37320: IFFALSE 37330
// range := 10 ;
37322: LD_ADDR_VAR 0 4
37326: PUSH
37327: LD_INT 10
37329: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37330: LD_ADDR_VAR 0 8
37334: PUSH
37335: LD_INT 81
37337: PUSH
37338: LD_VAR 0 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 92
37349: PUSH
37350: LD_VAR 0 2
37354: PUSH
37355: LD_VAR 0 3
37359: PUSH
37360: LD_VAR 0 4
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 3
37373: PUSH
37374: LD_INT 21
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: PPUSH
37393: CALL_OW 69
37397: ST_TO_ADDR
// if not tmp then
37398: LD_VAR 0 8
37402: NOT
37403: IFFALSE 37407
// exit ;
37405: GO 38967
// for i in tmp do
37407: LD_ADDR_VAR 0 6
37411: PUSH
37412: LD_VAR 0 8
37416: PUSH
37417: FOR_IN
37418: IFFALSE 38942
// begin points := [ 0 , 0 , 0 ] ;
37420: LD_ADDR_VAR 0 9
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: LIST
37438: ST_TO_ADDR
// bpoints := 1 ;
37439: LD_ADDR_VAR 0 10
37443: PUSH
37444: LD_INT 1
37446: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37447: LD_VAR 0 6
37451: PPUSH
37452: CALL_OW 247
37456: PUSH
37457: LD_INT 1
37459: DOUBLE
37460: EQUAL
37461: IFTRUE 37465
37463: GO 38043
37465: POP
// begin if GetClass ( i ) = 1 then
37466: LD_VAR 0 6
37470: PPUSH
37471: CALL_OW 257
37475: PUSH
37476: LD_INT 1
37478: EQUAL
37479: IFFALSE 37500
// points := [ 10 , 5 , 3 ] ;
37481: LD_ADDR_VAR 0 9
37485: PUSH
37486: LD_INT 10
37488: PUSH
37489: LD_INT 5
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 257
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: IN
37524: IFFALSE 37545
// points := [ 3 , 2 , 1 ] ;
37526: LD_ADDR_VAR 0 9
37530: PUSH
37531: LD_INT 3
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37545: LD_VAR 0 6
37549: PPUSH
37550: CALL_OW 257
37554: PUSH
37555: LD_INT 5
37557: EQUAL
37558: IFFALSE 37579
// points := [ 130 , 5 , 2 ] ;
37560: LD_ADDR_VAR 0 9
37564: PUSH
37565: LD_INT 130
37567: PUSH
37568: LD_INT 5
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37579: LD_VAR 0 6
37583: PPUSH
37584: CALL_OW 257
37588: PUSH
37589: LD_INT 8
37591: EQUAL
37592: IFFALSE 37613
// points := [ 35 , 35 , 30 ] ;
37594: LD_ADDR_VAR 0 9
37598: PUSH
37599: LD_INT 35
37601: PUSH
37602: LD_INT 35
37604: PUSH
37605: LD_INT 30
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37613: LD_VAR 0 6
37617: PPUSH
37618: CALL_OW 257
37622: PUSH
37623: LD_INT 9
37625: EQUAL
37626: IFFALSE 37647
// points := [ 20 , 55 , 40 ] ;
37628: LD_ADDR_VAR 0 9
37632: PUSH
37633: LD_INT 20
37635: PUSH
37636: LD_INT 55
37638: PUSH
37639: LD_INT 40
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37647: LD_VAR 0 6
37651: PPUSH
37652: CALL_OW 257
37656: PUSH
37657: LD_INT 12
37659: PUSH
37660: LD_INT 16
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: IN
37667: IFFALSE 37688
// points := [ 5 , 3 , 2 ] ;
37669: LD_ADDR_VAR 0 9
37673: PUSH
37674: LD_INT 5
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37688: LD_VAR 0 6
37692: PPUSH
37693: CALL_OW 257
37697: PUSH
37698: LD_INT 17
37700: EQUAL
37701: IFFALSE 37722
// points := [ 100 , 50 , 75 ] ;
37703: LD_ADDR_VAR 0 9
37707: PUSH
37708: LD_INT 100
37710: PUSH
37711: LD_INT 50
37713: PUSH
37714: LD_INT 75
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37722: LD_VAR 0 6
37726: PPUSH
37727: CALL_OW 257
37731: PUSH
37732: LD_INT 15
37734: EQUAL
37735: IFFALSE 37756
// points := [ 10 , 5 , 3 ] ;
37737: LD_ADDR_VAR 0 9
37741: PUSH
37742: LD_INT 10
37744: PUSH
37745: LD_INT 5
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 257
37765: PUSH
37766: LD_INT 14
37768: EQUAL
37769: IFFALSE 37790
// points := [ 10 , 0 , 0 ] ;
37771: LD_ADDR_VAR 0 9
37775: PUSH
37776: LD_INT 10
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37790: LD_VAR 0 6
37794: PPUSH
37795: CALL_OW 257
37799: PUSH
37800: LD_INT 11
37802: EQUAL
37803: IFFALSE 37824
// points := [ 30 , 10 , 5 ] ;
37805: LD_ADDR_VAR 0 9
37809: PUSH
37810: LD_INT 30
37812: PUSH
37813: LD_INT 10
37815: PUSH
37816: LD_INT 5
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37824: LD_VAR 0 1
37828: PPUSH
37829: LD_INT 5
37831: PPUSH
37832: CALL_OW 321
37836: PUSH
37837: LD_INT 2
37839: EQUAL
37840: IFFALSE 37857
// bpoints := bpoints * 1.8 ;
37842: LD_ADDR_VAR 0 10
37846: PUSH
37847: LD_VAR 0 10
37851: PUSH
37852: LD_REAL  1.80000000000000E+0000
37855: MUL
37856: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 257
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: LD_INT 4
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: IN
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: LD_INT 51
37893: PPUSH
37894: CALL_OW 321
37898: PUSH
37899: LD_INT 2
37901: EQUAL
37902: AND
37903: IFFALSE 37920
// bpoints := bpoints * 1.2 ;
37905: LD_ADDR_VAR 0 10
37909: PUSH
37910: LD_VAR 0 10
37914: PUSH
37915: LD_REAL  1.20000000000000E+0000
37918: MUL
37919: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37920: LD_VAR 0 6
37924: PPUSH
37925: CALL_OW 257
37929: PUSH
37930: LD_INT 5
37932: PUSH
37933: LD_INT 7
37935: PUSH
37936: LD_INT 9
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: IN
37944: PUSH
37945: LD_VAR 0 1
37949: PPUSH
37950: LD_INT 52
37952: PPUSH
37953: CALL_OW 321
37957: PUSH
37958: LD_INT 2
37960: EQUAL
37961: AND
37962: IFFALSE 37979
// bpoints := bpoints * 1.5 ;
37964: LD_ADDR_VAR 0 10
37968: PUSH
37969: LD_VAR 0 10
37973: PUSH
37974: LD_REAL  1.50000000000000E+0000
37977: MUL
37978: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37979: LD_VAR 0 1
37983: PPUSH
37984: LD_INT 66
37986: PPUSH
37987: CALL_OW 321
37991: PUSH
37992: LD_INT 2
37994: EQUAL
37995: IFFALSE 38012
// bpoints := bpoints * 1.1 ;
37997: LD_ADDR_VAR 0 10
38001: PUSH
38002: LD_VAR 0 10
38006: PUSH
38007: LD_REAL  1.10000000000000E+0000
38010: MUL
38011: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38012: LD_ADDR_VAR 0 10
38016: PUSH
38017: LD_VAR 0 10
38021: PUSH
38022: LD_VAR 0 6
38026: PPUSH
38027: LD_INT 1
38029: PPUSH
38030: CALL_OW 259
38034: PUSH
38035: LD_REAL  1.15000000000000E+0000
38038: MUL
38039: MUL
38040: ST_TO_ADDR
// end ; unit_vehicle :
38041: GO 38871
38043: LD_INT 2
38045: DOUBLE
38046: EQUAL
38047: IFTRUE 38051
38049: GO 38859
38051: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38052: LD_VAR 0 6
38056: PPUSH
38057: CALL_OW 264
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 42
38067: PUSH
38068: LD_INT 24
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: IN
38076: IFFALSE 38097
// points := [ 25 , 5 , 3 ] ;
38078: LD_ADDR_VAR 0 9
38082: PUSH
38083: LD_INT 25
38085: PUSH
38086: LD_INT 5
38088: PUSH
38089: LD_INT 3
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38097: LD_VAR 0 6
38101: PPUSH
38102: CALL_OW 264
38106: PUSH
38107: LD_INT 4
38109: PUSH
38110: LD_INT 43
38112: PUSH
38113: LD_INT 25
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: IN
38121: IFFALSE 38142
// points := [ 40 , 15 , 5 ] ;
38123: LD_ADDR_VAR 0 9
38127: PUSH
38128: LD_INT 40
38130: PUSH
38131: LD_INT 15
38133: PUSH
38134: LD_INT 5
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38142: LD_VAR 0 6
38146: PPUSH
38147: CALL_OW 264
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 23
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: IN
38162: IFFALSE 38183
// points := [ 7 , 25 , 8 ] ;
38164: LD_ADDR_VAR 0 9
38168: PUSH
38169: LD_INT 7
38171: PUSH
38172: LD_INT 25
38174: PUSH
38175: LD_INT 8
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38183: LD_VAR 0 6
38187: PPUSH
38188: CALL_OW 264
38192: PUSH
38193: LD_INT 5
38195: PUSH
38196: LD_INT 27
38198: PUSH
38199: LD_INT 44
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: IN
38207: IFFALSE 38228
// points := [ 14 , 50 , 16 ] ;
38209: LD_ADDR_VAR 0 9
38213: PUSH
38214: LD_INT 14
38216: PUSH
38217: LD_INT 50
38219: PUSH
38220: LD_INT 16
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38228: LD_VAR 0 6
38232: PPUSH
38233: CALL_OW 264
38237: PUSH
38238: LD_INT 6
38240: PUSH
38241: LD_INT 46
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: IN
38248: IFFALSE 38269
// points := [ 32 , 120 , 70 ] ;
38250: LD_ADDR_VAR 0 9
38254: PUSH
38255: LD_INT 32
38257: PUSH
38258: LD_INT 120
38260: PUSH
38261: LD_INT 70
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38269: LD_VAR 0 6
38273: PPUSH
38274: CALL_OW 264
38278: PUSH
38279: LD_INT 7
38281: PUSH
38282: LD_INT 28
38284: PUSH
38285: LD_INT 45
38287: PUSH
38288: LD_EXP 31
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: IN
38299: IFFALSE 38320
// points := [ 35 , 20 , 45 ] ;
38301: LD_ADDR_VAR 0 9
38305: PUSH
38306: LD_INT 35
38308: PUSH
38309: LD_INT 20
38311: PUSH
38312: LD_INT 45
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38320: LD_VAR 0 6
38324: PPUSH
38325: CALL_OW 264
38329: PUSH
38330: LD_INT 47
38332: PUSH
38333: EMPTY
38334: LIST
38335: IN
38336: IFFALSE 38357
// points := [ 67 , 45 , 75 ] ;
38338: LD_ADDR_VAR 0 9
38342: PUSH
38343: LD_INT 67
38345: PUSH
38346: LD_INT 45
38348: PUSH
38349: LD_INT 75
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38357: LD_VAR 0 6
38361: PPUSH
38362: CALL_OW 264
38366: PUSH
38367: LD_INT 26
38369: PUSH
38370: EMPTY
38371: LIST
38372: IN
38373: IFFALSE 38394
// points := [ 120 , 30 , 80 ] ;
38375: LD_ADDR_VAR 0 9
38379: PUSH
38380: LD_INT 120
38382: PUSH
38383: LD_INT 30
38385: PUSH
38386: LD_INT 80
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38394: LD_VAR 0 6
38398: PPUSH
38399: CALL_OW 264
38403: PUSH
38404: LD_INT 22
38406: PUSH
38407: EMPTY
38408: LIST
38409: IN
38410: IFFALSE 38431
// points := [ 40 , 1 , 1 ] ;
38412: LD_ADDR_VAR 0 9
38416: PUSH
38417: LD_INT 40
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38431: LD_VAR 0 6
38435: PPUSH
38436: CALL_OW 264
38440: PUSH
38441: LD_INT 29
38443: PUSH
38444: EMPTY
38445: LIST
38446: IN
38447: IFFALSE 38468
// points := [ 70 , 200 , 400 ] ;
38449: LD_ADDR_VAR 0 9
38453: PUSH
38454: LD_INT 70
38456: PUSH
38457: LD_INT 200
38459: PUSH
38460: LD_INT 400
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38468: LD_VAR 0 6
38472: PPUSH
38473: CALL_OW 264
38477: PUSH
38478: LD_INT 14
38480: PUSH
38481: LD_INT 53
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: IN
38488: IFFALSE 38509
// points := [ 40 , 10 , 20 ] ;
38490: LD_ADDR_VAR 0 9
38494: PUSH
38495: LD_INT 40
38497: PUSH
38498: LD_INT 10
38500: PUSH
38501: LD_INT 20
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38509: LD_VAR 0 6
38513: PPUSH
38514: CALL_OW 264
38518: PUSH
38519: LD_INT 9
38521: PUSH
38522: EMPTY
38523: LIST
38524: IN
38525: IFFALSE 38546
// points := [ 5 , 70 , 20 ] ;
38527: LD_ADDR_VAR 0 9
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: LD_INT 70
38537: PUSH
38538: LD_INT 20
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38546: LD_VAR 0 6
38550: PPUSH
38551: CALL_OW 264
38555: PUSH
38556: LD_INT 10
38558: PUSH
38559: EMPTY
38560: LIST
38561: IN
38562: IFFALSE 38583
// points := [ 35 , 110 , 70 ] ;
38564: LD_ADDR_VAR 0 9
38568: PUSH
38569: LD_INT 35
38571: PUSH
38572: LD_INT 110
38574: PUSH
38575: LD_INT 70
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38583: LD_VAR 0 6
38587: PPUSH
38588: CALL_OW 265
38592: PUSH
38593: LD_INT 25
38595: EQUAL
38596: IFFALSE 38617
// points := [ 80 , 65 , 100 ] ;
38598: LD_ADDR_VAR 0 9
38602: PUSH
38603: LD_INT 80
38605: PUSH
38606: LD_INT 65
38608: PUSH
38609: LD_INT 100
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38617: LD_VAR 0 6
38621: PPUSH
38622: CALL_OW 263
38626: PUSH
38627: LD_INT 1
38629: EQUAL
38630: IFFALSE 38665
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38632: LD_ADDR_VAR 0 10
38636: PUSH
38637: LD_VAR 0 10
38641: PUSH
38642: LD_VAR 0 6
38646: PPUSH
38647: CALL_OW 311
38651: PPUSH
38652: LD_INT 3
38654: PPUSH
38655: CALL_OW 259
38659: PUSH
38660: LD_INT 4
38662: MUL
38663: MUL
38664: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38665: LD_VAR 0 6
38669: PPUSH
38670: CALL_OW 263
38674: PUSH
38675: LD_INT 2
38677: EQUAL
38678: IFFALSE 38729
// begin j := IsControledBy ( i ) ;
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_VAR 0 6
38689: PPUSH
38690: CALL_OW 312
38694: ST_TO_ADDR
// if j then
38695: LD_VAR 0 7
38699: IFFALSE 38729
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38701: LD_ADDR_VAR 0 10
38705: PUSH
38706: LD_VAR 0 10
38710: PUSH
38711: LD_VAR 0 7
38715: PPUSH
38716: LD_INT 3
38718: PPUSH
38719: CALL_OW 259
38723: PUSH
38724: LD_INT 3
38726: MUL
38727: MUL
38728: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38729: LD_VAR 0 6
38733: PPUSH
38734: CALL_OW 264
38738: PUSH
38739: LD_INT 5
38741: PUSH
38742: LD_INT 6
38744: PUSH
38745: LD_INT 46
38747: PUSH
38748: LD_INT 44
38750: PUSH
38751: LD_INT 47
38753: PUSH
38754: LD_INT 45
38756: PUSH
38757: LD_INT 28
38759: PUSH
38760: LD_INT 7
38762: PUSH
38763: LD_INT 27
38765: PUSH
38766: LD_INT 29
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: IN
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: LD_INT 52
38789: PPUSH
38790: CALL_OW 321
38794: PUSH
38795: LD_INT 2
38797: EQUAL
38798: AND
38799: IFFALSE 38816
// bpoints := bpoints * 1.2 ;
38801: LD_ADDR_VAR 0 10
38805: PUSH
38806: LD_VAR 0 10
38810: PUSH
38811: LD_REAL  1.20000000000000E+0000
38814: MUL
38815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38816: LD_VAR 0 6
38820: PPUSH
38821: CALL_OW 264
38825: PUSH
38826: LD_INT 6
38828: PUSH
38829: LD_INT 46
38831: PUSH
38832: LD_INT 47
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: IN
38840: IFFALSE 38857
// bpoints := bpoints * 1.2 ;
38842: LD_ADDR_VAR 0 10
38846: PUSH
38847: LD_VAR 0 10
38851: PUSH
38852: LD_REAL  1.20000000000000E+0000
38855: MUL
38856: ST_TO_ADDR
// end ; unit_building :
38857: GO 38871
38859: LD_INT 3
38861: DOUBLE
38862: EQUAL
38863: IFTRUE 38867
38865: GO 38870
38867: POP
// ; end ;
38868: GO 38871
38870: POP
// for j = 1 to 3 do
38871: LD_ADDR_VAR 0 7
38875: PUSH
38876: DOUBLE
38877: LD_INT 1
38879: DEC
38880: ST_TO_ADDR
38881: LD_INT 3
38883: PUSH
38884: FOR_TO
38885: IFFALSE 38938
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_VAR 0 5
38896: PPUSH
38897: LD_VAR 0 7
38901: PPUSH
38902: LD_VAR 0 5
38906: PUSH
38907: LD_VAR 0 7
38911: ARRAY
38912: PUSH
38913: LD_VAR 0 9
38917: PUSH
38918: LD_VAR 0 7
38922: ARRAY
38923: PUSH
38924: LD_VAR 0 10
38928: MUL
38929: PLUS
38930: PPUSH
38931: CALL_OW 1
38935: ST_TO_ADDR
38936: GO 38884
38938: POP
38939: POP
// end ;
38940: GO 37417
38942: POP
38943: POP
// result := Replace ( result , 4 , tmp ) ;
38944: LD_ADDR_VAR 0 5
38948: PUSH
38949: LD_VAR 0 5
38953: PPUSH
38954: LD_INT 4
38956: PPUSH
38957: LD_VAR 0 8
38961: PPUSH
38962: CALL_OW 1
38966: ST_TO_ADDR
// end ;
38967: LD_VAR 0 5
38971: RET
// export function DangerAtRange ( unit , range ) ; begin
38972: LD_INT 0
38974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38975: LD_ADDR_VAR 0 3
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: CALL_OW 255
38989: PPUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: CALL_OW 250
38999: PPUSH
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 251
39009: PPUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: CALL 37269 0 4
39019: ST_TO_ADDR
// end ;
39020: LD_VAR 0 3
39024: RET
// export function DangerInArea ( side , area ) ; begin
39025: LD_INT 0
39027: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39028: LD_ADDR_VAR 0 3
39032: PUSH
39033: LD_VAR 0 2
39037: PPUSH
39038: LD_INT 81
39040: PUSH
39041: LD_VAR 0 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PPUSH
39050: CALL_OW 70
39054: ST_TO_ADDR
// end ;
39055: LD_VAR 0 3
39059: RET
// export function IsExtension ( b ) ; begin
39060: LD_INT 0
39062: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39063: LD_ADDR_VAR 0 2
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 23
39075: PUSH
39076: LD_INT 20
39078: PUSH
39079: LD_INT 22
39081: PUSH
39082: LD_INT 17
39084: PUSH
39085: LD_INT 24
39087: PUSH
39088: LD_INT 21
39090: PUSH
39091: LD_INT 19
39093: PUSH
39094: LD_INT 16
39096: PUSH
39097: LD_INT 25
39099: PUSH
39100: LD_INT 18
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: IN
39115: ST_TO_ADDR
// end ;
39116: LD_VAR 0 2
39120: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
// result := [ ] ;
39126: LD_ADDR_VAR 0 4
39130: PUSH
39131: EMPTY
39132: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39133: LD_ADDR_VAR 0 5
39137: PUSH
39138: LD_VAR 0 2
39142: PPUSH
39143: LD_INT 21
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PPUSH
39153: CALL_OW 70
39157: ST_TO_ADDR
// if not tmp then
39158: LD_VAR 0 5
39162: NOT
39163: IFFALSE 39167
// exit ;
39165: GO 39231
// if checkLink then
39167: LD_VAR 0 3
39171: IFFALSE 39221
// begin for i in tmp do
39173: LD_ADDR_VAR 0 6
39177: PUSH
39178: LD_VAR 0 5
39182: PUSH
39183: FOR_IN
39184: IFFALSE 39219
// if GetBase ( i ) <> base then
39186: LD_VAR 0 6
39190: PPUSH
39191: CALL_OW 274
39195: PUSH
39196: LD_VAR 0 1
39200: NONEQUAL
39201: IFFALSE 39217
// ComLinkToBase ( base , i ) ;
39203: LD_VAR 0 1
39207: PPUSH
39208: LD_VAR 0 6
39212: PPUSH
39213: CALL_OW 169
39217: GO 39183
39219: POP
39220: POP
// end ; result := tmp ;
39221: LD_ADDR_VAR 0 4
39225: PUSH
39226: LD_VAR 0 5
39230: ST_TO_ADDR
// end ;
39231: LD_VAR 0 4
39235: RET
// export function ComComplete ( units , b ) ; var i ; begin
39236: LD_INT 0
39238: PPUSH
39239: PPUSH
// if not units then
39240: LD_VAR 0 1
39244: NOT
39245: IFFALSE 39249
// exit ;
39247: GO 39339
// for i in units do
39249: LD_ADDR_VAR 0 4
39253: PUSH
39254: LD_VAR 0 1
39258: PUSH
39259: FOR_IN
39260: IFFALSE 39337
// if BuildingStatus ( b ) = bs_build then
39262: LD_VAR 0 2
39266: PPUSH
39267: CALL_OW 461
39271: PUSH
39272: LD_INT 1
39274: EQUAL
39275: IFFALSE 39335
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39277: LD_VAR 0 4
39281: PPUSH
39282: LD_STRING h
39284: PUSH
39285: LD_VAR 0 2
39289: PPUSH
39290: CALL_OW 250
39294: PUSH
39295: LD_VAR 0 2
39299: PPUSH
39300: CALL_OW 251
39304: PUSH
39305: LD_VAR 0 2
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: PPUSH
39331: CALL_OW 446
39335: GO 39259
39337: POP
39338: POP
// end ;
39339: LD_VAR 0 3
39343: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39344: LD_INT 0
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39352: LD_VAR 0 1
39356: NOT
39357: PUSH
39358: LD_VAR 0 1
39362: PPUSH
39363: CALL_OW 263
39367: PUSH
39368: LD_INT 2
39370: NONEQUAL
39371: OR
39372: IFFALSE 39376
// exit ;
39374: GO 39692
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39376: LD_ADDR_VAR 0 6
39380: PUSH
39381: LD_INT 22
39383: PUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 255
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 30
39403: PUSH
39404: LD_INT 36
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 34
39413: PUSH
39414: LD_INT 31
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PPUSH
39430: CALL_OW 69
39434: ST_TO_ADDR
// if not tmp then
39435: LD_VAR 0 6
39439: NOT
39440: IFFALSE 39444
// exit ;
39442: GO 39692
// result := [ ] ;
39444: LD_ADDR_VAR 0 2
39448: PUSH
39449: EMPTY
39450: ST_TO_ADDR
// for i in tmp do
39451: LD_ADDR_VAR 0 3
39455: PUSH
39456: LD_VAR 0 6
39460: PUSH
39461: FOR_IN
39462: IFFALSE 39533
// begin t := UnitsInside ( i ) ;
39464: LD_ADDR_VAR 0 4
39468: PUSH
39469: LD_VAR 0 3
39473: PPUSH
39474: CALL_OW 313
39478: ST_TO_ADDR
// if t then
39479: LD_VAR 0 4
39483: IFFALSE 39531
// for j in t do
39485: LD_ADDR_VAR 0 7
39489: PUSH
39490: LD_VAR 0 4
39494: PUSH
39495: FOR_IN
39496: IFFALSE 39529
// result := Replace ( result , result + 1 , j ) ;
39498: LD_ADDR_VAR 0 2
39502: PUSH
39503: LD_VAR 0 2
39507: PPUSH
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 1
39515: PLUS
39516: PPUSH
39517: LD_VAR 0 7
39521: PPUSH
39522: CALL_OW 1
39526: ST_TO_ADDR
39527: GO 39495
39529: POP
39530: POP
// end ;
39531: GO 39461
39533: POP
39534: POP
// if not result then
39535: LD_VAR 0 2
39539: NOT
39540: IFFALSE 39544
// exit ;
39542: GO 39692
// mech := result [ 1 ] ;
39544: LD_ADDR_VAR 0 5
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: ST_TO_ADDR
// if result > 1 then
39558: LD_VAR 0 2
39562: PUSH
39563: LD_INT 1
39565: GREATER
39566: IFFALSE 39678
// begin for i = 2 to result do
39568: LD_ADDR_VAR 0 3
39572: PUSH
39573: DOUBLE
39574: LD_INT 2
39576: DEC
39577: ST_TO_ADDR
39578: LD_VAR 0 2
39582: PUSH
39583: FOR_TO
39584: IFFALSE 39676
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39586: LD_ADDR_VAR 0 4
39590: PUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_VAR 0 3
39600: ARRAY
39601: PPUSH
39602: LD_INT 3
39604: PPUSH
39605: CALL_OW 259
39609: PUSH
39610: LD_VAR 0 2
39614: PUSH
39615: LD_VAR 0 3
39619: ARRAY
39620: PPUSH
39621: CALL_OW 432
39625: MINUS
39626: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39627: LD_VAR 0 4
39631: PUSH
39632: LD_VAR 0 5
39636: PPUSH
39637: LD_INT 3
39639: PPUSH
39640: CALL_OW 259
39644: PUSH
39645: LD_VAR 0 5
39649: PPUSH
39650: CALL_OW 432
39654: MINUS
39655: GREATEREQUAL
39656: IFFALSE 39674
// mech := result [ i ] ;
39658: LD_ADDR_VAR 0 5
39662: PUSH
39663: LD_VAR 0 2
39667: PUSH
39668: LD_VAR 0 3
39672: ARRAY
39673: ST_TO_ADDR
// end ;
39674: GO 39583
39676: POP
39677: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_VAR 0 5
39687: PPUSH
39688: CALL_OW 135
// end ;
39692: LD_VAR 0 2
39696: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39697: LD_INT 0
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
// result := [ ] ;
39712: LD_ADDR_VAR 0 7
39716: PUSH
39717: EMPTY
39718: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 266
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: IN
39739: NOT
39740: IFFALSE 39744
// exit ;
39742: GO 41378
// if name then
39744: LD_VAR 0 3
39748: IFFALSE 39764
// SetBName ( base_dep , name ) ;
39750: LD_VAR 0 1
39754: PPUSH
39755: LD_VAR 0 3
39759: PPUSH
39760: CALL_OW 500
// base := GetBase ( base_dep ) ;
39764: LD_ADDR_VAR 0 15
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 274
39778: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39779: LD_ADDR_VAR 0 16
39783: PUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 255
39793: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39794: LD_ADDR_VAR 0 17
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: CALL_OW 248
39808: ST_TO_ADDR
// if sources then
39809: LD_VAR 0 5
39813: IFFALSE 39860
// for i = 1 to 3 do
39815: LD_ADDR_VAR 0 8
39819: PUSH
39820: DOUBLE
39821: LD_INT 1
39823: DEC
39824: ST_TO_ADDR
39825: LD_INT 3
39827: PUSH
39828: FOR_TO
39829: IFFALSE 39858
// AddResourceType ( base , i , sources [ i ] ) ;
39831: LD_VAR 0 15
39835: PPUSH
39836: LD_VAR 0 8
39840: PPUSH
39841: LD_VAR 0 5
39845: PUSH
39846: LD_VAR 0 8
39850: ARRAY
39851: PPUSH
39852: CALL_OW 276
39856: GO 39828
39858: POP
39859: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39860: LD_ADDR_VAR 0 18
39864: PUSH
39865: LD_VAR 0 15
39869: PPUSH
39870: LD_VAR 0 2
39874: PPUSH
39875: LD_INT 1
39877: PPUSH
39878: CALL 39121 0 3
39882: ST_TO_ADDR
// InitHc ;
39883: CALL_OW 19
// InitUc ;
39887: CALL_OW 18
// uc_side := side ;
39891: LD_ADDR_OWVAR 20
39895: PUSH
39896: LD_VAR 0 16
39900: ST_TO_ADDR
// uc_nation := nation ;
39901: LD_ADDR_OWVAR 21
39905: PUSH
39906: LD_VAR 0 17
39910: ST_TO_ADDR
// if buildings then
39911: LD_VAR 0 18
39915: IFFALSE 41237
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39917: LD_ADDR_VAR 0 19
39921: PUSH
39922: LD_VAR 0 18
39926: PPUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 30
39932: PUSH
39933: LD_INT 29
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 30
39942: PUSH
39943: LD_INT 30
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: PPUSH
39955: CALL_OW 72
39959: ST_TO_ADDR
// if tmp then
39960: LD_VAR 0 19
39964: IFFALSE 40012
// for i in tmp do
39966: LD_ADDR_VAR 0 8
39970: PUSH
39971: LD_VAR 0 19
39975: PUSH
39976: FOR_IN
39977: IFFALSE 40010
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39979: LD_VAR 0 8
39983: PPUSH
39984: CALL_OW 250
39988: PPUSH
39989: LD_VAR 0 8
39993: PPUSH
39994: CALL_OW 251
39998: PPUSH
39999: LD_VAR 0 16
40003: PPUSH
40004: CALL_OW 441
40008: GO 39976
40010: POP
40011: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40012: LD_VAR 0 18
40016: PPUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 30
40022: PUSH
40023: LD_INT 32
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 30
40032: PUSH
40033: LD_INT 33
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL_OW 72
40049: IFFALSE 40137
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40051: LD_ADDR_VAR 0 8
40055: PUSH
40056: LD_VAR 0 18
40060: PPUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 30
40066: PUSH
40067: LD_INT 32
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 30
40076: PUSH
40077: LD_INT 33
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: PPUSH
40089: CALL_OW 72
40093: PUSH
40094: FOR_IN
40095: IFFALSE 40135
// begin if not GetBWeapon ( i ) then
40097: LD_VAR 0 8
40101: PPUSH
40102: CALL_OW 269
40106: NOT
40107: IFFALSE 40133
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40109: LD_VAR 0 8
40113: PPUSH
40114: LD_VAR 0 8
40118: PPUSH
40119: LD_VAR 0 2
40123: PPUSH
40124: CALL 41383 0 2
40128: PPUSH
40129: CALL_OW 431
// end ;
40133: GO 40094
40135: POP
40136: POP
// end ; for i = 1 to personel do
40137: LD_ADDR_VAR 0 8
40141: PUSH
40142: DOUBLE
40143: LD_INT 1
40145: DEC
40146: ST_TO_ADDR
40147: LD_VAR 0 6
40151: PUSH
40152: FOR_TO
40153: IFFALSE 41217
// begin if i > 4 then
40155: LD_VAR 0 8
40159: PUSH
40160: LD_INT 4
40162: GREATER
40163: IFFALSE 40167
// break ;
40165: GO 41217
// case i of 1 :
40167: LD_VAR 0 8
40171: PUSH
40172: LD_INT 1
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40180
40178: GO 40260
40180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40181: LD_ADDR_VAR 0 12
40185: PUSH
40186: LD_VAR 0 18
40190: PPUSH
40191: LD_INT 22
40193: PUSH
40194: LD_VAR 0 16
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 58
40205: PUSH
40206: EMPTY
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 30
40214: PUSH
40215: LD_INT 32
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 30
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 30
40234: PUSH
40235: LD_INT 5
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 72
40257: ST_TO_ADDR
40258: GO 40482
40260: LD_INT 2
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40330
40268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40269: LD_ADDR_VAR 0 12
40273: PUSH
40274: LD_VAR 0 18
40278: PPUSH
40279: LD_INT 22
40281: PUSH
40282: LD_VAR 0 16
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 30
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 30
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PPUSH
40323: CALL_OW 72
40327: ST_TO_ADDR
40328: GO 40482
40330: LD_INT 3
40332: DOUBLE
40333: EQUAL
40334: IFTRUE 40338
40336: GO 40400
40338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40339: LD_ADDR_VAR 0 12
40343: PUSH
40344: LD_VAR 0 18
40348: PPUSH
40349: LD_INT 22
40351: PUSH
40352: LD_VAR 0 16
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 30
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 30
40376: PUSH
40377: LD_INT 3
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PPUSH
40393: CALL_OW 72
40397: ST_TO_ADDR
40398: GO 40482
40400: LD_INT 4
40402: DOUBLE
40403: EQUAL
40404: IFTRUE 40408
40406: GO 40481
40408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40409: LD_ADDR_VAR 0 12
40413: PUSH
40414: LD_VAR 0 18
40418: PPUSH
40419: LD_INT 22
40421: PUSH
40422: LD_VAR 0 16
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 30
40436: PUSH
40437: LD_INT 6
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 30
40446: PUSH
40447: LD_INT 7
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 30
40456: PUSH
40457: LD_INT 8
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PPUSH
40474: CALL_OW 72
40478: ST_TO_ADDR
40479: GO 40482
40481: POP
// if i = 1 then
40482: LD_VAR 0 8
40486: PUSH
40487: LD_INT 1
40489: EQUAL
40490: IFFALSE 40601
// begin tmp := [ ] ;
40492: LD_ADDR_VAR 0 19
40496: PUSH
40497: EMPTY
40498: ST_TO_ADDR
// for j in f do
40499: LD_ADDR_VAR 0 9
40503: PUSH
40504: LD_VAR 0 12
40508: PUSH
40509: FOR_IN
40510: IFFALSE 40583
// if GetBType ( j ) = b_bunker then
40512: LD_VAR 0 9
40516: PPUSH
40517: CALL_OW 266
40521: PUSH
40522: LD_INT 32
40524: EQUAL
40525: IFFALSE 40552
// tmp := Insert ( tmp , 1 , j ) else
40527: LD_ADDR_VAR 0 19
40531: PUSH
40532: LD_VAR 0 19
40536: PPUSH
40537: LD_INT 1
40539: PPUSH
40540: LD_VAR 0 9
40544: PPUSH
40545: CALL_OW 2
40549: ST_TO_ADDR
40550: GO 40581
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40552: LD_ADDR_VAR 0 19
40556: PUSH
40557: LD_VAR 0 19
40561: PPUSH
40562: LD_VAR 0 19
40566: PUSH
40567: LD_INT 1
40569: PLUS
40570: PPUSH
40571: LD_VAR 0 9
40575: PPUSH
40576: CALL_OW 2
40580: ST_TO_ADDR
40581: GO 40509
40583: POP
40584: POP
// if tmp then
40585: LD_VAR 0 19
40589: IFFALSE 40601
// f := tmp ;
40591: LD_ADDR_VAR 0 12
40595: PUSH
40596: LD_VAR 0 19
40600: ST_TO_ADDR
// end ; x := personel [ i ] ;
40601: LD_ADDR_VAR 0 13
40605: PUSH
40606: LD_VAR 0 6
40610: PUSH
40611: LD_VAR 0 8
40615: ARRAY
40616: ST_TO_ADDR
// if x = - 1 then
40617: LD_VAR 0 13
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: EQUAL
40626: IFFALSE 40835
// begin for j in f do
40628: LD_ADDR_VAR 0 9
40632: PUSH
40633: LD_VAR 0 12
40637: PUSH
40638: FOR_IN
40639: IFFALSE 40831
// repeat InitHc ;
40641: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40645: LD_VAR 0 9
40649: PPUSH
40650: CALL_OW 266
40654: PUSH
40655: LD_INT 5
40657: EQUAL
40658: IFFALSE 40728
// begin if UnitsInside ( j ) < 3 then
40660: LD_VAR 0 9
40664: PPUSH
40665: CALL_OW 313
40669: PUSH
40670: LD_INT 3
40672: LESS
40673: IFFALSE 40709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40675: LD_INT 0
40677: PPUSH
40678: LD_INT 5
40680: PUSH
40681: LD_INT 8
40683: PUSH
40684: LD_INT 9
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: PUSH
40692: LD_VAR 0 17
40696: ARRAY
40697: PPUSH
40698: LD_VAR 0 4
40702: PPUSH
40703: CALL_OW 380
40707: GO 40726
// PrepareHuman ( false , i , skill ) ;
40709: LD_INT 0
40711: PPUSH
40712: LD_VAR 0 8
40716: PPUSH
40717: LD_VAR 0 4
40721: PPUSH
40722: CALL_OW 380
// end else
40726: GO 40745
// PrepareHuman ( false , i , skill ) ;
40728: LD_INT 0
40730: PPUSH
40731: LD_VAR 0 8
40735: PPUSH
40736: LD_VAR 0 4
40740: PPUSH
40741: CALL_OW 380
// un := CreateHuman ;
40745: LD_ADDR_VAR 0 14
40749: PUSH
40750: CALL_OW 44
40754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40755: LD_ADDR_VAR 0 7
40759: PUSH
40760: LD_VAR 0 7
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: LD_VAR 0 14
40772: PPUSH
40773: CALL_OW 2
40777: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40778: LD_VAR 0 14
40782: PPUSH
40783: LD_VAR 0 9
40787: PPUSH
40788: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40792: LD_VAR 0 9
40796: PPUSH
40797: CALL_OW 313
40801: PUSH
40802: LD_INT 6
40804: EQUAL
40805: PUSH
40806: LD_VAR 0 9
40810: PPUSH
40811: CALL_OW 266
40815: PUSH
40816: LD_INT 32
40818: PUSH
40819: LD_INT 31
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: IN
40826: OR
40827: IFFALSE 40641
40829: GO 40638
40831: POP
40832: POP
// end else
40833: GO 41215
// for j = 1 to x do
40835: LD_ADDR_VAR 0 9
40839: PUSH
40840: DOUBLE
40841: LD_INT 1
40843: DEC
40844: ST_TO_ADDR
40845: LD_VAR 0 13
40849: PUSH
40850: FOR_TO
40851: IFFALSE 41213
// begin InitHc ;
40853: CALL_OW 19
// if not f then
40857: LD_VAR 0 12
40861: NOT
40862: IFFALSE 40951
// begin PrepareHuman ( false , i , skill ) ;
40864: LD_INT 0
40866: PPUSH
40867: LD_VAR 0 8
40871: PPUSH
40872: LD_VAR 0 4
40876: PPUSH
40877: CALL_OW 380
// un := CreateHuman ;
40881: LD_ADDR_VAR 0 14
40885: PUSH
40886: CALL_OW 44
40890: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_VAR 0 7
40900: PPUSH
40901: LD_INT 1
40903: PPUSH
40904: LD_VAR 0 14
40908: PPUSH
40909: CALL_OW 2
40913: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40914: LD_VAR 0 14
40918: PPUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 250
40928: PPUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 251
40938: PPUSH
40939: LD_INT 10
40941: PPUSH
40942: LD_INT 0
40944: PPUSH
40945: CALL_OW 50
// continue ;
40949: GO 40850
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40951: LD_VAR 0 12
40955: PUSH
40956: LD_INT 1
40958: ARRAY
40959: PPUSH
40960: CALL_OW 313
40964: PUSH
40965: LD_VAR 0 12
40969: PUSH
40970: LD_INT 1
40972: ARRAY
40973: PPUSH
40974: CALL_OW 266
40978: PUSH
40979: LD_INT 32
40981: PUSH
40982: LD_INT 31
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: IN
40989: AND
40990: PUSH
40991: LD_VAR 0 12
40995: PUSH
40996: LD_INT 1
40998: ARRAY
40999: PPUSH
41000: CALL_OW 313
41004: PUSH
41005: LD_INT 6
41007: EQUAL
41008: OR
41009: IFFALSE 41029
// f := Delete ( f , 1 ) ;
41011: LD_ADDR_VAR 0 12
41015: PUSH
41016: LD_VAR 0 12
41020: PPUSH
41021: LD_INT 1
41023: PPUSH
41024: CALL_OW 3
41028: ST_TO_ADDR
// if not f then
41029: LD_VAR 0 12
41033: NOT
41034: IFFALSE 41052
// begin x := x + 2 ;
41036: LD_ADDR_VAR 0 13
41040: PUSH
41041: LD_VAR 0 13
41045: PUSH
41046: LD_INT 2
41048: PLUS
41049: ST_TO_ADDR
// continue ;
41050: GO 40850
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41052: LD_VAR 0 12
41056: PUSH
41057: LD_INT 1
41059: ARRAY
41060: PPUSH
41061: CALL_OW 266
41065: PUSH
41066: LD_INT 5
41068: EQUAL
41069: IFFALSE 41143
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41071: LD_VAR 0 12
41075: PUSH
41076: LD_INT 1
41078: ARRAY
41079: PPUSH
41080: CALL_OW 313
41084: PUSH
41085: LD_INT 3
41087: LESS
41088: IFFALSE 41124
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41090: LD_INT 0
41092: PPUSH
41093: LD_INT 5
41095: PUSH
41096: LD_INT 8
41098: PUSH
41099: LD_INT 9
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: PUSH
41107: LD_VAR 0 17
41111: ARRAY
41112: PPUSH
41113: LD_VAR 0 4
41117: PPUSH
41118: CALL_OW 380
41122: GO 41141
// PrepareHuman ( false , i , skill ) ;
41124: LD_INT 0
41126: PPUSH
41127: LD_VAR 0 8
41131: PPUSH
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL_OW 380
// end else
41141: GO 41160
// PrepareHuman ( false , i , skill ) ;
41143: LD_INT 0
41145: PPUSH
41146: LD_VAR 0 8
41150: PPUSH
41151: LD_VAR 0 4
41155: PPUSH
41156: CALL_OW 380
// un := CreateHuman ;
41160: LD_ADDR_VAR 0 14
41164: PUSH
41165: CALL_OW 44
41169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41170: LD_ADDR_VAR 0 7
41174: PUSH
41175: LD_VAR 0 7
41179: PPUSH
41180: LD_INT 1
41182: PPUSH
41183: LD_VAR 0 14
41187: PPUSH
41188: CALL_OW 2
41192: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41193: LD_VAR 0 14
41197: PPUSH
41198: LD_VAR 0 12
41202: PUSH
41203: LD_INT 1
41205: ARRAY
41206: PPUSH
41207: CALL_OW 52
// end ;
41211: GO 40850
41213: POP
41214: POP
// end ;
41215: GO 40152
41217: POP
41218: POP
// result := result ^ buildings ;
41219: LD_ADDR_VAR 0 7
41223: PUSH
41224: LD_VAR 0 7
41228: PUSH
41229: LD_VAR 0 18
41233: ADD
41234: ST_TO_ADDR
// end else
41235: GO 41378
// begin for i = 1 to personel do
41237: LD_ADDR_VAR 0 8
41241: PUSH
41242: DOUBLE
41243: LD_INT 1
41245: DEC
41246: ST_TO_ADDR
41247: LD_VAR 0 6
41251: PUSH
41252: FOR_TO
41253: IFFALSE 41376
// begin if i > 4 then
41255: LD_VAR 0 8
41259: PUSH
41260: LD_INT 4
41262: GREATER
41263: IFFALSE 41267
// break ;
41265: GO 41376
// x := personel [ i ] ;
41267: LD_ADDR_VAR 0 13
41271: PUSH
41272: LD_VAR 0 6
41276: PUSH
41277: LD_VAR 0 8
41281: ARRAY
41282: ST_TO_ADDR
// if x = - 1 then
41283: LD_VAR 0 13
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: EQUAL
41292: IFFALSE 41296
// continue ;
41294: GO 41252
// PrepareHuman ( false , i , skill ) ;
41296: LD_INT 0
41298: PPUSH
41299: LD_VAR 0 8
41303: PPUSH
41304: LD_VAR 0 4
41308: PPUSH
41309: CALL_OW 380
// un := CreateHuman ;
41313: LD_ADDR_VAR 0 14
41317: PUSH
41318: CALL_OW 44
41322: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41323: LD_VAR 0 14
41327: PPUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL_OW 250
41337: PPUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 251
41347: PPUSH
41348: LD_INT 10
41350: PPUSH
41351: LD_INT 0
41353: PPUSH
41354: CALL_OW 50
// result := result ^ un ;
41358: LD_ADDR_VAR 0 7
41362: PUSH
41363: LD_VAR 0 7
41367: PUSH
41368: LD_VAR 0 14
41372: ADD
41373: ST_TO_ADDR
// end ;
41374: GO 41252
41376: POP
41377: POP
// end ; end ;
41378: LD_VAR 0 7
41382: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41383: LD_INT 0
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
// result := false ;
41401: LD_ADDR_VAR 0 3
41405: PUSH
41406: LD_INT 0
41408: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41409: LD_VAR 0 1
41413: NOT
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 266
41424: PUSH
41425: LD_INT 32
41427: PUSH
41428: LD_INT 33
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: IN
41435: NOT
41436: OR
41437: IFFALSE 41441
// exit ;
41439: GO 42550
// nat := GetNation ( tower ) ;
41441: LD_ADDR_VAR 0 12
41445: PUSH
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 248
41455: ST_TO_ADDR
// side := GetSide ( tower ) ;
41456: LD_ADDR_VAR 0 16
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: CALL_OW 255
41470: ST_TO_ADDR
// x := GetX ( tower ) ;
41471: LD_ADDR_VAR 0 10
41475: PUSH
41476: LD_VAR 0 1
41480: PPUSH
41481: CALL_OW 250
41485: ST_TO_ADDR
// y := GetY ( tower ) ;
41486: LD_ADDR_VAR 0 11
41490: PUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: CALL_OW 251
41500: ST_TO_ADDR
// if not x or not y then
41501: LD_VAR 0 10
41505: NOT
41506: PUSH
41507: LD_VAR 0 11
41511: NOT
41512: OR
41513: IFFALSE 41517
// exit ;
41515: GO 42550
// weapon := 0 ;
41517: LD_ADDR_VAR 0 18
41521: PUSH
41522: LD_INT 0
41524: ST_TO_ADDR
// fac_list := [ ] ;
41525: LD_ADDR_VAR 0 17
41529: PUSH
41530: EMPTY
41531: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41532: LD_ADDR_VAR 0 6
41536: PUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: CALL_OW 274
41546: PPUSH
41547: LD_VAR 0 2
41551: PPUSH
41552: LD_INT 0
41554: PPUSH
41555: CALL 39121 0 3
41559: PPUSH
41560: LD_INT 30
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PPUSH
41570: CALL_OW 72
41574: ST_TO_ADDR
// if not factories then
41575: LD_VAR 0 6
41579: NOT
41580: IFFALSE 41584
// exit ;
41582: GO 42550
// for i in factories do
41584: LD_ADDR_VAR 0 8
41588: PUSH
41589: LD_VAR 0 6
41593: PUSH
41594: FOR_IN
41595: IFFALSE 41620
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41597: LD_ADDR_VAR 0 17
41601: PUSH
41602: LD_VAR 0 17
41606: PUSH
41607: LD_VAR 0 8
41611: PPUSH
41612: CALL_OW 478
41616: UNION
41617: ST_TO_ADDR
41618: GO 41594
41620: POP
41621: POP
// if not fac_list then
41622: LD_VAR 0 17
41626: NOT
41627: IFFALSE 41631
// exit ;
41629: GO 42550
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41631: LD_ADDR_VAR 0 5
41635: PUSH
41636: LD_INT 4
41638: PUSH
41639: LD_INT 5
41641: PUSH
41642: LD_INT 9
41644: PUSH
41645: LD_INT 10
41647: PUSH
41648: LD_INT 6
41650: PUSH
41651: LD_INT 7
41653: PUSH
41654: LD_INT 11
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 27
41668: PUSH
41669: LD_INT 28
41671: PUSH
41672: LD_INT 26
41674: PUSH
41675: LD_INT 30
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 43
41686: PUSH
41687: LD_INT 44
41689: PUSH
41690: LD_INT 46
41692: PUSH
41693: LD_INT 45
41695: PUSH
41696: LD_INT 47
41698: PUSH
41699: LD_INT 49
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: PUSH
41715: LD_VAR 0 12
41719: ARRAY
41720: ST_TO_ADDR
// list := list isect fac_list ;
41721: LD_ADDR_VAR 0 5
41725: PUSH
41726: LD_VAR 0 5
41730: PUSH
41731: LD_VAR 0 17
41735: ISECT
41736: ST_TO_ADDR
// if not list then
41737: LD_VAR 0 5
41741: NOT
41742: IFFALSE 41746
// exit ;
41744: GO 42550
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41746: LD_VAR 0 12
41750: PUSH
41751: LD_INT 3
41753: EQUAL
41754: PUSH
41755: LD_INT 49
41757: PUSH
41758: LD_VAR 0 5
41762: IN
41763: AND
41764: PUSH
41765: LD_INT 31
41767: PPUSH
41768: LD_VAR 0 16
41772: PPUSH
41773: CALL_OW 321
41777: PUSH
41778: LD_INT 2
41780: EQUAL
41781: AND
41782: IFFALSE 41842
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41784: LD_INT 22
41786: PUSH
41787: LD_VAR 0 16
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 35
41798: PUSH
41799: LD_INT 49
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 91
41808: PUSH
41809: LD_VAR 0 1
41813: PUSH
41814: LD_INT 10
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: PPUSH
41827: CALL_OW 69
41831: NOT
41832: IFFALSE 41842
// weapon := ru_time_lapser ;
41834: LD_ADDR_VAR 0 18
41838: PUSH
41839: LD_INT 49
41841: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41842: LD_VAR 0 12
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: IN
41857: PUSH
41858: LD_INT 11
41860: PUSH
41861: LD_VAR 0 5
41865: IN
41866: PUSH
41867: LD_INT 30
41869: PUSH
41870: LD_VAR 0 5
41874: IN
41875: OR
41876: AND
41877: PUSH
41878: LD_INT 6
41880: PPUSH
41881: LD_VAR 0 16
41885: PPUSH
41886: CALL_OW 321
41890: PUSH
41891: LD_INT 2
41893: EQUAL
41894: AND
41895: IFFALSE 42060
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41897: LD_INT 22
41899: PUSH
41900: LD_VAR 0 16
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: LD_INT 35
41914: PUSH
41915: LD_INT 11
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 35
41924: PUSH
41925: LD_INT 30
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 91
41939: PUSH
41940: LD_VAR 0 1
41944: PUSH
41945: LD_INT 18
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: PPUSH
41958: CALL_OW 69
41962: NOT
41963: PUSH
41964: LD_INT 22
41966: PUSH
41967: LD_VAR 0 16
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 30
41981: PUSH
41982: LD_INT 32
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 30
41991: PUSH
41992: LD_INT 33
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 91
42006: PUSH
42007: LD_VAR 0 1
42011: PUSH
42012: LD_INT 12
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: PPUSH
42028: CALL_OW 69
42032: PUSH
42033: LD_INT 2
42035: GREATER
42036: AND
42037: IFFALSE 42060
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42039: LD_ADDR_VAR 0 18
42043: PUSH
42044: LD_INT 11
42046: PUSH
42047: LD_INT 30
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_VAR 0 12
42058: ARRAY
42059: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42060: LD_VAR 0 18
42064: NOT
42065: PUSH
42066: LD_INT 40
42068: PPUSH
42069: LD_VAR 0 16
42073: PPUSH
42074: CALL_OW 321
42078: PUSH
42079: LD_INT 2
42081: EQUAL
42082: AND
42083: PUSH
42084: LD_INT 7
42086: PUSH
42087: LD_VAR 0 5
42091: IN
42092: PUSH
42093: LD_INT 28
42095: PUSH
42096: LD_VAR 0 5
42100: IN
42101: OR
42102: PUSH
42103: LD_INT 45
42105: PUSH
42106: LD_VAR 0 5
42110: IN
42111: OR
42112: AND
42113: IFFALSE 42367
// begin hex := GetHexInfo ( x , y ) ;
42115: LD_ADDR_VAR 0 4
42119: PUSH
42120: LD_VAR 0 10
42124: PPUSH
42125: LD_VAR 0 11
42129: PPUSH
42130: CALL_OW 546
42134: ST_TO_ADDR
// if hex [ 1 ] then
42135: LD_VAR 0 4
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: IFFALSE 42147
// exit ;
42145: GO 42550
// height := hex [ 2 ] ;
42147: LD_ADDR_VAR 0 15
42151: PUSH
42152: LD_VAR 0 4
42156: PUSH
42157: LD_INT 2
42159: ARRAY
42160: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42161: LD_ADDR_VAR 0 14
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: LD_INT 5
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// for i in tmp do
42184: LD_ADDR_VAR 0 8
42188: PUSH
42189: LD_VAR 0 14
42193: PUSH
42194: FOR_IN
42195: IFFALSE 42365
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42197: LD_ADDR_VAR 0 9
42201: PUSH
42202: LD_VAR 0 10
42206: PPUSH
42207: LD_VAR 0 8
42211: PPUSH
42212: LD_INT 5
42214: PPUSH
42215: CALL_OW 272
42219: PUSH
42220: LD_VAR 0 11
42224: PPUSH
42225: LD_VAR 0 8
42229: PPUSH
42230: LD_INT 5
42232: PPUSH
42233: CALL_OW 273
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42242: LD_VAR 0 9
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: PPUSH
42251: LD_VAR 0 9
42255: PUSH
42256: LD_INT 2
42258: ARRAY
42259: PPUSH
42260: CALL_OW 488
42264: IFFALSE 42363
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42266: LD_ADDR_VAR 0 4
42270: PUSH
42271: LD_VAR 0 9
42275: PUSH
42276: LD_INT 1
42278: ARRAY
42279: PPUSH
42280: LD_VAR 0 9
42284: PUSH
42285: LD_INT 2
42287: ARRAY
42288: PPUSH
42289: CALL_OW 546
42293: ST_TO_ADDR
// if hex [ 1 ] then
42294: LD_VAR 0 4
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: IFFALSE 42306
// continue ;
42304: GO 42194
// h := hex [ 2 ] ;
42306: LD_ADDR_VAR 0 13
42310: PUSH
42311: LD_VAR 0 4
42315: PUSH
42316: LD_INT 2
42318: ARRAY
42319: ST_TO_ADDR
// if h + 7 < height then
42320: LD_VAR 0 13
42324: PUSH
42325: LD_INT 7
42327: PLUS
42328: PUSH
42329: LD_VAR 0 15
42333: LESS
42334: IFFALSE 42363
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42336: LD_ADDR_VAR 0 18
42340: PUSH
42341: LD_INT 7
42343: PUSH
42344: LD_INT 28
42346: PUSH
42347: LD_INT 45
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: PUSH
42355: LD_VAR 0 12
42359: ARRAY
42360: ST_TO_ADDR
// break ;
42361: GO 42365
// end ; end ; end ;
42363: GO 42194
42365: POP
42366: POP
// end ; if not weapon then
42367: LD_VAR 0 18
42371: NOT
42372: IFFALSE 42432
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42374: LD_ADDR_VAR 0 5
42378: PUSH
42379: LD_VAR 0 5
42383: PUSH
42384: LD_INT 11
42386: PUSH
42387: LD_INT 30
42389: PUSH
42390: LD_INT 49
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: DIFF
42398: ST_TO_ADDR
// if not list then
42399: LD_VAR 0 5
42403: NOT
42404: IFFALSE 42408
// exit ;
42406: GO 42550
// weapon := list [ rand ( 1 , list ) ] ;
42408: LD_ADDR_VAR 0 18
42412: PUSH
42413: LD_VAR 0 5
42417: PUSH
42418: LD_INT 1
42420: PPUSH
42421: LD_VAR 0 5
42425: PPUSH
42426: CALL_OW 12
42430: ARRAY
42431: ST_TO_ADDR
// end ; if weapon then
42432: LD_VAR 0 18
42436: IFFALSE 42550
// begin tmp := CostOfWeapon ( weapon ) ;
42438: LD_ADDR_VAR 0 14
42442: PUSH
42443: LD_VAR 0 18
42447: PPUSH
42448: CALL_OW 451
42452: ST_TO_ADDR
// j := GetBase ( tower ) ;
42453: LD_ADDR_VAR 0 9
42457: PUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: CALL_OW 274
42467: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42468: LD_VAR 0 9
42472: PPUSH
42473: LD_INT 1
42475: PPUSH
42476: CALL_OW 275
42480: PUSH
42481: LD_VAR 0 14
42485: PUSH
42486: LD_INT 1
42488: ARRAY
42489: GREATEREQUAL
42490: PUSH
42491: LD_VAR 0 9
42495: PPUSH
42496: LD_INT 2
42498: PPUSH
42499: CALL_OW 275
42503: PUSH
42504: LD_VAR 0 14
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: GREATEREQUAL
42513: AND
42514: PUSH
42515: LD_VAR 0 9
42519: PPUSH
42520: LD_INT 3
42522: PPUSH
42523: CALL_OW 275
42527: PUSH
42528: LD_VAR 0 14
42532: PUSH
42533: LD_INT 3
42535: ARRAY
42536: GREATEREQUAL
42537: AND
42538: IFFALSE 42550
// result := weapon ;
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: LD_VAR 0 18
42549: ST_TO_ADDR
// end ; end ;
42550: LD_VAR 0 3
42554: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42555: LD_INT 0
42557: PPUSH
42558: PPUSH
// result := true ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 1
42566: ST_TO_ADDR
// if array1 = array2 then
42567: LD_VAR 0 1
42571: PUSH
42572: LD_VAR 0 2
42576: EQUAL
42577: IFFALSE 42637
// begin for i = 1 to array1 do
42579: LD_ADDR_VAR 0 4
42583: PUSH
42584: DOUBLE
42585: LD_INT 1
42587: DEC
42588: ST_TO_ADDR
42589: LD_VAR 0 1
42593: PUSH
42594: FOR_TO
42595: IFFALSE 42633
// if array1 [ i ] <> array2 [ i ] then
42597: LD_VAR 0 1
42601: PUSH
42602: LD_VAR 0 4
42606: ARRAY
42607: PUSH
42608: LD_VAR 0 2
42612: PUSH
42613: LD_VAR 0 4
42617: ARRAY
42618: NONEQUAL
42619: IFFALSE 42631
// begin result := false ;
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_INT 0
42628: ST_TO_ADDR
// break ;
42629: GO 42633
// end ;
42631: GO 42594
42633: POP
42634: POP
// end else
42635: GO 42645
// result := false ;
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 0
42644: ST_TO_ADDR
// end ;
42645: LD_VAR 0 3
42649: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42650: LD_INT 0
42652: PPUSH
42653: PPUSH
// if not array1 or not array2 then
42654: LD_VAR 0 1
42658: NOT
42659: PUSH
42660: LD_VAR 0 2
42664: NOT
42665: OR
42666: IFFALSE 42670
// exit ;
42668: GO 42734
// result := true ;
42670: LD_ADDR_VAR 0 3
42674: PUSH
42675: LD_INT 1
42677: ST_TO_ADDR
// for i = 1 to array1 do
42678: LD_ADDR_VAR 0 4
42682: PUSH
42683: DOUBLE
42684: LD_INT 1
42686: DEC
42687: ST_TO_ADDR
42688: LD_VAR 0 1
42692: PUSH
42693: FOR_TO
42694: IFFALSE 42732
// if array1 [ i ] <> array2 [ i ] then
42696: LD_VAR 0 1
42700: PUSH
42701: LD_VAR 0 4
42705: ARRAY
42706: PUSH
42707: LD_VAR 0 2
42711: PUSH
42712: LD_VAR 0 4
42716: ARRAY
42717: NONEQUAL
42718: IFFALSE 42730
// begin result := false ;
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// break ;
42728: GO 42732
// end ;
42730: GO 42693
42732: POP
42733: POP
// end ;
42734: LD_VAR 0 3
42738: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42739: LD_INT 0
42741: PPUSH
42742: PPUSH
42743: PPUSH
// pom := GetBase ( fac ) ;
42744: LD_ADDR_VAR 0 5
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 274
42758: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42759: LD_ADDR_VAR 0 4
42763: PUSH
42764: LD_VAR 0 2
42768: PUSH
42769: LD_INT 1
42771: ARRAY
42772: PPUSH
42773: LD_VAR 0 2
42777: PUSH
42778: LD_INT 2
42780: ARRAY
42781: PPUSH
42782: LD_VAR 0 2
42786: PUSH
42787: LD_INT 3
42789: ARRAY
42790: PPUSH
42791: LD_VAR 0 2
42795: PUSH
42796: LD_INT 4
42798: ARRAY
42799: PPUSH
42800: CALL_OW 449
42804: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_VAR 0 5
42814: PPUSH
42815: LD_INT 1
42817: PPUSH
42818: CALL_OW 275
42822: PUSH
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: GREATEREQUAL
42832: PUSH
42833: LD_VAR 0 5
42837: PPUSH
42838: LD_INT 2
42840: PPUSH
42841: CALL_OW 275
42845: PUSH
42846: LD_VAR 0 4
42850: PUSH
42851: LD_INT 2
42853: ARRAY
42854: GREATEREQUAL
42855: AND
42856: PUSH
42857: LD_VAR 0 5
42861: PPUSH
42862: LD_INT 3
42864: PPUSH
42865: CALL_OW 275
42869: PUSH
42870: LD_VAR 0 4
42874: PUSH
42875: LD_INT 3
42877: ARRAY
42878: GREATEREQUAL
42879: AND
42880: ST_TO_ADDR
// end ;
42881: LD_VAR 0 3
42885: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42886: LD_INT 0
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
// pom := GetBase ( building ) ;
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 274
42906: ST_TO_ADDR
// if not pom then
42907: LD_VAR 0 3
42911: NOT
42912: IFFALSE 42916
// exit ;
42914: GO 43086
// btype := GetBType ( building ) ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 266
42930: ST_TO_ADDR
// if btype = b_armoury then
42931: LD_VAR 0 5
42935: PUSH
42936: LD_INT 4
42938: EQUAL
42939: IFFALSE 42949
// btype := b_barracks ;
42941: LD_ADDR_VAR 0 5
42945: PUSH
42946: LD_INT 5
42948: ST_TO_ADDR
// if btype = b_depot then
42949: LD_VAR 0 5
42953: PUSH
42954: LD_INT 0
42956: EQUAL
42957: IFFALSE 42967
// btype := b_warehouse ;
42959: LD_ADDR_VAR 0 5
42963: PUSH
42964: LD_INT 1
42966: ST_TO_ADDR
// if btype = b_workshop then
42967: LD_VAR 0 5
42971: PUSH
42972: LD_INT 2
42974: EQUAL
42975: IFFALSE 42985
// btype := b_factory ;
42977: LD_ADDR_VAR 0 5
42981: PUSH
42982: LD_INT 3
42984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42985: LD_ADDR_VAR 0 4
42989: PUSH
42990: LD_VAR 0 5
42994: PPUSH
42995: LD_VAR 0 1
42999: PPUSH
43000: CALL_OW 248
43004: PPUSH
43005: CALL_OW 450
43009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43010: LD_ADDR_VAR 0 2
43014: PUSH
43015: LD_VAR 0 3
43019: PPUSH
43020: LD_INT 1
43022: PPUSH
43023: CALL_OW 275
43027: PUSH
43028: LD_VAR 0 4
43032: PUSH
43033: LD_INT 1
43035: ARRAY
43036: GREATEREQUAL
43037: PUSH
43038: LD_VAR 0 3
43042: PPUSH
43043: LD_INT 2
43045: PPUSH
43046: CALL_OW 275
43050: PUSH
43051: LD_VAR 0 4
43055: PUSH
43056: LD_INT 2
43058: ARRAY
43059: GREATEREQUAL
43060: AND
43061: PUSH
43062: LD_VAR 0 3
43066: PPUSH
43067: LD_INT 3
43069: PPUSH
43070: CALL_OW 275
43074: PUSH
43075: LD_VAR 0 4
43079: PUSH
43080: LD_INT 3
43082: ARRAY
43083: GREATEREQUAL
43084: AND
43085: ST_TO_ADDR
// end ;
43086: LD_VAR 0 2
43090: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43091: LD_INT 0
43093: PPUSH
43094: PPUSH
43095: PPUSH
// pom := GetBase ( building ) ;
43096: LD_ADDR_VAR 0 4
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 274
43110: ST_TO_ADDR
// if not pom then
43111: LD_VAR 0 4
43115: NOT
43116: IFFALSE 43120
// exit ;
43118: GO 43221
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43120: LD_ADDR_VAR 0 5
43124: PUSH
43125: LD_VAR 0 2
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 248
43139: PPUSH
43140: CALL_OW 450
43144: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_VAR 0 4
43154: PPUSH
43155: LD_INT 1
43157: PPUSH
43158: CALL_OW 275
43162: PUSH
43163: LD_VAR 0 5
43167: PUSH
43168: LD_INT 1
43170: ARRAY
43171: GREATEREQUAL
43172: PUSH
43173: LD_VAR 0 4
43177: PPUSH
43178: LD_INT 2
43180: PPUSH
43181: CALL_OW 275
43185: PUSH
43186: LD_VAR 0 5
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: GREATEREQUAL
43195: AND
43196: PUSH
43197: LD_VAR 0 4
43201: PPUSH
43202: LD_INT 3
43204: PPUSH
43205: CALL_OW 275
43209: PUSH
43210: LD_VAR 0 5
43214: PUSH
43215: LD_INT 3
43217: ARRAY
43218: GREATEREQUAL
43219: AND
43220: ST_TO_ADDR
// end ;
43221: LD_VAR 0 3
43225: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43226: LD_INT 0
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
// result := false ;
43239: LD_ADDR_VAR 0 8
43243: PUSH
43244: LD_INT 0
43246: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43247: LD_VAR 0 5
43251: NOT
43252: PUSH
43253: LD_VAR 0 1
43257: NOT
43258: OR
43259: PUSH
43260: LD_VAR 0 2
43264: NOT
43265: OR
43266: PUSH
43267: LD_VAR 0 3
43271: NOT
43272: OR
43273: IFFALSE 43277
// exit ;
43275: GO 44091
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43277: LD_ADDR_VAR 0 14
43281: PUSH
43282: LD_VAR 0 1
43286: PPUSH
43287: LD_VAR 0 2
43291: PPUSH
43292: LD_VAR 0 3
43296: PPUSH
43297: LD_VAR 0 4
43301: PPUSH
43302: LD_VAR 0 5
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PPUSH
43311: CALL_OW 248
43315: PPUSH
43316: LD_INT 0
43318: PPUSH
43319: CALL 45328 0 6
43323: ST_TO_ADDR
// if not hexes then
43324: LD_VAR 0 14
43328: NOT
43329: IFFALSE 43333
// exit ;
43331: GO 44091
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43333: LD_ADDR_VAR 0 17
43337: PUSH
43338: LD_VAR 0 5
43342: PPUSH
43343: LD_INT 22
43345: PUSH
43346: LD_VAR 0 13
43350: PPUSH
43351: CALL_OW 255
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 30
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 30
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PPUSH
43392: CALL_OW 72
43396: ST_TO_ADDR
// for i = 1 to hexes do
43397: LD_ADDR_VAR 0 9
43401: PUSH
43402: DOUBLE
43403: LD_INT 1
43405: DEC
43406: ST_TO_ADDR
43407: LD_VAR 0 14
43411: PUSH
43412: FOR_TO
43413: IFFALSE 44089
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43415: LD_ADDR_VAR 0 13
43419: PUSH
43420: LD_VAR 0 14
43424: PUSH
43425: LD_VAR 0 9
43429: ARRAY
43430: PUSH
43431: LD_INT 1
43433: ARRAY
43434: PPUSH
43435: LD_VAR 0 14
43439: PUSH
43440: LD_VAR 0 9
43444: ARRAY
43445: PUSH
43446: LD_INT 2
43448: ARRAY
43449: PPUSH
43450: CALL_OW 428
43454: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43455: LD_VAR 0 14
43459: PUSH
43460: LD_VAR 0 9
43464: ARRAY
43465: PUSH
43466: LD_INT 1
43468: ARRAY
43469: PPUSH
43470: LD_VAR 0 14
43474: PUSH
43475: LD_VAR 0 9
43479: ARRAY
43480: PUSH
43481: LD_INT 2
43483: ARRAY
43484: PPUSH
43485: CALL_OW 351
43489: PUSH
43490: LD_VAR 0 14
43494: PUSH
43495: LD_VAR 0 9
43499: ARRAY
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: PPUSH
43505: LD_VAR 0 14
43509: PUSH
43510: LD_VAR 0 9
43514: ARRAY
43515: PUSH
43516: LD_INT 2
43518: ARRAY
43519: PPUSH
43520: CALL_OW 488
43524: NOT
43525: OR
43526: PUSH
43527: LD_VAR 0 13
43531: PPUSH
43532: CALL_OW 247
43536: PUSH
43537: LD_INT 3
43539: EQUAL
43540: OR
43541: IFFALSE 43547
// exit ;
43543: POP
43544: POP
43545: GO 44091
// if not tmp then
43547: LD_VAR 0 13
43551: NOT
43552: IFFALSE 43556
// continue ;
43554: GO 43412
// result := true ;
43556: LD_ADDR_VAR 0 8
43560: PUSH
43561: LD_INT 1
43563: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43564: LD_VAR 0 6
43568: PUSH
43569: LD_VAR 0 13
43573: PPUSH
43574: CALL_OW 247
43578: PUSH
43579: LD_INT 2
43581: EQUAL
43582: AND
43583: PUSH
43584: LD_VAR 0 13
43588: PPUSH
43589: CALL_OW 263
43593: PUSH
43594: LD_INT 1
43596: EQUAL
43597: AND
43598: IFFALSE 43762
// begin if IsDrivenBy ( tmp ) then
43600: LD_VAR 0 13
43604: PPUSH
43605: CALL_OW 311
43609: IFFALSE 43613
// continue ;
43611: GO 43412
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43613: LD_VAR 0 6
43617: PPUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 60
43623: PUSH
43624: EMPTY
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: LD_INT 55
43636: PUSH
43637: EMPTY
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PPUSH
43648: CALL_OW 72
43652: IFFALSE 43760
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43654: LD_ADDR_VAR 0 18
43658: PUSH
43659: LD_VAR 0 6
43663: PPUSH
43664: LD_INT 3
43666: PUSH
43667: LD_INT 60
43669: PUSH
43670: EMPTY
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 55
43682: PUSH
43683: EMPTY
43684: LIST
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PPUSH
43694: CALL_OW 72
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: ST_TO_ADDR
// if IsInUnit ( driver ) then
43703: LD_VAR 0 18
43707: PPUSH
43708: CALL_OW 310
43712: IFFALSE 43723
// ComExit ( driver ) ;
43714: LD_VAR 0 18
43718: PPUSH
43719: CALL 69033 0 1
// AddComEnterUnit ( driver , tmp ) ;
43723: LD_VAR 0 18
43727: PPUSH
43728: LD_VAR 0 13
43732: PPUSH
43733: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43737: LD_VAR 0 18
43741: PPUSH
43742: LD_VAR 0 7
43746: PPUSH
43747: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43751: LD_VAR 0 18
43755: PPUSH
43756: CALL_OW 181
// end ; continue ;
43760: GO 43412
// end ; if not cleaners or not tmp in cleaners then
43762: LD_VAR 0 6
43766: NOT
43767: PUSH
43768: LD_VAR 0 13
43772: PUSH
43773: LD_VAR 0 6
43777: IN
43778: NOT
43779: OR
43780: IFFALSE 44087
// begin if dep then
43782: LD_VAR 0 17
43786: IFFALSE 43922
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43788: LD_ADDR_VAR 0 16
43792: PUSH
43793: LD_VAR 0 17
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PPUSH
43802: CALL_OW 250
43806: PPUSH
43807: LD_VAR 0 17
43811: PUSH
43812: LD_INT 1
43814: ARRAY
43815: PPUSH
43816: CALL_OW 254
43820: PPUSH
43821: LD_INT 5
43823: PPUSH
43824: CALL_OW 272
43828: PUSH
43829: LD_VAR 0 17
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 251
43842: PPUSH
43843: LD_VAR 0 17
43847: PUSH
43848: LD_INT 1
43850: ARRAY
43851: PPUSH
43852: CALL_OW 254
43856: PPUSH
43857: LD_INT 5
43859: PPUSH
43860: CALL_OW 273
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43869: LD_VAR 0 16
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: PPUSH
43878: LD_VAR 0 16
43882: PUSH
43883: LD_INT 2
43885: ARRAY
43886: PPUSH
43887: CALL_OW 488
43891: IFFALSE 43922
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43893: LD_VAR 0 13
43897: PPUSH
43898: LD_VAR 0 16
43902: PUSH
43903: LD_INT 1
43905: ARRAY
43906: PPUSH
43907: LD_VAR 0 16
43911: PUSH
43912: LD_INT 2
43914: ARRAY
43915: PPUSH
43916: CALL_OW 111
// continue ;
43920: GO 43412
// end ; end ; r := GetDir ( tmp ) ;
43922: LD_ADDR_VAR 0 15
43926: PUSH
43927: LD_VAR 0 13
43931: PPUSH
43932: CALL_OW 254
43936: ST_TO_ADDR
// if r = 5 then
43937: LD_VAR 0 15
43941: PUSH
43942: LD_INT 5
43944: EQUAL
43945: IFFALSE 43955
// r := 0 ;
43947: LD_ADDR_VAR 0 15
43951: PUSH
43952: LD_INT 0
43954: ST_TO_ADDR
// for j = r to 5 do
43955: LD_ADDR_VAR 0 10
43959: PUSH
43960: DOUBLE
43961: LD_VAR 0 15
43965: DEC
43966: ST_TO_ADDR
43967: LD_INT 5
43969: PUSH
43970: FOR_TO
43971: IFFALSE 44085
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43973: LD_ADDR_VAR 0 11
43977: PUSH
43978: LD_VAR 0 13
43982: PPUSH
43983: CALL_OW 250
43987: PPUSH
43988: LD_VAR 0 10
43992: PPUSH
43993: LD_INT 2
43995: PPUSH
43996: CALL_OW 272
44000: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44001: LD_ADDR_VAR 0 12
44005: PUSH
44006: LD_VAR 0 13
44010: PPUSH
44011: CALL_OW 251
44015: PPUSH
44016: LD_VAR 0 10
44020: PPUSH
44021: LD_INT 2
44023: PPUSH
44024: CALL_OW 273
44028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44029: LD_VAR 0 11
44033: PPUSH
44034: LD_VAR 0 12
44038: PPUSH
44039: CALL_OW 488
44043: PUSH
44044: LD_VAR 0 11
44048: PPUSH
44049: LD_VAR 0 12
44053: PPUSH
44054: CALL_OW 428
44058: NOT
44059: AND
44060: IFFALSE 44083
// begin ComMoveXY ( tmp , _x , _y ) ;
44062: LD_VAR 0 13
44066: PPUSH
44067: LD_VAR 0 11
44071: PPUSH
44072: LD_VAR 0 12
44076: PPUSH
44077: CALL_OW 111
// break ;
44081: GO 44085
// end ; end ;
44083: GO 43970
44085: POP
44086: POP
// end ; end ;
44087: GO 43412
44089: POP
44090: POP
// end ;
44091: LD_VAR 0 8
44095: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44096: LD_INT 0
44098: PPUSH
// result := true ;
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 1
44106: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44107: LD_VAR 0 2
44111: PUSH
44112: LD_INT 24
44114: DOUBLE
44115: EQUAL
44116: IFTRUE 44126
44118: LD_INT 33
44120: DOUBLE
44121: EQUAL
44122: IFTRUE 44126
44124: GO 44151
44126: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_INT 32
44134: PPUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 321
44144: PUSH
44145: LD_INT 2
44147: EQUAL
44148: ST_TO_ADDR
44149: GO 44471
44151: LD_INT 20
44153: DOUBLE
44154: EQUAL
44155: IFTRUE 44159
44157: GO 44184
44159: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: LD_INT 6
44167: PPUSH
44168: LD_VAR 0 1
44172: PPUSH
44173: CALL_OW 321
44177: PUSH
44178: LD_INT 2
44180: EQUAL
44181: ST_TO_ADDR
44182: GO 44471
44184: LD_INT 22
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44198
44190: LD_INT 36
44192: DOUBLE
44193: EQUAL
44194: IFTRUE 44198
44196: GO 44223
44198: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44199: LD_ADDR_VAR 0 3
44203: PUSH
44204: LD_INT 15
44206: PPUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 321
44216: PUSH
44217: LD_INT 2
44219: EQUAL
44220: ST_TO_ADDR
44221: GO 44471
44223: LD_INT 30
44225: DOUBLE
44226: EQUAL
44227: IFTRUE 44231
44229: GO 44256
44231: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44232: LD_ADDR_VAR 0 3
44236: PUSH
44237: LD_INT 20
44239: PPUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 321
44249: PUSH
44250: LD_INT 2
44252: EQUAL
44253: ST_TO_ADDR
44254: GO 44471
44256: LD_INT 28
44258: DOUBLE
44259: EQUAL
44260: IFTRUE 44270
44262: LD_INT 21
44264: DOUBLE
44265: EQUAL
44266: IFTRUE 44270
44268: GO 44295
44270: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 21
44278: PPUSH
44279: LD_VAR 0 1
44283: PPUSH
44284: CALL_OW 321
44288: PUSH
44289: LD_INT 2
44291: EQUAL
44292: ST_TO_ADDR
44293: GO 44471
44295: LD_INT 16
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44330
44303: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_EXP 39
44313: PPUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 321
44323: PUSH
44324: LD_INT 2
44326: EQUAL
44327: ST_TO_ADDR
44328: GO 44471
44330: LD_INT 19
44332: DOUBLE
44333: EQUAL
44334: IFTRUE 44344
44336: LD_INT 23
44338: DOUBLE
44339: EQUAL
44340: IFTRUE 44344
44342: GO 44371
44344: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44345: LD_ADDR_VAR 0 3
44349: PUSH
44350: LD_EXP 38
44354: PPUSH
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 321
44364: PUSH
44365: LD_INT 2
44367: EQUAL
44368: ST_TO_ADDR
44369: GO 44471
44371: LD_INT 17
44373: DOUBLE
44374: EQUAL
44375: IFTRUE 44379
44377: GO 44404
44379: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44380: LD_ADDR_VAR 0 3
44384: PUSH
44385: LD_INT 39
44387: PPUSH
44388: LD_VAR 0 1
44392: PPUSH
44393: CALL_OW 321
44397: PUSH
44398: LD_INT 2
44400: EQUAL
44401: ST_TO_ADDR
44402: GO 44471
44404: LD_INT 18
44406: DOUBLE
44407: EQUAL
44408: IFTRUE 44412
44410: GO 44437
44412: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44413: LD_ADDR_VAR 0 3
44417: PUSH
44418: LD_INT 40
44420: PPUSH
44421: LD_VAR 0 1
44425: PPUSH
44426: CALL_OW 321
44430: PUSH
44431: LD_INT 2
44433: EQUAL
44434: ST_TO_ADDR
44435: GO 44471
44437: LD_INT 27
44439: DOUBLE
44440: EQUAL
44441: IFTRUE 44445
44443: GO 44470
44445: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44446: LD_ADDR_VAR 0 3
44450: PUSH
44451: LD_INT 35
44453: PPUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: CALL_OW 321
44463: PUSH
44464: LD_INT 2
44466: EQUAL
44467: ST_TO_ADDR
44468: GO 44471
44470: POP
// end ;
44471: LD_VAR 0 3
44475: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44476: LD_INT 0
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
// result := false ;
44489: LD_ADDR_VAR 0 6
44493: PUSH
44494: LD_INT 0
44496: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44497: LD_VAR 0 1
44501: NOT
44502: PUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 266
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: IN
44523: NOT
44524: OR
44525: PUSH
44526: LD_VAR 0 2
44530: NOT
44531: OR
44532: PUSH
44533: LD_VAR 0 5
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: LD_INT 4
44552: PUSH
44553: LD_INT 5
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: IN
44564: NOT
44565: OR
44566: PUSH
44567: LD_VAR 0 3
44571: PPUSH
44572: LD_VAR 0 4
44576: PPUSH
44577: CALL_OW 488
44581: NOT
44582: OR
44583: IFFALSE 44587
// exit ;
44585: GO 45323
// side := GetSide ( depot ) ;
44587: LD_ADDR_VAR 0 9
44591: PUSH
44592: LD_VAR 0 1
44596: PPUSH
44597: CALL_OW 255
44601: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44602: LD_VAR 0 9
44606: PPUSH
44607: LD_VAR 0 2
44611: PPUSH
44612: CALL 44096 0 2
44616: NOT
44617: IFFALSE 44621
// exit ;
44619: GO 45323
// pom := GetBase ( depot ) ;
44621: LD_ADDR_VAR 0 10
44625: PUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: CALL_OW 274
44635: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44636: LD_ADDR_VAR 0 11
44640: PUSH
44641: LD_VAR 0 2
44645: PPUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL_OW 248
44655: PPUSH
44656: CALL_OW 450
44660: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44661: LD_VAR 0 10
44665: PPUSH
44666: LD_INT 1
44668: PPUSH
44669: CALL_OW 275
44673: PUSH
44674: LD_VAR 0 11
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: GREATEREQUAL
44683: PUSH
44684: LD_VAR 0 10
44688: PPUSH
44689: LD_INT 2
44691: PPUSH
44692: CALL_OW 275
44696: PUSH
44697: LD_VAR 0 11
44701: PUSH
44702: LD_INT 2
44704: ARRAY
44705: GREATEREQUAL
44706: AND
44707: PUSH
44708: LD_VAR 0 10
44712: PPUSH
44713: LD_INT 3
44715: PPUSH
44716: CALL_OW 275
44720: PUSH
44721: LD_VAR 0 11
44725: PUSH
44726: LD_INT 3
44728: ARRAY
44729: GREATEREQUAL
44730: AND
44731: NOT
44732: IFFALSE 44736
// exit ;
44734: GO 45323
// if GetBType ( depot ) = b_depot then
44736: LD_VAR 0 1
44740: PPUSH
44741: CALL_OW 266
44745: PUSH
44746: LD_INT 0
44748: EQUAL
44749: IFFALSE 44761
// dist := 28 else
44751: LD_ADDR_VAR 0 14
44755: PUSH
44756: LD_INT 28
44758: ST_TO_ADDR
44759: GO 44769
// dist := 36 ;
44761: LD_ADDR_VAR 0 14
44765: PUSH
44766: LD_INT 36
44768: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44769: LD_VAR 0 1
44773: PPUSH
44774: LD_VAR 0 3
44778: PPUSH
44779: LD_VAR 0 4
44783: PPUSH
44784: CALL_OW 297
44788: PUSH
44789: LD_VAR 0 14
44793: GREATER
44794: IFFALSE 44798
// exit ;
44796: GO 45323
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44798: LD_ADDR_VAR 0 12
44802: PUSH
44803: LD_VAR 0 2
44807: PPUSH
44808: LD_VAR 0 3
44812: PPUSH
44813: LD_VAR 0 4
44817: PPUSH
44818: LD_VAR 0 5
44822: PPUSH
44823: LD_VAR 0 1
44827: PPUSH
44828: CALL_OW 248
44832: PPUSH
44833: LD_INT 0
44835: PPUSH
44836: CALL 45328 0 6
44840: ST_TO_ADDR
// if not hexes then
44841: LD_VAR 0 12
44845: NOT
44846: IFFALSE 44850
// exit ;
44848: GO 45323
// hex := GetHexInfo ( x , y ) ;
44850: LD_ADDR_VAR 0 15
44854: PUSH
44855: LD_VAR 0 3
44859: PPUSH
44860: LD_VAR 0 4
44864: PPUSH
44865: CALL_OW 546
44869: ST_TO_ADDR
// if hex [ 1 ] then
44870: LD_VAR 0 15
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: IFFALSE 44882
// exit ;
44880: GO 45323
// height := hex [ 2 ] ;
44882: LD_ADDR_VAR 0 13
44886: PUSH
44887: LD_VAR 0 15
44891: PUSH
44892: LD_INT 2
44894: ARRAY
44895: ST_TO_ADDR
// for i = 1 to hexes do
44896: LD_ADDR_VAR 0 7
44900: PUSH
44901: DOUBLE
44902: LD_INT 1
44904: DEC
44905: ST_TO_ADDR
44906: LD_VAR 0 12
44910: PUSH
44911: FOR_TO
44912: IFFALSE 45242
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44914: LD_VAR 0 12
44918: PUSH
44919: LD_VAR 0 7
44923: ARRAY
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: PPUSH
44929: LD_VAR 0 12
44933: PUSH
44934: LD_VAR 0 7
44938: ARRAY
44939: PUSH
44940: LD_INT 2
44942: ARRAY
44943: PPUSH
44944: CALL_OW 488
44948: NOT
44949: PUSH
44950: LD_VAR 0 12
44954: PUSH
44955: LD_VAR 0 7
44959: ARRAY
44960: PUSH
44961: LD_INT 1
44963: ARRAY
44964: PPUSH
44965: LD_VAR 0 12
44969: PUSH
44970: LD_VAR 0 7
44974: ARRAY
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PPUSH
44980: CALL_OW 428
44984: PUSH
44985: LD_INT 0
44987: GREATER
44988: OR
44989: PUSH
44990: LD_VAR 0 12
44994: PUSH
44995: LD_VAR 0 7
44999: ARRAY
45000: PUSH
45001: LD_INT 1
45003: ARRAY
45004: PPUSH
45005: LD_VAR 0 12
45009: PUSH
45010: LD_VAR 0 7
45014: ARRAY
45015: PUSH
45016: LD_INT 2
45018: ARRAY
45019: PPUSH
45020: CALL_OW 351
45024: OR
45025: IFFALSE 45031
// exit ;
45027: POP
45028: POP
45029: GO 45323
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45031: LD_ADDR_VAR 0 8
45035: PUSH
45036: LD_VAR 0 12
45040: PUSH
45041: LD_VAR 0 7
45045: ARRAY
45046: PUSH
45047: LD_INT 1
45049: ARRAY
45050: PPUSH
45051: LD_VAR 0 12
45055: PUSH
45056: LD_VAR 0 7
45060: ARRAY
45061: PUSH
45062: LD_INT 2
45064: ARRAY
45065: PPUSH
45066: CALL_OW 546
45070: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45071: LD_VAR 0 8
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PUSH
45080: LD_VAR 0 8
45084: PUSH
45085: LD_INT 2
45087: ARRAY
45088: PUSH
45089: LD_VAR 0 13
45093: PUSH
45094: LD_INT 2
45096: PLUS
45097: GREATER
45098: OR
45099: PUSH
45100: LD_VAR 0 8
45104: PUSH
45105: LD_INT 2
45107: ARRAY
45108: PUSH
45109: LD_VAR 0 13
45113: PUSH
45114: LD_INT 2
45116: MINUS
45117: LESS
45118: OR
45119: PUSH
45120: LD_VAR 0 8
45124: PUSH
45125: LD_INT 3
45127: ARRAY
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 8
45134: PUSH
45135: LD_INT 9
45137: PUSH
45138: LD_INT 10
45140: PUSH
45141: LD_INT 11
45143: PUSH
45144: LD_INT 12
45146: PUSH
45147: LD_INT 13
45149: PUSH
45150: LD_INT 16
45152: PUSH
45153: LD_INT 17
45155: PUSH
45156: LD_INT 18
45158: PUSH
45159: LD_INT 19
45161: PUSH
45162: LD_INT 20
45164: PUSH
45165: LD_INT 21
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: IN
45183: NOT
45184: OR
45185: PUSH
45186: LD_VAR 0 8
45190: PUSH
45191: LD_INT 5
45193: ARRAY
45194: NOT
45195: OR
45196: PUSH
45197: LD_VAR 0 8
45201: PUSH
45202: LD_INT 6
45204: ARRAY
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 7
45214: PUSH
45215: LD_INT 9
45217: PUSH
45218: LD_INT 10
45220: PUSH
45221: LD_INT 11
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: IN
45232: NOT
45233: OR
45234: IFFALSE 45240
// exit ;
45236: POP
45237: POP
45238: GO 45323
// end ;
45240: GO 44911
45242: POP
45243: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45244: LD_VAR 0 9
45248: PPUSH
45249: LD_VAR 0 3
45253: PPUSH
45254: LD_VAR 0 4
45258: PPUSH
45259: LD_INT 20
45261: PPUSH
45262: CALL 37269 0 4
45266: PUSH
45267: LD_INT 4
45269: ARRAY
45270: IFFALSE 45274
// exit ;
45272: GO 45323
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45274: LD_VAR 0 2
45278: PUSH
45279: LD_INT 29
45281: PUSH
45282: LD_INT 30
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: IN
45289: PUSH
45290: LD_VAR 0 3
45294: PPUSH
45295: LD_VAR 0 4
45299: PPUSH
45300: LD_VAR 0 9
45304: PPUSH
45305: CALL_OW 440
45309: NOT
45310: AND
45311: IFFALSE 45315
// exit ;
45313: GO 45323
// result := true ;
45315: LD_ADDR_VAR 0 6
45319: PUSH
45320: LD_INT 1
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 6
45327: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45328: LD_INT 0
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
45337: PPUSH
45338: PPUSH
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
45343: PPUSH
45344: PPUSH
45345: PPUSH
45346: PPUSH
45347: PPUSH
45348: PPUSH
45349: PPUSH
45350: PPUSH
45351: PPUSH
45352: PPUSH
45353: PPUSH
45354: PPUSH
45355: PPUSH
45356: PPUSH
45357: PPUSH
45358: PPUSH
45359: PPUSH
45360: PPUSH
45361: PPUSH
45362: PPUSH
45363: PPUSH
45364: PPUSH
45365: PPUSH
45366: PPUSH
45367: PPUSH
45368: PPUSH
45369: PPUSH
45370: PPUSH
45371: PPUSH
45372: PPUSH
45373: PPUSH
45374: PPUSH
45375: PPUSH
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
// result = [ ] ;
45388: LD_ADDR_VAR 0 7
45392: PUSH
45393: EMPTY
45394: ST_TO_ADDR
// temp_list = [ ] ;
45395: LD_ADDR_VAR 0 9
45399: PUSH
45400: EMPTY
45401: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45402: LD_VAR 0 4
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 4
45421: PUSH
45422: LD_INT 5
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: IN
45433: NOT
45434: PUSH
45435: LD_VAR 0 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: IN
45450: PUSH
45451: LD_VAR 0 5
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: IN
45470: NOT
45471: AND
45472: OR
45473: IFFALSE 45477
// exit ;
45475: GO 63868
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45477: LD_VAR 0 1
45481: PUSH
45482: LD_INT 6
45484: PUSH
45485: LD_INT 7
45487: PUSH
45488: LD_INT 8
45490: PUSH
45491: LD_INT 13
45493: PUSH
45494: LD_INT 12
45496: PUSH
45497: LD_INT 15
45499: PUSH
45500: LD_INT 11
45502: PUSH
45503: LD_INT 14
45505: PUSH
45506: LD_INT 10
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: IN
45520: IFFALSE 45530
// btype = b_lab ;
45522: LD_ADDR_VAR 0 1
45526: PUSH
45527: LD_INT 6
45529: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45530: LD_VAR 0 6
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: IN
45549: NOT
45550: PUSH
45551: LD_VAR 0 1
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 6
45570: PUSH
45571: LD_INT 36
45573: PUSH
45574: LD_INT 4
45576: PUSH
45577: LD_INT 5
45579: PUSH
45580: LD_INT 31
45582: PUSH
45583: LD_INT 32
45585: PUSH
45586: LD_INT 33
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: IN
45602: NOT
45603: PUSH
45604: LD_VAR 0 6
45608: PUSH
45609: LD_INT 1
45611: EQUAL
45612: AND
45613: OR
45614: PUSH
45615: LD_VAR 0 1
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: IN
45630: NOT
45631: PUSH
45632: LD_VAR 0 6
45636: PUSH
45637: LD_INT 2
45639: EQUAL
45640: AND
45641: OR
45642: IFFALSE 45652
// mode = 0 ;
45644: LD_ADDR_VAR 0 6
45648: PUSH
45649: LD_INT 0
45651: ST_TO_ADDR
// case mode of 0 :
45652: LD_VAR 0 6
45656: PUSH
45657: LD_INT 0
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 57118
45665: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45666: LD_ADDR_VAR 0 11
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 3
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45859: LD_ADDR_VAR 0 12
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46055: LD_ADDR_VAR 0 13
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46254: LD_ADDR_VAR 0 14
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46450: LD_ADDR_VAR 0 15
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46643: LD_ADDR_VAR 0 16
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46836: LD_ADDR_VAR 0 17
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47066: LD_ADDR_VAR 0 18
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47296: LD_ADDR_VAR 0 19
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47526: LD_ADDR_VAR 0 20
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 21
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 22
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48216: LD_ADDR_VAR 0 23
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48496: LD_ADDR_VAR 0 24
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48772: LD_ADDR_VAR 0 25
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 3
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49046: LD_ADDR_VAR 0 26
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49322: LD_ADDR_VAR 0 27
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49602: LD_ADDR_VAR 0 28
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49884: LD_ADDR_VAR 0 29
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50163: LD_ADDR_VAR 0 30
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50441: LD_ADDR_VAR 0 31
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50719: LD_ADDR_VAR 0 32
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50997: LD_ADDR_VAR 0 33
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51276: LD_ADDR_VAR 0 34
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51556: LD_ADDR_VAR 0 35
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51668: LD_ADDR_VAR 0 36
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51780: LD_ADDR_VAR 0 37
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51892: LD_ADDR_VAR 0 38
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52004: LD_ADDR_VAR 0 39
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52116: LD_ADDR_VAR 0 40
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52228: LD_ADDR_VAR 0 41
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52578: LD_ADDR_VAR 0 42
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52928: LD_ADDR_VAR 0 43
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53276: LD_ADDR_VAR 0 44
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: LD_INT 3
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 3
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53626: LD_ADDR_VAR 0 45
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53976: LD_ADDR_VAR 0 46
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 3
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 3
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54324: LD_ADDR_VAR 0 47
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54475: LD_ADDR_VAR 0 48
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 2
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54622: LD_ADDR_VAR 0 49
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54766: LD_ADDR_VAR 0 50
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54910: LD_ADDR_VAR 0 51
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55057: LD_ADDR_VAR 0 52
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55208: LD_ADDR_VAR 0 53
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55438: LD_ADDR_VAR 0 54
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55668: LD_ADDR_VAR 0 55
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55898: LD_ADDR_VAR 0 56
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56128: LD_ADDR_VAR 0 57
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56358: LD_ADDR_VAR 0 58
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56588: LD_ADDR_VAR 0 59
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56676: LD_ADDR_VAR 0 60
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56764: LD_ADDR_VAR 0 61
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56852: LD_ADDR_VAR 0 62
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56940: LD_ADDR_VAR 0 63
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57028: LD_ADDR_VAR 0 64
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// end ; 1 :
57116: GO 63013
57118: LD_INT 1
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57126
57124: GO 59749
57126: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57127: LD_ADDR_VAR 0 11
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 3
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57171: LD_ADDR_VAR 0 12
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57212: LD_ADDR_VAR 0 13
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57252: LD_ADDR_VAR 0 14
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57293: LD_ADDR_VAR 0 15
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57337: LD_ADDR_VAR 0 16
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57383: LD_ADDR_VAR 0 17
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57427: LD_ADDR_VAR 0 18
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57468: LD_ADDR_VAR 0 19
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57508: LD_ADDR_VAR 0 20
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57549: LD_ADDR_VAR 0 21
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57593: LD_ADDR_VAR 0 22
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57639: LD_ADDR_VAR 0 23
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57683: LD_ADDR_VAR 0 24
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57724: LD_ADDR_VAR 0 25
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57764: LD_ADDR_VAR 0 26
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57805: LD_ADDR_VAR 0 27
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57849: LD_ADDR_VAR 0 28
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 4
57880: NEG
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57895: LD_ADDR_VAR 0 29
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 5
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 5
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 4
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 6
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 6
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 5
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58050: LD_ADDR_VAR 0 30
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 5
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 6
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 6
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58193: LD_ADDR_VAR 0 31
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 4
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: LD_INT 4
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 5
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 5
58270: PUSH
58271: LD_INT 5
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: LD_INT 5
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 6
58290: PUSH
58291: LD_INT 5
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 6
58300: PUSH
58301: LD_INT 6
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 5
58310: PUSH
58311: LD_INT 6
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58332: LD_ADDR_VAR 0 32
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 4
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 6
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 6
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58475: LD_ADDR_VAR 0 33
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 4
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 4
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 5
58561: NEG
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 6
58595: NEG
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 6
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58630: LD_ADDR_VAR 0 34
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 4
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: NEG
58698: PUSH
58699: LD_INT 4
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: LD_INT 5
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 5
58733: NEG
58734: PUSH
58735: LD_INT 5
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 5
58745: NEG
58746: PUSH
58747: LD_INT 6
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 6
58757: NEG
58758: PUSH
58759: LD_INT 5
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 6
58769: NEG
58770: PUSH
58771: LD_INT 6
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58793: LD_ADDR_VAR 0 41
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58837: LD_ADDR_VAR 0 42
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58878: LD_ADDR_VAR 0 43
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: LIST
58917: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58918: LD_ADDR_VAR 0 44
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58959: LD_ADDR_VAR 0 45
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59003: LD_ADDR_VAR 0 46
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59049: LD_ADDR_VAR 0 47
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59082: LD_ADDR_VAR 0 48
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59113: LD_ADDR_VAR 0 49
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59142: LD_ADDR_VAR 0 50
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59171: LD_ADDR_VAR 0 51
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59202: LD_ADDR_VAR 0 52
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59235: LD_ADDR_VAR 0 53
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59279: LD_ADDR_VAR 0 54
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59320: LD_ADDR_VAR 0 55
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59360: LD_ADDR_VAR 0 56
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59401: LD_ADDR_VAR 0 57
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59445: LD_ADDR_VAR 0 58
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59491: LD_ADDR_VAR 0 59
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59535: LD_ADDR_VAR 0 60
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59576: LD_ADDR_VAR 0 61
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59616: LD_ADDR_VAR 0 62
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59657: LD_ADDR_VAR 0 63
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59701: LD_ADDR_VAR 0 64
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// end ; 2 :
59747: GO 63013
59749: LD_INT 2
59751: DOUBLE
59752: EQUAL
59753: IFTRUE 59757
59755: GO 63012
59757: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59758: LD_ADDR_VAR 0 29
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 4
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 5
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 5
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 5
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: LD_INT 4
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 4
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 5
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 5
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 5
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: NEG
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 4
60097: NEG
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 4
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: NEG
60144: PUSH
60145: LD_INT 4
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 4
60155: NEG
60156: PUSH
60157: LD_INT 5
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 4
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: LD_INT 3
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 5
60203: NEG
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 5
60215: NEG
60216: PUSH
60217: LD_INT 5
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 5
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 5
60239: NEG
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60296: LD_ADDR_VAR 0 30
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: LD_INT 4
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: LD_INT 4
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 5
60333: PUSH
60334: LD_INT 5
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 4
60343: PUSH
60344: LD_INT 5
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 4
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: NEG
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 4
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 5
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 5
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 5
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: LD_INT 4
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: NEG
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: LD_INT 4
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 4
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 4
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 5
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 4
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 5
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 5
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60843: LD_ADDR_VAR 0 31
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 4
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 5
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 5
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 4
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: LD_INT 5
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: NEG
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 4
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 4
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: NEG
61058: PUSH
61059: LD_INT 5
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 5
61105: NEG
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 5
61117: NEG
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: LD_INT 5
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 5
61141: NEG
61142: PUSH
61143: LD_INT 3
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: LD_INT 3
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 3
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 2
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 4
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 4
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 5
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61393: LD_ADDR_VAR 0 32
61397: PUSH
61398: LD_INT 4
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 4
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 4
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 5
61456: NEG
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 5
61467: NEG
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 3
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 4
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 4
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: LD_INT 4
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 4
61598: NEG
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 4
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: LD_INT 4
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 3
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 4
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 5
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 3
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 4
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: PUSH
61826: LD_INT 4
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: LD_INT 5
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: LD_INT 5
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: LD_INT 4
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 5
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 5
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61940: LD_ADDR_VAR 0 33
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: LD_INT 4
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 4
61959: NEG
61960: PUSH
61961: LD_INT 5
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 3
61971: NEG
61972: PUSH
61973: LD_INT 4
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 4
61995: NEG
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 5
62007: NEG
62008: PUSH
62009: LD_INT 4
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 5
62019: NEG
62020: PUSH
62021: LD_INT 5
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: LD_INT 5
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 5
62043: NEG
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 4
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 4
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 5
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 5
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 5
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: LD_INT 3
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 4
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 4
62280: PUSH
62281: LD_INT 4
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: LD_INT 4
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 4
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 4
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 4
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 3
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 5
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 5
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 4
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: LD_INT 5
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62478: LD_ADDR_VAR 0 34
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 5
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 4
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 4
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 5
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 4
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 4
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 4
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 5
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 5
62710: PUSH
62711: LD_INT 5
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 3
62730: PUSH
62731: LD_INT 4
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 5
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: LD_INT 5
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 4
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: LD_INT 2
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 4
62863: NEG
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 5
62919: NEG
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 5
62930: NEG
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 5
62942: NEG
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// end ; end ;
63010: GO 63013
63012: POP
// case btype of b_depot , b_warehouse :
63013: LD_VAR 0 1
63017: PUSH
63018: LD_INT 0
63020: DOUBLE
63021: EQUAL
63022: IFTRUE 63032
63024: LD_INT 1
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63032
63030: GO 63233
63032: POP
// case nation of nation_american :
63033: LD_VAR 0 5
63037: PUSH
63038: LD_INT 1
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63046
63044: GO 63102
63046: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63047: LD_ADDR_VAR 0 9
63051: PUSH
63052: LD_VAR 0 11
63056: PUSH
63057: LD_VAR 0 12
63061: PUSH
63062: LD_VAR 0 13
63066: PUSH
63067: LD_VAR 0 14
63071: PUSH
63072: LD_VAR 0 15
63076: PUSH
63077: LD_VAR 0 16
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 4
63094: PUSH
63095: LD_INT 1
63097: PLUS
63098: ARRAY
63099: ST_TO_ADDR
63100: GO 63231
63102: LD_INT 2
63104: DOUBLE
63105: EQUAL
63106: IFTRUE 63110
63108: GO 63166
63110: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63111: LD_ADDR_VAR 0 9
63115: PUSH
63116: LD_VAR 0 17
63120: PUSH
63121: LD_VAR 0 18
63125: PUSH
63126: LD_VAR 0 19
63130: PUSH
63131: LD_VAR 0 20
63135: PUSH
63136: LD_VAR 0 21
63140: PUSH
63141: LD_VAR 0 22
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: LD_VAR 0 4
63158: PUSH
63159: LD_INT 1
63161: PLUS
63162: ARRAY
63163: ST_TO_ADDR
63164: GO 63231
63166: LD_INT 3
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63174
63172: GO 63230
63174: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63175: LD_ADDR_VAR 0 9
63179: PUSH
63180: LD_VAR 0 23
63184: PUSH
63185: LD_VAR 0 24
63189: PUSH
63190: LD_VAR 0 25
63194: PUSH
63195: LD_VAR 0 26
63199: PUSH
63200: LD_VAR 0 27
63204: PUSH
63205: LD_VAR 0 28
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: PUSH
63218: LD_VAR 0 4
63222: PUSH
63223: LD_INT 1
63225: PLUS
63226: ARRAY
63227: ST_TO_ADDR
63228: GO 63231
63230: POP
63231: GO 63786
63233: LD_INT 2
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63247
63239: LD_INT 3
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63247
63245: GO 63303
63247: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63248: LD_ADDR_VAR 0 9
63252: PUSH
63253: LD_VAR 0 29
63257: PUSH
63258: LD_VAR 0 30
63262: PUSH
63263: LD_VAR 0 31
63267: PUSH
63268: LD_VAR 0 32
63272: PUSH
63273: LD_VAR 0 33
63277: PUSH
63278: LD_VAR 0 34
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 4
63295: PUSH
63296: LD_INT 1
63298: PLUS
63299: ARRAY
63300: ST_TO_ADDR
63301: GO 63786
63303: LD_INT 16
63305: DOUBLE
63306: EQUAL
63307: IFTRUE 63365
63309: LD_INT 17
63311: DOUBLE
63312: EQUAL
63313: IFTRUE 63365
63315: LD_INT 18
63317: DOUBLE
63318: EQUAL
63319: IFTRUE 63365
63321: LD_INT 19
63323: DOUBLE
63324: EQUAL
63325: IFTRUE 63365
63327: LD_INT 22
63329: DOUBLE
63330: EQUAL
63331: IFTRUE 63365
63333: LD_INT 20
63335: DOUBLE
63336: EQUAL
63337: IFTRUE 63365
63339: LD_INT 21
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63365
63345: LD_INT 23
63347: DOUBLE
63348: EQUAL
63349: IFTRUE 63365
63351: LD_INT 24
63353: DOUBLE
63354: EQUAL
63355: IFTRUE 63365
63357: LD_INT 25
63359: DOUBLE
63360: EQUAL
63361: IFTRUE 63365
63363: GO 63421
63365: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63366: LD_ADDR_VAR 0 9
63370: PUSH
63371: LD_VAR 0 35
63375: PUSH
63376: LD_VAR 0 36
63380: PUSH
63381: LD_VAR 0 37
63385: PUSH
63386: LD_VAR 0 38
63390: PUSH
63391: LD_VAR 0 39
63395: PUSH
63396: LD_VAR 0 40
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: PUSH
63409: LD_VAR 0 4
63413: PUSH
63414: LD_INT 1
63416: PLUS
63417: ARRAY
63418: ST_TO_ADDR
63419: GO 63786
63421: LD_INT 6
63423: DOUBLE
63424: EQUAL
63425: IFTRUE 63477
63427: LD_INT 7
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63477
63433: LD_INT 8
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63477
63439: LD_INT 13
63441: DOUBLE
63442: EQUAL
63443: IFTRUE 63477
63445: LD_INT 12
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63477
63451: LD_INT 15
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63477
63457: LD_INT 11
63459: DOUBLE
63460: EQUAL
63461: IFTRUE 63477
63463: LD_INT 14
63465: DOUBLE
63466: EQUAL
63467: IFTRUE 63477
63469: LD_INT 10
63471: DOUBLE
63472: EQUAL
63473: IFTRUE 63477
63475: GO 63533
63477: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63478: LD_ADDR_VAR 0 9
63482: PUSH
63483: LD_VAR 0 41
63487: PUSH
63488: LD_VAR 0 42
63492: PUSH
63493: LD_VAR 0 43
63497: PUSH
63498: LD_VAR 0 44
63502: PUSH
63503: LD_VAR 0 45
63507: PUSH
63508: LD_VAR 0 46
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: PUSH
63521: LD_VAR 0 4
63525: PUSH
63526: LD_INT 1
63528: PLUS
63529: ARRAY
63530: ST_TO_ADDR
63531: GO 63786
63533: LD_INT 36
63535: DOUBLE
63536: EQUAL
63537: IFTRUE 63541
63539: GO 63597
63541: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63542: LD_ADDR_VAR 0 9
63546: PUSH
63547: LD_VAR 0 47
63551: PUSH
63552: LD_VAR 0 48
63556: PUSH
63557: LD_VAR 0 49
63561: PUSH
63562: LD_VAR 0 50
63566: PUSH
63567: LD_VAR 0 51
63571: PUSH
63572: LD_VAR 0 52
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: PUSH
63585: LD_VAR 0 4
63589: PUSH
63590: LD_INT 1
63592: PLUS
63593: ARRAY
63594: ST_TO_ADDR
63595: GO 63786
63597: LD_INT 4
63599: DOUBLE
63600: EQUAL
63601: IFTRUE 63623
63603: LD_INT 5
63605: DOUBLE
63606: EQUAL
63607: IFTRUE 63623
63609: LD_INT 34
63611: DOUBLE
63612: EQUAL
63613: IFTRUE 63623
63615: LD_INT 37
63617: DOUBLE
63618: EQUAL
63619: IFTRUE 63623
63621: GO 63679
63623: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63624: LD_ADDR_VAR 0 9
63628: PUSH
63629: LD_VAR 0 53
63633: PUSH
63634: LD_VAR 0 54
63638: PUSH
63639: LD_VAR 0 55
63643: PUSH
63644: LD_VAR 0 56
63648: PUSH
63649: LD_VAR 0 57
63653: PUSH
63654: LD_VAR 0 58
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: PUSH
63667: LD_VAR 0 4
63671: PUSH
63672: LD_INT 1
63674: PLUS
63675: ARRAY
63676: ST_TO_ADDR
63677: GO 63786
63679: LD_INT 31
63681: DOUBLE
63682: EQUAL
63683: IFTRUE 63729
63685: LD_INT 32
63687: DOUBLE
63688: EQUAL
63689: IFTRUE 63729
63691: LD_INT 33
63693: DOUBLE
63694: EQUAL
63695: IFTRUE 63729
63697: LD_INT 27
63699: DOUBLE
63700: EQUAL
63701: IFTRUE 63729
63703: LD_INT 26
63705: DOUBLE
63706: EQUAL
63707: IFTRUE 63729
63709: LD_INT 28
63711: DOUBLE
63712: EQUAL
63713: IFTRUE 63729
63715: LD_INT 29
63717: DOUBLE
63718: EQUAL
63719: IFTRUE 63729
63721: LD_INT 30
63723: DOUBLE
63724: EQUAL
63725: IFTRUE 63729
63727: GO 63785
63729: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63730: LD_ADDR_VAR 0 9
63734: PUSH
63735: LD_VAR 0 59
63739: PUSH
63740: LD_VAR 0 60
63744: PUSH
63745: LD_VAR 0 61
63749: PUSH
63750: LD_VAR 0 62
63754: PUSH
63755: LD_VAR 0 63
63759: PUSH
63760: LD_VAR 0 64
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: PUSH
63773: LD_VAR 0 4
63777: PUSH
63778: LD_INT 1
63780: PLUS
63781: ARRAY
63782: ST_TO_ADDR
63783: GO 63786
63785: POP
// temp_list2 = [ ] ;
63786: LD_ADDR_VAR 0 10
63790: PUSH
63791: EMPTY
63792: ST_TO_ADDR
// for i in temp_list do
63793: LD_ADDR_VAR 0 8
63797: PUSH
63798: LD_VAR 0 9
63802: PUSH
63803: FOR_IN
63804: IFFALSE 63856
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63806: LD_ADDR_VAR 0 10
63810: PUSH
63811: LD_VAR 0 10
63815: PUSH
63816: LD_VAR 0 8
63820: PUSH
63821: LD_INT 1
63823: ARRAY
63824: PUSH
63825: LD_VAR 0 2
63829: PLUS
63830: PUSH
63831: LD_VAR 0 8
63835: PUSH
63836: LD_INT 2
63838: ARRAY
63839: PUSH
63840: LD_VAR 0 3
63844: PLUS
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: EMPTY
63851: LIST
63852: ADD
63853: ST_TO_ADDR
63854: GO 63803
63856: POP
63857: POP
// result = temp_list2 ;
63858: LD_ADDR_VAR 0 7
63862: PUSH
63863: LD_VAR 0 10
63867: ST_TO_ADDR
// end ;
63868: LD_VAR 0 7
63872: RET
// export function EnemyInRange ( unit , dist ) ; begin
63873: LD_INT 0
63875: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63876: LD_ADDR_VAR 0 3
63880: PUSH
63881: LD_VAR 0 1
63885: PPUSH
63886: CALL_OW 255
63890: PPUSH
63891: LD_VAR 0 1
63895: PPUSH
63896: CALL_OW 250
63900: PPUSH
63901: LD_VAR 0 1
63905: PPUSH
63906: CALL_OW 251
63910: PPUSH
63911: LD_VAR 0 2
63915: PPUSH
63916: CALL 37269 0 4
63920: PUSH
63921: LD_INT 4
63923: ARRAY
63924: ST_TO_ADDR
// end ;
63925: LD_VAR 0 3
63929: RET
// export function PlayerSeeMe ( unit ) ; begin
63930: LD_INT 0
63932: PPUSH
// result := See ( your_side , unit ) ;
63933: LD_ADDR_VAR 0 2
63937: PUSH
63938: LD_OWVAR 2
63942: PPUSH
63943: LD_VAR 0 1
63947: PPUSH
63948: CALL_OW 292
63952: ST_TO_ADDR
// end ;
63953: LD_VAR 0 2
63957: RET
// export function ReverseDir ( unit ) ; begin
63958: LD_INT 0
63960: PPUSH
// if not unit then
63961: LD_VAR 0 1
63965: NOT
63966: IFFALSE 63970
// exit ;
63968: GO 63993
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63970: LD_ADDR_VAR 0 2
63974: PUSH
63975: LD_VAR 0 1
63979: PPUSH
63980: CALL_OW 254
63984: PUSH
63985: LD_INT 3
63987: PLUS
63988: PUSH
63989: LD_INT 6
63991: MOD
63992: ST_TO_ADDR
// end ;
63993: LD_VAR 0 2
63997: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
// if not hexes then
64005: LD_VAR 0 2
64009: NOT
64010: IFFALSE 64014
// exit ;
64012: GO 64162
// dist := 9999 ;
64014: LD_ADDR_VAR 0 5
64018: PUSH
64019: LD_INT 9999
64021: ST_TO_ADDR
// for i = 1 to hexes do
64022: LD_ADDR_VAR 0 4
64026: PUSH
64027: DOUBLE
64028: LD_INT 1
64030: DEC
64031: ST_TO_ADDR
64032: LD_VAR 0 2
64036: PUSH
64037: FOR_TO
64038: IFFALSE 64150
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64040: LD_VAR 0 1
64044: PPUSH
64045: LD_VAR 0 2
64049: PUSH
64050: LD_VAR 0 4
64054: ARRAY
64055: PUSH
64056: LD_INT 1
64058: ARRAY
64059: PPUSH
64060: LD_VAR 0 2
64064: PUSH
64065: LD_VAR 0 4
64069: ARRAY
64070: PUSH
64071: LD_INT 2
64073: ARRAY
64074: PPUSH
64075: CALL_OW 297
64079: PUSH
64080: LD_VAR 0 5
64084: LESS
64085: IFFALSE 64148
// begin hex := hexes [ i ] ;
64087: LD_ADDR_VAR 0 7
64091: PUSH
64092: LD_VAR 0 2
64096: PUSH
64097: LD_VAR 0 4
64101: ARRAY
64102: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64103: LD_ADDR_VAR 0 5
64107: PUSH
64108: LD_VAR 0 1
64112: PPUSH
64113: LD_VAR 0 2
64117: PUSH
64118: LD_VAR 0 4
64122: ARRAY
64123: PUSH
64124: LD_INT 1
64126: ARRAY
64127: PPUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_VAR 0 4
64137: ARRAY
64138: PUSH
64139: LD_INT 2
64141: ARRAY
64142: PPUSH
64143: CALL_OW 297
64147: ST_TO_ADDR
// end ; end ;
64148: GO 64037
64150: POP
64151: POP
// result := hex ;
64152: LD_ADDR_VAR 0 3
64156: PUSH
64157: LD_VAR 0 7
64161: ST_TO_ADDR
// end ;
64162: LD_VAR 0 3
64166: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64167: LD_INT 0
64169: PPUSH
64170: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64171: LD_VAR 0 1
64175: NOT
64176: PUSH
64177: LD_VAR 0 1
64181: PUSH
64182: LD_INT 21
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 23
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PPUSH
64206: CALL_OW 69
64210: IN
64211: NOT
64212: OR
64213: IFFALSE 64217
// exit ;
64215: GO 64264
// for i = 1 to 3 do
64217: LD_ADDR_VAR 0 3
64221: PUSH
64222: DOUBLE
64223: LD_INT 1
64225: DEC
64226: ST_TO_ADDR
64227: LD_INT 3
64229: PUSH
64230: FOR_TO
64231: IFFALSE 64262
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64233: LD_VAR 0 1
64237: PPUSH
64238: CALL_OW 250
64242: PPUSH
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 251
64252: PPUSH
64253: LD_INT 1
64255: PPUSH
64256: CALL_OW 453
64260: GO 64230
64262: POP
64263: POP
// end ;
64264: LD_VAR 0 2
64268: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64269: LD_INT 0
64271: PPUSH
64272: PPUSH
64273: PPUSH
64274: PPUSH
64275: PPUSH
64276: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64277: LD_VAR 0 1
64281: NOT
64282: PUSH
64283: LD_VAR 0 2
64287: NOT
64288: OR
64289: PUSH
64290: LD_VAR 0 1
64294: PPUSH
64295: CALL_OW 314
64299: OR
64300: IFFALSE 64304
// exit ;
64302: GO 64745
// x := GetX ( enemy_unit ) ;
64304: LD_ADDR_VAR 0 7
64308: PUSH
64309: LD_VAR 0 2
64313: PPUSH
64314: CALL_OW 250
64318: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64319: LD_ADDR_VAR 0 8
64323: PUSH
64324: LD_VAR 0 2
64328: PPUSH
64329: CALL_OW 251
64333: ST_TO_ADDR
// if not x or not y then
64334: LD_VAR 0 7
64338: NOT
64339: PUSH
64340: LD_VAR 0 8
64344: NOT
64345: OR
64346: IFFALSE 64350
// exit ;
64348: GO 64745
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64350: LD_ADDR_VAR 0 6
64354: PUSH
64355: LD_VAR 0 7
64359: PPUSH
64360: LD_INT 0
64362: PPUSH
64363: LD_INT 4
64365: PPUSH
64366: CALL_OW 272
64370: PUSH
64371: LD_VAR 0 8
64375: PPUSH
64376: LD_INT 0
64378: PPUSH
64379: LD_INT 4
64381: PPUSH
64382: CALL_OW 273
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_VAR 0 7
64395: PPUSH
64396: LD_INT 1
64398: PPUSH
64399: LD_INT 4
64401: PPUSH
64402: CALL_OW 272
64406: PUSH
64407: LD_VAR 0 8
64411: PPUSH
64412: LD_INT 1
64414: PPUSH
64415: LD_INT 4
64417: PPUSH
64418: CALL_OW 273
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_VAR 0 7
64431: PPUSH
64432: LD_INT 2
64434: PPUSH
64435: LD_INT 4
64437: PPUSH
64438: CALL_OW 272
64442: PUSH
64443: LD_VAR 0 8
64447: PPUSH
64448: LD_INT 2
64450: PPUSH
64451: LD_INT 4
64453: PPUSH
64454: CALL_OW 273
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_VAR 0 7
64467: PPUSH
64468: LD_INT 3
64470: PPUSH
64471: LD_INT 4
64473: PPUSH
64474: CALL_OW 272
64478: PUSH
64479: LD_VAR 0 8
64483: PPUSH
64484: LD_INT 3
64486: PPUSH
64487: LD_INT 4
64489: PPUSH
64490: CALL_OW 273
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_VAR 0 7
64503: PPUSH
64504: LD_INT 4
64506: PPUSH
64507: LD_INT 4
64509: PPUSH
64510: CALL_OW 272
64514: PUSH
64515: LD_VAR 0 8
64519: PPUSH
64520: LD_INT 4
64522: PPUSH
64523: LD_INT 4
64525: PPUSH
64526: CALL_OW 273
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_VAR 0 7
64539: PPUSH
64540: LD_INT 5
64542: PPUSH
64543: LD_INT 4
64545: PPUSH
64546: CALL_OW 272
64550: PUSH
64551: LD_VAR 0 8
64555: PPUSH
64556: LD_INT 5
64558: PPUSH
64559: LD_INT 4
64561: PPUSH
64562: CALL_OW 273
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: ST_TO_ADDR
// for i = tmp downto 1 do
64579: LD_ADDR_VAR 0 4
64583: PUSH
64584: DOUBLE
64585: LD_VAR 0 6
64589: INC
64590: ST_TO_ADDR
64591: LD_INT 1
64593: PUSH
64594: FOR_DOWNTO
64595: IFFALSE 64696
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64597: LD_VAR 0 6
64601: PUSH
64602: LD_VAR 0 4
64606: ARRAY
64607: PUSH
64608: LD_INT 1
64610: ARRAY
64611: PPUSH
64612: LD_VAR 0 6
64616: PUSH
64617: LD_VAR 0 4
64621: ARRAY
64622: PUSH
64623: LD_INT 2
64625: ARRAY
64626: PPUSH
64627: CALL_OW 488
64631: NOT
64632: PUSH
64633: LD_VAR 0 6
64637: PUSH
64638: LD_VAR 0 4
64642: ARRAY
64643: PUSH
64644: LD_INT 1
64646: ARRAY
64647: PPUSH
64648: LD_VAR 0 6
64652: PUSH
64653: LD_VAR 0 4
64657: ARRAY
64658: PUSH
64659: LD_INT 2
64661: ARRAY
64662: PPUSH
64663: CALL_OW 428
64667: PUSH
64668: LD_INT 0
64670: NONEQUAL
64671: OR
64672: IFFALSE 64694
// tmp := Delete ( tmp , i ) ;
64674: LD_ADDR_VAR 0 6
64678: PUSH
64679: LD_VAR 0 6
64683: PPUSH
64684: LD_VAR 0 4
64688: PPUSH
64689: CALL_OW 3
64693: ST_TO_ADDR
64694: GO 64594
64696: POP
64697: POP
// j := GetClosestHex ( unit , tmp ) ;
64698: LD_ADDR_VAR 0 5
64702: PUSH
64703: LD_VAR 0 1
64707: PPUSH
64708: LD_VAR 0 6
64712: PPUSH
64713: CALL 63998 0 2
64717: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64718: LD_VAR 0 1
64722: PPUSH
64723: LD_VAR 0 5
64727: PUSH
64728: LD_INT 1
64730: ARRAY
64731: PPUSH
64732: LD_VAR 0 5
64736: PUSH
64737: LD_INT 2
64739: ARRAY
64740: PPUSH
64741: CALL_OW 111
// end ;
64745: LD_VAR 0 3
64749: RET
// export function PrepareApemanSoldier ( ) ; begin
64750: LD_INT 0
64752: PPUSH
// uc_nation := 0 ;
64753: LD_ADDR_OWVAR 21
64757: PUSH
64758: LD_INT 0
64760: ST_TO_ADDR
// hc_sex := sex_male ;
64761: LD_ADDR_OWVAR 27
64765: PUSH
64766: LD_INT 1
64768: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64769: LD_ADDR_OWVAR 28
64773: PUSH
64774: LD_INT 15
64776: ST_TO_ADDR
// hc_gallery :=  ;
64777: LD_ADDR_OWVAR 33
64781: PUSH
64782: LD_STRING 
64784: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64785: LD_ADDR_OWVAR 31
64789: PUSH
64790: LD_INT 0
64792: PPUSH
64793: LD_INT 3
64795: PPUSH
64796: CALL_OW 12
64800: PUSH
64801: LD_INT 0
64803: PPUSH
64804: LD_INT 3
64806: PPUSH
64807: CALL_OW 12
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// end ;
64824: LD_VAR 0 1
64828: RET
// export function PrepareApemanEngineer ( ) ; begin
64829: LD_INT 0
64831: PPUSH
// uc_nation := 0 ;
64832: LD_ADDR_OWVAR 21
64836: PUSH
64837: LD_INT 0
64839: ST_TO_ADDR
// hc_sex := sex_male ;
64840: LD_ADDR_OWVAR 27
64844: PUSH
64845: LD_INT 1
64847: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64848: LD_ADDR_OWVAR 28
64852: PUSH
64853: LD_INT 16
64855: ST_TO_ADDR
// hc_gallery :=  ;
64856: LD_ADDR_OWVAR 33
64860: PUSH
64861: LD_STRING 
64863: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64864: LD_ADDR_OWVAR 31
64868: PUSH
64869: LD_INT 0
64871: PPUSH
64872: LD_INT 3
64874: PPUSH
64875: CALL_OW 12
64879: PUSH
64880: LD_INT 0
64882: PPUSH
64883: LD_INT 3
64885: PPUSH
64886: CALL_OW 12
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// end ;
64903: LD_VAR 0 1
64907: RET
// export function PrepareApeman ( agressivity ) ; begin
64908: LD_INT 0
64910: PPUSH
// uc_side := 0 ;
64911: LD_ADDR_OWVAR 20
64915: PUSH
64916: LD_INT 0
64918: ST_TO_ADDR
// uc_nation := 0 ;
64919: LD_ADDR_OWVAR 21
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// hc_sex := sex_male ;
64927: LD_ADDR_OWVAR 27
64931: PUSH
64932: LD_INT 1
64934: ST_TO_ADDR
// hc_class := class_apeman ;
64935: LD_ADDR_OWVAR 28
64939: PUSH
64940: LD_INT 12
64942: ST_TO_ADDR
// hc_gallery :=  ;
64943: LD_ADDR_OWVAR 33
64947: PUSH
64948: LD_STRING 
64950: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64951: LD_ADDR_OWVAR 35
64955: PUSH
64956: LD_VAR 0 1
64960: NEG
64961: PPUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 12
64971: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64972: LD_ADDR_OWVAR 31
64976: PUSH
64977: LD_INT 0
64979: PPUSH
64980: LD_INT 3
64982: PPUSH
64983: CALL_OW 12
64987: PUSH
64988: LD_INT 0
64990: PPUSH
64991: LD_INT 3
64993: PPUSH
64994: CALL_OW 12
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: ST_TO_ADDR
// end ;
65011: LD_VAR 0 2
65015: RET
// export function PrepareTiger ( agressivity ) ; begin
65016: LD_INT 0
65018: PPUSH
// uc_side := 0 ;
65019: LD_ADDR_OWVAR 20
65023: PUSH
65024: LD_INT 0
65026: ST_TO_ADDR
// uc_nation := 0 ;
65027: LD_ADDR_OWVAR 21
65031: PUSH
65032: LD_INT 0
65034: ST_TO_ADDR
// hc_class := class_tiger ;
65035: LD_ADDR_OWVAR 28
65039: PUSH
65040: LD_INT 14
65042: ST_TO_ADDR
// hc_gallery :=  ;
65043: LD_ADDR_OWVAR 33
65047: PUSH
65048: LD_STRING 
65050: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65051: LD_ADDR_OWVAR 35
65055: PUSH
65056: LD_VAR 0 1
65060: NEG
65061: PPUSH
65062: LD_VAR 0 1
65066: PPUSH
65067: CALL_OW 12
65071: ST_TO_ADDR
// end ;
65072: LD_VAR 0 2
65076: RET
// export function PrepareEnchidna ( ) ; begin
65077: LD_INT 0
65079: PPUSH
// uc_side := 0 ;
65080: LD_ADDR_OWVAR 20
65084: PUSH
65085: LD_INT 0
65087: ST_TO_ADDR
// uc_nation := 0 ;
65088: LD_ADDR_OWVAR 21
65092: PUSH
65093: LD_INT 0
65095: ST_TO_ADDR
// hc_class := class_baggie ;
65096: LD_ADDR_OWVAR 28
65100: PUSH
65101: LD_INT 13
65103: ST_TO_ADDR
// hc_gallery :=  ;
65104: LD_ADDR_OWVAR 33
65108: PUSH
65109: LD_STRING 
65111: ST_TO_ADDR
// end ;
65112: LD_VAR 0 1
65116: RET
// export function PrepareFrog ( ) ; begin
65117: LD_INT 0
65119: PPUSH
// uc_side := 0 ;
65120: LD_ADDR_OWVAR 20
65124: PUSH
65125: LD_INT 0
65127: ST_TO_ADDR
// uc_nation := 0 ;
65128: LD_ADDR_OWVAR 21
65132: PUSH
65133: LD_INT 0
65135: ST_TO_ADDR
// hc_class := class_frog ;
65136: LD_ADDR_OWVAR 28
65140: PUSH
65141: LD_INT 19
65143: ST_TO_ADDR
// hc_gallery :=  ;
65144: LD_ADDR_OWVAR 33
65148: PUSH
65149: LD_STRING 
65151: ST_TO_ADDR
// end ;
65152: LD_VAR 0 1
65156: RET
// export function PrepareFish ( ) ; begin
65157: LD_INT 0
65159: PPUSH
// uc_side := 0 ;
65160: LD_ADDR_OWVAR 20
65164: PUSH
65165: LD_INT 0
65167: ST_TO_ADDR
// uc_nation := 0 ;
65168: LD_ADDR_OWVAR 21
65172: PUSH
65173: LD_INT 0
65175: ST_TO_ADDR
// hc_class := class_fish ;
65176: LD_ADDR_OWVAR 28
65180: PUSH
65181: LD_INT 20
65183: ST_TO_ADDR
// hc_gallery :=  ;
65184: LD_ADDR_OWVAR 33
65188: PUSH
65189: LD_STRING 
65191: ST_TO_ADDR
// end ;
65192: LD_VAR 0 1
65196: RET
// export function PrepareBird ( ) ; begin
65197: LD_INT 0
65199: PPUSH
// uc_side := 0 ;
65200: LD_ADDR_OWVAR 20
65204: PUSH
65205: LD_INT 0
65207: ST_TO_ADDR
// uc_nation := 0 ;
65208: LD_ADDR_OWVAR 21
65212: PUSH
65213: LD_INT 0
65215: ST_TO_ADDR
// hc_class := class_phororhacos ;
65216: LD_ADDR_OWVAR 28
65220: PUSH
65221: LD_INT 18
65223: ST_TO_ADDR
// hc_gallery :=  ;
65224: LD_ADDR_OWVAR 33
65228: PUSH
65229: LD_STRING 
65231: ST_TO_ADDR
// end ;
65232: LD_VAR 0 1
65236: RET
// export function PrepareHorse ( ) ; begin
65237: LD_INT 0
65239: PPUSH
// uc_side := 0 ;
65240: LD_ADDR_OWVAR 20
65244: PUSH
65245: LD_INT 0
65247: ST_TO_ADDR
// uc_nation := 0 ;
65248: LD_ADDR_OWVAR 21
65252: PUSH
65253: LD_INT 0
65255: ST_TO_ADDR
// hc_class := class_horse ;
65256: LD_ADDR_OWVAR 28
65260: PUSH
65261: LD_INT 21
65263: ST_TO_ADDR
// hc_gallery :=  ;
65264: LD_ADDR_OWVAR 33
65268: PUSH
65269: LD_STRING 
65271: ST_TO_ADDR
// end ;
65272: LD_VAR 0 1
65276: RET
// export function PrepareMastodont ( ) ; begin
65277: LD_INT 0
65279: PPUSH
// uc_side := 0 ;
65280: LD_ADDR_OWVAR 20
65284: PUSH
65285: LD_INT 0
65287: ST_TO_ADDR
// uc_nation := 0 ;
65288: LD_ADDR_OWVAR 21
65292: PUSH
65293: LD_INT 0
65295: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65296: LD_ADDR_OWVAR 37
65300: PUSH
65301: LD_INT 31
65303: ST_TO_ADDR
// vc_control := control_rider ;
65304: LD_ADDR_OWVAR 38
65308: PUSH
65309: LD_INT 4
65311: ST_TO_ADDR
// end ;
65312: LD_VAR 0 1
65316: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65317: LD_INT 0
65319: PPUSH
65320: PPUSH
65321: PPUSH
// uc_side = 0 ;
65322: LD_ADDR_OWVAR 20
65326: PUSH
65327: LD_INT 0
65329: ST_TO_ADDR
// uc_nation = 0 ;
65330: LD_ADDR_OWVAR 21
65334: PUSH
65335: LD_INT 0
65337: ST_TO_ADDR
// InitHc_All ( ) ;
65338: CALL_OW 584
// InitVc ;
65342: CALL_OW 20
// if mastodonts then
65346: LD_VAR 0 6
65350: IFFALSE 65417
// for i = 1 to mastodonts do
65352: LD_ADDR_VAR 0 11
65356: PUSH
65357: DOUBLE
65358: LD_INT 1
65360: DEC
65361: ST_TO_ADDR
65362: LD_VAR 0 6
65366: PUSH
65367: FOR_TO
65368: IFFALSE 65415
// begin vc_chassis := 31 ;
65370: LD_ADDR_OWVAR 37
65374: PUSH
65375: LD_INT 31
65377: ST_TO_ADDR
// vc_control := control_rider ;
65378: LD_ADDR_OWVAR 38
65382: PUSH
65383: LD_INT 4
65385: ST_TO_ADDR
// animal := CreateVehicle ;
65386: LD_ADDR_VAR 0 12
65390: PUSH
65391: CALL_OW 45
65395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65396: LD_VAR 0 12
65400: PPUSH
65401: LD_VAR 0 8
65405: PPUSH
65406: LD_INT 0
65408: PPUSH
65409: CALL 67552 0 3
// end ;
65413: GO 65367
65415: POP
65416: POP
// if horses then
65417: LD_VAR 0 5
65421: IFFALSE 65488
// for i = 1 to horses do
65423: LD_ADDR_VAR 0 11
65427: PUSH
65428: DOUBLE
65429: LD_INT 1
65431: DEC
65432: ST_TO_ADDR
65433: LD_VAR 0 5
65437: PUSH
65438: FOR_TO
65439: IFFALSE 65486
// begin hc_class := 21 ;
65441: LD_ADDR_OWVAR 28
65445: PUSH
65446: LD_INT 21
65448: ST_TO_ADDR
// hc_gallery :=  ;
65449: LD_ADDR_OWVAR 33
65453: PUSH
65454: LD_STRING 
65456: ST_TO_ADDR
// animal := CreateHuman ;
65457: LD_ADDR_VAR 0 12
65461: PUSH
65462: CALL_OW 44
65466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65467: LD_VAR 0 12
65471: PPUSH
65472: LD_VAR 0 8
65476: PPUSH
65477: LD_INT 0
65479: PPUSH
65480: CALL 67552 0 3
// end ;
65484: GO 65438
65486: POP
65487: POP
// if birds then
65488: LD_VAR 0 1
65492: IFFALSE 65559
// for i = 1 to birds do
65494: LD_ADDR_VAR 0 11
65498: PUSH
65499: DOUBLE
65500: LD_INT 1
65502: DEC
65503: ST_TO_ADDR
65504: LD_VAR 0 1
65508: PUSH
65509: FOR_TO
65510: IFFALSE 65557
// begin hc_class = 18 ;
65512: LD_ADDR_OWVAR 28
65516: PUSH
65517: LD_INT 18
65519: ST_TO_ADDR
// hc_gallery =  ;
65520: LD_ADDR_OWVAR 33
65524: PUSH
65525: LD_STRING 
65527: ST_TO_ADDR
// animal := CreateHuman ;
65528: LD_ADDR_VAR 0 12
65532: PUSH
65533: CALL_OW 44
65537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65538: LD_VAR 0 12
65542: PPUSH
65543: LD_VAR 0 8
65547: PPUSH
65548: LD_INT 0
65550: PPUSH
65551: CALL 67552 0 3
// end ;
65555: GO 65509
65557: POP
65558: POP
// if tigers then
65559: LD_VAR 0 2
65563: IFFALSE 65647
// for i = 1 to tigers do
65565: LD_ADDR_VAR 0 11
65569: PUSH
65570: DOUBLE
65571: LD_INT 1
65573: DEC
65574: ST_TO_ADDR
65575: LD_VAR 0 2
65579: PUSH
65580: FOR_TO
65581: IFFALSE 65645
// begin hc_class = class_tiger ;
65583: LD_ADDR_OWVAR 28
65587: PUSH
65588: LD_INT 14
65590: ST_TO_ADDR
// hc_gallery =  ;
65591: LD_ADDR_OWVAR 33
65595: PUSH
65596: LD_STRING 
65598: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65599: LD_ADDR_OWVAR 35
65603: PUSH
65604: LD_INT 7
65606: NEG
65607: PPUSH
65608: LD_INT 7
65610: PPUSH
65611: CALL_OW 12
65615: ST_TO_ADDR
// animal := CreateHuman ;
65616: LD_ADDR_VAR 0 12
65620: PUSH
65621: CALL_OW 44
65625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65626: LD_VAR 0 12
65630: PPUSH
65631: LD_VAR 0 8
65635: PPUSH
65636: LD_INT 0
65638: PPUSH
65639: CALL 67552 0 3
// end ;
65643: GO 65580
65645: POP
65646: POP
// if apemans then
65647: LD_VAR 0 3
65651: IFFALSE 65774
// for i = 1 to apemans do
65653: LD_ADDR_VAR 0 11
65657: PUSH
65658: DOUBLE
65659: LD_INT 1
65661: DEC
65662: ST_TO_ADDR
65663: LD_VAR 0 3
65667: PUSH
65668: FOR_TO
65669: IFFALSE 65772
// begin hc_class = class_apeman ;
65671: LD_ADDR_OWVAR 28
65675: PUSH
65676: LD_INT 12
65678: ST_TO_ADDR
// hc_gallery =  ;
65679: LD_ADDR_OWVAR 33
65683: PUSH
65684: LD_STRING 
65686: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65687: LD_ADDR_OWVAR 35
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PPUSH
65696: LD_INT 2
65698: PPUSH
65699: CALL_OW 12
65703: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65704: LD_ADDR_OWVAR 31
65708: PUSH
65709: LD_INT 1
65711: PPUSH
65712: LD_INT 3
65714: PPUSH
65715: CALL_OW 12
65719: PUSH
65720: LD_INT 1
65722: PPUSH
65723: LD_INT 3
65725: PPUSH
65726: CALL_OW 12
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: ST_TO_ADDR
// animal := CreateHuman ;
65743: LD_ADDR_VAR 0 12
65747: PUSH
65748: CALL_OW 44
65752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65753: LD_VAR 0 12
65757: PPUSH
65758: LD_VAR 0 8
65762: PPUSH
65763: LD_INT 0
65765: PPUSH
65766: CALL 67552 0 3
// end ;
65770: GO 65668
65772: POP
65773: POP
// if enchidnas then
65774: LD_VAR 0 4
65778: IFFALSE 65845
// for i = 1 to enchidnas do
65780: LD_ADDR_VAR 0 11
65784: PUSH
65785: DOUBLE
65786: LD_INT 1
65788: DEC
65789: ST_TO_ADDR
65790: LD_VAR 0 4
65794: PUSH
65795: FOR_TO
65796: IFFALSE 65843
// begin hc_class = 13 ;
65798: LD_ADDR_OWVAR 28
65802: PUSH
65803: LD_INT 13
65805: ST_TO_ADDR
// hc_gallery =  ;
65806: LD_ADDR_OWVAR 33
65810: PUSH
65811: LD_STRING 
65813: ST_TO_ADDR
// animal := CreateHuman ;
65814: LD_ADDR_VAR 0 12
65818: PUSH
65819: CALL_OW 44
65823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65824: LD_VAR 0 12
65828: PPUSH
65829: LD_VAR 0 8
65833: PPUSH
65834: LD_INT 0
65836: PPUSH
65837: CALL 67552 0 3
// end ;
65841: GO 65795
65843: POP
65844: POP
// if fishes then
65845: LD_VAR 0 7
65849: IFFALSE 65916
// for i = 1 to fishes do
65851: LD_ADDR_VAR 0 11
65855: PUSH
65856: DOUBLE
65857: LD_INT 1
65859: DEC
65860: ST_TO_ADDR
65861: LD_VAR 0 7
65865: PUSH
65866: FOR_TO
65867: IFFALSE 65914
// begin hc_class = 20 ;
65869: LD_ADDR_OWVAR 28
65873: PUSH
65874: LD_INT 20
65876: ST_TO_ADDR
// hc_gallery =  ;
65877: LD_ADDR_OWVAR 33
65881: PUSH
65882: LD_STRING 
65884: ST_TO_ADDR
// animal := CreateHuman ;
65885: LD_ADDR_VAR 0 12
65889: PUSH
65890: CALL_OW 44
65894: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65895: LD_VAR 0 12
65899: PPUSH
65900: LD_VAR 0 9
65904: PPUSH
65905: LD_INT 0
65907: PPUSH
65908: CALL 67552 0 3
// end ;
65912: GO 65866
65914: POP
65915: POP
// end ;
65916: LD_VAR 0 10
65920: RET
// export function WantHeal ( sci , unit ) ; begin
65921: LD_INT 0
65923: PPUSH
// if GetTaskList ( sci ) > 0 then
65924: LD_VAR 0 1
65928: PPUSH
65929: CALL_OW 437
65933: PUSH
65934: LD_INT 0
65936: GREATER
65937: IFFALSE 66007
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65939: LD_VAR 0 1
65943: PPUSH
65944: CALL_OW 437
65948: PUSH
65949: LD_INT 1
65951: ARRAY
65952: PUSH
65953: LD_INT 1
65955: ARRAY
65956: PUSH
65957: LD_STRING l
65959: EQUAL
65960: PUSH
65961: LD_VAR 0 1
65965: PPUSH
65966: CALL_OW 437
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_INT 4
65977: ARRAY
65978: PUSH
65979: LD_VAR 0 2
65983: EQUAL
65984: AND
65985: IFFALSE 65997
// result := true else
65987: LD_ADDR_VAR 0 3
65991: PUSH
65992: LD_INT 1
65994: ST_TO_ADDR
65995: GO 66005
// result := false ;
65997: LD_ADDR_VAR 0 3
66001: PUSH
66002: LD_INT 0
66004: ST_TO_ADDR
// end else
66005: GO 66015
// result := false ;
66007: LD_ADDR_VAR 0 3
66011: PUSH
66012: LD_INT 0
66014: ST_TO_ADDR
// end ;
66015: LD_VAR 0 3
66019: RET
// export function HealTarget ( sci ) ; begin
66020: LD_INT 0
66022: PPUSH
// if not sci then
66023: LD_VAR 0 1
66027: NOT
66028: IFFALSE 66032
// exit ;
66030: GO 66097
// result := 0 ;
66032: LD_ADDR_VAR 0 2
66036: PUSH
66037: LD_INT 0
66039: ST_TO_ADDR
// if GetTaskList ( sci ) then
66040: LD_VAR 0 1
66044: PPUSH
66045: CALL_OW 437
66049: IFFALSE 66097
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66051: LD_VAR 0 1
66055: PPUSH
66056: CALL_OW 437
66060: PUSH
66061: LD_INT 1
66063: ARRAY
66064: PUSH
66065: LD_INT 1
66067: ARRAY
66068: PUSH
66069: LD_STRING l
66071: EQUAL
66072: IFFALSE 66097
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66074: LD_ADDR_VAR 0 2
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 437
66088: PUSH
66089: LD_INT 1
66091: ARRAY
66092: PUSH
66093: LD_INT 4
66095: ARRAY
66096: ST_TO_ADDR
// end ;
66097: LD_VAR 0 2
66101: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66102: LD_INT 0
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
// if not base_units then
66108: LD_VAR 0 1
66112: NOT
66113: IFFALSE 66117
// exit ;
66115: GO 66204
// result := false ;
66117: LD_ADDR_VAR 0 2
66121: PUSH
66122: LD_INT 0
66124: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66125: LD_ADDR_VAR 0 5
66129: PUSH
66130: LD_VAR 0 1
66134: PPUSH
66135: LD_INT 21
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PPUSH
66145: CALL_OW 72
66149: ST_TO_ADDR
// if not tmp then
66150: LD_VAR 0 5
66154: NOT
66155: IFFALSE 66159
// exit ;
66157: GO 66204
// for i in tmp do
66159: LD_ADDR_VAR 0 3
66163: PUSH
66164: LD_VAR 0 5
66168: PUSH
66169: FOR_IN
66170: IFFALSE 66202
// begin result := EnemyInRange ( i , 22 ) ;
66172: LD_ADDR_VAR 0 2
66176: PUSH
66177: LD_VAR 0 3
66181: PPUSH
66182: LD_INT 22
66184: PPUSH
66185: CALL 63873 0 2
66189: ST_TO_ADDR
// if result then
66190: LD_VAR 0 2
66194: IFFALSE 66200
// exit ;
66196: POP
66197: POP
66198: GO 66204
// end ;
66200: GO 66169
66202: POP
66203: POP
// end ;
66204: LD_VAR 0 2
66208: RET
// export function FilterByTag ( units , tag ) ; begin
66209: LD_INT 0
66211: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66212: LD_ADDR_VAR 0 3
66216: PUSH
66217: LD_VAR 0 1
66221: PPUSH
66222: LD_INT 120
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PPUSH
66234: CALL_OW 72
66238: ST_TO_ADDR
// end ;
66239: LD_VAR 0 3
66243: RET
// export function IsDriver ( un ) ; begin
66244: LD_INT 0
66246: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66247: LD_ADDR_VAR 0 2
66251: PUSH
66252: LD_VAR 0 1
66256: PUSH
66257: LD_INT 55
66259: PUSH
66260: EMPTY
66261: LIST
66262: PPUSH
66263: CALL_OW 69
66267: IN
66268: ST_TO_ADDR
// end ;
66269: LD_VAR 0 2
66273: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66274: LD_INT 0
66276: PPUSH
66277: PPUSH
// list := [ ] ;
66278: LD_ADDR_VAR 0 5
66282: PUSH
66283: EMPTY
66284: ST_TO_ADDR
// case d of 0 :
66285: LD_VAR 0 3
66289: PUSH
66290: LD_INT 0
66292: DOUBLE
66293: EQUAL
66294: IFTRUE 66298
66296: GO 66431
66298: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66299: LD_ADDR_VAR 0 5
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 4
66311: MINUS
66312: PUSH
66313: LD_VAR 0 2
66317: PUSH
66318: LD_INT 4
66320: MINUS
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: PUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_INT 3
66337: MINUS
66338: PUSH
66339: LD_VAR 0 2
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_INT 4
66359: PLUS
66360: PUSH
66361: LD_VAR 0 2
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 3
66381: PLUS
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: LD_INT 3
66390: PLUS
66391: PUSH
66392: LD_INT 5
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: LIST
66399: PUSH
66400: LD_VAR 0 1
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 4
66412: PLUS
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// end ; 1 :
66429: GO 67129
66431: LD_INT 1
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66439
66437: GO 66572
66439: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 4
66457: MINUS
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: PUSH
66467: LD_VAR 0 1
66471: PUSH
66472: LD_INT 3
66474: MINUS
66475: PUSH
66476: LD_VAR 0 2
66480: PUSH
66481: LD_INT 3
66483: MINUS
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: PUSH
66493: LD_VAR 0 1
66497: PUSH
66498: LD_INT 4
66500: MINUS
66501: PUSH
66502: LD_VAR 0 2
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: PUSH
66515: LD_VAR 0 1
66519: PUSH
66520: LD_VAR 0 2
66524: PUSH
66525: LD_INT 3
66527: PLUS
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: PUSH
66537: LD_VAR 0 1
66541: PUSH
66542: LD_INT 4
66544: PLUS
66545: PUSH
66546: LD_VAR 0 2
66550: PUSH
66551: LD_INT 4
66553: PLUS
66554: PUSH
66555: LD_INT 5
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: ST_TO_ADDR
// end ; 2 :
66570: GO 67129
66572: LD_INT 2
66574: DOUBLE
66575: EQUAL
66576: IFTRUE 66580
66578: GO 66709
66580: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_VAR 0 2
66595: PUSH
66596: LD_INT 3
66598: MINUS
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: PUSH
66608: LD_VAR 0 1
66612: PUSH
66613: LD_INT 4
66615: PLUS
66616: PUSH
66617: LD_VAR 0 2
66621: PUSH
66622: LD_INT 4
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 4
66642: PLUS
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 3
66659: MINUS
66660: PUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: PUSH
66674: LD_VAR 0 1
66678: PUSH
66679: LD_INT 4
66681: MINUS
66682: PUSH
66683: LD_VAR 0 2
66687: PUSH
66688: LD_INT 4
66690: MINUS
66691: PUSH
66692: LD_INT 2
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// end ; 3 :
66707: GO 67129
66709: LD_INT 3
66711: DOUBLE
66712: EQUAL
66713: IFTRUE 66717
66715: GO 66850
66717: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66718: LD_ADDR_VAR 0 5
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: LD_INT 3
66730: PLUS
66731: PUSH
66732: LD_VAR 0 2
66736: PUSH
66737: LD_INT 4
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_INT 4
66752: PLUS
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 4
66761: PLUS
66762: PUSH
66763: LD_INT 5
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: PUSH
66771: LD_VAR 0 1
66775: PUSH
66776: LD_INT 4
66778: MINUS
66779: PUSH
66780: LD_VAR 0 2
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 1
66797: PUSH
66798: LD_VAR 0 2
66802: PUSH
66803: LD_INT 4
66805: MINUS
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: PUSH
66815: LD_VAR 0 1
66819: PUSH
66820: LD_INT 3
66822: MINUS
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: LD_INT 3
66831: MINUS
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// end ; 4 :
66848: GO 67129
66850: LD_INT 4
66852: DOUBLE
66853: EQUAL
66854: IFTRUE 66858
66856: GO 66991
66858: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66859: LD_ADDR_VAR 0 5
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_VAR 0 2
66873: PUSH
66874: LD_INT 4
66876: PLUS
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_INT 3
66893: PLUS
66894: PUSH
66895: LD_VAR 0 2
66899: PUSH
66900: LD_INT 3
66902: PLUS
66903: PUSH
66904: LD_INT 5
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: PUSH
66912: LD_VAR 0 1
66916: PUSH
66917: LD_INT 4
66919: PLUS
66920: PUSH
66921: LD_VAR 0 2
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_VAR 0 2
66943: PUSH
66944: LD_INT 3
66946: MINUS
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_INT 4
66963: MINUS
66964: PUSH
66965: LD_VAR 0 2
66969: PUSH
66970: LD_INT 4
66972: MINUS
66973: PUSH
66974: LD_INT 2
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: ST_TO_ADDR
// end ; 5 :
66989: GO 67129
66991: LD_INT 5
66993: DOUBLE
66994: EQUAL
66995: IFTRUE 66999
66997: GO 67128
66999: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67000: LD_ADDR_VAR 0 5
67004: PUSH
67005: LD_VAR 0 1
67009: PUSH
67010: LD_INT 4
67012: MINUS
67013: PUSH
67014: LD_VAR 0 2
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 4
67039: MINUS
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 4
67056: PLUS
67057: PUSH
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 4
67065: PLUS
67066: PUSH
67067: LD_INT 5
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: PUSH
67075: LD_VAR 0 1
67079: PUSH
67080: LD_INT 3
67082: PLUS
67083: PUSH
67084: LD_VAR 0 2
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: PUSH
67097: LD_VAR 0 1
67101: PUSH
67102: LD_VAR 0 2
67106: PUSH
67107: LD_INT 3
67109: PLUS
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// end ; end ;
67126: GO 67129
67128: POP
// result := list ;
67129: LD_ADDR_VAR 0 4
67133: PUSH
67134: LD_VAR 0 5
67138: ST_TO_ADDR
// end ;
67139: LD_VAR 0 4
67143: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67144: LD_INT 0
67146: PPUSH
67147: PPUSH
67148: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67149: LD_VAR 0 1
67153: NOT
67154: PUSH
67155: LD_VAR 0 2
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 4
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: IN
67178: NOT
67179: OR
67180: IFFALSE 67184
// exit ;
67182: GO 67276
// tmp := [ ] ;
67184: LD_ADDR_VAR 0 5
67188: PUSH
67189: EMPTY
67190: ST_TO_ADDR
// for i in units do
67191: LD_ADDR_VAR 0 4
67195: PUSH
67196: LD_VAR 0 1
67200: PUSH
67201: FOR_IN
67202: IFFALSE 67245
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67204: LD_ADDR_VAR 0 5
67208: PUSH
67209: LD_VAR 0 5
67213: PPUSH
67214: LD_VAR 0 5
67218: PUSH
67219: LD_INT 1
67221: PLUS
67222: PPUSH
67223: LD_VAR 0 4
67227: PPUSH
67228: LD_VAR 0 2
67232: PPUSH
67233: CALL_OW 259
67237: PPUSH
67238: CALL_OW 2
67242: ST_TO_ADDR
67243: GO 67201
67245: POP
67246: POP
// if not tmp then
67247: LD_VAR 0 5
67251: NOT
67252: IFFALSE 67256
// exit ;
67254: GO 67276
// result := SortListByListDesc ( units , tmp ) ;
67256: LD_ADDR_VAR 0 3
67260: PUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: LD_VAR 0 5
67270: PPUSH
67271: CALL_OW 77
67275: ST_TO_ADDR
// end ;
67276: LD_VAR 0 3
67280: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67281: LD_INT 0
67283: PPUSH
67284: PPUSH
67285: PPUSH
// result := false ;
67286: LD_ADDR_VAR 0 3
67290: PUSH
67291: LD_INT 0
67293: ST_TO_ADDR
// x := GetX ( building ) ;
67294: LD_ADDR_VAR 0 4
67298: PUSH
67299: LD_VAR 0 2
67303: PPUSH
67304: CALL_OW 250
67308: ST_TO_ADDR
// y := GetY ( building ) ;
67309: LD_ADDR_VAR 0 5
67313: PUSH
67314: LD_VAR 0 2
67318: PPUSH
67319: CALL_OW 251
67323: ST_TO_ADDR
// if not building or not x or not y then
67324: LD_VAR 0 2
67328: NOT
67329: PUSH
67330: LD_VAR 0 4
67334: NOT
67335: OR
67336: PUSH
67337: LD_VAR 0 5
67341: NOT
67342: OR
67343: IFFALSE 67347
// exit ;
67345: GO 67439
// if GetTaskList ( unit ) then
67347: LD_VAR 0 1
67351: PPUSH
67352: CALL_OW 437
67356: IFFALSE 67439
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67358: LD_STRING e
67360: PUSH
67361: LD_VAR 0 1
67365: PPUSH
67366: CALL_OW 437
67370: PUSH
67371: LD_INT 1
67373: ARRAY
67374: PUSH
67375: LD_INT 1
67377: ARRAY
67378: EQUAL
67379: PUSH
67380: LD_VAR 0 4
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 437
67394: PUSH
67395: LD_INT 1
67397: ARRAY
67398: PUSH
67399: LD_INT 2
67401: ARRAY
67402: EQUAL
67403: AND
67404: PUSH
67405: LD_VAR 0 5
67409: PUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 437
67419: PUSH
67420: LD_INT 1
67422: ARRAY
67423: PUSH
67424: LD_INT 3
67426: ARRAY
67427: EQUAL
67428: AND
67429: IFFALSE 67439
// result := true end ;
67431: LD_ADDR_VAR 0 3
67435: PUSH
67436: LD_INT 1
67438: ST_TO_ADDR
// end ;
67439: LD_VAR 0 3
67443: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67444: LD_INT 0
67446: PPUSH
// result := false ;
67447: LD_ADDR_VAR 0 4
67451: PUSH
67452: LD_INT 0
67454: ST_TO_ADDR
// if GetTaskList ( unit ) then
67455: LD_VAR 0 1
67459: PPUSH
67460: CALL_OW 437
67464: IFFALSE 67547
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67466: LD_STRING M
67468: PUSH
67469: LD_VAR 0 1
67473: PPUSH
67474: CALL_OW 437
67478: PUSH
67479: LD_INT 1
67481: ARRAY
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: EQUAL
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_VAR 0 1
67497: PPUSH
67498: CALL_OW 437
67502: PUSH
67503: LD_INT 1
67505: ARRAY
67506: PUSH
67507: LD_INT 2
67509: ARRAY
67510: EQUAL
67511: AND
67512: PUSH
67513: LD_VAR 0 3
67517: PUSH
67518: LD_VAR 0 1
67522: PPUSH
67523: CALL_OW 437
67527: PUSH
67528: LD_INT 1
67530: ARRAY
67531: PUSH
67532: LD_INT 3
67534: ARRAY
67535: EQUAL
67536: AND
67537: IFFALSE 67547
// result := true ;
67539: LD_ADDR_VAR 0 4
67543: PUSH
67544: LD_INT 1
67546: ST_TO_ADDR
// end ; end ;
67547: LD_VAR 0 4
67551: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67552: LD_INT 0
67554: PPUSH
67555: PPUSH
67556: PPUSH
67557: PPUSH
// if not unit or not area then
67558: LD_VAR 0 1
67562: NOT
67563: PUSH
67564: LD_VAR 0 2
67568: NOT
67569: OR
67570: IFFALSE 67574
// exit ;
67572: GO 67738
// tmp := AreaToList ( area , i ) ;
67574: LD_ADDR_VAR 0 6
67578: PUSH
67579: LD_VAR 0 2
67583: PPUSH
67584: LD_VAR 0 5
67588: PPUSH
67589: CALL_OW 517
67593: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67594: LD_ADDR_VAR 0 5
67598: PUSH
67599: DOUBLE
67600: LD_INT 1
67602: DEC
67603: ST_TO_ADDR
67604: LD_VAR 0 6
67608: PUSH
67609: LD_INT 1
67611: ARRAY
67612: PUSH
67613: FOR_TO
67614: IFFALSE 67736
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67616: LD_ADDR_VAR 0 7
67620: PUSH
67621: LD_VAR 0 6
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PUSH
67630: LD_VAR 0 5
67634: ARRAY
67635: PUSH
67636: LD_VAR 0 6
67640: PUSH
67641: LD_INT 2
67643: ARRAY
67644: PUSH
67645: LD_VAR 0 5
67649: ARRAY
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67655: LD_VAR 0 7
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PPUSH
67664: LD_VAR 0 7
67668: PUSH
67669: LD_INT 2
67671: ARRAY
67672: PPUSH
67673: CALL_OW 428
67677: PUSH
67678: LD_INT 0
67680: EQUAL
67681: IFFALSE 67734
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_VAR 0 7
67692: PUSH
67693: LD_INT 1
67695: ARRAY
67696: PPUSH
67697: LD_VAR 0 7
67701: PUSH
67702: LD_INT 2
67704: ARRAY
67705: PPUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: CALL_OW 48
// result := IsPlaced ( unit ) ;
67715: LD_ADDR_VAR 0 4
67719: PUSH
67720: LD_VAR 0 1
67724: PPUSH
67725: CALL_OW 305
67729: ST_TO_ADDR
// exit ;
67730: POP
67731: POP
67732: GO 67738
// end ; end ;
67734: GO 67613
67736: POP
67737: POP
// end ;
67738: LD_VAR 0 4
67742: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67743: LD_INT 0
67745: PPUSH
67746: PPUSH
67747: PPUSH
// if not side or side > 8 then
67748: LD_VAR 0 1
67752: NOT
67753: PUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_INT 8
67761: GREATER
67762: OR
67763: IFFALSE 67767
// exit ;
67765: GO 67954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67767: LD_ADDR_VAR 0 4
67771: PUSH
67772: LD_INT 22
67774: PUSH
67775: LD_VAR 0 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 21
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PPUSH
67798: CALL_OW 69
67802: ST_TO_ADDR
// if not tmp then
67803: LD_VAR 0 4
67807: NOT
67808: IFFALSE 67812
// exit ;
67810: GO 67954
// enable_addtolog := true ;
67812: LD_ADDR_OWVAR 81
67816: PUSH
67817: LD_INT 1
67819: ST_TO_ADDR
// AddToLog ( [ ) ;
67820: LD_STRING [
67822: PPUSH
67823: CALL_OW 561
// for i in tmp do
67827: LD_ADDR_VAR 0 3
67831: PUSH
67832: LD_VAR 0 4
67836: PUSH
67837: FOR_IN
67838: IFFALSE 67945
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67840: LD_STRING [
67842: PUSH
67843: LD_VAR 0 3
67847: PPUSH
67848: CALL_OW 266
67852: STR
67853: PUSH
67854: LD_STRING , 
67856: STR
67857: PUSH
67858: LD_VAR 0 3
67862: PPUSH
67863: CALL_OW 250
67867: STR
67868: PUSH
67869: LD_STRING , 
67871: STR
67872: PUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: CALL_OW 251
67882: STR
67883: PUSH
67884: LD_STRING , 
67886: STR
67887: PUSH
67888: LD_VAR 0 3
67892: PPUSH
67893: CALL_OW 254
67897: STR
67898: PUSH
67899: LD_STRING , 
67901: STR
67902: PUSH
67903: LD_VAR 0 3
67907: PPUSH
67908: LD_INT 1
67910: PPUSH
67911: CALL_OW 268
67915: STR
67916: PUSH
67917: LD_STRING , 
67919: STR
67920: PUSH
67921: LD_VAR 0 3
67925: PPUSH
67926: LD_INT 2
67928: PPUSH
67929: CALL_OW 268
67933: STR
67934: PUSH
67935: LD_STRING ],
67937: STR
67938: PPUSH
67939: CALL_OW 561
// end ;
67943: GO 67837
67945: POP
67946: POP
// AddToLog ( ]; ) ;
67947: LD_STRING ];
67949: PPUSH
67950: CALL_OW 561
// end ;
67954: LD_VAR 0 2
67958: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67959: LD_INT 0
67961: PPUSH
67962: PPUSH
67963: PPUSH
67964: PPUSH
67965: PPUSH
// if not area or not rate or not max then
67966: LD_VAR 0 1
67970: NOT
67971: PUSH
67972: LD_VAR 0 2
67976: NOT
67977: OR
67978: PUSH
67979: LD_VAR 0 4
67983: NOT
67984: OR
67985: IFFALSE 67989
// exit ;
67987: GO 68178
// while 1 do
67989: LD_INT 1
67991: IFFALSE 68178
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67993: LD_ADDR_VAR 0 9
67997: PUSH
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_INT 1
68005: PPUSH
68006: CALL_OW 287
68010: PUSH
68011: LD_INT 10
68013: MUL
68014: ST_TO_ADDR
// r := rate / 10 ;
68015: LD_ADDR_VAR 0 7
68019: PUSH
68020: LD_VAR 0 2
68024: PUSH
68025: LD_INT 10
68027: DIVREAL
68028: ST_TO_ADDR
// time := 1 1$00 ;
68029: LD_ADDR_VAR 0 8
68033: PUSH
68034: LD_INT 2100
68036: ST_TO_ADDR
// if amount < min then
68037: LD_VAR 0 9
68041: PUSH
68042: LD_VAR 0 3
68046: LESS
68047: IFFALSE 68065
// r := r * 2 else
68049: LD_ADDR_VAR 0 7
68053: PUSH
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 2
68061: MUL
68062: ST_TO_ADDR
68063: GO 68091
// if amount > max then
68065: LD_VAR 0 9
68069: PUSH
68070: LD_VAR 0 4
68074: GREATER
68075: IFFALSE 68091
// r := r / 2 ;
68077: LD_ADDR_VAR 0 7
68081: PUSH
68082: LD_VAR 0 7
68086: PUSH
68087: LD_INT 2
68089: DIVREAL
68090: ST_TO_ADDR
// time := time / r ;
68091: LD_ADDR_VAR 0 8
68095: PUSH
68096: LD_VAR 0 8
68100: PUSH
68101: LD_VAR 0 7
68105: DIVREAL
68106: ST_TO_ADDR
// if time < 0 then
68107: LD_VAR 0 8
68111: PUSH
68112: LD_INT 0
68114: LESS
68115: IFFALSE 68132
// time := time * - 1 ;
68117: LD_ADDR_VAR 0 8
68121: PUSH
68122: LD_VAR 0 8
68126: PUSH
68127: LD_INT 1
68129: NEG
68130: MUL
68131: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68132: LD_VAR 0 8
68136: PUSH
68137: LD_INT 35
68139: PPUSH
68140: LD_INT 875
68142: PPUSH
68143: CALL_OW 12
68147: PLUS
68148: PPUSH
68149: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68153: LD_INT 1
68155: PPUSH
68156: LD_INT 5
68158: PPUSH
68159: CALL_OW 12
68163: PPUSH
68164: LD_VAR 0 1
68168: PPUSH
68169: LD_INT 1
68171: PPUSH
68172: CALL_OW 55
// end ;
68176: GO 67989
// end ;
68178: LD_VAR 0 5
68182: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68183: LD_INT 0
68185: PPUSH
68186: PPUSH
68187: PPUSH
68188: PPUSH
68189: PPUSH
68190: PPUSH
68191: PPUSH
68192: PPUSH
// if not turrets or not factories then
68193: LD_VAR 0 1
68197: NOT
68198: PUSH
68199: LD_VAR 0 2
68203: NOT
68204: OR
68205: IFFALSE 68209
// exit ;
68207: GO 68516
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68209: LD_ADDR_VAR 0 10
68213: PUSH
68214: LD_INT 5
68216: PUSH
68217: LD_INT 6
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: LD_INT 4
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: PUSH
68237: LD_INT 5
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 24
68251: PUSH
68252: LD_INT 25
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 23
68261: PUSH
68262: LD_INT 27
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 42
68275: PUSH
68276: LD_INT 43
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 44
68285: PUSH
68286: LD_INT 46
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 45
68295: PUSH
68296: LD_INT 47
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: ST_TO_ADDR
// result := [ ] ;
68313: LD_ADDR_VAR 0 3
68317: PUSH
68318: EMPTY
68319: ST_TO_ADDR
// for i in turrets do
68320: LD_ADDR_VAR 0 4
68324: PUSH
68325: LD_VAR 0 1
68329: PUSH
68330: FOR_IN
68331: IFFALSE 68514
// begin nat := GetNation ( i ) ;
68333: LD_ADDR_VAR 0 7
68337: PUSH
68338: LD_VAR 0 4
68342: PPUSH
68343: CALL_OW 248
68347: ST_TO_ADDR
// weapon := 0 ;
68348: LD_ADDR_VAR 0 8
68352: PUSH
68353: LD_INT 0
68355: ST_TO_ADDR
// if not nat then
68356: LD_VAR 0 7
68360: NOT
68361: IFFALSE 68365
// continue ;
68363: GO 68330
// for j in list [ nat ] do
68365: LD_ADDR_VAR 0 5
68369: PUSH
68370: LD_VAR 0 10
68374: PUSH
68375: LD_VAR 0 7
68379: ARRAY
68380: PUSH
68381: FOR_IN
68382: IFFALSE 68423
// if GetBWeapon ( i ) = j [ 1 ] then
68384: LD_VAR 0 4
68388: PPUSH
68389: CALL_OW 269
68393: PUSH
68394: LD_VAR 0 5
68398: PUSH
68399: LD_INT 1
68401: ARRAY
68402: EQUAL
68403: IFFALSE 68421
// begin weapon := j [ 2 ] ;
68405: LD_ADDR_VAR 0 8
68409: PUSH
68410: LD_VAR 0 5
68414: PUSH
68415: LD_INT 2
68417: ARRAY
68418: ST_TO_ADDR
// break ;
68419: GO 68423
// end ;
68421: GO 68381
68423: POP
68424: POP
// if not weapon then
68425: LD_VAR 0 8
68429: NOT
68430: IFFALSE 68434
// continue ;
68432: GO 68330
// for k in factories do
68434: LD_ADDR_VAR 0 6
68438: PUSH
68439: LD_VAR 0 2
68443: PUSH
68444: FOR_IN
68445: IFFALSE 68510
// begin weapons := AvailableWeaponList ( k ) ;
68447: LD_ADDR_VAR 0 9
68451: PUSH
68452: LD_VAR 0 6
68456: PPUSH
68457: CALL_OW 478
68461: ST_TO_ADDR
// if not weapons then
68462: LD_VAR 0 9
68466: NOT
68467: IFFALSE 68471
// continue ;
68469: GO 68444
// if weapon in weapons then
68471: LD_VAR 0 8
68475: PUSH
68476: LD_VAR 0 9
68480: IN
68481: IFFALSE 68508
// begin result := [ i , weapon ] ;
68483: LD_ADDR_VAR 0 3
68487: PUSH
68488: LD_VAR 0 4
68492: PUSH
68493: LD_VAR 0 8
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// exit ;
68502: POP
68503: POP
68504: POP
68505: POP
68506: GO 68516
// end ; end ;
68508: GO 68444
68510: POP
68511: POP
// end ;
68512: GO 68330
68514: POP
68515: POP
// end ;
68516: LD_VAR 0 3
68520: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68521: LD_INT 0
68523: PPUSH
// if not side or side > 8 then
68524: LD_VAR 0 3
68528: NOT
68529: PUSH
68530: LD_VAR 0 3
68534: PUSH
68535: LD_INT 8
68537: GREATER
68538: OR
68539: IFFALSE 68543
// exit ;
68541: GO 68602
// if not range then
68543: LD_VAR 0 4
68547: NOT
68548: IFFALSE 68559
// range := - 12 ;
68550: LD_ADDR_VAR 0 4
68554: PUSH
68555: LD_INT 12
68557: NEG
68558: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68559: LD_VAR 0 1
68563: PPUSH
68564: LD_VAR 0 2
68568: PPUSH
68569: LD_VAR 0 3
68573: PPUSH
68574: LD_VAR 0 4
68578: PPUSH
68579: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68583: LD_VAR 0 1
68587: PPUSH
68588: LD_VAR 0 2
68592: PPUSH
68593: LD_VAR 0 3
68597: PPUSH
68598: CALL_OW 331
// end ;
68602: LD_VAR 0 5
68606: RET
// export function Video ( mode ) ; begin
68607: LD_INT 0
68609: PPUSH
// ingame_video = mode ;
68610: LD_ADDR_OWVAR 52
68614: PUSH
68615: LD_VAR 0 1
68619: ST_TO_ADDR
// interface_hidden = mode ;
68620: LD_ADDR_OWVAR 54
68624: PUSH
68625: LD_VAR 0 1
68629: ST_TO_ADDR
// end ;
68630: LD_VAR 0 2
68634: RET
// export function Join ( array , element ) ; begin
68635: LD_INT 0
68637: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68638: LD_ADDR_VAR 0 3
68642: PUSH
68643: LD_VAR 0 1
68647: PPUSH
68648: LD_VAR 0 1
68652: PUSH
68653: LD_INT 1
68655: PLUS
68656: PPUSH
68657: LD_VAR 0 2
68661: PPUSH
68662: CALL_OW 1
68666: ST_TO_ADDR
// end ;
68667: LD_VAR 0 3
68671: RET
// export function JoinUnion ( array , element ) ; begin
68672: LD_INT 0
68674: PPUSH
// result := array union element ;
68675: LD_ADDR_VAR 0 3
68679: PUSH
68680: LD_VAR 0 1
68684: PUSH
68685: LD_VAR 0 2
68689: UNION
68690: ST_TO_ADDR
// end ;
68691: LD_VAR 0 3
68695: RET
// export function GetBehemoths ( side ) ; begin
68696: LD_INT 0
68698: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68699: LD_ADDR_VAR 0 2
68703: PUSH
68704: LD_INT 22
68706: PUSH
68707: LD_VAR 0 1
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 31
68718: PUSH
68719: LD_INT 25
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PPUSH
68730: CALL_OW 69
68734: ST_TO_ADDR
// end ;
68735: LD_VAR 0 2
68739: RET
// export function Shuffle ( array ) ; var i , index ; begin
68740: LD_INT 0
68742: PPUSH
68743: PPUSH
68744: PPUSH
// result := [ ] ;
68745: LD_ADDR_VAR 0 2
68749: PUSH
68750: EMPTY
68751: ST_TO_ADDR
// if not array then
68752: LD_VAR 0 1
68756: NOT
68757: IFFALSE 68761
// exit ;
68759: GO 68860
// Randomize ;
68761: CALL_OW 10
// for i = array downto 1 do
68765: LD_ADDR_VAR 0 3
68769: PUSH
68770: DOUBLE
68771: LD_VAR 0 1
68775: INC
68776: ST_TO_ADDR
68777: LD_INT 1
68779: PUSH
68780: FOR_DOWNTO
68781: IFFALSE 68858
// begin index := rand ( 1 , array ) ;
68783: LD_ADDR_VAR 0 4
68787: PUSH
68788: LD_INT 1
68790: PPUSH
68791: LD_VAR 0 1
68795: PPUSH
68796: CALL_OW 12
68800: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_VAR 0 2
68810: PPUSH
68811: LD_VAR 0 2
68815: PUSH
68816: LD_INT 1
68818: PLUS
68819: PPUSH
68820: LD_VAR 0 1
68824: PUSH
68825: LD_VAR 0 4
68829: ARRAY
68830: PPUSH
68831: CALL_OW 2
68835: ST_TO_ADDR
// array := Delete ( array , index ) ;
68836: LD_ADDR_VAR 0 1
68840: PUSH
68841: LD_VAR 0 1
68845: PPUSH
68846: LD_VAR 0 4
68850: PPUSH
68851: CALL_OW 3
68855: ST_TO_ADDR
// end ;
68856: GO 68780
68858: POP
68859: POP
// end ;
68860: LD_VAR 0 2
68864: RET
// export function GetBaseMaterials ( base ) ; begin
68865: LD_INT 0
68867: PPUSH
// result := [ 0 , 0 , 0 ] ;
68868: LD_ADDR_VAR 0 2
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: ST_TO_ADDR
// if not base then
68887: LD_VAR 0 1
68891: NOT
68892: IFFALSE 68896
// exit ;
68894: GO 68945
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68896: LD_ADDR_VAR 0 2
68900: PUSH
68901: LD_VAR 0 1
68905: PPUSH
68906: LD_INT 1
68908: PPUSH
68909: CALL_OW 275
68913: PUSH
68914: LD_VAR 0 1
68918: PPUSH
68919: LD_INT 2
68921: PPUSH
68922: CALL_OW 275
68926: PUSH
68927: LD_VAR 0 1
68931: PPUSH
68932: LD_INT 3
68934: PPUSH
68935: CALL_OW 275
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// end ;
68945: LD_VAR 0 2
68949: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68950: LD_INT 0
68952: PPUSH
68953: PPUSH
// result := array ;
68954: LD_ADDR_VAR 0 3
68958: PUSH
68959: LD_VAR 0 1
68963: ST_TO_ADDR
// if size >= result then
68964: LD_VAR 0 2
68968: PUSH
68969: LD_VAR 0 3
68973: GREATEREQUAL
68974: IFFALSE 68978
// exit ;
68976: GO 69028
// if size then
68978: LD_VAR 0 2
68982: IFFALSE 69028
// for i := array downto size do
68984: LD_ADDR_VAR 0 4
68988: PUSH
68989: DOUBLE
68990: LD_VAR 0 1
68994: INC
68995: ST_TO_ADDR
68996: LD_VAR 0 2
69000: PUSH
69001: FOR_DOWNTO
69002: IFFALSE 69026
// result := Delete ( result , result ) ;
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: LD_VAR 0 3
69013: PPUSH
69014: LD_VAR 0 3
69018: PPUSH
69019: CALL_OW 3
69023: ST_TO_ADDR
69024: GO 69001
69026: POP
69027: POP
// end ;
69028: LD_VAR 0 3
69032: RET
// export function ComExit ( unit ) ; var tmp ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
// if not IsInUnit ( unit ) then
69037: LD_VAR 0 1
69041: PPUSH
69042: CALL_OW 310
69046: NOT
69047: IFFALSE 69051
// exit ;
69049: GO 69111
// tmp := IsInUnit ( unit ) ;
69051: LD_ADDR_VAR 0 3
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: CALL_OW 310
69065: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69066: LD_VAR 0 3
69070: PPUSH
69071: CALL_OW 247
69075: PUSH
69076: LD_INT 2
69078: EQUAL
69079: IFFALSE 69092
// ComExitVehicle ( unit ) else
69081: LD_VAR 0 1
69085: PPUSH
69086: CALL_OW 121
69090: GO 69101
// ComExitBuilding ( unit ) ;
69092: LD_VAR 0 1
69096: PPUSH
69097: CALL_OW 122
// result := tmp ;
69101: LD_ADDR_VAR 0 2
69105: PUSH
69106: LD_VAR 0 3
69110: ST_TO_ADDR
// end ;
69111: LD_VAR 0 2
69115: RET
// export function ComExitAll ( units ) ; var i ; begin
69116: LD_INT 0
69118: PPUSH
69119: PPUSH
// if not units then
69120: LD_VAR 0 1
69124: NOT
69125: IFFALSE 69129
// exit ;
69127: GO 69155
// for i in units do
69129: LD_ADDR_VAR 0 3
69133: PUSH
69134: LD_VAR 0 1
69138: PUSH
69139: FOR_IN
69140: IFFALSE 69153
// ComExit ( i ) ;
69142: LD_VAR 0 3
69146: PPUSH
69147: CALL 69033 0 1
69151: GO 69139
69153: POP
69154: POP
// end ;
69155: LD_VAR 0 2
69159: RET
// export function ResetHc ; begin
69160: LD_INT 0
69162: PPUSH
// InitHc ;
69163: CALL_OW 19
// hc_importance := 0 ;
69167: LD_ADDR_OWVAR 32
69171: PUSH
69172: LD_INT 0
69174: ST_TO_ADDR
// end ;
69175: LD_VAR 0 1
69179: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69180: LD_INT 0
69182: PPUSH
69183: PPUSH
69184: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69185: LD_ADDR_VAR 0 6
69189: PUSH
69190: LD_VAR 0 1
69194: PUSH
69195: LD_VAR 0 3
69199: PLUS
69200: PUSH
69201: LD_INT 2
69203: DIV
69204: ST_TO_ADDR
// if _x < 0 then
69205: LD_VAR 0 6
69209: PUSH
69210: LD_INT 0
69212: LESS
69213: IFFALSE 69230
// _x := _x * - 1 ;
69215: LD_ADDR_VAR 0 6
69219: PUSH
69220: LD_VAR 0 6
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: MUL
69229: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69230: LD_ADDR_VAR 0 7
69234: PUSH
69235: LD_VAR 0 2
69239: PUSH
69240: LD_VAR 0 4
69244: PLUS
69245: PUSH
69246: LD_INT 2
69248: DIV
69249: ST_TO_ADDR
// if _y < 0 then
69250: LD_VAR 0 7
69254: PUSH
69255: LD_INT 0
69257: LESS
69258: IFFALSE 69275
// _y := _y * - 1 ;
69260: LD_ADDR_VAR 0 7
69264: PUSH
69265: LD_VAR 0 7
69269: PUSH
69270: LD_INT 1
69272: NEG
69273: MUL
69274: ST_TO_ADDR
// result := [ _x , _y ] ;
69275: LD_ADDR_VAR 0 5
69279: PUSH
69280: LD_VAR 0 6
69284: PUSH
69285: LD_VAR 0 7
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// end ;
69294: LD_VAR 0 5
69298: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69299: LD_INT 0
69301: PPUSH
69302: PPUSH
69303: PPUSH
69304: PPUSH
// task := GetTaskList ( unit ) ;
69305: LD_ADDR_VAR 0 7
69309: PUSH
69310: LD_VAR 0 1
69314: PPUSH
69315: CALL_OW 437
69319: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69320: LD_VAR 0 7
69324: NOT
69325: PUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: LD_VAR 0 2
69335: PPUSH
69336: CALL_OW 308
69340: NOT
69341: AND
69342: IFFALSE 69346
// exit ;
69344: GO 69464
// if IsInArea ( unit , area ) then
69346: LD_VAR 0 1
69350: PPUSH
69351: LD_VAR 0 2
69355: PPUSH
69356: CALL_OW 308
69360: IFFALSE 69378
// begin ComMoveToArea ( unit , goAway ) ;
69362: LD_VAR 0 1
69366: PPUSH
69367: LD_VAR 0 3
69371: PPUSH
69372: CALL_OW 113
// exit ;
69376: GO 69464
// end ; if task [ 1 ] [ 1 ] <> M then
69378: LD_VAR 0 7
69382: PUSH
69383: LD_INT 1
69385: ARRAY
69386: PUSH
69387: LD_INT 1
69389: ARRAY
69390: PUSH
69391: LD_STRING M
69393: NONEQUAL
69394: IFFALSE 69398
// exit ;
69396: GO 69464
// x := task [ 1 ] [ 2 ] ;
69398: LD_ADDR_VAR 0 5
69402: PUSH
69403: LD_VAR 0 7
69407: PUSH
69408: LD_INT 1
69410: ARRAY
69411: PUSH
69412: LD_INT 2
69414: ARRAY
69415: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69416: LD_ADDR_VAR 0 6
69420: PUSH
69421: LD_VAR 0 7
69425: PUSH
69426: LD_INT 1
69428: ARRAY
69429: PUSH
69430: LD_INT 3
69432: ARRAY
69433: ST_TO_ADDR
// if InArea ( x , y , area ) then
69434: LD_VAR 0 5
69438: PPUSH
69439: LD_VAR 0 6
69443: PPUSH
69444: LD_VAR 0 2
69448: PPUSH
69449: CALL_OW 309
69453: IFFALSE 69464
// ComStop ( unit ) ;
69455: LD_VAR 0 1
69459: PPUSH
69460: CALL_OW 141
// end ;
69464: LD_VAR 0 4
69468: RET
// export function Abs ( value ) ; begin
69469: LD_INT 0
69471: PPUSH
// result := value ;
69472: LD_ADDR_VAR 0 2
69476: PUSH
69477: LD_VAR 0 1
69481: ST_TO_ADDR
// if value < 0 then
69482: LD_VAR 0 1
69486: PUSH
69487: LD_INT 0
69489: LESS
69490: IFFALSE 69507
// result := value * - 1 ;
69492: LD_ADDR_VAR 0 2
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: MUL
69506: ST_TO_ADDR
// end ;
69507: LD_VAR 0 2
69511: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69512: LD_INT 0
69514: PPUSH
69515: PPUSH
69516: PPUSH
69517: PPUSH
69518: PPUSH
69519: PPUSH
69520: PPUSH
69521: PPUSH
// if not unit or not building then
69522: LD_VAR 0 1
69526: NOT
69527: PUSH
69528: LD_VAR 0 2
69532: NOT
69533: OR
69534: IFFALSE 69538
// exit ;
69536: GO 69764
// x := GetX ( building ) ;
69538: LD_ADDR_VAR 0 4
69542: PUSH
69543: LD_VAR 0 2
69547: PPUSH
69548: CALL_OW 250
69552: ST_TO_ADDR
// y := GetY ( building ) ;
69553: LD_ADDR_VAR 0 6
69557: PUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: CALL_OW 251
69567: ST_TO_ADDR
// d := GetDir ( building ) ;
69568: LD_ADDR_VAR 0 8
69572: PUSH
69573: LD_VAR 0 2
69577: PPUSH
69578: CALL_OW 254
69582: ST_TO_ADDR
// r := 4 ;
69583: LD_ADDR_VAR 0 9
69587: PUSH
69588: LD_INT 4
69590: ST_TO_ADDR
// for i := 1 to 5 do
69591: LD_ADDR_VAR 0 10
69595: PUSH
69596: DOUBLE
69597: LD_INT 1
69599: DEC
69600: ST_TO_ADDR
69601: LD_INT 5
69603: PUSH
69604: FOR_TO
69605: IFFALSE 69762
// begin _x := ShiftX ( x , d , r + i ) ;
69607: LD_ADDR_VAR 0 5
69611: PUSH
69612: LD_VAR 0 4
69616: PPUSH
69617: LD_VAR 0 8
69621: PPUSH
69622: LD_VAR 0 9
69626: PUSH
69627: LD_VAR 0 10
69631: PLUS
69632: PPUSH
69633: CALL_OW 272
69637: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69638: LD_ADDR_VAR 0 7
69642: PUSH
69643: LD_VAR 0 6
69647: PPUSH
69648: LD_VAR 0 8
69652: PPUSH
69653: LD_VAR 0 9
69657: PUSH
69658: LD_VAR 0 10
69662: PLUS
69663: PPUSH
69664: CALL_OW 273
69668: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69669: LD_VAR 0 5
69673: PPUSH
69674: LD_VAR 0 7
69678: PPUSH
69679: CALL_OW 488
69683: PUSH
69684: LD_VAR 0 5
69688: PPUSH
69689: LD_VAR 0 7
69693: PPUSH
69694: CALL_OW 428
69698: PPUSH
69699: CALL_OW 247
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: IN
69714: NOT
69715: AND
69716: IFFALSE 69760
// begin ComMoveXY ( unit , _x , _y ) ;
69718: LD_VAR 0 1
69722: PPUSH
69723: LD_VAR 0 5
69727: PPUSH
69728: LD_VAR 0 7
69732: PPUSH
69733: CALL_OW 111
// result := [ _x , _y ] ;
69737: LD_ADDR_VAR 0 3
69741: PUSH
69742: LD_VAR 0 5
69746: PUSH
69747: LD_VAR 0 7
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// exit ;
69756: POP
69757: POP
69758: GO 69764
// end ; end ;
69760: GO 69604
69762: POP
69763: POP
// end ;
69764: LD_VAR 0 3
69768: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69769: LD_INT 0
69771: PPUSH
69772: PPUSH
69773: PPUSH
// result := 0 ;
69774: LD_ADDR_VAR 0 3
69778: PUSH
69779: LD_INT 0
69781: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69782: LD_VAR 0 1
69786: PUSH
69787: LD_INT 0
69789: LESS
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: LD_INT 8
69798: GREATER
69799: OR
69800: PUSH
69801: LD_VAR 0 2
69805: PUSH
69806: LD_INT 0
69808: LESS
69809: OR
69810: PUSH
69811: LD_VAR 0 2
69815: PUSH
69816: LD_INT 8
69818: GREATER
69819: OR
69820: IFFALSE 69824
// exit ;
69822: GO 69899
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69824: LD_ADDR_VAR 0 4
69828: PUSH
69829: LD_INT 22
69831: PUSH
69832: LD_VAR 0 2
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PPUSH
69841: CALL_OW 69
69845: PUSH
69846: FOR_IN
69847: IFFALSE 69897
// begin un := UnitShoot ( i ) ;
69849: LD_ADDR_VAR 0 5
69853: PUSH
69854: LD_VAR 0 4
69858: PPUSH
69859: CALL_OW 504
69863: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69864: LD_VAR 0 5
69868: PPUSH
69869: CALL_OW 255
69873: PUSH
69874: LD_VAR 0 1
69878: EQUAL
69879: IFFALSE 69895
// begin result := un ;
69881: LD_ADDR_VAR 0 3
69885: PUSH
69886: LD_VAR 0 5
69890: ST_TO_ADDR
// exit ;
69891: POP
69892: POP
69893: GO 69899
// end ; end ;
69895: GO 69846
69897: POP
69898: POP
// end ;
69899: LD_VAR 0 3
69903: RET
// export function GetCargoBay ( units ) ; begin
69904: LD_INT 0
69906: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_VAR 0 1
69916: PPUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 34
69922: PUSH
69923: LD_INT 12
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 34
69932: PUSH
69933: LD_INT 51
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 34
69942: PUSH
69943: LD_INT 32
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 34
69952: PUSH
69953: LD_EXP 27
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: PPUSH
69969: CALL_OW 72
69973: ST_TO_ADDR
// end ;
69974: LD_VAR 0 2
69978: RET
// export function Negate ( value ) ; begin
69979: LD_INT 0
69981: PPUSH
// result := not value ;
69982: LD_ADDR_VAR 0 2
69986: PUSH
69987: LD_VAR 0 1
69991: NOT
69992: ST_TO_ADDR
// end ;
69993: LD_VAR 0 2
69997: RET
// export function Inc ( value ) ; begin
69998: LD_INT 0
70000: PPUSH
// result := value + 1 ;
70001: LD_ADDR_VAR 0 2
70005: PUSH
70006: LD_VAR 0 1
70010: PUSH
70011: LD_INT 1
70013: PLUS
70014: ST_TO_ADDR
// end ;
70015: LD_VAR 0 2
70019: RET
// export function Dec ( value ) ; begin
70020: LD_INT 0
70022: PPUSH
// result := value - 1 ;
70023: LD_ADDR_VAR 0 2
70027: PUSH
70028: LD_VAR 0 1
70032: PUSH
70033: LD_INT 1
70035: MINUS
70036: ST_TO_ADDR
// end ;
70037: LD_VAR 0 2
70041: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
70047: PPUSH
70048: PPUSH
70049: PPUSH
70050: PPUSH
70051: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70052: LD_VAR 0 1
70056: PPUSH
70057: LD_VAR 0 2
70061: PPUSH
70062: CALL_OW 488
70066: NOT
70067: PUSH
70068: LD_VAR 0 3
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 488
70082: NOT
70083: OR
70084: IFFALSE 70097
// begin result := - 1 ;
70086: LD_ADDR_VAR 0 5
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: ST_TO_ADDR
// exit ;
70095: GO 70332
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70097: LD_ADDR_VAR 0 12
70101: PUSH
70102: LD_VAR 0 1
70106: PPUSH
70107: LD_VAR 0 2
70111: PPUSH
70112: LD_VAR 0 3
70116: PPUSH
70117: LD_VAR 0 4
70121: PPUSH
70122: CALL 69180 0 4
70126: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70127: LD_ADDR_VAR 0 11
70131: PUSH
70132: LD_VAR 0 1
70136: PPUSH
70137: LD_VAR 0 2
70141: PPUSH
70142: LD_VAR 0 12
70146: PUSH
70147: LD_INT 1
70149: ARRAY
70150: PPUSH
70151: LD_VAR 0 12
70155: PUSH
70156: LD_INT 2
70158: ARRAY
70159: PPUSH
70160: CALL_OW 298
70164: ST_TO_ADDR
// distance := 9999 ;
70165: LD_ADDR_VAR 0 10
70169: PUSH
70170: LD_INT 9999
70172: ST_TO_ADDR
// for i := 0 to 5 do
70173: LD_ADDR_VAR 0 6
70177: PUSH
70178: DOUBLE
70179: LD_INT 0
70181: DEC
70182: ST_TO_ADDR
70183: LD_INT 5
70185: PUSH
70186: FOR_TO
70187: IFFALSE 70330
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70189: LD_ADDR_VAR 0 7
70193: PUSH
70194: LD_VAR 0 1
70198: PPUSH
70199: LD_VAR 0 6
70203: PPUSH
70204: LD_VAR 0 11
70208: PPUSH
70209: CALL_OW 272
70213: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70214: LD_ADDR_VAR 0 8
70218: PUSH
70219: LD_VAR 0 2
70223: PPUSH
70224: LD_VAR 0 6
70228: PPUSH
70229: LD_VAR 0 11
70233: PPUSH
70234: CALL_OW 273
70238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70239: LD_VAR 0 7
70243: PPUSH
70244: LD_VAR 0 8
70248: PPUSH
70249: CALL_OW 488
70253: NOT
70254: IFFALSE 70258
// continue ;
70256: GO 70186
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70258: LD_ADDR_VAR 0 9
70262: PUSH
70263: LD_VAR 0 12
70267: PUSH
70268: LD_INT 1
70270: ARRAY
70271: PPUSH
70272: LD_VAR 0 12
70276: PUSH
70277: LD_INT 2
70279: ARRAY
70280: PPUSH
70281: LD_VAR 0 7
70285: PPUSH
70286: LD_VAR 0 8
70290: PPUSH
70291: CALL_OW 298
70295: ST_TO_ADDR
// if tmp < distance then
70296: LD_VAR 0 9
70300: PUSH
70301: LD_VAR 0 10
70305: LESS
70306: IFFALSE 70328
// begin result := i ;
70308: LD_ADDR_VAR 0 5
70312: PUSH
70313: LD_VAR 0 6
70317: ST_TO_ADDR
// distance := tmp ;
70318: LD_ADDR_VAR 0 10
70322: PUSH
70323: LD_VAR 0 9
70327: ST_TO_ADDR
// end ; end ;
70328: GO 70186
70330: POP
70331: POP
// end ;
70332: LD_VAR 0 5
70336: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70337: LD_INT 0
70339: PPUSH
70340: PPUSH
// if not driver or not IsInUnit ( driver ) then
70341: LD_VAR 0 1
70345: NOT
70346: PUSH
70347: LD_VAR 0 1
70351: PPUSH
70352: CALL_OW 310
70356: NOT
70357: OR
70358: IFFALSE 70362
// exit ;
70360: GO 70452
// vehicle := IsInUnit ( driver ) ;
70362: LD_ADDR_VAR 0 3
70366: PUSH
70367: LD_VAR 0 1
70371: PPUSH
70372: CALL_OW 310
70376: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70377: LD_VAR 0 1
70381: PPUSH
70382: LD_STRING \
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: PUSH
70412: LD_STRING E
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_VAR 0 3
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PPUSH
70448: CALL_OW 446
// end ;
70452: LD_VAR 0 2
70456: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70457: LD_INT 0
70459: PPUSH
70460: PPUSH
// if not driver or not IsInUnit ( driver ) then
70461: LD_VAR 0 1
70465: NOT
70466: PUSH
70467: LD_VAR 0 1
70471: PPUSH
70472: CALL_OW 310
70476: NOT
70477: OR
70478: IFFALSE 70482
// exit ;
70480: GO 70572
// vehicle := IsInUnit ( driver ) ;
70482: LD_ADDR_VAR 0 3
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 310
70496: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70497: LD_VAR 0 1
70501: PPUSH
70502: LD_STRING \
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: PUSH
70532: LD_STRING E
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_VAR 0 3
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: LD_INT 0
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PPUSH
70568: CALL_OW 447
// end ;
70572: LD_VAR 0 2
70576: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70577: LD_INT 0
70579: PPUSH
70580: PPUSH
70581: PPUSH
// tmp := [ ] ;
70582: LD_ADDR_VAR 0 5
70586: PUSH
70587: EMPTY
70588: ST_TO_ADDR
// for i in units do
70589: LD_ADDR_VAR 0 4
70593: PUSH
70594: LD_VAR 0 1
70598: PUSH
70599: FOR_IN
70600: IFFALSE 70638
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70602: LD_ADDR_VAR 0 5
70606: PUSH
70607: LD_VAR 0 5
70611: PPUSH
70612: LD_VAR 0 5
70616: PUSH
70617: LD_INT 1
70619: PLUS
70620: PPUSH
70621: LD_VAR 0 4
70625: PPUSH
70626: CALL_OW 256
70630: PPUSH
70631: CALL_OW 2
70635: ST_TO_ADDR
70636: GO 70599
70638: POP
70639: POP
// if not tmp then
70640: LD_VAR 0 5
70644: NOT
70645: IFFALSE 70649
// exit ;
70647: GO 70697
// if asc then
70649: LD_VAR 0 2
70653: IFFALSE 70677
// result := SortListByListAsc ( units , tmp ) else
70655: LD_ADDR_VAR 0 3
70659: PUSH
70660: LD_VAR 0 1
70664: PPUSH
70665: LD_VAR 0 5
70669: PPUSH
70670: CALL_OW 76
70674: ST_TO_ADDR
70675: GO 70697
// result := SortListByListDesc ( units , tmp ) ;
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: LD_VAR 0 1
70686: PPUSH
70687: LD_VAR 0 5
70691: PPUSH
70692: CALL_OW 77
70696: ST_TO_ADDR
// end ;
70697: LD_VAR 0 3
70701: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70702: LD_INT 0
70704: PPUSH
70705: PPUSH
// task := GetTaskList ( mech ) ;
70706: LD_ADDR_VAR 0 4
70710: PUSH
70711: LD_VAR 0 1
70715: PPUSH
70716: CALL_OW 437
70720: ST_TO_ADDR
// if not task then
70721: LD_VAR 0 4
70725: NOT
70726: IFFALSE 70730
// exit ;
70728: GO 70772
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70730: LD_ADDR_VAR 0 3
70734: PUSH
70735: LD_VAR 0 4
70739: PUSH
70740: LD_INT 1
70742: ARRAY
70743: PUSH
70744: LD_INT 1
70746: ARRAY
70747: PUSH
70748: LD_STRING r
70750: EQUAL
70751: PUSH
70752: LD_VAR 0 4
70756: PUSH
70757: LD_INT 1
70759: ARRAY
70760: PUSH
70761: LD_INT 4
70763: ARRAY
70764: PUSH
70765: LD_VAR 0 2
70769: EQUAL
70770: AND
70771: ST_TO_ADDR
// end ;
70772: LD_VAR 0 3
70776: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70777: LD_INT 0
70779: PPUSH
// SetDir ( unit , d ) ;
70780: LD_VAR 0 1
70784: PPUSH
70785: LD_VAR 0 4
70789: PPUSH
70790: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_VAR 0 2
70803: PPUSH
70804: LD_VAR 0 3
70808: PPUSH
70809: LD_VAR 0 5
70813: PPUSH
70814: CALL_OW 48
// end ;
70818: LD_VAR 0 6
70822: RET
// export function ToNaturalNumber ( number ) ; begin
70823: LD_INT 0
70825: PPUSH
// result := number div 1 ;
70826: LD_ADDR_VAR 0 2
70830: PUSH
70831: LD_VAR 0 1
70835: PUSH
70836: LD_INT 1
70838: DIV
70839: ST_TO_ADDR
// if number < 0 then
70840: LD_VAR 0 1
70844: PUSH
70845: LD_INT 0
70847: LESS
70848: IFFALSE 70858
// result := 0 ;
70850: LD_ADDR_VAR 0 2
70854: PUSH
70855: LD_INT 0
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 2
70862: RET
// export function SortByClass ( units , class ) ; var un ; begin
70863: LD_INT 0
70865: PPUSH
70866: PPUSH
// if not units or not class then
70867: LD_VAR 0 1
70871: NOT
70872: PUSH
70873: LD_VAR 0 2
70877: NOT
70878: OR
70879: IFFALSE 70883
// exit ;
70881: GO 70978
// result := [ ] ;
70883: LD_ADDR_VAR 0 3
70887: PUSH
70888: EMPTY
70889: ST_TO_ADDR
// for un in units do
70890: LD_ADDR_VAR 0 4
70894: PUSH
70895: LD_VAR 0 1
70899: PUSH
70900: FOR_IN
70901: IFFALSE 70976
// if GetClass ( un ) = class then
70903: LD_VAR 0 4
70907: PPUSH
70908: CALL_OW 257
70912: PUSH
70913: LD_VAR 0 2
70917: EQUAL
70918: IFFALSE 70945
// result := Insert ( result , 1 , un ) else
70920: LD_ADDR_VAR 0 3
70924: PUSH
70925: LD_VAR 0 3
70929: PPUSH
70930: LD_INT 1
70932: PPUSH
70933: LD_VAR 0 4
70937: PPUSH
70938: CALL_OW 2
70942: ST_TO_ADDR
70943: GO 70974
// result := Replace ( result , result + 1 , un ) ;
70945: LD_ADDR_VAR 0 3
70949: PUSH
70950: LD_VAR 0 3
70954: PPUSH
70955: LD_VAR 0 3
70959: PUSH
70960: LD_INT 1
70962: PLUS
70963: PPUSH
70964: LD_VAR 0 4
70968: PPUSH
70969: CALL_OW 1
70973: ST_TO_ADDR
70974: GO 70900
70976: POP
70977: POP
// end ;
70978: LD_VAR 0 3
70982: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70983: LD_INT 0
70985: PPUSH
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
70990: PPUSH
70991: PPUSH
// result := [ ] ;
70992: LD_ADDR_VAR 0 4
70996: PUSH
70997: EMPTY
70998: ST_TO_ADDR
// if x - r < 0 then
70999: LD_VAR 0 1
71003: PUSH
71004: LD_VAR 0 3
71008: MINUS
71009: PUSH
71010: LD_INT 0
71012: LESS
71013: IFFALSE 71025
// min_x := 0 else
71015: LD_ADDR_VAR 0 8
71019: PUSH
71020: LD_INT 0
71022: ST_TO_ADDR
71023: GO 71041
// min_x := x - r ;
71025: LD_ADDR_VAR 0 8
71029: PUSH
71030: LD_VAR 0 1
71034: PUSH
71035: LD_VAR 0 3
71039: MINUS
71040: ST_TO_ADDR
// if y - r < 0 then
71041: LD_VAR 0 2
71045: PUSH
71046: LD_VAR 0 3
71050: MINUS
71051: PUSH
71052: LD_INT 0
71054: LESS
71055: IFFALSE 71067
// min_y := 0 else
71057: LD_ADDR_VAR 0 7
71061: PUSH
71062: LD_INT 0
71064: ST_TO_ADDR
71065: GO 71083
// min_y := y - r ;
71067: LD_ADDR_VAR 0 7
71071: PUSH
71072: LD_VAR 0 2
71076: PUSH
71077: LD_VAR 0 3
71081: MINUS
71082: ST_TO_ADDR
// max_x := x + r ;
71083: LD_ADDR_VAR 0 9
71087: PUSH
71088: LD_VAR 0 1
71092: PUSH
71093: LD_VAR 0 3
71097: PLUS
71098: ST_TO_ADDR
// max_y := y + r ;
71099: LD_ADDR_VAR 0 10
71103: PUSH
71104: LD_VAR 0 2
71108: PUSH
71109: LD_VAR 0 3
71113: PLUS
71114: ST_TO_ADDR
// for _x = min_x to max_x do
71115: LD_ADDR_VAR 0 5
71119: PUSH
71120: DOUBLE
71121: LD_VAR 0 8
71125: DEC
71126: ST_TO_ADDR
71127: LD_VAR 0 9
71131: PUSH
71132: FOR_TO
71133: IFFALSE 71234
// for _y = min_y to max_y do
71135: LD_ADDR_VAR 0 6
71139: PUSH
71140: DOUBLE
71141: LD_VAR 0 7
71145: DEC
71146: ST_TO_ADDR
71147: LD_VAR 0 10
71151: PUSH
71152: FOR_TO
71153: IFFALSE 71230
// begin if not ValidHex ( _x , _y ) then
71155: LD_VAR 0 5
71159: PPUSH
71160: LD_VAR 0 6
71164: PPUSH
71165: CALL_OW 488
71169: NOT
71170: IFFALSE 71174
// continue ;
71172: GO 71152
// if GetResourceTypeXY ( _x , _y ) then
71174: LD_VAR 0 5
71178: PPUSH
71179: LD_VAR 0 6
71183: PPUSH
71184: CALL_OW 283
71188: IFFALSE 71228
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71190: LD_ADDR_VAR 0 4
71194: PUSH
71195: LD_VAR 0 4
71199: PPUSH
71200: LD_VAR 0 4
71204: PUSH
71205: LD_INT 1
71207: PLUS
71208: PPUSH
71209: LD_VAR 0 5
71213: PUSH
71214: LD_VAR 0 6
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PPUSH
71223: CALL_OW 1
71227: ST_TO_ADDR
// end ;
71228: GO 71152
71230: POP
71231: POP
71232: GO 71132
71234: POP
71235: POP
// end ;
71236: LD_VAR 0 4
71240: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71241: LD_INT 0
71243: PPUSH
71244: PPUSH
71245: PPUSH
71246: PPUSH
71247: PPUSH
71248: PPUSH
71249: PPUSH
71250: PPUSH
// if not units then
71251: LD_VAR 0 1
71255: NOT
71256: IFFALSE 71260
// exit ;
71258: GO 71786
// result := UnitFilter ( units , [ f_ok ] ) ;
71260: LD_ADDR_VAR 0 3
71264: PUSH
71265: LD_VAR 0 1
71269: PPUSH
71270: LD_INT 50
71272: PUSH
71273: EMPTY
71274: LIST
71275: PPUSH
71276: CALL_OW 72
71280: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71281: LD_ADDR_VAR 0 8
71285: PUSH
71286: LD_VAR 0 1
71290: PUSH
71291: LD_INT 1
71293: ARRAY
71294: PPUSH
71295: CALL_OW 255
71299: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71300: LD_ADDR_VAR 0 10
71304: PUSH
71305: LD_INT 29
71307: PUSH
71308: LD_EXP 30
71312: PUSH
71313: LD_INT 49
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: LIST
71320: ST_TO_ADDR
// if not result then
71321: LD_VAR 0 3
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71786
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71330: LD_ADDR_VAR 0 5
71334: PUSH
71335: LD_INT 81
71337: PUSH
71338: LD_VAR 0 8
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PPUSH
71347: CALL_OW 69
71351: ST_TO_ADDR
// for i in result do
71352: LD_ADDR_VAR 0 4
71356: PUSH
71357: LD_VAR 0 3
71361: PUSH
71362: FOR_IN
71363: IFFALSE 71784
// begin tag := GetTag ( i ) + 1 ;
71365: LD_ADDR_VAR 0 9
71369: PUSH
71370: LD_VAR 0 4
71374: PPUSH
71375: CALL_OW 110
71379: PUSH
71380: LD_INT 1
71382: PLUS
71383: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71384: LD_ADDR_VAR 0 7
71388: PUSH
71389: LD_VAR 0 4
71393: PPUSH
71394: CALL_OW 250
71398: PPUSH
71399: LD_VAR 0 4
71403: PPUSH
71404: CALL_OW 251
71408: PPUSH
71409: LD_INT 6
71411: PPUSH
71412: CALL 70983 0 3
71416: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71417: LD_VAR 0 4
71421: PPUSH
71422: CALL_OW 247
71426: PUSH
71427: LD_INT 2
71429: EQUAL
71430: PUSH
71431: LD_VAR 0 7
71435: AND
71436: PUSH
71437: LD_VAR 0 4
71441: PPUSH
71442: CALL_OW 264
71446: PUSH
71447: LD_VAR 0 10
71451: IN
71452: NOT
71453: AND
71454: IFFALSE 71493
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71456: LD_VAR 0 4
71460: PPUSH
71461: LD_VAR 0 7
71465: PUSH
71466: LD_INT 1
71468: ARRAY
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: PPUSH
71474: LD_VAR 0 7
71478: PUSH
71479: LD_INT 1
71481: ARRAY
71482: PUSH
71483: LD_INT 2
71485: ARRAY
71486: PPUSH
71487: CALL_OW 116
71491: GO 71782
// if path > tag then
71493: LD_VAR 0 2
71497: PUSH
71498: LD_VAR 0 9
71502: GREATER
71503: IFFALSE 71711
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71505: LD_ADDR_VAR 0 6
71509: PUSH
71510: LD_VAR 0 5
71514: PPUSH
71515: LD_INT 91
71517: PUSH
71518: LD_VAR 0 4
71522: PUSH
71523: LD_INT 8
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: LIST
71530: PPUSH
71531: CALL_OW 72
71535: ST_TO_ADDR
// if nearEnemy then
71536: LD_VAR 0 6
71540: IFFALSE 71609
// begin if GetWeapon ( i ) = ru_time_lapser then
71542: LD_VAR 0 4
71546: PPUSH
71547: CALL_OW 264
71551: PUSH
71552: LD_INT 49
71554: EQUAL
71555: IFFALSE 71583
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71557: LD_VAR 0 4
71561: PPUSH
71562: LD_VAR 0 6
71566: PPUSH
71567: LD_VAR 0 4
71571: PPUSH
71572: CALL_OW 74
71576: PPUSH
71577: CALL_OW 112
71581: GO 71607
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71583: LD_VAR 0 4
71587: PPUSH
71588: LD_VAR 0 6
71592: PPUSH
71593: LD_VAR 0 4
71597: PPUSH
71598: CALL_OW 74
71602: PPUSH
71603: CALL_OW 115
// end else
71607: GO 71709
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71609: LD_VAR 0 4
71613: PPUSH
71614: LD_VAR 0 2
71618: PUSH
71619: LD_VAR 0 9
71623: ARRAY
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PPUSH
71629: LD_VAR 0 2
71633: PUSH
71634: LD_VAR 0 9
71638: ARRAY
71639: PUSH
71640: LD_INT 2
71642: ARRAY
71643: PPUSH
71644: CALL_OW 297
71648: PUSH
71649: LD_INT 6
71651: GREATER
71652: IFFALSE 71695
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71654: LD_VAR 0 4
71658: PPUSH
71659: LD_VAR 0 2
71663: PUSH
71664: LD_VAR 0 9
71668: ARRAY
71669: PUSH
71670: LD_INT 1
71672: ARRAY
71673: PPUSH
71674: LD_VAR 0 2
71678: PUSH
71679: LD_VAR 0 9
71683: ARRAY
71684: PUSH
71685: LD_INT 2
71687: ARRAY
71688: PPUSH
71689: CALL_OW 114
71693: GO 71709
// SetTag ( i , tag ) ;
71695: LD_VAR 0 4
71699: PPUSH
71700: LD_VAR 0 9
71704: PPUSH
71705: CALL_OW 109
// end else
71709: GO 71782
// if enemy then
71711: LD_VAR 0 5
71715: IFFALSE 71782
// begin if GetWeapon ( i ) = ru_time_lapser then
71717: LD_VAR 0 4
71721: PPUSH
71722: CALL_OW 264
71726: PUSH
71727: LD_INT 49
71729: EQUAL
71730: IFFALSE 71758
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71732: LD_VAR 0 4
71736: PPUSH
71737: LD_VAR 0 5
71741: PPUSH
71742: LD_VAR 0 4
71746: PPUSH
71747: CALL_OW 74
71751: PPUSH
71752: CALL_OW 112
71756: GO 71782
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71758: LD_VAR 0 4
71762: PPUSH
71763: LD_VAR 0 5
71767: PPUSH
71768: LD_VAR 0 4
71772: PPUSH
71773: CALL_OW 74
71777: PPUSH
71778: CALL_OW 115
// end ; end ;
71782: GO 71362
71784: POP
71785: POP
// end ;
71786: LD_VAR 0 3
71790: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71791: LD_INT 0
71793: PPUSH
71794: PPUSH
71795: PPUSH
// if not unit or IsInUnit ( unit ) then
71796: LD_VAR 0 1
71800: NOT
71801: PUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 310
71811: OR
71812: IFFALSE 71816
// exit ;
71814: GO 71907
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71816: LD_ADDR_VAR 0 4
71820: PUSH
71821: LD_VAR 0 1
71825: PPUSH
71826: CALL_OW 250
71830: PPUSH
71831: LD_VAR 0 2
71835: PPUSH
71836: LD_INT 1
71838: PPUSH
71839: CALL_OW 272
71843: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71844: LD_ADDR_VAR 0 5
71848: PUSH
71849: LD_VAR 0 1
71853: PPUSH
71854: CALL_OW 251
71858: PPUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: LD_INT 1
71866: PPUSH
71867: CALL_OW 273
71871: ST_TO_ADDR
// if ValidHex ( x , y ) then
71872: LD_VAR 0 4
71876: PPUSH
71877: LD_VAR 0 5
71881: PPUSH
71882: CALL_OW 488
71886: IFFALSE 71907
// ComTurnXY ( unit , x , y ) ;
71888: LD_VAR 0 1
71892: PPUSH
71893: LD_VAR 0 4
71897: PPUSH
71898: LD_VAR 0 5
71902: PPUSH
71903: CALL_OW 118
// end ;
71907: LD_VAR 0 3
71911: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71912: LD_INT 0
71914: PPUSH
71915: PPUSH
// result := false ;
71916: LD_ADDR_VAR 0 3
71920: PUSH
71921: LD_INT 0
71923: ST_TO_ADDR
// if not units then
71924: LD_VAR 0 2
71928: NOT
71929: IFFALSE 71933
// exit ;
71931: GO 71978
// for i in units do
71933: LD_ADDR_VAR 0 4
71937: PUSH
71938: LD_VAR 0 2
71942: PUSH
71943: FOR_IN
71944: IFFALSE 71976
// if See ( side , i ) then
71946: LD_VAR 0 1
71950: PPUSH
71951: LD_VAR 0 4
71955: PPUSH
71956: CALL_OW 292
71960: IFFALSE 71974
// begin result := true ;
71962: LD_ADDR_VAR 0 3
71966: PUSH
71967: LD_INT 1
71969: ST_TO_ADDR
// exit ;
71970: POP
71971: POP
71972: GO 71978
// end ;
71974: GO 71943
71976: POP
71977: POP
// end ;
71978: LD_VAR 0 3
71982: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71983: LD_INT 0
71985: PPUSH
71986: PPUSH
71987: PPUSH
71988: PPUSH
// if not unit or not points then
71989: LD_VAR 0 1
71993: NOT
71994: PUSH
71995: LD_VAR 0 2
71999: NOT
72000: OR
72001: IFFALSE 72005
// exit ;
72003: GO 72095
// dist := 99999 ;
72005: LD_ADDR_VAR 0 5
72009: PUSH
72010: LD_INT 99999
72012: ST_TO_ADDR
// for i in points do
72013: LD_ADDR_VAR 0 4
72017: PUSH
72018: LD_VAR 0 2
72022: PUSH
72023: FOR_IN
72024: IFFALSE 72093
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72026: LD_ADDR_VAR 0 6
72030: PUSH
72031: LD_VAR 0 1
72035: PPUSH
72036: LD_VAR 0 4
72040: PUSH
72041: LD_INT 1
72043: ARRAY
72044: PPUSH
72045: LD_VAR 0 4
72049: PUSH
72050: LD_INT 2
72052: ARRAY
72053: PPUSH
72054: CALL_OW 297
72058: ST_TO_ADDR
// if tmpDist < dist then
72059: LD_VAR 0 6
72063: PUSH
72064: LD_VAR 0 5
72068: LESS
72069: IFFALSE 72091
// begin result := i ;
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: LD_VAR 0 4
72080: ST_TO_ADDR
// dist := tmpDist ;
72081: LD_ADDR_VAR 0 5
72085: PUSH
72086: LD_VAR 0 6
72090: ST_TO_ADDR
// end ; end ;
72091: GO 72023
72093: POP
72094: POP
// end ;
72095: LD_VAR 0 3
72099: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72100: LD_INT 0
72102: PPUSH
// uc_side := side ;
72103: LD_ADDR_OWVAR 20
72107: PUSH
72108: LD_VAR 0 1
72112: ST_TO_ADDR
// uc_nation := 3 ;
72113: LD_ADDR_OWVAR 21
72117: PUSH
72118: LD_INT 3
72120: ST_TO_ADDR
// vc_chassis := 25 ;
72121: LD_ADDR_OWVAR 37
72125: PUSH
72126: LD_INT 25
72128: ST_TO_ADDR
// vc_engine := engine_siberite ;
72129: LD_ADDR_OWVAR 39
72133: PUSH
72134: LD_INT 3
72136: ST_TO_ADDR
// vc_control := control_computer ;
72137: LD_ADDR_OWVAR 38
72141: PUSH
72142: LD_INT 3
72144: ST_TO_ADDR
// vc_weapon := 59 ;
72145: LD_ADDR_OWVAR 40
72149: PUSH
72150: LD_INT 59
72152: ST_TO_ADDR
// result := CreateVehicle ;
72153: LD_ADDR_VAR 0 5
72157: PUSH
72158: CALL_OW 45
72162: ST_TO_ADDR
// SetDir ( result , d ) ;
72163: LD_VAR 0 5
72167: PPUSH
72168: LD_VAR 0 4
72172: PPUSH
72173: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72177: LD_VAR 0 5
72181: PPUSH
72182: LD_VAR 0 2
72186: PPUSH
72187: LD_VAR 0 3
72191: PPUSH
72192: LD_INT 0
72194: PPUSH
72195: CALL_OW 48
// end ;
72199: LD_VAR 0 5
72203: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72204: LD_INT 0
72206: PPUSH
72207: PPUSH
72208: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72209: LD_ADDR_VAR 0 2
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: LD_INT 0
72222: PUSH
72223: LD_INT 0
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72232: LD_VAR 0 1
72236: NOT
72237: PUSH
72238: LD_VAR 0 1
72242: PPUSH
72243: CALL_OW 264
72247: PUSH
72248: LD_INT 12
72250: PUSH
72251: LD_INT 51
72253: PUSH
72254: LD_INT 32
72256: PUSH
72257: LD_EXP 27
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: IN
72268: NOT
72269: OR
72270: IFFALSE 72274
// exit ;
72272: GO 72372
// for i := 1 to 3 do
72274: LD_ADDR_VAR 0 3
72278: PUSH
72279: DOUBLE
72280: LD_INT 1
72282: DEC
72283: ST_TO_ADDR
72284: LD_INT 3
72286: PUSH
72287: FOR_TO
72288: IFFALSE 72370
// begin tmp := GetCargo ( cargo , i ) ;
72290: LD_ADDR_VAR 0 4
72294: PUSH
72295: LD_VAR 0 1
72299: PPUSH
72300: LD_VAR 0 3
72304: PPUSH
72305: CALL_OW 289
72309: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72310: LD_ADDR_VAR 0 2
72314: PUSH
72315: LD_VAR 0 2
72319: PPUSH
72320: LD_VAR 0 3
72324: PPUSH
72325: LD_VAR 0 4
72329: PPUSH
72330: CALL_OW 1
72334: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72335: LD_ADDR_VAR 0 2
72339: PUSH
72340: LD_VAR 0 2
72344: PPUSH
72345: LD_INT 4
72347: PPUSH
72348: LD_VAR 0 2
72352: PUSH
72353: LD_INT 4
72355: ARRAY
72356: PUSH
72357: LD_VAR 0 4
72361: PLUS
72362: PPUSH
72363: CALL_OW 1
72367: ST_TO_ADDR
// end ;
72368: GO 72287
72370: POP
72371: POP
// end ;
72372: LD_VAR 0 2
72376: RET
// export function Length ( array ) ; begin
72377: LD_INT 0
72379: PPUSH
// result := array + 0 ;
72380: LD_ADDR_VAR 0 2
72384: PUSH
72385: LD_VAR 0 1
72389: PUSH
72390: LD_INT 0
72392: PLUS
72393: ST_TO_ADDR
// end ;
72394: LD_VAR 0 2
72398: RET
// export function PrepareArray ( array ) ; begin
72399: LD_INT 0
72401: PPUSH
// result := array diff 0 ;
72402: LD_ADDR_VAR 0 2
72406: PUSH
72407: LD_VAR 0 1
72411: PUSH
72412: LD_INT 0
72414: DIFF
72415: ST_TO_ADDR
// if not result [ 1 ] then
72416: LD_VAR 0 2
72420: PUSH
72421: LD_INT 1
72423: ARRAY
72424: NOT
72425: IFFALSE 72445
// result := Delete ( result , 1 ) ;
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: LD_VAR 0 2
72436: PPUSH
72437: LD_INT 1
72439: PPUSH
72440: CALL_OW 3
72444: ST_TO_ADDR
// end ; end_of_file
72445: LD_VAR 0 2
72449: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72450: LD_VAR 0 1
72454: PUSH
72455: LD_INT 200
72457: DOUBLE
72458: GREATEREQUAL
72459: IFFALSE 72467
72461: LD_INT 299
72463: DOUBLE
72464: LESSEQUAL
72465: IFTRUE 72469
72467: GO 72501
72469: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72470: LD_VAR 0 1
72474: PPUSH
72475: LD_VAR 0 2
72479: PPUSH
72480: LD_VAR 0 3
72484: PPUSH
72485: LD_VAR 0 4
72489: PPUSH
72490: LD_VAR 0 5
72494: PPUSH
72495: CALL 27301 0 5
72499: GO 72578
72501: LD_INT 300
72503: DOUBLE
72504: GREATEREQUAL
72505: IFFALSE 72513
72507: LD_INT 399
72509: DOUBLE
72510: LESSEQUAL
72511: IFTRUE 72515
72513: GO 72577
72515: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72516: LD_VAR 0 1
72520: PPUSH
72521: LD_VAR 0 2
72525: PPUSH
72526: LD_VAR 0 3
72530: PPUSH
72531: LD_VAR 0 4
72535: PPUSH
72536: LD_VAR 0 5
72540: PPUSH
72541: LD_VAR 0 6
72545: PPUSH
72546: LD_VAR 0 7
72550: PPUSH
72551: LD_VAR 0 8
72555: PPUSH
72556: LD_VAR 0 9
72560: PPUSH
72561: LD_VAR 0 10
72565: PPUSH
72566: LD_VAR 0 11
72570: PPUSH
72571: CALL 23630 0 11
72575: GO 72578
72577: POP
// end ;
72578: PPOPN 11
72580: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72581: LD_VAR 0 1
72585: PPUSH
72586: LD_VAR 0 2
72590: PPUSH
72591: LD_VAR 0 3
72595: PPUSH
72596: LD_VAR 0 4
72600: PPUSH
72601: LD_VAR 0 5
72605: PPUSH
72606: CALL 27037 0 5
// end ; end_of_file
72610: PPOPN 5
72612: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72613: LD_VAR 0 1
72617: PPUSH
72618: LD_VAR 0 2
72622: PPUSH
72623: LD_VAR 0 3
72627: PPUSH
72628: LD_VAR 0 4
72632: PPUSH
72633: LD_VAR 0 5
72637: PPUSH
72638: LD_VAR 0 6
72642: PPUSH
72643: CALL 11323 0 6
// end ;
72647: PPOPN 6
72649: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72650: LD_INT 0
72652: PPUSH
// begin if not units then
72653: LD_VAR 0 1
72657: NOT
72658: IFFALSE 72662
// exit ;
72660: GO 72662
// end ;
72662: PPOPN 7
72664: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72665: CALL 11294 0 0
// end ;
72669: PPOPN 1
72671: END
