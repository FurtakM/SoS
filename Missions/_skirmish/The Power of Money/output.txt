// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10689 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8417 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10308 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10565 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10565 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10565 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10565 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7234 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7229
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7229
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7228
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7023
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: CALL_OW 2
6998: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_INT 17
7006: PPUSH
7007: LD_INT 9
7009: PPUSH
7010: CALL_OW 111
// Wait ( 0 0$01 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// end ;
7021: GO 6914
7023: POP
7024: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 6
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7224
// begin vc_chassis := ar_half_tracked ;
7058: LD_ADDR_OWVAR 37
7062: PUSH
7063: LD_INT 14
7065: ST_TO_ADDR
// vc_engine := engine_combustion ;
7066: LD_ADDR_OWVAR 39
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// vc_control := control_manual ;
7074: LD_ADDR_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_heavy_mortar ] [ Rand ( 1 , 5 ) ] ;
7082: LD_ADDR_OWVAR 40
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 27
7092: PUSH
7093: LD_INT 28
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_EXP 31
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 5
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// veh := CreateVehicle ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: CALL_OW 45
7132: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7133: LD_VAR 0 5
7137: PPUSH
7138: LD_INT 16
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7163: CALL_OW 44
7167: PPUSH
7168: LD_VAR 0 5
7172: PPUSH
7173: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7177: LD_ADDR_EXP 11
7181: PUSH
7182: LD_EXP 11
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7200: LD_VAR 0 5
7204: PPUSH
7205: LD_INT 125
7207: PPUSH
7208: LD_INT 31
7210: PPUSH
7211: CALL_OW 111
// Wait ( 0 0$02 ) ;
7215: LD_INT 70
7217: PPUSH
7218: CALL_OW 67
// end ;
7222: GO 7055
7224: POP
7225: POP
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: LD_VAR 0 2
7233: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// areas := [ river1 , river2 ] ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_INT 14
7248: PUSH
7249: LD_INT 15
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: LD_INT 6
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_OWVAR 67
7279: ARRAY
7280: ST_TO_ADDR
// uc_side := 2 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 2
7288: ST_TO_ADDR
// uc_nation := 2 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_gallery :=  ;
7305: LD_ADDR_OWVAR 33
7309: PUSH
7310: LD_STRING 
7312: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_INT 1
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: ARRAY
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7480
// begin vc_chassis := ar_hovercraft ;
7346: LD_ADDR_OWVAR 37
7350: PUSH
7351: LD_INT 11
7353: ST_TO_ADDR
// vc_engine := engine_solar ;
7354: LD_ADDR_OWVAR 39
7358: PUSH
7359: LD_INT 2
7361: ST_TO_ADDR
// vc_control := control_manual ;
7362: LD_ADDR_OWVAR 38
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7370: LD_ADDR_OWVAR 40
7374: PUSH
7375: LD_INT 24
7377: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7378: LD_ADDR_OWVAR 41
7382: PUSH
7383: LD_INT 100
7385: ST_TO_ADDR
// un := CreateVehicle ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: CALL_OW 45
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 121
7403: PPUSH
7404: LD_INT 69
7406: PPUSH
7407: LD_INT 4
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 3
7441: PPUSH
7442: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7446: LD_ADDR_EXP 9
7450: PUSH
7451: LD_EXP 9
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
// end ;
7478: GO 7343
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 1
7486: RET
// every 0 0$01 trigger riv do var i , c ;
7487: LD_EXP 9
7491: IFFALSE 7926
7493: GO 7495
7495: DISABLE
7496: LD_INT 0
7498: PPUSH
7499: PPUSH
// begin enable ;
7500: ENABLE
// for i = riv downto 1 do
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: DOUBLE
7507: LD_EXP 9
7511: INC
7512: ST_TO_ADDR
7513: LD_INT 1
7515: PUSH
7516: FOR_DOWNTO
7517: IFFALSE 7924
// begin if not riv [ i ] [ 1 ] then
7519: LD_EXP 9
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: NOT
7534: IFFALSE 7556
// begin riv := Delete ( riv , 1 ) ;
7536: LD_ADDR_EXP 9
7540: PUSH
7541: LD_EXP 9
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// break ;
7554: GO 7924
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7556: LD_EXP 9
7560: PUSH
7561: LD_VAR 0 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 314
7575: NOT
7576: IFFALSE 7644
// begin if riv [ i ] [ 2 ] = 1 then
7578: LD_EXP 9
7582: PUSH
7583: LD_VAR 0 1
7587: ARRAY
7588: PUSH
7589: LD_INT 2
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// c := 2 else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ST_TO_ADDR
7606: GO 7616
// c := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7616: LD_ADDR_EXP 9
7620: PUSH
7621: LD_EXP 9
7625: PPUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: CALL 10308 0 4
7643: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7644: LD_EXP 9
7648: PUSH
7649: LD_VAR 0 1
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_INT 14
7661: PUSH
7662: LD_INT 15
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_EXP 9
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: ARRAY
7684: PPUSH
7685: CALL_OW 308
7689: NOT
7690: IFFALSE 7922
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7692: LD_EXP 9
7696: PUSH
7697: LD_VAR 0 1
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 261
7711: PUSH
7712: LD_INT 50
7714: LESS
7715: IFFALSE 7739
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 67
7734: PPUSH
7735: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7739: LD_EXP 9
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: PPUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: CALL_OW 74
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 9
7796: LESS
7797: IFFALSE 7855
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7799: LD_EXP 9
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: PPUSH
7829: LD_EXP 9
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 74
7848: PPUSH
7849: CALL_OW 115
7853: GO 7922
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7855: LD_EXP 9
7859: PUSH
7860: LD_VAR 0 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PPUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_EXP 9
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: PUSH
7891: LD_INT 2
7893: ARRAY
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7900: LD_EXP 9
7904: PUSH
7905: LD_VAR 0 1
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 350
7917: PPUSH
7918: CALL_OW 202
// end ; end ; end ;
7922: GO 7516
7924: POP
7925: POP
// end ;
7926: PPOPN 2
7928: END
// every 10 10$00 trigger convoy_start do var i , un ;
7929: LD_EXP 7
7933: IFFALSE 8054
7935: GO 7937
7937: DISABLE
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
// begin enable ;
7942: ENABLE
// for i = 1 to 2 do
7943: LD_ADDR_VAR 0 1
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8052
// begin uc_side := 2 ;
7959: LD_ADDR_OWVAR 20
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// uc_nation := 2 ;
7967: LD_ADDR_OWVAR 21
7971: PUSH
7972: LD_INT 2
7974: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7975: LD_INT 0
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: CALL_OW 380
// un := CreateHuman ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: CALL_OW 44
7997: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 10
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8016: LD_VAR 0 2
8020: PPUSH
8021: LD_INT 24
8023: PPUSH
8024: LD_INT 36
8026: PPUSH
8027: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8031: LD_VAR 0 2
8035: PPUSH
8036: LD_INT 9
8038: PPUSH
8039: CALL_OW 173
// Wait ( 0 0$02 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7956
8052: POP
8053: POP
// end ;
8054: PPOPN 2
8056: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8057: LD_INT 22
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: IFFALSE 8383
8073: GO 8075
8075: DISABLE
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// begin enable ;
8080: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PUSH
8101: LD_EXP 11
8105: DIFF
8106: ST_TO_ADDR
// if rest then
8107: LD_VAR 0 2
8111: IFFALSE 8183
// for i in rest do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8181
// if GetClass ( i ) = 3 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 257
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: IFFALSE 8179
// begin if not IsInArea ( i , ar2 ) then
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 17
8148: PPUSH
8149: CALL_OW 308
8153: NOT
8154: IFFALSE 8170
// ComMoveToArea ( i , ar2 ) else
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 17
8163: PPUSH
8164: CALL_OW 113
8168: GO 8179
// RemoveUnit ( i ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL_OW 64
// end ;
8179: GO 8123
8181: POP
8182: POP
// if ar_force then
8183: LD_EXP 11
8187: IFFALSE 8383
// begin if ar_force > 15 then
8189: LD_EXP 11
8193: PUSH
8194: LD_INT 15
8196: GREATER
8197: IFFALSE 8214
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8199: LD_EXP 11
8203: PPUSH
8204: LD_INT 58
8206: PPUSH
8207: LD_INT 51
8209: PPUSH
8210: CALL_OW 114
// for i in ar_force do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 11
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8381
// begin if GetClass ( i ) = class_soldier then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8332
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL 10565 0 1
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IN
8267: IFFALSE 8313
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL 10565 0 1
8283: PPUSH
8284: CALL_OW 250
8288: PPUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL 10565 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 132
8311: GO 8332
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL 10565 0 1
8327: PPUSH
8328: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 257
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: NOT
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 314
8356: NOT
8357: AND
8358: IFFALSE 8379
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL 10565 0 1
8374: PPUSH
8375: CALL_OW 115
// end ;
8379: GO 8224
8381: POP
8382: POP
// end ; end ;
8383: PPOPN 2
8385: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8386: LD_INT 9
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: IFFALSE 8416
8405: GO 8407
8407: DISABLE
// medal2 := false ; end_of_file
8408: LD_ADDR_EXP 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
8416: END
// export function Action ; begin
8417: LD_INT 0
8419: PPUSH
// case Query ( info ) of 1 :
8420: LD_STRING info
8422: PPUSH
8423: CALL_OW 97
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8439
8436: POP
// ; end ;
8437: GO 8440
8439: POP
// ChangeMissionObjectives ( PM_1 ) ;
8440: LD_STRING PM_1
8442: PPUSH
8443: CALL_OW 337
// SaveForQuickRestart ;
8447: CALL_OW 22
// end ;
8451: LD_VAR 0 1
8455: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8456: LD_INT 50
8458: PPUSH
8459: CALL_OW 255
8463: PUSH
8464: LD_INT 3
8466: EQUAL
8467: IFFALSE 8748
8469: GO 8471
8471: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8472: LD_EXP 16
8476: PPUSH
8477: LD_STRING DPM_S1
8479: PPUSH
8480: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8484: LD_EXP 17
8488: PPUSH
8489: LD_STRING DPM_P1
8491: PPUSH
8492: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8496: LD_EXP 16
8500: PPUSH
8501: LD_STRING DPM_S2
8503: PPUSH
8504: CALL_OW 88
// SaveForQuickRestart ;
8508: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8512: LD_STRING PM_2
8514: PPUSH
8515: CALL_OW 337
// Wait ( 2 2$30 ) ;
8519: LD_INT 5250
8521: PPUSH
8522: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8526: LD_INT 117
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 84
// Convoy ( 1 ) ;
8536: LD_INT 1
8538: PPUSH
8539: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8543: LD_INT 1050
8545: PPUSH
8546: CALL_OW 67
// Convoy ( 2 ) ;
8550: LD_INT 2
8552: PPUSH
8553: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8557: LD_INT 3150
8559: PPUSH
8560: CALL_OW 67
// Convoy ( 3 ) ;
8564: LD_INT 3
8566: PPUSH
8567: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8571: LD_INT 8400
8573: PPUSH
8574: CALL_OW 67
// convoy_start := true ;
8578: LD_ADDR_EXP 7
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareArabian ;
8586: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8590: LD_INT 1
8592: PPUSH
8593: CALL 6376 0 1
// while ( convoy_start ) do
8597: LD_EXP 7
8601: IFFALSE 8748
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8603: LD_INT 4200
8605: PPUSH
8606: LD_INT 7350
8608: PPUSH
8609: CALL_OW 12
8613: PPUSH
8614: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8618: LD_INT 22
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: PUSH
8633: LD_INT 20
8635: LESS
8636: IFFALSE 8653
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8653: LD_INT 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL_OW 12
8663: PPUSH
8664: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8668: LD_ADDR_EXP 13
8672: PUSH
8673: LD_EXP 13
8677: PUSH
8678: LD_INT 1
8680: PLUS
8681: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8682: LD_EXP 13
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: LD_OWVAR 67
8705: ARRAY
8706: MOD
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8746
// begin Wait ( 1 1$20 ) ;
8713: LD_INT 2800
8715: PPUSH
8716: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8720: LD_EXP 25
8724: PPUSH
8725: LD_STRING DPM_F2
8727: PPUSH
8728: CALL_OW 94
// PrepareAttack ( 3 ) ;
8732: LD_INT 3
8734: PPUSH
8735: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8739: LD_INT 6300
8741: PPUSH
8742: CALL_OW 67
// end ; end ;
8746: GO 8597
// end ;
8748: END
// every 0 0$1 trigger safeCounter > 30 do
8749: LD_EXP 15
8753: PUSH
8754: LD_INT 30
8756: GREATER
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8762: LD_STRING ACH_SAFE
8764: PPUSH
8765: CALL_OW 543
8769: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8770: LD_EXP 13
8774: PUSH
8775: LD_INT 3
8777: MOD
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8807: LD_EXP 25
8811: PPUSH
8812: LD_STRING DPM_F3
8814: PPUSH
8815: CALL_OW 94
8819: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8820: LD_EXP 13
8824: PUSH
8825: LD_INT 5
8827: MOD
8828: PUSH
8829: LD_INT 0
8831: EQUAL
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: AND
8852: IFFALSE 8869
8854: GO 8856
8856: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_STRING DPM_F4
8864: PPUSH
8865: CALL_OW 94
8869: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8870: LD_EXP 7
8874: PUSH
8875: LD_EXP 13
8879: PUSH
8880: LD_INT 8
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: LD_INT 10
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: GREATEREQUAL
8900: AND
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 6
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PUSH
8917: LD_INT 0
8919: EQUAL
8920: AND
8921: IFFALSE 9020
8923: GO 8925
8925: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8926: LD_EXP 17
8930: PPUSH
8931: LD_STRING DPM_PEnd
8933: PPUSH
8934: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8938: LD_STRING med1
8940: PPUSH
8941: LD_EXP 3
8945: PPUSH
8946: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8950: LD_STRING med2
8952: PPUSH
8953: LD_EXP 4
8957: PPUSH
8958: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8962: LD_EXP 8
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: GREATEREQUAL
8987: IFFALSE 8997
// medal3 := false ;
8989: LD_ADDR_EXP 5
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8997: LD_STRING med3
8999: PPUSH
9000: LD_EXP 5
9004: PPUSH
9005: CALL_OW 101
// GiveMedals ( MAIN ) ;
9009: LD_STRING MAIN
9011: PPUSH
9012: CALL_OW 102
// YouWin ;
9016: CALL_OW 103
// end ;
9020: END
// every 4 4$10 trigger convoy_start do var i ;
9021: LD_EXP 7
9025: IFFALSE 9391
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin DialogueOn ;
9033: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9037: LD_EXP 17
9041: PPUSH
9042: LD_STRING DPM_PHelp
9044: PPUSH
9045: CALL_OW 94
// DialogueOff ;
9049: CALL_OW 7
// Wait ( 0 0$30 ) ;
9053: LD_INT 1050
9055: PPUSH
9056: CALL_OW 67
// Randomize ;
9060: CALL_OW 10
// uc_side := 3 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 3
9071: ST_TO_ADDR
// uc_nation := 3 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 3
9079: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 5
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_OWVAR 67
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9151
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9113: LD_INT 0
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9134: CALL_OW 44
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: CALL_OW 49
// end ;
9149: GO 9110
9151: POP
9152: POP
// vc_chassis := ru_heavy_wheeled ;
9153: LD_ADDR_OWVAR 37
9157: PUSH
9158: LD_INT 23
9160: ST_TO_ADDR
// vc_engine := engine_combustion ;
9161: LD_ADDR_OWVAR 39
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// vc_control := control_manual ;
9169: LD_ADDR_OWVAR 38
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// vc_weapon := 89 ;
9177: LD_ADDR_OWVAR 40
9181: PUSH
9182: LD_INT 89
9184: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9185: LD_ADDR_OWVAR 41
9189: PUSH
9190: LD_INT 88
9192: ST_TO_ADDR
// i := CreateVehicle ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: CALL_OW 45
9202: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 5
9210: PPUSH
9211: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 63
9222: PPUSH
9223: LD_INT 115
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 200
9243: PPUSH
9244: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: LD_INT 5
9256: PPUSH
9257: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9261: CALL_OW 44
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 52
// DialogueOn ;
9275: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9279: LD_INT 169
9281: PPUSH
9282: LD_INT 115
9284: PPUSH
9285: CALL_OW 86
// DWait ( 0 0$01 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9296: LD_INT 63
9298: PPUSH
9299: LD_INT 115
9301: PPUSH
9302: CALL_OW 86
// DWait ( 0 0$01 ) ;
9306: LD_INT 35
9308: PPUSH
9309: CALL_OW 68
// DialogueOff ;
9313: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 57
9324: PPUSH
9325: LD_INT 53
9327: PPUSH
9328: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9332: LD_INT 6300
9334: PPUSH
9335: LD_INT 14700
9337: PPUSH
9338: CALL_OW 12
9342: PPUSH
9343: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9347: LD_EXP 18
9351: PPUSH
9352: LD_INT 86
9354: PPUSH
9355: LD_INT 112
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING DPM_Sa1
9379: PPUSH
9380: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9384: LD_STRING PM_3
9386: PPUSH
9387: CALL_OW 337
// end ;
9391: PPOPN 1
9393: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9394: LD_INT 3
9396: PPUSH
9397: LD_EXP 18
9401: PPUSH
9402: CALL_OW 292
9406: IFFALSE 9455
9408: GO 9410
9410: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9411: LD_EXP 18
9415: PPUSH
9416: LD_STRING DPM_Sa2
9418: PPUSH
9419: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9423: LD_STRING PM_4
9425: PPUSH
9426: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9430: LD_INT 40
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 235
// end ;
9455: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9456: LD_EXP 3
9460: NOT
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_INT 0
9479: EQUAL
9480: AND
9481: IFFALSE 9543
9483: GO 9485
9485: DISABLE
// begin DialogueOn ;
9486: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9490: LD_EXP 16
9494: PPUSH
9495: LD_STRING DPM_S3
9497: PPUSH
9498: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9502: LD_INT 62
9504: PPUSH
9505: LD_INT 113
9507: PPUSH
9508: LD_INT 3
9510: PPUSH
9511: LD_INT 10
9513: PPUSH
9514: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9518: LD_INT 62
9520: PPUSH
9521: LD_INT 113
9523: PPUSH
9524: CALL_OW 84
// dwait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 68
// DialogueOff ;
9535: CALL_OW 7
// CounterAttack ;
9539: CALL 5789 0 0
// end ; end_of_file
9543: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 255
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 9593
// if not us_retreat then
9559: LD_EXP 22
9563: NOT
9564: IFFALSE 9593
// if GetClass ( h ) = 1 then
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 257
9575: PUSH
9576: LD_INT 1
9578: EQUAL
9579: IFFALSE 9593
// ComEnterUnit ( h , us_arm ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 69
9588: PPUSH
9589: CALL_OW 120
// end ;
9593: PPOPN 2
9595: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL 24418 0 1
// if GetSide ( un ) = 1 then
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 255
9614: PUSH
9615: LD_INT 1
9617: EQUAL
9618: IFFALSE 9634
// us_count := us_count + 1 ;
9620: LD_ADDR_EXP 24
9624: PUSH
9625: LD_EXP 24
9629: PUSH
9630: LD_INT 1
9632: PLUS
9633: ST_TO_ADDR
// if un in us_force then
9634: LD_VAR 0 1
9638: PUSH
9639: LD_EXP 12
9643: IN
9644: IFFALSE 9662
// us_force := us_force diff un ;
9646: LD_ADDR_EXP 12
9650: PUSH
9651: LD_EXP 12
9655: PUSH
9656: LD_VAR 0 1
9660: DIFF
9661: ST_TO_ADDR
// if un in ar_force then
9662: LD_VAR 0 1
9666: PUSH
9667: LD_EXP 11
9671: IN
9672: IFFALSE 9690
// ar_force := ar_force diff un ;
9674: LD_ADDR_EXP 11
9678: PUSH
9679: LD_EXP 11
9683: PUSH
9684: LD_VAR 0 1
9688: DIFF
9689: ST_TO_ADDR
// if un = Stolypin then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_EXP 16
9699: EQUAL
9700: IFFALSE 9709
// YouLost ( dead ) ;
9702: LD_STRING dead
9704: PPUSH
9705: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 30
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: IN
9743: IFFALSE 9752
// YouLost ( depot ) ;
9745: LD_STRING depot
9747: PPUSH
9748: CALL_OW 104
// if GetSide ( un ) = 6 then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 6
9764: EQUAL
9765: IFFALSE 9781
// dest_counter := dest_counter + 1 ;
9767: LD_ADDR_EXP 8
9771: PUSH
9772: LD_EXP 8
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: ST_TO_ADDR
// end ;
9781: PPOPN 1
9783: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 9814
// ComMoveXY ( un , 57 , 52 ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 57
9806: PPUSH
9807: LD_INT 52
9809: PPUSH
9810: CALL_OW 111
// end ;
9814: PPOPN 2
9816: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9817: LD_EXP 21
9821: NOT
9822: IFFALSE 9872
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_INT 3
9831: EQUAL
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: EQUAL
9841: AND
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: AND
9861: OR
9862: IFFALSE 9872
// us_alert := true ;
9864: LD_ADDR_EXP 21
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: PUSH
9881: LD_VAR 0 2
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: AND
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 2
9904: PUSH
9905: LD_INT 6
9907: EQUAL
9908: AND
9909: OR
9910: IFFALSE 9919
// YouLost ( alat ) ;
9912: LD_STRING alat
9914: PPUSH
9915: CALL_OW 104
// end ;
9919: PPOPN 2
9921: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PUSH
9932: LD_INT 2
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: IN
9966: AND
9967: IFFALSE 10088
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9969: LD_OWVAR 3
9973: PUSH
9974: LD_VAR 0 1
9978: DIFF
9979: PPUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 74
9989: PPUSH
9990: CALL_OW 255
9994: PUSH
9995: LD_INT 2
9997: NONEQUAL
9998: IFFALSE 10088
// begin Wait ( 0 0$1.3 ) ;
10000: LD_INT 46
10002: PPUSH
10003: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 250
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 251
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PPUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 453
// end ; end ;
10088: PPOPN 1
10090: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: IN
10125: PUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL 10610 0 1
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 2
10143: EQUAL
10144: NOT
10145: AND
10146: IFFALSE 10271
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10148: LD_INT 105
10150: PPUSH
10151: LD_INT 210
10153: PPUSH
10154: CALL_OW 12
10158: PPUSH
10159: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 250
10172: PPUSH
10173: LD_VAR 0 2
10177: PPUSH
10178: CALL_OW 251
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 250
10226: PPUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 251
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 250
10253: PPUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: CALL_OW 251
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 453
// end ; end ;
10271: PPOPN 4
10273: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: CALL 24516 0 3
// end ;
10293: PPOPN 3
10295: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL 24524 0 1
// end ; end_of_file
10305: PPOPN 1
10307: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 2
10327: ARRAY
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL_OW 1
10343: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10344: LD_ADDR_VAR 0 1
10348: PUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 7
10363: PPUSH
10364: CALL_OW 1
10368: ST_TO_ADDR
// result := tab ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 1
10378: ST_TO_ADDR
// end ;
10379: LD_VAR 0 5
10383: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
// if not GetControl ( veh ) = control_manual then
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL_OW 263
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: NOT
10403: IFFALSE 10415
// result := false else
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
10413: GO 10560
// if veh in FilterAllUnits ( [ f_empty ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 58
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: IN
10431: IFFALSE 10443
// result := false else
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
10441: GO 10560
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 55
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: ST_TO_ADDR
// if not filter then
10480: LD_VAR 0 4
10484: NOT
10485: IFFALSE 10497
// result := false else
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
10495: GO 10560
// for i = 1 to filter do
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10558
// if IsDriver ( filter [ i ] ) = veh then
10515: LD_VAR 0 4
10519: PUSH
10520: LD_VAR 0 3
10524: ARRAY
10525: PPUSH
10526: CALL 62361 0 1
10530: PUSH
10531: LD_VAR 0 1
10535: EQUAL
10536: IFFALSE 10556
// begin result := filter [ i ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_VAR 0 3
10552: ARRAY
10553: ST_TO_ADDR
// break ;
10554: GO 10558
// end ;
10556: GO 10512
10558: POP
10559: POP
// end ; end ;
10560: LD_VAR 0 2
10564: RET
// export function FindTarget ( unit ) ; begin
10565: LD_INT 0
10567: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 81
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// end ;
10605: LD_VAR 0 2
10609: RET
// export function NearestUnit ( unit ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_OWVAR 3
10622: PUSH
10623: LD_VAR 0 1
10627: DIFF
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 74
10638: ST_TO_ADDR
// end ; end_of_file
10639: LD_VAR 0 2
10643: RET
// every 12 12$00 do
10644: GO 10646
10646: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 570
10652: PPUSH
10653: LD_INT 350
10655: PPUSH
10656: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10660: LD_INT 10500
10662: PPUSH
10663: LD_INT 21000
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 570
10680: PPUSH
10681: LD_INT 350
10683: PPUSH
10684: CALL_OW 550
// end ;
10688: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
// uc_nation = nation_nature ;
10696: LD_ADDR_OWVAR 21
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// uc_side = 0 ;
10704: LD_ADDR_OWVAR 20
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// l = 0 ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10720: LD_ADDR_OWVAR 24
10724: PUSH
10725: LD_INT 0
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10736: LD_ADDR_OWVAR 35
10740: PUSH
10741: LD_INT 5
10743: NEG
10744: PPUSH
10745: LD_INT 5
10747: PPUSH
10748: CALL_OW 12
10752: ST_TO_ADDR
// hc_gallery =  ;
10753: LD_ADDR_OWVAR 33
10757: PUSH
10758: LD_STRING 
10760: ST_TO_ADDR
// hc_class = class_apeman ;
10761: LD_ADDR_OWVAR 28
10765: PUSH
10766: LD_INT 12
10768: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10769: LD_ADDR_OWVAR 29
10773: PUSH
10774: LD_INT 11
10776: PPUSH
10777: LD_INT 13
10779: PPUSH
10780: CALL_OW 12
10784: PUSH
10785: LD_INT 10
10787: PPUSH
10788: LD_INT 11
10790: PPUSH
10791: CALL_OW 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// hc_sex = sex_male ;
10800: LD_ADDR_OWVAR 27
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10808: LD_ADDR_OWVAR 31
10812: PUSH
10813: LD_INT 0
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 12
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// apeman = CreateHuman ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: CALL_OW 44
10848: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// l = l + 1 ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: LD_VAR 0 6
10875: PUSH
10876: LD_INT 1
10878: PLUS
10879: ST_TO_ADDR
// end until l = num1 ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_VAR 0 1
10889: EQUAL
10890: IFFALSE 10720
// l = 0 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 25
10910: PPUSH
10911: CALL_OW 12
10915: ST_TO_ADDR
// hc_class = class_tiger ;
10916: LD_ADDR_OWVAR 28
10920: PUSH
10921: LD_INT 14
10923: ST_TO_ADDR
// hc_sex = sex_male ;
10924: LD_ADDR_OWVAR 27
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// hc_gallery = sandnature ;
10932: LD_ADDR_OWVAR 33
10936: PUSH
10937: LD_STRING sandnature
10939: ST_TO_ADDR
// hc_face_number = 3 ;
10940: LD_ADDR_OWVAR 34
10944: PUSH
10945: LD_INT 3
10947: ST_TO_ADDR
// tiger = CreateHuman ;
10948: LD_ADDR_VAR 0 8
10952: PUSH
10953: CALL_OW 44
10957: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10958: LD_VAR 0 8
10962: PPUSH
10963: LD_VAR 0 4
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// l = l + 1 ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 6
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: ST_TO_ADDR
// end until l = num2 ;
10989: LD_VAR 0 6
10993: PUSH
10994: LD_VAR 0 2
10998: EQUAL
10999: IFFALSE 10900
// l = 0 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11009: LD_ADDR_OWVAR 28
11013: PUSH
11014: LD_INT 18
11016: ST_TO_ADDR
// hc_gallery = sandnature ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING sandnature
11024: ST_TO_ADDR
// hc_face_number = 1 ;
11025: LD_ADDR_OWVAR 34
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// bird = CreateHuman ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 51
// l = l + 1 ;
11055: LD_ADDR_VAR 0 6
11059: PUSH
11060: LD_VAR 0 6
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: ST_TO_ADDR
// end until l = num3 ;
11069: LD_VAR 0 6
11073: PUSH
11074: LD_VAR 0 3
11078: EQUAL
11079: IFFALSE 11009
// end ; end_of_file
11081: LD_VAR 0 5
11085: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11086: LD_INT 0
11088: PPUSH
// ar_miner := 81 ;
11089: LD_ADDR_EXP 33
11093: PUSH
11094: LD_INT 81
11096: ST_TO_ADDR
// ar_crane := 88 ;
11097: LD_ADDR_EXP 32
11101: PUSH
11102: LD_INT 88
11104: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11105: LD_ADDR_EXP 27
11109: PUSH
11110: LD_INT 89
11112: ST_TO_ADDR
// us_hack := 99 ;
11113: LD_ADDR_EXP 28
11117: PUSH
11118: LD_INT 99
11120: ST_TO_ADDR
// us_artillery := 97 ;
11121: LD_ADDR_EXP 29
11125: PUSH
11126: LD_INT 97
11128: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11129: LD_ADDR_EXP 30
11133: PUSH
11134: LD_INT 91
11136: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11137: LD_ADDR_EXP 31
11141: PUSH
11142: LD_INT 92
11144: ST_TO_ADDR
// ru_radar := 98 ;
11145: LD_ADDR_EXP 26
11149: PUSH
11150: LD_INT 98
11152: ST_TO_ADDR
// tech_Artillery := 80 ;
11153: LD_ADDR_EXP 34
11157: PUSH
11158: LD_INT 80
11160: ST_TO_ADDR
// tech_RadMat := 81 ;
11161: LD_ADDR_EXP 35
11165: PUSH
11166: LD_INT 81
11168: ST_TO_ADDR
// tech_BasicTools := 82 ;
11169: LD_ADDR_EXP 36
11173: PUSH
11174: LD_INT 82
11176: ST_TO_ADDR
// tech_Cargo := 83 ;
11177: LD_ADDR_EXP 37
11181: PUSH
11182: LD_INT 83
11184: ST_TO_ADDR
// tech_Track := 84 ;
11185: LD_ADDR_EXP 38
11189: PUSH
11190: LD_INT 84
11192: ST_TO_ADDR
// tech_Crane := 85 ;
11193: LD_ADDR_EXP 39
11197: PUSH
11198: LD_INT 85
11200: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11201: LD_ADDR_EXP 40
11205: PUSH
11206: LD_INT 86
11208: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11209: LD_ADDR_EXP 41
11213: PUSH
11214: LD_INT 87
11216: ST_TO_ADDR
// class_mastodont := 31 ;
11217: LD_ADDR_EXP 42
11221: PUSH
11222: LD_INT 31
11224: ST_TO_ADDR
// class_horse := 21 ;
11225: LD_ADDR_EXP 43
11229: PUSH
11230: LD_INT 21
11232: ST_TO_ADDR
// end ;
11233: LD_VAR 0 1
11237: RET
// every 1 do
11238: GO 11240
11240: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11241: CALL 11086 0 0
11245: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11246: LD_INT 0
11248: PPUSH
// if p2 = 100 then
11249: LD_VAR 0 2
11253: PUSH
11254: LD_INT 100
11256: EQUAL
11257: IFFALSE 12206
// begin if not StreamModeActive then
11259: LD_EXP 44
11263: NOT
11264: IFFALSE 11274
// StreamModeActive := true ;
11266: LD_ADDR_EXP 44
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// if p3 = 0 then
11274: LD_VAR 0 3
11278: PUSH
11279: LD_INT 0
11281: EQUAL
11282: IFFALSE 11288
// InitStreamMode ;
11284: CALL 12366 0 0
// if p3 = 1 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 1
11295: EQUAL
11296: IFFALSE 11306
// sRocket := true ;
11298: LD_ADDR_EXP 49
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 2 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 2
11313: EQUAL
11314: IFFALSE 11324
// sSpeed := true ;
11316: LD_ADDR_EXP 48
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 3 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 3
11331: EQUAL
11332: IFFALSE 11342
// sEngine := true ;
11334: LD_ADDR_EXP 50
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 4 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 4
11349: EQUAL
11350: IFFALSE 11360
// sSpec := true ;
11352: LD_ADDR_EXP 47
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 5 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 5
11367: EQUAL
11368: IFFALSE 11378
// sLevel := true ;
11370: LD_ADDR_EXP 51
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 6 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 6
11385: EQUAL
11386: IFFALSE 11396
// sArmoury := true ;
11388: LD_ADDR_EXP 52
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 7 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 7
11403: EQUAL
11404: IFFALSE 11414
// sRadar := true ;
11406: LD_ADDR_EXP 53
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 8 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 8
11421: EQUAL
11422: IFFALSE 11432
// sBunker := true ;
11424: LD_ADDR_EXP 54
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 9 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 9
11439: EQUAL
11440: IFFALSE 11450
// sHack := true ;
11442: LD_ADDR_EXP 55
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 10 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 10
11457: EQUAL
11458: IFFALSE 11468
// sFire := true ;
11460: LD_ADDR_EXP 56
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 11 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 11
11475: EQUAL
11476: IFFALSE 11486
// sRefresh := true ;
11478: LD_ADDR_EXP 57
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 12 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 12
11493: EQUAL
11494: IFFALSE 11504
// sExp := true ;
11496: LD_ADDR_EXP 58
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 13 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 13
11511: EQUAL
11512: IFFALSE 11522
// sDepot := true ;
11514: LD_ADDR_EXP 59
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 14 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 14
11529: EQUAL
11530: IFFALSE 11540
// sFlag := true ;
11532: LD_ADDR_EXP 60
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 15 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 15
11547: EQUAL
11548: IFFALSE 11558
// sKamikadze := true ;
11550: LD_ADDR_EXP 68
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 16 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 16
11565: EQUAL
11566: IFFALSE 11576
// sTroll := true ;
11568: LD_ADDR_EXP 69
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 17 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 17
11583: EQUAL
11584: IFFALSE 11594
// sSlow := true ;
11586: LD_ADDR_EXP 70
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 18 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 18
11601: EQUAL
11602: IFFALSE 11612
// sLack := true ;
11604: LD_ADDR_EXP 71
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 19 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 19
11619: EQUAL
11620: IFFALSE 11630
// sTank := true ;
11622: LD_ADDR_EXP 73
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 20 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 20
11637: EQUAL
11638: IFFALSE 11648
// sRemote := true ;
11640: LD_ADDR_EXP 74
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 21 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 21
11655: EQUAL
11656: IFFALSE 11666
// sPowell := true ;
11658: LD_ADDR_EXP 75
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 22 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 22
11673: EQUAL
11674: IFFALSE 11684
// sTeleport := true ;
11676: LD_ADDR_EXP 78
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 23 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 23
11691: EQUAL
11692: IFFALSE 11702
// sOilTower := true ;
11694: LD_ADDR_EXP 80
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 24 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 24
11709: EQUAL
11710: IFFALSE 11720
// sShovel := true ;
11712: LD_ADDR_EXP 81
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 25 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 25
11727: EQUAL
11728: IFFALSE 11738
// sSheik := true ;
11730: LD_ADDR_EXP 82
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 26 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 26
11745: EQUAL
11746: IFFALSE 11756
// sEarthquake := true ;
11748: LD_ADDR_EXP 84
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 27 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 27
11763: EQUAL
11764: IFFALSE 11774
// sAI := true ;
11766: LD_ADDR_EXP 85
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 28 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 28
11781: EQUAL
11782: IFFALSE 11792
// sCargo := true ;
11784: LD_ADDR_EXP 88
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 29 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 29
11799: EQUAL
11800: IFFALSE 11810
// sDLaser := true ;
11802: LD_ADDR_EXP 89
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 30 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 30
11817: EQUAL
11818: IFFALSE 11828
// sExchange := true ;
11820: LD_ADDR_EXP 90
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 31 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 31
11835: EQUAL
11836: IFFALSE 11846
// sFac := true ;
11838: LD_ADDR_EXP 91
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 32 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 32
11853: EQUAL
11854: IFFALSE 11864
// sPower := true ;
11856: LD_ADDR_EXP 92
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 33 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 33
11871: EQUAL
11872: IFFALSE 11882
// sRandom := true ;
11874: LD_ADDR_EXP 93
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 34 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 34
11889: EQUAL
11890: IFFALSE 11900
// sShield := true ;
11892: LD_ADDR_EXP 94
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 35 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 35
11907: EQUAL
11908: IFFALSE 11918
// sTime := true ;
11910: LD_ADDR_EXP 95
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 36 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 36
11925: EQUAL
11926: IFFALSE 11936
// sTools := true ;
11928: LD_ADDR_EXP 96
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 101 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 101
11943: EQUAL
11944: IFFALSE 11954
// sSold := true ;
11946: LD_ADDR_EXP 61
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 102 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 102
11961: EQUAL
11962: IFFALSE 11972
// sDiff := true ;
11964: LD_ADDR_EXP 62
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 103 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 103
11979: EQUAL
11980: IFFALSE 11990
// sFog := true ;
11982: LD_ADDR_EXP 65
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 104 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 104
11997: EQUAL
11998: IFFALSE 12008
// sReset := true ;
12000: LD_ADDR_EXP 66
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 105 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 105
12015: EQUAL
12016: IFFALSE 12026
// sSun := true ;
12018: LD_ADDR_EXP 67
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 106 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 106
12033: EQUAL
12034: IFFALSE 12044
// sTiger := true ;
12036: LD_ADDR_EXP 63
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 107 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 107
12051: EQUAL
12052: IFFALSE 12062
// sBomb := true ;
12054: LD_ADDR_EXP 64
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 108 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 108
12069: EQUAL
12070: IFFALSE 12080
// sWound := true ;
12072: LD_ADDR_EXP 72
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 109 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 109
12087: EQUAL
12088: IFFALSE 12098
// sBetray := true ;
12090: LD_ADDR_EXP 76
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 110 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 110
12105: EQUAL
12106: IFFALSE 12116
// sContamin := true ;
12108: LD_ADDR_EXP 77
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 111 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 111
12123: EQUAL
12124: IFFALSE 12134
// sOil := true ;
12126: LD_ADDR_EXP 79
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 112 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 112
12141: EQUAL
12142: IFFALSE 12152
// sStu := true ;
12144: LD_ADDR_EXP 83
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 113 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 113
12159: EQUAL
12160: IFFALSE 12170
// sBazooka := true ;
12162: LD_ADDR_EXP 86
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// if p3 = 114 then
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 114
12177: EQUAL
12178: IFFALSE 12188
// sMortar := true ;
12180: LD_ADDR_EXP 87
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// if p3 = 115 then
12188: LD_VAR 0 3
12192: PUSH
12193: LD_INT 115
12195: EQUAL
12196: IFFALSE 12206
// sRanger := true ;
12198: LD_ADDR_EXP 97
12202: PUSH
12203: LD_INT 1
12205: ST_TO_ADDR
// end ; if p2 = 101 then
12206: LD_VAR 0 2
12210: PUSH
12211: LD_INT 101
12213: EQUAL
12214: IFFALSE 12342
// begin case p3 of 1 :
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 1
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12236
12229: POP
// hHackUnlimitedResources ; 2 :
12230: CALL 23379 0 0
12234: GO 12342
12236: LD_INT 2
12238: DOUBLE
12239: EQUAL
12240: IFTRUE 12244
12242: GO 12251
12244: POP
// hHackSetLevel10 ; 3 :
12245: CALL 23512 0 0
12249: GO 12342
12251: LD_INT 3
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12266
12259: POP
// hHackSetLevel10YourUnits ; 4 :
12260: CALL 23597 0 0
12264: GO 12342
12266: LD_INT 4
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12281
12274: POP
// hHackInvincible ; 5 :
12275: CALL 24045 0 0
12279: GO 12342
12281: LD_INT 5
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12296
12289: POP
// hHackInvisible ; 6 :
12290: CALL 24156 0 0
12294: GO 12342
12296: LD_INT 6
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12311
12304: POP
// hHackChangeYourSide ; 7 :
12305: CALL 24213 0 0
12309: GO 12342
12311: LD_INT 7
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12326
12319: POP
// hHackChangeUnitSide ; 8 :
12320: CALL 24255 0 0
12324: GO 12342
12326: LD_INT 8
12328: DOUBLE
12329: EQUAL
12330: IFTRUE 12334
12332: GO 12341
12334: POP
// hHackFog ; end ;
12335: CALL 24356 0 0
12339: GO 12342
12341: POP
// end ; end ;
12342: LD_VAR 0 7
12346: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12347: GO 12349
12349: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12350: LD_STRING initStreamRollete();
12352: PPUSH
12353: CALL_OW 559
// InitStreamMode ;
12357: CALL 12366 0 0
// DefineStreamItems ( ) ;
12361: CALL 12806 0 0
// end ;
12365: END
// function InitStreamMode ; begin
12366: LD_INT 0
12368: PPUSH
// streamModeActive := false ;
12369: LD_ADDR_EXP 44
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// normalCounter := 36 ;
12377: LD_ADDR_EXP 45
12381: PUSH
12382: LD_INT 36
12384: ST_TO_ADDR
// hardcoreCounter := 16 ;
12385: LD_ADDR_EXP 46
12389: PUSH
12390: LD_INT 16
12392: ST_TO_ADDR
// sRocket := false ;
12393: LD_ADDR_EXP 49
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sSpeed := false ;
12401: LD_ADDR_EXP 48
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sEngine := false ;
12409: LD_ADDR_EXP 50
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sSpec := false ;
12417: LD_ADDR_EXP 47
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sLevel := false ;
12425: LD_ADDR_EXP 51
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sArmoury := false ;
12433: LD_ADDR_EXP 52
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sRadar := false ;
12441: LD_ADDR_EXP 53
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sBunker := false ;
12449: LD_ADDR_EXP 54
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sHack := false ;
12457: LD_ADDR_EXP 55
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sFire := false ;
12465: LD_ADDR_EXP 56
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sRefresh := false ;
12473: LD_ADDR_EXP 57
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sExp := false ;
12481: LD_ADDR_EXP 58
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sDepot := false ;
12489: LD_ADDR_EXP 59
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sFlag := false ;
12497: LD_ADDR_EXP 60
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sKamikadze := false ;
12505: LD_ADDR_EXP 68
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sTroll := false ;
12513: LD_ADDR_EXP 69
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sSlow := false ;
12521: LD_ADDR_EXP 70
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sLack := false ;
12529: LD_ADDR_EXP 71
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sTank := false ;
12537: LD_ADDR_EXP 73
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sRemote := false ;
12545: LD_ADDR_EXP 74
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sPowell := false ;
12553: LD_ADDR_EXP 75
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sTeleport := false ;
12561: LD_ADDR_EXP 78
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sOilTower := false ;
12569: LD_ADDR_EXP 80
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sShovel := false ;
12577: LD_ADDR_EXP 81
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sSheik := false ;
12585: LD_ADDR_EXP 82
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sEarthquake := false ;
12593: LD_ADDR_EXP 84
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sAI := false ;
12601: LD_ADDR_EXP 85
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sCargo := false ;
12609: LD_ADDR_EXP 88
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sDLaser := false ;
12617: LD_ADDR_EXP 89
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sExchange := false ;
12625: LD_ADDR_EXP 90
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sFac := false ;
12633: LD_ADDR_EXP 91
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sPower := false ;
12641: LD_ADDR_EXP 92
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sRandom := false ;
12649: LD_ADDR_EXP 93
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sShield := false ;
12657: LD_ADDR_EXP 94
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sTime := false ;
12665: LD_ADDR_EXP 95
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sTools := false ;
12673: LD_ADDR_EXP 96
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sSold := false ;
12681: LD_ADDR_EXP 61
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sDiff := false ;
12689: LD_ADDR_EXP 62
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sFog := false ;
12697: LD_ADDR_EXP 65
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sReset := false ;
12705: LD_ADDR_EXP 66
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sSun := false ;
12713: LD_ADDR_EXP 67
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sTiger := false ;
12721: LD_ADDR_EXP 63
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sBomb := false ;
12729: LD_ADDR_EXP 64
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sWound := false ;
12737: LD_ADDR_EXP 72
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sBetray := false ;
12745: LD_ADDR_EXP 76
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sContamin := false ;
12753: LD_ADDR_EXP 77
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sOil := false ;
12761: LD_ADDR_EXP 79
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sStu := false ;
12769: LD_ADDR_EXP 83
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sBazooka := false ;
12777: LD_ADDR_EXP 86
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sMortar := false ;
12785: LD_ADDR_EXP 87
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sRanger := false ;
12793: LD_ADDR_EXP 97
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// end ;
12801: LD_VAR 0 1
12805: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12806: LD_INT 0
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
// result := [ ] ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: EMPTY
12819: ST_TO_ADDR
// if campaign_id = 1 then
12820: LD_OWVAR 69
12824: PUSH
12825: LD_INT 1
12827: EQUAL
12828: IFFALSE 15766
// begin case mission_number of 1 :
12830: LD_OWVAR 70
12834: PUSH
12835: LD_INT 1
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 12907
12843: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: LD_INT 4
12854: PUSH
12855: LD_INT 11
12857: PUSH
12858: LD_INT 12
12860: PUSH
12861: LD_INT 15
12863: PUSH
12864: LD_INT 16
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 23
12872: PUSH
12873: LD_INT 26
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 101
12889: PUSH
12890: LD_INT 102
12892: PUSH
12893: LD_INT 106
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: ST_TO_ADDR
12905: GO 15764
12907: LD_INT 2
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12987
12915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12916: LD_ADDR_VAR 0 1
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: LD_INT 4
12926: PUSH
12927: LD_INT 11
12929: PUSH
12930: LD_INT 12
12932: PUSH
12933: LD_INT 15
12935: PUSH
12936: LD_INT 16
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_INT 23
12944: PUSH
12945: LD_INT 26
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 101
12961: PUSH
12962: LD_INT 102
12964: PUSH
12965: LD_INT 105
12967: PUSH
12968: LD_INT 106
12970: PUSH
12971: LD_INT 108
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 15764
12987: LD_INT 3
12989: DOUBLE
12990: EQUAL
12991: IFTRUE 12995
12993: GO 13071
12995: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: LD_INT 4
13006: PUSH
13007: LD_INT 5
13009: PUSH
13010: LD_INT 11
13012: PUSH
13013: LD_INT 12
13015: PUSH
13016: LD_INT 15
13018: PUSH
13019: LD_INT 16
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_INT 26
13027: PUSH
13028: LD_INT 36
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 101
13045: PUSH
13046: LD_INT 102
13048: PUSH
13049: LD_INT 105
13051: PUSH
13052: LD_INT 106
13054: PUSH
13055: LD_INT 108
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: ST_TO_ADDR
13069: GO 15764
13071: LD_INT 4
13073: DOUBLE
13074: EQUAL
13075: IFTRUE 13079
13077: GO 13163
13079: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13080: LD_ADDR_VAR 0 1
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: LD_INT 5
13093: PUSH
13094: LD_INT 8
13096: PUSH
13097: LD_INT 11
13099: PUSH
13100: LD_INT 12
13102: PUSH
13103: LD_INT 15
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 26
13117: PUSH
13118: LD_INT 36
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 101
13137: PUSH
13138: LD_INT 102
13140: PUSH
13141: LD_INT 105
13143: PUSH
13144: LD_INT 106
13146: PUSH
13147: LD_INT 108
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: ST_TO_ADDR
13161: GO 15764
13163: LD_INT 5
13165: DOUBLE
13166: EQUAL
13167: IFTRUE 13171
13169: GO 13271
13171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13172: LD_ADDR_VAR 0 1
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: LD_INT 4
13182: PUSH
13183: LD_INT 5
13185: PUSH
13186: LD_INT 6
13188: PUSH
13189: LD_INT 8
13191: PUSH
13192: LD_INT 11
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: LD_INT 15
13200: PUSH
13201: LD_INT 16
13203: PUSH
13204: LD_INT 22
13206: PUSH
13207: LD_INT 23
13209: PUSH
13210: LD_INT 25
13212: PUSH
13213: LD_INT 26
13215: PUSH
13216: LD_INT 36
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 101
13237: PUSH
13238: LD_INT 102
13240: PUSH
13241: LD_INT 105
13243: PUSH
13244: LD_INT 106
13246: PUSH
13247: LD_INT 108
13249: PUSH
13250: LD_INT 109
13252: PUSH
13253: LD_INT 112
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: ST_TO_ADDR
13269: GO 15764
13271: LD_INT 6
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13399
13279: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13280: LD_ADDR_VAR 0 1
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: LD_INT 4
13290: PUSH
13291: LD_INT 5
13293: PUSH
13294: LD_INT 6
13296: PUSH
13297: LD_INT 8
13299: PUSH
13300: LD_INT 11
13302: PUSH
13303: LD_INT 12
13305: PUSH
13306: LD_INT 15
13308: PUSH
13309: LD_INT 16
13311: PUSH
13312: LD_INT 20
13314: PUSH
13315: LD_INT 21
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 25
13326: PUSH
13327: LD_INT 26
13329: PUSH
13330: LD_INT 30
13332: PUSH
13333: LD_INT 31
13335: PUSH
13336: LD_INT 32
13338: PUSH
13339: LD_INT 36
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 101
13365: PUSH
13366: LD_INT 102
13368: PUSH
13369: LD_INT 105
13371: PUSH
13372: LD_INT 106
13374: PUSH
13375: LD_INT 108
13377: PUSH
13378: LD_INT 109
13380: PUSH
13381: LD_INT 112
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: ST_TO_ADDR
13397: GO 15764
13399: LD_INT 7
13401: DOUBLE
13402: EQUAL
13403: IFTRUE 13407
13405: GO 13507
13407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13408: LD_ADDR_VAR 0 1
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: LD_INT 4
13418: PUSH
13419: LD_INT 5
13421: PUSH
13422: LD_INT 7
13424: PUSH
13425: LD_INT 11
13427: PUSH
13428: LD_INT 12
13430: PUSH
13431: LD_INT 15
13433: PUSH
13434: LD_INT 16
13436: PUSH
13437: LD_INT 20
13439: PUSH
13440: LD_INT 21
13442: PUSH
13443: LD_INT 22
13445: PUSH
13446: LD_INT 23
13448: PUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 26
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 101
13473: PUSH
13474: LD_INT 102
13476: PUSH
13477: LD_INT 103
13479: PUSH
13480: LD_INT 105
13482: PUSH
13483: LD_INT 106
13485: PUSH
13486: LD_INT 108
13488: PUSH
13489: LD_INT 112
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: ST_TO_ADDR
13505: GO 15764
13507: LD_INT 8
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13643
13515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13516: LD_ADDR_VAR 0 1
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: LD_INT 4
13526: PUSH
13527: LD_INT 5
13529: PUSH
13530: LD_INT 6
13532: PUSH
13533: LD_INT 7
13535: PUSH
13536: LD_INT 8
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 12
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 20
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 23
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 26
13568: PUSH
13569: LD_INT 30
13571: PUSH
13572: LD_INT 31
13574: PUSH
13575: LD_INT 32
13577: PUSH
13578: LD_INT 36
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 101
13605: PUSH
13606: LD_INT 102
13608: PUSH
13609: LD_INT 103
13611: PUSH
13612: LD_INT 105
13614: PUSH
13615: LD_INT 106
13617: PUSH
13618: LD_INT 108
13620: PUSH
13621: LD_INT 109
13623: PUSH
13624: LD_INT 112
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: ST_TO_ADDR
13641: GO 15764
13643: LD_INT 9
13645: DOUBLE
13646: EQUAL
13647: IFTRUE 13651
13649: GO 13787
13651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13652: LD_ADDR_VAR 0 1
13656: PUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: LD_INT 6
13668: PUSH
13669: LD_INT 7
13671: PUSH
13672: LD_INT 8
13674: PUSH
13675: LD_INT 11
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: LD_INT 15
13683: PUSH
13684: LD_INT 16
13686: PUSH
13687: LD_INT 20
13689: PUSH
13690: LD_INT 21
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_INT 23
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 26
13704: PUSH
13705: LD_INT 28
13707: PUSH
13708: LD_INT 30
13710: PUSH
13711: LD_INT 31
13713: PUSH
13714: LD_INT 32
13716: PUSH
13717: LD_INT 36
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 101
13745: PUSH
13746: LD_INT 102
13748: PUSH
13749: LD_INT 103
13751: PUSH
13752: LD_INT 105
13754: PUSH
13755: LD_INT 106
13757: PUSH
13758: LD_INT 108
13760: PUSH
13761: LD_INT 109
13763: PUSH
13764: LD_INT 112
13766: PUSH
13767: LD_INT 114
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: ST_TO_ADDR
13785: GO 15764
13787: LD_INT 10
13789: DOUBLE
13790: EQUAL
13791: IFTRUE 13795
13793: GO 13979
13795: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: LD_INT 4
13806: PUSH
13807: LD_INT 5
13809: PUSH
13810: LD_INT 6
13812: PUSH
13813: LD_INT 7
13815: PUSH
13816: LD_INT 8
13818: PUSH
13819: LD_INT 9
13821: PUSH
13822: LD_INT 10
13824: PUSH
13825: LD_INT 11
13827: PUSH
13828: LD_INT 12
13830: PUSH
13831: LD_INT 13
13833: PUSH
13834: LD_INT 14
13836: PUSH
13837: LD_INT 15
13839: PUSH
13840: LD_INT 16
13842: PUSH
13843: LD_INT 17
13845: PUSH
13846: LD_INT 18
13848: PUSH
13849: LD_INT 19
13851: PUSH
13852: LD_INT 20
13854: PUSH
13855: LD_INT 21
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_INT 23
13863: PUSH
13864: LD_INT 24
13866: PUSH
13867: LD_INT 25
13869: PUSH
13870: LD_INT 26
13872: PUSH
13873: LD_INT 28
13875: PUSH
13876: LD_INT 30
13878: PUSH
13879: LD_INT 31
13881: PUSH
13882: LD_INT 32
13884: PUSH
13885: LD_INT 36
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 101
13921: PUSH
13922: LD_INT 102
13924: PUSH
13925: LD_INT 103
13927: PUSH
13928: LD_INT 104
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 107
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 110
13948: PUSH
13949: LD_INT 111
13951: PUSH
13952: LD_INT 112
13954: PUSH
13955: LD_INT 114
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: ST_TO_ADDR
13977: GO 15764
13979: LD_INT 11
13981: DOUBLE
13982: EQUAL
13983: IFTRUE 13987
13985: GO 14179
13987: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_INT 2
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: LD_INT 4
14001: PUSH
14002: LD_INT 5
14004: PUSH
14005: LD_INT 6
14007: PUSH
14008: LD_INT 7
14010: PUSH
14011: LD_INT 8
14013: PUSH
14014: LD_INT 9
14016: PUSH
14017: LD_INT 10
14019: PUSH
14020: LD_INT 11
14022: PUSH
14023: LD_INT 12
14025: PUSH
14026: LD_INT 13
14028: PUSH
14029: LD_INT 14
14031: PUSH
14032: LD_INT 15
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 17
14040: PUSH
14041: LD_INT 18
14043: PUSH
14044: LD_INT 19
14046: PUSH
14047: LD_INT 20
14049: PUSH
14050: LD_INT 21
14052: PUSH
14053: LD_INT 22
14055: PUSH
14056: LD_INT 23
14058: PUSH
14059: LD_INT 24
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 26
14067: PUSH
14068: LD_INT 28
14070: PUSH
14071: LD_INT 30
14073: PUSH
14074: LD_INT 31
14076: PUSH
14077: LD_INT 32
14079: PUSH
14080: LD_INT 34
14082: PUSH
14083: LD_INT 36
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 101
14121: PUSH
14122: LD_INT 102
14124: PUSH
14125: LD_INT 103
14127: PUSH
14128: LD_INT 104
14130: PUSH
14131: LD_INT 105
14133: PUSH
14134: LD_INT 106
14136: PUSH
14137: LD_INT 107
14139: PUSH
14140: LD_INT 108
14142: PUSH
14143: LD_INT 109
14145: PUSH
14146: LD_INT 110
14148: PUSH
14149: LD_INT 111
14151: PUSH
14152: LD_INT 112
14154: PUSH
14155: LD_INT 114
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: ST_TO_ADDR
14177: GO 15764
14179: LD_INT 12
14181: DOUBLE
14182: EQUAL
14183: IFTRUE 14187
14185: GO 14395
14187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14188: LD_ADDR_VAR 0 1
14192: PUSH
14193: LD_INT 1
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: LD_INT 3
14201: PUSH
14202: LD_INT 4
14204: PUSH
14205: LD_INT 5
14207: PUSH
14208: LD_INT 6
14210: PUSH
14211: LD_INT 7
14213: PUSH
14214: LD_INT 8
14216: PUSH
14217: LD_INT 9
14219: PUSH
14220: LD_INT 10
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 13
14231: PUSH
14232: LD_INT 14
14234: PUSH
14235: LD_INT 15
14237: PUSH
14238: LD_INT 16
14240: PUSH
14241: LD_INT 17
14243: PUSH
14244: LD_INT 18
14246: PUSH
14247: LD_INT 19
14249: PUSH
14250: LD_INT 20
14252: PUSH
14253: LD_INT 21
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 23
14261: PUSH
14262: LD_INT 24
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 26
14270: PUSH
14271: LD_INT 27
14273: PUSH
14274: LD_INT 28
14276: PUSH
14277: LD_INT 30
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: LD_INT 32
14285: PUSH
14286: LD_INT 33
14288: PUSH
14289: LD_INT 34
14291: PUSH
14292: LD_INT 36
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 101
14333: PUSH
14334: LD_INT 102
14336: PUSH
14337: LD_INT 103
14339: PUSH
14340: LD_INT 104
14342: PUSH
14343: LD_INT 105
14345: PUSH
14346: LD_INT 106
14348: PUSH
14349: LD_INT 107
14351: PUSH
14352: LD_INT 108
14354: PUSH
14355: LD_INT 109
14357: PUSH
14358: LD_INT 110
14360: PUSH
14361: LD_INT 111
14363: PUSH
14364: LD_INT 112
14366: PUSH
14367: LD_INT 113
14369: PUSH
14370: LD_INT 114
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: ST_TO_ADDR
14393: GO 15764
14395: LD_INT 13
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14599
14403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 3
14417: PUSH
14418: LD_INT 4
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: LD_INT 8
14426: PUSH
14427: LD_INT 9
14429: PUSH
14430: LD_INT 10
14432: PUSH
14433: LD_INT 11
14435: PUSH
14436: LD_INT 12
14438: PUSH
14439: LD_INT 14
14441: PUSH
14442: LD_INT 15
14444: PUSH
14445: LD_INT 16
14447: PUSH
14448: LD_INT 17
14450: PUSH
14451: LD_INT 18
14453: PUSH
14454: LD_INT 19
14456: PUSH
14457: LD_INT 20
14459: PUSH
14460: LD_INT 21
14462: PUSH
14463: LD_INT 22
14465: PUSH
14466: LD_INT 23
14468: PUSH
14469: LD_INT 24
14471: PUSH
14472: LD_INT 25
14474: PUSH
14475: LD_INT 26
14477: PUSH
14478: LD_INT 27
14480: PUSH
14481: LD_INT 28
14483: PUSH
14484: LD_INT 30
14486: PUSH
14487: LD_INT 31
14489: PUSH
14490: LD_INT 32
14492: PUSH
14493: LD_INT 33
14495: PUSH
14496: LD_INT 34
14498: PUSH
14499: LD_INT 36
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 101
14537: PUSH
14538: LD_INT 102
14540: PUSH
14541: LD_INT 103
14543: PUSH
14544: LD_INT 104
14546: PUSH
14547: LD_INT 105
14549: PUSH
14550: LD_INT 106
14552: PUSH
14553: LD_INT 107
14555: PUSH
14556: LD_INT 108
14558: PUSH
14559: LD_INT 109
14561: PUSH
14562: LD_INT 110
14564: PUSH
14565: LD_INT 111
14567: PUSH
14568: LD_INT 112
14570: PUSH
14571: LD_INT 113
14573: PUSH
14574: LD_INT 114
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: ST_TO_ADDR
14597: GO 15764
14599: LD_INT 14
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14819
14607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_INT 1
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: LD_INT 4
14624: PUSH
14625: LD_INT 5
14627: PUSH
14628: LD_INT 6
14630: PUSH
14631: LD_INT 7
14633: PUSH
14634: LD_INT 8
14636: PUSH
14637: LD_INT 9
14639: PUSH
14640: LD_INT 10
14642: PUSH
14643: LD_INT 11
14645: PUSH
14646: LD_INT 12
14648: PUSH
14649: LD_INT 13
14651: PUSH
14652: LD_INT 14
14654: PUSH
14655: LD_INT 15
14657: PUSH
14658: LD_INT 16
14660: PUSH
14661: LD_INT 17
14663: PUSH
14664: LD_INT 18
14666: PUSH
14667: LD_INT 19
14669: PUSH
14670: LD_INT 20
14672: PUSH
14673: LD_INT 21
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_INT 23
14681: PUSH
14682: LD_INT 24
14684: PUSH
14685: LD_INT 25
14687: PUSH
14688: LD_INT 26
14690: PUSH
14691: LD_INT 27
14693: PUSH
14694: LD_INT 28
14696: PUSH
14697: LD_INT 29
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 31
14705: PUSH
14706: LD_INT 32
14708: PUSH
14709: LD_INT 33
14711: PUSH
14712: LD_INT 34
14714: PUSH
14715: LD_INT 36
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 101
14757: PUSH
14758: LD_INT 102
14760: PUSH
14761: LD_INT 103
14763: PUSH
14764: LD_INT 104
14766: PUSH
14767: LD_INT 105
14769: PUSH
14770: LD_INT 106
14772: PUSH
14773: LD_INT 107
14775: PUSH
14776: LD_INT 108
14778: PUSH
14779: LD_INT 109
14781: PUSH
14782: LD_INT 110
14784: PUSH
14785: LD_INT 111
14787: PUSH
14788: LD_INT 112
14790: PUSH
14791: LD_INT 113
14793: PUSH
14794: LD_INT 114
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: ST_TO_ADDR
14817: GO 15764
14819: LD_INT 15
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 15039
14827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 1
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: LD_INT 4
14844: PUSH
14845: LD_INT 5
14847: PUSH
14848: LD_INT 6
14850: PUSH
14851: LD_INT 7
14853: PUSH
14854: LD_INT 8
14856: PUSH
14857: LD_INT 9
14859: PUSH
14860: LD_INT 10
14862: PUSH
14863: LD_INT 11
14865: PUSH
14866: LD_INT 12
14868: PUSH
14869: LD_INT 13
14871: PUSH
14872: LD_INT 14
14874: PUSH
14875: LD_INT 15
14877: PUSH
14878: LD_INT 16
14880: PUSH
14881: LD_INT 17
14883: PUSH
14884: LD_INT 18
14886: PUSH
14887: LD_INT 19
14889: PUSH
14890: LD_INT 20
14892: PUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 22
14898: PUSH
14899: LD_INT 23
14901: PUSH
14902: LD_INT 24
14904: PUSH
14905: LD_INT 25
14907: PUSH
14908: LD_INT 26
14910: PUSH
14911: LD_INT 27
14913: PUSH
14914: LD_INT 28
14916: PUSH
14917: LD_INT 29
14919: PUSH
14920: LD_INT 30
14922: PUSH
14923: LD_INT 31
14925: PUSH
14926: LD_INT 32
14928: PUSH
14929: LD_INT 33
14931: PUSH
14932: LD_INT 34
14934: PUSH
14935: LD_INT 36
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 101
14977: PUSH
14978: LD_INT 102
14980: PUSH
14981: LD_INT 103
14983: PUSH
14984: LD_INT 104
14986: PUSH
14987: LD_INT 105
14989: PUSH
14990: LD_INT 106
14992: PUSH
14993: LD_INT 107
14995: PUSH
14996: LD_INT 108
14998: PUSH
14999: LD_INT 109
15001: PUSH
15002: LD_INT 110
15004: PUSH
15005: LD_INT 111
15007: PUSH
15008: LD_INT 112
15010: PUSH
15011: LD_INT 113
15013: PUSH
15014: LD_INT 114
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: ST_TO_ADDR
15037: GO 15764
15039: LD_INT 16
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15171
15047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15048: LD_ADDR_VAR 0 1
15052: PUSH
15053: LD_INT 2
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: LD_INT 7
15064: PUSH
15065: LD_INT 11
15067: PUSH
15068: LD_INT 12
15070: PUSH
15071: LD_INT 15
15073: PUSH
15074: LD_INT 16
15076: PUSH
15077: LD_INT 20
15079: PUSH
15080: LD_INT 21
15082: PUSH
15083: LD_INT 22
15085: PUSH
15086: LD_INT 23
15088: PUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 26
15094: PUSH
15095: LD_INT 30
15097: PUSH
15098: LD_INT 31
15100: PUSH
15101: LD_INT 32
15103: PUSH
15104: LD_INT 33
15106: PUSH
15107: LD_INT 34
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 101
15133: PUSH
15134: LD_INT 102
15136: PUSH
15137: LD_INT 103
15139: PUSH
15140: LD_INT 106
15142: PUSH
15143: LD_INT 108
15145: PUSH
15146: LD_INT 112
15148: PUSH
15149: LD_INT 113
15151: PUSH
15152: LD_INT 114
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: ST_TO_ADDR
15169: GO 15764
15171: LD_INT 17
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15391
15179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: LD_INT 2
15190: PUSH
15191: LD_INT 3
15193: PUSH
15194: LD_INT 4
15196: PUSH
15197: LD_INT 5
15199: PUSH
15200: LD_INT 6
15202: PUSH
15203: LD_INT 7
15205: PUSH
15206: LD_INT 8
15208: PUSH
15209: LD_INT 9
15211: PUSH
15212: LD_INT 10
15214: PUSH
15215: LD_INT 11
15217: PUSH
15218: LD_INT 12
15220: PUSH
15221: LD_INT 13
15223: PUSH
15224: LD_INT 14
15226: PUSH
15227: LD_INT 15
15229: PUSH
15230: LD_INT 16
15232: PUSH
15233: LD_INT 17
15235: PUSH
15236: LD_INT 18
15238: PUSH
15239: LD_INT 19
15241: PUSH
15242: LD_INT 20
15244: PUSH
15245: LD_INT 21
15247: PUSH
15248: LD_INT 22
15250: PUSH
15251: LD_INT 23
15253: PUSH
15254: LD_INT 24
15256: PUSH
15257: LD_INT 25
15259: PUSH
15260: LD_INT 26
15262: PUSH
15263: LD_INT 27
15265: PUSH
15266: LD_INT 28
15268: PUSH
15269: LD_INT 29
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 31
15277: PUSH
15278: LD_INT 32
15280: PUSH
15281: LD_INT 33
15283: PUSH
15284: LD_INT 34
15286: PUSH
15287: LD_INT 36
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 101
15329: PUSH
15330: LD_INT 102
15332: PUSH
15333: LD_INT 103
15335: PUSH
15336: LD_INT 104
15338: PUSH
15339: LD_INT 105
15341: PUSH
15342: LD_INT 106
15344: PUSH
15345: LD_INT 107
15347: PUSH
15348: LD_INT 108
15350: PUSH
15351: LD_INT 109
15353: PUSH
15354: LD_INT 110
15356: PUSH
15357: LD_INT 111
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: ST_TO_ADDR
15389: GO 15764
15391: LD_INT 18
15393: DOUBLE
15394: EQUAL
15395: IFTRUE 15399
15397: GO 15535
15399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15400: LD_ADDR_VAR 0 1
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 4
15410: PUSH
15411: LD_INT 5
15413: PUSH
15414: LD_INT 7
15416: PUSH
15417: LD_INT 11
15419: PUSH
15420: LD_INT 12
15422: PUSH
15423: LD_INT 15
15425: PUSH
15426: LD_INT 16
15428: PUSH
15429: LD_INT 20
15431: PUSH
15432: LD_INT 21
15434: PUSH
15435: LD_INT 22
15437: PUSH
15438: LD_INT 23
15440: PUSH
15441: LD_INT 25
15443: PUSH
15444: LD_INT 26
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 31
15452: PUSH
15453: LD_INT 32
15455: PUSH
15456: LD_INT 33
15458: PUSH
15459: LD_INT 34
15461: PUSH
15462: LD_INT 35
15464: PUSH
15465: LD_INT 36
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 101
15493: PUSH
15494: LD_INT 102
15496: PUSH
15497: LD_INT 103
15499: PUSH
15500: LD_INT 106
15502: PUSH
15503: LD_INT 108
15505: PUSH
15506: LD_INT 112
15508: PUSH
15509: LD_INT 113
15511: PUSH
15512: LD_INT 114
15514: PUSH
15515: LD_INT 115
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: ST_TO_ADDR
15533: GO 15764
15535: LD_INT 19
15537: DOUBLE
15538: EQUAL
15539: IFTRUE 15543
15541: GO 15763
15543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: LD_INT 2
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: LD_INT 4
15560: PUSH
15561: LD_INT 5
15563: PUSH
15564: LD_INT 6
15566: PUSH
15567: LD_INT 7
15569: PUSH
15570: LD_INT 8
15572: PUSH
15573: LD_INT 9
15575: PUSH
15576: LD_INT 10
15578: PUSH
15579: LD_INT 11
15581: PUSH
15582: LD_INT 12
15584: PUSH
15585: LD_INT 13
15587: PUSH
15588: LD_INT 14
15590: PUSH
15591: LD_INT 15
15593: PUSH
15594: LD_INT 16
15596: PUSH
15597: LD_INT 17
15599: PUSH
15600: LD_INT 18
15602: PUSH
15603: LD_INT 19
15605: PUSH
15606: LD_INT 20
15608: PUSH
15609: LD_INT 21
15611: PUSH
15612: LD_INT 22
15614: PUSH
15615: LD_INT 23
15617: PUSH
15618: LD_INT 24
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 27
15629: PUSH
15630: LD_INT 28
15632: PUSH
15633: LD_INT 29
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: LD_INT 32
15644: PUSH
15645: LD_INT 33
15647: PUSH
15648: LD_INT 34
15650: PUSH
15651: LD_INT 35
15653: PUSH
15654: LD_INT 36
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 101
15697: PUSH
15698: LD_INT 102
15700: PUSH
15701: LD_INT 103
15703: PUSH
15704: LD_INT 104
15706: PUSH
15707: LD_INT 105
15709: PUSH
15710: LD_INT 106
15712: PUSH
15713: LD_INT 107
15715: PUSH
15716: LD_INT 108
15718: PUSH
15719: LD_INT 109
15721: PUSH
15722: LD_INT 110
15724: PUSH
15725: LD_INT 111
15727: PUSH
15728: LD_INT 112
15730: PUSH
15731: LD_INT 113
15733: PUSH
15734: LD_INT 114
15736: PUSH
15737: LD_INT 115
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: ST_TO_ADDR
15761: GO 15764
15763: POP
// end else
15764: GO 15983
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15766: LD_ADDR_VAR 0 1
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 3
15779: PUSH
15780: LD_INT 4
15782: PUSH
15783: LD_INT 5
15785: PUSH
15786: LD_INT 6
15788: PUSH
15789: LD_INT 7
15791: PUSH
15792: LD_INT 8
15794: PUSH
15795: LD_INT 9
15797: PUSH
15798: LD_INT 10
15800: PUSH
15801: LD_INT 11
15803: PUSH
15804: LD_INT 12
15806: PUSH
15807: LD_INT 13
15809: PUSH
15810: LD_INT 14
15812: PUSH
15813: LD_INT 15
15815: PUSH
15816: LD_INT 16
15818: PUSH
15819: LD_INT 17
15821: PUSH
15822: LD_INT 18
15824: PUSH
15825: LD_INT 19
15827: PUSH
15828: LD_INT 20
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_INT 23
15839: PUSH
15840: LD_INT 24
15842: PUSH
15843: LD_INT 25
15845: PUSH
15846: LD_INT 26
15848: PUSH
15849: LD_INT 27
15851: PUSH
15852: LD_INT 28
15854: PUSH
15855: LD_INT 29
15857: PUSH
15858: LD_INT 30
15860: PUSH
15861: LD_INT 31
15863: PUSH
15864: LD_INT 32
15866: PUSH
15867: LD_INT 33
15869: PUSH
15870: LD_INT 34
15872: PUSH
15873: LD_INT 35
15875: PUSH
15876: LD_INT 36
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 101
15919: PUSH
15920: LD_INT 102
15922: PUSH
15923: LD_INT 103
15925: PUSH
15926: LD_INT 104
15928: PUSH
15929: LD_INT 105
15931: PUSH
15932: LD_INT 106
15934: PUSH
15935: LD_INT 107
15937: PUSH
15938: LD_INT 108
15940: PUSH
15941: LD_INT 109
15943: PUSH
15944: LD_INT 110
15946: PUSH
15947: LD_INT 111
15949: PUSH
15950: LD_INT 112
15952: PUSH
15953: LD_INT 113
15955: PUSH
15956: LD_INT 114
15958: PUSH
15959: LD_INT 115
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// if result then
15983: LD_VAR 0 1
15987: IFFALSE 16276
// begin normal :=  ;
15989: LD_ADDR_VAR 0 3
15993: PUSH
15994: LD_STRING 
15996: ST_TO_ADDR
// hardcore :=  ;
15997: LD_ADDR_VAR 0 4
16001: PUSH
16002: LD_STRING 
16004: ST_TO_ADDR
// for i = 1 to normalCounter do
16005: LD_ADDR_VAR 0 5
16009: PUSH
16010: DOUBLE
16011: LD_INT 1
16013: DEC
16014: ST_TO_ADDR
16015: LD_EXP 45
16019: PUSH
16020: FOR_TO
16021: IFFALSE 16122
// begin tmp := 0 ;
16023: LD_ADDR_VAR 0 2
16027: PUSH
16028: LD_STRING 0
16030: ST_TO_ADDR
// if result [ 1 ] then
16031: LD_VAR 0 1
16035: PUSH
16036: LD_INT 1
16038: ARRAY
16039: IFFALSE 16104
// if result [ 1 ] [ 1 ] = i then
16041: LD_VAR 0 1
16045: PUSH
16046: LD_INT 1
16048: ARRAY
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: PUSH
16054: LD_VAR 0 5
16058: EQUAL
16059: IFFALSE 16104
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: LD_VAR 0 1
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_VAR 0 1
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 3
16090: PPUSH
16091: CALL_OW 1
16095: ST_TO_ADDR
// tmp := 1 ;
16096: LD_ADDR_VAR 0 2
16100: PUSH
16101: LD_STRING 1
16103: ST_TO_ADDR
// end ; normal := normal & tmp ;
16104: LD_ADDR_VAR 0 3
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_VAR 0 2
16118: STR
16119: ST_TO_ADDR
// end ;
16120: GO 16020
16122: POP
16123: POP
// for i = 1 to hardcoreCounter do
16124: LD_ADDR_VAR 0 5
16128: PUSH
16129: DOUBLE
16130: LD_INT 1
16132: DEC
16133: ST_TO_ADDR
16134: LD_EXP 46
16138: PUSH
16139: FOR_TO
16140: IFFALSE 16245
// begin tmp := 0 ;
16142: LD_ADDR_VAR 0 2
16146: PUSH
16147: LD_STRING 0
16149: ST_TO_ADDR
// if result [ 2 ] then
16150: LD_VAR 0 1
16154: PUSH
16155: LD_INT 2
16157: ARRAY
16158: IFFALSE 16227
// if result [ 2 ] [ 1 ] = 100 + i then
16160: LD_VAR 0 1
16164: PUSH
16165: LD_INT 2
16167: ARRAY
16168: PUSH
16169: LD_INT 1
16171: ARRAY
16172: PUSH
16173: LD_INT 100
16175: PUSH
16176: LD_VAR 0 5
16180: PLUS
16181: EQUAL
16182: IFFALSE 16227
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16184: LD_ADDR_VAR 0 1
16188: PUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: LD_INT 2
16196: PPUSH
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 2
16204: ARRAY
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: CALL_OW 3
16213: PPUSH
16214: CALL_OW 1
16218: ST_TO_ADDR
// tmp := 1 ;
16219: LD_ADDR_VAR 0 2
16223: PUSH
16224: LD_STRING 1
16226: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16227: LD_ADDR_VAR 0 4
16231: PUSH
16232: LD_VAR 0 4
16236: PUSH
16237: LD_VAR 0 2
16241: STR
16242: ST_TO_ADDR
// end ;
16243: GO 16139
16245: POP
16246: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16247: LD_STRING getStreamItemsFromMission("
16249: PUSH
16250: LD_VAR 0 3
16254: STR
16255: PUSH
16256: LD_STRING ","
16258: STR
16259: PUSH
16260: LD_VAR 0 4
16264: STR
16265: PUSH
16266: LD_STRING ")
16268: STR
16269: PPUSH
16270: CALL_OW 559
// end else
16274: GO 16283
// ToLua ( getStreamItemsFromMission("","") ) ;
16276: LD_STRING getStreamItemsFromMission("","")
16278: PPUSH
16279: CALL_OW 559
// end ;
16283: LD_VAR 0 1
16287: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16288: LD_EXP 44
16292: PUSH
16293: LD_EXP 49
16297: AND
16298: IFFALSE 16422
16300: GO 16302
16302: DISABLE
16303: LD_INT 0
16305: PPUSH
16306: PPUSH
// begin enable ;
16307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16308: LD_ADDR_VAR 0 2
16312: PUSH
16313: LD_INT 22
16315: PUSH
16316: LD_OWVAR 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 34
16330: PUSH
16331: LD_INT 7
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 34
16340: PUSH
16341: LD_INT 45
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 34
16350: PUSH
16351: LD_INT 28
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 34
16360: PUSH
16361: LD_INT 47
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: ST_TO_ADDR
// if not tmp then
16384: LD_VAR 0 2
16388: NOT
16389: IFFALSE 16393
// exit ;
16391: GO 16422
// for i in tmp do
16393: LD_ADDR_VAR 0 1
16397: PUSH
16398: LD_VAR 0 2
16402: PUSH
16403: FOR_IN
16404: IFFALSE 16420
// begin SetLives ( i , 0 ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 234
// end ;
16418: GO 16403
16420: POP
16421: POP
// end ;
16422: PPOPN 2
16424: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16425: LD_EXP 44
16429: PUSH
16430: LD_EXP 50
16434: AND
16435: IFFALSE 16519
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
// begin enable ;
16444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16445: LD_ADDR_VAR 0 2
16449: PUSH
16450: LD_INT 22
16452: PUSH
16453: LD_OWVAR 2
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 32
16464: PUSH
16465: LD_INT 3
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PPUSH
16476: CALL_OW 69
16480: ST_TO_ADDR
// if not tmp then
16481: LD_VAR 0 2
16485: NOT
16486: IFFALSE 16490
// exit ;
16488: GO 16519
// for i in tmp do
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_VAR 0 2
16499: PUSH
16500: FOR_IN
16501: IFFALSE 16517
// begin SetLives ( i , 0 ) ;
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_INT 0
16510: PPUSH
16511: CALL_OW 234
// end ;
16515: GO 16500
16517: POP
16518: POP
// end ;
16519: PPOPN 2
16521: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16522: LD_EXP 44
16526: PUSH
16527: LD_EXP 47
16531: AND
16532: IFFALSE 16625
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin enable ;
16540: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16541: LD_ADDR_VAR 0 1
16545: PUSH
16546: LD_INT 22
16548: PUSH
16549: LD_OWVAR 2
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 25
16563: PUSH
16564: LD_INT 5
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 25
16573: PUSH
16574: LD_INT 9
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 25
16583: PUSH
16584: LD_INT 8
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 69
16605: PUSH
16606: FOR_IN
16607: IFFALSE 16623
// begin SetClass ( i , 1 ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 336
// end ;
16621: GO 16606
16623: POP
16624: POP
// end ;
16625: PPOPN 1
16627: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16628: LD_EXP 44
16632: PUSH
16633: LD_EXP 48
16637: AND
16638: PUSH
16639: LD_OWVAR 65
16643: PUSH
16644: LD_INT 7
16646: LESS
16647: AND
16648: IFFALSE 16662
16650: GO 16652
16652: DISABLE
// begin enable ;
16653: ENABLE
// game_speed := 7 ;
16654: LD_ADDR_OWVAR 65
16658: PUSH
16659: LD_INT 7
16661: ST_TO_ADDR
// end ;
16662: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16663: LD_EXP 44
16667: PUSH
16668: LD_EXP 51
16672: AND
16673: IFFALSE 16875
16675: GO 16677
16677: DISABLE
16678: LD_INT 0
16680: PPUSH
16681: PPUSH
16682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16683: LD_ADDR_VAR 0 3
16687: PUSH
16688: LD_INT 81
16690: PUSH
16691: LD_OWVAR 2
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 21
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PPUSH
16714: CALL_OW 69
16718: ST_TO_ADDR
// if not tmp then
16719: LD_VAR 0 3
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16875
// if tmp > 5 then
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 5
16735: GREATER
16736: IFFALSE 16748
// k := 5 else
16738: LD_ADDR_VAR 0 2
16742: PUSH
16743: LD_INT 5
16745: ST_TO_ADDR
16746: GO 16758
// k := tmp ;
16748: LD_ADDR_VAR 0 2
16752: PUSH
16753: LD_VAR 0 3
16757: ST_TO_ADDR
// for i := 1 to k do
16758: LD_ADDR_VAR 0 1
16762: PUSH
16763: DOUBLE
16764: LD_INT 1
16766: DEC
16767: ST_TO_ADDR
16768: LD_VAR 0 2
16772: PUSH
16773: FOR_TO
16774: IFFALSE 16873
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16776: LD_VAR 0 3
16780: PUSH
16781: LD_VAR 0 1
16785: ARRAY
16786: PPUSH
16787: LD_VAR 0 1
16791: PUSH
16792: LD_INT 4
16794: MOD
16795: PUSH
16796: LD_INT 1
16798: PLUS
16799: PPUSH
16800: CALL_OW 259
16804: PUSH
16805: LD_INT 10
16807: LESS
16808: IFFALSE 16871
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16810: LD_VAR 0 3
16814: PUSH
16815: LD_VAR 0 1
16819: ARRAY
16820: PPUSH
16821: LD_VAR 0 1
16825: PUSH
16826: LD_INT 4
16828: MOD
16829: PUSH
16830: LD_INT 1
16832: PLUS
16833: PPUSH
16834: LD_VAR 0 3
16838: PUSH
16839: LD_VAR 0 1
16843: ARRAY
16844: PPUSH
16845: LD_VAR 0 1
16849: PUSH
16850: LD_INT 4
16852: MOD
16853: PUSH
16854: LD_INT 1
16856: PLUS
16857: PPUSH
16858: CALL_OW 259
16862: PUSH
16863: LD_INT 1
16865: PLUS
16866: PPUSH
16867: CALL_OW 237
16871: GO 16773
16873: POP
16874: POP
// end ;
16875: PPOPN 3
16877: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16878: LD_EXP 44
16882: PUSH
16883: LD_EXP 52
16887: AND
16888: IFFALSE 16908
16890: GO 16892
16892: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16893: LD_INT 4
16895: PPUSH
16896: LD_OWVAR 2
16900: PPUSH
16901: LD_INT 0
16903: PPUSH
16904: CALL_OW 324
16908: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16909: LD_EXP 44
16913: PUSH
16914: LD_EXP 81
16918: AND
16919: IFFALSE 16939
16921: GO 16923
16923: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16924: LD_INT 19
16926: PPUSH
16927: LD_OWVAR 2
16931: PPUSH
16932: LD_INT 0
16934: PPUSH
16935: CALL_OW 324
16939: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16940: LD_EXP 44
16944: PUSH
16945: LD_EXP 53
16949: AND
16950: IFFALSE 17052
16952: GO 16954
16954: DISABLE
16955: LD_INT 0
16957: PPUSH
16958: PPUSH
// begin enable ;
16959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16960: LD_ADDR_VAR 0 2
16964: PUSH
16965: LD_INT 22
16967: PUSH
16968: LD_OWVAR 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: LD_INT 34
16982: PUSH
16983: LD_INT 11
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 34
16992: PUSH
16993: LD_INT 30
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: ST_TO_ADDR
// if not tmp then
17014: LD_VAR 0 2
17018: NOT
17019: IFFALSE 17023
// exit ;
17021: GO 17052
// for i in tmp do
17023: LD_ADDR_VAR 0 1
17027: PUSH
17028: LD_VAR 0 2
17032: PUSH
17033: FOR_IN
17034: IFFALSE 17050
// begin SetLives ( i , 0 ) ;
17036: LD_VAR 0 1
17040: PPUSH
17041: LD_INT 0
17043: PPUSH
17044: CALL_OW 234
// end ;
17048: GO 17033
17050: POP
17051: POP
// end ;
17052: PPOPN 2
17054: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17055: LD_EXP 44
17059: PUSH
17060: LD_EXP 54
17064: AND
17065: IFFALSE 17085
17067: GO 17069
17069: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17070: LD_INT 32
17072: PPUSH
17073: LD_OWVAR 2
17077: PPUSH
17078: LD_INT 0
17080: PPUSH
17081: CALL_OW 324
17085: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17086: LD_EXP 44
17090: PUSH
17091: LD_EXP 55
17095: AND
17096: IFFALSE 17277
17098: GO 17100
17100: DISABLE
17101: LD_INT 0
17103: PPUSH
17104: PPUSH
17105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17106: LD_ADDR_VAR 0 2
17110: PUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 33
17125: PUSH
17126: LD_INT 3
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: ST_TO_ADDR
// if not tmp then
17142: LD_VAR 0 2
17146: NOT
17147: IFFALSE 17151
// exit ;
17149: GO 17277
// side := 0 ;
17151: LD_ADDR_VAR 0 3
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// for i := 1 to 8 do
17159: LD_ADDR_VAR 0 1
17163: PUSH
17164: DOUBLE
17165: LD_INT 1
17167: DEC
17168: ST_TO_ADDR
17169: LD_INT 8
17171: PUSH
17172: FOR_TO
17173: IFFALSE 17221
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17175: LD_OWVAR 2
17179: PUSH
17180: LD_VAR 0 1
17184: NONEQUAL
17185: PUSH
17186: LD_OWVAR 2
17190: PPUSH
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 81
17200: PUSH
17201: LD_INT 2
17203: EQUAL
17204: AND
17205: IFFALSE 17219
// begin side := i ;
17207: LD_ADDR_VAR 0 3
17211: PUSH
17212: LD_VAR 0 1
17216: ST_TO_ADDR
// break ;
17217: GO 17221
// end ;
17219: GO 17172
17221: POP
17222: POP
// if not side then
17223: LD_VAR 0 3
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17277
// for i := 1 to tmp do
17232: LD_ADDR_VAR 0 1
17236: PUSH
17237: DOUBLE
17238: LD_INT 1
17240: DEC
17241: ST_TO_ADDR
17242: LD_VAR 0 2
17246: PUSH
17247: FOR_TO
17248: IFFALSE 17275
// if Prob ( 60 ) then
17250: LD_INT 60
17252: PPUSH
17253: CALL_OW 13
17257: IFFALSE 17273
// SetSide ( i , side ) ;
17259: LD_VAR 0 1
17263: PPUSH
17264: LD_VAR 0 3
17268: PPUSH
17269: CALL_OW 235
17273: GO 17247
17275: POP
17276: POP
// end ;
17277: PPOPN 3
17279: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17280: LD_EXP 44
17284: PUSH
17285: LD_EXP 57
17289: AND
17290: IFFALSE 17409
17292: GO 17294
17294: DISABLE
17295: LD_INT 0
17297: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17298: LD_ADDR_VAR 0 1
17302: PUSH
17303: LD_INT 22
17305: PUSH
17306: LD_OWVAR 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 21
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 3
17327: PUSH
17328: LD_INT 23
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17407
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 257
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: LD_INT 4
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: IN
17383: IFFALSE 17405
// SetClass ( un , rand ( 1 , 4 ) ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: LD_INT 4
17395: PPUSH
17396: CALL_OW 12
17400: PPUSH
17401: CALL_OW 336
17405: GO 17352
17407: POP
17408: POP
// end ;
17409: PPOPN 1
17411: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17412: LD_EXP 44
17416: PUSH
17417: LD_EXP 56
17421: AND
17422: IFFALSE 17501
17424: GO 17426
17426: DISABLE
17427: LD_INT 0
17429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17430: LD_ADDR_VAR 0 1
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_OWVAR 2
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 21
17449: PUSH
17450: LD_INT 3
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 69
17465: ST_TO_ADDR
// if not tmp then
17466: LD_VAR 0 1
17470: NOT
17471: IFFALSE 17475
// exit ;
17473: GO 17501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17475: LD_VAR 0 1
17479: PUSH
17480: LD_INT 1
17482: PPUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: CALL_OW 12
17492: ARRAY
17493: PPUSH
17494: LD_INT 100
17496: PPUSH
17497: CALL_OW 234
// end ;
17501: PPOPN 1
17503: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17504: LD_EXP 44
17508: PUSH
17509: LD_EXP 58
17513: AND
17514: IFFALSE 17612
17516: GO 17518
17518: DISABLE
17519: LD_INT 0
17521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17522: LD_ADDR_VAR 0 1
17526: PUSH
17527: LD_INT 22
17529: PUSH
17530: LD_OWVAR 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 21
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: ST_TO_ADDR
// if not tmp then
17558: LD_VAR 0 1
17562: NOT
17563: IFFALSE 17567
// exit ;
17565: GO 17612
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17567: LD_VAR 0 1
17571: PUSH
17572: LD_INT 1
17574: PPUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 12
17584: ARRAY
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: LD_INT 4
17591: PPUSH
17592: CALL_OW 12
17596: PPUSH
17597: LD_INT 3000
17599: PPUSH
17600: LD_INT 9000
17602: PPUSH
17603: CALL_OW 12
17607: PPUSH
17608: CALL_OW 492
// end ;
17612: PPOPN 1
17614: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17615: LD_EXP 44
17619: PUSH
17620: LD_EXP 59
17624: AND
17625: IFFALSE 17645
17627: GO 17629
17629: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17630: LD_INT 1
17632: PPUSH
17633: LD_OWVAR 2
17637: PPUSH
17638: LD_INT 0
17640: PPUSH
17641: CALL_OW 324
17645: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17646: LD_EXP 44
17650: PUSH
17651: LD_EXP 60
17655: AND
17656: IFFALSE 17739
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17665: LD_ADDR_VAR 0 2
17669: PUSH
17670: LD_INT 22
17672: PUSH
17673: LD_OWVAR 2
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PPUSH
17696: CALL_OW 69
17700: ST_TO_ADDR
// if not tmp then
17701: LD_VAR 0 2
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17739
// for i in tmp do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_VAR 0 2
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17737
// SetBLevel ( i , 10 ) ;
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_INT 10
17730: PPUSH
17731: CALL_OW 241
17735: GO 17720
17737: POP
17738: POP
// end ;
17739: PPOPN 2
17741: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17742: LD_EXP 44
17746: PUSH
17747: LD_EXP 61
17751: AND
17752: IFFALSE 17863
17754: GO 17756
17756: DISABLE
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
17761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17762: LD_ADDR_VAR 0 3
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_OWVAR 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 25
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: ST_TO_ADDR
// if not tmp then
17798: LD_VAR 0 3
17802: NOT
17803: IFFALSE 17807
// exit ;
17805: GO 17863
// un := tmp [ rand ( 1 , tmp ) ] ;
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_VAR 0 3
17816: PUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_VAR 0 3
17824: PPUSH
17825: CALL_OW 12
17829: ARRAY
17830: ST_TO_ADDR
// if Crawls ( un ) then
17831: LD_VAR 0 2
17835: PPUSH
17836: CALL_OW 318
17840: IFFALSE 17851
// ComWalk ( un ) ;
17842: LD_VAR 0 2
17846: PPUSH
17847: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17851: LD_VAR 0 2
17855: PPUSH
17856: LD_INT 5
17858: PPUSH
17859: CALL_OW 336
// end ;
17863: PPOPN 3
17865: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17866: LD_EXP 44
17870: PUSH
17871: LD_EXP 62
17875: AND
17876: PUSH
17877: LD_OWVAR 67
17881: PUSH
17882: LD_INT 3
17884: LESS
17885: AND
17886: IFFALSE 17905
17888: GO 17890
17890: DISABLE
// Difficulty := Difficulty + 1 ;
17891: LD_ADDR_OWVAR 67
17895: PUSH
17896: LD_OWVAR 67
17900: PUSH
17901: LD_INT 1
17903: PLUS
17904: ST_TO_ADDR
17905: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17906: LD_EXP 44
17910: PUSH
17911: LD_EXP 63
17915: AND
17916: IFFALSE 18019
17918: GO 17920
17920: DISABLE
17921: LD_INT 0
17923: PPUSH
// begin for i := 1 to 5 do
17924: LD_ADDR_VAR 0 1
17928: PUSH
17929: DOUBLE
17930: LD_INT 1
17932: DEC
17933: ST_TO_ADDR
17934: LD_INT 5
17936: PUSH
17937: FOR_TO
17938: IFFALSE 18017
// begin uc_nation := nation_nature ;
17940: LD_ADDR_OWVAR 21
17944: PUSH
17945: LD_INT 0
17947: ST_TO_ADDR
// uc_side := 0 ;
17948: LD_ADDR_OWVAR 20
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17956: LD_ADDR_OWVAR 29
17960: PUSH
17961: LD_INT 12
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: ST_TO_ADDR
// hc_agressivity := 20 ;
17971: LD_ADDR_OWVAR 35
17975: PUSH
17976: LD_INT 20
17978: ST_TO_ADDR
// hc_class := class_tiger ;
17979: LD_ADDR_OWVAR 28
17983: PUSH
17984: LD_INT 14
17986: ST_TO_ADDR
// hc_gallery :=  ;
17987: LD_ADDR_OWVAR 33
17991: PUSH
17992: LD_STRING 
17994: ST_TO_ADDR
// hc_name :=  ;
17995: LD_ADDR_OWVAR 26
17999: PUSH
18000: LD_STRING 
18002: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18003: CALL_OW 44
18007: PPUSH
18008: LD_INT 0
18010: PPUSH
18011: CALL_OW 51
// end ;
18015: GO 17937
18017: POP
18018: POP
// end ;
18019: PPOPN 1
18021: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18022: LD_EXP 44
18026: PUSH
18027: LD_EXP 64
18031: AND
18032: IFFALSE 18041
18034: GO 18036
18036: DISABLE
// StreamSibBomb ;
18037: CALL 18042 0 0
18041: END
// export function StreamSibBomb ; var i , x , y ; begin
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
18046: PPUSH
18047: PPUSH
// result := false ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_INT 0
18055: ST_TO_ADDR
// for i := 1 to 16 do
18056: LD_ADDR_VAR 0 2
18060: PUSH
18061: DOUBLE
18062: LD_INT 1
18064: DEC
18065: ST_TO_ADDR
18066: LD_INT 16
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18269
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18072: LD_ADDR_VAR 0 3
18076: PUSH
18077: LD_INT 10
18079: PUSH
18080: LD_INT 20
18082: PUSH
18083: LD_INT 30
18085: PUSH
18086: LD_INT 40
18088: PUSH
18089: LD_INT 50
18091: PUSH
18092: LD_INT 60
18094: PUSH
18095: LD_INT 70
18097: PUSH
18098: LD_INT 80
18100: PUSH
18101: LD_INT 90
18103: PUSH
18104: LD_INT 100
18106: PUSH
18107: LD_INT 110
18109: PUSH
18110: LD_INT 120
18112: PUSH
18113: LD_INT 130
18115: PUSH
18116: LD_INT 140
18118: PUSH
18119: LD_INT 150
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PPUSH
18142: LD_INT 15
18144: PPUSH
18145: CALL_OW 12
18149: ARRAY
18150: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18151: LD_ADDR_VAR 0 4
18155: PUSH
18156: LD_INT 10
18158: PUSH
18159: LD_INT 20
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 40
18167: PUSH
18168: LD_INT 50
18170: PUSH
18171: LD_INT 60
18173: PUSH
18174: LD_INT 70
18176: PUSH
18177: LD_INT 80
18179: PUSH
18180: LD_INT 90
18182: PUSH
18183: LD_INT 100
18185: PUSH
18186: LD_INT 110
18188: PUSH
18189: LD_INT 120
18191: PUSH
18192: LD_INT 130
18194: PUSH
18195: LD_INT 140
18197: PUSH
18198: LD_INT 150
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 1
18220: PPUSH
18221: LD_INT 15
18223: PPUSH
18224: CALL_OW 12
18228: ARRAY
18229: ST_TO_ADDR
// if ValidHex ( x , y ) then
18230: LD_VAR 0 3
18234: PPUSH
18235: LD_VAR 0 4
18239: PPUSH
18240: CALL_OW 488
18244: IFFALSE 18267
// begin result := [ x , y ] ;
18246: LD_ADDR_VAR 0 1
18250: PUSH
18251: LD_VAR 0 3
18255: PUSH
18256: LD_VAR 0 4
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: ST_TO_ADDR
// break ;
18265: GO 18269
// end ; end ;
18267: GO 18069
18269: POP
18270: POP
// if result then
18271: LD_VAR 0 1
18275: IFFALSE 18335
// begin ToLua ( playSibBomb() ) ;
18277: LD_STRING playSibBomb()
18279: PPUSH
18280: CALL_OW 559
// wait ( 0 0$14 ) ;
18284: LD_INT 490
18286: PPUSH
18287: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18291: LD_VAR 0 1
18295: PUSH
18296: LD_INT 1
18298: ARRAY
18299: PPUSH
18300: LD_VAR 0 1
18304: PUSH
18305: LD_INT 2
18307: ARRAY
18308: PPUSH
18309: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18313: LD_VAR 0 1
18317: PUSH
18318: LD_INT 1
18320: ARRAY
18321: PPUSH
18322: LD_VAR 0 1
18326: PUSH
18327: LD_INT 2
18329: ARRAY
18330: PPUSH
18331: CALL_OW 429
// end ; end ;
18335: LD_VAR 0 1
18339: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18340: LD_EXP 44
18344: PUSH
18345: LD_EXP 66
18349: AND
18350: IFFALSE 18362
18352: GO 18354
18354: DISABLE
// YouLost (  ) ;
18355: LD_STRING 
18357: PPUSH
18358: CALL_OW 104
18362: END
// every 0 0$1 trigger StreamModeActive and sFog do
18363: LD_EXP 44
18367: PUSH
18368: LD_EXP 65
18372: AND
18373: IFFALSE 18387
18375: GO 18377
18377: DISABLE
// FogOff ( your_side ) ;
18378: LD_OWVAR 2
18382: PPUSH
18383: CALL_OW 344
18387: END
// every 0 0$1 trigger StreamModeActive and sSun do
18388: LD_EXP 44
18392: PUSH
18393: LD_EXP 67
18397: AND
18398: IFFALSE 18426
18400: GO 18402
18402: DISABLE
// begin solar_recharge_percent := 0 ;
18403: LD_ADDR_OWVAR 79
18407: PUSH
18408: LD_INT 0
18410: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18411: LD_INT 10500
18413: PPUSH
18414: CALL_OW 67
// solar_recharge_percent := 100 ;
18418: LD_ADDR_OWVAR 79
18422: PUSH
18423: LD_INT 100
18425: ST_TO_ADDR
// end ;
18426: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18427: LD_EXP 44
18431: PUSH
18432: LD_EXP 68
18436: AND
18437: IFFALSE 18676
18439: GO 18441
18441: DISABLE
18442: LD_INT 0
18444: PPUSH
18445: PPUSH
18446: PPUSH
// begin tmp := [ ] ;
18447: LD_ADDR_VAR 0 3
18451: PUSH
18452: EMPTY
18453: ST_TO_ADDR
// for i := 1 to 6 do
18454: LD_ADDR_VAR 0 1
18458: PUSH
18459: DOUBLE
18460: LD_INT 1
18462: DEC
18463: ST_TO_ADDR
18464: LD_INT 6
18466: PUSH
18467: FOR_TO
18468: IFFALSE 18573
// begin uc_nation := nation_nature ;
18470: LD_ADDR_OWVAR 21
18474: PUSH
18475: LD_INT 0
18477: ST_TO_ADDR
// uc_side := 0 ;
18478: LD_ADDR_OWVAR 20
18482: PUSH
18483: LD_INT 0
18485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18486: LD_ADDR_OWVAR 29
18490: PUSH
18491: LD_INT 12
18493: PUSH
18494: LD_INT 12
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: ST_TO_ADDR
// hc_agressivity := 20 ;
18501: LD_ADDR_OWVAR 35
18505: PUSH
18506: LD_INT 20
18508: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18509: LD_ADDR_OWVAR 28
18513: PUSH
18514: LD_INT 17
18516: ST_TO_ADDR
// hc_gallery :=  ;
18517: LD_ADDR_OWVAR 33
18521: PUSH
18522: LD_STRING 
18524: ST_TO_ADDR
// hc_name :=  ;
18525: LD_ADDR_OWVAR 26
18529: PUSH
18530: LD_STRING 
18532: ST_TO_ADDR
// un := CreateHuman ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: CALL_OW 44
18542: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18543: LD_VAR 0 2
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 51
// tmp := tmp ^ un ;
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_VAR 0 3
18564: PUSH
18565: LD_VAR 0 2
18569: ADD
18570: ST_TO_ADDR
// end ;
18571: GO 18467
18573: POP
18574: POP
// repeat wait ( 0 0$1 ) ;
18575: LD_INT 35
18577: PPUSH
18578: CALL_OW 67
// for un in tmp do
18582: LD_ADDR_VAR 0 2
18586: PUSH
18587: LD_VAR 0 3
18591: PUSH
18592: FOR_IN
18593: IFFALSE 18667
// begin if IsDead ( un ) then
18595: LD_VAR 0 2
18599: PPUSH
18600: CALL_OW 301
18604: IFFALSE 18624
// begin tmp := tmp diff un ;
18606: LD_ADDR_VAR 0 3
18610: PUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 2
18620: DIFF
18621: ST_TO_ADDR
// continue ;
18622: GO 18592
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18624: LD_VAR 0 2
18628: PPUSH
18629: LD_INT 3
18631: PUSH
18632: LD_INT 22
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PPUSH
18646: CALL_OW 69
18650: PPUSH
18651: LD_VAR 0 2
18655: PPUSH
18656: CALL_OW 74
18660: PPUSH
18661: CALL_OW 115
// end ;
18665: GO 18592
18667: POP
18668: POP
// until not tmp ;
18669: LD_VAR 0 3
18673: NOT
18674: IFFALSE 18575
// end ;
18676: PPOPN 3
18678: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18679: LD_EXP 44
18683: PUSH
18684: LD_EXP 69
18688: AND
18689: IFFALSE 18743
18691: GO 18693
18693: DISABLE
// begin ToLua ( displayTroll(); ) ;
18694: LD_STRING displayTroll();
18696: PPUSH
18697: CALL_OW 559
// wait ( 3 3$00 ) ;
18701: LD_INT 6300
18703: PPUSH
18704: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18708: LD_STRING hideTroll();
18710: PPUSH
18711: CALL_OW 559
// wait ( 1 1$00 ) ;
18715: LD_INT 2100
18717: PPUSH
18718: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18722: LD_STRING displayTroll();
18724: PPUSH
18725: CALL_OW 559
// wait ( 1 1$00 ) ;
18729: LD_INT 2100
18731: PPUSH
18732: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18736: LD_STRING hideTroll();
18738: PPUSH
18739: CALL_OW 559
// end ;
18743: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18744: LD_EXP 44
18748: PUSH
18749: LD_EXP 70
18753: AND
18754: IFFALSE 18817
18756: GO 18758
18758: DISABLE
18759: LD_INT 0
18761: PPUSH
// begin p := 0 ;
18762: LD_ADDR_VAR 0 1
18766: PUSH
18767: LD_INT 0
18769: ST_TO_ADDR
// repeat game_speed := 1 ;
18770: LD_ADDR_OWVAR 65
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18778: LD_INT 35
18780: PPUSH
18781: CALL_OW 67
// p := p + 1 ;
18785: LD_ADDR_VAR 0 1
18789: PUSH
18790: LD_VAR 0 1
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// until p >= 60 ;
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 60
18806: GREATEREQUAL
18807: IFFALSE 18770
// game_speed := 4 ;
18809: LD_ADDR_OWVAR 65
18813: PUSH
18814: LD_INT 4
18816: ST_TO_ADDR
// end ;
18817: PPOPN 1
18819: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18820: LD_EXP 44
18824: PUSH
18825: LD_EXP 71
18829: AND
18830: IFFALSE 18976
18832: GO 18834
18834: DISABLE
18835: LD_INT 0
18837: PPUSH
18838: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18839: LD_ADDR_VAR 0 1
18843: PUSH
18844: LD_INT 22
18846: PUSH
18847: LD_OWVAR 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 2
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 30
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL_OW 69
18892: ST_TO_ADDR
// if not depot then
18893: LD_VAR 0 1
18897: NOT
18898: IFFALSE 18902
// exit ;
18900: GO 18976
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 12
18924: ARRAY
18925: PPUSH
18926: CALL_OW 274
18930: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18931: LD_VAR 0 2
18935: PPUSH
18936: LD_INT 1
18938: PPUSH
18939: LD_INT 0
18941: PPUSH
18942: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18946: LD_VAR 0 2
18950: PPUSH
18951: LD_INT 2
18953: PPUSH
18954: LD_INT 0
18956: PPUSH
18957: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_INT 3
18968: PPUSH
18969: LD_INT 0
18971: PPUSH
18972: CALL_OW 277
// end ;
18976: PPOPN 2
18978: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18979: LD_EXP 44
18983: PUSH
18984: LD_EXP 72
18988: AND
18989: IFFALSE 19086
18991: GO 18993
18993: DISABLE
18994: LD_INT 0
18996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: LD_INT 23
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 69
19050: ST_TO_ADDR
// if not tmp then
19051: LD_VAR 0 1
19055: NOT
19056: IFFALSE 19060
// exit ;
19058: GO 19086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19060: LD_VAR 0 1
19064: PUSH
19065: LD_INT 1
19067: PPUSH
19068: LD_VAR 0 1
19072: PPUSH
19073: CALL_OW 12
19077: ARRAY
19078: PPUSH
19079: LD_INT 200
19081: PPUSH
19082: CALL_OW 234
// end ;
19086: PPOPN 1
19088: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19089: LD_EXP 44
19093: PUSH
19094: LD_EXP 73
19098: AND
19099: IFFALSE 19178
19101: GO 19103
19103: DISABLE
19104: LD_INT 0
19106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19107: LD_ADDR_VAR 0 1
19111: PUSH
19112: LD_INT 22
19114: PUSH
19115: LD_OWVAR 2
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 21
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 69
19142: ST_TO_ADDR
// if not tmp then
19143: LD_VAR 0 1
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19152: LD_VAR 0 1
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_VAR 0 1
19164: PPUSH
19165: CALL_OW 12
19169: ARRAY
19170: PPUSH
19171: LD_INT 60
19173: PPUSH
19174: CALL_OW 234
// end ;
19178: PPOPN 1
19180: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19181: LD_EXP 44
19185: PUSH
19186: LD_EXP 74
19190: AND
19191: IFFALSE 19290
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
// begin enable ;
19200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19201: LD_ADDR_VAR 0 1
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_OWVAR 2
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 61
19220: PUSH
19221: EMPTY
19222: LIST
19223: PUSH
19224: LD_INT 33
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// if not tmp then
19244: LD_VAR 0 1
19248: NOT
19249: IFFALSE 19253
// exit ;
19251: GO 19290
// for i in tmp do
19253: LD_ADDR_VAR 0 2
19257: PUSH
19258: LD_VAR 0 1
19262: PUSH
19263: FOR_IN
19264: IFFALSE 19288
// if IsControledBy ( i ) then
19266: LD_VAR 0 2
19270: PPUSH
19271: CALL_OW 312
19275: IFFALSE 19286
// ComUnlink ( i ) ;
19277: LD_VAR 0 2
19281: PPUSH
19282: CALL_OW 136
19286: GO 19263
19288: POP
19289: POP
// end ;
19290: PPOPN 2
19292: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19293: LD_EXP 44
19297: PUSH
19298: LD_EXP 75
19302: AND
19303: IFFALSE 19443
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
// begin ToLua ( displayPowell(); ) ;
19312: LD_STRING displayPowell();
19314: PPUSH
19315: CALL_OW 559
// uc_side := 0 ;
19319: LD_ADDR_OWVAR 20
19323: PUSH
19324: LD_INT 0
19326: ST_TO_ADDR
// uc_nation := 2 ;
19327: LD_ADDR_OWVAR 21
19331: PUSH
19332: LD_INT 2
19334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19335: LD_ADDR_OWVAR 37
19339: PUSH
19340: LD_INT 14
19342: ST_TO_ADDR
// vc_engine := engine_siberite ;
19343: LD_ADDR_OWVAR 39
19347: PUSH
19348: LD_INT 3
19350: ST_TO_ADDR
// vc_control := control_apeman ;
19351: LD_ADDR_OWVAR 38
19355: PUSH
19356: LD_INT 5
19358: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19359: LD_ADDR_OWVAR 40
19363: PUSH
19364: LD_INT 29
19366: ST_TO_ADDR
// un := CreateVehicle ;
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: CALL_OW 45
19376: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19377: LD_VAR 0 2
19381: PPUSH
19382: LD_INT 1
19384: PPUSH
19385: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19389: LD_INT 35
19391: PPUSH
19392: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19396: LD_VAR 0 2
19400: PPUSH
19401: LD_INT 22
19403: PUSH
19404: LD_OWVAR 2
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PPUSH
19418: LD_VAR 0 2
19422: PPUSH
19423: CALL_OW 74
19427: PPUSH
19428: CALL_OW 115
// until IsDead ( un ) ;
19432: LD_VAR 0 2
19436: PPUSH
19437: CALL_OW 301
19441: IFFALSE 19389
// end ;
19443: PPOPN 2
19445: END
// every 0 0$1 trigger StreamModeActive and sStu do
19446: LD_EXP 44
19450: PUSH
19451: LD_EXP 83
19455: AND
19456: IFFALSE 19472
19458: GO 19460
19460: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19461: LD_STRING displayStucuk();
19463: PPUSH
19464: CALL_OW 559
// ResetFog ;
19468: CALL_OW 335
// end ;
19472: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19473: LD_EXP 44
19477: PUSH
19478: LD_EXP 76
19482: AND
19483: IFFALSE 19624
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
19491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19492: LD_ADDR_VAR 0 2
19496: PUSH
19497: LD_INT 22
19499: PUSH
19500: LD_OWVAR 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 21
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL_OW 69
19527: ST_TO_ADDR
// if not tmp then
19528: LD_VAR 0 2
19532: NOT
19533: IFFALSE 19537
// exit ;
19535: GO 19624
// un := tmp [ rand ( 1 , tmp ) ] ;
19537: LD_ADDR_VAR 0 1
19541: PUSH
19542: LD_VAR 0 2
19546: PUSH
19547: LD_INT 1
19549: PPUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: CALL_OW 12
19559: ARRAY
19560: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_INT 0
19568: PPUSH
19569: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_OWVAR 3
19582: PUSH
19583: LD_VAR 0 1
19587: DIFF
19588: PPUSH
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 74
19598: PPUSH
19599: CALL_OW 115
// wait ( 0 0$20 ) ;
19603: LD_INT 700
19605: PPUSH
19606: CALL_OW 67
// SetSide ( un , your_side ) ;
19610: LD_VAR 0 1
19614: PPUSH
19615: LD_OWVAR 2
19619: PPUSH
19620: CALL_OW 235
// end ;
19624: PPOPN 2
19626: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19627: LD_EXP 44
19631: PUSH
19632: LD_EXP 77
19636: AND
19637: IFFALSE 19743
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19645: LD_ADDR_VAR 0 1
19649: PUSH
19650: LD_INT 22
19652: PUSH
19653: LD_OWVAR 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: LD_INT 30
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PPUSH
19694: CALL_OW 69
19698: ST_TO_ADDR
// if not depot then
19699: LD_VAR 0 1
19703: NOT
19704: IFFALSE 19708
// exit ;
19706: GO 19743
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19708: LD_VAR 0 1
19712: PUSH
19713: LD_INT 1
19715: ARRAY
19716: PPUSH
19717: CALL_OW 250
19721: PPUSH
19722: LD_VAR 0 1
19726: PUSH
19727: LD_INT 1
19729: ARRAY
19730: PPUSH
19731: CALL_OW 251
19735: PPUSH
19736: LD_INT 70
19738: PPUSH
19739: CALL_OW 495
// end ;
19743: PPOPN 1
19745: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19746: LD_EXP 44
19750: PUSH
19751: LD_EXP 78
19755: AND
19756: IFFALSE 19967
19758: GO 19760
19760: DISABLE
19761: LD_INT 0
19763: PPUSH
19764: PPUSH
19765: PPUSH
19766: PPUSH
19767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19768: LD_ADDR_VAR 0 5
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_OWVAR 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PPUSH
19799: CALL_OW 69
19803: ST_TO_ADDR
// if not tmp then
19804: LD_VAR 0 5
19808: NOT
19809: IFFALSE 19813
// exit ;
19811: GO 19967
// for i in tmp do
19813: LD_ADDR_VAR 0 1
19817: PUSH
19818: LD_VAR 0 5
19822: PUSH
19823: FOR_IN
19824: IFFALSE 19965
// begin d := rand ( 0 , 5 ) ;
19826: LD_ADDR_VAR 0 4
19830: PUSH
19831: LD_INT 0
19833: PPUSH
19834: LD_INT 5
19836: PPUSH
19837: CALL_OW 12
19841: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19842: LD_ADDR_VAR 0 2
19846: PUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 250
19856: PPUSH
19857: LD_VAR 0 4
19861: PPUSH
19862: LD_INT 3
19864: PPUSH
19865: LD_INT 12
19867: PPUSH
19868: CALL_OW 12
19872: PPUSH
19873: CALL_OW 272
19877: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19878: LD_ADDR_VAR 0 3
19882: PUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 251
19892: PPUSH
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_INT 3
19900: PPUSH
19901: LD_INT 12
19903: PPUSH
19904: CALL_OW 12
19908: PPUSH
19909: CALL_OW 273
19913: ST_TO_ADDR
// if ValidHex ( x , y ) then
19914: LD_VAR 0 2
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: CALL_OW 488
19928: IFFALSE 19963
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19930: LD_VAR 0 1
19934: PPUSH
19935: LD_VAR 0 2
19939: PPUSH
19940: LD_VAR 0 3
19944: PPUSH
19945: LD_INT 3
19947: PPUSH
19948: LD_INT 6
19950: PPUSH
19951: CALL_OW 12
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 483
// end ;
19963: GO 19823
19965: POP
19966: POP
// end ;
19967: PPOPN 5
19969: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19970: LD_EXP 44
19974: PUSH
19975: LD_EXP 79
19979: AND
19980: IFFALSE 20074
19982: GO 19984
19984: DISABLE
19985: LD_INT 0
19987: PPUSH
19988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19989: LD_ADDR_VAR 0 2
19993: PUSH
19994: LD_INT 22
19996: PUSH
19997: LD_OWVAR 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 32
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 21
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 69
20035: ST_TO_ADDR
// if not tmp then
20036: LD_VAR 0 2
20040: NOT
20041: IFFALSE 20045
// exit ;
20043: GO 20074
// for i in tmp do
20045: LD_ADDR_VAR 0 1
20049: PUSH
20050: LD_VAR 0 2
20054: PUSH
20055: FOR_IN
20056: IFFALSE 20072
// SetFuel ( i , 0 ) ;
20058: LD_VAR 0 1
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: CALL_OW 240
20070: GO 20055
20072: POP
20073: POP
// end ;
20074: PPOPN 2
20076: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20077: LD_EXP 44
20081: PUSH
20082: LD_EXP 80
20086: AND
20087: IFFALSE 20153
20089: GO 20091
20091: DISABLE
20092: LD_INT 0
20094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_OWVAR 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 30
20114: PUSH
20115: LD_INT 29
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PPUSH
20126: CALL_OW 69
20130: ST_TO_ADDR
// if not tmp then
20131: LD_VAR 0 1
20135: NOT
20136: IFFALSE 20140
// exit ;
20138: GO 20153
// DestroyUnit ( tmp [ 1 ] ) ;
20140: LD_VAR 0 1
20144: PUSH
20145: LD_INT 1
20147: ARRAY
20148: PPUSH
20149: CALL_OW 65
// end ;
20153: PPOPN 1
20155: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20156: LD_EXP 44
20160: PUSH
20161: LD_EXP 82
20165: AND
20166: IFFALSE 20295
20168: GO 20170
20170: DISABLE
20171: LD_INT 0
20173: PPUSH
// begin uc_side := 0 ;
20174: LD_ADDR_OWVAR 20
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// uc_nation := nation_arabian ;
20182: LD_ADDR_OWVAR 21
20186: PUSH
20187: LD_INT 2
20189: ST_TO_ADDR
// hc_gallery :=  ;
20190: LD_ADDR_OWVAR 33
20194: PUSH
20195: LD_STRING 
20197: ST_TO_ADDR
// hc_name :=  ;
20198: LD_ADDR_OWVAR 26
20202: PUSH
20203: LD_STRING 
20205: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20206: LD_INT 1
20208: PPUSH
20209: LD_INT 11
20211: PPUSH
20212: LD_INT 10
20214: PPUSH
20215: CALL_OW 380
// un := CreateHuman ;
20219: LD_ADDR_VAR 0 1
20223: PUSH
20224: CALL_OW 44
20228: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20241: LD_INT 35
20243: PPUSH
20244: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20248: LD_VAR 0 1
20252: PPUSH
20253: LD_INT 22
20255: PUSH
20256: LD_OWVAR 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 69
20269: PPUSH
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 74
20279: PPUSH
20280: CALL_OW 115
// until IsDead ( un ) ;
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 301
20293: IFFALSE 20241
// end ;
20295: PPOPN 1
20297: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20298: LD_EXP 44
20302: PUSH
20303: LD_EXP 84
20307: AND
20308: IFFALSE 20320
20310: GO 20312
20312: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20313: LD_STRING earthquake(getX(game), 0, 32)
20315: PPUSH
20316: CALL_OW 559
20320: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20321: LD_EXP 44
20325: PUSH
20326: LD_EXP 85
20330: AND
20331: IFFALSE 20422
20333: GO 20335
20335: DISABLE
20336: LD_INT 0
20338: PPUSH
// begin enable ;
20339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20340: LD_ADDR_VAR 0 1
20344: PUSH
20345: LD_INT 22
20347: PUSH
20348: LD_OWVAR 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 21
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 33
20369: PUSH
20370: LD_INT 3
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL_OW 69
20386: ST_TO_ADDR
// if not tmp then
20387: LD_VAR 0 1
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20396: LD_VAR 0 1
20400: PUSH
20401: LD_INT 1
20403: PPUSH
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 12
20413: ARRAY
20414: PPUSH
20415: LD_INT 1
20417: PPUSH
20418: CALL_OW 234
// end ;
20422: PPOPN 1
20424: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20425: LD_EXP 44
20429: PUSH
20430: LD_EXP 86
20434: AND
20435: IFFALSE 20576
20437: GO 20439
20439: DISABLE
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
20444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20445: LD_ADDR_VAR 0 3
20449: PUSH
20450: LD_INT 22
20452: PUSH
20453: LD_OWVAR 2
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 25
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: ST_TO_ADDR
// if not tmp then
20481: LD_VAR 0 3
20485: NOT
20486: IFFALSE 20490
// exit ;
20488: GO 20576
// un := tmp [ rand ( 1 , tmp ) ] ;
20490: LD_ADDR_VAR 0 2
20494: PUSH
20495: LD_VAR 0 3
20499: PUSH
20500: LD_INT 1
20502: PPUSH
20503: LD_VAR 0 3
20507: PPUSH
20508: CALL_OW 12
20512: ARRAY
20513: ST_TO_ADDR
// if Crawls ( un ) then
20514: LD_VAR 0 2
20518: PPUSH
20519: CALL_OW 318
20523: IFFALSE 20534
// ComWalk ( un ) ;
20525: LD_VAR 0 2
20529: PPUSH
20530: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20534: LD_VAR 0 2
20538: PPUSH
20539: LD_INT 9
20541: PPUSH
20542: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20546: LD_INT 28
20548: PPUSH
20549: LD_OWVAR 2
20553: PPUSH
20554: LD_INT 2
20556: PPUSH
20557: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20561: LD_INT 29
20563: PPUSH
20564: LD_OWVAR 2
20568: PPUSH
20569: LD_INT 2
20571: PPUSH
20572: CALL_OW 322
// end ;
20576: PPOPN 3
20578: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20579: LD_EXP 44
20583: PUSH
20584: LD_EXP 87
20588: AND
20589: IFFALSE 20700
20591: GO 20593
20593: DISABLE
20594: LD_INT 0
20596: PPUSH
20597: PPUSH
20598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 22
20606: PUSH
20607: LD_OWVAR 2
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 25
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: ST_TO_ADDR
// if not tmp then
20635: LD_VAR 0 3
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 20700
// un := tmp [ rand ( 1 , tmp ) ] ;
20644: LD_ADDR_VAR 0 2
20648: PUSH
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 1
20656: PPUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: CALL_OW 12
20666: ARRAY
20667: ST_TO_ADDR
// if Crawls ( un ) then
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 318
20677: IFFALSE 20688
// ComWalk ( un ) ;
20679: LD_VAR 0 2
20683: PPUSH
20684: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20688: LD_VAR 0 2
20692: PPUSH
20693: LD_INT 8
20695: PPUSH
20696: CALL_OW 336
// end ;
20700: PPOPN 3
20702: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20703: LD_EXP 44
20707: PUSH
20708: LD_EXP 88
20712: AND
20713: IFFALSE 20857
20715: GO 20717
20717: DISABLE
20718: LD_INT 0
20720: PPUSH
20721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20722: LD_ADDR_VAR 0 2
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_OWVAR 2
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 2
20751: PUSH
20752: LD_INT 34
20754: PUSH
20755: LD_INT 12
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 34
20764: PUSH
20765: LD_INT 51
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 34
20774: PUSH
20775: LD_INT 32
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: LIST
20792: PPUSH
20793: CALL_OW 69
20797: ST_TO_ADDR
// if not tmp then
20798: LD_VAR 0 2
20802: NOT
20803: IFFALSE 20807
// exit ;
20805: GO 20857
// for i in tmp do
20807: LD_ADDR_VAR 0 1
20811: PUSH
20812: LD_VAR 0 2
20816: PUSH
20817: FOR_IN
20818: IFFALSE 20855
// if GetCargo ( i , mat_artifact ) = 0 then
20820: LD_VAR 0 1
20824: PPUSH
20825: LD_INT 4
20827: PPUSH
20828: CALL_OW 289
20832: PUSH
20833: LD_INT 0
20835: EQUAL
20836: IFFALSE 20853
// SetCargo ( i , mat_siberit , 100 ) ;
20838: LD_VAR 0 1
20842: PPUSH
20843: LD_INT 3
20845: PPUSH
20846: LD_INT 100
20848: PPUSH
20849: CALL_OW 290
20853: GO 20817
20855: POP
20856: POP
// end ;
20857: PPOPN 2
20859: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20860: LD_EXP 44
20864: PUSH
20865: LD_EXP 89
20869: AND
20870: IFFALSE 21053
20872: GO 20874
20874: DISABLE
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20879: LD_ADDR_VAR 0 2
20883: PUSH
20884: LD_INT 22
20886: PUSH
20887: LD_OWVAR 2
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 69
20900: ST_TO_ADDR
// if not tmp then
20901: LD_VAR 0 2
20905: NOT
20906: IFFALSE 20910
// exit ;
20908: GO 21053
// for i := 1 to 2 do
20910: LD_ADDR_VAR 0 1
20914: PUSH
20915: DOUBLE
20916: LD_INT 1
20918: DEC
20919: ST_TO_ADDR
20920: LD_INT 2
20922: PUSH
20923: FOR_TO
20924: IFFALSE 21051
// begin uc_side := your_side ;
20926: LD_ADDR_OWVAR 20
20930: PUSH
20931: LD_OWVAR 2
20935: ST_TO_ADDR
// uc_nation := nation_american ;
20936: LD_ADDR_OWVAR 21
20940: PUSH
20941: LD_INT 1
20943: ST_TO_ADDR
// vc_chassis := us_morphling ;
20944: LD_ADDR_OWVAR 37
20948: PUSH
20949: LD_INT 5
20951: ST_TO_ADDR
// vc_engine := engine_siberite ;
20952: LD_ADDR_OWVAR 39
20956: PUSH
20957: LD_INT 3
20959: ST_TO_ADDR
// vc_control := control_computer ;
20960: LD_ADDR_OWVAR 38
20964: PUSH
20965: LD_INT 3
20967: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20968: LD_ADDR_OWVAR 40
20972: PUSH
20973: LD_INT 10
20975: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20976: LD_VAR 0 2
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PPUSH
20985: CALL_OW 310
20989: NOT
20990: IFFALSE 21037
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20992: CALL_OW 45
20996: PPUSH
20997: LD_VAR 0 2
21001: PUSH
21002: LD_INT 1
21004: ARRAY
21005: PPUSH
21006: CALL_OW 250
21010: PPUSH
21011: LD_VAR 0 2
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: PPUSH
21020: CALL_OW 251
21024: PPUSH
21025: LD_INT 12
21027: PPUSH
21028: LD_INT 1
21030: PPUSH
21031: CALL_OW 50
21035: GO 21049
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21037: CALL_OW 45
21041: PPUSH
21042: LD_INT 1
21044: PPUSH
21045: CALL_OW 51
// end ;
21049: GO 20923
21051: POP
21052: POP
// end ;
21053: PPOPN 2
21055: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21056: LD_EXP 44
21060: PUSH
21061: LD_EXP 90
21065: AND
21066: IFFALSE 21288
21068: GO 21070
21070: DISABLE
21071: LD_INT 0
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21079: LD_ADDR_VAR 0 6
21083: PUSH
21084: LD_INT 22
21086: PUSH
21087: LD_OWVAR 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 21
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 23
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 69
21132: ST_TO_ADDR
// if not tmp then
21133: LD_VAR 0 6
21137: NOT
21138: IFFALSE 21142
// exit ;
21140: GO 21288
// s1 := rand ( 1 , 4 ) ;
21142: LD_ADDR_VAR 0 2
21146: PUSH
21147: LD_INT 1
21149: PPUSH
21150: LD_INT 4
21152: PPUSH
21153: CALL_OW 12
21157: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21158: LD_ADDR_VAR 0 4
21162: PUSH
21163: LD_VAR 0 6
21167: PUSH
21168: LD_INT 1
21170: ARRAY
21171: PPUSH
21172: LD_VAR 0 2
21176: PPUSH
21177: CALL_OW 259
21181: ST_TO_ADDR
// if s1 = 1 then
21182: LD_VAR 0 2
21186: PUSH
21187: LD_INT 1
21189: EQUAL
21190: IFFALSE 21210
// s2 := rand ( 2 , 4 ) else
21192: LD_ADDR_VAR 0 3
21196: PUSH
21197: LD_INT 2
21199: PPUSH
21200: LD_INT 4
21202: PPUSH
21203: CALL_OW 12
21207: ST_TO_ADDR
21208: GO 21218
// s2 := 1 ;
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 1
21217: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21218: LD_ADDR_VAR 0 5
21222: PUSH
21223: LD_VAR 0 6
21227: PUSH
21228: LD_INT 1
21230: ARRAY
21231: PPUSH
21232: LD_VAR 0 3
21236: PPUSH
21237: CALL_OW 259
21241: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21242: LD_VAR 0 6
21246: PUSH
21247: LD_INT 1
21249: ARRAY
21250: PPUSH
21251: LD_VAR 0 2
21255: PPUSH
21256: LD_VAR 0 5
21260: PPUSH
21261: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21265: LD_VAR 0 6
21269: PUSH
21270: LD_INT 1
21272: ARRAY
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: LD_VAR 0 4
21283: PPUSH
21284: CALL_OW 237
// end ;
21288: PPOPN 6
21290: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21291: LD_EXP 44
21295: PUSH
21296: LD_EXP 91
21300: AND
21301: IFFALSE 21380
21303: GO 21305
21305: DISABLE
21306: LD_INT 0
21308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21309: LD_ADDR_VAR 0 1
21313: PUSH
21314: LD_INT 22
21316: PUSH
21317: LD_OWVAR 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 30
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PPUSH
21340: CALL_OW 69
21344: ST_TO_ADDR
// if not tmp then
21345: LD_VAR 0 1
21349: NOT
21350: IFFALSE 21354
// exit ;
21352: GO 21380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21354: LD_VAR 0 1
21358: PUSH
21359: LD_INT 1
21361: PPUSH
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 12
21371: ARRAY
21372: PPUSH
21373: LD_INT 1
21375: PPUSH
21376: CALL_OW 234
// end ;
21380: PPOPN 1
21382: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21383: LD_EXP 44
21387: PUSH
21388: LD_EXP 92
21392: AND
21393: IFFALSE 21505
21395: GO 21397
21397: DISABLE
21398: LD_INT 0
21400: PPUSH
21401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: LD_INT 22
21409: PUSH
21410: LD_OWVAR 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 27
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 30
21434: PUSH
21435: LD_INT 26
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 30
21444: PUSH
21445: LD_INT 28
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PPUSH
21462: CALL_OW 69
21466: ST_TO_ADDR
// if not tmp then
21467: LD_VAR 0 2
21471: NOT
21472: IFFALSE 21476
// exit ;
21474: GO 21505
// for i in tmp do
21476: LD_ADDR_VAR 0 1
21480: PUSH
21481: LD_VAR 0 2
21485: PUSH
21486: FOR_IN
21487: IFFALSE 21503
// SetLives ( i , 1 ) ;
21489: LD_VAR 0 1
21493: PPUSH
21494: LD_INT 1
21496: PPUSH
21497: CALL_OW 234
21501: GO 21486
21503: POP
21504: POP
// end ;
21505: PPOPN 2
21507: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21508: LD_EXP 44
21512: PUSH
21513: LD_EXP 93
21517: AND
21518: IFFALSE 21792
21520: GO 21522
21522: DISABLE
21523: LD_INT 0
21525: PPUSH
21526: PPUSH
21527: PPUSH
// begin i := rand ( 1 , 7 ) ;
21528: LD_ADDR_VAR 0 1
21532: PUSH
21533: LD_INT 1
21535: PPUSH
21536: LD_INT 7
21538: PPUSH
21539: CALL_OW 12
21543: ST_TO_ADDR
// case i of 1 :
21544: LD_VAR 0 1
21548: PUSH
21549: LD_INT 1
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21567
21557: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21558: LD_STRING earthquake(getX(game), 0, 32)
21560: PPUSH
21561: CALL_OW 559
21565: GO 21792
21567: LD_INT 2
21569: DOUBLE
21570: EQUAL
21571: IFTRUE 21575
21573: GO 21589
21575: POP
// begin ToLua ( displayStucuk(); ) ;
21576: LD_STRING displayStucuk();
21578: PPUSH
21579: CALL_OW 559
// ResetFog ;
21583: CALL_OW 335
// end ; 3 :
21587: GO 21792
21589: LD_INT 3
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21701
21597: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 22
21605: PUSH
21606: LD_OWVAR 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 25
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PPUSH
21629: CALL_OW 69
21633: ST_TO_ADDR
// if not tmp then
21634: LD_VAR 0 2
21638: NOT
21639: IFFALSE 21643
// exit ;
21641: GO 21792
// un := tmp [ rand ( 1 , tmp ) ] ;
21643: LD_ADDR_VAR 0 3
21647: PUSH
21648: LD_VAR 0 2
21652: PUSH
21653: LD_INT 1
21655: PPUSH
21656: LD_VAR 0 2
21660: PPUSH
21661: CALL_OW 12
21665: ARRAY
21666: ST_TO_ADDR
// if Crawls ( un ) then
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 318
21676: IFFALSE 21687
// ComWalk ( un ) ;
21678: LD_VAR 0 3
21682: PPUSH
21683: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21687: LD_VAR 0 3
21691: PPUSH
21692: LD_INT 8
21694: PPUSH
21695: CALL_OW 336
// end ; 4 :
21699: GO 21792
21701: LD_INT 4
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21770
21709: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21710: LD_ADDR_VAR 0 2
21714: PUSH
21715: LD_INT 22
21717: PUSH
21718: LD_OWVAR 2
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 30
21729: PUSH
21730: LD_INT 29
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PPUSH
21741: CALL_OW 69
21745: ST_TO_ADDR
// if not tmp then
21746: LD_VAR 0 2
21750: NOT
21751: IFFALSE 21755
// exit ;
21753: GO 21792
// DestroyUnit ( tmp [ 1 ] ) ;
21755: LD_VAR 0 2
21759: PUSH
21760: LD_INT 1
21762: ARRAY
21763: PPUSH
21764: CALL_OW 65
// end ; 5 .. 7 :
21768: GO 21792
21770: LD_INT 5
21772: DOUBLE
21773: GREATEREQUAL
21774: IFFALSE 21782
21776: LD_INT 7
21778: DOUBLE
21779: LESSEQUAL
21780: IFTRUE 21784
21782: GO 21791
21784: POP
// StreamSibBomb ; end ;
21785: CALL 18042 0 0
21789: GO 21792
21791: POP
// end ;
21792: PPOPN 3
21794: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21795: LD_EXP 44
21799: PUSH
21800: LD_EXP 94
21804: AND
21805: IFFALSE 21961
21807: GO 21809
21809: DISABLE
21810: LD_INT 0
21812: PPUSH
21813: PPUSH
21814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_INT 81
21822: PUSH
21823: LD_OWVAR 2
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 2
21834: PUSH
21835: LD_INT 21
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PPUSH
21864: CALL_OW 69
21868: ST_TO_ADDR
// if not tmp then
21869: LD_VAR 0 2
21873: NOT
21874: IFFALSE 21878
// exit ;
21876: GO 21961
// p := 0 ;
21878: LD_ADDR_VAR 0 3
21882: PUSH
21883: LD_INT 0
21885: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21886: LD_INT 35
21888: PPUSH
21889: CALL_OW 67
// p := p + 1 ;
21893: LD_ADDR_VAR 0 3
21897: PUSH
21898: LD_VAR 0 3
21902: PUSH
21903: LD_INT 1
21905: PLUS
21906: ST_TO_ADDR
// for i in tmp do
21907: LD_ADDR_VAR 0 1
21911: PUSH
21912: LD_VAR 0 2
21916: PUSH
21917: FOR_IN
21918: IFFALSE 21949
// if GetLives ( i ) < 1000 then
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 256
21929: PUSH
21930: LD_INT 1000
21932: LESS
21933: IFFALSE 21947
// SetLives ( i , 1000 ) ;
21935: LD_VAR 0 1
21939: PPUSH
21940: LD_INT 1000
21942: PPUSH
21943: CALL_OW 234
21947: GO 21917
21949: POP
21950: POP
// until p > 20 ;
21951: LD_VAR 0 3
21955: PUSH
21956: LD_INT 20
21958: GREATER
21959: IFFALSE 21886
// end ;
21961: PPOPN 3
21963: END
// every 0 0$1 trigger StreamModeActive and sTime do
21964: LD_EXP 44
21968: PUSH
21969: LD_EXP 95
21973: AND
21974: IFFALSE 22009
21976: GO 21978
21978: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21979: LD_INT 28
21981: PPUSH
21982: LD_OWVAR 2
21986: PPUSH
21987: LD_INT 2
21989: PPUSH
21990: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21994: LD_INT 30
21996: PPUSH
21997: LD_OWVAR 2
22001: PPUSH
22002: LD_INT 2
22004: PPUSH
22005: CALL_OW 322
// end ;
22009: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22010: LD_EXP 44
22014: PUSH
22015: LD_EXP 96
22019: AND
22020: IFFALSE 22141
22022: GO 22024
22024: DISABLE
22025: LD_INT 0
22027: PPUSH
22028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: LD_INT 22
22036: PUSH
22037: LD_OWVAR 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 21
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 3
22058: PUSH
22059: LD_INT 23
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: ST_TO_ADDR
// if not tmp then
22083: LD_VAR 0 2
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 22141
// for i in tmp do
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_VAR 0 2
22101: PUSH
22102: FOR_IN
22103: IFFALSE 22139
// begin if Crawls ( i ) then
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 318
22114: IFFALSE 22125
// ComWalk ( i ) ;
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 138
// SetClass ( i , 2 ) ;
22125: LD_VAR 0 1
22129: PPUSH
22130: LD_INT 2
22132: PPUSH
22133: CALL_OW 336
// end ;
22137: GO 22102
22139: POP
22140: POP
// end ;
22141: PPOPN 2
22143: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22144: LD_EXP 44
22148: PUSH
22149: LD_EXP 97
22153: AND
22154: IFFALSE 22435
22156: GO 22158
22158: DISABLE
22159: LD_INT 0
22161: PPUSH
22162: PPUSH
22163: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22164: LD_OWVAR 2
22168: PPUSH
22169: LD_INT 9
22171: PPUSH
22172: LD_INT 1
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22182: LD_INT 9
22184: PPUSH
22185: LD_OWVAR 2
22189: PPUSH
22190: CALL_OW 343
// uc_side := 9 ;
22194: LD_ADDR_OWVAR 20
22198: PUSH
22199: LD_INT 9
22201: ST_TO_ADDR
// uc_nation := 2 ;
22202: LD_ADDR_OWVAR 21
22206: PUSH
22207: LD_INT 2
22209: ST_TO_ADDR
// hc_name := Dark Warrior ;
22210: LD_ADDR_OWVAR 26
22214: PUSH
22215: LD_STRING Dark Warrior
22217: ST_TO_ADDR
// hc_gallery :=  ;
22218: LD_ADDR_OWVAR 33
22222: PUSH
22223: LD_STRING 
22225: ST_TO_ADDR
// hc_noskilllimit := true ;
22226: LD_ADDR_OWVAR 76
22230: PUSH
22231: LD_INT 1
22233: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22234: LD_ADDR_OWVAR 31
22238: PUSH
22239: LD_INT 30
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: LD_INT 30
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: ST_TO_ADDR
// un := CreateHuman ;
22257: LD_ADDR_VAR 0 3
22261: PUSH
22262: CALL_OW 44
22266: ST_TO_ADDR
// hc_noskilllimit := false ;
22267: LD_ADDR_OWVAR 76
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22275: LD_VAR 0 3
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: CALL_OW 51
// p := 0 ;
22287: LD_ADDR_VAR 0 2
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22295: LD_INT 35
22297: PPUSH
22298: CALL_OW 67
// p := p + 1 ;
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: PLUS
22315: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22316: LD_VAR 0 3
22320: PPUSH
22321: CALL_OW 256
22325: PUSH
22326: LD_INT 1000
22328: LESS
22329: IFFALSE 22343
// SetLives ( un , 1000 ) ;
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_INT 1000
22338: PPUSH
22339: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22343: LD_VAR 0 3
22347: PPUSH
22348: LD_INT 81
22350: PUSH
22351: LD_OWVAR 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 91
22362: PUSH
22363: LD_VAR 0 3
22367: PUSH
22368: LD_INT 30
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PPUSH
22380: CALL_OW 69
22384: PPUSH
22385: LD_VAR 0 3
22389: PPUSH
22390: CALL_OW 74
22394: PPUSH
22395: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22399: LD_VAR 0 2
22403: PUSH
22404: LD_INT 60
22406: GREATER
22407: PUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: CALL_OW 301
22417: OR
22418: IFFALSE 22295
// if un then
22420: LD_VAR 0 3
22424: IFFALSE 22435
// RemoveUnit ( un ) ;
22426: LD_VAR 0 3
22430: PPUSH
22431: CALL_OW 64
// end ;
22435: PPOPN 3
22437: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22438: LD_INT 0
22440: PPUSH
// case cmd of 301 :
22441: LD_VAR 0 1
22445: PUSH
22446: LD_INT 301
22448: DOUBLE
22449: EQUAL
22450: IFTRUE 22454
22452: GO 22486
22454: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22455: LD_VAR 0 6
22459: PPUSH
22460: LD_VAR 0 7
22464: PPUSH
22465: LD_VAR 0 8
22469: PPUSH
22470: LD_VAR 0 4
22474: PPUSH
22475: LD_VAR 0 5
22479: PPUSH
22480: CALL 23687 0 5
22484: GO 22607
22486: LD_INT 302
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22494
22492: GO 22531
22494: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22495: LD_VAR 0 6
22499: PPUSH
22500: LD_VAR 0 7
22504: PPUSH
22505: LD_VAR 0 8
22509: PPUSH
22510: LD_VAR 0 9
22514: PPUSH
22515: LD_VAR 0 4
22519: PPUSH
22520: LD_VAR 0 5
22524: PPUSH
22525: CALL 23778 0 6
22529: GO 22607
22531: LD_INT 303
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22576
22539: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22540: LD_VAR 0 6
22544: PPUSH
22545: LD_VAR 0 7
22549: PPUSH
22550: LD_VAR 0 8
22554: PPUSH
22555: LD_VAR 0 9
22559: PPUSH
22560: LD_VAR 0 4
22564: PPUSH
22565: LD_VAR 0 5
22569: PPUSH
22570: CALL 22612 0 6
22574: GO 22607
22576: LD_INT 304
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22606
22584: POP
// hHackTeleport ( unit , x , y ) ; end ;
22585: LD_VAR 0 2
22589: PPUSH
22590: LD_VAR 0 4
22594: PPUSH
22595: LD_VAR 0 5
22599: PPUSH
22600: CALL 24371 0 3
22604: GO 22607
22606: POP
// end ;
22607: LD_VAR 0 12
22611: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22616: LD_VAR 0 1
22620: PUSH
22621: LD_INT 1
22623: LESS
22624: PUSH
22625: LD_VAR 0 1
22629: PUSH
22630: LD_INT 3
22632: GREATER
22633: OR
22634: PUSH
22635: LD_VAR 0 5
22639: PPUSH
22640: LD_VAR 0 6
22644: PPUSH
22645: CALL_OW 428
22649: OR
22650: IFFALSE 22654
// exit ;
22652: GO 23374
// uc_side := your_side ;
22654: LD_ADDR_OWVAR 20
22658: PUSH
22659: LD_OWVAR 2
22663: ST_TO_ADDR
// uc_nation := nation ;
22664: LD_ADDR_OWVAR 21
22668: PUSH
22669: LD_VAR 0 1
22673: ST_TO_ADDR
// bc_level = 1 ;
22674: LD_ADDR_OWVAR 43
22678: PUSH
22679: LD_INT 1
22681: ST_TO_ADDR
// case btype of 1 :
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 1
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22706
22695: POP
// bc_type := b_depot ; 2 :
22696: LD_ADDR_OWVAR 42
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
22704: GO 23318
22706: LD_INT 2
22708: DOUBLE
22709: EQUAL
22710: IFTRUE 22714
22712: GO 22725
22714: POP
// bc_type := b_warehouse ; 3 :
22715: LD_ADDR_OWVAR 42
22719: PUSH
22720: LD_INT 1
22722: ST_TO_ADDR
22723: GO 23318
22725: LD_INT 3
22727: DOUBLE
22728: EQUAL
22729: IFTRUE 22733
22731: GO 22744
22733: POP
// bc_type := b_lab ; 4 .. 9 :
22734: LD_ADDR_OWVAR 42
22738: PUSH
22739: LD_INT 6
22741: ST_TO_ADDR
22742: GO 23318
22744: LD_INT 4
22746: DOUBLE
22747: GREATEREQUAL
22748: IFFALSE 22756
22750: LD_INT 9
22752: DOUBLE
22753: LESSEQUAL
22754: IFTRUE 22758
22756: GO 22810
22758: POP
// begin bc_type := b_lab_half ;
22759: LD_ADDR_OWVAR 42
22763: PUSH
22764: LD_INT 7
22766: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22767: LD_ADDR_OWVAR 44
22771: PUSH
22772: LD_INT 10
22774: PUSH
22775: LD_INT 11
22777: PUSH
22778: LD_INT 12
22780: PUSH
22781: LD_INT 15
22783: PUSH
22784: LD_INT 14
22786: PUSH
22787: LD_INT 13
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: LD_VAR 0 2
22802: PUSH
22803: LD_INT 3
22805: MINUS
22806: ARRAY
22807: ST_TO_ADDR
// end ; 10 .. 13 :
22808: GO 23318
22810: LD_INT 10
22812: DOUBLE
22813: GREATEREQUAL
22814: IFFALSE 22822
22816: LD_INT 13
22818: DOUBLE
22819: LESSEQUAL
22820: IFTRUE 22824
22822: GO 22901
22824: POP
// begin bc_type := b_lab_full ;
22825: LD_ADDR_OWVAR 42
22829: PUSH
22830: LD_INT 8
22832: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22833: LD_ADDR_OWVAR 44
22837: PUSH
22838: LD_INT 10
22840: PUSH
22841: LD_INT 12
22843: PUSH
22844: LD_INT 14
22846: PUSH
22847: LD_INT 13
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: PUSH
22856: LD_VAR 0 2
22860: PUSH
22861: LD_INT 9
22863: MINUS
22864: ARRAY
22865: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22866: LD_ADDR_OWVAR 45
22870: PUSH
22871: LD_INT 11
22873: PUSH
22874: LD_INT 15
22876: PUSH
22877: LD_INT 12
22879: PUSH
22880: LD_INT 15
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: LD_VAR 0 2
22893: PUSH
22894: LD_INT 9
22896: MINUS
22897: ARRAY
22898: ST_TO_ADDR
// end ; 14 :
22899: GO 23318
22901: LD_INT 14
22903: DOUBLE
22904: EQUAL
22905: IFTRUE 22909
22907: GO 22920
22909: POP
// bc_type := b_workshop ; 15 :
22910: LD_ADDR_OWVAR 42
22914: PUSH
22915: LD_INT 2
22917: ST_TO_ADDR
22918: GO 23318
22920: LD_INT 15
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 22939
22928: POP
// bc_type := b_factory ; 16 :
22929: LD_ADDR_OWVAR 42
22933: PUSH
22934: LD_INT 3
22936: ST_TO_ADDR
22937: GO 23318
22939: LD_INT 16
22941: DOUBLE
22942: EQUAL
22943: IFTRUE 22947
22945: GO 22958
22947: POP
// bc_type := b_ext_gun ; 17 :
22948: LD_ADDR_OWVAR 42
22952: PUSH
22953: LD_INT 17
22955: ST_TO_ADDR
22956: GO 23318
22958: LD_INT 17
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 22994
22966: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22967: LD_ADDR_OWVAR 42
22971: PUSH
22972: LD_INT 19
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 19
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: LD_VAR 0 1
22990: ARRAY
22991: ST_TO_ADDR
22992: GO 23318
22994: LD_INT 18
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23013
23002: POP
// bc_type := b_ext_radar ; 19 :
23003: LD_ADDR_OWVAR 42
23007: PUSH
23008: LD_INT 20
23010: ST_TO_ADDR
23011: GO 23318
23013: LD_INT 19
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23032
23021: POP
// bc_type := b_ext_radio ; 20 :
23022: LD_ADDR_OWVAR 42
23026: PUSH
23027: LD_INT 22
23029: ST_TO_ADDR
23030: GO 23318
23032: LD_INT 20
23034: DOUBLE
23035: EQUAL
23036: IFTRUE 23040
23038: GO 23051
23040: POP
// bc_type := b_ext_siberium ; 21 :
23041: LD_ADDR_OWVAR 42
23045: PUSH
23046: LD_INT 21
23048: ST_TO_ADDR
23049: GO 23318
23051: LD_INT 21
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23070
23059: POP
// bc_type := b_ext_computer ; 22 :
23060: LD_ADDR_OWVAR 42
23064: PUSH
23065: LD_INT 24
23067: ST_TO_ADDR
23068: GO 23318
23070: LD_INT 22
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23089
23078: POP
// bc_type := b_ext_track ; 23 :
23079: LD_ADDR_OWVAR 42
23083: PUSH
23084: LD_INT 16
23086: ST_TO_ADDR
23087: GO 23318
23089: LD_INT 23
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23108
23097: POP
// bc_type := b_ext_laser ; 24 :
23098: LD_ADDR_OWVAR 42
23102: PUSH
23103: LD_INT 25
23105: ST_TO_ADDR
23106: GO 23318
23108: LD_INT 24
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23127
23116: POP
// bc_type := b_control_tower ; 25 :
23117: LD_ADDR_OWVAR 42
23121: PUSH
23122: LD_INT 36
23124: ST_TO_ADDR
23125: GO 23318
23127: LD_INT 25
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23146
23135: POP
// bc_type := b_breastwork ; 26 :
23136: LD_ADDR_OWVAR 42
23140: PUSH
23141: LD_INT 31
23143: ST_TO_ADDR
23144: GO 23318
23146: LD_INT 26
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23165
23154: POP
// bc_type := b_bunker ; 27 :
23155: LD_ADDR_OWVAR 42
23159: PUSH
23160: LD_INT 32
23162: ST_TO_ADDR
23163: GO 23318
23165: LD_INT 27
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23184
23173: POP
// bc_type := b_turret ; 28 :
23174: LD_ADDR_OWVAR 42
23178: PUSH
23179: LD_INT 33
23181: ST_TO_ADDR
23182: GO 23318
23184: LD_INT 28
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23203
23192: POP
// bc_type := b_armoury ; 29 :
23193: LD_ADDR_OWVAR 42
23197: PUSH
23198: LD_INT 4
23200: ST_TO_ADDR
23201: GO 23318
23203: LD_INT 29
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23222
23211: POP
// bc_type := b_barracks ; 30 :
23212: LD_ADDR_OWVAR 42
23216: PUSH
23217: LD_INT 5
23219: ST_TO_ADDR
23220: GO 23318
23222: LD_INT 30
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23241
23230: POP
// bc_type := b_solar_power ; 31 :
23231: LD_ADDR_OWVAR 42
23235: PUSH
23236: LD_INT 27
23238: ST_TO_ADDR
23239: GO 23318
23241: LD_INT 31
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23260
23249: POP
// bc_type := b_oil_power ; 32 :
23250: LD_ADDR_OWVAR 42
23254: PUSH
23255: LD_INT 26
23257: ST_TO_ADDR
23258: GO 23318
23260: LD_INT 32
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23279
23268: POP
// bc_type := b_siberite_power ; 33 :
23269: LD_ADDR_OWVAR 42
23273: PUSH
23274: LD_INT 28
23276: ST_TO_ADDR
23277: GO 23318
23279: LD_INT 33
23281: DOUBLE
23282: EQUAL
23283: IFTRUE 23287
23285: GO 23298
23287: POP
// bc_type := b_oil_mine ; 34 :
23288: LD_ADDR_OWVAR 42
23292: PUSH
23293: LD_INT 29
23295: ST_TO_ADDR
23296: GO 23318
23298: LD_INT 34
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23317
23306: POP
// bc_type := b_siberite_mine ; end ;
23307: LD_ADDR_OWVAR 42
23311: PUSH
23312: LD_INT 30
23314: ST_TO_ADDR
23315: GO 23318
23317: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23318: LD_ADDR_VAR 0 8
23322: PUSH
23323: LD_VAR 0 5
23327: PPUSH
23328: LD_VAR 0 6
23332: PPUSH
23333: LD_VAR 0 3
23337: PPUSH
23338: CALL_OW 47
23342: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23343: LD_OWVAR 42
23347: PUSH
23348: LD_INT 32
23350: PUSH
23351: LD_INT 33
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: IN
23358: IFFALSE 23374
// PlaceWeaponTurret ( b , weapon ) ;
23360: LD_VAR 0 8
23364: PPUSH
23365: LD_VAR 0 4
23369: PPUSH
23370: CALL_OW 431
// end ;
23374: LD_VAR 0 7
23378: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23379: LD_INT 0
23381: PPUSH
23382: PPUSH
23383: PPUSH
23384: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23385: LD_ADDR_VAR 0 4
23389: PUSH
23390: LD_INT 22
23392: PUSH
23393: LD_OWVAR 2
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 30
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 69
23438: ST_TO_ADDR
// if not tmp then
23439: LD_VAR 0 4
23443: NOT
23444: IFFALSE 23448
// exit ;
23446: GO 23507
// for i in tmp do
23448: LD_ADDR_VAR 0 2
23452: PUSH
23453: LD_VAR 0 4
23457: PUSH
23458: FOR_IN
23459: IFFALSE 23505
// for j = 1 to 3 do
23461: LD_ADDR_VAR 0 3
23465: PUSH
23466: DOUBLE
23467: LD_INT 1
23469: DEC
23470: ST_TO_ADDR
23471: LD_INT 3
23473: PUSH
23474: FOR_TO
23475: IFFALSE 23501
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23477: LD_VAR 0 2
23481: PPUSH
23482: CALL_OW 274
23486: PPUSH
23487: LD_VAR 0 3
23491: PPUSH
23492: LD_INT 99999
23494: PPUSH
23495: CALL_OW 277
23499: GO 23474
23501: POP
23502: POP
23503: GO 23458
23505: POP
23506: POP
// end ;
23507: LD_VAR 0 1
23511: RET
// export function hHackSetLevel10 ; var i , j ; begin
23512: LD_INT 0
23514: PPUSH
23515: PPUSH
23516: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23517: LD_ADDR_VAR 0 2
23521: PUSH
23522: LD_INT 21
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 69
23536: PUSH
23537: FOR_IN
23538: IFFALSE 23590
// if IsSelected ( i ) then
23540: LD_VAR 0 2
23544: PPUSH
23545: CALL_OW 306
23549: IFFALSE 23588
// begin for j := 1 to 4 do
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: DOUBLE
23557: LD_INT 1
23559: DEC
23560: ST_TO_ADDR
23561: LD_INT 4
23563: PUSH
23564: FOR_TO
23565: IFFALSE 23586
// SetSkill ( i , j , 10 ) ;
23567: LD_VAR 0 2
23571: PPUSH
23572: LD_VAR 0 3
23576: PPUSH
23577: LD_INT 10
23579: PPUSH
23580: CALL_OW 237
23584: GO 23564
23586: POP
23587: POP
// end ;
23588: GO 23537
23590: POP
23591: POP
// end ;
23592: LD_VAR 0 1
23596: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
23601: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23602: LD_ADDR_VAR 0 2
23606: PUSH
23607: LD_INT 22
23609: PUSH
23610: LD_OWVAR 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 21
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PPUSH
23633: CALL_OW 69
23637: PUSH
23638: FOR_IN
23639: IFFALSE 23680
// begin for j := 1 to 4 do
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: DOUBLE
23647: LD_INT 1
23649: DEC
23650: ST_TO_ADDR
23651: LD_INT 4
23653: PUSH
23654: FOR_TO
23655: IFFALSE 23676
// SetSkill ( i , j , 10 ) ;
23657: LD_VAR 0 2
23661: PPUSH
23662: LD_VAR 0 3
23666: PPUSH
23667: LD_INT 10
23669: PPUSH
23670: CALL_OW 237
23674: GO 23654
23676: POP
23677: POP
// end ;
23678: GO 23638
23680: POP
23681: POP
// end ;
23682: LD_VAR 0 1
23686: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23687: LD_INT 0
23689: PPUSH
// uc_side := your_side ;
23690: LD_ADDR_OWVAR 20
23694: PUSH
23695: LD_OWVAR 2
23699: ST_TO_ADDR
// uc_nation := nation ;
23700: LD_ADDR_OWVAR 21
23704: PUSH
23705: LD_VAR 0 1
23709: ST_TO_ADDR
// InitHc ;
23710: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23714: LD_INT 0
23716: PPUSH
23717: LD_VAR 0 2
23721: PPUSH
23722: LD_VAR 0 3
23726: PPUSH
23727: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23731: LD_VAR 0 4
23735: PPUSH
23736: LD_VAR 0 5
23740: PPUSH
23741: CALL_OW 428
23745: PUSH
23746: LD_INT 0
23748: EQUAL
23749: IFFALSE 23773
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23751: CALL_OW 44
23755: PPUSH
23756: LD_VAR 0 4
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: LD_INT 1
23768: PPUSH
23769: CALL_OW 48
// end ;
23773: LD_VAR 0 6
23777: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
// uc_side := your_side ;
23782: LD_ADDR_OWVAR 20
23786: PUSH
23787: LD_OWVAR 2
23791: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23792: LD_VAR 0 1
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: LD_INT 4
23808: PUSH
23809: LD_INT 5
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: IN
23819: IFFALSE 23831
// uc_nation := nation_american else
23821: LD_ADDR_OWVAR 21
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
23829: GO 23874
// if chassis in [ 11 , 12 , 13 , 14 ] then
23831: LD_VAR 0 1
23835: PUSH
23836: LD_INT 11
23838: PUSH
23839: LD_INT 12
23841: PUSH
23842: LD_INT 13
23844: PUSH
23845: LD_INT 14
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: IN
23854: IFFALSE 23866
// uc_nation := nation_arabian else
23856: LD_ADDR_OWVAR 21
23860: PUSH
23861: LD_INT 2
23863: ST_TO_ADDR
23864: GO 23874
// uc_nation := nation_russian ;
23866: LD_ADDR_OWVAR 21
23870: PUSH
23871: LD_INT 3
23873: ST_TO_ADDR
// vc_chassis := chassis ;
23874: LD_ADDR_OWVAR 37
23878: PUSH
23879: LD_VAR 0 1
23883: ST_TO_ADDR
// vc_engine := engine ;
23884: LD_ADDR_OWVAR 39
23888: PUSH
23889: LD_VAR 0 2
23893: ST_TO_ADDR
// vc_control := control ;
23894: LD_ADDR_OWVAR 38
23898: PUSH
23899: LD_VAR 0 3
23903: ST_TO_ADDR
// vc_weapon := weapon ;
23904: LD_ADDR_OWVAR 40
23908: PUSH
23909: LD_VAR 0 4
23913: ST_TO_ADDR
// un := CreateVehicle ;
23914: LD_ADDR_VAR 0 8
23918: PUSH
23919: CALL_OW 45
23923: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23924: LD_VAR 0 8
23928: PPUSH
23929: LD_INT 0
23931: PPUSH
23932: LD_INT 5
23934: PPUSH
23935: CALL_OW 12
23939: PPUSH
23940: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23944: LD_VAR 0 8
23948: PPUSH
23949: LD_VAR 0 5
23953: PPUSH
23954: LD_VAR 0 6
23958: PPUSH
23959: LD_INT 1
23961: PPUSH
23962: CALL_OW 48
// end ;
23966: LD_VAR 0 7
23970: RET
// export hInvincible ; every 1 do
23971: GO 23973
23973: DISABLE
// hInvincible := [ ] ;
23974: LD_ADDR_EXP 98
23978: PUSH
23979: EMPTY
23980: ST_TO_ADDR
23981: END
// every 10 do var i ;
23982: GO 23984
23984: DISABLE
23985: LD_INT 0
23987: PPUSH
// begin enable ;
23988: ENABLE
// if not hInvincible then
23989: LD_EXP 98
23993: NOT
23994: IFFALSE 23998
// exit ;
23996: GO 24042
// for i in hInvincible do
23998: LD_ADDR_VAR 0 1
24002: PUSH
24003: LD_EXP 98
24007: PUSH
24008: FOR_IN
24009: IFFALSE 24040
// if GetLives ( i ) < 1000 then
24011: LD_VAR 0 1
24015: PPUSH
24016: CALL_OW 256
24020: PUSH
24021: LD_INT 1000
24023: LESS
24024: IFFALSE 24038
// SetLives ( i , 1000 ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 1000
24033: PPUSH
24034: CALL_OW 234
24038: GO 24008
24040: POP
24041: POP
// end ;
24042: PPOPN 1
24044: END
// export function hHackInvincible ; var i ; begin
24045: LD_INT 0
24047: PPUSH
24048: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24049: LD_ADDR_VAR 0 2
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 21
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 21
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: PUSH
24087: FOR_IN
24088: IFFALSE 24149
// if IsSelected ( i ) then
24090: LD_VAR 0 2
24094: PPUSH
24095: CALL_OW 306
24099: IFFALSE 24147
// begin if i in hInvincible then
24101: LD_VAR 0 2
24105: PUSH
24106: LD_EXP 98
24110: IN
24111: IFFALSE 24131
// hInvincible := hInvincible diff i else
24113: LD_ADDR_EXP 98
24117: PUSH
24118: LD_EXP 98
24122: PUSH
24123: LD_VAR 0 2
24127: DIFF
24128: ST_TO_ADDR
24129: GO 24147
// hInvincible := hInvincible union i ;
24131: LD_ADDR_EXP 98
24135: PUSH
24136: LD_EXP 98
24140: PUSH
24141: LD_VAR 0 2
24145: UNION
24146: ST_TO_ADDR
// end ;
24147: GO 24087
24149: POP
24150: POP
// end ;
24151: LD_VAR 0 1
24155: RET
// export function hHackInvisible ; var i , j ; begin
24156: LD_INT 0
24158: PPUSH
24159: PPUSH
24160: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24161: LD_ADDR_VAR 0 2
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PPUSH
24176: CALL_OW 69
24180: PUSH
24181: FOR_IN
24182: IFFALSE 24206
// if IsSelected ( i ) then
24184: LD_VAR 0 2
24188: PPUSH
24189: CALL_OW 306
24193: IFFALSE 24204
// ComForceInvisible ( i ) ;
24195: LD_VAR 0 2
24199: PPUSH
24200: CALL_OW 496
24204: GO 24181
24206: POP
24207: POP
// end ;
24208: LD_VAR 0 1
24212: RET
// export function hHackChangeYourSide ; begin
24213: LD_INT 0
24215: PPUSH
// if your_side = 8 then
24216: LD_OWVAR 2
24220: PUSH
24221: LD_INT 8
24223: EQUAL
24224: IFFALSE 24236
// your_side := 0 else
24226: LD_ADDR_OWVAR 2
24230: PUSH
24231: LD_INT 0
24233: ST_TO_ADDR
24234: GO 24250
// your_side := your_side + 1 ;
24236: LD_ADDR_OWVAR 2
24240: PUSH
24241: LD_OWVAR 2
24245: PUSH
24246: LD_INT 1
24248: PLUS
24249: ST_TO_ADDR
// end ;
24250: LD_VAR 0 1
24254: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
24259: PPUSH
// for i in all_units do
24260: LD_ADDR_VAR 0 2
24264: PUSH
24265: LD_OWVAR 3
24269: PUSH
24270: FOR_IN
24271: IFFALSE 24349
// if IsSelected ( i ) then
24273: LD_VAR 0 2
24277: PPUSH
24278: CALL_OW 306
24282: IFFALSE 24347
// begin j := GetSide ( i ) ;
24284: LD_ADDR_VAR 0 3
24288: PUSH
24289: LD_VAR 0 2
24293: PPUSH
24294: CALL_OW 255
24298: ST_TO_ADDR
// if j = 8 then
24299: LD_VAR 0 3
24303: PUSH
24304: LD_INT 8
24306: EQUAL
24307: IFFALSE 24319
// j := 0 else
24309: LD_ADDR_VAR 0 3
24313: PUSH
24314: LD_INT 0
24316: ST_TO_ADDR
24317: GO 24333
// j := j + 1 ;
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: LD_VAR 0 3
24328: PUSH
24329: LD_INT 1
24331: PLUS
24332: ST_TO_ADDR
// SetSide ( i , j ) ;
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_VAR 0 3
24342: PPUSH
24343: CALL_OW 235
// end ;
24347: GO 24270
24349: POP
24350: POP
// end ;
24351: LD_VAR 0 1
24355: RET
// export function hHackFog ; begin
24356: LD_INT 0
24358: PPUSH
// FogOff ( true ) ;
24359: LD_INT 1
24361: PPUSH
24362: CALL_OW 344
// end ;
24366: LD_VAR 0 1
24370: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24371: LD_INT 0
24373: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 3
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: CALL_OW 483
// CenterOnXY ( x , y ) ;
24399: LD_VAR 0 2
24403: PPUSH
24404: LD_VAR 0 3
24408: PPUSH
24409: CALL_OW 84
// end ; end_of_file
24413: LD_VAR 0 4
24417: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24418: LD_INT 0
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 264
24433: PUSH
24434: LD_EXP 30
24438: EQUAL
24439: IFFALSE 24511
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24441: LD_INT 68
24443: PPUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 255
24453: PPUSH
24454: CALL_OW 321
24458: PUSH
24459: LD_INT 2
24461: EQUAL
24462: IFFALSE 24474
// eff := 70 else
24464: LD_ADDR_VAR 0 4
24468: PUSH
24469: LD_INT 70
24471: ST_TO_ADDR
24472: GO 24482
// eff := 30 ;
24474: LD_ADDR_VAR 0 4
24478: PUSH
24479: LD_INT 30
24481: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 250
24491: PPUSH
24492: LD_VAR 0 1
24496: PPUSH
24497: CALL_OW 251
24501: PPUSH
24502: LD_VAR 0 4
24506: PPUSH
24507: CALL_OW 495
// end ; end ;
24511: LD_VAR 0 2
24515: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24516: LD_INT 0
24518: PPUSH
// end ;
24519: LD_VAR 0 4
24523: RET
// export function SOS_Command ( cmd ) ; begin
24524: LD_INT 0
24526: PPUSH
// end ;
24527: LD_VAR 0 2
24531: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24532: LD_INT 0
24534: PPUSH
// if cmd = 121 then
24535: LD_VAR 0 1
24539: PUSH
24540: LD_INT 121
24542: EQUAL
24543: IFFALSE 24545
// end ;
24545: LD_VAR 0 6
24549: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24550: LD_INT 0
24552: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24553: LD_VAR 0 1
24557: PUSH
24558: LD_INT 250
24560: EQUAL
24561: PUSH
24562: LD_VAR 0 2
24566: PPUSH
24567: CALL_OW 264
24571: PUSH
24572: LD_EXP 33
24576: EQUAL
24577: AND
24578: IFFALSE 24599
// MinerPlaceMine ( unit , x , y ) ;
24580: LD_VAR 0 2
24584: PPUSH
24585: LD_VAR 0 4
24589: PPUSH
24590: LD_VAR 0 5
24594: PPUSH
24595: CALL 26948 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24599: LD_VAR 0 1
24603: PUSH
24604: LD_INT 251
24606: EQUAL
24607: PUSH
24608: LD_VAR 0 2
24612: PPUSH
24613: CALL_OW 264
24617: PUSH
24618: LD_EXP 33
24622: EQUAL
24623: AND
24624: IFFALSE 24645
// MinerDetonateMine ( unit , x , y ) ;
24626: LD_VAR 0 2
24630: PPUSH
24631: LD_VAR 0 4
24635: PPUSH
24636: LD_VAR 0 5
24640: PPUSH
24641: CALL 27225 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24645: LD_VAR 0 1
24649: PUSH
24650: LD_INT 252
24652: EQUAL
24653: PUSH
24654: LD_VAR 0 2
24658: PPUSH
24659: CALL_OW 264
24663: PUSH
24664: LD_EXP 33
24668: EQUAL
24669: AND
24670: IFFALSE 24691
// MinerCreateMinefield ( unit , x , y ) ;
24672: LD_VAR 0 2
24676: PPUSH
24677: LD_VAR 0 4
24681: PPUSH
24682: LD_VAR 0 5
24686: PPUSH
24687: CALL 27642 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24691: LD_VAR 0 1
24695: PUSH
24696: LD_INT 253
24698: EQUAL
24699: PUSH
24700: LD_VAR 0 2
24704: PPUSH
24705: CALL_OW 257
24709: PUSH
24710: LD_INT 5
24712: EQUAL
24713: AND
24714: IFFALSE 24735
// ComBinocular ( unit , x , y ) ;
24716: LD_VAR 0 2
24720: PPUSH
24721: LD_VAR 0 4
24725: PPUSH
24726: LD_VAR 0 5
24730: PPUSH
24731: CALL 28013 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24735: LD_VAR 0 1
24739: PUSH
24740: LD_INT 254
24742: EQUAL
24743: PUSH
24744: LD_VAR 0 2
24748: PPUSH
24749: CALL_OW 264
24753: PUSH
24754: LD_EXP 28
24758: EQUAL
24759: AND
24760: PUSH
24761: LD_VAR 0 3
24765: PPUSH
24766: CALL_OW 263
24770: PUSH
24771: LD_INT 3
24773: EQUAL
24774: AND
24775: IFFALSE 24791
// HackDestroyVehicle ( unit , selectedUnit ) ;
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_VAR 0 3
24786: PPUSH
24787: CALL 26308 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24791: LD_VAR 0 1
24795: PUSH
24796: LD_INT 255
24798: EQUAL
24799: PUSH
24800: LD_VAR 0 2
24804: PPUSH
24805: CALL_OW 264
24809: PUSH
24810: LD_INT 14
24812: PUSH
24813: LD_INT 53
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: IN
24820: AND
24821: PUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: LD_VAR 0 5
24831: PPUSH
24832: CALL_OW 488
24836: AND
24837: IFFALSE 24861
// CutTreeXYR ( unit , x , y , 12 ) ;
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_VAR 0 4
24848: PPUSH
24849: LD_VAR 0 5
24853: PPUSH
24854: LD_INT 12
24856: PPUSH
24857: CALL 24874 0 4
// end ;
24861: LD_VAR 0 6
24865: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24866: LD_INT 0
24868: PPUSH
// end ;
24869: LD_VAR 0 4
24873: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24874: LD_INT 0
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
24882: PPUSH
24883: PPUSH
24884: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24885: LD_VAR 0 1
24889: NOT
24890: PUSH
24891: LD_VAR 0 2
24895: PPUSH
24896: LD_VAR 0 3
24900: PPUSH
24901: CALL_OW 488
24905: NOT
24906: OR
24907: PUSH
24908: LD_VAR 0 4
24912: NOT
24913: OR
24914: IFFALSE 24918
// exit ;
24916: GO 25258
// list := [ ] ;
24918: LD_ADDR_VAR 0 13
24922: PUSH
24923: EMPTY
24924: ST_TO_ADDR
// if x - r < 0 then
24925: LD_VAR 0 2
24929: PUSH
24930: LD_VAR 0 4
24934: MINUS
24935: PUSH
24936: LD_INT 0
24938: LESS
24939: IFFALSE 24951
// min_x := 0 else
24941: LD_ADDR_VAR 0 7
24945: PUSH
24946: LD_INT 0
24948: ST_TO_ADDR
24949: GO 24967
// min_x := x - r ;
24951: LD_ADDR_VAR 0 7
24955: PUSH
24956: LD_VAR 0 2
24960: PUSH
24961: LD_VAR 0 4
24965: MINUS
24966: ST_TO_ADDR
// if y - r < 0 then
24967: LD_VAR 0 3
24971: PUSH
24972: LD_VAR 0 4
24976: MINUS
24977: PUSH
24978: LD_INT 0
24980: LESS
24981: IFFALSE 24993
// min_y := 0 else
24983: LD_ADDR_VAR 0 8
24987: PUSH
24988: LD_INT 0
24990: ST_TO_ADDR
24991: GO 25009
// min_y := y - r ;
24993: LD_ADDR_VAR 0 8
24997: PUSH
24998: LD_VAR 0 3
25002: PUSH
25003: LD_VAR 0 4
25007: MINUS
25008: ST_TO_ADDR
// max_x := x + r ;
25009: LD_ADDR_VAR 0 9
25013: PUSH
25014: LD_VAR 0 2
25018: PUSH
25019: LD_VAR 0 4
25023: PLUS
25024: ST_TO_ADDR
// max_y := y + r ;
25025: LD_ADDR_VAR 0 10
25029: PUSH
25030: LD_VAR 0 3
25034: PUSH
25035: LD_VAR 0 4
25039: PLUS
25040: ST_TO_ADDR
// for _x = min_x to max_x do
25041: LD_ADDR_VAR 0 11
25045: PUSH
25046: DOUBLE
25047: LD_VAR 0 7
25051: DEC
25052: ST_TO_ADDR
25053: LD_VAR 0 9
25057: PUSH
25058: FOR_TO
25059: IFFALSE 25176
// for _y = min_y to max_y do
25061: LD_ADDR_VAR 0 12
25065: PUSH
25066: DOUBLE
25067: LD_VAR 0 8
25071: DEC
25072: ST_TO_ADDR
25073: LD_VAR 0 10
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25172
// begin if not ValidHex ( _x , _y ) then
25081: LD_VAR 0 11
25085: PPUSH
25086: LD_VAR 0 12
25090: PPUSH
25091: CALL_OW 488
25095: NOT
25096: IFFALSE 25100
// continue ;
25098: GO 25078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25100: LD_VAR 0 11
25104: PPUSH
25105: LD_VAR 0 12
25109: PPUSH
25110: CALL_OW 351
25114: PUSH
25115: LD_VAR 0 11
25119: PPUSH
25120: LD_VAR 0 12
25124: PPUSH
25125: CALL_OW 554
25129: AND
25130: IFFALSE 25170
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25132: LD_ADDR_VAR 0 13
25136: PUSH
25137: LD_VAR 0 13
25141: PPUSH
25142: LD_VAR 0 13
25146: PUSH
25147: LD_INT 1
25149: PLUS
25150: PPUSH
25151: LD_VAR 0 11
25155: PUSH
25156: LD_VAR 0 12
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PPUSH
25165: CALL_OW 2
25169: ST_TO_ADDR
// end ;
25170: GO 25078
25172: POP
25173: POP
25174: GO 25058
25176: POP
25177: POP
// if not list then
25178: LD_VAR 0 13
25182: NOT
25183: IFFALSE 25187
// exit ;
25185: GO 25258
// for i in list do
25187: LD_ADDR_VAR 0 6
25191: PUSH
25192: LD_VAR 0 13
25196: PUSH
25197: FOR_IN
25198: IFFALSE 25256
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25200: LD_VAR 0 1
25204: PPUSH
25205: LD_STRING M
25207: PUSH
25208: LD_VAR 0 6
25212: PUSH
25213: LD_INT 1
25215: ARRAY
25216: PUSH
25217: LD_VAR 0 6
25221: PUSH
25222: LD_INT 2
25224: ARRAY
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: PPUSH
25250: CALL_OW 447
25254: GO 25197
25256: POP
25257: POP
// end ;
25258: LD_VAR 0 5
25262: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25263: LD_EXP 101
25267: NOT
25268: IFFALSE 25318
25270: GO 25272
25272: DISABLE
// begin initHack := true ;
25273: LD_ADDR_EXP 101
25277: PUSH
25278: LD_INT 1
25280: ST_TO_ADDR
// hackTanks := [ ] ;
25281: LD_ADDR_EXP 102
25285: PUSH
25286: EMPTY
25287: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25288: LD_ADDR_EXP 103
25292: PUSH
25293: EMPTY
25294: ST_TO_ADDR
// hackLimit := 3 ;
25295: LD_ADDR_EXP 104
25299: PUSH
25300: LD_INT 3
25302: ST_TO_ADDR
// hackDist := 12 ;
25303: LD_ADDR_EXP 105
25307: PUSH
25308: LD_INT 12
25310: ST_TO_ADDR
// hackCounter := [ ] ;
25311: LD_ADDR_EXP 106
25315: PUSH
25316: EMPTY
25317: ST_TO_ADDR
// end ;
25318: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25319: LD_EXP 101
25323: PUSH
25324: LD_INT 34
25326: PUSH
25327: LD_EXP 28
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 69
25340: AND
25341: IFFALSE 25596
25343: GO 25345
25345: DISABLE
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
// begin enable ;
25350: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25351: LD_ADDR_VAR 0 1
25355: PUSH
25356: LD_INT 34
25358: PUSH
25359: LD_EXP 28
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: PUSH
25373: FOR_IN
25374: IFFALSE 25594
// begin if not i in hackTanks then
25376: LD_VAR 0 1
25380: PUSH
25381: LD_EXP 102
25385: IN
25386: NOT
25387: IFFALSE 25470
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25389: LD_ADDR_EXP 102
25393: PUSH
25394: LD_EXP 102
25398: PPUSH
25399: LD_EXP 102
25403: PUSH
25404: LD_INT 1
25406: PLUS
25407: PPUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 1
25417: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25418: LD_ADDR_EXP 103
25422: PUSH
25423: LD_EXP 103
25427: PPUSH
25428: LD_EXP 103
25432: PUSH
25433: LD_INT 1
25435: PLUS
25436: PPUSH
25437: EMPTY
25438: PPUSH
25439: CALL_OW 1
25443: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25444: LD_ADDR_EXP 106
25448: PUSH
25449: LD_EXP 106
25453: PPUSH
25454: LD_EXP 106
25458: PUSH
25459: LD_INT 1
25461: PLUS
25462: PPUSH
25463: EMPTY
25464: PPUSH
25465: CALL_OW 1
25469: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25470: LD_VAR 0 1
25474: PPUSH
25475: CALL_OW 302
25479: NOT
25480: IFFALSE 25493
// begin HackUnlinkAll ( i ) ;
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL 25599 0 1
// continue ;
25491: GO 25373
// end ; HackCheckCapturedStatus ( i ) ;
25493: LD_VAR 0 1
25497: PPUSH
25498: CALL 26042 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25502: LD_ADDR_VAR 0 2
25506: PUSH
25507: LD_INT 81
25509: PUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 255
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 33
25526: PUSH
25527: LD_INT 3
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 91
25536: PUSH
25537: LD_VAR 0 1
25541: PUSH
25542: LD_EXP 105
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 50
25554: PUSH
25555: EMPTY
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: PPUSH
25564: CALL_OW 69
25568: ST_TO_ADDR
// if not tmp then
25569: LD_VAR 0 2
25573: NOT
25574: IFFALSE 25578
// continue ;
25576: GO 25373
// HackLink ( i , tmp ) ;
25578: LD_VAR 0 1
25582: PPUSH
25583: LD_VAR 0 2
25587: PPUSH
25588: CALL 25735 0 2
// end ;
25592: GO 25373
25594: POP
25595: POP
// end ;
25596: PPOPN 2
25598: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25599: LD_INT 0
25601: PPUSH
25602: PPUSH
25603: PPUSH
// if not hack in hackTanks then
25604: LD_VAR 0 1
25608: PUSH
25609: LD_EXP 102
25613: IN
25614: NOT
25615: IFFALSE 25619
// exit ;
25617: GO 25730
// index := GetElementIndex ( hackTanks , hack ) ;
25619: LD_ADDR_VAR 0 4
25623: PUSH
25624: LD_EXP 102
25628: PPUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL 33164 0 2
25638: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25639: LD_EXP 103
25643: PUSH
25644: LD_VAR 0 4
25648: ARRAY
25649: IFFALSE 25730
// begin for i in hackTanksCaptured [ index ] do
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: LD_EXP 103
25660: PUSH
25661: LD_VAR 0 4
25665: ARRAY
25666: PUSH
25667: FOR_IN
25668: IFFALSE 25694
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25670: LD_VAR 0 3
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: PPUSH
25679: LD_VAR 0 3
25683: PUSH
25684: LD_INT 2
25686: ARRAY
25687: PPUSH
25688: CALL_OW 235
25692: GO 25667
25694: POP
25695: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25696: LD_ADDR_EXP 103
25700: PUSH
25701: LD_EXP 103
25705: PPUSH
25706: LD_VAR 0 4
25710: PPUSH
25711: EMPTY
25712: PPUSH
25713: CALL_OW 1
25717: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_INT 0
25725: PPUSH
25726: CALL_OW 505
// end ; end ;
25730: LD_VAR 0 2
25734: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25735: LD_INT 0
25737: PPUSH
25738: PPUSH
25739: PPUSH
// if not hack in hackTanks or not vehicles then
25740: LD_VAR 0 1
25744: PUSH
25745: LD_EXP 102
25749: IN
25750: NOT
25751: PUSH
25752: LD_VAR 0 2
25756: NOT
25757: OR
25758: IFFALSE 25762
// exit ;
25760: GO 26037
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25762: LD_ADDR_VAR 0 2
25766: PUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: LD_VAR 0 2
25776: PPUSH
25777: LD_INT 1
25779: PPUSH
25780: LD_INT 1
25782: PPUSH
25783: CALL 33814 0 4
25787: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25788: LD_ADDR_VAR 0 5
25792: PUSH
25793: LD_EXP 102
25797: PPUSH
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL 33164 0 2
25807: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25808: LD_EXP 103
25812: PUSH
25813: LD_VAR 0 5
25817: ARRAY
25818: PUSH
25819: LD_EXP 104
25823: LESS
25824: IFFALSE 26013
// begin for i := 1 to vehicles do
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: DOUBLE
25832: LD_INT 1
25834: DEC
25835: ST_TO_ADDR
25836: LD_VAR 0 2
25840: PUSH
25841: FOR_TO
25842: IFFALSE 26011
// begin if hackTanksCaptured [ index ] = hackLimit then
25844: LD_EXP 103
25848: PUSH
25849: LD_VAR 0 5
25853: ARRAY
25854: PUSH
25855: LD_EXP 104
25859: EQUAL
25860: IFFALSE 25864
// break ;
25862: GO 26011
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25864: LD_ADDR_EXP 106
25868: PUSH
25869: LD_EXP 106
25873: PPUSH
25874: LD_VAR 0 5
25878: PPUSH
25879: LD_EXP 106
25883: PUSH
25884: LD_VAR 0 5
25888: ARRAY
25889: PUSH
25890: LD_INT 1
25892: PLUS
25893: PPUSH
25894: CALL_OW 1
25898: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25899: LD_ADDR_EXP 103
25903: PUSH
25904: LD_EXP 103
25908: PPUSH
25909: LD_VAR 0 5
25913: PUSH
25914: LD_EXP 103
25918: PUSH
25919: LD_VAR 0 5
25923: ARRAY
25924: PUSH
25925: LD_INT 1
25927: PLUS
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: LD_VAR 0 2
25937: PUSH
25938: LD_VAR 0 4
25942: ARRAY
25943: PUSH
25944: LD_VAR 0 2
25948: PUSH
25949: LD_VAR 0 4
25953: ARRAY
25954: PPUSH
25955: CALL_OW 255
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PPUSH
25964: CALL 33379 0 3
25968: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25969: LD_VAR 0 2
25973: PUSH
25974: LD_VAR 0 4
25978: ARRAY
25979: PPUSH
25980: LD_VAR 0 1
25984: PPUSH
25985: CALL_OW 255
25989: PPUSH
25990: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25994: LD_VAR 0 2
25998: PUSH
25999: LD_VAR 0 4
26003: ARRAY
26004: PPUSH
26005: CALL_OW 141
// end ;
26009: GO 25841
26011: POP
26012: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26013: LD_VAR 0 1
26017: PPUSH
26018: LD_EXP 103
26022: PUSH
26023: LD_VAR 0 5
26027: ARRAY
26028: PUSH
26029: LD_INT 0
26031: PLUS
26032: PPUSH
26033: CALL_OW 505
// end ;
26037: LD_VAR 0 3
26041: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26042: LD_INT 0
26044: PPUSH
26045: PPUSH
26046: PPUSH
26047: PPUSH
// if not hack in hackTanks then
26048: LD_VAR 0 1
26052: PUSH
26053: LD_EXP 102
26057: IN
26058: NOT
26059: IFFALSE 26063
// exit ;
26061: GO 26303
// index := GetElementIndex ( hackTanks , hack ) ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_EXP 102
26072: PPUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL 33164 0 2
26082: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: DOUBLE
26089: LD_EXP 103
26093: PUSH
26094: LD_VAR 0 4
26098: ARRAY
26099: INC
26100: ST_TO_ADDR
26101: LD_INT 1
26103: PUSH
26104: FOR_DOWNTO
26105: IFFALSE 26277
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26107: LD_ADDR_VAR 0 5
26111: PUSH
26112: LD_EXP 103
26116: PUSH
26117: LD_VAR 0 4
26121: ARRAY
26122: PUSH
26123: LD_VAR 0 3
26127: ARRAY
26128: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26129: LD_VAR 0 5
26133: PUSH
26134: LD_INT 1
26136: ARRAY
26137: PPUSH
26138: CALL_OW 302
26142: NOT
26143: PUSH
26144: LD_VAR 0 5
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: PPUSH
26153: CALL_OW 255
26157: PUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 255
26167: NONEQUAL
26168: OR
26169: IFFALSE 26275
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26171: LD_VAR 0 5
26175: PUSH
26176: LD_INT 1
26178: ARRAY
26179: PPUSH
26180: CALL_OW 305
26184: PUSH
26185: LD_VAR 0 5
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: PPUSH
26194: CALL_OW 255
26198: PUSH
26199: LD_VAR 0 1
26203: PPUSH
26204: CALL_OW 255
26208: EQUAL
26209: AND
26210: IFFALSE 26234
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26212: LD_VAR 0 5
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PPUSH
26221: LD_VAR 0 5
26225: PUSH
26226: LD_INT 2
26228: ARRAY
26229: PPUSH
26230: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26234: LD_ADDR_EXP 103
26238: PUSH
26239: LD_EXP 103
26243: PPUSH
26244: LD_VAR 0 4
26248: PPUSH
26249: LD_EXP 103
26253: PUSH
26254: LD_VAR 0 4
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 3
26264: PPUSH
26265: CALL_OW 3
26269: PPUSH
26270: CALL_OW 1
26274: ST_TO_ADDR
// end ; end ;
26275: GO 26104
26277: POP
26278: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26279: LD_VAR 0 1
26283: PPUSH
26284: LD_EXP 103
26288: PUSH
26289: LD_VAR 0 4
26293: ARRAY
26294: PUSH
26295: LD_INT 0
26297: PLUS
26298: PPUSH
26299: CALL_OW 505
// end ;
26303: LD_VAR 0 2
26307: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26308: LD_INT 0
26310: PPUSH
26311: PPUSH
26312: PPUSH
26313: PPUSH
// if not hack in hackTanks then
26314: LD_VAR 0 1
26318: PUSH
26319: LD_EXP 102
26323: IN
26324: NOT
26325: IFFALSE 26329
// exit ;
26327: GO 26414
// index := GetElementIndex ( hackTanks , hack ) ;
26329: LD_ADDR_VAR 0 5
26333: PUSH
26334: LD_EXP 102
26338: PPUSH
26339: LD_VAR 0 1
26343: PPUSH
26344: CALL 33164 0 2
26348: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26349: LD_ADDR_VAR 0 4
26353: PUSH
26354: DOUBLE
26355: LD_INT 1
26357: DEC
26358: ST_TO_ADDR
26359: LD_EXP 103
26363: PUSH
26364: LD_VAR 0 5
26368: ARRAY
26369: PUSH
26370: FOR_TO
26371: IFFALSE 26412
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26373: LD_EXP 103
26377: PUSH
26378: LD_VAR 0 5
26382: ARRAY
26383: PUSH
26384: LD_VAR 0 4
26388: ARRAY
26389: PUSH
26390: LD_INT 1
26392: ARRAY
26393: PUSH
26394: LD_VAR 0 2
26398: EQUAL
26399: IFFALSE 26410
// KillUnit ( vehicle ) ;
26401: LD_VAR 0 2
26405: PPUSH
26406: CALL_OW 66
26410: GO 26370
26412: POP
26413: POP
// end ;
26414: LD_VAR 0 3
26418: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26419: LD_EXP 107
26423: NOT
26424: IFFALSE 26459
26426: GO 26428
26428: DISABLE
// begin initMiner := true ;
26429: LD_ADDR_EXP 107
26433: PUSH
26434: LD_INT 1
26436: ST_TO_ADDR
// minersList := [ ] ;
26437: LD_ADDR_EXP 108
26441: PUSH
26442: EMPTY
26443: ST_TO_ADDR
// minerMinesList := [ ] ;
26444: LD_ADDR_EXP 109
26448: PUSH
26449: EMPTY
26450: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26451: LD_ADDR_EXP 110
26455: PUSH
26456: LD_INT 5
26458: ST_TO_ADDR
// end ;
26459: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26460: LD_EXP 107
26464: PUSH
26465: LD_INT 34
26467: PUSH
26468: LD_EXP 33
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: AND
26482: IFFALSE 26945
26484: GO 26486
26486: DISABLE
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
// begin enable ;
26493: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 34
26501: PUSH
26502: LD_EXP 33
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26589
// begin if not i in minersList then
26519: LD_VAR 0 1
26523: PUSH
26524: LD_EXP 108
26528: IN
26529: NOT
26530: IFFALSE 26587
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26532: LD_ADDR_EXP 108
26536: PUSH
26537: LD_EXP 108
26541: PPUSH
26542: LD_EXP 108
26546: PUSH
26547: LD_INT 1
26549: PLUS
26550: PPUSH
26551: LD_VAR 0 1
26555: PPUSH
26556: CALL_OW 1
26560: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26561: LD_ADDR_EXP 109
26565: PUSH
26566: LD_EXP 109
26570: PPUSH
26571: LD_EXP 109
26575: PUSH
26576: LD_INT 1
26578: PLUS
26579: PPUSH
26580: EMPTY
26581: PPUSH
26582: CALL_OW 1
26586: ST_TO_ADDR
// end end ;
26587: GO 26516
26589: POP
26590: POP
// for i := minerMinesList downto 1 do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: DOUBLE
26597: LD_EXP 109
26601: INC
26602: ST_TO_ADDR
26603: LD_INT 1
26605: PUSH
26606: FOR_DOWNTO
26607: IFFALSE 26943
// begin if IsLive ( minersList [ i ] ) then
26609: LD_EXP 108
26613: PUSH
26614: LD_VAR 0 1
26618: ARRAY
26619: PPUSH
26620: CALL_OW 300
26624: IFFALSE 26652
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26626: LD_EXP 108
26630: PUSH
26631: LD_VAR 0 1
26635: ARRAY
26636: PPUSH
26637: LD_EXP 109
26641: PUSH
26642: LD_VAR 0 1
26646: ARRAY
26647: PPUSH
26648: CALL_OW 505
// if not minerMinesList [ i ] then
26652: LD_EXP 109
26656: PUSH
26657: LD_VAR 0 1
26661: ARRAY
26662: NOT
26663: IFFALSE 26667
// continue ;
26665: GO 26606
// for j := minerMinesList [ i ] downto 1 do
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: DOUBLE
26673: LD_EXP 109
26677: PUSH
26678: LD_VAR 0 1
26682: ARRAY
26683: INC
26684: ST_TO_ADDR
26685: LD_INT 1
26687: PUSH
26688: FOR_DOWNTO
26689: IFFALSE 26939
// begin side := GetSide ( minersList [ i ] ) ;
26691: LD_ADDR_VAR 0 3
26695: PUSH
26696: LD_EXP 108
26700: PUSH
26701: LD_VAR 0 1
26705: ARRAY
26706: PPUSH
26707: CALL_OW 255
26711: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26712: LD_ADDR_VAR 0 4
26716: PUSH
26717: LD_EXP 109
26721: PUSH
26722: LD_VAR 0 1
26726: ARRAY
26727: PUSH
26728: LD_VAR 0 2
26732: ARRAY
26733: PUSH
26734: LD_INT 1
26736: ARRAY
26737: PPUSH
26738: LD_EXP 109
26742: PUSH
26743: LD_VAR 0 1
26747: ARRAY
26748: PUSH
26749: LD_VAR 0 2
26753: ARRAY
26754: PUSH
26755: LD_INT 2
26757: ARRAY
26758: PPUSH
26759: CALL_OW 428
26763: ST_TO_ADDR
// if not tmp then
26764: LD_VAR 0 4
26768: NOT
26769: IFFALSE 26773
// continue ;
26771: GO 26688
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26773: LD_VAR 0 4
26777: PUSH
26778: LD_INT 81
26780: PUSH
26781: LD_VAR 0 3
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PPUSH
26790: CALL_OW 69
26794: IN
26795: PUSH
26796: LD_EXP 109
26800: PUSH
26801: LD_VAR 0 1
26805: ARRAY
26806: PUSH
26807: LD_VAR 0 2
26811: ARRAY
26812: PUSH
26813: LD_INT 1
26815: ARRAY
26816: PPUSH
26817: LD_EXP 109
26821: PUSH
26822: LD_VAR 0 1
26826: ARRAY
26827: PUSH
26828: LD_VAR 0 2
26832: ARRAY
26833: PUSH
26834: LD_INT 2
26836: ARRAY
26837: PPUSH
26838: CALL_OW 458
26842: AND
26843: IFFALSE 26937
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26845: LD_EXP 109
26849: PUSH
26850: LD_VAR 0 1
26854: ARRAY
26855: PUSH
26856: LD_VAR 0 2
26860: ARRAY
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: LD_EXP 109
26870: PUSH
26871: LD_VAR 0 1
26875: ARRAY
26876: PUSH
26877: LD_VAR 0 2
26881: ARRAY
26882: PUSH
26883: LD_INT 2
26885: ARRAY
26886: PPUSH
26887: LD_VAR 0 3
26891: PPUSH
26892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26896: LD_ADDR_EXP 109
26900: PUSH
26901: LD_EXP 109
26905: PPUSH
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_EXP 109
26915: PUSH
26916: LD_VAR 0 1
26920: ARRAY
26921: PPUSH
26922: LD_VAR 0 2
26926: PPUSH
26927: CALL_OW 3
26931: PPUSH
26932: CALL_OW 1
26936: ST_TO_ADDR
// end ; end ;
26937: GO 26688
26939: POP
26940: POP
// end ;
26941: GO 26606
26943: POP
26944: POP
// end ;
26945: PPOPN 4
26947: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26948: LD_INT 0
26950: PPUSH
26951: PPUSH
// result := false ;
26952: LD_ADDR_VAR 0 4
26956: PUSH
26957: LD_INT 0
26959: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 264
26969: PUSH
26970: LD_EXP 33
26974: EQUAL
26975: NOT
26976: IFFALSE 26980
// exit ;
26978: GO 27220
// index := GetElementIndex ( minersList , unit ) ;
26980: LD_ADDR_VAR 0 5
26984: PUSH
26985: LD_EXP 108
26989: PPUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL 33164 0 2
26999: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27000: LD_EXP 109
27004: PUSH
27005: LD_VAR 0 5
27009: ARRAY
27010: PUSH
27011: LD_EXP 110
27015: GREATEREQUAL
27016: IFFALSE 27020
// exit ;
27018: GO 27220
// ComMoveXY ( unit , x , y ) ;
27020: LD_VAR 0 1
27024: PPUSH
27025: LD_VAR 0 2
27029: PPUSH
27030: LD_VAR 0 3
27034: PPUSH
27035: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27039: LD_INT 35
27041: PPUSH
27042: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27046: LD_VAR 0 1
27050: PPUSH
27051: LD_VAR 0 2
27055: PPUSH
27056: LD_VAR 0 3
27060: PPUSH
27061: CALL 63561 0 3
27065: NOT
27066: PUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 314
27076: AND
27077: IFFALSE 27081
// exit ;
27079: GO 27220
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL_OW 428
27095: PUSH
27096: LD_VAR 0 1
27100: EQUAL
27101: PUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 314
27111: NOT
27112: AND
27113: IFFALSE 27039
// PlaySoundXY ( x , y , PlantMine ) ;
27115: LD_VAR 0 2
27119: PPUSH
27120: LD_VAR 0 3
27124: PPUSH
27125: LD_STRING PlantMine
27127: PPUSH
27128: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27132: LD_VAR 0 2
27136: PPUSH
27137: LD_VAR 0 3
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 255
27151: PPUSH
27152: LD_INT 0
27154: PPUSH
27155: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27159: LD_ADDR_EXP 109
27163: PUSH
27164: LD_EXP 109
27168: PPUSH
27169: LD_VAR 0 5
27173: PUSH
27174: LD_EXP 109
27178: PUSH
27179: LD_VAR 0 5
27183: ARRAY
27184: PUSH
27185: LD_INT 1
27187: PLUS
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PPUSH
27193: LD_VAR 0 2
27197: PUSH
27198: LD_VAR 0 3
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PPUSH
27207: CALL 33379 0 3
27211: ST_TO_ADDR
// result := true ;
27212: LD_ADDR_VAR 0 4
27216: PUSH
27217: LD_INT 1
27219: ST_TO_ADDR
// end ;
27220: LD_VAR 0 4
27224: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
27229: PPUSH
// if not unit in minersList then
27230: LD_VAR 0 1
27234: PUSH
27235: LD_EXP 108
27239: IN
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 27637
// index := GetElementIndex ( minersList , unit ) ;
27245: LD_ADDR_VAR 0 6
27249: PUSH
27250: LD_EXP 108
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL 33164 0 2
27264: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27265: LD_ADDR_VAR 0 5
27269: PUSH
27270: DOUBLE
27271: LD_EXP 109
27275: PUSH
27276: LD_VAR 0 6
27280: ARRAY
27281: INC
27282: ST_TO_ADDR
27283: LD_INT 1
27285: PUSH
27286: FOR_DOWNTO
27287: IFFALSE 27448
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27289: LD_EXP 109
27293: PUSH
27294: LD_VAR 0 6
27298: ARRAY
27299: PUSH
27300: LD_VAR 0 5
27304: ARRAY
27305: PUSH
27306: LD_INT 1
27308: ARRAY
27309: PUSH
27310: LD_VAR 0 2
27314: EQUAL
27315: PUSH
27316: LD_EXP 109
27320: PUSH
27321: LD_VAR 0 6
27325: ARRAY
27326: PUSH
27327: LD_VAR 0 5
27331: ARRAY
27332: PUSH
27333: LD_INT 2
27335: ARRAY
27336: PUSH
27337: LD_VAR 0 3
27341: EQUAL
27342: AND
27343: IFFALSE 27446
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27345: LD_EXP 109
27349: PUSH
27350: LD_VAR 0 6
27354: ARRAY
27355: PUSH
27356: LD_VAR 0 5
27360: ARRAY
27361: PUSH
27362: LD_INT 1
27364: ARRAY
27365: PPUSH
27366: LD_EXP 109
27370: PUSH
27371: LD_VAR 0 6
27375: ARRAY
27376: PUSH
27377: LD_VAR 0 5
27381: ARRAY
27382: PUSH
27383: LD_INT 2
27385: ARRAY
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 255
27396: PPUSH
27397: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27401: LD_ADDR_EXP 109
27405: PUSH
27406: LD_EXP 109
27410: PPUSH
27411: LD_VAR 0 6
27415: PPUSH
27416: LD_EXP 109
27420: PUSH
27421: LD_VAR 0 6
27425: ARRAY
27426: PPUSH
27427: LD_VAR 0 5
27431: PPUSH
27432: CALL_OW 3
27436: PPUSH
27437: CALL_OW 1
27441: ST_TO_ADDR
// exit ;
27442: POP
27443: POP
27444: GO 27637
// end ; end ;
27446: GO 27286
27448: POP
27449: POP
// for i := minerMinesList [ index ] downto 1 do
27450: LD_ADDR_VAR 0 5
27454: PUSH
27455: DOUBLE
27456: LD_EXP 109
27460: PUSH
27461: LD_VAR 0 6
27465: ARRAY
27466: INC
27467: ST_TO_ADDR
27468: LD_INT 1
27470: PUSH
27471: FOR_DOWNTO
27472: IFFALSE 27635
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27474: LD_EXP 109
27478: PUSH
27479: LD_VAR 0 6
27483: ARRAY
27484: PUSH
27485: LD_VAR 0 5
27489: ARRAY
27490: PUSH
27491: LD_INT 1
27493: ARRAY
27494: PPUSH
27495: LD_EXP 109
27499: PUSH
27500: LD_VAR 0 6
27504: ARRAY
27505: PUSH
27506: LD_VAR 0 5
27510: ARRAY
27511: PUSH
27512: LD_INT 2
27514: ARRAY
27515: PPUSH
27516: LD_VAR 0 2
27520: PPUSH
27521: LD_VAR 0 3
27525: PPUSH
27526: CALL_OW 298
27530: PUSH
27531: LD_INT 6
27533: LESS
27534: IFFALSE 27633
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27536: LD_EXP 109
27540: PUSH
27541: LD_VAR 0 6
27545: ARRAY
27546: PUSH
27547: LD_VAR 0 5
27551: ARRAY
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: LD_EXP 109
27561: PUSH
27562: LD_VAR 0 6
27566: ARRAY
27567: PUSH
27568: LD_VAR 0 5
27572: ARRAY
27573: PUSH
27574: LD_INT 2
27576: ARRAY
27577: PPUSH
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL_OW 255
27587: PPUSH
27588: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27592: LD_ADDR_EXP 109
27596: PUSH
27597: LD_EXP 109
27601: PPUSH
27602: LD_VAR 0 6
27606: PPUSH
27607: LD_EXP 109
27611: PUSH
27612: LD_VAR 0 6
27616: ARRAY
27617: PPUSH
27618: LD_VAR 0 5
27622: PPUSH
27623: CALL_OW 3
27627: PPUSH
27628: CALL_OW 1
27632: ST_TO_ADDR
// end ; end ;
27633: GO 27471
27635: POP
27636: POP
// end ;
27637: LD_VAR 0 4
27641: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27642: LD_INT 0
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 264
27662: PUSH
27663: LD_EXP 33
27667: EQUAL
27668: NOT
27669: PUSH
27670: LD_VAR 0 1
27674: PUSH
27675: LD_EXP 108
27679: IN
27680: NOT
27681: OR
27682: IFFALSE 27686
// exit ;
27684: GO 28008
// index := GetElementIndex ( minersList , unit ) ;
27686: LD_ADDR_VAR 0 6
27690: PUSH
27691: LD_EXP 108
27695: PPUSH
27696: LD_VAR 0 1
27700: PPUSH
27701: CALL 33164 0 2
27705: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27706: LD_ADDR_VAR 0 8
27710: PUSH
27711: LD_EXP 110
27715: PUSH
27716: LD_EXP 109
27720: PUSH
27721: LD_VAR 0 6
27725: ARRAY
27726: MINUS
27727: ST_TO_ADDR
// if not minesFreeAmount then
27728: LD_VAR 0 8
27732: NOT
27733: IFFALSE 27737
// exit ;
27735: GO 28008
// tmp := [ ] ;
27737: LD_ADDR_VAR 0 7
27741: PUSH
27742: EMPTY
27743: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27744: LD_ADDR_VAR 0 5
27748: PUSH
27749: DOUBLE
27750: LD_INT 1
27752: DEC
27753: ST_TO_ADDR
27754: LD_VAR 0 8
27758: PUSH
27759: FOR_TO
27760: IFFALSE 27955
// begin _d := rand ( 0 , 5 ) ;
27762: LD_ADDR_VAR 0 11
27766: PUSH
27767: LD_INT 0
27769: PPUSH
27770: LD_INT 5
27772: PPUSH
27773: CALL_OW 12
27777: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27778: LD_ADDR_VAR 0 12
27782: PUSH
27783: LD_INT 2
27785: PPUSH
27786: LD_INT 6
27788: PPUSH
27789: CALL_OW 12
27793: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27794: LD_ADDR_VAR 0 9
27798: PUSH
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 11
27808: PPUSH
27809: LD_VAR 0 12
27813: PPUSH
27814: CALL_OW 272
27818: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27819: LD_ADDR_VAR 0 10
27823: PUSH
27824: LD_VAR 0 3
27828: PPUSH
27829: LD_VAR 0 11
27833: PPUSH
27834: LD_VAR 0 12
27838: PPUSH
27839: CALL_OW 273
27843: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27844: LD_VAR 0 9
27848: PPUSH
27849: LD_VAR 0 10
27853: PPUSH
27854: CALL_OW 488
27858: PUSH
27859: LD_VAR 0 9
27863: PUSH
27864: LD_VAR 0 10
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_VAR 0 7
27877: IN
27878: NOT
27879: AND
27880: PUSH
27881: LD_VAR 0 9
27885: PPUSH
27886: LD_VAR 0 10
27890: PPUSH
27891: CALL_OW 458
27895: NOT
27896: AND
27897: IFFALSE 27939
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27899: LD_ADDR_VAR 0 7
27903: PUSH
27904: LD_VAR 0 7
27908: PPUSH
27909: LD_VAR 0 7
27913: PUSH
27914: LD_INT 1
27916: PLUS
27917: PPUSH
27918: LD_VAR 0 9
27922: PUSH
27923: LD_VAR 0 10
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PPUSH
27932: CALL_OW 1
27936: ST_TO_ADDR
27937: GO 27953
// i := i - 1 ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_VAR 0 5
27948: PUSH
27949: LD_INT 1
27951: MINUS
27952: ST_TO_ADDR
// end ;
27953: GO 27759
27955: POP
27956: POP
// for i in tmp do
27957: LD_ADDR_VAR 0 5
27961: PUSH
27962: LD_VAR 0 7
27966: PUSH
27967: FOR_IN
27968: IFFALSE 28006
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27970: LD_VAR 0 1
27974: PPUSH
27975: LD_VAR 0 5
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: LD_VAR 0 5
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: PPUSH
27993: CALL 26948 0 3
27997: NOT
27998: IFFALSE 28004
// exit ;
28000: POP
28001: POP
28002: GO 28008
28004: GO 27967
28006: POP
28007: POP
// end ;
28008: LD_VAR 0 4
28012: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28013: LD_INT 0
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
28020: PPUSH
28021: PPUSH
// if not GetClass ( unit ) = class_sniper then
28022: LD_VAR 0 1
28026: PPUSH
28027: CALL_OW 257
28031: PUSH
28032: LD_INT 5
28034: EQUAL
28035: NOT
28036: IFFALSE 28040
// exit ;
28038: GO 28428
// dist := 8 ;
28040: LD_ADDR_VAR 0 5
28044: PUSH
28045: LD_INT 8
28047: ST_TO_ADDR
// viewRange := 12 ;
28048: LD_ADDR_VAR 0 7
28052: PUSH
28053: LD_INT 12
28055: ST_TO_ADDR
// side := GetSide ( unit ) ;
28056: LD_ADDR_VAR 0 6
28060: PUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 255
28070: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28071: LD_INT 61
28073: PPUSH
28074: LD_VAR 0 6
28078: PPUSH
28079: CALL_OW 321
28083: PUSH
28084: LD_INT 2
28086: EQUAL
28087: IFFALSE 28097
// viewRange := 16 ;
28089: LD_ADDR_VAR 0 7
28093: PUSH
28094: LD_INT 16
28096: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_VAR 0 2
28106: PPUSH
28107: LD_VAR 0 3
28111: PPUSH
28112: CALL_OW 297
28116: PUSH
28117: LD_VAR 0 5
28121: GREATER
28122: IFFALSE 28201
// begin ComMoveXY ( unit , x , y ) ;
28124: LD_VAR 0 1
28128: PPUSH
28129: LD_VAR 0 2
28133: PPUSH
28134: LD_VAR 0 3
28138: PPUSH
28139: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28143: LD_INT 35
28145: PPUSH
28146: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28150: LD_VAR 0 1
28154: PPUSH
28155: LD_VAR 0 2
28159: PPUSH
28160: LD_VAR 0 3
28164: PPUSH
28165: CALL 63561 0 3
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28428
// until GetDistUnitXY ( unit , x , y ) < dist ;
28174: LD_VAR 0 1
28178: PPUSH
28179: LD_VAR 0 2
28183: PPUSH
28184: LD_VAR 0 3
28188: PPUSH
28189: CALL_OW 297
28193: PUSH
28194: LD_VAR 0 5
28198: LESS
28199: IFFALSE 28143
// end ; ComTurnXY ( unit , x , y ) ;
28201: LD_VAR 0 1
28205: PPUSH
28206: LD_VAR 0 2
28210: PPUSH
28211: LD_VAR 0 3
28215: PPUSH
28216: CALL_OW 118
// wait ( 5 ) ;
28220: LD_INT 5
28222: PPUSH
28223: CALL_OW 67
// _d := GetDir ( unit ) ;
28227: LD_ADDR_VAR 0 10
28231: PUSH
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 254
28241: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28242: LD_ADDR_VAR 0 8
28246: PUSH
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 250
28256: PPUSH
28257: LD_VAR 0 10
28261: PPUSH
28262: LD_VAR 0 5
28266: PPUSH
28267: CALL_OW 272
28271: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28272: LD_ADDR_VAR 0 9
28276: PUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 251
28286: PPUSH
28287: LD_VAR 0 10
28291: PPUSH
28292: LD_VAR 0 5
28296: PPUSH
28297: CALL_OW 273
28301: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28302: LD_VAR 0 8
28306: PPUSH
28307: LD_VAR 0 9
28311: PPUSH
28312: CALL_OW 488
28316: NOT
28317: IFFALSE 28321
// exit ;
28319: GO 28428
// ComAnimCustom ( unit , 1 ) ;
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_INT 1
28328: PPUSH
28329: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28333: LD_VAR 0 8
28337: PPUSH
28338: LD_VAR 0 9
28342: PPUSH
28343: LD_VAR 0 6
28347: PPUSH
28348: LD_VAR 0 7
28352: PPUSH
28353: CALL_OW 330
// repeat wait ( 1 ) ;
28357: LD_INT 1
28359: PPUSH
28360: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 316
28373: PUSH
28374: LD_VAR 0 1
28378: PPUSH
28379: CALL_OW 314
28383: OR
28384: PUSH
28385: LD_VAR 0 1
28389: PPUSH
28390: CALL_OW 302
28394: NOT
28395: OR
28396: PUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 301
28406: OR
28407: IFFALSE 28357
// RemoveSeeing ( _x , _y , side ) ;
28409: LD_VAR 0 8
28413: PPUSH
28414: LD_VAR 0 9
28418: PPUSH
28419: LD_VAR 0 6
28423: PPUSH
28424: CALL_OW 331
// end ; end_of_file
28428: LD_VAR 0 4
28432: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28433: LD_INT 0
28435: PPUSH
28436: PPUSH
// if exist_mode then
28437: LD_VAR 0 2
28441: IFFALSE 28466
// unit := CreateCharacter ( prefix & ident ) else
28443: LD_ADDR_VAR 0 5
28447: PUSH
28448: LD_VAR 0 3
28452: PUSH
28453: LD_VAR 0 1
28457: STR
28458: PPUSH
28459: CALL_OW 34
28463: ST_TO_ADDR
28464: GO 28481
// unit := NewCharacter ( ident ) ;
28466: LD_ADDR_VAR 0 5
28470: PUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 25
28480: ST_TO_ADDR
// result := unit ;
28481: LD_ADDR_VAR 0 4
28485: PUSH
28486: LD_VAR 0 5
28490: ST_TO_ADDR
// end ;
28491: LD_VAR 0 4
28495: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28496: LD_INT 0
28498: PPUSH
28499: PPUSH
// if not side or not nation then
28500: LD_VAR 0 1
28504: NOT
28505: PUSH
28506: LD_VAR 0 2
28510: NOT
28511: OR
28512: IFFALSE 28516
// exit ;
28514: GO 29280
// case nation of nation_american :
28516: LD_VAR 0 2
28520: PUSH
28521: LD_INT 1
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28743
28529: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28530: LD_ADDR_VAR 0 4
28534: PUSH
28535: LD_INT 35
28537: PUSH
28538: LD_INT 45
28540: PUSH
28541: LD_INT 46
28543: PUSH
28544: LD_INT 47
28546: PUSH
28547: LD_INT 82
28549: PUSH
28550: LD_INT 83
28552: PUSH
28553: LD_INT 84
28555: PUSH
28556: LD_INT 85
28558: PUSH
28559: LD_INT 86
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: LD_INT 6
28570: PUSH
28571: LD_INT 15
28573: PUSH
28574: LD_INT 16
28576: PUSH
28577: LD_INT 7
28579: PUSH
28580: LD_INT 12
28582: PUSH
28583: LD_INT 13
28585: PUSH
28586: LD_INT 10
28588: PUSH
28589: LD_INT 14
28591: PUSH
28592: LD_INT 20
28594: PUSH
28595: LD_INT 21
28597: PUSH
28598: LD_INT 22
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 32
28606: PUSH
28607: LD_INT 27
28609: PUSH
28610: LD_INT 36
28612: PUSH
28613: LD_INT 69
28615: PUSH
28616: LD_INT 39
28618: PUSH
28619: LD_INT 34
28621: PUSH
28622: LD_INT 40
28624: PUSH
28625: LD_INT 48
28627: PUSH
28628: LD_INT 49
28630: PUSH
28631: LD_INT 50
28633: PUSH
28634: LD_INT 51
28636: PUSH
28637: LD_INT 52
28639: PUSH
28640: LD_INT 53
28642: PUSH
28643: LD_INT 54
28645: PUSH
28646: LD_INT 55
28648: PUSH
28649: LD_INT 56
28651: PUSH
28652: LD_INT 57
28654: PUSH
28655: LD_INT 58
28657: PUSH
28658: LD_INT 59
28660: PUSH
28661: LD_INT 60
28663: PUSH
28664: LD_INT 61
28666: PUSH
28667: LD_INT 62
28669: PUSH
28670: LD_INT 80
28672: PUSH
28673: LD_INT 82
28675: PUSH
28676: LD_INT 83
28678: PUSH
28679: LD_INT 84
28681: PUSH
28682: LD_INT 85
28684: PUSH
28685: LD_INT 86
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: ST_TO_ADDR
28741: GO 29204
28743: LD_INT 2
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28973
28751: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_INT 35
28759: PUSH
28760: LD_INT 45
28762: PUSH
28763: LD_INT 46
28765: PUSH
28766: LD_INT 47
28768: PUSH
28769: LD_INT 82
28771: PUSH
28772: LD_INT 83
28774: PUSH
28775: LD_INT 84
28777: PUSH
28778: LD_INT 85
28780: PUSH
28781: LD_INT 87
28783: PUSH
28784: LD_INT 70
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 11
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: LD_INT 5
28801: PUSH
28802: LD_INT 6
28804: PUSH
28805: LD_INT 15
28807: PUSH
28808: LD_INT 18
28810: PUSH
28811: LD_INT 7
28813: PUSH
28814: LD_INT 17
28816: PUSH
28817: LD_INT 8
28819: PUSH
28820: LD_INT 20
28822: PUSH
28823: LD_INT 21
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_INT 72
28831: PUSH
28832: LD_INT 26
28834: PUSH
28835: LD_INT 69
28837: PUSH
28838: LD_INT 39
28840: PUSH
28841: LD_INT 40
28843: PUSH
28844: LD_INT 41
28846: PUSH
28847: LD_INT 42
28849: PUSH
28850: LD_INT 43
28852: PUSH
28853: LD_INT 48
28855: PUSH
28856: LD_INT 49
28858: PUSH
28859: LD_INT 50
28861: PUSH
28862: LD_INT 51
28864: PUSH
28865: LD_INT 52
28867: PUSH
28868: LD_INT 53
28870: PUSH
28871: LD_INT 54
28873: PUSH
28874: LD_INT 55
28876: PUSH
28877: LD_INT 56
28879: PUSH
28880: LD_INT 60
28882: PUSH
28883: LD_INT 61
28885: PUSH
28886: LD_INT 62
28888: PUSH
28889: LD_INT 66
28891: PUSH
28892: LD_INT 67
28894: PUSH
28895: LD_INT 68
28897: PUSH
28898: LD_INT 81
28900: PUSH
28901: LD_INT 82
28903: PUSH
28904: LD_INT 83
28906: PUSH
28907: LD_INT 84
28909: PUSH
28910: LD_INT 85
28912: PUSH
28913: LD_INT 87
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
28971: GO 29204
28973: LD_INT 3
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 29203
28981: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28982: LD_ADDR_VAR 0 4
28986: PUSH
28987: LD_INT 46
28989: PUSH
28990: LD_INT 47
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 82
29001: PUSH
29002: LD_INT 83
29004: PUSH
29005: LD_INT 84
29007: PUSH
29008: LD_INT 85
29010: PUSH
29011: LD_INT 86
29013: PUSH
29014: LD_INT 11
29016: PUSH
29017: LD_INT 9
29019: PUSH
29020: LD_INT 20
29022: PUSH
29023: LD_INT 19
29025: PUSH
29026: LD_INT 21
29028: PUSH
29029: LD_INT 24
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_INT 25
29037: PUSH
29038: LD_INT 28
29040: PUSH
29041: LD_INT 29
29043: PUSH
29044: LD_INT 30
29046: PUSH
29047: LD_INT 31
29049: PUSH
29050: LD_INT 37
29052: PUSH
29053: LD_INT 38
29055: PUSH
29056: LD_INT 32
29058: PUSH
29059: LD_INT 27
29061: PUSH
29062: LD_INT 33
29064: PUSH
29065: LD_INT 69
29067: PUSH
29068: LD_INT 39
29070: PUSH
29071: LD_INT 34
29073: PUSH
29074: LD_INT 40
29076: PUSH
29077: LD_INT 71
29079: PUSH
29080: LD_INT 23
29082: PUSH
29083: LD_INT 44
29085: PUSH
29086: LD_INT 48
29088: PUSH
29089: LD_INT 49
29091: PUSH
29092: LD_INT 50
29094: PUSH
29095: LD_INT 51
29097: PUSH
29098: LD_INT 52
29100: PUSH
29101: LD_INT 53
29103: PUSH
29104: LD_INT 54
29106: PUSH
29107: LD_INT 55
29109: PUSH
29110: LD_INT 56
29112: PUSH
29113: LD_INT 57
29115: PUSH
29116: LD_INT 58
29118: PUSH
29119: LD_INT 59
29121: PUSH
29122: LD_INT 63
29124: PUSH
29125: LD_INT 64
29127: PUSH
29128: LD_INT 65
29130: PUSH
29131: LD_INT 82
29133: PUSH
29134: LD_INT 83
29136: PUSH
29137: LD_INT 84
29139: PUSH
29140: LD_INT 85
29142: PUSH
29143: LD_INT 86
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: ST_TO_ADDR
29201: GO 29204
29203: POP
// if state > - 1 and state < 3 then
29204: LD_VAR 0 3
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: GREATER
29213: PUSH
29214: LD_VAR 0 3
29218: PUSH
29219: LD_INT 3
29221: LESS
29222: AND
29223: IFFALSE 29280
// for i in result do
29225: LD_ADDR_VAR 0 5
29229: PUSH
29230: LD_VAR 0 4
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29278
// if GetTech ( i , side ) <> state then
29238: LD_VAR 0 5
29242: PPUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 321
29252: PUSH
29253: LD_VAR 0 3
29257: NONEQUAL
29258: IFFALSE 29276
// result := result diff i ;
29260: LD_ADDR_VAR 0 4
29264: PUSH
29265: LD_VAR 0 4
29269: PUSH
29270: LD_VAR 0 5
29274: DIFF
29275: ST_TO_ADDR
29276: GO 29235
29278: POP
29279: POP
// end ;
29280: LD_VAR 0 4
29284: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
29289: PPUSH
// result := true ;
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_INT 1
29297: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29298: LD_ADDR_VAR 0 5
29302: PUSH
29303: LD_VAR 0 2
29307: PPUSH
29308: CALL_OW 480
29312: ST_TO_ADDR
// if not tmp then
29313: LD_VAR 0 5
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29371
// for i in tmp do
29322: LD_ADDR_VAR 0 4
29326: PUSH
29327: LD_VAR 0 5
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29369
// if GetTech ( i , side ) <> state_researched then
29335: LD_VAR 0 4
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 321
29349: PUSH
29350: LD_INT 2
29352: NONEQUAL
29353: IFFALSE 29367
// begin result := false ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 0
29362: ST_TO_ADDR
// exit ;
29363: POP
29364: POP
29365: GO 29371
// end ;
29367: GO 29332
29369: POP
29370: POP
// end ;
29371: LD_VAR 0 3
29375: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29391: LD_VAR 0 1
29395: NOT
29396: PUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 257
29406: PUSH
29407: LD_INT 9
29409: NONEQUAL
29410: OR
29411: IFFALSE 29415
// exit ;
29413: GO 29988
// side := GetSide ( unit ) ;
29415: LD_ADDR_VAR 0 9
29419: PUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 255
29429: ST_TO_ADDR
// tech_space := tech_spacanom ;
29430: LD_ADDR_VAR 0 12
29434: PUSH
29435: LD_INT 29
29437: ST_TO_ADDR
// tech_time := tech_taurad ;
29438: LD_ADDR_VAR 0 13
29442: PUSH
29443: LD_INT 28
29445: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29446: LD_ADDR_VAR 0 11
29450: PUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 310
29460: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29461: LD_VAR 0 11
29465: PPUSH
29466: CALL_OW 247
29470: PUSH
29471: LD_INT 2
29473: EQUAL
29474: IFFALSE 29478
// exit ;
29476: GO 29988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29478: LD_ADDR_VAR 0 8
29482: PUSH
29483: LD_INT 81
29485: PUSH
29486: LD_VAR 0 9
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: PUSH
29498: LD_INT 21
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PPUSH
29516: CALL_OW 69
29520: ST_TO_ADDR
// if not tmp then
29521: LD_VAR 0 8
29525: NOT
29526: IFFALSE 29530
// exit ;
29528: GO 29988
// if in_unit then
29530: LD_VAR 0 11
29534: IFFALSE 29558
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29536: LD_ADDR_VAR 0 10
29540: PUSH
29541: LD_VAR 0 8
29545: PPUSH
29546: LD_VAR 0 11
29550: PPUSH
29551: CALL_OW 74
29555: ST_TO_ADDR
29556: GO 29578
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29558: LD_ADDR_VAR 0 10
29562: PUSH
29563: LD_VAR 0 8
29567: PPUSH
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 74
29577: ST_TO_ADDR
// if not enemy then
29578: LD_VAR 0 10
29582: NOT
29583: IFFALSE 29587
// exit ;
29585: GO 29988
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29587: LD_VAR 0 11
29591: PUSH
29592: LD_VAR 0 11
29596: PPUSH
29597: LD_VAR 0 10
29601: PPUSH
29602: CALL_OW 296
29606: PUSH
29607: LD_INT 13
29609: GREATER
29610: AND
29611: PUSH
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_VAR 0 10
29621: PPUSH
29622: CALL_OW 296
29626: PUSH
29627: LD_INT 12
29629: GREATER
29630: OR
29631: IFFALSE 29635
// exit ;
29633: GO 29988
// missile := [ 1 ] ;
29635: LD_ADDR_VAR 0 14
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29646: LD_VAR 0 9
29650: PPUSH
29651: LD_VAR 0 12
29655: PPUSH
29656: CALL_OW 325
29660: IFFALSE 29689
// missile := Insert ( missile , missile + 1 , 2 ) ;
29662: LD_ADDR_VAR 0 14
29666: PUSH
29667: LD_VAR 0 14
29671: PPUSH
29672: LD_VAR 0 14
29676: PUSH
29677: LD_INT 1
29679: PLUS
29680: PPUSH
29681: LD_INT 2
29683: PPUSH
29684: CALL_OW 2
29688: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29689: LD_VAR 0 9
29693: PPUSH
29694: LD_VAR 0 13
29698: PPUSH
29699: CALL_OW 325
29703: PUSH
29704: LD_VAR 0 10
29708: PPUSH
29709: CALL_OW 255
29713: PPUSH
29714: LD_VAR 0 13
29718: PPUSH
29719: CALL_OW 325
29723: NOT
29724: AND
29725: IFFALSE 29754
// missile := Insert ( missile , missile + 1 , 3 ) ;
29727: LD_ADDR_VAR 0 14
29731: PUSH
29732: LD_VAR 0 14
29736: PPUSH
29737: LD_VAR 0 14
29741: PUSH
29742: LD_INT 1
29744: PLUS
29745: PPUSH
29746: LD_INT 3
29748: PPUSH
29749: CALL_OW 2
29753: ST_TO_ADDR
// if missile < 2 then
29754: LD_VAR 0 14
29758: PUSH
29759: LD_INT 2
29761: LESS
29762: IFFALSE 29766
// exit ;
29764: GO 29988
// x := GetX ( enemy ) ;
29766: LD_ADDR_VAR 0 4
29770: PUSH
29771: LD_VAR 0 10
29775: PPUSH
29776: CALL_OW 250
29780: ST_TO_ADDR
// y := GetY ( enemy ) ;
29781: LD_ADDR_VAR 0 5
29785: PUSH
29786: LD_VAR 0 10
29790: PPUSH
29791: CALL_OW 251
29795: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29796: LD_ADDR_VAR 0 6
29800: PUSH
29801: LD_VAR 0 4
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PPUSH
29810: LD_INT 1
29812: PPUSH
29813: CALL_OW 12
29817: PLUS
29818: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29819: LD_ADDR_VAR 0 7
29823: PUSH
29824: LD_VAR 0 5
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PPUSH
29833: LD_INT 1
29835: PPUSH
29836: CALL_OW 12
29840: PLUS
29841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29842: LD_VAR 0 6
29846: PPUSH
29847: LD_VAR 0 7
29851: PPUSH
29852: CALL_OW 488
29856: NOT
29857: IFFALSE 29879
// begin _x := x ;
29859: LD_ADDR_VAR 0 6
29863: PUSH
29864: LD_VAR 0 4
29868: ST_TO_ADDR
// _y := y ;
29869: LD_ADDR_VAR 0 7
29873: PUSH
29874: LD_VAR 0 5
29878: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29879: LD_ADDR_VAR 0 3
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 14
29891: PPUSH
29892: CALL_OW 12
29896: ST_TO_ADDR
// case i of 1 :
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 1
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29927
29910: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29911: LD_VAR 0 1
29915: PPUSH
29916: LD_VAR 0 10
29920: PPUSH
29921: CALL_OW 115
29925: GO 29988
29927: LD_INT 2
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 29957
29935: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29936: LD_VAR 0 1
29940: PPUSH
29941: LD_VAR 0 6
29945: PPUSH
29946: LD_VAR 0 7
29950: PPUSH
29951: CALL_OW 153
29955: GO 29988
29957: LD_INT 3
29959: DOUBLE
29960: EQUAL
29961: IFTRUE 29965
29963: GO 29987
29965: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29966: LD_VAR 0 1
29970: PPUSH
29971: LD_VAR 0 6
29975: PPUSH
29976: LD_VAR 0 7
29980: PPUSH
29981: CALL_OW 154
29985: GO 29988
29987: POP
// end ;
29988: LD_VAR 0 2
29992: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29993: LD_INT 0
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
// if not unit or not building then
30001: LD_VAR 0 1
30005: NOT
30006: PUSH
30007: LD_VAR 0 2
30011: NOT
30012: OR
30013: IFFALSE 30017
// exit ;
30015: GO 30175
// x := GetX ( building ) ;
30017: LD_ADDR_VAR 0 5
30021: PUSH
30022: LD_VAR 0 2
30026: PPUSH
30027: CALL_OW 250
30031: ST_TO_ADDR
// y := GetY ( building ) ;
30032: LD_ADDR_VAR 0 6
30036: PUSH
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL_OW 251
30046: ST_TO_ADDR
// for i = 0 to 5 do
30047: LD_ADDR_VAR 0 4
30051: PUSH
30052: DOUBLE
30053: LD_INT 0
30055: DEC
30056: ST_TO_ADDR
30057: LD_INT 5
30059: PUSH
30060: FOR_TO
30061: IFFALSE 30173
// begin _x := ShiftX ( x , i , 3 ) ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: LD_VAR 0 4
30077: PPUSH
30078: LD_INT 3
30080: PPUSH
30081: CALL_OW 272
30085: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30086: LD_ADDR_VAR 0 8
30090: PUSH
30091: LD_VAR 0 6
30095: PPUSH
30096: LD_VAR 0 4
30100: PPUSH
30101: LD_INT 3
30103: PPUSH
30104: CALL_OW 273
30108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30109: LD_VAR 0 7
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: CALL_OW 488
30123: NOT
30124: IFFALSE 30128
// continue ;
30126: GO 30060
// if HexInfo ( _x , _y ) = 0 then
30128: LD_VAR 0 7
30132: PPUSH
30133: LD_VAR 0 8
30137: PPUSH
30138: CALL_OW 428
30142: PUSH
30143: LD_INT 0
30145: EQUAL
30146: IFFALSE 30171
// begin ComMoveXY ( unit , _x , _y ) ;
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: LD_VAR 0 8
30162: PPUSH
30163: CALL_OW 111
// exit ;
30167: POP
30168: POP
30169: GO 30175
// end ; end ;
30171: GO 30060
30173: POP
30174: POP
// end ;
30175: LD_VAR 0 3
30179: RET
// export function ScanBase ( side , base_area ) ; begin
30180: LD_INT 0
30182: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: LD_INT 81
30195: PUSH
30196: LD_VAR 0 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 70
30209: ST_TO_ADDR
// end ;
30210: LD_VAR 0 3
30214: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30215: LD_INT 0
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
// result := false ;
30221: LD_ADDR_VAR 0 2
30225: PUSH
30226: LD_INT 0
30228: ST_TO_ADDR
// side := GetSide ( unit ) ;
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 248
30258: ST_TO_ADDR
// case nat of 1 :
30259: LD_VAR 0 4
30263: PUSH
30264: LD_INT 1
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30283
30272: POP
// tech := tech_lassight ; 2 :
30273: LD_ADDR_VAR 0 5
30277: PUSH
30278: LD_INT 12
30280: ST_TO_ADDR
30281: GO 30322
30283: LD_INT 2
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30302
30291: POP
// tech := tech_mortar ; 3 :
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: LD_INT 41
30299: ST_TO_ADDR
30300: GO 30322
30302: LD_INT 3
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30321
30310: POP
// tech := tech_bazooka ; end ;
30311: LD_ADDR_VAR 0 5
30315: PUSH
30316: LD_INT 44
30318: ST_TO_ADDR
30319: GO 30322
30321: POP
// if Researched ( side , tech ) then
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_VAR 0 5
30331: PPUSH
30332: CALL_OW 325
30336: IFFALSE 30363
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30338: LD_ADDR_VAR 0 2
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: LD_INT 8
30348: PUSH
30349: LD_INT 9
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: PUSH
30357: LD_VAR 0 4
30361: ARRAY
30362: ST_TO_ADDR
// end ;
30363: LD_VAR 0 2
30367: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
30372: PPUSH
// if not mines then
30373: LD_VAR 0 2
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 30526
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30382: LD_ADDR_VAR 0 5
30386: PUSH
30387: LD_INT 81
30389: PUSH
30390: LD_VAR 0 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: LD_INT 21
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// for i in mines do
30425: LD_ADDR_VAR 0 4
30429: PUSH
30430: LD_VAR 0 2
30434: PUSH
30435: FOR_IN
30436: IFFALSE 30524
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30438: LD_VAR 0 4
30442: PUSH
30443: LD_INT 1
30445: ARRAY
30446: PPUSH
30447: LD_VAR 0 4
30451: PUSH
30452: LD_INT 2
30454: ARRAY
30455: PPUSH
30456: CALL_OW 458
30460: NOT
30461: IFFALSE 30465
// continue ;
30463: GO 30435
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30465: LD_VAR 0 4
30469: PUSH
30470: LD_INT 1
30472: ARRAY
30473: PPUSH
30474: LD_VAR 0 4
30478: PUSH
30479: LD_INT 2
30481: ARRAY
30482: PPUSH
30483: CALL_OW 428
30487: PUSH
30488: LD_VAR 0 5
30492: IN
30493: IFFALSE 30522
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30495: LD_VAR 0 4
30499: PUSH
30500: LD_INT 1
30502: ARRAY
30503: PPUSH
30504: LD_VAR 0 4
30508: PUSH
30509: LD_INT 2
30511: ARRAY
30512: PPUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 456
// end ;
30522: GO 30435
30524: POP
30525: POP
// end ;
30526: LD_VAR 0 3
30530: RET
// export function Count ( array ) ; var i ; begin
30531: LD_INT 0
30533: PPUSH
30534: PPUSH
// result := 0 ;
30535: LD_ADDR_VAR 0 2
30539: PUSH
30540: LD_INT 0
30542: ST_TO_ADDR
// for i in array do
30543: LD_ADDR_VAR 0 3
30547: PUSH
30548: LD_VAR 0 1
30552: PUSH
30553: FOR_IN
30554: IFFALSE 30578
// if i then
30556: LD_VAR 0 3
30560: IFFALSE 30576
// result := result + 1 ;
30562: LD_ADDR_VAR 0 2
30566: PUSH
30567: LD_VAR 0 2
30571: PUSH
30572: LD_INT 1
30574: PLUS
30575: ST_TO_ADDR
30576: GO 30553
30578: POP
30579: POP
// end ;
30580: LD_VAR 0 2
30584: RET
// export function IsEmpty ( building ) ; begin
30585: LD_INT 0
30587: PPUSH
// if not building then
30588: LD_VAR 0 1
30592: NOT
30593: IFFALSE 30597
// exit ;
30595: GO 30640
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30597: LD_ADDR_VAR 0 2
30601: PUSH
30602: LD_VAR 0 1
30606: PUSH
30607: LD_INT 22
30609: PUSH
30610: LD_VAR 0 1
30614: PPUSH
30615: CALL_OW 255
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 58
30626: PUSH
30627: EMPTY
30628: LIST
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PPUSH
30634: CALL_OW 69
30638: IN
30639: ST_TO_ADDR
// end ;
30640: LD_VAR 0 2
30644: RET
// export function IsNotFull ( building ) ; begin
30645: LD_INT 0
30647: PPUSH
// if not building then
30648: LD_VAR 0 1
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 30676
// result := UnitsInside ( building ) < 6 ;
30657: LD_ADDR_VAR 0 2
30661: PUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL_OW 313
30671: PUSH
30672: LD_INT 6
30674: LESS
30675: ST_TO_ADDR
// end ;
30676: LD_VAR 0 2
30680: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30681: LD_INT 0
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
// tmp := [ ] ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: EMPTY
30693: ST_TO_ADDR
// list := [ ] ;
30694: LD_ADDR_VAR 0 5
30698: PUSH
30699: EMPTY
30700: ST_TO_ADDR
// for i = 16 to 25 do
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: DOUBLE
30707: LD_INT 16
30709: DEC
30710: ST_TO_ADDR
30711: LD_INT 25
30713: PUSH
30714: FOR_TO
30715: IFFALSE 30788
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_VAR 0 3
30726: PUSH
30727: LD_INT 22
30729: PUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: CALL_OW 255
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 91
30746: PUSH
30747: LD_VAR 0 1
30751: PUSH
30752: LD_INT 6
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 30
30762: PUSH
30763: LD_VAR 0 4
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: PPUSH
30780: CALL_OW 69
30784: ADD
30785: ST_TO_ADDR
30786: GO 30714
30788: POP
30789: POP
// for i = 1 to tmp do
30790: LD_ADDR_VAR 0 4
30794: PUSH
30795: DOUBLE
30796: LD_INT 1
30798: DEC
30799: ST_TO_ADDR
30800: LD_VAR 0 3
30804: PUSH
30805: FOR_TO
30806: IFFALSE 30894
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30808: LD_ADDR_VAR 0 5
30812: PUSH
30813: LD_VAR 0 5
30817: PUSH
30818: LD_VAR 0 3
30822: PUSH
30823: LD_VAR 0 4
30827: ARRAY
30828: PPUSH
30829: CALL_OW 266
30833: PUSH
30834: LD_VAR 0 3
30838: PUSH
30839: LD_VAR 0 4
30843: ARRAY
30844: PPUSH
30845: CALL_OW 250
30849: PUSH
30850: LD_VAR 0 3
30854: PUSH
30855: LD_VAR 0 4
30859: ARRAY
30860: PPUSH
30861: CALL_OW 251
30865: PUSH
30866: LD_VAR 0 3
30870: PUSH
30871: LD_VAR 0 4
30875: ARRAY
30876: PPUSH
30877: CALL_OW 254
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: ADD
30891: ST_TO_ADDR
30892: GO 30805
30894: POP
30895: POP
// result := list ;
30896: LD_ADDR_VAR 0 2
30900: PUSH
30901: LD_VAR 0 5
30905: ST_TO_ADDR
// end ;
30906: LD_VAR 0 2
30910: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30911: LD_INT 0
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
// if not factory then
30920: LD_VAR 0 1
30924: NOT
30925: IFFALSE 30929
// exit ;
30927: GO 31522
// if control = control_apeman then
30929: LD_VAR 0 4
30933: PUSH
30934: LD_INT 5
30936: EQUAL
30937: IFFALSE 31046
// begin tmp := UnitsInside ( factory ) ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 313
30953: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30954: LD_VAR 0 8
30958: PPUSH
30959: LD_INT 25
30961: PUSH
30962: LD_INT 12
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 72
30973: NOT
30974: IFFALSE 30984
// control := control_manual ;
30976: LD_ADDR_VAR 0 4
30980: PUSH
30981: LD_INT 1
30983: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30984: LD_ADDR_VAR 0 8
30988: PUSH
30989: LD_VAR 0 1
30993: PPUSH
30994: CALL 30681 0 1
30998: ST_TO_ADDR
// if tmp then
30999: LD_VAR 0 8
31003: IFFALSE 31046
// begin for i in tmp do
31005: LD_ADDR_VAR 0 7
31009: PUSH
31010: LD_VAR 0 8
31014: PUSH
31015: FOR_IN
31016: IFFALSE 31044
// if i [ 1 ] = b_ext_radio then
31018: LD_VAR 0 7
31022: PUSH
31023: LD_INT 1
31025: ARRAY
31026: PUSH
31027: LD_INT 22
31029: EQUAL
31030: IFFALSE 31042
// begin control := control_remote ;
31032: LD_ADDR_VAR 0 4
31036: PUSH
31037: LD_INT 2
31039: ST_TO_ADDR
// break ;
31040: GO 31044
// end ;
31042: GO 31015
31044: POP
31045: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_VAR 0 3
31060: PPUSH
31061: LD_VAR 0 4
31065: PPUSH
31066: LD_VAR 0 5
31070: PPUSH
31071: CALL_OW 448
31075: IFFALSE 31110
// begin result := [ chassis , engine , control , weapon ] ;
31077: LD_ADDR_VAR 0 6
31081: PUSH
31082: LD_VAR 0 2
31086: PUSH
31087: LD_VAR 0 3
31091: PUSH
31092: LD_VAR 0 4
31096: PUSH
31097: LD_VAR 0 5
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// exit ;
31108: GO 31522
// end ; _chassis := AvailableChassisList ( factory ) ;
31110: LD_ADDR_VAR 0 9
31114: PUSH
31115: LD_VAR 0 1
31119: PPUSH
31120: CALL_OW 475
31124: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31125: LD_ADDR_VAR 0 11
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 476
31139: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31140: LD_ADDR_VAR 0 12
31144: PUSH
31145: LD_VAR 0 1
31149: PPUSH
31150: CALL_OW 477
31154: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31155: LD_ADDR_VAR 0 10
31159: PUSH
31160: LD_VAR 0 1
31164: PPUSH
31165: CALL_OW 478
31169: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31170: LD_VAR 0 9
31174: NOT
31175: PUSH
31176: LD_VAR 0 11
31180: NOT
31181: OR
31182: PUSH
31183: LD_VAR 0 12
31187: NOT
31188: OR
31189: PUSH
31190: LD_VAR 0 10
31194: NOT
31195: OR
31196: IFFALSE 31231
// begin result := [ chassis , engine , control , weapon ] ;
31198: LD_ADDR_VAR 0 6
31202: PUSH
31203: LD_VAR 0 2
31207: PUSH
31208: LD_VAR 0 3
31212: PUSH
31213: LD_VAR 0 4
31217: PUSH
31218: LD_VAR 0 5
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// exit ;
31229: GO 31522
// end ; if not chassis in _chassis then
31231: LD_VAR 0 2
31235: PUSH
31236: LD_VAR 0 9
31240: IN
31241: NOT
31242: IFFALSE 31268
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31244: LD_ADDR_VAR 0 2
31248: PUSH
31249: LD_VAR 0 9
31253: PUSH
31254: LD_INT 1
31256: PPUSH
31257: LD_VAR 0 9
31261: PPUSH
31262: CALL_OW 12
31266: ARRAY
31267: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31268: LD_VAR 0 2
31272: PPUSH
31273: LD_VAR 0 3
31277: PPUSH
31278: CALL 31527 0 2
31282: NOT
31283: IFFALSE 31342
// repeat engine := _engine [ 1 ] ;
31285: LD_ADDR_VAR 0 3
31289: PUSH
31290: LD_VAR 0 11
31294: PUSH
31295: LD_INT 1
31297: ARRAY
31298: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31299: LD_ADDR_VAR 0 11
31303: PUSH
31304: LD_VAR 0 11
31308: PPUSH
31309: LD_INT 1
31311: PPUSH
31312: CALL_OW 3
31316: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31317: LD_VAR 0 2
31321: PPUSH
31322: LD_VAR 0 3
31326: PPUSH
31327: CALL 31527 0 2
31331: PUSH
31332: LD_VAR 0 11
31336: PUSH
31337: EMPTY
31338: EQUAL
31339: OR
31340: IFFALSE 31285
// if not control in _control then
31342: LD_VAR 0 4
31346: PUSH
31347: LD_VAR 0 12
31351: IN
31352: NOT
31353: IFFALSE 31379
// control := _control [ rand ( 1 , _control ) ] ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_VAR 0 12
31364: PUSH
31365: LD_INT 1
31367: PPUSH
31368: LD_VAR 0 12
31372: PPUSH
31373: CALL_OW 12
31377: ARRAY
31378: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_VAR 0 5
31388: PPUSH
31389: CALL 31747 0 2
31393: NOT
31394: IFFALSE 31453
// repeat weapon := _weapon [ 1 ] ;
31396: LD_ADDR_VAR 0 5
31400: PUSH
31401: LD_VAR 0 10
31405: PUSH
31406: LD_INT 1
31408: ARRAY
31409: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31410: LD_ADDR_VAR 0 10
31414: PUSH
31415: LD_VAR 0 10
31419: PPUSH
31420: LD_INT 1
31422: PPUSH
31423: CALL_OW 3
31427: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31428: LD_VAR 0 2
31432: PPUSH
31433: LD_VAR 0 5
31437: PPUSH
31438: CALL 31747 0 2
31442: PUSH
31443: LD_VAR 0 10
31447: PUSH
31448: EMPTY
31449: EQUAL
31450: OR
31451: IFFALSE 31396
// result := [ ] ;
31453: LD_ADDR_VAR 0 6
31457: PUSH
31458: EMPTY
31459: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31460: LD_VAR 0 1
31464: PPUSH
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: LD_VAR 0 4
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: CALL_OW 448
31489: IFFALSE 31522
// result := [ chassis , engine , control , weapon ] ;
31491: LD_ADDR_VAR 0 6
31495: PUSH
31496: LD_VAR 0 2
31500: PUSH
31501: LD_VAR 0 3
31505: PUSH
31506: LD_VAR 0 4
31510: PUSH
31511: LD_VAR 0 5
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// end ;
31522: LD_VAR 0 6
31526: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31527: LD_INT 0
31529: PPUSH
// if not chassis or not engine then
31530: LD_VAR 0 1
31534: NOT
31535: PUSH
31536: LD_VAR 0 2
31540: NOT
31541: OR
31542: IFFALSE 31546
// exit ;
31544: GO 31742
// case engine of engine_solar :
31546: LD_VAR 0 2
31550: PUSH
31551: LD_INT 2
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31597
31559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31560: LD_ADDR_VAR 0 3
31564: PUSH
31565: LD_INT 11
31567: PUSH
31568: LD_INT 12
31570: PUSH
31571: LD_INT 13
31573: PUSH
31574: LD_INT 14
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
31595: GO 31726
31597: LD_INT 1
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31667
31605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31606: LD_ADDR_VAR 0 3
31610: PUSH
31611: LD_INT 11
31613: PUSH
31614: LD_INT 12
31616: PUSH
31617: LD_INT 13
31619: PUSH
31620: LD_INT 14
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: LD_INT 21
31640: PUSH
31641: LD_INT 23
31643: PUSH
31644: LD_INT 22
31646: PUSH
31647: LD_INT 24
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
31665: GO 31726
31667: LD_INT 3
31669: DOUBLE
31670: EQUAL
31671: IFTRUE 31675
31673: GO 31725
31675: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31676: LD_ADDR_VAR 0 3
31680: PUSH
31681: LD_INT 13
31683: PUSH
31684: LD_INT 14
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 3
31692: PUSH
31693: LD_INT 4
31695: PUSH
31696: LD_INT 5
31698: PUSH
31699: LD_INT 21
31701: PUSH
31702: LD_INT 22
31704: PUSH
31705: LD_INT 23
31707: PUSH
31708: LD_INT 24
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
31723: GO 31726
31725: POP
// result := ( chassis in result ) ;
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_VAR 0 1
31735: PUSH
31736: LD_VAR 0 3
31740: IN
31741: ST_TO_ADDR
// end ;
31742: LD_VAR 0 3
31746: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31747: LD_INT 0
31749: PPUSH
// if not chassis or not weapon then
31750: LD_VAR 0 1
31754: NOT
31755: PUSH
31756: LD_VAR 0 2
31760: NOT
31761: OR
31762: IFFALSE 31766
// exit ;
31764: GO 32792
// case weapon of us_machine_gun :
31766: LD_VAR 0 2
31770: PUSH
31771: LD_INT 2
31773: DOUBLE
31774: EQUAL
31775: IFTRUE 31779
31777: GO 31809
31779: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31780: LD_ADDR_VAR 0 3
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 4
31796: PUSH
31797: LD_INT 5
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
31807: GO 32776
31809: LD_INT 3
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31847
31817: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 2
31828: PUSH
31829: LD_INT 3
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: LD_INT 5
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: ST_TO_ADDR
31845: GO 32776
31847: LD_INT 11
31849: DOUBLE
31850: EQUAL
31851: IFTRUE 31855
31853: GO 31885
31855: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31856: LD_ADDR_VAR 0 3
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: LD_INT 3
31869: PUSH
31870: LD_INT 4
31872: PUSH
31873: LD_INT 5
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
31883: GO 32776
31885: LD_INT 4
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31919
31893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31894: LD_ADDR_VAR 0 3
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: LD_INT 5
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 32776
31919: LD_INT 5
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 31953
31927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31928: LD_ADDR_VAR 0 3
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: LD_INT 5
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: ST_TO_ADDR
31951: GO 32776
31953: LD_INT 9
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31987
31961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 3
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: LD_INT 5
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
31985: GO 32776
31987: LD_INT 7
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32021
31995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: LD_INT 5
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: ST_TO_ADDR
32019: GO 32776
32021: LD_INT 12
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32055
32029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32030: LD_ADDR_VAR 0 3
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
32053: GO 32776
32055: LD_INT 13
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32089
32063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
32087: GO 32776
32089: LD_INT 14
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32115
32097: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32098: LD_ADDR_VAR 0 3
32102: PUSH
32103: LD_INT 4
32105: PUSH
32106: LD_INT 5
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: ST_TO_ADDR
32113: GO 32776
32115: LD_INT 6
32117: DOUBLE
32118: EQUAL
32119: IFTRUE 32123
32121: GO 32141
32123: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32124: LD_ADDR_VAR 0 3
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: LD_INT 5
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: ST_TO_ADDR
32139: GO 32776
32141: LD_INT 10
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32167
32149: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_INT 4
32157: PUSH
32158: LD_INT 5
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 32776
32167: LD_INT 22
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32201
32175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 11
32183: PUSH
32184: LD_INT 12
32186: PUSH
32187: LD_INT 13
32189: PUSH
32190: LD_INT 14
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
32199: GO 32776
32201: LD_INT 23
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32235
32209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 11
32217: PUSH
32218: LD_INT 12
32220: PUSH
32221: LD_INT 13
32223: PUSH
32224: LD_INT 14
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
32233: GO 32776
32235: LD_INT 24
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32243
32241: GO 32269
32243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_INT 11
32251: PUSH
32252: LD_INT 12
32254: PUSH
32255: LD_INT 13
32257: PUSH
32258: LD_INT 14
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
32267: GO 32776
32269: LD_INT 30
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32303
32277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32278: LD_ADDR_VAR 0 3
32282: PUSH
32283: LD_INT 11
32285: PUSH
32286: LD_INT 12
32288: PUSH
32289: LD_INT 13
32291: PUSH
32292: LD_INT 14
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
32301: GO 32776
32303: LD_INT 25
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32329
32311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 13
32319: PUSH
32320: LD_INT 14
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: ST_TO_ADDR
32327: GO 32776
32329: LD_INT 27
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32355
32337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32338: LD_ADDR_VAR 0 3
32342: PUSH
32343: LD_INT 13
32345: PUSH
32346: LD_INT 14
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: ST_TO_ADDR
32353: GO 32776
32355: LD_INT 28
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32381
32363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32364: LD_ADDR_VAR 0 3
32368: PUSH
32369: LD_INT 13
32371: PUSH
32372: LD_INT 14
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 32776
32381: LD_INT 29
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32407
32389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 13
32397: PUSH
32398: LD_INT 14
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: ST_TO_ADDR
32405: GO 32776
32407: LD_INT 31
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32415
32413: GO 32433
32415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_INT 13
32423: PUSH
32424: LD_INT 14
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: ST_TO_ADDR
32431: GO 32776
32433: LD_INT 26
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32459
32441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: LD_INT 13
32449: PUSH
32450: LD_INT 14
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: ST_TO_ADDR
32457: GO 32776
32459: LD_INT 42
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32493
32467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: LD_INT 21
32475: PUSH
32476: LD_INT 22
32478: PUSH
32479: LD_INT 23
32481: PUSH
32482: LD_INT 24
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: ST_TO_ADDR
32491: GO 32776
32493: LD_INT 43
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32527
32501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32502: LD_ADDR_VAR 0 3
32506: PUSH
32507: LD_INT 21
32509: PUSH
32510: LD_INT 22
32512: PUSH
32513: LD_INT 23
32515: PUSH
32516: LD_INT 24
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
32525: GO 32776
32527: LD_INT 44
32529: DOUBLE
32530: EQUAL
32531: IFTRUE 32535
32533: GO 32561
32535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32536: LD_ADDR_VAR 0 3
32540: PUSH
32541: LD_INT 21
32543: PUSH
32544: LD_INT 22
32546: PUSH
32547: LD_INT 23
32549: PUSH
32550: LD_INT 24
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: ST_TO_ADDR
32559: GO 32776
32561: LD_INT 45
32563: DOUBLE
32564: EQUAL
32565: IFTRUE 32569
32567: GO 32595
32569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32570: LD_ADDR_VAR 0 3
32574: PUSH
32575: LD_INT 21
32577: PUSH
32578: LD_INT 22
32580: PUSH
32581: LD_INT 23
32583: PUSH
32584: LD_INT 24
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
32593: GO 32776
32595: LD_INT 49
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32629
32603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32604: LD_ADDR_VAR 0 3
32608: PUSH
32609: LD_INT 21
32611: PUSH
32612: LD_INT 22
32614: PUSH
32615: LD_INT 23
32617: PUSH
32618: LD_INT 24
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 32776
32629: LD_INT 51
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32663
32637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 21
32645: PUSH
32646: LD_INT 22
32648: PUSH
32649: LD_INT 23
32651: PUSH
32652: LD_INT 24
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
32661: GO 32776
32663: LD_INT 52
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32697
32671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32672: LD_ADDR_VAR 0 3
32676: PUSH
32677: LD_INT 21
32679: PUSH
32680: LD_INT 22
32682: PUSH
32683: LD_INT 23
32685: PUSH
32686: LD_INT 24
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: ST_TO_ADDR
32695: GO 32776
32697: LD_INT 53
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32723
32705: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_INT 23
32713: PUSH
32714: LD_INT 24
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32776
32723: LD_INT 46
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32749
32731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 23
32739: PUSH
32740: LD_INT 24
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: ST_TO_ADDR
32747: GO 32776
32749: LD_INT 47
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32775
32757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 24
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: ST_TO_ADDR
32773: GO 32776
32775: POP
// result := ( chassis in result ) ;
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_VAR 0 1
32785: PUSH
32786: LD_VAR 0 3
32790: IN
32791: ST_TO_ADDR
// end ;
32792: LD_VAR 0 3
32796: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32797: LD_INT 0
32799: PPUSH
32800: PPUSH
32801: PPUSH
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
// result := array ;
32806: LD_ADDR_VAR 0 5
32810: PUSH
32811: LD_VAR 0 1
32815: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32816: LD_VAR 0 1
32820: NOT
32821: PUSH
32822: LD_VAR 0 2
32826: NOT
32827: OR
32828: PUSH
32829: LD_VAR 0 3
32833: NOT
32834: OR
32835: PUSH
32836: LD_VAR 0 2
32840: PUSH
32841: LD_VAR 0 1
32845: GREATER
32846: OR
32847: PUSH
32848: LD_VAR 0 3
32852: PUSH
32853: LD_VAR 0 1
32857: GREATER
32858: OR
32859: IFFALSE 32863
// exit ;
32861: GO 33159
// if direction then
32863: LD_VAR 0 4
32867: IFFALSE 32931
// begin d := 1 ;
32869: LD_ADDR_VAR 0 9
32873: PUSH
32874: LD_INT 1
32876: ST_TO_ADDR
// if i_from > i_to then
32877: LD_VAR 0 2
32881: PUSH
32882: LD_VAR 0 3
32886: GREATER
32887: IFFALSE 32913
// length := ( array - i_from ) + i_to else
32889: LD_ADDR_VAR 0 11
32893: PUSH
32894: LD_VAR 0 1
32898: PUSH
32899: LD_VAR 0 2
32903: MINUS
32904: PUSH
32905: LD_VAR 0 3
32909: PLUS
32910: ST_TO_ADDR
32911: GO 32929
// length := i_to - i_from ;
32913: LD_ADDR_VAR 0 11
32917: PUSH
32918: LD_VAR 0 3
32922: PUSH
32923: LD_VAR 0 2
32927: MINUS
32928: ST_TO_ADDR
// end else
32929: GO 32992
// begin d := - 1 ;
32931: LD_ADDR_VAR 0 9
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: ST_TO_ADDR
// if i_from > i_to then
32940: LD_VAR 0 2
32944: PUSH
32945: LD_VAR 0 3
32949: GREATER
32950: IFFALSE 32970
// length := i_from - i_to else
32952: LD_ADDR_VAR 0 11
32956: PUSH
32957: LD_VAR 0 2
32961: PUSH
32962: LD_VAR 0 3
32966: MINUS
32967: ST_TO_ADDR
32968: GO 32992
// length := ( array - i_to ) + i_from ;
32970: LD_ADDR_VAR 0 11
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_VAR 0 3
32984: MINUS
32985: PUSH
32986: LD_VAR 0 2
32990: PLUS
32991: ST_TO_ADDR
// end ; if not length then
32992: LD_VAR 0 11
32996: NOT
32997: IFFALSE 33001
// exit ;
32999: GO 33159
// tmp := array ;
33001: LD_ADDR_VAR 0 10
33005: PUSH
33006: LD_VAR 0 1
33010: ST_TO_ADDR
// for i = 1 to length do
33011: LD_ADDR_VAR 0 6
33015: PUSH
33016: DOUBLE
33017: LD_INT 1
33019: DEC
33020: ST_TO_ADDR
33021: LD_VAR 0 11
33025: PUSH
33026: FOR_TO
33027: IFFALSE 33147
// begin for j = 1 to array do
33029: LD_ADDR_VAR 0 7
33033: PUSH
33034: DOUBLE
33035: LD_INT 1
33037: DEC
33038: ST_TO_ADDR
33039: LD_VAR 0 1
33043: PUSH
33044: FOR_TO
33045: IFFALSE 33133
// begin k := j + d ;
33047: LD_ADDR_VAR 0 8
33051: PUSH
33052: LD_VAR 0 7
33056: PUSH
33057: LD_VAR 0 9
33061: PLUS
33062: ST_TO_ADDR
// if k > array then
33063: LD_VAR 0 8
33067: PUSH
33068: LD_VAR 0 1
33072: GREATER
33073: IFFALSE 33083
// k := 1 ;
33075: LD_ADDR_VAR 0 8
33079: PUSH
33080: LD_INT 1
33082: ST_TO_ADDR
// if not k then
33083: LD_VAR 0 8
33087: NOT
33088: IFFALSE 33100
// k := array ;
33090: LD_ADDR_VAR 0 8
33094: PUSH
33095: LD_VAR 0 1
33099: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33100: LD_ADDR_VAR 0 10
33104: PUSH
33105: LD_VAR 0 10
33109: PPUSH
33110: LD_VAR 0 8
33114: PPUSH
33115: LD_VAR 0 1
33119: PUSH
33120: LD_VAR 0 7
33124: ARRAY
33125: PPUSH
33126: CALL_OW 1
33130: ST_TO_ADDR
// end ;
33131: GO 33044
33133: POP
33134: POP
// array := tmp ;
33135: LD_ADDR_VAR 0 1
33139: PUSH
33140: LD_VAR 0 10
33144: ST_TO_ADDR
// end ;
33145: GO 33026
33147: POP
33148: POP
// result := array ;
33149: LD_ADDR_VAR 0 5
33153: PUSH
33154: LD_VAR 0 1
33158: ST_TO_ADDR
// end ;
33159: LD_VAR 0 5
33163: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
// result := 0 ;
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 0
33175: ST_TO_ADDR
// if not array or not value in array then
33176: LD_VAR 0 1
33180: NOT
33181: PUSH
33182: LD_VAR 0 2
33186: PUSH
33187: LD_VAR 0 1
33191: IN
33192: NOT
33193: OR
33194: IFFALSE 33198
// exit ;
33196: GO 33252
// for i = 1 to array do
33198: LD_ADDR_VAR 0 4
33202: PUSH
33203: DOUBLE
33204: LD_INT 1
33206: DEC
33207: ST_TO_ADDR
33208: LD_VAR 0 1
33212: PUSH
33213: FOR_TO
33214: IFFALSE 33250
// if value = array [ i ] then
33216: LD_VAR 0 2
33220: PUSH
33221: LD_VAR 0 1
33225: PUSH
33226: LD_VAR 0 4
33230: ARRAY
33231: EQUAL
33232: IFFALSE 33248
// begin result := i ;
33234: LD_ADDR_VAR 0 3
33238: PUSH
33239: LD_VAR 0 4
33243: ST_TO_ADDR
// exit ;
33244: POP
33245: POP
33246: GO 33252
// end ;
33248: GO 33213
33250: POP
33251: POP
// end ;
33252: LD_VAR 0 3
33256: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33257: LD_INT 0
33259: PPUSH
// vc_chassis := chassis ;
33260: LD_ADDR_OWVAR 37
33264: PUSH
33265: LD_VAR 0 1
33269: ST_TO_ADDR
// vc_engine := engine ;
33270: LD_ADDR_OWVAR 39
33274: PUSH
33275: LD_VAR 0 2
33279: ST_TO_ADDR
// vc_control := control ;
33280: LD_ADDR_OWVAR 38
33284: PUSH
33285: LD_VAR 0 3
33289: ST_TO_ADDR
// vc_weapon := weapon ;
33290: LD_ADDR_OWVAR 40
33294: PUSH
33295: LD_VAR 0 4
33299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33300: LD_ADDR_OWVAR 41
33304: PUSH
33305: LD_VAR 0 5
33309: ST_TO_ADDR
// end ;
33310: LD_VAR 0 6
33314: RET
// export function WantPlant ( unit ) ; var task ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
// result := false ;
33319: LD_ADDR_VAR 0 2
33323: PUSH
33324: LD_INT 0
33326: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 437
33341: ST_TO_ADDR
// if task then
33342: LD_VAR 0 3
33346: IFFALSE 33374
// if task [ 1 ] [ 1 ] = p then
33348: LD_VAR 0 3
33352: PUSH
33353: LD_INT 1
33355: ARRAY
33356: PUSH
33357: LD_INT 1
33359: ARRAY
33360: PUSH
33361: LD_STRING p
33363: EQUAL
33364: IFFALSE 33374
// result := true ;
33366: LD_ADDR_VAR 0 2
33370: PUSH
33371: LD_INT 1
33373: ST_TO_ADDR
// end ;
33374: LD_VAR 0 2
33378: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
// if pos < 1 then
33385: LD_VAR 0 2
33389: PUSH
33390: LD_INT 1
33392: LESS
33393: IFFALSE 33397
// exit ;
33395: GO 33700
// if pos = 1 then
33397: LD_VAR 0 2
33401: PUSH
33402: LD_INT 1
33404: EQUAL
33405: IFFALSE 33438
// result := Replace ( arr , pos [ 1 ] , value ) else
33407: LD_ADDR_VAR 0 4
33411: PUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: LD_VAR 0 2
33421: PUSH
33422: LD_INT 1
33424: ARRAY
33425: PPUSH
33426: LD_VAR 0 3
33430: PPUSH
33431: CALL_OW 1
33435: ST_TO_ADDR
33436: GO 33700
// begin tmp := arr ;
33438: LD_ADDR_VAR 0 6
33442: PUSH
33443: LD_VAR 0 1
33447: ST_TO_ADDR
// s_arr := [ tmp ] ;
33448: LD_ADDR_VAR 0 7
33452: PUSH
33453: LD_VAR 0 6
33457: PUSH
33458: EMPTY
33459: LIST
33460: ST_TO_ADDR
// for i = 1 to pos - 1 do
33461: LD_ADDR_VAR 0 5
33465: PUSH
33466: DOUBLE
33467: LD_INT 1
33469: DEC
33470: ST_TO_ADDR
33471: LD_VAR 0 2
33475: PUSH
33476: LD_INT 1
33478: MINUS
33479: PUSH
33480: FOR_TO
33481: IFFALSE 33526
// begin tmp := tmp [ pos [ i ] ] ;
33483: LD_ADDR_VAR 0 6
33487: PUSH
33488: LD_VAR 0 6
33492: PUSH
33493: LD_VAR 0 2
33497: PUSH
33498: LD_VAR 0 5
33502: ARRAY
33503: ARRAY
33504: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33505: LD_ADDR_VAR 0 7
33509: PUSH
33510: LD_VAR 0 7
33514: PUSH
33515: LD_VAR 0 6
33519: PUSH
33520: EMPTY
33521: LIST
33522: ADD
33523: ST_TO_ADDR
// end ;
33524: GO 33480
33526: POP
33527: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33528: LD_ADDR_VAR 0 6
33532: PUSH
33533: LD_VAR 0 6
33537: PPUSH
33538: LD_VAR 0 2
33542: PUSH
33543: LD_VAR 0 2
33547: ARRAY
33548: PPUSH
33549: LD_VAR 0 3
33553: PPUSH
33554: CALL_OW 1
33558: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33559: LD_ADDR_VAR 0 7
33563: PUSH
33564: LD_VAR 0 7
33568: PPUSH
33569: LD_VAR 0 7
33573: PPUSH
33574: LD_VAR 0 6
33578: PPUSH
33579: CALL_OW 1
33583: ST_TO_ADDR
// for i = s_arr downto 2 do
33584: LD_ADDR_VAR 0 5
33588: PUSH
33589: DOUBLE
33590: LD_VAR 0 7
33594: INC
33595: ST_TO_ADDR
33596: LD_INT 2
33598: PUSH
33599: FOR_DOWNTO
33600: IFFALSE 33684
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33602: LD_ADDR_VAR 0 6
33606: PUSH
33607: LD_VAR 0 7
33611: PUSH
33612: LD_VAR 0 5
33616: PUSH
33617: LD_INT 1
33619: MINUS
33620: ARRAY
33621: PPUSH
33622: LD_VAR 0 2
33626: PUSH
33627: LD_VAR 0 5
33631: PUSH
33632: LD_INT 1
33634: MINUS
33635: ARRAY
33636: PPUSH
33637: LD_VAR 0 7
33641: PUSH
33642: LD_VAR 0 5
33646: ARRAY
33647: PPUSH
33648: CALL_OW 1
33652: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33653: LD_ADDR_VAR 0 7
33657: PUSH
33658: LD_VAR 0 7
33662: PPUSH
33663: LD_VAR 0 5
33667: PUSH
33668: LD_INT 1
33670: MINUS
33671: PPUSH
33672: LD_VAR 0 6
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
// end ;
33682: GO 33599
33684: POP
33685: POP
// result := s_arr [ 1 ] ;
33686: LD_ADDR_VAR 0 4
33690: PUSH
33691: LD_VAR 0 7
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: ST_TO_ADDR
// end ; end ;
33700: LD_VAR 0 4
33704: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33705: LD_INT 0
33707: PPUSH
33708: PPUSH
// if not list then
33709: LD_VAR 0 1
33713: NOT
33714: IFFALSE 33718
// exit ;
33716: GO 33809
// i := list [ pos1 ] ;
33718: LD_ADDR_VAR 0 5
33722: PUSH
33723: LD_VAR 0 1
33727: PUSH
33728: LD_VAR 0 2
33732: ARRAY
33733: ST_TO_ADDR
// if not i then
33734: LD_VAR 0 5
33738: NOT
33739: IFFALSE 33743
// exit ;
33741: GO 33809
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33743: LD_ADDR_VAR 0 1
33747: PUSH
33748: LD_VAR 0 1
33752: PPUSH
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 1
33762: PUSH
33763: LD_VAR 0 3
33767: ARRAY
33768: PPUSH
33769: CALL_OW 1
33773: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33774: LD_ADDR_VAR 0 1
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: LD_VAR 0 3
33788: PPUSH
33789: LD_VAR 0 5
33793: PPUSH
33794: CALL_OW 1
33798: ST_TO_ADDR
// result := list ;
33799: LD_ADDR_VAR 0 4
33803: PUSH
33804: LD_VAR 0 1
33808: ST_TO_ADDR
// end ;
33809: LD_VAR 0 4
33813: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33814: LD_INT 0
33816: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33817: LD_ADDR_VAR 0 5
33821: PUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL_OW 250
33831: PPUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 251
33841: PPUSH
33842: LD_VAR 0 2
33846: PPUSH
33847: LD_VAR 0 3
33851: PPUSH
33852: LD_VAR 0 4
33856: PPUSH
33857: CALL 33867 0 5
33861: ST_TO_ADDR
// end ;
33862: LD_VAR 0 5
33866: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33867: LD_INT 0
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
// if not list then
33873: LD_VAR 0 3
33877: NOT
33878: IFFALSE 33882
// exit ;
33880: GO 34270
// result := [ ] ;
33882: LD_ADDR_VAR 0 6
33886: PUSH
33887: EMPTY
33888: ST_TO_ADDR
// for i in list do
33889: LD_ADDR_VAR 0 7
33893: PUSH
33894: LD_VAR 0 3
33898: PUSH
33899: FOR_IN
33900: IFFALSE 34102
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: LD_VAR 0 7
33911: PPUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 2
33921: PPUSH
33922: CALL_OW 297
33926: ST_TO_ADDR
// if not result then
33927: LD_VAR 0 6
33931: NOT
33932: IFFALSE 33958
// result := [ [ i , tmp ] ] else
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_VAR 0 7
33943: PUSH
33944: LD_VAR 0 9
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: ST_TO_ADDR
33956: GO 34100
// begin if result [ result ] [ 2 ] < tmp then
33958: LD_VAR 0 6
33962: PUSH
33963: LD_VAR 0 6
33967: ARRAY
33968: PUSH
33969: LD_INT 2
33971: ARRAY
33972: PUSH
33973: LD_VAR 0 9
33977: LESS
33978: IFFALSE 34020
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33980: LD_ADDR_VAR 0 6
33984: PUSH
33985: LD_VAR 0 6
33989: PPUSH
33990: LD_VAR 0 6
33994: PUSH
33995: LD_INT 1
33997: PLUS
33998: PPUSH
33999: LD_VAR 0 7
34003: PUSH
34004: LD_VAR 0 9
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PPUSH
34013: CALL_OW 2
34017: ST_TO_ADDR
34018: GO 34100
// for j = 1 to result do
34020: LD_ADDR_VAR 0 8
34024: PUSH
34025: DOUBLE
34026: LD_INT 1
34028: DEC
34029: ST_TO_ADDR
34030: LD_VAR 0 6
34034: PUSH
34035: FOR_TO
34036: IFFALSE 34098
// begin if tmp < result [ j ] [ 2 ] then
34038: LD_VAR 0 9
34042: PUSH
34043: LD_VAR 0 6
34047: PUSH
34048: LD_VAR 0 8
34052: ARRAY
34053: PUSH
34054: LD_INT 2
34056: ARRAY
34057: LESS
34058: IFFALSE 34096
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34060: LD_ADDR_VAR 0 6
34064: PUSH
34065: LD_VAR 0 6
34069: PPUSH
34070: LD_VAR 0 8
34074: PPUSH
34075: LD_VAR 0 7
34079: PUSH
34080: LD_VAR 0 9
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 2
34093: ST_TO_ADDR
// break ;
34094: GO 34098
// end ; end ;
34096: GO 34035
34098: POP
34099: POP
// end ; end ;
34100: GO 33899
34102: POP
34103: POP
// if result and not asc then
34104: LD_VAR 0 6
34108: PUSH
34109: LD_VAR 0 4
34113: NOT
34114: AND
34115: IFFALSE 34190
// begin tmp := result ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_VAR 0 6
34126: ST_TO_ADDR
// for i = tmp downto 1 do
34127: LD_ADDR_VAR 0 7
34131: PUSH
34132: DOUBLE
34133: LD_VAR 0 9
34137: INC
34138: ST_TO_ADDR
34139: LD_INT 1
34141: PUSH
34142: FOR_DOWNTO
34143: IFFALSE 34188
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34145: LD_ADDR_VAR 0 6
34149: PUSH
34150: LD_VAR 0 6
34154: PPUSH
34155: LD_VAR 0 9
34159: PUSH
34160: LD_VAR 0 7
34164: MINUS
34165: PUSH
34166: LD_INT 1
34168: PLUS
34169: PPUSH
34170: LD_VAR 0 9
34174: PUSH
34175: LD_VAR 0 7
34179: ARRAY
34180: PPUSH
34181: CALL_OW 1
34185: ST_TO_ADDR
34186: GO 34142
34188: POP
34189: POP
// end ; tmp := [ ] ;
34190: LD_ADDR_VAR 0 9
34194: PUSH
34195: EMPTY
34196: ST_TO_ADDR
// if mode then
34197: LD_VAR 0 5
34201: IFFALSE 34270
// begin for i = 1 to result do
34203: LD_ADDR_VAR 0 7
34207: PUSH
34208: DOUBLE
34209: LD_INT 1
34211: DEC
34212: ST_TO_ADDR
34213: LD_VAR 0 6
34217: PUSH
34218: FOR_TO
34219: IFFALSE 34258
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34221: LD_ADDR_VAR 0 9
34225: PUSH
34226: LD_VAR 0 9
34230: PPUSH
34231: LD_VAR 0 7
34235: PPUSH
34236: LD_VAR 0 6
34240: PUSH
34241: LD_VAR 0 7
34245: ARRAY
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: PPUSH
34251: CALL_OW 1
34255: ST_TO_ADDR
34256: GO 34218
34258: POP
34259: POP
// result := tmp ;
34260: LD_ADDR_VAR 0 6
34264: PUSH
34265: LD_VAR 0 9
34269: ST_TO_ADDR
// end ; end ;
34270: LD_VAR 0 6
34274: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34275: LD_INT 0
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34283: LD_ADDR_VAR 0 5
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// if not x or not y then
34305: LD_VAR 0 2
34309: NOT
34310: PUSH
34311: LD_VAR 0 3
34315: NOT
34316: OR
34317: IFFALSE 34321
// exit ;
34319: GO 35967
// if not range then
34321: LD_VAR 0 4
34325: NOT
34326: IFFALSE 34336
// range := 10 ;
34328: LD_ADDR_VAR 0 4
34332: PUSH
34333: LD_INT 10
34335: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34336: LD_ADDR_VAR 0 8
34340: PUSH
34341: LD_INT 81
34343: PUSH
34344: LD_VAR 0 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 92
34355: PUSH
34356: LD_VAR 0 2
34360: PUSH
34361: LD_VAR 0 3
34365: PUSH
34366: LD_VAR 0 4
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: LD_INT 21
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: PPUSH
34399: CALL_OW 69
34403: ST_TO_ADDR
// if not tmp then
34404: LD_VAR 0 8
34408: NOT
34409: IFFALSE 34413
// exit ;
34411: GO 35967
// for i in tmp do
34413: LD_ADDR_VAR 0 6
34417: PUSH
34418: LD_VAR 0 8
34422: PUSH
34423: FOR_IN
34424: IFFALSE 35942
// begin points := [ 0 , 0 , 0 ] ;
34426: LD_ADDR_VAR 0 9
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: ST_TO_ADDR
// bpoints := 1 ;
34445: LD_ADDR_VAR 0 10
34449: PUSH
34450: LD_INT 1
34452: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34453: LD_VAR 0 6
34457: PPUSH
34458: CALL_OW 247
34462: PUSH
34463: LD_INT 1
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 35049
34471: POP
// begin if GetClass ( i ) = 1 then
34472: LD_VAR 0 6
34476: PPUSH
34477: CALL_OW 257
34481: PUSH
34482: LD_INT 1
34484: EQUAL
34485: IFFALSE 34506
// points := [ 10 , 5 , 3 ] ;
34487: LD_ADDR_VAR 0 9
34491: PUSH
34492: LD_INT 10
34494: PUSH
34495: LD_INT 5
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34506: LD_VAR 0 6
34510: PPUSH
34511: CALL_OW 257
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: IN
34530: IFFALSE 34551
// points := [ 3 , 2 , 1 ] ;
34532: LD_ADDR_VAR 0 9
34536: PUSH
34537: LD_INT 3
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34551: LD_VAR 0 6
34555: PPUSH
34556: CALL_OW 257
34560: PUSH
34561: LD_INT 5
34563: EQUAL
34564: IFFALSE 34585
// points := [ 130 , 5 , 2 ] ;
34566: LD_ADDR_VAR 0 9
34570: PUSH
34571: LD_INT 130
34573: PUSH
34574: LD_INT 5
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34585: LD_VAR 0 6
34589: PPUSH
34590: CALL_OW 257
34594: PUSH
34595: LD_INT 8
34597: EQUAL
34598: IFFALSE 34619
// points := [ 35 , 35 , 30 ] ;
34600: LD_ADDR_VAR 0 9
34604: PUSH
34605: LD_INT 35
34607: PUSH
34608: LD_INT 35
34610: PUSH
34611: LD_INT 30
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34619: LD_VAR 0 6
34623: PPUSH
34624: CALL_OW 257
34628: PUSH
34629: LD_INT 9
34631: EQUAL
34632: IFFALSE 34653
// points := [ 20 , 55 , 40 ] ;
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: LD_INT 20
34641: PUSH
34642: LD_INT 55
34644: PUSH
34645: LD_INT 40
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34653: LD_VAR 0 6
34657: PPUSH
34658: CALL_OW 257
34662: PUSH
34663: LD_INT 12
34665: PUSH
34666: LD_INT 16
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: IN
34673: IFFALSE 34694
// points := [ 5 , 3 , 2 ] ;
34675: LD_ADDR_VAR 0 9
34679: PUSH
34680: LD_INT 5
34682: PUSH
34683: LD_INT 3
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34694: LD_VAR 0 6
34698: PPUSH
34699: CALL_OW 257
34703: PUSH
34704: LD_INT 17
34706: EQUAL
34707: IFFALSE 34728
// points := [ 100 , 50 , 75 ] ;
34709: LD_ADDR_VAR 0 9
34713: PUSH
34714: LD_INT 100
34716: PUSH
34717: LD_INT 50
34719: PUSH
34720: LD_INT 75
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34728: LD_VAR 0 6
34732: PPUSH
34733: CALL_OW 257
34737: PUSH
34738: LD_INT 15
34740: EQUAL
34741: IFFALSE 34762
// points := [ 10 , 5 , 3 ] ;
34743: LD_ADDR_VAR 0 9
34747: PUSH
34748: LD_INT 10
34750: PUSH
34751: LD_INT 5
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34762: LD_VAR 0 6
34766: PPUSH
34767: CALL_OW 257
34771: PUSH
34772: LD_INT 14
34774: EQUAL
34775: IFFALSE 34796
// points := [ 10 , 0 , 0 ] ;
34777: LD_ADDR_VAR 0 9
34781: PUSH
34782: LD_INT 10
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34796: LD_VAR 0 6
34800: PPUSH
34801: CALL_OW 257
34805: PUSH
34806: LD_INT 11
34808: EQUAL
34809: IFFALSE 34830
// points := [ 30 , 10 , 5 ] ;
34811: LD_ADDR_VAR 0 9
34815: PUSH
34816: LD_INT 30
34818: PUSH
34819: LD_INT 10
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34830: LD_VAR 0 1
34834: PPUSH
34835: LD_INT 5
34837: PPUSH
34838: CALL_OW 321
34842: PUSH
34843: LD_INT 2
34845: EQUAL
34846: IFFALSE 34863
// bpoints := bpoints * 1.8 ;
34848: LD_ADDR_VAR 0 10
34852: PUSH
34853: LD_VAR 0 10
34857: PUSH
34858: LD_REAL  1.80000000000000E+0000
34861: MUL
34862: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34863: LD_VAR 0 6
34867: PPUSH
34868: CALL_OW 257
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: IN
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: LD_INT 51
34899: PPUSH
34900: CALL_OW 321
34904: PUSH
34905: LD_INT 2
34907: EQUAL
34908: AND
34909: IFFALSE 34926
// bpoints := bpoints * 1.2 ;
34911: LD_ADDR_VAR 0 10
34915: PUSH
34916: LD_VAR 0 10
34920: PUSH
34921: LD_REAL  1.20000000000000E+0000
34924: MUL
34925: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34926: LD_VAR 0 6
34930: PPUSH
34931: CALL_OW 257
34935: PUSH
34936: LD_INT 5
34938: PUSH
34939: LD_INT 7
34941: PUSH
34942: LD_INT 9
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: IN
34950: PUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: LD_INT 52
34958: PPUSH
34959: CALL_OW 321
34963: PUSH
34964: LD_INT 2
34966: EQUAL
34967: AND
34968: IFFALSE 34985
// bpoints := bpoints * 1.5 ;
34970: LD_ADDR_VAR 0 10
34974: PUSH
34975: LD_VAR 0 10
34979: PUSH
34980: LD_REAL  1.50000000000000E+0000
34983: MUL
34984: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34985: LD_VAR 0 1
34989: PPUSH
34990: LD_INT 66
34992: PPUSH
34993: CALL_OW 321
34997: PUSH
34998: LD_INT 2
35000: EQUAL
35001: IFFALSE 35018
// bpoints := bpoints * 1.1 ;
35003: LD_ADDR_VAR 0 10
35007: PUSH
35008: LD_VAR 0 10
35012: PUSH
35013: LD_REAL  1.10000000000000E+0000
35016: MUL
35017: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35018: LD_ADDR_VAR 0 10
35022: PUSH
35023: LD_VAR 0 10
35027: PUSH
35028: LD_VAR 0 6
35032: PPUSH
35033: LD_INT 1
35035: PPUSH
35036: CALL_OW 259
35040: PUSH
35041: LD_REAL  1.15000000000000E+0000
35044: MUL
35045: MUL
35046: ST_TO_ADDR
// end ; unit_vehicle :
35047: GO 35871
35049: LD_INT 2
35051: DOUBLE
35052: EQUAL
35053: IFTRUE 35057
35055: GO 35859
35057: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35058: LD_VAR 0 6
35062: PPUSH
35063: CALL_OW 264
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 42
35073: PUSH
35074: LD_INT 24
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: IN
35082: IFFALSE 35103
// points := [ 25 , 5 , 3 ] ;
35084: LD_ADDR_VAR 0 9
35088: PUSH
35089: LD_INT 25
35091: PUSH
35092: LD_INT 5
35094: PUSH
35095: LD_INT 3
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35103: LD_VAR 0 6
35107: PPUSH
35108: CALL_OW 264
35112: PUSH
35113: LD_INT 4
35115: PUSH
35116: LD_INT 43
35118: PUSH
35119: LD_INT 25
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: IN
35127: IFFALSE 35148
// points := [ 40 , 15 , 5 ] ;
35129: LD_ADDR_VAR 0 9
35133: PUSH
35134: LD_INT 40
35136: PUSH
35137: LD_INT 15
35139: PUSH
35140: LD_INT 5
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35148: LD_VAR 0 6
35152: PPUSH
35153: CALL_OW 264
35157: PUSH
35158: LD_INT 3
35160: PUSH
35161: LD_INT 23
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: IN
35168: IFFALSE 35189
// points := [ 7 , 25 , 8 ] ;
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_INT 7
35177: PUSH
35178: LD_INT 25
35180: PUSH
35181: LD_INT 8
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35189: LD_VAR 0 6
35193: PPUSH
35194: CALL_OW 264
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 27
35204: PUSH
35205: LD_INT 44
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: IN
35213: IFFALSE 35234
// points := [ 14 , 50 , 16 ] ;
35215: LD_ADDR_VAR 0 9
35219: PUSH
35220: LD_INT 14
35222: PUSH
35223: LD_INT 50
35225: PUSH
35226: LD_INT 16
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35234: LD_VAR 0 6
35238: PPUSH
35239: CALL_OW 264
35243: PUSH
35244: LD_INT 6
35246: PUSH
35247: LD_INT 46
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: IN
35254: IFFALSE 35275
// points := [ 32 , 120 , 70 ] ;
35256: LD_ADDR_VAR 0 9
35260: PUSH
35261: LD_INT 32
35263: PUSH
35264: LD_INT 120
35266: PUSH
35267: LD_INT 70
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35275: LD_VAR 0 6
35279: PPUSH
35280: CALL_OW 264
35284: PUSH
35285: LD_INT 7
35287: PUSH
35288: LD_INT 28
35290: PUSH
35291: LD_INT 45
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: IN
35299: IFFALSE 35320
// points := [ 35 , 20 , 45 ] ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_INT 35
35308: PUSH
35309: LD_INT 20
35311: PUSH
35312: LD_INT 45
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 264
35329: PUSH
35330: LD_INT 47
35332: PUSH
35333: EMPTY
35334: LIST
35335: IN
35336: IFFALSE 35357
// points := [ 67 , 45 , 75 ] ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 67
35345: PUSH
35346: LD_INT 45
35348: PUSH
35349: LD_INT 75
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 264
35366: PUSH
35367: LD_INT 26
35369: PUSH
35370: EMPTY
35371: LIST
35372: IN
35373: IFFALSE 35394
// points := [ 120 , 30 , 80 ] ;
35375: LD_ADDR_VAR 0 9
35379: PUSH
35380: LD_INT 120
35382: PUSH
35383: LD_INT 30
35385: PUSH
35386: LD_INT 80
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35394: LD_VAR 0 6
35398: PPUSH
35399: CALL_OW 264
35403: PUSH
35404: LD_INT 22
35406: PUSH
35407: EMPTY
35408: LIST
35409: IN
35410: IFFALSE 35431
// points := [ 40 , 1 , 1 ] ;
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: LD_INT 40
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35431: LD_VAR 0 6
35435: PPUSH
35436: CALL_OW 264
35440: PUSH
35441: LD_INT 29
35443: PUSH
35444: EMPTY
35445: LIST
35446: IN
35447: IFFALSE 35468
// points := [ 70 , 200 , 400 ] ;
35449: LD_ADDR_VAR 0 9
35453: PUSH
35454: LD_INT 70
35456: PUSH
35457: LD_INT 200
35459: PUSH
35460: LD_INT 400
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35468: LD_VAR 0 6
35472: PPUSH
35473: CALL_OW 264
35477: PUSH
35478: LD_INT 14
35480: PUSH
35481: LD_INT 53
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: IN
35488: IFFALSE 35509
// points := [ 40 , 10 , 20 ] ;
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_INT 40
35497: PUSH
35498: LD_INT 10
35500: PUSH
35501: LD_INT 20
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35509: LD_VAR 0 6
35513: PPUSH
35514: CALL_OW 264
35518: PUSH
35519: LD_INT 9
35521: PUSH
35522: EMPTY
35523: LIST
35524: IN
35525: IFFALSE 35546
// points := [ 5 , 70 , 20 ] ;
35527: LD_ADDR_VAR 0 9
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: LD_INT 70
35537: PUSH
35538: LD_INT 20
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35546: LD_VAR 0 6
35550: PPUSH
35551: CALL_OW 264
35555: PUSH
35556: LD_INT 10
35558: PUSH
35559: EMPTY
35560: LIST
35561: IN
35562: IFFALSE 35583
// points := [ 35 , 110 , 70 ] ;
35564: LD_ADDR_VAR 0 9
35568: PUSH
35569: LD_INT 35
35571: PUSH
35572: LD_INT 110
35574: PUSH
35575: LD_INT 70
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35583: LD_VAR 0 6
35587: PPUSH
35588: CALL_OW 265
35592: PUSH
35593: LD_INT 25
35595: EQUAL
35596: IFFALSE 35617
// points := [ 80 , 65 , 100 ] ;
35598: LD_ADDR_VAR 0 9
35602: PUSH
35603: LD_INT 80
35605: PUSH
35606: LD_INT 65
35608: PUSH
35609: LD_INT 100
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35617: LD_VAR 0 6
35621: PPUSH
35622: CALL_OW 263
35626: PUSH
35627: LD_INT 1
35629: EQUAL
35630: IFFALSE 35665
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35632: LD_ADDR_VAR 0 10
35636: PUSH
35637: LD_VAR 0 10
35641: PUSH
35642: LD_VAR 0 6
35646: PPUSH
35647: CALL_OW 311
35651: PPUSH
35652: LD_INT 3
35654: PPUSH
35655: CALL_OW 259
35659: PUSH
35660: LD_INT 4
35662: MUL
35663: MUL
35664: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35665: LD_VAR 0 6
35669: PPUSH
35670: CALL_OW 263
35674: PUSH
35675: LD_INT 2
35677: EQUAL
35678: IFFALSE 35729
// begin j := IsControledBy ( i ) ;
35680: LD_ADDR_VAR 0 7
35684: PUSH
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 312
35694: ST_TO_ADDR
// if j then
35695: LD_VAR 0 7
35699: IFFALSE 35729
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35701: LD_ADDR_VAR 0 10
35705: PUSH
35706: LD_VAR 0 10
35710: PUSH
35711: LD_VAR 0 7
35715: PPUSH
35716: LD_INT 3
35718: PPUSH
35719: CALL_OW 259
35723: PUSH
35724: LD_INT 3
35726: MUL
35727: MUL
35728: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35729: LD_VAR 0 6
35733: PPUSH
35734: CALL_OW 264
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: LD_INT 6
35744: PUSH
35745: LD_INT 46
35747: PUSH
35748: LD_INT 44
35750: PUSH
35751: LD_INT 47
35753: PUSH
35754: LD_INT 45
35756: PUSH
35757: LD_INT 28
35759: PUSH
35760: LD_INT 7
35762: PUSH
35763: LD_INT 27
35765: PUSH
35766: LD_INT 29
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: IN
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: LD_INT 52
35789: PPUSH
35790: CALL_OW 321
35794: PUSH
35795: LD_INT 2
35797: EQUAL
35798: AND
35799: IFFALSE 35816
// bpoints := bpoints * 1.2 ;
35801: LD_ADDR_VAR 0 10
35805: PUSH
35806: LD_VAR 0 10
35810: PUSH
35811: LD_REAL  1.20000000000000E+0000
35814: MUL
35815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35816: LD_VAR 0 6
35820: PPUSH
35821: CALL_OW 264
35825: PUSH
35826: LD_INT 6
35828: PUSH
35829: LD_INT 46
35831: PUSH
35832: LD_INT 47
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: IN
35840: IFFALSE 35857
// bpoints := bpoints * 1.2 ;
35842: LD_ADDR_VAR 0 10
35846: PUSH
35847: LD_VAR 0 10
35851: PUSH
35852: LD_REAL  1.20000000000000E+0000
35855: MUL
35856: ST_TO_ADDR
// end ; unit_building :
35857: GO 35871
35859: LD_INT 3
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35867
35865: GO 35870
35867: POP
// ; end ;
35868: GO 35871
35870: POP
// for j = 1 to 3 do
35871: LD_ADDR_VAR 0 7
35875: PUSH
35876: DOUBLE
35877: LD_INT 1
35879: DEC
35880: ST_TO_ADDR
35881: LD_INT 3
35883: PUSH
35884: FOR_TO
35885: IFFALSE 35938
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35887: LD_ADDR_VAR 0 5
35891: PUSH
35892: LD_VAR 0 5
35896: PPUSH
35897: LD_VAR 0 7
35901: PPUSH
35902: LD_VAR 0 5
35906: PUSH
35907: LD_VAR 0 7
35911: ARRAY
35912: PUSH
35913: LD_VAR 0 9
35917: PUSH
35918: LD_VAR 0 7
35922: ARRAY
35923: PUSH
35924: LD_VAR 0 10
35928: MUL
35929: PLUS
35930: PPUSH
35931: CALL_OW 1
35935: ST_TO_ADDR
35936: GO 35884
35938: POP
35939: POP
// end ;
35940: GO 34423
35942: POP
35943: POP
// result := Replace ( result , 4 , tmp ) ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 5
35953: PPUSH
35954: LD_INT 4
35956: PPUSH
35957: LD_VAR 0 8
35961: PPUSH
35962: CALL_OW 1
35966: ST_TO_ADDR
// end ;
35967: LD_VAR 0 5
35971: RET
// export function DangerAtRange ( unit , range ) ; begin
35972: LD_INT 0
35974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35975: LD_ADDR_VAR 0 3
35979: PUSH
35980: LD_VAR 0 1
35984: PPUSH
35985: CALL_OW 255
35989: PPUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 250
35999: PPUSH
36000: LD_VAR 0 1
36004: PPUSH
36005: CALL_OW 251
36009: PPUSH
36010: LD_VAR 0 2
36014: PPUSH
36015: CALL 34275 0 4
36019: ST_TO_ADDR
// end ;
36020: LD_VAR 0 3
36024: RET
// export function DangerInArea ( side , area ) ; begin
36025: LD_INT 0
36027: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36028: LD_ADDR_VAR 0 3
36032: PUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_INT 81
36040: PUSH
36041: LD_VAR 0 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PPUSH
36050: CALL_OW 70
36054: ST_TO_ADDR
// end ;
36055: LD_VAR 0 3
36059: RET
// export function IsExtension ( b ) ; begin
36060: LD_INT 0
36062: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36063: LD_ADDR_VAR 0 2
36067: PUSH
36068: LD_VAR 0 1
36072: PUSH
36073: LD_INT 23
36075: PUSH
36076: LD_INT 20
36078: PUSH
36079: LD_INT 22
36081: PUSH
36082: LD_INT 17
36084: PUSH
36085: LD_INT 24
36087: PUSH
36088: LD_INT 21
36090: PUSH
36091: LD_INT 19
36093: PUSH
36094: LD_INT 16
36096: PUSH
36097: LD_INT 25
36099: PUSH
36100: LD_INT 18
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: IN
36115: ST_TO_ADDR
// end ;
36116: LD_VAR 0 2
36120: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36121: LD_INT 0
36123: PPUSH
36124: PPUSH
36125: PPUSH
// result := [ ] ;
36126: LD_ADDR_VAR 0 4
36130: PUSH
36131: EMPTY
36132: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36133: LD_ADDR_VAR 0 5
36137: PUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: LD_INT 21
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PPUSH
36153: CALL_OW 70
36157: ST_TO_ADDR
// if not tmp then
36158: LD_VAR 0 5
36162: NOT
36163: IFFALSE 36167
// exit ;
36165: GO 36231
// if checkLink then
36167: LD_VAR 0 3
36171: IFFALSE 36221
// begin for i in tmp do
36173: LD_ADDR_VAR 0 6
36177: PUSH
36178: LD_VAR 0 5
36182: PUSH
36183: FOR_IN
36184: IFFALSE 36219
// if GetBase ( i ) <> base then
36186: LD_VAR 0 6
36190: PPUSH
36191: CALL_OW 274
36195: PUSH
36196: LD_VAR 0 1
36200: NONEQUAL
36201: IFFALSE 36217
// ComLinkToBase ( base , i ) ;
36203: LD_VAR 0 1
36207: PPUSH
36208: LD_VAR 0 6
36212: PPUSH
36213: CALL_OW 169
36217: GO 36183
36219: POP
36220: POP
// end ; result := tmp ;
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: LD_VAR 0 5
36230: ST_TO_ADDR
// end ;
36231: LD_VAR 0 4
36235: RET
// export function ComComplete ( units , b ) ; var i ; begin
36236: LD_INT 0
36238: PPUSH
36239: PPUSH
// if not units then
36240: LD_VAR 0 1
36244: NOT
36245: IFFALSE 36249
// exit ;
36247: GO 36339
// for i in units do
36249: LD_ADDR_VAR 0 4
36253: PUSH
36254: LD_VAR 0 1
36258: PUSH
36259: FOR_IN
36260: IFFALSE 36337
// if BuildingStatus ( b ) = bs_build then
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL_OW 461
36271: PUSH
36272: LD_INT 1
36274: EQUAL
36275: IFFALSE 36335
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36277: LD_VAR 0 4
36281: PPUSH
36282: LD_STRING h
36284: PUSH
36285: LD_VAR 0 2
36289: PPUSH
36290: CALL_OW 250
36294: PUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: CALL_OW 251
36304: PUSH
36305: LD_VAR 0 2
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: PPUSH
36331: CALL_OW 446
36335: GO 36259
36337: POP
36338: POP
// end ;
36339: LD_VAR 0 3
36343: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36352: LD_VAR 0 1
36356: NOT
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL_OW 263
36367: PUSH
36368: LD_INT 2
36370: EQUAL
36371: NOT
36372: OR
36373: IFFALSE 36377
// exit ;
36375: GO 36693
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36377: LD_ADDR_VAR 0 6
36381: PUSH
36382: LD_INT 22
36384: PUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 255
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 30
36404: PUSH
36405: LD_INT 36
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 34
36414: PUSH
36415: LD_INT 31
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PPUSH
36431: CALL_OW 69
36435: ST_TO_ADDR
// if not tmp then
36436: LD_VAR 0 6
36440: NOT
36441: IFFALSE 36445
// exit ;
36443: GO 36693
// result := [ ] ;
36445: LD_ADDR_VAR 0 2
36449: PUSH
36450: EMPTY
36451: ST_TO_ADDR
// for i in tmp do
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_VAR 0 6
36461: PUSH
36462: FOR_IN
36463: IFFALSE 36534
// begin t := UnitsInside ( i ) ;
36465: LD_ADDR_VAR 0 4
36469: PUSH
36470: LD_VAR 0 3
36474: PPUSH
36475: CALL_OW 313
36479: ST_TO_ADDR
// if t then
36480: LD_VAR 0 4
36484: IFFALSE 36532
// for j in t do
36486: LD_ADDR_VAR 0 7
36490: PUSH
36491: LD_VAR 0 4
36495: PUSH
36496: FOR_IN
36497: IFFALSE 36530
// result := Insert ( result , result + 1 , j ) ;
36499: LD_ADDR_VAR 0 2
36503: PUSH
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 2
36513: PUSH
36514: LD_INT 1
36516: PLUS
36517: PPUSH
36518: LD_VAR 0 7
36522: PPUSH
36523: CALL_OW 2
36527: ST_TO_ADDR
36528: GO 36496
36530: POP
36531: POP
// end ;
36532: GO 36462
36534: POP
36535: POP
// if not result then
36536: LD_VAR 0 2
36540: NOT
36541: IFFALSE 36545
// exit ;
36543: GO 36693
// mech := result [ 1 ] ;
36545: LD_ADDR_VAR 0 5
36549: PUSH
36550: LD_VAR 0 2
36554: PUSH
36555: LD_INT 1
36557: ARRAY
36558: ST_TO_ADDR
// if result > 1 then
36559: LD_VAR 0 2
36563: PUSH
36564: LD_INT 1
36566: GREATER
36567: IFFALSE 36679
// for i = 2 to result do
36569: LD_ADDR_VAR 0 3
36573: PUSH
36574: DOUBLE
36575: LD_INT 2
36577: DEC
36578: ST_TO_ADDR
36579: LD_VAR 0 2
36583: PUSH
36584: FOR_TO
36585: IFFALSE 36677
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36587: LD_ADDR_VAR 0 4
36591: PUSH
36592: LD_VAR 0 2
36596: PUSH
36597: LD_VAR 0 3
36601: ARRAY
36602: PPUSH
36603: LD_INT 3
36605: PPUSH
36606: CALL_OW 259
36610: PUSH
36611: LD_VAR 0 2
36615: PUSH
36616: LD_VAR 0 3
36620: ARRAY
36621: PPUSH
36622: CALL_OW 432
36626: MINUS
36627: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36628: LD_VAR 0 4
36632: PUSH
36633: LD_VAR 0 5
36637: PPUSH
36638: LD_INT 3
36640: PPUSH
36641: CALL_OW 259
36645: PUSH
36646: LD_VAR 0 5
36650: PPUSH
36651: CALL_OW 432
36655: MINUS
36656: GREATEREQUAL
36657: IFFALSE 36675
// mech := result [ i ] ;
36659: LD_ADDR_VAR 0 5
36663: PUSH
36664: LD_VAR 0 2
36668: PUSH
36669: LD_VAR 0 3
36673: ARRAY
36674: ST_TO_ADDR
// end ;
36675: GO 36584
36677: POP
36678: POP
// ComLinkTo ( vehicle , mech ) ;
36679: LD_VAR 0 1
36683: PPUSH
36684: LD_VAR 0 5
36688: PPUSH
36689: CALL_OW 135
// end ;
36693: LD_VAR 0 2
36697: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36698: LD_INT 0
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
// result := [ ] ;
36713: LD_ADDR_VAR 0 7
36717: PUSH
36718: EMPTY
36719: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 266
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: IN
36740: NOT
36741: IFFALSE 36745
// exit ;
36743: GO 38379
// if name then
36745: LD_VAR 0 3
36749: IFFALSE 36765
// SetBName ( base_dep , name ) ;
36751: LD_VAR 0 1
36755: PPUSH
36756: LD_VAR 0 3
36760: PPUSH
36761: CALL_OW 500
// base := GetBase ( base_dep ) ;
36765: LD_ADDR_VAR 0 15
36769: PUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 274
36779: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36780: LD_ADDR_VAR 0 16
36784: PUSH
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 255
36794: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36795: LD_ADDR_VAR 0 17
36799: PUSH
36800: LD_VAR 0 1
36804: PPUSH
36805: CALL_OW 248
36809: ST_TO_ADDR
// if sources then
36810: LD_VAR 0 5
36814: IFFALSE 36861
// for i = 1 to 3 do
36816: LD_ADDR_VAR 0 8
36820: PUSH
36821: DOUBLE
36822: LD_INT 1
36824: DEC
36825: ST_TO_ADDR
36826: LD_INT 3
36828: PUSH
36829: FOR_TO
36830: IFFALSE 36859
// AddResourceType ( base , i , sources [ i ] ) ;
36832: LD_VAR 0 15
36836: PPUSH
36837: LD_VAR 0 8
36841: PPUSH
36842: LD_VAR 0 5
36846: PUSH
36847: LD_VAR 0 8
36851: ARRAY
36852: PPUSH
36853: CALL_OW 276
36857: GO 36829
36859: POP
36860: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36861: LD_ADDR_VAR 0 18
36865: PUSH
36866: LD_VAR 0 15
36870: PPUSH
36871: LD_VAR 0 2
36875: PPUSH
36876: LD_INT 1
36878: PPUSH
36879: CALL 36121 0 3
36883: ST_TO_ADDR
// InitHc ;
36884: CALL_OW 19
// InitUc ;
36888: CALL_OW 18
// uc_side := side ;
36892: LD_ADDR_OWVAR 20
36896: PUSH
36897: LD_VAR 0 16
36901: ST_TO_ADDR
// uc_nation := nation ;
36902: LD_ADDR_OWVAR 21
36906: PUSH
36907: LD_VAR 0 17
36911: ST_TO_ADDR
// if buildings then
36912: LD_VAR 0 18
36916: IFFALSE 38238
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36918: LD_ADDR_VAR 0 19
36922: PUSH
36923: LD_VAR 0 18
36927: PPUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 30
36933: PUSH
36934: LD_INT 29
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 30
36943: PUSH
36944: LD_INT 30
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PPUSH
36956: CALL_OW 72
36960: ST_TO_ADDR
// if tmp then
36961: LD_VAR 0 19
36965: IFFALSE 37013
// for i in tmp do
36967: LD_ADDR_VAR 0 8
36971: PUSH
36972: LD_VAR 0 19
36976: PUSH
36977: FOR_IN
36978: IFFALSE 37011
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36980: LD_VAR 0 8
36984: PPUSH
36985: CALL_OW 250
36989: PPUSH
36990: LD_VAR 0 8
36994: PPUSH
36995: CALL_OW 251
36999: PPUSH
37000: LD_VAR 0 16
37004: PPUSH
37005: CALL_OW 441
37009: GO 36977
37011: POP
37012: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37013: LD_VAR 0 18
37017: PPUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 30
37023: PUSH
37024: LD_INT 32
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 30
37033: PUSH
37034: LD_INT 33
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: PPUSH
37046: CALL_OW 72
37050: IFFALSE 37138
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37052: LD_ADDR_VAR 0 8
37056: PUSH
37057: LD_VAR 0 18
37061: PPUSH
37062: LD_INT 2
37064: PUSH
37065: LD_INT 30
37067: PUSH
37068: LD_INT 32
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 30
37077: PUSH
37078: LD_INT 33
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: PPUSH
37090: CALL_OW 72
37094: PUSH
37095: FOR_IN
37096: IFFALSE 37136
// begin if not GetBWeapon ( i ) then
37098: LD_VAR 0 8
37102: PPUSH
37103: CALL_OW 269
37107: NOT
37108: IFFALSE 37134
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37110: LD_VAR 0 8
37114: PPUSH
37115: LD_VAR 0 8
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: CALL 38384 0 2
37129: PPUSH
37130: CALL_OW 431
// end ;
37134: GO 37095
37136: POP
37137: POP
// end ; for i = 1 to personel do
37138: LD_ADDR_VAR 0 8
37142: PUSH
37143: DOUBLE
37144: LD_INT 1
37146: DEC
37147: ST_TO_ADDR
37148: LD_VAR 0 6
37152: PUSH
37153: FOR_TO
37154: IFFALSE 38218
// begin if i > 4 then
37156: LD_VAR 0 8
37160: PUSH
37161: LD_INT 4
37163: GREATER
37164: IFFALSE 37168
// break ;
37166: GO 38218
// case i of 1 :
37168: LD_VAR 0 8
37172: PUSH
37173: LD_INT 1
37175: DOUBLE
37176: EQUAL
37177: IFTRUE 37181
37179: GO 37261
37181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37182: LD_ADDR_VAR 0 12
37186: PUSH
37187: LD_VAR 0 18
37191: PPUSH
37192: LD_INT 22
37194: PUSH
37195: LD_VAR 0 16
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 58
37206: PUSH
37207: EMPTY
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 32
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: LD_INT 4
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 30
37235: PUSH
37236: LD_INT 5
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: PPUSH
37254: CALL_OW 72
37258: ST_TO_ADDR
37259: GO 37483
37261: LD_INT 2
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37331
37269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37270: LD_ADDR_VAR 0 12
37274: PUSH
37275: LD_VAR 0 18
37279: PPUSH
37280: LD_INT 22
37282: PUSH
37283: LD_VAR 0 16
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 30
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 30
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL_OW 72
37328: ST_TO_ADDR
37329: GO 37483
37331: LD_INT 3
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37401
37339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37340: LD_ADDR_VAR 0 12
37344: PUSH
37345: LD_VAR 0 18
37349: PPUSH
37350: LD_INT 22
37352: PUSH
37353: LD_VAR 0 16
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 30
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 30
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PPUSH
37394: CALL_OW 72
37398: ST_TO_ADDR
37399: GO 37483
37401: LD_INT 4
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37409
37407: GO 37482
37409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37410: LD_ADDR_VAR 0 12
37414: PUSH
37415: LD_VAR 0 18
37419: PPUSH
37420: LD_INT 22
37422: PUSH
37423: LD_VAR 0 16
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: LD_INT 30
37437: PUSH
37438: LD_INT 6
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 30
37447: PUSH
37448: LD_INT 7
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 30
37457: PUSH
37458: LD_INT 8
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 72
37479: ST_TO_ADDR
37480: GO 37483
37482: POP
// if i = 1 then
37483: LD_VAR 0 8
37487: PUSH
37488: LD_INT 1
37490: EQUAL
37491: IFFALSE 37602
// begin tmp := [ ] ;
37493: LD_ADDR_VAR 0 19
37497: PUSH
37498: EMPTY
37499: ST_TO_ADDR
// for j in f do
37500: LD_ADDR_VAR 0 9
37504: PUSH
37505: LD_VAR 0 12
37509: PUSH
37510: FOR_IN
37511: IFFALSE 37584
// if GetBType ( j ) = b_bunker then
37513: LD_VAR 0 9
37517: PPUSH
37518: CALL_OW 266
37522: PUSH
37523: LD_INT 32
37525: EQUAL
37526: IFFALSE 37553
// tmp := Insert ( tmp , 1 , j ) else
37528: LD_ADDR_VAR 0 19
37532: PUSH
37533: LD_VAR 0 19
37537: PPUSH
37538: LD_INT 1
37540: PPUSH
37541: LD_VAR 0 9
37545: PPUSH
37546: CALL_OW 2
37550: ST_TO_ADDR
37551: GO 37582
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37553: LD_ADDR_VAR 0 19
37557: PUSH
37558: LD_VAR 0 19
37562: PPUSH
37563: LD_VAR 0 19
37567: PUSH
37568: LD_INT 1
37570: PLUS
37571: PPUSH
37572: LD_VAR 0 9
37576: PPUSH
37577: CALL_OW 2
37581: ST_TO_ADDR
37582: GO 37510
37584: POP
37585: POP
// if tmp then
37586: LD_VAR 0 19
37590: IFFALSE 37602
// f := tmp ;
37592: LD_ADDR_VAR 0 12
37596: PUSH
37597: LD_VAR 0 19
37601: ST_TO_ADDR
// end ; x := personel [ i ] ;
37602: LD_ADDR_VAR 0 13
37606: PUSH
37607: LD_VAR 0 6
37611: PUSH
37612: LD_VAR 0 8
37616: ARRAY
37617: ST_TO_ADDR
// if x = - 1 then
37618: LD_VAR 0 13
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: EQUAL
37627: IFFALSE 37836
// begin for j in f do
37629: LD_ADDR_VAR 0 9
37633: PUSH
37634: LD_VAR 0 12
37638: PUSH
37639: FOR_IN
37640: IFFALSE 37832
// repeat InitHc ;
37642: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37646: LD_VAR 0 9
37650: PPUSH
37651: CALL_OW 266
37655: PUSH
37656: LD_INT 5
37658: EQUAL
37659: IFFALSE 37729
// begin if UnitsInside ( j ) < 3 then
37661: LD_VAR 0 9
37665: PPUSH
37666: CALL_OW 313
37670: PUSH
37671: LD_INT 3
37673: LESS
37674: IFFALSE 37710
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37676: LD_INT 0
37678: PPUSH
37679: LD_INT 5
37681: PUSH
37682: LD_INT 8
37684: PUSH
37685: LD_INT 9
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: PUSH
37693: LD_VAR 0 17
37697: ARRAY
37698: PPUSH
37699: LD_VAR 0 4
37703: PPUSH
37704: CALL_OW 380
37708: GO 37727
// PrepareHuman ( false , i , skill ) ;
37710: LD_INT 0
37712: PPUSH
37713: LD_VAR 0 8
37717: PPUSH
37718: LD_VAR 0 4
37722: PPUSH
37723: CALL_OW 380
// end else
37727: GO 37746
// PrepareHuman ( false , i , skill ) ;
37729: LD_INT 0
37731: PPUSH
37732: LD_VAR 0 8
37736: PPUSH
37737: LD_VAR 0 4
37741: PPUSH
37742: CALL_OW 380
// un := CreateHuman ;
37746: LD_ADDR_VAR 0 14
37750: PUSH
37751: CALL_OW 44
37755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37756: LD_ADDR_VAR 0 7
37760: PUSH
37761: LD_VAR 0 7
37765: PPUSH
37766: LD_INT 1
37768: PPUSH
37769: LD_VAR 0 14
37773: PPUSH
37774: CALL_OW 2
37778: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37779: LD_VAR 0 14
37783: PPUSH
37784: LD_VAR 0 9
37788: PPUSH
37789: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37793: LD_VAR 0 9
37797: PPUSH
37798: CALL_OW 313
37802: PUSH
37803: LD_INT 6
37805: EQUAL
37806: PUSH
37807: LD_VAR 0 9
37811: PPUSH
37812: CALL_OW 266
37816: PUSH
37817: LD_INT 32
37819: PUSH
37820: LD_INT 31
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: IN
37827: OR
37828: IFFALSE 37642
37830: GO 37639
37832: POP
37833: POP
// end else
37834: GO 38216
// for j = 1 to x do
37836: LD_ADDR_VAR 0 9
37840: PUSH
37841: DOUBLE
37842: LD_INT 1
37844: DEC
37845: ST_TO_ADDR
37846: LD_VAR 0 13
37850: PUSH
37851: FOR_TO
37852: IFFALSE 38214
// begin InitHc ;
37854: CALL_OW 19
// if not f then
37858: LD_VAR 0 12
37862: NOT
37863: IFFALSE 37952
// begin PrepareHuman ( false , i , skill ) ;
37865: LD_INT 0
37867: PPUSH
37868: LD_VAR 0 8
37872: PPUSH
37873: LD_VAR 0 4
37877: PPUSH
37878: CALL_OW 380
// un := CreateHuman ;
37882: LD_ADDR_VAR 0 14
37886: PUSH
37887: CALL_OW 44
37891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37892: LD_ADDR_VAR 0 7
37896: PUSH
37897: LD_VAR 0 7
37901: PPUSH
37902: LD_INT 1
37904: PPUSH
37905: LD_VAR 0 14
37909: PPUSH
37910: CALL_OW 2
37914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37915: LD_VAR 0 14
37919: PPUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 250
37929: PPUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: CALL_OW 251
37939: PPUSH
37940: LD_INT 10
37942: PPUSH
37943: LD_INT 0
37945: PPUSH
37946: CALL_OW 50
// continue ;
37950: GO 37851
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37952: LD_VAR 0 12
37956: PUSH
37957: LD_INT 1
37959: ARRAY
37960: PPUSH
37961: CALL_OW 313
37965: PUSH
37966: LD_VAR 0 12
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PPUSH
37975: CALL_OW 266
37979: PUSH
37980: LD_INT 32
37982: PUSH
37983: LD_INT 31
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: IN
37990: AND
37991: PUSH
37992: LD_VAR 0 12
37996: PUSH
37997: LD_INT 1
37999: ARRAY
38000: PPUSH
38001: CALL_OW 313
38005: PUSH
38006: LD_INT 6
38008: EQUAL
38009: OR
38010: IFFALSE 38030
// f := Delete ( f , 1 ) ;
38012: LD_ADDR_VAR 0 12
38016: PUSH
38017: LD_VAR 0 12
38021: PPUSH
38022: LD_INT 1
38024: PPUSH
38025: CALL_OW 3
38029: ST_TO_ADDR
// if not f then
38030: LD_VAR 0 12
38034: NOT
38035: IFFALSE 38053
// begin x := x + 2 ;
38037: LD_ADDR_VAR 0 13
38041: PUSH
38042: LD_VAR 0 13
38046: PUSH
38047: LD_INT 2
38049: PLUS
38050: ST_TO_ADDR
// continue ;
38051: GO 37851
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38053: LD_VAR 0 12
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: PPUSH
38062: CALL_OW 266
38066: PUSH
38067: LD_INT 5
38069: EQUAL
38070: IFFALSE 38144
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38072: LD_VAR 0 12
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: PPUSH
38081: CALL_OW 313
38085: PUSH
38086: LD_INT 3
38088: LESS
38089: IFFALSE 38125
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38091: LD_INT 0
38093: PPUSH
38094: LD_INT 5
38096: PUSH
38097: LD_INT 8
38099: PUSH
38100: LD_INT 9
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: PUSH
38108: LD_VAR 0 17
38112: ARRAY
38113: PPUSH
38114: LD_VAR 0 4
38118: PPUSH
38119: CALL_OW 380
38123: GO 38142
// PrepareHuman ( false , i , skill ) ;
38125: LD_INT 0
38127: PPUSH
38128: LD_VAR 0 8
38132: PPUSH
38133: LD_VAR 0 4
38137: PPUSH
38138: CALL_OW 380
// end else
38142: GO 38161
// PrepareHuman ( false , i , skill ) ;
38144: LD_INT 0
38146: PPUSH
38147: LD_VAR 0 8
38151: PPUSH
38152: LD_VAR 0 4
38156: PPUSH
38157: CALL_OW 380
// un := CreateHuman ;
38161: LD_ADDR_VAR 0 14
38165: PUSH
38166: CALL_OW 44
38170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38171: LD_ADDR_VAR 0 7
38175: PUSH
38176: LD_VAR 0 7
38180: PPUSH
38181: LD_INT 1
38183: PPUSH
38184: LD_VAR 0 14
38188: PPUSH
38189: CALL_OW 2
38193: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38194: LD_VAR 0 14
38198: PPUSH
38199: LD_VAR 0 12
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: CALL_OW 52
// end ;
38212: GO 37851
38214: POP
38215: POP
// end ;
38216: GO 37153
38218: POP
38219: POP
// result := result ^ buildings ;
38220: LD_ADDR_VAR 0 7
38224: PUSH
38225: LD_VAR 0 7
38229: PUSH
38230: LD_VAR 0 18
38234: ADD
38235: ST_TO_ADDR
// end else
38236: GO 38379
// begin for i = 1 to personel do
38238: LD_ADDR_VAR 0 8
38242: PUSH
38243: DOUBLE
38244: LD_INT 1
38246: DEC
38247: ST_TO_ADDR
38248: LD_VAR 0 6
38252: PUSH
38253: FOR_TO
38254: IFFALSE 38377
// begin if i > 4 then
38256: LD_VAR 0 8
38260: PUSH
38261: LD_INT 4
38263: GREATER
38264: IFFALSE 38268
// break ;
38266: GO 38377
// x := personel [ i ] ;
38268: LD_ADDR_VAR 0 13
38272: PUSH
38273: LD_VAR 0 6
38277: PUSH
38278: LD_VAR 0 8
38282: ARRAY
38283: ST_TO_ADDR
// if x = - 1 then
38284: LD_VAR 0 13
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: EQUAL
38293: IFFALSE 38297
// continue ;
38295: GO 38253
// PrepareHuman ( false , i , skill ) ;
38297: LD_INT 0
38299: PPUSH
38300: LD_VAR 0 8
38304: PPUSH
38305: LD_VAR 0 4
38309: PPUSH
38310: CALL_OW 380
// un := CreateHuman ;
38314: LD_ADDR_VAR 0 14
38318: PUSH
38319: CALL_OW 44
38323: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38324: LD_VAR 0 14
38328: PPUSH
38329: LD_VAR 0 1
38333: PPUSH
38334: CALL_OW 250
38338: PPUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 251
38348: PPUSH
38349: LD_INT 10
38351: PPUSH
38352: LD_INT 0
38354: PPUSH
38355: CALL_OW 50
// result := result ^ un ;
38359: LD_ADDR_VAR 0 7
38363: PUSH
38364: LD_VAR 0 7
38368: PUSH
38369: LD_VAR 0 14
38373: ADD
38374: ST_TO_ADDR
// end ;
38375: GO 38253
38377: POP
38378: POP
// end ; end ;
38379: LD_VAR 0 7
38383: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38384: LD_INT 0
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
// result := false ;
38402: LD_ADDR_VAR 0 3
38406: PUSH
38407: LD_INT 0
38409: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38410: LD_VAR 0 1
38414: NOT
38415: PUSH
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 266
38425: PUSH
38426: LD_INT 32
38428: PUSH
38429: LD_INT 33
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: IN
38436: NOT
38437: OR
38438: IFFALSE 38442
// exit ;
38440: GO 39581
// nat := GetNation ( tower ) ;
38442: LD_ADDR_VAR 0 12
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 248
38456: ST_TO_ADDR
// side := GetSide ( tower ) ;
38457: LD_ADDR_VAR 0 16
38461: PUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 255
38471: ST_TO_ADDR
// x := GetX ( tower ) ;
38472: LD_ADDR_VAR 0 10
38476: PUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: CALL_OW 250
38486: ST_TO_ADDR
// y := GetY ( tower ) ;
38487: LD_ADDR_VAR 0 11
38491: PUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 251
38501: ST_TO_ADDR
// if not x or not y then
38502: LD_VAR 0 10
38506: NOT
38507: PUSH
38508: LD_VAR 0 11
38512: NOT
38513: OR
38514: IFFALSE 38518
// exit ;
38516: GO 39581
// weapon := 0 ;
38518: LD_ADDR_VAR 0 18
38522: PUSH
38523: LD_INT 0
38525: ST_TO_ADDR
// fac_list := [ ] ;
38526: LD_ADDR_VAR 0 17
38530: PUSH
38531: EMPTY
38532: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38533: LD_ADDR_VAR 0 6
38537: PUSH
38538: LD_VAR 0 1
38542: PPUSH
38543: CALL_OW 274
38547: PPUSH
38548: LD_VAR 0 2
38552: PPUSH
38553: LD_INT 0
38555: PPUSH
38556: CALL 36121 0 3
38560: PPUSH
38561: LD_INT 30
38563: PUSH
38564: LD_INT 3
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PPUSH
38571: CALL_OW 72
38575: ST_TO_ADDR
// if not factories then
38576: LD_VAR 0 6
38580: NOT
38581: IFFALSE 38585
// exit ;
38583: GO 39581
// for i in factories do
38585: LD_ADDR_VAR 0 8
38589: PUSH
38590: LD_VAR 0 6
38594: PUSH
38595: FOR_IN
38596: IFFALSE 38621
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38598: LD_ADDR_VAR 0 17
38602: PUSH
38603: LD_VAR 0 17
38607: PUSH
38608: LD_VAR 0 8
38612: PPUSH
38613: CALL_OW 478
38617: UNION
38618: ST_TO_ADDR
38619: GO 38595
38621: POP
38622: POP
// if not fac_list then
38623: LD_VAR 0 17
38627: NOT
38628: IFFALSE 38632
// exit ;
38630: GO 39581
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_INT 4
38639: PUSH
38640: LD_INT 5
38642: PUSH
38643: LD_INT 9
38645: PUSH
38646: LD_INT 10
38648: PUSH
38649: LD_INT 6
38651: PUSH
38652: LD_INT 7
38654: PUSH
38655: LD_INT 11
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 27
38669: PUSH
38670: LD_INT 28
38672: PUSH
38673: LD_INT 26
38675: PUSH
38676: LD_INT 30
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 43
38687: PUSH
38688: LD_INT 44
38690: PUSH
38691: LD_INT 46
38693: PUSH
38694: LD_INT 45
38696: PUSH
38697: LD_INT 47
38699: PUSH
38700: LD_INT 49
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: PUSH
38716: LD_VAR 0 12
38720: ARRAY
38721: ST_TO_ADDR
// for i in list do
38722: LD_ADDR_VAR 0 8
38726: PUSH
38727: LD_VAR 0 5
38731: PUSH
38732: FOR_IN
38733: IFFALSE 38766
// if not i in fac_list then
38735: LD_VAR 0 8
38739: PUSH
38740: LD_VAR 0 17
38744: IN
38745: NOT
38746: IFFALSE 38764
// list := list diff i ;
38748: LD_ADDR_VAR 0 5
38752: PUSH
38753: LD_VAR 0 5
38757: PUSH
38758: LD_VAR 0 8
38762: DIFF
38763: ST_TO_ADDR
38764: GO 38732
38766: POP
38767: POP
// if not list then
38768: LD_VAR 0 5
38772: NOT
38773: IFFALSE 38777
// exit ;
38775: GO 39581
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38777: LD_VAR 0 12
38781: PUSH
38782: LD_INT 3
38784: EQUAL
38785: PUSH
38786: LD_INT 49
38788: PUSH
38789: LD_VAR 0 5
38793: IN
38794: AND
38795: PUSH
38796: LD_INT 31
38798: PPUSH
38799: LD_VAR 0 16
38803: PPUSH
38804: CALL_OW 321
38808: PUSH
38809: LD_INT 2
38811: EQUAL
38812: AND
38813: IFFALSE 38873
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38815: LD_INT 22
38817: PUSH
38818: LD_VAR 0 16
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 35
38829: PUSH
38830: LD_INT 49
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 91
38839: PUSH
38840: LD_VAR 0 1
38844: PUSH
38845: LD_INT 10
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: PPUSH
38858: CALL_OW 69
38862: NOT
38863: IFFALSE 38873
// weapon := ru_time_lapser ;
38865: LD_ADDR_VAR 0 18
38869: PUSH
38870: LD_INT 49
38872: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38873: LD_VAR 0 12
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: IN
38888: PUSH
38889: LD_INT 11
38891: PUSH
38892: LD_VAR 0 5
38896: IN
38897: PUSH
38898: LD_INT 30
38900: PUSH
38901: LD_VAR 0 5
38905: IN
38906: OR
38907: AND
38908: PUSH
38909: LD_INT 6
38911: PPUSH
38912: LD_VAR 0 16
38916: PPUSH
38917: CALL_OW 321
38921: PUSH
38922: LD_INT 2
38924: EQUAL
38925: AND
38926: IFFALSE 39091
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38928: LD_INT 22
38930: PUSH
38931: LD_VAR 0 16
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 35
38945: PUSH
38946: LD_INT 11
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 35
38955: PUSH
38956: LD_INT 30
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 91
38970: PUSH
38971: LD_VAR 0 1
38975: PUSH
38976: LD_INT 18
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: PPUSH
38989: CALL_OW 69
38993: NOT
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_VAR 0 16
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: LD_INT 30
39012: PUSH
39013: LD_INT 32
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 30
39022: PUSH
39023: LD_INT 33
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 91
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: LD_INT 12
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: PUSH
39056: EMPTY
39057: LIST
39058: PPUSH
39059: CALL_OW 69
39063: PUSH
39064: LD_INT 2
39066: GREATER
39067: AND
39068: IFFALSE 39091
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39070: LD_ADDR_VAR 0 18
39074: PUSH
39075: LD_INT 11
39077: PUSH
39078: LD_INT 30
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_VAR 0 12
39089: ARRAY
39090: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39091: LD_VAR 0 18
39095: NOT
39096: PUSH
39097: LD_INT 40
39099: PPUSH
39100: LD_VAR 0 16
39104: PPUSH
39105: CALL_OW 321
39109: PUSH
39110: LD_INT 2
39112: EQUAL
39113: AND
39114: PUSH
39115: LD_INT 7
39117: PUSH
39118: LD_VAR 0 5
39122: IN
39123: PUSH
39124: LD_INT 28
39126: PUSH
39127: LD_VAR 0 5
39131: IN
39132: OR
39133: PUSH
39134: LD_INT 45
39136: PUSH
39137: LD_VAR 0 5
39141: IN
39142: OR
39143: AND
39144: IFFALSE 39398
// begin hex := GetHexInfo ( x , y ) ;
39146: LD_ADDR_VAR 0 4
39150: PUSH
39151: LD_VAR 0 10
39155: PPUSH
39156: LD_VAR 0 11
39160: PPUSH
39161: CALL_OW 546
39165: ST_TO_ADDR
// if hex [ 1 ] then
39166: LD_VAR 0 4
39170: PUSH
39171: LD_INT 1
39173: ARRAY
39174: IFFALSE 39178
// exit ;
39176: GO 39581
// height := hex [ 2 ] ;
39178: LD_ADDR_VAR 0 15
39182: PUSH
39183: LD_VAR 0 4
39187: PUSH
39188: LD_INT 2
39190: ARRAY
39191: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39192: LD_ADDR_VAR 0 14
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: LD_INT 5
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: ST_TO_ADDR
// for i in tmp do
39215: LD_ADDR_VAR 0 8
39219: PUSH
39220: LD_VAR 0 14
39224: PUSH
39225: FOR_IN
39226: IFFALSE 39396
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39228: LD_ADDR_VAR 0 9
39232: PUSH
39233: LD_VAR 0 10
39237: PPUSH
39238: LD_VAR 0 8
39242: PPUSH
39243: LD_INT 5
39245: PPUSH
39246: CALL_OW 272
39250: PUSH
39251: LD_VAR 0 11
39255: PPUSH
39256: LD_VAR 0 8
39260: PPUSH
39261: LD_INT 5
39263: PPUSH
39264: CALL_OW 273
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39273: LD_VAR 0 9
39277: PUSH
39278: LD_INT 1
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 9
39286: PUSH
39287: LD_INT 2
39289: ARRAY
39290: PPUSH
39291: CALL_OW 488
39295: IFFALSE 39394
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39297: LD_ADDR_VAR 0 4
39301: PUSH
39302: LD_VAR 0 9
39306: PUSH
39307: LD_INT 1
39309: ARRAY
39310: PPUSH
39311: LD_VAR 0 9
39315: PUSH
39316: LD_INT 2
39318: ARRAY
39319: PPUSH
39320: CALL_OW 546
39324: ST_TO_ADDR
// if hex [ 1 ] then
39325: LD_VAR 0 4
39329: PUSH
39330: LD_INT 1
39332: ARRAY
39333: IFFALSE 39337
// continue ;
39335: GO 39225
// h := hex [ 2 ] ;
39337: LD_ADDR_VAR 0 13
39341: PUSH
39342: LD_VAR 0 4
39346: PUSH
39347: LD_INT 2
39349: ARRAY
39350: ST_TO_ADDR
// if h + 7 < height then
39351: LD_VAR 0 13
39355: PUSH
39356: LD_INT 7
39358: PLUS
39359: PUSH
39360: LD_VAR 0 15
39364: LESS
39365: IFFALSE 39394
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39367: LD_ADDR_VAR 0 18
39371: PUSH
39372: LD_INT 7
39374: PUSH
39375: LD_INT 28
39377: PUSH
39378: LD_INT 45
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: PUSH
39386: LD_VAR 0 12
39390: ARRAY
39391: ST_TO_ADDR
// break ;
39392: GO 39396
// end ; end ; end ;
39394: GO 39225
39396: POP
39397: POP
// end ; if not weapon then
39398: LD_VAR 0 18
39402: NOT
39403: IFFALSE 39463
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39405: LD_ADDR_VAR 0 5
39409: PUSH
39410: LD_VAR 0 5
39414: PUSH
39415: LD_INT 11
39417: PUSH
39418: LD_INT 30
39420: PUSH
39421: LD_INT 49
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: DIFF
39429: ST_TO_ADDR
// if not list then
39430: LD_VAR 0 5
39434: NOT
39435: IFFALSE 39439
// exit ;
39437: GO 39581
// weapon := list [ rand ( 1 , list ) ] ;
39439: LD_ADDR_VAR 0 18
39443: PUSH
39444: LD_VAR 0 5
39448: PUSH
39449: LD_INT 1
39451: PPUSH
39452: LD_VAR 0 5
39456: PPUSH
39457: CALL_OW 12
39461: ARRAY
39462: ST_TO_ADDR
// end ; if weapon then
39463: LD_VAR 0 18
39467: IFFALSE 39581
// begin tmp := CostOfWeapon ( weapon ) ;
39469: LD_ADDR_VAR 0 14
39473: PUSH
39474: LD_VAR 0 18
39478: PPUSH
39479: CALL_OW 451
39483: ST_TO_ADDR
// j := GetBase ( tower ) ;
39484: LD_ADDR_VAR 0 9
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 274
39498: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39499: LD_VAR 0 9
39503: PPUSH
39504: LD_INT 1
39506: PPUSH
39507: CALL_OW 275
39511: PUSH
39512: LD_VAR 0 14
39516: PUSH
39517: LD_INT 1
39519: ARRAY
39520: GREATEREQUAL
39521: PUSH
39522: LD_VAR 0 9
39526: PPUSH
39527: LD_INT 2
39529: PPUSH
39530: CALL_OW 275
39534: PUSH
39535: LD_VAR 0 14
39539: PUSH
39540: LD_INT 2
39542: ARRAY
39543: GREATEREQUAL
39544: AND
39545: PUSH
39546: LD_VAR 0 9
39550: PPUSH
39551: LD_INT 3
39553: PPUSH
39554: CALL_OW 275
39558: PUSH
39559: LD_VAR 0 14
39563: PUSH
39564: LD_INT 3
39566: ARRAY
39567: GREATEREQUAL
39568: AND
39569: IFFALSE 39581
// result := weapon ;
39571: LD_ADDR_VAR 0 3
39575: PUSH
39576: LD_VAR 0 18
39580: ST_TO_ADDR
// end ; end ;
39581: LD_VAR 0 3
39585: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39586: LD_INT 0
39588: PPUSH
39589: PPUSH
// result := true ;
39590: LD_ADDR_VAR 0 3
39594: PUSH
39595: LD_INT 1
39597: ST_TO_ADDR
// if array1 = array2 then
39598: LD_VAR 0 1
39602: PUSH
39603: LD_VAR 0 2
39607: EQUAL
39608: IFFALSE 39668
// begin for i = 1 to array1 do
39610: LD_ADDR_VAR 0 4
39614: PUSH
39615: DOUBLE
39616: LD_INT 1
39618: DEC
39619: ST_TO_ADDR
39620: LD_VAR 0 1
39624: PUSH
39625: FOR_TO
39626: IFFALSE 39664
// if array1 [ i ] <> array2 [ i ] then
39628: LD_VAR 0 1
39632: PUSH
39633: LD_VAR 0 4
39637: ARRAY
39638: PUSH
39639: LD_VAR 0 2
39643: PUSH
39644: LD_VAR 0 4
39648: ARRAY
39649: NONEQUAL
39650: IFFALSE 39662
// begin result := false ;
39652: LD_ADDR_VAR 0 3
39656: PUSH
39657: LD_INT 0
39659: ST_TO_ADDR
// break ;
39660: GO 39664
// end ;
39662: GO 39625
39664: POP
39665: POP
// end else
39666: GO 39676
// result := false ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_INT 0
39675: ST_TO_ADDR
// end ;
39676: LD_VAR 0 3
39680: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
// if not array1 or not array2 then
39685: LD_VAR 0 1
39689: NOT
39690: PUSH
39691: LD_VAR 0 2
39695: NOT
39696: OR
39697: IFFALSE 39701
// exit ;
39699: GO 39765
// result := true ;
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_INT 1
39708: ST_TO_ADDR
// for i = 1 to array1 do
39709: LD_ADDR_VAR 0 4
39713: PUSH
39714: DOUBLE
39715: LD_INT 1
39717: DEC
39718: ST_TO_ADDR
39719: LD_VAR 0 1
39723: PUSH
39724: FOR_TO
39725: IFFALSE 39763
// if array1 [ i ] <> array2 [ i ] then
39727: LD_VAR 0 1
39731: PUSH
39732: LD_VAR 0 4
39736: ARRAY
39737: PUSH
39738: LD_VAR 0 2
39742: PUSH
39743: LD_VAR 0 4
39747: ARRAY
39748: NONEQUAL
39749: IFFALSE 39761
// begin result := false ;
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_INT 0
39758: ST_TO_ADDR
// break ;
39759: GO 39763
// end ;
39761: GO 39724
39763: POP
39764: POP
// end ;
39765: LD_VAR 0 3
39769: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39770: LD_INT 0
39772: PPUSH
39773: PPUSH
39774: PPUSH
// pom := GetBase ( fac ) ;
39775: LD_ADDR_VAR 0 5
39779: PUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 274
39789: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: LD_VAR 0 2
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PPUSH
39804: LD_VAR 0 2
39808: PUSH
39809: LD_INT 2
39811: ARRAY
39812: PPUSH
39813: LD_VAR 0 2
39817: PUSH
39818: LD_INT 3
39820: ARRAY
39821: PPUSH
39822: LD_VAR 0 2
39826: PUSH
39827: LD_INT 4
39829: ARRAY
39830: PPUSH
39831: CALL_OW 449
39835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: LD_VAR 0 5
39845: PPUSH
39846: LD_INT 1
39848: PPUSH
39849: CALL_OW 275
39853: PUSH
39854: LD_VAR 0 4
39858: PUSH
39859: LD_INT 1
39861: ARRAY
39862: GREATEREQUAL
39863: PUSH
39864: LD_VAR 0 5
39868: PPUSH
39869: LD_INT 2
39871: PPUSH
39872: CALL_OW 275
39876: PUSH
39877: LD_VAR 0 4
39881: PUSH
39882: LD_INT 2
39884: ARRAY
39885: GREATEREQUAL
39886: AND
39887: PUSH
39888: LD_VAR 0 5
39892: PPUSH
39893: LD_INT 3
39895: PPUSH
39896: CALL_OW 275
39900: PUSH
39901: LD_VAR 0 4
39905: PUSH
39906: LD_INT 3
39908: ARRAY
39909: GREATEREQUAL
39910: AND
39911: ST_TO_ADDR
// end ;
39912: LD_VAR 0 3
39916: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39917: LD_INT 0
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
// pom := GetBase ( building ) ;
39923: LD_ADDR_VAR 0 3
39927: PUSH
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 274
39937: ST_TO_ADDR
// if not pom then
39938: LD_VAR 0 3
39942: NOT
39943: IFFALSE 39947
// exit ;
39945: GO 40117
// btype := GetBType ( building ) ;
39947: LD_ADDR_VAR 0 5
39951: PUSH
39952: LD_VAR 0 1
39956: PPUSH
39957: CALL_OW 266
39961: ST_TO_ADDR
// if btype = b_armoury then
39962: LD_VAR 0 5
39966: PUSH
39967: LD_INT 4
39969: EQUAL
39970: IFFALSE 39980
// btype := b_barracks ;
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_INT 5
39979: ST_TO_ADDR
// if btype = b_depot then
39980: LD_VAR 0 5
39984: PUSH
39985: LD_INT 0
39987: EQUAL
39988: IFFALSE 39998
// btype := b_warehouse ;
39990: LD_ADDR_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: ST_TO_ADDR
// if btype = b_workshop then
39998: LD_VAR 0 5
40002: PUSH
40003: LD_INT 2
40005: EQUAL
40006: IFFALSE 40016
// btype := b_factory ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_INT 3
40015: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40016: LD_ADDR_VAR 0 4
40020: PUSH
40021: LD_VAR 0 5
40025: PPUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: CALL_OW 248
40035: PPUSH
40036: CALL_OW 450
40040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40041: LD_ADDR_VAR 0 2
40045: PUSH
40046: LD_VAR 0 3
40050: PPUSH
40051: LD_INT 1
40053: PPUSH
40054: CALL_OW 275
40058: PUSH
40059: LD_VAR 0 4
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: GREATEREQUAL
40068: PUSH
40069: LD_VAR 0 3
40073: PPUSH
40074: LD_INT 2
40076: PPUSH
40077: CALL_OW 275
40081: PUSH
40082: LD_VAR 0 4
40086: PUSH
40087: LD_INT 2
40089: ARRAY
40090: GREATEREQUAL
40091: AND
40092: PUSH
40093: LD_VAR 0 3
40097: PPUSH
40098: LD_INT 3
40100: PPUSH
40101: CALL_OW 275
40105: PUSH
40106: LD_VAR 0 4
40110: PUSH
40111: LD_INT 3
40113: ARRAY
40114: GREATEREQUAL
40115: AND
40116: ST_TO_ADDR
// end ;
40117: LD_VAR 0 2
40121: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40122: LD_INT 0
40124: PPUSH
40125: PPUSH
40126: PPUSH
// pom := GetBase ( building ) ;
40127: LD_ADDR_VAR 0 4
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 274
40141: ST_TO_ADDR
// if not pom then
40142: LD_VAR 0 4
40146: NOT
40147: IFFALSE 40151
// exit ;
40149: GO 40252
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40151: LD_ADDR_VAR 0 5
40155: PUSH
40156: LD_VAR 0 2
40160: PPUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 248
40170: PPUSH
40171: CALL_OW 450
40175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_VAR 0 4
40185: PPUSH
40186: LD_INT 1
40188: PPUSH
40189: CALL_OW 275
40193: PUSH
40194: LD_VAR 0 5
40198: PUSH
40199: LD_INT 1
40201: ARRAY
40202: GREATEREQUAL
40203: PUSH
40204: LD_VAR 0 4
40208: PPUSH
40209: LD_INT 2
40211: PPUSH
40212: CALL_OW 275
40216: PUSH
40217: LD_VAR 0 5
40221: PUSH
40222: LD_INT 2
40224: ARRAY
40225: GREATEREQUAL
40226: AND
40227: PUSH
40228: LD_VAR 0 4
40232: PPUSH
40233: LD_INT 3
40235: PPUSH
40236: CALL_OW 275
40240: PUSH
40241: LD_VAR 0 5
40245: PUSH
40246: LD_INT 3
40248: ARRAY
40249: GREATEREQUAL
40250: AND
40251: ST_TO_ADDR
// end ;
40252: LD_VAR 0 3
40256: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40257: LD_INT 0
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
// result := false ;
40270: LD_ADDR_VAR 0 8
40274: PUSH
40275: LD_INT 0
40277: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40278: LD_VAR 0 5
40282: NOT
40283: PUSH
40284: LD_VAR 0 1
40288: NOT
40289: OR
40290: PUSH
40291: LD_VAR 0 2
40295: NOT
40296: OR
40297: PUSH
40298: LD_VAR 0 3
40302: NOT
40303: OR
40304: IFFALSE 40308
// exit ;
40306: GO 41122
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40308: LD_ADDR_VAR 0 14
40312: PUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: LD_VAR 0 2
40322: PPUSH
40323: LD_VAR 0 3
40327: PPUSH
40328: LD_VAR 0 4
40332: PPUSH
40333: LD_VAR 0 5
40337: PUSH
40338: LD_INT 1
40340: ARRAY
40341: PPUSH
40342: CALL_OW 248
40346: PPUSH
40347: LD_INT 0
40349: PPUSH
40350: CALL 41959 0 6
40354: ST_TO_ADDR
// if not hexes then
40355: LD_VAR 0 14
40359: NOT
40360: IFFALSE 40364
// exit ;
40362: GO 41122
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40364: LD_ADDR_VAR 0 17
40368: PUSH
40369: LD_VAR 0 5
40373: PPUSH
40374: LD_INT 22
40376: PUSH
40377: LD_VAR 0 13
40381: PPUSH
40382: CALL_OW 255
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 30
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 30
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PPUSH
40423: CALL_OW 72
40427: ST_TO_ADDR
// for i = 1 to hexes do
40428: LD_ADDR_VAR 0 9
40432: PUSH
40433: DOUBLE
40434: LD_INT 1
40436: DEC
40437: ST_TO_ADDR
40438: LD_VAR 0 14
40442: PUSH
40443: FOR_TO
40444: IFFALSE 41120
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40446: LD_ADDR_VAR 0 13
40450: PUSH
40451: LD_VAR 0 14
40455: PUSH
40456: LD_VAR 0 9
40460: ARRAY
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: LD_VAR 0 14
40470: PUSH
40471: LD_VAR 0 9
40475: ARRAY
40476: PUSH
40477: LD_INT 2
40479: ARRAY
40480: PPUSH
40481: CALL_OW 428
40485: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40486: LD_VAR 0 14
40490: PUSH
40491: LD_VAR 0 9
40495: ARRAY
40496: PUSH
40497: LD_INT 1
40499: ARRAY
40500: PPUSH
40501: LD_VAR 0 14
40505: PUSH
40506: LD_VAR 0 9
40510: ARRAY
40511: PUSH
40512: LD_INT 2
40514: ARRAY
40515: PPUSH
40516: CALL_OW 351
40520: PUSH
40521: LD_VAR 0 14
40525: PUSH
40526: LD_VAR 0 9
40530: ARRAY
40531: PUSH
40532: LD_INT 1
40534: ARRAY
40535: PPUSH
40536: LD_VAR 0 14
40540: PUSH
40541: LD_VAR 0 9
40545: ARRAY
40546: PUSH
40547: LD_INT 2
40549: ARRAY
40550: PPUSH
40551: CALL_OW 488
40555: NOT
40556: OR
40557: PUSH
40558: LD_VAR 0 13
40562: PPUSH
40563: CALL_OW 247
40567: PUSH
40568: LD_INT 3
40570: EQUAL
40571: OR
40572: IFFALSE 40578
// exit ;
40574: POP
40575: POP
40576: GO 41122
// if not tmp then
40578: LD_VAR 0 13
40582: NOT
40583: IFFALSE 40587
// continue ;
40585: GO 40443
// result := true ;
40587: LD_ADDR_VAR 0 8
40591: PUSH
40592: LD_INT 1
40594: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40595: LD_VAR 0 6
40599: PUSH
40600: LD_VAR 0 13
40604: PPUSH
40605: CALL_OW 247
40609: PUSH
40610: LD_INT 2
40612: EQUAL
40613: AND
40614: PUSH
40615: LD_VAR 0 13
40619: PPUSH
40620: CALL_OW 263
40624: PUSH
40625: LD_INT 1
40627: EQUAL
40628: AND
40629: IFFALSE 40793
// begin if IsDrivenBy ( tmp ) then
40631: LD_VAR 0 13
40635: PPUSH
40636: CALL_OW 311
40640: IFFALSE 40644
// continue ;
40642: GO 40443
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40644: LD_VAR 0 6
40648: PPUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 60
40654: PUSH
40655: EMPTY
40656: LIST
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: LD_INT 55
40667: PUSH
40668: EMPTY
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PPUSH
40679: CALL_OW 72
40683: IFFALSE 40791
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40685: LD_ADDR_VAR 0 18
40689: PUSH
40690: LD_VAR 0 6
40694: PPUSH
40695: LD_INT 3
40697: PUSH
40698: LD_INT 60
40700: PUSH
40701: EMPTY
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: LD_INT 55
40713: PUSH
40714: EMPTY
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PPUSH
40725: CALL_OW 72
40729: PUSH
40730: LD_INT 1
40732: ARRAY
40733: ST_TO_ADDR
// if IsInUnit ( driver ) then
40734: LD_VAR 0 18
40738: PPUSH
40739: CALL_OW 310
40743: IFFALSE 40754
// ComExit ( driver ) ;
40745: LD_VAR 0 18
40749: PPUSH
40750: CALL 65143 0 1
// AddComEnterUnit ( driver , tmp ) ;
40754: LD_VAR 0 18
40758: PPUSH
40759: LD_VAR 0 13
40763: PPUSH
40764: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40768: LD_VAR 0 18
40772: PPUSH
40773: LD_VAR 0 7
40777: PPUSH
40778: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40782: LD_VAR 0 18
40786: PPUSH
40787: CALL_OW 181
// end ; continue ;
40791: GO 40443
// end ; if not cleaners or not tmp in cleaners then
40793: LD_VAR 0 6
40797: NOT
40798: PUSH
40799: LD_VAR 0 13
40803: PUSH
40804: LD_VAR 0 6
40808: IN
40809: NOT
40810: OR
40811: IFFALSE 41118
// begin if dep then
40813: LD_VAR 0 17
40817: IFFALSE 40953
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40819: LD_ADDR_VAR 0 16
40823: PUSH
40824: LD_VAR 0 17
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: PPUSH
40833: CALL_OW 250
40837: PPUSH
40838: LD_VAR 0 17
40842: PUSH
40843: LD_INT 1
40845: ARRAY
40846: PPUSH
40847: CALL_OW 254
40851: PPUSH
40852: LD_INT 5
40854: PPUSH
40855: CALL_OW 272
40859: PUSH
40860: LD_VAR 0 17
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: CALL_OW 251
40873: PPUSH
40874: LD_VAR 0 17
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: CALL_OW 254
40887: PPUSH
40888: LD_INT 5
40890: PPUSH
40891: CALL_OW 273
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40900: LD_VAR 0 16
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: LD_VAR 0 16
40913: PUSH
40914: LD_INT 2
40916: ARRAY
40917: PPUSH
40918: CALL_OW 488
40922: IFFALSE 40953
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40924: LD_VAR 0 13
40928: PPUSH
40929: LD_VAR 0 16
40933: PUSH
40934: LD_INT 1
40936: ARRAY
40937: PPUSH
40938: LD_VAR 0 16
40942: PUSH
40943: LD_INT 2
40945: ARRAY
40946: PPUSH
40947: CALL_OW 111
// continue ;
40951: GO 40443
// end ; end ; r := GetDir ( tmp ) ;
40953: LD_ADDR_VAR 0 15
40957: PUSH
40958: LD_VAR 0 13
40962: PPUSH
40963: CALL_OW 254
40967: ST_TO_ADDR
// if r = 5 then
40968: LD_VAR 0 15
40972: PUSH
40973: LD_INT 5
40975: EQUAL
40976: IFFALSE 40986
// r := 0 ;
40978: LD_ADDR_VAR 0 15
40982: PUSH
40983: LD_INT 0
40985: ST_TO_ADDR
// for j = r to 5 do
40986: LD_ADDR_VAR 0 10
40990: PUSH
40991: DOUBLE
40992: LD_VAR 0 15
40996: DEC
40997: ST_TO_ADDR
40998: LD_INT 5
41000: PUSH
41001: FOR_TO
41002: IFFALSE 41116
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41004: LD_ADDR_VAR 0 11
41008: PUSH
41009: LD_VAR 0 13
41013: PPUSH
41014: CALL_OW 250
41018: PPUSH
41019: LD_VAR 0 10
41023: PPUSH
41024: LD_INT 2
41026: PPUSH
41027: CALL_OW 272
41031: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41032: LD_ADDR_VAR 0 12
41036: PUSH
41037: LD_VAR 0 13
41041: PPUSH
41042: CALL_OW 251
41046: PPUSH
41047: LD_VAR 0 10
41051: PPUSH
41052: LD_INT 2
41054: PPUSH
41055: CALL_OW 273
41059: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41060: LD_VAR 0 11
41064: PPUSH
41065: LD_VAR 0 12
41069: PPUSH
41070: CALL_OW 488
41074: PUSH
41075: LD_VAR 0 11
41079: PPUSH
41080: LD_VAR 0 12
41084: PPUSH
41085: CALL_OW 428
41089: NOT
41090: AND
41091: IFFALSE 41114
// begin ComMoveXY ( tmp , _x , _y ) ;
41093: LD_VAR 0 13
41097: PPUSH
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 12
41107: PPUSH
41108: CALL_OW 111
// break ;
41112: GO 41116
// end ; end ;
41114: GO 41001
41116: POP
41117: POP
// end ; end ;
41118: GO 40443
41120: POP
41121: POP
// end ;
41122: LD_VAR 0 8
41126: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41127: LD_INT 0
41129: PPUSH
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
// result := false ;
41139: LD_ADDR_VAR 0 6
41143: PUSH
41144: LD_INT 0
41146: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41147: LD_VAR 0 1
41151: NOT
41152: PUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: CALL_OW 266
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: IN
41173: NOT
41174: OR
41175: PUSH
41176: LD_VAR 0 2
41180: NOT
41181: OR
41182: PUSH
41183: LD_VAR 0 5
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: LD_INT 4
41202: PUSH
41203: LD_INT 5
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: IN
41214: NOT
41215: OR
41216: PUSH
41217: LD_VAR 0 3
41221: PPUSH
41222: LD_VAR 0 4
41226: PPUSH
41227: CALL_OW 488
41231: NOT
41232: OR
41233: IFFALSE 41237
// exit ;
41235: GO 41954
// pom := GetBase ( depot ) ;
41237: LD_ADDR_VAR 0 10
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 274
41251: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41252: LD_ADDR_VAR 0 11
41256: PUSH
41257: LD_VAR 0 2
41261: PPUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 248
41271: PPUSH
41272: CALL_OW 450
41276: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41277: LD_VAR 0 10
41281: PPUSH
41282: LD_INT 1
41284: PPUSH
41285: CALL_OW 275
41289: PUSH
41290: LD_VAR 0 11
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: GREATEREQUAL
41299: PUSH
41300: LD_VAR 0 10
41304: PPUSH
41305: LD_INT 2
41307: PPUSH
41308: CALL_OW 275
41312: PUSH
41313: LD_VAR 0 11
41317: PUSH
41318: LD_INT 2
41320: ARRAY
41321: GREATEREQUAL
41322: AND
41323: PUSH
41324: LD_VAR 0 10
41328: PPUSH
41329: LD_INT 3
41331: PPUSH
41332: CALL_OW 275
41336: PUSH
41337: LD_VAR 0 11
41341: PUSH
41342: LD_INT 3
41344: ARRAY
41345: GREATEREQUAL
41346: AND
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 41954
// if GetBType ( depot ) = b_depot then
41352: LD_VAR 0 1
41356: PPUSH
41357: CALL_OW 266
41361: PUSH
41362: LD_INT 0
41364: EQUAL
41365: IFFALSE 41377
// dist := 28 else
41367: LD_ADDR_VAR 0 14
41371: PUSH
41372: LD_INT 28
41374: ST_TO_ADDR
41375: GO 41385
// dist := 36 ;
41377: LD_ADDR_VAR 0 14
41381: PUSH
41382: LD_INT 36
41384: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: LD_VAR 0 4
41399: PPUSH
41400: CALL_OW 297
41404: PUSH
41405: LD_VAR 0 14
41409: GREATER
41410: IFFALSE 41414
// exit ;
41412: GO 41954
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41414: LD_ADDR_VAR 0 12
41418: PUSH
41419: LD_VAR 0 2
41423: PPUSH
41424: LD_VAR 0 3
41428: PPUSH
41429: LD_VAR 0 4
41433: PPUSH
41434: LD_VAR 0 5
41438: PPUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 248
41448: PPUSH
41449: LD_INT 0
41451: PPUSH
41452: CALL 41959 0 6
41456: ST_TO_ADDR
// if not hexes then
41457: LD_VAR 0 12
41461: NOT
41462: IFFALSE 41466
// exit ;
41464: GO 41954
// hex := GetHexInfo ( x , y ) ;
41466: LD_ADDR_VAR 0 15
41470: PUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: LD_VAR 0 4
41480: PPUSH
41481: CALL_OW 546
41485: ST_TO_ADDR
// if hex [ 1 ] then
41486: LD_VAR 0 15
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: IFFALSE 41498
// exit ;
41496: GO 41954
// height := hex [ 2 ] ;
41498: LD_ADDR_VAR 0 13
41502: PUSH
41503: LD_VAR 0 15
41507: PUSH
41508: LD_INT 2
41510: ARRAY
41511: ST_TO_ADDR
// for i = 1 to hexes do
41512: LD_ADDR_VAR 0 7
41516: PUSH
41517: DOUBLE
41518: LD_INT 1
41520: DEC
41521: ST_TO_ADDR
41522: LD_VAR 0 12
41526: PUSH
41527: FOR_TO
41528: IFFALSE 41858
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41530: LD_VAR 0 12
41534: PUSH
41535: LD_VAR 0 7
41539: ARRAY
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PPUSH
41545: LD_VAR 0 12
41549: PUSH
41550: LD_VAR 0 7
41554: ARRAY
41555: PUSH
41556: LD_INT 2
41558: ARRAY
41559: PPUSH
41560: CALL_OW 488
41564: NOT
41565: PUSH
41566: LD_VAR 0 12
41570: PUSH
41571: LD_VAR 0 7
41575: ARRAY
41576: PUSH
41577: LD_INT 1
41579: ARRAY
41580: PPUSH
41581: LD_VAR 0 12
41585: PUSH
41586: LD_VAR 0 7
41590: ARRAY
41591: PUSH
41592: LD_INT 2
41594: ARRAY
41595: PPUSH
41596: CALL_OW 428
41600: PUSH
41601: LD_INT 0
41603: GREATER
41604: OR
41605: PUSH
41606: LD_VAR 0 12
41610: PUSH
41611: LD_VAR 0 7
41615: ARRAY
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: LD_VAR 0 12
41625: PUSH
41626: LD_VAR 0 7
41630: ARRAY
41631: PUSH
41632: LD_INT 2
41634: ARRAY
41635: PPUSH
41636: CALL_OW 351
41640: OR
41641: IFFALSE 41647
// exit ;
41643: POP
41644: POP
41645: GO 41954
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41647: LD_ADDR_VAR 0 8
41651: PUSH
41652: LD_VAR 0 12
41656: PUSH
41657: LD_VAR 0 7
41661: ARRAY
41662: PUSH
41663: LD_INT 1
41665: ARRAY
41666: PPUSH
41667: LD_VAR 0 12
41671: PUSH
41672: LD_VAR 0 7
41676: ARRAY
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: PPUSH
41682: CALL_OW 546
41686: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41687: LD_VAR 0 8
41691: PUSH
41692: LD_INT 1
41694: ARRAY
41695: PUSH
41696: LD_VAR 0 8
41700: PUSH
41701: LD_INT 2
41703: ARRAY
41704: PUSH
41705: LD_VAR 0 13
41709: PUSH
41710: LD_INT 2
41712: PLUS
41713: GREATER
41714: OR
41715: PUSH
41716: LD_VAR 0 8
41720: PUSH
41721: LD_INT 2
41723: ARRAY
41724: PUSH
41725: LD_VAR 0 13
41729: PUSH
41730: LD_INT 2
41732: MINUS
41733: LESS
41734: OR
41735: PUSH
41736: LD_VAR 0 8
41740: PUSH
41741: LD_INT 3
41743: ARRAY
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 8
41750: PUSH
41751: LD_INT 9
41753: PUSH
41754: LD_INT 10
41756: PUSH
41757: LD_INT 11
41759: PUSH
41760: LD_INT 12
41762: PUSH
41763: LD_INT 13
41765: PUSH
41766: LD_INT 16
41768: PUSH
41769: LD_INT 17
41771: PUSH
41772: LD_INT 18
41774: PUSH
41775: LD_INT 19
41777: PUSH
41778: LD_INT 20
41780: PUSH
41781: LD_INT 21
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: IN
41799: NOT
41800: OR
41801: PUSH
41802: LD_VAR 0 8
41806: PUSH
41807: LD_INT 5
41809: ARRAY
41810: NOT
41811: OR
41812: PUSH
41813: LD_VAR 0 8
41817: PUSH
41818: LD_INT 6
41820: ARRAY
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 7
41830: PUSH
41831: LD_INT 9
41833: PUSH
41834: LD_INT 10
41836: PUSH
41837: LD_INT 11
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: IN
41848: NOT
41849: OR
41850: IFFALSE 41856
// exit ;
41852: POP
41853: POP
41854: GO 41954
// end ;
41856: GO 41527
41858: POP
41859: POP
// side := GetSide ( depot ) ;
41860: LD_ADDR_VAR 0 9
41864: PUSH
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 255
41874: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41875: LD_VAR 0 9
41879: PPUSH
41880: LD_VAR 0 3
41884: PPUSH
41885: LD_VAR 0 4
41889: PPUSH
41890: LD_INT 20
41892: PPUSH
41893: CALL 34275 0 4
41897: PUSH
41898: LD_INT 4
41900: ARRAY
41901: IFFALSE 41905
// exit ;
41903: GO 41954
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41905: LD_VAR 0 2
41909: PUSH
41910: LD_INT 29
41912: PUSH
41913: LD_INT 30
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: IN
41920: PUSH
41921: LD_VAR 0 3
41925: PPUSH
41926: LD_VAR 0 4
41930: PPUSH
41931: LD_VAR 0 9
41935: PPUSH
41936: CALL_OW 440
41940: NOT
41941: AND
41942: IFFALSE 41946
// exit ;
41944: GO 41954
// result := true ;
41946: LD_ADDR_VAR 0 6
41950: PUSH
41951: LD_INT 1
41953: ST_TO_ADDR
// end ;
41954: LD_VAR 0 6
41958: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41959: LD_INT 0
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
// result = [ ] ;
42019: LD_ADDR_VAR 0 7
42023: PUSH
42024: EMPTY
42025: ST_TO_ADDR
// temp_list = [ ] ;
42026: LD_ADDR_VAR 0 9
42030: PUSH
42031: EMPTY
42032: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42033: LD_VAR 0 4
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: LD_INT 4
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: IN
42064: NOT
42065: PUSH
42066: LD_VAR 0 1
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: IN
42081: PUSH
42082: LD_VAR 0 5
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: IN
42101: NOT
42102: AND
42103: OR
42104: IFFALSE 42108
// exit ;
42106: GO 60499
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42108: LD_VAR 0 1
42112: PUSH
42113: LD_INT 6
42115: PUSH
42116: LD_INT 7
42118: PUSH
42119: LD_INT 8
42121: PUSH
42122: LD_INT 13
42124: PUSH
42125: LD_INT 12
42127: PUSH
42128: LD_INT 15
42130: PUSH
42131: LD_INT 11
42133: PUSH
42134: LD_INT 14
42136: PUSH
42137: LD_INT 10
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: IN
42151: IFFALSE 42161
// btype = b_lab ;
42153: LD_ADDR_VAR 0 1
42157: PUSH
42158: LD_INT 6
42160: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42161: LD_VAR 0 6
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: IN
42180: NOT
42181: PUSH
42182: LD_VAR 0 1
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 3
42198: PUSH
42199: LD_INT 6
42201: PUSH
42202: LD_INT 36
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: LD_INT 5
42210: PUSH
42211: LD_INT 31
42213: PUSH
42214: LD_INT 32
42216: PUSH
42217: LD_INT 33
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: IN
42233: NOT
42234: PUSH
42235: LD_VAR 0 6
42239: PUSH
42240: LD_INT 1
42242: EQUAL
42243: AND
42244: OR
42245: PUSH
42246: LD_VAR 0 1
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: IN
42261: NOT
42262: PUSH
42263: LD_VAR 0 6
42267: PUSH
42268: LD_INT 2
42270: EQUAL
42271: AND
42272: OR
42273: IFFALSE 42283
// mode = 0 ;
42275: LD_ADDR_VAR 0 6
42279: PUSH
42280: LD_INT 0
42282: ST_TO_ADDR
// case mode of 0 :
42283: LD_VAR 0 6
42287: PUSH
42288: LD_INT 0
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42296
42294: GO 53749
42296: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42297: LD_ADDR_VAR 0 11
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42490: LD_ADDR_VAR 0 12
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42686: LD_ADDR_VAR 0 13
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42885: LD_ADDR_VAR 0 14
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 3
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43081: LD_ADDR_VAR 0 15
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43274: LD_ADDR_VAR 0 16
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43467: LD_ADDR_VAR 0 17
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43697: LD_ADDR_VAR 0 18
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43927: LD_ADDR_VAR 0 19
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44157: LD_ADDR_VAR 0 20
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44387: LD_ADDR_VAR 0 21
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44617: LD_ADDR_VAR 0 22
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44847: LD_ADDR_VAR 0 23
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45127: LD_ADDR_VAR 0 24
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45403: LD_ADDR_VAR 0 25
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45677: LD_ADDR_VAR 0 26
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 27
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46233: LD_ADDR_VAR 0 28
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46515: LD_ADDR_VAR 0 29
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46794: LD_ADDR_VAR 0 30
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 3
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47072: LD_ADDR_VAR 0 31
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47350: LD_ADDR_VAR 0 32
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47628: LD_ADDR_VAR 0 33
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47907: LD_ADDR_VAR 0 34
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48187: LD_ADDR_VAR 0 35
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48299: LD_ADDR_VAR 0 36
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48411: LD_ADDR_VAR 0 37
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48523: LD_ADDR_VAR 0 38
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48635: LD_ADDR_VAR 0 39
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48747: LD_ADDR_VAR 0 40
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48859: LD_ADDR_VAR 0 41
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 3
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49209: LD_ADDR_VAR 0 42
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 3
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 3
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 3
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: NEG
49519: PUSH
49520: LD_INT 3
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49559: LD_ADDR_VAR 0 43
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 3
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49907: LD_ADDR_VAR 0 44
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50257: LD_ADDR_VAR 0 45
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 3
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50607: LD_ADDR_VAR 0 46
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50955: LD_ADDR_VAR 0 47
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51106: LD_ADDR_VAR 0 48
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51253: LD_ADDR_VAR 0 49
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51397: LD_ADDR_VAR 0 50
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51541: LD_ADDR_VAR 0 51
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51688: LD_ADDR_VAR 0 52
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51839: LD_ADDR_VAR 0 53
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52069: LD_ADDR_VAR 0 54
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52299: LD_ADDR_VAR 0 55
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52529: LD_ADDR_VAR 0 56
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52759: LD_ADDR_VAR 0 57
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52989: LD_ADDR_VAR 0 58
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53219: LD_ADDR_VAR 0 59
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53307: LD_ADDR_VAR 0 60
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53395: LD_ADDR_VAR 0 61
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53483: LD_ADDR_VAR 0 62
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53571: LD_ADDR_VAR 0 63
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53659: LD_ADDR_VAR 0 64
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// end ; 1 :
53747: GO 59644
53749: LD_INT 1
53751: DOUBLE
53752: EQUAL
53753: IFTRUE 53757
53755: GO 56380
53757: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 11
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53802: LD_ADDR_VAR 0 12
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53843: LD_ADDR_VAR 0 13
53847: PUSH
53848: LD_INT 3
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53883: LD_ADDR_VAR 0 14
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53924: LD_ADDR_VAR 0 15
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53968: LD_ADDR_VAR 0 16
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54014: LD_ADDR_VAR 0 17
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54058: LD_ADDR_VAR 0 18
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54099: LD_ADDR_VAR 0 19
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54139: LD_ADDR_VAR 0 20
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54180: LD_ADDR_VAR 0 21
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54224: LD_ADDR_VAR 0 22
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54270: LD_ADDR_VAR 0 23
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 4
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54314: LD_ADDR_VAR 0 24
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 4
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54355: LD_ADDR_VAR 0 25
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: LD_INT 3
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: LD_INT 4
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54395: LD_ADDR_VAR 0 26
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54436: LD_ADDR_VAR 0 27
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 4
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54480: LD_ADDR_VAR 0 28
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54526: LD_ADDR_VAR 0 29
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 4
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 5
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 5
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 6
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 6
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 5
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54681: LD_ADDR_VAR 0 30
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 4
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 4
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 5
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 5
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 5
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 6
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 6
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54824: LD_ADDR_VAR 0 31
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 4
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: LD_INT 4
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 4
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: PUSH
54892: LD_INT 4
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 5
54901: PUSH
54902: LD_INT 5
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: LD_INT 5
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 6
54921: PUSH
54922: LD_INT 5
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 6
54931: PUSH
54932: LD_INT 6
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 5
54941: PUSH
54942: LD_INT 6
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54963: LD_ADDR_VAR 0 32
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 4
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 5
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 5
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 4
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 6
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 6
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 5
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55106: LD_ADDR_VAR 0 33
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 4
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 4
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 4
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 5
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 5
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 5
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 6
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 6
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55261: LD_ADDR_VAR 0 34
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: LD_INT 4
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: NEG
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 4
55340: NEG
55341: PUSH
55342: LD_INT 5
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 5
55352: NEG
55353: PUSH
55354: LD_INT 4
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 5
55364: NEG
55365: PUSH
55366: LD_INT 5
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 5
55376: NEG
55377: PUSH
55378: LD_INT 6
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 6
55388: NEG
55389: PUSH
55390: LD_INT 5
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 6
55400: NEG
55401: PUSH
55402: LD_INT 6
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55424: LD_ADDR_VAR 0 41
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55468: LD_ADDR_VAR 0 42
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55509: LD_ADDR_VAR 0 43
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55549: LD_ADDR_VAR 0 44
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 3
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55590: LD_ADDR_VAR 0 45
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55634: LD_ADDR_VAR 0 46
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55680: LD_ADDR_VAR 0 47
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55713: LD_ADDR_VAR 0 48
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55744: LD_ADDR_VAR 0 49
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55773: LD_ADDR_VAR 0 50
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55802: LD_ADDR_VAR 0 51
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55833: LD_ADDR_VAR 0 52
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55866: LD_ADDR_VAR 0 53
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55910: LD_ADDR_VAR 0 54
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55951: LD_ADDR_VAR 0 55
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55991: LD_ADDR_VAR 0 56
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56032: LD_ADDR_VAR 0 57
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56076: LD_ADDR_VAR 0 58
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: LIST
56121: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56122: LD_ADDR_VAR 0 59
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56166: LD_ADDR_VAR 0 60
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56207: LD_ADDR_VAR 0 61
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56247: LD_ADDR_VAR 0 62
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56288: LD_ADDR_VAR 0 63
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56332: LD_ADDR_VAR 0 64
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// end ; 2 :
56378: GO 59644
56380: LD_INT 2
56382: DOUBLE
56383: EQUAL
56384: IFTRUE 56388
56386: GO 59643
56388: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56389: LD_ADDR_VAR 0 29
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 5
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 5
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: LD_INT 4
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 4
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 4
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 5
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 5
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 4
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 5
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 4
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 4
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: NEG
56787: PUSH
56788: LD_INT 5
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 4
56822: NEG
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 5
56834: NEG
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 5
56846: NEG
56847: PUSH
56848: LD_INT 5
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: LD_INT 5
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 5
56870: NEG
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56927: LD_ADDR_VAR 0 30
56931: PUSH
56932: LD_INT 4
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 4
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 5
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: LD_INT 5
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 4
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 4
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 4
57117: NEG
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 5
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 4
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 4
57291: NEG
57292: PUSH
57293: LD_INT 4
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: LD_INT 4
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 4
57315: NEG
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 4
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 5
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 5
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 5
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57474: LD_ADDR_VAR 0 31
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 4
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 5
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 5
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: LD_INT 5
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 4
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: LD_INT 4
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 4
57724: NEG
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: NEG
57737: PUSH
57738: LD_INT 4
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: LD_INT 5
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 5
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 5
57772: NEG
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 3
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 4
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 4
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 5
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 5
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 5
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58024: LD_ADDR_VAR 0 32
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 5
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 5
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 5
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: LD_INT 4
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 3
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 4
58193: NEG
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 4
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 4
58229: NEG
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 4
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 5
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 5
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 5
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 4
58476: PUSH
58477: LD_INT 5
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: LD_INT 5
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58571: LD_ADDR_VAR 0 33
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 5
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 4
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 4
58626: NEG
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: NEG
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: NEG
58651: PUSH
58652: LD_INT 5
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: LD_INT 5
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 5
58674: NEG
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 4
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 4
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 4
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 4
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 5
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 5
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: LD_INT 4
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 4
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 4
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 5
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 5
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 4
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 5
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 3
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59109: LD_ADDR_VAR 0 34
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 4
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 5
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 4
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 3
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 5
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 5
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 5
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: LD_INT 5
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 4
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 5
59381: PUSH
59382: LD_INT 3
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 5
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 3
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 4
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 4
59494: NEG
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 5
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 5
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 5
59573: NEG
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// end ; end ;
59641: GO 59644
59643: POP
// case btype of b_depot , b_warehouse :
59644: LD_VAR 0 1
59648: PUSH
59649: LD_INT 0
59651: DOUBLE
59652: EQUAL
59653: IFTRUE 59663
59655: LD_INT 1
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59663
59661: GO 59864
59663: POP
// case nation of nation_american :
59664: LD_VAR 0 5
59668: PUSH
59669: LD_INT 1
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59677
59675: GO 59733
59677: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59678: LD_ADDR_VAR 0 9
59682: PUSH
59683: LD_VAR 0 11
59687: PUSH
59688: LD_VAR 0 12
59692: PUSH
59693: LD_VAR 0 13
59697: PUSH
59698: LD_VAR 0 14
59702: PUSH
59703: LD_VAR 0 15
59707: PUSH
59708: LD_VAR 0 16
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: PUSH
59721: LD_VAR 0 4
59725: PUSH
59726: LD_INT 1
59728: PLUS
59729: ARRAY
59730: ST_TO_ADDR
59731: GO 59862
59733: LD_INT 2
59735: DOUBLE
59736: EQUAL
59737: IFTRUE 59741
59739: GO 59797
59741: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59742: LD_ADDR_VAR 0 9
59746: PUSH
59747: LD_VAR 0 17
59751: PUSH
59752: LD_VAR 0 18
59756: PUSH
59757: LD_VAR 0 19
59761: PUSH
59762: LD_VAR 0 20
59766: PUSH
59767: LD_VAR 0 21
59771: PUSH
59772: LD_VAR 0 22
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: PUSH
59785: LD_VAR 0 4
59789: PUSH
59790: LD_INT 1
59792: PLUS
59793: ARRAY
59794: ST_TO_ADDR
59795: GO 59862
59797: LD_INT 3
59799: DOUBLE
59800: EQUAL
59801: IFTRUE 59805
59803: GO 59861
59805: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59806: LD_ADDR_VAR 0 9
59810: PUSH
59811: LD_VAR 0 23
59815: PUSH
59816: LD_VAR 0 24
59820: PUSH
59821: LD_VAR 0 25
59825: PUSH
59826: LD_VAR 0 26
59830: PUSH
59831: LD_VAR 0 27
59835: PUSH
59836: LD_VAR 0 28
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: PUSH
59849: LD_VAR 0 4
59853: PUSH
59854: LD_INT 1
59856: PLUS
59857: ARRAY
59858: ST_TO_ADDR
59859: GO 59862
59861: POP
59862: GO 60417
59864: LD_INT 2
59866: DOUBLE
59867: EQUAL
59868: IFTRUE 59878
59870: LD_INT 3
59872: DOUBLE
59873: EQUAL
59874: IFTRUE 59878
59876: GO 59934
59878: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59879: LD_ADDR_VAR 0 9
59883: PUSH
59884: LD_VAR 0 29
59888: PUSH
59889: LD_VAR 0 30
59893: PUSH
59894: LD_VAR 0 31
59898: PUSH
59899: LD_VAR 0 32
59903: PUSH
59904: LD_VAR 0 33
59908: PUSH
59909: LD_VAR 0 34
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: PUSH
59922: LD_VAR 0 4
59926: PUSH
59927: LD_INT 1
59929: PLUS
59930: ARRAY
59931: ST_TO_ADDR
59932: GO 60417
59934: LD_INT 16
59936: DOUBLE
59937: EQUAL
59938: IFTRUE 59996
59940: LD_INT 17
59942: DOUBLE
59943: EQUAL
59944: IFTRUE 59996
59946: LD_INT 18
59948: DOUBLE
59949: EQUAL
59950: IFTRUE 59996
59952: LD_INT 19
59954: DOUBLE
59955: EQUAL
59956: IFTRUE 59996
59958: LD_INT 22
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 59996
59964: LD_INT 20
59966: DOUBLE
59967: EQUAL
59968: IFTRUE 59996
59970: LD_INT 21
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 59996
59976: LD_INT 23
59978: DOUBLE
59979: EQUAL
59980: IFTRUE 59996
59982: LD_INT 24
59984: DOUBLE
59985: EQUAL
59986: IFTRUE 59996
59988: LD_INT 25
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 59996
59994: GO 60052
59996: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59997: LD_ADDR_VAR 0 9
60001: PUSH
60002: LD_VAR 0 35
60006: PUSH
60007: LD_VAR 0 36
60011: PUSH
60012: LD_VAR 0 37
60016: PUSH
60017: LD_VAR 0 38
60021: PUSH
60022: LD_VAR 0 39
60026: PUSH
60027: LD_VAR 0 40
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: PUSH
60040: LD_VAR 0 4
60044: PUSH
60045: LD_INT 1
60047: PLUS
60048: ARRAY
60049: ST_TO_ADDR
60050: GO 60417
60052: LD_INT 6
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60108
60058: LD_INT 7
60060: DOUBLE
60061: EQUAL
60062: IFTRUE 60108
60064: LD_INT 8
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60108
60070: LD_INT 13
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60108
60076: LD_INT 12
60078: DOUBLE
60079: EQUAL
60080: IFTRUE 60108
60082: LD_INT 15
60084: DOUBLE
60085: EQUAL
60086: IFTRUE 60108
60088: LD_INT 11
60090: DOUBLE
60091: EQUAL
60092: IFTRUE 60108
60094: LD_INT 14
60096: DOUBLE
60097: EQUAL
60098: IFTRUE 60108
60100: LD_INT 10
60102: DOUBLE
60103: EQUAL
60104: IFTRUE 60108
60106: GO 60164
60108: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60109: LD_ADDR_VAR 0 9
60113: PUSH
60114: LD_VAR 0 41
60118: PUSH
60119: LD_VAR 0 42
60123: PUSH
60124: LD_VAR 0 43
60128: PUSH
60129: LD_VAR 0 44
60133: PUSH
60134: LD_VAR 0 45
60138: PUSH
60139: LD_VAR 0 46
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: PUSH
60152: LD_VAR 0 4
60156: PUSH
60157: LD_INT 1
60159: PLUS
60160: ARRAY
60161: ST_TO_ADDR
60162: GO 60417
60164: LD_INT 36
60166: DOUBLE
60167: EQUAL
60168: IFTRUE 60172
60170: GO 60228
60172: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60173: LD_ADDR_VAR 0 9
60177: PUSH
60178: LD_VAR 0 47
60182: PUSH
60183: LD_VAR 0 48
60187: PUSH
60188: LD_VAR 0 49
60192: PUSH
60193: LD_VAR 0 50
60197: PUSH
60198: LD_VAR 0 51
60202: PUSH
60203: LD_VAR 0 52
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: PUSH
60216: LD_VAR 0 4
60220: PUSH
60221: LD_INT 1
60223: PLUS
60224: ARRAY
60225: ST_TO_ADDR
60226: GO 60417
60228: LD_INT 4
60230: DOUBLE
60231: EQUAL
60232: IFTRUE 60254
60234: LD_INT 5
60236: DOUBLE
60237: EQUAL
60238: IFTRUE 60254
60240: LD_INT 34
60242: DOUBLE
60243: EQUAL
60244: IFTRUE 60254
60246: LD_INT 37
60248: DOUBLE
60249: EQUAL
60250: IFTRUE 60254
60252: GO 60310
60254: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60255: LD_ADDR_VAR 0 9
60259: PUSH
60260: LD_VAR 0 53
60264: PUSH
60265: LD_VAR 0 54
60269: PUSH
60270: LD_VAR 0 55
60274: PUSH
60275: LD_VAR 0 56
60279: PUSH
60280: LD_VAR 0 57
60284: PUSH
60285: LD_VAR 0 58
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: PUSH
60298: LD_VAR 0 4
60302: PUSH
60303: LD_INT 1
60305: PLUS
60306: ARRAY
60307: ST_TO_ADDR
60308: GO 60417
60310: LD_INT 31
60312: DOUBLE
60313: EQUAL
60314: IFTRUE 60360
60316: LD_INT 32
60318: DOUBLE
60319: EQUAL
60320: IFTRUE 60360
60322: LD_INT 33
60324: DOUBLE
60325: EQUAL
60326: IFTRUE 60360
60328: LD_INT 27
60330: DOUBLE
60331: EQUAL
60332: IFTRUE 60360
60334: LD_INT 26
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60360
60340: LD_INT 28
60342: DOUBLE
60343: EQUAL
60344: IFTRUE 60360
60346: LD_INT 29
60348: DOUBLE
60349: EQUAL
60350: IFTRUE 60360
60352: LD_INT 30
60354: DOUBLE
60355: EQUAL
60356: IFTRUE 60360
60358: GO 60416
60360: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60361: LD_ADDR_VAR 0 9
60365: PUSH
60366: LD_VAR 0 59
60370: PUSH
60371: LD_VAR 0 60
60375: PUSH
60376: LD_VAR 0 61
60380: PUSH
60381: LD_VAR 0 62
60385: PUSH
60386: LD_VAR 0 63
60390: PUSH
60391: LD_VAR 0 64
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 4
60408: PUSH
60409: LD_INT 1
60411: PLUS
60412: ARRAY
60413: ST_TO_ADDR
60414: GO 60417
60416: POP
// temp_list2 = [ ] ;
60417: LD_ADDR_VAR 0 10
60421: PUSH
60422: EMPTY
60423: ST_TO_ADDR
// for i in temp_list do
60424: LD_ADDR_VAR 0 8
60428: PUSH
60429: LD_VAR 0 9
60433: PUSH
60434: FOR_IN
60435: IFFALSE 60487
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60437: LD_ADDR_VAR 0 10
60441: PUSH
60442: LD_VAR 0 10
60446: PUSH
60447: LD_VAR 0 8
60451: PUSH
60452: LD_INT 1
60454: ARRAY
60455: PUSH
60456: LD_VAR 0 2
60460: PLUS
60461: PUSH
60462: LD_VAR 0 8
60466: PUSH
60467: LD_INT 2
60469: ARRAY
60470: PUSH
60471: LD_VAR 0 3
60475: PLUS
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: ADD
60484: ST_TO_ADDR
60485: GO 60434
60487: POP
60488: POP
// result = temp_list2 ;
60489: LD_ADDR_VAR 0 7
60493: PUSH
60494: LD_VAR 0 10
60498: ST_TO_ADDR
// end ;
60499: LD_VAR 0 7
60503: RET
// export function EnemyInRange ( unit , dist ) ; begin
60504: LD_INT 0
60506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60507: LD_ADDR_VAR 0 3
60511: PUSH
60512: LD_VAR 0 1
60516: PPUSH
60517: CALL_OW 255
60521: PPUSH
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 250
60531: PPUSH
60532: LD_VAR 0 1
60536: PPUSH
60537: CALL_OW 251
60541: PPUSH
60542: LD_VAR 0 2
60546: PPUSH
60547: CALL 34275 0 4
60551: PUSH
60552: LD_INT 4
60554: ARRAY
60555: ST_TO_ADDR
// end ;
60556: LD_VAR 0 3
60560: RET
// export function PlayerSeeMe ( unit ) ; begin
60561: LD_INT 0
60563: PPUSH
// result := See ( your_side , unit ) ;
60564: LD_ADDR_VAR 0 2
60568: PUSH
60569: LD_OWVAR 2
60573: PPUSH
60574: LD_VAR 0 1
60578: PPUSH
60579: CALL_OW 292
60583: ST_TO_ADDR
// end ;
60584: LD_VAR 0 2
60588: RET
// export function ReverseDir ( unit ) ; begin
60589: LD_INT 0
60591: PPUSH
// if not unit then
60592: LD_VAR 0 1
60596: NOT
60597: IFFALSE 60601
// exit ;
60599: GO 60624
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60601: LD_ADDR_VAR 0 2
60605: PUSH
60606: LD_VAR 0 1
60610: PPUSH
60611: CALL_OW 254
60615: PUSH
60616: LD_INT 3
60618: PLUS
60619: PUSH
60620: LD_INT 6
60622: MOD
60623: ST_TO_ADDR
// end ;
60624: LD_VAR 0 2
60628: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60629: LD_INT 0
60631: PPUSH
60632: PPUSH
60633: PPUSH
60634: PPUSH
60635: PPUSH
// if not hexes then
60636: LD_VAR 0 2
60640: NOT
60641: IFFALSE 60645
// exit ;
60643: GO 60793
// dist := 9999 ;
60645: LD_ADDR_VAR 0 5
60649: PUSH
60650: LD_INT 9999
60652: ST_TO_ADDR
// for i = 1 to hexes do
60653: LD_ADDR_VAR 0 4
60657: PUSH
60658: DOUBLE
60659: LD_INT 1
60661: DEC
60662: ST_TO_ADDR
60663: LD_VAR 0 2
60667: PUSH
60668: FOR_TO
60669: IFFALSE 60781
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60671: LD_VAR 0 1
60675: PPUSH
60676: LD_VAR 0 2
60680: PUSH
60681: LD_VAR 0 4
60685: ARRAY
60686: PUSH
60687: LD_INT 1
60689: ARRAY
60690: PPUSH
60691: LD_VAR 0 2
60695: PUSH
60696: LD_VAR 0 4
60700: ARRAY
60701: PUSH
60702: LD_INT 2
60704: ARRAY
60705: PPUSH
60706: CALL_OW 297
60710: PUSH
60711: LD_VAR 0 5
60715: LESS
60716: IFFALSE 60779
// begin hex := hexes [ i ] ;
60718: LD_ADDR_VAR 0 7
60722: PUSH
60723: LD_VAR 0 2
60727: PUSH
60728: LD_VAR 0 4
60732: ARRAY
60733: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60734: LD_ADDR_VAR 0 5
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_VAR 0 4
60753: ARRAY
60754: PUSH
60755: LD_INT 1
60757: ARRAY
60758: PPUSH
60759: LD_VAR 0 2
60763: PUSH
60764: LD_VAR 0 4
60768: ARRAY
60769: PUSH
60770: LD_INT 2
60772: ARRAY
60773: PPUSH
60774: CALL_OW 297
60778: ST_TO_ADDR
// end ; end ;
60779: GO 60668
60781: POP
60782: POP
// result := hex ;
60783: LD_ADDR_VAR 0 3
60787: PUSH
60788: LD_VAR 0 7
60792: ST_TO_ADDR
// end ;
60793: LD_VAR 0 3
60797: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60798: LD_INT 0
60800: PPUSH
60801: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60802: LD_VAR 0 1
60806: NOT
60807: PUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_INT 21
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 23
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PPUSH
60837: CALL_OW 69
60841: IN
60842: NOT
60843: OR
60844: IFFALSE 60848
// exit ;
60846: GO 60895
// for i = 1 to 3 do
60848: LD_ADDR_VAR 0 3
60852: PUSH
60853: DOUBLE
60854: LD_INT 1
60856: DEC
60857: ST_TO_ADDR
60858: LD_INT 3
60860: PUSH
60861: FOR_TO
60862: IFFALSE 60893
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 250
60873: PPUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 251
60883: PPUSH
60884: LD_INT 1
60886: PPUSH
60887: CALL_OW 453
60891: GO 60861
60893: POP
60894: POP
// end ;
60895: LD_VAR 0 2
60899: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60900: LD_INT 0
60902: PPUSH
60903: PPUSH
60904: PPUSH
60905: PPUSH
60906: PPUSH
60907: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60908: LD_VAR 0 1
60912: NOT
60913: PUSH
60914: LD_VAR 0 2
60918: NOT
60919: OR
60920: PUSH
60921: LD_VAR 0 1
60925: PPUSH
60926: CALL_OW 314
60930: OR
60931: IFFALSE 60935
// exit ;
60933: GO 61376
// x := GetX ( enemy_unit ) ;
60935: LD_ADDR_VAR 0 7
60939: PUSH
60940: LD_VAR 0 2
60944: PPUSH
60945: CALL_OW 250
60949: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60950: LD_ADDR_VAR 0 8
60954: PUSH
60955: LD_VAR 0 2
60959: PPUSH
60960: CALL_OW 251
60964: ST_TO_ADDR
// if not x or not y then
60965: LD_VAR 0 7
60969: NOT
60970: PUSH
60971: LD_VAR 0 8
60975: NOT
60976: OR
60977: IFFALSE 60981
// exit ;
60979: GO 61376
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60981: LD_ADDR_VAR 0 6
60985: PUSH
60986: LD_VAR 0 7
60990: PPUSH
60991: LD_INT 0
60993: PPUSH
60994: LD_INT 4
60996: PPUSH
60997: CALL_OW 272
61001: PUSH
61002: LD_VAR 0 8
61006: PPUSH
61007: LD_INT 0
61009: PPUSH
61010: LD_INT 4
61012: PPUSH
61013: CALL_OW 273
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_VAR 0 7
61026: PPUSH
61027: LD_INT 1
61029: PPUSH
61030: LD_INT 4
61032: PPUSH
61033: CALL_OW 272
61037: PUSH
61038: LD_VAR 0 8
61042: PPUSH
61043: LD_INT 1
61045: PPUSH
61046: LD_INT 4
61048: PPUSH
61049: CALL_OW 273
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_VAR 0 7
61062: PPUSH
61063: LD_INT 2
61065: PPUSH
61066: LD_INT 4
61068: PPUSH
61069: CALL_OW 272
61073: PUSH
61074: LD_VAR 0 8
61078: PPUSH
61079: LD_INT 2
61081: PPUSH
61082: LD_INT 4
61084: PPUSH
61085: CALL_OW 273
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_VAR 0 7
61098: PPUSH
61099: LD_INT 3
61101: PPUSH
61102: LD_INT 4
61104: PPUSH
61105: CALL_OW 272
61109: PUSH
61110: LD_VAR 0 8
61114: PPUSH
61115: LD_INT 3
61117: PPUSH
61118: LD_INT 4
61120: PPUSH
61121: CALL_OW 273
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_VAR 0 7
61134: PPUSH
61135: LD_INT 4
61137: PPUSH
61138: LD_INT 4
61140: PPUSH
61141: CALL_OW 272
61145: PUSH
61146: LD_VAR 0 8
61150: PPUSH
61151: LD_INT 4
61153: PPUSH
61154: LD_INT 4
61156: PPUSH
61157: CALL_OW 273
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_VAR 0 7
61170: PPUSH
61171: LD_INT 5
61173: PPUSH
61174: LD_INT 4
61176: PPUSH
61177: CALL_OW 272
61181: PUSH
61182: LD_VAR 0 8
61186: PPUSH
61187: LD_INT 5
61189: PPUSH
61190: LD_INT 4
61192: PPUSH
61193: CALL_OW 273
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: ST_TO_ADDR
// for i = tmp downto 1 do
61210: LD_ADDR_VAR 0 4
61214: PUSH
61215: DOUBLE
61216: LD_VAR 0 6
61220: INC
61221: ST_TO_ADDR
61222: LD_INT 1
61224: PUSH
61225: FOR_DOWNTO
61226: IFFALSE 61327
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61228: LD_VAR 0 6
61232: PUSH
61233: LD_VAR 0 4
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PPUSH
61243: LD_VAR 0 6
61247: PUSH
61248: LD_VAR 0 4
61252: ARRAY
61253: PUSH
61254: LD_INT 2
61256: ARRAY
61257: PPUSH
61258: CALL_OW 488
61262: NOT
61263: PUSH
61264: LD_VAR 0 6
61268: PUSH
61269: LD_VAR 0 4
61273: ARRAY
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 6
61283: PUSH
61284: LD_VAR 0 4
61288: ARRAY
61289: PUSH
61290: LD_INT 2
61292: ARRAY
61293: PPUSH
61294: CALL_OW 428
61298: PUSH
61299: LD_INT 0
61301: NONEQUAL
61302: OR
61303: IFFALSE 61325
// tmp := Delete ( tmp , i ) ;
61305: LD_ADDR_VAR 0 6
61309: PUSH
61310: LD_VAR 0 6
61314: PPUSH
61315: LD_VAR 0 4
61319: PPUSH
61320: CALL_OW 3
61324: ST_TO_ADDR
61325: GO 61225
61327: POP
61328: POP
// j := GetClosestHex ( unit , tmp ) ;
61329: LD_ADDR_VAR 0 5
61333: PUSH
61334: LD_VAR 0 1
61338: PPUSH
61339: LD_VAR 0 6
61343: PPUSH
61344: CALL 60629 0 2
61348: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61349: LD_VAR 0 1
61353: PPUSH
61354: LD_VAR 0 5
61358: PUSH
61359: LD_INT 1
61361: ARRAY
61362: PPUSH
61363: LD_VAR 0 5
61367: PUSH
61368: LD_INT 2
61370: ARRAY
61371: PPUSH
61372: CALL_OW 111
// end ;
61376: LD_VAR 0 3
61380: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61381: LD_INT 0
61383: PPUSH
61384: PPUSH
61385: PPUSH
// uc_side = 0 ;
61386: LD_ADDR_OWVAR 20
61390: PUSH
61391: LD_INT 0
61393: ST_TO_ADDR
// uc_nation = 0 ;
61394: LD_ADDR_OWVAR 21
61398: PUSH
61399: LD_INT 0
61401: ST_TO_ADDR
// InitHc_All ( ) ;
61402: CALL_OW 584
// InitVc ;
61406: CALL_OW 20
// if mastodonts then
61410: LD_VAR 0 6
61414: IFFALSE 61481
// for i = 1 to mastodonts do
61416: LD_ADDR_VAR 0 11
61420: PUSH
61421: DOUBLE
61422: LD_INT 1
61424: DEC
61425: ST_TO_ADDR
61426: LD_VAR 0 6
61430: PUSH
61431: FOR_TO
61432: IFFALSE 61479
// begin vc_chassis := 31 ;
61434: LD_ADDR_OWVAR 37
61438: PUSH
61439: LD_INT 31
61441: ST_TO_ADDR
// vc_control := control_rider ;
61442: LD_ADDR_OWVAR 38
61446: PUSH
61447: LD_INT 4
61449: ST_TO_ADDR
// animal := CreateVehicle ;
61450: LD_ADDR_VAR 0 12
61454: PUSH
61455: CALL_OW 45
61459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61460: LD_VAR 0 12
61464: PPUSH
61465: LD_VAR 0 8
61469: PPUSH
61470: LD_INT 0
61472: PPUSH
61473: CALL 63669 0 3
// end ;
61477: GO 61431
61479: POP
61480: POP
// if horses then
61481: LD_VAR 0 5
61485: IFFALSE 61552
// for i = 1 to horses do
61487: LD_ADDR_VAR 0 11
61491: PUSH
61492: DOUBLE
61493: LD_INT 1
61495: DEC
61496: ST_TO_ADDR
61497: LD_VAR 0 5
61501: PUSH
61502: FOR_TO
61503: IFFALSE 61550
// begin hc_class := 21 ;
61505: LD_ADDR_OWVAR 28
61509: PUSH
61510: LD_INT 21
61512: ST_TO_ADDR
// hc_gallery :=  ;
61513: LD_ADDR_OWVAR 33
61517: PUSH
61518: LD_STRING 
61520: ST_TO_ADDR
// animal := CreateHuman ;
61521: LD_ADDR_VAR 0 12
61525: PUSH
61526: CALL_OW 44
61530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61531: LD_VAR 0 12
61535: PPUSH
61536: LD_VAR 0 8
61540: PPUSH
61541: LD_INT 0
61543: PPUSH
61544: CALL 63669 0 3
// end ;
61548: GO 61502
61550: POP
61551: POP
// if birds then
61552: LD_VAR 0 1
61556: IFFALSE 61623
// for i = 1 to birds do
61558: LD_ADDR_VAR 0 11
61562: PUSH
61563: DOUBLE
61564: LD_INT 1
61566: DEC
61567: ST_TO_ADDR
61568: LD_VAR 0 1
61572: PUSH
61573: FOR_TO
61574: IFFALSE 61621
// begin hc_class = 18 ;
61576: LD_ADDR_OWVAR 28
61580: PUSH
61581: LD_INT 18
61583: ST_TO_ADDR
// hc_gallery =  ;
61584: LD_ADDR_OWVAR 33
61588: PUSH
61589: LD_STRING 
61591: ST_TO_ADDR
// animal := CreateHuman ;
61592: LD_ADDR_VAR 0 12
61596: PUSH
61597: CALL_OW 44
61601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61602: LD_VAR 0 12
61606: PPUSH
61607: LD_VAR 0 8
61611: PPUSH
61612: LD_INT 0
61614: PPUSH
61615: CALL 63669 0 3
// end ;
61619: GO 61573
61621: POP
61622: POP
// if tigers then
61623: LD_VAR 0 2
61627: IFFALSE 61711
// for i = 1 to tigers do
61629: LD_ADDR_VAR 0 11
61633: PUSH
61634: DOUBLE
61635: LD_INT 1
61637: DEC
61638: ST_TO_ADDR
61639: LD_VAR 0 2
61643: PUSH
61644: FOR_TO
61645: IFFALSE 61709
// begin hc_class = class_tiger ;
61647: LD_ADDR_OWVAR 28
61651: PUSH
61652: LD_INT 14
61654: ST_TO_ADDR
// hc_gallery =  ;
61655: LD_ADDR_OWVAR 33
61659: PUSH
61660: LD_STRING 
61662: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61663: LD_ADDR_OWVAR 35
61667: PUSH
61668: LD_INT 7
61670: NEG
61671: PPUSH
61672: LD_INT 7
61674: PPUSH
61675: CALL_OW 12
61679: ST_TO_ADDR
// animal := CreateHuman ;
61680: LD_ADDR_VAR 0 12
61684: PUSH
61685: CALL_OW 44
61689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61690: LD_VAR 0 12
61694: PPUSH
61695: LD_VAR 0 8
61699: PPUSH
61700: LD_INT 0
61702: PPUSH
61703: CALL 63669 0 3
// end ;
61707: GO 61644
61709: POP
61710: POP
// if apemans then
61711: LD_VAR 0 3
61715: IFFALSE 61838
// for i = 1 to apemans do
61717: LD_ADDR_VAR 0 11
61721: PUSH
61722: DOUBLE
61723: LD_INT 1
61725: DEC
61726: ST_TO_ADDR
61727: LD_VAR 0 3
61731: PUSH
61732: FOR_TO
61733: IFFALSE 61836
// begin hc_class = class_apeman ;
61735: LD_ADDR_OWVAR 28
61739: PUSH
61740: LD_INT 12
61742: ST_TO_ADDR
// hc_gallery =  ;
61743: LD_ADDR_OWVAR 33
61747: PUSH
61748: LD_STRING 
61750: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61751: LD_ADDR_OWVAR 35
61755: PUSH
61756: LD_INT 5
61758: NEG
61759: PPUSH
61760: LD_INT 5
61762: PPUSH
61763: CALL_OW 12
61767: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61768: LD_ADDR_OWVAR 31
61772: PUSH
61773: LD_INT 1
61775: PPUSH
61776: LD_INT 3
61778: PPUSH
61779: CALL_OW 12
61783: PUSH
61784: LD_INT 1
61786: PPUSH
61787: LD_INT 3
61789: PPUSH
61790: CALL_OW 12
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// animal := CreateHuman ;
61807: LD_ADDR_VAR 0 12
61811: PUSH
61812: CALL_OW 44
61816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61817: LD_VAR 0 12
61821: PPUSH
61822: LD_VAR 0 8
61826: PPUSH
61827: LD_INT 0
61829: PPUSH
61830: CALL 63669 0 3
// end ;
61834: GO 61732
61836: POP
61837: POP
// if enchidnas then
61838: LD_VAR 0 4
61842: IFFALSE 61909
// for i = 1 to enchidnas do
61844: LD_ADDR_VAR 0 11
61848: PUSH
61849: DOUBLE
61850: LD_INT 1
61852: DEC
61853: ST_TO_ADDR
61854: LD_VAR 0 4
61858: PUSH
61859: FOR_TO
61860: IFFALSE 61907
// begin hc_class = 13 ;
61862: LD_ADDR_OWVAR 28
61866: PUSH
61867: LD_INT 13
61869: ST_TO_ADDR
// hc_gallery =  ;
61870: LD_ADDR_OWVAR 33
61874: PUSH
61875: LD_STRING 
61877: ST_TO_ADDR
// animal := CreateHuman ;
61878: LD_ADDR_VAR 0 12
61882: PUSH
61883: CALL_OW 44
61887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61888: LD_VAR 0 12
61892: PPUSH
61893: LD_VAR 0 8
61897: PPUSH
61898: LD_INT 0
61900: PPUSH
61901: CALL 63669 0 3
// end ;
61905: GO 61859
61907: POP
61908: POP
// if fishes then
61909: LD_VAR 0 7
61913: IFFALSE 61980
// for i = 1 to fishes do
61915: LD_ADDR_VAR 0 11
61919: PUSH
61920: DOUBLE
61921: LD_INT 1
61923: DEC
61924: ST_TO_ADDR
61925: LD_VAR 0 7
61929: PUSH
61930: FOR_TO
61931: IFFALSE 61978
// begin hc_class = 20 ;
61933: LD_ADDR_OWVAR 28
61937: PUSH
61938: LD_INT 20
61940: ST_TO_ADDR
// hc_gallery =  ;
61941: LD_ADDR_OWVAR 33
61945: PUSH
61946: LD_STRING 
61948: ST_TO_ADDR
// animal := CreateHuman ;
61949: LD_ADDR_VAR 0 12
61953: PUSH
61954: CALL_OW 44
61958: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61959: LD_VAR 0 12
61963: PPUSH
61964: LD_VAR 0 9
61968: PPUSH
61969: LD_INT 0
61971: PPUSH
61972: CALL 63669 0 3
// end ;
61976: GO 61930
61978: POP
61979: POP
// end ;
61980: LD_VAR 0 10
61984: RET
// export function WantHeal ( sci , unit ) ; begin
61985: LD_INT 0
61987: PPUSH
// if GetTaskList ( sci ) > 0 then
61988: LD_VAR 0 1
61992: PPUSH
61993: CALL_OW 437
61997: PUSH
61998: LD_INT 0
62000: GREATER
62001: IFFALSE 62071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62003: LD_VAR 0 1
62007: PPUSH
62008: CALL_OW 437
62012: PUSH
62013: LD_INT 1
62015: ARRAY
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: PUSH
62021: LD_STRING l
62023: EQUAL
62024: PUSH
62025: LD_VAR 0 1
62029: PPUSH
62030: CALL_OW 437
62034: PUSH
62035: LD_INT 1
62037: ARRAY
62038: PUSH
62039: LD_INT 4
62041: ARRAY
62042: PUSH
62043: LD_VAR 0 2
62047: EQUAL
62048: AND
62049: IFFALSE 62061
// result := true else
62051: LD_ADDR_VAR 0 3
62055: PUSH
62056: LD_INT 1
62058: ST_TO_ADDR
62059: GO 62069
// result := false ;
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: LD_INT 0
62068: ST_TO_ADDR
// end else
62069: GO 62079
// result := false ;
62071: LD_ADDR_VAR 0 3
62075: PUSH
62076: LD_INT 0
62078: ST_TO_ADDR
// end ;
62079: LD_VAR 0 3
62083: RET
// export function HealTarget ( sci ) ; begin
62084: LD_INT 0
62086: PPUSH
// if not sci then
62087: LD_VAR 0 1
62091: NOT
62092: IFFALSE 62096
// exit ;
62094: GO 62161
// result := 0 ;
62096: LD_ADDR_VAR 0 2
62100: PUSH
62101: LD_INT 0
62103: ST_TO_ADDR
// if GetTaskList ( sci ) then
62104: LD_VAR 0 1
62108: PPUSH
62109: CALL_OW 437
62113: IFFALSE 62161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 437
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PUSH
62129: LD_INT 1
62131: ARRAY
62132: PUSH
62133: LD_STRING l
62135: EQUAL
62136: IFFALSE 62161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62138: LD_ADDR_VAR 0 2
62142: PUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL_OW 437
62152: PUSH
62153: LD_INT 1
62155: ARRAY
62156: PUSH
62157: LD_INT 4
62159: ARRAY
62160: ST_TO_ADDR
// end ;
62161: LD_VAR 0 2
62165: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62166: LD_INT 0
62168: PPUSH
62169: PPUSH
62170: PPUSH
62171: PPUSH
// if not base_units then
62172: LD_VAR 0 1
62176: NOT
62177: IFFALSE 62181
// exit ;
62179: GO 62268
// result := false ;
62181: LD_ADDR_VAR 0 2
62185: PUSH
62186: LD_INT 0
62188: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62189: LD_ADDR_VAR 0 5
62193: PUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: LD_INT 21
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PPUSH
62209: CALL_OW 72
62213: ST_TO_ADDR
// if not tmp then
62214: LD_VAR 0 5
62218: NOT
62219: IFFALSE 62223
// exit ;
62221: GO 62268
// for i in tmp do
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_VAR 0 5
62232: PUSH
62233: FOR_IN
62234: IFFALSE 62266
// begin result := EnemyInRange ( i , 22 ) ;
62236: LD_ADDR_VAR 0 2
62240: PUSH
62241: LD_VAR 0 3
62245: PPUSH
62246: LD_INT 22
62248: PPUSH
62249: CALL 60504 0 2
62253: ST_TO_ADDR
// if result then
62254: LD_VAR 0 2
62258: IFFALSE 62264
// exit ;
62260: POP
62261: POP
62262: GO 62268
// end ;
62264: GO 62233
62266: POP
62267: POP
// end ;
62268: LD_VAR 0 2
62272: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62273: LD_INT 0
62275: PPUSH
62276: PPUSH
// if not units then
62277: LD_VAR 0 1
62281: NOT
62282: IFFALSE 62286
// exit ;
62284: GO 62356
// result := [ ] ;
62286: LD_ADDR_VAR 0 3
62290: PUSH
62291: EMPTY
62292: ST_TO_ADDR
// for i in units do
62293: LD_ADDR_VAR 0 4
62297: PUSH
62298: LD_VAR 0 1
62302: PUSH
62303: FOR_IN
62304: IFFALSE 62354
// if GetTag ( i ) = tag then
62306: LD_VAR 0 4
62310: PPUSH
62311: CALL_OW 110
62315: PUSH
62316: LD_VAR 0 2
62320: EQUAL
62321: IFFALSE 62352
// result := Insert ( result , result + 1 , i ) ;
62323: LD_ADDR_VAR 0 3
62327: PUSH
62328: LD_VAR 0 3
62332: PPUSH
62333: LD_VAR 0 3
62337: PUSH
62338: LD_INT 1
62340: PLUS
62341: PPUSH
62342: LD_VAR 0 4
62346: PPUSH
62347: CALL_OW 2
62351: ST_TO_ADDR
62352: GO 62303
62354: POP
62355: POP
// end ;
62356: LD_VAR 0 3
62360: RET
// export function IsDriver ( un ) ; begin
62361: LD_INT 0
62363: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62364: LD_ADDR_VAR 0 2
62368: PUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_INT 55
62376: PUSH
62377: EMPTY
62378: LIST
62379: PPUSH
62380: CALL_OW 69
62384: IN
62385: ST_TO_ADDR
// end ;
62386: LD_VAR 0 2
62390: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
// list := [ ] ;
62395: LD_ADDR_VAR 0 5
62399: PUSH
62400: EMPTY
62401: ST_TO_ADDR
// case d of 0 :
62402: LD_VAR 0 3
62406: PUSH
62407: LD_INT 0
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62415
62413: GO 62548
62415: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: LD_INT 4
62428: MINUS
62429: PUSH
62430: LD_VAR 0 2
62434: PUSH
62435: LD_INT 4
62437: MINUS
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: PUSH
62447: LD_VAR 0 1
62451: PUSH
62452: LD_INT 3
62454: MINUS
62455: PUSH
62456: LD_VAR 0 2
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: PUSH
62469: LD_VAR 0 1
62473: PUSH
62474: LD_INT 4
62476: PLUS
62477: PUSH
62478: LD_VAR 0 2
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: LD_INT 3
62498: PLUS
62499: PUSH
62500: LD_VAR 0 2
62504: PUSH
62505: LD_INT 3
62507: PLUS
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: PUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_VAR 0 2
62526: PUSH
62527: LD_INT 4
62529: PLUS
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: ST_TO_ADDR
// end ; 1 :
62546: GO 63246
62548: LD_INT 1
62550: DOUBLE
62551: EQUAL
62552: IFTRUE 62556
62554: GO 62689
62556: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62557: LD_ADDR_VAR 0 5
62561: PUSH
62562: LD_VAR 0 1
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: LD_INT 4
62574: MINUS
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: PUSH
62584: LD_VAR 0 1
62588: PUSH
62589: LD_INT 3
62591: MINUS
62592: PUSH
62593: LD_VAR 0 2
62597: PUSH
62598: LD_INT 3
62600: MINUS
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: PUSH
62610: LD_VAR 0 1
62614: PUSH
62615: LD_INT 4
62617: MINUS
62618: PUSH
62619: LD_VAR 0 2
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PUSH
62632: LD_VAR 0 1
62636: PUSH
62637: LD_VAR 0 2
62641: PUSH
62642: LD_INT 3
62644: PLUS
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: PUSH
62654: LD_VAR 0 1
62658: PUSH
62659: LD_INT 4
62661: PLUS
62662: PUSH
62663: LD_VAR 0 2
62667: PUSH
62668: LD_INT 4
62670: PLUS
62671: PUSH
62672: LD_INT 5
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// end ; 2 :
62687: GO 63246
62689: LD_INT 2
62691: DOUBLE
62692: EQUAL
62693: IFTRUE 62697
62695: GO 62826
62697: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62698: LD_ADDR_VAR 0 5
62702: PUSH
62703: LD_VAR 0 1
62707: PUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_INT 3
62715: MINUS
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: LIST
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: LD_INT 4
62732: PLUS
62733: PUSH
62734: LD_VAR 0 2
62738: PUSH
62739: LD_INT 4
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 1
62751: PUSH
62752: LD_VAR 0 2
62756: PUSH
62757: LD_INT 4
62759: PLUS
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: LD_VAR 0 1
62773: PUSH
62774: LD_INT 3
62776: MINUS
62777: PUSH
62778: LD_VAR 0 2
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: PUSH
62791: LD_VAR 0 1
62795: PUSH
62796: LD_INT 4
62798: MINUS
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_INT 4
62807: MINUS
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// end ; 3 :
62824: GO 63246
62826: LD_INT 3
62828: DOUBLE
62829: EQUAL
62830: IFTRUE 62834
62832: GO 62967
62834: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62835: LD_ADDR_VAR 0 5
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 3
62847: PLUS
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_INT 4
62869: PLUS
62870: PUSH
62871: LD_VAR 0 2
62875: PUSH
62876: LD_INT 4
62878: PLUS
62879: PUSH
62880: LD_INT 5
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: LIST
62887: PUSH
62888: LD_VAR 0 1
62892: PUSH
62893: LD_INT 4
62895: MINUS
62896: PUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 1
62914: PUSH
62915: LD_VAR 0 2
62919: PUSH
62920: LD_INT 4
62922: MINUS
62923: PUSH
62924: LD_INT 3
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 1
62936: PUSH
62937: LD_INT 3
62939: MINUS
62940: PUSH
62941: LD_VAR 0 2
62945: PUSH
62946: LD_INT 3
62948: MINUS
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// end ; 4 :
62965: GO 63246
62967: LD_INT 4
62969: DOUBLE
62970: EQUAL
62971: IFTRUE 62975
62973: GO 63108
62975: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62976: LD_ADDR_VAR 0 5
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 4
62993: PLUS
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: LD_VAR 0 1
63007: PUSH
63008: LD_INT 3
63010: PLUS
63011: PUSH
63012: LD_VAR 0 2
63016: PUSH
63017: LD_INT 3
63019: PLUS
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: PUSH
63029: LD_VAR 0 1
63033: PUSH
63034: LD_INT 4
63036: PLUS
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: PUSH
63051: LD_VAR 0 1
63055: PUSH
63056: LD_VAR 0 2
63060: PUSH
63061: LD_INT 3
63063: MINUS
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: PUSH
63073: LD_VAR 0 1
63077: PUSH
63078: LD_INT 4
63080: MINUS
63081: PUSH
63082: LD_VAR 0 2
63086: PUSH
63087: LD_INT 4
63089: MINUS
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// end ; 5 :
63106: GO 63246
63108: LD_INT 5
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63116
63114: GO 63245
63116: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63117: LD_ADDR_VAR 0 5
63121: PUSH
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 4
63129: MINUS
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PUSH
63144: LD_VAR 0 1
63148: PUSH
63149: LD_VAR 0 2
63153: PUSH
63154: LD_INT 4
63156: MINUS
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: LD_VAR 0 1
63170: PUSH
63171: LD_INT 4
63173: PLUS
63174: PUSH
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 4
63182: PLUS
63183: PUSH
63184: LD_INT 5
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: LD_VAR 0 1
63196: PUSH
63197: LD_INT 3
63199: PLUS
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 4
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_VAR 0 2
63223: PUSH
63224: LD_INT 3
63226: PLUS
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// end ; end ;
63243: GO 63246
63245: POP
// result := list ;
63246: LD_ADDR_VAR 0 4
63250: PUSH
63251: LD_VAR 0 5
63255: ST_TO_ADDR
// end ;
63256: LD_VAR 0 4
63260: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63261: LD_INT 0
63263: PPUSH
63264: PPUSH
63265: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63266: LD_VAR 0 1
63270: NOT
63271: PUSH
63272: LD_VAR 0 2
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 3
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: IN
63295: NOT
63296: OR
63297: IFFALSE 63301
// exit ;
63299: GO 63393
// tmp := [ ] ;
63301: LD_ADDR_VAR 0 5
63305: PUSH
63306: EMPTY
63307: ST_TO_ADDR
// for i in units do
63308: LD_ADDR_VAR 0 4
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: FOR_IN
63319: IFFALSE 63362
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63321: LD_ADDR_VAR 0 5
63325: PUSH
63326: LD_VAR 0 5
63330: PPUSH
63331: LD_VAR 0 5
63335: PUSH
63336: LD_INT 1
63338: PLUS
63339: PPUSH
63340: LD_VAR 0 4
63344: PPUSH
63345: LD_VAR 0 2
63349: PPUSH
63350: CALL_OW 259
63354: PPUSH
63355: CALL_OW 2
63359: ST_TO_ADDR
63360: GO 63318
63362: POP
63363: POP
// if not tmp then
63364: LD_VAR 0 5
63368: NOT
63369: IFFALSE 63373
// exit ;
63371: GO 63393
// result := SortListByListDesc ( units , tmp ) ;
63373: LD_ADDR_VAR 0 3
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: LD_VAR 0 5
63387: PPUSH
63388: CALL_OW 77
63392: ST_TO_ADDR
// end ;
63393: LD_VAR 0 3
63397: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63398: LD_INT 0
63400: PPUSH
63401: PPUSH
63402: PPUSH
// result := false ;
63403: LD_ADDR_VAR 0 3
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// x := GetX ( building ) ;
63411: LD_ADDR_VAR 0 4
63415: PUSH
63416: LD_VAR 0 2
63420: PPUSH
63421: CALL_OW 250
63425: ST_TO_ADDR
// y := GetY ( building ) ;
63426: LD_ADDR_VAR 0 5
63430: PUSH
63431: LD_VAR 0 2
63435: PPUSH
63436: CALL_OW 251
63440: ST_TO_ADDR
// if not building or not x or not y then
63441: LD_VAR 0 2
63445: NOT
63446: PUSH
63447: LD_VAR 0 4
63451: NOT
63452: OR
63453: PUSH
63454: LD_VAR 0 5
63458: NOT
63459: OR
63460: IFFALSE 63464
// exit ;
63462: GO 63556
// if GetTaskList ( unit ) then
63464: LD_VAR 0 1
63468: PPUSH
63469: CALL_OW 437
63473: IFFALSE 63556
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63475: LD_STRING e
63477: PUSH
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 437
63487: PUSH
63488: LD_INT 1
63490: ARRAY
63491: PUSH
63492: LD_INT 1
63494: ARRAY
63495: EQUAL
63496: PUSH
63497: LD_VAR 0 4
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 437
63511: PUSH
63512: LD_INT 1
63514: ARRAY
63515: PUSH
63516: LD_INT 2
63518: ARRAY
63519: EQUAL
63520: AND
63521: PUSH
63522: LD_VAR 0 5
63526: PUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 437
63536: PUSH
63537: LD_INT 1
63539: ARRAY
63540: PUSH
63541: LD_INT 3
63543: ARRAY
63544: EQUAL
63545: AND
63546: IFFALSE 63556
// result := true end ;
63548: LD_ADDR_VAR 0 3
63552: PUSH
63553: LD_INT 1
63555: ST_TO_ADDR
// end ;
63556: LD_VAR 0 3
63560: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63561: LD_INT 0
63563: PPUSH
// result := false ;
63564: LD_ADDR_VAR 0 4
63568: PUSH
63569: LD_INT 0
63571: ST_TO_ADDR
// if GetTaskList ( unit ) then
63572: LD_VAR 0 1
63576: PPUSH
63577: CALL_OW 437
63581: IFFALSE 63664
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63583: LD_STRING M
63585: PUSH
63586: LD_VAR 0 1
63590: PPUSH
63591: CALL_OW 437
63595: PUSH
63596: LD_INT 1
63598: ARRAY
63599: PUSH
63600: LD_INT 1
63602: ARRAY
63603: EQUAL
63604: PUSH
63605: LD_VAR 0 2
63609: PUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: CALL_OW 437
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_INT 2
63626: ARRAY
63627: EQUAL
63628: AND
63629: PUSH
63630: LD_VAR 0 3
63634: PUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 437
63644: PUSH
63645: LD_INT 1
63647: ARRAY
63648: PUSH
63649: LD_INT 3
63651: ARRAY
63652: EQUAL
63653: AND
63654: IFFALSE 63664
// result := true ;
63656: LD_ADDR_VAR 0 4
63660: PUSH
63661: LD_INT 1
63663: ST_TO_ADDR
// end ; end ;
63664: LD_VAR 0 4
63668: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63669: LD_INT 0
63671: PPUSH
63672: PPUSH
63673: PPUSH
63674: PPUSH
// if not unit or not area then
63675: LD_VAR 0 1
63679: NOT
63680: PUSH
63681: LD_VAR 0 2
63685: NOT
63686: OR
63687: IFFALSE 63691
// exit ;
63689: GO 63855
// tmp := AreaToList ( area , i ) ;
63691: LD_ADDR_VAR 0 6
63695: PUSH
63696: LD_VAR 0 2
63700: PPUSH
63701: LD_VAR 0 5
63705: PPUSH
63706: CALL_OW 517
63710: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63711: LD_ADDR_VAR 0 5
63715: PUSH
63716: DOUBLE
63717: LD_INT 1
63719: DEC
63720: ST_TO_ADDR
63721: LD_VAR 0 6
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: FOR_TO
63731: IFFALSE 63853
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63733: LD_ADDR_VAR 0 7
63737: PUSH
63738: LD_VAR 0 6
63742: PUSH
63743: LD_INT 1
63745: ARRAY
63746: PUSH
63747: LD_VAR 0 5
63751: ARRAY
63752: PUSH
63753: LD_VAR 0 6
63757: PUSH
63758: LD_INT 2
63760: ARRAY
63761: PUSH
63762: LD_VAR 0 5
63766: ARRAY
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63772: LD_VAR 0 7
63776: PUSH
63777: LD_INT 1
63779: ARRAY
63780: PPUSH
63781: LD_VAR 0 7
63785: PUSH
63786: LD_INT 2
63788: ARRAY
63789: PPUSH
63790: CALL_OW 428
63794: PUSH
63795: LD_INT 0
63797: EQUAL
63798: IFFALSE 63851
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63800: LD_VAR 0 1
63804: PPUSH
63805: LD_VAR 0 7
63809: PUSH
63810: LD_INT 1
63812: ARRAY
63813: PPUSH
63814: LD_VAR 0 7
63818: PUSH
63819: LD_INT 2
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 3
63827: PPUSH
63828: CALL_OW 48
// result := IsPlaced ( unit ) ;
63832: LD_ADDR_VAR 0 4
63836: PUSH
63837: LD_VAR 0 1
63841: PPUSH
63842: CALL_OW 305
63846: ST_TO_ADDR
// exit ;
63847: POP
63848: POP
63849: GO 63855
// end ; end ;
63851: GO 63730
63853: POP
63854: POP
// end ;
63855: LD_VAR 0 4
63859: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63860: LD_INT 0
63862: PPUSH
63863: PPUSH
63864: PPUSH
// if not side or side > 8 then
63865: LD_VAR 0 1
63869: NOT
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: LD_INT 8
63878: GREATER
63879: OR
63880: IFFALSE 63884
// exit ;
63882: GO 64071
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63884: LD_ADDR_VAR 0 4
63888: PUSH
63889: LD_INT 22
63891: PUSH
63892: LD_VAR 0 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 21
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PPUSH
63915: CALL_OW 69
63919: ST_TO_ADDR
// if not tmp then
63920: LD_VAR 0 4
63924: NOT
63925: IFFALSE 63929
// exit ;
63927: GO 64071
// enable_addtolog := true ;
63929: LD_ADDR_OWVAR 81
63933: PUSH
63934: LD_INT 1
63936: ST_TO_ADDR
// AddToLog ( [ ) ;
63937: LD_STRING [
63939: PPUSH
63940: CALL_OW 561
// for i in tmp do
63944: LD_ADDR_VAR 0 3
63948: PUSH
63949: LD_VAR 0 4
63953: PUSH
63954: FOR_IN
63955: IFFALSE 64062
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63957: LD_STRING [
63959: PUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: CALL_OW 266
63969: STR
63970: PUSH
63971: LD_STRING , 
63973: STR
63974: PUSH
63975: LD_VAR 0 3
63979: PPUSH
63980: CALL_OW 250
63984: STR
63985: PUSH
63986: LD_STRING , 
63988: STR
63989: PUSH
63990: LD_VAR 0 3
63994: PPUSH
63995: CALL_OW 251
63999: STR
64000: PUSH
64001: LD_STRING , 
64003: STR
64004: PUSH
64005: LD_VAR 0 3
64009: PPUSH
64010: CALL_OW 254
64014: STR
64015: PUSH
64016: LD_STRING , 
64018: STR
64019: PUSH
64020: LD_VAR 0 3
64024: PPUSH
64025: LD_INT 1
64027: PPUSH
64028: CALL_OW 268
64032: STR
64033: PUSH
64034: LD_STRING , 
64036: STR
64037: PUSH
64038: LD_VAR 0 3
64042: PPUSH
64043: LD_INT 2
64045: PPUSH
64046: CALL_OW 268
64050: STR
64051: PUSH
64052: LD_STRING ],
64054: STR
64055: PPUSH
64056: CALL_OW 561
// end ;
64060: GO 63954
64062: POP
64063: POP
// AddToLog ( ]; ) ;
64064: LD_STRING ];
64066: PPUSH
64067: CALL_OW 561
// end ;
64071: LD_VAR 0 2
64075: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64076: LD_INT 0
64078: PPUSH
64079: PPUSH
64080: PPUSH
64081: PPUSH
64082: PPUSH
// if not area or not rate or not max then
64083: LD_VAR 0 1
64087: NOT
64088: PUSH
64089: LD_VAR 0 2
64093: NOT
64094: OR
64095: PUSH
64096: LD_VAR 0 4
64100: NOT
64101: OR
64102: IFFALSE 64106
// exit ;
64104: GO 64298
// while 1 do
64106: LD_INT 1
64108: IFFALSE 64298
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64110: LD_ADDR_VAR 0 9
64114: PUSH
64115: LD_VAR 0 1
64119: PPUSH
64120: LD_INT 1
64122: PPUSH
64123: CALL_OW 287
64127: PUSH
64128: LD_INT 10
64130: MUL
64131: ST_TO_ADDR
// r := rate / 10 ;
64132: LD_ADDR_VAR 0 7
64136: PUSH
64137: LD_VAR 0 2
64141: PUSH
64142: LD_INT 10
64144: DIVREAL
64145: ST_TO_ADDR
// time := 1 1$00 ;
64146: LD_ADDR_VAR 0 8
64150: PUSH
64151: LD_INT 2100
64153: ST_TO_ADDR
// if amount < min then
64154: LD_VAR 0 9
64158: PUSH
64159: LD_VAR 0 3
64163: LESS
64164: IFFALSE 64182
// r := r * 2 else
64166: LD_ADDR_VAR 0 7
64170: PUSH
64171: LD_VAR 0 7
64175: PUSH
64176: LD_INT 2
64178: MUL
64179: ST_TO_ADDR
64180: GO 64208
// if amount > max then
64182: LD_VAR 0 9
64186: PUSH
64187: LD_VAR 0 4
64191: GREATER
64192: IFFALSE 64208
// r := r / 2 ;
64194: LD_ADDR_VAR 0 7
64198: PUSH
64199: LD_VAR 0 7
64203: PUSH
64204: LD_INT 2
64206: DIVREAL
64207: ST_TO_ADDR
// time := time / r ;
64208: LD_ADDR_VAR 0 8
64212: PUSH
64213: LD_VAR 0 8
64217: PUSH
64218: LD_VAR 0 7
64222: DIVREAL
64223: ST_TO_ADDR
// if time < 0 then
64224: LD_VAR 0 8
64228: PUSH
64229: LD_INT 0
64231: LESS
64232: IFFALSE 64249
// time := time * - 1 ;
64234: LD_ADDR_VAR 0 8
64238: PUSH
64239: LD_VAR 0 8
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: MUL
64248: ST_TO_ADDR
// wait ( time ) ;
64249: LD_VAR 0 8
64253: PPUSH
64254: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64258: LD_INT 35
64260: PPUSH
64261: LD_INT 875
64263: PPUSH
64264: CALL_OW 12
64268: PPUSH
64269: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64273: LD_INT 1
64275: PPUSH
64276: LD_INT 5
64278: PPUSH
64279: CALL_OW 12
64283: PPUSH
64284: LD_VAR 0 1
64288: PPUSH
64289: LD_INT 1
64291: PPUSH
64292: CALL_OW 55
// end ;
64296: GO 64106
// end ;
64298: LD_VAR 0 5
64302: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
// if not turrets or not factories then
64313: LD_VAR 0 1
64317: NOT
64318: PUSH
64319: LD_VAR 0 2
64323: NOT
64324: OR
64325: IFFALSE 64329
// exit ;
64327: GO 64636
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64329: LD_ADDR_VAR 0 10
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: LD_INT 6
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 5
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 24
64371: PUSH
64372: LD_INT 25
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 23
64381: PUSH
64382: LD_INT 27
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 42
64395: PUSH
64396: LD_INT 43
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 44
64405: PUSH
64406: LD_INT 46
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 45
64415: PUSH
64416: LD_INT 47
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// result := [ ] ;
64433: LD_ADDR_VAR 0 3
64437: PUSH
64438: EMPTY
64439: ST_TO_ADDR
// for i in turrets do
64440: LD_ADDR_VAR 0 4
64444: PUSH
64445: LD_VAR 0 1
64449: PUSH
64450: FOR_IN
64451: IFFALSE 64634
// begin nat := GetNation ( i ) ;
64453: LD_ADDR_VAR 0 7
64457: PUSH
64458: LD_VAR 0 4
64462: PPUSH
64463: CALL_OW 248
64467: ST_TO_ADDR
// weapon := 0 ;
64468: LD_ADDR_VAR 0 8
64472: PUSH
64473: LD_INT 0
64475: ST_TO_ADDR
// if not nat then
64476: LD_VAR 0 7
64480: NOT
64481: IFFALSE 64485
// continue ;
64483: GO 64450
// for j in list [ nat ] do
64485: LD_ADDR_VAR 0 5
64489: PUSH
64490: LD_VAR 0 10
64494: PUSH
64495: LD_VAR 0 7
64499: ARRAY
64500: PUSH
64501: FOR_IN
64502: IFFALSE 64543
// if GetBWeapon ( i ) = j [ 1 ] then
64504: LD_VAR 0 4
64508: PPUSH
64509: CALL_OW 269
64513: PUSH
64514: LD_VAR 0 5
64518: PUSH
64519: LD_INT 1
64521: ARRAY
64522: EQUAL
64523: IFFALSE 64541
// begin weapon := j [ 2 ] ;
64525: LD_ADDR_VAR 0 8
64529: PUSH
64530: LD_VAR 0 5
64534: PUSH
64535: LD_INT 2
64537: ARRAY
64538: ST_TO_ADDR
// break ;
64539: GO 64543
// end ;
64541: GO 64501
64543: POP
64544: POP
// if not weapon then
64545: LD_VAR 0 8
64549: NOT
64550: IFFALSE 64554
// continue ;
64552: GO 64450
// for k in factories do
64554: LD_ADDR_VAR 0 6
64558: PUSH
64559: LD_VAR 0 2
64563: PUSH
64564: FOR_IN
64565: IFFALSE 64630
// begin weapons := AvailableWeaponList ( k ) ;
64567: LD_ADDR_VAR 0 9
64571: PUSH
64572: LD_VAR 0 6
64576: PPUSH
64577: CALL_OW 478
64581: ST_TO_ADDR
// if not weapons then
64582: LD_VAR 0 9
64586: NOT
64587: IFFALSE 64591
// continue ;
64589: GO 64564
// if weapon in weapons then
64591: LD_VAR 0 8
64595: PUSH
64596: LD_VAR 0 9
64600: IN
64601: IFFALSE 64628
// begin result := [ i , weapon ] ;
64603: LD_ADDR_VAR 0 3
64607: PUSH
64608: LD_VAR 0 4
64612: PUSH
64613: LD_VAR 0 8
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// exit ;
64622: POP
64623: POP
64624: POP
64625: POP
64626: GO 64636
// end ; end ;
64628: GO 64564
64630: POP
64631: POP
// end ;
64632: GO 64450
64634: POP
64635: POP
// end ;
64636: LD_VAR 0 3
64640: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64641: LD_INT 0
64643: PPUSH
// if not side or side > 8 then
64644: LD_VAR 0 3
64648: NOT
64649: PUSH
64650: LD_VAR 0 3
64654: PUSH
64655: LD_INT 8
64657: GREATER
64658: OR
64659: IFFALSE 64663
// exit ;
64661: GO 64722
// if not range then
64663: LD_VAR 0 4
64667: NOT
64668: IFFALSE 64679
// range := - 12 ;
64670: LD_ADDR_VAR 0 4
64674: PUSH
64675: LD_INT 12
64677: NEG
64678: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: LD_VAR 0 3
64693: PPUSH
64694: LD_VAR 0 4
64698: PPUSH
64699: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64703: LD_VAR 0 1
64707: PPUSH
64708: LD_VAR 0 2
64712: PPUSH
64713: LD_VAR 0 3
64717: PPUSH
64718: CALL_OW 331
// end ;
64722: LD_VAR 0 5
64726: RET
// export function Video ( mode ) ; begin
64727: LD_INT 0
64729: PPUSH
// ingame_video = mode ;
64730: LD_ADDR_OWVAR 52
64734: PUSH
64735: LD_VAR 0 1
64739: ST_TO_ADDR
// interface_hidden = mode ;
64740: LD_ADDR_OWVAR 54
64744: PUSH
64745: LD_VAR 0 1
64749: ST_TO_ADDR
// end ;
64750: LD_VAR 0 2
64754: RET
// export function Join ( array , element ) ; begin
64755: LD_INT 0
64757: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64758: LD_ADDR_VAR 0 3
64762: PUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: LD_VAR 0 1
64772: PUSH
64773: LD_INT 1
64775: PLUS
64776: PPUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: CALL_OW 1
64786: ST_TO_ADDR
// end ;
64787: LD_VAR 0 3
64791: RET
// export function JoinUnion ( array , element ) ; begin
64792: LD_INT 0
64794: PPUSH
// result := array union element ;
64795: LD_ADDR_VAR 0 3
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: LD_VAR 0 2
64809: UNION
64810: ST_TO_ADDR
// end ;
64811: LD_VAR 0 3
64815: RET
// export function GetBehemoths ( side ) ; begin
64816: LD_INT 0
64818: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64819: LD_ADDR_VAR 0 2
64823: PUSH
64824: LD_INT 22
64826: PUSH
64827: LD_VAR 0 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 31
64838: PUSH
64839: LD_INT 25
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PPUSH
64850: CALL_OW 69
64854: ST_TO_ADDR
// end ;
64855: LD_VAR 0 2
64859: RET
// export function Shuffle ( array ) ; var i , index ; begin
64860: LD_INT 0
64862: PPUSH
64863: PPUSH
64864: PPUSH
// result := [ ] ;
64865: LD_ADDR_VAR 0 2
64869: PUSH
64870: EMPTY
64871: ST_TO_ADDR
// if not array then
64872: LD_VAR 0 1
64876: NOT
64877: IFFALSE 64881
// exit ;
64879: GO 64980
// Randomize ;
64881: CALL_OW 10
// for i = array downto 1 do
64885: LD_ADDR_VAR 0 3
64889: PUSH
64890: DOUBLE
64891: LD_VAR 0 1
64895: INC
64896: ST_TO_ADDR
64897: LD_INT 1
64899: PUSH
64900: FOR_DOWNTO
64901: IFFALSE 64978
// begin index := rand ( 1 , array ) ;
64903: LD_ADDR_VAR 0 4
64907: PUSH
64908: LD_INT 1
64910: PPUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: CALL_OW 12
64920: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64921: LD_ADDR_VAR 0 2
64925: PUSH
64926: LD_VAR 0 2
64930: PPUSH
64931: LD_VAR 0 2
64935: PUSH
64936: LD_INT 1
64938: PLUS
64939: PPUSH
64940: LD_VAR 0 1
64944: PUSH
64945: LD_VAR 0 4
64949: ARRAY
64950: PPUSH
64951: CALL_OW 2
64955: ST_TO_ADDR
// array := Delete ( array , index ) ;
64956: LD_ADDR_VAR 0 1
64960: PUSH
64961: LD_VAR 0 1
64965: PPUSH
64966: LD_VAR 0 4
64970: PPUSH
64971: CALL_OW 3
64975: ST_TO_ADDR
// end ;
64976: GO 64900
64978: POP
64979: POP
// end ;
64980: LD_VAR 0 2
64984: RET
// export function GetBaseMaterials ( base ) ; begin
64985: LD_INT 0
64987: PPUSH
// result := [ 0 , 0 , 0 ] ;
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// if not base then
65007: LD_VAR 0 1
65011: NOT
65012: IFFALSE 65016
// exit ;
65014: GO 65065
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65016: LD_ADDR_VAR 0 2
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: LD_INT 1
65028: PPUSH
65029: CALL_OW 275
65033: PUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: LD_INT 2
65041: PPUSH
65042: CALL_OW 275
65046: PUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: LD_INT 3
65054: PPUSH
65055: CALL_OW 275
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// end ;
65065: LD_VAR 0 2
65069: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65070: LD_INT 0
65072: PPUSH
65073: PPUSH
// result := array ;
65074: LD_ADDR_VAR 0 3
65078: PUSH
65079: LD_VAR 0 1
65083: ST_TO_ADDR
// if size > 0 then
65084: LD_VAR 0 2
65088: PUSH
65089: LD_INT 0
65091: GREATER
65092: IFFALSE 65138
// for i := array downto size do
65094: LD_ADDR_VAR 0 4
65098: PUSH
65099: DOUBLE
65100: LD_VAR 0 1
65104: INC
65105: ST_TO_ADDR
65106: LD_VAR 0 2
65110: PUSH
65111: FOR_DOWNTO
65112: IFFALSE 65136
// result := Delete ( result , result ) ;
65114: LD_ADDR_VAR 0 3
65118: PUSH
65119: LD_VAR 0 3
65123: PPUSH
65124: LD_VAR 0 3
65128: PPUSH
65129: CALL_OW 3
65133: ST_TO_ADDR
65134: GO 65111
65136: POP
65137: POP
// end ;
65138: LD_VAR 0 3
65142: RET
// export function ComExit ( unit ) ; var tmp ; begin
65143: LD_INT 0
65145: PPUSH
65146: PPUSH
// if not IsInUnit ( unit ) then
65147: LD_VAR 0 1
65151: PPUSH
65152: CALL_OW 310
65156: NOT
65157: IFFALSE 65161
// exit ;
65159: GO 65221
// tmp := IsInUnit ( unit ) ;
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: LD_VAR 0 1
65170: PPUSH
65171: CALL_OW 310
65175: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65176: LD_VAR 0 3
65180: PPUSH
65181: CALL_OW 247
65185: PUSH
65186: LD_INT 2
65188: EQUAL
65189: IFFALSE 65202
// ComExitVehicle ( unit ) else
65191: LD_VAR 0 1
65195: PPUSH
65196: CALL_OW 121
65200: GO 65211
// ComExitBuilding ( unit ) ;
65202: LD_VAR 0 1
65206: PPUSH
65207: CALL_OW 122
// result := tmp ;
65211: LD_ADDR_VAR 0 2
65215: PUSH
65216: LD_VAR 0 3
65220: ST_TO_ADDR
// end ;
65221: LD_VAR 0 2
65225: RET
// export function ComExitAll ( units ) ; var i ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
// if not units then
65230: LD_VAR 0 1
65234: NOT
65235: IFFALSE 65239
// exit ;
65237: GO 65265
// for i in units do
65239: LD_ADDR_VAR 0 3
65243: PUSH
65244: LD_VAR 0 1
65248: PUSH
65249: FOR_IN
65250: IFFALSE 65263
// ComExit ( i ) ;
65252: LD_VAR 0 3
65256: PPUSH
65257: CALL 65143 0 1
65261: GO 65249
65263: POP
65264: POP
// end ;
65265: LD_VAR 0 2
65269: RET
// export function ResetHc ; begin
65270: LD_INT 0
65272: PPUSH
// InitHc ;
65273: CALL_OW 19
// hc_importance := 0 ;
65277: LD_ADDR_OWVAR 32
65281: PUSH
65282: LD_INT 0
65284: ST_TO_ADDR
// end ;
65285: LD_VAR 0 1
65289: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65290: LD_INT 0
65292: PPUSH
65293: PPUSH
65294: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65295: LD_ADDR_VAR 0 6
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_VAR 0 3
65309: PLUS
65310: PUSH
65311: LD_INT 2
65313: DIV
65314: ST_TO_ADDR
// if _x < 0 then
65315: LD_VAR 0 6
65319: PUSH
65320: LD_INT 0
65322: LESS
65323: IFFALSE 65340
// _x := _x * - 1 ;
65325: LD_ADDR_VAR 0 6
65329: PUSH
65330: LD_VAR 0 6
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: MUL
65339: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65340: LD_ADDR_VAR 0 7
65344: PUSH
65345: LD_VAR 0 2
65349: PUSH
65350: LD_VAR 0 4
65354: PLUS
65355: PUSH
65356: LD_INT 2
65358: DIV
65359: ST_TO_ADDR
// if _y < 0 then
65360: LD_VAR 0 7
65364: PUSH
65365: LD_INT 0
65367: LESS
65368: IFFALSE 65385
// _y := _y * - 1 ;
65370: LD_ADDR_VAR 0 7
65374: PUSH
65375: LD_VAR 0 7
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: MUL
65384: ST_TO_ADDR
// result := [ _x , _y ] ;
65385: LD_ADDR_VAR 0 5
65389: PUSH
65390: LD_VAR 0 6
65394: PUSH
65395: LD_VAR 0 7
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// end ;
65404: LD_VAR 0 5
65408: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65409: LD_INT 0
65411: PPUSH
65412: PPUSH
65413: PPUSH
65414: PPUSH
// task := GetTaskList ( unit ) ;
65415: LD_ADDR_VAR 0 7
65419: PUSH
65420: LD_VAR 0 1
65424: PPUSH
65425: CALL_OW 437
65429: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65430: LD_VAR 0 7
65434: NOT
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_VAR 0 2
65445: PPUSH
65446: CALL_OW 308
65450: NOT
65451: AND
65452: IFFALSE 65456
// exit ;
65454: GO 65574
// if IsInArea ( unit , area ) then
65456: LD_VAR 0 1
65460: PPUSH
65461: LD_VAR 0 2
65465: PPUSH
65466: CALL_OW 308
65470: IFFALSE 65488
// begin ComMoveToArea ( unit , goAway ) ;
65472: LD_VAR 0 1
65476: PPUSH
65477: LD_VAR 0 3
65481: PPUSH
65482: CALL_OW 113
// exit ;
65486: GO 65574
// end ; if task [ 1 ] [ 1 ] <> M then
65488: LD_VAR 0 7
65492: PUSH
65493: LD_INT 1
65495: ARRAY
65496: PUSH
65497: LD_INT 1
65499: ARRAY
65500: PUSH
65501: LD_STRING M
65503: NONEQUAL
65504: IFFALSE 65508
// exit ;
65506: GO 65574
// x := task [ 1 ] [ 2 ] ;
65508: LD_ADDR_VAR 0 5
65512: PUSH
65513: LD_VAR 0 7
65517: PUSH
65518: LD_INT 1
65520: ARRAY
65521: PUSH
65522: LD_INT 2
65524: ARRAY
65525: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65526: LD_ADDR_VAR 0 6
65530: PUSH
65531: LD_VAR 0 7
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PUSH
65540: LD_INT 3
65542: ARRAY
65543: ST_TO_ADDR
// if InArea ( x , y , area ) then
65544: LD_VAR 0 5
65548: PPUSH
65549: LD_VAR 0 6
65553: PPUSH
65554: LD_VAR 0 2
65558: PPUSH
65559: CALL_OW 309
65563: IFFALSE 65574
// ComStop ( unit ) ;
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 141
// end ;
65574: LD_VAR 0 4
65578: RET
// export function Abs ( value ) ; begin
65579: LD_INT 0
65581: PPUSH
// result := value ;
65582: LD_ADDR_VAR 0 2
65586: PUSH
65587: LD_VAR 0 1
65591: ST_TO_ADDR
// if value < 0 then
65592: LD_VAR 0 1
65596: PUSH
65597: LD_INT 0
65599: LESS
65600: IFFALSE 65617
// result := value * - 1 ;
65602: LD_ADDR_VAR 0 2
65606: PUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: MUL
65616: ST_TO_ADDR
// end ;
65617: LD_VAR 0 2
65621: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65622: LD_INT 0
65624: PPUSH
65625: PPUSH
65626: PPUSH
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
65631: PPUSH
// if not unit or not building then
65632: LD_VAR 0 1
65636: NOT
65637: PUSH
65638: LD_VAR 0 2
65642: NOT
65643: OR
65644: IFFALSE 65648
// exit ;
65646: GO 65874
// x := GetX ( building ) ;
65648: LD_ADDR_VAR 0 4
65652: PUSH
65653: LD_VAR 0 2
65657: PPUSH
65658: CALL_OW 250
65662: ST_TO_ADDR
// y := GetY ( building ) ;
65663: LD_ADDR_VAR 0 6
65667: PUSH
65668: LD_VAR 0 2
65672: PPUSH
65673: CALL_OW 251
65677: ST_TO_ADDR
// d := GetDir ( building ) ;
65678: LD_ADDR_VAR 0 8
65682: PUSH
65683: LD_VAR 0 2
65687: PPUSH
65688: CALL_OW 254
65692: ST_TO_ADDR
// r := 4 ;
65693: LD_ADDR_VAR 0 9
65697: PUSH
65698: LD_INT 4
65700: ST_TO_ADDR
// for i := 1 to 5 do
65701: LD_ADDR_VAR 0 10
65705: PUSH
65706: DOUBLE
65707: LD_INT 1
65709: DEC
65710: ST_TO_ADDR
65711: LD_INT 5
65713: PUSH
65714: FOR_TO
65715: IFFALSE 65872
// begin _x := ShiftX ( x , d , r + i ) ;
65717: LD_ADDR_VAR 0 5
65721: PUSH
65722: LD_VAR 0 4
65726: PPUSH
65727: LD_VAR 0 8
65731: PPUSH
65732: LD_VAR 0 9
65736: PUSH
65737: LD_VAR 0 10
65741: PLUS
65742: PPUSH
65743: CALL_OW 272
65747: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65748: LD_ADDR_VAR 0 7
65752: PUSH
65753: LD_VAR 0 6
65757: PPUSH
65758: LD_VAR 0 8
65762: PPUSH
65763: LD_VAR 0 9
65767: PUSH
65768: LD_VAR 0 10
65772: PLUS
65773: PPUSH
65774: CALL_OW 273
65778: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65779: LD_VAR 0 5
65783: PPUSH
65784: LD_VAR 0 7
65788: PPUSH
65789: CALL_OW 488
65793: PUSH
65794: LD_VAR 0 5
65798: PPUSH
65799: LD_VAR 0 7
65803: PPUSH
65804: CALL_OW 428
65808: PPUSH
65809: CALL_OW 247
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: IN
65824: NOT
65825: AND
65826: IFFALSE 65870
// begin ComMoveXY ( unit , _x , _y ) ;
65828: LD_VAR 0 1
65832: PPUSH
65833: LD_VAR 0 5
65837: PPUSH
65838: LD_VAR 0 7
65842: PPUSH
65843: CALL_OW 111
// result := [ _x , _y ] ;
65847: LD_ADDR_VAR 0 3
65851: PUSH
65852: LD_VAR 0 5
65856: PUSH
65857: LD_VAR 0 7
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// exit ;
65866: POP
65867: POP
65868: GO 65874
// end ; end ;
65870: GO 65714
65872: POP
65873: POP
// end ;
65874: LD_VAR 0 3
65878: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65879: LD_INT 0
65881: PPUSH
65882: PPUSH
65883: PPUSH
// result := 0 ;
65884: LD_ADDR_VAR 0 3
65888: PUSH
65889: LD_INT 0
65891: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65892: LD_VAR 0 1
65896: PUSH
65897: LD_INT 0
65899: LESS
65900: PUSH
65901: LD_VAR 0 1
65905: PUSH
65906: LD_INT 8
65908: GREATER
65909: OR
65910: PUSH
65911: LD_VAR 0 2
65915: PUSH
65916: LD_INT 0
65918: LESS
65919: OR
65920: PUSH
65921: LD_VAR 0 2
65925: PUSH
65926: LD_INT 8
65928: GREATER
65929: OR
65930: IFFALSE 65934
// exit ;
65932: GO 66009
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65934: LD_ADDR_VAR 0 4
65938: PUSH
65939: LD_INT 22
65941: PUSH
65942: LD_VAR 0 2
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PPUSH
65951: CALL_OW 69
65955: PUSH
65956: FOR_IN
65957: IFFALSE 66007
// begin un := UnitShoot ( i ) ;
65959: LD_ADDR_VAR 0 5
65963: PUSH
65964: LD_VAR 0 4
65968: PPUSH
65969: CALL_OW 504
65973: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65974: LD_VAR 0 5
65978: PPUSH
65979: CALL_OW 255
65983: PUSH
65984: LD_VAR 0 1
65988: EQUAL
65989: IFFALSE 66005
// begin result := un ;
65991: LD_ADDR_VAR 0 3
65995: PUSH
65996: LD_VAR 0 5
66000: ST_TO_ADDR
// exit ;
66001: POP
66002: POP
66003: GO 66009
// end ; end ;
66005: GO 65956
66007: POP
66008: POP
// end ;
66009: LD_VAR 0 3
66013: RET
// export function GetCargoBay ( units ) ; begin
66014: LD_INT 0
66016: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66017: LD_ADDR_VAR 0 2
66021: PUSH
66022: LD_VAR 0 1
66026: PPUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 34
66032: PUSH
66033: LD_INT 12
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 34
66042: PUSH
66043: LD_INT 51
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 34
66052: PUSH
66053: LD_INT 32
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 34
66062: PUSH
66063: LD_EXP 27
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: PPUSH
66079: CALL_OW 72
66083: ST_TO_ADDR
// end ; end_of_file
66084: LD_VAR 0 2
66088: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66089: LD_VAR 0 1
66093: PUSH
66094: LD_INT 200
66096: DOUBLE
66097: GREATEREQUAL
66098: IFFALSE 66106
66100: LD_INT 299
66102: DOUBLE
66103: LESSEQUAL
66104: IFTRUE 66108
66106: GO 66140
66108: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_VAR 0 2
66118: PPUSH
66119: LD_VAR 0 3
66123: PPUSH
66124: LD_VAR 0 4
66128: PPUSH
66129: LD_VAR 0 5
66133: PPUSH
66134: CALL 24550 0 5
66138: GO 66217
66140: LD_INT 300
66142: DOUBLE
66143: GREATEREQUAL
66144: IFFALSE 66152
66146: LD_INT 399
66148: DOUBLE
66149: LESSEQUAL
66150: IFTRUE 66154
66152: GO 66216
66154: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66155: LD_VAR 0 1
66159: PPUSH
66160: LD_VAR 0 2
66164: PPUSH
66165: LD_VAR 0 3
66169: PPUSH
66170: LD_VAR 0 4
66174: PPUSH
66175: LD_VAR 0 5
66179: PPUSH
66180: LD_VAR 0 6
66184: PPUSH
66185: LD_VAR 0 7
66189: PPUSH
66190: LD_VAR 0 8
66194: PPUSH
66195: LD_VAR 0 9
66199: PPUSH
66200: LD_VAR 0 10
66204: PPUSH
66205: LD_VAR 0 11
66209: PPUSH
66210: CALL 22438 0 11
66214: GO 66217
66216: POP
// end ;
66217: PPOPN 11
66219: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66220: LD_VAR 0 1
66224: PPUSH
66225: LD_VAR 0 2
66229: PPUSH
66230: LD_VAR 0 3
66234: PPUSH
66235: LD_VAR 0 4
66239: PPUSH
66240: LD_VAR 0 5
66244: PPUSH
66245: CALL 24532 0 5
// end ; end_of_file
66249: PPOPN 5
66251: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66252: LD_VAR 0 1
66256: PPUSH
66257: LD_VAR 0 2
66261: PPUSH
66262: LD_VAR 0 3
66266: PPUSH
66267: LD_VAR 0 4
66271: PPUSH
66272: LD_VAR 0 5
66276: PPUSH
66277: LD_VAR 0 6
66281: PPUSH
66282: CALL 11246 0 6
// end ;
66286: PPOPN 6
66288: END
