// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10689 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8417 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10308 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10565 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10565 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10565 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10565 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7234 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7229
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7229
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7228
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7023
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: CALL_OW 2
6998: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_INT 17
7006: PPUSH
7007: LD_INT 9
7009: PPUSH
7010: CALL_OW 111
// Wait ( 0 0$01 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// end ;
7021: GO 6914
7023: POP
7024: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 6
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7224
// begin vc_chassis := ar_half_tracked ;
7058: LD_ADDR_OWVAR 37
7062: PUSH
7063: LD_INT 14
7065: ST_TO_ADDR
// vc_engine := engine_combustion ;
7066: LD_ADDR_OWVAR 39
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// vc_control := control_manual ;
7074: LD_ADDR_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_heavy_mortar ] [ Rand ( 1 , 5 ) ] ;
7082: LD_ADDR_OWVAR 40
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 27
7092: PUSH
7093: LD_INT 28
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_EXP 31
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 5
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// veh := CreateVehicle ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: CALL_OW 45
7132: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7133: LD_VAR 0 5
7137: PPUSH
7138: LD_INT 16
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7163: CALL_OW 44
7167: PPUSH
7168: LD_VAR 0 5
7172: PPUSH
7173: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7177: LD_ADDR_EXP 11
7181: PUSH
7182: LD_EXP 11
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7200: LD_VAR 0 5
7204: PPUSH
7205: LD_INT 125
7207: PPUSH
7208: LD_INT 31
7210: PPUSH
7211: CALL_OW 111
// Wait ( 0 0$02 ) ;
7215: LD_INT 70
7217: PPUSH
7218: CALL_OW 67
// end ;
7222: GO 7055
7224: POP
7225: POP
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: LD_VAR 0 2
7233: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// areas := [ river1 , river2 ] ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_INT 14
7248: PUSH
7249: LD_INT 15
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: LD_INT 6
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_OWVAR 67
7279: ARRAY
7280: ST_TO_ADDR
// uc_side := 2 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 2
7288: ST_TO_ADDR
// uc_nation := 2 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_gallery :=  ;
7305: LD_ADDR_OWVAR 33
7309: PUSH
7310: LD_STRING 
7312: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_INT 1
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: ARRAY
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7480
// begin vc_chassis := ar_hovercraft ;
7346: LD_ADDR_OWVAR 37
7350: PUSH
7351: LD_INT 11
7353: ST_TO_ADDR
// vc_engine := engine_solar ;
7354: LD_ADDR_OWVAR 39
7358: PUSH
7359: LD_INT 2
7361: ST_TO_ADDR
// vc_control := control_manual ;
7362: LD_ADDR_OWVAR 38
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7370: LD_ADDR_OWVAR 40
7374: PUSH
7375: LD_INT 24
7377: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7378: LD_ADDR_OWVAR 41
7382: PUSH
7383: LD_INT 100
7385: ST_TO_ADDR
// un := CreateVehicle ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: CALL_OW 45
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 121
7403: PPUSH
7404: LD_INT 69
7406: PPUSH
7407: LD_INT 4
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 3
7441: PPUSH
7442: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7446: LD_ADDR_EXP 9
7450: PUSH
7451: LD_EXP 9
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
// end ;
7478: GO 7343
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 1
7486: RET
// every 0 0$01 trigger riv do var i , c ;
7487: LD_EXP 9
7491: IFFALSE 7926
7493: GO 7495
7495: DISABLE
7496: LD_INT 0
7498: PPUSH
7499: PPUSH
// begin enable ;
7500: ENABLE
// for i = riv downto 1 do
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: DOUBLE
7507: LD_EXP 9
7511: INC
7512: ST_TO_ADDR
7513: LD_INT 1
7515: PUSH
7516: FOR_DOWNTO
7517: IFFALSE 7924
// begin if not riv [ i ] [ 1 ] then
7519: LD_EXP 9
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: NOT
7534: IFFALSE 7556
// begin riv := Delete ( riv , 1 ) ;
7536: LD_ADDR_EXP 9
7540: PUSH
7541: LD_EXP 9
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// break ;
7554: GO 7924
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7556: LD_EXP 9
7560: PUSH
7561: LD_VAR 0 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 314
7575: NOT
7576: IFFALSE 7644
// begin if riv [ i ] [ 2 ] = 1 then
7578: LD_EXP 9
7582: PUSH
7583: LD_VAR 0 1
7587: ARRAY
7588: PUSH
7589: LD_INT 2
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// c := 2 else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ST_TO_ADDR
7606: GO 7616
// c := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7616: LD_ADDR_EXP 9
7620: PUSH
7621: LD_EXP 9
7625: PPUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: CALL 10308 0 4
7643: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7644: LD_EXP 9
7648: PUSH
7649: LD_VAR 0 1
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_INT 14
7661: PUSH
7662: LD_INT 15
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_EXP 9
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: ARRAY
7684: PPUSH
7685: CALL_OW 308
7689: NOT
7690: IFFALSE 7922
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7692: LD_EXP 9
7696: PUSH
7697: LD_VAR 0 1
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 261
7711: PUSH
7712: LD_INT 50
7714: LESS
7715: IFFALSE 7739
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 67
7734: PPUSH
7735: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7739: LD_EXP 9
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: PPUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: CALL_OW 74
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 9
7796: LESS
7797: IFFALSE 7855
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7799: LD_EXP 9
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: PPUSH
7829: LD_EXP 9
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 74
7848: PPUSH
7849: CALL_OW 115
7853: GO 7922
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7855: LD_EXP 9
7859: PUSH
7860: LD_VAR 0 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PPUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_EXP 9
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: PUSH
7891: LD_INT 2
7893: ARRAY
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7900: LD_EXP 9
7904: PUSH
7905: LD_VAR 0 1
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 350
7917: PPUSH
7918: CALL_OW 202
// end ; end ; end ;
7922: GO 7516
7924: POP
7925: POP
// end ;
7926: PPOPN 2
7928: END
// every 10 10$00 trigger convoy_start do var i , un ;
7929: LD_EXP 7
7933: IFFALSE 8054
7935: GO 7937
7937: DISABLE
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
// begin enable ;
7942: ENABLE
// for i = 1 to 2 do
7943: LD_ADDR_VAR 0 1
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8052
// begin uc_side := 2 ;
7959: LD_ADDR_OWVAR 20
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// uc_nation := 2 ;
7967: LD_ADDR_OWVAR 21
7971: PUSH
7972: LD_INT 2
7974: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7975: LD_INT 0
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: CALL_OW 380
// un := CreateHuman ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: CALL_OW 44
7997: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 10
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8016: LD_VAR 0 2
8020: PPUSH
8021: LD_INT 24
8023: PPUSH
8024: LD_INT 36
8026: PPUSH
8027: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8031: LD_VAR 0 2
8035: PPUSH
8036: LD_INT 9
8038: PPUSH
8039: CALL_OW 173
// Wait ( 0 0$02 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7956
8052: POP
8053: POP
// end ;
8054: PPOPN 2
8056: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8057: LD_INT 22
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: IFFALSE 8383
8073: GO 8075
8075: DISABLE
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// begin enable ;
8080: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PUSH
8101: LD_EXP 11
8105: DIFF
8106: ST_TO_ADDR
// if rest then
8107: LD_VAR 0 2
8111: IFFALSE 8183
// for i in rest do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8181
// if GetClass ( i ) = 3 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 257
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: IFFALSE 8179
// begin if not IsInArea ( i , ar2 ) then
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 17
8148: PPUSH
8149: CALL_OW 308
8153: NOT
8154: IFFALSE 8170
// ComMoveToArea ( i , ar2 ) else
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 17
8163: PPUSH
8164: CALL_OW 113
8168: GO 8179
// RemoveUnit ( i ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL_OW 64
// end ;
8179: GO 8123
8181: POP
8182: POP
// if ar_force then
8183: LD_EXP 11
8187: IFFALSE 8383
// begin if ar_force > 15 then
8189: LD_EXP 11
8193: PUSH
8194: LD_INT 15
8196: GREATER
8197: IFFALSE 8214
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8199: LD_EXP 11
8203: PPUSH
8204: LD_INT 58
8206: PPUSH
8207: LD_INT 51
8209: PPUSH
8210: CALL_OW 114
// for i in ar_force do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 11
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8381
// begin if GetClass ( i ) = class_soldier then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8332
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL 10565 0 1
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IN
8267: IFFALSE 8313
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL 10565 0 1
8283: PPUSH
8284: CALL_OW 250
8288: PPUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL 10565 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 132
8311: GO 8332
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL 10565 0 1
8327: PPUSH
8328: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 257
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: NOT
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 314
8356: NOT
8357: AND
8358: IFFALSE 8379
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL 10565 0 1
8374: PPUSH
8375: CALL_OW 115
// end ;
8379: GO 8224
8381: POP
8382: POP
// end ; end ;
8383: PPOPN 2
8385: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8386: LD_INT 9
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: IFFALSE 8416
8405: GO 8407
8407: DISABLE
// medal2 := false ; end_of_file
8408: LD_ADDR_EXP 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
8416: END
// export function Action ; begin
8417: LD_INT 0
8419: PPUSH
// case Query ( info ) of 1 :
8420: LD_STRING info
8422: PPUSH
8423: CALL_OW 97
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8439
8436: POP
// ; end ;
8437: GO 8440
8439: POP
// ChangeMissionObjectives ( PM_1 ) ;
8440: LD_STRING PM_1
8442: PPUSH
8443: CALL_OW 337
// SaveForQuickRestart ;
8447: CALL_OW 22
// end ;
8451: LD_VAR 0 1
8455: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8456: LD_INT 50
8458: PPUSH
8459: CALL_OW 255
8463: PUSH
8464: LD_INT 3
8466: EQUAL
8467: IFFALSE 8748
8469: GO 8471
8471: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8472: LD_EXP 16
8476: PPUSH
8477: LD_STRING DPM_S1
8479: PPUSH
8480: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8484: LD_EXP 17
8488: PPUSH
8489: LD_STRING DPM_P1
8491: PPUSH
8492: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8496: LD_EXP 16
8500: PPUSH
8501: LD_STRING DPM_S2
8503: PPUSH
8504: CALL_OW 88
// SaveForQuickRestart ;
8508: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8512: LD_STRING PM_2
8514: PPUSH
8515: CALL_OW 337
// Wait ( 2 2$30 ) ;
8519: LD_INT 5250
8521: PPUSH
8522: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8526: LD_INT 117
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 84
// Convoy ( 1 ) ;
8536: LD_INT 1
8538: PPUSH
8539: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8543: LD_INT 1050
8545: PPUSH
8546: CALL_OW 67
// Convoy ( 2 ) ;
8550: LD_INT 2
8552: PPUSH
8553: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8557: LD_INT 3150
8559: PPUSH
8560: CALL_OW 67
// Convoy ( 3 ) ;
8564: LD_INT 3
8566: PPUSH
8567: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8571: LD_INT 8400
8573: PPUSH
8574: CALL_OW 67
// convoy_start := true ;
8578: LD_ADDR_EXP 7
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareArabian ;
8586: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8590: LD_INT 1
8592: PPUSH
8593: CALL 6376 0 1
// while ( convoy_start ) do
8597: LD_EXP 7
8601: IFFALSE 8748
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8603: LD_INT 4200
8605: PPUSH
8606: LD_INT 7350
8608: PPUSH
8609: CALL_OW 12
8613: PPUSH
8614: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8618: LD_INT 22
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: PUSH
8633: LD_INT 20
8635: LESS
8636: IFFALSE 8653
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8653: LD_INT 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL_OW 12
8663: PPUSH
8664: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8668: LD_ADDR_EXP 13
8672: PUSH
8673: LD_EXP 13
8677: PUSH
8678: LD_INT 1
8680: PLUS
8681: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8682: LD_EXP 13
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: LD_OWVAR 67
8705: ARRAY
8706: MOD
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8746
// begin Wait ( 1 1$20 ) ;
8713: LD_INT 2800
8715: PPUSH
8716: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8720: LD_EXP 25
8724: PPUSH
8725: LD_STRING DPM_F2
8727: PPUSH
8728: CALL_OW 94
// PrepareAttack ( 3 ) ;
8732: LD_INT 3
8734: PPUSH
8735: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8739: LD_INT 6300
8741: PPUSH
8742: CALL_OW 67
// end ; end ;
8746: GO 8597
// end ;
8748: END
// every 0 0$1 trigger safeCounter > 30 do
8749: LD_EXP 15
8753: PUSH
8754: LD_INT 30
8756: GREATER
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8762: LD_STRING ACH_SAFE
8764: PPUSH
8765: CALL_OW 543
8769: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8770: LD_EXP 13
8774: PUSH
8775: LD_INT 3
8777: MOD
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8807: LD_EXP 25
8811: PPUSH
8812: LD_STRING DPM_F3
8814: PPUSH
8815: CALL_OW 94
8819: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8820: LD_EXP 13
8824: PUSH
8825: LD_INT 5
8827: MOD
8828: PUSH
8829: LD_INT 0
8831: EQUAL
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: AND
8852: IFFALSE 8869
8854: GO 8856
8856: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_STRING DPM_F4
8864: PPUSH
8865: CALL_OW 94
8869: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8870: LD_EXP 7
8874: PUSH
8875: LD_EXP 13
8879: PUSH
8880: LD_INT 8
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: LD_INT 10
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: GREATEREQUAL
8900: AND
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 6
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PUSH
8917: LD_INT 0
8919: EQUAL
8920: AND
8921: IFFALSE 9020
8923: GO 8925
8925: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8926: LD_EXP 17
8930: PPUSH
8931: LD_STRING DPM_PEnd
8933: PPUSH
8934: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8938: LD_STRING med1
8940: PPUSH
8941: LD_EXP 3
8945: PPUSH
8946: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8950: LD_STRING med2
8952: PPUSH
8953: LD_EXP 4
8957: PPUSH
8958: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8962: LD_EXP 8
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: GREATEREQUAL
8987: IFFALSE 8997
// medal3 := false ;
8989: LD_ADDR_EXP 5
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8997: LD_STRING med3
8999: PPUSH
9000: LD_EXP 5
9004: PPUSH
9005: CALL_OW 101
// GiveMedals ( MAIN ) ;
9009: LD_STRING MAIN
9011: PPUSH
9012: CALL_OW 102
// YouWin ;
9016: CALL_OW 103
// end ;
9020: END
// every 4 4$10 trigger convoy_start do var i ;
9021: LD_EXP 7
9025: IFFALSE 9391
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin DialogueOn ;
9033: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9037: LD_EXP 17
9041: PPUSH
9042: LD_STRING DPM_PHelp
9044: PPUSH
9045: CALL_OW 94
// DialogueOff ;
9049: CALL_OW 7
// Wait ( 0 0$30 ) ;
9053: LD_INT 1050
9055: PPUSH
9056: CALL_OW 67
// Randomize ;
9060: CALL_OW 10
// uc_side := 3 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 3
9071: ST_TO_ADDR
// uc_nation := 3 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 3
9079: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 5
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_OWVAR 67
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9151
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9113: LD_INT 0
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9134: CALL_OW 44
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: CALL_OW 49
// end ;
9149: GO 9110
9151: POP
9152: POP
// vc_chassis := ru_heavy_wheeled ;
9153: LD_ADDR_OWVAR 37
9157: PUSH
9158: LD_INT 23
9160: ST_TO_ADDR
// vc_engine := engine_combustion ;
9161: LD_ADDR_OWVAR 39
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// vc_control := control_manual ;
9169: LD_ADDR_OWVAR 38
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// vc_weapon := 89 ;
9177: LD_ADDR_OWVAR 40
9181: PUSH
9182: LD_INT 89
9184: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9185: LD_ADDR_OWVAR 41
9189: PUSH
9190: LD_INT 88
9192: ST_TO_ADDR
// i := CreateVehicle ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: CALL_OW 45
9202: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 5
9210: PPUSH
9211: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 63
9222: PPUSH
9223: LD_INT 115
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 200
9243: PPUSH
9244: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: LD_INT 5
9256: PPUSH
9257: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9261: CALL_OW 44
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 52
// DialogueOn ;
9275: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9279: LD_INT 169
9281: PPUSH
9282: LD_INT 115
9284: PPUSH
9285: CALL_OW 86
// DWait ( 0 0$01 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9296: LD_INT 63
9298: PPUSH
9299: LD_INT 115
9301: PPUSH
9302: CALL_OW 86
// DWait ( 0 0$01 ) ;
9306: LD_INT 35
9308: PPUSH
9309: CALL_OW 68
// DialogueOff ;
9313: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 57
9324: PPUSH
9325: LD_INT 53
9327: PPUSH
9328: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9332: LD_INT 6300
9334: PPUSH
9335: LD_INT 14700
9337: PPUSH
9338: CALL_OW 12
9342: PPUSH
9343: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9347: LD_EXP 18
9351: PPUSH
9352: LD_INT 86
9354: PPUSH
9355: LD_INT 112
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING DPM_Sa1
9379: PPUSH
9380: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9384: LD_STRING PM_3
9386: PPUSH
9387: CALL_OW 337
// end ;
9391: PPOPN 1
9393: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9394: LD_INT 3
9396: PPUSH
9397: LD_EXP 18
9401: PPUSH
9402: CALL_OW 292
9406: IFFALSE 9455
9408: GO 9410
9410: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9411: LD_EXP 18
9415: PPUSH
9416: LD_STRING DPM_Sa2
9418: PPUSH
9419: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9423: LD_STRING PM_4
9425: PPUSH
9426: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9430: LD_INT 40
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 235
// end ;
9455: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9456: LD_EXP 3
9460: NOT
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_INT 0
9479: EQUAL
9480: AND
9481: IFFALSE 9543
9483: GO 9485
9485: DISABLE
// begin DialogueOn ;
9486: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9490: LD_EXP 16
9494: PPUSH
9495: LD_STRING DPM_S3
9497: PPUSH
9498: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9502: LD_INT 62
9504: PPUSH
9505: LD_INT 113
9507: PPUSH
9508: LD_INT 3
9510: PPUSH
9511: LD_INT 10
9513: PPUSH
9514: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9518: LD_INT 62
9520: PPUSH
9521: LD_INT 113
9523: PPUSH
9524: CALL_OW 84
// dwait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 68
// DialogueOff ;
9535: CALL_OW 7
// CounterAttack ;
9539: CALL 5789 0 0
// end ; end_of_file
9543: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 255
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 9593
// if not us_retreat then
9559: LD_EXP 22
9563: NOT
9564: IFFALSE 9593
// if GetClass ( h ) = 1 then
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 257
9575: PUSH
9576: LD_INT 1
9578: EQUAL
9579: IFFALSE 9593
// ComEnterUnit ( h , us_arm ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 69
9588: PPUSH
9589: CALL_OW 120
// end ;
9593: PPOPN 2
9595: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL 24397 0 1
// if GetSide ( un ) = 1 then
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 255
9614: PUSH
9615: LD_INT 1
9617: EQUAL
9618: IFFALSE 9634
// us_count := us_count + 1 ;
9620: LD_ADDR_EXP 24
9624: PUSH
9625: LD_EXP 24
9629: PUSH
9630: LD_INT 1
9632: PLUS
9633: ST_TO_ADDR
// if un in us_force then
9634: LD_VAR 0 1
9638: PUSH
9639: LD_EXP 12
9643: IN
9644: IFFALSE 9662
// us_force := us_force diff un ;
9646: LD_ADDR_EXP 12
9650: PUSH
9651: LD_EXP 12
9655: PUSH
9656: LD_VAR 0 1
9660: DIFF
9661: ST_TO_ADDR
// if un in ar_force then
9662: LD_VAR 0 1
9666: PUSH
9667: LD_EXP 11
9671: IN
9672: IFFALSE 9690
// ar_force := ar_force diff un ;
9674: LD_ADDR_EXP 11
9678: PUSH
9679: LD_EXP 11
9683: PUSH
9684: LD_VAR 0 1
9688: DIFF
9689: ST_TO_ADDR
// if un = Stolypin then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_EXP 16
9699: EQUAL
9700: IFFALSE 9709
// YouLost ( dead ) ;
9702: LD_STRING dead
9704: PPUSH
9705: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 30
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: IN
9743: IFFALSE 9752
// YouLost ( depot ) ;
9745: LD_STRING depot
9747: PPUSH
9748: CALL_OW 104
// if GetSide ( un ) = 6 then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 6
9764: EQUAL
9765: IFFALSE 9781
// dest_counter := dest_counter + 1 ;
9767: LD_ADDR_EXP 8
9771: PUSH
9772: LD_EXP 8
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: ST_TO_ADDR
// end ;
9781: PPOPN 1
9783: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 9814
// ComMoveXY ( un , 57 , 52 ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 57
9806: PPUSH
9807: LD_INT 52
9809: PPUSH
9810: CALL_OW 111
// end ;
9814: PPOPN 2
9816: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9817: LD_EXP 21
9821: NOT
9822: IFFALSE 9872
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_INT 3
9831: EQUAL
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: EQUAL
9841: AND
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: AND
9861: OR
9862: IFFALSE 9872
// us_alert := true ;
9864: LD_ADDR_EXP 21
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: PUSH
9881: LD_VAR 0 2
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: AND
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 2
9904: PUSH
9905: LD_INT 6
9907: EQUAL
9908: AND
9909: OR
9910: IFFALSE 9919
// YouLost ( alat ) ;
9912: LD_STRING alat
9914: PPUSH
9915: CALL_OW 104
// end ;
9919: PPOPN 2
9921: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PUSH
9932: LD_INT 2
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: IN
9966: AND
9967: IFFALSE 10088
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9969: LD_OWVAR 3
9973: PUSH
9974: LD_VAR 0 1
9978: DIFF
9979: PPUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 74
9989: PPUSH
9990: CALL_OW 255
9994: PUSH
9995: LD_INT 2
9997: NONEQUAL
9998: IFFALSE 10088
// begin Wait ( 0 0$1.3 ) ;
10000: LD_INT 46
10002: PPUSH
10003: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 250
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 251
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PPUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 453
// end ; end ;
10088: PPOPN 1
10090: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: IN
10125: PUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL 10610 0 1
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 2
10143: EQUAL
10144: NOT
10145: AND
10146: IFFALSE 10271
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10148: LD_INT 105
10150: PPUSH
10151: LD_INT 210
10153: PPUSH
10154: CALL_OW 12
10158: PPUSH
10159: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 250
10172: PPUSH
10173: LD_VAR 0 2
10177: PPUSH
10178: CALL_OW 251
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 250
10226: PPUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 251
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 250
10253: PPUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: CALL_OW 251
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 453
// end ; end ;
10271: PPOPN 4
10273: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: CALL 24495 0 3
// end ;
10293: PPOPN 3
10295: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL 24503 0 1
// end ; end_of_file
10305: PPOPN 1
10307: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 2
10327: ARRAY
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL_OW 1
10343: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10344: LD_ADDR_VAR 0 1
10348: PUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 7
10363: PPUSH
10364: CALL_OW 1
10368: ST_TO_ADDR
// result := tab ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 1
10378: ST_TO_ADDR
// end ;
10379: LD_VAR 0 5
10383: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
// if not GetControl ( veh ) = control_manual then
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL_OW 263
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: NOT
10403: IFFALSE 10415
// result := false else
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
10413: GO 10560
// if veh in FilterAllUnits ( [ f_empty ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 58
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: IN
10431: IFFALSE 10443
// result := false else
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
10441: GO 10560
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 55
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: ST_TO_ADDR
// if not filter then
10480: LD_VAR 0 4
10484: NOT
10485: IFFALSE 10497
// result := false else
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
10495: GO 10560
// for i = 1 to filter do
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10558
// if IsDriver ( filter [ i ] ) = veh then
10515: LD_VAR 0 4
10519: PUSH
10520: LD_VAR 0 3
10524: ARRAY
10525: PPUSH
10526: CALL 62340 0 1
10530: PUSH
10531: LD_VAR 0 1
10535: EQUAL
10536: IFFALSE 10556
// begin result := filter [ i ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_VAR 0 3
10552: ARRAY
10553: ST_TO_ADDR
// break ;
10554: GO 10558
// end ;
10556: GO 10512
10558: POP
10559: POP
// end ; end ;
10560: LD_VAR 0 2
10564: RET
// export function FindTarget ( unit ) ; begin
10565: LD_INT 0
10567: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 81
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// end ;
10605: LD_VAR 0 2
10609: RET
// export function NearestUnit ( unit ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_OWVAR 3
10622: PUSH
10623: LD_VAR 0 1
10627: DIFF
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 74
10638: ST_TO_ADDR
// end ; end_of_file
10639: LD_VAR 0 2
10643: RET
// every 12 12$00 do
10644: GO 10646
10646: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 570
10652: PPUSH
10653: LD_INT 350
10655: PPUSH
10656: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10660: LD_INT 10500
10662: PPUSH
10663: LD_INT 21000
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 570
10680: PPUSH
10681: LD_INT 350
10683: PPUSH
10684: CALL_OW 550
// end ;
10688: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
// uc_nation = nation_nature ;
10696: LD_ADDR_OWVAR 21
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// uc_side = 0 ;
10704: LD_ADDR_OWVAR 20
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// l = 0 ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10720: LD_ADDR_OWVAR 24
10724: PUSH
10725: LD_INT 0
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10736: LD_ADDR_OWVAR 35
10740: PUSH
10741: LD_INT 5
10743: NEG
10744: PPUSH
10745: LD_INT 5
10747: PPUSH
10748: CALL_OW 12
10752: ST_TO_ADDR
// hc_gallery =  ;
10753: LD_ADDR_OWVAR 33
10757: PUSH
10758: LD_STRING 
10760: ST_TO_ADDR
// hc_class = class_apeman ;
10761: LD_ADDR_OWVAR 28
10765: PUSH
10766: LD_INT 12
10768: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10769: LD_ADDR_OWVAR 29
10773: PUSH
10774: LD_INT 11
10776: PPUSH
10777: LD_INT 13
10779: PPUSH
10780: CALL_OW 12
10784: PUSH
10785: LD_INT 10
10787: PPUSH
10788: LD_INT 11
10790: PPUSH
10791: CALL_OW 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// hc_sex = sex_male ;
10800: LD_ADDR_OWVAR 27
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10808: LD_ADDR_OWVAR 31
10812: PUSH
10813: LD_INT 0
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 12
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// apeman = CreateHuman ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: CALL_OW 44
10848: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// l = l + 1 ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: LD_VAR 0 6
10875: PUSH
10876: LD_INT 1
10878: PLUS
10879: ST_TO_ADDR
// end until l = num1 ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_VAR 0 1
10889: EQUAL
10890: IFFALSE 10720
// l = 0 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 25
10910: PPUSH
10911: CALL_OW 12
10915: ST_TO_ADDR
// hc_class = class_tiger ;
10916: LD_ADDR_OWVAR 28
10920: PUSH
10921: LD_INT 14
10923: ST_TO_ADDR
// hc_sex = sex_male ;
10924: LD_ADDR_OWVAR 27
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// hc_gallery = sandnature ;
10932: LD_ADDR_OWVAR 33
10936: PUSH
10937: LD_STRING sandnature
10939: ST_TO_ADDR
// hc_face_number = 3 ;
10940: LD_ADDR_OWVAR 34
10944: PUSH
10945: LD_INT 3
10947: ST_TO_ADDR
// tiger = CreateHuman ;
10948: LD_ADDR_VAR 0 8
10952: PUSH
10953: CALL_OW 44
10957: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10958: LD_VAR 0 8
10962: PPUSH
10963: LD_VAR 0 4
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// l = l + 1 ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 6
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: ST_TO_ADDR
// end until l = num2 ;
10989: LD_VAR 0 6
10993: PUSH
10994: LD_VAR 0 2
10998: EQUAL
10999: IFFALSE 10900
// l = 0 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11009: LD_ADDR_OWVAR 28
11013: PUSH
11014: LD_INT 18
11016: ST_TO_ADDR
// hc_gallery = sandnature ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING sandnature
11024: ST_TO_ADDR
// hc_face_number = 1 ;
11025: LD_ADDR_OWVAR 34
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// bird = CreateHuman ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 51
// l = l + 1 ;
11055: LD_ADDR_VAR 0 6
11059: PUSH
11060: LD_VAR 0 6
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: ST_TO_ADDR
// end until l = num3 ;
11069: LD_VAR 0 6
11073: PUSH
11074: LD_VAR 0 3
11078: EQUAL
11079: IFFALSE 11009
// end ; end_of_file
11081: LD_VAR 0 5
11085: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11086: LD_INT 0
11088: PPUSH
// ar_miner := 81 ;
11089: LD_ADDR_EXP 33
11093: PUSH
11094: LD_INT 81
11096: ST_TO_ADDR
// ar_crane := 88 ;
11097: LD_ADDR_EXP 32
11101: PUSH
11102: LD_INT 88
11104: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11105: LD_ADDR_EXP 27
11109: PUSH
11110: LD_INT 89
11112: ST_TO_ADDR
// us_hack := 99 ;
11113: LD_ADDR_EXP 28
11117: PUSH
11118: LD_INT 99
11120: ST_TO_ADDR
// us_artillery := 97 ;
11121: LD_ADDR_EXP 29
11125: PUSH
11126: LD_INT 97
11128: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11129: LD_ADDR_EXP 30
11133: PUSH
11134: LD_INT 91
11136: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11137: LD_ADDR_EXP 31
11141: PUSH
11142: LD_INT 92
11144: ST_TO_ADDR
// ru_radar := 98 ;
11145: LD_ADDR_EXP 26
11149: PUSH
11150: LD_INT 98
11152: ST_TO_ADDR
// tech_Artillery := 80 ;
11153: LD_ADDR_EXP 34
11157: PUSH
11158: LD_INT 80
11160: ST_TO_ADDR
// tech_RadMat := 81 ;
11161: LD_ADDR_EXP 35
11165: PUSH
11166: LD_INT 81
11168: ST_TO_ADDR
// tech_BasicTools := 82 ;
11169: LD_ADDR_EXP 36
11173: PUSH
11174: LD_INT 82
11176: ST_TO_ADDR
// tech_Cargo := 83 ;
11177: LD_ADDR_EXP 37
11181: PUSH
11182: LD_INT 83
11184: ST_TO_ADDR
// tech_Track := 84 ;
11185: LD_ADDR_EXP 38
11189: PUSH
11190: LD_INT 84
11192: ST_TO_ADDR
// tech_Crane := 85 ;
11193: LD_ADDR_EXP 39
11197: PUSH
11198: LD_INT 85
11200: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11201: LD_ADDR_EXP 40
11205: PUSH
11206: LD_INT 86
11208: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11209: LD_ADDR_EXP 41
11213: PUSH
11214: LD_INT 87
11216: ST_TO_ADDR
// end ;
11217: LD_VAR 0 1
11221: RET
// every 1 do
11222: GO 11224
11224: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11225: CALL 11086 0 0
11229: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11230: LD_VAR 0 2
11234: PUSH
11235: LD_INT 100
11237: EQUAL
11238: IFFALSE 12187
// begin if not StreamModeActive then
11240: LD_EXP 42
11244: NOT
11245: IFFALSE 11255
// StreamModeActive := true ;
11247: LD_ADDR_EXP 42
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 0 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 0
11262: EQUAL
11263: IFFALSE 11269
// InitStreamMode ;
11265: CALL 12345 0 0
// if p3 = 1 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 1
11276: EQUAL
11277: IFFALSE 11287
// sRocket := true ;
11279: LD_ADDR_EXP 47
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 2 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 2
11294: EQUAL
11295: IFFALSE 11305
// sSpeed := true ;
11297: LD_ADDR_EXP 46
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 3 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 3
11312: EQUAL
11313: IFFALSE 11323
// sEngine := true ;
11315: LD_ADDR_EXP 48
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 4 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 4
11330: EQUAL
11331: IFFALSE 11341
// sSpec := true ;
11333: LD_ADDR_EXP 45
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 5 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 5
11348: EQUAL
11349: IFFALSE 11359
// sLevel := true ;
11351: LD_ADDR_EXP 49
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 6 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 6
11366: EQUAL
11367: IFFALSE 11377
// sArmoury := true ;
11369: LD_ADDR_EXP 50
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 7 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 7
11384: EQUAL
11385: IFFALSE 11395
// sRadar := true ;
11387: LD_ADDR_EXP 51
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 8 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 8
11402: EQUAL
11403: IFFALSE 11413
// sBunker := true ;
11405: LD_ADDR_EXP 52
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 9 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 9
11420: EQUAL
11421: IFFALSE 11431
// sHack := true ;
11423: LD_ADDR_EXP 53
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 10 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 10
11438: EQUAL
11439: IFFALSE 11449
// sFire := true ;
11441: LD_ADDR_EXP 54
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 11 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 11
11456: EQUAL
11457: IFFALSE 11467
// sRefresh := true ;
11459: LD_ADDR_EXP 55
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 12 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 12
11474: EQUAL
11475: IFFALSE 11485
// sExp := true ;
11477: LD_ADDR_EXP 56
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 13 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 13
11492: EQUAL
11493: IFFALSE 11503
// sDepot := true ;
11495: LD_ADDR_EXP 57
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 14 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 14
11510: EQUAL
11511: IFFALSE 11521
// sFlag := true ;
11513: LD_ADDR_EXP 58
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// if p3 = 15 then
11521: LD_VAR 0 3
11525: PUSH
11526: LD_INT 15
11528: EQUAL
11529: IFFALSE 11539
// sKamikadze := true ;
11531: LD_ADDR_EXP 66
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if p3 = 16 then
11539: LD_VAR 0 3
11543: PUSH
11544: LD_INT 16
11546: EQUAL
11547: IFFALSE 11557
// sTroll := true ;
11549: LD_ADDR_EXP 67
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// if p3 = 17 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 17
11564: EQUAL
11565: IFFALSE 11575
// sSlow := true ;
11567: LD_ADDR_EXP 68
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 18 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 18
11582: EQUAL
11583: IFFALSE 11593
// sLack := true ;
11585: LD_ADDR_EXP 69
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// if p3 = 19 then
11593: LD_VAR 0 3
11597: PUSH
11598: LD_INT 19
11600: EQUAL
11601: IFFALSE 11611
// sTank := true ;
11603: LD_ADDR_EXP 71
11607: PUSH
11608: LD_INT 1
11610: ST_TO_ADDR
// if p3 = 20 then
11611: LD_VAR 0 3
11615: PUSH
11616: LD_INT 20
11618: EQUAL
11619: IFFALSE 11629
// sRemote := true ;
11621: LD_ADDR_EXP 72
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// if p3 = 21 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 21
11636: EQUAL
11637: IFFALSE 11647
// sPowell := true ;
11639: LD_ADDR_EXP 73
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 22 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 22
11654: EQUAL
11655: IFFALSE 11665
// sTeleport := true ;
11657: LD_ADDR_EXP 76
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 23 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 23
11672: EQUAL
11673: IFFALSE 11683
// sOilTower := true ;
11675: LD_ADDR_EXP 78
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 24 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 24
11690: EQUAL
11691: IFFALSE 11701
// sShovel := true ;
11693: LD_ADDR_EXP 79
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 25 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 25
11708: EQUAL
11709: IFFALSE 11719
// sSheik := true ;
11711: LD_ADDR_EXP 80
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 26 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 26
11726: EQUAL
11727: IFFALSE 11737
// sEarthquake := true ;
11729: LD_ADDR_EXP 82
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// if p3 = 27 then
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 27
11744: EQUAL
11745: IFFALSE 11755
// sAI := true ;
11747: LD_ADDR_EXP 83
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// if p3 = 28 then
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 28
11762: EQUAL
11763: IFFALSE 11773
// sCargo := true ;
11765: LD_ADDR_EXP 86
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// if p3 = 29 then
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 29
11780: EQUAL
11781: IFFALSE 11791
// sDLaser := true ;
11783: LD_ADDR_EXP 87
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// if p3 = 30 then
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 30
11798: EQUAL
11799: IFFALSE 11809
// sExchange := true ;
11801: LD_ADDR_EXP 88
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if p3 = 31 then
11809: LD_VAR 0 3
11813: PUSH
11814: LD_INT 31
11816: EQUAL
11817: IFFALSE 11827
// sFac := true ;
11819: LD_ADDR_EXP 89
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// if p3 = 32 then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 32
11834: EQUAL
11835: IFFALSE 11845
// sPower := true ;
11837: LD_ADDR_EXP 90
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// if p3 = 33 then
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 33
11852: EQUAL
11853: IFFALSE 11863
// sRandom := true ;
11855: LD_ADDR_EXP 91
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// if p3 = 34 then
11863: LD_VAR 0 3
11867: PUSH
11868: LD_INT 34
11870: EQUAL
11871: IFFALSE 11881
// sShield := true ;
11873: LD_ADDR_EXP 92
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if p3 = 35 then
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 35
11888: EQUAL
11889: IFFALSE 11899
// sTime := true ;
11891: LD_ADDR_EXP 93
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if p3 = 36 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 36
11906: EQUAL
11907: IFFALSE 11917
// sTools := true ;
11909: LD_ADDR_EXP 94
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if p3 = 101 then
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 101
11924: EQUAL
11925: IFFALSE 11935
// sSold := true ;
11927: LD_ADDR_EXP 59
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// if p3 = 102 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 102
11942: EQUAL
11943: IFFALSE 11953
// sDiff := true ;
11945: LD_ADDR_EXP 60
11949: PUSH
11950: LD_INT 1
11952: ST_TO_ADDR
// if p3 = 103 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 103
11960: EQUAL
11961: IFFALSE 11971
// sFog := true ;
11963: LD_ADDR_EXP 63
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// if p3 = 104 then
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 104
11978: EQUAL
11979: IFFALSE 11989
// sReset := true ;
11981: LD_ADDR_EXP 64
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// if p3 = 105 then
11989: LD_VAR 0 3
11993: PUSH
11994: LD_INT 105
11996: EQUAL
11997: IFFALSE 12007
// sSun := true ;
11999: LD_ADDR_EXP 65
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// if p3 = 106 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 106
12014: EQUAL
12015: IFFALSE 12025
// sTiger := true ;
12017: LD_ADDR_EXP 61
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// if p3 = 107 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 107
12032: EQUAL
12033: IFFALSE 12043
// sBomb := true ;
12035: LD_ADDR_EXP 62
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// if p3 = 108 then
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 108
12050: EQUAL
12051: IFFALSE 12061
// sWound := true ;
12053: LD_ADDR_EXP 70
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// if p3 = 109 then
12061: LD_VAR 0 3
12065: PUSH
12066: LD_INT 109
12068: EQUAL
12069: IFFALSE 12079
// sBetray := true ;
12071: LD_ADDR_EXP 74
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// if p3 = 110 then
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 110
12086: EQUAL
12087: IFFALSE 12097
// sContamin := true ;
12089: LD_ADDR_EXP 75
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// if p3 = 111 then
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 111
12104: EQUAL
12105: IFFALSE 12115
// sOil := true ;
12107: LD_ADDR_EXP 77
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// if p3 = 112 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_INT 112
12122: EQUAL
12123: IFFALSE 12133
// sStu := true ;
12125: LD_ADDR_EXP 81
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// if p3 = 113 then
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 113
12140: EQUAL
12141: IFFALSE 12151
// sBazooka := true ;
12143: LD_ADDR_EXP 84
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// if p3 = 114 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_INT 114
12158: EQUAL
12159: IFFALSE 12169
// sMortar := true ;
12161: LD_ADDR_EXP 85
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// if p3 = 115 then
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 115
12176: EQUAL
12177: IFFALSE 12187
// sRanger := true ;
12179: LD_ADDR_EXP 95
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
// end ; if p2 = 101 then
12187: LD_VAR 0 2
12191: PUSH
12192: LD_INT 101
12194: EQUAL
12195: IFFALSE 12323
// begin case p3 of 1 :
12197: LD_VAR 0 3
12201: PUSH
12202: LD_INT 1
12204: DOUBLE
12205: EQUAL
12206: IFTRUE 12210
12208: GO 12217
12210: POP
// hHackUnlimitedResources ; 2 :
12211: CALL 23358 0 0
12215: GO 12323
12217: LD_INT 2
12219: DOUBLE
12220: EQUAL
12221: IFTRUE 12225
12223: GO 12232
12225: POP
// hHackSetLevel10 ; 3 :
12226: CALL 23491 0 0
12230: GO 12323
12232: LD_INT 3
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12247
12240: POP
// hHackSetLevel10YourUnits ; 4 :
12241: CALL 23576 0 0
12245: GO 12323
12247: LD_INT 4
12249: DOUBLE
12250: EQUAL
12251: IFTRUE 12255
12253: GO 12262
12255: POP
// hHackInvincible ; 5 :
12256: CALL 24024 0 0
12260: GO 12323
12262: LD_INT 5
12264: DOUBLE
12265: EQUAL
12266: IFTRUE 12270
12268: GO 12277
12270: POP
// hHackInvisible ; 6 :
12271: CALL 24135 0 0
12275: GO 12323
12277: LD_INT 6
12279: DOUBLE
12280: EQUAL
12281: IFTRUE 12285
12283: GO 12292
12285: POP
// hHackChangeYourSide ; 7 :
12286: CALL 24192 0 0
12290: GO 12323
12292: LD_INT 7
12294: DOUBLE
12295: EQUAL
12296: IFTRUE 12300
12298: GO 12307
12300: POP
// hHackChangeUnitSide ; 8 :
12301: CALL 24234 0 0
12305: GO 12323
12307: LD_INT 8
12309: DOUBLE
12310: EQUAL
12311: IFTRUE 12315
12313: GO 12322
12315: POP
// hHackFog ; end ;
12316: CALL 24335 0 0
12320: GO 12323
12322: POP
// end ; end ;
12323: PPOPN 6
12325: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12326: GO 12328
12328: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12329: LD_STRING initStreamRollete();
12331: PPUSH
12332: CALL_OW 559
// InitStreamMode ;
12336: CALL 12345 0 0
// DefineStreamItems ( ) ;
12340: CALL 12785 0 0
// end ;
12344: END
// function InitStreamMode ; begin
12345: LD_INT 0
12347: PPUSH
// streamModeActive := false ;
12348: LD_ADDR_EXP 42
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// normalCounter := 36 ;
12356: LD_ADDR_EXP 43
12360: PUSH
12361: LD_INT 36
12363: ST_TO_ADDR
// hardcoreCounter := 16 ;
12364: LD_ADDR_EXP 44
12368: PUSH
12369: LD_INT 16
12371: ST_TO_ADDR
// sRocket := false ;
12372: LD_ADDR_EXP 47
12376: PUSH
12377: LD_INT 0
12379: ST_TO_ADDR
// sSpeed := false ;
12380: LD_ADDR_EXP 46
12384: PUSH
12385: LD_INT 0
12387: ST_TO_ADDR
// sEngine := false ;
12388: LD_ADDR_EXP 48
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// sSpec := false ;
12396: LD_ADDR_EXP 45
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// sLevel := false ;
12404: LD_ADDR_EXP 49
12408: PUSH
12409: LD_INT 0
12411: ST_TO_ADDR
// sArmoury := false ;
12412: LD_ADDR_EXP 50
12416: PUSH
12417: LD_INT 0
12419: ST_TO_ADDR
// sRadar := false ;
12420: LD_ADDR_EXP 51
12424: PUSH
12425: LD_INT 0
12427: ST_TO_ADDR
// sBunker := false ;
12428: LD_ADDR_EXP 52
12432: PUSH
12433: LD_INT 0
12435: ST_TO_ADDR
// sHack := false ;
12436: LD_ADDR_EXP 53
12440: PUSH
12441: LD_INT 0
12443: ST_TO_ADDR
// sFire := false ;
12444: LD_ADDR_EXP 54
12448: PUSH
12449: LD_INT 0
12451: ST_TO_ADDR
// sRefresh := false ;
12452: LD_ADDR_EXP 55
12456: PUSH
12457: LD_INT 0
12459: ST_TO_ADDR
// sExp := false ;
12460: LD_ADDR_EXP 56
12464: PUSH
12465: LD_INT 0
12467: ST_TO_ADDR
// sDepot := false ;
12468: LD_ADDR_EXP 57
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// sFlag := false ;
12476: LD_ADDR_EXP 58
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// sKamikadze := false ;
12484: LD_ADDR_EXP 66
12488: PUSH
12489: LD_INT 0
12491: ST_TO_ADDR
// sTroll := false ;
12492: LD_ADDR_EXP 67
12496: PUSH
12497: LD_INT 0
12499: ST_TO_ADDR
// sSlow := false ;
12500: LD_ADDR_EXP 68
12504: PUSH
12505: LD_INT 0
12507: ST_TO_ADDR
// sLack := false ;
12508: LD_ADDR_EXP 69
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
// sTank := false ;
12516: LD_ADDR_EXP 71
12520: PUSH
12521: LD_INT 0
12523: ST_TO_ADDR
// sRemote := false ;
12524: LD_ADDR_EXP 72
12528: PUSH
12529: LD_INT 0
12531: ST_TO_ADDR
// sPowell := false ;
12532: LD_ADDR_EXP 73
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// sTeleport := false ;
12540: LD_ADDR_EXP 76
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// sOilTower := false ;
12548: LD_ADDR_EXP 78
12552: PUSH
12553: LD_INT 0
12555: ST_TO_ADDR
// sShovel := false ;
12556: LD_ADDR_EXP 79
12560: PUSH
12561: LD_INT 0
12563: ST_TO_ADDR
// sSheik := false ;
12564: LD_ADDR_EXP 80
12568: PUSH
12569: LD_INT 0
12571: ST_TO_ADDR
// sEarthquake := false ;
12572: LD_ADDR_EXP 82
12576: PUSH
12577: LD_INT 0
12579: ST_TO_ADDR
// sAI := false ;
12580: LD_ADDR_EXP 83
12584: PUSH
12585: LD_INT 0
12587: ST_TO_ADDR
// sCargo := false ;
12588: LD_ADDR_EXP 86
12592: PUSH
12593: LD_INT 0
12595: ST_TO_ADDR
// sDLaser := false ;
12596: LD_ADDR_EXP 87
12600: PUSH
12601: LD_INT 0
12603: ST_TO_ADDR
// sExchange := false ;
12604: LD_ADDR_EXP 88
12608: PUSH
12609: LD_INT 0
12611: ST_TO_ADDR
// sFac := false ;
12612: LD_ADDR_EXP 89
12616: PUSH
12617: LD_INT 0
12619: ST_TO_ADDR
// sPower := false ;
12620: LD_ADDR_EXP 90
12624: PUSH
12625: LD_INT 0
12627: ST_TO_ADDR
// sRandom := false ;
12628: LD_ADDR_EXP 91
12632: PUSH
12633: LD_INT 0
12635: ST_TO_ADDR
// sShield := false ;
12636: LD_ADDR_EXP 92
12640: PUSH
12641: LD_INT 0
12643: ST_TO_ADDR
// sTime := false ;
12644: LD_ADDR_EXP 93
12648: PUSH
12649: LD_INT 0
12651: ST_TO_ADDR
// sTools := false ;
12652: LD_ADDR_EXP 94
12656: PUSH
12657: LD_INT 0
12659: ST_TO_ADDR
// sSold := false ;
12660: LD_ADDR_EXP 59
12664: PUSH
12665: LD_INT 0
12667: ST_TO_ADDR
// sDiff := false ;
12668: LD_ADDR_EXP 60
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// sFog := false ;
12676: LD_ADDR_EXP 63
12680: PUSH
12681: LD_INT 0
12683: ST_TO_ADDR
// sReset := false ;
12684: LD_ADDR_EXP 64
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// sSun := false ;
12692: LD_ADDR_EXP 65
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sTiger := false ;
12700: LD_ADDR_EXP 61
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sBomb := false ;
12708: LD_ADDR_EXP 62
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sWound := false ;
12716: LD_ADDR_EXP 70
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sBetray := false ;
12724: LD_ADDR_EXP 74
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sContamin := false ;
12732: LD_ADDR_EXP 75
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sOil := false ;
12740: LD_ADDR_EXP 77
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sStu := false ;
12748: LD_ADDR_EXP 81
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sBazooka := false ;
12756: LD_ADDR_EXP 84
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sMortar := false ;
12764: LD_ADDR_EXP 85
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sRanger := false ;
12772: LD_ADDR_EXP 95
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// end ;
12780: LD_VAR 0 1
12784: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12785: LD_INT 0
12787: PPUSH
12788: PPUSH
12789: PPUSH
12790: PPUSH
12791: PPUSH
// result := [ ] ;
12792: LD_ADDR_VAR 0 1
12796: PUSH
12797: EMPTY
12798: ST_TO_ADDR
// if campaign_id = 1 then
12799: LD_OWVAR 69
12803: PUSH
12804: LD_INT 1
12806: EQUAL
12807: IFFALSE 15745
// begin case mission_number of 1 :
12809: LD_OWVAR 70
12813: PUSH
12814: LD_INT 1
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12886
12822: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: LD_INT 11
12836: PUSH
12837: LD_INT 12
12839: PUSH
12840: LD_INT 15
12842: PUSH
12843: LD_INT 16
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 23
12851: PUSH
12852: LD_INT 26
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 101
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 106
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 15743
12886: LD_INT 2
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12966
12894: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: LD_INT 11
12908: PUSH
12909: LD_INT 12
12911: PUSH
12912: LD_INT 15
12914: PUSH
12915: LD_INT 16
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 23
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 105
12946: PUSH
12947: LD_INT 106
12949: PUSH
12950: LD_INT 108
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: ST_TO_ADDR
12964: GO 15743
12966: LD_INT 3
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 13050
12974: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: LD_INT 5
12988: PUSH
12989: LD_INT 11
12991: PUSH
12992: LD_INT 12
12994: PUSH
12995: LD_INT 15
12997: PUSH
12998: LD_INT 16
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_INT 26
13006: PUSH
13007: LD_INT 36
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 102
13027: PUSH
13028: LD_INT 105
13030: PUSH
13031: LD_INT 106
13033: PUSH
13034: LD_INT 108
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 15743
13050: LD_INT 4
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13142
13058: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: LD_INT 5
13072: PUSH
13073: LD_INT 8
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 15
13084: PUSH
13085: LD_INT 16
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 26
13096: PUSH
13097: LD_INT 36
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 101
13116: PUSH
13117: LD_INT 102
13119: PUSH
13120: LD_INT 105
13122: PUSH
13123: LD_INT 106
13125: PUSH
13126: LD_INT 108
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 15743
13142: LD_INT 5
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13250
13150: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 6
13167: PUSH
13168: LD_INT 8
13170: PUSH
13171: LD_INT 11
13173: PUSH
13174: LD_INT 12
13176: PUSH
13177: LD_INT 15
13179: PUSH
13180: LD_INT 16
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 23
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 36
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 101
13216: PUSH
13217: LD_INT 102
13219: PUSH
13220: LD_INT 105
13222: PUSH
13223: LD_INT 106
13225: PUSH
13226: LD_INT 108
13228: PUSH
13229: LD_INT 109
13231: PUSH
13232: LD_INT 112
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 15743
13250: LD_INT 6
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13378
13258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: LD_INT 4
13269: PUSH
13270: LD_INT 5
13272: PUSH
13273: LD_INT 6
13275: PUSH
13276: LD_INT 8
13278: PUSH
13279: LD_INT 11
13281: PUSH
13282: LD_INT 12
13284: PUSH
13285: LD_INT 15
13287: PUSH
13288: LD_INT 16
13290: PUSH
13291: LD_INT 20
13293: PUSH
13294: LD_INT 21
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 23
13302: PUSH
13303: LD_INT 25
13305: PUSH
13306: LD_INT 26
13308: PUSH
13309: LD_INT 30
13311: PUSH
13312: LD_INT 31
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 101
13344: PUSH
13345: LD_INT 102
13347: PUSH
13348: LD_INT 105
13350: PUSH
13351: LD_INT 106
13353: PUSH
13354: LD_INT 108
13356: PUSH
13357: LD_INT 109
13359: PUSH
13360: LD_INT 112
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 15743
13378: LD_INT 7
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13486
13386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: LD_INT 5
13400: PUSH
13401: LD_INT 7
13403: PUSH
13404: LD_INT 11
13406: PUSH
13407: LD_INT 12
13409: PUSH
13410: LD_INT 15
13412: PUSH
13413: LD_INT 16
13415: PUSH
13416: LD_INT 20
13418: PUSH
13419: LD_INT 21
13421: PUSH
13422: LD_INT 22
13424: PUSH
13425: LD_INT 23
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 26
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 101
13452: PUSH
13453: LD_INT 102
13455: PUSH
13456: LD_INT 103
13458: PUSH
13459: LD_INT 105
13461: PUSH
13462: LD_INT 106
13464: PUSH
13465: LD_INT 108
13467: PUSH
13468: LD_INT 112
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: ST_TO_ADDR
13484: GO 15743
13486: LD_INT 8
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13622
13494: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: LD_INT 5
13508: PUSH
13509: LD_INT 6
13511: PUSH
13512: LD_INT 7
13514: PUSH
13515: LD_INT 8
13517: PUSH
13518: LD_INT 11
13520: PUSH
13521: LD_INT 12
13523: PUSH
13524: LD_INT 15
13526: PUSH
13527: LD_INT 16
13529: PUSH
13530: LD_INT 20
13532: PUSH
13533: LD_INT 21
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 23
13541: PUSH
13542: LD_INT 25
13544: PUSH
13545: LD_INT 26
13547: PUSH
13548: LD_INT 30
13550: PUSH
13551: LD_INT 31
13553: PUSH
13554: LD_INT 32
13556: PUSH
13557: LD_INT 36
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 101
13584: PUSH
13585: LD_INT 102
13587: PUSH
13588: LD_INT 103
13590: PUSH
13591: LD_INT 105
13593: PUSH
13594: LD_INT 106
13596: PUSH
13597: LD_INT 108
13599: PUSH
13600: LD_INT 109
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: ST_TO_ADDR
13620: GO 15743
13622: LD_INT 9
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13766
13630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 4
13641: PUSH
13642: LD_INT 5
13644: PUSH
13645: LD_INT 6
13647: PUSH
13648: LD_INT 7
13650: PUSH
13651: LD_INT 8
13653: PUSH
13654: LD_INT 11
13656: PUSH
13657: LD_INT 12
13659: PUSH
13660: LD_INT 15
13662: PUSH
13663: LD_INT 16
13665: PUSH
13666: LD_INT 20
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_INT 23
13677: PUSH
13678: LD_INT 25
13680: PUSH
13681: LD_INT 26
13683: PUSH
13684: LD_INT 28
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 101
13724: PUSH
13725: LD_INT 102
13727: PUSH
13728: LD_INT 103
13730: PUSH
13731: LD_INT 105
13733: PUSH
13734: LD_INT 106
13736: PUSH
13737: LD_INT 108
13739: PUSH
13740: LD_INT 109
13742: PUSH
13743: LD_INT 112
13745: PUSH
13746: LD_INT 114
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 15743
13766: LD_INT 10
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13958
13774: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: LD_INT 6
13791: PUSH
13792: LD_INT 7
13794: PUSH
13795: LD_INT 8
13797: PUSH
13798: LD_INT 9
13800: PUSH
13801: LD_INT 10
13803: PUSH
13804: LD_INT 11
13806: PUSH
13807: LD_INT 12
13809: PUSH
13810: LD_INT 13
13812: PUSH
13813: LD_INT 14
13815: PUSH
13816: LD_INT 15
13818: PUSH
13819: LD_INT 16
13821: PUSH
13822: LD_INT 17
13824: PUSH
13825: LD_INT 18
13827: PUSH
13828: LD_INT 19
13830: PUSH
13831: LD_INT 20
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_INT 23
13842: PUSH
13843: LD_INT 24
13845: PUSH
13846: LD_INT 25
13848: PUSH
13849: LD_INT 26
13851: PUSH
13852: LD_INT 28
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 31
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 101
13900: PUSH
13901: LD_INT 102
13903: PUSH
13904: LD_INT 103
13906: PUSH
13907: LD_INT 104
13909: PUSH
13910: LD_INT 105
13912: PUSH
13913: LD_INT 106
13915: PUSH
13916: LD_INT 107
13918: PUSH
13919: LD_INT 108
13921: PUSH
13922: LD_INT 109
13924: PUSH
13925: LD_INT 110
13927: PUSH
13928: LD_INT 111
13930: PUSH
13931: LD_INT 112
13933: PUSH
13934: LD_INT 114
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 15743
13958: LD_INT 11
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14158
13966: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: LD_INT 5
13983: PUSH
13984: LD_INT 6
13986: PUSH
13987: LD_INT 7
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: LD_INT 9
13995: PUSH
13996: LD_INT 10
13998: PUSH
13999: LD_INT 11
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: LD_INT 13
14007: PUSH
14008: LD_INT 14
14010: PUSH
14011: LD_INT 15
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 18
14022: PUSH
14023: LD_INT 19
14025: PUSH
14026: LD_INT 20
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 22
14034: PUSH
14035: LD_INT 23
14037: PUSH
14038: LD_INT 24
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 26
14046: PUSH
14047: LD_INT 28
14049: PUSH
14050: LD_INT 30
14052: PUSH
14053: LD_INT 31
14055: PUSH
14056: LD_INT 32
14058: PUSH
14059: LD_INT 34
14061: PUSH
14062: LD_INT 36
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 101
14100: PUSH
14101: LD_INT 102
14103: PUSH
14104: LD_INT 103
14106: PUSH
14107: LD_INT 104
14109: PUSH
14110: LD_INT 105
14112: PUSH
14113: LD_INT 106
14115: PUSH
14116: LD_INT 107
14118: PUSH
14119: LD_INT 108
14121: PUSH
14122: LD_INT 109
14124: PUSH
14125: LD_INT 110
14127: PUSH
14128: LD_INT 111
14130: PUSH
14131: LD_INT 112
14133: PUSH
14134: LD_INT 114
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: ST_TO_ADDR
14156: GO 15743
14158: LD_INT 12
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14166
14164: GO 14374
14166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14167: LD_ADDR_VAR 0 1
14171: PUSH
14172: LD_INT 1
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: LD_INT 4
14183: PUSH
14184: LD_INT 5
14186: PUSH
14187: LD_INT 6
14189: PUSH
14190: LD_INT 7
14192: PUSH
14193: LD_INT 8
14195: PUSH
14196: LD_INT 9
14198: PUSH
14199: LD_INT 10
14201: PUSH
14202: LD_INT 11
14204: PUSH
14205: LD_INT 12
14207: PUSH
14208: LD_INT 13
14210: PUSH
14211: LD_INT 14
14213: PUSH
14214: LD_INT 15
14216: PUSH
14217: LD_INT 16
14219: PUSH
14220: LD_INT 17
14222: PUSH
14223: LD_INT 18
14225: PUSH
14226: LD_INT 19
14228: PUSH
14229: LD_INT 20
14231: PUSH
14232: LD_INT 21
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 24
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 26
14249: PUSH
14250: LD_INT 27
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 101
14312: PUSH
14313: LD_INT 102
14315: PUSH
14316: LD_INT 103
14318: PUSH
14319: LD_INT 104
14321: PUSH
14322: LD_INT 105
14324: PUSH
14325: LD_INT 106
14327: PUSH
14328: LD_INT 107
14330: PUSH
14331: LD_INT 108
14333: PUSH
14334: LD_INT 109
14336: PUSH
14337: LD_INT 110
14339: PUSH
14340: LD_INT 111
14342: PUSH
14343: LD_INT 112
14345: PUSH
14346: LD_INT 113
14348: PUSH
14349: LD_INT 114
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: ST_TO_ADDR
14372: GO 15743
14374: LD_INT 13
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14578
14382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: LD_INT 3
14396: PUSH
14397: LD_INT 4
14399: PUSH
14400: LD_INT 5
14402: PUSH
14403: LD_INT 8
14405: PUSH
14406: LD_INT 9
14408: PUSH
14409: LD_INT 10
14411: PUSH
14412: LD_INT 11
14414: PUSH
14415: LD_INT 12
14417: PUSH
14418: LD_INT 14
14420: PUSH
14421: LD_INT 15
14423: PUSH
14424: LD_INT 16
14426: PUSH
14427: LD_INT 17
14429: PUSH
14430: LD_INT 18
14432: PUSH
14433: LD_INT 19
14435: PUSH
14436: LD_INT 20
14438: PUSH
14439: LD_INT 21
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 23
14447: PUSH
14448: LD_INT 24
14450: PUSH
14451: LD_INT 25
14453: PUSH
14454: LD_INT 26
14456: PUSH
14457: LD_INT 27
14459: PUSH
14460: LD_INT 28
14462: PUSH
14463: LD_INT 30
14465: PUSH
14466: LD_INT 31
14468: PUSH
14469: LD_INT 32
14471: PUSH
14472: LD_INT 33
14474: PUSH
14475: LD_INT 34
14477: PUSH
14478: LD_INT 36
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 101
14516: PUSH
14517: LD_INT 102
14519: PUSH
14520: LD_INT 103
14522: PUSH
14523: LD_INT 104
14525: PUSH
14526: LD_INT 105
14528: PUSH
14529: LD_INT 106
14531: PUSH
14532: LD_INT 107
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 109
14540: PUSH
14541: LD_INT 110
14543: PUSH
14544: LD_INT 111
14546: PUSH
14547: LD_INT 112
14549: PUSH
14550: LD_INT 113
14552: PUSH
14553: LD_INT 114
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: ST_TO_ADDR
14576: GO 15743
14578: LD_INT 14
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14798
14586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: LD_INT 3
14600: PUSH
14601: LD_INT 4
14603: PUSH
14604: LD_INT 5
14606: PUSH
14607: LD_INT 6
14609: PUSH
14610: LD_INT 7
14612: PUSH
14613: LD_INT 8
14615: PUSH
14616: LD_INT 9
14618: PUSH
14619: LD_INT 10
14621: PUSH
14622: LD_INT 11
14624: PUSH
14625: LD_INT 12
14627: PUSH
14628: LD_INT 13
14630: PUSH
14631: LD_INT 14
14633: PUSH
14634: LD_INT 15
14636: PUSH
14637: LD_INT 16
14639: PUSH
14640: LD_INT 17
14642: PUSH
14643: LD_INT 18
14645: PUSH
14646: LD_INT 19
14648: PUSH
14649: LD_INT 20
14651: PUSH
14652: LD_INT 21
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_INT 23
14660: PUSH
14661: LD_INT 24
14663: PUSH
14664: LD_INT 25
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 27
14672: PUSH
14673: LD_INT 28
14675: PUSH
14676: LD_INT 29
14678: PUSH
14679: LD_INT 30
14681: PUSH
14682: LD_INT 31
14684: PUSH
14685: LD_INT 32
14687: PUSH
14688: LD_INT 33
14690: PUSH
14691: LD_INT 34
14693: PUSH
14694: LD_INT 36
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 101
14736: PUSH
14737: LD_INT 102
14739: PUSH
14740: LD_INT 103
14742: PUSH
14743: LD_INT 104
14745: PUSH
14746: LD_INT 105
14748: PUSH
14749: LD_INT 106
14751: PUSH
14752: LD_INT 107
14754: PUSH
14755: LD_INT 108
14757: PUSH
14758: LD_INT 109
14760: PUSH
14761: LD_INT 110
14763: PUSH
14764: LD_INT 111
14766: PUSH
14767: LD_INT 112
14769: PUSH
14770: LD_INT 113
14772: PUSH
14773: LD_INT 114
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 15743
14798: LD_INT 15
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 15018
14806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 5
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: LD_INT 7
14832: PUSH
14833: LD_INT 8
14835: PUSH
14836: LD_INT 9
14838: PUSH
14839: LD_INT 10
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 13
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 17
14862: PUSH
14863: LD_INT 18
14865: PUSH
14866: LD_INT 19
14868: PUSH
14869: LD_INT 20
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 24
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 26
14889: PUSH
14890: LD_INT 27
14892: PUSH
14893: LD_INT 28
14895: PUSH
14896: LD_INT 29
14898: PUSH
14899: LD_INT 30
14901: PUSH
14902: LD_INT 31
14904: PUSH
14905: LD_INT 32
14907: PUSH
14908: LD_INT 33
14910: PUSH
14911: LD_INT 34
14913: PUSH
14914: LD_INT 36
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 101
14956: PUSH
14957: LD_INT 102
14959: PUSH
14960: LD_INT 103
14962: PUSH
14963: LD_INT 104
14965: PUSH
14966: LD_INT 105
14968: PUSH
14969: LD_INT 106
14971: PUSH
14972: LD_INT 107
14974: PUSH
14975: LD_INT 108
14977: PUSH
14978: LD_INT 109
14980: PUSH
14981: LD_INT 110
14983: PUSH
14984: LD_INT 111
14986: PUSH
14987: LD_INT 112
14989: PUSH
14990: LD_INT 113
14992: PUSH
14993: LD_INT 114
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15743
15018: LD_INT 16
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15150
15026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 4
15037: PUSH
15038: LD_INT 5
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 11
15046: PUSH
15047: LD_INT 12
15049: PUSH
15050: LD_INT 15
15052: PUSH
15053: LD_INT 16
15055: PUSH
15056: LD_INT 20
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 23
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 31
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: LD_INT 33
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 101
15112: PUSH
15113: LD_INT 102
15115: PUSH
15116: LD_INT 103
15118: PUSH
15119: LD_INT 106
15121: PUSH
15122: LD_INT 108
15124: PUSH
15125: LD_INT 112
15127: PUSH
15128: LD_INT 113
15130: PUSH
15131: LD_INT 114
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: ST_TO_ADDR
15148: GO 15743
15150: LD_INT 17
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15370
15158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15159: LD_ADDR_VAR 0 1
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: LD_INT 5
15178: PUSH
15179: LD_INT 6
15181: PUSH
15182: LD_INT 7
15184: PUSH
15185: LD_INT 8
15187: PUSH
15188: LD_INT 9
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: LD_INT 11
15196: PUSH
15197: LD_INT 12
15199: PUSH
15200: LD_INT 13
15202: PUSH
15203: LD_INT 14
15205: PUSH
15206: LD_INT 15
15208: PUSH
15209: LD_INT 16
15211: PUSH
15212: LD_INT 17
15214: PUSH
15215: LD_INT 18
15217: PUSH
15218: LD_INT 19
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_INT 23
15232: PUSH
15233: LD_INT 24
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 26
15241: PUSH
15242: LD_INT 27
15244: PUSH
15245: LD_INT 28
15247: PUSH
15248: LD_INT 29
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: LD_INT 32
15259: PUSH
15260: LD_INT 33
15262: PUSH
15263: LD_INT 34
15265: PUSH
15266: LD_INT 36
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 101
15308: PUSH
15309: LD_INT 102
15311: PUSH
15312: LD_INT 103
15314: PUSH
15315: LD_INT 104
15317: PUSH
15318: LD_INT 105
15320: PUSH
15321: LD_INT 106
15323: PUSH
15324: LD_INT 107
15326: PUSH
15327: LD_INT 108
15329: PUSH
15330: LD_INT 109
15332: PUSH
15333: LD_INT 110
15335: PUSH
15336: LD_INT 111
15338: PUSH
15339: LD_INT 112
15341: PUSH
15342: LD_INT 113
15344: PUSH
15345: LD_INT 114
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: ST_TO_ADDR
15368: GO 15743
15370: LD_INT 18
15372: DOUBLE
15373: EQUAL
15374: IFTRUE 15378
15376: GO 15514
15378: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: LD_INT 5
15392: PUSH
15393: LD_INT 7
15395: PUSH
15396: LD_INT 11
15398: PUSH
15399: LD_INT 12
15401: PUSH
15402: LD_INT 15
15404: PUSH
15405: LD_INT 16
15407: PUSH
15408: LD_INT 20
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_INT 23
15419: PUSH
15420: LD_INT 25
15422: PUSH
15423: LD_INT 26
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: LD_INT 31
15431: PUSH
15432: LD_INT 32
15434: PUSH
15435: LD_INT 33
15437: PUSH
15438: LD_INT 34
15440: PUSH
15441: LD_INT 35
15443: PUSH
15444: LD_INT 36
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 101
15472: PUSH
15473: LD_INT 102
15475: PUSH
15476: LD_INT 103
15478: PUSH
15479: LD_INT 106
15481: PUSH
15482: LD_INT 108
15484: PUSH
15485: LD_INT 112
15487: PUSH
15488: LD_INT 113
15490: PUSH
15491: LD_INT 114
15493: PUSH
15494: LD_INT 115
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: ST_TO_ADDR
15512: GO 15743
15514: LD_INT 19
15516: DOUBLE
15517: EQUAL
15518: IFTRUE 15522
15520: GO 15742
15522: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15523: LD_ADDR_VAR 0 1
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 3
15536: PUSH
15537: LD_INT 4
15539: PUSH
15540: LD_INT 5
15542: PUSH
15543: LD_INT 6
15545: PUSH
15546: LD_INT 7
15548: PUSH
15549: LD_INT 8
15551: PUSH
15552: LD_INT 9
15554: PUSH
15555: LD_INT 10
15557: PUSH
15558: LD_INT 11
15560: PUSH
15561: LD_INT 12
15563: PUSH
15564: LD_INT 13
15566: PUSH
15567: LD_INT 14
15569: PUSH
15570: LD_INT 15
15572: PUSH
15573: LD_INT 16
15575: PUSH
15576: LD_INT 17
15578: PUSH
15579: LD_INT 18
15581: PUSH
15582: LD_INT 19
15584: PUSH
15585: LD_INT 20
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 22
15593: PUSH
15594: LD_INT 23
15596: PUSH
15597: LD_INT 24
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 26
15605: PUSH
15606: LD_INT 27
15608: PUSH
15609: LD_INT 28
15611: PUSH
15612: LD_INT 29
15614: PUSH
15615: LD_INT 30
15617: PUSH
15618: LD_INT 31
15620: PUSH
15621: LD_INT 32
15623: PUSH
15624: LD_INT 33
15626: PUSH
15627: LD_INT 34
15629: PUSH
15630: LD_INT 35
15632: PUSH
15633: LD_INT 36
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 101
15676: PUSH
15677: LD_INT 102
15679: PUSH
15680: LD_INT 103
15682: PUSH
15683: LD_INT 104
15685: PUSH
15686: LD_INT 105
15688: PUSH
15689: LD_INT 106
15691: PUSH
15692: LD_INT 107
15694: PUSH
15695: LD_INT 108
15697: PUSH
15698: LD_INT 109
15700: PUSH
15701: LD_INT 110
15703: PUSH
15704: LD_INT 111
15706: PUSH
15707: LD_INT 112
15709: PUSH
15710: LD_INT 113
15712: PUSH
15713: LD_INT 114
15715: PUSH
15716: LD_INT 115
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 15743
15742: POP
// end else
15743: GO 15962
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15745: LD_ADDR_VAR 0 1
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: LD_INT 2
15755: PUSH
15756: LD_INT 3
15758: PUSH
15759: LD_INT 4
15761: PUSH
15762: LD_INT 5
15764: PUSH
15765: LD_INT 6
15767: PUSH
15768: LD_INT 7
15770: PUSH
15771: LD_INT 8
15773: PUSH
15774: LD_INT 9
15776: PUSH
15777: LD_INT 10
15779: PUSH
15780: LD_INT 11
15782: PUSH
15783: LD_INT 12
15785: PUSH
15786: LD_INT 13
15788: PUSH
15789: LD_INT 14
15791: PUSH
15792: LD_INT 15
15794: PUSH
15795: LD_INT 16
15797: PUSH
15798: LD_INT 17
15800: PUSH
15801: LD_INT 18
15803: PUSH
15804: LD_INT 19
15806: PUSH
15807: LD_INT 20
15809: PUSH
15810: LD_INT 21
15812: PUSH
15813: LD_INT 22
15815: PUSH
15816: LD_INT 23
15818: PUSH
15819: LD_INT 24
15821: PUSH
15822: LD_INT 25
15824: PUSH
15825: LD_INT 26
15827: PUSH
15828: LD_INT 27
15830: PUSH
15831: LD_INT 28
15833: PUSH
15834: LD_INT 29
15836: PUSH
15837: LD_INT 30
15839: PUSH
15840: LD_INT 31
15842: PUSH
15843: LD_INT 32
15845: PUSH
15846: LD_INT 33
15848: PUSH
15849: LD_INT 34
15851: PUSH
15852: LD_INT 35
15854: PUSH
15855: LD_INT 36
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 101
15898: PUSH
15899: LD_INT 102
15901: PUSH
15902: LD_INT 103
15904: PUSH
15905: LD_INT 104
15907: PUSH
15908: LD_INT 105
15910: PUSH
15911: LD_INT 106
15913: PUSH
15914: LD_INT 107
15916: PUSH
15917: LD_INT 108
15919: PUSH
15920: LD_INT 109
15922: PUSH
15923: LD_INT 110
15925: PUSH
15926: LD_INT 111
15928: PUSH
15929: LD_INT 112
15931: PUSH
15932: LD_INT 113
15934: PUSH
15935: LD_INT 114
15937: PUSH
15938: LD_INT 115
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: ST_TO_ADDR
// if result then
15962: LD_VAR 0 1
15966: IFFALSE 16255
// begin normal :=  ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_STRING 
15975: ST_TO_ADDR
// hardcore :=  ;
15976: LD_ADDR_VAR 0 4
15980: PUSH
15981: LD_STRING 
15983: ST_TO_ADDR
// for i = 1 to normalCounter do
15984: LD_ADDR_VAR 0 5
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_EXP 43
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16101
// begin tmp := 0 ;
16002: LD_ADDR_VAR 0 2
16006: PUSH
16007: LD_STRING 0
16009: ST_TO_ADDR
// if result [ 1 ] then
16010: LD_VAR 0 1
16014: PUSH
16015: LD_INT 1
16017: ARRAY
16018: IFFALSE 16083
// if result [ 1 ] [ 1 ] = i then
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 1
16027: ARRAY
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: PUSH
16033: LD_VAR 0 5
16037: EQUAL
16038: IFFALSE 16083
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16040: LD_ADDR_VAR 0 1
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_VAR 0 1
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: CALL_OW 3
16069: PPUSH
16070: CALL_OW 1
16074: ST_TO_ADDR
// tmp := 1 ;
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_STRING 1
16082: ST_TO_ADDR
// end ; normal := normal & tmp ;
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_VAR 0 3
16092: PUSH
16093: LD_VAR 0 2
16097: STR
16098: ST_TO_ADDR
// end ;
16099: GO 15999
16101: POP
16102: POP
// for i = 1 to hardcoreCounter do
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_EXP 44
16117: PUSH
16118: FOR_TO
16119: IFFALSE 16224
// begin tmp := 0 ;
16121: LD_ADDR_VAR 0 2
16125: PUSH
16126: LD_STRING 0
16128: ST_TO_ADDR
// if result [ 2 ] then
16129: LD_VAR 0 1
16133: PUSH
16134: LD_INT 2
16136: ARRAY
16137: IFFALSE 16206
// if result [ 2 ] [ 1 ] = 100 + i then
16139: LD_VAR 0 1
16143: PUSH
16144: LD_INT 2
16146: ARRAY
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PUSH
16152: LD_INT 100
16154: PUSH
16155: LD_VAR 0 5
16159: PLUS
16160: EQUAL
16161: IFFALSE 16206
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16163: LD_ADDR_VAR 0 1
16167: PUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 2
16175: PPUSH
16176: LD_VAR 0 1
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: PPUSH
16185: LD_INT 1
16187: PPUSH
16188: CALL_OW 3
16192: PPUSH
16193: CALL_OW 1
16197: ST_TO_ADDR
// tmp := 1 ;
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_STRING 1
16205: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_VAR 0 4
16215: PUSH
16216: LD_VAR 0 2
16220: STR
16221: ST_TO_ADDR
// end ;
16222: GO 16118
16224: POP
16225: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16226: LD_STRING getStreamItemsFromMission("
16228: PUSH
16229: LD_VAR 0 3
16233: STR
16234: PUSH
16235: LD_STRING ","
16237: STR
16238: PUSH
16239: LD_VAR 0 4
16243: STR
16244: PUSH
16245: LD_STRING ")
16247: STR
16248: PPUSH
16249: CALL_OW 559
// end else
16253: GO 16262
// ToLua ( getStreamItemsFromMission("","") ) ;
16255: LD_STRING getStreamItemsFromMission("","")
16257: PPUSH
16258: CALL_OW 559
// end ;
16262: LD_VAR 0 1
16266: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16267: LD_EXP 42
16271: PUSH
16272: LD_EXP 47
16276: AND
16277: IFFALSE 16401
16279: GO 16281
16281: DISABLE
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
// begin enable ;
16286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_OWVAR 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 34
16309: PUSH
16310: LD_INT 7
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 45
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 34
16329: PUSH
16330: LD_INT 28
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 34
16339: PUSH
16340: LD_INT 47
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16401
// for i in tmp do
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16399
// begin SetLives ( i , 0 ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 0
16392: PPUSH
16393: CALL_OW 234
// end ;
16397: GO 16382
16399: POP
16400: POP
// end ;
16401: PPOPN 2
16403: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16404: LD_EXP 42
16408: PUSH
16409: LD_EXP 48
16413: AND
16414: IFFALSE 16498
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
// begin enable ;
16423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16424: LD_ADDR_VAR 0 2
16428: PUSH
16429: LD_INT 22
16431: PUSH
16432: LD_OWVAR 2
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 32
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PPUSH
16455: CALL_OW 69
16459: ST_TO_ADDR
// if not tmp then
16460: LD_VAR 0 2
16464: NOT
16465: IFFALSE 16469
// exit ;
16467: GO 16498
// for i in tmp do
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: LD_VAR 0 2
16478: PUSH
16479: FOR_IN
16480: IFFALSE 16496
// begin SetLives ( i , 0 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_INT 0
16489: PPUSH
16490: CALL_OW 234
// end ;
16494: GO 16479
16496: POP
16497: POP
// end ;
16498: PPOPN 2
16500: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16501: LD_EXP 42
16505: PUSH
16506: LD_EXP 45
16510: AND
16511: IFFALSE 16604
16513: GO 16515
16515: DISABLE
16516: LD_INT 0
16518: PPUSH
// begin enable ;
16519: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16520: LD_ADDR_VAR 0 1
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 5
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 9
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 25
16562: PUSH
16563: LD_INT 8
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: PUSH
16585: FOR_IN
16586: IFFALSE 16602
// begin SetClass ( i , 1 ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 336
// end ;
16600: GO 16585
16602: POP
16603: POP
// end ;
16604: PPOPN 1
16606: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16607: LD_EXP 42
16611: PUSH
16612: LD_EXP 46
16616: AND
16617: PUSH
16618: LD_OWVAR 65
16622: PUSH
16623: LD_INT 7
16625: LESS
16626: AND
16627: IFFALSE 16641
16629: GO 16631
16631: DISABLE
// begin enable ;
16632: ENABLE
// game_speed := 7 ;
16633: LD_ADDR_OWVAR 65
16637: PUSH
16638: LD_INT 7
16640: ST_TO_ADDR
// end ;
16641: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16642: LD_EXP 42
16646: PUSH
16647: LD_EXP 49
16651: AND
16652: IFFALSE 16854
16654: GO 16656
16656: DISABLE
16657: LD_INT 0
16659: PPUSH
16660: PPUSH
16661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16662: LD_ADDR_VAR 0 3
16666: PUSH
16667: LD_INT 81
16669: PUSH
16670: LD_OWVAR 2
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not tmp then
16698: LD_VAR 0 3
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16854
// if tmp > 5 then
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 5
16714: GREATER
16715: IFFALSE 16727
// k := 5 else
16717: LD_ADDR_VAR 0 2
16721: PUSH
16722: LD_INT 5
16724: ST_TO_ADDR
16725: GO 16737
// k := tmp ;
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: LD_VAR 0 3
16736: ST_TO_ADDR
// for i := 1 to k do
16737: LD_ADDR_VAR 0 1
16741: PUSH
16742: DOUBLE
16743: LD_INT 1
16745: DEC
16746: ST_TO_ADDR
16747: LD_VAR 0 2
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16852
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16755: LD_VAR 0 3
16759: PUSH
16760: LD_VAR 0 1
16764: ARRAY
16765: PPUSH
16766: LD_VAR 0 1
16770: PUSH
16771: LD_INT 4
16773: MOD
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: CALL_OW 259
16783: PUSH
16784: LD_INT 10
16786: LESS
16787: IFFALSE 16850
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16789: LD_VAR 0 3
16793: PUSH
16794: LD_VAR 0 1
16798: ARRAY
16799: PPUSH
16800: LD_VAR 0 1
16804: PUSH
16805: LD_INT 4
16807: MOD
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: PPUSH
16813: LD_VAR 0 3
16817: PUSH
16818: LD_VAR 0 1
16822: ARRAY
16823: PPUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 4
16831: MOD
16832: PUSH
16833: LD_INT 1
16835: PLUS
16836: PPUSH
16837: CALL_OW 259
16841: PUSH
16842: LD_INT 1
16844: PLUS
16845: PPUSH
16846: CALL_OW 237
16850: GO 16752
16852: POP
16853: POP
// end ;
16854: PPOPN 3
16856: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16857: LD_EXP 42
16861: PUSH
16862: LD_EXP 50
16866: AND
16867: IFFALSE 16887
16869: GO 16871
16871: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16872: LD_INT 4
16874: PPUSH
16875: LD_OWVAR 2
16879: PPUSH
16880: LD_INT 0
16882: PPUSH
16883: CALL_OW 324
16887: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16888: LD_EXP 42
16892: PUSH
16893: LD_EXP 79
16897: AND
16898: IFFALSE 16918
16900: GO 16902
16902: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16903: LD_INT 19
16905: PPUSH
16906: LD_OWVAR 2
16910: PPUSH
16911: LD_INT 0
16913: PPUSH
16914: CALL_OW 324
16918: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16919: LD_EXP 42
16923: PUSH
16924: LD_EXP 51
16928: AND
16929: IFFALSE 17031
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
16937: PPUSH
// begin enable ;
16938: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16939: LD_ADDR_VAR 0 2
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_OWVAR 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 34
16961: PUSH
16962: LD_INT 11
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 34
16971: PUSH
16972: LD_INT 30
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if not tmp then
16993: LD_VAR 0 2
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17031
// for i in tmp do
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: LD_VAR 0 2
17011: PUSH
17012: FOR_IN
17013: IFFALSE 17029
// begin SetLives ( i , 0 ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 0
17022: PPUSH
17023: CALL_OW 234
// end ;
17027: GO 17012
17029: POP
17030: POP
// end ;
17031: PPOPN 2
17033: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17034: LD_EXP 42
17038: PUSH
17039: LD_EXP 52
17043: AND
17044: IFFALSE 17064
17046: GO 17048
17048: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17049: LD_INT 32
17051: PPUSH
17052: LD_OWVAR 2
17056: PPUSH
17057: LD_INT 0
17059: PPUSH
17060: CALL_OW 324
17064: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17065: LD_EXP 42
17069: PUSH
17070: LD_EXP 53
17074: AND
17075: IFFALSE 17256
17077: GO 17079
17079: DISABLE
17080: LD_INT 0
17082: PPUSH
17083: PPUSH
17084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17085: LD_ADDR_VAR 0 2
17089: PUSH
17090: LD_INT 22
17092: PUSH
17093: LD_OWVAR 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 33
17104: PUSH
17105: LD_INT 3
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17256
// side := 0 ;
17130: LD_ADDR_VAR 0 3
17134: PUSH
17135: LD_INT 0
17137: ST_TO_ADDR
// for i := 1 to 8 do
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: DOUBLE
17144: LD_INT 1
17146: DEC
17147: ST_TO_ADDR
17148: LD_INT 8
17150: PUSH
17151: FOR_TO
17152: IFFALSE 17200
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17154: LD_OWVAR 2
17158: PUSH
17159: LD_VAR 0 1
17163: NONEQUAL
17164: PUSH
17165: LD_OWVAR 2
17169: PPUSH
17170: LD_VAR 0 1
17174: PPUSH
17175: CALL_OW 81
17179: PUSH
17180: LD_INT 2
17182: EQUAL
17183: AND
17184: IFFALSE 17198
// begin side := i ;
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: LD_VAR 0 1
17195: ST_TO_ADDR
// break ;
17196: GO 17200
// end ;
17198: GO 17151
17200: POP
17201: POP
// if not side then
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17211
// exit ;
17209: GO 17256
// for i := 1 to tmp do
17211: LD_ADDR_VAR 0 1
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_VAR 0 2
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17254
// if Prob ( 60 ) then
17229: LD_INT 60
17231: PPUSH
17232: CALL_OW 13
17236: IFFALSE 17252
// SetSide ( i , side ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: CALL_OW 235
17252: GO 17226
17254: POP
17255: POP
// end ;
17256: PPOPN 3
17258: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17259: LD_EXP 42
17263: PUSH
17264: LD_EXP 55
17268: AND
17269: IFFALSE 17388
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_OWVAR 2
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 23
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 69
17330: PUSH
17331: FOR_IN
17332: IFFALSE 17386
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 257
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 4
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: IN
17362: IFFALSE 17384
// SetClass ( un , rand ( 1 , 4 ) ) ;
17364: LD_VAR 0 1
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: LD_INT 4
17374: PPUSH
17375: CALL_OW 12
17379: PPUSH
17380: CALL_OW 336
17384: GO 17331
17386: POP
17387: POP
// end ;
17388: PPOPN 1
17390: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17391: LD_EXP 42
17395: PUSH
17396: LD_EXP 54
17400: AND
17401: IFFALSE 17480
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_OWVAR 2
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 21
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: ST_TO_ADDR
// if not tmp then
17445: LD_VAR 0 1
17449: NOT
17450: IFFALSE 17454
// exit ;
17452: GO 17480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17454: LD_VAR 0 1
17458: PUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 12
17471: ARRAY
17472: PPUSH
17473: LD_INT 100
17475: PPUSH
17476: CALL_OW 234
// end ;
17480: PPOPN 1
17482: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17483: LD_EXP 42
17487: PUSH
17488: LD_EXP 56
17492: AND
17493: IFFALSE 17591
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17501: LD_ADDR_VAR 0 1
17505: PUSH
17506: LD_INT 22
17508: PUSH
17509: LD_OWVAR 2
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 21
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if not tmp then
17537: LD_VAR 0 1
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 17591
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17546: LD_VAR 0 1
17550: PUSH
17551: LD_INT 1
17553: PPUSH
17554: LD_VAR 0 1
17558: PPUSH
17559: CALL_OW 12
17563: ARRAY
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: LD_INT 4
17570: PPUSH
17571: CALL_OW 12
17575: PPUSH
17576: LD_INT 3000
17578: PPUSH
17579: LD_INT 9000
17581: PPUSH
17582: CALL_OW 12
17586: PPUSH
17587: CALL_OW 492
// end ;
17591: PPOPN 1
17593: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17594: LD_EXP 42
17598: PUSH
17599: LD_EXP 57
17603: AND
17604: IFFALSE 17624
17606: GO 17608
17608: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17609: LD_INT 1
17611: PPUSH
17612: LD_OWVAR 2
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 324
17624: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17625: LD_EXP 42
17629: PUSH
17630: LD_EXP 58
17634: AND
17635: IFFALSE 17718
17637: GO 17639
17639: DISABLE
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17644: LD_ADDR_VAR 0 2
17648: PUSH
17649: LD_INT 22
17651: PUSH
17652: LD_OWVAR 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 3
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// if not tmp then
17680: LD_VAR 0 2
17684: NOT
17685: IFFALSE 17689
// exit ;
17687: GO 17718
// for i in tmp do
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 2
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17716
// SetBLevel ( i , 10 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 10
17709: PPUSH
17710: CALL_OW 241
17714: GO 17699
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17721: LD_EXP 42
17725: PUSH
17726: LD_EXP 59
17730: AND
17731: IFFALSE 17842
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 25
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 3
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17842
// un := tmp [ rand ( 1 , tmp ) ] ;
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: CALL_OW 12
17808: ARRAY
17809: ST_TO_ADDR
// if Crawls ( un ) then
17810: LD_VAR 0 2
17814: PPUSH
17815: CALL_OW 318
17819: IFFALSE 17830
// ComWalk ( un ) ;
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17830: LD_VAR 0 2
17834: PPUSH
17835: LD_INT 5
17837: PPUSH
17838: CALL_OW 336
// end ;
17842: PPOPN 3
17844: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17845: LD_EXP 42
17849: PUSH
17850: LD_EXP 60
17854: AND
17855: PUSH
17856: LD_OWVAR 67
17860: PUSH
17861: LD_INT 3
17863: LESS
17864: AND
17865: IFFALSE 17884
17867: GO 17869
17869: DISABLE
// Difficulty := Difficulty + 1 ;
17870: LD_ADDR_OWVAR 67
17874: PUSH
17875: LD_OWVAR 67
17879: PUSH
17880: LD_INT 1
17882: PLUS
17883: ST_TO_ADDR
17884: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17885: LD_EXP 42
17889: PUSH
17890: LD_EXP 61
17894: AND
17895: IFFALSE 17998
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
// begin for i := 1 to 5 do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: DOUBLE
17909: LD_INT 1
17911: DEC
17912: ST_TO_ADDR
17913: LD_INT 5
17915: PUSH
17916: FOR_TO
17917: IFFALSE 17996
// begin uc_nation := nation_nature ;
17919: LD_ADDR_OWVAR 21
17923: PUSH
17924: LD_INT 0
17926: ST_TO_ADDR
// uc_side := 0 ;
17927: LD_ADDR_OWVAR 20
17931: PUSH
17932: LD_INT 0
17934: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17935: LD_ADDR_OWVAR 29
17939: PUSH
17940: LD_INT 12
17942: PUSH
17943: LD_INT 12
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// hc_agressivity := 20 ;
17950: LD_ADDR_OWVAR 35
17954: PUSH
17955: LD_INT 20
17957: ST_TO_ADDR
// hc_class := class_tiger ;
17958: LD_ADDR_OWVAR 28
17962: PUSH
17963: LD_INT 14
17965: ST_TO_ADDR
// hc_gallery :=  ;
17966: LD_ADDR_OWVAR 33
17970: PUSH
17971: LD_STRING 
17973: ST_TO_ADDR
// hc_name :=  ;
17974: LD_ADDR_OWVAR 26
17978: PUSH
17979: LD_STRING 
17981: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17982: CALL_OW 44
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 51
// end ;
17994: GO 17916
17996: POP
17997: POP
// end ;
17998: PPOPN 1
18000: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18001: LD_EXP 42
18005: PUSH
18006: LD_EXP 62
18010: AND
18011: IFFALSE 18020
18013: GO 18015
18015: DISABLE
// StreamSibBomb ;
18016: CALL 18021 0 0
18020: END
// export function StreamSibBomb ; var i , x , y ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
// result := false ;
18027: LD_ADDR_VAR 0 1
18031: PUSH
18032: LD_INT 0
18034: ST_TO_ADDR
// for i := 1 to 16 do
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: DOUBLE
18041: LD_INT 1
18043: DEC
18044: ST_TO_ADDR
18045: LD_INT 16
18047: PUSH
18048: FOR_TO
18049: IFFALSE 18248
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18051: LD_ADDR_VAR 0 3
18055: PUSH
18056: LD_INT 10
18058: PUSH
18059: LD_INT 20
18061: PUSH
18062: LD_INT 30
18064: PUSH
18065: LD_INT 40
18067: PUSH
18068: LD_INT 50
18070: PUSH
18071: LD_INT 60
18073: PUSH
18074: LD_INT 70
18076: PUSH
18077: LD_INT 80
18079: PUSH
18080: LD_INT 90
18082: PUSH
18083: LD_INT 100
18085: PUSH
18086: LD_INT 110
18088: PUSH
18089: LD_INT 120
18091: PUSH
18092: LD_INT 130
18094: PUSH
18095: LD_INT 140
18097: PUSH
18098: LD_INT 150
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PPUSH
18121: LD_INT 15
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18130: LD_ADDR_VAR 0 4
18134: PUSH
18135: LD_INT 10
18137: PUSH
18138: LD_INT 20
18140: PUSH
18141: LD_INT 30
18143: PUSH
18144: LD_INT 40
18146: PUSH
18147: LD_INT 50
18149: PUSH
18150: LD_INT 60
18152: PUSH
18153: LD_INT 70
18155: PUSH
18156: LD_INT 80
18158: PUSH
18159: LD_INT 90
18161: PUSH
18162: LD_INT 100
18164: PUSH
18165: LD_INT 110
18167: PUSH
18168: LD_INT 120
18170: PUSH
18171: LD_INT 130
18173: PUSH
18174: LD_INT 140
18176: PUSH
18177: LD_INT 150
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PPUSH
18200: LD_INT 15
18202: PPUSH
18203: CALL_OW 12
18207: ARRAY
18208: ST_TO_ADDR
// if ValidHex ( x , y ) then
18209: LD_VAR 0 3
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 488
18223: IFFALSE 18246
// begin result := [ x , y ] ;
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: LD_VAR 0 3
18234: PUSH
18235: LD_VAR 0 4
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: ST_TO_ADDR
// break ;
18244: GO 18248
// end ; end ;
18246: GO 18048
18248: POP
18249: POP
// if result then
18250: LD_VAR 0 1
18254: IFFALSE 18314
// begin ToLua ( playSibBomb() ) ;
18256: LD_STRING playSibBomb()
18258: PPUSH
18259: CALL_OW 559
// wait ( 0 0$14 ) ;
18263: LD_INT 490
18265: PPUSH
18266: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 1
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PPUSH
18288: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18292: LD_VAR 0 1
18296: PUSH
18297: LD_INT 1
18299: ARRAY
18300: PPUSH
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 2
18308: ARRAY
18309: PPUSH
18310: CALL_OW 429
// end ; end ;
18314: LD_VAR 0 1
18318: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18319: LD_EXP 42
18323: PUSH
18324: LD_EXP 64
18328: AND
18329: IFFALSE 18341
18331: GO 18333
18333: DISABLE
// YouLost (  ) ;
18334: LD_STRING 
18336: PPUSH
18337: CALL_OW 104
18341: END
// every 0 0$1 trigger StreamModeActive and sFog do
18342: LD_EXP 42
18346: PUSH
18347: LD_EXP 63
18351: AND
18352: IFFALSE 18366
18354: GO 18356
18356: DISABLE
// FogOff ( your_side ) ;
18357: LD_OWVAR 2
18361: PPUSH
18362: CALL_OW 344
18366: END
// every 0 0$1 trigger StreamModeActive and sSun do
18367: LD_EXP 42
18371: PUSH
18372: LD_EXP 65
18376: AND
18377: IFFALSE 18405
18379: GO 18381
18381: DISABLE
// begin solar_recharge_percent := 0 ;
18382: LD_ADDR_OWVAR 79
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18390: LD_INT 10500
18392: PPUSH
18393: CALL_OW 67
// solar_recharge_percent := 100 ;
18397: LD_ADDR_OWVAR 79
18401: PUSH
18402: LD_INT 100
18404: ST_TO_ADDR
// end ;
18405: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18406: LD_EXP 42
18410: PUSH
18411: LD_EXP 66
18415: AND
18416: IFFALSE 18655
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := [ ] ;
18426: LD_ADDR_VAR 0 3
18430: PUSH
18431: EMPTY
18432: ST_TO_ADDR
// for i := 1 to 6 do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: DOUBLE
18439: LD_INT 1
18441: DEC
18442: ST_TO_ADDR
18443: LD_INT 6
18445: PUSH
18446: FOR_TO
18447: IFFALSE 18552
// begin uc_nation := nation_nature ;
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// uc_side := 0 ;
18457: LD_ADDR_OWVAR 20
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18465: LD_ADDR_OWVAR 29
18469: PUSH
18470: LD_INT 12
18472: PUSH
18473: LD_INT 12
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// hc_agressivity := 20 ;
18480: LD_ADDR_OWVAR 35
18484: PUSH
18485: LD_INT 20
18487: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18488: LD_ADDR_OWVAR 28
18492: PUSH
18493: LD_INT 17
18495: ST_TO_ADDR
// hc_gallery :=  ;
18496: LD_ADDR_OWVAR 33
18500: PUSH
18501: LD_STRING 
18503: ST_TO_ADDR
// hc_name :=  ;
18504: LD_ADDR_OWVAR 26
18508: PUSH
18509: LD_STRING 
18511: ST_TO_ADDR
// un := CreateHuman ;
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: CALL_OW 44
18521: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 51
// tmp := tmp ^ un ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 3
18543: PUSH
18544: LD_VAR 0 2
18548: ADD
18549: ST_TO_ADDR
// end ;
18550: GO 18446
18552: POP
18553: POP
// repeat wait ( 0 0$1 ) ;
18554: LD_INT 35
18556: PPUSH
18557: CALL_OW 67
// for un in tmp do
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_VAR 0 3
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18646
// begin if IsDead ( un ) then
18574: LD_VAR 0 2
18578: PPUSH
18579: CALL_OW 301
18583: IFFALSE 18603
// begin tmp := tmp diff un ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_VAR 0 3
18594: PUSH
18595: LD_VAR 0 2
18599: DIFF
18600: ST_TO_ADDR
// continue ;
18601: GO 18571
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_INT 3
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PPUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 74
18639: PPUSH
18640: CALL_OW 115
// end ;
18644: GO 18571
18646: POP
18647: POP
// until not tmp ;
18648: LD_VAR 0 3
18652: NOT
18653: IFFALSE 18554
// end ;
18655: PPOPN 3
18657: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18658: LD_EXP 42
18662: PUSH
18663: LD_EXP 67
18667: AND
18668: IFFALSE 18722
18670: GO 18672
18672: DISABLE
// begin ToLua ( displayTroll(); ) ;
18673: LD_STRING displayTroll();
18675: PPUSH
18676: CALL_OW 559
// wait ( 3 3$00 ) ;
18680: LD_INT 6300
18682: PPUSH
18683: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18687: LD_STRING hideTroll();
18689: PPUSH
18690: CALL_OW 559
// wait ( 1 1$00 ) ;
18694: LD_INT 2100
18696: PPUSH
18697: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18701: LD_STRING displayTroll();
18703: PPUSH
18704: CALL_OW 559
// wait ( 1 1$00 ) ;
18708: LD_INT 2100
18710: PPUSH
18711: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18715: LD_STRING hideTroll();
18717: PPUSH
18718: CALL_OW 559
// end ;
18722: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18723: LD_EXP 42
18727: PUSH
18728: LD_EXP 68
18732: AND
18733: IFFALSE 18796
18735: GO 18737
18737: DISABLE
18738: LD_INT 0
18740: PPUSH
// begin p := 0 ;
18741: LD_ADDR_VAR 0 1
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// repeat game_speed := 1 ;
18749: LD_ADDR_OWVAR 65
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18757: LD_INT 35
18759: PPUSH
18760: CALL_OW 67
// p := p + 1 ;
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_VAR 0 1
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// until p >= 60 ;
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 60
18785: GREATEREQUAL
18786: IFFALSE 18749
// game_speed := 4 ;
18788: LD_ADDR_OWVAR 65
18792: PUSH
18793: LD_INT 4
18795: ST_TO_ADDR
// end ;
18796: PPOPN 1
18798: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18799: LD_EXP 42
18803: PUSH
18804: LD_EXP 69
18808: AND
18809: IFFALSE 18955
18811: GO 18813
18813: DISABLE
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18818: LD_ADDR_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 30
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 30
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: CALL_OW 69
18871: ST_TO_ADDR
// if not depot then
18872: LD_VAR 0 1
18876: NOT
18877: IFFALSE 18881
// exit ;
18879: GO 18955
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 1
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 12
18903: ARRAY
18904: PPUSH
18905: CALL_OW 274
18909: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18910: LD_VAR 0 2
18914: PPUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_INT 0
18920: PPUSH
18921: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18925: LD_VAR 0 2
18929: PPUSH
18930: LD_INT 2
18932: PPUSH
18933: LD_INT 0
18935: PPUSH
18936: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18940: LD_VAR 0 2
18944: PPUSH
18945: LD_INT 3
18947: PPUSH
18948: LD_INT 0
18950: PPUSH
18951: CALL_OW 277
// end ;
18955: PPOPN 2
18957: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18958: LD_EXP 42
18962: PUSH
18963: LD_EXP 70
18967: AND
18968: IFFALSE 19065
18970: GO 18972
18972: DISABLE
18973: LD_INT 0
18975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18976: LD_ADDR_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_OWVAR 2
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 23
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: ST_TO_ADDR
// if not tmp then
19030: LD_VAR 0 1
19034: NOT
19035: IFFALSE 19039
// exit ;
19037: GO 19065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19039: LD_VAR 0 1
19043: PUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 12
19056: ARRAY
19057: PPUSH
19058: LD_INT 200
19060: PPUSH
19061: CALL_OW 234
// end ;
19065: PPOPN 1
19067: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19068: LD_EXP 42
19072: PUSH
19073: LD_EXP 71
19077: AND
19078: IFFALSE 19157
19080: GO 19082
19082: DISABLE
19083: LD_INT 0
19085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19086: LD_ADDR_VAR 0 1
19090: PUSH
19091: LD_INT 22
19093: PUSH
19094: LD_OWVAR 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 21
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PPUSH
19117: CALL_OW 69
19121: ST_TO_ADDR
// if not tmp then
19122: LD_VAR 0 1
19126: NOT
19127: IFFALSE 19131
// exit ;
19129: GO 19157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19131: LD_VAR 0 1
19135: PUSH
19136: LD_INT 1
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 12
19148: ARRAY
19149: PPUSH
19150: LD_INT 60
19152: PPUSH
19153: CALL_OW 234
// end ;
19157: PPOPN 1
19159: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19160: LD_EXP 42
19164: PUSH
19165: LD_EXP 72
19169: AND
19170: IFFALSE 19269
19172: GO 19174
19174: DISABLE
19175: LD_INT 0
19177: PPUSH
19178: PPUSH
// begin enable ;
19179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19180: LD_ADDR_VAR 0 1
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_OWVAR 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 61
19199: PUSH
19200: EMPTY
19201: LIST
19202: PUSH
19203: LD_INT 33
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: LIST
19217: PPUSH
19218: CALL_OW 69
19222: ST_TO_ADDR
// if not tmp then
19223: LD_VAR 0 1
19227: NOT
19228: IFFALSE 19232
// exit ;
19230: GO 19269
// for i in tmp do
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: LD_VAR 0 1
19241: PUSH
19242: FOR_IN
19243: IFFALSE 19267
// if IsControledBy ( i ) then
19245: LD_VAR 0 2
19249: PPUSH
19250: CALL_OW 312
19254: IFFALSE 19265
// ComUnlink ( i ) ;
19256: LD_VAR 0 2
19260: PPUSH
19261: CALL_OW 136
19265: GO 19242
19267: POP
19268: POP
// end ;
19269: PPOPN 2
19271: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19272: LD_EXP 42
19276: PUSH
19277: LD_EXP 73
19281: AND
19282: IFFALSE 19422
19284: GO 19286
19286: DISABLE
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
// begin ToLua ( displayPowell(); ) ;
19291: LD_STRING displayPowell();
19293: PPUSH
19294: CALL_OW 559
// uc_side := 0 ;
19298: LD_ADDR_OWVAR 20
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// uc_nation := 2 ;
19306: LD_ADDR_OWVAR 21
19310: PUSH
19311: LD_INT 2
19313: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19314: LD_ADDR_OWVAR 37
19318: PUSH
19319: LD_INT 14
19321: ST_TO_ADDR
// vc_engine := engine_siberite ;
19322: LD_ADDR_OWVAR 39
19326: PUSH
19327: LD_INT 3
19329: ST_TO_ADDR
// vc_control := control_apeman ;
19330: LD_ADDR_OWVAR 38
19334: PUSH
19335: LD_INT 5
19337: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19338: LD_ADDR_OWVAR 40
19342: PUSH
19343: LD_INT 29
19345: ST_TO_ADDR
// un := CreateVehicle ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: CALL_OW 45
19355: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19356: LD_VAR 0 2
19360: PPUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19368: LD_INT 35
19370: PPUSH
19371: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19375: LD_VAR 0 2
19379: PPUSH
19380: LD_INT 22
19382: PUSH
19383: LD_OWVAR 2
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: PPUSH
19397: LD_VAR 0 2
19401: PPUSH
19402: CALL_OW 74
19406: PPUSH
19407: CALL_OW 115
// until IsDead ( un ) ;
19411: LD_VAR 0 2
19415: PPUSH
19416: CALL_OW 301
19420: IFFALSE 19368
// end ;
19422: PPOPN 2
19424: END
// every 0 0$1 trigger StreamModeActive and sStu do
19425: LD_EXP 42
19429: PUSH
19430: LD_EXP 81
19434: AND
19435: IFFALSE 19451
19437: GO 19439
19439: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19440: LD_STRING displayStucuk();
19442: PPUSH
19443: CALL_OW 559
// ResetFog ;
19447: CALL_OW 335
// end ;
19451: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19452: LD_EXP 42
19456: PUSH
19457: LD_EXP 74
19461: AND
19462: IFFALSE 19603
19464: GO 19466
19466: DISABLE
19467: LD_INT 0
19469: PPUSH
19470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_OWVAR 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 69
19506: ST_TO_ADDR
// if not tmp then
19507: LD_VAR 0 2
19511: NOT
19512: IFFALSE 19516
// exit ;
19514: GO 19603
// un := tmp [ rand ( 1 , tmp ) ] ;
19516: LD_ADDR_VAR 0 1
19520: PUSH
19521: LD_VAR 0 2
19525: PUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_VAR 0 2
19533: PPUSH
19534: CALL_OW 12
19538: ARRAY
19539: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: LD_INT 0
19547: PPUSH
19548: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_OWVAR 3
19561: PUSH
19562: LD_VAR 0 1
19566: DIFF
19567: PPUSH
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 74
19577: PPUSH
19578: CALL_OW 115
// wait ( 0 0$20 ) ;
19582: LD_INT 700
19584: PPUSH
19585: CALL_OW 67
// SetSide ( un , your_side ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: LD_OWVAR 2
19598: PPUSH
19599: CALL_OW 235
// end ;
19603: PPOPN 2
19605: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19606: LD_EXP 42
19610: PUSH
19611: LD_EXP 75
19615: AND
19616: IFFALSE 19722
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: LD_INT 30
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 30
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PPUSH
19673: CALL_OW 69
19677: ST_TO_ADDR
// if not depot then
19678: LD_VAR 0 1
19682: NOT
19683: IFFALSE 19687
// exit ;
19685: GO 19722
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: PPUSH
19696: CALL_OW 250
19700: PPUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PPUSH
19710: CALL_OW 251
19714: PPUSH
19715: LD_INT 70
19717: PPUSH
19718: CALL_OW 495
// end ;
19722: PPOPN 1
19724: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19725: LD_EXP 42
19729: PUSH
19730: LD_EXP 76
19734: AND
19735: IFFALSE 19946
19737: GO 19739
19739: DISABLE
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
19744: PPUSH
19745: PPUSH
19746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19747: LD_ADDR_VAR 0 5
19751: PUSH
19752: LD_INT 22
19754: PUSH
19755: LD_OWVAR 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: ST_TO_ADDR
// if not tmp then
19783: LD_VAR 0 5
19787: NOT
19788: IFFALSE 19792
// exit ;
19790: GO 19946
// for i in tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: LD_VAR 0 5
19801: PUSH
19802: FOR_IN
19803: IFFALSE 19944
// begin d := rand ( 0 , 5 ) ;
19805: LD_ADDR_VAR 0 4
19809: PUSH
19810: LD_INT 0
19812: PPUSH
19813: LD_INT 5
19815: PPUSH
19816: CALL_OW 12
19820: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: LD_VAR 0 1
19830: PPUSH
19831: CALL_OW 250
19835: PPUSH
19836: LD_VAR 0 4
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: LD_INT 12
19846: PPUSH
19847: CALL_OW 12
19851: PPUSH
19852: CALL_OW 272
19856: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 251
19871: PPUSH
19872: LD_VAR 0 4
19876: PPUSH
19877: LD_INT 3
19879: PPUSH
19880: LD_INT 12
19882: PPUSH
19883: CALL_OW 12
19887: PPUSH
19888: CALL_OW 273
19892: ST_TO_ADDR
// if ValidHex ( x , y ) then
19893: LD_VAR 0 2
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 488
19907: IFFALSE 19942
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_VAR 0 2
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: LD_INT 3
19926: PPUSH
19927: LD_INT 6
19929: PPUSH
19930: CALL_OW 12
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: CALL_OW 483
// end ;
19942: GO 19802
19944: POP
19945: POP
// end ;
19946: PPOPN 5
19948: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19949: LD_EXP 42
19953: PUSH
19954: LD_EXP 77
19958: AND
19959: IFFALSE 20053
19961: GO 19963
19963: DISABLE
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 22
19975: PUSH
19976: LD_OWVAR 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 32
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 2
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20053
// for i in tmp do
20024: LD_ADDR_VAR 0 1
20028: PUSH
20029: LD_VAR 0 2
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20051
// SetFuel ( i , 0 ) ;
20037: LD_VAR 0 1
20041: PPUSH
20042: LD_INT 0
20044: PPUSH
20045: CALL_OW 240
20049: GO 20034
20051: POP
20052: POP
// end ;
20053: PPOPN 2
20055: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20056: LD_EXP 42
20060: PUSH
20061: LD_EXP 78
20065: AND
20066: IFFALSE 20132
20068: GO 20070
20070: DISABLE
20071: LD_INT 0
20073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20074: LD_ADDR_VAR 0 1
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_OWVAR 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 29
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: ST_TO_ADDR
// if not tmp then
20110: LD_VAR 0 1
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20132
// DestroyUnit ( tmp [ 1 ] ) ;
20119: LD_VAR 0 1
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: CALL_OW 65
// end ;
20132: PPOPN 1
20134: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20135: LD_EXP 42
20139: PUSH
20140: LD_EXP 80
20144: AND
20145: IFFALSE 20274
20147: GO 20149
20149: DISABLE
20150: LD_INT 0
20152: PPUSH
// begin uc_side := 0 ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// uc_nation := nation_arabian ;
20161: LD_ADDR_OWVAR 21
20165: PUSH
20166: LD_INT 2
20168: ST_TO_ADDR
// hc_gallery :=  ;
20169: LD_ADDR_OWVAR 33
20173: PUSH
20174: LD_STRING 
20176: ST_TO_ADDR
// hc_name :=  ;
20177: LD_ADDR_OWVAR 26
20181: PUSH
20182: LD_STRING 
20184: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20185: LD_INT 1
20187: PPUSH
20188: LD_INT 11
20190: PPUSH
20191: LD_INT 10
20193: PPUSH
20194: CALL_OW 380
// un := CreateHuman ;
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: CALL_OW 44
20207: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20208: LD_VAR 0 1
20212: PPUSH
20213: LD_INT 1
20215: PPUSH
20216: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20220: LD_INT 35
20222: PPUSH
20223: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20227: LD_VAR 0 1
20231: PPUSH
20232: LD_INT 22
20234: PUSH
20235: LD_OWVAR 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: CALL_OW 69
20248: PPUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 74
20258: PPUSH
20259: CALL_OW 115
// until IsDead ( un ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: CALL_OW 301
20272: IFFALSE 20220
// end ;
20274: PPOPN 1
20276: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20277: LD_EXP 42
20281: PUSH
20282: LD_EXP 82
20286: AND
20287: IFFALSE 20299
20289: GO 20291
20291: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20292: LD_STRING earthquake(getX(game), 0, 32)
20294: PPUSH
20295: CALL_OW 559
20299: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20300: LD_EXP 42
20304: PUSH
20305: LD_EXP 83
20309: AND
20310: IFFALSE 20401
20312: GO 20314
20314: DISABLE
20315: LD_INT 0
20317: PPUSH
// begin enable ;
20318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20319: LD_ADDR_VAR 0 1
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_OWVAR 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 21
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 33
20348: PUSH
20349: LD_INT 3
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: PPUSH
20361: CALL_OW 69
20365: ST_TO_ADDR
// if not tmp then
20366: LD_VAR 0 1
20370: NOT
20371: IFFALSE 20375
// exit ;
20373: GO 20401
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20375: LD_VAR 0 1
20379: PUSH
20380: LD_INT 1
20382: PPUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 12
20392: ARRAY
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: CALL_OW 234
// end ;
20401: PPOPN 1
20403: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20404: LD_EXP 42
20408: PUSH
20409: LD_EXP 84
20413: AND
20414: IFFALSE 20555
20416: GO 20418
20418: DISABLE
20419: LD_INT 0
20421: PPUSH
20422: PPUSH
20423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20424: LD_ADDR_VAR 0 3
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 25
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not tmp then
20460: LD_VAR 0 3
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20555
// un := tmp [ rand ( 1 , tmp ) ] ;
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_VAR 0 3
20486: PPUSH
20487: CALL_OW 12
20491: ARRAY
20492: ST_TO_ADDR
// if Crawls ( un ) then
20493: LD_VAR 0 2
20497: PPUSH
20498: CALL_OW 318
20502: IFFALSE 20513
// ComWalk ( un ) ;
20504: LD_VAR 0 2
20508: PPUSH
20509: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 9
20520: PPUSH
20521: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20525: LD_INT 28
20527: PPUSH
20528: LD_OWVAR 2
20532: PPUSH
20533: LD_INT 2
20535: PPUSH
20536: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20540: LD_INT 29
20542: PPUSH
20543: LD_OWVAR 2
20547: PPUSH
20548: LD_INT 2
20550: PPUSH
20551: CALL_OW 322
// end ;
20555: PPOPN 3
20557: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20558: LD_EXP 42
20562: PUSH
20563: LD_EXP 85
20567: AND
20568: IFFALSE 20679
20570: GO 20572
20572: DISABLE
20573: LD_INT 0
20575: PPUSH
20576: PPUSH
20577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 25
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: ST_TO_ADDR
// if not tmp then
20614: LD_VAR 0 3
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 20679
// un := tmp [ rand ( 1 , tmp ) ] ;
20623: LD_ADDR_VAR 0 2
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: ST_TO_ADDR
// if Crawls ( un ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 318
20656: IFFALSE 20667
// ComWalk ( un ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20667: LD_VAR 0 2
20671: PPUSH
20672: LD_INT 8
20674: PPUSH
20675: CALL_OW 336
// end ;
20679: PPOPN 3
20681: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20682: LD_EXP 42
20686: PUSH
20687: LD_EXP 86
20691: AND
20692: IFFALSE 20836
20694: GO 20696
20696: DISABLE
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20701: LD_ADDR_VAR 0 2
20705: PUSH
20706: LD_INT 22
20708: PUSH
20709: LD_OWVAR 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 21
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 34
20733: PUSH
20734: LD_INT 12
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 34
20743: PUSH
20744: LD_INT 51
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 34
20753: PUSH
20754: LD_INT 32
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: LIST
20771: PPUSH
20772: CALL_OW 69
20776: ST_TO_ADDR
// if not tmp then
20777: LD_VAR 0 2
20781: NOT
20782: IFFALSE 20786
// exit ;
20784: GO 20836
// for i in tmp do
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_VAR 0 2
20795: PUSH
20796: FOR_IN
20797: IFFALSE 20834
// if GetCargo ( i , mat_artifact ) = 0 then
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_INT 4
20806: PPUSH
20807: CALL_OW 289
20811: PUSH
20812: LD_INT 0
20814: EQUAL
20815: IFFALSE 20832
// SetCargo ( i , mat_siberit , 100 ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 3
20824: PPUSH
20825: LD_INT 100
20827: PPUSH
20828: CALL_OW 290
20832: GO 20796
20834: POP
20835: POP
// end ;
20836: PPOPN 2
20838: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20839: LD_EXP 42
20843: PUSH
20844: LD_EXP 87
20848: AND
20849: IFFALSE 21032
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 22
20865: PUSH
20866: LD_OWVAR 2
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 69
20879: ST_TO_ADDR
// if not tmp then
20880: LD_VAR 0 2
20884: NOT
20885: IFFALSE 20889
// exit ;
20887: GO 21032
// for i := 1 to 2 do
20889: LD_ADDR_VAR 0 1
20893: PUSH
20894: DOUBLE
20895: LD_INT 1
20897: DEC
20898: ST_TO_ADDR
20899: LD_INT 2
20901: PUSH
20902: FOR_TO
20903: IFFALSE 21030
// begin uc_side := your_side ;
20905: LD_ADDR_OWVAR 20
20909: PUSH
20910: LD_OWVAR 2
20914: ST_TO_ADDR
// uc_nation := nation_american ;
20915: LD_ADDR_OWVAR 21
20919: PUSH
20920: LD_INT 1
20922: ST_TO_ADDR
// vc_chassis := us_morphling ;
20923: LD_ADDR_OWVAR 37
20927: PUSH
20928: LD_INT 5
20930: ST_TO_ADDR
// vc_engine := engine_siberite ;
20931: LD_ADDR_OWVAR 39
20935: PUSH
20936: LD_INT 3
20938: ST_TO_ADDR
// vc_control := control_computer ;
20939: LD_ADDR_OWVAR 38
20943: PUSH
20944: LD_INT 3
20946: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20947: LD_ADDR_OWVAR 40
20951: PUSH
20952: LD_INT 10
20954: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20955: LD_VAR 0 2
20959: PUSH
20960: LD_INT 1
20962: ARRAY
20963: PPUSH
20964: CALL_OW 310
20968: NOT
20969: IFFALSE 21016
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20971: CALL_OW 45
20975: PPUSH
20976: LD_VAR 0 2
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PPUSH
20985: CALL_OW 250
20989: PPUSH
20990: LD_VAR 0 2
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: CALL_OW 251
21003: PPUSH
21004: LD_INT 12
21006: PPUSH
21007: LD_INT 1
21009: PPUSH
21010: CALL_OW 50
21014: GO 21028
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21016: CALL_OW 45
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 51
// end ;
21028: GO 20902
21030: POP
21031: POP
// end ;
21032: PPOPN 2
21034: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21035: LD_EXP 42
21039: PUSH
21040: LD_EXP 88
21044: AND
21045: IFFALSE 21267
21047: GO 21049
21049: DISABLE
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21058: LD_ADDR_VAR 0 6
21062: PUSH
21063: LD_INT 22
21065: PUSH
21066: LD_OWVAR 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 21
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: LD_INT 23
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: PPUSH
21107: CALL_OW 69
21111: ST_TO_ADDR
// if not tmp then
21112: LD_VAR 0 6
21116: NOT
21117: IFFALSE 21121
// exit ;
21119: GO 21267
// s1 := rand ( 1 , 4 ) ;
21121: LD_ADDR_VAR 0 2
21125: PUSH
21126: LD_INT 1
21128: PPUSH
21129: LD_INT 4
21131: PPUSH
21132: CALL_OW 12
21136: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21137: LD_ADDR_VAR 0 4
21141: PUSH
21142: LD_VAR 0 6
21146: PUSH
21147: LD_INT 1
21149: ARRAY
21150: PPUSH
21151: LD_VAR 0 2
21155: PPUSH
21156: CALL_OW 259
21160: ST_TO_ADDR
// if s1 = 1 then
21161: LD_VAR 0 2
21165: PUSH
21166: LD_INT 1
21168: EQUAL
21169: IFFALSE 21189
// s2 := rand ( 2 , 4 ) else
21171: LD_ADDR_VAR 0 3
21175: PUSH
21176: LD_INT 2
21178: PPUSH
21179: LD_INT 4
21181: PPUSH
21182: CALL_OW 12
21186: ST_TO_ADDR
21187: GO 21197
// s2 := 1 ;
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: LD_INT 1
21196: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21197: LD_ADDR_VAR 0 5
21201: PUSH
21202: LD_VAR 0 6
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: CALL_OW 259
21220: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21221: LD_VAR 0 6
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: PPUSH
21230: LD_VAR 0 2
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21244: LD_VAR 0 6
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PPUSH
21253: LD_VAR 0 3
21257: PPUSH
21258: LD_VAR 0 4
21262: PPUSH
21263: CALL_OW 237
// end ;
21267: PPOPN 6
21269: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21270: LD_EXP 42
21274: PUSH
21275: LD_EXP 89
21279: AND
21280: IFFALSE 21359
21282: GO 21284
21284: DISABLE
21285: LD_INT 0
21287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_OWVAR 2
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PPUSH
21319: CALL_OW 69
21323: ST_TO_ADDR
// if not tmp then
21324: LD_VAR 0 1
21328: NOT
21329: IFFALSE 21333
// exit ;
21331: GO 21359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21333: LD_VAR 0 1
21337: PUSH
21338: LD_INT 1
21340: PPUSH
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 12
21350: ARRAY
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 234
// end ;
21359: PPOPN 1
21361: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21362: LD_EXP 42
21366: PUSH
21367: LD_EXP 90
21371: AND
21372: IFFALSE 21484
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 22
21388: PUSH
21389: LD_OWVAR 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 27
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 30
21413: PUSH
21414: LD_INT 26
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 30
21423: PUSH
21424: LD_INT 28
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL_OW 69
21445: ST_TO_ADDR
// if not tmp then
21446: LD_VAR 0 2
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 21484
// for i in tmp do
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_VAR 0 2
21464: PUSH
21465: FOR_IN
21466: IFFALSE 21482
// SetLives ( i , 1 ) ;
21468: LD_VAR 0 1
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: CALL_OW 234
21480: GO 21465
21482: POP
21483: POP
// end ;
21484: PPOPN 2
21486: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21487: LD_EXP 42
21491: PUSH
21492: LD_EXP 91
21496: AND
21497: IFFALSE 21771
21499: GO 21501
21501: DISABLE
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
21506: PPUSH
// begin i := rand ( 1 , 7 ) ;
21507: LD_ADDR_VAR 0 1
21511: PUSH
21512: LD_INT 1
21514: PPUSH
21515: LD_INT 7
21517: PPUSH
21518: CALL_OW 12
21522: ST_TO_ADDR
// case i of 1 :
21523: LD_VAR 0 1
21527: PUSH
21528: LD_INT 1
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21546
21536: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21537: LD_STRING earthquake(getX(game), 0, 32)
21539: PPUSH
21540: CALL_OW 559
21544: GO 21771
21546: LD_INT 2
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21568
21554: POP
// begin ToLua ( displayStucuk(); ) ;
21555: LD_STRING displayStucuk();
21557: PPUSH
21558: CALL_OW 559
// ResetFog ;
21562: CALL_OW 335
// end ; 3 :
21566: GO 21771
21568: LD_INT 3
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21680
21576: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_OWVAR 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 25
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: ST_TO_ADDR
// if not tmp then
21613: LD_VAR 0 2
21617: NOT
21618: IFFALSE 21622
// exit ;
21620: GO 21771
// un := tmp [ rand ( 1 , tmp ) ] ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_VAR 0 2
21631: PUSH
21632: LD_INT 1
21634: PPUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: CALL_OW 12
21644: ARRAY
21645: ST_TO_ADDR
// if Crawls ( un ) then
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL_OW 318
21655: IFFALSE 21666
// ComWalk ( un ) ;
21657: LD_VAR 0 3
21661: PPUSH
21662: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 8
21673: PPUSH
21674: CALL_OW 336
// end ; 4 :
21678: GO 21771
21680: LD_INT 4
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21749
21688: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21689: LD_ADDR_VAR 0 2
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_OWVAR 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 30
21708: PUSH
21709: LD_INT 29
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PPUSH
21720: CALL_OW 69
21724: ST_TO_ADDR
// if not tmp then
21725: LD_VAR 0 2
21729: NOT
21730: IFFALSE 21734
// exit ;
21732: GO 21771
// DestroyUnit ( tmp [ 1 ] ) ;
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PPUSH
21743: CALL_OW 65
// end ; 5 .. 7 :
21747: GO 21771
21749: LD_INT 5
21751: DOUBLE
21752: GREATEREQUAL
21753: IFFALSE 21761
21755: LD_INT 7
21757: DOUBLE
21758: LESSEQUAL
21759: IFTRUE 21763
21761: GO 21770
21763: POP
// StreamSibBomb ; end ;
21764: CALL 18021 0 0
21768: GO 21771
21770: POP
// end ;
21771: PPOPN 3
21773: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21774: LD_EXP 42
21778: PUSH
21779: LD_EXP 92
21783: AND
21784: IFFALSE 21940
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
21792: PPUSH
21793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_INT 81
21801: PUSH
21802: LD_OWVAR 2
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 21
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: ST_TO_ADDR
// if not tmp then
21848: LD_VAR 0 2
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21940
// p := 0 ;
21857: LD_ADDR_VAR 0 3
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21865: LD_INT 35
21867: PPUSH
21868: CALL_OW 67
// p := p + 1 ;
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_VAR 0 3
21881: PUSH
21882: LD_INT 1
21884: PLUS
21885: ST_TO_ADDR
// for i in tmp do
21886: LD_ADDR_VAR 0 1
21890: PUSH
21891: LD_VAR 0 2
21895: PUSH
21896: FOR_IN
21897: IFFALSE 21928
// if GetLives ( i ) < 1000 then
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 256
21908: PUSH
21909: LD_INT 1000
21911: LESS
21912: IFFALSE 21926
// SetLives ( i , 1000 ) ;
21914: LD_VAR 0 1
21918: PPUSH
21919: LD_INT 1000
21921: PPUSH
21922: CALL_OW 234
21926: GO 21896
21928: POP
21929: POP
// until p > 20 ;
21930: LD_VAR 0 3
21934: PUSH
21935: LD_INT 20
21937: GREATER
21938: IFFALSE 21865
// end ;
21940: PPOPN 3
21942: END
// every 0 0$1 trigger StreamModeActive and sTime do
21943: LD_EXP 42
21947: PUSH
21948: LD_EXP 93
21952: AND
21953: IFFALSE 21988
21955: GO 21957
21957: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21958: LD_INT 28
21960: PPUSH
21961: LD_OWVAR 2
21965: PPUSH
21966: LD_INT 2
21968: PPUSH
21969: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21973: LD_INT 30
21975: PPUSH
21976: LD_OWVAR 2
21980: PPUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 322
// end ;
21988: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21989: LD_EXP 42
21993: PUSH
21994: LD_EXP 94
21998: AND
21999: IFFALSE 22120
22001: GO 22003
22003: DISABLE
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22008: LD_ADDR_VAR 0 2
22012: PUSH
22013: LD_INT 22
22015: PUSH
22016: LD_OWVAR 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 21
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 3
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 69
22061: ST_TO_ADDR
// if not tmp then
22062: LD_VAR 0 2
22066: NOT
22067: IFFALSE 22071
// exit ;
22069: GO 22120
// for i in tmp do
22071: LD_ADDR_VAR 0 1
22075: PUSH
22076: LD_VAR 0 2
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22118
// begin if Crawls ( i ) then
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 318
22093: IFFALSE 22104
// ComWalk ( i ) ;
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 138
// SetClass ( i , 2 ) ;
22104: LD_VAR 0 1
22108: PPUSH
22109: LD_INT 2
22111: PPUSH
22112: CALL_OW 336
// end ;
22116: GO 22081
22118: POP
22119: POP
// end ;
22120: PPOPN 2
22122: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22123: LD_EXP 42
22127: PUSH
22128: LD_EXP 95
22132: AND
22133: IFFALSE 22414
22135: GO 22137
22137: DISABLE
22138: LD_INT 0
22140: PPUSH
22141: PPUSH
22142: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22143: LD_OWVAR 2
22147: PPUSH
22148: LD_INT 9
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_INT 1
22156: PPUSH
22157: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22161: LD_INT 9
22163: PPUSH
22164: LD_OWVAR 2
22168: PPUSH
22169: CALL_OW 343
// uc_side := 9 ;
22173: LD_ADDR_OWVAR 20
22177: PUSH
22178: LD_INT 9
22180: ST_TO_ADDR
// uc_nation := 2 ;
22181: LD_ADDR_OWVAR 21
22185: PUSH
22186: LD_INT 2
22188: ST_TO_ADDR
// hc_name := Dark Warrior ;
22189: LD_ADDR_OWVAR 26
22193: PUSH
22194: LD_STRING Dark Warrior
22196: ST_TO_ADDR
// hc_gallery :=  ;
22197: LD_ADDR_OWVAR 33
22201: PUSH
22202: LD_STRING 
22204: ST_TO_ADDR
// hc_noskilllimit := true ;
22205: LD_ADDR_OWVAR 76
22209: PUSH
22210: LD_INT 1
22212: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22213: LD_ADDR_OWVAR 31
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 30
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: ST_TO_ADDR
// un := CreateHuman ;
22236: LD_ADDR_VAR 0 3
22240: PUSH
22241: CALL_OW 44
22245: ST_TO_ADDR
// hc_noskilllimit := false ;
22246: LD_ADDR_OWVAR 76
22250: PUSH
22251: LD_INT 0
22253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22254: LD_VAR 0 3
22258: PPUSH
22259: LD_INT 1
22261: PPUSH
22262: CALL_OW 51
// p := 0 ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22274: LD_INT 35
22276: PPUSH
22277: CALL_OW 67
// p := p + 1 ;
22281: LD_ADDR_VAR 0 2
22285: PUSH
22286: LD_VAR 0 2
22290: PUSH
22291: LD_INT 1
22293: PLUS
22294: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL_OW 256
22304: PUSH
22305: LD_INT 1000
22307: LESS
22308: IFFALSE 22322
// SetLives ( un , 1000 ) ;
22310: LD_VAR 0 3
22314: PPUSH
22315: LD_INT 1000
22317: PPUSH
22318: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 81
22329: PUSH
22330: LD_OWVAR 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 91
22341: PUSH
22342: LD_VAR 0 3
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: CALL_OW 74
22373: PPUSH
22374: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22378: LD_VAR 0 2
22382: PUSH
22383: LD_INT 60
22385: GREATER
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 301
22396: OR
22397: IFFALSE 22274
// if un then
22399: LD_VAR 0 3
22403: IFFALSE 22414
// RemoveUnit ( un ) ;
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 64
// end ;
22414: PPOPN 3
22416: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22417: LD_INT 0
22419: PPUSH
// case cmd of 301 :
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 301
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22465
22433: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22434: LD_VAR 0 6
22438: PPUSH
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_VAR 0 8
22448: PPUSH
22449: LD_VAR 0 4
22453: PPUSH
22454: LD_VAR 0 5
22458: PPUSH
22459: CALL 23666 0 5
22463: GO 22586
22465: LD_INT 302
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22510
22473: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22474: LD_VAR 0 6
22478: PPUSH
22479: LD_VAR 0 7
22483: PPUSH
22484: LD_VAR 0 8
22488: PPUSH
22489: LD_VAR 0 9
22493: PPUSH
22494: LD_VAR 0 4
22498: PPUSH
22499: LD_VAR 0 5
22503: PPUSH
22504: CALL 23757 0 6
22508: GO 22586
22510: LD_INT 303
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22555
22518: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22519: LD_VAR 0 6
22523: PPUSH
22524: LD_VAR 0 7
22528: PPUSH
22529: LD_VAR 0 8
22533: PPUSH
22534: LD_VAR 0 9
22538: PPUSH
22539: LD_VAR 0 4
22543: PPUSH
22544: LD_VAR 0 5
22548: PPUSH
22549: CALL 22591 0 6
22553: GO 22586
22555: LD_INT 304
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22585
22563: POP
// hHackTeleport ( unit , x , y ) ; end ;
22564: LD_VAR 0 2
22568: PPUSH
22569: LD_VAR 0 4
22573: PPUSH
22574: LD_VAR 0 5
22578: PPUSH
22579: CALL 24350 0 3
22583: GO 22586
22585: POP
// end ;
22586: LD_VAR 0 12
22590: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22591: LD_INT 0
22593: PPUSH
22594: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22595: LD_VAR 0 1
22599: PUSH
22600: LD_INT 1
22602: LESS
22603: PUSH
22604: LD_VAR 0 1
22608: PUSH
22609: LD_INT 3
22611: GREATER
22612: OR
22613: PUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: LD_VAR 0 6
22623: PPUSH
22624: CALL_OW 428
22628: OR
22629: IFFALSE 22633
// exit ;
22631: GO 23353
// uc_side := your_side ;
22633: LD_ADDR_OWVAR 20
22637: PUSH
22638: LD_OWVAR 2
22642: ST_TO_ADDR
// uc_nation := nation ;
22643: LD_ADDR_OWVAR 21
22647: PUSH
22648: LD_VAR 0 1
22652: ST_TO_ADDR
// bc_level = 1 ;
22653: LD_ADDR_OWVAR 43
22657: PUSH
22658: LD_INT 1
22660: ST_TO_ADDR
// case btype of 1 :
22661: LD_VAR 0 2
22665: PUSH
22666: LD_INT 1
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22685
22674: POP
// bc_type := b_depot ; 2 :
22675: LD_ADDR_OWVAR 42
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
22683: GO 23297
22685: LD_INT 2
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22704
22693: POP
// bc_type := b_warehouse ; 3 :
22694: LD_ADDR_OWVAR 42
22698: PUSH
22699: LD_INT 1
22701: ST_TO_ADDR
22702: GO 23297
22704: LD_INT 3
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22723
22712: POP
// bc_type := b_lab ; 4 .. 9 :
22713: LD_ADDR_OWVAR 42
22717: PUSH
22718: LD_INT 6
22720: ST_TO_ADDR
22721: GO 23297
22723: LD_INT 4
22725: DOUBLE
22726: GREATEREQUAL
22727: IFFALSE 22735
22729: LD_INT 9
22731: DOUBLE
22732: LESSEQUAL
22733: IFTRUE 22737
22735: GO 22789
22737: POP
// begin bc_type := b_lab_half ;
22738: LD_ADDR_OWVAR 42
22742: PUSH
22743: LD_INT 7
22745: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22746: LD_ADDR_OWVAR 44
22750: PUSH
22751: LD_INT 10
22753: PUSH
22754: LD_INT 11
22756: PUSH
22757: LD_INT 12
22759: PUSH
22760: LD_INT 15
22762: PUSH
22763: LD_INT 14
22765: PUSH
22766: LD_INT 13
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: LD_VAR 0 2
22781: PUSH
22782: LD_INT 3
22784: MINUS
22785: ARRAY
22786: ST_TO_ADDR
// end ; 10 .. 13 :
22787: GO 23297
22789: LD_INT 10
22791: DOUBLE
22792: GREATEREQUAL
22793: IFFALSE 22801
22795: LD_INT 13
22797: DOUBLE
22798: LESSEQUAL
22799: IFTRUE 22803
22801: GO 22880
22803: POP
// begin bc_type := b_lab_full ;
22804: LD_ADDR_OWVAR 42
22808: PUSH
22809: LD_INT 8
22811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22812: LD_ADDR_OWVAR 44
22816: PUSH
22817: LD_INT 10
22819: PUSH
22820: LD_INT 12
22822: PUSH
22823: LD_INT 14
22825: PUSH
22826: LD_INT 13
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: PUSH
22835: LD_VAR 0 2
22839: PUSH
22840: LD_INT 9
22842: MINUS
22843: ARRAY
22844: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22845: LD_ADDR_OWVAR 45
22849: PUSH
22850: LD_INT 11
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 12
22858: PUSH
22859: LD_INT 15
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: LD_VAR 0 2
22872: PUSH
22873: LD_INT 9
22875: MINUS
22876: ARRAY
22877: ST_TO_ADDR
// end ; 14 :
22878: GO 23297
22880: LD_INT 14
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 22899
22888: POP
// bc_type := b_workshop ; 15 :
22889: LD_ADDR_OWVAR 42
22893: PUSH
22894: LD_INT 2
22896: ST_TO_ADDR
22897: GO 23297
22899: LD_INT 15
22901: DOUBLE
22902: EQUAL
22903: IFTRUE 22907
22905: GO 22918
22907: POP
// bc_type := b_factory ; 16 :
22908: LD_ADDR_OWVAR 42
22912: PUSH
22913: LD_INT 3
22915: ST_TO_ADDR
22916: GO 23297
22918: LD_INT 16
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 22937
22926: POP
// bc_type := b_ext_gun ; 17 :
22927: LD_ADDR_OWVAR 42
22931: PUSH
22932: LD_INT 17
22934: ST_TO_ADDR
22935: GO 23297
22937: LD_INT 17
22939: DOUBLE
22940: EQUAL
22941: IFTRUE 22945
22943: GO 22973
22945: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22946: LD_ADDR_OWVAR 42
22950: PUSH
22951: LD_INT 19
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 19
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PUSH
22965: LD_VAR 0 1
22969: ARRAY
22970: ST_TO_ADDR
22971: GO 23297
22973: LD_INT 18
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22992
22981: POP
// bc_type := b_ext_radar ; 19 :
22982: LD_ADDR_OWVAR 42
22986: PUSH
22987: LD_INT 20
22989: ST_TO_ADDR
22990: GO 23297
22992: LD_INT 19
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23011
23000: POP
// bc_type := b_ext_radio ; 20 :
23001: LD_ADDR_OWVAR 42
23005: PUSH
23006: LD_INT 22
23008: ST_TO_ADDR
23009: GO 23297
23011: LD_INT 20
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23030
23019: POP
// bc_type := b_ext_siberium ; 21 :
23020: LD_ADDR_OWVAR 42
23024: PUSH
23025: LD_INT 21
23027: ST_TO_ADDR
23028: GO 23297
23030: LD_INT 21
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23049
23038: POP
// bc_type := b_ext_computer ; 22 :
23039: LD_ADDR_OWVAR 42
23043: PUSH
23044: LD_INT 24
23046: ST_TO_ADDR
23047: GO 23297
23049: LD_INT 22
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23068
23057: POP
// bc_type := b_ext_track ; 23 :
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 16
23065: ST_TO_ADDR
23066: GO 23297
23068: LD_INT 23
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23087
23076: POP
// bc_type := b_ext_laser ; 24 :
23077: LD_ADDR_OWVAR 42
23081: PUSH
23082: LD_INT 25
23084: ST_TO_ADDR
23085: GO 23297
23087: LD_INT 24
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23106
23095: POP
// bc_type := b_control_tower ; 25 :
23096: LD_ADDR_OWVAR 42
23100: PUSH
23101: LD_INT 36
23103: ST_TO_ADDR
23104: GO 23297
23106: LD_INT 25
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23125
23114: POP
// bc_type := b_breastwork ; 26 :
23115: LD_ADDR_OWVAR 42
23119: PUSH
23120: LD_INT 31
23122: ST_TO_ADDR
23123: GO 23297
23125: LD_INT 26
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23144
23133: POP
// bc_type := b_bunker ; 27 :
23134: LD_ADDR_OWVAR 42
23138: PUSH
23139: LD_INT 32
23141: ST_TO_ADDR
23142: GO 23297
23144: LD_INT 27
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23163
23152: POP
// bc_type := b_turret ; 28 :
23153: LD_ADDR_OWVAR 42
23157: PUSH
23158: LD_INT 33
23160: ST_TO_ADDR
23161: GO 23297
23163: LD_INT 28
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23182
23171: POP
// bc_type := b_armoury ; 29 :
23172: LD_ADDR_OWVAR 42
23176: PUSH
23177: LD_INT 4
23179: ST_TO_ADDR
23180: GO 23297
23182: LD_INT 29
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23201
23190: POP
// bc_type := b_barracks ; 30 :
23191: LD_ADDR_OWVAR 42
23195: PUSH
23196: LD_INT 5
23198: ST_TO_ADDR
23199: GO 23297
23201: LD_INT 30
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23220
23209: POP
// bc_type := b_solar_power ; 31 :
23210: LD_ADDR_OWVAR 42
23214: PUSH
23215: LD_INT 27
23217: ST_TO_ADDR
23218: GO 23297
23220: LD_INT 31
23222: DOUBLE
23223: EQUAL
23224: IFTRUE 23228
23226: GO 23239
23228: POP
// bc_type := b_oil_power ; 32 :
23229: LD_ADDR_OWVAR 42
23233: PUSH
23234: LD_INT 26
23236: ST_TO_ADDR
23237: GO 23297
23239: LD_INT 32
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23258
23247: POP
// bc_type := b_siberite_power ; 33 :
23248: LD_ADDR_OWVAR 42
23252: PUSH
23253: LD_INT 28
23255: ST_TO_ADDR
23256: GO 23297
23258: LD_INT 33
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23277
23266: POP
// bc_type := b_oil_mine ; 34 :
23267: LD_ADDR_OWVAR 42
23271: PUSH
23272: LD_INT 29
23274: ST_TO_ADDR
23275: GO 23297
23277: LD_INT 34
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23296
23285: POP
// bc_type := b_siberite_mine ; end ;
23286: LD_ADDR_OWVAR 42
23290: PUSH
23291: LD_INT 30
23293: ST_TO_ADDR
23294: GO 23297
23296: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23297: LD_ADDR_VAR 0 8
23301: PUSH
23302: LD_VAR 0 5
23306: PPUSH
23307: LD_VAR 0 6
23311: PPUSH
23312: LD_VAR 0 3
23316: PPUSH
23317: CALL_OW 47
23321: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23322: LD_OWVAR 42
23326: PUSH
23327: LD_INT 32
23329: PUSH
23330: LD_INT 33
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: IN
23337: IFFALSE 23353
// PlaceWeaponTurret ( b , weapon ) ;
23339: LD_VAR 0 8
23343: PPUSH
23344: LD_VAR 0 4
23348: PPUSH
23349: CALL_OW 431
// end ;
23353: LD_VAR 0 7
23357: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23364: LD_ADDR_VAR 0 4
23368: PUSH
23369: LD_INT 22
23371: PUSH
23372: LD_OWVAR 2
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 30
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PPUSH
23413: CALL_OW 69
23417: ST_TO_ADDR
// if not tmp then
23418: LD_VAR 0 4
23422: NOT
23423: IFFALSE 23427
// exit ;
23425: GO 23486
// for i in tmp do
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_VAR 0 4
23436: PUSH
23437: FOR_IN
23438: IFFALSE 23484
// for j = 1 to 3 do
23440: LD_ADDR_VAR 0 3
23444: PUSH
23445: DOUBLE
23446: LD_INT 1
23448: DEC
23449: ST_TO_ADDR
23450: LD_INT 3
23452: PUSH
23453: FOR_TO
23454: IFFALSE 23480
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23456: LD_VAR 0 2
23460: PPUSH
23461: CALL_OW 274
23465: PPUSH
23466: LD_VAR 0 3
23470: PPUSH
23471: LD_INT 99999
23473: PPUSH
23474: CALL_OW 277
23478: GO 23453
23480: POP
23481: POP
23482: GO 23437
23484: POP
23485: POP
// end ;
23486: LD_VAR 0 1
23490: RET
// export function hHackSetLevel10 ; var i , j ; begin
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
23495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 21
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 69
23515: PUSH
23516: FOR_IN
23517: IFFALSE 23569
// if IsSelected ( i ) then
23519: LD_VAR 0 2
23523: PPUSH
23524: CALL_OW 306
23528: IFFALSE 23567
// begin for j := 1 to 4 do
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: DOUBLE
23536: LD_INT 1
23538: DEC
23539: ST_TO_ADDR
23540: LD_INT 4
23542: PUSH
23543: FOR_TO
23544: IFFALSE 23565
// SetSkill ( i , j , 10 ) ;
23546: LD_VAR 0 2
23550: PPUSH
23551: LD_VAR 0 3
23555: PPUSH
23556: LD_INT 10
23558: PPUSH
23559: CALL_OW 237
23563: GO 23543
23565: POP
23566: POP
// end ;
23567: GO 23516
23569: POP
23570: POP
// end ;
23571: LD_VAR 0 1
23575: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_OWVAR 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 21
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: PUSH
23617: FOR_IN
23618: IFFALSE 23659
// begin for j := 1 to 4 do
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: DOUBLE
23626: LD_INT 1
23628: DEC
23629: ST_TO_ADDR
23630: LD_INT 4
23632: PUSH
23633: FOR_TO
23634: IFFALSE 23655
// SetSkill ( i , j , 10 ) ;
23636: LD_VAR 0 2
23640: PPUSH
23641: LD_VAR 0 3
23645: PPUSH
23646: LD_INT 10
23648: PPUSH
23649: CALL_OW 237
23653: GO 23633
23655: POP
23656: POP
// end ;
23657: GO 23617
23659: POP
23660: POP
// end ;
23661: LD_VAR 0 1
23665: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23666: LD_INT 0
23668: PPUSH
// uc_side := your_side ;
23669: LD_ADDR_OWVAR 20
23673: PUSH
23674: LD_OWVAR 2
23678: ST_TO_ADDR
// uc_nation := nation ;
23679: LD_ADDR_OWVAR 21
23683: PUSH
23684: LD_VAR 0 1
23688: ST_TO_ADDR
// InitHc ;
23689: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23693: LD_INT 0
23695: PPUSH
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23710: LD_VAR 0 4
23714: PPUSH
23715: LD_VAR 0 5
23719: PPUSH
23720: CALL_OW 428
23724: PUSH
23725: LD_INT 0
23727: EQUAL
23728: IFFALSE 23752
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23730: CALL_OW 44
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: LD_INT 1
23747: PPUSH
23748: CALL_OW 48
// end ;
23752: LD_VAR 0 6
23756: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
// uc_side := your_side ;
23761: LD_ADDR_OWVAR 20
23765: PUSH
23766: LD_OWVAR 2
23770: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 4
23787: PUSH
23788: LD_INT 5
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: IN
23798: IFFALSE 23810
// uc_nation := nation_american else
23800: LD_ADDR_OWVAR 21
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
23808: GO 23853
// if chassis in [ 11 , 12 , 13 , 14 ] then
23810: LD_VAR 0 1
23814: PUSH
23815: LD_INT 11
23817: PUSH
23818: LD_INT 12
23820: PUSH
23821: LD_INT 13
23823: PUSH
23824: LD_INT 14
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: IN
23833: IFFALSE 23845
// uc_nation := nation_arabian else
23835: LD_ADDR_OWVAR 21
23839: PUSH
23840: LD_INT 2
23842: ST_TO_ADDR
23843: GO 23853
// uc_nation := nation_russian ;
23845: LD_ADDR_OWVAR 21
23849: PUSH
23850: LD_INT 3
23852: ST_TO_ADDR
// vc_chassis := chassis ;
23853: LD_ADDR_OWVAR 37
23857: PUSH
23858: LD_VAR 0 1
23862: ST_TO_ADDR
// vc_engine := engine ;
23863: LD_ADDR_OWVAR 39
23867: PUSH
23868: LD_VAR 0 2
23872: ST_TO_ADDR
// vc_control := control ;
23873: LD_ADDR_OWVAR 38
23877: PUSH
23878: LD_VAR 0 3
23882: ST_TO_ADDR
// vc_weapon := weapon ;
23883: LD_ADDR_OWVAR 40
23887: PUSH
23888: LD_VAR 0 4
23892: ST_TO_ADDR
// un := CreateVehicle ;
23893: LD_ADDR_VAR 0 8
23897: PUSH
23898: CALL_OW 45
23902: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23903: LD_VAR 0 8
23907: PPUSH
23908: LD_INT 0
23910: PPUSH
23911: LD_INT 5
23913: PPUSH
23914: CALL_OW 12
23918: PPUSH
23919: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23923: LD_VAR 0 8
23927: PPUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: LD_VAR 0 6
23937: PPUSH
23938: LD_INT 1
23940: PPUSH
23941: CALL_OW 48
// end ;
23945: LD_VAR 0 7
23949: RET
// export hInvincible ; every 1 do
23950: GO 23952
23952: DISABLE
// hInvincible := [ ] ;
23953: LD_ADDR_EXP 96
23957: PUSH
23958: EMPTY
23959: ST_TO_ADDR
23960: END
// every 10 do var i ;
23961: GO 23963
23963: DISABLE
23964: LD_INT 0
23966: PPUSH
// begin enable ;
23967: ENABLE
// if not hInvincible then
23968: LD_EXP 96
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24021
// for i in hInvincible do
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: LD_EXP 96
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24019
// if GetLives ( i ) < 1000 then
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 256
23999: PUSH
24000: LD_INT 1000
24002: LESS
24003: IFFALSE 24017
// SetLives ( i , 1000 ) ;
24005: LD_VAR 0 1
24009: PPUSH
24010: LD_INT 1000
24012: PPUSH
24013: CALL_OW 234
24017: GO 23987
24019: POP
24020: POP
// end ;
24021: PPOPN 1
24023: END
// export function hHackInvincible ; var i ; begin
24024: LD_INT 0
24026: PPUSH
24027: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24028: LD_ADDR_VAR 0 2
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 21
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 21
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: PUSH
24066: FOR_IN
24067: IFFALSE 24128
// if IsSelected ( i ) then
24069: LD_VAR 0 2
24073: PPUSH
24074: CALL_OW 306
24078: IFFALSE 24126
// begin if i in hInvincible then
24080: LD_VAR 0 2
24084: PUSH
24085: LD_EXP 96
24089: IN
24090: IFFALSE 24110
// hInvincible := hInvincible diff i else
24092: LD_ADDR_EXP 96
24096: PUSH
24097: LD_EXP 96
24101: PUSH
24102: LD_VAR 0 2
24106: DIFF
24107: ST_TO_ADDR
24108: GO 24126
// hInvincible := hInvincible union i ;
24110: LD_ADDR_EXP 96
24114: PUSH
24115: LD_EXP 96
24119: PUSH
24120: LD_VAR 0 2
24124: UNION
24125: ST_TO_ADDR
// end ;
24126: GO 24066
24128: POP
24129: POP
// end ;
24130: LD_VAR 0 1
24134: RET
// export function hHackInvisible ; var i , j ; begin
24135: LD_INT 0
24137: PPUSH
24138: PPUSH
24139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24140: LD_ADDR_VAR 0 2
24144: PUSH
24145: LD_INT 21
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 69
24159: PUSH
24160: FOR_IN
24161: IFFALSE 24185
// if IsSelected ( i ) then
24163: LD_VAR 0 2
24167: PPUSH
24168: CALL_OW 306
24172: IFFALSE 24183
// ComForceInvisible ( i ) ;
24174: LD_VAR 0 2
24178: PPUSH
24179: CALL_OW 496
24183: GO 24160
24185: POP
24186: POP
// end ;
24187: LD_VAR 0 1
24191: RET
// export function hHackChangeYourSide ; begin
24192: LD_INT 0
24194: PPUSH
// if your_side = 8 then
24195: LD_OWVAR 2
24199: PUSH
24200: LD_INT 8
24202: EQUAL
24203: IFFALSE 24215
// your_side := 0 else
24205: LD_ADDR_OWVAR 2
24209: PUSH
24210: LD_INT 0
24212: ST_TO_ADDR
24213: GO 24229
// your_side := your_side + 1 ;
24215: LD_ADDR_OWVAR 2
24219: PUSH
24220: LD_OWVAR 2
24224: PUSH
24225: LD_INT 1
24227: PLUS
24228: ST_TO_ADDR
// end ;
24229: LD_VAR 0 1
24233: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24234: LD_INT 0
24236: PPUSH
24237: PPUSH
24238: PPUSH
// for i in all_units do
24239: LD_ADDR_VAR 0 2
24243: PUSH
24244: LD_OWVAR 3
24248: PUSH
24249: FOR_IN
24250: IFFALSE 24328
// if IsSelected ( i ) then
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 306
24261: IFFALSE 24326
// begin j := GetSide ( i ) ;
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_VAR 0 2
24272: PPUSH
24273: CALL_OW 255
24277: ST_TO_ADDR
// if j = 8 then
24278: LD_VAR 0 3
24282: PUSH
24283: LD_INT 8
24285: EQUAL
24286: IFFALSE 24298
// j := 0 else
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: LD_INT 0
24295: ST_TO_ADDR
24296: GO 24312
// j := j + 1 ;
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_VAR 0 3
24307: PUSH
24308: LD_INT 1
24310: PLUS
24311: ST_TO_ADDR
// SetSide ( i , j ) ;
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: CALL_OW 235
// end ;
24326: GO 24249
24328: POP
24329: POP
// end ;
24330: LD_VAR 0 1
24334: RET
// export function hHackFog ; begin
24335: LD_INT 0
24337: PPUSH
// FogOff ( true ) ;
24338: LD_INT 1
24340: PPUSH
24341: CALL_OW 344
// end ;
24345: LD_VAR 0 1
24349: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24350: LD_INT 0
24352: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24353: LD_VAR 0 1
24357: PPUSH
24358: LD_VAR 0 2
24362: PPUSH
24363: LD_VAR 0 3
24367: PPUSH
24368: LD_INT 1
24370: PPUSH
24371: LD_INT 1
24373: PPUSH
24374: CALL_OW 483
// CenterOnXY ( x , y ) ;
24378: LD_VAR 0 2
24382: PPUSH
24383: LD_VAR 0 3
24387: PPUSH
24388: CALL_OW 84
// end ; end_of_file
24392: LD_VAR 0 4
24396: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 264
24412: PUSH
24413: LD_EXP 30
24417: EQUAL
24418: IFFALSE 24490
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24420: LD_INT 68
24422: PPUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: CALL_OW 255
24432: PPUSH
24433: CALL_OW 321
24437: PUSH
24438: LD_INT 2
24440: EQUAL
24441: IFFALSE 24453
// eff := 70 else
24443: LD_ADDR_VAR 0 4
24447: PUSH
24448: LD_INT 70
24450: ST_TO_ADDR
24451: GO 24461
// eff := 30 ;
24453: LD_ADDR_VAR 0 4
24457: PUSH
24458: LD_INT 30
24460: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL_OW 250
24470: PPUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 251
24480: PPUSH
24481: LD_VAR 0 4
24485: PPUSH
24486: CALL_OW 495
// end ; end ;
24490: LD_VAR 0 2
24494: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24495: LD_INT 0
24497: PPUSH
// end ;
24498: LD_VAR 0 4
24502: RET
// export function SOS_Command ( cmd ) ; begin
24503: LD_INT 0
24505: PPUSH
// end ;
24506: LD_VAR 0 2
24510: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24511: LD_INT 0
24513: PPUSH
// if cmd = 121 then
24514: LD_VAR 0 1
24518: PUSH
24519: LD_INT 121
24521: EQUAL
24522: IFFALSE 24524
// end ;
24524: LD_VAR 0 6
24528: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24529: LD_INT 0
24531: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24532: LD_VAR 0 1
24536: PUSH
24537: LD_INT 250
24539: EQUAL
24540: PUSH
24541: LD_VAR 0 2
24545: PPUSH
24546: CALL_OW 264
24550: PUSH
24551: LD_EXP 33
24555: EQUAL
24556: AND
24557: IFFALSE 24578
// MinerPlaceMine ( unit , x , y ) ;
24559: LD_VAR 0 2
24563: PPUSH
24564: LD_VAR 0 4
24568: PPUSH
24569: LD_VAR 0 5
24573: PPUSH
24574: CALL 26927 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24578: LD_VAR 0 1
24582: PUSH
24583: LD_INT 251
24585: EQUAL
24586: PUSH
24587: LD_VAR 0 2
24591: PPUSH
24592: CALL_OW 264
24596: PUSH
24597: LD_EXP 33
24601: EQUAL
24602: AND
24603: IFFALSE 24624
// MinerDetonateMine ( unit , x , y ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_VAR 0 4
24614: PPUSH
24615: LD_VAR 0 5
24619: PPUSH
24620: CALL 27204 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24624: LD_VAR 0 1
24628: PUSH
24629: LD_INT 252
24631: EQUAL
24632: PUSH
24633: LD_VAR 0 2
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_EXP 33
24647: EQUAL
24648: AND
24649: IFFALSE 24670
// MinerCreateMinefield ( unit , x , y ) ;
24651: LD_VAR 0 2
24655: PPUSH
24656: LD_VAR 0 4
24660: PPUSH
24661: LD_VAR 0 5
24665: PPUSH
24666: CALL 27621 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24670: LD_VAR 0 1
24674: PUSH
24675: LD_INT 253
24677: EQUAL
24678: PUSH
24679: LD_VAR 0 2
24683: PPUSH
24684: CALL_OW 257
24688: PUSH
24689: LD_INT 5
24691: EQUAL
24692: AND
24693: IFFALSE 24714
// ComBinocular ( unit , x , y ) ;
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_VAR 0 4
24704: PPUSH
24705: LD_VAR 0 5
24709: PPUSH
24710: CALL 27992 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24714: LD_VAR 0 1
24718: PUSH
24719: LD_INT 254
24721: EQUAL
24722: PUSH
24723: LD_VAR 0 2
24727: PPUSH
24728: CALL_OW 264
24732: PUSH
24733: LD_EXP 28
24737: EQUAL
24738: AND
24739: PUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: CALL_OW 263
24749: PUSH
24750: LD_INT 3
24752: EQUAL
24753: AND
24754: IFFALSE 24770
// HackDestroyVehicle ( unit , selectedUnit ) ;
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 3
24765: PPUSH
24766: CALL 26287 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24770: LD_VAR 0 1
24774: PUSH
24775: LD_INT 255
24777: EQUAL
24778: PUSH
24779: LD_VAR 0 2
24783: PPUSH
24784: CALL_OW 264
24788: PUSH
24789: LD_INT 14
24791: PUSH
24792: LD_INT 53
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: IN
24799: AND
24800: PUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: LD_VAR 0 5
24810: PPUSH
24811: CALL_OW 488
24815: AND
24816: IFFALSE 24840
// CutTreeXYR ( unit , x , y , 12 ) ;
24818: LD_VAR 0 2
24822: PPUSH
24823: LD_VAR 0 4
24827: PPUSH
24828: LD_VAR 0 5
24832: PPUSH
24833: LD_INT 12
24835: PPUSH
24836: CALL 24853 0 4
// end ;
24840: LD_VAR 0 6
24844: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24845: LD_INT 0
24847: PPUSH
// end ;
24848: LD_VAR 0 4
24852: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24853: LD_INT 0
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24864: LD_VAR 0 1
24868: NOT
24869: PUSH
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_VAR 0 3
24879: PPUSH
24880: CALL_OW 488
24884: NOT
24885: OR
24886: PUSH
24887: LD_VAR 0 4
24891: NOT
24892: OR
24893: IFFALSE 24897
// exit ;
24895: GO 25237
// list := [ ] ;
24897: LD_ADDR_VAR 0 13
24901: PUSH
24902: EMPTY
24903: ST_TO_ADDR
// if x - r < 0 then
24904: LD_VAR 0 2
24908: PUSH
24909: LD_VAR 0 4
24913: MINUS
24914: PUSH
24915: LD_INT 0
24917: LESS
24918: IFFALSE 24930
// min_x := 0 else
24920: LD_ADDR_VAR 0 7
24924: PUSH
24925: LD_INT 0
24927: ST_TO_ADDR
24928: GO 24946
// min_x := x - r ;
24930: LD_ADDR_VAR 0 7
24934: PUSH
24935: LD_VAR 0 2
24939: PUSH
24940: LD_VAR 0 4
24944: MINUS
24945: ST_TO_ADDR
// if y - r < 0 then
24946: LD_VAR 0 3
24950: PUSH
24951: LD_VAR 0 4
24955: MINUS
24956: PUSH
24957: LD_INT 0
24959: LESS
24960: IFFALSE 24972
// min_y := 0 else
24962: LD_ADDR_VAR 0 8
24966: PUSH
24967: LD_INT 0
24969: ST_TO_ADDR
24970: GO 24988
// min_y := y - r ;
24972: LD_ADDR_VAR 0 8
24976: PUSH
24977: LD_VAR 0 3
24981: PUSH
24982: LD_VAR 0 4
24986: MINUS
24987: ST_TO_ADDR
// max_x := x + r ;
24988: LD_ADDR_VAR 0 9
24992: PUSH
24993: LD_VAR 0 2
24997: PUSH
24998: LD_VAR 0 4
25002: PLUS
25003: ST_TO_ADDR
// max_y := y + r ;
25004: LD_ADDR_VAR 0 10
25008: PUSH
25009: LD_VAR 0 3
25013: PUSH
25014: LD_VAR 0 4
25018: PLUS
25019: ST_TO_ADDR
// for _x = min_x to max_x do
25020: LD_ADDR_VAR 0 11
25024: PUSH
25025: DOUBLE
25026: LD_VAR 0 7
25030: DEC
25031: ST_TO_ADDR
25032: LD_VAR 0 9
25036: PUSH
25037: FOR_TO
25038: IFFALSE 25155
// for _y = min_y to max_y do
25040: LD_ADDR_VAR 0 12
25044: PUSH
25045: DOUBLE
25046: LD_VAR 0 8
25050: DEC
25051: ST_TO_ADDR
25052: LD_VAR 0 10
25056: PUSH
25057: FOR_TO
25058: IFFALSE 25151
// begin if not ValidHex ( _x , _y ) then
25060: LD_VAR 0 11
25064: PPUSH
25065: LD_VAR 0 12
25069: PPUSH
25070: CALL_OW 488
25074: NOT
25075: IFFALSE 25079
// continue ;
25077: GO 25057
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25079: LD_VAR 0 11
25083: PPUSH
25084: LD_VAR 0 12
25088: PPUSH
25089: CALL_OW 351
25093: PUSH
25094: LD_VAR 0 11
25098: PPUSH
25099: LD_VAR 0 12
25103: PPUSH
25104: CALL_OW 554
25108: AND
25109: IFFALSE 25149
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25111: LD_ADDR_VAR 0 13
25115: PUSH
25116: LD_VAR 0 13
25120: PPUSH
25121: LD_VAR 0 13
25125: PUSH
25126: LD_INT 1
25128: PLUS
25129: PPUSH
25130: LD_VAR 0 11
25134: PUSH
25135: LD_VAR 0 12
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PPUSH
25144: CALL_OW 2
25148: ST_TO_ADDR
// end ;
25149: GO 25057
25151: POP
25152: POP
25153: GO 25037
25155: POP
25156: POP
// if not list then
25157: LD_VAR 0 13
25161: NOT
25162: IFFALSE 25166
// exit ;
25164: GO 25237
// for i in list do
25166: LD_ADDR_VAR 0 6
25170: PUSH
25171: LD_VAR 0 13
25175: PUSH
25176: FOR_IN
25177: IFFALSE 25235
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25179: LD_VAR 0 1
25183: PPUSH
25184: LD_STRING M
25186: PUSH
25187: LD_VAR 0 6
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PUSH
25196: LD_VAR 0 6
25200: PUSH
25201: LD_INT 2
25203: ARRAY
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: PPUSH
25229: CALL_OW 447
25233: GO 25176
25235: POP
25236: POP
// end ;
25237: LD_VAR 0 5
25241: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25242: LD_EXP 99
25246: NOT
25247: IFFALSE 25297
25249: GO 25251
25251: DISABLE
// begin initHack := true ;
25252: LD_ADDR_EXP 99
25256: PUSH
25257: LD_INT 1
25259: ST_TO_ADDR
// hackTanks := [ ] ;
25260: LD_ADDR_EXP 100
25264: PUSH
25265: EMPTY
25266: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25267: LD_ADDR_EXP 101
25271: PUSH
25272: EMPTY
25273: ST_TO_ADDR
// hackLimit := 3 ;
25274: LD_ADDR_EXP 102
25278: PUSH
25279: LD_INT 3
25281: ST_TO_ADDR
// hackDist := 12 ;
25282: LD_ADDR_EXP 103
25286: PUSH
25287: LD_INT 12
25289: ST_TO_ADDR
// hackCounter := [ ] ;
25290: LD_ADDR_EXP 104
25294: PUSH
25295: EMPTY
25296: ST_TO_ADDR
// end ;
25297: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25298: LD_EXP 99
25302: PUSH
25303: LD_INT 34
25305: PUSH
25306: LD_EXP 28
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: AND
25320: IFFALSE 25575
25322: GO 25324
25324: DISABLE
25325: LD_INT 0
25327: PPUSH
25328: PPUSH
// begin enable ;
25329: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25330: LD_ADDR_VAR 0 1
25334: PUSH
25335: LD_INT 34
25337: PUSH
25338: LD_EXP 28
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PPUSH
25347: CALL_OW 69
25351: PUSH
25352: FOR_IN
25353: IFFALSE 25573
// begin if not i in hackTanks then
25355: LD_VAR 0 1
25359: PUSH
25360: LD_EXP 100
25364: IN
25365: NOT
25366: IFFALSE 25449
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25368: LD_ADDR_EXP 100
25372: PUSH
25373: LD_EXP 100
25377: PPUSH
25378: LD_EXP 100
25382: PUSH
25383: LD_INT 1
25385: PLUS
25386: PPUSH
25387: LD_VAR 0 1
25391: PPUSH
25392: CALL_OW 1
25396: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25397: LD_ADDR_EXP 101
25401: PUSH
25402: LD_EXP 101
25406: PPUSH
25407: LD_EXP 101
25411: PUSH
25412: LD_INT 1
25414: PLUS
25415: PPUSH
25416: EMPTY
25417: PPUSH
25418: CALL_OW 1
25422: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25423: LD_ADDR_EXP 104
25427: PUSH
25428: LD_EXP 104
25432: PPUSH
25433: LD_EXP 104
25437: PUSH
25438: LD_INT 1
25440: PLUS
25441: PPUSH
25442: EMPTY
25443: PPUSH
25444: CALL_OW 1
25448: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25449: LD_VAR 0 1
25453: PPUSH
25454: CALL_OW 302
25458: NOT
25459: IFFALSE 25472
// begin HackUnlinkAll ( i ) ;
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL 25578 0 1
// continue ;
25470: GO 25352
// end ; HackCheckCapturedStatus ( i ) ;
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL 26021 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25481: LD_ADDR_VAR 0 2
25485: PUSH
25486: LD_INT 81
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 255
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 33
25505: PUSH
25506: LD_INT 3
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 91
25515: PUSH
25516: LD_VAR 0 1
25520: PUSH
25521: LD_EXP 103
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 50
25533: PUSH
25534: EMPTY
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: ST_TO_ADDR
// if not tmp then
25548: LD_VAR 0 2
25552: NOT
25553: IFFALSE 25557
// continue ;
25555: GO 25352
// HackLink ( i , tmp ) ;
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: CALL 25714 0 2
// end ;
25571: GO 25352
25573: POP
25574: POP
// end ;
25575: PPOPN 2
25577: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
25582: PPUSH
// if not hack in hackTanks then
25583: LD_VAR 0 1
25587: PUSH
25588: LD_EXP 100
25592: IN
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25709
// index := GetElementIndex ( hackTanks , hack ) ;
25598: LD_ADDR_VAR 0 4
25602: PUSH
25603: LD_EXP 100
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL 33143 0 2
25617: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25618: LD_EXP 101
25622: PUSH
25623: LD_VAR 0 4
25627: ARRAY
25628: IFFALSE 25709
// begin for i in hackTanksCaptured [ index ] do
25630: LD_ADDR_VAR 0 3
25634: PUSH
25635: LD_EXP 101
25639: PUSH
25640: LD_VAR 0 4
25644: ARRAY
25645: PUSH
25646: FOR_IN
25647: IFFALSE 25673
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25649: LD_VAR 0 3
25653: PUSH
25654: LD_INT 1
25656: ARRAY
25657: PPUSH
25658: LD_VAR 0 3
25662: PUSH
25663: LD_INT 2
25665: ARRAY
25666: PPUSH
25667: CALL_OW 235
25671: GO 25646
25673: POP
25674: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25675: LD_ADDR_EXP 101
25679: PUSH
25680: LD_EXP 101
25684: PPUSH
25685: LD_VAR 0 4
25689: PPUSH
25690: EMPTY
25691: PPUSH
25692: CALL_OW 1
25696: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25697: LD_VAR 0 1
25701: PPUSH
25702: LD_INT 0
25704: PPUSH
25705: CALL_OW 505
// end ; end ;
25709: LD_VAR 0 2
25713: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25714: LD_INT 0
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if not hack in hackTanks or not vehicles then
25719: LD_VAR 0 1
25723: PUSH
25724: LD_EXP 100
25728: IN
25729: NOT
25730: PUSH
25731: LD_VAR 0 2
25735: NOT
25736: OR
25737: IFFALSE 25741
// exit ;
25739: GO 26016
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25741: LD_ADDR_VAR 0 2
25745: PUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: LD_VAR 0 2
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: LD_INT 1
25761: PPUSH
25762: CALL 33793 0 4
25766: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_EXP 100
25776: PPUSH
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL 33143 0 2
25786: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25787: LD_EXP 101
25791: PUSH
25792: LD_VAR 0 5
25796: ARRAY
25797: PUSH
25798: LD_EXP 102
25802: LESS
25803: IFFALSE 25992
// begin for i := 1 to vehicles do
25805: LD_ADDR_VAR 0 4
25809: PUSH
25810: DOUBLE
25811: LD_INT 1
25813: DEC
25814: ST_TO_ADDR
25815: LD_VAR 0 2
25819: PUSH
25820: FOR_TO
25821: IFFALSE 25990
// begin if hackTanksCaptured [ index ] = hackLimit then
25823: LD_EXP 101
25827: PUSH
25828: LD_VAR 0 5
25832: ARRAY
25833: PUSH
25834: LD_EXP 102
25838: EQUAL
25839: IFFALSE 25843
// break ;
25841: GO 25990
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25843: LD_ADDR_EXP 104
25847: PUSH
25848: LD_EXP 104
25852: PPUSH
25853: LD_VAR 0 5
25857: PPUSH
25858: LD_EXP 104
25862: PUSH
25863: LD_VAR 0 5
25867: ARRAY
25868: PUSH
25869: LD_INT 1
25871: PLUS
25872: PPUSH
25873: CALL_OW 1
25877: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25878: LD_ADDR_EXP 101
25882: PUSH
25883: LD_EXP 101
25887: PPUSH
25888: LD_VAR 0 5
25892: PUSH
25893: LD_EXP 101
25897: PUSH
25898: LD_VAR 0 5
25902: ARRAY
25903: PUSH
25904: LD_INT 1
25906: PLUS
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: LD_VAR 0 2
25916: PUSH
25917: LD_VAR 0 4
25921: ARRAY
25922: PUSH
25923: LD_VAR 0 2
25927: PUSH
25928: LD_VAR 0 4
25932: ARRAY
25933: PPUSH
25934: CALL_OW 255
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PPUSH
25943: CALL 33358 0 3
25947: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25948: LD_VAR 0 2
25952: PUSH
25953: LD_VAR 0 4
25957: ARRAY
25958: PPUSH
25959: LD_VAR 0 1
25963: PPUSH
25964: CALL_OW 255
25968: PPUSH
25969: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25973: LD_VAR 0 2
25977: PUSH
25978: LD_VAR 0 4
25982: ARRAY
25983: PPUSH
25984: CALL_OW 141
// end ;
25988: GO 25820
25990: POP
25991: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_EXP 101
26001: PUSH
26002: LD_VAR 0 5
26006: ARRAY
26007: PUSH
26008: LD_INT 0
26010: PLUS
26011: PPUSH
26012: CALL_OW 505
// end ;
26016: LD_VAR 0 3
26020: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
// if not hack in hackTanks then
26027: LD_VAR 0 1
26031: PUSH
26032: LD_EXP 100
26036: IN
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26282
// index := GetElementIndex ( hackTanks , hack ) ;
26042: LD_ADDR_VAR 0 4
26046: PUSH
26047: LD_EXP 100
26051: PPUSH
26052: LD_VAR 0 1
26056: PPUSH
26057: CALL 33143 0 2
26061: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26062: LD_ADDR_VAR 0 3
26066: PUSH
26067: DOUBLE
26068: LD_EXP 101
26072: PUSH
26073: LD_VAR 0 4
26077: ARRAY
26078: INC
26079: ST_TO_ADDR
26080: LD_INT 1
26082: PUSH
26083: FOR_DOWNTO
26084: IFFALSE 26256
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: LD_EXP 101
26095: PUSH
26096: LD_VAR 0 4
26100: ARRAY
26101: PUSH
26102: LD_VAR 0 3
26106: ARRAY
26107: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26108: LD_VAR 0 5
26112: PUSH
26113: LD_INT 1
26115: ARRAY
26116: PPUSH
26117: CALL_OW 302
26121: NOT
26122: PUSH
26123: LD_VAR 0 5
26127: PUSH
26128: LD_INT 1
26130: ARRAY
26131: PPUSH
26132: CALL_OW 255
26136: PUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 255
26146: NONEQUAL
26147: OR
26148: IFFALSE 26254
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26150: LD_VAR 0 5
26154: PUSH
26155: LD_INT 1
26157: ARRAY
26158: PPUSH
26159: CALL_OW 305
26163: PUSH
26164: LD_VAR 0 5
26168: PUSH
26169: LD_INT 1
26171: ARRAY
26172: PPUSH
26173: CALL_OW 255
26177: PUSH
26178: LD_VAR 0 1
26182: PPUSH
26183: CALL_OW 255
26187: EQUAL
26188: AND
26189: IFFALSE 26213
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26191: LD_VAR 0 5
26195: PUSH
26196: LD_INT 1
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 5
26204: PUSH
26205: LD_INT 2
26207: ARRAY
26208: PPUSH
26209: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26213: LD_ADDR_EXP 101
26217: PUSH
26218: LD_EXP 101
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: LD_EXP 101
26232: PUSH
26233: LD_VAR 0 4
26237: ARRAY
26238: PPUSH
26239: LD_VAR 0 3
26243: PPUSH
26244: CALL_OW 3
26248: PPUSH
26249: CALL_OW 1
26253: ST_TO_ADDR
// end ; end ;
26254: GO 26083
26256: POP
26257: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26258: LD_VAR 0 1
26262: PPUSH
26263: LD_EXP 101
26267: PUSH
26268: LD_VAR 0 4
26272: ARRAY
26273: PUSH
26274: LD_INT 0
26276: PLUS
26277: PPUSH
26278: CALL_OW 505
// end ;
26282: LD_VAR 0 2
26286: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
26292: PPUSH
// if not hack in hackTanks then
26293: LD_VAR 0 1
26297: PUSH
26298: LD_EXP 100
26302: IN
26303: NOT
26304: IFFALSE 26308
// exit ;
26306: GO 26393
// index := GetElementIndex ( hackTanks , hack ) ;
26308: LD_ADDR_VAR 0 5
26312: PUSH
26313: LD_EXP 100
26317: PPUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL 33143 0 2
26327: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26328: LD_ADDR_VAR 0 4
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_EXP 101
26342: PUSH
26343: LD_VAR 0 5
26347: ARRAY
26348: PUSH
26349: FOR_TO
26350: IFFALSE 26391
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26352: LD_EXP 101
26356: PUSH
26357: LD_VAR 0 5
26361: ARRAY
26362: PUSH
26363: LD_VAR 0 4
26367: ARRAY
26368: PUSH
26369: LD_INT 1
26371: ARRAY
26372: PUSH
26373: LD_VAR 0 2
26377: EQUAL
26378: IFFALSE 26389
// KillUnit ( vehicle ) ;
26380: LD_VAR 0 2
26384: PPUSH
26385: CALL_OW 66
26389: GO 26349
26391: POP
26392: POP
// end ;
26393: LD_VAR 0 3
26397: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26398: LD_EXP 105
26402: NOT
26403: IFFALSE 26438
26405: GO 26407
26407: DISABLE
// begin initMiner := true ;
26408: LD_ADDR_EXP 105
26412: PUSH
26413: LD_INT 1
26415: ST_TO_ADDR
// minersList := [ ] ;
26416: LD_ADDR_EXP 106
26420: PUSH
26421: EMPTY
26422: ST_TO_ADDR
// minerMinesList := [ ] ;
26423: LD_ADDR_EXP 107
26427: PUSH
26428: EMPTY
26429: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26430: LD_ADDR_EXP 108
26434: PUSH
26435: LD_INT 5
26437: ST_TO_ADDR
// end ;
26438: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26439: LD_EXP 105
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_EXP 33
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: AND
26461: IFFALSE 26924
26463: GO 26465
26465: DISABLE
26466: LD_INT 0
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
// begin enable ;
26472: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26473: LD_ADDR_VAR 0 1
26477: PUSH
26478: LD_INT 34
26480: PUSH
26481: LD_EXP 33
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PPUSH
26490: CALL_OW 69
26494: PUSH
26495: FOR_IN
26496: IFFALSE 26568
// begin if not i in minersList then
26498: LD_VAR 0 1
26502: PUSH
26503: LD_EXP 106
26507: IN
26508: NOT
26509: IFFALSE 26566
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26511: LD_ADDR_EXP 106
26515: PUSH
26516: LD_EXP 106
26520: PPUSH
26521: LD_EXP 106
26525: PUSH
26526: LD_INT 1
26528: PLUS
26529: PPUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: CALL_OW 1
26539: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26540: LD_ADDR_EXP 107
26544: PUSH
26545: LD_EXP 107
26549: PPUSH
26550: LD_EXP 107
26554: PUSH
26555: LD_INT 1
26557: PLUS
26558: PPUSH
26559: EMPTY
26560: PPUSH
26561: CALL_OW 1
26565: ST_TO_ADDR
// end end ;
26566: GO 26495
26568: POP
26569: POP
// for i := minerMinesList downto 1 do
26570: LD_ADDR_VAR 0 1
26574: PUSH
26575: DOUBLE
26576: LD_EXP 107
26580: INC
26581: ST_TO_ADDR
26582: LD_INT 1
26584: PUSH
26585: FOR_DOWNTO
26586: IFFALSE 26922
// begin if IsLive ( minersList [ i ] ) then
26588: LD_EXP 106
26592: PUSH
26593: LD_VAR 0 1
26597: ARRAY
26598: PPUSH
26599: CALL_OW 300
26603: IFFALSE 26631
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26605: LD_EXP 106
26609: PUSH
26610: LD_VAR 0 1
26614: ARRAY
26615: PPUSH
26616: LD_EXP 107
26620: PUSH
26621: LD_VAR 0 1
26625: ARRAY
26626: PPUSH
26627: CALL_OW 505
// if not minerMinesList [ i ] then
26631: LD_EXP 107
26635: PUSH
26636: LD_VAR 0 1
26640: ARRAY
26641: NOT
26642: IFFALSE 26646
// continue ;
26644: GO 26585
// for j := minerMinesList [ i ] downto 1 do
26646: LD_ADDR_VAR 0 2
26650: PUSH
26651: DOUBLE
26652: LD_EXP 107
26656: PUSH
26657: LD_VAR 0 1
26661: ARRAY
26662: INC
26663: ST_TO_ADDR
26664: LD_INT 1
26666: PUSH
26667: FOR_DOWNTO
26668: IFFALSE 26918
// begin side := GetSide ( minersList [ i ] ) ;
26670: LD_ADDR_VAR 0 3
26674: PUSH
26675: LD_EXP 106
26679: PUSH
26680: LD_VAR 0 1
26684: ARRAY
26685: PPUSH
26686: CALL_OW 255
26690: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_EXP 107
26700: PUSH
26701: LD_VAR 0 1
26705: ARRAY
26706: PUSH
26707: LD_VAR 0 2
26711: ARRAY
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_EXP 107
26721: PUSH
26722: LD_VAR 0 1
26726: ARRAY
26727: PUSH
26728: LD_VAR 0 2
26732: ARRAY
26733: PUSH
26734: LD_INT 2
26736: ARRAY
26737: PPUSH
26738: CALL_OW 428
26742: ST_TO_ADDR
// if not tmp then
26743: LD_VAR 0 4
26747: NOT
26748: IFFALSE 26752
// continue ;
26750: GO 26667
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26752: LD_VAR 0 4
26756: PUSH
26757: LD_INT 81
26759: PUSH
26760: LD_VAR 0 3
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PPUSH
26769: CALL_OW 69
26773: IN
26774: PUSH
26775: LD_EXP 107
26779: PUSH
26780: LD_VAR 0 1
26784: ARRAY
26785: PUSH
26786: LD_VAR 0 2
26790: ARRAY
26791: PUSH
26792: LD_INT 1
26794: ARRAY
26795: PPUSH
26796: LD_EXP 107
26800: PUSH
26801: LD_VAR 0 1
26805: ARRAY
26806: PUSH
26807: LD_VAR 0 2
26811: ARRAY
26812: PUSH
26813: LD_INT 2
26815: ARRAY
26816: PPUSH
26817: CALL_OW 458
26821: AND
26822: IFFALSE 26916
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26824: LD_EXP 107
26828: PUSH
26829: LD_VAR 0 1
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 2
26839: ARRAY
26840: PUSH
26841: LD_INT 1
26843: ARRAY
26844: PPUSH
26845: LD_EXP 107
26849: PUSH
26850: LD_VAR 0 1
26854: ARRAY
26855: PUSH
26856: LD_VAR 0 2
26860: ARRAY
26861: PUSH
26862: LD_INT 2
26864: ARRAY
26865: PPUSH
26866: LD_VAR 0 3
26870: PPUSH
26871: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26875: LD_ADDR_EXP 107
26879: PUSH
26880: LD_EXP 107
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_EXP 107
26894: PUSH
26895: LD_VAR 0 1
26899: ARRAY
26900: PPUSH
26901: LD_VAR 0 2
26905: PPUSH
26906: CALL_OW 3
26910: PPUSH
26911: CALL_OW 1
26915: ST_TO_ADDR
// end ; end ;
26916: GO 26667
26918: POP
26919: POP
// end ;
26920: GO 26585
26922: POP
26923: POP
// end ;
26924: PPOPN 4
26926: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26927: LD_INT 0
26929: PPUSH
26930: PPUSH
// result := false ;
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_INT 0
26938: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 264
26948: PUSH
26949: LD_EXP 33
26953: EQUAL
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27199
// index := GetElementIndex ( minersList , unit ) ;
26959: LD_ADDR_VAR 0 5
26963: PUSH
26964: LD_EXP 106
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL 33143 0 2
26978: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26979: LD_EXP 107
26983: PUSH
26984: LD_VAR 0 5
26988: ARRAY
26989: PUSH
26990: LD_EXP 108
26994: GREATEREQUAL
26995: IFFALSE 26999
// exit ;
26997: GO 27199
// ComMoveXY ( unit , x , y ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_VAR 0 2
27008: PPUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27018: LD_INT 35
27020: PPUSH
27021: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27025: LD_VAR 0 1
27029: PPUSH
27030: LD_VAR 0 2
27034: PPUSH
27035: LD_VAR 0 3
27039: PPUSH
27040: CALL 63540 0 3
27044: NOT
27045: PUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 314
27055: AND
27056: IFFALSE 27060
// exit ;
27058: GO 27199
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_VAR 0 3
27069: PPUSH
27070: CALL_OW 428
27074: PUSH
27075: LD_VAR 0 1
27079: EQUAL
27080: PUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 314
27090: NOT
27091: AND
27092: IFFALSE 27018
// PlaySoundXY ( x , y , PlantMine ) ;
27094: LD_VAR 0 2
27098: PPUSH
27099: LD_VAR 0 3
27103: PPUSH
27104: LD_STRING PlantMine
27106: PPUSH
27107: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27111: LD_VAR 0 2
27115: PPUSH
27116: LD_VAR 0 3
27120: PPUSH
27121: LD_VAR 0 1
27125: PPUSH
27126: CALL_OW 255
27130: PPUSH
27131: LD_INT 0
27133: PPUSH
27134: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27138: LD_ADDR_EXP 107
27142: PUSH
27143: LD_EXP 107
27147: PPUSH
27148: LD_VAR 0 5
27152: PUSH
27153: LD_EXP 107
27157: PUSH
27158: LD_VAR 0 5
27162: ARRAY
27163: PUSH
27164: LD_INT 1
27166: PLUS
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PPUSH
27172: LD_VAR 0 2
27176: PUSH
27177: LD_VAR 0 3
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PPUSH
27186: CALL 33358 0 3
27190: ST_TO_ADDR
// result := true ;
27191: LD_ADDR_VAR 0 4
27195: PUSH
27196: LD_INT 1
27198: ST_TO_ADDR
// end ;
27199: LD_VAR 0 4
27203: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27204: LD_INT 0
27206: PPUSH
27207: PPUSH
27208: PPUSH
// if not unit in minersList then
27209: LD_VAR 0 1
27213: PUSH
27214: LD_EXP 106
27218: IN
27219: NOT
27220: IFFALSE 27224
// exit ;
27222: GO 27616
// index := GetElementIndex ( minersList , unit ) ;
27224: LD_ADDR_VAR 0 6
27228: PUSH
27229: LD_EXP 106
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL 33143 0 2
27243: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: DOUBLE
27250: LD_EXP 107
27254: PUSH
27255: LD_VAR 0 6
27259: ARRAY
27260: INC
27261: ST_TO_ADDR
27262: LD_INT 1
27264: PUSH
27265: FOR_DOWNTO
27266: IFFALSE 27427
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27268: LD_EXP 107
27272: PUSH
27273: LD_VAR 0 6
27277: ARRAY
27278: PUSH
27279: LD_VAR 0 5
27283: ARRAY
27284: PUSH
27285: LD_INT 1
27287: ARRAY
27288: PUSH
27289: LD_VAR 0 2
27293: EQUAL
27294: PUSH
27295: LD_EXP 107
27299: PUSH
27300: LD_VAR 0 6
27304: ARRAY
27305: PUSH
27306: LD_VAR 0 5
27310: ARRAY
27311: PUSH
27312: LD_INT 2
27314: ARRAY
27315: PUSH
27316: LD_VAR 0 3
27320: EQUAL
27321: AND
27322: IFFALSE 27425
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27324: LD_EXP 107
27328: PUSH
27329: LD_VAR 0 6
27333: ARRAY
27334: PUSH
27335: LD_VAR 0 5
27339: ARRAY
27340: PUSH
27341: LD_INT 1
27343: ARRAY
27344: PPUSH
27345: LD_EXP 107
27349: PUSH
27350: LD_VAR 0 6
27354: ARRAY
27355: PUSH
27356: LD_VAR 0 5
27360: ARRAY
27361: PUSH
27362: LD_INT 2
27364: ARRAY
27365: PPUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 255
27375: PPUSH
27376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27380: LD_ADDR_EXP 107
27384: PUSH
27385: LD_EXP 107
27389: PPUSH
27390: LD_VAR 0 6
27394: PPUSH
27395: LD_EXP 107
27399: PUSH
27400: LD_VAR 0 6
27404: ARRAY
27405: PPUSH
27406: LD_VAR 0 5
27410: PPUSH
27411: CALL_OW 3
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
// exit ;
27421: POP
27422: POP
27423: GO 27616
// end ; end ;
27425: GO 27265
27427: POP
27428: POP
// for i := minerMinesList [ index ] downto 1 do
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: DOUBLE
27435: LD_EXP 107
27439: PUSH
27440: LD_VAR 0 6
27444: ARRAY
27445: INC
27446: ST_TO_ADDR
27447: LD_INT 1
27449: PUSH
27450: FOR_DOWNTO
27451: IFFALSE 27614
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27453: LD_EXP 107
27457: PUSH
27458: LD_VAR 0 6
27462: ARRAY
27463: PUSH
27464: LD_VAR 0 5
27468: ARRAY
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: LD_EXP 107
27478: PUSH
27479: LD_VAR 0 6
27483: ARRAY
27484: PUSH
27485: LD_VAR 0 5
27489: ARRAY
27490: PUSH
27491: LD_INT 2
27493: ARRAY
27494: PPUSH
27495: LD_VAR 0 2
27499: PPUSH
27500: LD_VAR 0 3
27504: PPUSH
27505: CALL_OW 298
27509: PUSH
27510: LD_INT 6
27512: LESS
27513: IFFALSE 27612
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27515: LD_EXP 107
27519: PUSH
27520: LD_VAR 0 6
27524: ARRAY
27525: PUSH
27526: LD_VAR 0 5
27530: ARRAY
27531: PUSH
27532: LD_INT 1
27534: ARRAY
27535: PPUSH
27536: LD_EXP 107
27540: PUSH
27541: LD_VAR 0 6
27545: ARRAY
27546: PUSH
27547: LD_VAR 0 5
27551: ARRAY
27552: PUSH
27553: LD_INT 2
27555: ARRAY
27556: PPUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 255
27566: PPUSH
27567: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27571: LD_ADDR_EXP 107
27575: PUSH
27576: LD_EXP 107
27580: PPUSH
27581: LD_VAR 0 6
27585: PPUSH
27586: LD_EXP 107
27590: PUSH
27591: LD_VAR 0 6
27595: ARRAY
27596: PPUSH
27597: LD_VAR 0 5
27601: PPUSH
27602: CALL_OW 3
27606: PPUSH
27607: CALL_OW 1
27611: ST_TO_ADDR
// end ; end ;
27612: GO 27450
27614: POP
27615: POP
// end ;
27616: LD_VAR 0 4
27620: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27621: LD_INT 0
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27632: LD_VAR 0 1
27636: PPUSH
27637: CALL_OW 264
27641: PUSH
27642: LD_EXP 33
27646: EQUAL
27647: NOT
27648: PUSH
27649: LD_VAR 0 1
27653: PUSH
27654: LD_EXP 106
27658: IN
27659: NOT
27660: OR
27661: IFFALSE 27665
// exit ;
27663: GO 27987
// index := GetElementIndex ( minersList , unit ) ;
27665: LD_ADDR_VAR 0 6
27669: PUSH
27670: LD_EXP 106
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL 33143 0 2
27684: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27685: LD_ADDR_VAR 0 8
27689: PUSH
27690: LD_EXP 108
27694: PUSH
27695: LD_EXP 107
27699: PUSH
27700: LD_VAR 0 6
27704: ARRAY
27705: MINUS
27706: ST_TO_ADDR
// if not minesFreeAmount then
27707: LD_VAR 0 8
27711: NOT
27712: IFFALSE 27716
// exit ;
27714: GO 27987
// tmp := [ ] ;
27716: LD_ADDR_VAR 0 7
27720: PUSH
27721: EMPTY
27722: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27723: LD_ADDR_VAR 0 5
27727: PUSH
27728: DOUBLE
27729: LD_INT 1
27731: DEC
27732: ST_TO_ADDR
27733: LD_VAR 0 8
27737: PUSH
27738: FOR_TO
27739: IFFALSE 27934
// begin _d := rand ( 0 , 5 ) ;
27741: LD_ADDR_VAR 0 11
27745: PUSH
27746: LD_INT 0
27748: PPUSH
27749: LD_INT 5
27751: PPUSH
27752: CALL_OW 12
27756: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27757: LD_ADDR_VAR 0 12
27761: PUSH
27762: LD_INT 2
27764: PPUSH
27765: LD_INT 6
27767: PPUSH
27768: CALL_OW 12
27772: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27773: LD_ADDR_VAR 0 9
27777: PUSH
27778: LD_VAR 0 2
27782: PPUSH
27783: LD_VAR 0 11
27787: PPUSH
27788: LD_VAR 0 12
27792: PPUSH
27793: CALL_OW 272
27797: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27798: LD_ADDR_VAR 0 10
27802: PUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: LD_VAR 0 11
27812: PPUSH
27813: LD_VAR 0 12
27817: PPUSH
27818: CALL_OW 273
27822: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27823: LD_VAR 0 9
27827: PPUSH
27828: LD_VAR 0 10
27832: PPUSH
27833: CALL_OW 488
27837: PUSH
27838: LD_VAR 0 9
27842: PUSH
27843: LD_VAR 0 10
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_VAR 0 7
27856: IN
27857: NOT
27858: AND
27859: PUSH
27860: LD_VAR 0 9
27864: PPUSH
27865: LD_VAR 0 10
27869: PPUSH
27870: CALL_OW 458
27874: NOT
27875: AND
27876: IFFALSE 27918
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27878: LD_ADDR_VAR 0 7
27882: PUSH
27883: LD_VAR 0 7
27887: PPUSH
27888: LD_VAR 0 7
27892: PUSH
27893: LD_INT 1
27895: PLUS
27896: PPUSH
27897: LD_VAR 0 9
27901: PUSH
27902: LD_VAR 0 10
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PPUSH
27911: CALL_OW 1
27915: ST_TO_ADDR
27916: GO 27932
// i := i - 1 ;
27918: LD_ADDR_VAR 0 5
27922: PUSH
27923: LD_VAR 0 5
27927: PUSH
27928: LD_INT 1
27930: MINUS
27931: ST_TO_ADDR
// end ;
27932: GO 27738
27934: POP
27935: POP
// for i in tmp do
27936: LD_ADDR_VAR 0 5
27940: PUSH
27941: LD_VAR 0 7
27945: PUSH
27946: FOR_IN
27947: IFFALSE 27985
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_VAR 0 5
27958: PUSH
27959: LD_INT 1
27961: ARRAY
27962: PPUSH
27963: LD_VAR 0 5
27967: PUSH
27968: LD_INT 2
27970: ARRAY
27971: PPUSH
27972: CALL 26927 0 3
27976: NOT
27977: IFFALSE 27983
// exit ;
27979: POP
27980: POP
27981: GO 27987
27983: GO 27946
27985: POP
27986: POP
// end ;
27987: LD_VAR 0 4
27991: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27992: LD_INT 0
27994: PPUSH
27995: PPUSH
27996: PPUSH
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
// if not GetClass ( unit ) = class_sniper then
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 257
28010: PUSH
28011: LD_INT 5
28013: EQUAL
28014: NOT
28015: IFFALSE 28019
// exit ;
28017: GO 28407
// dist := 8 ;
28019: LD_ADDR_VAR 0 5
28023: PUSH
28024: LD_INT 8
28026: ST_TO_ADDR
// viewRange := 12 ;
28027: LD_ADDR_VAR 0 7
28031: PUSH
28032: LD_INT 12
28034: ST_TO_ADDR
// side := GetSide ( unit ) ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 255
28049: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28050: LD_INT 61
28052: PPUSH
28053: LD_VAR 0 6
28057: PPUSH
28058: CALL_OW 321
28062: PUSH
28063: LD_INT 2
28065: EQUAL
28066: IFFALSE 28076
// viewRange := 16 ;
28068: LD_ADDR_VAR 0 7
28072: PUSH
28073: LD_INT 16
28075: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_VAR 0 2
28085: PPUSH
28086: LD_VAR 0 3
28090: PPUSH
28091: CALL_OW 297
28095: PUSH
28096: LD_VAR 0 5
28100: GREATER
28101: IFFALSE 28180
// begin ComMoveXY ( unit , x , y ) ;
28103: LD_VAR 0 1
28107: PPUSH
28108: LD_VAR 0 2
28112: PPUSH
28113: LD_VAR 0 3
28117: PPUSH
28118: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28122: LD_INT 35
28124: PPUSH
28125: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28129: LD_VAR 0 1
28133: PPUSH
28134: LD_VAR 0 2
28138: PPUSH
28139: LD_VAR 0 3
28143: PPUSH
28144: CALL 63540 0 3
28148: NOT
28149: IFFALSE 28153
// exit ;
28151: GO 28407
// until GetDistUnitXY ( unit , x , y ) < dist ;
28153: LD_VAR 0 1
28157: PPUSH
28158: LD_VAR 0 2
28162: PPUSH
28163: LD_VAR 0 3
28167: PPUSH
28168: CALL_OW 297
28172: PUSH
28173: LD_VAR 0 5
28177: LESS
28178: IFFALSE 28122
// end ; ComTurnXY ( unit , x , y ) ;
28180: LD_VAR 0 1
28184: PPUSH
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_VAR 0 3
28194: PPUSH
28195: CALL_OW 118
// wait ( 5 ) ;
28199: LD_INT 5
28201: PPUSH
28202: CALL_OW 67
// _d := GetDir ( unit ) ;
28206: LD_ADDR_VAR 0 10
28210: PUSH
28211: LD_VAR 0 1
28215: PPUSH
28216: CALL_OW 254
28220: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28221: LD_ADDR_VAR 0 8
28225: PUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 250
28235: PPUSH
28236: LD_VAR 0 10
28240: PPUSH
28241: LD_VAR 0 5
28245: PPUSH
28246: CALL_OW 272
28250: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28251: LD_ADDR_VAR 0 9
28255: PUSH
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 251
28265: PPUSH
28266: LD_VAR 0 10
28270: PPUSH
28271: LD_VAR 0 5
28275: PPUSH
28276: CALL_OW 273
28280: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28281: LD_VAR 0 8
28285: PPUSH
28286: LD_VAR 0 9
28290: PPUSH
28291: CALL_OW 488
28295: NOT
28296: IFFALSE 28300
// exit ;
28298: GO 28407
// ComAnimCustom ( unit , 1 ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_INT 1
28307: PPUSH
28308: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28312: LD_VAR 0 8
28316: PPUSH
28317: LD_VAR 0 9
28321: PPUSH
28322: LD_VAR 0 6
28326: PPUSH
28327: LD_VAR 0 7
28331: PPUSH
28332: CALL_OW 330
// repeat wait ( 1 ) ;
28336: LD_INT 1
28338: PPUSH
28339: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 316
28352: PUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 314
28362: OR
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 302
28373: NOT
28374: OR
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 301
28385: OR
28386: IFFALSE 28336
// RemoveSeeing ( _x , _y , side ) ;
28388: LD_VAR 0 8
28392: PPUSH
28393: LD_VAR 0 9
28397: PPUSH
28398: LD_VAR 0 6
28402: PPUSH
28403: CALL_OW 331
// end ; end_of_file
28407: LD_VAR 0 4
28411: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28412: LD_INT 0
28414: PPUSH
28415: PPUSH
// if exist_mode then
28416: LD_VAR 0 2
28420: IFFALSE 28445
// unit := CreateCharacter ( prefix & ident ) else
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_VAR 0 3
28431: PUSH
28432: LD_VAR 0 1
28436: STR
28437: PPUSH
28438: CALL_OW 34
28442: ST_TO_ADDR
28443: GO 28460
// unit := NewCharacter ( ident ) ;
28445: LD_ADDR_VAR 0 5
28449: PUSH
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL_OW 25
28459: ST_TO_ADDR
// result := unit ;
28460: LD_ADDR_VAR 0 4
28464: PUSH
28465: LD_VAR 0 5
28469: ST_TO_ADDR
// end ;
28470: LD_VAR 0 4
28474: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28475: LD_INT 0
28477: PPUSH
28478: PPUSH
// if not side or not nation then
28479: LD_VAR 0 1
28483: NOT
28484: PUSH
28485: LD_VAR 0 2
28489: NOT
28490: OR
28491: IFFALSE 28495
// exit ;
28493: GO 29259
// case nation of nation_american :
28495: LD_VAR 0 2
28499: PUSH
28500: LD_INT 1
28502: DOUBLE
28503: EQUAL
28504: IFTRUE 28508
28506: GO 28722
28508: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28509: LD_ADDR_VAR 0 4
28513: PUSH
28514: LD_INT 35
28516: PUSH
28517: LD_INT 45
28519: PUSH
28520: LD_INT 46
28522: PUSH
28523: LD_INT 47
28525: PUSH
28526: LD_INT 82
28528: PUSH
28529: LD_INT 83
28531: PUSH
28532: LD_INT 84
28534: PUSH
28535: LD_INT 85
28537: PUSH
28538: LD_INT 86
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: LD_INT 6
28549: PUSH
28550: LD_INT 15
28552: PUSH
28553: LD_INT 16
28555: PUSH
28556: LD_INT 7
28558: PUSH
28559: LD_INT 12
28561: PUSH
28562: LD_INT 13
28564: PUSH
28565: LD_INT 10
28567: PUSH
28568: LD_INT 14
28570: PUSH
28571: LD_INT 20
28573: PUSH
28574: LD_INT 21
28576: PUSH
28577: LD_INT 22
28579: PUSH
28580: LD_INT 25
28582: PUSH
28583: LD_INT 32
28585: PUSH
28586: LD_INT 27
28588: PUSH
28589: LD_INT 36
28591: PUSH
28592: LD_INT 69
28594: PUSH
28595: LD_INT 39
28597: PUSH
28598: LD_INT 34
28600: PUSH
28601: LD_INT 40
28603: PUSH
28604: LD_INT 48
28606: PUSH
28607: LD_INT 49
28609: PUSH
28610: LD_INT 50
28612: PUSH
28613: LD_INT 51
28615: PUSH
28616: LD_INT 52
28618: PUSH
28619: LD_INT 53
28621: PUSH
28622: LD_INT 54
28624: PUSH
28625: LD_INT 55
28627: PUSH
28628: LD_INT 56
28630: PUSH
28631: LD_INT 57
28633: PUSH
28634: LD_INT 58
28636: PUSH
28637: LD_INT 59
28639: PUSH
28640: LD_INT 60
28642: PUSH
28643: LD_INT 61
28645: PUSH
28646: LD_INT 62
28648: PUSH
28649: LD_INT 80
28651: PUSH
28652: LD_INT 82
28654: PUSH
28655: LD_INT 83
28657: PUSH
28658: LD_INT 84
28660: PUSH
28661: LD_INT 85
28663: PUSH
28664: LD_INT 86
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
28720: GO 29183
28722: LD_INT 2
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28952
28730: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28731: LD_ADDR_VAR 0 4
28735: PUSH
28736: LD_INT 35
28738: PUSH
28739: LD_INT 45
28741: PUSH
28742: LD_INT 46
28744: PUSH
28745: LD_INT 47
28747: PUSH
28748: LD_INT 82
28750: PUSH
28751: LD_INT 83
28753: PUSH
28754: LD_INT 84
28756: PUSH
28757: LD_INT 85
28759: PUSH
28760: LD_INT 87
28762: PUSH
28763: LD_INT 70
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 11
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: LD_INT 4
28777: PUSH
28778: LD_INT 5
28780: PUSH
28781: LD_INT 6
28783: PUSH
28784: LD_INT 15
28786: PUSH
28787: LD_INT 18
28789: PUSH
28790: LD_INT 7
28792: PUSH
28793: LD_INT 17
28795: PUSH
28796: LD_INT 8
28798: PUSH
28799: LD_INT 20
28801: PUSH
28802: LD_INT 21
28804: PUSH
28805: LD_INT 22
28807: PUSH
28808: LD_INT 72
28810: PUSH
28811: LD_INT 26
28813: PUSH
28814: LD_INT 69
28816: PUSH
28817: LD_INT 39
28819: PUSH
28820: LD_INT 40
28822: PUSH
28823: LD_INT 41
28825: PUSH
28826: LD_INT 42
28828: PUSH
28829: LD_INT 43
28831: PUSH
28832: LD_INT 48
28834: PUSH
28835: LD_INT 49
28837: PUSH
28838: LD_INT 50
28840: PUSH
28841: LD_INT 51
28843: PUSH
28844: LD_INT 52
28846: PUSH
28847: LD_INT 53
28849: PUSH
28850: LD_INT 54
28852: PUSH
28853: LD_INT 55
28855: PUSH
28856: LD_INT 56
28858: PUSH
28859: LD_INT 60
28861: PUSH
28862: LD_INT 61
28864: PUSH
28865: LD_INT 62
28867: PUSH
28868: LD_INT 66
28870: PUSH
28871: LD_INT 67
28873: PUSH
28874: LD_INT 68
28876: PUSH
28877: LD_INT 81
28879: PUSH
28880: LD_INT 82
28882: PUSH
28883: LD_INT 83
28885: PUSH
28886: LD_INT 84
28888: PUSH
28889: LD_INT 85
28891: PUSH
28892: LD_INT 87
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 29183
28952: LD_INT 3
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 29182
28960: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28961: LD_ADDR_VAR 0 4
28965: PUSH
28966: LD_INT 46
28968: PUSH
28969: LD_INT 47
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 82
28980: PUSH
28981: LD_INT 83
28983: PUSH
28984: LD_INT 84
28986: PUSH
28987: LD_INT 85
28989: PUSH
28990: LD_INT 86
28992: PUSH
28993: LD_INT 11
28995: PUSH
28996: LD_INT 9
28998: PUSH
28999: LD_INT 20
29001: PUSH
29002: LD_INT 19
29004: PUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 24
29010: PUSH
29011: LD_INT 22
29013: PUSH
29014: LD_INT 25
29016: PUSH
29017: LD_INT 28
29019: PUSH
29020: LD_INT 29
29022: PUSH
29023: LD_INT 30
29025: PUSH
29026: LD_INT 31
29028: PUSH
29029: LD_INT 37
29031: PUSH
29032: LD_INT 38
29034: PUSH
29035: LD_INT 32
29037: PUSH
29038: LD_INT 27
29040: PUSH
29041: LD_INT 33
29043: PUSH
29044: LD_INT 69
29046: PUSH
29047: LD_INT 39
29049: PUSH
29050: LD_INT 34
29052: PUSH
29053: LD_INT 40
29055: PUSH
29056: LD_INT 71
29058: PUSH
29059: LD_INT 23
29061: PUSH
29062: LD_INT 44
29064: PUSH
29065: LD_INT 48
29067: PUSH
29068: LD_INT 49
29070: PUSH
29071: LD_INT 50
29073: PUSH
29074: LD_INT 51
29076: PUSH
29077: LD_INT 52
29079: PUSH
29080: LD_INT 53
29082: PUSH
29083: LD_INT 54
29085: PUSH
29086: LD_INT 55
29088: PUSH
29089: LD_INT 56
29091: PUSH
29092: LD_INT 57
29094: PUSH
29095: LD_INT 58
29097: PUSH
29098: LD_INT 59
29100: PUSH
29101: LD_INT 63
29103: PUSH
29104: LD_INT 64
29106: PUSH
29107: LD_INT 65
29109: PUSH
29110: LD_INT 82
29112: PUSH
29113: LD_INT 83
29115: PUSH
29116: LD_INT 84
29118: PUSH
29119: LD_INT 85
29121: PUSH
29122: LD_INT 86
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: ST_TO_ADDR
29180: GO 29183
29182: POP
// if state > - 1 and state < 3 then
29183: LD_VAR 0 3
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: GREATER
29192: PUSH
29193: LD_VAR 0 3
29197: PUSH
29198: LD_INT 3
29200: LESS
29201: AND
29202: IFFALSE 29259
// for i in result do
29204: LD_ADDR_VAR 0 5
29208: PUSH
29209: LD_VAR 0 4
29213: PUSH
29214: FOR_IN
29215: IFFALSE 29257
// if GetTech ( i , side ) <> state then
29217: LD_VAR 0 5
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 321
29231: PUSH
29232: LD_VAR 0 3
29236: NONEQUAL
29237: IFFALSE 29255
// result := result diff i ;
29239: LD_ADDR_VAR 0 4
29243: PUSH
29244: LD_VAR 0 4
29248: PUSH
29249: LD_VAR 0 5
29253: DIFF
29254: ST_TO_ADDR
29255: GO 29214
29257: POP
29258: POP
// end ;
29259: LD_VAR 0 4
29263: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
// result := true ;
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_INT 1
29276: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29277: LD_ADDR_VAR 0 5
29281: PUSH
29282: LD_VAR 0 2
29286: PPUSH
29287: CALL_OW 480
29291: ST_TO_ADDR
// if not tmp then
29292: LD_VAR 0 5
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29350
// for i in tmp do
29301: LD_ADDR_VAR 0 4
29305: PUSH
29306: LD_VAR 0 5
29310: PUSH
29311: FOR_IN
29312: IFFALSE 29348
// if GetTech ( i , side ) <> state_researched then
29314: LD_VAR 0 4
29318: PPUSH
29319: LD_VAR 0 1
29323: PPUSH
29324: CALL_OW 321
29328: PUSH
29329: LD_INT 2
29331: NONEQUAL
29332: IFFALSE 29346
// begin result := false ;
29334: LD_ADDR_VAR 0 3
29338: PUSH
29339: LD_INT 0
29341: ST_TO_ADDR
// exit ;
29342: POP
29343: POP
29344: GO 29350
// end ;
29346: GO 29311
29348: POP
29349: POP
// end ;
29350: LD_VAR 0 3
29354: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29355: LD_INT 0
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29370: LD_VAR 0 1
29374: NOT
29375: PUSH
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL_OW 257
29385: PUSH
29386: LD_INT 9
29388: NONEQUAL
29389: OR
29390: IFFALSE 29394
// exit ;
29392: GO 29967
// side := GetSide ( unit ) ;
29394: LD_ADDR_VAR 0 9
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 255
29408: ST_TO_ADDR
// tech_space := tech_spacanom ;
29409: LD_ADDR_VAR 0 12
29413: PUSH
29414: LD_INT 29
29416: ST_TO_ADDR
// tech_time := tech_taurad ;
29417: LD_ADDR_VAR 0 13
29421: PUSH
29422: LD_INT 28
29424: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29425: LD_ADDR_VAR 0 11
29429: PUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 310
29439: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29440: LD_VAR 0 11
29444: PPUSH
29445: CALL_OW 247
29449: PUSH
29450: LD_INT 2
29452: EQUAL
29453: IFFALSE 29457
// exit ;
29455: GO 29967
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29457: LD_ADDR_VAR 0 8
29461: PUSH
29462: LD_INT 81
29464: PUSH
29465: LD_VAR 0 9
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 3
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PPUSH
29495: CALL_OW 69
29499: ST_TO_ADDR
// if not tmp then
29500: LD_VAR 0 8
29504: NOT
29505: IFFALSE 29509
// exit ;
29507: GO 29967
// if in_unit then
29509: LD_VAR 0 11
29513: IFFALSE 29537
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29515: LD_ADDR_VAR 0 10
29519: PUSH
29520: LD_VAR 0 8
29524: PPUSH
29525: LD_VAR 0 11
29529: PPUSH
29530: CALL_OW 74
29534: ST_TO_ADDR
29535: GO 29557
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29537: LD_ADDR_VAR 0 10
29541: PUSH
29542: LD_VAR 0 8
29546: PPUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: CALL_OW 74
29556: ST_TO_ADDR
// if not enemy then
29557: LD_VAR 0 10
29561: NOT
29562: IFFALSE 29566
// exit ;
29564: GO 29967
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29566: LD_VAR 0 11
29570: PUSH
29571: LD_VAR 0 11
29575: PPUSH
29576: LD_VAR 0 10
29580: PPUSH
29581: CALL_OW 296
29585: PUSH
29586: LD_INT 13
29588: GREATER
29589: AND
29590: PUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_VAR 0 10
29600: PPUSH
29601: CALL_OW 296
29605: PUSH
29606: LD_INT 12
29608: GREATER
29609: OR
29610: IFFALSE 29614
// exit ;
29612: GO 29967
// missile := [ 1 ] ;
29614: LD_ADDR_VAR 0 14
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29625: LD_VAR 0 9
29629: PPUSH
29630: LD_VAR 0 12
29634: PPUSH
29635: CALL_OW 325
29639: IFFALSE 29668
// missile := Insert ( missile , missile + 1 , 2 ) ;
29641: LD_ADDR_VAR 0 14
29645: PUSH
29646: LD_VAR 0 14
29650: PPUSH
29651: LD_VAR 0 14
29655: PUSH
29656: LD_INT 1
29658: PLUS
29659: PPUSH
29660: LD_INT 2
29662: PPUSH
29663: CALL_OW 2
29667: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29668: LD_VAR 0 9
29672: PPUSH
29673: LD_VAR 0 13
29677: PPUSH
29678: CALL_OW 325
29682: PUSH
29683: LD_VAR 0 10
29687: PPUSH
29688: CALL_OW 255
29692: PPUSH
29693: LD_VAR 0 13
29697: PPUSH
29698: CALL_OW 325
29702: NOT
29703: AND
29704: IFFALSE 29733
// missile := Insert ( missile , missile + 1 , 3 ) ;
29706: LD_ADDR_VAR 0 14
29710: PUSH
29711: LD_VAR 0 14
29715: PPUSH
29716: LD_VAR 0 14
29720: PUSH
29721: LD_INT 1
29723: PLUS
29724: PPUSH
29725: LD_INT 3
29727: PPUSH
29728: CALL_OW 2
29732: ST_TO_ADDR
// if missile < 2 then
29733: LD_VAR 0 14
29737: PUSH
29738: LD_INT 2
29740: LESS
29741: IFFALSE 29745
// exit ;
29743: GO 29967
// x := GetX ( enemy ) ;
29745: LD_ADDR_VAR 0 4
29749: PUSH
29750: LD_VAR 0 10
29754: PPUSH
29755: CALL_OW 250
29759: ST_TO_ADDR
// y := GetY ( enemy ) ;
29760: LD_ADDR_VAR 0 5
29764: PUSH
29765: LD_VAR 0 10
29769: PPUSH
29770: CALL_OW 251
29774: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29775: LD_ADDR_VAR 0 6
29779: PUSH
29780: LD_VAR 0 4
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PPUSH
29789: LD_INT 1
29791: PPUSH
29792: CALL_OW 12
29796: PLUS
29797: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29798: LD_ADDR_VAR 0 7
29802: PUSH
29803: LD_VAR 0 5
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PPUSH
29812: LD_INT 1
29814: PPUSH
29815: CALL_OW 12
29819: PLUS
29820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29821: LD_VAR 0 6
29825: PPUSH
29826: LD_VAR 0 7
29830: PPUSH
29831: CALL_OW 488
29835: NOT
29836: IFFALSE 29858
// begin _x := x ;
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: LD_VAR 0 4
29847: ST_TO_ADDR
// _y := y ;
29848: LD_ADDR_VAR 0 7
29852: PUSH
29853: LD_VAR 0 5
29857: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29858: LD_ADDR_VAR 0 3
29862: PUSH
29863: LD_INT 1
29865: PPUSH
29866: LD_VAR 0 14
29870: PPUSH
29871: CALL_OW 12
29875: ST_TO_ADDR
// case i of 1 :
29876: LD_VAR 0 3
29880: PUSH
29881: LD_INT 1
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29906
29889: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29890: LD_VAR 0 1
29894: PPUSH
29895: LD_VAR 0 10
29899: PPUSH
29900: CALL_OW 115
29904: GO 29967
29906: LD_INT 2
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29936
29914: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29915: LD_VAR 0 1
29919: PPUSH
29920: LD_VAR 0 6
29924: PPUSH
29925: LD_VAR 0 7
29929: PPUSH
29930: CALL_OW 153
29934: GO 29967
29936: LD_INT 3
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29966
29944: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29945: LD_VAR 0 1
29949: PPUSH
29950: LD_VAR 0 6
29954: PPUSH
29955: LD_VAR 0 7
29959: PPUSH
29960: CALL_OW 154
29964: GO 29967
29966: POP
// end ;
29967: LD_VAR 0 2
29971: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29972: LD_INT 0
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
// if not unit or not building then
29980: LD_VAR 0 1
29984: NOT
29985: PUSH
29986: LD_VAR 0 2
29990: NOT
29991: OR
29992: IFFALSE 29996
// exit ;
29994: GO 30154
// x := GetX ( building ) ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: CALL_OW 250
30010: ST_TO_ADDR
// y := GetY ( building ) ;
30011: LD_ADDR_VAR 0 6
30015: PUSH
30016: LD_VAR 0 2
30020: PPUSH
30021: CALL_OW 251
30025: ST_TO_ADDR
// for i = 0 to 5 do
30026: LD_ADDR_VAR 0 4
30030: PUSH
30031: DOUBLE
30032: LD_INT 0
30034: DEC
30035: ST_TO_ADDR
30036: LD_INT 5
30038: PUSH
30039: FOR_TO
30040: IFFALSE 30152
// begin _x := ShiftX ( x , i , 3 ) ;
30042: LD_ADDR_VAR 0 7
30046: PUSH
30047: LD_VAR 0 5
30051: PPUSH
30052: LD_VAR 0 4
30056: PPUSH
30057: LD_INT 3
30059: PPUSH
30060: CALL_OW 272
30064: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30065: LD_ADDR_VAR 0 8
30069: PUSH
30070: LD_VAR 0 6
30074: PPUSH
30075: LD_VAR 0 4
30079: PPUSH
30080: LD_INT 3
30082: PPUSH
30083: CALL_OW 273
30087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30088: LD_VAR 0 7
30092: PPUSH
30093: LD_VAR 0 8
30097: PPUSH
30098: CALL_OW 488
30102: NOT
30103: IFFALSE 30107
// continue ;
30105: GO 30039
// if HexInfo ( _x , _y ) = 0 then
30107: LD_VAR 0 7
30111: PPUSH
30112: LD_VAR 0 8
30116: PPUSH
30117: CALL_OW 428
30121: PUSH
30122: LD_INT 0
30124: EQUAL
30125: IFFALSE 30150
// begin ComMoveXY ( unit , _x , _y ) ;
30127: LD_VAR 0 1
30131: PPUSH
30132: LD_VAR 0 7
30136: PPUSH
30137: LD_VAR 0 8
30141: PPUSH
30142: CALL_OW 111
// exit ;
30146: POP
30147: POP
30148: GO 30154
// end ; end ;
30150: GO 30039
30152: POP
30153: POP
// end ;
30154: LD_VAR 0 3
30158: RET
// export function ScanBase ( side , base_area ) ; begin
30159: LD_INT 0
30161: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30162: LD_ADDR_VAR 0 3
30166: PUSH
30167: LD_VAR 0 2
30171: PPUSH
30172: LD_INT 81
30174: PUSH
30175: LD_VAR 0 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 70
30188: ST_TO_ADDR
// end ;
30189: LD_VAR 0 3
30193: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30194: LD_INT 0
30196: PPUSH
30197: PPUSH
30198: PPUSH
30199: PPUSH
// result := false ;
30200: LD_ADDR_VAR 0 2
30204: PUSH
30205: LD_INT 0
30207: ST_TO_ADDR
// side := GetSide ( unit ) ;
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 255
30222: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30223: LD_ADDR_VAR 0 4
30227: PUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: CALL_OW 248
30237: ST_TO_ADDR
// case nat of 1 :
30238: LD_VAR 0 4
30242: PUSH
30243: LD_INT 1
30245: DOUBLE
30246: EQUAL
30247: IFTRUE 30251
30249: GO 30262
30251: POP
// tech := tech_lassight ; 2 :
30252: LD_ADDR_VAR 0 5
30256: PUSH
30257: LD_INT 12
30259: ST_TO_ADDR
30260: GO 30301
30262: LD_INT 2
30264: DOUBLE
30265: EQUAL
30266: IFTRUE 30270
30268: GO 30281
30270: POP
// tech := tech_mortar ; 3 :
30271: LD_ADDR_VAR 0 5
30275: PUSH
30276: LD_INT 41
30278: ST_TO_ADDR
30279: GO 30301
30281: LD_INT 3
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30300
30289: POP
// tech := tech_bazooka ; end ;
30290: LD_ADDR_VAR 0 5
30294: PUSH
30295: LD_INT 44
30297: ST_TO_ADDR
30298: GO 30301
30300: POP
// if Researched ( side , tech ) then
30301: LD_VAR 0 3
30305: PPUSH
30306: LD_VAR 0 5
30310: PPUSH
30311: CALL_OW 325
30315: IFFALSE 30342
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30317: LD_ADDR_VAR 0 2
30321: PUSH
30322: LD_INT 5
30324: PUSH
30325: LD_INT 8
30327: PUSH
30328: LD_INT 9
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: PUSH
30336: LD_VAR 0 4
30340: ARRAY
30341: ST_TO_ADDR
// end ;
30342: LD_VAR 0 2
30346: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30347: LD_INT 0
30349: PPUSH
30350: PPUSH
30351: PPUSH
// if not mines then
30352: LD_VAR 0 2
30356: NOT
30357: IFFALSE 30361
// exit ;
30359: GO 30505
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_INT 81
30368: PUSH
30369: LD_VAR 0 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 21
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 69
30403: ST_TO_ADDR
// for i in mines do
30404: LD_ADDR_VAR 0 4
30408: PUSH
30409: LD_VAR 0 2
30413: PUSH
30414: FOR_IN
30415: IFFALSE 30503
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30417: LD_VAR 0 4
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: LD_VAR 0 4
30430: PUSH
30431: LD_INT 2
30433: ARRAY
30434: PPUSH
30435: CALL_OW 458
30439: NOT
30440: IFFALSE 30444
// continue ;
30442: GO 30414
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30444: LD_VAR 0 4
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 4
30457: PUSH
30458: LD_INT 2
30460: ARRAY
30461: PPUSH
30462: CALL_OW 428
30466: PUSH
30467: LD_VAR 0 5
30471: IN
30472: IFFALSE 30501
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30474: LD_VAR 0 4
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PPUSH
30483: LD_VAR 0 4
30487: PUSH
30488: LD_INT 2
30490: ARRAY
30491: PPUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: CALL_OW 456
// end ;
30501: GO 30414
30503: POP
30504: POP
// end ;
30505: LD_VAR 0 3
30509: RET
// export function Count ( array ) ; var i ; begin
30510: LD_INT 0
30512: PPUSH
30513: PPUSH
// result := 0 ;
30514: LD_ADDR_VAR 0 2
30518: PUSH
30519: LD_INT 0
30521: ST_TO_ADDR
// for i in array do
30522: LD_ADDR_VAR 0 3
30526: PUSH
30527: LD_VAR 0 1
30531: PUSH
30532: FOR_IN
30533: IFFALSE 30557
// if i then
30535: LD_VAR 0 3
30539: IFFALSE 30555
// result := result + 1 ;
30541: LD_ADDR_VAR 0 2
30545: PUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_INT 1
30553: PLUS
30554: ST_TO_ADDR
30555: GO 30532
30557: POP
30558: POP
// end ;
30559: LD_VAR 0 2
30563: RET
// export function IsEmpty ( building ) ; begin
30564: LD_INT 0
30566: PPUSH
// if not building then
30567: LD_VAR 0 1
30571: NOT
30572: IFFALSE 30576
// exit ;
30574: GO 30619
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30576: LD_ADDR_VAR 0 2
30580: PUSH
30581: LD_VAR 0 1
30585: PUSH
30586: LD_INT 22
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 255
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 58
30605: PUSH
30606: EMPTY
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PPUSH
30613: CALL_OW 69
30617: IN
30618: ST_TO_ADDR
// end ;
30619: LD_VAR 0 2
30623: RET
// export function IsNotFull ( building ) ; begin
30624: LD_INT 0
30626: PPUSH
// if not building then
30627: LD_VAR 0 1
30631: NOT
30632: IFFALSE 30636
// exit ;
30634: GO 30655
// result := UnitsInside ( building ) < 6 ;
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: LD_VAR 0 1
30645: PPUSH
30646: CALL_OW 313
30650: PUSH
30651: LD_INT 6
30653: LESS
30654: ST_TO_ADDR
// end ;
30655: LD_VAR 0 2
30659: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30660: LD_INT 0
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
// tmp := [ ] ;
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: EMPTY
30672: ST_TO_ADDR
// list := [ ] ;
30673: LD_ADDR_VAR 0 5
30677: PUSH
30678: EMPTY
30679: ST_TO_ADDR
// for i = 16 to 25 do
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: DOUBLE
30686: LD_INT 16
30688: DEC
30689: ST_TO_ADDR
30690: LD_INT 25
30692: PUSH
30693: FOR_TO
30694: IFFALSE 30767
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30696: LD_ADDR_VAR 0 3
30700: PUSH
30701: LD_VAR 0 3
30705: PUSH
30706: LD_INT 22
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 255
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 91
30725: PUSH
30726: LD_VAR 0 1
30730: PUSH
30731: LD_INT 6
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 30
30741: PUSH
30742: LD_VAR 0 4
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: PPUSH
30759: CALL_OW 69
30763: ADD
30764: ST_TO_ADDR
30765: GO 30693
30767: POP
30768: POP
// for i = 1 to tmp do
30769: LD_ADDR_VAR 0 4
30773: PUSH
30774: DOUBLE
30775: LD_INT 1
30777: DEC
30778: ST_TO_ADDR
30779: LD_VAR 0 3
30783: PUSH
30784: FOR_TO
30785: IFFALSE 30873
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30787: LD_ADDR_VAR 0 5
30791: PUSH
30792: LD_VAR 0 5
30796: PUSH
30797: LD_VAR 0 3
30801: PUSH
30802: LD_VAR 0 4
30806: ARRAY
30807: PPUSH
30808: CALL_OW 266
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: LD_VAR 0 4
30822: ARRAY
30823: PPUSH
30824: CALL_OW 250
30828: PUSH
30829: LD_VAR 0 3
30833: PUSH
30834: LD_VAR 0 4
30838: ARRAY
30839: PPUSH
30840: CALL_OW 251
30844: PUSH
30845: LD_VAR 0 3
30849: PUSH
30850: LD_VAR 0 4
30854: ARRAY
30855: PPUSH
30856: CALL_OW 254
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: PUSH
30867: EMPTY
30868: LIST
30869: ADD
30870: ST_TO_ADDR
30871: GO 30784
30873: POP
30874: POP
// result := list ;
30875: LD_ADDR_VAR 0 2
30879: PUSH
30880: LD_VAR 0 5
30884: ST_TO_ADDR
// end ;
30885: LD_VAR 0 2
30889: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30890: LD_INT 0
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
// if not factory then
30899: LD_VAR 0 1
30903: NOT
30904: IFFALSE 30908
// exit ;
30906: GO 31501
// if control = control_apeman then
30908: LD_VAR 0 4
30912: PUSH
30913: LD_INT 5
30915: EQUAL
30916: IFFALSE 31025
// begin tmp := UnitsInside ( factory ) ;
30918: LD_ADDR_VAR 0 8
30922: PUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 313
30932: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30933: LD_VAR 0 8
30937: PPUSH
30938: LD_INT 25
30940: PUSH
30941: LD_INT 12
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 72
30952: NOT
30953: IFFALSE 30963
// control := control_manual ;
30955: LD_ADDR_VAR 0 4
30959: PUSH
30960: LD_INT 1
30962: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30963: LD_ADDR_VAR 0 8
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL 30660 0 1
30977: ST_TO_ADDR
// if tmp then
30978: LD_VAR 0 8
30982: IFFALSE 31025
// begin for i in tmp do
30984: LD_ADDR_VAR 0 7
30988: PUSH
30989: LD_VAR 0 8
30993: PUSH
30994: FOR_IN
30995: IFFALSE 31023
// if i [ 1 ] = b_ext_radio then
30997: LD_VAR 0 7
31001: PUSH
31002: LD_INT 1
31004: ARRAY
31005: PUSH
31006: LD_INT 22
31008: EQUAL
31009: IFFALSE 31021
// begin control := control_remote ;
31011: LD_ADDR_VAR 0 4
31015: PUSH
31016: LD_INT 2
31018: ST_TO_ADDR
// break ;
31019: GO 31023
// end ;
31021: GO 30994
31023: POP
31024: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31025: LD_VAR 0 1
31029: PPUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: LD_VAR 0 3
31039: PPUSH
31040: LD_VAR 0 4
31044: PPUSH
31045: LD_VAR 0 5
31049: PPUSH
31050: CALL_OW 448
31054: IFFALSE 31089
// begin result := [ chassis , engine , control , weapon ] ;
31056: LD_ADDR_VAR 0 6
31060: PUSH
31061: LD_VAR 0 2
31065: PUSH
31066: LD_VAR 0 3
31070: PUSH
31071: LD_VAR 0 4
31075: PUSH
31076: LD_VAR 0 5
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// exit ;
31087: GO 31501
// end ; _chassis := AvailableChassisList ( factory ) ;
31089: LD_ADDR_VAR 0 9
31093: PUSH
31094: LD_VAR 0 1
31098: PPUSH
31099: CALL_OW 475
31103: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31104: LD_ADDR_VAR 0 11
31108: PUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 476
31118: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31119: LD_ADDR_VAR 0 12
31123: PUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 477
31133: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31134: LD_ADDR_VAR 0 10
31138: PUSH
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 478
31148: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31149: LD_VAR 0 9
31153: NOT
31154: PUSH
31155: LD_VAR 0 11
31159: NOT
31160: OR
31161: PUSH
31162: LD_VAR 0 12
31166: NOT
31167: OR
31168: PUSH
31169: LD_VAR 0 10
31173: NOT
31174: OR
31175: IFFALSE 31210
// begin result := [ chassis , engine , control , weapon ] ;
31177: LD_ADDR_VAR 0 6
31181: PUSH
31182: LD_VAR 0 2
31186: PUSH
31187: LD_VAR 0 3
31191: PUSH
31192: LD_VAR 0 4
31196: PUSH
31197: LD_VAR 0 5
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// exit ;
31208: GO 31501
// end ; if not chassis in _chassis then
31210: LD_VAR 0 2
31214: PUSH
31215: LD_VAR 0 9
31219: IN
31220: NOT
31221: IFFALSE 31247
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31223: LD_ADDR_VAR 0 2
31227: PUSH
31228: LD_VAR 0 9
31232: PUSH
31233: LD_INT 1
31235: PPUSH
31236: LD_VAR 0 9
31240: PPUSH
31241: CALL_OW 12
31245: ARRAY
31246: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31247: LD_VAR 0 2
31251: PPUSH
31252: LD_VAR 0 3
31256: PPUSH
31257: CALL 31506 0 2
31261: NOT
31262: IFFALSE 31321
// repeat engine := _engine [ 1 ] ;
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_VAR 0 11
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31278: LD_ADDR_VAR 0 11
31282: PUSH
31283: LD_VAR 0 11
31287: PPUSH
31288: LD_INT 1
31290: PPUSH
31291: CALL_OW 3
31295: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31296: LD_VAR 0 2
31300: PPUSH
31301: LD_VAR 0 3
31305: PPUSH
31306: CALL 31506 0 2
31310: PUSH
31311: LD_VAR 0 11
31315: PUSH
31316: EMPTY
31317: EQUAL
31318: OR
31319: IFFALSE 31264
// if not control in _control then
31321: LD_VAR 0 4
31325: PUSH
31326: LD_VAR 0 12
31330: IN
31331: NOT
31332: IFFALSE 31358
// control := _control [ rand ( 1 , _control ) ] ;
31334: LD_ADDR_VAR 0 4
31338: PUSH
31339: LD_VAR 0 12
31343: PUSH
31344: LD_INT 1
31346: PPUSH
31347: LD_VAR 0 12
31351: PPUSH
31352: CALL_OW 12
31356: ARRAY
31357: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31358: LD_VAR 0 2
31362: PPUSH
31363: LD_VAR 0 5
31367: PPUSH
31368: CALL 31726 0 2
31372: NOT
31373: IFFALSE 31432
// repeat weapon := _weapon [ 1 ] ;
31375: LD_ADDR_VAR 0 5
31379: PUSH
31380: LD_VAR 0 10
31384: PUSH
31385: LD_INT 1
31387: ARRAY
31388: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31389: LD_ADDR_VAR 0 10
31393: PUSH
31394: LD_VAR 0 10
31398: PPUSH
31399: LD_INT 1
31401: PPUSH
31402: CALL_OW 3
31406: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31407: LD_VAR 0 2
31411: PPUSH
31412: LD_VAR 0 5
31416: PPUSH
31417: CALL 31726 0 2
31421: PUSH
31422: LD_VAR 0 10
31426: PUSH
31427: EMPTY
31428: EQUAL
31429: OR
31430: IFFALSE 31375
// result := [ ] ;
31432: LD_ADDR_VAR 0 6
31436: PUSH
31437: EMPTY
31438: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31439: LD_VAR 0 1
31443: PPUSH
31444: LD_VAR 0 2
31448: PPUSH
31449: LD_VAR 0 3
31453: PPUSH
31454: LD_VAR 0 4
31458: PPUSH
31459: LD_VAR 0 5
31463: PPUSH
31464: CALL_OW 448
31468: IFFALSE 31501
// result := [ chassis , engine , control , weapon ] ;
31470: LD_ADDR_VAR 0 6
31474: PUSH
31475: LD_VAR 0 2
31479: PUSH
31480: LD_VAR 0 3
31484: PUSH
31485: LD_VAR 0 4
31489: PUSH
31490: LD_VAR 0 5
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// end ;
31501: LD_VAR 0 6
31505: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31506: LD_INT 0
31508: PPUSH
// if not chassis or not engine then
31509: LD_VAR 0 1
31513: NOT
31514: PUSH
31515: LD_VAR 0 2
31519: NOT
31520: OR
31521: IFFALSE 31525
// exit ;
31523: GO 31721
// case engine of engine_solar :
31525: LD_VAR 0 2
31529: PUSH
31530: LD_INT 2
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 31576
31538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31539: LD_ADDR_VAR 0 3
31543: PUSH
31544: LD_INT 11
31546: PUSH
31547: LD_INT 12
31549: PUSH
31550: LD_INT 13
31552: PUSH
31553: LD_INT 14
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
31574: GO 31705
31576: LD_INT 1
31578: DOUBLE
31579: EQUAL
31580: IFTRUE 31584
31582: GO 31646
31584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 11
31592: PUSH
31593: LD_INT 12
31595: PUSH
31596: LD_INT 13
31598: PUSH
31599: LD_INT 14
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 4
31613: PUSH
31614: LD_INT 5
31616: PUSH
31617: LD_INT 21
31619: PUSH
31620: LD_INT 23
31622: PUSH
31623: LD_INT 22
31625: PUSH
31626: LD_INT 24
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
31644: GO 31705
31646: LD_INT 3
31648: DOUBLE
31649: EQUAL
31650: IFTRUE 31654
31652: GO 31704
31654: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31655: LD_ADDR_VAR 0 3
31659: PUSH
31660: LD_INT 13
31662: PUSH
31663: LD_INT 14
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: LD_INT 4
31674: PUSH
31675: LD_INT 5
31677: PUSH
31678: LD_INT 21
31680: PUSH
31681: LD_INT 22
31683: PUSH
31684: LD_INT 23
31686: PUSH
31687: LD_INT 24
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
31702: GO 31705
31704: POP
// result := ( chassis in result ) ;
31705: LD_ADDR_VAR 0 3
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: LD_VAR 0 3
31719: IN
31720: ST_TO_ADDR
// end ;
31721: LD_VAR 0 3
31725: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31726: LD_INT 0
31728: PPUSH
// if not chassis or not weapon then
31729: LD_VAR 0 1
31733: NOT
31734: PUSH
31735: LD_VAR 0 2
31739: NOT
31740: OR
31741: IFFALSE 31745
// exit ;
31743: GO 32771
// case weapon of us_machine_gun :
31745: LD_VAR 0 2
31749: PUSH
31750: LD_INT 2
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31758
31756: GO 31788
31758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 4
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
31786: GO 32755
31788: LD_INT 3
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 31826
31796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
31824: GO 32755
31826: LD_INT 11
31828: DOUBLE
31829: EQUAL
31830: IFTRUE 31834
31832: GO 31864
31834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: LD_INT 4
31851: PUSH
31852: LD_INT 5
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
31862: GO 32755
31864: LD_INT 4
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31898
31872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 4
31886: PUSH
31887: LD_INT 5
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
31896: GO 32755
31898: LD_INT 5
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31932
31906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 4
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32755
31932: LD_INT 9
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31966
31940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32755
31966: LD_INT 7
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 32000
31974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 4
31988: PUSH
31989: LD_INT 5
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
31998: GO 32755
32000: LD_INT 12
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32034
32008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32009: LD_ADDR_VAR 0 3
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: LD_INT 5
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32755
32034: LD_INT 13
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32068
32042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: ST_TO_ADDR
32066: GO 32755
32068: LD_INT 14
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32094
32076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_INT 4
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 32755
32094: LD_INT 6
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32120
32102: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 32755
32120: LD_INT 10
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32146
32128: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: LD_INT 4
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 32755
32146: LD_INT 22
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32180
32154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 11
32162: PUSH
32163: LD_INT 12
32165: PUSH
32166: LD_INT 13
32168: PUSH
32169: LD_INT 14
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
32178: GO 32755
32180: LD_INT 23
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32214
32188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: LD_INT 11
32196: PUSH
32197: LD_INT 12
32199: PUSH
32200: LD_INT 13
32202: PUSH
32203: LD_INT 14
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
32212: GO 32755
32214: LD_INT 24
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32248
32222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 12
32233: PUSH
32234: LD_INT 13
32236: PUSH
32237: LD_INT 14
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: ST_TO_ADDR
32246: GO 32755
32248: LD_INT 30
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32282
32256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32257: LD_ADDR_VAR 0 3
32261: PUSH
32262: LD_INT 11
32264: PUSH
32265: LD_INT 12
32267: PUSH
32268: LD_INT 13
32270: PUSH
32271: LD_INT 14
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
32280: GO 32755
32282: LD_INT 25
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32290
32288: GO 32308
32290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32291: LD_ADDR_VAR 0 3
32295: PUSH
32296: LD_INT 13
32298: PUSH
32299: LD_INT 14
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: ST_TO_ADDR
32306: GO 32755
32308: LD_INT 27
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32334
32316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 13
32324: PUSH
32325: LD_INT 14
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: ST_TO_ADDR
32332: GO 32755
32334: LD_INT 28
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32360
32342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_INT 13
32350: PUSH
32351: LD_INT 14
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 32755
32360: LD_INT 29
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32386
32368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 13
32376: PUSH
32377: LD_INT 14
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: ST_TO_ADDR
32384: GO 32755
32386: LD_INT 31
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32412
32394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_INT 13
32402: PUSH
32403: LD_INT 14
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 32755
32412: LD_INT 26
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32438
32420: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_INT 13
32428: PUSH
32429: LD_INT 14
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: ST_TO_ADDR
32436: GO 32755
32438: LD_INT 42
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32472
32446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 21
32454: PUSH
32455: LD_INT 22
32457: PUSH
32458: LD_INT 23
32460: PUSH
32461: LD_INT 24
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
32470: GO 32755
32472: LD_INT 43
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32506
32480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_INT 21
32488: PUSH
32489: LD_INT 22
32491: PUSH
32492: LD_INT 23
32494: PUSH
32495: LD_INT 24
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
32504: GO 32755
32506: LD_INT 44
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32514
32512: GO 32540
32514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32515: LD_ADDR_VAR 0 3
32519: PUSH
32520: LD_INT 21
32522: PUSH
32523: LD_INT 22
32525: PUSH
32526: LD_INT 23
32528: PUSH
32529: LD_INT 24
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
32538: GO 32755
32540: LD_INT 45
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32548
32546: GO 32574
32548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32549: LD_ADDR_VAR 0 3
32553: PUSH
32554: LD_INT 21
32556: PUSH
32557: LD_INT 22
32559: PUSH
32560: LD_INT 23
32562: PUSH
32563: LD_INT 24
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
32572: GO 32755
32574: LD_INT 49
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32608
32582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_INT 21
32590: PUSH
32591: LD_INT 22
32593: PUSH
32594: LD_INT 23
32596: PUSH
32597: LD_INT 24
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
32606: GO 32755
32608: LD_INT 51
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32642
32616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32617: LD_ADDR_VAR 0 3
32621: PUSH
32622: LD_INT 21
32624: PUSH
32625: LD_INT 22
32627: PUSH
32628: LD_INT 23
32630: PUSH
32631: LD_INT 24
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
32640: GO 32755
32642: LD_INT 52
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32676
32650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32651: LD_ADDR_VAR 0 3
32655: PUSH
32656: LD_INT 21
32658: PUSH
32659: LD_INT 22
32661: PUSH
32662: LD_INT 23
32664: PUSH
32665: LD_INT 24
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
32674: GO 32755
32676: LD_INT 53
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32702
32684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_INT 23
32692: PUSH
32693: LD_INT 24
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: ST_TO_ADDR
32700: GO 32755
32702: LD_INT 46
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32728
32710: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 23
32718: PUSH
32719: LD_INT 24
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: ST_TO_ADDR
32726: GO 32755
32728: LD_INT 47
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32754
32736: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 23
32744: PUSH
32745: LD_INT 24
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: ST_TO_ADDR
32752: GO 32755
32754: POP
// result := ( chassis in result ) ;
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_VAR 0 1
32764: PUSH
32765: LD_VAR 0 3
32769: IN
32770: ST_TO_ADDR
// end ;
32771: LD_VAR 0 3
32775: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32776: LD_INT 0
32778: PPUSH
32779: PPUSH
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
// result := array ;
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_VAR 0 1
32794: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32795: LD_VAR 0 1
32799: NOT
32800: PUSH
32801: LD_VAR 0 2
32805: NOT
32806: OR
32807: PUSH
32808: LD_VAR 0 3
32812: NOT
32813: OR
32814: PUSH
32815: LD_VAR 0 2
32819: PUSH
32820: LD_VAR 0 1
32824: GREATER
32825: OR
32826: PUSH
32827: LD_VAR 0 3
32831: PUSH
32832: LD_VAR 0 1
32836: GREATER
32837: OR
32838: IFFALSE 32842
// exit ;
32840: GO 33138
// if direction then
32842: LD_VAR 0 4
32846: IFFALSE 32910
// begin d := 1 ;
32848: LD_ADDR_VAR 0 9
32852: PUSH
32853: LD_INT 1
32855: ST_TO_ADDR
// if i_from > i_to then
32856: LD_VAR 0 2
32860: PUSH
32861: LD_VAR 0 3
32865: GREATER
32866: IFFALSE 32892
// length := ( array - i_from ) + i_to else
32868: LD_ADDR_VAR 0 11
32872: PUSH
32873: LD_VAR 0 1
32877: PUSH
32878: LD_VAR 0 2
32882: MINUS
32883: PUSH
32884: LD_VAR 0 3
32888: PLUS
32889: ST_TO_ADDR
32890: GO 32908
// length := i_to - i_from ;
32892: LD_ADDR_VAR 0 11
32896: PUSH
32897: LD_VAR 0 3
32901: PUSH
32902: LD_VAR 0 2
32906: MINUS
32907: ST_TO_ADDR
// end else
32908: GO 32971
// begin d := - 1 ;
32910: LD_ADDR_VAR 0 9
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: ST_TO_ADDR
// if i_from > i_to then
32919: LD_VAR 0 2
32923: PUSH
32924: LD_VAR 0 3
32928: GREATER
32929: IFFALSE 32949
// length := i_from - i_to else
32931: LD_ADDR_VAR 0 11
32935: PUSH
32936: LD_VAR 0 2
32940: PUSH
32941: LD_VAR 0 3
32945: MINUS
32946: ST_TO_ADDR
32947: GO 32971
// length := ( array - i_to ) + i_from ;
32949: LD_ADDR_VAR 0 11
32953: PUSH
32954: LD_VAR 0 1
32958: PUSH
32959: LD_VAR 0 3
32963: MINUS
32964: PUSH
32965: LD_VAR 0 2
32969: PLUS
32970: ST_TO_ADDR
// end ; if not length then
32971: LD_VAR 0 11
32975: NOT
32976: IFFALSE 32980
// exit ;
32978: GO 33138
// tmp := array ;
32980: LD_ADDR_VAR 0 10
32984: PUSH
32985: LD_VAR 0 1
32989: ST_TO_ADDR
// for i = 1 to length do
32990: LD_ADDR_VAR 0 6
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_VAR 0 11
33004: PUSH
33005: FOR_TO
33006: IFFALSE 33126
// begin for j = 1 to array do
33008: LD_ADDR_VAR 0 7
33012: PUSH
33013: DOUBLE
33014: LD_INT 1
33016: DEC
33017: ST_TO_ADDR
33018: LD_VAR 0 1
33022: PUSH
33023: FOR_TO
33024: IFFALSE 33112
// begin k := j + d ;
33026: LD_ADDR_VAR 0 8
33030: PUSH
33031: LD_VAR 0 7
33035: PUSH
33036: LD_VAR 0 9
33040: PLUS
33041: ST_TO_ADDR
// if k > array then
33042: LD_VAR 0 8
33046: PUSH
33047: LD_VAR 0 1
33051: GREATER
33052: IFFALSE 33062
// k := 1 ;
33054: LD_ADDR_VAR 0 8
33058: PUSH
33059: LD_INT 1
33061: ST_TO_ADDR
// if not k then
33062: LD_VAR 0 8
33066: NOT
33067: IFFALSE 33079
// k := array ;
33069: LD_ADDR_VAR 0 8
33073: PUSH
33074: LD_VAR 0 1
33078: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33079: LD_ADDR_VAR 0 10
33083: PUSH
33084: LD_VAR 0 10
33088: PPUSH
33089: LD_VAR 0 8
33093: PPUSH
33094: LD_VAR 0 1
33098: PUSH
33099: LD_VAR 0 7
33103: ARRAY
33104: PPUSH
33105: CALL_OW 1
33109: ST_TO_ADDR
// end ;
33110: GO 33023
33112: POP
33113: POP
// array := tmp ;
33114: LD_ADDR_VAR 0 1
33118: PUSH
33119: LD_VAR 0 10
33123: ST_TO_ADDR
// end ;
33124: GO 33005
33126: POP
33127: POP
// result := array ;
33128: LD_ADDR_VAR 0 5
33132: PUSH
33133: LD_VAR 0 1
33137: ST_TO_ADDR
// end ;
33138: LD_VAR 0 5
33142: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
// result := 0 ;
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_INT 0
33154: ST_TO_ADDR
// if not array or not value in array then
33155: LD_VAR 0 1
33159: NOT
33160: PUSH
33161: LD_VAR 0 2
33165: PUSH
33166: LD_VAR 0 1
33170: IN
33171: NOT
33172: OR
33173: IFFALSE 33177
// exit ;
33175: GO 33231
// for i = 1 to array do
33177: LD_ADDR_VAR 0 4
33181: PUSH
33182: DOUBLE
33183: LD_INT 1
33185: DEC
33186: ST_TO_ADDR
33187: LD_VAR 0 1
33191: PUSH
33192: FOR_TO
33193: IFFALSE 33229
// if value = array [ i ] then
33195: LD_VAR 0 2
33199: PUSH
33200: LD_VAR 0 1
33204: PUSH
33205: LD_VAR 0 4
33209: ARRAY
33210: EQUAL
33211: IFFALSE 33227
// begin result := i ;
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_VAR 0 4
33222: ST_TO_ADDR
// exit ;
33223: POP
33224: POP
33225: GO 33231
// end ;
33227: GO 33192
33229: POP
33230: POP
// end ;
33231: LD_VAR 0 3
33235: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33236: LD_INT 0
33238: PPUSH
// vc_chassis := chassis ;
33239: LD_ADDR_OWVAR 37
33243: PUSH
33244: LD_VAR 0 1
33248: ST_TO_ADDR
// vc_engine := engine ;
33249: LD_ADDR_OWVAR 39
33253: PUSH
33254: LD_VAR 0 2
33258: ST_TO_ADDR
// vc_control := control ;
33259: LD_ADDR_OWVAR 38
33263: PUSH
33264: LD_VAR 0 3
33268: ST_TO_ADDR
// vc_weapon := weapon ;
33269: LD_ADDR_OWVAR 40
33273: PUSH
33274: LD_VAR 0 4
33278: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33279: LD_ADDR_OWVAR 41
33283: PUSH
33284: LD_VAR 0 5
33288: ST_TO_ADDR
// end ;
33289: LD_VAR 0 6
33293: RET
// export function WantPlant ( unit ) ; var task ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
// result := false ;
33298: LD_ADDR_VAR 0 2
33302: PUSH
33303: LD_INT 0
33305: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33306: LD_ADDR_VAR 0 3
33310: PUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 437
33320: ST_TO_ADDR
// if task then
33321: LD_VAR 0 3
33325: IFFALSE 33353
// if task [ 1 ] [ 1 ] = p then
33327: LD_VAR 0 3
33331: PUSH
33332: LD_INT 1
33334: ARRAY
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PUSH
33340: LD_STRING p
33342: EQUAL
33343: IFFALSE 33353
// result := true ;
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: LD_INT 1
33352: ST_TO_ADDR
// end ;
33353: LD_VAR 0 2
33357: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
// if pos < 1 then
33364: LD_VAR 0 2
33368: PUSH
33369: LD_INT 1
33371: LESS
33372: IFFALSE 33376
// exit ;
33374: GO 33679
// if pos = 1 then
33376: LD_VAR 0 2
33380: PUSH
33381: LD_INT 1
33383: EQUAL
33384: IFFALSE 33417
// result := Replace ( arr , pos [ 1 ] , value ) else
33386: LD_ADDR_VAR 0 4
33390: PUSH
33391: LD_VAR 0 1
33395: PPUSH
33396: LD_VAR 0 2
33400: PUSH
33401: LD_INT 1
33403: ARRAY
33404: PPUSH
33405: LD_VAR 0 3
33409: PPUSH
33410: CALL_OW 1
33414: ST_TO_ADDR
33415: GO 33679
// begin tmp := arr ;
33417: LD_ADDR_VAR 0 6
33421: PUSH
33422: LD_VAR 0 1
33426: ST_TO_ADDR
// s_arr := [ tmp ] ;
33427: LD_ADDR_VAR 0 7
33431: PUSH
33432: LD_VAR 0 6
33436: PUSH
33437: EMPTY
33438: LIST
33439: ST_TO_ADDR
// for i = 1 to pos - 1 do
33440: LD_ADDR_VAR 0 5
33444: PUSH
33445: DOUBLE
33446: LD_INT 1
33448: DEC
33449: ST_TO_ADDR
33450: LD_VAR 0 2
33454: PUSH
33455: LD_INT 1
33457: MINUS
33458: PUSH
33459: FOR_TO
33460: IFFALSE 33505
// begin tmp := tmp [ pos [ i ] ] ;
33462: LD_ADDR_VAR 0 6
33466: PUSH
33467: LD_VAR 0 6
33471: PUSH
33472: LD_VAR 0 2
33476: PUSH
33477: LD_VAR 0 5
33481: ARRAY
33482: ARRAY
33483: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33484: LD_ADDR_VAR 0 7
33488: PUSH
33489: LD_VAR 0 7
33493: PUSH
33494: LD_VAR 0 6
33498: PUSH
33499: EMPTY
33500: LIST
33501: ADD
33502: ST_TO_ADDR
// end ;
33503: GO 33459
33505: POP
33506: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33507: LD_ADDR_VAR 0 6
33511: PUSH
33512: LD_VAR 0 6
33516: PPUSH
33517: LD_VAR 0 2
33521: PUSH
33522: LD_VAR 0 2
33526: ARRAY
33527: PPUSH
33528: LD_VAR 0 3
33532: PPUSH
33533: CALL_OW 1
33537: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33538: LD_ADDR_VAR 0 7
33542: PUSH
33543: LD_VAR 0 7
33547: PPUSH
33548: LD_VAR 0 7
33552: PPUSH
33553: LD_VAR 0 6
33557: PPUSH
33558: CALL_OW 1
33562: ST_TO_ADDR
// for i = s_arr downto 2 do
33563: LD_ADDR_VAR 0 5
33567: PUSH
33568: DOUBLE
33569: LD_VAR 0 7
33573: INC
33574: ST_TO_ADDR
33575: LD_INT 2
33577: PUSH
33578: FOR_DOWNTO
33579: IFFALSE 33663
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33581: LD_ADDR_VAR 0 6
33585: PUSH
33586: LD_VAR 0 7
33590: PUSH
33591: LD_VAR 0 5
33595: PUSH
33596: LD_INT 1
33598: MINUS
33599: ARRAY
33600: PPUSH
33601: LD_VAR 0 2
33605: PUSH
33606: LD_VAR 0 5
33610: PUSH
33611: LD_INT 1
33613: MINUS
33614: ARRAY
33615: PPUSH
33616: LD_VAR 0 7
33620: PUSH
33621: LD_VAR 0 5
33625: ARRAY
33626: PPUSH
33627: CALL_OW 1
33631: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33632: LD_ADDR_VAR 0 7
33636: PUSH
33637: LD_VAR 0 7
33641: PPUSH
33642: LD_VAR 0 5
33646: PUSH
33647: LD_INT 1
33649: MINUS
33650: PPUSH
33651: LD_VAR 0 6
33655: PPUSH
33656: CALL_OW 1
33660: ST_TO_ADDR
// end ;
33661: GO 33578
33663: POP
33664: POP
// result := s_arr [ 1 ] ;
33665: LD_ADDR_VAR 0 4
33669: PUSH
33670: LD_VAR 0 7
33674: PUSH
33675: LD_INT 1
33677: ARRAY
33678: ST_TO_ADDR
// end ; end ;
33679: LD_VAR 0 4
33683: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
// if not list then
33688: LD_VAR 0 1
33692: NOT
33693: IFFALSE 33697
// exit ;
33695: GO 33788
// i := list [ pos1 ] ;
33697: LD_ADDR_VAR 0 5
33701: PUSH
33702: LD_VAR 0 1
33706: PUSH
33707: LD_VAR 0 2
33711: ARRAY
33712: ST_TO_ADDR
// if not i then
33713: LD_VAR 0 5
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33788
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33722: LD_ADDR_VAR 0 1
33726: PUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: LD_VAR 0 2
33736: PPUSH
33737: LD_VAR 0 1
33741: PUSH
33742: LD_VAR 0 3
33746: ARRAY
33747: PPUSH
33748: CALL_OW 1
33752: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33753: LD_ADDR_VAR 0 1
33757: PUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: LD_VAR 0 3
33767: PPUSH
33768: LD_VAR 0 5
33772: PPUSH
33773: CALL_OW 1
33777: ST_TO_ADDR
// result := list ;
33778: LD_ADDR_VAR 0 4
33782: PUSH
33783: LD_VAR 0 1
33787: ST_TO_ADDR
// end ;
33788: LD_VAR 0 4
33792: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33793: LD_INT 0
33795: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33796: LD_ADDR_VAR 0 5
33800: PUSH
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 250
33810: PPUSH
33811: LD_VAR 0 1
33815: PPUSH
33816: CALL_OW 251
33820: PPUSH
33821: LD_VAR 0 2
33825: PPUSH
33826: LD_VAR 0 3
33830: PPUSH
33831: LD_VAR 0 4
33835: PPUSH
33836: CALL 33846 0 5
33840: ST_TO_ADDR
// end ;
33841: LD_VAR 0 5
33845: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33846: LD_INT 0
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
// if not list then
33852: LD_VAR 0 3
33856: NOT
33857: IFFALSE 33861
// exit ;
33859: GO 34249
// result := [ ] ;
33861: LD_ADDR_VAR 0 6
33865: PUSH
33866: EMPTY
33867: ST_TO_ADDR
// for i in list do
33868: LD_ADDR_VAR 0 7
33872: PUSH
33873: LD_VAR 0 3
33877: PUSH
33878: FOR_IN
33879: IFFALSE 34081
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33881: LD_ADDR_VAR 0 9
33885: PUSH
33886: LD_VAR 0 7
33890: PPUSH
33891: LD_VAR 0 1
33895: PPUSH
33896: LD_VAR 0 2
33900: PPUSH
33901: CALL_OW 297
33905: ST_TO_ADDR
// if not result then
33906: LD_VAR 0 6
33910: NOT
33911: IFFALSE 33937
// result := [ [ i , tmp ] ] else
33913: LD_ADDR_VAR 0 6
33917: PUSH
33918: LD_VAR 0 7
33922: PUSH
33923: LD_VAR 0 9
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: ST_TO_ADDR
33935: GO 34079
// begin if result [ result ] [ 2 ] < tmp then
33937: LD_VAR 0 6
33941: PUSH
33942: LD_VAR 0 6
33946: ARRAY
33947: PUSH
33948: LD_INT 2
33950: ARRAY
33951: PUSH
33952: LD_VAR 0 9
33956: LESS
33957: IFFALSE 33999
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33959: LD_ADDR_VAR 0 6
33963: PUSH
33964: LD_VAR 0 6
33968: PPUSH
33969: LD_VAR 0 6
33973: PUSH
33974: LD_INT 1
33976: PLUS
33977: PPUSH
33978: LD_VAR 0 7
33982: PUSH
33983: LD_VAR 0 9
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PPUSH
33992: CALL_OW 2
33996: ST_TO_ADDR
33997: GO 34079
// for j = 1 to result do
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: DOUBLE
34005: LD_INT 1
34007: DEC
34008: ST_TO_ADDR
34009: LD_VAR 0 6
34013: PUSH
34014: FOR_TO
34015: IFFALSE 34077
// begin if tmp < result [ j ] [ 2 ] then
34017: LD_VAR 0 9
34021: PUSH
34022: LD_VAR 0 6
34026: PUSH
34027: LD_VAR 0 8
34031: ARRAY
34032: PUSH
34033: LD_INT 2
34035: ARRAY
34036: LESS
34037: IFFALSE 34075
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34039: LD_ADDR_VAR 0 6
34043: PUSH
34044: LD_VAR 0 6
34048: PPUSH
34049: LD_VAR 0 8
34053: PPUSH
34054: LD_VAR 0 7
34058: PUSH
34059: LD_VAR 0 9
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PPUSH
34068: CALL_OW 2
34072: ST_TO_ADDR
// break ;
34073: GO 34077
// end ; end ;
34075: GO 34014
34077: POP
34078: POP
// end ; end ;
34079: GO 33878
34081: POP
34082: POP
// if result and not asc then
34083: LD_VAR 0 6
34087: PUSH
34088: LD_VAR 0 4
34092: NOT
34093: AND
34094: IFFALSE 34169
// begin tmp := result ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_VAR 0 6
34105: ST_TO_ADDR
// for i = tmp downto 1 do
34106: LD_ADDR_VAR 0 7
34110: PUSH
34111: DOUBLE
34112: LD_VAR 0 9
34116: INC
34117: ST_TO_ADDR
34118: LD_INT 1
34120: PUSH
34121: FOR_DOWNTO
34122: IFFALSE 34167
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34124: LD_ADDR_VAR 0 6
34128: PUSH
34129: LD_VAR 0 6
34133: PPUSH
34134: LD_VAR 0 9
34138: PUSH
34139: LD_VAR 0 7
34143: MINUS
34144: PUSH
34145: LD_INT 1
34147: PLUS
34148: PPUSH
34149: LD_VAR 0 9
34153: PUSH
34154: LD_VAR 0 7
34158: ARRAY
34159: PPUSH
34160: CALL_OW 1
34164: ST_TO_ADDR
34165: GO 34121
34167: POP
34168: POP
// end ; tmp := [ ] ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: EMPTY
34175: ST_TO_ADDR
// if mode then
34176: LD_VAR 0 5
34180: IFFALSE 34249
// begin for i = 1 to result do
34182: LD_ADDR_VAR 0 7
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_VAR 0 6
34196: PUSH
34197: FOR_TO
34198: IFFALSE 34237
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34200: LD_ADDR_VAR 0 9
34204: PUSH
34205: LD_VAR 0 9
34209: PPUSH
34210: LD_VAR 0 7
34214: PPUSH
34215: LD_VAR 0 6
34219: PUSH
34220: LD_VAR 0 7
34224: ARRAY
34225: PUSH
34226: LD_INT 1
34228: ARRAY
34229: PPUSH
34230: CALL_OW 1
34234: ST_TO_ADDR
34235: GO 34197
34237: POP
34238: POP
// result := tmp ;
34239: LD_ADDR_VAR 0 6
34243: PUSH
34244: LD_VAR 0 9
34248: ST_TO_ADDR
// end ; end ;
34249: LD_VAR 0 6
34253: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34254: LD_INT 0
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34262: LD_ADDR_VAR 0 5
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
// if not x or not y then
34284: LD_VAR 0 2
34288: NOT
34289: PUSH
34290: LD_VAR 0 3
34294: NOT
34295: OR
34296: IFFALSE 34300
// exit ;
34298: GO 35946
// if not range then
34300: LD_VAR 0 4
34304: NOT
34305: IFFALSE 34315
// range := 10 ;
34307: LD_ADDR_VAR 0 4
34311: PUSH
34312: LD_INT 10
34314: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34315: LD_ADDR_VAR 0 8
34319: PUSH
34320: LD_INT 81
34322: PUSH
34323: LD_VAR 0 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 92
34334: PUSH
34335: LD_VAR 0 2
34339: PUSH
34340: LD_VAR 0 3
34344: PUSH
34345: LD_VAR 0 4
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: LD_INT 21
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PPUSH
34378: CALL_OW 69
34382: ST_TO_ADDR
// if not tmp then
34383: LD_VAR 0 8
34387: NOT
34388: IFFALSE 34392
// exit ;
34390: GO 35946
// for i in tmp do
34392: LD_ADDR_VAR 0 6
34396: PUSH
34397: LD_VAR 0 8
34401: PUSH
34402: FOR_IN
34403: IFFALSE 35921
// begin points := [ 0 , 0 , 0 ] ;
34405: LD_ADDR_VAR 0 9
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
// bpoints := 1 ;
34424: LD_ADDR_VAR 0 10
34428: PUSH
34429: LD_INT 1
34431: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34432: LD_VAR 0 6
34436: PPUSH
34437: CALL_OW 247
34441: PUSH
34442: LD_INT 1
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 35028
34450: POP
// begin if GetClass ( i ) = 1 then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 257
34460: PUSH
34461: LD_INT 1
34463: EQUAL
34464: IFFALSE 34485
// points := [ 10 , 5 , 3 ] ;
34466: LD_ADDR_VAR 0 9
34470: PUSH
34471: LD_INT 10
34473: PUSH
34474: LD_INT 5
34476: PUSH
34477: LD_INT 3
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34485: LD_VAR 0 6
34489: PPUSH
34490: CALL_OW 257
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: IN
34509: IFFALSE 34530
// points := [ 3 , 2 , 1 ] ;
34511: LD_ADDR_VAR 0 9
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34530: LD_VAR 0 6
34534: PPUSH
34535: CALL_OW 257
34539: PUSH
34540: LD_INT 5
34542: EQUAL
34543: IFFALSE 34564
// points := [ 130 , 5 , 2 ] ;
34545: LD_ADDR_VAR 0 9
34549: PUSH
34550: LD_INT 130
34552: PUSH
34553: LD_INT 5
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34564: LD_VAR 0 6
34568: PPUSH
34569: CALL_OW 257
34573: PUSH
34574: LD_INT 8
34576: EQUAL
34577: IFFALSE 34598
// points := [ 35 , 35 , 30 ] ;
34579: LD_ADDR_VAR 0 9
34583: PUSH
34584: LD_INT 35
34586: PUSH
34587: LD_INT 35
34589: PUSH
34590: LD_INT 30
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34598: LD_VAR 0 6
34602: PPUSH
34603: CALL_OW 257
34607: PUSH
34608: LD_INT 9
34610: EQUAL
34611: IFFALSE 34632
// points := [ 20 , 55 , 40 ] ;
34613: LD_ADDR_VAR 0 9
34617: PUSH
34618: LD_INT 20
34620: PUSH
34621: LD_INT 55
34623: PUSH
34624: LD_INT 40
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34632: LD_VAR 0 6
34636: PPUSH
34637: CALL_OW 257
34641: PUSH
34642: LD_INT 12
34644: PUSH
34645: LD_INT 16
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: IN
34652: IFFALSE 34673
// points := [ 5 , 3 , 2 ] ;
34654: LD_ADDR_VAR 0 9
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34673: LD_VAR 0 6
34677: PPUSH
34678: CALL_OW 257
34682: PUSH
34683: LD_INT 17
34685: EQUAL
34686: IFFALSE 34707
// points := [ 100 , 50 , 75 ] ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_INT 100
34695: PUSH
34696: LD_INT 50
34698: PUSH
34699: LD_INT 75
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34707: LD_VAR 0 6
34711: PPUSH
34712: CALL_OW 257
34716: PUSH
34717: LD_INT 15
34719: EQUAL
34720: IFFALSE 34741
// points := [ 10 , 5 , 3 ] ;
34722: LD_ADDR_VAR 0 9
34726: PUSH
34727: LD_INT 10
34729: PUSH
34730: LD_INT 5
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34741: LD_VAR 0 6
34745: PPUSH
34746: CALL_OW 257
34750: PUSH
34751: LD_INT 14
34753: EQUAL
34754: IFFALSE 34775
// points := [ 10 , 0 , 0 ] ;
34756: LD_ADDR_VAR 0 9
34760: PUSH
34761: LD_INT 10
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34775: LD_VAR 0 6
34779: PPUSH
34780: CALL_OW 257
34784: PUSH
34785: LD_INT 11
34787: EQUAL
34788: IFFALSE 34809
// points := [ 30 , 10 , 5 ] ;
34790: LD_ADDR_VAR 0 9
34794: PUSH
34795: LD_INT 30
34797: PUSH
34798: LD_INT 10
34800: PUSH
34801: LD_INT 5
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34809: LD_VAR 0 1
34813: PPUSH
34814: LD_INT 5
34816: PPUSH
34817: CALL_OW 321
34821: PUSH
34822: LD_INT 2
34824: EQUAL
34825: IFFALSE 34842
// bpoints := bpoints * 1.8 ;
34827: LD_ADDR_VAR 0 10
34831: PUSH
34832: LD_VAR 0 10
34836: PUSH
34837: LD_REAL  1.80000000000000E+0000
34840: MUL
34841: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34842: LD_VAR 0 6
34846: PPUSH
34847: CALL_OW 257
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: LD_INT 4
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: IN
34870: PUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: LD_INT 51
34878: PPUSH
34879: CALL_OW 321
34883: PUSH
34884: LD_INT 2
34886: EQUAL
34887: AND
34888: IFFALSE 34905
// bpoints := bpoints * 1.2 ;
34890: LD_ADDR_VAR 0 10
34894: PUSH
34895: LD_VAR 0 10
34899: PUSH
34900: LD_REAL  1.20000000000000E+0000
34903: MUL
34904: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34905: LD_VAR 0 6
34909: PPUSH
34910: CALL_OW 257
34914: PUSH
34915: LD_INT 5
34917: PUSH
34918: LD_INT 7
34920: PUSH
34921: LD_INT 9
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: IN
34929: PUSH
34930: LD_VAR 0 1
34934: PPUSH
34935: LD_INT 52
34937: PPUSH
34938: CALL_OW 321
34942: PUSH
34943: LD_INT 2
34945: EQUAL
34946: AND
34947: IFFALSE 34964
// bpoints := bpoints * 1.5 ;
34949: LD_ADDR_VAR 0 10
34953: PUSH
34954: LD_VAR 0 10
34958: PUSH
34959: LD_REAL  1.50000000000000E+0000
34962: MUL
34963: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_INT 66
34971: PPUSH
34972: CALL_OW 321
34976: PUSH
34977: LD_INT 2
34979: EQUAL
34980: IFFALSE 34997
// bpoints := bpoints * 1.1 ;
34982: LD_ADDR_VAR 0 10
34986: PUSH
34987: LD_VAR 0 10
34991: PUSH
34992: LD_REAL  1.10000000000000E+0000
34995: MUL
34996: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34997: LD_ADDR_VAR 0 10
35001: PUSH
35002: LD_VAR 0 10
35006: PUSH
35007: LD_VAR 0 6
35011: PPUSH
35012: LD_INT 1
35014: PPUSH
35015: CALL_OW 259
35019: PUSH
35020: LD_REAL  1.15000000000000E+0000
35023: MUL
35024: MUL
35025: ST_TO_ADDR
// end ; unit_vehicle :
35026: GO 35850
35028: LD_INT 2
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35838
35036: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35037: LD_VAR 0 6
35041: PPUSH
35042: CALL_OW 264
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 42
35052: PUSH
35053: LD_INT 24
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: IN
35061: IFFALSE 35082
// points := [ 25 , 5 , 3 ] ;
35063: LD_ADDR_VAR 0 9
35067: PUSH
35068: LD_INT 25
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35082: LD_VAR 0 6
35086: PPUSH
35087: CALL_OW 264
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: LD_INT 43
35097: PUSH
35098: LD_INT 25
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: IN
35106: IFFALSE 35127
// points := [ 40 , 15 , 5 ] ;
35108: LD_ADDR_VAR 0 9
35112: PUSH
35113: LD_INT 40
35115: PUSH
35116: LD_INT 15
35118: PUSH
35119: LD_INT 5
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35127: LD_VAR 0 6
35131: PPUSH
35132: CALL_OW 264
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: LD_INT 23
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: IN
35147: IFFALSE 35168
// points := [ 7 , 25 , 8 ] ;
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_INT 7
35156: PUSH
35157: LD_INT 25
35159: PUSH
35160: LD_INT 8
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35168: LD_VAR 0 6
35172: PPUSH
35173: CALL_OW 264
35177: PUSH
35178: LD_INT 5
35180: PUSH
35181: LD_INT 27
35183: PUSH
35184: LD_INT 44
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: IN
35192: IFFALSE 35213
// points := [ 14 , 50 , 16 ] ;
35194: LD_ADDR_VAR 0 9
35198: PUSH
35199: LD_INT 14
35201: PUSH
35202: LD_INT 50
35204: PUSH
35205: LD_INT 16
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35213: LD_VAR 0 6
35217: PPUSH
35218: CALL_OW 264
35222: PUSH
35223: LD_INT 6
35225: PUSH
35226: LD_INT 46
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: IN
35233: IFFALSE 35254
// points := [ 32 , 120 , 70 ] ;
35235: LD_ADDR_VAR 0 9
35239: PUSH
35240: LD_INT 32
35242: PUSH
35243: LD_INT 120
35245: PUSH
35246: LD_INT 70
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35254: LD_VAR 0 6
35258: PPUSH
35259: CALL_OW 264
35263: PUSH
35264: LD_INT 7
35266: PUSH
35267: LD_INT 28
35269: PUSH
35270: LD_INT 45
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: IN
35278: IFFALSE 35299
// points := [ 35 , 20 , 45 ] ;
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: LD_INT 35
35287: PUSH
35288: LD_INT 20
35290: PUSH
35291: LD_INT 45
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35299: LD_VAR 0 6
35303: PPUSH
35304: CALL_OW 264
35308: PUSH
35309: LD_INT 47
35311: PUSH
35312: EMPTY
35313: LIST
35314: IN
35315: IFFALSE 35336
// points := [ 67 , 45 , 75 ] ;
35317: LD_ADDR_VAR 0 9
35321: PUSH
35322: LD_INT 67
35324: PUSH
35325: LD_INT 45
35327: PUSH
35328: LD_INT 75
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35336: LD_VAR 0 6
35340: PPUSH
35341: CALL_OW 264
35345: PUSH
35346: LD_INT 26
35348: PUSH
35349: EMPTY
35350: LIST
35351: IN
35352: IFFALSE 35373
// points := [ 120 , 30 , 80 ] ;
35354: LD_ADDR_VAR 0 9
35358: PUSH
35359: LD_INT 120
35361: PUSH
35362: LD_INT 30
35364: PUSH
35365: LD_INT 80
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35373: LD_VAR 0 6
35377: PPUSH
35378: CALL_OW 264
35382: PUSH
35383: LD_INT 22
35385: PUSH
35386: EMPTY
35387: LIST
35388: IN
35389: IFFALSE 35410
// points := [ 40 , 1 , 1 ] ;
35391: LD_ADDR_VAR 0 9
35395: PUSH
35396: LD_INT 40
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35410: LD_VAR 0 6
35414: PPUSH
35415: CALL_OW 264
35419: PUSH
35420: LD_INT 29
35422: PUSH
35423: EMPTY
35424: LIST
35425: IN
35426: IFFALSE 35447
// points := [ 70 , 200 , 400 ] ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 70
35435: PUSH
35436: LD_INT 200
35438: PUSH
35439: LD_INT 400
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35447: LD_VAR 0 6
35451: PPUSH
35452: CALL_OW 264
35456: PUSH
35457: LD_INT 14
35459: PUSH
35460: LD_INT 53
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: IN
35467: IFFALSE 35488
// points := [ 40 , 10 , 20 ] ;
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_INT 40
35476: PUSH
35477: LD_INT 10
35479: PUSH
35480: LD_INT 20
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35488: LD_VAR 0 6
35492: PPUSH
35493: CALL_OW 264
35497: PUSH
35498: LD_INT 9
35500: PUSH
35501: EMPTY
35502: LIST
35503: IN
35504: IFFALSE 35525
// points := [ 5 , 70 , 20 ] ;
35506: LD_ADDR_VAR 0 9
35510: PUSH
35511: LD_INT 5
35513: PUSH
35514: LD_INT 70
35516: PUSH
35517: LD_INT 20
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35525: LD_VAR 0 6
35529: PPUSH
35530: CALL_OW 264
35534: PUSH
35535: LD_INT 10
35537: PUSH
35538: EMPTY
35539: LIST
35540: IN
35541: IFFALSE 35562
// points := [ 35 , 110 , 70 ] ;
35543: LD_ADDR_VAR 0 9
35547: PUSH
35548: LD_INT 35
35550: PUSH
35551: LD_INT 110
35553: PUSH
35554: LD_INT 70
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35562: LD_VAR 0 6
35566: PPUSH
35567: CALL_OW 265
35571: PUSH
35572: LD_INT 25
35574: EQUAL
35575: IFFALSE 35596
// points := [ 80 , 65 , 100 ] ;
35577: LD_ADDR_VAR 0 9
35581: PUSH
35582: LD_INT 80
35584: PUSH
35585: LD_INT 65
35587: PUSH
35588: LD_INT 100
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 263
35605: PUSH
35606: LD_INT 1
35608: EQUAL
35609: IFFALSE 35644
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35611: LD_ADDR_VAR 0 10
35615: PUSH
35616: LD_VAR 0 10
35620: PUSH
35621: LD_VAR 0 6
35625: PPUSH
35626: CALL_OW 311
35630: PPUSH
35631: LD_INT 3
35633: PPUSH
35634: CALL_OW 259
35638: PUSH
35639: LD_INT 4
35641: MUL
35642: MUL
35643: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35644: LD_VAR 0 6
35648: PPUSH
35649: CALL_OW 263
35653: PUSH
35654: LD_INT 2
35656: EQUAL
35657: IFFALSE 35708
// begin j := IsControledBy ( i ) ;
35659: LD_ADDR_VAR 0 7
35663: PUSH
35664: LD_VAR 0 6
35668: PPUSH
35669: CALL_OW 312
35673: ST_TO_ADDR
// if j then
35674: LD_VAR 0 7
35678: IFFALSE 35708
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35680: LD_ADDR_VAR 0 10
35684: PUSH
35685: LD_VAR 0 10
35689: PUSH
35690: LD_VAR 0 7
35694: PPUSH
35695: LD_INT 3
35697: PPUSH
35698: CALL_OW 259
35702: PUSH
35703: LD_INT 3
35705: MUL
35706: MUL
35707: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35708: LD_VAR 0 6
35712: PPUSH
35713: CALL_OW 264
35717: PUSH
35718: LD_INT 5
35720: PUSH
35721: LD_INT 6
35723: PUSH
35724: LD_INT 46
35726: PUSH
35727: LD_INT 44
35729: PUSH
35730: LD_INT 47
35732: PUSH
35733: LD_INT 45
35735: PUSH
35736: LD_INT 28
35738: PUSH
35739: LD_INT 7
35741: PUSH
35742: LD_INT 27
35744: PUSH
35745: LD_INT 29
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: IN
35760: PUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: LD_INT 52
35768: PPUSH
35769: CALL_OW 321
35773: PUSH
35774: LD_INT 2
35776: EQUAL
35777: AND
35778: IFFALSE 35795
// bpoints := bpoints * 1.2 ;
35780: LD_ADDR_VAR 0 10
35784: PUSH
35785: LD_VAR 0 10
35789: PUSH
35790: LD_REAL  1.20000000000000E+0000
35793: MUL
35794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35795: LD_VAR 0 6
35799: PPUSH
35800: CALL_OW 264
35804: PUSH
35805: LD_INT 6
35807: PUSH
35808: LD_INT 46
35810: PUSH
35811: LD_INT 47
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: IN
35819: IFFALSE 35836
// bpoints := bpoints * 1.2 ;
35821: LD_ADDR_VAR 0 10
35825: PUSH
35826: LD_VAR 0 10
35830: PUSH
35831: LD_REAL  1.20000000000000E+0000
35834: MUL
35835: ST_TO_ADDR
// end ; unit_building :
35836: GO 35850
35838: LD_INT 3
35840: DOUBLE
35841: EQUAL
35842: IFTRUE 35846
35844: GO 35849
35846: POP
// ; end ;
35847: GO 35850
35849: POP
// for j = 1 to 3 do
35850: LD_ADDR_VAR 0 7
35854: PUSH
35855: DOUBLE
35856: LD_INT 1
35858: DEC
35859: ST_TO_ADDR
35860: LD_INT 3
35862: PUSH
35863: FOR_TO
35864: IFFALSE 35917
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: LD_VAR 0 5
35875: PPUSH
35876: LD_VAR 0 7
35880: PPUSH
35881: LD_VAR 0 5
35885: PUSH
35886: LD_VAR 0 7
35890: ARRAY
35891: PUSH
35892: LD_VAR 0 9
35896: PUSH
35897: LD_VAR 0 7
35901: ARRAY
35902: PUSH
35903: LD_VAR 0 10
35907: MUL
35908: PLUS
35909: PPUSH
35910: CALL_OW 1
35914: ST_TO_ADDR
35915: GO 35863
35917: POP
35918: POP
// end ;
35919: GO 34402
35921: POP
35922: POP
// result := Replace ( result , 4 , tmp ) ;
35923: LD_ADDR_VAR 0 5
35927: PUSH
35928: LD_VAR 0 5
35932: PPUSH
35933: LD_INT 4
35935: PPUSH
35936: LD_VAR 0 8
35940: PPUSH
35941: CALL_OW 1
35945: ST_TO_ADDR
// end ;
35946: LD_VAR 0 5
35950: RET
// export function DangerAtRange ( unit , range ) ; begin
35951: LD_INT 0
35953: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 255
35968: PPUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 250
35978: PPUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: CALL_OW 251
35988: PPUSH
35989: LD_VAR 0 2
35993: PPUSH
35994: CALL 34254 0 4
35998: ST_TO_ADDR
// end ;
35999: LD_VAR 0 3
36003: RET
// export function DangerInArea ( side , area ) ; begin
36004: LD_INT 0
36006: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_VAR 0 2
36016: PPUSH
36017: LD_INT 81
36019: PUSH
36020: LD_VAR 0 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PPUSH
36029: CALL_OW 70
36033: ST_TO_ADDR
// end ;
36034: LD_VAR 0 3
36038: RET
// export function IsExtension ( b ) ; begin
36039: LD_INT 0
36041: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36042: LD_ADDR_VAR 0 2
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_INT 23
36054: PUSH
36055: LD_INT 20
36057: PUSH
36058: LD_INT 22
36060: PUSH
36061: LD_INT 17
36063: PUSH
36064: LD_INT 24
36066: PUSH
36067: LD_INT 21
36069: PUSH
36070: LD_INT 19
36072: PUSH
36073: LD_INT 16
36075: PUSH
36076: LD_INT 25
36078: PUSH
36079: LD_INT 18
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: IN
36094: ST_TO_ADDR
// end ;
36095: LD_VAR 0 2
36099: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
// result := [ ] ;
36105: LD_ADDR_VAR 0 4
36109: PUSH
36110: EMPTY
36111: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36112: LD_ADDR_VAR 0 5
36116: PUSH
36117: LD_VAR 0 2
36121: PPUSH
36122: LD_INT 21
36124: PUSH
36125: LD_INT 3
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PPUSH
36132: CALL_OW 70
36136: ST_TO_ADDR
// if not tmp then
36137: LD_VAR 0 5
36141: NOT
36142: IFFALSE 36146
// exit ;
36144: GO 36210
// if checkLink then
36146: LD_VAR 0 3
36150: IFFALSE 36200
// begin for i in tmp do
36152: LD_ADDR_VAR 0 6
36156: PUSH
36157: LD_VAR 0 5
36161: PUSH
36162: FOR_IN
36163: IFFALSE 36198
// if GetBase ( i ) <> base then
36165: LD_VAR 0 6
36169: PPUSH
36170: CALL_OW 274
36174: PUSH
36175: LD_VAR 0 1
36179: NONEQUAL
36180: IFFALSE 36196
// ComLinkToBase ( base , i ) ;
36182: LD_VAR 0 1
36186: PPUSH
36187: LD_VAR 0 6
36191: PPUSH
36192: CALL_OW 169
36196: GO 36162
36198: POP
36199: POP
// end ; result := tmp ;
36200: LD_ADDR_VAR 0 4
36204: PUSH
36205: LD_VAR 0 5
36209: ST_TO_ADDR
// end ;
36210: LD_VAR 0 4
36214: RET
// export function ComComplete ( units , b ) ; var i ; begin
36215: LD_INT 0
36217: PPUSH
36218: PPUSH
// if not units then
36219: LD_VAR 0 1
36223: NOT
36224: IFFALSE 36228
// exit ;
36226: GO 36318
// for i in units do
36228: LD_ADDR_VAR 0 4
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: FOR_IN
36239: IFFALSE 36316
// if BuildingStatus ( b ) = bs_build then
36241: LD_VAR 0 2
36245: PPUSH
36246: CALL_OW 461
36250: PUSH
36251: LD_INT 1
36253: EQUAL
36254: IFFALSE 36314
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36256: LD_VAR 0 4
36260: PPUSH
36261: LD_STRING h
36263: PUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: CALL_OW 250
36273: PUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: CALL_OW 251
36283: PUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: PPUSH
36310: CALL_OW 446
36314: GO 36238
36316: POP
36317: POP
// end ;
36318: LD_VAR 0 3
36322: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36323: LD_INT 0
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36331: LD_VAR 0 1
36335: NOT
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 263
36346: PUSH
36347: LD_INT 2
36349: EQUAL
36350: NOT
36351: OR
36352: IFFALSE 36356
// exit ;
36354: GO 36672
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36356: LD_ADDR_VAR 0 6
36360: PUSH
36361: LD_INT 22
36363: PUSH
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 255
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 30
36383: PUSH
36384: LD_INT 36
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 34
36393: PUSH
36394: LD_INT 31
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PPUSH
36410: CALL_OW 69
36414: ST_TO_ADDR
// if not tmp then
36415: LD_VAR 0 6
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 36672
// result := [ ] ;
36424: LD_ADDR_VAR 0 2
36428: PUSH
36429: EMPTY
36430: ST_TO_ADDR
// for i in tmp do
36431: LD_ADDR_VAR 0 3
36435: PUSH
36436: LD_VAR 0 6
36440: PUSH
36441: FOR_IN
36442: IFFALSE 36513
// begin t := UnitsInside ( i ) ;
36444: LD_ADDR_VAR 0 4
36448: PUSH
36449: LD_VAR 0 3
36453: PPUSH
36454: CALL_OW 313
36458: ST_TO_ADDR
// if t then
36459: LD_VAR 0 4
36463: IFFALSE 36511
// for j in t do
36465: LD_ADDR_VAR 0 7
36469: PUSH
36470: LD_VAR 0 4
36474: PUSH
36475: FOR_IN
36476: IFFALSE 36509
// result := Insert ( result , result + 1 , j ) ;
36478: LD_ADDR_VAR 0 2
36482: PUSH
36483: LD_VAR 0 2
36487: PPUSH
36488: LD_VAR 0 2
36492: PUSH
36493: LD_INT 1
36495: PLUS
36496: PPUSH
36497: LD_VAR 0 7
36501: PPUSH
36502: CALL_OW 2
36506: ST_TO_ADDR
36507: GO 36475
36509: POP
36510: POP
// end ;
36511: GO 36441
36513: POP
36514: POP
// if not result then
36515: LD_VAR 0 2
36519: NOT
36520: IFFALSE 36524
// exit ;
36522: GO 36672
// mech := result [ 1 ] ;
36524: LD_ADDR_VAR 0 5
36528: PUSH
36529: LD_VAR 0 2
36533: PUSH
36534: LD_INT 1
36536: ARRAY
36537: ST_TO_ADDR
// if result > 1 then
36538: LD_VAR 0 2
36542: PUSH
36543: LD_INT 1
36545: GREATER
36546: IFFALSE 36658
// for i = 2 to result do
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: DOUBLE
36554: LD_INT 2
36556: DEC
36557: ST_TO_ADDR
36558: LD_VAR 0 2
36562: PUSH
36563: FOR_TO
36564: IFFALSE 36656
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36566: LD_ADDR_VAR 0 4
36570: PUSH
36571: LD_VAR 0 2
36575: PUSH
36576: LD_VAR 0 3
36580: ARRAY
36581: PPUSH
36582: LD_INT 3
36584: PPUSH
36585: CALL_OW 259
36589: PUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_VAR 0 3
36599: ARRAY
36600: PPUSH
36601: CALL_OW 432
36605: MINUS
36606: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36607: LD_VAR 0 4
36611: PUSH
36612: LD_VAR 0 5
36616: PPUSH
36617: LD_INT 3
36619: PPUSH
36620: CALL_OW 259
36624: PUSH
36625: LD_VAR 0 5
36629: PPUSH
36630: CALL_OW 432
36634: MINUS
36635: GREATEREQUAL
36636: IFFALSE 36654
// mech := result [ i ] ;
36638: LD_ADDR_VAR 0 5
36642: PUSH
36643: LD_VAR 0 2
36647: PUSH
36648: LD_VAR 0 3
36652: ARRAY
36653: ST_TO_ADDR
// end ;
36654: GO 36563
36656: POP
36657: POP
// ComLinkTo ( vehicle , mech ) ;
36658: LD_VAR 0 1
36662: PPUSH
36663: LD_VAR 0 5
36667: PPUSH
36668: CALL_OW 135
// end ;
36672: LD_VAR 0 2
36676: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36677: LD_INT 0
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
// result := [ ] ;
36692: LD_ADDR_VAR 0 7
36696: PUSH
36697: EMPTY
36698: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 266
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: IN
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 38358
// if name then
36724: LD_VAR 0 3
36728: IFFALSE 36744
// SetBName ( base_dep , name ) ;
36730: LD_VAR 0 1
36734: PPUSH
36735: LD_VAR 0 3
36739: PPUSH
36740: CALL_OW 500
// base := GetBase ( base_dep ) ;
36744: LD_ADDR_VAR 0 15
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 274
36758: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36759: LD_ADDR_VAR 0 16
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 255
36773: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36774: LD_ADDR_VAR 0 17
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 248
36788: ST_TO_ADDR
// if sources then
36789: LD_VAR 0 5
36793: IFFALSE 36840
// for i = 1 to 3 do
36795: LD_ADDR_VAR 0 8
36799: PUSH
36800: DOUBLE
36801: LD_INT 1
36803: DEC
36804: ST_TO_ADDR
36805: LD_INT 3
36807: PUSH
36808: FOR_TO
36809: IFFALSE 36838
// AddResourceType ( base , i , sources [ i ] ) ;
36811: LD_VAR 0 15
36815: PPUSH
36816: LD_VAR 0 8
36820: PPUSH
36821: LD_VAR 0 5
36825: PUSH
36826: LD_VAR 0 8
36830: ARRAY
36831: PPUSH
36832: CALL_OW 276
36836: GO 36808
36838: POP
36839: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36840: LD_ADDR_VAR 0 18
36844: PUSH
36845: LD_VAR 0 15
36849: PPUSH
36850: LD_VAR 0 2
36854: PPUSH
36855: LD_INT 1
36857: PPUSH
36858: CALL 36100 0 3
36862: ST_TO_ADDR
// InitHc ;
36863: CALL_OW 19
// InitUc ;
36867: CALL_OW 18
// uc_side := side ;
36871: LD_ADDR_OWVAR 20
36875: PUSH
36876: LD_VAR 0 16
36880: ST_TO_ADDR
// uc_nation := nation ;
36881: LD_ADDR_OWVAR 21
36885: PUSH
36886: LD_VAR 0 17
36890: ST_TO_ADDR
// if buildings then
36891: LD_VAR 0 18
36895: IFFALSE 38217
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36897: LD_ADDR_VAR 0 19
36901: PUSH
36902: LD_VAR 0 18
36906: PPUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 30
36912: PUSH
36913: LD_INT 29
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 30
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: PPUSH
36935: CALL_OW 72
36939: ST_TO_ADDR
// if tmp then
36940: LD_VAR 0 19
36944: IFFALSE 36992
// for i in tmp do
36946: LD_ADDR_VAR 0 8
36950: PUSH
36951: LD_VAR 0 19
36955: PUSH
36956: FOR_IN
36957: IFFALSE 36990
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36959: LD_VAR 0 8
36963: PPUSH
36964: CALL_OW 250
36968: PPUSH
36969: LD_VAR 0 8
36973: PPUSH
36974: CALL_OW 251
36978: PPUSH
36979: LD_VAR 0 16
36983: PPUSH
36984: CALL_OW 441
36988: GO 36956
36990: POP
36991: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36992: LD_VAR 0 18
36996: PPUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 30
37002: PUSH
37003: LD_INT 32
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 30
37012: PUSH
37013: LD_INT 33
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 72
37029: IFFALSE 37117
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37031: LD_ADDR_VAR 0 8
37035: PUSH
37036: LD_VAR 0 18
37040: PPUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: LD_INT 32
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 30
37056: PUSH
37057: LD_INT 33
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: PPUSH
37069: CALL_OW 72
37073: PUSH
37074: FOR_IN
37075: IFFALSE 37115
// begin if not GetBWeapon ( i ) then
37077: LD_VAR 0 8
37081: PPUSH
37082: CALL_OW 269
37086: NOT
37087: IFFALSE 37113
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37089: LD_VAR 0 8
37093: PPUSH
37094: LD_VAR 0 8
37098: PPUSH
37099: LD_VAR 0 2
37103: PPUSH
37104: CALL 38363 0 2
37108: PPUSH
37109: CALL_OW 431
// end ;
37113: GO 37074
37115: POP
37116: POP
// end ; for i = 1 to personel do
37117: LD_ADDR_VAR 0 8
37121: PUSH
37122: DOUBLE
37123: LD_INT 1
37125: DEC
37126: ST_TO_ADDR
37127: LD_VAR 0 6
37131: PUSH
37132: FOR_TO
37133: IFFALSE 38197
// begin if i > 4 then
37135: LD_VAR 0 8
37139: PUSH
37140: LD_INT 4
37142: GREATER
37143: IFFALSE 37147
// break ;
37145: GO 38197
// case i of 1 :
37147: LD_VAR 0 8
37151: PUSH
37152: LD_INT 1
37154: DOUBLE
37155: EQUAL
37156: IFTRUE 37160
37158: GO 37240
37160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37161: LD_ADDR_VAR 0 12
37165: PUSH
37166: LD_VAR 0 18
37170: PPUSH
37171: LD_INT 22
37173: PUSH
37174: LD_VAR 0 16
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 58
37185: PUSH
37186: EMPTY
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 30
37194: PUSH
37195: LD_INT 32
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 30
37204: PUSH
37205: LD_INT 4
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 30
37214: PUSH
37215: LD_INT 5
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: PPUSH
37233: CALL_OW 72
37237: ST_TO_ADDR
37238: GO 37462
37240: LD_INT 2
37242: DOUBLE
37243: EQUAL
37244: IFTRUE 37248
37246: GO 37310
37248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37249: LD_ADDR_VAR 0 12
37253: PUSH
37254: LD_VAR 0 18
37258: PPUSH
37259: LD_INT 22
37261: PUSH
37262: LD_VAR 0 16
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: LD_INT 30
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 30
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PPUSH
37303: CALL_OW 72
37307: ST_TO_ADDR
37308: GO 37462
37310: LD_INT 3
37312: DOUBLE
37313: EQUAL
37314: IFTRUE 37318
37316: GO 37380
37318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37319: LD_ADDR_VAR 0 12
37323: PUSH
37324: LD_VAR 0 18
37328: PPUSH
37329: LD_INT 22
37331: PUSH
37332: LD_VAR 0 16
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 30
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 30
37356: PUSH
37357: LD_INT 3
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PPUSH
37373: CALL_OW 72
37377: ST_TO_ADDR
37378: GO 37462
37380: LD_INT 4
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37461
37388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37389: LD_ADDR_VAR 0 12
37393: PUSH
37394: LD_VAR 0 18
37398: PPUSH
37399: LD_INT 22
37401: PUSH
37402: LD_VAR 0 16
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: LD_INT 30
37416: PUSH
37417: LD_INT 6
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 30
37426: PUSH
37427: LD_INT 7
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 30
37436: PUSH
37437: LD_INT 8
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PPUSH
37454: CALL_OW 72
37458: ST_TO_ADDR
37459: GO 37462
37461: POP
// if i = 1 then
37462: LD_VAR 0 8
37466: PUSH
37467: LD_INT 1
37469: EQUAL
37470: IFFALSE 37581
// begin tmp := [ ] ;
37472: LD_ADDR_VAR 0 19
37476: PUSH
37477: EMPTY
37478: ST_TO_ADDR
// for j in f do
37479: LD_ADDR_VAR 0 9
37483: PUSH
37484: LD_VAR 0 12
37488: PUSH
37489: FOR_IN
37490: IFFALSE 37563
// if GetBType ( j ) = b_bunker then
37492: LD_VAR 0 9
37496: PPUSH
37497: CALL_OW 266
37501: PUSH
37502: LD_INT 32
37504: EQUAL
37505: IFFALSE 37532
// tmp := Insert ( tmp , 1 , j ) else
37507: LD_ADDR_VAR 0 19
37511: PUSH
37512: LD_VAR 0 19
37516: PPUSH
37517: LD_INT 1
37519: PPUSH
37520: LD_VAR 0 9
37524: PPUSH
37525: CALL_OW 2
37529: ST_TO_ADDR
37530: GO 37561
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37532: LD_ADDR_VAR 0 19
37536: PUSH
37537: LD_VAR 0 19
37541: PPUSH
37542: LD_VAR 0 19
37546: PUSH
37547: LD_INT 1
37549: PLUS
37550: PPUSH
37551: LD_VAR 0 9
37555: PPUSH
37556: CALL_OW 2
37560: ST_TO_ADDR
37561: GO 37489
37563: POP
37564: POP
// if tmp then
37565: LD_VAR 0 19
37569: IFFALSE 37581
// f := tmp ;
37571: LD_ADDR_VAR 0 12
37575: PUSH
37576: LD_VAR 0 19
37580: ST_TO_ADDR
// end ; x := personel [ i ] ;
37581: LD_ADDR_VAR 0 13
37585: PUSH
37586: LD_VAR 0 6
37590: PUSH
37591: LD_VAR 0 8
37595: ARRAY
37596: ST_TO_ADDR
// if x = - 1 then
37597: LD_VAR 0 13
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: EQUAL
37606: IFFALSE 37815
// begin for j in f do
37608: LD_ADDR_VAR 0 9
37612: PUSH
37613: LD_VAR 0 12
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37811
// repeat InitHc ;
37621: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37625: LD_VAR 0 9
37629: PPUSH
37630: CALL_OW 266
37634: PUSH
37635: LD_INT 5
37637: EQUAL
37638: IFFALSE 37708
// begin if UnitsInside ( j ) < 3 then
37640: LD_VAR 0 9
37644: PPUSH
37645: CALL_OW 313
37649: PUSH
37650: LD_INT 3
37652: LESS
37653: IFFALSE 37689
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37655: LD_INT 0
37657: PPUSH
37658: LD_INT 5
37660: PUSH
37661: LD_INT 8
37663: PUSH
37664: LD_INT 9
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: LD_VAR 0 17
37676: ARRAY
37677: PPUSH
37678: LD_VAR 0 4
37682: PPUSH
37683: CALL_OW 380
37687: GO 37706
// PrepareHuman ( false , i , skill ) ;
37689: LD_INT 0
37691: PPUSH
37692: LD_VAR 0 8
37696: PPUSH
37697: LD_VAR 0 4
37701: PPUSH
37702: CALL_OW 380
// end else
37706: GO 37725
// PrepareHuman ( false , i , skill ) ;
37708: LD_INT 0
37710: PPUSH
37711: LD_VAR 0 8
37715: PPUSH
37716: LD_VAR 0 4
37720: PPUSH
37721: CALL_OW 380
// un := CreateHuman ;
37725: LD_ADDR_VAR 0 14
37729: PUSH
37730: CALL_OW 44
37734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37735: LD_ADDR_VAR 0 7
37739: PUSH
37740: LD_VAR 0 7
37744: PPUSH
37745: LD_INT 1
37747: PPUSH
37748: LD_VAR 0 14
37752: PPUSH
37753: CALL_OW 2
37757: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37758: LD_VAR 0 14
37762: PPUSH
37763: LD_VAR 0 9
37767: PPUSH
37768: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37772: LD_VAR 0 9
37776: PPUSH
37777: CALL_OW 313
37781: PUSH
37782: LD_INT 6
37784: EQUAL
37785: PUSH
37786: LD_VAR 0 9
37790: PPUSH
37791: CALL_OW 266
37795: PUSH
37796: LD_INT 32
37798: PUSH
37799: LD_INT 31
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: IN
37806: OR
37807: IFFALSE 37621
37809: GO 37618
37811: POP
37812: POP
// end else
37813: GO 38195
// for j = 1 to x do
37815: LD_ADDR_VAR 0 9
37819: PUSH
37820: DOUBLE
37821: LD_INT 1
37823: DEC
37824: ST_TO_ADDR
37825: LD_VAR 0 13
37829: PUSH
37830: FOR_TO
37831: IFFALSE 38193
// begin InitHc ;
37833: CALL_OW 19
// if not f then
37837: LD_VAR 0 12
37841: NOT
37842: IFFALSE 37931
// begin PrepareHuman ( false , i , skill ) ;
37844: LD_INT 0
37846: PPUSH
37847: LD_VAR 0 8
37851: PPUSH
37852: LD_VAR 0 4
37856: PPUSH
37857: CALL_OW 380
// un := CreateHuman ;
37861: LD_ADDR_VAR 0 14
37865: PUSH
37866: CALL_OW 44
37870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37871: LD_ADDR_VAR 0 7
37875: PUSH
37876: LD_VAR 0 7
37880: PPUSH
37881: LD_INT 1
37883: PPUSH
37884: LD_VAR 0 14
37888: PPUSH
37889: CALL_OW 2
37893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37894: LD_VAR 0 14
37898: PPUSH
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 250
37908: PPUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 251
37918: PPUSH
37919: LD_INT 10
37921: PPUSH
37922: LD_INT 0
37924: PPUSH
37925: CALL_OW 50
// continue ;
37929: GO 37830
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37931: LD_VAR 0 12
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: PPUSH
37940: CALL_OW 313
37944: PUSH
37945: LD_VAR 0 12
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PPUSH
37954: CALL_OW 266
37958: PUSH
37959: LD_INT 32
37961: PUSH
37962: LD_INT 31
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: IN
37969: AND
37970: PUSH
37971: LD_VAR 0 12
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: CALL_OW 313
37984: PUSH
37985: LD_INT 6
37987: EQUAL
37988: OR
37989: IFFALSE 38009
// f := Delete ( f , 1 ) ;
37991: LD_ADDR_VAR 0 12
37995: PUSH
37996: LD_VAR 0 12
38000: PPUSH
38001: LD_INT 1
38003: PPUSH
38004: CALL_OW 3
38008: ST_TO_ADDR
// if not f then
38009: LD_VAR 0 12
38013: NOT
38014: IFFALSE 38032
// begin x := x + 2 ;
38016: LD_ADDR_VAR 0 13
38020: PUSH
38021: LD_VAR 0 13
38025: PUSH
38026: LD_INT 2
38028: PLUS
38029: ST_TO_ADDR
// continue ;
38030: GO 37830
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38032: LD_VAR 0 12
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PPUSH
38041: CALL_OW 266
38045: PUSH
38046: LD_INT 5
38048: EQUAL
38049: IFFALSE 38123
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38051: LD_VAR 0 12
38055: PUSH
38056: LD_INT 1
38058: ARRAY
38059: PPUSH
38060: CALL_OW 313
38064: PUSH
38065: LD_INT 3
38067: LESS
38068: IFFALSE 38104
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38070: LD_INT 0
38072: PPUSH
38073: LD_INT 5
38075: PUSH
38076: LD_INT 8
38078: PUSH
38079: LD_INT 9
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: PUSH
38087: LD_VAR 0 17
38091: ARRAY
38092: PPUSH
38093: LD_VAR 0 4
38097: PPUSH
38098: CALL_OW 380
38102: GO 38121
// PrepareHuman ( false , i , skill ) ;
38104: LD_INT 0
38106: PPUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: LD_VAR 0 4
38116: PPUSH
38117: CALL_OW 380
// end else
38121: GO 38140
// PrepareHuman ( false , i , skill ) ;
38123: LD_INT 0
38125: PPUSH
38126: LD_VAR 0 8
38130: PPUSH
38131: LD_VAR 0 4
38135: PPUSH
38136: CALL_OW 380
// un := CreateHuman ;
38140: LD_ADDR_VAR 0 14
38144: PUSH
38145: CALL_OW 44
38149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38150: LD_ADDR_VAR 0 7
38154: PUSH
38155: LD_VAR 0 7
38159: PPUSH
38160: LD_INT 1
38162: PPUSH
38163: LD_VAR 0 14
38167: PPUSH
38168: CALL_OW 2
38172: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38173: LD_VAR 0 14
38177: PPUSH
38178: LD_VAR 0 12
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: PPUSH
38187: CALL_OW 52
// end ;
38191: GO 37830
38193: POP
38194: POP
// end ;
38195: GO 37132
38197: POP
38198: POP
// result := result ^ buildings ;
38199: LD_ADDR_VAR 0 7
38203: PUSH
38204: LD_VAR 0 7
38208: PUSH
38209: LD_VAR 0 18
38213: ADD
38214: ST_TO_ADDR
// end else
38215: GO 38358
// begin for i = 1 to personel do
38217: LD_ADDR_VAR 0 8
38221: PUSH
38222: DOUBLE
38223: LD_INT 1
38225: DEC
38226: ST_TO_ADDR
38227: LD_VAR 0 6
38231: PUSH
38232: FOR_TO
38233: IFFALSE 38356
// begin if i > 4 then
38235: LD_VAR 0 8
38239: PUSH
38240: LD_INT 4
38242: GREATER
38243: IFFALSE 38247
// break ;
38245: GO 38356
// x := personel [ i ] ;
38247: LD_ADDR_VAR 0 13
38251: PUSH
38252: LD_VAR 0 6
38256: PUSH
38257: LD_VAR 0 8
38261: ARRAY
38262: ST_TO_ADDR
// if x = - 1 then
38263: LD_VAR 0 13
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: EQUAL
38272: IFFALSE 38276
// continue ;
38274: GO 38232
// PrepareHuman ( false , i , skill ) ;
38276: LD_INT 0
38278: PPUSH
38279: LD_VAR 0 8
38283: PPUSH
38284: LD_VAR 0 4
38288: PPUSH
38289: CALL_OW 380
// un := CreateHuman ;
38293: LD_ADDR_VAR 0 14
38297: PUSH
38298: CALL_OW 44
38302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38303: LD_VAR 0 14
38307: PPUSH
38308: LD_VAR 0 1
38312: PPUSH
38313: CALL_OW 250
38317: PPUSH
38318: LD_VAR 0 1
38322: PPUSH
38323: CALL_OW 251
38327: PPUSH
38328: LD_INT 10
38330: PPUSH
38331: LD_INT 0
38333: PPUSH
38334: CALL_OW 50
// result := result ^ un ;
38338: LD_ADDR_VAR 0 7
38342: PUSH
38343: LD_VAR 0 7
38347: PUSH
38348: LD_VAR 0 14
38352: ADD
38353: ST_TO_ADDR
// end ;
38354: GO 38232
38356: POP
38357: POP
// end ; end ;
38358: LD_VAR 0 7
38362: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
// result := false ;
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_INT 0
38388: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38389: LD_VAR 0 1
38393: NOT
38394: PUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 266
38404: PUSH
38405: LD_INT 32
38407: PUSH
38408: LD_INT 33
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: IN
38415: NOT
38416: OR
38417: IFFALSE 38421
// exit ;
38419: GO 39560
// nat := GetNation ( tower ) ;
38421: LD_ADDR_VAR 0 12
38425: PUSH
38426: LD_VAR 0 1
38430: PPUSH
38431: CALL_OW 248
38435: ST_TO_ADDR
// side := GetSide ( tower ) ;
38436: LD_ADDR_VAR 0 16
38440: PUSH
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 255
38450: ST_TO_ADDR
// x := GetX ( tower ) ;
38451: LD_ADDR_VAR 0 10
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 250
38465: ST_TO_ADDR
// y := GetY ( tower ) ;
38466: LD_ADDR_VAR 0 11
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 251
38480: ST_TO_ADDR
// if not x or not y then
38481: LD_VAR 0 10
38485: NOT
38486: PUSH
38487: LD_VAR 0 11
38491: NOT
38492: OR
38493: IFFALSE 38497
// exit ;
38495: GO 39560
// weapon := 0 ;
38497: LD_ADDR_VAR 0 18
38501: PUSH
38502: LD_INT 0
38504: ST_TO_ADDR
// fac_list := [ ] ;
38505: LD_ADDR_VAR 0 17
38509: PUSH
38510: EMPTY
38511: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 274
38526: PPUSH
38527: LD_VAR 0 2
38531: PPUSH
38532: LD_INT 0
38534: PPUSH
38535: CALL 36100 0 3
38539: PPUSH
38540: LD_INT 30
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PPUSH
38550: CALL_OW 72
38554: ST_TO_ADDR
// if not factories then
38555: LD_VAR 0 6
38559: NOT
38560: IFFALSE 38564
// exit ;
38562: GO 39560
// for i in factories do
38564: LD_ADDR_VAR 0 8
38568: PUSH
38569: LD_VAR 0 6
38573: PUSH
38574: FOR_IN
38575: IFFALSE 38600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38577: LD_ADDR_VAR 0 17
38581: PUSH
38582: LD_VAR 0 17
38586: PUSH
38587: LD_VAR 0 8
38591: PPUSH
38592: CALL_OW 478
38596: UNION
38597: ST_TO_ADDR
38598: GO 38574
38600: POP
38601: POP
// if not fac_list then
38602: LD_VAR 0 17
38606: NOT
38607: IFFALSE 38611
// exit ;
38609: GO 39560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_INT 4
38618: PUSH
38619: LD_INT 5
38621: PUSH
38622: LD_INT 9
38624: PUSH
38625: LD_INT 10
38627: PUSH
38628: LD_INT 6
38630: PUSH
38631: LD_INT 7
38633: PUSH
38634: LD_INT 11
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 27
38648: PUSH
38649: LD_INT 28
38651: PUSH
38652: LD_INT 26
38654: PUSH
38655: LD_INT 30
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 43
38666: PUSH
38667: LD_INT 44
38669: PUSH
38670: LD_INT 46
38672: PUSH
38673: LD_INT 45
38675: PUSH
38676: LD_INT 47
38678: PUSH
38679: LD_INT 49
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: LD_VAR 0 12
38699: ARRAY
38700: ST_TO_ADDR
// for i in list do
38701: LD_ADDR_VAR 0 8
38705: PUSH
38706: LD_VAR 0 5
38710: PUSH
38711: FOR_IN
38712: IFFALSE 38745
// if not i in fac_list then
38714: LD_VAR 0 8
38718: PUSH
38719: LD_VAR 0 17
38723: IN
38724: NOT
38725: IFFALSE 38743
// list := list diff i ;
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_VAR 0 5
38736: PUSH
38737: LD_VAR 0 8
38741: DIFF
38742: ST_TO_ADDR
38743: GO 38711
38745: POP
38746: POP
// if not list then
38747: LD_VAR 0 5
38751: NOT
38752: IFFALSE 38756
// exit ;
38754: GO 39560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38756: LD_VAR 0 12
38760: PUSH
38761: LD_INT 3
38763: EQUAL
38764: PUSH
38765: LD_INT 49
38767: PUSH
38768: LD_VAR 0 5
38772: IN
38773: AND
38774: PUSH
38775: LD_INT 31
38777: PPUSH
38778: LD_VAR 0 16
38782: PPUSH
38783: CALL_OW 321
38787: PUSH
38788: LD_INT 2
38790: EQUAL
38791: AND
38792: IFFALSE 38852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38794: LD_INT 22
38796: PUSH
38797: LD_VAR 0 16
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 35
38808: PUSH
38809: LD_INT 49
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 91
38818: PUSH
38819: LD_VAR 0 1
38823: PUSH
38824: LD_INT 10
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: PPUSH
38837: CALL_OW 69
38841: NOT
38842: IFFALSE 38852
// weapon := ru_time_lapser ;
38844: LD_ADDR_VAR 0 18
38848: PUSH
38849: LD_INT 49
38851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38852: LD_VAR 0 12
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: IN
38867: PUSH
38868: LD_INT 11
38870: PUSH
38871: LD_VAR 0 5
38875: IN
38876: PUSH
38877: LD_INT 30
38879: PUSH
38880: LD_VAR 0 5
38884: IN
38885: OR
38886: AND
38887: PUSH
38888: LD_INT 6
38890: PPUSH
38891: LD_VAR 0 16
38895: PPUSH
38896: CALL_OW 321
38900: PUSH
38901: LD_INT 2
38903: EQUAL
38904: AND
38905: IFFALSE 39070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38907: LD_INT 22
38909: PUSH
38910: LD_VAR 0 16
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: LD_INT 35
38924: PUSH
38925: LD_INT 11
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 35
38934: PUSH
38935: LD_INT 30
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 91
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_INT 18
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: PPUSH
38968: CALL_OW 69
38972: NOT
38973: PUSH
38974: LD_INT 22
38976: PUSH
38977: LD_VAR 0 16
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: LD_INT 30
38991: PUSH
38992: LD_INT 32
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 30
39001: PUSH
39002: LD_INT 33
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 91
39016: PUSH
39017: LD_VAR 0 1
39021: PUSH
39022: LD_INT 12
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: PPUSH
39038: CALL_OW 69
39042: PUSH
39043: LD_INT 2
39045: GREATER
39046: AND
39047: IFFALSE 39070
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39049: LD_ADDR_VAR 0 18
39053: PUSH
39054: LD_INT 11
39056: PUSH
39057: LD_INT 30
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_VAR 0 12
39068: ARRAY
39069: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39070: LD_VAR 0 18
39074: NOT
39075: PUSH
39076: LD_INT 40
39078: PPUSH
39079: LD_VAR 0 16
39083: PPUSH
39084: CALL_OW 321
39088: PUSH
39089: LD_INT 2
39091: EQUAL
39092: AND
39093: PUSH
39094: LD_INT 7
39096: PUSH
39097: LD_VAR 0 5
39101: IN
39102: PUSH
39103: LD_INT 28
39105: PUSH
39106: LD_VAR 0 5
39110: IN
39111: OR
39112: PUSH
39113: LD_INT 45
39115: PUSH
39116: LD_VAR 0 5
39120: IN
39121: OR
39122: AND
39123: IFFALSE 39377
// begin hex := GetHexInfo ( x , y ) ;
39125: LD_ADDR_VAR 0 4
39129: PUSH
39130: LD_VAR 0 10
39134: PPUSH
39135: LD_VAR 0 11
39139: PPUSH
39140: CALL_OW 546
39144: ST_TO_ADDR
// if hex [ 1 ] then
39145: LD_VAR 0 4
39149: PUSH
39150: LD_INT 1
39152: ARRAY
39153: IFFALSE 39157
// exit ;
39155: GO 39560
// height := hex [ 2 ] ;
39157: LD_ADDR_VAR 0 15
39161: PUSH
39162: LD_VAR 0 4
39166: PUSH
39167: LD_INT 2
39169: ARRAY
39170: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39171: LD_ADDR_VAR 0 14
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: LD_INT 5
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
// for i in tmp do
39194: LD_ADDR_VAR 0 8
39198: PUSH
39199: LD_VAR 0 14
39203: PUSH
39204: FOR_IN
39205: IFFALSE 39375
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39207: LD_ADDR_VAR 0 9
39211: PUSH
39212: LD_VAR 0 10
39216: PPUSH
39217: LD_VAR 0 8
39221: PPUSH
39222: LD_INT 5
39224: PPUSH
39225: CALL_OW 272
39229: PUSH
39230: LD_VAR 0 11
39234: PPUSH
39235: LD_VAR 0 8
39239: PPUSH
39240: LD_INT 5
39242: PPUSH
39243: CALL_OW 273
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39252: LD_VAR 0 9
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: PPUSH
39261: LD_VAR 0 9
39265: PUSH
39266: LD_INT 2
39268: ARRAY
39269: PPUSH
39270: CALL_OW 488
39274: IFFALSE 39373
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39276: LD_ADDR_VAR 0 4
39280: PUSH
39281: LD_VAR 0 9
39285: PUSH
39286: LD_INT 1
39288: ARRAY
39289: PPUSH
39290: LD_VAR 0 9
39294: PUSH
39295: LD_INT 2
39297: ARRAY
39298: PPUSH
39299: CALL_OW 546
39303: ST_TO_ADDR
// if hex [ 1 ] then
39304: LD_VAR 0 4
39308: PUSH
39309: LD_INT 1
39311: ARRAY
39312: IFFALSE 39316
// continue ;
39314: GO 39204
// h := hex [ 2 ] ;
39316: LD_ADDR_VAR 0 13
39320: PUSH
39321: LD_VAR 0 4
39325: PUSH
39326: LD_INT 2
39328: ARRAY
39329: ST_TO_ADDR
// if h + 7 < height then
39330: LD_VAR 0 13
39334: PUSH
39335: LD_INT 7
39337: PLUS
39338: PUSH
39339: LD_VAR 0 15
39343: LESS
39344: IFFALSE 39373
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39346: LD_ADDR_VAR 0 18
39350: PUSH
39351: LD_INT 7
39353: PUSH
39354: LD_INT 28
39356: PUSH
39357: LD_INT 45
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: PUSH
39365: LD_VAR 0 12
39369: ARRAY
39370: ST_TO_ADDR
// break ;
39371: GO 39375
// end ; end ; end ;
39373: GO 39204
39375: POP
39376: POP
// end ; if not weapon then
39377: LD_VAR 0 18
39381: NOT
39382: IFFALSE 39442
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39384: LD_ADDR_VAR 0 5
39388: PUSH
39389: LD_VAR 0 5
39393: PUSH
39394: LD_INT 11
39396: PUSH
39397: LD_INT 30
39399: PUSH
39400: LD_INT 49
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: DIFF
39408: ST_TO_ADDR
// if not list then
39409: LD_VAR 0 5
39413: NOT
39414: IFFALSE 39418
// exit ;
39416: GO 39560
// weapon := list [ rand ( 1 , list ) ] ;
39418: LD_ADDR_VAR 0 18
39422: PUSH
39423: LD_VAR 0 5
39427: PUSH
39428: LD_INT 1
39430: PPUSH
39431: LD_VAR 0 5
39435: PPUSH
39436: CALL_OW 12
39440: ARRAY
39441: ST_TO_ADDR
// end ; if weapon then
39442: LD_VAR 0 18
39446: IFFALSE 39560
// begin tmp := CostOfWeapon ( weapon ) ;
39448: LD_ADDR_VAR 0 14
39452: PUSH
39453: LD_VAR 0 18
39457: PPUSH
39458: CALL_OW 451
39462: ST_TO_ADDR
// j := GetBase ( tower ) ;
39463: LD_ADDR_VAR 0 9
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 274
39477: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39478: LD_VAR 0 9
39482: PPUSH
39483: LD_INT 1
39485: PPUSH
39486: CALL_OW 275
39490: PUSH
39491: LD_VAR 0 14
39495: PUSH
39496: LD_INT 1
39498: ARRAY
39499: GREATEREQUAL
39500: PUSH
39501: LD_VAR 0 9
39505: PPUSH
39506: LD_INT 2
39508: PPUSH
39509: CALL_OW 275
39513: PUSH
39514: LD_VAR 0 14
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: GREATEREQUAL
39523: AND
39524: PUSH
39525: LD_VAR 0 9
39529: PPUSH
39530: LD_INT 3
39532: PPUSH
39533: CALL_OW 275
39537: PUSH
39538: LD_VAR 0 14
39542: PUSH
39543: LD_INT 3
39545: ARRAY
39546: GREATEREQUAL
39547: AND
39548: IFFALSE 39560
// result := weapon ;
39550: LD_ADDR_VAR 0 3
39554: PUSH
39555: LD_VAR 0 18
39559: ST_TO_ADDR
// end ; end ;
39560: LD_VAR 0 3
39564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39565: LD_INT 0
39567: PPUSH
39568: PPUSH
// result := true ;
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 1
39576: ST_TO_ADDR
// if array1 = array2 then
39577: LD_VAR 0 1
39581: PUSH
39582: LD_VAR 0 2
39586: EQUAL
39587: IFFALSE 39647
// begin for i = 1 to array1 do
39589: LD_ADDR_VAR 0 4
39593: PUSH
39594: DOUBLE
39595: LD_INT 1
39597: DEC
39598: ST_TO_ADDR
39599: LD_VAR 0 1
39603: PUSH
39604: FOR_TO
39605: IFFALSE 39643
// if array1 [ i ] <> array2 [ i ] then
39607: LD_VAR 0 1
39611: PUSH
39612: LD_VAR 0 4
39616: ARRAY
39617: PUSH
39618: LD_VAR 0 2
39622: PUSH
39623: LD_VAR 0 4
39627: ARRAY
39628: NONEQUAL
39629: IFFALSE 39641
// begin result := false ;
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_INT 0
39638: ST_TO_ADDR
// break ;
39639: GO 39643
// end ;
39641: GO 39604
39643: POP
39644: POP
// end else
39645: GO 39655
// result := false ;
39647: LD_ADDR_VAR 0 3
39651: PUSH
39652: LD_INT 0
39654: ST_TO_ADDR
// end ;
39655: LD_VAR 0 3
39659: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39660: LD_INT 0
39662: PPUSH
39663: PPUSH
// if not array1 or not array2 then
39664: LD_VAR 0 1
39668: NOT
39669: PUSH
39670: LD_VAR 0 2
39674: NOT
39675: OR
39676: IFFALSE 39680
// exit ;
39678: GO 39744
// result := true ;
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 1
39687: ST_TO_ADDR
// for i = 1 to array1 do
39688: LD_ADDR_VAR 0 4
39692: PUSH
39693: DOUBLE
39694: LD_INT 1
39696: DEC
39697: ST_TO_ADDR
39698: LD_VAR 0 1
39702: PUSH
39703: FOR_TO
39704: IFFALSE 39742
// if array1 [ i ] <> array2 [ i ] then
39706: LD_VAR 0 1
39710: PUSH
39711: LD_VAR 0 4
39715: ARRAY
39716: PUSH
39717: LD_VAR 0 2
39721: PUSH
39722: LD_VAR 0 4
39726: ARRAY
39727: NONEQUAL
39728: IFFALSE 39740
// begin result := false ;
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 0
39737: ST_TO_ADDR
// break ;
39738: GO 39742
// end ;
39740: GO 39703
39742: POP
39743: POP
// end ;
39744: LD_VAR 0 3
39748: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39749: LD_INT 0
39751: PPUSH
39752: PPUSH
39753: PPUSH
// pom := GetBase ( fac ) ;
39754: LD_ADDR_VAR 0 5
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 274
39768: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39769: LD_ADDR_VAR 0 4
39773: PUSH
39774: LD_VAR 0 2
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 2
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: LD_VAR 0 2
39796: PUSH
39797: LD_INT 3
39799: ARRAY
39800: PPUSH
39801: LD_VAR 0 2
39805: PUSH
39806: LD_INT 4
39808: ARRAY
39809: PPUSH
39810: CALL_OW 449
39814: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39815: LD_ADDR_VAR 0 3
39819: PUSH
39820: LD_VAR 0 5
39824: PPUSH
39825: LD_INT 1
39827: PPUSH
39828: CALL_OW 275
39832: PUSH
39833: LD_VAR 0 4
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: GREATEREQUAL
39842: PUSH
39843: LD_VAR 0 5
39847: PPUSH
39848: LD_INT 2
39850: PPUSH
39851: CALL_OW 275
39855: PUSH
39856: LD_VAR 0 4
39860: PUSH
39861: LD_INT 2
39863: ARRAY
39864: GREATEREQUAL
39865: AND
39866: PUSH
39867: LD_VAR 0 5
39871: PPUSH
39872: LD_INT 3
39874: PPUSH
39875: CALL_OW 275
39879: PUSH
39880: LD_VAR 0 4
39884: PUSH
39885: LD_INT 3
39887: ARRAY
39888: GREATEREQUAL
39889: AND
39890: ST_TO_ADDR
// end ;
39891: LD_VAR 0 3
39895: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39896: LD_INT 0
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
// pom := GetBase ( building ) ;
39902: LD_ADDR_VAR 0 3
39906: PUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 274
39916: ST_TO_ADDR
// if not pom then
39917: LD_VAR 0 3
39921: NOT
39922: IFFALSE 39926
// exit ;
39924: GO 40096
// btype := GetBType ( building ) ;
39926: LD_ADDR_VAR 0 5
39930: PUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL_OW 266
39940: ST_TO_ADDR
// if btype = b_armoury then
39941: LD_VAR 0 5
39945: PUSH
39946: LD_INT 4
39948: EQUAL
39949: IFFALSE 39959
// btype := b_barracks ;
39951: LD_ADDR_VAR 0 5
39955: PUSH
39956: LD_INT 5
39958: ST_TO_ADDR
// if btype = b_depot then
39959: LD_VAR 0 5
39963: PUSH
39964: LD_INT 0
39966: EQUAL
39967: IFFALSE 39977
// btype := b_warehouse ;
39969: LD_ADDR_VAR 0 5
39973: PUSH
39974: LD_INT 1
39976: ST_TO_ADDR
// if btype = b_workshop then
39977: LD_VAR 0 5
39981: PUSH
39982: LD_INT 2
39984: EQUAL
39985: IFFALSE 39995
// btype := b_factory ;
39987: LD_ADDR_VAR 0 5
39991: PUSH
39992: LD_INT 3
39994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39995: LD_ADDR_VAR 0 4
39999: PUSH
40000: LD_VAR 0 5
40004: PPUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 248
40014: PPUSH
40015: CALL_OW 450
40019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_INT 1
40032: PPUSH
40033: CALL_OW 275
40037: PUSH
40038: LD_VAR 0 4
40042: PUSH
40043: LD_INT 1
40045: ARRAY
40046: GREATEREQUAL
40047: PUSH
40048: LD_VAR 0 3
40052: PPUSH
40053: LD_INT 2
40055: PPUSH
40056: CALL_OW 275
40060: PUSH
40061: LD_VAR 0 4
40065: PUSH
40066: LD_INT 2
40068: ARRAY
40069: GREATEREQUAL
40070: AND
40071: PUSH
40072: LD_VAR 0 3
40076: PPUSH
40077: LD_INT 3
40079: PPUSH
40080: CALL_OW 275
40084: PUSH
40085: LD_VAR 0 4
40089: PUSH
40090: LD_INT 3
40092: ARRAY
40093: GREATEREQUAL
40094: AND
40095: ST_TO_ADDR
// end ;
40096: LD_VAR 0 2
40100: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40101: LD_INT 0
40103: PPUSH
40104: PPUSH
40105: PPUSH
// pom := GetBase ( building ) ;
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 274
40120: ST_TO_ADDR
// if not pom then
40121: LD_VAR 0 4
40125: NOT
40126: IFFALSE 40130
// exit ;
40128: GO 40231
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40130: LD_ADDR_VAR 0 5
40134: PUSH
40135: LD_VAR 0 2
40139: PPUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 248
40149: PPUSH
40150: CALL_OW 450
40154: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40155: LD_ADDR_VAR 0 3
40159: PUSH
40160: LD_VAR 0 4
40164: PPUSH
40165: LD_INT 1
40167: PPUSH
40168: CALL_OW 275
40172: PUSH
40173: LD_VAR 0 5
40177: PUSH
40178: LD_INT 1
40180: ARRAY
40181: GREATEREQUAL
40182: PUSH
40183: LD_VAR 0 4
40187: PPUSH
40188: LD_INT 2
40190: PPUSH
40191: CALL_OW 275
40195: PUSH
40196: LD_VAR 0 5
40200: PUSH
40201: LD_INT 2
40203: ARRAY
40204: GREATEREQUAL
40205: AND
40206: PUSH
40207: LD_VAR 0 4
40211: PPUSH
40212: LD_INT 3
40214: PPUSH
40215: CALL_OW 275
40219: PUSH
40220: LD_VAR 0 5
40224: PUSH
40225: LD_INT 3
40227: ARRAY
40228: GREATEREQUAL
40229: AND
40230: ST_TO_ADDR
// end ;
40231: LD_VAR 0 3
40235: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40236: LD_INT 0
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
// result := false ;
40249: LD_ADDR_VAR 0 8
40253: PUSH
40254: LD_INT 0
40256: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40257: LD_VAR 0 5
40261: NOT
40262: PUSH
40263: LD_VAR 0 1
40267: NOT
40268: OR
40269: PUSH
40270: LD_VAR 0 2
40274: NOT
40275: OR
40276: PUSH
40277: LD_VAR 0 3
40281: NOT
40282: OR
40283: IFFALSE 40287
// exit ;
40285: GO 41101
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40287: LD_ADDR_VAR 0 14
40291: PUSH
40292: LD_VAR 0 1
40296: PPUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: LD_VAR 0 4
40311: PPUSH
40312: LD_VAR 0 5
40316: PUSH
40317: LD_INT 1
40319: ARRAY
40320: PPUSH
40321: CALL_OW 248
40325: PPUSH
40326: LD_INT 0
40328: PPUSH
40329: CALL 41938 0 6
40333: ST_TO_ADDR
// if not hexes then
40334: LD_VAR 0 14
40338: NOT
40339: IFFALSE 40343
// exit ;
40341: GO 41101
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40343: LD_ADDR_VAR 0 17
40347: PUSH
40348: LD_VAR 0 5
40352: PPUSH
40353: LD_INT 22
40355: PUSH
40356: LD_VAR 0 13
40360: PPUSH
40361: CALL_OW 255
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 30
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 30
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PPUSH
40402: CALL_OW 72
40406: ST_TO_ADDR
// for i = 1 to hexes do
40407: LD_ADDR_VAR 0 9
40411: PUSH
40412: DOUBLE
40413: LD_INT 1
40415: DEC
40416: ST_TO_ADDR
40417: LD_VAR 0 14
40421: PUSH
40422: FOR_TO
40423: IFFALSE 41099
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40425: LD_ADDR_VAR 0 13
40429: PUSH
40430: LD_VAR 0 14
40434: PUSH
40435: LD_VAR 0 9
40439: ARRAY
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PPUSH
40445: LD_VAR 0 14
40449: PUSH
40450: LD_VAR 0 9
40454: ARRAY
40455: PUSH
40456: LD_INT 2
40458: ARRAY
40459: PPUSH
40460: CALL_OW 428
40464: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40465: LD_VAR 0 14
40469: PUSH
40470: LD_VAR 0 9
40474: ARRAY
40475: PUSH
40476: LD_INT 1
40478: ARRAY
40479: PPUSH
40480: LD_VAR 0 14
40484: PUSH
40485: LD_VAR 0 9
40489: ARRAY
40490: PUSH
40491: LD_INT 2
40493: ARRAY
40494: PPUSH
40495: CALL_OW 351
40499: PUSH
40500: LD_VAR 0 14
40504: PUSH
40505: LD_VAR 0 9
40509: ARRAY
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 14
40519: PUSH
40520: LD_VAR 0 9
40524: ARRAY
40525: PUSH
40526: LD_INT 2
40528: ARRAY
40529: PPUSH
40530: CALL_OW 488
40534: NOT
40535: OR
40536: PUSH
40537: LD_VAR 0 13
40541: PPUSH
40542: CALL_OW 247
40546: PUSH
40547: LD_INT 3
40549: EQUAL
40550: OR
40551: IFFALSE 40557
// exit ;
40553: POP
40554: POP
40555: GO 41101
// if not tmp then
40557: LD_VAR 0 13
40561: NOT
40562: IFFALSE 40566
// continue ;
40564: GO 40422
// result := true ;
40566: LD_ADDR_VAR 0 8
40570: PUSH
40571: LD_INT 1
40573: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40574: LD_VAR 0 6
40578: PUSH
40579: LD_VAR 0 13
40583: PPUSH
40584: CALL_OW 247
40588: PUSH
40589: LD_INT 2
40591: EQUAL
40592: AND
40593: PUSH
40594: LD_VAR 0 13
40598: PPUSH
40599: CALL_OW 263
40603: PUSH
40604: LD_INT 1
40606: EQUAL
40607: AND
40608: IFFALSE 40772
// begin if IsDrivenBy ( tmp ) then
40610: LD_VAR 0 13
40614: PPUSH
40615: CALL_OW 311
40619: IFFALSE 40623
// continue ;
40621: GO 40422
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40623: LD_VAR 0 6
40627: PPUSH
40628: LD_INT 3
40630: PUSH
40631: LD_INT 60
40633: PUSH
40634: EMPTY
40635: LIST
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 55
40646: PUSH
40647: EMPTY
40648: LIST
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PPUSH
40658: CALL_OW 72
40662: IFFALSE 40770
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40664: LD_ADDR_VAR 0 18
40668: PUSH
40669: LD_VAR 0 6
40673: PPUSH
40674: LD_INT 3
40676: PUSH
40677: LD_INT 60
40679: PUSH
40680: EMPTY
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 55
40692: PUSH
40693: EMPTY
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PPUSH
40704: CALL_OW 72
40708: PUSH
40709: LD_INT 1
40711: ARRAY
40712: ST_TO_ADDR
// if IsInUnit ( driver ) then
40713: LD_VAR 0 18
40717: PPUSH
40718: CALL_OW 310
40722: IFFALSE 40733
// ComExit ( driver ) ;
40724: LD_VAR 0 18
40728: PPUSH
40729: CALL 65122 0 1
// AddComEnterUnit ( driver , tmp ) ;
40733: LD_VAR 0 18
40737: PPUSH
40738: LD_VAR 0 13
40742: PPUSH
40743: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40747: LD_VAR 0 18
40751: PPUSH
40752: LD_VAR 0 7
40756: PPUSH
40757: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40761: LD_VAR 0 18
40765: PPUSH
40766: CALL_OW 181
// end ; continue ;
40770: GO 40422
// end ; if not cleaners or not tmp in cleaners then
40772: LD_VAR 0 6
40776: NOT
40777: PUSH
40778: LD_VAR 0 13
40782: PUSH
40783: LD_VAR 0 6
40787: IN
40788: NOT
40789: OR
40790: IFFALSE 41097
// begin if dep then
40792: LD_VAR 0 17
40796: IFFALSE 40932
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40798: LD_ADDR_VAR 0 16
40802: PUSH
40803: LD_VAR 0 17
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: PPUSH
40812: CALL_OW 250
40816: PPUSH
40817: LD_VAR 0 17
40821: PUSH
40822: LD_INT 1
40824: ARRAY
40825: PPUSH
40826: CALL_OW 254
40830: PPUSH
40831: LD_INT 5
40833: PPUSH
40834: CALL_OW 272
40838: PUSH
40839: LD_VAR 0 17
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: CALL_OW 251
40852: PPUSH
40853: LD_VAR 0 17
40857: PUSH
40858: LD_INT 1
40860: ARRAY
40861: PPUSH
40862: CALL_OW 254
40866: PPUSH
40867: LD_INT 5
40869: PPUSH
40870: CALL_OW 273
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40879: LD_VAR 0 16
40883: PUSH
40884: LD_INT 1
40886: ARRAY
40887: PPUSH
40888: LD_VAR 0 16
40892: PUSH
40893: LD_INT 2
40895: ARRAY
40896: PPUSH
40897: CALL_OW 488
40901: IFFALSE 40932
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40903: LD_VAR 0 13
40907: PPUSH
40908: LD_VAR 0 16
40912: PUSH
40913: LD_INT 1
40915: ARRAY
40916: PPUSH
40917: LD_VAR 0 16
40921: PUSH
40922: LD_INT 2
40924: ARRAY
40925: PPUSH
40926: CALL_OW 111
// continue ;
40930: GO 40422
// end ; end ; r := GetDir ( tmp ) ;
40932: LD_ADDR_VAR 0 15
40936: PUSH
40937: LD_VAR 0 13
40941: PPUSH
40942: CALL_OW 254
40946: ST_TO_ADDR
// if r = 5 then
40947: LD_VAR 0 15
40951: PUSH
40952: LD_INT 5
40954: EQUAL
40955: IFFALSE 40965
// r := 0 ;
40957: LD_ADDR_VAR 0 15
40961: PUSH
40962: LD_INT 0
40964: ST_TO_ADDR
// for j = r to 5 do
40965: LD_ADDR_VAR 0 10
40969: PUSH
40970: DOUBLE
40971: LD_VAR 0 15
40975: DEC
40976: ST_TO_ADDR
40977: LD_INT 5
40979: PUSH
40980: FOR_TO
40981: IFFALSE 41095
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40983: LD_ADDR_VAR 0 11
40987: PUSH
40988: LD_VAR 0 13
40992: PPUSH
40993: CALL_OW 250
40997: PPUSH
40998: LD_VAR 0 10
41002: PPUSH
41003: LD_INT 2
41005: PPUSH
41006: CALL_OW 272
41010: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41011: LD_ADDR_VAR 0 12
41015: PUSH
41016: LD_VAR 0 13
41020: PPUSH
41021: CALL_OW 251
41025: PPUSH
41026: LD_VAR 0 10
41030: PPUSH
41031: LD_INT 2
41033: PPUSH
41034: CALL_OW 273
41038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41039: LD_VAR 0 11
41043: PPUSH
41044: LD_VAR 0 12
41048: PPUSH
41049: CALL_OW 488
41053: PUSH
41054: LD_VAR 0 11
41058: PPUSH
41059: LD_VAR 0 12
41063: PPUSH
41064: CALL_OW 428
41068: NOT
41069: AND
41070: IFFALSE 41093
// begin ComMoveXY ( tmp , _x , _y ) ;
41072: LD_VAR 0 13
41076: PPUSH
41077: LD_VAR 0 11
41081: PPUSH
41082: LD_VAR 0 12
41086: PPUSH
41087: CALL_OW 111
// break ;
41091: GO 41095
// end ; end ;
41093: GO 40980
41095: POP
41096: POP
// end ; end ;
41097: GO 40422
41099: POP
41100: POP
// end ;
41101: LD_VAR 0 8
41105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
// result := false ;
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_INT 0
41125: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41126: LD_VAR 0 1
41130: NOT
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 266
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: IN
41152: NOT
41153: OR
41154: PUSH
41155: LD_VAR 0 2
41159: NOT
41160: OR
41161: PUSH
41162: LD_VAR 0 5
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 3
41178: PUSH
41179: LD_INT 4
41181: PUSH
41182: LD_INT 5
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: IN
41193: NOT
41194: OR
41195: PUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: CALL_OW 488
41210: NOT
41211: OR
41212: IFFALSE 41216
// exit ;
41214: GO 41933
// pom := GetBase ( depot ) ;
41216: LD_ADDR_VAR 0 10
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 274
41230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41231: LD_ADDR_VAR 0 11
41235: PUSH
41236: LD_VAR 0 2
41240: PPUSH
41241: LD_VAR 0 1
41245: PPUSH
41246: CALL_OW 248
41250: PPUSH
41251: CALL_OW 450
41255: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41256: LD_VAR 0 10
41260: PPUSH
41261: LD_INT 1
41263: PPUSH
41264: CALL_OW 275
41268: PUSH
41269: LD_VAR 0 11
41273: PUSH
41274: LD_INT 1
41276: ARRAY
41277: GREATEREQUAL
41278: PUSH
41279: LD_VAR 0 10
41283: PPUSH
41284: LD_INT 2
41286: PPUSH
41287: CALL_OW 275
41291: PUSH
41292: LD_VAR 0 11
41296: PUSH
41297: LD_INT 2
41299: ARRAY
41300: GREATEREQUAL
41301: AND
41302: PUSH
41303: LD_VAR 0 10
41307: PPUSH
41308: LD_INT 3
41310: PPUSH
41311: CALL_OW 275
41315: PUSH
41316: LD_VAR 0 11
41320: PUSH
41321: LD_INT 3
41323: ARRAY
41324: GREATEREQUAL
41325: AND
41326: NOT
41327: IFFALSE 41331
// exit ;
41329: GO 41933
// if GetBType ( depot ) = b_depot then
41331: LD_VAR 0 1
41335: PPUSH
41336: CALL_OW 266
41340: PUSH
41341: LD_INT 0
41343: EQUAL
41344: IFFALSE 41356
// dist := 28 else
41346: LD_ADDR_VAR 0 14
41350: PUSH
41351: LD_INT 28
41353: ST_TO_ADDR
41354: GO 41364
// dist := 36 ;
41356: LD_ADDR_VAR 0 14
41360: PUSH
41361: LD_INT 36
41363: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 3
41373: PPUSH
41374: LD_VAR 0 4
41378: PPUSH
41379: CALL_OW 297
41383: PUSH
41384: LD_VAR 0 14
41388: GREATER
41389: IFFALSE 41393
// exit ;
41391: GO 41933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41393: LD_ADDR_VAR 0 12
41397: PUSH
41398: LD_VAR 0 2
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_VAR 0 5
41417: PPUSH
41418: LD_VAR 0 1
41422: PPUSH
41423: CALL_OW 248
41427: PPUSH
41428: LD_INT 0
41430: PPUSH
41431: CALL 41938 0 6
41435: ST_TO_ADDR
// if not hexes then
41436: LD_VAR 0 12
41440: NOT
41441: IFFALSE 41445
// exit ;
41443: GO 41933
// hex := GetHexInfo ( x , y ) ;
41445: LD_ADDR_VAR 0 15
41449: PUSH
41450: LD_VAR 0 3
41454: PPUSH
41455: LD_VAR 0 4
41459: PPUSH
41460: CALL_OW 546
41464: ST_TO_ADDR
// if hex [ 1 ] then
41465: LD_VAR 0 15
41469: PUSH
41470: LD_INT 1
41472: ARRAY
41473: IFFALSE 41477
// exit ;
41475: GO 41933
// height := hex [ 2 ] ;
41477: LD_ADDR_VAR 0 13
41481: PUSH
41482: LD_VAR 0 15
41486: PUSH
41487: LD_INT 2
41489: ARRAY
41490: ST_TO_ADDR
// for i = 1 to hexes do
41491: LD_ADDR_VAR 0 7
41495: PUSH
41496: DOUBLE
41497: LD_INT 1
41499: DEC
41500: ST_TO_ADDR
41501: LD_VAR 0 12
41505: PUSH
41506: FOR_TO
41507: IFFALSE 41837
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41509: LD_VAR 0 12
41513: PUSH
41514: LD_VAR 0 7
41518: ARRAY
41519: PUSH
41520: LD_INT 1
41522: ARRAY
41523: PPUSH
41524: LD_VAR 0 12
41528: PUSH
41529: LD_VAR 0 7
41533: ARRAY
41534: PUSH
41535: LD_INT 2
41537: ARRAY
41538: PPUSH
41539: CALL_OW 488
41543: NOT
41544: PUSH
41545: LD_VAR 0 12
41549: PUSH
41550: LD_VAR 0 7
41554: ARRAY
41555: PUSH
41556: LD_INT 1
41558: ARRAY
41559: PPUSH
41560: LD_VAR 0 12
41564: PUSH
41565: LD_VAR 0 7
41569: ARRAY
41570: PUSH
41571: LD_INT 2
41573: ARRAY
41574: PPUSH
41575: CALL_OW 428
41579: PUSH
41580: LD_INT 0
41582: GREATER
41583: OR
41584: PUSH
41585: LD_VAR 0 12
41589: PUSH
41590: LD_VAR 0 7
41594: ARRAY
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PPUSH
41600: LD_VAR 0 12
41604: PUSH
41605: LD_VAR 0 7
41609: ARRAY
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: CALL_OW 351
41619: OR
41620: IFFALSE 41626
// exit ;
41622: POP
41623: POP
41624: GO 41933
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41626: LD_ADDR_VAR 0 8
41630: PUSH
41631: LD_VAR 0 12
41635: PUSH
41636: LD_VAR 0 7
41640: ARRAY
41641: PUSH
41642: LD_INT 1
41644: ARRAY
41645: PPUSH
41646: LD_VAR 0 12
41650: PUSH
41651: LD_VAR 0 7
41655: ARRAY
41656: PUSH
41657: LD_INT 2
41659: ARRAY
41660: PPUSH
41661: CALL_OW 546
41665: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41666: LD_VAR 0 8
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PUSH
41675: LD_VAR 0 8
41679: PUSH
41680: LD_INT 2
41682: ARRAY
41683: PUSH
41684: LD_VAR 0 13
41688: PUSH
41689: LD_INT 2
41691: PLUS
41692: GREATER
41693: OR
41694: PUSH
41695: LD_VAR 0 8
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: PUSH
41704: LD_VAR 0 13
41708: PUSH
41709: LD_INT 2
41711: MINUS
41712: LESS
41713: OR
41714: PUSH
41715: LD_VAR 0 8
41719: PUSH
41720: LD_INT 3
41722: ARRAY
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 8
41729: PUSH
41730: LD_INT 9
41732: PUSH
41733: LD_INT 10
41735: PUSH
41736: LD_INT 11
41738: PUSH
41739: LD_INT 12
41741: PUSH
41742: LD_INT 13
41744: PUSH
41745: LD_INT 16
41747: PUSH
41748: LD_INT 17
41750: PUSH
41751: LD_INT 18
41753: PUSH
41754: LD_INT 19
41756: PUSH
41757: LD_INT 20
41759: PUSH
41760: LD_INT 21
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: IN
41778: NOT
41779: OR
41780: PUSH
41781: LD_VAR 0 8
41785: PUSH
41786: LD_INT 5
41788: ARRAY
41789: NOT
41790: OR
41791: PUSH
41792: LD_VAR 0 8
41796: PUSH
41797: LD_INT 6
41799: ARRAY
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 7
41809: PUSH
41810: LD_INT 9
41812: PUSH
41813: LD_INT 10
41815: PUSH
41816: LD_INT 11
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: IN
41827: NOT
41828: OR
41829: IFFALSE 41835
// exit ;
41831: POP
41832: POP
41833: GO 41933
// end ;
41835: GO 41506
41837: POP
41838: POP
// side := GetSide ( depot ) ;
41839: LD_ADDR_VAR 0 9
41843: PUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 255
41853: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41854: LD_VAR 0 9
41858: PPUSH
41859: LD_VAR 0 3
41863: PPUSH
41864: LD_VAR 0 4
41868: PPUSH
41869: LD_INT 20
41871: PPUSH
41872: CALL 34254 0 4
41876: PUSH
41877: LD_INT 4
41879: ARRAY
41880: IFFALSE 41884
// exit ;
41882: GO 41933
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41884: LD_VAR 0 2
41888: PUSH
41889: LD_INT 29
41891: PUSH
41892: LD_INT 30
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: IN
41899: PUSH
41900: LD_VAR 0 3
41904: PPUSH
41905: LD_VAR 0 4
41909: PPUSH
41910: LD_VAR 0 9
41914: PPUSH
41915: CALL_OW 440
41919: NOT
41920: AND
41921: IFFALSE 41925
// exit ;
41923: GO 41933
// result := true ;
41925: LD_ADDR_VAR 0 6
41929: PUSH
41930: LD_INT 1
41932: ST_TO_ADDR
// end ;
41933: LD_VAR 0 6
41937: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
// result = [ ] ;
41998: LD_ADDR_VAR 0 7
42002: PUSH
42003: EMPTY
42004: ST_TO_ADDR
// temp_list = [ ] ;
42005: LD_ADDR_VAR 0 9
42009: PUSH
42010: EMPTY
42011: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42012: LD_VAR 0 4
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 4
42031: PUSH
42032: LD_INT 5
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: IN
42043: NOT
42044: PUSH
42045: LD_VAR 0 1
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: IN
42060: PUSH
42061: LD_VAR 0 5
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: IN
42080: NOT
42081: AND
42082: OR
42083: IFFALSE 42087
// exit ;
42085: GO 60478
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42087: LD_VAR 0 1
42091: PUSH
42092: LD_INT 6
42094: PUSH
42095: LD_INT 7
42097: PUSH
42098: LD_INT 8
42100: PUSH
42101: LD_INT 13
42103: PUSH
42104: LD_INT 12
42106: PUSH
42107: LD_INT 15
42109: PUSH
42110: LD_INT 11
42112: PUSH
42113: LD_INT 14
42115: PUSH
42116: LD_INT 10
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: IN
42130: IFFALSE 42140
// btype = b_lab ;
42132: LD_ADDR_VAR 0 1
42136: PUSH
42137: LD_INT 6
42139: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42140: LD_VAR 0 6
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: LIST
42158: IN
42159: NOT
42160: PUSH
42161: LD_VAR 0 1
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: LD_INT 6
42180: PUSH
42181: LD_INT 36
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: LD_INT 31
42192: PUSH
42193: LD_INT 32
42195: PUSH
42196: LD_INT 33
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: IN
42212: NOT
42213: PUSH
42214: LD_VAR 0 6
42218: PUSH
42219: LD_INT 1
42221: EQUAL
42222: AND
42223: OR
42224: PUSH
42225: LD_VAR 0 1
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: IN
42240: NOT
42241: PUSH
42242: LD_VAR 0 6
42246: PUSH
42247: LD_INT 2
42249: EQUAL
42250: AND
42251: OR
42252: IFFALSE 42262
// mode = 0 ;
42254: LD_ADDR_VAR 0 6
42258: PUSH
42259: LD_INT 0
42261: ST_TO_ADDR
// case mode of 0 :
42262: LD_VAR 0 6
42266: PUSH
42267: LD_INT 0
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 53728
42275: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42276: LD_ADDR_VAR 0 11
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42469: LD_ADDR_VAR 0 12
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42665: LD_ADDR_VAR 0 13
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 3
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42864: LD_ADDR_VAR 0 14
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43060: LD_ADDR_VAR 0 15
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43253: LD_ADDR_VAR 0 16
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43446: LD_ADDR_VAR 0 17
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43676: LD_ADDR_VAR 0 18
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43906: LD_ADDR_VAR 0 19
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44136: LD_ADDR_VAR 0 20
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44366: LD_ADDR_VAR 0 21
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44596: LD_ADDR_VAR 0 22
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44826: LD_ADDR_VAR 0 23
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: LD_INT 3
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 3
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45106: LD_ADDR_VAR 0 24
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45382: LD_ADDR_VAR 0 25
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 3
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45656: LD_ADDR_VAR 0 26
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 3
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45932: LD_ADDR_VAR 0 27
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46212: LD_ADDR_VAR 0 28
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46494: LD_ADDR_VAR 0 29
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46773: LD_ADDR_VAR 0 30
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47051: LD_ADDR_VAR 0 31
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 3
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47329: LD_ADDR_VAR 0 32
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47607: LD_ADDR_VAR 0 33
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 3
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 3
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47886: LD_ADDR_VAR 0 34
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48166: LD_ADDR_VAR 0 35
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48278: LD_ADDR_VAR 0 36
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48390: LD_ADDR_VAR 0 37
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48502: LD_ADDR_VAR 0 38
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48614: LD_ADDR_VAR 0 39
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48726: LD_ADDR_VAR 0 40
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48838: LD_ADDR_VAR 0 41
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 3
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: NEG
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49188: LD_ADDR_VAR 0 42
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 3
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 3
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49538: LD_ADDR_VAR 0 43
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 3
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49886: LD_ADDR_VAR 0 44
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 3
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50236: LD_ADDR_VAR 0 45
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 3
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: LD_INT 3
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50586: LD_ADDR_VAR 0 46
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50934: LD_ADDR_VAR 0 47
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51085: LD_ADDR_VAR 0 48
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51232: LD_ADDR_VAR 0 49
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51376: LD_ADDR_VAR 0 50
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51520: LD_ADDR_VAR 0 51
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51667: LD_ADDR_VAR 0 52
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51818: LD_ADDR_VAR 0 53
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52048: LD_ADDR_VAR 0 54
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52278: LD_ADDR_VAR 0 55
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52508: LD_ADDR_VAR 0 56
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52738: LD_ADDR_VAR 0 57
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52968: LD_ADDR_VAR 0 58
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53198: LD_ADDR_VAR 0 59
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53286: LD_ADDR_VAR 0 60
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53374: LD_ADDR_VAR 0 61
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53462: LD_ADDR_VAR 0 62
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53550: LD_ADDR_VAR 0 63
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53638: LD_ADDR_VAR 0 64
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// end ; 1 :
53726: GO 59623
53728: LD_INT 1
53730: DOUBLE
53731: EQUAL
53732: IFTRUE 53736
53734: GO 56359
53736: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53737: LD_ADDR_VAR 0 11
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53781: LD_ADDR_VAR 0 12
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53822: LD_ADDR_VAR 0 13
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53862: LD_ADDR_VAR 0 14
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53903: LD_ADDR_VAR 0 15
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53947: LD_ADDR_VAR 0 16
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: NEG
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53993: LD_ADDR_VAR 0 17
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54037: LD_ADDR_VAR 0 18
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54078: LD_ADDR_VAR 0 19
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54118: LD_ADDR_VAR 0 20
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54159: LD_ADDR_VAR 0 21
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54203: LD_ADDR_VAR 0 22
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: LD_INT 3
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54249: LD_ADDR_VAR 0 23
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 4
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 3
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54293: LD_ADDR_VAR 0 24
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 4
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54334: LD_ADDR_VAR 0 25
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 4
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: LIST
54373: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54374: LD_ADDR_VAR 0 26
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 4
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54415: LD_ADDR_VAR 0 27
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 4
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54459: LD_ADDR_VAR 0 28
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 4
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 4
54490: NEG
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54505: LD_ADDR_VAR 0 29
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 4
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 3
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 5
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 5
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 6
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 6
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 5
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54660: LD_ADDR_VAR 0 30
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 4
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 5
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 5
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 5
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 6
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 6
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54803: LD_ADDR_VAR 0 31
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 4
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: LD_INT 4
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 5
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 5
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 4
54890: PUSH
54891: LD_INT 5
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 6
54900: PUSH
54901: LD_INT 5
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 6
54910: PUSH
54911: LD_INT 6
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: PUSH
54921: LD_INT 6
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54942: LD_ADDR_VAR 0 32
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 4
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 5
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 4
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 6
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 6
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 5
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55085: LD_ADDR_VAR 0 33
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 4
55137: NEG
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 5
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 5
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 6
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 6
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55240: LD_ADDR_VAR 0 34
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 3
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: NEG
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 4
55307: NEG
55308: PUSH
55309: LD_INT 4
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 4
55319: NEG
55320: PUSH
55321: LD_INT 5
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 5
55331: NEG
55332: PUSH
55333: LD_INT 4
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 5
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: NEG
55356: PUSH
55357: LD_INT 6
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 6
55367: NEG
55368: PUSH
55369: LD_INT 5
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 6
55379: NEG
55380: PUSH
55381: LD_INT 6
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55403: LD_ADDR_VAR 0 41
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55447: LD_ADDR_VAR 0 42
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55488: LD_ADDR_VAR 0 43
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55528: LD_ADDR_VAR 0 44
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55569: LD_ADDR_VAR 0 45
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55613: LD_ADDR_VAR 0 46
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55659: LD_ADDR_VAR 0 47
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55692: LD_ADDR_VAR 0 48
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55723: LD_ADDR_VAR 0 49
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55752: LD_ADDR_VAR 0 50
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55781: LD_ADDR_VAR 0 51
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55812: LD_ADDR_VAR 0 52
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55845: LD_ADDR_VAR 0 53
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55889: LD_ADDR_VAR 0 54
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55930: LD_ADDR_VAR 0 55
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55970: LD_ADDR_VAR 0 56
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56011: LD_ADDR_VAR 0 57
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56055: LD_ADDR_VAR 0 58
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56101: LD_ADDR_VAR 0 59
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56145: LD_ADDR_VAR 0 60
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56186: LD_ADDR_VAR 0 61
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56226: LD_ADDR_VAR 0 62
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56267: LD_ADDR_VAR 0 63
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56311: LD_ADDR_VAR 0 64
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// end ; 2 :
56357: GO 59623
56359: LD_INT 2
56361: DOUBLE
56362: EQUAL
56363: IFTRUE 56367
56365: GO 59622
56367: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56368: LD_ADDR_VAR 0 29
56372: PUSH
56373: LD_INT 4
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 5
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 5
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 4
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 4
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 5
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 5
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 4
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 5
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 4
56707: NEG
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 4
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 5
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 5
56813: NEG
56814: PUSH
56815: LD_INT 4
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: NEG
56826: PUSH
56827: LD_INT 5
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: LD_INT 5
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 5
56849: NEG
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56906: LD_ADDR_VAR 0 30
56910: PUSH
56911: LD_INT 4
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 5
56933: PUSH
56934: LD_INT 4
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 5
56943: PUSH
56944: LD_INT 5
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: LD_INT 5
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 5
56983: PUSH
56984: LD_INT 3
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 5
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 4
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 4
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 5
57152: NEG
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 5
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 5
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 4
57294: NEG
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 4
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 5
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 4
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 5
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 5
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57453: LD_ADDR_VAR 0 31
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 4
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 4
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 5
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 5
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 5
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: LD_INT 4
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 5
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 3
57679: NEG
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 4
57703: NEG
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 5
57715: NEG
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 5
57727: NEG
57728: PUSH
57729: LD_INT 5
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: LD_INT 5
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 5
57751: NEG
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 4
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 4
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 5
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 5
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58003: LD_ADDR_VAR 0 32
58007: PUSH
58008: LD_INT 4
58010: NEG
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 4
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 5
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 5
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 4
58208: NEG
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 5
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 4
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 4
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 5
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 4
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 4
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: LD_INT 4
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 5
58445: PUSH
58446: LD_INT 5
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: PUSH
58456: LD_INT 5
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 5
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58550: LD_ADDR_VAR 0 33
58554: PUSH
58555: LD_INT 4
58557: NEG
58558: PUSH
58559: LD_INT 4
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 4
58569: NEG
58570: PUSH
58571: LD_INT 5
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 4
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 5
58617: NEG
58618: PUSH
58619: LD_INT 4
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 5
58629: NEG
58630: PUSH
58631: LD_INT 5
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: LD_INT 5
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 5
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 4
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 5
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 5
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 4
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 4
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 4
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 5
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59088: LD_ADDR_VAR 0 34
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 5
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 4
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: LD_INT 4
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 5
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 4
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 3
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: LD_INT 4
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 5
59320: PUSH
59321: LD_INT 5
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: LD_INT 5
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: LD_INT 4
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 5
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: LD_INT 5
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 4
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 5
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 5
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// end ; end ;
59620: GO 59623
59622: POP
// case btype of b_depot , b_warehouse :
59623: LD_VAR 0 1
59627: PUSH
59628: LD_INT 0
59630: DOUBLE
59631: EQUAL
59632: IFTRUE 59642
59634: LD_INT 1
59636: DOUBLE
59637: EQUAL
59638: IFTRUE 59642
59640: GO 59843
59642: POP
// case nation of nation_american :
59643: LD_VAR 0 5
59647: PUSH
59648: LD_INT 1
59650: DOUBLE
59651: EQUAL
59652: IFTRUE 59656
59654: GO 59712
59656: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59657: LD_ADDR_VAR 0 9
59661: PUSH
59662: LD_VAR 0 11
59666: PUSH
59667: LD_VAR 0 12
59671: PUSH
59672: LD_VAR 0 13
59676: PUSH
59677: LD_VAR 0 14
59681: PUSH
59682: LD_VAR 0 15
59686: PUSH
59687: LD_VAR 0 16
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: PUSH
59700: LD_VAR 0 4
59704: PUSH
59705: LD_INT 1
59707: PLUS
59708: ARRAY
59709: ST_TO_ADDR
59710: GO 59841
59712: LD_INT 2
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59720
59718: GO 59776
59720: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59721: LD_ADDR_VAR 0 9
59725: PUSH
59726: LD_VAR 0 17
59730: PUSH
59731: LD_VAR 0 18
59735: PUSH
59736: LD_VAR 0 19
59740: PUSH
59741: LD_VAR 0 20
59745: PUSH
59746: LD_VAR 0 21
59750: PUSH
59751: LD_VAR 0 22
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: PUSH
59764: LD_VAR 0 4
59768: PUSH
59769: LD_INT 1
59771: PLUS
59772: ARRAY
59773: ST_TO_ADDR
59774: GO 59841
59776: LD_INT 3
59778: DOUBLE
59779: EQUAL
59780: IFTRUE 59784
59782: GO 59840
59784: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59785: LD_ADDR_VAR 0 9
59789: PUSH
59790: LD_VAR 0 23
59794: PUSH
59795: LD_VAR 0 24
59799: PUSH
59800: LD_VAR 0 25
59804: PUSH
59805: LD_VAR 0 26
59809: PUSH
59810: LD_VAR 0 27
59814: PUSH
59815: LD_VAR 0 28
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: PUSH
59828: LD_VAR 0 4
59832: PUSH
59833: LD_INT 1
59835: PLUS
59836: ARRAY
59837: ST_TO_ADDR
59838: GO 59841
59840: POP
59841: GO 60396
59843: LD_INT 2
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59857
59849: LD_INT 3
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59857
59855: GO 59913
59857: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59858: LD_ADDR_VAR 0 9
59862: PUSH
59863: LD_VAR 0 29
59867: PUSH
59868: LD_VAR 0 30
59872: PUSH
59873: LD_VAR 0 31
59877: PUSH
59878: LD_VAR 0 32
59882: PUSH
59883: LD_VAR 0 33
59887: PUSH
59888: LD_VAR 0 34
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: PUSH
59901: LD_VAR 0 4
59905: PUSH
59906: LD_INT 1
59908: PLUS
59909: ARRAY
59910: ST_TO_ADDR
59911: GO 60396
59913: LD_INT 16
59915: DOUBLE
59916: EQUAL
59917: IFTRUE 59975
59919: LD_INT 17
59921: DOUBLE
59922: EQUAL
59923: IFTRUE 59975
59925: LD_INT 18
59927: DOUBLE
59928: EQUAL
59929: IFTRUE 59975
59931: LD_INT 19
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59975
59937: LD_INT 22
59939: DOUBLE
59940: EQUAL
59941: IFTRUE 59975
59943: LD_INT 20
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59975
59949: LD_INT 21
59951: DOUBLE
59952: EQUAL
59953: IFTRUE 59975
59955: LD_INT 23
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59975
59961: LD_INT 24
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59975
59967: LD_INT 25
59969: DOUBLE
59970: EQUAL
59971: IFTRUE 59975
59973: GO 60031
59975: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59976: LD_ADDR_VAR 0 9
59980: PUSH
59981: LD_VAR 0 35
59985: PUSH
59986: LD_VAR 0 36
59990: PUSH
59991: LD_VAR 0 37
59995: PUSH
59996: LD_VAR 0 38
60000: PUSH
60001: LD_VAR 0 39
60005: PUSH
60006: LD_VAR 0 40
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: PUSH
60019: LD_VAR 0 4
60023: PUSH
60024: LD_INT 1
60026: PLUS
60027: ARRAY
60028: ST_TO_ADDR
60029: GO 60396
60031: LD_INT 6
60033: DOUBLE
60034: EQUAL
60035: IFTRUE 60087
60037: LD_INT 7
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60087
60043: LD_INT 8
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60087
60049: LD_INT 13
60051: DOUBLE
60052: EQUAL
60053: IFTRUE 60087
60055: LD_INT 12
60057: DOUBLE
60058: EQUAL
60059: IFTRUE 60087
60061: LD_INT 15
60063: DOUBLE
60064: EQUAL
60065: IFTRUE 60087
60067: LD_INT 11
60069: DOUBLE
60070: EQUAL
60071: IFTRUE 60087
60073: LD_INT 14
60075: DOUBLE
60076: EQUAL
60077: IFTRUE 60087
60079: LD_INT 10
60081: DOUBLE
60082: EQUAL
60083: IFTRUE 60087
60085: GO 60143
60087: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60088: LD_ADDR_VAR 0 9
60092: PUSH
60093: LD_VAR 0 41
60097: PUSH
60098: LD_VAR 0 42
60102: PUSH
60103: LD_VAR 0 43
60107: PUSH
60108: LD_VAR 0 44
60112: PUSH
60113: LD_VAR 0 45
60117: PUSH
60118: LD_VAR 0 46
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: LD_VAR 0 4
60135: PUSH
60136: LD_INT 1
60138: PLUS
60139: ARRAY
60140: ST_TO_ADDR
60141: GO 60396
60143: LD_INT 36
60145: DOUBLE
60146: EQUAL
60147: IFTRUE 60151
60149: GO 60207
60151: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60152: LD_ADDR_VAR 0 9
60156: PUSH
60157: LD_VAR 0 47
60161: PUSH
60162: LD_VAR 0 48
60166: PUSH
60167: LD_VAR 0 49
60171: PUSH
60172: LD_VAR 0 50
60176: PUSH
60177: LD_VAR 0 51
60181: PUSH
60182: LD_VAR 0 52
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: PUSH
60195: LD_VAR 0 4
60199: PUSH
60200: LD_INT 1
60202: PLUS
60203: ARRAY
60204: ST_TO_ADDR
60205: GO 60396
60207: LD_INT 4
60209: DOUBLE
60210: EQUAL
60211: IFTRUE 60233
60213: LD_INT 5
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60233
60219: LD_INT 34
60221: DOUBLE
60222: EQUAL
60223: IFTRUE 60233
60225: LD_INT 37
60227: DOUBLE
60228: EQUAL
60229: IFTRUE 60233
60231: GO 60289
60233: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60234: LD_ADDR_VAR 0 9
60238: PUSH
60239: LD_VAR 0 53
60243: PUSH
60244: LD_VAR 0 54
60248: PUSH
60249: LD_VAR 0 55
60253: PUSH
60254: LD_VAR 0 56
60258: PUSH
60259: LD_VAR 0 57
60263: PUSH
60264: LD_VAR 0 58
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: PUSH
60277: LD_VAR 0 4
60281: PUSH
60282: LD_INT 1
60284: PLUS
60285: ARRAY
60286: ST_TO_ADDR
60287: GO 60396
60289: LD_INT 31
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60339
60295: LD_INT 32
60297: DOUBLE
60298: EQUAL
60299: IFTRUE 60339
60301: LD_INT 33
60303: DOUBLE
60304: EQUAL
60305: IFTRUE 60339
60307: LD_INT 27
60309: DOUBLE
60310: EQUAL
60311: IFTRUE 60339
60313: LD_INT 26
60315: DOUBLE
60316: EQUAL
60317: IFTRUE 60339
60319: LD_INT 28
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60339
60325: LD_INT 29
60327: DOUBLE
60328: EQUAL
60329: IFTRUE 60339
60331: LD_INT 30
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60339
60337: GO 60395
60339: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60340: LD_ADDR_VAR 0 9
60344: PUSH
60345: LD_VAR 0 59
60349: PUSH
60350: LD_VAR 0 60
60354: PUSH
60355: LD_VAR 0 61
60359: PUSH
60360: LD_VAR 0 62
60364: PUSH
60365: LD_VAR 0 63
60369: PUSH
60370: LD_VAR 0 64
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: LD_VAR 0 4
60387: PUSH
60388: LD_INT 1
60390: PLUS
60391: ARRAY
60392: ST_TO_ADDR
60393: GO 60396
60395: POP
// temp_list2 = [ ] ;
60396: LD_ADDR_VAR 0 10
60400: PUSH
60401: EMPTY
60402: ST_TO_ADDR
// for i in temp_list do
60403: LD_ADDR_VAR 0 8
60407: PUSH
60408: LD_VAR 0 9
60412: PUSH
60413: FOR_IN
60414: IFFALSE 60466
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60416: LD_ADDR_VAR 0 10
60420: PUSH
60421: LD_VAR 0 10
60425: PUSH
60426: LD_VAR 0 8
60430: PUSH
60431: LD_INT 1
60433: ARRAY
60434: PUSH
60435: LD_VAR 0 2
60439: PLUS
60440: PUSH
60441: LD_VAR 0 8
60445: PUSH
60446: LD_INT 2
60448: ARRAY
60449: PUSH
60450: LD_VAR 0 3
60454: PLUS
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: ADD
60463: ST_TO_ADDR
60464: GO 60413
60466: POP
60467: POP
// result = temp_list2 ;
60468: LD_ADDR_VAR 0 7
60472: PUSH
60473: LD_VAR 0 10
60477: ST_TO_ADDR
// end ;
60478: LD_VAR 0 7
60482: RET
// export function EnemyInRange ( unit , dist ) ; begin
60483: LD_INT 0
60485: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60486: LD_ADDR_VAR 0 3
60490: PUSH
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 255
60500: PPUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 250
60510: PPUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 251
60520: PPUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: CALL 34254 0 4
60530: PUSH
60531: LD_INT 4
60533: ARRAY
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 3
60539: RET
// export function PlayerSeeMe ( unit ) ; begin
60540: LD_INT 0
60542: PPUSH
// result := See ( your_side , unit ) ;
60543: LD_ADDR_VAR 0 2
60547: PUSH
60548: LD_OWVAR 2
60552: PPUSH
60553: LD_VAR 0 1
60557: PPUSH
60558: CALL_OW 292
60562: ST_TO_ADDR
// end ;
60563: LD_VAR 0 2
60567: RET
// export function ReverseDir ( unit ) ; begin
60568: LD_INT 0
60570: PPUSH
// if not unit then
60571: LD_VAR 0 1
60575: NOT
60576: IFFALSE 60580
// exit ;
60578: GO 60603
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60580: LD_ADDR_VAR 0 2
60584: PUSH
60585: LD_VAR 0 1
60589: PPUSH
60590: CALL_OW 254
60594: PUSH
60595: LD_INT 3
60597: PLUS
60598: PUSH
60599: LD_INT 6
60601: MOD
60602: ST_TO_ADDR
// end ;
60603: LD_VAR 0 2
60607: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60608: LD_INT 0
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
60614: PPUSH
// if not hexes then
60615: LD_VAR 0 2
60619: NOT
60620: IFFALSE 60624
// exit ;
60622: GO 60772
// dist := 9999 ;
60624: LD_ADDR_VAR 0 5
60628: PUSH
60629: LD_INT 9999
60631: ST_TO_ADDR
// for i = 1 to hexes do
60632: LD_ADDR_VAR 0 4
60636: PUSH
60637: DOUBLE
60638: LD_INT 1
60640: DEC
60641: ST_TO_ADDR
60642: LD_VAR 0 2
60646: PUSH
60647: FOR_TO
60648: IFFALSE 60760
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60650: LD_VAR 0 1
60654: PPUSH
60655: LD_VAR 0 2
60659: PUSH
60660: LD_VAR 0 4
60664: ARRAY
60665: PUSH
60666: LD_INT 1
60668: ARRAY
60669: PPUSH
60670: LD_VAR 0 2
60674: PUSH
60675: LD_VAR 0 4
60679: ARRAY
60680: PUSH
60681: LD_INT 2
60683: ARRAY
60684: PPUSH
60685: CALL_OW 297
60689: PUSH
60690: LD_VAR 0 5
60694: LESS
60695: IFFALSE 60758
// begin hex := hexes [ i ] ;
60697: LD_ADDR_VAR 0 7
60701: PUSH
60702: LD_VAR 0 2
60706: PUSH
60707: LD_VAR 0 4
60711: ARRAY
60712: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60713: LD_ADDR_VAR 0 5
60717: PUSH
60718: LD_VAR 0 1
60722: PPUSH
60723: LD_VAR 0 2
60727: PUSH
60728: LD_VAR 0 4
60732: ARRAY
60733: PUSH
60734: LD_INT 1
60736: ARRAY
60737: PPUSH
60738: LD_VAR 0 2
60742: PUSH
60743: LD_VAR 0 4
60747: ARRAY
60748: PUSH
60749: LD_INT 2
60751: ARRAY
60752: PPUSH
60753: CALL_OW 297
60757: ST_TO_ADDR
// end ; end ;
60758: GO 60647
60760: POP
60761: POP
// result := hex ;
60762: LD_ADDR_VAR 0 3
60766: PUSH
60767: LD_VAR 0 7
60771: ST_TO_ADDR
// end ;
60772: LD_VAR 0 3
60776: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60777: LD_INT 0
60779: PPUSH
60780: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60781: LD_VAR 0 1
60785: NOT
60786: PUSH
60787: LD_VAR 0 1
60791: PUSH
60792: LD_INT 21
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 23
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PPUSH
60816: CALL_OW 69
60820: IN
60821: NOT
60822: OR
60823: IFFALSE 60827
// exit ;
60825: GO 60874
// for i = 1 to 3 do
60827: LD_ADDR_VAR 0 3
60831: PUSH
60832: DOUBLE
60833: LD_INT 1
60835: DEC
60836: ST_TO_ADDR
60837: LD_INT 3
60839: PUSH
60840: FOR_TO
60841: IFFALSE 60872
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 250
60852: PPUSH
60853: LD_VAR 0 1
60857: PPUSH
60858: CALL_OW 251
60862: PPUSH
60863: LD_INT 1
60865: PPUSH
60866: CALL_OW 453
60870: GO 60840
60872: POP
60873: POP
// end ;
60874: LD_VAR 0 2
60878: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60879: LD_INT 0
60881: PPUSH
60882: PPUSH
60883: PPUSH
60884: PPUSH
60885: PPUSH
60886: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60887: LD_VAR 0 1
60891: NOT
60892: PUSH
60893: LD_VAR 0 2
60897: NOT
60898: OR
60899: PUSH
60900: LD_VAR 0 1
60904: PPUSH
60905: CALL_OW 314
60909: OR
60910: IFFALSE 60914
// exit ;
60912: GO 61355
// x := GetX ( enemy_unit ) ;
60914: LD_ADDR_VAR 0 7
60918: PUSH
60919: LD_VAR 0 2
60923: PPUSH
60924: CALL_OW 250
60928: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60929: LD_ADDR_VAR 0 8
60933: PUSH
60934: LD_VAR 0 2
60938: PPUSH
60939: CALL_OW 251
60943: ST_TO_ADDR
// if not x or not y then
60944: LD_VAR 0 7
60948: NOT
60949: PUSH
60950: LD_VAR 0 8
60954: NOT
60955: OR
60956: IFFALSE 60960
// exit ;
60958: GO 61355
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60960: LD_ADDR_VAR 0 6
60964: PUSH
60965: LD_VAR 0 7
60969: PPUSH
60970: LD_INT 0
60972: PPUSH
60973: LD_INT 4
60975: PPUSH
60976: CALL_OW 272
60980: PUSH
60981: LD_VAR 0 8
60985: PPUSH
60986: LD_INT 0
60988: PPUSH
60989: LD_INT 4
60991: PPUSH
60992: CALL_OW 273
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_VAR 0 7
61005: PPUSH
61006: LD_INT 1
61008: PPUSH
61009: LD_INT 4
61011: PPUSH
61012: CALL_OW 272
61016: PUSH
61017: LD_VAR 0 8
61021: PPUSH
61022: LD_INT 1
61024: PPUSH
61025: LD_INT 4
61027: PPUSH
61028: CALL_OW 273
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_VAR 0 7
61041: PPUSH
61042: LD_INT 2
61044: PPUSH
61045: LD_INT 4
61047: PPUSH
61048: CALL_OW 272
61052: PUSH
61053: LD_VAR 0 8
61057: PPUSH
61058: LD_INT 2
61060: PPUSH
61061: LD_INT 4
61063: PPUSH
61064: CALL_OW 273
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_VAR 0 7
61077: PPUSH
61078: LD_INT 3
61080: PPUSH
61081: LD_INT 4
61083: PPUSH
61084: CALL_OW 272
61088: PUSH
61089: LD_VAR 0 8
61093: PPUSH
61094: LD_INT 3
61096: PPUSH
61097: LD_INT 4
61099: PPUSH
61100: CALL_OW 273
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_VAR 0 7
61113: PPUSH
61114: LD_INT 4
61116: PPUSH
61117: LD_INT 4
61119: PPUSH
61120: CALL_OW 272
61124: PUSH
61125: LD_VAR 0 8
61129: PPUSH
61130: LD_INT 4
61132: PPUSH
61133: LD_INT 4
61135: PPUSH
61136: CALL_OW 273
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_VAR 0 7
61149: PPUSH
61150: LD_INT 5
61152: PPUSH
61153: LD_INT 4
61155: PPUSH
61156: CALL_OW 272
61160: PUSH
61161: LD_VAR 0 8
61165: PPUSH
61166: LD_INT 5
61168: PPUSH
61169: LD_INT 4
61171: PPUSH
61172: CALL_OW 273
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// for i = tmp downto 1 do
61189: LD_ADDR_VAR 0 4
61193: PUSH
61194: DOUBLE
61195: LD_VAR 0 6
61199: INC
61200: ST_TO_ADDR
61201: LD_INT 1
61203: PUSH
61204: FOR_DOWNTO
61205: IFFALSE 61306
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61207: LD_VAR 0 6
61211: PUSH
61212: LD_VAR 0 4
61216: ARRAY
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: PPUSH
61222: LD_VAR 0 6
61226: PUSH
61227: LD_VAR 0 4
61231: ARRAY
61232: PUSH
61233: LD_INT 2
61235: ARRAY
61236: PPUSH
61237: CALL_OW 488
61241: NOT
61242: PUSH
61243: LD_VAR 0 6
61247: PUSH
61248: LD_VAR 0 4
61252: ARRAY
61253: PUSH
61254: LD_INT 1
61256: ARRAY
61257: PPUSH
61258: LD_VAR 0 6
61262: PUSH
61263: LD_VAR 0 4
61267: ARRAY
61268: PUSH
61269: LD_INT 2
61271: ARRAY
61272: PPUSH
61273: CALL_OW 428
61277: PUSH
61278: LD_INT 0
61280: NONEQUAL
61281: OR
61282: IFFALSE 61304
// tmp := Delete ( tmp , i ) ;
61284: LD_ADDR_VAR 0 6
61288: PUSH
61289: LD_VAR 0 6
61293: PPUSH
61294: LD_VAR 0 4
61298: PPUSH
61299: CALL_OW 3
61303: ST_TO_ADDR
61304: GO 61204
61306: POP
61307: POP
// j := GetClosestHex ( unit , tmp ) ;
61308: LD_ADDR_VAR 0 5
61312: PUSH
61313: LD_VAR 0 1
61317: PPUSH
61318: LD_VAR 0 6
61322: PPUSH
61323: CALL 60608 0 2
61327: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61328: LD_VAR 0 1
61332: PPUSH
61333: LD_VAR 0 5
61337: PUSH
61338: LD_INT 1
61340: ARRAY
61341: PPUSH
61342: LD_VAR 0 5
61346: PUSH
61347: LD_INT 2
61349: ARRAY
61350: PPUSH
61351: CALL_OW 111
// end ;
61355: LD_VAR 0 3
61359: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61360: LD_INT 0
61362: PPUSH
61363: PPUSH
61364: PPUSH
// uc_side = 0 ;
61365: LD_ADDR_OWVAR 20
61369: PUSH
61370: LD_INT 0
61372: ST_TO_ADDR
// uc_nation = 0 ;
61373: LD_ADDR_OWVAR 21
61377: PUSH
61378: LD_INT 0
61380: ST_TO_ADDR
// InitHc_All ( ) ;
61381: CALL_OW 584
// InitVc ;
61385: CALL_OW 20
// if mastodonts then
61389: LD_VAR 0 6
61393: IFFALSE 61460
// for i = 1 to mastodonts do
61395: LD_ADDR_VAR 0 11
61399: PUSH
61400: DOUBLE
61401: LD_INT 1
61403: DEC
61404: ST_TO_ADDR
61405: LD_VAR 0 6
61409: PUSH
61410: FOR_TO
61411: IFFALSE 61458
// begin vc_chassis := 31 ;
61413: LD_ADDR_OWVAR 37
61417: PUSH
61418: LD_INT 31
61420: ST_TO_ADDR
// vc_control := control_rider ;
61421: LD_ADDR_OWVAR 38
61425: PUSH
61426: LD_INT 4
61428: ST_TO_ADDR
// animal := CreateVehicle ;
61429: LD_ADDR_VAR 0 12
61433: PUSH
61434: CALL_OW 45
61438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61439: LD_VAR 0 12
61443: PPUSH
61444: LD_VAR 0 8
61448: PPUSH
61449: LD_INT 0
61451: PPUSH
61452: CALL 63648 0 3
// end ;
61456: GO 61410
61458: POP
61459: POP
// if horses then
61460: LD_VAR 0 5
61464: IFFALSE 61531
// for i = 1 to horses do
61466: LD_ADDR_VAR 0 11
61470: PUSH
61471: DOUBLE
61472: LD_INT 1
61474: DEC
61475: ST_TO_ADDR
61476: LD_VAR 0 5
61480: PUSH
61481: FOR_TO
61482: IFFALSE 61529
// begin hc_class := 21 ;
61484: LD_ADDR_OWVAR 28
61488: PUSH
61489: LD_INT 21
61491: ST_TO_ADDR
// hc_gallery :=  ;
61492: LD_ADDR_OWVAR 33
61496: PUSH
61497: LD_STRING 
61499: ST_TO_ADDR
// animal := CreateHuman ;
61500: LD_ADDR_VAR 0 12
61504: PUSH
61505: CALL_OW 44
61509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61510: LD_VAR 0 12
61514: PPUSH
61515: LD_VAR 0 8
61519: PPUSH
61520: LD_INT 0
61522: PPUSH
61523: CALL 63648 0 3
// end ;
61527: GO 61481
61529: POP
61530: POP
// if birds then
61531: LD_VAR 0 1
61535: IFFALSE 61602
// for i = 1 to birds do
61537: LD_ADDR_VAR 0 11
61541: PUSH
61542: DOUBLE
61543: LD_INT 1
61545: DEC
61546: ST_TO_ADDR
61547: LD_VAR 0 1
61551: PUSH
61552: FOR_TO
61553: IFFALSE 61600
// begin hc_class = 18 ;
61555: LD_ADDR_OWVAR 28
61559: PUSH
61560: LD_INT 18
61562: ST_TO_ADDR
// hc_gallery =  ;
61563: LD_ADDR_OWVAR 33
61567: PUSH
61568: LD_STRING 
61570: ST_TO_ADDR
// animal := CreateHuman ;
61571: LD_ADDR_VAR 0 12
61575: PUSH
61576: CALL_OW 44
61580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61581: LD_VAR 0 12
61585: PPUSH
61586: LD_VAR 0 8
61590: PPUSH
61591: LD_INT 0
61593: PPUSH
61594: CALL 63648 0 3
// end ;
61598: GO 61552
61600: POP
61601: POP
// if tigers then
61602: LD_VAR 0 2
61606: IFFALSE 61690
// for i = 1 to tigers do
61608: LD_ADDR_VAR 0 11
61612: PUSH
61613: DOUBLE
61614: LD_INT 1
61616: DEC
61617: ST_TO_ADDR
61618: LD_VAR 0 2
61622: PUSH
61623: FOR_TO
61624: IFFALSE 61688
// begin hc_class = class_tiger ;
61626: LD_ADDR_OWVAR 28
61630: PUSH
61631: LD_INT 14
61633: ST_TO_ADDR
// hc_gallery =  ;
61634: LD_ADDR_OWVAR 33
61638: PUSH
61639: LD_STRING 
61641: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61642: LD_ADDR_OWVAR 35
61646: PUSH
61647: LD_INT 7
61649: NEG
61650: PPUSH
61651: LD_INT 7
61653: PPUSH
61654: CALL_OW 12
61658: ST_TO_ADDR
// animal := CreateHuman ;
61659: LD_ADDR_VAR 0 12
61663: PUSH
61664: CALL_OW 44
61668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61669: LD_VAR 0 12
61673: PPUSH
61674: LD_VAR 0 8
61678: PPUSH
61679: LD_INT 0
61681: PPUSH
61682: CALL 63648 0 3
// end ;
61686: GO 61623
61688: POP
61689: POP
// if apemans then
61690: LD_VAR 0 3
61694: IFFALSE 61817
// for i = 1 to apemans do
61696: LD_ADDR_VAR 0 11
61700: PUSH
61701: DOUBLE
61702: LD_INT 1
61704: DEC
61705: ST_TO_ADDR
61706: LD_VAR 0 3
61710: PUSH
61711: FOR_TO
61712: IFFALSE 61815
// begin hc_class = class_apeman ;
61714: LD_ADDR_OWVAR 28
61718: PUSH
61719: LD_INT 12
61721: ST_TO_ADDR
// hc_gallery =  ;
61722: LD_ADDR_OWVAR 33
61726: PUSH
61727: LD_STRING 
61729: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61730: LD_ADDR_OWVAR 35
61734: PUSH
61735: LD_INT 5
61737: NEG
61738: PPUSH
61739: LD_INT 5
61741: PPUSH
61742: CALL_OW 12
61746: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61747: LD_ADDR_OWVAR 31
61751: PUSH
61752: LD_INT 1
61754: PPUSH
61755: LD_INT 3
61757: PPUSH
61758: CALL_OW 12
61762: PUSH
61763: LD_INT 1
61765: PPUSH
61766: LD_INT 3
61768: PPUSH
61769: CALL_OW 12
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// animal := CreateHuman ;
61786: LD_ADDR_VAR 0 12
61790: PUSH
61791: CALL_OW 44
61795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61796: LD_VAR 0 12
61800: PPUSH
61801: LD_VAR 0 8
61805: PPUSH
61806: LD_INT 0
61808: PPUSH
61809: CALL 63648 0 3
// end ;
61813: GO 61711
61815: POP
61816: POP
// if enchidnas then
61817: LD_VAR 0 4
61821: IFFALSE 61888
// for i = 1 to enchidnas do
61823: LD_ADDR_VAR 0 11
61827: PUSH
61828: DOUBLE
61829: LD_INT 1
61831: DEC
61832: ST_TO_ADDR
61833: LD_VAR 0 4
61837: PUSH
61838: FOR_TO
61839: IFFALSE 61886
// begin hc_class = 13 ;
61841: LD_ADDR_OWVAR 28
61845: PUSH
61846: LD_INT 13
61848: ST_TO_ADDR
// hc_gallery =  ;
61849: LD_ADDR_OWVAR 33
61853: PUSH
61854: LD_STRING 
61856: ST_TO_ADDR
// animal := CreateHuman ;
61857: LD_ADDR_VAR 0 12
61861: PUSH
61862: CALL_OW 44
61866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61867: LD_VAR 0 12
61871: PPUSH
61872: LD_VAR 0 8
61876: PPUSH
61877: LD_INT 0
61879: PPUSH
61880: CALL 63648 0 3
// end ;
61884: GO 61838
61886: POP
61887: POP
// if fishes then
61888: LD_VAR 0 7
61892: IFFALSE 61959
// for i = 1 to fishes do
61894: LD_ADDR_VAR 0 11
61898: PUSH
61899: DOUBLE
61900: LD_INT 1
61902: DEC
61903: ST_TO_ADDR
61904: LD_VAR 0 7
61908: PUSH
61909: FOR_TO
61910: IFFALSE 61957
// begin hc_class = 20 ;
61912: LD_ADDR_OWVAR 28
61916: PUSH
61917: LD_INT 20
61919: ST_TO_ADDR
// hc_gallery =  ;
61920: LD_ADDR_OWVAR 33
61924: PUSH
61925: LD_STRING 
61927: ST_TO_ADDR
// animal := CreateHuman ;
61928: LD_ADDR_VAR 0 12
61932: PUSH
61933: CALL_OW 44
61937: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61938: LD_VAR 0 12
61942: PPUSH
61943: LD_VAR 0 9
61947: PPUSH
61948: LD_INT 0
61950: PPUSH
61951: CALL 63648 0 3
// end ;
61955: GO 61909
61957: POP
61958: POP
// end ;
61959: LD_VAR 0 10
61963: RET
// export function WantHeal ( sci , unit ) ; begin
61964: LD_INT 0
61966: PPUSH
// if GetTaskList ( sci ) > 0 then
61967: LD_VAR 0 1
61971: PPUSH
61972: CALL_OW 437
61976: PUSH
61977: LD_INT 0
61979: GREATER
61980: IFFALSE 62050
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61982: LD_VAR 0 1
61986: PPUSH
61987: CALL_OW 437
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: PUSH
62000: LD_STRING l
62002: EQUAL
62003: PUSH
62004: LD_VAR 0 1
62008: PPUSH
62009: CALL_OW 437
62013: PUSH
62014: LD_INT 1
62016: ARRAY
62017: PUSH
62018: LD_INT 4
62020: ARRAY
62021: PUSH
62022: LD_VAR 0 2
62026: EQUAL
62027: AND
62028: IFFALSE 62040
// result := true else
62030: LD_ADDR_VAR 0 3
62034: PUSH
62035: LD_INT 1
62037: ST_TO_ADDR
62038: GO 62048
// result := false ;
62040: LD_ADDR_VAR 0 3
62044: PUSH
62045: LD_INT 0
62047: ST_TO_ADDR
// end else
62048: GO 62058
// result := false ;
62050: LD_ADDR_VAR 0 3
62054: PUSH
62055: LD_INT 0
62057: ST_TO_ADDR
// end ;
62058: LD_VAR 0 3
62062: RET
// export function HealTarget ( sci ) ; begin
62063: LD_INT 0
62065: PPUSH
// if not sci then
62066: LD_VAR 0 1
62070: NOT
62071: IFFALSE 62075
// exit ;
62073: GO 62140
// result := 0 ;
62075: LD_ADDR_VAR 0 2
62079: PUSH
62080: LD_INT 0
62082: ST_TO_ADDR
// if GetTaskList ( sci ) then
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL_OW 437
62092: IFFALSE 62140
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62094: LD_VAR 0 1
62098: PPUSH
62099: CALL_OW 437
62103: PUSH
62104: LD_INT 1
62106: ARRAY
62107: PUSH
62108: LD_INT 1
62110: ARRAY
62111: PUSH
62112: LD_STRING l
62114: EQUAL
62115: IFFALSE 62140
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62117: LD_ADDR_VAR 0 2
62121: PUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 437
62131: PUSH
62132: LD_INT 1
62134: ARRAY
62135: PUSH
62136: LD_INT 4
62138: ARRAY
62139: ST_TO_ADDR
// end ;
62140: LD_VAR 0 2
62144: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62145: LD_INT 0
62147: PPUSH
62148: PPUSH
62149: PPUSH
62150: PPUSH
// if not base_units then
62151: LD_VAR 0 1
62155: NOT
62156: IFFALSE 62160
// exit ;
62158: GO 62247
// result := false ;
62160: LD_ADDR_VAR 0 2
62164: PUSH
62165: LD_INT 0
62167: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62168: LD_ADDR_VAR 0 5
62172: PUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: LD_INT 21
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PPUSH
62188: CALL_OW 72
62192: ST_TO_ADDR
// if not tmp then
62193: LD_VAR 0 5
62197: NOT
62198: IFFALSE 62202
// exit ;
62200: GO 62247
// for i in tmp do
62202: LD_ADDR_VAR 0 3
62206: PUSH
62207: LD_VAR 0 5
62211: PUSH
62212: FOR_IN
62213: IFFALSE 62245
// begin result := EnemyInRange ( i , 22 ) ;
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: LD_VAR 0 3
62224: PPUSH
62225: LD_INT 22
62227: PPUSH
62228: CALL 60483 0 2
62232: ST_TO_ADDR
// if result then
62233: LD_VAR 0 2
62237: IFFALSE 62243
// exit ;
62239: POP
62240: POP
62241: GO 62247
// end ;
62243: GO 62212
62245: POP
62246: POP
// end ;
62247: LD_VAR 0 2
62251: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
// if not units then
62256: LD_VAR 0 1
62260: NOT
62261: IFFALSE 62265
// exit ;
62263: GO 62335
// result := [ ] ;
62265: LD_ADDR_VAR 0 3
62269: PUSH
62270: EMPTY
62271: ST_TO_ADDR
// for i in units do
62272: LD_ADDR_VAR 0 4
62276: PUSH
62277: LD_VAR 0 1
62281: PUSH
62282: FOR_IN
62283: IFFALSE 62333
// if GetTag ( i ) = tag then
62285: LD_VAR 0 4
62289: PPUSH
62290: CALL_OW 110
62294: PUSH
62295: LD_VAR 0 2
62299: EQUAL
62300: IFFALSE 62331
// result := Insert ( result , result + 1 , i ) ;
62302: LD_ADDR_VAR 0 3
62306: PUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: LD_VAR 0 3
62316: PUSH
62317: LD_INT 1
62319: PLUS
62320: PPUSH
62321: LD_VAR 0 4
62325: PPUSH
62326: CALL_OW 2
62330: ST_TO_ADDR
62331: GO 62282
62333: POP
62334: POP
// end ;
62335: LD_VAR 0 3
62339: RET
// export function IsDriver ( un ) ; begin
62340: LD_INT 0
62342: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62343: LD_ADDR_VAR 0 2
62347: PUSH
62348: LD_VAR 0 1
62352: PUSH
62353: LD_INT 55
62355: PUSH
62356: EMPTY
62357: LIST
62358: PPUSH
62359: CALL_OW 69
62363: IN
62364: ST_TO_ADDR
// end ;
62365: LD_VAR 0 2
62369: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62370: LD_INT 0
62372: PPUSH
62373: PPUSH
// list := [ ] ;
62374: LD_ADDR_VAR 0 5
62378: PUSH
62379: EMPTY
62380: ST_TO_ADDR
// case d of 0 :
62381: LD_VAR 0 3
62385: PUSH
62386: LD_INT 0
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62394
62392: GO 62527
62394: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62395: LD_ADDR_VAR 0 5
62399: PUSH
62400: LD_VAR 0 1
62404: PUSH
62405: LD_INT 4
62407: MINUS
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 4
62416: MINUS
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: PUSH
62426: LD_VAR 0 1
62430: PUSH
62431: LD_INT 3
62433: MINUS
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: PUSH
62448: LD_VAR 0 1
62452: PUSH
62453: LD_INT 4
62455: PLUS
62456: PUSH
62457: LD_VAR 0 2
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_INT 3
62477: PLUS
62478: PUSH
62479: LD_VAR 0 2
62483: PUSH
62484: LD_INT 3
62486: PLUS
62487: PUSH
62488: LD_INT 5
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: LD_VAR 0 1
62500: PUSH
62501: LD_VAR 0 2
62505: PUSH
62506: LD_INT 4
62508: PLUS
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: ST_TO_ADDR
// end ; 1 :
62525: GO 63225
62527: LD_INT 1
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62535
62533: GO 62668
62535: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62536: LD_ADDR_VAR 0 5
62540: PUSH
62541: LD_VAR 0 1
62545: PUSH
62546: LD_VAR 0 2
62550: PUSH
62551: LD_INT 4
62553: MINUS
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: PUSH
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 3
62570: MINUS
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 3
62579: MINUS
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: PUSH
62589: LD_VAR 0 1
62593: PUSH
62594: LD_INT 4
62596: MINUS
62597: PUSH
62598: LD_VAR 0 2
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: PUSH
62611: LD_VAR 0 1
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 3
62623: PLUS
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: LD_VAR 0 1
62637: PUSH
62638: LD_INT 4
62640: PLUS
62641: PUSH
62642: LD_VAR 0 2
62646: PUSH
62647: LD_INT 4
62649: PLUS
62650: PUSH
62651: LD_INT 5
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// end ; 2 :
62666: GO 63225
62668: LD_INT 2
62670: DOUBLE
62671: EQUAL
62672: IFTRUE 62676
62674: GO 62805
62676: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62677: LD_ADDR_VAR 0 5
62681: PUSH
62682: LD_VAR 0 1
62686: PUSH
62687: LD_VAR 0 2
62691: PUSH
62692: LD_INT 3
62694: MINUS
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: PUSH
62704: LD_VAR 0 1
62708: PUSH
62709: LD_INT 4
62711: PLUS
62712: PUSH
62713: LD_VAR 0 2
62717: PUSH
62718: LD_INT 4
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_VAR 0 2
62735: PUSH
62736: LD_INT 4
62738: PLUS
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: PUSH
62748: LD_VAR 0 1
62752: PUSH
62753: LD_INT 3
62755: MINUS
62756: PUSH
62757: LD_VAR 0 2
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: LD_VAR 0 1
62774: PUSH
62775: LD_INT 4
62777: MINUS
62778: PUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_INT 4
62786: MINUS
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: ST_TO_ADDR
// end ; 3 :
62803: GO 63225
62805: LD_INT 3
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62813
62811: GO 62946
62813: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62814: LD_ADDR_VAR 0 5
62818: PUSH
62819: LD_VAR 0 1
62823: PUSH
62824: LD_INT 3
62826: PLUS
62827: PUSH
62828: LD_VAR 0 2
62832: PUSH
62833: LD_INT 4
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: PUSH
62841: LD_VAR 0 1
62845: PUSH
62846: LD_INT 4
62848: PLUS
62849: PUSH
62850: LD_VAR 0 2
62854: PUSH
62855: LD_INT 4
62857: PLUS
62858: PUSH
62859: LD_INT 5
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: LIST
62866: PUSH
62867: LD_VAR 0 1
62871: PUSH
62872: LD_INT 4
62874: MINUS
62875: PUSH
62876: LD_VAR 0 2
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: PUSH
62889: LD_VAR 0 1
62893: PUSH
62894: LD_VAR 0 2
62898: PUSH
62899: LD_INT 4
62901: MINUS
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 3
62918: MINUS
62919: PUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 3
62927: MINUS
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: ST_TO_ADDR
// end ; 4 :
62944: GO 63225
62946: LD_INT 4
62948: DOUBLE
62949: EQUAL
62950: IFTRUE 62954
62952: GO 63087
62954: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62955: LD_ADDR_VAR 0 5
62959: PUSH
62960: LD_VAR 0 1
62964: PUSH
62965: LD_VAR 0 2
62969: PUSH
62970: LD_INT 4
62972: PLUS
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: PUSH
62982: LD_VAR 0 1
62986: PUSH
62987: LD_INT 3
62989: PLUS
62990: PUSH
62991: LD_VAR 0 2
62995: PUSH
62996: LD_INT 3
62998: PLUS
62999: PUSH
63000: LD_INT 5
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: PUSH
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 4
63015: PLUS
63016: PUSH
63017: LD_VAR 0 2
63021: PUSH
63022: LD_INT 4
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: PUSH
63030: LD_VAR 0 1
63034: PUSH
63035: LD_VAR 0 2
63039: PUSH
63040: LD_INT 3
63042: MINUS
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: PUSH
63052: LD_VAR 0 1
63056: PUSH
63057: LD_INT 4
63059: MINUS
63060: PUSH
63061: LD_VAR 0 2
63065: PUSH
63066: LD_INT 4
63068: MINUS
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: ST_TO_ADDR
// end ; 5 :
63085: GO 63225
63087: LD_INT 5
63089: DOUBLE
63090: EQUAL
63091: IFTRUE 63095
63093: GO 63224
63095: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63096: LD_ADDR_VAR 0 5
63100: PUSH
63101: LD_VAR 0 1
63105: PUSH
63106: LD_INT 4
63108: MINUS
63109: PUSH
63110: LD_VAR 0 2
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: LD_VAR 0 2
63132: PUSH
63133: LD_INT 4
63135: MINUS
63136: PUSH
63137: LD_INT 3
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: PUSH
63145: LD_VAR 0 1
63149: PUSH
63150: LD_INT 4
63152: PLUS
63153: PUSH
63154: LD_VAR 0 2
63158: PUSH
63159: LD_INT 4
63161: PLUS
63162: PUSH
63163: LD_INT 5
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: PUSH
63171: LD_VAR 0 1
63175: PUSH
63176: LD_INT 3
63178: PLUS
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 4
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_VAR 0 1
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 3
63205: PLUS
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// end ; end ;
63222: GO 63225
63224: POP
// result := list ;
63225: LD_ADDR_VAR 0 4
63229: PUSH
63230: LD_VAR 0 5
63234: ST_TO_ADDR
// end ;
63235: LD_VAR 0 4
63239: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63240: LD_INT 0
63242: PPUSH
63243: PPUSH
63244: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63245: LD_VAR 0 1
63249: NOT
63250: PUSH
63251: LD_VAR 0 2
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: LD_INT 4
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: IN
63274: NOT
63275: OR
63276: IFFALSE 63280
// exit ;
63278: GO 63372
// tmp := [ ] ;
63280: LD_ADDR_VAR 0 5
63284: PUSH
63285: EMPTY
63286: ST_TO_ADDR
// for i in units do
63287: LD_ADDR_VAR 0 4
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: FOR_IN
63298: IFFALSE 63341
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63300: LD_ADDR_VAR 0 5
63304: PUSH
63305: LD_VAR 0 5
63309: PPUSH
63310: LD_VAR 0 5
63314: PUSH
63315: LD_INT 1
63317: PLUS
63318: PPUSH
63319: LD_VAR 0 4
63323: PPUSH
63324: LD_VAR 0 2
63328: PPUSH
63329: CALL_OW 259
63333: PPUSH
63334: CALL_OW 2
63338: ST_TO_ADDR
63339: GO 63297
63341: POP
63342: POP
// if not tmp then
63343: LD_VAR 0 5
63347: NOT
63348: IFFALSE 63352
// exit ;
63350: GO 63372
// result := SortListByListDesc ( units , tmp ) ;
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: LD_VAR 0 5
63366: PPUSH
63367: CALL_OW 77
63371: ST_TO_ADDR
// end ;
63372: LD_VAR 0 3
63376: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63377: LD_INT 0
63379: PPUSH
63380: PPUSH
63381: PPUSH
// result := false ;
63382: LD_ADDR_VAR 0 3
63386: PUSH
63387: LD_INT 0
63389: ST_TO_ADDR
// x := GetX ( building ) ;
63390: LD_ADDR_VAR 0 4
63394: PUSH
63395: LD_VAR 0 2
63399: PPUSH
63400: CALL_OW 250
63404: ST_TO_ADDR
// y := GetY ( building ) ;
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: LD_VAR 0 2
63414: PPUSH
63415: CALL_OW 251
63419: ST_TO_ADDR
// if not building or not x or not y then
63420: LD_VAR 0 2
63424: NOT
63425: PUSH
63426: LD_VAR 0 4
63430: NOT
63431: OR
63432: PUSH
63433: LD_VAR 0 5
63437: NOT
63438: OR
63439: IFFALSE 63443
// exit ;
63441: GO 63535
// if GetTaskList ( unit ) then
63443: LD_VAR 0 1
63447: PPUSH
63448: CALL_OW 437
63452: IFFALSE 63535
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63454: LD_STRING e
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: CALL_OW 437
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: PUSH
63471: LD_INT 1
63473: ARRAY
63474: EQUAL
63475: PUSH
63476: LD_VAR 0 4
63480: PUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 437
63490: PUSH
63491: LD_INT 1
63493: ARRAY
63494: PUSH
63495: LD_INT 2
63497: ARRAY
63498: EQUAL
63499: AND
63500: PUSH
63501: LD_VAR 0 5
63505: PUSH
63506: LD_VAR 0 1
63510: PPUSH
63511: CALL_OW 437
63515: PUSH
63516: LD_INT 1
63518: ARRAY
63519: PUSH
63520: LD_INT 3
63522: ARRAY
63523: EQUAL
63524: AND
63525: IFFALSE 63535
// result := true end ;
63527: LD_ADDR_VAR 0 3
63531: PUSH
63532: LD_INT 1
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 3
63539: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63540: LD_INT 0
63542: PPUSH
// result := false ;
63543: LD_ADDR_VAR 0 4
63547: PUSH
63548: LD_INT 0
63550: ST_TO_ADDR
// if GetTaskList ( unit ) then
63551: LD_VAR 0 1
63555: PPUSH
63556: CALL_OW 437
63560: IFFALSE 63643
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63562: LD_STRING M
63564: PUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 437
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: EQUAL
63583: PUSH
63584: LD_VAR 0 2
63588: PUSH
63589: LD_VAR 0 1
63593: PPUSH
63594: CALL_OW 437
63598: PUSH
63599: LD_INT 1
63601: ARRAY
63602: PUSH
63603: LD_INT 2
63605: ARRAY
63606: EQUAL
63607: AND
63608: PUSH
63609: LD_VAR 0 3
63613: PUSH
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL_OW 437
63623: PUSH
63624: LD_INT 1
63626: ARRAY
63627: PUSH
63628: LD_INT 3
63630: ARRAY
63631: EQUAL
63632: AND
63633: IFFALSE 63643
// result := true ;
63635: LD_ADDR_VAR 0 4
63639: PUSH
63640: LD_INT 1
63642: ST_TO_ADDR
// end ; end ;
63643: LD_VAR 0 4
63647: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63648: LD_INT 0
63650: PPUSH
63651: PPUSH
63652: PPUSH
63653: PPUSH
// if not unit or not area then
63654: LD_VAR 0 1
63658: NOT
63659: PUSH
63660: LD_VAR 0 2
63664: NOT
63665: OR
63666: IFFALSE 63670
// exit ;
63668: GO 63834
// tmp := AreaToList ( area , i ) ;
63670: LD_ADDR_VAR 0 6
63674: PUSH
63675: LD_VAR 0 2
63679: PPUSH
63680: LD_VAR 0 5
63684: PPUSH
63685: CALL_OW 517
63689: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63690: LD_ADDR_VAR 0 5
63694: PUSH
63695: DOUBLE
63696: LD_INT 1
63698: DEC
63699: ST_TO_ADDR
63700: LD_VAR 0 6
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PUSH
63709: FOR_TO
63710: IFFALSE 63832
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63712: LD_ADDR_VAR 0 7
63716: PUSH
63717: LD_VAR 0 6
63721: PUSH
63722: LD_INT 1
63724: ARRAY
63725: PUSH
63726: LD_VAR 0 5
63730: ARRAY
63731: PUSH
63732: LD_VAR 0 6
63736: PUSH
63737: LD_INT 2
63739: ARRAY
63740: PUSH
63741: LD_VAR 0 5
63745: ARRAY
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63751: LD_VAR 0 7
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PPUSH
63760: LD_VAR 0 7
63764: PUSH
63765: LD_INT 2
63767: ARRAY
63768: PPUSH
63769: CALL_OW 428
63773: PUSH
63774: LD_INT 0
63776: EQUAL
63777: IFFALSE 63830
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63779: LD_VAR 0 1
63783: PPUSH
63784: LD_VAR 0 7
63788: PUSH
63789: LD_INT 1
63791: ARRAY
63792: PPUSH
63793: LD_VAR 0 7
63797: PUSH
63798: LD_INT 2
63800: ARRAY
63801: PPUSH
63802: LD_VAR 0 3
63806: PPUSH
63807: CALL_OW 48
// result := IsPlaced ( unit ) ;
63811: LD_ADDR_VAR 0 4
63815: PUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: CALL_OW 305
63825: ST_TO_ADDR
// exit ;
63826: POP
63827: POP
63828: GO 63834
// end ; end ;
63830: GO 63709
63832: POP
63833: POP
// end ;
63834: LD_VAR 0 4
63838: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63839: LD_INT 0
63841: PPUSH
63842: PPUSH
63843: PPUSH
// if not side or side > 8 then
63844: LD_VAR 0 1
63848: NOT
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 8
63857: GREATER
63858: OR
63859: IFFALSE 63863
// exit ;
63861: GO 64050
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63863: LD_ADDR_VAR 0 4
63867: PUSH
63868: LD_INT 22
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 21
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PPUSH
63894: CALL_OW 69
63898: ST_TO_ADDR
// if not tmp then
63899: LD_VAR 0 4
63903: NOT
63904: IFFALSE 63908
// exit ;
63906: GO 64050
// enable_addtolog := true ;
63908: LD_ADDR_OWVAR 81
63912: PUSH
63913: LD_INT 1
63915: ST_TO_ADDR
// AddToLog ( [ ) ;
63916: LD_STRING [
63918: PPUSH
63919: CALL_OW 561
// for i in tmp do
63923: LD_ADDR_VAR 0 3
63927: PUSH
63928: LD_VAR 0 4
63932: PUSH
63933: FOR_IN
63934: IFFALSE 64041
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63936: LD_STRING [
63938: PUSH
63939: LD_VAR 0 3
63943: PPUSH
63944: CALL_OW 266
63948: STR
63949: PUSH
63950: LD_STRING , 
63952: STR
63953: PUSH
63954: LD_VAR 0 3
63958: PPUSH
63959: CALL_OW 250
63963: STR
63964: PUSH
63965: LD_STRING , 
63967: STR
63968: PUSH
63969: LD_VAR 0 3
63973: PPUSH
63974: CALL_OW 251
63978: STR
63979: PUSH
63980: LD_STRING , 
63982: STR
63983: PUSH
63984: LD_VAR 0 3
63988: PPUSH
63989: CALL_OW 254
63993: STR
63994: PUSH
63995: LD_STRING , 
63997: STR
63998: PUSH
63999: LD_VAR 0 3
64003: PPUSH
64004: LD_INT 1
64006: PPUSH
64007: CALL_OW 268
64011: STR
64012: PUSH
64013: LD_STRING , 
64015: STR
64016: PUSH
64017: LD_VAR 0 3
64021: PPUSH
64022: LD_INT 2
64024: PPUSH
64025: CALL_OW 268
64029: STR
64030: PUSH
64031: LD_STRING ],
64033: STR
64034: PPUSH
64035: CALL_OW 561
// end ;
64039: GO 63933
64041: POP
64042: POP
// AddToLog ( ]; ) ;
64043: LD_STRING ];
64045: PPUSH
64046: CALL_OW 561
// end ;
64050: LD_VAR 0 2
64054: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64055: LD_INT 0
64057: PPUSH
64058: PPUSH
64059: PPUSH
64060: PPUSH
64061: PPUSH
// if not area or not rate or not max then
64062: LD_VAR 0 1
64066: NOT
64067: PUSH
64068: LD_VAR 0 2
64072: NOT
64073: OR
64074: PUSH
64075: LD_VAR 0 4
64079: NOT
64080: OR
64081: IFFALSE 64085
// exit ;
64083: GO 64277
// while 1 do
64085: LD_INT 1
64087: IFFALSE 64277
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64089: LD_ADDR_VAR 0 9
64093: PUSH
64094: LD_VAR 0 1
64098: PPUSH
64099: LD_INT 1
64101: PPUSH
64102: CALL_OW 287
64106: PUSH
64107: LD_INT 10
64109: MUL
64110: ST_TO_ADDR
// r := rate / 10 ;
64111: LD_ADDR_VAR 0 7
64115: PUSH
64116: LD_VAR 0 2
64120: PUSH
64121: LD_INT 10
64123: DIVREAL
64124: ST_TO_ADDR
// time := 1 1$00 ;
64125: LD_ADDR_VAR 0 8
64129: PUSH
64130: LD_INT 2100
64132: ST_TO_ADDR
// if amount < min then
64133: LD_VAR 0 9
64137: PUSH
64138: LD_VAR 0 3
64142: LESS
64143: IFFALSE 64161
// r := r * 2 else
64145: LD_ADDR_VAR 0 7
64149: PUSH
64150: LD_VAR 0 7
64154: PUSH
64155: LD_INT 2
64157: MUL
64158: ST_TO_ADDR
64159: GO 64187
// if amount > max then
64161: LD_VAR 0 9
64165: PUSH
64166: LD_VAR 0 4
64170: GREATER
64171: IFFALSE 64187
// r := r / 2 ;
64173: LD_ADDR_VAR 0 7
64177: PUSH
64178: LD_VAR 0 7
64182: PUSH
64183: LD_INT 2
64185: DIVREAL
64186: ST_TO_ADDR
// time := time / r ;
64187: LD_ADDR_VAR 0 8
64191: PUSH
64192: LD_VAR 0 8
64196: PUSH
64197: LD_VAR 0 7
64201: DIVREAL
64202: ST_TO_ADDR
// if time < 0 then
64203: LD_VAR 0 8
64207: PUSH
64208: LD_INT 0
64210: LESS
64211: IFFALSE 64228
// time := time * - 1 ;
64213: LD_ADDR_VAR 0 8
64217: PUSH
64218: LD_VAR 0 8
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: MUL
64227: ST_TO_ADDR
// wait ( time ) ;
64228: LD_VAR 0 8
64232: PPUSH
64233: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64237: LD_INT 35
64239: PPUSH
64240: LD_INT 875
64242: PPUSH
64243: CALL_OW 12
64247: PPUSH
64248: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64252: LD_INT 1
64254: PPUSH
64255: LD_INT 5
64257: PPUSH
64258: CALL_OW 12
64262: PPUSH
64263: LD_VAR 0 1
64267: PPUSH
64268: LD_INT 1
64270: PPUSH
64271: CALL_OW 55
// end ;
64275: GO 64085
// end ;
64277: LD_VAR 0 5
64281: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64282: LD_INT 0
64284: PPUSH
64285: PPUSH
64286: PPUSH
64287: PPUSH
64288: PPUSH
64289: PPUSH
64290: PPUSH
64291: PPUSH
// if not turrets or not factories then
64292: LD_VAR 0 1
64296: NOT
64297: PUSH
64298: LD_VAR 0 2
64302: NOT
64303: OR
64304: IFFALSE 64308
// exit ;
64306: GO 64615
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64308: LD_ADDR_VAR 0 10
64312: PUSH
64313: LD_INT 5
64315: PUSH
64316: LD_INT 6
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: LD_INT 4
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: LD_INT 5
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 24
64350: PUSH
64351: LD_INT 25
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 23
64360: PUSH
64361: LD_INT 27
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 42
64374: PUSH
64375: LD_INT 43
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 44
64384: PUSH
64385: LD_INT 46
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 45
64394: PUSH
64395: LD_INT 47
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// result := [ ] ;
64412: LD_ADDR_VAR 0 3
64416: PUSH
64417: EMPTY
64418: ST_TO_ADDR
// for i in turrets do
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_VAR 0 1
64428: PUSH
64429: FOR_IN
64430: IFFALSE 64613
// begin nat := GetNation ( i ) ;
64432: LD_ADDR_VAR 0 7
64436: PUSH
64437: LD_VAR 0 4
64441: PPUSH
64442: CALL_OW 248
64446: ST_TO_ADDR
// weapon := 0 ;
64447: LD_ADDR_VAR 0 8
64451: PUSH
64452: LD_INT 0
64454: ST_TO_ADDR
// if not nat then
64455: LD_VAR 0 7
64459: NOT
64460: IFFALSE 64464
// continue ;
64462: GO 64429
// for j in list [ nat ] do
64464: LD_ADDR_VAR 0 5
64468: PUSH
64469: LD_VAR 0 10
64473: PUSH
64474: LD_VAR 0 7
64478: ARRAY
64479: PUSH
64480: FOR_IN
64481: IFFALSE 64522
// if GetBWeapon ( i ) = j [ 1 ] then
64483: LD_VAR 0 4
64487: PPUSH
64488: CALL_OW 269
64492: PUSH
64493: LD_VAR 0 5
64497: PUSH
64498: LD_INT 1
64500: ARRAY
64501: EQUAL
64502: IFFALSE 64520
// begin weapon := j [ 2 ] ;
64504: LD_ADDR_VAR 0 8
64508: PUSH
64509: LD_VAR 0 5
64513: PUSH
64514: LD_INT 2
64516: ARRAY
64517: ST_TO_ADDR
// break ;
64518: GO 64522
// end ;
64520: GO 64480
64522: POP
64523: POP
// if not weapon then
64524: LD_VAR 0 8
64528: NOT
64529: IFFALSE 64533
// continue ;
64531: GO 64429
// for k in factories do
64533: LD_ADDR_VAR 0 6
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: FOR_IN
64544: IFFALSE 64609
// begin weapons := AvailableWeaponList ( k ) ;
64546: LD_ADDR_VAR 0 9
64550: PUSH
64551: LD_VAR 0 6
64555: PPUSH
64556: CALL_OW 478
64560: ST_TO_ADDR
// if not weapons then
64561: LD_VAR 0 9
64565: NOT
64566: IFFALSE 64570
// continue ;
64568: GO 64543
// if weapon in weapons then
64570: LD_VAR 0 8
64574: PUSH
64575: LD_VAR 0 9
64579: IN
64580: IFFALSE 64607
// begin result := [ i , weapon ] ;
64582: LD_ADDR_VAR 0 3
64586: PUSH
64587: LD_VAR 0 4
64591: PUSH
64592: LD_VAR 0 8
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// exit ;
64601: POP
64602: POP
64603: POP
64604: POP
64605: GO 64615
// end ; end ;
64607: GO 64543
64609: POP
64610: POP
// end ;
64611: GO 64429
64613: POP
64614: POP
// end ;
64615: LD_VAR 0 3
64619: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64620: LD_INT 0
64622: PPUSH
// if not side or side > 8 then
64623: LD_VAR 0 3
64627: NOT
64628: PUSH
64629: LD_VAR 0 3
64633: PUSH
64634: LD_INT 8
64636: GREATER
64637: OR
64638: IFFALSE 64642
// exit ;
64640: GO 64701
// if not range then
64642: LD_VAR 0 4
64646: NOT
64647: IFFALSE 64658
// range := - 12 ;
64649: LD_ADDR_VAR 0 4
64653: PUSH
64654: LD_INT 12
64656: NEG
64657: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64658: LD_VAR 0 1
64662: PPUSH
64663: LD_VAR 0 2
64667: PPUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: LD_VAR 0 4
64677: PPUSH
64678: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64682: LD_VAR 0 1
64686: PPUSH
64687: LD_VAR 0 2
64691: PPUSH
64692: LD_VAR 0 3
64696: PPUSH
64697: CALL_OW 331
// end ;
64701: LD_VAR 0 5
64705: RET
// export function Video ( mode ) ; begin
64706: LD_INT 0
64708: PPUSH
// ingame_video = mode ;
64709: LD_ADDR_OWVAR 52
64713: PUSH
64714: LD_VAR 0 1
64718: ST_TO_ADDR
// interface_hidden = mode ;
64719: LD_ADDR_OWVAR 54
64723: PUSH
64724: LD_VAR 0 1
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 2
64733: RET
// export function Join ( array , element ) ; begin
64734: LD_INT 0
64736: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64737: LD_ADDR_VAR 0 3
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_INT 1
64754: PLUS
64755: PPUSH
64756: LD_VAR 0 2
64760: PPUSH
64761: CALL_OW 1
64765: ST_TO_ADDR
// end ;
64766: LD_VAR 0 3
64770: RET
// export function JoinUnion ( array , element ) ; begin
64771: LD_INT 0
64773: PPUSH
// result := array union element ;
64774: LD_ADDR_VAR 0 3
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_VAR 0 2
64788: UNION
64789: ST_TO_ADDR
// end ;
64790: LD_VAR 0 3
64794: RET
// export function GetBehemoths ( side ) ; begin
64795: LD_INT 0
64797: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64798: LD_ADDR_VAR 0 2
64802: PUSH
64803: LD_INT 22
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 31
64817: PUSH
64818: LD_INT 25
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PPUSH
64829: CALL_OW 69
64833: ST_TO_ADDR
// end ;
64834: LD_VAR 0 2
64838: RET
// export function Shuffle ( array ) ; var i , index ; begin
64839: LD_INT 0
64841: PPUSH
64842: PPUSH
64843: PPUSH
// result := [ ] ;
64844: LD_ADDR_VAR 0 2
64848: PUSH
64849: EMPTY
64850: ST_TO_ADDR
// if not array then
64851: LD_VAR 0 1
64855: NOT
64856: IFFALSE 64860
// exit ;
64858: GO 64959
// Randomize ;
64860: CALL_OW 10
// for i = array downto 1 do
64864: LD_ADDR_VAR 0 3
64868: PUSH
64869: DOUBLE
64870: LD_VAR 0 1
64874: INC
64875: ST_TO_ADDR
64876: LD_INT 1
64878: PUSH
64879: FOR_DOWNTO
64880: IFFALSE 64957
// begin index := rand ( 1 , array ) ;
64882: LD_ADDR_VAR 0 4
64886: PUSH
64887: LD_INT 1
64889: PPUSH
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 12
64899: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64900: LD_ADDR_VAR 0 2
64904: PUSH
64905: LD_VAR 0 2
64909: PPUSH
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 1
64917: PLUS
64918: PPUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_VAR 0 4
64928: ARRAY
64929: PPUSH
64930: CALL_OW 2
64934: ST_TO_ADDR
// array := Delete ( array , index ) ;
64935: LD_ADDR_VAR 0 1
64939: PUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: LD_VAR 0 4
64949: PPUSH
64950: CALL_OW 3
64954: ST_TO_ADDR
// end ;
64955: GO 64879
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 2
64963: RET
// export function GetBaseMaterials ( base ) ; begin
64964: LD_INT 0
64966: PPUSH
// result := [ 0 , 0 , 0 ] ;
64967: LD_ADDR_VAR 0 2
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// if not base then
64986: LD_VAR 0 1
64990: NOT
64991: IFFALSE 64995
// exit ;
64993: GO 65044
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64995: LD_ADDR_VAR 0 2
64999: PUSH
65000: LD_VAR 0 1
65004: PPUSH
65005: LD_INT 1
65007: PPUSH
65008: CALL_OW 275
65012: PUSH
65013: LD_VAR 0 1
65017: PPUSH
65018: LD_INT 2
65020: PPUSH
65021: CALL_OW 275
65025: PUSH
65026: LD_VAR 0 1
65030: PPUSH
65031: LD_INT 3
65033: PPUSH
65034: CALL_OW 275
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: ST_TO_ADDR
// end ;
65044: LD_VAR 0 2
65048: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65049: LD_INT 0
65051: PPUSH
65052: PPUSH
// result := array ;
65053: LD_ADDR_VAR 0 3
65057: PUSH
65058: LD_VAR 0 1
65062: ST_TO_ADDR
// if size > 0 then
65063: LD_VAR 0 2
65067: PUSH
65068: LD_INT 0
65070: GREATER
65071: IFFALSE 65117
// for i := array downto size do
65073: LD_ADDR_VAR 0 4
65077: PUSH
65078: DOUBLE
65079: LD_VAR 0 1
65083: INC
65084: ST_TO_ADDR
65085: LD_VAR 0 2
65089: PUSH
65090: FOR_DOWNTO
65091: IFFALSE 65115
// result := Delete ( result , result ) ;
65093: LD_ADDR_VAR 0 3
65097: PUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: LD_VAR 0 3
65107: PPUSH
65108: CALL_OW 3
65112: ST_TO_ADDR
65113: GO 65090
65115: POP
65116: POP
// end ;
65117: LD_VAR 0 3
65121: RET
// export function ComExit ( unit ) ; var tmp ; begin
65122: LD_INT 0
65124: PPUSH
65125: PPUSH
// if not IsInUnit ( unit ) then
65126: LD_VAR 0 1
65130: PPUSH
65131: CALL_OW 310
65135: NOT
65136: IFFALSE 65140
// exit ;
65138: GO 65200
// tmp := IsInUnit ( unit ) ;
65140: LD_ADDR_VAR 0 3
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 310
65154: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65155: LD_VAR 0 3
65159: PPUSH
65160: CALL_OW 247
65164: PUSH
65165: LD_INT 2
65167: EQUAL
65168: IFFALSE 65181
// ComExitVehicle ( unit ) else
65170: LD_VAR 0 1
65174: PPUSH
65175: CALL_OW 121
65179: GO 65190
// ComExitBuilding ( unit ) ;
65181: LD_VAR 0 1
65185: PPUSH
65186: CALL_OW 122
// result := tmp ;
65190: LD_ADDR_VAR 0 2
65194: PUSH
65195: LD_VAR 0 3
65199: ST_TO_ADDR
// end ;
65200: LD_VAR 0 2
65204: RET
// export function ComExitAll ( units ) ; var i ; begin
65205: LD_INT 0
65207: PPUSH
65208: PPUSH
// if not units then
65209: LD_VAR 0 1
65213: NOT
65214: IFFALSE 65218
// exit ;
65216: GO 65244
// for i in units do
65218: LD_ADDR_VAR 0 3
65222: PUSH
65223: LD_VAR 0 1
65227: PUSH
65228: FOR_IN
65229: IFFALSE 65242
// ComExit ( i ) ;
65231: LD_VAR 0 3
65235: PPUSH
65236: CALL 65122 0 1
65240: GO 65228
65242: POP
65243: POP
// end ;
65244: LD_VAR 0 2
65248: RET
// export function ResetHc ; begin
65249: LD_INT 0
65251: PPUSH
// InitHc ;
65252: CALL_OW 19
// hc_importance := 0 ;
65256: LD_ADDR_OWVAR 32
65260: PUSH
65261: LD_INT 0
65263: ST_TO_ADDR
// end ;
65264: LD_VAR 0 1
65268: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65269: LD_INT 0
65271: PPUSH
65272: PPUSH
65273: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65274: LD_ADDR_VAR 0 6
65278: PUSH
65279: LD_VAR 0 1
65283: PUSH
65284: LD_VAR 0 3
65288: PLUS
65289: PUSH
65290: LD_INT 2
65292: DIV
65293: ST_TO_ADDR
// if _x < 0 then
65294: LD_VAR 0 6
65298: PUSH
65299: LD_INT 0
65301: LESS
65302: IFFALSE 65319
// _x := _x * - 1 ;
65304: LD_ADDR_VAR 0 6
65308: PUSH
65309: LD_VAR 0 6
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: MUL
65318: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65319: LD_ADDR_VAR 0 7
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_VAR 0 4
65333: PLUS
65334: PUSH
65335: LD_INT 2
65337: DIV
65338: ST_TO_ADDR
// if _y < 0 then
65339: LD_VAR 0 7
65343: PUSH
65344: LD_INT 0
65346: LESS
65347: IFFALSE 65364
// _y := _y * - 1 ;
65349: LD_ADDR_VAR 0 7
65353: PUSH
65354: LD_VAR 0 7
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: MUL
65363: ST_TO_ADDR
// result := [ _x , _y ] ;
65364: LD_ADDR_VAR 0 5
65368: PUSH
65369: LD_VAR 0 6
65373: PUSH
65374: LD_VAR 0 7
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// end ;
65383: LD_VAR 0 5
65387: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65388: LD_INT 0
65390: PPUSH
65391: PPUSH
65392: PPUSH
65393: PPUSH
// task := GetTaskList ( unit ) ;
65394: LD_ADDR_VAR 0 7
65398: PUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 437
65408: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65409: LD_VAR 0 7
65413: NOT
65414: PUSH
65415: LD_VAR 0 1
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: CALL_OW 308
65429: NOT
65430: AND
65431: IFFALSE 65435
// exit ;
65433: GO 65553
// if IsInArea ( unit , area ) then
65435: LD_VAR 0 1
65439: PPUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: CALL_OW 308
65449: IFFALSE 65467
// begin ComMoveToArea ( unit , goAway ) ;
65451: LD_VAR 0 1
65455: PPUSH
65456: LD_VAR 0 3
65460: PPUSH
65461: CALL_OW 113
// exit ;
65465: GO 65553
// end ; if task [ 1 ] [ 1 ] <> M then
65467: LD_VAR 0 7
65471: PUSH
65472: LD_INT 1
65474: ARRAY
65475: PUSH
65476: LD_INT 1
65478: ARRAY
65479: PUSH
65480: LD_STRING M
65482: NONEQUAL
65483: IFFALSE 65487
// exit ;
65485: GO 65553
// x := task [ 1 ] [ 2 ] ;
65487: LD_ADDR_VAR 0 5
65491: PUSH
65492: LD_VAR 0 7
65496: PUSH
65497: LD_INT 1
65499: ARRAY
65500: PUSH
65501: LD_INT 2
65503: ARRAY
65504: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65505: LD_ADDR_VAR 0 6
65509: PUSH
65510: LD_VAR 0 7
65514: PUSH
65515: LD_INT 1
65517: ARRAY
65518: PUSH
65519: LD_INT 3
65521: ARRAY
65522: ST_TO_ADDR
// if InArea ( x , y , area ) then
65523: LD_VAR 0 5
65527: PPUSH
65528: LD_VAR 0 6
65532: PPUSH
65533: LD_VAR 0 2
65537: PPUSH
65538: CALL_OW 309
65542: IFFALSE 65553
// ComStop ( unit ) ;
65544: LD_VAR 0 1
65548: PPUSH
65549: CALL_OW 141
// end ;
65553: LD_VAR 0 4
65557: RET
// export function Abs ( value ) ; begin
65558: LD_INT 0
65560: PPUSH
// result := value ;
65561: LD_ADDR_VAR 0 2
65565: PUSH
65566: LD_VAR 0 1
65570: ST_TO_ADDR
// if value < 0 then
65571: LD_VAR 0 1
65575: PUSH
65576: LD_INT 0
65578: LESS
65579: IFFALSE 65596
// result := value * - 1 ;
65581: LD_ADDR_VAR 0 2
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: MUL
65595: ST_TO_ADDR
// end ;
65596: LD_VAR 0 2
65600: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65601: LD_INT 0
65603: PPUSH
65604: PPUSH
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
65609: PPUSH
65610: PPUSH
// if not unit or not building then
65611: LD_VAR 0 1
65615: NOT
65616: PUSH
65617: LD_VAR 0 2
65621: NOT
65622: OR
65623: IFFALSE 65627
// exit ;
65625: GO 65853
// x := GetX ( building ) ;
65627: LD_ADDR_VAR 0 4
65631: PUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: CALL_OW 250
65641: ST_TO_ADDR
// y := GetY ( building ) ;
65642: LD_ADDR_VAR 0 6
65646: PUSH
65647: LD_VAR 0 2
65651: PPUSH
65652: CALL_OW 251
65656: ST_TO_ADDR
// d := GetDir ( building ) ;
65657: LD_ADDR_VAR 0 8
65661: PUSH
65662: LD_VAR 0 2
65666: PPUSH
65667: CALL_OW 254
65671: ST_TO_ADDR
// r := 4 ;
65672: LD_ADDR_VAR 0 9
65676: PUSH
65677: LD_INT 4
65679: ST_TO_ADDR
// for i := 1 to 5 do
65680: LD_ADDR_VAR 0 10
65684: PUSH
65685: DOUBLE
65686: LD_INT 1
65688: DEC
65689: ST_TO_ADDR
65690: LD_INT 5
65692: PUSH
65693: FOR_TO
65694: IFFALSE 65851
// begin _x := ShiftX ( x , d , r + i ) ;
65696: LD_ADDR_VAR 0 5
65700: PUSH
65701: LD_VAR 0 4
65705: PPUSH
65706: LD_VAR 0 8
65710: PPUSH
65711: LD_VAR 0 9
65715: PUSH
65716: LD_VAR 0 10
65720: PLUS
65721: PPUSH
65722: CALL_OW 272
65726: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65727: LD_ADDR_VAR 0 7
65731: PUSH
65732: LD_VAR 0 6
65736: PPUSH
65737: LD_VAR 0 8
65741: PPUSH
65742: LD_VAR 0 9
65746: PUSH
65747: LD_VAR 0 10
65751: PLUS
65752: PPUSH
65753: CALL_OW 273
65757: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65758: LD_VAR 0 5
65762: PPUSH
65763: LD_VAR 0 7
65767: PPUSH
65768: CALL_OW 488
65772: PUSH
65773: LD_VAR 0 5
65777: PPUSH
65778: LD_VAR 0 7
65782: PPUSH
65783: CALL_OW 428
65787: PPUSH
65788: CALL_OW 247
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: IN
65803: NOT
65804: AND
65805: IFFALSE 65849
// begin ComMoveXY ( unit , _x , _y ) ;
65807: LD_VAR 0 1
65811: PPUSH
65812: LD_VAR 0 5
65816: PPUSH
65817: LD_VAR 0 7
65821: PPUSH
65822: CALL_OW 111
// result := [ _x , _y ] ;
65826: LD_ADDR_VAR 0 3
65830: PUSH
65831: LD_VAR 0 5
65835: PUSH
65836: LD_VAR 0 7
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: ST_TO_ADDR
// exit ;
65845: POP
65846: POP
65847: GO 65853
// end ; end ;
65849: GO 65693
65851: POP
65852: POP
// end ;
65853: LD_VAR 0 3
65857: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65858: LD_INT 0
65860: PPUSH
65861: PPUSH
65862: PPUSH
// result := 0 ;
65863: LD_ADDR_VAR 0 3
65867: PUSH
65868: LD_INT 0
65870: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 0
65878: LESS
65879: PUSH
65880: LD_VAR 0 1
65884: PUSH
65885: LD_INT 8
65887: GREATER
65888: OR
65889: PUSH
65890: LD_VAR 0 2
65894: PUSH
65895: LD_INT 0
65897: LESS
65898: OR
65899: PUSH
65900: LD_VAR 0 2
65904: PUSH
65905: LD_INT 8
65907: GREATER
65908: OR
65909: IFFALSE 65913
// exit ;
65911: GO 65988
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65913: LD_ADDR_VAR 0 4
65917: PUSH
65918: LD_INT 22
65920: PUSH
65921: LD_VAR 0 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PPUSH
65930: CALL_OW 69
65934: PUSH
65935: FOR_IN
65936: IFFALSE 65986
// begin un := UnitShoot ( i ) ;
65938: LD_ADDR_VAR 0 5
65942: PUSH
65943: LD_VAR 0 4
65947: PPUSH
65948: CALL_OW 504
65952: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65953: LD_VAR 0 5
65957: PPUSH
65958: CALL_OW 255
65962: PUSH
65963: LD_VAR 0 1
65967: EQUAL
65968: IFFALSE 65984
// begin result := un ;
65970: LD_ADDR_VAR 0 3
65974: PUSH
65975: LD_VAR 0 5
65979: ST_TO_ADDR
// exit ;
65980: POP
65981: POP
65982: GO 65988
// end ; end ;
65984: GO 65935
65986: POP
65987: POP
// end ;
65988: LD_VAR 0 3
65992: RET
// export function GetCargoBay ( units ) ; begin
65993: LD_INT 0
65995: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65996: LD_ADDR_VAR 0 2
66000: PUSH
66001: LD_VAR 0 1
66005: PPUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 34
66011: PUSH
66012: LD_INT 12
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 34
66021: PUSH
66022: LD_INT 51
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 34
66031: PUSH
66032: LD_INT 32
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 34
66041: PUSH
66042: LD_EXP 27
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PPUSH
66058: CALL_OW 72
66062: ST_TO_ADDR
// end ;
66063: LD_VAR 0 2
66067: RET
