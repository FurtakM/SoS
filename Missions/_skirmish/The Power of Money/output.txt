// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10689 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8417 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10308 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10565 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10565 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10565 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10565 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7234 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7229
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7229
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7228
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7023
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: CALL_OW 2
6998: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_INT 17
7006: PPUSH
7007: LD_INT 9
7009: PPUSH
7010: CALL_OW 111
// Wait ( 0 0$01 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// end ;
7021: GO 6914
7023: POP
7024: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 6
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7224
// begin vc_chassis := ar_half_tracked ;
7058: LD_ADDR_OWVAR 37
7062: PUSH
7063: LD_INT 14
7065: ST_TO_ADDR
// vc_engine := engine_combustion ;
7066: LD_ADDR_OWVAR 39
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// vc_control := control_manual ;
7074: LD_ADDR_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_heavy_mortar ] [ Rand ( 1 , 5 ) ] ;
7082: LD_ADDR_OWVAR 40
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 27
7092: PUSH
7093: LD_INT 28
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_EXP 31
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 5
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// veh := CreateVehicle ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: CALL_OW 45
7132: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7133: LD_VAR 0 5
7137: PPUSH
7138: LD_INT 16
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7163: CALL_OW 44
7167: PPUSH
7168: LD_VAR 0 5
7172: PPUSH
7173: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7177: LD_ADDR_EXP 11
7181: PUSH
7182: LD_EXP 11
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7200: LD_VAR 0 5
7204: PPUSH
7205: LD_INT 125
7207: PPUSH
7208: LD_INT 31
7210: PPUSH
7211: CALL_OW 111
// Wait ( 0 0$02 ) ;
7215: LD_INT 70
7217: PPUSH
7218: CALL_OW 67
// end ;
7222: GO 7055
7224: POP
7225: POP
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: LD_VAR 0 2
7233: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// areas := [ river1 , river2 ] ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_INT 14
7248: PUSH
7249: LD_INT 15
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: LD_INT 6
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_OWVAR 67
7279: ARRAY
7280: ST_TO_ADDR
// uc_side := 2 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 2
7288: ST_TO_ADDR
// uc_nation := 2 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_gallery :=  ;
7305: LD_ADDR_OWVAR 33
7309: PUSH
7310: LD_STRING 
7312: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_INT 1
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: ARRAY
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7480
// begin vc_chassis := ar_hovercraft ;
7346: LD_ADDR_OWVAR 37
7350: PUSH
7351: LD_INT 11
7353: ST_TO_ADDR
// vc_engine := engine_solar ;
7354: LD_ADDR_OWVAR 39
7358: PUSH
7359: LD_INT 2
7361: ST_TO_ADDR
// vc_control := control_manual ;
7362: LD_ADDR_OWVAR 38
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7370: LD_ADDR_OWVAR 40
7374: PUSH
7375: LD_INT 24
7377: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7378: LD_ADDR_OWVAR 41
7382: PUSH
7383: LD_INT 100
7385: ST_TO_ADDR
// un := CreateVehicle ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: CALL_OW 45
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 121
7403: PPUSH
7404: LD_INT 69
7406: PPUSH
7407: LD_INT 4
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 3
7441: PPUSH
7442: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7446: LD_ADDR_EXP 9
7450: PUSH
7451: LD_EXP 9
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
// end ;
7478: GO 7343
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 1
7486: RET
// every 0 0$01 trigger riv do var i , c ;
7487: LD_EXP 9
7491: IFFALSE 7926
7493: GO 7495
7495: DISABLE
7496: LD_INT 0
7498: PPUSH
7499: PPUSH
// begin enable ;
7500: ENABLE
// for i = riv downto 1 do
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: DOUBLE
7507: LD_EXP 9
7511: INC
7512: ST_TO_ADDR
7513: LD_INT 1
7515: PUSH
7516: FOR_DOWNTO
7517: IFFALSE 7924
// begin if not riv [ i ] [ 1 ] then
7519: LD_EXP 9
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: NOT
7534: IFFALSE 7556
// begin riv := Delete ( riv , 1 ) ;
7536: LD_ADDR_EXP 9
7540: PUSH
7541: LD_EXP 9
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// break ;
7554: GO 7924
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7556: LD_EXP 9
7560: PUSH
7561: LD_VAR 0 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 314
7575: NOT
7576: IFFALSE 7644
// begin if riv [ i ] [ 2 ] = 1 then
7578: LD_EXP 9
7582: PUSH
7583: LD_VAR 0 1
7587: ARRAY
7588: PUSH
7589: LD_INT 2
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// c := 2 else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ST_TO_ADDR
7606: GO 7616
// c := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7616: LD_ADDR_EXP 9
7620: PUSH
7621: LD_EXP 9
7625: PPUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: CALL 10308 0 4
7643: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7644: LD_EXP 9
7648: PUSH
7649: LD_VAR 0 1
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_INT 14
7661: PUSH
7662: LD_INT 15
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_EXP 9
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: ARRAY
7684: PPUSH
7685: CALL_OW 308
7689: NOT
7690: IFFALSE 7922
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7692: LD_EXP 9
7696: PUSH
7697: LD_VAR 0 1
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 261
7711: PUSH
7712: LD_INT 50
7714: LESS
7715: IFFALSE 7739
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 67
7734: PPUSH
7735: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7739: LD_EXP 9
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: PPUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: CALL_OW 74
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 9
7796: LESS
7797: IFFALSE 7855
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7799: LD_EXP 9
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: PPUSH
7829: LD_EXP 9
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 74
7848: PPUSH
7849: CALL_OW 115
7853: GO 7922
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7855: LD_EXP 9
7859: PUSH
7860: LD_VAR 0 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PPUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_EXP 9
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: PUSH
7891: LD_INT 2
7893: ARRAY
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7900: LD_EXP 9
7904: PUSH
7905: LD_VAR 0 1
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 350
7917: PPUSH
7918: CALL_OW 202
// end ; end ; end ;
7922: GO 7516
7924: POP
7925: POP
// end ;
7926: PPOPN 2
7928: END
// every 10 10$00 trigger convoy_start do var i , un ;
7929: LD_EXP 7
7933: IFFALSE 8054
7935: GO 7937
7937: DISABLE
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
// begin enable ;
7942: ENABLE
// for i = 1 to 2 do
7943: LD_ADDR_VAR 0 1
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8052
// begin uc_side := 2 ;
7959: LD_ADDR_OWVAR 20
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// uc_nation := 2 ;
7967: LD_ADDR_OWVAR 21
7971: PUSH
7972: LD_INT 2
7974: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7975: LD_INT 0
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: CALL_OW 380
// un := CreateHuman ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: CALL_OW 44
7997: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 10
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8016: LD_VAR 0 2
8020: PPUSH
8021: LD_INT 24
8023: PPUSH
8024: LD_INT 36
8026: PPUSH
8027: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8031: LD_VAR 0 2
8035: PPUSH
8036: LD_INT 9
8038: PPUSH
8039: CALL_OW 173
// Wait ( 0 0$02 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7956
8052: POP
8053: POP
// end ;
8054: PPOPN 2
8056: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8057: LD_INT 22
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: IFFALSE 8383
8073: GO 8075
8075: DISABLE
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// begin enable ;
8080: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PUSH
8101: LD_EXP 11
8105: DIFF
8106: ST_TO_ADDR
// if rest then
8107: LD_VAR 0 2
8111: IFFALSE 8183
// for i in rest do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8181
// if GetClass ( i ) = 3 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 257
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: IFFALSE 8179
// begin if not IsInArea ( i , ar2 ) then
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 17
8148: PPUSH
8149: CALL_OW 308
8153: NOT
8154: IFFALSE 8170
// ComMoveToArea ( i , ar2 ) else
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 17
8163: PPUSH
8164: CALL_OW 113
8168: GO 8179
// RemoveUnit ( i ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL_OW 64
// end ;
8179: GO 8123
8181: POP
8182: POP
// if ar_force then
8183: LD_EXP 11
8187: IFFALSE 8383
// begin if ar_force > 15 then
8189: LD_EXP 11
8193: PUSH
8194: LD_INT 15
8196: GREATER
8197: IFFALSE 8214
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8199: LD_EXP 11
8203: PPUSH
8204: LD_INT 58
8206: PPUSH
8207: LD_INT 51
8209: PPUSH
8210: CALL_OW 114
// for i in ar_force do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 11
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8381
// begin if GetClass ( i ) = class_soldier then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8332
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL 10565 0 1
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IN
8267: IFFALSE 8313
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL 10565 0 1
8283: PPUSH
8284: CALL_OW 250
8288: PPUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL 10565 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 132
8311: GO 8332
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL 10565 0 1
8327: PPUSH
8328: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 257
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: NOT
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 314
8356: NOT
8357: AND
8358: IFFALSE 8379
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL 10565 0 1
8374: PPUSH
8375: CALL_OW 115
// end ;
8379: GO 8224
8381: POP
8382: POP
// end ; end ;
8383: PPOPN 2
8385: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8386: LD_INT 9
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: IFFALSE 8416
8405: GO 8407
8407: DISABLE
// medal2 := false ; end_of_file
8408: LD_ADDR_EXP 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
8416: END
// export function Action ; begin
8417: LD_INT 0
8419: PPUSH
// case Query ( info ) of 1 :
8420: LD_STRING info
8422: PPUSH
8423: CALL_OW 97
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8439
8436: POP
// ; end ;
8437: GO 8440
8439: POP
// ChangeMissionObjectives ( PM_1 ) ;
8440: LD_STRING PM_1
8442: PPUSH
8443: CALL_OW 337
// SaveForQuickRestart ;
8447: CALL_OW 22
// end ;
8451: LD_VAR 0 1
8455: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8456: LD_INT 50
8458: PPUSH
8459: CALL_OW 255
8463: PUSH
8464: LD_INT 3
8466: EQUAL
8467: IFFALSE 8748
8469: GO 8471
8471: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8472: LD_EXP 16
8476: PPUSH
8477: LD_STRING DPM_S1
8479: PPUSH
8480: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8484: LD_EXP 17
8488: PPUSH
8489: LD_STRING DPM_P1
8491: PPUSH
8492: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8496: LD_EXP 16
8500: PPUSH
8501: LD_STRING DPM_S2
8503: PPUSH
8504: CALL_OW 88
// SaveForQuickRestart ;
8508: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8512: LD_STRING PM_2
8514: PPUSH
8515: CALL_OW 337
// Wait ( 2 2$30 ) ;
8519: LD_INT 5250
8521: PPUSH
8522: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8526: LD_INT 117
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 84
// Convoy ( 1 ) ;
8536: LD_INT 1
8538: PPUSH
8539: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8543: LD_INT 1050
8545: PPUSH
8546: CALL_OW 67
// Convoy ( 2 ) ;
8550: LD_INT 2
8552: PPUSH
8553: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8557: LD_INT 3150
8559: PPUSH
8560: CALL_OW 67
// Convoy ( 3 ) ;
8564: LD_INT 3
8566: PPUSH
8567: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8571: LD_INT 8400
8573: PPUSH
8574: CALL_OW 67
// convoy_start := true ;
8578: LD_ADDR_EXP 7
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareArabian ;
8586: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8590: LD_INT 1
8592: PPUSH
8593: CALL 6376 0 1
// while ( convoy_start ) do
8597: LD_EXP 7
8601: IFFALSE 8748
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8603: LD_INT 4200
8605: PPUSH
8606: LD_INT 7350
8608: PPUSH
8609: CALL_OW 12
8613: PPUSH
8614: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8618: LD_INT 22
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: PUSH
8633: LD_INT 20
8635: LESS
8636: IFFALSE 8653
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8653: LD_INT 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL_OW 12
8663: PPUSH
8664: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8668: LD_ADDR_EXP 13
8672: PUSH
8673: LD_EXP 13
8677: PUSH
8678: LD_INT 1
8680: PLUS
8681: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8682: LD_EXP 13
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: LD_OWVAR 67
8705: ARRAY
8706: MOD
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8746
// begin Wait ( 1 1$20 ) ;
8713: LD_INT 2800
8715: PPUSH
8716: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8720: LD_EXP 25
8724: PPUSH
8725: LD_STRING DPM_F2
8727: PPUSH
8728: CALL_OW 94
// PrepareAttack ( 3 ) ;
8732: LD_INT 3
8734: PPUSH
8735: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8739: LD_INT 6300
8741: PPUSH
8742: CALL_OW 67
// end ; end ;
8746: GO 8597
// end ;
8748: END
// every 0 0$1 trigger safeCounter > 30 do
8749: LD_EXP 15
8753: PUSH
8754: LD_INT 30
8756: GREATER
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8762: LD_STRING ACH_SAFE
8764: PPUSH
8765: CALL_OW 543
8769: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8770: LD_EXP 13
8774: PUSH
8775: LD_INT 3
8777: MOD
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8807: LD_EXP 25
8811: PPUSH
8812: LD_STRING DPM_F3
8814: PPUSH
8815: CALL_OW 94
8819: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8820: LD_EXP 13
8824: PUSH
8825: LD_INT 5
8827: MOD
8828: PUSH
8829: LD_INT 0
8831: EQUAL
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: AND
8852: IFFALSE 8869
8854: GO 8856
8856: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_STRING DPM_F4
8864: PPUSH
8865: CALL_OW 94
8869: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8870: LD_EXP 7
8874: PUSH
8875: LD_EXP 13
8879: PUSH
8880: LD_INT 8
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: LD_INT 10
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: GREATEREQUAL
8900: AND
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 6
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PUSH
8917: LD_INT 0
8919: EQUAL
8920: AND
8921: IFFALSE 9020
8923: GO 8925
8925: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8926: LD_EXP 17
8930: PPUSH
8931: LD_STRING DPM_PEnd
8933: PPUSH
8934: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8938: LD_STRING med1
8940: PPUSH
8941: LD_EXP 3
8945: PPUSH
8946: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8950: LD_STRING med2
8952: PPUSH
8953: LD_EXP 4
8957: PPUSH
8958: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8962: LD_EXP 8
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: GREATEREQUAL
8987: IFFALSE 8997
// medal3 := false ;
8989: LD_ADDR_EXP 5
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8997: LD_STRING med3
8999: PPUSH
9000: LD_EXP 5
9004: PPUSH
9005: CALL_OW 101
// GiveMedals ( MAIN ) ;
9009: LD_STRING MAIN
9011: PPUSH
9012: CALL_OW 102
// YouWin ;
9016: CALL_OW 103
// end ;
9020: END
// every 4 4$10 trigger convoy_start do var i ;
9021: LD_EXP 7
9025: IFFALSE 9391
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin DialogueOn ;
9033: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9037: LD_EXP 17
9041: PPUSH
9042: LD_STRING DPM_PHelp
9044: PPUSH
9045: CALL_OW 94
// DialogueOff ;
9049: CALL_OW 7
// Wait ( 0 0$30 ) ;
9053: LD_INT 1050
9055: PPUSH
9056: CALL_OW 67
// Randomize ;
9060: CALL_OW 10
// uc_side := 3 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 3
9071: ST_TO_ADDR
// uc_nation := 3 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 3
9079: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 5
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_OWVAR 67
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9151
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9113: LD_INT 0
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9134: CALL_OW 44
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: CALL_OW 49
// end ;
9149: GO 9110
9151: POP
9152: POP
// vc_chassis := ru_heavy_wheeled ;
9153: LD_ADDR_OWVAR 37
9157: PUSH
9158: LD_INT 23
9160: ST_TO_ADDR
// vc_engine := engine_combustion ;
9161: LD_ADDR_OWVAR 39
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// vc_control := control_manual ;
9169: LD_ADDR_OWVAR 38
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// vc_weapon := 89 ;
9177: LD_ADDR_OWVAR 40
9181: PUSH
9182: LD_INT 89
9184: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9185: LD_ADDR_OWVAR 41
9189: PUSH
9190: LD_INT 88
9192: ST_TO_ADDR
// i := CreateVehicle ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: CALL_OW 45
9202: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 5
9210: PPUSH
9211: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 63
9222: PPUSH
9223: LD_INT 115
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 200
9243: PPUSH
9244: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: LD_INT 5
9256: PPUSH
9257: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9261: CALL_OW 44
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 52
// DialogueOn ;
9275: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9279: LD_INT 169
9281: PPUSH
9282: LD_INT 115
9284: PPUSH
9285: CALL_OW 86
// DWait ( 0 0$01 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9296: LD_INT 63
9298: PPUSH
9299: LD_INT 115
9301: PPUSH
9302: CALL_OW 86
// DWait ( 0 0$01 ) ;
9306: LD_INT 35
9308: PPUSH
9309: CALL_OW 68
// DialogueOff ;
9313: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 57
9324: PPUSH
9325: LD_INT 53
9327: PPUSH
9328: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9332: LD_INT 6300
9334: PPUSH
9335: LD_INT 14700
9337: PPUSH
9338: CALL_OW 12
9342: PPUSH
9343: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9347: LD_EXP 18
9351: PPUSH
9352: LD_INT 86
9354: PPUSH
9355: LD_INT 112
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING DPM_Sa1
9379: PPUSH
9380: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9384: LD_STRING PM_3
9386: PPUSH
9387: CALL_OW 337
// end ;
9391: PPOPN 1
9393: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9394: LD_INT 3
9396: PPUSH
9397: LD_EXP 18
9401: PPUSH
9402: CALL_OW 292
9406: IFFALSE 9455
9408: GO 9410
9410: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9411: LD_EXP 18
9415: PPUSH
9416: LD_STRING DPM_Sa2
9418: PPUSH
9419: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9423: LD_STRING PM_4
9425: PPUSH
9426: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9430: LD_INT 40
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 235
// end ;
9455: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9456: LD_EXP 3
9460: NOT
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_INT 0
9479: EQUAL
9480: AND
9481: IFFALSE 9543
9483: GO 9485
9485: DISABLE
// begin DialogueOn ;
9486: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9490: LD_EXP 16
9494: PPUSH
9495: LD_STRING DPM_S3
9497: PPUSH
9498: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9502: LD_INT 62
9504: PPUSH
9505: LD_INT 113
9507: PPUSH
9508: LD_INT 3
9510: PPUSH
9511: LD_INT 10
9513: PPUSH
9514: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9518: LD_INT 62
9520: PPUSH
9521: LD_INT 113
9523: PPUSH
9524: CALL_OW 84
// dwait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 68
// DialogueOff ;
9535: CALL_OW 7
// CounterAttack ;
9539: CALL 5789 0 0
// end ; end_of_file
9543: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 255
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 9593
// if not us_retreat then
9559: LD_EXP 22
9563: NOT
9564: IFFALSE 9593
// if GetClass ( h ) = 1 then
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 257
9575: PUSH
9576: LD_INT 1
9578: EQUAL
9579: IFFALSE 9593
// ComEnterUnit ( h , us_arm ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 69
9588: PPUSH
9589: CALL_OW 120
// end ;
9593: PPOPN 2
9595: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL 24397 0 1
// if GetSide ( un ) = 1 then
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 255
9614: PUSH
9615: LD_INT 1
9617: EQUAL
9618: IFFALSE 9634
// us_count := us_count + 1 ;
9620: LD_ADDR_EXP 24
9624: PUSH
9625: LD_EXP 24
9629: PUSH
9630: LD_INT 1
9632: PLUS
9633: ST_TO_ADDR
// if un in us_force then
9634: LD_VAR 0 1
9638: PUSH
9639: LD_EXP 12
9643: IN
9644: IFFALSE 9662
// us_force := us_force diff un ;
9646: LD_ADDR_EXP 12
9650: PUSH
9651: LD_EXP 12
9655: PUSH
9656: LD_VAR 0 1
9660: DIFF
9661: ST_TO_ADDR
// if un in ar_force then
9662: LD_VAR 0 1
9666: PUSH
9667: LD_EXP 11
9671: IN
9672: IFFALSE 9690
// ar_force := ar_force diff un ;
9674: LD_ADDR_EXP 11
9678: PUSH
9679: LD_EXP 11
9683: PUSH
9684: LD_VAR 0 1
9688: DIFF
9689: ST_TO_ADDR
// if un = Stolypin then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_EXP 16
9699: EQUAL
9700: IFFALSE 9709
// YouLost ( dead ) ;
9702: LD_STRING dead
9704: PPUSH
9705: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 30
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: IN
9743: IFFALSE 9752
// YouLost ( depot ) ;
9745: LD_STRING depot
9747: PPUSH
9748: CALL_OW 104
// if GetSide ( un ) = 6 then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 6
9764: EQUAL
9765: IFFALSE 9781
// dest_counter := dest_counter + 1 ;
9767: LD_ADDR_EXP 8
9771: PUSH
9772: LD_EXP 8
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: ST_TO_ADDR
// end ;
9781: PPOPN 1
9783: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 9814
// ComMoveXY ( un , 57 , 52 ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 57
9806: PPUSH
9807: LD_INT 52
9809: PPUSH
9810: CALL_OW 111
// end ;
9814: PPOPN 2
9816: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9817: LD_EXP 21
9821: NOT
9822: IFFALSE 9872
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_INT 3
9831: EQUAL
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: EQUAL
9841: AND
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: AND
9861: OR
9862: IFFALSE 9872
// us_alert := true ;
9864: LD_ADDR_EXP 21
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: PUSH
9881: LD_VAR 0 2
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: AND
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 2
9904: PUSH
9905: LD_INT 6
9907: EQUAL
9908: AND
9909: OR
9910: IFFALSE 9919
// YouLost ( alat ) ;
9912: LD_STRING alat
9914: PPUSH
9915: CALL_OW 104
// end ;
9919: PPOPN 2
9921: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PUSH
9932: LD_INT 2
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: IN
9966: AND
9967: IFFALSE 10088
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9969: LD_OWVAR 3
9973: PUSH
9974: LD_VAR 0 1
9978: DIFF
9979: PPUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 74
9989: PPUSH
9990: CALL_OW 255
9994: PUSH
9995: LD_INT 2
9997: NONEQUAL
9998: IFFALSE 10088
// begin Wait ( 0 0$1.3 ) ;
10000: LD_INT 46
10002: PPUSH
10003: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 250
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 251
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PPUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 453
// end ; end ;
10088: PPOPN 1
10090: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: IN
10125: PUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL 10610 0 1
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 2
10143: EQUAL
10144: NOT
10145: AND
10146: IFFALSE 10271
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10148: LD_INT 105
10150: PPUSH
10151: LD_INT 210
10153: PPUSH
10154: CALL_OW 12
10158: PPUSH
10159: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 250
10172: PPUSH
10173: LD_VAR 0 2
10177: PPUSH
10178: CALL_OW 251
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 250
10226: PPUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 251
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 250
10253: PPUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: CALL_OW 251
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 453
// end ; end ;
10271: PPOPN 4
10273: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: CALL 24495 0 3
// end ;
10293: PPOPN 3
10295: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL 24503 0 1
// end ; end_of_file
10305: PPOPN 1
10307: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 2
10327: ARRAY
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL_OW 1
10343: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10344: LD_ADDR_VAR 0 1
10348: PUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 7
10363: PPUSH
10364: CALL_OW 1
10368: ST_TO_ADDR
// result := tab ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 1
10378: ST_TO_ADDR
// end ;
10379: LD_VAR 0 5
10383: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
// if not GetControl ( veh ) = control_manual then
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL_OW 263
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: NOT
10403: IFFALSE 10415
// result := false else
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
10413: GO 10560
// if veh in FilterAllUnits ( [ f_empty ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 58
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: IN
10431: IFFALSE 10443
// result := false else
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
10441: GO 10560
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 55
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: ST_TO_ADDR
// if not filter then
10480: LD_VAR 0 4
10484: NOT
10485: IFFALSE 10497
// result := false else
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
10495: GO 10560
// for i = 1 to filter do
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10558
// if IsDriver ( filter [ i ] ) = veh then
10515: LD_VAR 0 4
10519: PUSH
10520: LD_VAR 0 3
10524: ARRAY
10525: PPUSH
10526: CALL 61981 0 1
10530: PUSH
10531: LD_VAR 0 1
10535: EQUAL
10536: IFFALSE 10556
// begin result := filter [ i ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_VAR 0 3
10552: ARRAY
10553: ST_TO_ADDR
// break ;
10554: GO 10558
// end ;
10556: GO 10512
10558: POP
10559: POP
// end ; end ;
10560: LD_VAR 0 2
10564: RET
// export function FindTarget ( unit ) ; begin
10565: LD_INT 0
10567: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 81
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// end ;
10605: LD_VAR 0 2
10609: RET
// export function NearestUnit ( unit ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_OWVAR 3
10622: PUSH
10623: LD_VAR 0 1
10627: DIFF
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 74
10638: ST_TO_ADDR
// end ; end_of_file
10639: LD_VAR 0 2
10643: RET
// every 12 12$00 do
10644: GO 10646
10646: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 570
10652: PPUSH
10653: LD_INT 350
10655: PPUSH
10656: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10660: LD_INT 10500
10662: PPUSH
10663: LD_INT 21000
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 570
10680: PPUSH
10681: LD_INT 350
10683: PPUSH
10684: CALL_OW 550
// end ;
10688: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
// uc_nation = nation_nature ;
10696: LD_ADDR_OWVAR 21
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// uc_side = 0 ;
10704: LD_ADDR_OWVAR 20
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// l = 0 ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10720: LD_ADDR_OWVAR 24
10724: PUSH
10725: LD_INT 0
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10736: LD_ADDR_OWVAR 35
10740: PUSH
10741: LD_INT 5
10743: NEG
10744: PPUSH
10745: LD_INT 5
10747: PPUSH
10748: CALL_OW 12
10752: ST_TO_ADDR
// hc_gallery =  ;
10753: LD_ADDR_OWVAR 33
10757: PUSH
10758: LD_STRING 
10760: ST_TO_ADDR
// hc_class = class_apeman ;
10761: LD_ADDR_OWVAR 28
10765: PUSH
10766: LD_INT 12
10768: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10769: LD_ADDR_OWVAR 29
10773: PUSH
10774: LD_INT 11
10776: PPUSH
10777: LD_INT 13
10779: PPUSH
10780: CALL_OW 12
10784: PUSH
10785: LD_INT 10
10787: PPUSH
10788: LD_INT 11
10790: PPUSH
10791: CALL_OW 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// hc_sex = sex_male ;
10800: LD_ADDR_OWVAR 27
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10808: LD_ADDR_OWVAR 31
10812: PUSH
10813: LD_INT 0
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 12
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// apeman = CreateHuman ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: CALL_OW 44
10848: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// l = l + 1 ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: LD_VAR 0 6
10875: PUSH
10876: LD_INT 1
10878: PLUS
10879: ST_TO_ADDR
// end until l = num1 ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_VAR 0 1
10889: EQUAL
10890: IFFALSE 10720
// l = 0 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 25
10910: PPUSH
10911: CALL_OW 12
10915: ST_TO_ADDR
// hc_class = class_tiger ;
10916: LD_ADDR_OWVAR 28
10920: PUSH
10921: LD_INT 14
10923: ST_TO_ADDR
// hc_sex = sex_male ;
10924: LD_ADDR_OWVAR 27
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// hc_gallery = sandnature ;
10932: LD_ADDR_OWVAR 33
10936: PUSH
10937: LD_STRING sandnature
10939: ST_TO_ADDR
// hc_face_number = 3 ;
10940: LD_ADDR_OWVAR 34
10944: PUSH
10945: LD_INT 3
10947: ST_TO_ADDR
// tiger = CreateHuman ;
10948: LD_ADDR_VAR 0 8
10952: PUSH
10953: CALL_OW 44
10957: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10958: LD_VAR 0 8
10962: PPUSH
10963: LD_VAR 0 4
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// l = l + 1 ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 6
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: ST_TO_ADDR
// end until l = num2 ;
10989: LD_VAR 0 6
10993: PUSH
10994: LD_VAR 0 2
10998: EQUAL
10999: IFFALSE 10900
// l = 0 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11009: LD_ADDR_OWVAR 28
11013: PUSH
11014: LD_INT 18
11016: ST_TO_ADDR
// hc_gallery = sandnature ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING sandnature
11024: ST_TO_ADDR
// hc_face_number = 1 ;
11025: LD_ADDR_OWVAR 34
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// bird = CreateHuman ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 51
// l = l + 1 ;
11055: LD_ADDR_VAR 0 6
11059: PUSH
11060: LD_VAR 0 6
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: ST_TO_ADDR
// end until l = num3 ;
11069: LD_VAR 0 6
11073: PUSH
11074: LD_VAR 0 3
11078: EQUAL
11079: IFFALSE 11009
// end ; end_of_file
11081: LD_VAR 0 5
11085: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11086: LD_INT 0
11088: PPUSH
// ar_miner := 81 ;
11089: LD_ADDR_EXP 33
11093: PUSH
11094: LD_INT 81
11096: ST_TO_ADDR
// ar_crane := 88 ;
11097: LD_ADDR_EXP 32
11101: PUSH
11102: LD_INT 88
11104: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11105: LD_ADDR_EXP 27
11109: PUSH
11110: LD_INT 89
11112: ST_TO_ADDR
// us_hack := 99 ;
11113: LD_ADDR_EXP 28
11117: PUSH
11118: LD_INT 99
11120: ST_TO_ADDR
// us_artillery := 97 ;
11121: LD_ADDR_EXP 29
11125: PUSH
11126: LD_INT 97
11128: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11129: LD_ADDR_EXP 30
11133: PUSH
11134: LD_INT 91
11136: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11137: LD_ADDR_EXP 31
11141: PUSH
11142: LD_INT 92
11144: ST_TO_ADDR
// ru_radar := 98 ;
11145: LD_ADDR_EXP 26
11149: PUSH
11150: LD_INT 98
11152: ST_TO_ADDR
// tech_Artillery := 80 ;
11153: LD_ADDR_EXP 34
11157: PUSH
11158: LD_INT 80
11160: ST_TO_ADDR
// tech_RadMat := 81 ;
11161: LD_ADDR_EXP 35
11165: PUSH
11166: LD_INT 81
11168: ST_TO_ADDR
// tech_BasicTools := 82 ;
11169: LD_ADDR_EXP 36
11173: PUSH
11174: LD_INT 82
11176: ST_TO_ADDR
// tech_Cargo := 83 ;
11177: LD_ADDR_EXP 37
11181: PUSH
11182: LD_INT 83
11184: ST_TO_ADDR
// tech_Track := 84 ;
11185: LD_ADDR_EXP 38
11189: PUSH
11190: LD_INT 84
11192: ST_TO_ADDR
// tech_Crane := 85 ;
11193: LD_ADDR_EXP 39
11197: PUSH
11198: LD_INT 85
11200: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11201: LD_ADDR_EXP 40
11205: PUSH
11206: LD_INT 86
11208: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11209: LD_ADDR_EXP 41
11213: PUSH
11214: LD_INT 87
11216: ST_TO_ADDR
// end ;
11217: LD_VAR 0 1
11221: RET
// every 1 do
11222: GO 11224
11224: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11225: CALL 11086 0 0
11229: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11230: LD_VAR 0 2
11234: PUSH
11235: LD_INT 100
11237: EQUAL
11238: IFFALSE 12187
// begin if not StreamModeActive then
11240: LD_EXP 42
11244: NOT
11245: IFFALSE 11255
// StreamModeActive := true ;
11247: LD_ADDR_EXP 42
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 0 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 0
11262: EQUAL
11263: IFFALSE 11269
// InitStreamMode ;
11265: CALL 12345 0 0
// if p3 = 1 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 1
11276: EQUAL
11277: IFFALSE 11287
// sRocket := true ;
11279: LD_ADDR_EXP 47
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 2 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 2
11294: EQUAL
11295: IFFALSE 11305
// sSpeed := true ;
11297: LD_ADDR_EXP 46
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 3 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 3
11312: EQUAL
11313: IFFALSE 11323
// sEngine := true ;
11315: LD_ADDR_EXP 48
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 4 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 4
11330: EQUAL
11331: IFFALSE 11341
// sSpec := true ;
11333: LD_ADDR_EXP 45
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 5 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 5
11348: EQUAL
11349: IFFALSE 11359
// sLevel := true ;
11351: LD_ADDR_EXP 49
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 6 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 6
11366: EQUAL
11367: IFFALSE 11377
// sArmoury := true ;
11369: LD_ADDR_EXP 50
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 7 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 7
11384: EQUAL
11385: IFFALSE 11395
// sRadar := true ;
11387: LD_ADDR_EXP 51
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 8 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 8
11402: EQUAL
11403: IFFALSE 11413
// sBunker := true ;
11405: LD_ADDR_EXP 52
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 9 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 9
11420: EQUAL
11421: IFFALSE 11431
// sHack := true ;
11423: LD_ADDR_EXP 53
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 10 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 10
11438: EQUAL
11439: IFFALSE 11449
// sFire := true ;
11441: LD_ADDR_EXP 54
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 11 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 11
11456: EQUAL
11457: IFFALSE 11467
// sRefresh := true ;
11459: LD_ADDR_EXP 55
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 12 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 12
11474: EQUAL
11475: IFFALSE 11485
// sExp := true ;
11477: LD_ADDR_EXP 56
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 13 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 13
11492: EQUAL
11493: IFFALSE 11503
// sDepot := true ;
11495: LD_ADDR_EXP 57
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 14 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 14
11510: EQUAL
11511: IFFALSE 11521
// sFlag := true ;
11513: LD_ADDR_EXP 58
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// if p3 = 15 then
11521: LD_VAR 0 3
11525: PUSH
11526: LD_INT 15
11528: EQUAL
11529: IFFALSE 11539
// sKamikadze := true ;
11531: LD_ADDR_EXP 66
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if p3 = 16 then
11539: LD_VAR 0 3
11543: PUSH
11544: LD_INT 16
11546: EQUAL
11547: IFFALSE 11557
// sTroll := true ;
11549: LD_ADDR_EXP 67
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// if p3 = 17 then
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 17
11564: EQUAL
11565: IFFALSE 11575
// sSlow := true ;
11567: LD_ADDR_EXP 68
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// if p3 = 18 then
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 18
11582: EQUAL
11583: IFFALSE 11593
// sLack := true ;
11585: LD_ADDR_EXP 69
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// if p3 = 19 then
11593: LD_VAR 0 3
11597: PUSH
11598: LD_INT 19
11600: EQUAL
11601: IFFALSE 11611
// sTank := true ;
11603: LD_ADDR_EXP 71
11607: PUSH
11608: LD_INT 1
11610: ST_TO_ADDR
// if p3 = 20 then
11611: LD_VAR 0 3
11615: PUSH
11616: LD_INT 20
11618: EQUAL
11619: IFFALSE 11629
// sRemote := true ;
11621: LD_ADDR_EXP 72
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// if p3 = 21 then
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 21
11636: EQUAL
11637: IFFALSE 11647
// sPowell := true ;
11639: LD_ADDR_EXP 73
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// if p3 = 22 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 22
11654: EQUAL
11655: IFFALSE 11665
// sTeleport := true ;
11657: LD_ADDR_EXP 76
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// if p3 = 23 then
11665: LD_VAR 0 3
11669: PUSH
11670: LD_INT 23
11672: EQUAL
11673: IFFALSE 11683
// sOilTower := true ;
11675: LD_ADDR_EXP 78
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// if p3 = 24 then
11683: LD_VAR 0 3
11687: PUSH
11688: LD_INT 24
11690: EQUAL
11691: IFFALSE 11701
// sShovel := true ;
11693: LD_ADDR_EXP 79
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// if p3 = 25 then
11701: LD_VAR 0 3
11705: PUSH
11706: LD_INT 25
11708: EQUAL
11709: IFFALSE 11719
// sSheik := true ;
11711: LD_ADDR_EXP 80
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// if p3 = 26 then
11719: LD_VAR 0 3
11723: PUSH
11724: LD_INT 26
11726: EQUAL
11727: IFFALSE 11737
// sEarthquake := true ;
11729: LD_ADDR_EXP 82
11733: PUSH
11734: LD_INT 1
11736: ST_TO_ADDR
// if p3 = 27 then
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 27
11744: EQUAL
11745: IFFALSE 11755
// sAI := true ;
11747: LD_ADDR_EXP 83
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// if p3 = 28 then
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 28
11762: EQUAL
11763: IFFALSE 11773
// sCargo := true ;
11765: LD_ADDR_EXP 86
11769: PUSH
11770: LD_INT 1
11772: ST_TO_ADDR
// if p3 = 29 then
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 29
11780: EQUAL
11781: IFFALSE 11791
// sDLaser := true ;
11783: LD_ADDR_EXP 87
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// if p3 = 30 then
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 30
11798: EQUAL
11799: IFFALSE 11809
// sExchange := true ;
11801: LD_ADDR_EXP 88
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if p3 = 31 then
11809: LD_VAR 0 3
11813: PUSH
11814: LD_INT 31
11816: EQUAL
11817: IFFALSE 11827
// sFac := true ;
11819: LD_ADDR_EXP 89
11823: PUSH
11824: LD_INT 1
11826: ST_TO_ADDR
// if p3 = 32 then
11827: LD_VAR 0 3
11831: PUSH
11832: LD_INT 32
11834: EQUAL
11835: IFFALSE 11845
// sPower := true ;
11837: LD_ADDR_EXP 90
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// if p3 = 33 then
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 33
11852: EQUAL
11853: IFFALSE 11863
// sRandom := true ;
11855: LD_ADDR_EXP 91
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// if p3 = 34 then
11863: LD_VAR 0 3
11867: PUSH
11868: LD_INT 34
11870: EQUAL
11871: IFFALSE 11881
// sShield := true ;
11873: LD_ADDR_EXP 92
11877: PUSH
11878: LD_INT 1
11880: ST_TO_ADDR
// if p3 = 35 then
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 35
11888: EQUAL
11889: IFFALSE 11899
// sTime := true ;
11891: LD_ADDR_EXP 93
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// if p3 = 36 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 36
11906: EQUAL
11907: IFFALSE 11917
// sTools := true ;
11909: LD_ADDR_EXP 94
11913: PUSH
11914: LD_INT 1
11916: ST_TO_ADDR
// if p3 = 101 then
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 101
11924: EQUAL
11925: IFFALSE 11935
// sSold := true ;
11927: LD_ADDR_EXP 59
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// if p3 = 102 then
11935: LD_VAR 0 3
11939: PUSH
11940: LD_INT 102
11942: EQUAL
11943: IFFALSE 11953
// sDiff := true ;
11945: LD_ADDR_EXP 60
11949: PUSH
11950: LD_INT 1
11952: ST_TO_ADDR
// if p3 = 103 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 103
11960: EQUAL
11961: IFFALSE 11971
// sFog := true ;
11963: LD_ADDR_EXP 63
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// if p3 = 104 then
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 104
11978: EQUAL
11979: IFFALSE 11989
// sReset := true ;
11981: LD_ADDR_EXP 64
11985: PUSH
11986: LD_INT 1
11988: ST_TO_ADDR
// if p3 = 105 then
11989: LD_VAR 0 3
11993: PUSH
11994: LD_INT 105
11996: EQUAL
11997: IFFALSE 12007
// sSun := true ;
11999: LD_ADDR_EXP 65
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// if p3 = 106 then
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 106
12014: EQUAL
12015: IFFALSE 12025
// sTiger := true ;
12017: LD_ADDR_EXP 61
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// if p3 = 107 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 107
12032: EQUAL
12033: IFFALSE 12043
// sBomb := true ;
12035: LD_ADDR_EXP 62
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// if p3 = 108 then
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 108
12050: EQUAL
12051: IFFALSE 12061
// sWound := true ;
12053: LD_ADDR_EXP 70
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// if p3 = 109 then
12061: LD_VAR 0 3
12065: PUSH
12066: LD_INT 109
12068: EQUAL
12069: IFFALSE 12079
// sBetray := true ;
12071: LD_ADDR_EXP 74
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// if p3 = 110 then
12079: LD_VAR 0 3
12083: PUSH
12084: LD_INT 110
12086: EQUAL
12087: IFFALSE 12097
// sContamin := true ;
12089: LD_ADDR_EXP 75
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// if p3 = 111 then
12097: LD_VAR 0 3
12101: PUSH
12102: LD_INT 111
12104: EQUAL
12105: IFFALSE 12115
// sOil := true ;
12107: LD_ADDR_EXP 77
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// if p3 = 112 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_INT 112
12122: EQUAL
12123: IFFALSE 12133
// sStu := true ;
12125: LD_ADDR_EXP 81
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// if p3 = 113 then
12133: LD_VAR 0 3
12137: PUSH
12138: LD_INT 113
12140: EQUAL
12141: IFFALSE 12151
// sBazooka := true ;
12143: LD_ADDR_EXP 84
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// if p3 = 114 then
12151: LD_VAR 0 3
12155: PUSH
12156: LD_INT 114
12158: EQUAL
12159: IFFALSE 12169
// sMortar := true ;
12161: LD_ADDR_EXP 85
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// if p3 = 115 then
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 115
12176: EQUAL
12177: IFFALSE 12187
// sRanger := true ;
12179: LD_ADDR_EXP 95
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
// end ; if p2 = 101 then
12187: LD_VAR 0 2
12191: PUSH
12192: LD_INT 101
12194: EQUAL
12195: IFFALSE 12323
// begin case p3 of 1 :
12197: LD_VAR 0 3
12201: PUSH
12202: LD_INT 1
12204: DOUBLE
12205: EQUAL
12206: IFTRUE 12210
12208: GO 12217
12210: POP
// hHackUnlimitedResources ; 2 :
12211: CALL 23358 0 0
12215: GO 12323
12217: LD_INT 2
12219: DOUBLE
12220: EQUAL
12221: IFTRUE 12225
12223: GO 12232
12225: POP
// hHackSetLevel10 ; 3 :
12226: CALL 23491 0 0
12230: GO 12323
12232: LD_INT 3
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12247
12240: POP
// hHackSetLevel10YourUnits ; 4 :
12241: CALL 23576 0 0
12245: GO 12323
12247: LD_INT 4
12249: DOUBLE
12250: EQUAL
12251: IFTRUE 12255
12253: GO 12262
12255: POP
// hHackInvincible ; 5 :
12256: CALL 24024 0 0
12260: GO 12323
12262: LD_INT 5
12264: DOUBLE
12265: EQUAL
12266: IFTRUE 12270
12268: GO 12277
12270: POP
// hHackInvisible ; 6 :
12271: CALL 24135 0 0
12275: GO 12323
12277: LD_INT 6
12279: DOUBLE
12280: EQUAL
12281: IFTRUE 12285
12283: GO 12292
12285: POP
// hHackChangeYourSide ; 7 :
12286: CALL 24192 0 0
12290: GO 12323
12292: LD_INT 7
12294: DOUBLE
12295: EQUAL
12296: IFTRUE 12300
12298: GO 12307
12300: POP
// hHackChangeUnitSide ; 8 :
12301: CALL 24234 0 0
12305: GO 12323
12307: LD_INT 8
12309: DOUBLE
12310: EQUAL
12311: IFTRUE 12315
12313: GO 12322
12315: POP
// hHackFog ; end ;
12316: CALL 24335 0 0
12320: GO 12323
12322: POP
// end ; end ;
12323: PPOPN 6
12325: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12326: GO 12328
12328: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12329: LD_STRING initStreamRollete();
12331: PPUSH
12332: CALL_OW 559
// InitStreamMode ;
12336: CALL 12345 0 0
// DefineStreamItems ( ) ;
12340: CALL 12785 0 0
// end ;
12344: END
// function InitStreamMode ; begin
12345: LD_INT 0
12347: PPUSH
// streamModeActive := false ;
12348: LD_ADDR_EXP 42
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// normalCounter := 36 ;
12356: LD_ADDR_EXP 43
12360: PUSH
12361: LD_INT 36
12363: ST_TO_ADDR
// hardcoreCounter := 16 ;
12364: LD_ADDR_EXP 44
12368: PUSH
12369: LD_INT 16
12371: ST_TO_ADDR
// sRocket := false ;
12372: LD_ADDR_EXP 47
12376: PUSH
12377: LD_INT 0
12379: ST_TO_ADDR
// sSpeed := false ;
12380: LD_ADDR_EXP 46
12384: PUSH
12385: LD_INT 0
12387: ST_TO_ADDR
// sEngine := false ;
12388: LD_ADDR_EXP 48
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// sSpec := false ;
12396: LD_ADDR_EXP 45
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// sLevel := false ;
12404: LD_ADDR_EXP 49
12408: PUSH
12409: LD_INT 0
12411: ST_TO_ADDR
// sArmoury := false ;
12412: LD_ADDR_EXP 50
12416: PUSH
12417: LD_INT 0
12419: ST_TO_ADDR
// sRadar := false ;
12420: LD_ADDR_EXP 51
12424: PUSH
12425: LD_INT 0
12427: ST_TO_ADDR
// sBunker := false ;
12428: LD_ADDR_EXP 52
12432: PUSH
12433: LD_INT 0
12435: ST_TO_ADDR
// sHack := false ;
12436: LD_ADDR_EXP 53
12440: PUSH
12441: LD_INT 0
12443: ST_TO_ADDR
// sFire := false ;
12444: LD_ADDR_EXP 54
12448: PUSH
12449: LD_INT 0
12451: ST_TO_ADDR
// sRefresh := false ;
12452: LD_ADDR_EXP 55
12456: PUSH
12457: LD_INT 0
12459: ST_TO_ADDR
// sExp := false ;
12460: LD_ADDR_EXP 56
12464: PUSH
12465: LD_INT 0
12467: ST_TO_ADDR
// sDepot := false ;
12468: LD_ADDR_EXP 57
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// sFlag := false ;
12476: LD_ADDR_EXP 58
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// sKamikadze := false ;
12484: LD_ADDR_EXP 66
12488: PUSH
12489: LD_INT 0
12491: ST_TO_ADDR
// sTroll := false ;
12492: LD_ADDR_EXP 67
12496: PUSH
12497: LD_INT 0
12499: ST_TO_ADDR
// sSlow := false ;
12500: LD_ADDR_EXP 68
12504: PUSH
12505: LD_INT 0
12507: ST_TO_ADDR
// sLack := false ;
12508: LD_ADDR_EXP 69
12512: PUSH
12513: LD_INT 0
12515: ST_TO_ADDR
// sTank := false ;
12516: LD_ADDR_EXP 71
12520: PUSH
12521: LD_INT 0
12523: ST_TO_ADDR
// sRemote := false ;
12524: LD_ADDR_EXP 72
12528: PUSH
12529: LD_INT 0
12531: ST_TO_ADDR
// sPowell := false ;
12532: LD_ADDR_EXP 73
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// sTeleport := false ;
12540: LD_ADDR_EXP 76
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// sOilTower := false ;
12548: LD_ADDR_EXP 78
12552: PUSH
12553: LD_INT 0
12555: ST_TO_ADDR
// sShovel := false ;
12556: LD_ADDR_EXP 79
12560: PUSH
12561: LD_INT 0
12563: ST_TO_ADDR
// sSheik := false ;
12564: LD_ADDR_EXP 80
12568: PUSH
12569: LD_INT 0
12571: ST_TO_ADDR
// sEarthquake := false ;
12572: LD_ADDR_EXP 82
12576: PUSH
12577: LD_INT 0
12579: ST_TO_ADDR
// sAI := false ;
12580: LD_ADDR_EXP 83
12584: PUSH
12585: LD_INT 0
12587: ST_TO_ADDR
// sCargo := false ;
12588: LD_ADDR_EXP 86
12592: PUSH
12593: LD_INT 0
12595: ST_TO_ADDR
// sDLaser := false ;
12596: LD_ADDR_EXP 87
12600: PUSH
12601: LD_INT 0
12603: ST_TO_ADDR
// sExchange := false ;
12604: LD_ADDR_EXP 88
12608: PUSH
12609: LD_INT 0
12611: ST_TO_ADDR
// sFac := false ;
12612: LD_ADDR_EXP 89
12616: PUSH
12617: LD_INT 0
12619: ST_TO_ADDR
// sPower := false ;
12620: LD_ADDR_EXP 90
12624: PUSH
12625: LD_INT 0
12627: ST_TO_ADDR
// sRandom := false ;
12628: LD_ADDR_EXP 91
12632: PUSH
12633: LD_INT 0
12635: ST_TO_ADDR
// sShield := false ;
12636: LD_ADDR_EXP 92
12640: PUSH
12641: LD_INT 0
12643: ST_TO_ADDR
// sTime := false ;
12644: LD_ADDR_EXP 93
12648: PUSH
12649: LD_INT 0
12651: ST_TO_ADDR
// sTools := false ;
12652: LD_ADDR_EXP 94
12656: PUSH
12657: LD_INT 0
12659: ST_TO_ADDR
// sSold := false ;
12660: LD_ADDR_EXP 59
12664: PUSH
12665: LD_INT 0
12667: ST_TO_ADDR
// sDiff := false ;
12668: LD_ADDR_EXP 60
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// sFog := false ;
12676: LD_ADDR_EXP 63
12680: PUSH
12681: LD_INT 0
12683: ST_TO_ADDR
// sReset := false ;
12684: LD_ADDR_EXP 64
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// sSun := false ;
12692: LD_ADDR_EXP 65
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sTiger := false ;
12700: LD_ADDR_EXP 61
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sBomb := false ;
12708: LD_ADDR_EXP 62
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sWound := false ;
12716: LD_ADDR_EXP 70
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sBetray := false ;
12724: LD_ADDR_EXP 74
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sContamin := false ;
12732: LD_ADDR_EXP 75
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sOil := false ;
12740: LD_ADDR_EXP 77
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sStu := false ;
12748: LD_ADDR_EXP 81
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sBazooka := false ;
12756: LD_ADDR_EXP 84
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sMortar := false ;
12764: LD_ADDR_EXP 85
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sRanger := false ;
12772: LD_ADDR_EXP 95
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// end ;
12780: LD_VAR 0 1
12784: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12785: LD_INT 0
12787: PPUSH
12788: PPUSH
12789: PPUSH
12790: PPUSH
12791: PPUSH
// result := [ ] ;
12792: LD_ADDR_VAR 0 1
12796: PUSH
12797: EMPTY
12798: ST_TO_ADDR
// if campaign_id = 1 then
12799: LD_OWVAR 69
12803: PUSH
12804: LD_INT 1
12806: EQUAL
12807: IFFALSE 15745
// begin case mission_number of 1 :
12809: LD_OWVAR 70
12813: PUSH
12814: LD_INT 1
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12886
12822: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: LD_INT 11
12836: PUSH
12837: LD_INT 12
12839: PUSH
12840: LD_INT 15
12842: PUSH
12843: LD_INT 16
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 23
12851: PUSH
12852: LD_INT 26
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 101
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 106
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 15743
12886: LD_INT 2
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12966
12894: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: LD_INT 11
12908: PUSH
12909: LD_INT 12
12911: PUSH
12912: LD_INT 15
12914: PUSH
12915: LD_INT 16
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 23
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 105
12946: PUSH
12947: LD_INT 106
12949: PUSH
12950: LD_INT 108
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: ST_TO_ADDR
12964: GO 15743
12966: LD_INT 3
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 13050
12974: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: LD_INT 5
12988: PUSH
12989: LD_INT 11
12991: PUSH
12992: LD_INT 12
12994: PUSH
12995: LD_INT 15
12997: PUSH
12998: LD_INT 16
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_INT 26
13006: PUSH
13007: LD_INT 36
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 102
13027: PUSH
13028: LD_INT 105
13030: PUSH
13031: LD_INT 106
13033: PUSH
13034: LD_INT 108
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 15743
13050: LD_INT 4
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13142
13058: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: LD_INT 4
13069: PUSH
13070: LD_INT 5
13072: PUSH
13073: LD_INT 8
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 15
13084: PUSH
13085: LD_INT 16
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 26
13096: PUSH
13097: LD_INT 36
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 101
13116: PUSH
13117: LD_INT 102
13119: PUSH
13120: LD_INT 105
13122: PUSH
13123: LD_INT 106
13125: PUSH
13126: LD_INT 108
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: ST_TO_ADDR
13140: GO 15743
13142: LD_INT 5
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13250
13150: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13151: LD_ADDR_VAR 0 1
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 6
13167: PUSH
13168: LD_INT 8
13170: PUSH
13171: LD_INT 11
13173: PUSH
13174: LD_INT 12
13176: PUSH
13177: LD_INT 15
13179: PUSH
13180: LD_INT 16
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 23
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 36
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 101
13216: PUSH
13217: LD_INT 102
13219: PUSH
13220: LD_INT 105
13222: PUSH
13223: LD_INT 106
13225: PUSH
13226: LD_INT 108
13228: PUSH
13229: LD_INT 109
13231: PUSH
13232: LD_INT 112
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 15743
13250: LD_INT 6
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13378
13258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: LD_INT 4
13269: PUSH
13270: LD_INT 5
13272: PUSH
13273: LD_INT 6
13275: PUSH
13276: LD_INT 8
13278: PUSH
13279: LD_INT 11
13281: PUSH
13282: LD_INT 12
13284: PUSH
13285: LD_INT 15
13287: PUSH
13288: LD_INT 16
13290: PUSH
13291: LD_INT 20
13293: PUSH
13294: LD_INT 21
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 23
13302: PUSH
13303: LD_INT 25
13305: PUSH
13306: LD_INT 26
13308: PUSH
13309: LD_INT 30
13311: PUSH
13312: LD_INT 31
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 36
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 101
13344: PUSH
13345: LD_INT 102
13347: PUSH
13348: LD_INT 105
13350: PUSH
13351: LD_INT 106
13353: PUSH
13354: LD_INT 108
13356: PUSH
13357: LD_INT 109
13359: PUSH
13360: LD_INT 112
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 15743
13378: LD_INT 7
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13486
13386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: LD_INT 5
13400: PUSH
13401: LD_INT 7
13403: PUSH
13404: LD_INT 11
13406: PUSH
13407: LD_INT 12
13409: PUSH
13410: LD_INT 15
13412: PUSH
13413: LD_INT 16
13415: PUSH
13416: LD_INT 20
13418: PUSH
13419: LD_INT 21
13421: PUSH
13422: LD_INT 22
13424: PUSH
13425: LD_INT 23
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 26
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 101
13452: PUSH
13453: LD_INT 102
13455: PUSH
13456: LD_INT 103
13458: PUSH
13459: LD_INT 105
13461: PUSH
13462: LD_INT 106
13464: PUSH
13465: LD_INT 108
13467: PUSH
13468: LD_INT 112
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: ST_TO_ADDR
13484: GO 15743
13486: LD_INT 8
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13494
13492: GO 13622
13494: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: LD_INT 5
13508: PUSH
13509: LD_INT 6
13511: PUSH
13512: LD_INT 7
13514: PUSH
13515: LD_INT 8
13517: PUSH
13518: LD_INT 11
13520: PUSH
13521: LD_INT 12
13523: PUSH
13524: LD_INT 15
13526: PUSH
13527: LD_INT 16
13529: PUSH
13530: LD_INT 20
13532: PUSH
13533: LD_INT 21
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 23
13541: PUSH
13542: LD_INT 25
13544: PUSH
13545: LD_INT 26
13547: PUSH
13548: LD_INT 30
13550: PUSH
13551: LD_INT 31
13553: PUSH
13554: LD_INT 32
13556: PUSH
13557: LD_INT 36
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 101
13584: PUSH
13585: LD_INT 102
13587: PUSH
13588: LD_INT 103
13590: PUSH
13591: LD_INT 105
13593: PUSH
13594: LD_INT 106
13596: PUSH
13597: LD_INT 108
13599: PUSH
13600: LD_INT 109
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: ST_TO_ADDR
13620: GO 15743
13622: LD_INT 9
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13766
13630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 4
13641: PUSH
13642: LD_INT 5
13644: PUSH
13645: LD_INT 6
13647: PUSH
13648: LD_INT 7
13650: PUSH
13651: LD_INT 8
13653: PUSH
13654: LD_INT 11
13656: PUSH
13657: LD_INT 12
13659: PUSH
13660: LD_INT 15
13662: PUSH
13663: LD_INT 16
13665: PUSH
13666: LD_INT 20
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_INT 23
13677: PUSH
13678: LD_INT 25
13680: PUSH
13681: LD_INT 26
13683: PUSH
13684: LD_INT 28
13686: PUSH
13687: LD_INT 30
13689: PUSH
13690: LD_INT 31
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 36
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 101
13724: PUSH
13725: LD_INT 102
13727: PUSH
13728: LD_INT 103
13730: PUSH
13731: LD_INT 105
13733: PUSH
13734: LD_INT 106
13736: PUSH
13737: LD_INT 108
13739: PUSH
13740: LD_INT 109
13742: PUSH
13743: LD_INT 112
13745: PUSH
13746: LD_INT 114
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 15743
13766: LD_INT 10
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13958
13774: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: LD_INT 6
13791: PUSH
13792: LD_INT 7
13794: PUSH
13795: LD_INT 8
13797: PUSH
13798: LD_INT 9
13800: PUSH
13801: LD_INT 10
13803: PUSH
13804: LD_INT 11
13806: PUSH
13807: LD_INT 12
13809: PUSH
13810: LD_INT 13
13812: PUSH
13813: LD_INT 14
13815: PUSH
13816: LD_INT 15
13818: PUSH
13819: LD_INT 16
13821: PUSH
13822: LD_INT 17
13824: PUSH
13825: LD_INT 18
13827: PUSH
13828: LD_INT 19
13830: PUSH
13831: LD_INT 20
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_INT 23
13842: PUSH
13843: LD_INT 24
13845: PUSH
13846: LD_INT 25
13848: PUSH
13849: LD_INT 26
13851: PUSH
13852: LD_INT 28
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 31
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 101
13900: PUSH
13901: LD_INT 102
13903: PUSH
13904: LD_INT 103
13906: PUSH
13907: LD_INT 104
13909: PUSH
13910: LD_INT 105
13912: PUSH
13913: LD_INT 106
13915: PUSH
13916: LD_INT 107
13918: PUSH
13919: LD_INT 108
13921: PUSH
13922: LD_INT 109
13924: PUSH
13925: LD_INT 110
13927: PUSH
13928: LD_INT 111
13930: PUSH
13931: LD_INT 112
13933: PUSH
13934: LD_INT 114
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 15743
13958: LD_INT 11
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14158
13966: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: LD_INT 5
13983: PUSH
13984: LD_INT 6
13986: PUSH
13987: LD_INT 7
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: LD_INT 9
13995: PUSH
13996: LD_INT 10
13998: PUSH
13999: LD_INT 11
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: LD_INT 13
14007: PUSH
14008: LD_INT 14
14010: PUSH
14011: LD_INT 15
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 18
14022: PUSH
14023: LD_INT 19
14025: PUSH
14026: LD_INT 20
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 22
14034: PUSH
14035: LD_INT 23
14037: PUSH
14038: LD_INT 24
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 26
14046: PUSH
14047: LD_INT 28
14049: PUSH
14050: LD_INT 30
14052: PUSH
14053: LD_INT 31
14055: PUSH
14056: LD_INT 32
14058: PUSH
14059: LD_INT 34
14061: PUSH
14062: LD_INT 36
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 101
14100: PUSH
14101: LD_INT 102
14103: PUSH
14104: LD_INT 103
14106: PUSH
14107: LD_INT 104
14109: PUSH
14110: LD_INT 105
14112: PUSH
14113: LD_INT 106
14115: PUSH
14116: LD_INT 107
14118: PUSH
14119: LD_INT 108
14121: PUSH
14122: LD_INT 109
14124: PUSH
14125: LD_INT 110
14127: PUSH
14128: LD_INT 111
14130: PUSH
14131: LD_INT 112
14133: PUSH
14134: LD_INT 114
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: ST_TO_ADDR
14156: GO 15743
14158: LD_INT 12
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14166
14164: GO 14374
14166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14167: LD_ADDR_VAR 0 1
14171: PUSH
14172: LD_INT 1
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: LD_INT 4
14183: PUSH
14184: LD_INT 5
14186: PUSH
14187: LD_INT 6
14189: PUSH
14190: LD_INT 7
14192: PUSH
14193: LD_INT 8
14195: PUSH
14196: LD_INT 9
14198: PUSH
14199: LD_INT 10
14201: PUSH
14202: LD_INT 11
14204: PUSH
14205: LD_INT 12
14207: PUSH
14208: LD_INT 13
14210: PUSH
14211: LD_INT 14
14213: PUSH
14214: LD_INT 15
14216: PUSH
14217: LD_INT 16
14219: PUSH
14220: LD_INT 17
14222: PUSH
14223: LD_INT 18
14225: PUSH
14226: LD_INT 19
14228: PUSH
14229: LD_INT 20
14231: PUSH
14232: LD_INT 21
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 24
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 26
14249: PUSH
14250: LD_INT 27
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 33
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 36
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 101
14312: PUSH
14313: LD_INT 102
14315: PUSH
14316: LD_INT 103
14318: PUSH
14319: LD_INT 104
14321: PUSH
14322: LD_INT 105
14324: PUSH
14325: LD_INT 106
14327: PUSH
14328: LD_INT 107
14330: PUSH
14331: LD_INT 108
14333: PUSH
14334: LD_INT 109
14336: PUSH
14337: LD_INT 110
14339: PUSH
14340: LD_INT 111
14342: PUSH
14343: LD_INT 112
14345: PUSH
14346: LD_INT 113
14348: PUSH
14349: LD_INT 114
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: ST_TO_ADDR
14372: GO 15743
14374: LD_INT 13
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14578
14382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: LD_INT 3
14396: PUSH
14397: LD_INT 4
14399: PUSH
14400: LD_INT 5
14402: PUSH
14403: LD_INT 8
14405: PUSH
14406: LD_INT 9
14408: PUSH
14409: LD_INT 10
14411: PUSH
14412: LD_INT 11
14414: PUSH
14415: LD_INT 12
14417: PUSH
14418: LD_INT 14
14420: PUSH
14421: LD_INT 15
14423: PUSH
14424: LD_INT 16
14426: PUSH
14427: LD_INT 17
14429: PUSH
14430: LD_INT 18
14432: PUSH
14433: LD_INT 19
14435: PUSH
14436: LD_INT 20
14438: PUSH
14439: LD_INT 21
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 23
14447: PUSH
14448: LD_INT 24
14450: PUSH
14451: LD_INT 25
14453: PUSH
14454: LD_INT 26
14456: PUSH
14457: LD_INT 27
14459: PUSH
14460: LD_INT 28
14462: PUSH
14463: LD_INT 30
14465: PUSH
14466: LD_INT 31
14468: PUSH
14469: LD_INT 32
14471: PUSH
14472: LD_INT 33
14474: PUSH
14475: LD_INT 34
14477: PUSH
14478: LD_INT 36
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 101
14516: PUSH
14517: LD_INT 102
14519: PUSH
14520: LD_INT 103
14522: PUSH
14523: LD_INT 104
14525: PUSH
14526: LD_INT 105
14528: PUSH
14529: LD_INT 106
14531: PUSH
14532: LD_INT 107
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 109
14540: PUSH
14541: LD_INT 110
14543: PUSH
14544: LD_INT 111
14546: PUSH
14547: LD_INT 112
14549: PUSH
14550: LD_INT 113
14552: PUSH
14553: LD_INT 114
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: ST_TO_ADDR
14576: GO 15743
14578: LD_INT 14
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14798
14586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: LD_INT 3
14600: PUSH
14601: LD_INT 4
14603: PUSH
14604: LD_INT 5
14606: PUSH
14607: LD_INT 6
14609: PUSH
14610: LD_INT 7
14612: PUSH
14613: LD_INT 8
14615: PUSH
14616: LD_INT 9
14618: PUSH
14619: LD_INT 10
14621: PUSH
14622: LD_INT 11
14624: PUSH
14625: LD_INT 12
14627: PUSH
14628: LD_INT 13
14630: PUSH
14631: LD_INT 14
14633: PUSH
14634: LD_INT 15
14636: PUSH
14637: LD_INT 16
14639: PUSH
14640: LD_INT 17
14642: PUSH
14643: LD_INT 18
14645: PUSH
14646: LD_INT 19
14648: PUSH
14649: LD_INT 20
14651: PUSH
14652: LD_INT 21
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_INT 23
14660: PUSH
14661: LD_INT 24
14663: PUSH
14664: LD_INT 25
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 27
14672: PUSH
14673: LD_INT 28
14675: PUSH
14676: LD_INT 29
14678: PUSH
14679: LD_INT 30
14681: PUSH
14682: LD_INT 31
14684: PUSH
14685: LD_INT 32
14687: PUSH
14688: LD_INT 33
14690: PUSH
14691: LD_INT 34
14693: PUSH
14694: LD_INT 36
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 101
14736: PUSH
14737: LD_INT 102
14739: PUSH
14740: LD_INT 103
14742: PUSH
14743: LD_INT 104
14745: PUSH
14746: LD_INT 105
14748: PUSH
14749: LD_INT 106
14751: PUSH
14752: LD_INT 107
14754: PUSH
14755: LD_INT 108
14757: PUSH
14758: LD_INT 109
14760: PUSH
14761: LD_INT 110
14763: PUSH
14764: LD_INT 111
14766: PUSH
14767: LD_INT 112
14769: PUSH
14770: LD_INT 113
14772: PUSH
14773: LD_INT 114
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 15743
14798: LD_INT 15
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 15018
14806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 5
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: LD_INT 7
14832: PUSH
14833: LD_INT 8
14835: PUSH
14836: LD_INT 9
14838: PUSH
14839: LD_INT 10
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 13
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 17
14862: PUSH
14863: LD_INT 18
14865: PUSH
14866: LD_INT 19
14868: PUSH
14869: LD_INT 20
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 24
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 26
14889: PUSH
14890: LD_INT 27
14892: PUSH
14893: LD_INT 28
14895: PUSH
14896: LD_INT 29
14898: PUSH
14899: LD_INT 30
14901: PUSH
14902: LD_INT 31
14904: PUSH
14905: LD_INT 32
14907: PUSH
14908: LD_INT 33
14910: PUSH
14911: LD_INT 34
14913: PUSH
14914: LD_INT 36
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 101
14956: PUSH
14957: LD_INT 102
14959: PUSH
14960: LD_INT 103
14962: PUSH
14963: LD_INT 104
14965: PUSH
14966: LD_INT 105
14968: PUSH
14969: LD_INT 106
14971: PUSH
14972: LD_INT 107
14974: PUSH
14975: LD_INT 108
14977: PUSH
14978: LD_INT 109
14980: PUSH
14981: LD_INT 110
14983: PUSH
14984: LD_INT 111
14986: PUSH
14987: LD_INT 112
14989: PUSH
14990: LD_INT 113
14992: PUSH
14993: LD_INT 114
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15743
15018: LD_INT 16
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15150
15026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 4
15037: PUSH
15038: LD_INT 5
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 11
15046: PUSH
15047: LD_INT 12
15049: PUSH
15050: LD_INT 15
15052: PUSH
15053: LD_INT 16
15055: PUSH
15056: LD_INT 20
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 23
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 31
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: LD_INT 33
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 101
15112: PUSH
15113: LD_INT 102
15115: PUSH
15116: LD_INT 103
15118: PUSH
15119: LD_INT 106
15121: PUSH
15122: LD_INT 108
15124: PUSH
15125: LD_INT 112
15127: PUSH
15128: LD_INT 113
15130: PUSH
15131: LD_INT 114
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: ST_TO_ADDR
15148: GO 15743
15150: LD_INT 17
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15370
15158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15159: LD_ADDR_VAR 0 1
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: LD_INT 5
15178: PUSH
15179: LD_INT 6
15181: PUSH
15182: LD_INT 7
15184: PUSH
15185: LD_INT 8
15187: PUSH
15188: LD_INT 9
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: LD_INT 11
15196: PUSH
15197: LD_INT 12
15199: PUSH
15200: LD_INT 13
15202: PUSH
15203: LD_INT 14
15205: PUSH
15206: LD_INT 15
15208: PUSH
15209: LD_INT 16
15211: PUSH
15212: LD_INT 17
15214: PUSH
15215: LD_INT 18
15217: PUSH
15218: LD_INT 19
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_INT 23
15232: PUSH
15233: LD_INT 24
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 26
15241: PUSH
15242: LD_INT 27
15244: PUSH
15245: LD_INT 28
15247: PUSH
15248: LD_INT 29
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 31
15256: PUSH
15257: LD_INT 32
15259: PUSH
15260: LD_INT 33
15262: PUSH
15263: LD_INT 34
15265: PUSH
15266: LD_INT 36
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 101
15308: PUSH
15309: LD_INT 102
15311: PUSH
15312: LD_INT 103
15314: PUSH
15315: LD_INT 104
15317: PUSH
15318: LD_INT 105
15320: PUSH
15321: LD_INT 106
15323: PUSH
15324: LD_INT 107
15326: PUSH
15327: LD_INT 108
15329: PUSH
15330: LD_INT 109
15332: PUSH
15333: LD_INT 110
15335: PUSH
15336: LD_INT 111
15338: PUSH
15339: LD_INT 112
15341: PUSH
15342: LD_INT 113
15344: PUSH
15345: LD_INT 114
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: ST_TO_ADDR
15368: GO 15743
15370: LD_INT 18
15372: DOUBLE
15373: EQUAL
15374: IFTRUE 15378
15376: GO 15514
15378: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: LD_INT 5
15392: PUSH
15393: LD_INT 7
15395: PUSH
15396: LD_INT 11
15398: PUSH
15399: LD_INT 12
15401: PUSH
15402: LD_INT 15
15404: PUSH
15405: LD_INT 16
15407: PUSH
15408: LD_INT 20
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_INT 23
15419: PUSH
15420: LD_INT 25
15422: PUSH
15423: LD_INT 26
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: LD_INT 31
15431: PUSH
15432: LD_INT 32
15434: PUSH
15435: LD_INT 33
15437: PUSH
15438: LD_INT 34
15440: PUSH
15441: LD_INT 35
15443: PUSH
15444: LD_INT 36
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 101
15472: PUSH
15473: LD_INT 102
15475: PUSH
15476: LD_INT 103
15478: PUSH
15479: LD_INT 106
15481: PUSH
15482: LD_INT 108
15484: PUSH
15485: LD_INT 112
15487: PUSH
15488: LD_INT 113
15490: PUSH
15491: LD_INT 114
15493: PUSH
15494: LD_INT 115
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: ST_TO_ADDR
15512: GO 15743
15514: LD_INT 19
15516: DOUBLE
15517: EQUAL
15518: IFTRUE 15522
15520: GO 15742
15522: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15523: LD_ADDR_VAR 0 1
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 3
15536: PUSH
15537: LD_INT 4
15539: PUSH
15540: LD_INT 5
15542: PUSH
15543: LD_INT 6
15545: PUSH
15546: LD_INT 7
15548: PUSH
15549: LD_INT 8
15551: PUSH
15552: LD_INT 9
15554: PUSH
15555: LD_INT 10
15557: PUSH
15558: LD_INT 11
15560: PUSH
15561: LD_INT 12
15563: PUSH
15564: LD_INT 13
15566: PUSH
15567: LD_INT 14
15569: PUSH
15570: LD_INT 15
15572: PUSH
15573: LD_INT 16
15575: PUSH
15576: LD_INT 17
15578: PUSH
15579: LD_INT 18
15581: PUSH
15582: LD_INT 19
15584: PUSH
15585: LD_INT 20
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 22
15593: PUSH
15594: LD_INT 23
15596: PUSH
15597: LD_INT 24
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 26
15605: PUSH
15606: LD_INT 27
15608: PUSH
15609: LD_INT 28
15611: PUSH
15612: LD_INT 29
15614: PUSH
15615: LD_INT 30
15617: PUSH
15618: LD_INT 31
15620: PUSH
15621: LD_INT 32
15623: PUSH
15624: LD_INT 33
15626: PUSH
15627: LD_INT 34
15629: PUSH
15630: LD_INT 35
15632: PUSH
15633: LD_INT 36
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 101
15676: PUSH
15677: LD_INT 102
15679: PUSH
15680: LD_INT 103
15682: PUSH
15683: LD_INT 104
15685: PUSH
15686: LD_INT 105
15688: PUSH
15689: LD_INT 106
15691: PUSH
15692: LD_INT 107
15694: PUSH
15695: LD_INT 108
15697: PUSH
15698: LD_INT 109
15700: PUSH
15701: LD_INT 110
15703: PUSH
15704: LD_INT 111
15706: PUSH
15707: LD_INT 112
15709: PUSH
15710: LD_INT 113
15712: PUSH
15713: LD_INT 114
15715: PUSH
15716: LD_INT 115
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 15743
15742: POP
// end else
15743: GO 15962
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15745: LD_ADDR_VAR 0 1
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: LD_INT 2
15755: PUSH
15756: LD_INT 3
15758: PUSH
15759: LD_INT 4
15761: PUSH
15762: LD_INT 5
15764: PUSH
15765: LD_INT 6
15767: PUSH
15768: LD_INT 7
15770: PUSH
15771: LD_INT 8
15773: PUSH
15774: LD_INT 9
15776: PUSH
15777: LD_INT 10
15779: PUSH
15780: LD_INT 11
15782: PUSH
15783: LD_INT 12
15785: PUSH
15786: LD_INT 13
15788: PUSH
15789: LD_INT 14
15791: PUSH
15792: LD_INT 15
15794: PUSH
15795: LD_INT 16
15797: PUSH
15798: LD_INT 17
15800: PUSH
15801: LD_INT 18
15803: PUSH
15804: LD_INT 19
15806: PUSH
15807: LD_INT 20
15809: PUSH
15810: LD_INT 21
15812: PUSH
15813: LD_INT 22
15815: PUSH
15816: LD_INT 23
15818: PUSH
15819: LD_INT 24
15821: PUSH
15822: LD_INT 25
15824: PUSH
15825: LD_INT 26
15827: PUSH
15828: LD_INT 27
15830: PUSH
15831: LD_INT 28
15833: PUSH
15834: LD_INT 29
15836: PUSH
15837: LD_INT 30
15839: PUSH
15840: LD_INT 31
15842: PUSH
15843: LD_INT 32
15845: PUSH
15846: LD_INT 33
15848: PUSH
15849: LD_INT 34
15851: PUSH
15852: LD_INT 35
15854: PUSH
15855: LD_INT 36
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 101
15898: PUSH
15899: LD_INT 102
15901: PUSH
15902: LD_INT 103
15904: PUSH
15905: LD_INT 104
15907: PUSH
15908: LD_INT 105
15910: PUSH
15911: LD_INT 106
15913: PUSH
15914: LD_INT 107
15916: PUSH
15917: LD_INT 108
15919: PUSH
15920: LD_INT 109
15922: PUSH
15923: LD_INT 110
15925: PUSH
15926: LD_INT 111
15928: PUSH
15929: LD_INT 112
15931: PUSH
15932: LD_INT 113
15934: PUSH
15935: LD_INT 114
15937: PUSH
15938: LD_INT 115
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: ST_TO_ADDR
// if result then
15962: LD_VAR 0 1
15966: IFFALSE 16255
// begin normal :=  ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_STRING 
15975: ST_TO_ADDR
// hardcore :=  ;
15976: LD_ADDR_VAR 0 4
15980: PUSH
15981: LD_STRING 
15983: ST_TO_ADDR
// for i = 1 to normalCounter do
15984: LD_ADDR_VAR 0 5
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_EXP 43
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16101
// begin tmp := 0 ;
16002: LD_ADDR_VAR 0 2
16006: PUSH
16007: LD_STRING 0
16009: ST_TO_ADDR
// if result [ 1 ] then
16010: LD_VAR 0 1
16014: PUSH
16015: LD_INT 1
16017: ARRAY
16018: IFFALSE 16083
// if result [ 1 ] [ 1 ] = i then
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 1
16027: ARRAY
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: PUSH
16033: LD_VAR 0 5
16037: EQUAL
16038: IFFALSE 16083
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16040: LD_ADDR_VAR 0 1
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_VAR 0 1
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: CALL_OW 3
16069: PPUSH
16070: CALL_OW 1
16074: ST_TO_ADDR
// tmp := 1 ;
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_STRING 1
16082: ST_TO_ADDR
// end ; normal := normal & tmp ;
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_VAR 0 3
16092: PUSH
16093: LD_VAR 0 2
16097: STR
16098: ST_TO_ADDR
// end ;
16099: GO 15999
16101: POP
16102: POP
// for i = 1 to hardcoreCounter do
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_EXP 44
16117: PUSH
16118: FOR_TO
16119: IFFALSE 16224
// begin tmp := 0 ;
16121: LD_ADDR_VAR 0 2
16125: PUSH
16126: LD_STRING 0
16128: ST_TO_ADDR
// if result [ 2 ] then
16129: LD_VAR 0 1
16133: PUSH
16134: LD_INT 2
16136: ARRAY
16137: IFFALSE 16206
// if result [ 2 ] [ 1 ] = 100 + i then
16139: LD_VAR 0 1
16143: PUSH
16144: LD_INT 2
16146: ARRAY
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PUSH
16152: LD_INT 100
16154: PUSH
16155: LD_VAR 0 5
16159: PLUS
16160: EQUAL
16161: IFFALSE 16206
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16163: LD_ADDR_VAR 0 1
16167: PUSH
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 2
16175: PPUSH
16176: LD_VAR 0 1
16180: PUSH
16181: LD_INT 2
16183: ARRAY
16184: PPUSH
16185: LD_INT 1
16187: PPUSH
16188: CALL_OW 3
16192: PPUSH
16193: CALL_OW 1
16197: ST_TO_ADDR
// tmp := 1 ;
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_STRING 1
16205: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_VAR 0 4
16215: PUSH
16216: LD_VAR 0 2
16220: STR
16221: ST_TO_ADDR
// end ;
16222: GO 16118
16224: POP
16225: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16226: LD_STRING getStreamItemsFromMission("
16228: PUSH
16229: LD_VAR 0 3
16233: STR
16234: PUSH
16235: LD_STRING ","
16237: STR
16238: PUSH
16239: LD_VAR 0 4
16243: STR
16244: PUSH
16245: LD_STRING ")
16247: STR
16248: PPUSH
16249: CALL_OW 559
// end else
16253: GO 16262
// ToLua ( getStreamItemsFromMission("","") ) ;
16255: LD_STRING getStreamItemsFromMission("","")
16257: PPUSH
16258: CALL_OW 559
// end ;
16262: LD_VAR 0 1
16266: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16267: LD_EXP 42
16271: PUSH
16272: LD_EXP 47
16276: AND
16277: IFFALSE 16401
16279: GO 16281
16281: DISABLE
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
// begin enable ;
16286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_OWVAR 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 34
16309: PUSH
16310: LD_INT 7
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 34
16319: PUSH
16320: LD_INT 45
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 34
16329: PUSH
16330: LD_INT 28
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 34
16339: PUSH
16340: LD_INT 47
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if not tmp then
16363: LD_VAR 0 2
16367: NOT
16368: IFFALSE 16372
// exit ;
16370: GO 16401
// for i in tmp do
16372: LD_ADDR_VAR 0 1
16376: PUSH
16377: LD_VAR 0 2
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16399
// begin SetLives ( i , 0 ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 0
16392: PPUSH
16393: CALL_OW 234
// end ;
16397: GO 16382
16399: POP
16400: POP
// end ;
16401: PPOPN 2
16403: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16404: LD_EXP 42
16408: PUSH
16409: LD_EXP 48
16413: AND
16414: IFFALSE 16498
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
// begin enable ;
16423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16424: LD_ADDR_VAR 0 2
16428: PUSH
16429: LD_INT 22
16431: PUSH
16432: LD_OWVAR 2
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 32
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PPUSH
16455: CALL_OW 69
16459: ST_TO_ADDR
// if not tmp then
16460: LD_VAR 0 2
16464: NOT
16465: IFFALSE 16469
// exit ;
16467: GO 16498
// for i in tmp do
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: LD_VAR 0 2
16478: PUSH
16479: FOR_IN
16480: IFFALSE 16496
// begin SetLives ( i , 0 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_INT 0
16489: PPUSH
16490: CALL_OW 234
// end ;
16494: GO 16479
16496: POP
16497: POP
// end ;
16498: PPOPN 2
16500: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16501: LD_EXP 42
16505: PUSH
16506: LD_EXP 45
16510: AND
16511: IFFALSE 16604
16513: GO 16515
16515: DISABLE
16516: LD_INT 0
16518: PPUSH
// begin enable ;
16519: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16520: LD_ADDR_VAR 0 1
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 5
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 9
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 25
16562: PUSH
16563: LD_INT 8
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: PUSH
16585: FOR_IN
16586: IFFALSE 16602
// begin SetClass ( i , 1 ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 336
// end ;
16600: GO 16585
16602: POP
16603: POP
// end ;
16604: PPOPN 1
16606: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16607: LD_EXP 42
16611: PUSH
16612: LD_EXP 46
16616: AND
16617: PUSH
16618: LD_OWVAR 65
16622: PUSH
16623: LD_INT 7
16625: LESS
16626: AND
16627: IFFALSE 16641
16629: GO 16631
16631: DISABLE
// begin enable ;
16632: ENABLE
// game_speed := 7 ;
16633: LD_ADDR_OWVAR 65
16637: PUSH
16638: LD_INT 7
16640: ST_TO_ADDR
// end ;
16641: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16642: LD_EXP 42
16646: PUSH
16647: LD_EXP 49
16651: AND
16652: IFFALSE 16854
16654: GO 16656
16656: DISABLE
16657: LD_INT 0
16659: PPUSH
16660: PPUSH
16661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16662: LD_ADDR_VAR 0 3
16666: PUSH
16667: LD_INT 81
16669: PUSH
16670: LD_OWVAR 2
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not tmp then
16698: LD_VAR 0 3
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16854
// if tmp > 5 then
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 5
16714: GREATER
16715: IFFALSE 16727
// k := 5 else
16717: LD_ADDR_VAR 0 2
16721: PUSH
16722: LD_INT 5
16724: ST_TO_ADDR
16725: GO 16737
// k := tmp ;
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: LD_VAR 0 3
16736: ST_TO_ADDR
// for i := 1 to k do
16737: LD_ADDR_VAR 0 1
16741: PUSH
16742: DOUBLE
16743: LD_INT 1
16745: DEC
16746: ST_TO_ADDR
16747: LD_VAR 0 2
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16852
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16755: LD_VAR 0 3
16759: PUSH
16760: LD_VAR 0 1
16764: ARRAY
16765: PPUSH
16766: LD_VAR 0 1
16770: PUSH
16771: LD_INT 4
16773: MOD
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: CALL_OW 259
16783: PUSH
16784: LD_INT 10
16786: LESS
16787: IFFALSE 16850
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16789: LD_VAR 0 3
16793: PUSH
16794: LD_VAR 0 1
16798: ARRAY
16799: PPUSH
16800: LD_VAR 0 1
16804: PUSH
16805: LD_INT 4
16807: MOD
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: PPUSH
16813: LD_VAR 0 3
16817: PUSH
16818: LD_VAR 0 1
16822: ARRAY
16823: PPUSH
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 4
16831: MOD
16832: PUSH
16833: LD_INT 1
16835: PLUS
16836: PPUSH
16837: CALL_OW 259
16841: PUSH
16842: LD_INT 1
16844: PLUS
16845: PPUSH
16846: CALL_OW 237
16850: GO 16752
16852: POP
16853: POP
// end ;
16854: PPOPN 3
16856: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16857: LD_EXP 42
16861: PUSH
16862: LD_EXP 50
16866: AND
16867: IFFALSE 16887
16869: GO 16871
16871: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16872: LD_INT 4
16874: PPUSH
16875: LD_OWVAR 2
16879: PPUSH
16880: LD_INT 0
16882: PPUSH
16883: CALL_OW 324
16887: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16888: LD_EXP 42
16892: PUSH
16893: LD_EXP 79
16897: AND
16898: IFFALSE 16918
16900: GO 16902
16902: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16903: LD_INT 19
16905: PPUSH
16906: LD_OWVAR 2
16910: PPUSH
16911: LD_INT 0
16913: PPUSH
16914: CALL_OW 324
16918: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16919: LD_EXP 42
16923: PUSH
16924: LD_EXP 51
16928: AND
16929: IFFALSE 17031
16931: GO 16933
16933: DISABLE
16934: LD_INT 0
16936: PPUSH
16937: PPUSH
// begin enable ;
16938: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16939: LD_ADDR_VAR 0 2
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_OWVAR 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 34
16961: PUSH
16962: LD_INT 11
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 34
16971: PUSH
16972: LD_INT 30
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if not tmp then
16993: LD_VAR 0 2
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17031
// for i in tmp do
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: LD_VAR 0 2
17011: PUSH
17012: FOR_IN
17013: IFFALSE 17029
// begin SetLives ( i , 0 ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 0
17022: PPUSH
17023: CALL_OW 234
// end ;
17027: GO 17012
17029: POP
17030: POP
// end ;
17031: PPOPN 2
17033: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17034: LD_EXP 42
17038: PUSH
17039: LD_EXP 52
17043: AND
17044: IFFALSE 17064
17046: GO 17048
17048: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17049: LD_INT 32
17051: PPUSH
17052: LD_OWVAR 2
17056: PPUSH
17057: LD_INT 0
17059: PPUSH
17060: CALL_OW 324
17064: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17065: LD_EXP 42
17069: PUSH
17070: LD_EXP 53
17074: AND
17075: IFFALSE 17256
17077: GO 17079
17079: DISABLE
17080: LD_INT 0
17082: PPUSH
17083: PPUSH
17084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17085: LD_ADDR_VAR 0 2
17089: PUSH
17090: LD_INT 22
17092: PUSH
17093: LD_OWVAR 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 33
17104: PUSH
17105: LD_INT 3
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17256
// side := 0 ;
17130: LD_ADDR_VAR 0 3
17134: PUSH
17135: LD_INT 0
17137: ST_TO_ADDR
// for i := 1 to 8 do
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: DOUBLE
17144: LD_INT 1
17146: DEC
17147: ST_TO_ADDR
17148: LD_INT 8
17150: PUSH
17151: FOR_TO
17152: IFFALSE 17200
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17154: LD_OWVAR 2
17158: PUSH
17159: LD_VAR 0 1
17163: NONEQUAL
17164: PUSH
17165: LD_OWVAR 2
17169: PPUSH
17170: LD_VAR 0 1
17174: PPUSH
17175: CALL_OW 81
17179: PUSH
17180: LD_INT 2
17182: EQUAL
17183: AND
17184: IFFALSE 17198
// begin side := i ;
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: LD_VAR 0 1
17195: ST_TO_ADDR
// break ;
17196: GO 17200
// end ;
17198: GO 17151
17200: POP
17201: POP
// if not side then
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17211
// exit ;
17209: GO 17256
// for i := 1 to tmp do
17211: LD_ADDR_VAR 0 1
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_VAR 0 2
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17254
// if Prob ( 60 ) then
17229: LD_INT 60
17231: PPUSH
17232: CALL_OW 13
17236: IFFALSE 17252
// SetSide ( i , side ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: CALL_OW 235
17252: GO 17226
17254: POP
17255: POP
// end ;
17256: PPOPN 3
17258: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17259: LD_EXP 42
17263: PUSH
17264: LD_EXP 55
17268: AND
17269: IFFALSE 17388
17271: GO 17273
17273: DISABLE
17274: LD_INT 0
17276: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_OWVAR 2
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 23
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 69
17330: PUSH
17331: FOR_IN
17332: IFFALSE 17386
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 257
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 4
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: IN
17362: IFFALSE 17384
// SetClass ( un , rand ( 1 , 4 ) ) ;
17364: LD_VAR 0 1
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: LD_INT 4
17374: PPUSH
17375: CALL_OW 12
17379: PPUSH
17380: CALL_OW 336
17384: GO 17331
17386: POP
17387: POP
// end ;
17388: PPOPN 1
17390: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17391: LD_EXP 42
17395: PUSH
17396: LD_EXP 54
17400: AND
17401: IFFALSE 17480
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_OWVAR 2
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 21
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: ST_TO_ADDR
// if not tmp then
17445: LD_VAR 0 1
17449: NOT
17450: IFFALSE 17454
// exit ;
17452: GO 17480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17454: LD_VAR 0 1
17458: PUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 12
17471: ARRAY
17472: PPUSH
17473: LD_INT 100
17475: PPUSH
17476: CALL_OW 234
// end ;
17480: PPOPN 1
17482: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17483: LD_EXP 42
17487: PUSH
17488: LD_EXP 56
17492: AND
17493: IFFALSE 17591
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17501: LD_ADDR_VAR 0 1
17505: PUSH
17506: LD_INT 22
17508: PUSH
17509: LD_OWVAR 2
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 21
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if not tmp then
17537: LD_VAR 0 1
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 17591
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17546: LD_VAR 0 1
17550: PUSH
17551: LD_INT 1
17553: PPUSH
17554: LD_VAR 0 1
17558: PPUSH
17559: CALL_OW 12
17563: ARRAY
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: LD_INT 4
17570: PPUSH
17571: CALL_OW 12
17575: PPUSH
17576: LD_INT 3000
17578: PPUSH
17579: LD_INT 9000
17581: PPUSH
17582: CALL_OW 12
17586: PPUSH
17587: CALL_OW 492
// end ;
17591: PPOPN 1
17593: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17594: LD_EXP 42
17598: PUSH
17599: LD_EXP 57
17603: AND
17604: IFFALSE 17624
17606: GO 17608
17608: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17609: LD_INT 1
17611: PPUSH
17612: LD_OWVAR 2
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 324
17624: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17625: LD_EXP 42
17629: PUSH
17630: LD_EXP 58
17634: AND
17635: IFFALSE 17718
17637: GO 17639
17639: DISABLE
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17644: LD_ADDR_VAR 0 2
17648: PUSH
17649: LD_INT 22
17651: PUSH
17652: LD_OWVAR 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 3
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// if not tmp then
17680: LD_VAR 0 2
17684: NOT
17685: IFFALSE 17689
// exit ;
17687: GO 17718
// for i in tmp do
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 2
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17716
// SetBLevel ( i , 10 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 10
17709: PPUSH
17710: CALL_OW 241
17714: GO 17699
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17721: LD_EXP 42
17725: PUSH
17726: LD_EXP 59
17730: AND
17731: IFFALSE 17842
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 25
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 3
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17842
// un := tmp [ rand ( 1 , tmp ) ] ;
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: CALL_OW 12
17808: ARRAY
17809: ST_TO_ADDR
// if Crawls ( un ) then
17810: LD_VAR 0 2
17814: PPUSH
17815: CALL_OW 318
17819: IFFALSE 17830
// ComWalk ( un ) ;
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17830: LD_VAR 0 2
17834: PPUSH
17835: LD_INT 5
17837: PPUSH
17838: CALL_OW 336
// end ;
17842: PPOPN 3
17844: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17845: LD_EXP 42
17849: PUSH
17850: LD_EXP 60
17854: AND
17855: PUSH
17856: LD_OWVAR 67
17860: PUSH
17861: LD_INT 3
17863: LESS
17864: AND
17865: IFFALSE 17884
17867: GO 17869
17869: DISABLE
// Difficulty := Difficulty + 1 ;
17870: LD_ADDR_OWVAR 67
17874: PUSH
17875: LD_OWVAR 67
17879: PUSH
17880: LD_INT 1
17882: PLUS
17883: ST_TO_ADDR
17884: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17885: LD_EXP 42
17889: PUSH
17890: LD_EXP 61
17894: AND
17895: IFFALSE 17998
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
// begin for i := 1 to 5 do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: DOUBLE
17909: LD_INT 1
17911: DEC
17912: ST_TO_ADDR
17913: LD_INT 5
17915: PUSH
17916: FOR_TO
17917: IFFALSE 17996
// begin uc_nation := nation_nature ;
17919: LD_ADDR_OWVAR 21
17923: PUSH
17924: LD_INT 0
17926: ST_TO_ADDR
// uc_side := 0 ;
17927: LD_ADDR_OWVAR 20
17931: PUSH
17932: LD_INT 0
17934: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17935: LD_ADDR_OWVAR 29
17939: PUSH
17940: LD_INT 12
17942: PUSH
17943: LD_INT 12
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// hc_agressivity := 20 ;
17950: LD_ADDR_OWVAR 35
17954: PUSH
17955: LD_INT 20
17957: ST_TO_ADDR
// hc_class := class_tiger ;
17958: LD_ADDR_OWVAR 28
17962: PUSH
17963: LD_INT 14
17965: ST_TO_ADDR
// hc_gallery :=  ;
17966: LD_ADDR_OWVAR 33
17970: PUSH
17971: LD_STRING 
17973: ST_TO_ADDR
// hc_name :=  ;
17974: LD_ADDR_OWVAR 26
17978: PUSH
17979: LD_STRING 
17981: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17982: CALL_OW 44
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 51
// end ;
17994: GO 17916
17996: POP
17997: POP
// end ;
17998: PPOPN 1
18000: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18001: LD_EXP 42
18005: PUSH
18006: LD_EXP 62
18010: AND
18011: IFFALSE 18020
18013: GO 18015
18015: DISABLE
// StreamSibBomb ;
18016: CALL 18021 0 0
18020: END
// export function StreamSibBomb ; var i , x , y ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
// result := false ;
18027: LD_ADDR_VAR 0 1
18031: PUSH
18032: LD_INT 0
18034: ST_TO_ADDR
// for i := 1 to 16 do
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: DOUBLE
18041: LD_INT 1
18043: DEC
18044: ST_TO_ADDR
18045: LD_INT 16
18047: PUSH
18048: FOR_TO
18049: IFFALSE 18248
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18051: LD_ADDR_VAR 0 3
18055: PUSH
18056: LD_INT 10
18058: PUSH
18059: LD_INT 20
18061: PUSH
18062: LD_INT 30
18064: PUSH
18065: LD_INT 40
18067: PUSH
18068: LD_INT 50
18070: PUSH
18071: LD_INT 60
18073: PUSH
18074: LD_INT 70
18076: PUSH
18077: LD_INT 80
18079: PUSH
18080: LD_INT 90
18082: PUSH
18083: LD_INT 100
18085: PUSH
18086: LD_INT 110
18088: PUSH
18089: LD_INT 120
18091: PUSH
18092: LD_INT 130
18094: PUSH
18095: LD_INT 140
18097: PUSH
18098: LD_INT 150
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PPUSH
18121: LD_INT 15
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18130: LD_ADDR_VAR 0 4
18134: PUSH
18135: LD_INT 10
18137: PUSH
18138: LD_INT 20
18140: PUSH
18141: LD_INT 30
18143: PUSH
18144: LD_INT 40
18146: PUSH
18147: LD_INT 50
18149: PUSH
18150: LD_INT 60
18152: PUSH
18153: LD_INT 70
18155: PUSH
18156: LD_INT 80
18158: PUSH
18159: LD_INT 90
18161: PUSH
18162: LD_INT 100
18164: PUSH
18165: LD_INT 110
18167: PUSH
18168: LD_INT 120
18170: PUSH
18171: LD_INT 130
18173: PUSH
18174: LD_INT 140
18176: PUSH
18177: LD_INT 150
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PPUSH
18200: LD_INT 15
18202: PPUSH
18203: CALL_OW 12
18207: ARRAY
18208: ST_TO_ADDR
// if ValidHex ( x , y ) then
18209: LD_VAR 0 3
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 488
18223: IFFALSE 18246
// begin result := [ x , y ] ;
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: LD_VAR 0 3
18234: PUSH
18235: LD_VAR 0 4
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: ST_TO_ADDR
// break ;
18244: GO 18248
// end ; end ;
18246: GO 18048
18248: POP
18249: POP
// if result then
18250: LD_VAR 0 1
18254: IFFALSE 18314
// begin ToLua ( playSibBomb() ) ;
18256: LD_STRING playSibBomb()
18258: PPUSH
18259: CALL_OW 559
// wait ( 0 0$14 ) ;
18263: LD_INT 490
18265: PPUSH
18266: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 1
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PPUSH
18288: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18292: LD_VAR 0 1
18296: PUSH
18297: LD_INT 1
18299: ARRAY
18300: PPUSH
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 2
18308: ARRAY
18309: PPUSH
18310: CALL_OW 429
// end ; end ;
18314: LD_VAR 0 1
18318: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18319: LD_EXP 42
18323: PUSH
18324: LD_EXP 64
18328: AND
18329: IFFALSE 18341
18331: GO 18333
18333: DISABLE
// YouLost (  ) ;
18334: LD_STRING 
18336: PPUSH
18337: CALL_OW 104
18341: END
// every 0 0$1 trigger StreamModeActive and sFog do
18342: LD_EXP 42
18346: PUSH
18347: LD_EXP 63
18351: AND
18352: IFFALSE 18366
18354: GO 18356
18356: DISABLE
// FogOff ( your_side ) ;
18357: LD_OWVAR 2
18361: PPUSH
18362: CALL_OW 344
18366: END
// every 0 0$1 trigger StreamModeActive and sSun do
18367: LD_EXP 42
18371: PUSH
18372: LD_EXP 65
18376: AND
18377: IFFALSE 18405
18379: GO 18381
18381: DISABLE
// begin solar_recharge_percent := 0 ;
18382: LD_ADDR_OWVAR 79
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18390: LD_INT 10500
18392: PPUSH
18393: CALL_OW 67
// solar_recharge_percent := 100 ;
18397: LD_ADDR_OWVAR 79
18401: PUSH
18402: LD_INT 100
18404: ST_TO_ADDR
// end ;
18405: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18406: LD_EXP 42
18410: PUSH
18411: LD_EXP 66
18415: AND
18416: IFFALSE 18655
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := [ ] ;
18426: LD_ADDR_VAR 0 3
18430: PUSH
18431: EMPTY
18432: ST_TO_ADDR
// for i := 1 to 6 do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: DOUBLE
18439: LD_INT 1
18441: DEC
18442: ST_TO_ADDR
18443: LD_INT 6
18445: PUSH
18446: FOR_TO
18447: IFFALSE 18552
// begin uc_nation := nation_nature ;
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// uc_side := 0 ;
18457: LD_ADDR_OWVAR 20
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18465: LD_ADDR_OWVAR 29
18469: PUSH
18470: LD_INT 12
18472: PUSH
18473: LD_INT 12
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// hc_agressivity := 20 ;
18480: LD_ADDR_OWVAR 35
18484: PUSH
18485: LD_INT 20
18487: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18488: LD_ADDR_OWVAR 28
18492: PUSH
18493: LD_INT 17
18495: ST_TO_ADDR
// hc_gallery :=  ;
18496: LD_ADDR_OWVAR 33
18500: PUSH
18501: LD_STRING 
18503: ST_TO_ADDR
// hc_name :=  ;
18504: LD_ADDR_OWVAR 26
18508: PUSH
18509: LD_STRING 
18511: ST_TO_ADDR
// un := CreateHuman ;
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: CALL_OW 44
18521: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 51
// tmp := tmp ^ un ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 3
18543: PUSH
18544: LD_VAR 0 2
18548: ADD
18549: ST_TO_ADDR
// end ;
18550: GO 18446
18552: POP
18553: POP
// repeat wait ( 0 0$1 ) ;
18554: LD_INT 35
18556: PPUSH
18557: CALL_OW 67
// for un in tmp do
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_VAR 0 3
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18646
// begin if IsDead ( un ) then
18574: LD_VAR 0 2
18578: PPUSH
18579: CALL_OW 301
18583: IFFALSE 18603
// begin tmp := tmp diff un ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_VAR 0 3
18594: PUSH
18595: LD_VAR 0 2
18599: DIFF
18600: ST_TO_ADDR
// continue ;
18601: GO 18571
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_INT 3
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PPUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 74
18639: PPUSH
18640: CALL_OW 115
// end ;
18644: GO 18571
18646: POP
18647: POP
// until not tmp ;
18648: LD_VAR 0 3
18652: NOT
18653: IFFALSE 18554
// end ;
18655: PPOPN 3
18657: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18658: LD_EXP 42
18662: PUSH
18663: LD_EXP 67
18667: AND
18668: IFFALSE 18722
18670: GO 18672
18672: DISABLE
// begin ToLua ( displayTroll(); ) ;
18673: LD_STRING displayTroll();
18675: PPUSH
18676: CALL_OW 559
// wait ( 3 3$00 ) ;
18680: LD_INT 6300
18682: PPUSH
18683: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18687: LD_STRING hideTroll();
18689: PPUSH
18690: CALL_OW 559
// wait ( 1 1$00 ) ;
18694: LD_INT 2100
18696: PPUSH
18697: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18701: LD_STRING displayTroll();
18703: PPUSH
18704: CALL_OW 559
// wait ( 1 1$00 ) ;
18708: LD_INT 2100
18710: PPUSH
18711: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18715: LD_STRING hideTroll();
18717: PPUSH
18718: CALL_OW 559
// end ;
18722: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18723: LD_EXP 42
18727: PUSH
18728: LD_EXP 68
18732: AND
18733: IFFALSE 18796
18735: GO 18737
18737: DISABLE
18738: LD_INT 0
18740: PPUSH
// begin p := 0 ;
18741: LD_ADDR_VAR 0 1
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// repeat game_speed := 1 ;
18749: LD_ADDR_OWVAR 65
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18757: LD_INT 35
18759: PPUSH
18760: CALL_OW 67
// p := p + 1 ;
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_VAR 0 1
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// until p >= 60 ;
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 60
18785: GREATEREQUAL
18786: IFFALSE 18749
// game_speed := 4 ;
18788: LD_ADDR_OWVAR 65
18792: PUSH
18793: LD_INT 4
18795: ST_TO_ADDR
// end ;
18796: PPOPN 1
18798: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18799: LD_EXP 42
18803: PUSH
18804: LD_EXP 69
18808: AND
18809: IFFALSE 18955
18811: GO 18813
18813: DISABLE
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18818: LD_ADDR_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 30
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 30
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: CALL_OW 69
18871: ST_TO_ADDR
// if not depot then
18872: LD_VAR 0 1
18876: NOT
18877: IFFALSE 18881
// exit ;
18879: GO 18955
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 1
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 12
18903: ARRAY
18904: PPUSH
18905: CALL_OW 274
18909: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18910: LD_VAR 0 2
18914: PPUSH
18915: LD_INT 1
18917: PPUSH
18918: LD_INT 0
18920: PPUSH
18921: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18925: LD_VAR 0 2
18929: PPUSH
18930: LD_INT 2
18932: PPUSH
18933: LD_INT 0
18935: PPUSH
18936: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18940: LD_VAR 0 2
18944: PPUSH
18945: LD_INT 3
18947: PPUSH
18948: LD_INT 0
18950: PPUSH
18951: CALL_OW 277
// end ;
18955: PPOPN 2
18957: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18958: LD_EXP 42
18962: PUSH
18963: LD_EXP 70
18967: AND
18968: IFFALSE 19065
18970: GO 18972
18972: DISABLE
18973: LD_INT 0
18975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18976: LD_ADDR_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_OWVAR 2
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 23
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: ST_TO_ADDR
// if not tmp then
19030: LD_VAR 0 1
19034: NOT
19035: IFFALSE 19039
// exit ;
19037: GO 19065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19039: LD_VAR 0 1
19043: PUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 12
19056: ARRAY
19057: PPUSH
19058: LD_INT 200
19060: PPUSH
19061: CALL_OW 234
// end ;
19065: PPOPN 1
19067: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19068: LD_EXP 42
19072: PUSH
19073: LD_EXP 71
19077: AND
19078: IFFALSE 19157
19080: GO 19082
19082: DISABLE
19083: LD_INT 0
19085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19086: LD_ADDR_VAR 0 1
19090: PUSH
19091: LD_INT 22
19093: PUSH
19094: LD_OWVAR 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 21
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PPUSH
19117: CALL_OW 69
19121: ST_TO_ADDR
// if not tmp then
19122: LD_VAR 0 1
19126: NOT
19127: IFFALSE 19131
// exit ;
19129: GO 19157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19131: LD_VAR 0 1
19135: PUSH
19136: LD_INT 1
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 12
19148: ARRAY
19149: PPUSH
19150: LD_INT 60
19152: PPUSH
19153: CALL_OW 234
// end ;
19157: PPOPN 1
19159: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19160: LD_EXP 42
19164: PUSH
19165: LD_EXP 72
19169: AND
19170: IFFALSE 19269
19172: GO 19174
19174: DISABLE
19175: LD_INT 0
19177: PPUSH
19178: PPUSH
// begin enable ;
19179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19180: LD_ADDR_VAR 0 1
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_OWVAR 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 61
19199: PUSH
19200: EMPTY
19201: LIST
19202: PUSH
19203: LD_INT 33
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: LIST
19217: PPUSH
19218: CALL_OW 69
19222: ST_TO_ADDR
// if not tmp then
19223: LD_VAR 0 1
19227: NOT
19228: IFFALSE 19232
// exit ;
19230: GO 19269
// for i in tmp do
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: LD_VAR 0 1
19241: PUSH
19242: FOR_IN
19243: IFFALSE 19267
// if IsControledBy ( i ) then
19245: LD_VAR 0 2
19249: PPUSH
19250: CALL_OW 312
19254: IFFALSE 19265
// ComUnlink ( i ) ;
19256: LD_VAR 0 2
19260: PPUSH
19261: CALL_OW 136
19265: GO 19242
19267: POP
19268: POP
// end ;
19269: PPOPN 2
19271: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19272: LD_EXP 42
19276: PUSH
19277: LD_EXP 73
19281: AND
19282: IFFALSE 19422
19284: GO 19286
19286: DISABLE
19287: LD_INT 0
19289: PPUSH
19290: PPUSH
// begin ToLua ( displayPowell(); ) ;
19291: LD_STRING displayPowell();
19293: PPUSH
19294: CALL_OW 559
// uc_side := 0 ;
19298: LD_ADDR_OWVAR 20
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// uc_nation := 2 ;
19306: LD_ADDR_OWVAR 21
19310: PUSH
19311: LD_INT 2
19313: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19314: LD_ADDR_OWVAR 37
19318: PUSH
19319: LD_INT 14
19321: ST_TO_ADDR
// vc_engine := engine_siberite ;
19322: LD_ADDR_OWVAR 39
19326: PUSH
19327: LD_INT 3
19329: ST_TO_ADDR
// vc_control := control_apeman ;
19330: LD_ADDR_OWVAR 38
19334: PUSH
19335: LD_INT 5
19337: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19338: LD_ADDR_OWVAR 40
19342: PUSH
19343: LD_INT 29
19345: ST_TO_ADDR
// un := CreateVehicle ;
19346: LD_ADDR_VAR 0 2
19350: PUSH
19351: CALL_OW 45
19355: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19356: LD_VAR 0 2
19360: PPUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19368: LD_INT 35
19370: PPUSH
19371: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19375: LD_VAR 0 2
19379: PPUSH
19380: LD_INT 22
19382: PUSH
19383: LD_OWVAR 2
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: PPUSH
19397: LD_VAR 0 2
19401: PPUSH
19402: CALL_OW 74
19406: PPUSH
19407: CALL_OW 115
// until IsDead ( un ) ;
19411: LD_VAR 0 2
19415: PPUSH
19416: CALL_OW 301
19420: IFFALSE 19368
// end ;
19422: PPOPN 2
19424: END
// every 0 0$1 trigger StreamModeActive and sStu do
19425: LD_EXP 42
19429: PUSH
19430: LD_EXP 81
19434: AND
19435: IFFALSE 19451
19437: GO 19439
19439: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19440: LD_STRING displayStucuk();
19442: PPUSH
19443: CALL_OW 559
// ResetFog ;
19447: CALL_OW 335
// end ;
19451: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19452: LD_EXP 42
19456: PUSH
19457: LD_EXP 74
19461: AND
19462: IFFALSE 19603
19464: GO 19466
19466: DISABLE
19467: LD_INT 0
19469: PPUSH
19470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_OWVAR 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 69
19506: ST_TO_ADDR
// if not tmp then
19507: LD_VAR 0 2
19511: NOT
19512: IFFALSE 19516
// exit ;
19514: GO 19603
// un := tmp [ rand ( 1 , tmp ) ] ;
19516: LD_ADDR_VAR 0 1
19520: PUSH
19521: LD_VAR 0 2
19525: PUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_VAR 0 2
19533: PPUSH
19534: CALL_OW 12
19538: ARRAY
19539: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: LD_INT 0
19547: PPUSH
19548: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_OWVAR 3
19561: PUSH
19562: LD_VAR 0 1
19566: DIFF
19567: PPUSH
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 74
19577: PPUSH
19578: CALL_OW 115
// wait ( 0 0$20 ) ;
19582: LD_INT 700
19584: PPUSH
19585: CALL_OW 67
// SetSide ( un , your_side ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: LD_OWVAR 2
19598: PPUSH
19599: CALL_OW 235
// end ;
19603: PPOPN 2
19605: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19606: LD_EXP 42
19610: PUSH
19611: LD_EXP 75
19615: AND
19616: IFFALSE 19722
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: LD_INT 30
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 30
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PPUSH
19673: CALL_OW 69
19677: ST_TO_ADDR
// if not depot then
19678: LD_VAR 0 1
19682: NOT
19683: IFFALSE 19687
// exit ;
19685: GO 19722
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: PPUSH
19696: CALL_OW 250
19700: PPUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PPUSH
19710: CALL_OW 251
19714: PPUSH
19715: LD_INT 70
19717: PPUSH
19718: CALL_OW 495
// end ;
19722: PPOPN 1
19724: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19725: LD_EXP 42
19729: PUSH
19730: LD_EXP 76
19734: AND
19735: IFFALSE 19946
19737: GO 19739
19739: DISABLE
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
19744: PPUSH
19745: PPUSH
19746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19747: LD_ADDR_VAR 0 5
19751: PUSH
19752: LD_INT 22
19754: PUSH
19755: LD_OWVAR 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: ST_TO_ADDR
// if not tmp then
19783: LD_VAR 0 5
19787: NOT
19788: IFFALSE 19792
// exit ;
19790: GO 19946
// for i in tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: LD_VAR 0 5
19801: PUSH
19802: FOR_IN
19803: IFFALSE 19944
// begin d := rand ( 0 , 5 ) ;
19805: LD_ADDR_VAR 0 4
19809: PUSH
19810: LD_INT 0
19812: PPUSH
19813: LD_INT 5
19815: PPUSH
19816: CALL_OW 12
19820: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: LD_VAR 0 1
19830: PPUSH
19831: CALL_OW 250
19835: PPUSH
19836: LD_VAR 0 4
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: LD_INT 12
19846: PPUSH
19847: CALL_OW 12
19851: PPUSH
19852: CALL_OW 272
19856: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 251
19871: PPUSH
19872: LD_VAR 0 4
19876: PPUSH
19877: LD_INT 3
19879: PPUSH
19880: LD_INT 12
19882: PPUSH
19883: CALL_OW 12
19887: PPUSH
19888: CALL_OW 273
19892: ST_TO_ADDR
// if ValidHex ( x , y ) then
19893: LD_VAR 0 2
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 488
19907: IFFALSE 19942
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_VAR 0 2
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: LD_INT 3
19926: PPUSH
19927: LD_INT 6
19929: PPUSH
19930: CALL_OW 12
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: CALL_OW 483
// end ;
19942: GO 19802
19944: POP
19945: POP
// end ;
19946: PPOPN 5
19948: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19949: LD_EXP 42
19953: PUSH
19954: LD_EXP 77
19958: AND
19959: IFFALSE 20053
19961: GO 19963
19963: DISABLE
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 22
19975: PUSH
19976: LD_OWVAR 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 32
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 2
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20053
// for i in tmp do
20024: LD_ADDR_VAR 0 1
20028: PUSH
20029: LD_VAR 0 2
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20051
// SetFuel ( i , 0 ) ;
20037: LD_VAR 0 1
20041: PPUSH
20042: LD_INT 0
20044: PPUSH
20045: CALL_OW 240
20049: GO 20034
20051: POP
20052: POP
// end ;
20053: PPOPN 2
20055: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20056: LD_EXP 42
20060: PUSH
20061: LD_EXP 78
20065: AND
20066: IFFALSE 20132
20068: GO 20070
20070: DISABLE
20071: LD_INT 0
20073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20074: LD_ADDR_VAR 0 1
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_OWVAR 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 29
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: ST_TO_ADDR
// if not tmp then
20110: LD_VAR 0 1
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20132
// DestroyUnit ( tmp [ 1 ] ) ;
20119: LD_VAR 0 1
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: CALL_OW 65
// end ;
20132: PPOPN 1
20134: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20135: LD_EXP 42
20139: PUSH
20140: LD_EXP 80
20144: AND
20145: IFFALSE 20274
20147: GO 20149
20149: DISABLE
20150: LD_INT 0
20152: PPUSH
// begin uc_side := 0 ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// uc_nation := nation_arabian ;
20161: LD_ADDR_OWVAR 21
20165: PUSH
20166: LD_INT 2
20168: ST_TO_ADDR
// hc_gallery :=  ;
20169: LD_ADDR_OWVAR 33
20173: PUSH
20174: LD_STRING 
20176: ST_TO_ADDR
// hc_name :=  ;
20177: LD_ADDR_OWVAR 26
20181: PUSH
20182: LD_STRING 
20184: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20185: LD_INT 1
20187: PPUSH
20188: LD_INT 11
20190: PPUSH
20191: LD_INT 10
20193: PPUSH
20194: CALL_OW 380
// un := CreateHuman ;
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: CALL_OW 44
20207: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20208: LD_VAR 0 1
20212: PPUSH
20213: LD_INT 1
20215: PPUSH
20216: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20220: LD_INT 35
20222: PPUSH
20223: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20227: LD_VAR 0 1
20231: PPUSH
20232: LD_INT 22
20234: PUSH
20235: LD_OWVAR 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: CALL_OW 69
20248: PPUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 74
20258: PPUSH
20259: CALL_OW 115
// until IsDead ( un ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: CALL_OW 301
20272: IFFALSE 20220
// end ;
20274: PPOPN 1
20276: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20277: LD_EXP 42
20281: PUSH
20282: LD_EXP 82
20286: AND
20287: IFFALSE 20299
20289: GO 20291
20291: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20292: LD_STRING earthquake(getX(game), 0, 32)
20294: PPUSH
20295: CALL_OW 559
20299: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20300: LD_EXP 42
20304: PUSH
20305: LD_EXP 83
20309: AND
20310: IFFALSE 20401
20312: GO 20314
20314: DISABLE
20315: LD_INT 0
20317: PPUSH
// begin enable ;
20318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20319: LD_ADDR_VAR 0 1
20323: PUSH
20324: LD_INT 22
20326: PUSH
20327: LD_OWVAR 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 21
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 33
20348: PUSH
20349: LD_INT 3
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: PPUSH
20361: CALL_OW 69
20365: ST_TO_ADDR
// if not tmp then
20366: LD_VAR 0 1
20370: NOT
20371: IFFALSE 20375
// exit ;
20373: GO 20401
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20375: LD_VAR 0 1
20379: PUSH
20380: LD_INT 1
20382: PPUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 12
20392: ARRAY
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: CALL_OW 234
// end ;
20401: PPOPN 1
20403: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20404: LD_EXP 42
20408: PUSH
20409: LD_EXP 84
20413: AND
20414: IFFALSE 20555
20416: GO 20418
20418: DISABLE
20419: LD_INT 0
20421: PPUSH
20422: PPUSH
20423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20424: LD_ADDR_VAR 0 3
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 25
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not tmp then
20460: LD_VAR 0 3
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20555
// un := tmp [ rand ( 1 , tmp ) ] ;
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_VAR 0 3
20486: PPUSH
20487: CALL_OW 12
20491: ARRAY
20492: ST_TO_ADDR
// if Crawls ( un ) then
20493: LD_VAR 0 2
20497: PPUSH
20498: CALL_OW 318
20502: IFFALSE 20513
// ComWalk ( un ) ;
20504: LD_VAR 0 2
20508: PPUSH
20509: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 9
20520: PPUSH
20521: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20525: LD_INT 28
20527: PPUSH
20528: LD_OWVAR 2
20532: PPUSH
20533: LD_INT 2
20535: PPUSH
20536: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20540: LD_INT 29
20542: PPUSH
20543: LD_OWVAR 2
20547: PPUSH
20548: LD_INT 2
20550: PPUSH
20551: CALL_OW 322
// end ;
20555: PPOPN 3
20557: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20558: LD_EXP 42
20562: PUSH
20563: LD_EXP 85
20567: AND
20568: IFFALSE 20679
20570: GO 20572
20572: DISABLE
20573: LD_INT 0
20575: PPUSH
20576: PPUSH
20577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_OWVAR 2
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 25
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: ST_TO_ADDR
// if not tmp then
20614: LD_VAR 0 3
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 20679
// un := tmp [ rand ( 1 , tmp ) ] ;
20623: LD_ADDR_VAR 0 2
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: ST_TO_ADDR
// if Crawls ( un ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 318
20656: IFFALSE 20667
// ComWalk ( un ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20667: LD_VAR 0 2
20671: PPUSH
20672: LD_INT 8
20674: PPUSH
20675: CALL_OW 336
// end ;
20679: PPOPN 3
20681: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20682: LD_EXP 42
20686: PUSH
20687: LD_EXP 86
20691: AND
20692: IFFALSE 20836
20694: GO 20696
20696: DISABLE
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20701: LD_ADDR_VAR 0 2
20705: PUSH
20706: LD_INT 22
20708: PUSH
20709: LD_OWVAR 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 21
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: LD_INT 34
20733: PUSH
20734: LD_INT 12
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 34
20743: PUSH
20744: LD_INT 51
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 34
20753: PUSH
20754: LD_INT 32
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: LIST
20771: PPUSH
20772: CALL_OW 69
20776: ST_TO_ADDR
// if not tmp then
20777: LD_VAR 0 2
20781: NOT
20782: IFFALSE 20786
// exit ;
20784: GO 20836
// for i in tmp do
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_VAR 0 2
20795: PUSH
20796: FOR_IN
20797: IFFALSE 20834
// if GetCargo ( i , mat_artifact ) = 0 then
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_INT 4
20806: PPUSH
20807: CALL_OW 289
20811: PUSH
20812: LD_INT 0
20814: EQUAL
20815: IFFALSE 20832
// SetCargo ( i , mat_siberit , 100 ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 3
20824: PPUSH
20825: LD_INT 100
20827: PPUSH
20828: CALL_OW 290
20832: GO 20796
20834: POP
20835: POP
// end ;
20836: PPOPN 2
20838: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20839: LD_EXP 42
20843: PUSH
20844: LD_EXP 87
20848: AND
20849: IFFALSE 21032
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 22
20865: PUSH
20866: LD_OWVAR 2
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 69
20879: ST_TO_ADDR
// if not tmp then
20880: LD_VAR 0 2
20884: NOT
20885: IFFALSE 20889
// exit ;
20887: GO 21032
// for i := 1 to 2 do
20889: LD_ADDR_VAR 0 1
20893: PUSH
20894: DOUBLE
20895: LD_INT 1
20897: DEC
20898: ST_TO_ADDR
20899: LD_INT 2
20901: PUSH
20902: FOR_TO
20903: IFFALSE 21030
// begin uc_side := your_side ;
20905: LD_ADDR_OWVAR 20
20909: PUSH
20910: LD_OWVAR 2
20914: ST_TO_ADDR
// uc_nation := nation_american ;
20915: LD_ADDR_OWVAR 21
20919: PUSH
20920: LD_INT 1
20922: ST_TO_ADDR
// vc_chassis := us_morphling ;
20923: LD_ADDR_OWVAR 37
20927: PUSH
20928: LD_INT 5
20930: ST_TO_ADDR
// vc_engine := engine_siberite ;
20931: LD_ADDR_OWVAR 39
20935: PUSH
20936: LD_INT 3
20938: ST_TO_ADDR
// vc_control := control_computer ;
20939: LD_ADDR_OWVAR 38
20943: PUSH
20944: LD_INT 3
20946: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20947: LD_ADDR_OWVAR 40
20951: PUSH
20952: LD_INT 10
20954: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20955: LD_VAR 0 2
20959: PUSH
20960: LD_INT 1
20962: ARRAY
20963: PPUSH
20964: CALL_OW 310
20968: NOT
20969: IFFALSE 21016
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20971: CALL_OW 45
20975: PPUSH
20976: LD_VAR 0 2
20980: PUSH
20981: LD_INT 1
20983: ARRAY
20984: PPUSH
20985: CALL_OW 250
20989: PPUSH
20990: LD_VAR 0 2
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: CALL_OW 251
21003: PPUSH
21004: LD_INT 12
21006: PPUSH
21007: LD_INT 1
21009: PPUSH
21010: CALL_OW 50
21014: GO 21028
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21016: CALL_OW 45
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 51
// end ;
21028: GO 20902
21030: POP
21031: POP
// end ;
21032: PPOPN 2
21034: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21035: LD_EXP 42
21039: PUSH
21040: LD_EXP 88
21044: AND
21045: IFFALSE 21267
21047: GO 21049
21049: DISABLE
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21058: LD_ADDR_VAR 0 6
21062: PUSH
21063: LD_INT 22
21065: PUSH
21066: LD_OWVAR 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 21
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: LD_INT 23
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: PPUSH
21107: CALL_OW 69
21111: ST_TO_ADDR
// if not tmp then
21112: LD_VAR 0 6
21116: NOT
21117: IFFALSE 21121
// exit ;
21119: GO 21267
// s1 := rand ( 1 , 4 ) ;
21121: LD_ADDR_VAR 0 2
21125: PUSH
21126: LD_INT 1
21128: PPUSH
21129: LD_INT 4
21131: PPUSH
21132: CALL_OW 12
21136: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21137: LD_ADDR_VAR 0 4
21141: PUSH
21142: LD_VAR 0 6
21146: PUSH
21147: LD_INT 1
21149: ARRAY
21150: PPUSH
21151: LD_VAR 0 2
21155: PPUSH
21156: CALL_OW 259
21160: ST_TO_ADDR
// if s1 = 1 then
21161: LD_VAR 0 2
21165: PUSH
21166: LD_INT 1
21168: EQUAL
21169: IFFALSE 21189
// s2 := rand ( 2 , 4 ) else
21171: LD_ADDR_VAR 0 3
21175: PUSH
21176: LD_INT 2
21178: PPUSH
21179: LD_INT 4
21181: PPUSH
21182: CALL_OW 12
21186: ST_TO_ADDR
21187: GO 21197
// s2 := 1 ;
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: LD_INT 1
21196: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21197: LD_ADDR_VAR 0 5
21201: PUSH
21202: LD_VAR 0 6
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: CALL_OW 259
21220: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21221: LD_VAR 0 6
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: PPUSH
21230: LD_VAR 0 2
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21244: LD_VAR 0 6
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PPUSH
21253: LD_VAR 0 3
21257: PPUSH
21258: LD_VAR 0 4
21262: PPUSH
21263: CALL_OW 237
// end ;
21267: PPOPN 6
21269: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21270: LD_EXP 42
21274: PUSH
21275: LD_EXP 89
21279: AND
21280: IFFALSE 21359
21282: GO 21284
21284: DISABLE
21285: LD_INT 0
21287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_OWVAR 2
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PPUSH
21319: CALL_OW 69
21323: ST_TO_ADDR
// if not tmp then
21324: LD_VAR 0 1
21328: NOT
21329: IFFALSE 21333
// exit ;
21331: GO 21359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21333: LD_VAR 0 1
21337: PUSH
21338: LD_INT 1
21340: PPUSH
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 12
21350: ARRAY
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 234
// end ;
21359: PPOPN 1
21361: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21362: LD_EXP 42
21366: PUSH
21367: LD_EXP 90
21371: AND
21372: IFFALSE 21484
21374: GO 21376
21376: DISABLE
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21381: LD_ADDR_VAR 0 2
21385: PUSH
21386: LD_INT 22
21388: PUSH
21389: LD_OWVAR 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 27
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 30
21413: PUSH
21414: LD_INT 26
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 30
21423: PUSH
21424: LD_INT 28
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL_OW 69
21445: ST_TO_ADDR
// if not tmp then
21446: LD_VAR 0 2
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 21484
// for i in tmp do
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_VAR 0 2
21464: PUSH
21465: FOR_IN
21466: IFFALSE 21482
// SetLives ( i , 1 ) ;
21468: LD_VAR 0 1
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: CALL_OW 234
21480: GO 21465
21482: POP
21483: POP
// end ;
21484: PPOPN 2
21486: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21487: LD_EXP 42
21491: PUSH
21492: LD_EXP 91
21496: AND
21497: IFFALSE 21771
21499: GO 21501
21501: DISABLE
21502: LD_INT 0
21504: PPUSH
21505: PPUSH
21506: PPUSH
// begin i := rand ( 1 , 7 ) ;
21507: LD_ADDR_VAR 0 1
21511: PUSH
21512: LD_INT 1
21514: PPUSH
21515: LD_INT 7
21517: PPUSH
21518: CALL_OW 12
21522: ST_TO_ADDR
// case i of 1 :
21523: LD_VAR 0 1
21527: PUSH
21528: LD_INT 1
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21546
21536: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21537: LD_STRING earthquake(getX(game), 0, 32)
21539: PPUSH
21540: CALL_OW 559
21544: GO 21771
21546: LD_INT 2
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21568
21554: POP
// begin ToLua ( displayStucuk(); ) ;
21555: LD_STRING displayStucuk();
21557: PPUSH
21558: CALL_OW 559
// ResetFog ;
21562: CALL_OW 335
// end ; 3 :
21566: GO 21771
21568: LD_INT 3
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21680
21576: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_OWVAR 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 25
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: ST_TO_ADDR
// if not tmp then
21613: LD_VAR 0 2
21617: NOT
21618: IFFALSE 21622
// exit ;
21620: GO 21771
// un := tmp [ rand ( 1 , tmp ) ] ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_VAR 0 2
21631: PUSH
21632: LD_INT 1
21634: PPUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: CALL_OW 12
21644: ARRAY
21645: ST_TO_ADDR
// if Crawls ( un ) then
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL_OW 318
21655: IFFALSE 21666
// ComWalk ( un ) ;
21657: LD_VAR 0 3
21661: PPUSH
21662: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 8
21673: PPUSH
21674: CALL_OW 336
// end ; 4 :
21678: GO 21771
21680: LD_INT 4
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21749
21688: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21689: LD_ADDR_VAR 0 2
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_OWVAR 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 30
21708: PUSH
21709: LD_INT 29
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PPUSH
21720: CALL_OW 69
21724: ST_TO_ADDR
// if not tmp then
21725: LD_VAR 0 2
21729: NOT
21730: IFFALSE 21734
// exit ;
21732: GO 21771
// DestroyUnit ( tmp [ 1 ] ) ;
21734: LD_VAR 0 2
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PPUSH
21743: CALL_OW 65
// end ; 5 .. 7 :
21747: GO 21771
21749: LD_INT 5
21751: DOUBLE
21752: GREATEREQUAL
21753: IFFALSE 21761
21755: LD_INT 7
21757: DOUBLE
21758: LESSEQUAL
21759: IFTRUE 21763
21761: GO 21770
21763: POP
// StreamSibBomb ; end ;
21764: CALL 18021 0 0
21768: GO 21771
21770: POP
// end ;
21771: PPOPN 3
21773: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21774: LD_EXP 42
21778: PUSH
21779: LD_EXP 92
21783: AND
21784: IFFALSE 21940
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
21792: PPUSH
21793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_INT 81
21801: PUSH
21802: LD_OWVAR 2
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 21
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: ST_TO_ADDR
// if not tmp then
21848: LD_VAR 0 2
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21940
// p := 0 ;
21857: LD_ADDR_VAR 0 3
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21865: LD_INT 35
21867: PPUSH
21868: CALL_OW 67
// p := p + 1 ;
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_VAR 0 3
21881: PUSH
21882: LD_INT 1
21884: PLUS
21885: ST_TO_ADDR
// for i in tmp do
21886: LD_ADDR_VAR 0 1
21890: PUSH
21891: LD_VAR 0 2
21895: PUSH
21896: FOR_IN
21897: IFFALSE 21928
// if GetLives ( i ) < 1000 then
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 256
21908: PUSH
21909: LD_INT 1000
21911: LESS
21912: IFFALSE 21926
// SetLives ( i , 1000 ) ;
21914: LD_VAR 0 1
21918: PPUSH
21919: LD_INT 1000
21921: PPUSH
21922: CALL_OW 234
21926: GO 21896
21928: POP
21929: POP
// until p > 20 ;
21930: LD_VAR 0 3
21934: PUSH
21935: LD_INT 20
21937: GREATER
21938: IFFALSE 21865
// end ;
21940: PPOPN 3
21942: END
// every 0 0$1 trigger StreamModeActive and sTime do
21943: LD_EXP 42
21947: PUSH
21948: LD_EXP 93
21952: AND
21953: IFFALSE 21988
21955: GO 21957
21957: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21958: LD_INT 28
21960: PPUSH
21961: LD_OWVAR 2
21965: PPUSH
21966: LD_INT 2
21968: PPUSH
21969: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21973: LD_INT 30
21975: PPUSH
21976: LD_OWVAR 2
21980: PPUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 322
// end ;
21988: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21989: LD_EXP 42
21993: PUSH
21994: LD_EXP 94
21998: AND
21999: IFFALSE 22120
22001: GO 22003
22003: DISABLE
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22008: LD_ADDR_VAR 0 2
22012: PUSH
22013: LD_INT 22
22015: PUSH
22016: LD_OWVAR 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 21
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 3
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 69
22061: ST_TO_ADDR
// if not tmp then
22062: LD_VAR 0 2
22066: NOT
22067: IFFALSE 22071
// exit ;
22069: GO 22120
// for i in tmp do
22071: LD_ADDR_VAR 0 1
22075: PUSH
22076: LD_VAR 0 2
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22118
// begin if Crawls ( i ) then
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 318
22093: IFFALSE 22104
// ComWalk ( i ) ;
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 138
// SetClass ( i , 2 ) ;
22104: LD_VAR 0 1
22108: PPUSH
22109: LD_INT 2
22111: PPUSH
22112: CALL_OW 336
// end ;
22116: GO 22081
22118: POP
22119: POP
// end ;
22120: PPOPN 2
22122: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22123: LD_EXP 42
22127: PUSH
22128: LD_EXP 95
22132: AND
22133: IFFALSE 22414
22135: GO 22137
22137: DISABLE
22138: LD_INT 0
22140: PPUSH
22141: PPUSH
22142: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22143: LD_OWVAR 2
22147: PPUSH
22148: LD_INT 9
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_INT 1
22156: PPUSH
22157: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22161: LD_INT 9
22163: PPUSH
22164: LD_OWVAR 2
22168: PPUSH
22169: CALL_OW 343
// uc_side := 9 ;
22173: LD_ADDR_OWVAR 20
22177: PUSH
22178: LD_INT 9
22180: ST_TO_ADDR
// uc_nation := 2 ;
22181: LD_ADDR_OWVAR 21
22185: PUSH
22186: LD_INT 2
22188: ST_TO_ADDR
// hc_name := Dark Warrior ;
22189: LD_ADDR_OWVAR 26
22193: PUSH
22194: LD_STRING Dark Warrior
22196: ST_TO_ADDR
// hc_gallery :=  ;
22197: LD_ADDR_OWVAR 33
22201: PUSH
22202: LD_STRING 
22204: ST_TO_ADDR
// hc_noskilllimit := true ;
22205: LD_ADDR_OWVAR 76
22209: PUSH
22210: LD_INT 1
22212: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22213: LD_ADDR_OWVAR 31
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 30
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: ST_TO_ADDR
// un := CreateHuman ;
22236: LD_ADDR_VAR 0 3
22240: PUSH
22241: CALL_OW 44
22245: ST_TO_ADDR
// hc_noskilllimit := false ;
22246: LD_ADDR_OWVAR 76
22250: PUSH
22251: LD_INT 0
22253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22254: LD_VAR 0 3
22258: PPUSH
22259: LD_INT 1
22261: PPUSH
22262: CALL_OW 51
// p := 0 ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22274: LD_INT 35
22276: PPUSH
22277: CALL_OW 67
// p := p + 1 ;
22281: LD_ADDR_VAR 0 2
22285: PUSH
22286: LD_VAR 0 2
22290: PUSH
22291: LD_INT 1
22293: PLUS
22294: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL_OW 256
22304: PUSH
22305: LD_INT 1000
22307: LESS
22308: IFFALSE 22322
// SetLives ( un , 1000 ) ;
22310: LD_VAR 0 3
22314: PPUSH
22315: LD_INT 1000
22317: PPUSH
22318: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 81
22329: PUSH
22330: LD_OWVAR 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 91
22341: PUSH
22342: LD_VAR 0 3
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: PPUSH
22364: LD_VAR 0 3
22368: PPUSH
22369: CALL_OW 74
22373: PPUSH
22374: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22378: LD_VAR 0 2
22382: PUSH
22383: LD_INT 60
22385: GREATER
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 301
22396: OR
22397: IFFALSE 22274
// if un then
22399: LD_VAR 0 3
22403: IFFALSE 22414
// RemoveUnit ( un ) ;
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 64
// end ;
22414: PPOPN 3
22416: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22417: LD_INT 0
22419: PPUSH
// case cmd of 301 :
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 301
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22465
22433: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22434: LD_VAR 0 6
22438: PPUSH
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_VAR 0 8
22448: PPUSH
22449: LD_VAR 0 4
22453: PPUSH
22454: LD_VAR 0 5
22458: PPUSH
22459: CALL 23666 0 5
22463: GO 22586
22465: LD_INT 302
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22510
22473: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22474: LD_VAR 0 6
22478: PPUSH
22479: LD_VAR 0 7
22483: PPUSH
22484: LD_VAR 0 8
22488: PPUSH
22489: LD_VAR 0 9
22493: PPUSH
22494: LD_VAR 0 4
22498: PPUSH
22499: LD_VAR 0 5
22503: PPUSH
22504: CALL 23757 0 6
22508: GO 22586
22510: LD_INT 303
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22555
22518: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22519: LD_VAR 0 6
22523: PPUSH
22524: LD_VAR 0 7
22528: PPUSH
22529: LD_VAR 0 8
22533: PPUSH
22534: LD_VAR 0 9
22538: PPUSH
22539: LD_VAR 0 4
22543: PPUSH
22544: LD_VAR 0 5
22548: PPUSH
22549: CALL 22591 0 6
22553: GO 22586
22555: LD_INT 304
22557: DOUBLE
22558: EQUAL
22559: IFTRUE 22563
22561: GO 22585
22563: POP
// hHackTeleport ( unit , x , y ) ; end ;
22564: LD_VAR 0 2
22568: PPUSH
22569: LD_VAR 0 4
22573: PPUSH
22574: LD_VAR 0 5
22578: PPUSH
22579: CALL 24350 0 3
22583: GO 22586
22585: POP
// end ;
22586: LD_VAR 0 12
22590: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22591: LD_INT 0
22593: PPUSH
22594: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22595: LD_VAR 0 1
22599: PUSH
22600: LD_INT 1
22602: LESS
22603: PUSH
22604: LD_VAR 0 1
22608: PUSH
22609: LD_INT 3
22611: GREATER
22612: OR
22613: PUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: LD_VAR 0 6
22623: PPUSH
22624: CALL_OW 428
22628: OR
22629: IFFALSE 22633
// exit ;
22631: GO 23353
// uc_side := your_side ;
22633: LD_ADDR_OWVAR 20
22637: PUSH
22638: LD_OWVAR 2
22642: ST_TO_ADDR
// uc_nation := nation ;
22643: LD_ADDR_OWVAR 21
22647: PUSH
22648: LD_VAR 0 1
22652: ST_TO_ADDR
// bc_level = 1 ;
22653: LD_ADDR_OWVAR 43
22657: PUSH
22658: LD_INT 1
22660: ST_TO_ADDR
// case btype of 1 :
22661: LD_VAR 0 2
22665: PUSH
22666: LD_INT 1
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22685
22674: POP
// bc_type := b_depot ; 2 :
22675: LD_ADDR_OWVAR 42
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
22683: GO 23297
22685: LD_INT 2
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22704
22693: POP
// bc_type := b_warehouse ; 3 :
22694: LD_ADDR_OWVAR 42
22698: PUSH
22699: LD_INT 1
22701: ST_TO_ADDR
22702: GO 23297
22704: LD_INT 3
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22723
22712: POP
// bc_type := b_lab ; 4 .. 9 :
22713: LD_ADDR_OWVAR 42
22717: PUSH
22718: LD_INT 6
22720: ST_TO_ADDR
22721: GO 23297
22723: LD_INT 4
22725: DOUBLE
22726: GREATEREQUAL
22727: IFFALSE 22735
22729: LD_INT 9
22731: DOUBLE
22732: LESSEQUAL
22733: IFTRUE 22737
22735: GO 22789
22737: POP
// begin bc_type := b_lab_half ;
22738: LD_ADDR_OWVAR 42
22742: PUSH
22743: LD_INT 7
22745: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22746: LD_ADDR_OWVAR 44
22750: PUSH
22751: LD_INT 10
22753: PUSH
22754: LD_INT 11
22756: PUSH
22757: LD_INT 12
22759: PUSH
22760: LD_INT 15
22762: PUSH
22763: LD_INT 14
22765: PUSH
22766: LD_INT 13
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: LD_VAR 0 2
22781: PUSH
22782: LD_INT 3
22784: MINUS
22785: ARRAY
22786: ST_TO_ADDR
// end ; 10 .. 13 :
22787: GO 23297
22789: LD_INT 10
22791: DOUBLE
22792: GREATEREQUAL
22793: IFFALSE 22801
22795: LD_INT 13
22797: DOUBLE
22798: LESSEQUAL
22799: IFTRUE 22803
22801: GO 22880
22803: POP
// begin bc_type := b_lab_full ;
22804: LD_ADDR_OWVAR 42
22808: PUSH
22809: LD_INT 8
22811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22812: LD_ADDR_OWVAR 44
22816: PUSH
22817: LD_INT 10
22819: PUSH
22820: LD_INT 12
22822: PUSH
22823: LD_INT 14
22825: PUSH
22826: LD_INT 13
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: PUSH
22835: LD_VAR 0 2
22839: PUSH
22840: LD_INT 9
22842: MINUS
22843: ARRAY
22844: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22845: LD_ADDR_OWVAR 45
22849: PUSH
22850: LD_INT 11
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 12
22858: PUSH
22859: LD_INT 15
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: LD_VAR 0 2
22872: PUSH
22873: LD_INT 9
22875: MINUS
22876: ARRAY
22877: ST_TO_ADDR
// end ; 14 :
22878: GO 23297
22880: LD_INT 14
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 22899
22888: POP
// bc_type := b_workshop ; 15 :
22889: LD_ADDR_OWVAR 42
22893: PUSH
22894: LD_INT 2
22896: ST_TO_ADDR
22897: GO 23297
22899: LD_INT 15
22901: DOUBLE
22902: EQUAL
22903: IFTRUE 22907
22905: GO 22918
22907: POP
// bc_type := b_factory ; 16 :
22908: LD_ADDR_OWVAR 42
22912: PUSH
22913: LD_INT 3
22915: ST_TO_ADDR
22916: GO 23297
22918: LD_INT 16
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 22937
22926: POP
// bc_type := b_ext_gun ; 17 :
22927: LD_ADDR_OWVAR 42
22931: PUSH
22932: LD_INT 17
22934: ST_TO_ADDR
22935: GO 23297
22937: LD_INT 17
22939: DOUBLE
22940: EQUAL
22941: IFTRUE 22945
22943: GO 22973
22945: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22946: LD_ADDR_OWVAR 42
22950: PUSH
22951: LD_INT 19
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 19
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PUSH
22965: LD_VAR 0 1
22969: ARRAY
22970: ST_TO_ADDR
22971: GO 23297
22973: LD_INT 18
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22992
22981: POP
// bc_type := b_ext_radar ; 19 :
22982: LD_ADDR_OWVAR 42
22986: PUSH
22987: LD_INT 20
22989: ST_TO_ADDR
22990: GO 23297
22992: LD_INT 19
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23011
23000: POP
// bc_type := b_ext_radio ; 20 :
23001: LD_ADDR_OWVAR 42
23005: PUSH
23006: LD_INT 22
23008: ST_TO_ADDR
23009: GO 23297
23011: LD_INT 20
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23030
23019: POP
// bc_type := b_ext_siberium ; 21 :
23020: LD_ADDR_OWVAR 42
23024: PUSH
23025: LD_INT 21
23027: ST_TO_ADDR
23028: GO 23297
23030: LD_INT 21
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23049
23038: POP
// bc_type := b_ext_computer ; 22 :
23039: LD_ADDR_OWVAR 42
23043: PUSH
23044: LD_INT 24
23046: ST_TO_ADDR
23047: GO 23297
23049: LD_INT 22
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23068
23057: POP
// bc_type := b_ext_track ; 23 :
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 16
23065: ST_TO_ADDR
23066: GO 23297
23068: LD_INT 23
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23087
23076: POP
// bc_type := b_ext_laser ; 24 :
23077: LD_ADDR_OWVAR 42
23081: PUSH
23082: LD_INT 25
23084: ST_TO_ADDR
23085: GO 23297
23087: LD_INT 24
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23106
23095: POP
// bc_type := b_control_tower ; 25 :
23096: LD_ADDR_OWVAR 42
23100: PUSH
23101: LD_INT 36
23103: ST_TO_ADDR
23104: GO 23297
23106: LD_INT 25
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23125
23114: POP
// bc_type := b_breastwork ; 26 :
23115: LD_ADDR_OWVAR 42
23119: PUSH
23120: LD_INT 31
23122: ST_TO_ADDR
23123: GO 23297
23125: LD_INT 26
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23144
23133: POP
// bc_type := b_bunker ; 27 :
23134: LD_ADDR_OWVAR 42
23138: PUSH
23139: LD_INT 32
23141: ST_TO_ADDR
23142: GO 23297
23144: LD_INT 27
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23163
23152: POP
// bc_type := b_turret ; 28 :
23153: LD_ADDR_OWVAR 42
23157: PUSH
23158: LD_INT 33
23160: ST_TO_ADDR
23161: GO 23297
23163: LD_INT 28
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23182
23171: POP
// bc_type := b_armoury ; 29 :
23172: LD_ADDR_OWVAR 42
23176: PUSH
23177: LD_INT 4
23179: ST_TO_ADDR
23180: GO 23297
23182: LD_INT 29
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23201
23190: POP
// bc_type := b_barracks ; 30 :
23191: LD_ADDR_OWVAR 42
23195: PUSH
23196: LD_INT 5
23198: ST_TO_ADDR
23199: GO 23297
23201: LD_INT 30
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23220
23209: POP
// bc_type := b_solar_power ; 31 :
23210: LD_ADDR_OWVAR 42
23214: PUSH
23215: LD_INT 27
23217: ST_TO_ADDR
23218: GO 23297
23220: LD_INT 31
23222: DOUBLE
23223: EQUAL
23224: IFTRUE 23228
23226: GO 23239
23228: POP
// bc_type := b_oil_power ; 32 :
23229: LD_ADDR_OWVAR 42
23233: PUSH
23234: LD_INT 26
23236: ST_TO_ADDR
23237: GO 23297
23239: LD_INT 32
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23258
23247: POP
// bc_type := b_siberite_power ; 33 :
23248: LD_ADDR_OWVAR 42
23252: PUSH
23253: LD_INT 28
23255: ST_TO_ADDR
23256: GO 23297
23258: LD_INT 33
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23277
23266: POP
// bc_type := b_oil_mine ; 34 :
23267: LD_ADDR_OWVAR 42
23271: PUSH
23272: LD_INT 29
23274: ST_TO_ADDR
23275: GO 23297
23277: LD_INT 34
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23296
23285: POP
// bc_type := b_siberite_mine ; end ;
23286: LD_ADDR_OWVAR 42
23290: PUSH
23291: LD_INT 30
23293: ST_TO_ADDR
23294: GO 23297
23296: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23297: LD_ADDR_VAR 0 8
23301: PUSH
23302: LD_VAR 0 5
23306: PPUSH
23307: LD_VAR 0 6
23311: PPUSH
23312: LD_VAR 0 3
23316: PPUSH
23317: CALL_OW 47
23321: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23322: LD_OWVAR 42
23326: PUSH
23327: LD_INT 32
23329: PUSH
23330: LD_INT 33
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: IN
23337: IFFALSE 23353
// PlaceWeaponTurret ( b , weapon ) ;
23339: LD_VAR 0 8
23343: PPUSH
23344: LD_VAR 0 4
23348: PPUSH
23349: CALL_OW 431
// end ;
23353: LD_VAR 0 7
23357: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23364: LD_ADDR_VAR 0 4
23368: PUSH
23369: LD_INT 22
23371: PUSH
23372: LD_OWVAR 2
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 30
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PPUSH
23413: CALL_OW 69
23417: ST_TO_ADDR
// if not tmp then
23418: LD_VAR 0 4
23422: NOT
23423: IFFALSE 23427
// exit ;
23425: GO 23486
// for i in tmp do
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_VAR 0 4
23436: PUSH
23437: FOR_IN
23438: IFFALSE 23484
// for j = 1 to 3 do
23440: LD_ADDR_VAR 0 3
23444: PUSH
23445: DOUBLE
23446: LD_INT 1
23448: DEC
23449: ST_TO_ADDR
23450: LD_INT 3
23452: PUSH
23453: FOR_TO
23454: IFFALSE 23480
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23456: LD_VAR 0 2
23460: PPUSH
23461: CALL_OW 274
23465: PPUSH
23466: LD_VAR 0 3
23470: PPUSH
23471: LD_INT 99999
23473: PPUSH
23474: CALL_OW 277
23478: GO 23453
23480: POP
23481: POP
23482: GO 23437
23484: POP
23485: POP
// end ;
23486: LD_VAR 0 1
23490: RET
// export function hHackSetLevel10 ; var i , j ; begin
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
23495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 21
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 69
23515: PUSH
23516: FOR_IN
23517: IFFALSE 23569
// if IsSelected ( i ) then
23519: LD_VAR 0 2
23523: PPUSH
23524: CALL_OW 306
23528: IFFALSE 23567
// begin for j := 1 to 4 do
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: DOUBLE
23536: LD_INT 1
23538: DEC
23539: ST_TO_ADDR
23540: LD_INT 4
23542: PUSH
23543: FOR_TO
23544: IFFALSE 23565
// SetSkill ( i , j , 10 ) ;
23546: LD_VAR 0 2
23550: PPUSH
23551: LD_VAR 0 3
23555: PPUSH
23556: LD_INT 10
23558: PPUSH
23559: CALL_OW 237
23563: GO 23543
23565: POP
23566: POP
// end ;
23567: GO 23516
23569: POP
23570: POP
// end ;
23571: LD_VAR 0 1
23575: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_OWVAR 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 21
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: PUSH
23617: FOR_IN
23618: IFFALSE 23659
// begin for j := 1 to 4 do
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: DOUBLE
23626: LD_INT 1
23628: DEC
23629: ST_TO_ADDR
23630: LD_INT 4
23632: PUSH
23633: FOR_TO
23634: IFFALSE 23655
// SetSkill ( i , j , 10 ) ;
23636: LD_VAR 0 2
23640: PPUSH
23641: LD_VAR 0 3
23645: PPUSH
23646: LD_INT 10
23648: PPUSH
23649: CALL_OW 237
23653: GO 23633
23655: POP
23656: POP
// end ;
23657: GO 23617
23659: POP
23660: POP
// end ;
23661: LD_VAR 0 1
23665: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23666: LD_INT 0
23668: PPUSH
// uc_side := your_side ;
23669: LD_ADDR_OWVAR 20
23673: PUSH
23674: LD_OWVAR 2
23678: ST_TO_ADDR
// uc_nation := nation ;
23679: LD_ADDR_OWVAR 21
23683: PUSH
23684: LD_VAR 0 1
23688: ST_TO_ADDR
// InitHc ;
23689: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23693: LD_INT 0
23695: PPUSH
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23710: LD_VAR 0 4
23714: PPUSH
23715: LD_VAR 0 5
23719: PPUSH
23720: CALL_OW 428
23724: PUSH
23725: LD_INT 0
23727: EQUAL
23728: IFFALSE 23752
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23730: CALL_OW 44
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: LD_INT 1
23747: PPUSH
23748: CALL_OW 48
// end ;
23752: LD_VAR 0 6
23756: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
// uc_side := your_side ;
23761: LD_ADDR_OWVAR 20
23765: PUSH
23766: LD_OWVAR 2
23770: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 4
23787: PUSH
23788: LD_INT 5
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: IN
23798: IFFALSE 23810
// uc_nation := nation_american else
23800: LD_ADDR_OWVAR 21
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
23808: GO 23853
// if chassis in [ 11 , 12 , 13 , 14 ] then
23810: LD_VAR 0 1
23814: PUSH
23815: LD_INT 11
23817: PUSH
23818: LD_INT 12
23820: PUSH
23821: LD_INT 13
23823: PUSH
23824: LD_INT 14
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: IN
23833: IFFALSE 23845
// uc_nation := nation_arabian else
23835: LD_ADDR_OWVAR 21
23839: PUSH
23840: LD_INT 2
23842: ST_TO_ADDR
23843: GO 23853
// uc_nation := nation_russian ;
23845: LD_ADDR_OWVAR 21
23849: PUSH
23850: LD_INT 3
23852: ST_TO_ADDR
// vc_chassis := chassis ;
23853: LD_ADDR_OWVAR 37
23857: PUSH
23858: LD_VAR 0 1
23862: ST_TO_ADDR
// vc_engine := engine ;
23863: LD_ADDR_OWVAR 39
23867: PUSH
23868: LD_VAR 0 2
23872: ST_TO_ADDR
// vc_control := control ;
23873: LD_ADDR_OWVAR 38
23877: PUSH
23878: LD_VAR 0 3
23882: ST_TO_ADDR
// vc_weapon := weapon ;
23883: LD_ADDR_OWVAR 40
23887: PUSH
23888: LD_VAR 0 4
23892: ST_TO_ADDR
// un := CreateVehicle ;
23893: LD_ADDR_VAR 0 8
23897: PUSH
23898: CALL_OW 45
23902: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23903: LD_VAR 0 8
23907: PPUSH
23908: LD_INT 0
23910: PPUSH
23911: LD_INT 5
23913: PPUSH
23914: CALL_OW 12
23918: PPUSH
23919: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23923: LD_VAR 0 8
23927: PPUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: LD_VAR 0 6
23937: PPUSH
23938: LD_INT 1
23940: PPUSH
23941: CALL_OW 48
// end ;
23945: LD_VAR 0 7
23949: RET
// export hInvincible ; every 1 do
23950: GO 23952
23952: DISABLE
// hInvincible := [ ] ;
23953: LD_ADDR_EXP 96
23957: PUSH
23958: EMPTY
23959: ST_TO_ADDR
23960: END
// every 10 do var i ;
23961: GO 23963
23963: DISABLE
23964: LD_INT 0
23966: PPUSH
// begin enable ;
23967: ENABLE
// if not hInvincible then
23968: LD_EXP 96
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24021
// for i in hInvincible do
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: LD_EXP 96
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24019
// if GetLives ( i ) < 1000 then
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 256
23999: PUSH
24000: LD_INT 1000
24002: LESS
24003: IFFALSE 24017
// SetLives ( i , 1000 ) ;
24005: LD_VAR 0 1
24009: PPUSH
24010: LD_INT 1000
24012: PPUSH
24013: CALL_OW 234
24017: GO 23987
24019: POP
24020: POP
// end ;
24021: PPOPN 1
24023: END
// export function hHackInvincible ; var i ; begin
24024: LD_INT 0
24026: PPUSH
24027: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24028: LD_ADDR_VAR 0 2
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 21
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 21
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: PUSH
24066: FOR_IN
24067: IFFALSE 24128
// if IsSelected ( i ) then
24069: LD_VAR 0 2
24073: PPUSH
24074: CALL_OW 306
24078: IFFALSE 24126
// begin if i in hInvincible then
24080: LD_VAR 0 2
24084: PUSH
24085: LD_EXP 96
24089: IN
24090: IFFALSE 24110
// hInvincible := hInvincible diff i else
24092: LD_ADDR_EXP 96
24096: PUSH
24097: LD_EXP 96
24101: PUSH
24102: LD_VAR 0 2
24106: DIFF
24107: ST_TO_ADDR
24108: GO 24126
// hInvincible := hInvincible union i ;
24110: LD_ADDR_EXP 96
24114: PUSH
24115: LD_EXP 96
24119: PUSH
24120: LD_VAR 0 2
24124: UNION
24125: ST_TO_ADDR
// end ;
24126: GO 24066
24128: POP
24129: POP
// end ;
24130: LD_VAR 0 1
24134: RET
// export function hHackInvisible ; var i , j ; begin
24135: LD_INT 0
24137: PPUSH
24138: PPUSH
24139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24140: LD_ADDR_VAR 0 2
24144: PUSH
24145: LD_INT 21
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 69
24159: PUSH
24160: FOR_IN
24161: IFFALSE 24185
// if IsSelected ( i ) then
24163: LD_VAR 0 2
24167: PPUSH
24168: CALL_OW 306
24172: IFFALSE 24183
// ComForceInvisible ( i ) ;
24174: LD_VAR 0 2
24178: PPUSH
24179: CALL_OW 496
24183: GO 24160
24185: POP
24186: POP
// end ;
24187: LD_VAR 0 1
24191: RET
// export function hHackChangeYourSide ; begin
24192: LD_INT 0
24194: PPUSH
// if your_side = 8 then
24195: LD_OWVAR 2
24199: PUSH
24200: LD_INT 8
24202: EQUAL
24203: IFFALSE 24215
// your_side := 0 else
24205: LD_ADDR_OWVAR 2
24209: PUSH
24210: LD_INT 0
24212: ST_TO_ADDR
24213: GO 24229
// your_side := your_side + 1 ;
24215: LD_ADDR_OWVAR 2
24219: PUSH
24220: LD_OWVAR 2
24224: PUSH
24225: LD_INT 1
24227: PLUS
24228: ST_TO_ADDR
// end ;
24229: LD_VAR 0 1
24233: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24234: LD_INT 0
24236: PPUSH
24237: PPUSH
24238: PPUSH
// for i in all_units do
24239: LD_ADDR_VAR 0 2
24243: PUSH
24244: LD_OWVAR 3
24248: PUSH
24249: FOR_IN
24250: IFFALSE 24328
// if IsSelected ( i ) then
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 306
24261: IFFALSE 24326
// begin j := GetSide ( i ) ;
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_VAR 0 2
24272: PPUSH
24273: CALL_OW 255
24277: ST_TO_ADDR
// if j = 8 then
24278: LD_VAR 0 3
24282: PUSH
24283: LD_INT 8
24285: EQUAL
24286: IFFALSE 24298
// j := 0 else
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: LD_INT 0
24295: ST_TO_ADDR
24296: GO 24312
// j := j + 1 ;
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_VAR 0 3
24307: PUSH
24308: LD_INT 1
24310: PLUS
24311: ST_TO_ADDR
// SetSide ( i , j ) ;
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: CALL_OW 235
// end ;
24326: GO 24249
24328: POP
24329: POP
// end ;
24330: LD_VAR 0 1
24334: RET
// export function hHackFog ; begin
24335: LD_INT 0
24337: PPUSH
// FogOff ( true ) ;
24338: LD_INT 1
24340: PPUSH
24341: CALL_OW 344
// end ;
24345: LD_VAR 0 1
24349: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24350: LD_INT 0
24352: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24353: LD_VAR 0 1
24357: PPUSH
24358: LD_VAR 0 2
24362: PPUSH
24363: LD_VAR 0 3
24367: PPUSH
24368: LD_INT 1
24370: PPUSH
24371: LD_INT 1
24373: PPUSH
24374: CALL_OW 483
// CenterOnXY ( x , y ) ;
24378: LD_VAR 0 2
24382: PPUSH
24383: LD_VAR 0 3
24387: PPUSH
24388: CALL_OW 84
// end ; end_of_file
24392: LD_VAR 0 4
24396: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 264
24412: PUSH
24413: LD_EXP 30
24417: EQUAL
24418: IFFALSE 24490
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24420: LD_INT 68
24422: PPUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: CALL_OW 255
24432: PPUSH
24433: CALL_OW 321
24437: PUSH
24438: LD_INT 2
24440: EQUAL
24441: IFFALSE 24453
// eff := 70 else
24443: LD_ADDR_VAR 0 4
24447: PUSH
24448: LD_INT 70
24450: ST_TO_ADDR
24451: GO 24461
// eff := 30 ;
24453: LD_ADDR_VAR 0 4
24457: PUSH
24458: LD_INT 30
24460: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL_OW 250
24470: PPUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 251
24480: PPUSH
24481: LD_VAR 0 4
24485: PPUSH
24486: CALL_OW 495
// end ; end ;
24490: LD_VAR 0 2
24494: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24495: LD_INT 0
24497: PPUSH
// end ;
24498: LD_VAR 0 4
24502: RET
// export function SOS_Command ( cmd ) ; begin
24503: LD_INT 0
24505: PPUSH
// end ;
24506: LD_VAR 0 2
24510: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24511: LD_INT 0
24513: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24514: LD_VAR 0 1
24518: PUSH
24519: LD_INT 250
24521: EQUAL
24522: PUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: CALL_OW 264
24532: PUSH
24533: LD_EXP 33
24537: EQUAL
24538: AND
24539: IFFALSE 24560
// MinerPlaceMine ( unit , x , y ) ;
24541: LD_VAR 0 2
24545: PPUSH
24546: LD_VAR 0 4
24550: PPUSH
24551: LD_VAR 0 5
24555: PPUSH
24556: CALL 26901 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24560: LD_VAR 0 1
24564: PUSH
24565: LD_INT 251
24567: EQUAL
24568: PUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: CALL_OW 264
24578: PUSH
24579: LD_EXP 33
24583: EQUAL
24584: AND
24585: IFFALSE 24606
// MinerDetonateMine ( unit , x , y ) ;
24587: LD_VAR 0 2
24591: PPUSH
24592: LD_VAR 0 4
24596: PPUSH
24597: LD_VAR 0 5
24601: PPUSH
24602: CALL 27178 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24606: LD_VAR 0 1
24610: PUSH
24611: LD_INT 252
24613: EQUAL
24614: PUSH
24615: LD_VAR 0 2
24619: PPUSH
24620: CALL_OW 264
24624: PUSH
24625: LD_EXP 33
24629: EQUAL
24630: AND
24631: IFFALSE 24652
// MinerCreateMinefield ( unit , x , y ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_VAR 0 4
24642: PPUSH
24643: LD_VAR 0 5
24647: PPUSH
24648: CALL 27595 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24652: LD_VAR 0 1
24656: PUSH
24657: LD_INT 253
24659: EQUAL
24660: PUSH
24661: LD_VAR 0 2
24665: PPUSH
24666: CALL_OW 257
24670: PUSH
24671: LD_INT 5
24673: EQUAL
24674: AND
24675: IFFALSE 24696
// ComBinocular ( unit , x , y ) ;
24677: LD_VAR 0 2
24681: PPUSH
24682: LD_VAR 0 4
24686: PPUSH
24687: LD_VAR 0 5
24691: PPUSH
24692: CALL 27966 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24696: LD_VAR 0 1
24700: PUSH
24701: LD_INT 254
24703: EQUAL
24704: PUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: CALL_OW 264
24714: PUSH
24715: LD_EXP 28
24719: EQUAL
24720: AND
24721: PUSH
24722: LD_VAR 0 3
24726: PPUSH
24727: CALL_OW 263
24731: PUSH
24732: LD_INT 3
24734: EQUAL
24735: AND
24736: IFFALSE 24752
// HackDestroyVehicle ( unit , selectedUnit ) ;
24738: LD_VAR 0 2
24742: PPUSH
24743: LD_VAR 0 3
24747: PPUSH
24748: CALL 26261 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24752: LD_VAR 0 1
24756: PUSH
24757: LD_INT 255
24759: EQUAL
24760: PUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: CALL_OW 264
24770: PUSH
24771: LD_INT 14
24773: PUSH
24774: LD_INT 53
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: IN
24781: AND
24782: PUSH
24783: LD_VAR 0 4
24787: PPUSH
24788: LD_VAR 0 5
24792: PPUSH
24793: CALL_OW 488
24797: AND
24798: IFFALSE 24822
// CutTreeXYR ( unit , x , y , 12 ) ;
24800: LD_VAR 0 2
24804: PPUSH
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 5
24814: PPUSH
24815: LD_INT 12
24817: PPUSH
24818: CALL 24827 0 4
// end ;
24822: LD_VAR 0 6
24826: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24827: LD_INT 0
24829: PPUSH
24830: PPUSH
24831: PPUSH
24832: PPUSH
24833: PPUSH
24834: PPUSH
24835: PPUSH
24836: PPUSH
24837: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24838: LD_VAR 0 1
24842: NOT
24843: PUSH
24844: LD_VAR 0 2
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 488
24858: NOT
24859: OR
24860: PUSH
24861: LD_VAR 0 4
24865: NOT
24866: OR
24867: IFFALSE 24871
// exit ;
24869: GO 25211
// list := [ ] ;
24871: LD_ADDR_VAR 0 13
24875: PUSH
24876: EMPTY
24877: ST_TO_ADDR
// if x - r < 0 then
24878: LD_VAR 0 2
24882: PUSH
24883: LD_VAR 0 4
24887: MINUS
24888: PUSH
24889: LD_INT 0
24891: LESS
24892: IFFALSE 24904
// min_x := 0 else
24894: LD_ADDR_VAR 0 7
24898: PUSH
24899: LD_INT 0
24901: ST_TO_ADDR
24902: GO 24920
// min_x := x - r ;
24904: LD_ADDR_VAR 0 7
24908: PUSH
24909: LD_VAR 0 2
24913: PUSH
24914: LD_VAR 0 4
24918: MINUS
24919: ST_TO_ADDR
// if y - r < 0 then
24920: LD_VAR 0 3
24924: PUSH
24925: LD_VAR 0 4
24929: MINUS
24930: PUSH
24931: LD_INT 0
24933: LESS
24934: IFFALSE 24946
// min_y := 0 else
24936: LD_ADDR_VAR 0 8
24940: PUSH
24941: LD_INT 0
24943: ST_TO_ADDR
24944: GO 24962
// min_y := y - r ;
24946: LD_ADDR_VAR 0 8
24950: PUSH
24951: LD_VAR 0 3
24955: PUSH
24956: LD_VAR 0 4
24960: MINUS
24961: ST_TO_ADDR
// max_x := x + r ;
24962: LD_ADDR_VAR 0 9
24966: PUSH
24967: LD_VAR 0 2
24971: PUSH
24972: LD_VAR 0 4
24976: PLUS
24977: ST_TO_ADDR
// max_y := y + r ;
24978: LD_ADDR_VAR 0 10
24982: PUSH
24983: LD_VAR 0 3
24987: PUSH
24988: LD_VAR 0 4
24992: PLUS
24993: ST_TO_ADDR
// for _x = min_x to max_x do
24994: LD_ADDR_VAR 0 11
24998: PUSH
24999: DOUBLE
25000: LD_VAR 0 7
25004: DEC
25005: ST_TO_ADDR
25006: LD_VAR 0 9
25010: PUSH
25011: FOR_TO
25012: IFFALSE 25129
// for _y = min_y to max_y do
25014: LD_ADDR_VAR 0 12
25018: PUSH
25019: DOUBLE
25020: LD_VAR 0 8
25024: DEC
25025: ST_TO_ADDR
25026: LD_VAR 0 10
25030: PUSH
25031: FOR_TO
25032: IFFALSE 25125
// begin if not ValidHex ( _x , _y ) then
25034: LD_VAR 0 11
25038: PPUSH
25039: LD_VAR 0 12
25043: PPUSH
25044: CALL_OW 488
25048: NOT
25049: IFFALSE 25053
// continue ;
25051: GO 25031
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25053: LD_VAR 0 11
25057: PPUSH
25058: LD_VAR 0 12
25062: PPUSH
25063: CALL_OW 351
25067: PUSH
25068: LD_VAR 0 11
25072: PPUSH
25073: LD_VAR 0 12
25077: PPUSH
25078: CALL_OW 554
25082: AND
25083: IFFALSE 25123
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25085: LD_ADDR_VAR 0 13
25089: PUSH
25090: LD_VAR 0 13
25094: PPUSH
25095: LD_VAR 0 13
25099: PUSH
25100: LD_INT 1
25102: PLUS
25103: PPUSH
25104: LD_VAR 0 11
25108: PUSH
25109: LD_VAR 0 12
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PPUSH
25118: CALL_OW 2
25122: ST_TO_ADDR
// end ;
25123: GO 25031
25125: POP
25126: POP
25127: GO 25011
25129: POP
25130: POP
// if not list then
25131: LD_VAR 0 13
25135: NOT
25136: IFFALSE 25140
// exit ;
25138: GO 25211
// for i in list do
25140: LD_ADDR_VAR 0 6
25144: PUSH
25145: LD_VAR 0 13
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25209
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25153: LD_VAR 0 1
25157: PPUSH
25158: LD_STRING M
25160: PUSH
25161: LD_VAR 0 6
25165: PUSH
25166: LD_INT 1
25168: ARRAY
25169: PUSH
25170: LD_VAR 0 6
25174: PUSH
25175: LD_INT 2
25177: ARRAY
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: PUSH
25200: EMPTY
25201: LIST
25202: PPUSH
25203: CALL_OW 447
25207: GO 25150
25209: POP
25210: POP
// end ;
25211: LD_VAR 0 5
25215: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25216: LD_EXP 97
25220: NOT
25221: IFFALSE 25271
25223: GO 25225
25225: DISABLE
// begin initHack := true ;
25226: LD_ADDR_EXP 97
25230: PUSH
25231: LD_INT 1
25233: ST_TO_ADDR
// hackTanks := [ ] ;
25234: LD_ADDR_EXP 98
25238: PUSH
25239: EMPTY
25240: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25241: LD_ADDR_EXP 99
25245: PUSH
25246: EMPTY
25247: ST_TO_ADDR
// hackLimit := 3 ;
25248: LD_ADDR_EXP 100
25252: PUSH
25253: LD_INT 3
25255: ST_TO_ADDR
// hackDist := 12 ;
25256: LD_ADDR_EXP 101
25260: PUSH
25261: LD_INT 12
25263: ST_TO_ADDR
// hackCounter := [ ] ;
25264: LD_ADDR_EXP 102
25268: PUSH
25269: EMPTY
25270: ST_TO_ADDR
// end ;
25271: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25272: LD_EXP 97
25276: PUSH
25277: LD_INT 34
25279: PUSH
25280: LD_EXP 28
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PPUSH
25289: CALL_OW 69
25293: AND
25294: IFFALSE 25549
25296: GO 25298
25298: DISABLE
25299: LD_INT 0
25301: PPUSH
25302: PPUSH
// begin enable ;
25303: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: LD_INT 34
25311: PUSH
25312: LD_EXP 28
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 69
25325: PUSH
25326: FOR_IN
25327: IFFALSE 25547
// begin if not i in hackTanks then
25329: LD_VAR 0 1
25333: PUSH
25334: LD_EXP 98
25338: IN
25339: NOT
25340: IFFALSE 25423
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25342: LD_ADDR_EXP 98
25346: PUSH
25347: LD_EXP 98
25351: PPUSH
25352: LD_EXP 98
25356: PUSH
25357: LD_INT 1
25359: PLUS
25360: PPUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: CALL_OW 1
25370: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25371: LD_ADDR_EXP 99
25375: PUSH
25376: LD_EXP 99
25380: PPUSH
25381: LD_EXP 99
25385: PUSH
25386: LD_INT 1
25388: PLUS
25389: PPUSH
25390: EMPTY
25391: PPUSH
25392: CALL_OW 1
25396: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25397: LD_ADDR_EXP 102
25401: PUSH
25402: LD_EXP 102
25406: PPUSH
25407: LD_EXP 102
25411: PUSH
25412: LD_INT 1
25414: PLUS
25415: PPUSH
25416: EMPTY
25417: PPUSH
25418: CALL_OW 1
25422: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 302
25432: NOT
25433: IFFALSE 25446
// begin HackUnlinkAll ( i ) ;
25435: LD_VAR 0 1
25439: PPUSH
25440: CALL 25552 0 1
// continue ;
25444: GO 25326
// end ; HackCheckCapturedStatus ( i ) ;
25446: LD_VAR 0 1
25450: PPUSH
25451: CALL 25995 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25455: LD_ADDR_VAR 0 2
25459: PUSH
25460: LD_INT 81
25462: PUSH
25463: LD_VAR 0 1
25467: PPUSH
25468: CALL_OW 255
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 33
25479: PUSH
25480: LD_INT 3
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 91
25489: PUSH
25490: LD_VAR 0 1
25494: PUSH
25495: LD_EXP 101
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 50
25507: PUSH
25508: EMPTY
25509: LIST
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: PPUSH
25517: CALL_OW 69
25521: ST_TO_ADDR
// if not tmp then
25522: LD_VAR 0 2
25526: NOT
25527: IFFALSE 25531
// continue ;
25529: GO 25326
// HackLink ( i , tmp ) ;
25531: LD_VAR 0 1
25535: PPUSH
25536: LD_VAR 0 2
25540: PPUSH
25541: CALL 25688 0 2
// end ;
25545: GO 25326
25547: POP
25548: POP
// end ;
25549: PPOPN 2
25551: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25552: LD_INT 0
25554: PPUSH
25555: PPUSH
25556: PPUSH
// if not hack in hackTanks then
25557: LD_VAR 0 1
25561: PUSH
25562: LD_EXP 98
25566: IN
25567: NOT
25568: IFFALSE 25572
// exit ;
25570: GO 25683
// index := GetElementIndex ( hackTanks , hack ) ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_EXP 98
25581: PPUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL 33117 0 2
25591: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25592: LD_EXP 99
25596: PUSH
25597: LD_VAR 0 4
25601: ARRAY
25602: IFFALSE 25683
// begin for i in hackTanksCaptured [ index ] do
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_EXP 99
25613: PUSH
25614: LD_VAR 0 4
25618: ARRAY
25619: PUSH
25620: FOR_IN
25621: IFFALSE 25647
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25623: LD_VAR 0 3
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: LD_VAR 0 3
25636: PUSH
25637: LD_INT 2
25639: ARRAY
25640: PPUSH
25641: CALL_OW 235
25645: GO 25620
25647: POP
25648: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25649: LD_ADDR_EXP 99
25653: PUSH
25654: LD_EXP 99
25658: PPUSH
25659: LD_VAR 0 4
25663: PPUSH
25664: EMPTY
25665: PPUSH
25666: CALL_OW 1
25670: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25671: LD_VAR 0 1
25675: PPUSH
25676: LD_INT 0
25678: PPUSH
25679: CALL_OW 505
// end ; end ;
25683: LD_VAR 0 2
25687: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
25692: PPUSH
// if not hack in hackTanks or not vehicles then
25693: LD_VAR 0 1
25697: PUSH
25698: LD_EXP 98
25702: IN
25703: NOT
25704: PUSH
25705: LD_VAR 0 2
25709: NOT
25710: OR
25711: IFFALSE 25715
// exit ;
25713: GO 25990
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25715: LD_ADDR_VAR 0 2
25719: PUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_VAR 0 2
25729: PPUSH
25730: LD_INT 1
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: CALL 33767 0 4
25740: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25741: LD_ADDR_VAR 0 5
25745: PUSH
25746: LD_EXP 98
25750: PPUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL 33117 0 2
25760: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25761: LD_EXP 99
25765: PUSH
25766: LD_VAR 0 5
25770: ARRAY
25771: PUSH
25772: LD_EXP 100
25776: LESS
25777: IFFALSE 25966
// begin for i := 1 to vehicles do
25779: LD_ADDR_VAR 0 4
25783: PUSH
25784: DOUBLE
25785: LD_INT 1
25787: DEC
25788: ST_TO_ADDR
25789: LD_VAR 0 2
25793: PUSH
25794: FOR_TO
25795: IFFALSE 25964
// begin if hackTanksCaptured [ index ] = hackLimit then
25797: LD_EXP 99
25801: PUSH
25802: LD_VAR 0 5
25806: ARRAY
25807: PUSH
25808: LD_EXP 100
25812: EQUAL
25813: IFFALSE 25817
// break ;
25815: GO 25964
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25817: LD_ADDR_EXP 102
25821: PUSH
25822: LD_EXP 102
25826: PPUSH
25827: LD_VAR 0 5
25831: PPUSH
25832: LD_EXP 102
25836: PUSH
25837: LD_VAR 0 5
25841: ARRAY
25842: PUSH
25843: LD_INT 1
25845: PLUS
25846: PPUSH
25847: CALL_OW 1
25851: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25852: LD_ADDR_EXP 99
25856: PUSH
25857: LD_EXP 99
25861: PPUSH
25862: LD_VAR 0 5
25866: PUSH
25867: LD_EXP 99
25871: PUSH
25872: LD_VAR 0 5
25876: ARRAY
25877: PUSH
25878: LD_INT 1
25880: PLUS
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PPUSH
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 4
25895: ARRAY
25896: PUSH
25897: LD_VAR 0 2
25901: PUSH
25902: LD_VAR 0 4
25906: ARRAY
25907: PPUSH
25908: CALL_OW 255
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PPUSH
25917: CALL 33332 0 3
25921: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25922: LD_VAR 0 2
25926: PUSH
25927: LD_VAR 0 4
25931: ARRAY
25932: PPUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 255
25942: PPUSH
25943: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25947: LD_VAR 0 2
25951: PUSH
25952: LD_VAR 0 4
25956: ARRAY
25957: PPUSH
25958: CALL_OW 141
// end ;
25962: GO 25794
25964: POP
25965: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_EXP 99
25975: PUSH
25976: LD_VAR 0 5
25980: ARRAY
25981: PUSH
25982: LD_INT 0
25984: PLUS
25985: PPUSH
25986: CALL_OW 505
// end ;
25990: LD_VAR 0 3
25994: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
// if not hack in hackTanks then
26001: LD_VAR 0 1
26005: PUSH
26006: LD_EXP 98
26010: IN
26011: NOT
26012: IFFALSE 26016
// exit ;
26014: GO 26256
// index := GetElementIndex ( hackTanks , hack ) ;
26016: LD_ADDR_VAR 0 4
26020: PUSH
26021: LD_EXP 98
26025: PPUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL 33117 0 2
26035: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: DOUBLE
26042: LD_EXP 99
26046: PUSH
26047: LD_VAR 0 4
26051: ARRAY
26052: INC
26053: ST_TO_ADDR
26054: LD_INT 1
26056: PUSH
26057: FOR_DOWNTO
26058: IFFALSE 26230
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26060: LD_ADDR_VAR 0 5
26064: PUSH
26065: LD_EXP 99
26069: PUSH
26070: LD_VAR 0 4
26074: ARRAY
26075: PUSH
26076: LD_VAR 0 3
26080: ARRAY
26081: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26082: LD_VAR 0 5
26086: PUSH
26087: LD_INT 1
26089: ARRAY
26090: PPUSH
26091: CALL_OW 302
26095: NOT
26096: PUSH
26097: LD_VAR 0 5
26101: PUSH
26102: LD_INT 1
26104: ARRAY
26105: PPUSH
26106: CALL_OW 255
26110: PUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 255
26120: NONEQUAL
26121: OR
26122: IFFALSE 26228
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26124: LD_VAR 0 5
26128: PUSH
26129: LD_INT 1
26131: ARRAY
26132: PPUSH
26133: CALL_OW 305
26137: PUSH
26138: LD_VAR 0 5
26142: PUSH
26143: LD_INT 1
26145: ARRAY
26146: PPUSH
26147: CALL_OW 255
26151: PUSH
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 255
26161: EQUAL
26162: AND
26163: IFFALSE 26187
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26165: LD_VAR 0 5
26169: PUSH
26170: LD_INT 1
26172: ARRAY
26173: PPUSH
26174: LD_VAR 0 5
26178: PUSH
26179: LD_INT 2
26181: ARRAY
26182: PPUSH
26183: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26187: LD_ADDR_EXP 99
26191: PUSH
26192: LD_EXP 99
26196: PPUSH
26197: LD_VAR 0 4
26201: PPUSH
26202: LD_EXP 99
26206: PUSH
26207: LD_VAR 0 4
26211: ARRAY
26212: PPUSH
26213: LD_VAR 0 3
26217: PPUSH
26218: CALL_OW 3
26222: PPUSH
26223: CALL_OW 1
26227: ST_TO_ADDR
// end ; end ;
26228: GO 26057
26230: POP
26231: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26232: LD_VAR 0 1
26236: PPUSH
26237: LD_EXP 99
26241: PUSH
26242: LD_VAR 0 4
26246: ARRAY
26247: PUSH
26248: LD_INT 0
26250: PLUS
26251: PPUSH
26252: CALL_OW 505
// end ;
26256: LD_VAR 0 2
26260: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26261: LD_INT 0
26263: PPUSH
26264: PPUSH
26265: PPUSH
26266: PPUSH
// if not hack in hackTanks then
26267: LD_VAR 0 1
26271: PUSH
26272: LD_EXP 98
26276: IN
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26367
// index := GetElementIndex ( hackTanks , hack ) ;
26282: LD_ADDR_VAR 0 5
26286: PUSH
26287: LD_EXP 98
26291: PPUSH
26292: LD_VAR 0 1
26296: PPUSH
26297: CALL 33117 0 2
26301: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26302: LD_ADDR_VAR 0 4
26306: PUSH
26307: DOUBLE
26308: LD_INT 1
26310: DEC
26311: ST_TO_ADDR
26312: LD_EXP 99
26316: PUSH
26317: LD_VAR 0 5
26321: ARRAY
26322: PUSH
26323: FOR_TO
26324: IFFALSE 26365
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26326: LD_EXP 99
26330: PUSH
26331: LD_VAR 0 5
26335: ARRAY
26336: PUSH
26337: LD_VAR 0 4
26341: ARRAY
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PUSH
26347: LD_VAR 0 2
26351: EQUAL
26352: IFFALSE 26363
// KillUnit ( vehicle ) ;
26354: LD_VAR 0 2
26358: PPUSH
26359: CALL_OW 66
26363: GO 26323
26365: POP
26366: POP
// end ;
26367: LD_VAR 0 3
26371: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26372: LD_EXP 103
26376: NOT
26377: IFFALSE 26412
26379: GO 26381
26381: DISABLE
// begin initMiner := true ;
26382: LD_ADDR_EXP 103
26386: PUSH
26387: LD_INT 1
26389: ST_TO_ADDR
// minersList := [ ] ;
26390: LD_ADDR_EXP 104
26394: PUSH
26395: EMPTY
26396: ST_TO_ADDR
// minerMinesList := [ ] ;
26397: LD_ADDR_EXP 105
26401: PUSH
26402: EMPTY
26403: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26404: LD_ADDR_EXP 106
26408: PUSH
26409: LD_INT 5
26411: ST_TO_ADDR
// end ;
26412: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26413: LD_EXP 103
26417: PUSH
26418: LD_INT 34
26420: PUSH
26421: LD_EXP 33
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PPUSH
26430: CALL_OW 69
26434: AND
26435: IFFALSE 26898
26437: GO 26439
26439: DISABLE
26440: LD_INT 0
26442: PPUSH
26443: PPUSH
26444: PPUSH
26445: PPUSH
// begin enable ;
26446: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26447: LD_ADDR_VAR 0 1
26451: PUSH
26452: LD_INT 34
26454: PUSH
26455: LD_EXP 33
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PPUSH
26464: CALL_OW 69
26468: PUSH
26469: FOR_IN
26470: IFFALSE 26542
// begin if not i in minersList then
26472: LD_VAR 0 1
26476: PUSH
26477: LD_EXP 104
26481: IN
26482: NOT
26483: IFFALSE 26540
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26485: LD_ADDR_EXP 104
26489: PUSH
26490: LD_EXP 104
26494: PPUSH
26495: LD_EXP 104
26499: PUSH
26500: LD_INT 1
26502: PLUS
26503: PPUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 1
26513: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26514: LD_ADDR_EXP 105
26518: PUSH
26519: LD_EXP 105
26523: PPUSH
26524: LD_EXP 105
26528: PUSH
26529: LD_INT 1
26531: PLUS
26532: PPUSH
26533: EMPTY
26534: PPUSH
26535: CALL_OW 1
26539: ST_TO_ADDR
// end end ;
26540: GO 26469
26542: POP
26543: POP
// for i := minerMinesList downto 1 do
26544: LD_ADDR_VAR 0 1
26548: PUSH
26549: DOUBLE
26550: LD_EXP 105
26554: INC
26555: ST_TO_ADDR
26556: LD_INT 1
26558: PUSH
26559: FOR_DOWNTO
26560: IFFALSE 26896
// begin if IsLive ( minersList [ i ] ) then
26562: LD_EXP 104
26566: PUSH
26567: LD_VAR 0 1
26571: ARRAY
26572: PPUSH
26573: CALL_OW 300
26577: IFFALSE 26605
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26579: LD_EXP 104
26583: PUSH
26584: LD_VAR 0 1
26588: ARRAY
26589: PPUSH
26590: LD_EXP 105
26594: PUSH
26595: LD_VAR 0 1
26599: ARRAY
26600: PPUSH
26601: CALL_OW 505
// if not minerMinesList [ i ] then
26605: LD_EXP 105
26609: PUSH
26610: LD_VAR 0 1
26614: ARRAY
26615: NOT
26616: IFFALSE 26620
// continue ;
26618: GO 26559
// for j := minerMinesList [ i ] downto 1 do
26620: LD_ADDR_VAR 0 2
26624: PUSH
26625: DOUBLE
26626: LD_EXP 105
26630: PUSH
26631: LD_VAR 0 1
26635: ARRAY
26636: INC
26637: ST_TO_ADDR
26638: LD_INT 1
26640: PUSH
26641: FOR_DOWNTO
26642: IFFALSE 26892
// begin side := GetSide ( minersList [ i ] ) ;
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_EXP 104
26653: PUSH
26654: LD_VAR 0 1
26658: ARRAY
26659: PPUSH
26660: CALL_OW 255
26664: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26665: LD_ADDR_VAR 0 4
26669: PUSH
26670: LD_EXP 105
26674: PUSH
26675: LD_VAR 0 1
26679: ARRAY
26680: PUSH
26681: LD_VAR 0 2
26685: ARRAY
26686: PUSH
26687: LD_INT 1
26689: ARRAY
26690: PPUSH
26691: LD_EXP 105
26695: PUSH
26696: LD_VAR 0 1
26700: ARRAY
26701: PUSH
26702: LD_VAR 0 2
26706: ARRAY
26707: PUSH
26708: LD_INT 2
26710: ARRAY
26711: PPUSH
26712: CALL_OW 428
26716: ST_TO_ADDR
// if not tmp then
26717: LD_VAR 0 4
26721: NOT
26722: IFFALSE 26726
// continue ;
26724: GO 26641
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26726: LD_VAR 0 4
26730: PUSH
26731: LD_INT 81
26733: PUSH
26734: LD_VAR 0 3
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PPUSH
26743: CALL_OW 69
26747: IN
26748: PUSH
26749: LD_EXP 105
26753: PUSH
26754: LD_VAR 0 1
26758: ARRAY
26759: PUSH
26760: LD_VAR 0 2
26764: ARRAY
26765: PUSH
26766: LD_INT 1
26768: ARRAY
26769: PPUSH
26770: LD_EXP 105
26774: PUSH
26775: LD_VAR 0 1
26779: ARRAY
26780: PUSH
26781: LD_VAR 0 2
26785: ARRAY
26786: PUSH
26787: LD_INT 2
26789: ARRAY
26790: PPUSH
26791: CALL_OW 458
26795: AND
26796: IFFALSE 26890
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26798: LD_EXP 105
26802: PUSH
26803: LD_VAR 0 1
26807: ARRAY
26808: PUSH
26809: LD_VAR 0 2
26813: ARRAY
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PPUSH
26819: LD_EXP 105
26823: PUSH
26824: LD_VAR 0 1
26828: ARRAY
26829: PUSH
26830: LD_VAR 0 2
26834: ARRAY
26835: PUSH
26836: LD_INT 2
26838: ARRAY
26839: PPUSH
26840: LD_VAR 0 3
26844: PPUSH
26845: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26849: LD_ADDR_EXP 105
26853: PUSH
26854: LD_EXP 105
26858: PPUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: LD_EXP 105
26868: PUSH
26869: LD_VAR 0 1
26873: ARRAY
26874: PPUSH
26875: LD_VAR 0 2
26879: PPUSH
26880: CALL_OW 3
26884: PPUSH
26885: CALL_OW 1
26889: ST_TO_ADDR
// end ; end ;
26890: GO 26641
26892: POP
26893: POP
// end ;
26894: GO 26559
26896: POP
26897: POP
// end ;
26898: PPOPN 4
26900: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26901: LD_INT 0
26903: PPUSH
26904: PPUSH
// result := false ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_INT 0
26912: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 264
26922: PUSH
26923: LD_EXP 33
26927: EQUAL
26928: NOT
26929: IFFALSE 26933
// exit ;
26931: GO 27173
// index := GetElementIndex ( minersList , unit ) ;
26933: LD_ADDR_VAR 0 5
26937: PUSH
26938: LD_EXP 104
26942: PPUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL 33117 0 2
26952: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26953: LD_EXP 105
26957: PUSH
26958: LD_VAR 0 5
26962: ARRAY
26963: PUSH
26964: LD_EXP 106
26968: GREATEREQUAL
26969: IFFALSE 26973
// exit ;
26971: GO 27173
// ComMoveXY ( unit , x , y ) ;
26973: LD_VAR 0 1
26977: PPUSH
26978: LD_VAR 0 2
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26992: LD_INT 35
26994: PPUSH
26995: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_VAR 0 2
27008: PPUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL 63181 0 3
27018: NOT
27019: PUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 314
27029: AND
27030: IFFALSE 27034
// exit ;
27032: GO 27173
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27034: LD_VAR 0 2
27038: PPUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 428
27048: PUSH
27049: LD_VAR 0 1
27053: EQUAL
27054: PUSH
27055: LD_VAR 0 1
27059: PPUSH
27060: CALL_OW 314
27064: NOT
27065: AND
27066: IFFALSE 26992
// PlaySoundXY ( x , y , PlantMine ) ;
27068: LD_VAR 0 2
27072: PPUSH
27073: LD_VAR 0 3
27077: PPUSH
27078: LD_STRING PlantMine
27080: PPUSH
27081: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27085: LD_VAR 0 2
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 255
27104: PPUSH
27105: LD_INT 0
27107: PPUSH
27108: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27112: LD_ADDR_EXP 105
27116: PUSH
27117: LD_EXP 105
27121: PPUSH
27122: LD_VAR 0 5
27126: PUSH
27127: LD_EXP 105
27131: PUSH
27132: LD_VAR 0 5
27136: ARRAY
27137: PUSH
27138: LD_INT 1
27140: PLUS
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PPUSH
27146: LD_VAR 0 2
27150: PUSH
27151: LD_VAR 0 3
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PPUSH
27160: CALL 33332 0 3
27164: ST_TO_ADDR
// result := true ;
27165: LD_ADDR_VAR 0 4
27169: PUSH
27170: LD_INT 1
27172: ST_TO_ADDR
// end ;
27173: LD_VAR 0 4
27177: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27178: LD_INT 0
27180: PPUSH
27181: PPUSH
27182: PPUSH
// if not unit in minersList then
27183: LD_VAR 0 1
27187: PUSH
27188: LD_EXP 104
27192: IN
27193: NOT
27194: IFFALSE 27198
// exit ;
27196: GO 27590
// index := GetElementIndex ( minersList , unit ) ;
27198: LD_ADDR_VAR 0 6
27202: PUSH
27203: LD_EXP 104
27207: PPUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL 33117 0 2
27217: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27218: LD_ADDR_VAR 0 5
27222: PUSH
27223: DOUBLE
27224: LD_EXP 105
27228: PUSH
27229: LD_VAR 0 6
27233: ARRAY
27234: INC
27235: ST_TO_ADDR
27236: LD_INT 1
27238: PUSH
27239: FOR_DOWNTO
27240: IFFALSE 27401
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27242: LD_EXP 105
27246: PUSH
27247: LD_VAR 0 6
27251: ARRAY
27252: PUSH
27253: LD_VAR 0 5
27257: ARRAY
27258: PUSH
27259: LD_INT 1
27261: ARRAY
27262: PUSH
27263: LD_VAR 0 2
27267: EQUAL
27268: PUSH
27269: LD_EXP 105
27273: PUSH
27274: LD_VAR 0 6
27278: ARRAY
27279: PUSH
27280: LD_VAR 0 5
27284: ARRAY
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PUSH
27290: LD_VAR 0 3
27294: EQUAL
27295: AND
27296: IFFALSE 27399
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27298: LD_EXP 105
27302: PUSH
27303: LD_VAR 0 6
27307: ARRAY
27308: PUSH
27309: LD_VAR 0 5
27313: ARRAY
27314: PUSH
27315: LD_INT 1
27317: ARRAY
27318: PPUSH
27319: LD_EXP 105
27323: PUSH
27324: LD_VAR 0 6
27328: ARRAY
27329: PUSH
27330: LD_VAR 0 5
27334: ARRAY
27335: PUSH
27336: LD_INT 2
27338: ARRAY
27339: PPUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 255
27349: PPUSH
27350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27354: LD_ADDR_EXP 105
27358: PUSH
27359: LD_EXP 105
27363: PPUSH
27364: LD_VAR 0 6
27368: PPUSH
27369: LD_EXP 105
27373: PUSH
27374: LD_VAR 0 6
27378: ARRAY
27379: PPUSH
27380: LD_VAR 0 5
27384: PPUSH
27385: CALL_OW 3
27389: PPUSH
27390: CALL_OW 1
27394: ST_TO_ADDR
// exit ;
27395: POP
27396: POP
27397: GO 27590
// end ; end ;
27399: GO 27239
27401: POP
27402: POP
// for i := minerMinesList [ index ] downto 1 do
27403: LD_ADDR_VAR 0 5
27407: PUSH
27408: DOUBLE
27409: LD_EXP 105
27413: PUSH
27414: LD_VAR 0 6
27418: ARRAY
27419: INC
27420: ST_TO_ADDR
27421: LD_INT 1
27423: PUSH
27424: FOR_DOWNTO
27425: IFFALSE 27588
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27427: LD_EXP 105
27431: PUSH
27432: LD_VAR 0 6
27436: ARRAY
27437: PUSH
27438: LD_VAR 0 5
27442: ARRAY
27443: PUSH
27444: LD_INT 1
27446: ARRAY
27447: PPUSH
27448: LD_EXP 105
27452: PUSH
27453: LD_VAR 0 6
27457: ARRAY
27458: PUSH
27459: LD_VAR 0 5
27463: ARRAY
27464: PUSH
27465: LD_INT 2
27467: ARRAY
27468: PPUSH
27469: LD_VAR 0 2
27473: PPUSH
27474: LD_VAR 0 3
27478: PPUSH
27479: CALL_OW 298
27483: PUSH
27484: LD_INT 6
27486: LESS
27487: IFFALSE 27586
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27489: LD_EXP 105
27493: PUSH
27494: LD_VAR 0 6
27498: ARRAY
27499: PUSH
27500: LD_VAR 0 5
27504: ARRAY
27505: PUSH
27506: LD_INT 1
27508: ARRAY
27509: PPUSH
27510: LD_EXP 105
27514: PUSH
27515: LD_VAR 0 6
27519: ARRAY
27520: PUSH
27521: LD_VAR 0 5
27525: ARRAY
27526: PUSH
27527: LD_INT 2
27529: ARRAY
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 255
27540: PPUSH
27541: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27545: LD_ADDR_EXP 105
27549: PUSH
27550: LD_EXP 105
27554: PPUSH
27555: LD_VAR 0 6
27559: PPUSH
27560: LD_EXP 105
27564: PUSH
27565: LD_VAR 0 6
27569: ARRAY
27570: PPUSH
27571: LD_VAR 0 5
27575: PPUSH
27576: CALL_OW 3
27580: PPUSH
27581: CALL_OW 1
27585: ST_TO_ADDR
// end ; end ;
27586: GO 27424
27588: POP
27589: POP
// end ;
27590: LD_VAR 0 4
27594: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 264
27615: PUSH
27616: LD_EXP 33
27620: EQUAL
27621: NOT
27622: PUSH
27623: LD_VAR 0 1
27627: PUSH
27628: LD_EXP 104
27632: IN
27633: NOT
27634: OR
27635: IFFALSE 27639
// exit ;
27637: GO 27961
// index := GetElementIndex ( minersList , unit ) ;
27639: LD_ADDR_VAR 0 6
27643: PUSH
27644: LD_EXP 104
27648: PPUSH
27649: LD_VAR 0 1
27653: PPUSH
27654: CALL 33117 0 2
27658: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27659: LD_ADDR_VAR 0 8
27663: PUSH
27664: LD_EXP 106
27668: PUSH
27669: LD_EXP 105
27673: PUSH
27674: LD_VAR 0 6
27678: ARRAY
27679: MINUS
27680: ST_TO_ADDR
// if not minesFreeAmount then
27681: LD_VAR 0 8
27685: NOT
27686: IFFALSE 27690
// exit ;
27688: GO 27961
// tmp := [ ] ;
27690: LD_ADDR_VAR 0 7
27694: PUSH
27695: EMPTY
27696: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27697: LD_ADDR_VAR 0 5
27701: PUSH
27702: DOUBLE
27703: LD_INT 1
27705: DEC
27706: ST_TO_ADDR
27707: LD_VAR 0 8
27711: PUSH
27712: FOR_TO
27713: IFFALSE 27908
// begin _d := rand ( 0 , 5 ) ;
27715: LD_ADDR_VAR 0 11
27719: PUSH
27720: LD_INT 0
27722: PPUSH
27723: LD_INT 5
27725: PPUSH
27726: CALL_OW 12
27730: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27731: LD_ADDR_VAR 0 12
27735: PUSH
27736: LD_INT 2
27738: PPUSH
27739: LD_INT 6
27741: PPUSH
27742: CALL_OW 12
27746: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27747: LD_ADDR_VAR 0 9
27751: PUSH
27752: LD_VAR 0 2
27756: PPUSH
27757: LD_VAR 0 11
27761: PPUSH
27762: LD_VAR 0 12
27766: PPUSH
27767: CALL_OW 272
27771: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27772: LD_ADDR_VAR 0 10
27776: PUSH
27777: LD_VAR 0 3
27781: PPUSH
27782: LD_VAR 0 11
27786: PPUSH
27787: LD_VAR 0 12
27791: PPUSH
27792: CALL_OW 273
27796: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27797: LD_VAR 0 9
27801: PPUSH
27802: LD_VAR 0 10
27806: PPUSH
27807: CALL_OW 488
27811: PUSH
27812: LD_VAR 0 9
27816: PUSH
27817: LD_VAR 0 10
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_VAR 0 7
27830: IN
27831: NOT
27832: AND
27833: PUSH
27834: LD_VAR 0 9
27838: PPUSH
27839: LD_VAR 0 10
27843: PPUSH
27844: CALL_OW 458
27848: NOT
27849: AND
27850: IFFALSE 27892
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27852: LD_ADDR_VAR 0 7
27856: PUSH
27857: LD_VAR 0 7
27861: PPUSH
27862: LD_VAR 0 7
27866: PUSH
27867: LD_INT 1
27869: PLUS
27870: PPUSH
27871: LD_VAR 0 9
27875: PUSH
27876: LD_VAR 0 10
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PPUSH
27885: CALL_OW 1
27889: ST_TO_ADDR
27890: GO 27906
// i := i - 1 ;
27892: LD_ADDR_VAR 0 5
27896: PUSH
27897: LD_VAR 0 5
27901: PUSH
27902: LD_INT 1
27904: MINUS
27905: ST_TO_ADDR
// end ;
27906: GO 27712
27908: POP
27909: POP
// for i in tmp do
27910: LD_ADDR_VAR 0 5
27914: PUSH
27915: LD_VAR 0 7
27919: PUSH
27920: FOR_IN
27921: IFFALSE 27959
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27923: LD_VAR 0 1
27927: PPUSH
27928: LD_VAR 0 5
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: PPUSH
27937: LD_VAR 0 5
27941: PUSH
27942: LD_INT 2
27944: ARRAY
27945: PPUSH
27946: CALL 26901 0 3
27950: NOT
27951: IFFALSE 27957
// exit ;
27953: POP
27954: POP
27955: GO 27961
27957: GO 27920
27959: POP
27960: POP
// end ;
27961: LD_VAR 0 4
27965: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27966: LD_INT 0
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
// if not GetClass ( unit ) = class_sniper then
27975: LD_VAR 0 1
27979: PPUSH
27980: CALL_OW 257
27984: PUSH
27985: LD_INT 5
27987: EQUAL
27988: NOT
27989: IFFALSE 27993
// exit ;
27991: GO 28381
// dist := 8 ;
27993: LD_ADDR_VAR 0 5
27997: PUSH
27998: LD_INT 8
28000: ST_TO_ADDR
// viewRange := 12 ;
28001: LD_ADDR_VAR 0 7
28005: PUSH
28006: LD_INT 12
28008: ST_TO_ADDR
// side := GetSide ( unit ) ;
28009: LD_ADDR_VAR 0 6
28013: PUSH
28014: LD_VAR 0 1
28018: PPUSH
28019: CALL_OW 255
28023: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28024: LD_INT 61
28026: PPUSH
28027: LD_VAR 0 6
28031: PPUSH
28032: CALL_OW 321
28036: PUSH
28037: LD_INT 2
28039: EQUAL
28040: IFFALSE 28050
// viewRange := 16 ;
28042: LD_ADDR_VAR 0 7
28046: PUSH
28047: LD_INT 16
28049: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28050: LD_VAR 0 1
28054: PPUSH
28055: LD_VAR 0 2
28059: PPUSH
28060: LD_VAR 0 3
28064: PPUSH
28065: CALL_OW 297
28069: PUSH
28070: LD_VAR 0 5
28074: GREATER
28075: IFFALSE 28154
// begin ComMoveXY ( unit , x , y ) ;
28077: LD_VAR 0 1
28081: PPUSH
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_VAR 0 3
28091: PPUSH
28092: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28096: LD_INT 35
28098: PPUSH
28099: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28103: LD_VAR 0 1
28107: PPUSH
28108: LD_VAR 0 2
28112: PPUSH
28113: LD_VAR 0 3
28117: PPUSH
28118: CALL 63181 0 3
28122: NOT
28123: IFFALSE 28127
// exit ;
28125: GO 28381
// until GetDistUnitXY ( unit , x , y ) < dist ;
28127: LD_VAR 0 1
28131: PPUSH
28132: LD_VAR 0 2
28136: PPUSH
28137: LD_VAR 0 3
28141: PPUSH
28142: CALL_OW 297
28146: PUSH
28147: LD_VAR 0 5
28151: LESS
28152: IFFALSE 28096
// end ; ComTurnXY ( unit , x , y ) ;
28154: LD_VAR 0 1
28158: PPUSH
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_VAR 0 3
28168: PPUSH
28169: CALL_OW 118
// wait ( 5 ) ;
28173: LD_INT 5
28175: PPUSH
28176: CALL_OW 67
// _d := GetDir ( unit ) ;
28180: LD_ADDR_VAR 0 10
28184: PUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 254
28194: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28195: LD_ADDR_VAR 0 8
28199: PUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 250
28209: PPUSH
28210: LD_VAR 0 10
28214: PPUSH
28215: LD_VAR 0 5
28219: PPUSH
28220: CALL_OW 272
28224: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28225: LD_ADDR_VAR 0 9
28229: PUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: CALL_OW 251
28239: PPUSH
28240: LD_VAR 0 10
28244: PPUSH
28245: LD_VAR 0 5
28249: PPUSH
28250: CALL_OW 273
28254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28255: LD_VAR 0 8
28259: PPUSH
28260: LD_VAR 0 9
28264: PPUSH
28265: CALL_OW 488
28269: NOT
28270: IFFALSE 28274
// exit ;
28272: GO 28381
// ComAnimCustom ( unit , 1 ) ;
28274: LD_VAR 0 1
28278: PPUSH
28279: LD_INT 1
28281: PPUSH
28282: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28286: LD_VAR 0 8
28290: PPUSH
28291: LD_VAR 0 9
28295: PPUSH
28296: LD_VAR 0 6
28300: PPUSH
28301: LD_VAR 0 7
28305: PPUSH
28306: CALL_OW 330
// repeat wait ( 1 ) ;
28310: LD_INT 1
28312: PPUSH
28313: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 316
28326: PUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 314
28336: OR
28337: PUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 302
28347: NOT
28348: OR
28349: PUSH
28350: LD_VAR 0 1
28354: PPUSH
28355: CALL_OW 301
28359: OR
28360: IFFALSE 28310
// RemoveSeeing ( _x , _y , side ) ;
28362: LD_VAR 0 8
28366: PPUSH
28367: LD_VAR 0 9
28371: PPUSH
28372: LD_VAR 0 6
28376: PPUSH
28377: CALL_OW 331
// end ; end_of_file
28381: LD_VAR 0 4
28385: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28386: LD_INT 0
28388: PPUSH
28389: PPUSH
// if exist_mode then
28390: LD_VAR 0 2
28394: IFFALSE 28419
// unit := CreateCharacter ( prefix & ident ) else
28396: LD_ADDR_VAR 0 5
28400: PUSH
28401: LD_VAR 0 3
28405: PUSH
28406: LD_VAR 0 1
28410: STR
28411: PPUSH
28412: CALL_OW 34
28416: ST_TO_ADDR
28417: GO 28434
// unit := NewCharacter ( ident ) ;
28419: LD_ADDR_VAR 0 5
28423: PUSH
28424: LD_VAR 0 1
28428: PPUSH
28429: CALL_OW 25
28433: ST_TO_ADDR
// result := unit ;
28434: LD_ADDR_VAR 0 4
28438: PUSH
28439: LD_VAR 0 5
28443: ST_TO_ADDR
// end ;
28444: LD_VAR 0 4
28448: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
// if not side or not nation then
28453: LD_VAR 0 1
28457: NOT
28458: PUSH
28459: LD_VAR 0 2
28463: NOT
28464: OR
28465: IFFALSE 28469
// exit ;
28467: GO 29233
// case nation of nation_american :
28469: LD_VAR 0 2
28473: PUSH
28474: LD_INT 1
28476: DOUBLE
28477: EQUAL
28478: IFTRUE 28482
28480: GO 28696
28482: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28483: LD_ADDR_VAR 0 4
28487: PUSH
28488: LD_INT 35
28490: PUSH
28491: LD_INT 45
28493: PUSH
28494: LD_INT 46
28496: PUSH
28497: LD_INT 47
28499: PUSH
28500: LD_INT 82
28502: PUSH
28503: LD_INT 83
28505: PUSH
28506: LD_INT 84
28508: PUSH
28509: LD_INT 85
28511: PUSH
28512: LD_INT 86
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 6
28523: PUSH
28524: LD_INT 15
28526: PUSH
28527: LD_INT 16
28529: PUSH
28530: LD_INT 7
28532: PUSH
28533: LD_INT 12
28535: PUSH
28536: LD_INT 13
28538: PUSH
28539: LD_INT 10
28541: PUSH
28542: LD_INT 14
28544: PUSH
28545: LD_INT 20
28547: PUSH
28548: LD_INT 21
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_INT 25
28556: PUSH
28557: LD_INT 32
28559: PUSH
28560: LD_INT 27
28562: PUSH
28563: LD_INT 36
28565: PUSH
28566: LD_INT 69
28568: PUSH
28569: LD_INT 39
28571: PUSH
28572: LD_INT 34
28574: PUSH
28575: LD_INT 40
28577: PUSH
28578: LD_INT 48
28580: PUSH
28581: LD_INT 49
28583: PUSH
28584: LD_INT 50
28586: PUSH
28587: LD_INT 51
28589: PUSH
28590: LD_INT 52
28592: PUSH
28593: LD_INT 53
28595: PUSH
28596: LD_INT 54
28598: PUSH
28599: LD_INT 55
28601: PUSH
28602: LD_INT 56
28604: PUSH
28605: LD_INT 57
28607: PUSH
28608: LD_INT 58
28610: PUSH
28611: LD_INT 59
28613: PUSH
28614: LD_INT 60
28616: PUSH
28617: LD_INT 61
28619: PUSH
28620: LD_INT 62
28622: PUSH
28623: LD_INT 80
28625: PUSH
28626: LD_INT 82
28628: PUSH
28629: LD_INT 83
28631: PUSH
28632: LD_INT 84
28634: PUSH
28635: LD_INT 85
28637: PUSH
28638: LD_INT 86
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
28694: GO 29157
28696: LD_INT 2
28698: DOUBLE
28699: EQUAL
28700: IFTRUE 28704
28702: GO 28926
28704: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28705: LD_ADDR_VAR 0 4
28709: PUSH
28710: LD_INT 35
28712: PUSH
28713: LD_INT 45
28715: PUSH
28716: LD_INT 46
28718: PUSH
28719: LD_INT 47
28721: PUSH
28722: LD_INT 82
28724: PUSH
28725: LD_INT 83
28727: PUSH
28728: LD_INT 84
28730: PUSH
28731: LD_INT 85
28733: PUSH
28734: LD_INT 87
28736: PUSH
28737: LD_INT 70
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 11
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: LD_INT 4
28751: PUSH
28752: LD_INT 5
28754: PUSH
28755: LD_INT 6
28757: PUSH
28758: LD_INT 15
28760: PUSH
28761: LD_INT 18
28763: PUSH
28764: LD_INT 7
28766: PUSH
28767: LD_INT 17
28769: PUSH
28770: LD_INT 8
28772: PUSH
28773: LD_INT 20
28775: PUSH
28776: LD_INT 21
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_INT 72
28784: PUSH
28785: LD_INT 26
28787: PUSH
28788: LD_INT 69
28790: PUSH
28791: LD_INT 39
28793: PUSH
28794: LD_INT 40
28796: PUSH
28797: LD_INT 41
28799: PUSH
28800: LD_INT 42
28802: PUSH
28803: LD_INT 43
28805: PUSH
28806: LD_INT 48
28808: PUSH
28809: LD_INT 49
28811: PUSH
28812: LD_INT 50
28814: PUSH
28815: LD_INT 51
28817: PUSH
28818: LD_INT 52
28820: PUSH
28821: LD_INT 53
28823: PUSH
28824: LD_INT 54
28826: PUSH
28827: LD_INT 55
28829: PUSH
28830: LD_INT 56
28832: PUSH
28833: LD_INT 60
28835: PUSH
28836: LD_INT 61
28838: PUSH
28839: LD_INT 62
28841: PUSH
28842: LD_INT 66
28844: PUSH
28845: LD_INT 67
28847: PUSH
28848: LD_INT 68
28850: PUSH
28851: LD_INT 81
28853: PUSH
28854: LD_INT 82
28856: PUSH
28857: LD_INT 83
28859: PUSH
28860: LD_INT 84
28862: PUSH
28863: LD_INT 85
28865: PUSH
28866: LD_INT 87
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
28924: GO 29157
28926: LD_INT 3
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 29156
28934: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28935: LD_ADDR_VAR 0 4
28939: PUSH
28940: LD_INT 46
28942: PUSH
28943: LD_INT 47
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 82
28954: PUSH
28955: LD_INT 83
28957: PUSH
28958: LD_INT 84
28960: PUSH
28961: LD_INT 85
28963: PUSH
28964: LD_INT 86
28966: PUSH
28967: LD_INT 11
28969: PUSH
28970: LD_INT 9
28972: PUSH
28973: LD_INT 20
28975: PUSH
28976: LD_INT 19
28978: PUSH
28979: LD_INT 21
28981: PUSH
28982: LD_INT 24
28984: PUSH
28985: LD_INT 22
28987: PUSH
28988: LD_INT 25
28990: PUSH
28991: LD_INT 28
28993: PUSH
28994: LD_INT 29
28996: PUSH
28997: LD_INT 30
28999: PUSH
29000: LD_INT 31
29002: PUSH
29003: LD_INT 37
29005: PUSH
29006: LD_INT 38
29008: PUSH
29009: LD_INT 32
29011: PUSH
29012: LD_INT 27
29014: PUSH
29015: LD_INT 33
29017: PUSH
29018: LD_INT 69
29020: PUSH
29021: LD_INT 39
29023: PUSH
29024: LD_INT 34
29026: PUSH
29027: LD_INT 40
29029: PUSH
29030: LD_INT 71
29032: PUSH
29033: LD_INT 23
29035: PUSH
29036: LD_INT 44
29038: PUSH
29039: LD_INT 48
29041: PUSH
29042: LD_INT 49
29044: PUSH
29045: LD_INT 50
29047: PUSH
29048: LD_INT 51
29050: PUSH
29051: LD_INT 52
29053: PUSH
29054: LD_INT 53
29056: PUSH
29057: LD_INT 54
29059: PUSH
29060: LD_INT 55
29062: PUSH
29063: LD_INT 56
29065: PUSH
29066: LD_INT 57
29068: PUSH
29069: LD_INT 58
29071: PUSH
29072: LD_INT 59
29074: PUSH
29075: LD_INT 63
29077: PUSH
29078: LD_INT 64
29080: PUSH
29081: LD_INT 65
29083: PUSH
29084: LD_INT 82
29086: PUSH
29087: LD_INT 83
29089: PUSH
29090: LD_INT 84
29092: PUSH
29093: LD_INT 85
29095: PUSH
29096: LD_INT 86
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
29154: GO 29157
29156: POP
// if state > - 1 and state < 3 then
29157: LD_VAR 0 3
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: GREATER
29166: PUSH
29167: LD_VAR 0 3
29171: PUSH
29172: LD_INT 3
29174: LESS
29175: AND
29176: IFFALSE 29233
// for i in result do
29178: LD_ADDR_VAR 0 5
29182: PUSH
29183: LD_VAR 0 4
29187: PUSH
29188: FOR_IN
29189: IFFALSE 29231
// if GetTech ( i , side ) <> state then
29191: LD_VAR 0 5
29195: PPUSH
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 321
29205: PUSH
29206: LD_VAR 0 3
29210: NONEQUAL
29211: IFFALSE 29229
// result := result diff i ;
29213: LD_ADDR_VAR 0 4
29217: PUSH
29218: LD_VAR 0 4
29222: PUSH
29223: LD_VAR 0 5
29227: DIFF
29228: ST_TO_ADDR
29229: GO 29188
29231: POP
29232: POP
// end ;
29233: LD_VAR 0 4
29237: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29238: LD_INT 0
29240: PPUSH
29241: PPUSH
29242: PPUSH
// result := true ;
29243: LD_ADDR_VAR 0 3
29247: PUSH
29248: LD_INT 1
29250: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_VAR 0 2
29260: PPUSH
29261: CALL_OW 480
29265: ST_TO_ADDR
// if not tmp then
29266: LD_VAR 0 5
29270: NOT
29271: IFFALSE 29275
// exit ;
29273: GO 29324
// for i in tmp do
29275: LD_ADDR_VAR 0 4
29279: PUSH
29280: LD_VAR 0 5
29284: PUSH
29285: FOR_IN
29286: IFFALSE 29322
// if GetTech ( i , side ) <> state_researched then
29288: LD_VAR 0 4
29292: PPUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 321
29302: PUSH
29303: LD_INT 2
29305: NONEQUAL
29306: IFFALSE 29320
// begin result := false ;
29308: LD_ADDR_VAR 0 3
29312: PUSH
29313: LD_INT 0
29315: ST_TO_ADDR
// exit ;
29316: POP
29317: POP
29318: GO 29324
// end ;
29320: GO 29285
29322: POP
29323: POP
// end ;
29324: LD_VAR 0 3
29328: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29344: LD_VAR 0 1
29348: NOT
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 257
29359: PUSH
29360: LD_INT 9
29362: NONEQUAL
29363: OR
29364: IFFALSE 29368
// exit ;
29366: GO 29941
// side := GetSide ( unit ) ;
29368: LD_ADDR_VAR 0 9
29372: PUSH
29373: LD_VAR 0 1
29377: PPUSH
29378: CALL_OW 255
29382: ST_TO_ADDR
// tech_space := tech_spacanom ;
29383: LD_ADDR_VAR 0 12
29387: PUSH
29388: LD_INT 29
29390: ST_TO_ADDR
// tech_time := tech_taurad ;
29391: LD_ADDR_VAR 0 13
29395: PUSH
29396: LD_INT 28
29398: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29399: LD_ADDR_VAR 0 11
29403: PUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 310
29413: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29414: LD_VAR 0 11
29418: PPUSH
29419: CALL_OW 247
29423: PUSH
29424: LD_INT 2
29426: EQUAL
29427: IFFALSE 29431
// exit ;
29429: GO 29941
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29431: LD_ADDR_VAR 0 8
29435: PUSH
29436: LD_INT 81
29438: PUSH
29439: LD_VAR 0 9
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 21
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 8
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 29941
// if in_unit then
29483: LD_VAR 0 11
29487: IFFALSE 29511
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29489: LD_ADDR_VAR 0 10
29493: PUSH
29494: LD_VAR 0 8
29498: PPUSH
29499: LD_VAR 0 11
29503: PPUSH
29504: CALL_OW 74
29508: ST_TO_ADDR
29509: GO 29531
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29511: LD_ADDR_VAR 0 10
29515: PUSH
29516: LD_VAR 0 8
29520: PPUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: CALL_OW 74
29530: ST_TO_ADDR
// if not enemy then
29531: LD_VAR 0 10
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29941
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29540: LD_VAR 0 11
29544: PUSH
29545: LD_VAR 0 11
29549: PPUSH
29550: LD_VAR 0 10
29554: PPUSH
29555: CALL_OW 296
29559: PUSH
29560: LD_INT 13
29562: GREATER
29563: AND
29564: PUSH
29565: LD_VAR 0 1
29569: PPUSH
29570: LD_VAR 0 10
29574: PPUSH
29575: CALL_OW 296
29579: PUSH
29580: LD_INT 12
29582: GREATER
29583: OR
29584: IFFALSE 29588
// exit ;
29586: GO 29941
// missile := [ 1 ] ;
29588: LD_ADDR_VAR 0 14
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29599: LD_VAR 0 9
29603: PPUSH
29604: LD_VAR 0 12
29608: PPUSH
29609: CALL_OW 325
29613: IFFALSE 29642
// missile := Insert ( missile , missile + 1 , 2 ) ;
29615: LD_ADDR_VAR 0 14
29619: PUSH
29620: LD_VAR 0 14
29624: PPUSH
29625: LD_VAR 0 14
29629: PUSH
29630: LD_INT 1
29632: PLUS
29633: PPUSH
29634: LD_INT 2
29636: PPUSH
29637: CALL_OW 2
29641: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29642: LD_VAR 0 9
29646: PPUSH
29647: LD_VAR 0 13
29651: PPUSH
29652: CALL_OW 325
29656: PUSH
29657: LD_VAR 0 10
29661: PPUSH
29662: CALL_OW 255
29666: PPUSH
29667: LD_VAR 0 13
29671: PPUSH
29672: CALL_OW 325
29676: NOT
29677: AND
29678: IFFALSE 29707
// missile := Insert ( missile , missile + 1 , 3 ) ;
29680: LD_ADDR_VAR 0 14
29684: PUSH
29685: LD_VAR 0 14
29689: PPUSH
29690: LD_VAR 0 14
29694: PUSH
29695: LD_INT 1
29697: PLUS
29698: PPUSH
29699: LD_INT 3
29701: PPUSH
29702: CALL_OW 2
29706: ST_TO_ADDR
// if missile < 2 then
29707: LD_VAR 0 14
29711: PUSH
29712: LD_INT 2
29714: LESS
29715: IFFALSE 29719
// exit ;
29717: GO 29941
// x := GetX ( enemy ) ;
29719: LD_ADDR_VAR 0 4
29723: PUSH
29724: LD_VAR 0 10
29728: PPUSH
29729: CALL_OW 250
29733: ST_TO_ADDR
// y := GetY ( enemy ) ;
29734: LD_ADDR_VAR 0 5
29738: PUSH
29739: LD_VAR 0 10
29743: PPUSH
29744: CALL_OW 251
29748: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_VAR 0 4
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PPUSH
29763: LD_INT 1
29765: PPUSH
29766: CALL_OW 12
29770: PLUS
29771: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29772: LD_ADDR_VAR 0 7
29776: PUSH
29777: LD_VAR 0 5
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PPUSH
29786: LD_INT 1
29788: PPUSH
29789: CALL_OW 12
29793: PLUS
29794: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29795: LD_VAR 0 6
29799: PPUSH
29800: LD_VAR 0 7
29804: PPUSH
29805: CALL_OW 488
29809: NOT
29810: IFFALSE 29832
// begin _x := x ;
29812: LD_ADDR_VAR 0 6
29816: PUSH
29817: LD_VAR 0 4
29821: ST_TO_ADDR
// _y := y ;
29822: LD_ADDR_VAR 0 7
29826: PUSH
29827: LD_VAR 0 5
29831: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 1
29839: PPUSH
29840: LD_VAR 0 14
29844: PPUSH
29845: CALL_OW 12
29849: ST_TO_ADDR
// case i of 1 :
29850: LD_VAR 0 3
29854: PUSH
29855: LD_INT 1
29857: DOUBLE
29858: EQUAL
29859: IFTRUE 29863
29861: GO 29880
29863: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29864: LD_VAR 0 1
29868: PPUSH
29869: LD_VAR 0 10
29873: PPUSH
29874: CALL_OW 115
29878: GO 29941
29880: LD_INT 2
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29910
29888: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29889: LD_VAR 0 1
29893: PPUSH
29894: LD_VAR 0 6
29898: PPUSH
29899: LD_VAR 0 7
29903: PPUSH
29904: CALL_OW 153
29908: GO 29941
29910: LD_INT 3
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29940
29918: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29919: LD_VAR 0 1
29923: PPUSH
29924: LD_VAR 0 6
29928: PPUSH
29929: LD_VAR 0 7
29933: PPUSH
29934: CALL_OW 154
29938: GO 29941
29940: POP
// end ;
29941: LD_VAR 0 2
29945: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29946: LD_INT 0
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// if not unit or not building then
29954: LD_VAR 0 1
29958: NOT
29959: PUSH
29960: LD_VAR 0 2
29964: NOT
29965: OR
29966: IFFALSE 29970
// exit ;
29968: GO 30128
// x := GetX ( building ) ;
29970: LD_ADDR_VAR 0 5
29974: PUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 250
29984: ST_TO_ADDR
// y := GetY ( building ) ;
29985: LD_ADDR_VAR 0 6
29989: PUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: CALL_OW 251
29999: ST_TO_ADDR
// for i = 0 to 5 do
30000: LD_ADDR_VAR 0 4
30004: PUSH
30005: DOUBLE
30006: LD_INT 0
30008: DEC
30009: ST_TO_ADDR
30010: LD_INT 5
30012: PUSH
30013: FOR_TO
30014: IFFALSE 30126
// begin _x := ShiftX ( x , i , 3 ) ;
30016: LD_ADDR_VAR 0 7
30020: PUSH
30021: LD_VAR 0 5
30025: PPUSH
30026: LD_VAR 0 4
30030: PPUSH
30031: LD_INT 3
30033: PPUSH
30034: CALL_OW 272
30038: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30039: LD_ADDR_VAR 0 8
30043: PUSH
30044: LD_VAR 0 6
30048: PPUSH
30049: LD_VAR 0 4
30053: PPUSH
30054: LD_INT 3
30056: PPUSH
30057: CALL_OW 273
30061: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30062: LD_VAR 0 7
30066: PPUSH
30067: LD_VAR 0 8
30071: PPUSH
30072: CALL_OW 488
30076: NOT
30077: IFFALSE 30081
// continue ;
30079: GO 30013
// if HexInfo ( _x , _y ) = 0 then
30081: LD_VAR 0 7
30085: PPUSH
30086: LD_VAR 0 8
30090: PPUSH
30091: CALL_OW 428
30095: PUSH
30096: LD_INT 0
30098: EQUAL
30099: IFFALSE 30124
// begin ComMoveXY ( unit , _x , _y ) ;
30101: LD_VAR 0 1
30105: PPUSH
30106: LD_VAR 0 7
30110: PPUSH
30111: LD_VAR 0 8
30115: PPUSH
30116: CALL_OW 111
// exit ;
30120: POP
30121: POP
30122: GO 30128
// end ; end ;
30124: GO 30013
30126: POP
30127: POP
// end ;
30128: LD_VAR 0 3
30132: RET
// export function ScanBase ( side , base_area ) ; begin
30133: LD_INT 0
30135: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_VAR 0 2
30145: PPUSH
30146: LD_INT 81
30148: PUSH
30149: LD_VAR 0 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PPUSH
30158: CALL_OW 70
30162: ST_TO_ADDR
// end ;
30163: LD_VAR 0 3
30167: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30168: LD_INT 0
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
// result := false ;
30174: LD_ADDR_VAR 0 2
30178: PUSH
30179: LD_INT 0
30181: ST_TO_ADDR
// side := GetSide ( unit ) ;
30182: LD_ADDR_VAR 0 3
30186: PUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL_OW 255
30196: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30197: LD_ADDR_VAR 0 4
30201: PUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 248
30211: ST_TO_ADDR
// case nat of 1 :
30212: LD_VAR 0 4
30216: PUSH
30217: LD_INT 1
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30236
30225: POP
// tech := tech_lassight ; 2 :
30226: LD_ADDR_VAR 0 5
30230: PUSH
30231: LD_INT 12
30233: ST_TO_ADDR
30234: GO 30275
30236: LD_INT 2
30238: DOUBLE
30239: EQUAL
30240: IFTRUE 30244
30242: GO 30255
30244: POP
// tech := tech_mortar ; 3 :
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_INT 41
30252: ST_TO_ADDR
30253: GO 30275
30255: LD_INT 3
30257: DOUBLE
30258: EQUAL
30259: IFTRUE 30263
30261: GO 30274
30263: POP
// tech := tech_bazooka ; end ;
30264: LD_ADDR_VAR 0 5
30268: PUSH
30269: LD_INT 44
30271: ST_TO_ADDR
30272: GO 30275
30274: POP
// if Researched ( side , tech ) then
30275: LD_VAR 0 3
30279: PPUSH
30280: LD_VAR 0 5
30284: PPUSH
30285: CALL_OW 325
30289: IFFALSE 30316
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30291: LD_ADDR_VAR 0 2
30295: PUSH
30296: LD_INT 5
30298: PUSH
30299: LD_INT 8
30301: PUSH
30302: LD_INT 9
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: PUSH
30310: LD_VAR 0 4
30314: ARRAY
30315: ST_TO_ADDR
// end ;
30316: LD_VAR 0 2
30320: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30321: LD_INT 0
30323: PPUSH
30324: PPUSH
30325: PPUSH
// if not mines then
30326: LD_VAR 0 2
30330: NOT
30331: IFFALSE 30335
// exit ;
30333: GO 30479
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30335: LD_ADDR_VAR 0 5
30339: PUSH
30340: LD_INT 81
30342: PUSH
30343: LD_VAR 0 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: LD_INT 21
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 69
30377: ST_TO_ADDR
// for i in mines do
30378: LD_ADDR_VAR 0 4
30382: PUSH
30383: LD_VAR 0 2
30387: PUSH
30388: FOR_IN
30389: IFFALSE 30477
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30391: LD_VAR 0 4
30395: PUSH
30396: LD_INT 1
30398: ARRAY
30399: PPUSH
30400: LD_VAR 0 4
30404: PUSH
30405: LD_INT 2
30407: ARRAY
30408: PPUSH
30409: CALL_OW 458
30413: NOT
30414: IFFALSE 30418
// continue ;
30416: GO 30388
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30418: LD_VAR 0 4
30422: PUSH
30423: LD_INT 1
30425: ARRAY
30426: PPUSH
30427: LD_VAR 0 4
30431: PUSH
30432: LD_INT 2
30434: ARRAY
30435: PPUSH
30436: CALL_OW 428
30440: PUSH
30441: LD_VAR 0 5
30445: IN
30446: IFFALSE 30475
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30448: LD_VAR 0 4
30452: PUSH
30453: LD_INT 1
30455: ARRAY
30456: PPUSH
30457: LD_VAR 0 4
30461: PUSH
30462: LD_INT 2
30464: ARRAY
30465: PPUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 456
// end ;
30475: GO 30388
30477: POP
30478: POP
// end ;
30479: LD_VAR 0 3
30483: RET
// export function Count ( array ) ; var i ; begin
30484: LD_INT 0
30486: PPUSH
30487: PPUSH
// result := 0 ;
30488: LD_ADDR_VAR 0 2
30492: PUSH
30493: LD_INT 0
30495: ST_TO_ADDR
// for i in array do
30496: LD_ADDR_VAR 0 3
30500: PUSH
30501: LD_VAR 0 1
30505: PUSH
30506: FOR_IN
30507: IFFALSE 30531
// if i then
30509: LD_VAR 0 3
30513: IFFALSE 30529
// result := result + 1 ;
30515: LD_ADDR_VAR 0 2
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: LD_INT 1
30527: PLUS
30528: ST_TO_ADDR
30529: GO 30506
30531: POP
30532: POP
// end ;
30533: LD_VAR 0 2
30537: RET
// export function IsEmpty ( building ) ; begin
30538: LD_INT 0
30540: PPUSH
// if not building then
30541: LD_VAR 0 1
30545: NOT
30546: IFFALSE 30550
// exit ;
30548: GO 30593
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30550: LD_ADDR_VAR 0 2
30554: PUSH
30555: LD_VAR 0 1
30559: PUSH
30560: LD_INT 22
30562: PUSH
30563: LD_VAR 0 1
30567: PPUSH
30568: CALL_OW 255
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 58
30579: PUSH
30580: EMPTY
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PPUSH
30587: CALL_OW 69
30591: IN
30592: ST_TO_ADDR
// end ;
30593: LD_VAR 0 2
30597: RET
// export function IsNotFull ( building ) ; begin
30598: LD_INT 0
30600: PPUSH
// if not building then
30601: LD_VAR 0 1
30605: NOT
30606: IFFALSE 30610
// exit ;
30608: GO 30629
// result := UnitsInside ( building ) < 6 ;
30610: LD_ADDR_VAR 0 2
30614: PUSH
30615: LD_VAR 0 1
30619: PPUSH
30620: CALL_OW 313
30624: PUSH
30625: LD_INT 6
30627: LESS
30628: ST_TO_ADDR
// end ;
30629: LD_VAR 0 2
30633: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30634: LD_INT 0
30636: PPUSH
30637: PPUSH
30638: PPUSH
30639: PPUSH
// tmp := [ ] ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: EMPTY
30646: ST_TO_ADDR
// list := [ ] ;
30647: LD_ADDR_VAR 0 5
30651: PUSH
30652: EMPTY
30653: ST_TO_ADDR
// for i = 16 to 25 do
30654: LD_ADDR_VAR 0 4
30658: PUSH
30659: DOUBLE
30660: LD_INT 16
30662: DEC
30663: ST_TO_ADDR
30664: LD_INT 25
30666: PUSH
30667: FOR_TO
30668: IFFALSE 30741
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30670: LD_ADDR_VAR 0 3
30674: PUSH
30675: LD_VAR 0 3
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 255
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 91
30699: PUSH
30700: LD_VAR 0 1
30704: PUSH
30705: LD_INT 6
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 30
30715: PUSH
30716: LD_VAR 0 4
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: PPUSH
30733: CALL_OW 69
30737: ADD
30738: ST_TO_ADDR
30739: GO 30667
30741: POP
30742: POP
// for i = 1 to tmp do
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: DOUBLE
30749: LD_INT 1
30751: DEC
30752: ST_TO_ADDR
30753: LD_VAR 0 3
30757: PUSH
30758: FOR_TO
30759: IFFALSE 30847
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30761: LD_ADDR_VAR 0 5
30765: PUSH
30766: LD_VAR 0 5
30770: PUSH
30771: LD_VAR 0 3
30775: PUSH
30776: LD_VAR 0 4
30780: ARRAY
30781: PPUSH
30782: CALL_OW 266
30786: PUSH
30787: LD_VAR 0 3
30791: PUSH
30792: LD_VAR 0 4
30796: ARRAY
30797: PPUSH
30798: CALL_OW 250
30802: PUSH
30803: LD_VAR 0 3
30807: PUSH
30808: LD_VAR 0 4
30812: ARRAY
30813: PPUSH
30814: CALL_OW 251
30818: PUSH
30819: LD_VAR 0 3
30823: PUSH
30824: LD_VAR 0 4
30828: ARRAY
30829: PPUSH
30830: CALL_OW 254
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: PUSH
30841: EMPTY
30842: LIST
30843: ADD
30844: ST_TO_ADDR
30845: GO 30758
30847: POP
30848: POP
// result := list ;
30849: LD_ADDR_VAR 0 2
30853: PUSH
30854: LD_VAR 0 5
30858: ST_TO_ADDR
// end ;
30859: LD_VAR 0 2
30863: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
// if not factory then
30873: LD_VAR 0 1
30877: NOT
30878: IFFALSE 30882
// exit ;
30880: GO 31475
// if control = control_apeman then
30882: LD_VAR 0 4
30886: PUSH
30887: LD_INT 5
30889: EQUAL
30890: IFFALSE 30999
// begin tmp := UnitsInside ( factory ) ;
30892: LD_ADDR_VAR 0 8
30896: PUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 313
30906: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30907: LD_VAR 0 8
30911: PPUSH
30912: LD_INT 25
30914: PUSH
30915: LD_INT 12
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PPUSH
30922: CALL_OW 72
30926: NOT
30927: IFFALSE 30937
// control := control_manual ;
30929: LD_ADDR_VAR 0 4
30933: PUSH
30934: LD_INT 1
30936: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30937: LD_ADDR_VAR 0 8
30941: PUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL 30634 0 1
30951: ST_TO_ADDR
// if tmp then
30952: LD_VAR 0 8
30956: IFFALSE 30999
// begin for i in tmp do
30958: LD_ADDR_VAR 0 7
30962: PUSH
30963: LD_VAR 0 8
30967: PUSH
30968: FOR_IN
30969: IFFALSE 30997
// if i [ 1 ] = b_ext_radio then
30971: LD_VAR 0 7
30975: PUSH
30976: LD_INT 1
30978: ARRAY
30979: PUSH
30980: LD_INT 22
30982: EQUAL
30983: IFFALSE 30995
// begin control := control_remote ;
30985: LD_ADDR_VAR 0 4
30989: PUSH
30990: LD_INT 2
30992: ST_TO_ADDR
// break ;
30993: GO 30997
// end ;
30995: GO 30968
30997: POP
30998: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 2
31008: PPUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: LD_VAR 0 4
31018: PPUSH
31019: LD_VAR 0 5
31023: PPUSH
31024: CALL_OW 448
31028: IFFALSE 31063
// begin result := [ chassis , engine , control , weapon ] ;
31030: LD_ADDR_VAR 0 6
31034: PUSH
31035: LD_VAR 0 2
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: LD_VAR 0 5
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// exit ;
31061: GO 31475
// end ; _chassis := AvailableChassisList ( factory ) ;
31063: LD_ADDR_VAR 0 9
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 475
31077: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31078: LD_ADDR_VAR 0 11
31082: PUSH
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 476
31092: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31093: LD_ADDR_VAR 0 12
31097: PUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 477
31107: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31108: LD_ADDR_VAR 0 10
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 478
31122: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31123: LD_VAR 0 9
31127: NOT
31128: PUSH
31129: LD_VAR 0 11
31133: NOT
31134: OR
31135: PUSH
31136: LD_VAR 0 12
31140: NOT
31141: OR
31142: PUSH
31143: LD_VAR 0 10
31147: NOT
31148: OR
31149: IFFALSE 31184
// begin result := [ chassis , engine , control , weapon ] ;
31151: LD_ADDR_VAR 0 6
31155: PUSH
31156: LD_VAR 0 2
31160: PUSH
31161: LD_VAR 0 3
31165: PUSH
31166: LD_VAR 0 4
31170: PUSH
31171: LD_VAR 0 5
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// exit ;
31182: GO 31475
// end ; if not chassis in _chassis then
31184: LD_VAR 0 2
31188: PUSH
31189: LD_VAR 0 9
31193: IN
31194: NOT
31195: IFFALSE 31221
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31197: LD_ADDR_VAR 0 2
31201: PUSH
31202: LD_VAR 0 9
31206: PUSH
31207: LD_INT 1
31209: PPUSH
31210: LD_VAR 0 9
31214: PPUSH
31215: CALL_OW 12
31219: ARRAY
31220: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31221: LD_VAR 0 2
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL 31480 0 2
31235: NOT
31236: IFFALSE 31295
// repeat engine := _engine [ 1 ] ;
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_VAR 0 11
31247: PUSH
31248: LD_INT 1
31250: ARRAY
31251: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31252: LD_ADDR_VAR 0 11
31256: PUSH
31257: LD_VAR 0 11
31261: PPUSH
31262: LD_INT 1
31264: PPUSH
31265: CALL_OW 3
31269: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31270: LD_VAR 0 2
31274: PPUSH
31275: LD_VAR 0 3
31279: PPUSH
31280: CALL 31480 0 2
31284: PUSH
31285: LD_VAR 0 11
31289: PUSH
31290: EMPTY
31291: EQUAL
31292: OR
31293: IFFALSE 31238
// if not control in _control then
31295: LD_VAR 0 4
31299: PUSH
31300: LD_VAR 0 12
31304: IN
31305: NOT
31306: IFFALSE 31332
// control := _control [ rand ( 1 , _control ) ] ;
31308: LD_ADDR_VAR 0 4
31312: PUSH
31313: LD_VAR 0 12
31317: PUSH
31318: LD_INT 1
31320: PPUSH
31321: LD_VAR 0 12
31325: PPUSH
31326: CALL_OW 12
31330: ARRAY
31331: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31332: LD_VAR 0 2
31336: PPUSH
31337: LD_VAR 0 5
31341: PPUSH
31342: CALL 31700 0 2
31346: NOT
31347: IFFALSE 31406
// repeat weapon := _weapon [ 1 ] ;
31349: LD_ADDR_VAR 0 5
31353: PUSH
31354: LD_VAR 0 10
31358: PUSH
31359: LD_INT 1
31361: ARRAY
31362: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31363: LD_ADDR_VAR 0 10
31367: PUSH
31368: LD_VAR 0 10
31372: PPUSH
31373: LD_INT 1
31375: PPUSH
31376: CALL_OW 3
31380: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31381: LD_VAR 0 2
31385: PPUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: CALL 31700 0 2
31395: PUSH
31396: LD_VAR 0 10
31400: PUSH
31401: EMPTY
31402: EQUAL
31403: OR
31404: IFFALSE 31349
// result := [ ] ;
31406: LD_ADDR_VAR 0 6
31410: PUSH
31411: EMPTY
31412: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31413: LD_VAR 0 1
31417: PPUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: LD_VAR 0 4
31432: PPUSH
31433: LD_VAR 0 5
31437: PPUSH
31438: CALL_OW 448
31442: IFFALSE 31475
// result := [ chassis , engine , control , weapon ] ;
31444: LD_ADDR_VAR 0 6
31448: PUSH
31449: LD_VAR 0 2
31453: PUSH
31454: LD_VAR 0 3
31458: PUSH
31459: LD_VAR 0 4
31463: PUSH
31464: LD_VAR 0 5
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// end ;
31475: LD_VAR 0 6
31479: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31480: LD_INT 0
31482: PPUSH
// if not chassis or not engine then
31483: LD_VAR 0 1
31487: NOT
31488: PUSH
31489: LD_VAR 0 2
31493: NOT
31494: OR
31495: IFFALSE 31499
// exit ;
31497: GO 31695
// case engine of engine_solar :
31499: LD_VAR 0 2
31503: PUSH
31504: LD_INT 2
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31550
31512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_INT 11
31520: PUSH
31521: LD_INT 12
31523: PUSH
31524: LD_INT 13
31526: PUSH
31527: LD_INT 14
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: ST_TO_ADDR
31548: GO 31679
31550: LD_INT 1
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31620
31558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_INT 11
31566: PUSH
31567: LD_INT 12
31569: PUSH
31570: LD_INT 13
31572: PUSH
31573: LD_INT 14
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: LD_INT 4
31587: PUSH
31588: LD_INT 5
31590: PUSH
31591: LD_INT 21
31593: PUSH
31594: LD_INT 23
31596: PUSH
31597: LD_INT 22
31599: PUSH
31600: LD_INT 24
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
31618: GO 31679
31620: LD_INT 3
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31678
31628: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 13
31636: PUSH
31637: LD_INT 14
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: LD_INT 5
31651: PUSH
31652: LD_INT 21
31654: PUSH
31655: LD_INT 22
31657: PUSH
31658: LD_INT 23
31660: PUSH
31661: LD_INT 24
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
31676: GO 31679
31678: POP
// result := ( chassis in result ) ;
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: LD_VAR 0 1
31688: PUSH
31689: LD_VAR 0 3
31693: IN
31694: ST_TO_ADDR
// end ;
31695: LD_VAR 0 3
31699: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31700: LD_INT 0
31702: PPUSH
// if not chassis or not weapon then
31703: LD_VAR 0 1
31707: NOT
31708: PUSH
31709: LD_VAR 0 2
31713: NOT
31714: OR
31715: IFFALSE 31719
// exit ;
31717: GO 32745
// case weapon of us_machine_gun :
31719: LD_VAR 0 2
31723: PUSH
31724: LD_INT 2
31726: DOUBLE
31727: EQUAL
31728: IFTRUE 31732
31730: GO 31762
31732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31733: LD_ADDR_VAR 0 3
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: LD_INT 5
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
31760: GO 32729
31762: LD_INT 3
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31800
31770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31771: LD_ADDR_VAR 0 3
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 2
31781: PUSH
31782: LD_INT 3
31784: PUSH
31785: LD_INT 4
31787: PUSH
31788: LD_INT 5
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
31798: GO 32729
31800: LD_INT 11
31802: DOUBLE
31803: EQUAL
31804: IFTRUE 31808
31806: GO 31838
31808: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 4
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
31836: GO 32729
31838: LD_INT 4
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31872
31846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: LD_INT 5
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
31870: GO 32729
31872: LD_INT 5
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31906
31880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: LD_INT 5
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
31904: GO 32729
31906: LD_INT 9
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31940
31914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 3
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: LD_INT 5
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
31938: GO 32729
31940: LD_INT 7
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31948
31946: GO 31974
31948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31949: LD_ADDR_VAR 0 3
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: LD_INT 5
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
31972: GO 32729
31974: LD_INT 12
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 32008
31982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 4
31996: PUSH
31997: LD_INT 5
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
32006: GO 32729
32008: LD_INT 13
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32042
32016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 4
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: ST_TO_ADDR
32040: GO 32729
32042: LD_INT 14
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32068
32050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32051: LD_ADDR_VAR 0 3
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: LD_INT 5
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: ST_TO_ADDR
32066: GO 32729
32068: LD_INT 6
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32094
32076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_INT 4
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 32729
32094: LD_INT 10
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32120
32102: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 32729
32120: LD_INT 22
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32154
32128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: LD_INT 11
32136: PUSH
32137: LD_INT 12
32139: PUSH
32140: LD_INT 13
32142: PUSH
32143: LD_INT 14
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: ST_TO_ADDR
32152: GO 32729
32154: LD_INT 23
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32188
32162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32163: LD_ADDR_VAR 0 3
32167: PUSH
32168: LD_INT 11
32170: PUSH
32171: LD_INT 12
32173: PUSH
32174: LD_INT 13
32176: PUSH
32177: LD_INT 14
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
32186: GO 32729
32188: LD_INT 24
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32222
32196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 11
32204: PUSH
32205: LD_INT 12
32207: PUSH
32208: LD_INT 13
32210: PUSH
32211: LD_INT 14
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
32220: GO 32729
32222: LD_INT 30
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32230
32228: GO 32256
32230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 11
32238: PUSH
32239: LD_INT 12
32241: PUSH
32242: LD_INT 13
32244: PUSH
32245: LD_INT 14
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: ST_TO_ADDR
32254: GO 32729
32256: LD_INT 25
32258: DOUBLE
32259: EQUAL
32260: IFTRUE 32264
32262: GO 32282
32264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_INT 13
32272: PUSH
32273: LD_INT 14
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: ST_TO_ADDR
32280: GO 32729
32282: LD_INT 27
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32290
32288: GO 32308
32290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32291: LD_ADDR_VAR 0 3
32295: PUSH
32296: LD_INT 13
32298: PUSH
32299: LD_INT 14
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: ST_TO_ADDR
32306: GO 32729
32308: LD_INT 28
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32334
32316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 13
32324: PUSH
32325: LD_INT 14
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: ST_TO_ADDR
32332: GO 32729
32334: LD_INT 29
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32360
32342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_INT 13
32350: PUSH
32351: LD_INT 14
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 32729
32360: LD_INT 31
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32386
32368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 13
32376: PUSH
32377: LD_INT 14
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: ST_TO_ADDR
32384: GO 32729
32386: LD_INT 26
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32412
32394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_INT 13
32402: PUSH
32403: LD_INT 14
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 32729
32412: LD_INT 42
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32446
32420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_INT 21
32428: PUSH
32429: LD_INT 22
32431: PUSH
32432: LD_INT 23
32434: PUSH
32435: LD_INT 24
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: ST_TO_ADDR
32444: GO 32729
32446: LD_INT 43
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32480
32454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 21
32462: PUSH
32463: LD_INT 22
32465: PUSH
32466: LD_INT 23
32468: PUSH
32469: LD_INT 24
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: ST_TO_ADDR
32478: GO 32729
32480: LD_INT 44
32482: DOUBLE
32483: EQUAL
32484: IFTRUE 32488
32486: GO 32514
32488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32489: LD_ADDR_VAR 0 3
32493: PUSH
32494: LD_INT 21
32496: PUSH
32497: LD_INT 22
32499: PUSH
32500: LD_INT 23
32502: PUSH
32503: LD_INT 24
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
32512: GO 32729
32514: LD_INT 45
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32548
32522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_INT 21
32530: PUSH
32531: LD_INT 22
32533: PUSH
32534: LD_INT 23
32536: PUSH
32537: LD_INT 24
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: ST_TO_ADDR
32546: GO 32729
32548: LD_INT 49
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32582
32556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_INT 21
32564: PUSH
32565: LD_INT 22
32567: PUSH
32568: LD_INT 23
32570: PUSH
32571: LD_INT 24
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
32580: GO 32729
32582: LD_INT 51
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32616
32590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_INT 21
32598: PUSH
32599: LD_INT 22
32601: PUSH
32602: LD_INT 23
32604: PUSH
32605: LD_INT 24
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
32614: GO 32729
32616: LD_INT 52
32618: DOUBLE
32619: EQUAL
32620: IFTRUE 32624
32622: GO 32650
32624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: LD_INT 21
32632: PUSH
32633: LD_INT 22
32635: PUSH
32636: LD_INT 23
32638: PUSH
32639: LD_INT 24
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
32648: GO 32729
32650: LD_INT 53
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32676
32658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_INT 23
32666: PUSH
32667: LD_INT 24
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: ST_TO_ADDR
32674: GO 32729
32676: LD_INT 46
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32702
32684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_INT 23
32692: PUSH
32693: LD_INT 24
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: ST_TO_ADDR
32700: GO 32729
32702: LD_INT 47
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32728
32710: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32711: LD_ADDR_VAR 0 3
32715: PUSH
32716: LD_INT 23
32718: PUSH
32719: LD_INT 24
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: ST_TO_ADDR
32726: GO 32729
32728: POP
// result := ( chassis in result ) ;
32729: LD_ADDR_VAR 0 3
32733: PUSH
32734: LD_VAR 0 1
32738: PUSH
32739: LD_VAR 0 3
32743: IN
32744: ST_TO_ADDR
// end ;
32745: LD_VAR 0 3
32749: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32750: LD_INT 0
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
// result := array ;
32759: LD_ADDR_VAR 0 5
32763: PUSH
32764: LD_VAR 0 1
32768: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32769: LD_VAR 0 1
32773: NOT
32774: PUSH
32775: LD_VAR 0 2
32779: NOT
32780: OR
32781: PUSH
32782: LD_VAR 0 3
32786: NOT
32787: OR
32788: PUSH
32789: LD_VAR 0 2
32793: PUSH
32794: LD_VAR 0 1
32798: GREATER
32799: OR
32800: PUSH
32801: LD_VAR 0 3
32805: PUSH
32806: LD_VAR 0 1
32810: GREATER
32811: OR
32812: IFFALSE 32816
// exit ;
32814: GO 33112
// if direction then
32816: LD_VAR 0 4
32820: IFFALSE 32884
// begin d := 1 ;
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_INT 1
32829: ST_TO_ADDR
// if i_from > i_to then
32830: LD_VAR 0 2
32834: PUSH
32835: LD_VAR 0 3
32839: GREATER
32840: IFFALSE 32866
// length := ( array - i_from ) + i_to else
32842: LD_ADDR_VAR 0 11
32846: PUSH
32847: LD_VAR 0 1
32851: PUSH
32852: LD_VAR 0 2
32856: MINUS
32857: PUSH
32858: LD_VAR 0 3
32862: PLUS
32863: ST_TO_ADDR
32864: GO 32882
// length := i_to - i_from ;
32866: LD_ADDR_VAR 0 11
32870: PUSH
32871: LD_VAR 0 3
32875: PUSH
32876: LD_VAR 0 2
32880: MINUS
32881: ST_TO_ADDR
// end else
32882: GO 32945
// begin d := - 1 ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: ST_TO_ADDR
// if i_from > i_to then
32893: LD_VAR 0 2
32897: PUSH
32898: LD_VAR 0 3
32902: GREATER
32903: IFFALSE 32923
// length := i_from - i_to else
32905: LD_ADDR_VAR 0 11
32909: PUSH
32910: LD_VAR 0 2
32914: PUSH
32915: LD_VAR 0 3
32919: MINUS
32920: ST_TO_ADDR
32921: GO 32945
// length := ( array - i_to ) + i_from ;
32923: LD_ADDR_VAR 0 11
32927: PUSH
32928: LD_VAR 0 1
32932: PUSH
32933: LD_VAR 0 3
32937: MINUS
32938: PUSH
32939: LD_VAR 0 2
32943: PLUS
32944: ST_TO_ADDR
// end ; if not length then
32945: LD_VAR 0 11
32949: NOT
32950: IFFALSE 32954
// exit ;
32952: GO 33112
// tmp := array ;
32954: LD_ADDR_VAR 0 10
32958: PUSH
32959: LD_VAR 0 1
32963: ST_TO_ADDR
// for i = 1 to length do
32964: LD_ADDR_VAR 0 6
32968: PUSH
32969: DOUBLE
32970: LD_INT 1
32972: DEC
32973: ST_TO_ADDR
32974: LD_VAR 0 11
32978: PUSH
32979: FOR_TO
32980: IFFALSE 33100
// begin for j = 1 to array do
32982: LD_ADDR_VAR 0 7
32986: PUSH
32987: DOUBLE
32988: LD_INT 1
32990: DEC
32991: ST_TO_ADDR
32992: LD_VAR 0 1
32996: PUSH
32997: FOR_TO
32998: IFFALSE 33086
// begin k := j + d ;
33000: LD_ADDR_VAR 0 8
33004: PUSH
33005: LD_VAR 0 7
33009: PUSH
33010: LD_VAR 0 9
33014: PLUS
33015: ST_TO_ADDR
// if k > array then
33016: LD_VAR 0 8
33020: PUSH
33021: LD_VAR 0 1
33025: GREATER
33026: IFFALSE 33036
// k := 1 ;
33028: LD_ADDR_VAR 0 8
33032: PUSH
33033: LD_INT 1
33035: ST_TO_ADDR
// if not k then
33036: LD_VAR 0 8
33040: NOT
33041: IFFALSE 33053
// k := array ;
33043: LD_ADDR_VAR 0 8
33047: PUSH
33048: LD_VAR 0 1
33052: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33053: LD_ADDR_VAR 0 10
33057: PUSH
33058: LD_VAR 0 10
33062: PPUSH
33063: LD_VAR 0 8
33067: PPUSH
33068: LD_VAR 0 1
33072: PUSH
33073: LD_VAR 0 7
33077: ARRAY
33078: PPUSH
33079: CALL_OW 1
33083: ST_TO_ADDR
// end ;
33084: GO 32997
33086: POP
33087: POP
// array := tmp ;
33088: LD_ADDR_VAR 0 1
33092: PUSH
33093: LD_VAR 0 10
33097: ST_TO_ADDR
// end ;
33098: GO 32979
33100: POP
33101: POP
// result := array ;
33102: LD_ADDR_VAR 0 5
33106: PUSH
33107: LD_VAR 0 1
33111: ST_TO_ADDR
// end ;
33112: LD_VAR 0 5
33116: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33117: LD_INT 0
33119: PPUSH
33120: PPUSH
// result := 0 ;
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 0
33128: ST_TO_ADDR
// if not array or not value in array then
33129: LD_VAR 0 1
33133: NOT
33134: PUSH
33135: LD_VAR 0 2
33139: PUSH
33140: LD_VAR 0 1
33144: IN
33145: NOT
33146: OR
33147: IFFALSE 33151
// exit ;
33149: GO 33205
// for i = 1 to array do
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: DOUBLE
33157: LD_INT 1
33159: DEC
33160: ST_TO_ADDR
33161: LD_VAR 0 1
33165: PUSH
33166: FOR_TO
33167: IFFALSE 33203
// if value = array [ i ] then
33169: LD_VAR 0 2
33173: PUSH
33174: LD_VAR 0 1
33178: PUSH
33179: LD_VAR 0 4
33183: ARRAY
33184: EQUAL
33185: IFFALSE 33201
// begin result := i ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_VAR 0 4
33196: ST_TO_ADDR
// exit ;
33197: POP
33198: POP
33199: GO 33205
// end ;
33201: GO 33166
33203: POP
33204: POP
// end ;
33205: LD_VAR 0 3
33209: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33210: LD_INT 0
33212: PPUSH
// vc_chassis := chassis ;
33213: LD_ADDR_OWVAR 37
33217: PUSH
33218: LD_VAR 0 1
33222: ST_TO_ADDR
// vc_engine := engine ;
33223: LD_ADDR_OWVAR 39
33227: PUSH
33228: LD_VAR 0 2
33232: ST_TO_ADDR
// vc_control := control ;
33233: LD_ADDR_OWVAR 38
33237: PUSH
33238: LD_VAR 0 3
33242: ST_TO_ADDR
// vc_weapon := weapon ;
33243: LD_ADDR_OWVAR 40
33247: PUSH
33248: LD_VAR 0 4
33252: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33253: LD_ADDR_OWVAR 41
33257: PUSH
33258: LD_VAR 0 5
33262: ST_TO_ADDR
// end ;
33263: LD_VAR 0 6
33267: RET
// export function WantPlant ( unit ) ; var task ; begin
33268: LD_INT 0
33270: PPUSH
33271: PPUSH
// result := false ;
33272: LD_ADDR_VAR 0 2
33276: PUSH
33277: LD_INT 0
33279: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33280: LD_ADDR_VAR 0 3
33284: PUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL_OW 437
33294: ST_TO_ADDR
// if task then
33295: LD_VAR 0 3
33299: IFFALSE 33327
// if task [ 1 ] [ 1 ] = p then
33301: LD_VAR 0 3
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PUSH
33310: LD_INT 1
33312: ARRAY
33313: PUSH
33314: LD_STRING p
33316: EQUAL
33317: IFFALSE 33327
// result := true ;
33319: LD_ADDR_VAR 0 2
33323: PUSH
33324: LD_INT 1
33326: ST_TO_ADDR
// end ;
33327: LD_VAR 0 2
33331: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33332: LD_INT 0
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
// if pos < 1 then
33338: LD_VAR 0 2
33342: PUSH
33343: LD_INT 1
33345: LESS
33346: IFFALSE 33350
// exit ;
33348: GO 33653
// if pos = 1 then
33350: LD_VAR 0 2
33354: PUSH
33355: LD_INT 1
33357: EQUAL
33358: IFFALSE 33391
// result := Replace ( arr , pos [ 1 ] , value ) else
33360: LD_ADDR_VAR 0 4
33364: PUSH
33365: LD_VAR 0 1
33369: PPUSH
33370: LD_VAR 0 2
33374: PUSH
33375: LD_INT 1
33377: ARRAY
33378: PPUSH
33379: LD_VAR 0 3
33383: PPUSH
33384: CALL_OW 1
33388: ST_TO_ADDR
33389: GO 33653
// begin tmp := arr ;
33391: LD_ADDR_VAR 0 6
33395: PUSH
33396: LD_VAR 0 1
33400: ST_TO_ADDR
// s_arr := [ tmp ] ;
33401: LD_ADDR_VAR 0 7
33405: PUSH
33406: LD_VAR 0 6
33410: PUSH
33411: EMPTY
33412: LIST
33413: ST_TO_ADDR
// for i = 1 to pos - 1 do
33414: LD_ADDR_VAR 0 5
33418: PUSH
33419: DOUBLE
33420: LD_INT 1
33422: DEC
33423: ST_TO_ADDR
33424: LD_VAR 0 2
33428: PUSH
33429: LD_INT 1
33431: MINUS
33432: PUSH
33433: FOR_TO
33434: IFFALSE 33479
// begin tmp := tmp [ pos [ i ] ] ;
33436: LD_ADDR_VAR 0 6
33440: PUSH
33441: LD_VAR 0 6
33445: PUSH
33446: LD_VAR 0 2
33450: PUSH
33451: LD_VAR 0 5
33455: ARRAY
33456: ARRAY
33457: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33458: LD_ADDR_VAR 0 7
33462: PUSH
33463: LD_VAR 0 7
33467: PUSH
33468: LD_VAR 0 6
33472: PUSH
33473: EMPTY
33474: LIST
33475: ADD
33476: ST_TO_ADDR
// end ;
33477: GO 33433
33479: POP
33480: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33481: LD_ADDR_VAR 0 6
33485: PUSH
33486: LD_VAR 0 6
33490: PPUSH
33491: LD_VAR 0 2
33495: PUSH
33496: LD_VAR 0 2
33500: ARRAY
33501: PPUSH
33502: LD_VAR 0 3
33506: PPUSH
33507: CALL_OW 1
33511: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33512: LD_ADDR_VAR 0 7
33516: PUSH
33517: LD_VAR 0 7
33521: PPUSH
33522: LD_VAR 0 7
33526: PPUSH
33527: LD_VAR 0 6
33531: PPUSH
33532: CALL_OW 1
33536: ST_TO_ADDR
// for i = s_arr downto 2 do
33537: LD_ADDR_VAR 0 5
33541: PUSH
33542: DOUBLE
33543: LD_VAR 0 7
33547: INC
33548: ST_TO_ADDR
33549: LD_INT 2
33551: PUSH
33552: FOR_DOWNTO
33553: IFFALSE 33637
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33555: LD_ADDR_VAR 0 6
33559: PUSH
33560: LD_VAR 0 7
33564: PUSH
33565: LD_VAR 0 5
33569: PUSH
33570: LD_INT 1
33572: MINUS
33573: ARRAY
33574: PPUSH
33575: LD_VAR 0 2
33579: PUSH
33580: LD_VAR 0 5
33584: PUSH
33585: LD_INT 1
33587: MINUS
33588: ARRAY
33589: PPUSH
33590: LD_VAR 0 7
33594: PUSH
33595: LD_VAR 0 5
33599: ARRAY
33600: PPUSH
33601: CALL_OW 1
33605: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33606: LD_ADDR_VAR 0 7
33610: PUSH
33611: LD_VAR 0 7
33615: PPUSH
33616: LD_VAR 0 5
33620: PUSH
33621: LD_INT 1
33623: MINUS
33624: PPUSH
33625: LD_VAR 0 6
33629: PPUSH
33630: CALL_OW 1
33634: ST_TO_ADDR
// end ;
33635: GO 33552
33637: POP
33638: POP
// result := s_arr [ 1 ] ;
33639: LD_ADDR_VAR 0 4
33643: PUSH
33644: LD_VAR 0 7
33648: PUSH
33649: LD_INT 1
33651: ARRAY
33652: ST_TO_ADDR
// end ; end ;
33653: LD_VAR 0 4
33657: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33658: LD_INT 0
33660: PPUSH
33661: PPUSH
// if not list then
33662: LD_VAR 0 1
33666: NOT
33667: IFFALSE 33671
// exit ;
33669: GO 33762
// i := list [ pos1 ] ;
33671: LD_ADDR_VAR 0 5
33675: PUSH
33676: LD_VAR 0 1
33680: PUSH
33681: LD_VAR 0 2
33685: ARRAY
33686: ST_TO_ADDR
// if not i then
33687: LD_VAR 0 5
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 33762
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33696: LD_ADDR_VAR 0 1
33700: PUSH
33701: LD_VAR 0 1
33705: PPUSH
33706: LD_VAR 0 2
33710: PPUSH
33711: LD_VAR 0 1
33715: PUSH
33716: LD_VAR 0 3
33720: ARRAY
33721: PPUSH
33722: CALL_OW 1
33726: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33727: LD_ADDR_VAR 0 1
33731: PUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: LD_VAR 0 3
33741: PPUSH
33742: LD_VAR 0 5
33746: PPUSH
33747: CALL_OW 1
33751: ST_TO_ADDR
// result := list ;
33752: LD_ADDR_VAR 0 4
33756: PUSH
33757: LD_VAR 0 1
33761: ST_TO_ADDR
// end ;
33762: LD_VAR 0 4
33766: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33767: LD_INT 0
33769: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33770: LD_ADDR_VAR 0 5
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 250
33784: PPUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 251
33794: PPUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: LD_VAR 0 4
33809: PPUSH
33810: CALL 33820 0 5
33814: ST_TO_ADDR
// end ;
33815: LD_VAR 0 5
33819: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33820: LD_INT 0
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
// if not list then
33826: LD_VAR 0 3
33830: NOT
33831: IFFALSE 33835
// exit ;
33833: GO 34223
// result := [ ] ;
33835: LD_ADDR_VAR 0 6
33839: PUSH
33840: EMPTY
33841: ST_TO_ADDR
// for i in list do
33842: LD_ADDR_VAR 0 7
33846: PUSH
33847: LD_VAR 0 3
33851: PUSH
33852: FOR_IN
33853: IFFALSE 34055
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33855: LD_ADDR_VAR 0 9
33859: PUSH
33860: LD_VAR 0 7
33864: PPUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: LD_VAR 0 2
33874: PPUSH
33875: CALL_OW 297
33879: ST_TO_ADDR
// if not result then
33880: LD_VAR 0 6
33884: NOT
33885: IFFALSE 33911
// result := [ [ i , tmp ] ] else
33887: LD_ADDR_VAR 0 6
33891: PUSH
33892: LD_VAR 0 7
33896: PUSH
33897: LD_VAR 0 9
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: ST_TO_ADDR
33909: GO 34053
// begin if result [ result ] [ 2 ] < tmp then
33911: LD_VAR 0 6
33915: PUSH
33916: LD_VAR 0 6
33920: ARRAY
33921: PUSH
33922: LD_INT 2
33924: ARRAY
33925: PUSH
33926: LD_VAR 0 9
33930: LESS
33931: IFFALSE 33973
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33933: LD_ADDR_VAR 0 6
33937: PUSH
33938: LD_VAR 0 6
33942: PPUSH
33943: LD_VAR 0 6
33947: PUSH
33948: LD_INT 1
33950: PLUS
33951: PPUSH
33952: LD_VAR 0 7
33956: PUSH
33957: LD_VAR 0 9
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PPUSH
33966: CALL_OW 2
33970: ST_TO_ADDR
33971: GO 34053
// for j = 1 to result do
33973: LD_ADDR_VAR 0 8
33977: PUSH
33978: DOUBLE
33979: LD_INT 1
33981: DEC
33982: ST_TO_ADDR
33983: LD_VAR 0 6
33987: PUSH
33988: FOR_TO
33989: IFFALSE 34051
// begin if tmp < result [ j ] [ 2 ] then
33991: LD_VAR 0 9
33995: PUSH
33996: LD_VAR 0 6
34000: PUSH
34001: LD_VAR 0 8
34005: ARRAY
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: LESS
34011: IFFALSE 34049
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34013: LD_ADDR_VAR 0 6
34017: PUSH
34018: LD_VAR 0 6
34022: PPUSH
34023: LD_VAR 0 8
34027: PPUSH
34028: LD_VAR 0 7
34032: PUSH
34033: LD_VAR 0 9
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PPUSH
34042: CALL_OW 2
34046: ST_TO_ADDR
// break ;
34047: GO 34051
// end ; end ;
34049: GO 33988
34051: POP
34052: POP
// end ; end ;
34053: GO 33852
34055: POP
34056: POP
// if result and not asc then
34057: LD_VAR 0 6
34061: PUSH
34062: LD_VAR 0 4
34066: NOT
34067: AND
34068: IFFALSE 34143
// begin tmp := result ;
34070: LD_ADDR_VAR 0 9
34074: PUSH
34075: LD_VAR 0 6
34079: ST_TO_ADDR
// for i = tmp downto 1 do
34080: LD_ADDR_VAR 0 7
34084: PUSH
34085: DOUBLE
34086: LD_VAR 0 9
34090: INC
34091: ST_TO_ADDR
34092: LD_INT 1
34094: PUSH
34095: FOR_DOWNTO
34096: IFFALSE 34141
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34098: LD_ADDR_VAR 0 6
34102: PUSH
34103: LD_VAR 0 6
34107: PPUSH
34108: LD_VAR 0 9
34112: PUSH
34113: LD_VAR 0 7
34117: MINUS
34118: PUSH
34119: LD_INT 1
34121: PLUS
34122: PPUSH
34123: LD_VAR 0 9
34127: PUSH
34128: LD_VAR 0 7
34132: ARRAY
34133: PPUSH
34134: CALL_OW 1
34138: ST_TO_ADDR
34139: GO 34095
34141: POP
34142: POP
// end ; tmp := [ ] ;
34143: LD_ADDR_VAR 0 9
34147: PUSH
34148: EMPTY
34149: ST_TO_ADDR
// if mode then
34150: LD_VAR 0 5
34154: IFFALSE 34223
// begin for i = 1 to result do
34156: LD_ADDR_VAR 0 7
34160: PUSH
34161: DOUBLE
34162: LD_INT 1
34164: DEC
34165: ST_TO_ADDR
34166: LD_VAR 0 6
34170: PUSH
34171: FOR_TO
34172: IFFALSE 34211
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34174: LD_ADDR_VAR 0 9
34178: PUSH
34179: LD_VAR 0 9
34183: PPUSH
34184: LD_VAR 0 7
34188: PPUSH
34189: LD_VAR 0 6
34193: PUSH
34194: LD_VAR 0 7
34198: ARRAY
34199: PUSH
34200: LD_INT 1
34202: ARRAY
34203: PPUSH
34204: CALL_OW 1
34208: ST_TO_ADDR
34209: GO 34171
34211: POP
34212: POP
// result := tmp ;
34213: LD_ADDR_VAR 0 6
34217: PUSH
34218: LD_VAR 0 9
34222: ST_TO_ADDR
// end ; end ;
34223: LD_VAR 0 6
34227: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34228: LD_INT 0
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// if not x or not y then
34258: LD_VAR 0 2
34262: NOT
34263: PUSH
34264: LD_VAR 0 3
34268: NOT
34269: OR
34270: IFFALSE 34274
// exit ;
34272: GO 35920
// if not range then
34274: LD_VAR 0 4
34278: NOT
34279: IFFALSE 34289
// range := 10 ;
34281: LD_ADDR_VAR 0 4
34285: PUSH
34286: LD_INT 10
34288: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34289: LD_ADDR_VAR 0 8
34293: PUSH
34294: LD_INT 81
34296: PUSH
34297: LD_VAR 0 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 92
34308: PUSH
34309: LD_VAR 0 2
34313: PUSH
34314: LD_VAR 0 3
34318: PUSH
34319: LD_VAR 0 4
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 21
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 69
34356: ST_TO_ADDR
// if not tmp then
34357: LD_VAR 0 8
34361: NOT
34362: IFFALSE 34366
// exit ;
34364: GO 35920
// for i in tmp do
34366: LD_ADDR_VAR 0 6
34370: PUSH
34371: LD_VAR 0 8
34375: PUSH
34376: FOR_IN
34377: IFFALSE 35895
// begin points := [ 0 , 0 , 0 ] ;
34379: LD_ADDR_VAR 0 9
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// bpoints := 1 ;
34398: LD_ADDR_VAR 0 10
34402: PUSH
34403: LD_INT 1
34405: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 247
34415: PUSH
34416: LD_INT 1
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34424
34422: GO 35002
34424: POP
// begin if GetClass ( i ) = 1 then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 257
34434: PUSH
34435: LD_INT 1
34437: EQUAL
34438: IFFALSE 34459
// points := [ 10 , 5 , 3 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 10
34447: PUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 257
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: LD_INT 3
34474: PUSH
34475: LD_INT 4
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: IN
34483: IFFALSE 34504
// points := [ 3 , 2 , 1 ] ;
34485: LD_ADDR_VAR 0 9
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34504: LD_VAR 0 6
34508: PPUSH
34509: CALL_OW 257
34513: PUSH
34514: LD_INT 5
34516: EQUAL
34517: IFFALSE 34538
// points := [ 130 , 5 , 2 ] ;
34519: LD_ADDR_VAR 0 9
34523: PUSH
34524: LD_INT 130
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34538: LD_VAR 0 6
34542: PPUSH
34543: CALL_OW 257
34547: PUSH
34548: LD_INT 8
34550: EQUAL
34551: IFFALSE 34572
// points := [ 35 , 35 , 30 ] ;
34553: LD_ADDR_VAR 0 9
34557: PUSH
34558: LD_INT 35
34560: PUSH
34561: LD_INT 35
34563: PUSH
34564: LD_INT 30
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34572: LD_VAR 0 6
34576: PPUSH
34577: CALL_OW 257
34581: PUSH
34582: LD_INT 9
34584: EQUAL
34585: IFFALSE 34606
// points := [ 20 , 55 , 40 ] ;
34587: LD_ADDR_VAR 0 9
34591: PUSH
34592: LD_INT 20
34594: PUSH
34595: LD_INT 55
34597: PUSH
34598: LD_INT 40
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34606: LD_VAR 0 6
34610: PPUSH
34611: CALL_OW 257
34615: PUSH
34616: LD_INT 12
34618: PUSH
34619: LD_INT 16
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: IN
34626: IFFALSE 34647
// points := [ 5 , 3 , 2 ] ;
34628: LD_ADDR_VAR 0 9
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34647: LD_VAR 0 6
34651: PPUSH
34652: CALL_OW 257
34656: PUSH
34657: LD_INT 17
34659: EQUAL
34660: IFFALSE 34681
// points := [ 100 , 50 , 75 ] ;
34662: LD_ADDR_VAR 0 9
34666: PUSH
34667: LD_INT 100
34669: PUSH
34670: LD_INT 50
34672: PUSH
34673: LD_INT 75
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34681: LD_VAR 0 6
34685: PPUSH
34686: CALL_OW 257
34690: PUSH
34691: LD_INT 15
34693: EQUAL
34694: IFFALSE 34715
// points := [ 10 , 5 , 3 ] ;
34696: LD_ADDR_VAR 0 9
34700: PUSH
34701: LD_INT 10
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34715: LD_VAR 0 6
34719: PPUSH
34720: CALL_OW 257
34724: PUSH
34725: LD_INT 14
34727: EQUAL
34728: IFFALSE 34749
// points := [ 10 , 0 , 0 ] ;
34730: LD_ADDR_VAR 0 9
34734: PUSH
34735: LD_INT 10
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34749: LD_VAR 0 6
34753: PPUSH
34754: CALL_OW 257
34758: PUSH
34759: LD_INT 11
34761: EQUAL
34762: IFFALSE 34783
// points := [ 30 , 10 , 5 ] ;
34764: LD_ADDR_VAR 0 9
34768: PUSH
34769: LD_INT 30
34771: PUSH
34772: LD_INT 10
34774: PUSH
34775: LD_INT 5
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_INT 5
34790: PPUSH
34791: CALL_OW 321
34795: PUSH
34796: LD_INT 2
34798: EQUAL
34799: IFFALSE 34816
// bpoints := bpoints * 1.8 ;
34801: LD_ADDR_VAR 0 10
34805: PUSH
34806: LD_VAR 0 10
34810: PUSH
34811: LD_REAL  1.80000000000000E+0000
34814: MUL
34815: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34816: LD_VAR 0 6
34820: PPUSH
34821: CALL_OW 257
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: IN
34844: PUSH
34845: LD_VAR 0 1
34849: PPUSH
34850: LD_INT 51
34852: PPUSH
34853: CALL_OW 321
34857: PUSH
34858: LD_INT 2
34860: EQUAL
34861: AND
34862: IFFALSE 34879
// bpoints := bpoints * 1.2 ;
34864: LD_ADDR_VAR 0 10
34868: PUSH
34869: LD_VAR 0 10
34873: PUSH
34874: LD_REAL  1.20000000000000E+0000
34877: MUL
34878: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34879: LD_VAR 0 6
34883: PPUSH
34884: CALL_OW 257
34888: PUSH
34889: LD_INT 5
34891: PUSH
34892: LD_INT 7
34894: PUSH
34895: LD_INT 9
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: IN
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: LD_INT 52
34911: PPUSH
34912: CALL_OW 321
34916: PUSH
34917: LD_INT 2
34919: EQUAL
34920: AND
34921: IFFALSE 34938
// bpoints := bpoints * 1.5 ;
34923: LD_ADDR_VAR 0 10
34927: PUSH
34928: LD_VAR 0 10
34932: PUSH
34933: LD_REAL  1.50000000000000E+0000
34936: MUL
34937: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34938: LD_VAR 0 1
34942: PPUSH
34943: LD_INT 66
34945: PPUSH
34946: CALL_OW 321
34950: PUSH
34951: LD_INT 2
34953: EQUAL
34954: IFFALSE 34971
// bpoints := bpoints * 1.1 ;
34956: LD_ADDR_VAR 0 10
34960: PUSH
34961: LD_VAR 0 10
34965: PUSH
34966: LD_REAL  1.10000000000000E+0000
34969: MUL
34970: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34971: LD_ADDR_VAR 0 10
34975: PUSH
34976: LD_VAR 0 10
34980: PUSH
34981: LD_VAR 0 6
34985: PPUSH
34986: LD_INT 1
34988: PPUSH
34989: CALL_OW 259
34993: PUSH
34994: LD_REAL  1.15000000000000E+0000
34997: MUL
34998: MUL
34999: ST_TO_ADDR
// end ; unit_vehicle :
35000: GO 35824
35002: LD_INT 2
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35010
35008: GO 35812
35010: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35011: LD_VAR 0 6
35015: PPUSH
35016: CALL_OW 264
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 42
35026: PUSH
35027: LD_INT 24
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: IN
35035: IFFALSE 35056
// points := [ 25 , 5 , 3 ] ;
35037: LD_ADDR_VAR 0 9
35041: PUSH
35042: LD_INT 25
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35056: LD_VAR 0 6
35060: PPUSH
35061: CALL_OW 264
35065: PUSH
35066: LD_INT 4
35068: PUSH
35069: LD_INT 43
35071: PUSH
35072: LD_INT 25
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: IN
35080: IFFALSE 35101
// points := [ 40 , 15 , 5 ] ;
35082: LD_ADDR_VAR 0 9
35086: PUSH
35087: LD_INT 40
35089: PUSH
35090: LD_INT 15
35092: PUSH
35093: LD_INT 5
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35101: LD_VAR 0 6
35105: PPUSH
35106: CALL_OW 264
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: LD_INT 23
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: IN
35121: IFFALSE 35142
// points := [ 7 , 25 , 8 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 7
35130: PUSH
35131: LD_INT 25
35133: PUSH
35134: LD_INT 8
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 264
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: LD_INT 27
35157: PUSH
35158: LD_INT 44
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: IN
35166: IFFALSE 35187
// points := [ 14 , 50 , 16 ] ;
35168: LD_ADDR_VAR 0 9
35172: PUSH
35173: LD_INT 14
35175: PUSH
35176: LD_INT 50
35178: PUSH
35179: LD_INT 16
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35187: LD_VAR 0 6
35191: PPUSH
35192: CALL_OW 264
35196: PUSH
35197: LD_INT 6
35199: PUSH
35200: LD_INT 46
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: IN
35207: IFFALSE 35228
// points := [ 32 , 120 , 70 ] ;
35209: LD_ADDR_VAR 0 9
35213: PUSH
35214: LD_INT 32
35216: PUSH
35217: LD_INT 120
35219: PUSH
35220: LD_INT 70
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35228: LD_VAR 0 6
35232: PPUSH
35233: CALL_OW 264
35237: PUSH
35238: LD_INT 7
35240: PUSH
35241: LD_INT 28
35243: PUSH
35244: LD_INT 45
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: IN
35252: IFFALSE 35273
// points := [ 35 , 20 , 45 ] ;
35254: LD_ADDR_VAR 0 9
35258: PUSH
35259: LD_INT 35
35261: PUSH
35262: LD_INT 20
35264: PUSH
35265: LD_INT 45
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35273: LD_VAR 0 6
35277: PPUSH
35278: CALL_OW 264
35282: PUSH
35283: LD_INT 47
35285: PUSH
35286: EMPTY
35287: LIST
35288: IN
35289: IFFALSE 35310
// points := [ 67 , 45 , 75 ] ;
35291: LD_ADDR_VAR 0 9
35295: PUSH
35296: LD_INT 67
35298: PUSH
35299: LD_INT 45
35301: PUSH
35302: LD_INT 75
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35310: LD_VAR 0 6
35314: PPUSH
35315: CALL_OW 264
35319: PUSH
35320: LD_INT 26
35322: PUSH
35323: EMPTY
35324: LIST
35325: IN
35326: IFFALSE 35347
// points := [ 120 , 30 , 80 ] ;
35328: LD_ADDR_VAR 0 9
35332: PUSH
35333: LD_INT 120
35335: PUSH
35336: LD_INT 30
35338: PUSH
35339: LD_INT 80
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35347: LD_VAR 0 6
35351: PPUSH
35352: CALL_OW 264
35356: PUSH
35357: LD_INT 22
35359: PUSH
35360: EMPTY
35361: LIST
35362: IN
35363: IFFALSE 35384
// points := [ 40 , 1 , 1 ] ;
35365: LD_ADDR_VAR 0 9
35369: PUSH
35370: LD_INT 40
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35384: LD_VAR 0 6
35388: PPUSH
35389: CALL_OW 264
35393: PUSH
35394: LD_INT 29
35396: PUSH
35397: EMPTY
35398: LIST
35399: IN
35400: IFFALSE 35421
// points := [ 70 , 200 , 400 ] ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_INT 70
35409: PUSH
35410: LD_INT 200
35412: PUSH
35413: LD_INT 400
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35421: LD_VAR 0 6
35425: PPUSH
35426: CALL_OW 264
35430: PUSH
35431: LD_INT 14
35433: PUSH
35434: LD_INT 53
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: IN
35441: IFFALSE 35462
// points := [ 40 , 10 , 20 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 40
35450: PUSH
35451: LD_INT 10
35453: PUSH
35454: LD_INT 20
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 264
35471: PUSH
35472: LD_INT 9
35474: PUSH
35475: EMPTY
35476: LIST
35477: IN
35478: IFFALSE 35499
// points := [ 5 , 70 , 20 ] ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: LD_INT 70
35490: PUSH
35491: LD_INT 20
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35499: LD_VAR 0 6
35503: PPUSH
35504: CALL_OW 264
35508: PUSH
35509: LD_INT 10
35511: PUSH
35512: EMPTY
35513: LIST
35514: IN
35515: IFFALSE 35536
// points := [ 35 , 110 , 70 ] ;
35517: LD_ADDR_VAR 0 9
35521: PUSH
35522: LD_INT 35
35524: PUSH
35525: LD_INT 110
35527: PUSH
35528: LD_INT 70
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35536: LD_VAR 0 6
35540: PPUSH
35541: CALL_OW 265
35545: PUSH
35546: LD_INT 25
35548: EQUAL
35549: IFFALSE 35570
// points := [ 80 , 65 , 100 ] ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_INT 80
35558: PUSH
35559: LD_INT 65
35561: PUSH
35562: LD_INT 100
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35570: LD_VAR 0 6
35574: PPUSH
35575: CALL_OW 263
35579: PUSH
35580: LD_INT 1
35582: EQUAL
35583: IFFALSE 35618
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35585: LD_ADDR_VAR 0 10
35589: PUSH
35590: LD_VAR 0 10
35594: PUSH
35595: LD_VAR 0 6
35599: PPUSH
35600: CALL_OW 311
35604: PPUSH
35605: LD_INT 3
35607: PPUSH
35608: CALL_OW 259
35612: PUSH
35613: LD_INT 4
35615: MUL
35616: MUL
35617: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 263
35627: PUSH
35628: LD_INT 2
35630: EQUAL
35631: IFFALSE 35682
// begin j := IsControledBy ( i ) ;
35633: LD_ADDR_VAR 0 7
35637: PUSH
35638: LD_VAR 0 6
35642: PPUSH
35643: CALL_OW 312
35647: ST_TO_ADDR
// if j then
35648: LD_VAR 0 7
35652: IFFALSE 35682
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35654: LD_ADDR_VAR 0 10
35658: PUSH
35659: LD_VAR 0 10
35663: PUSH
35664: LD_VAR 0 7
35668: PPUSH
35669: LD_INT 3
35671: PPUSH
35672: CALL_OW 259
35676: PUSH
35677: LD_INT 3
35679: MUL
35680: MUL
35681: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35682: LD_VAR 0 6
35686: PPUSH
35687: CALL_OW 264
35691: PUSH
35692: LD_INT 5
35694: PUSH
35695: LD_INT 6
35697: PUSH
35698: LD_INT 46
35700: PUSH
35701: LD_INT 44
35703: PUSH
35704: LD_INT 47
35706: PUSH
35707: LD_INT 45
35709: PUSH
35710: LD_INT 28
35712: PUSH
35713: LD_INT 7
35715: PUSH
35716: LD_INT 27
35718: PUSH
35719: LD_INT 29
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: IN
35734: PUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: LD_INT 52
35742: PPUSH
35743: CALL_OW 321
35747: PUSH
35748: LD_INT 2
35750: EQUAL
35751: AND
35752: IFFALSE 35769
// bpoints := bpoints * 1.2 ;
35754: LD_ADDR_VAR 0 10
35758: PUSH
35759: LD_VAR 0 10
35763: PUSH
35764: LD_REAL  1.20000000000000E+0000
35767: MUL
35768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35769: LD_VAR 0 6
35773: PPUSH
35774: CALL_OW 264
35778: PUSH
35779: LD_INT 6
35781: PUSH
35782: LD_INT 46
35784: PUSH
35785: LD_INT 47
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: IN
35793: IFFALSE 35810
// bpoints := bpoints * 1.2 ;
35795: LD_ADDR_VAR 0 10
35799: PUSH
35800: LD_VAR 0 10
35804: PUSH
35805: LD_REAL  1.20000000000000E+0000
35808: MUL
35809: ST_TO_ADDR
// end ; unit_building :
35810: GO 35824
35812: LD_INT 3
35814: DOUBLE
35815: EQUAL
35816: IFTRUE 35820
35818: GO 35823
35820: POP
// ; end ;
35821: GO 35824
35823: POP
// for j = 1 to 3 do
35824: LD_ADDR_VAR 0 7
35828: PUSH
35829: DOUBLE
35830: LD_INT 1
35832: DEC
35833: ST_TO_ADDR
35834: LD_INT 3
35836: PUSH
35837: FOR_TO
35838: IFFALSE 35891
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35840: LD_ADDR_VAR 0 5
35844: PUSH
35845: LD_VAR 0 5
35849: PPUSH
35850: LD_VAR 0 7
35854: PPUSH
35855: LD_VAR 0 5
35859: PUSH
35860: LD_VAR 0 7
35864: ARRAY
35865: PUSH
35866: LD_VAR 0 9
35870: PUSH
35871: LD_VAR 0 7
35875: ARRAY
35876: PUSH
35877: LD_VAR 0 10
35881: MUL
35882: PLUS
35883: PPUSH
35884: CALL_OW 1
35888: ST_TO_ADDR
35889: GO 35837
35891: POP
35892: POP
// end ;
35893: GO 34376
35895: POP
35896: POP
// result := Replace ( result , 4 , tmp ) ;
35897: LD_ADDR_VAR 0 5
35901: PUSH
35902: LD_VAR 0 5
35906: PPUSH
35907: LD_INT 4
35909: PPUSH
35910: LD_VAR 0 8
35914: PPUSH
35915: CALL_OW 1
35919: ST_TO_ADDR
// end ;
35920: LD_VAR 0 5
35924: RET
// export function DangerAtRange ( unit , range ) ; begin
35925: LD_INT 0
35927: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35928: LD_ADDR_VAR 0 3
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: PPUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 250
35952: PPUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 251
35962: PPUSH
35963: LD_VAR 0 2
35967: PPUSH
35968: CALL 34228 0 4
35972: ST_TO_ADDR
// end ;
35973: LD_VAR 0 3
35977: RET
// export function DangerInArea ( side , area ) ; begin
35978: LD_INT 0
35980: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_VAR 0 2
35990: PPUSH
35991: LD_INT 81
35993: PUSH
35994: LD_VAR 0 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 70
36007: ST_TO_ADDR
// end ;
36008: LD_VAR 0 3
36012: RET
// export function IsExtension ( b ) ; begin
36013: LD_INT 0
36015: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36016: LD_ADDR_VAR 0 2
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 23
36028: PUSH
36029: LD_INT 20
36031: PUSH
36032: LD_INT 22
36034: PUSH
36035: LD_INT 17
36037: PUSH
36038: LD_INT 24
36040: PUSH
36041: LD_INT 21
36043: PUSH
36044: LD_INT 19
36046: PUSH
36047: LD_INT 16
36049: PUSH
36050: LD_INT 25
36052: PUSH
36053: LD_INT 18
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: IN
36068: ST_TO_ADDR
// end ;
36069: LD_VAR 0 2
36073: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36074: LD_INT 0
36076: PPUSH
36077: PPUSH
36078: PPUSH
// result := [ ] ;
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36086: LD_ADDR_VAR 0 4
36090: PUSH
36091: LD_VAR 0 2
36095: PPUSH
36096: LD_INT 21
36098: PUSH
36099: LD_INT 3
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PPUSH
36106: CALL_OW 70
36110: ST_TO_ADDR
// if not tmp then
36111: LD_VAR 0 4
36115: NOT
36116: IFFALSE 36120
// exit ;
36118: GO 36178
// for i in tmp do
36120: LD_ADDR_VAR 0 5
36124: PUSH
36125: LD_VAR 0 4
36129: PUSH
36130: FOR_IN
36131: IFFALSE 36166
// if GetBase ( i ) <> base then
36133: LD_VAR 0 5
36137: PPUSH
36138: CALL_OW 274
36142: PUSH
36143: LD_VAR 0 1
36147: NONEQUAL
36148: IFFALSE 36164
// ComLinkToBase ( base , i ) ;
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_VAR 0 5
36159: PPUSH
36160: CALL_OW 169
36164: GO 36130
36166: POP
36167: POP
// result := tmp ;
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_VAR 0 4
36177: ST_TO_ADDR
// end ;
36178: LD_VAR 0 3
36182: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36183: LD_INT 0
36185: PPUSH
36186: PPUSH
// if BuildingStatus ( b ) = bs_build then
36187: LD_VAR 0 2
36191: PPUSH
36192: CALL_OW 461
36196: PUSH
36197: LD_INT 1
36199: EQUAL
36200: IFFALSE 36260
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36202: LD_VAR 0 1
36206: PPUSH
36207: LD_STRING h
36209: PUSH
36210: LD_VAR 0 2
36214: PPUSH
36215: CALL_OW 250
36219: PUSH
36220: LD_VAR 0 2
36224: PPUSH
36225: CALL_OW 251
36229: PUSH
36230: LD_VAR 0 2
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: PPUSH
36256: CALL_OW 446
// end ;
36260: LD_VAR 0 3
36264: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36273: LD_VAR 0 1
36277: NOT
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 263
36288: PUSH
36289: LD_INT 2
36291: EQUAL
36292: NOT
36293: OR
36294: IFFALSE 36298
// exit ;
36296: GO 36614
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36298: LD_ADDR_VAR 0 6
36302: PUSH
36303: LD_INT 22
36305: PUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 255
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: PUSH
36323: LD_INT 30
36325: PUSH
36326: LD_INT 36
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 34
36335: PUSH
36336: LD_INT 31
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PPUSH
36352: CALL_OW 69
36356: ST_TO_ADDR
// if not tmp then
36357: LD_VAR 0 6
36361: NOT
36362: IFFALSE 36366
// exit ;
36364: GO 36614
// result := [ ] ;
36366: LD_ADDR_VAR 0 2
36370: PUSH
36371: EMPTY
36372: ST_TO_ADDR
// for i in tmp do
36373: LD_ADDR_VAR 0 3
36377: PUSH
36378: LD_VAR 0 6
36382: PUSH
36383: FOR_IN
36384: IFFALSE 36455
// begin t := UnitsInside ( i ) ;
36386: LD_ADDR_VAR 0 4
36390: PUSH
36391: LD_VAR 0 3
36395: PPUSH
36396: CALL_OW 313
36400: ST_TO_ADDR
// if t then
36401: LD_VAR 0 4
36405: IFFALSE 36453
// for j in t do
36407: LD_ADDR_VAR 0 7
36411: PUSH
36412: LD_VAR 0 4
36416: PUSH
36417: FOR_IN
36418: IFFALSE 36451
// result := Insert ( result , result + 1 , j ) ;
36420: LD_ADDR_VAR 0 2
36424: PUSH
36425: LD_VAR 0 2
36429: PPUSH
36430: LD_VAR 0 2
36434: PUSH
36435: LD_INT 1
36437: PLUS
36438: PPUSH
36439: LD_VAR 0 7
36443: PPUSH
36444: CALL_OW 2
36448: ST_TO_ADDR
36449: GO 36417
36451: POP
36452: POP
// end ;
36453: GO 36383
36455: POP
36456: POP
// if not result then
36457: LD_VAR 0 2
36461: NOT
36462: IFFALSE 36466
// exit ;
36464: GO 36614
// mech := result [ 1 ] ;
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: LD_VAR 0 2
36475: PUSH
36476: LD_INT 1
36478: ARRAY
36479: ST_TO_ADDR
// if result > 1 then
36480: LD_VAR 0 2
36484: PUSH
36485: LD_INT 1
36487: GREATER
36488: IFFALSE 36600
// for i = 2 to result do
36490: LD_ADDR_VAR 0 3
36494: PUSH
36495: DOUBLE
36496: LD_INT 2
36498: DEC
36499: ST_TO_ADDR
36500: LD_VAR 0 2
36504: PUSH
36505: FOR_TO
36506: IFFALSE 36598
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36508: LD_ADDR_VAR 0 4
36512: PUSH
36513: LD_VAR 0 2
36517: PUSH
36518: LD_VAR 0 3
36522: ARRAY
36523: PPUSH
36524: LD_INT 3
36526: PPUSH
36527: CALL_OW 259
36531: PUSH
36532: LD_VAR 0 2
36536: PUSH
36537: LD_VAR 0 3
36541: ARRAY
36542: PPUSH
36543: CALL_OW 432
36547: MINUS
36548: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36549: LD_VAR 0 4
36553: PUSH
36554: LD_VAR 0 5
36558: PPUSH
36559: LD_INT 3
36561: PPUSH
36562: CALL_OW 259
36566: PUSH
36567: LD_VAR 0 5
36571: PPUSH
36572: CALL_OW 432
36576: MINUS
36577: GREATEREQUAL
36578: IFFALSE 36596
// mech := result [ i ] ;
36580: LD_ADDR_VAR 0 5
36584: PUSH
36585: LD_VAR 0 2
36589: PUSH
36590: LD_VAR 0 3
36594: ARRAY
36595: ST_TO_ADDR
// end ;
36596: GO 36505
36598: POP
36599: POP
// ComLinkTo ( vehicle , mech ) ;
36600: LD_VAR 0 1
36604: PPUSH
36605: LD_VAR 0 5
36609: PPUSH
36610: CALL_OW 135
// end ;
36614: LD_VAR 0 2
36618: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36619: LD_INT 0
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
// result := [ ] ;
36634: LD_ADDR_VAR 0 7
36638: PUSH
36639: EMPTY
36640: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 266
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: IN
36661: NOT
36662: IFFALSE 36666
// exit ;
36664: GO 38297
// if name then
36666: LD_VAR 0 3
36670: IFFALSE 36686
// SetBName ( base_dep , name ) ;
36672: LD_VAR 0 1
36676: PPUSH
36677: LD_VAR 0 3
36681: PPUSH
36682: CALL_OW 500
// base := GetBase ( base_dep ) ;
36686: LD_ADDR_VAR 0 15
36690: PUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 274
36700: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36701: LD_ADDR_VAR 0 16
36705: PUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 255
36715: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36716: LD_ADDR_VAR 0 17
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 248
36730: ST_TO_ADDR
// if sources then
36731: LD_VAR 0 5
36735: IFFALSE 36782
// for i = 1 to 3 do
36737: LD_ADDR_VAR 0 8
36741: PUSH
36742: DOUBLE
36743: LD_INT 1
36745: DEC
36746: ST_TO_ADDR
36747: LD_INT 3
36749: PUSH
36750: FOR_TO
36751: IFFALSE 36780
// AddResourceType ( base , i , sources [ i ] ) ;
36753: LD_VAR 0 15
36757: PPUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_VAR 0 5
36767: PUSH
36768: LD_VAR 0 8
36772: ARRAY
36773: PPUSH
36774: CALL_OW 276
36778: GO 36750
36780: POP
36781: POP
// buildings := GetBaseBuildings ( base , area ) ;
36782: LD_ADDR_VAR 0 18
36786: PUSH
36787: LD_VAR 0 15
36791: PPUSH
36792: LD_VAR 0 2
36796: PPUSH
36797: CALL 36074 0 2
36801: ST_TO_ADDR
// InitHc ;
36802: CALL_OW 19
// InitUc ;
36806: CALL_OW 18
// uc_side := side ;
36810: LD_ADDR_OWVAR 20
36814: PUSH
36815: LD_VAR 0 16
36819: ST_TO_ADDR
// uc_nation := nation ;
36820: LD_ADDR_OWVAR 21
36824: PUSH
36825: LD_VAR 0 17
36829: ST_TO_ADDR
// if buildings then
36830: LD_VAR 0 18
36834: IFFALSE 38156
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36836: LD_ADDR_VAR 0 19
36840: PUSH
36841: LD_VAR 0 18
36845: PPUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 30
36851: PUSH
36852: LD_INT 29
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 30
36861: PUSH
36862: LD_INT 30
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: PPUSH
36874: CALL_OW 72
36878: ST_TO_ADDR
// if tmp then
36879: LD_VAR 0 19
36883: IFFALSE 36931
// for i in tmp do
36885: LD_ADDR_VAR 0 8
36889: PUSH
36890: LD_VAR 0 19
36894: PUSH
36895: FOR_IN
36896: IFFALSE 36929
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36898: LD_VAR 0 8
36902: PPUSH
36903: CALL_OW 250
36907: PPUSH
36908: LD_VAR 0 8
36912: PPUSH
36913: CALL_OW 251
36917: PPUSH
36918: LD_VAR 0 16
36922: PPUSH
36923: CALL_OW 441
36927: GO 36895
36929: POP
36930: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36931: LD_VAR 0 18
36935: PPUSH
36936: LD_INT 2
36938: PUSH
36939: LD_INT 30
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 30
36951: PUSH
36952: LD_INT 33
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: PPUSH
36964: CALL_OW 72
36968: IFFALSE 37056
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36970: LD_ADDR_VAR 0 8
36974: PUSH
36975: LD_VAR 0 18
36979: PPUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 30
36985: PUSH
36986: LD_INT 32
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 30
36995: PUSH
36996: LD_INT 33
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: PPUSH
37008: CALL_OW 72
37012: PUSH
37013: FOR_IN
37014: IFFALSE 37054
// begin if not GetBWeapon ( i ) then
37016: LD_VAR 0 8
37020: PPUSH
37021: CALL_OW 269
37025: NOT
37026: IFFALSE 37052
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37028: LD_VAR 0 8
37032: PPUSH
37033: LD_VAR 0 8
37037: PPUSH
37038: LD_VAR 0 2
37042: PPUSH
37043: CALL 38302 0 2
37047: PPUSH
37048: CALL_OW 431
// end ;
37052: GO 37013
37054: POP
37055: POP
// end ; for i = 1 to personel do
37056: LD_ADDR_VAR 0 8
37060: PUSH
37061: DOUBLE
37062: LD_INT 1
37064: DEC
37065: ST_TO_ADDR
37066: LD_VAR 0 6
37070: PUSH
37071: FOR_TO
37072: IFFALSE 38136
// begin if i > 4 then
37074: LD_VAR 0 8
37078: PUSH
37079: LD_INT 4
37081: GREATER
37082: IFFALSE 37086
// break ;
37084: GO 38136
// case i of 1 :
37086: LD_VAR 0 8
37090: PUSH
37091: LD_INT 1
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37179
37099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37100: LD_ADDR_VAR 0 12
37104: PUSH
37105: LD_VAR 0 18
37109: PPUSH
37110: LD_INT 22
37112: PUSH
37113: LD_VAR 0 16
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 58
37124: PUSH
37125: EMPTY
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 30
37133: PUSH
37134: LD_INT 32
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 30
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 30
37153: PUSH
37154: LD_INT 5
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: PPUSH
37172: CALL_OW 72
37176: ST_TO_ADDR
37177: GO 37401
37179: LD_INT 2
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37249
37187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37188: LD_ADDR_VAR 0 12
37192: PUSH
37193: LD_VAR 0 18
37197: PPUSH
37198: LD_INT 22
37200: PUSH
37201: LD_VAR 0 16
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 72
37246: ST_TO_ADDR
37247: GO 37401
37249: LD_INT 3
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37319
37257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37258: LD_ADDR_VAR 0 12
37262: PUSH
37263: LD_VAR 0 18
37267: PPUSH
37268: LD_INT 22
37270: PUSH
37271: LD_VAR 0 16
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 30
37295: PUSH
37296: LD_INT 3
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PPUSH
37312: CALL_OW 72
37316: ST_TO_ADDR
37317: GO 37401
37319: LD_INT 4
37321: DOUBLE
37322: EQUAL
37323: IFTRUE 37327
37325: GO 37400
37327: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37328: LD_ADDR_VAR 0 12
37332: PUSH
37333: LD_VAR 0 18
37337: PPUSH
37338: LD_INT 22
37340: PUSH
37341: LD_VAR 0 16
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 30
37355: PUSH
37356: LD_INT 6
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 30
37365: PUSH
37366: LD_INT 7
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 30
37375: PUSH
37376: LD_INT 8
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PPUSH
37393: CALL_OW 72
37397: ST_TO_ADDR
37398: GO 37401
37400: POP
// if i = 1 then
37401: LD_VAR 0 8
37405: PUSH
37406: LD_INT 1
37408: EQUAL
37409: IFFALSE 37520
// begin tmp := [ ] ;
37411: LD_ADDR_VAR 0 19
37415: PUSH
37416: EMPTY
37417: ST_TO_ADDR
// for j in f do
37418: LD_ADDR_VAR 0 9
37422: PUSH
37423: LD_VAR 0 12
37427: PUSH
37428: FOR_IN
37429: IFFALSE 37502
// if GetBType ( j ) = b_bunker then
37431: LD_VAR 0 9
37435: PPUSH
37436: CALL_OW 266
37440: PUSH
37441: LD_INT 32
37443: EQUAL
37444: IFFALSE 37471
// tmp := Insert ( tmp , 1 , j ) else
37446: LD_ADDR_VAR 0 19
37450: PUSH
37451: LD_VAR 0 19
37455: PPUSH
37456: LD_INT 1
37458: PPUSH
37459: LD_VAR 0 9
37463: PPUSH
37464: CALL_OW 2
37468: ST_TO_ADDR
37469: GO 37500
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37471: LD_ADDR_VAR 0 19
37475: PUSH
37476: LD_VAR 0 19
37480: PPUSH
37481: LD_VAR 0 19
37485: PUSH
37486: LD_INT 1
37488: PLUS
37489: PPUSH
37490: LD_VAR 0 9
37494: PPUSH
37495: CALL_OW 2
37499: ST_TO_ADDR
37500: GO 37428
37502: POP
37503: POP
// if tmp then
37504: LD_VAR 0 19
37508: IFFALSE 37520
// f := tmp ;
37510: LD_ADDR_VAR 0 12
37514: PUSH
37515: LD_VAR 0 19
37519: ST_TO_ADDR
// end ; x := personel [ i ] ;
37520: LD_ADDR_VAR 0 13
37524: PUSH
37525: LD_VAR 0 6
37529: PUSH
37530: LD_VAR 0 8
37534: ARRAY
37535: ST_TO_ADDR
// if x = - 1 then
37536: LD_VAR 0 13
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: EQUAL
37545: IFFALSE 37754
// begin for j in f do
37547: LD_ADDR_VAR 0 9
37551: PUSH
37552: LD_VAR 0 12
37556: PUSH
37557: FOR_IN
37558: IFFALSE 37750
// repeat InitHc ;
37560: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37564: LD_VAR 0 9
37568: PPUSH
37569: CALL_OW 266
37573: PUSH
37574: LD_INT 5
37576: EQUAL
37577: IFFALSE 37647
// begin if UnitsInside ( j ) < 3 then
37579: LD_VAR 0 9
37583: PPUSH
37584: CALL_OW 313
37588: PUSH
37589: LD_INT 3
37591: LESS
37592: IFFALSE 37628
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37594: LD_INT 0
37596: PPUSH
37597: LD_INT 5
37599: PUSH
37600: LD_INT 8
37602: PUSH
37603: LD_INT 9
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: LD_VAR 0 17
37615: ARRAY
37616: PPUSH
37617: LD_VAR 0 4
37621: PPUSH
37622: CALL_OW 380
37626: GO 37645
// PrepareHuman ( false , i , skill ) ;
37628: LD_INT 0
37630: PPUSH
37631: LD_VAR 0 8
37635: PPUSH
37636: LD_VAR 0 4
37640: PPUSH
37641: CALL_OW 380
// end else
37645: GO 37664
// PrepareHuman ( false , i , skill ) ;
37647: LD_INT 0
37649: PPUSH
37650: LD_VAR 0 8
37654: PPUSH
37655: LD_VAR 0 4
37659: PPUSH
37660: CALL_OW 380
// un := CreateHuman ;
37664: LD_ADDR_VAR 0 14
37668: PUSH
37669: CALL_OW 44
37673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37674: LD_ADDR_VAR 0 7
37678: PUSH
37679: LD_VAR 0 7
37683: PPUSH
37684: LD_INT 1
37686: PPUSH
37687: LD_VAR 0 14
37691: PPUSH
37692: CALL_OW 2
37696: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37697: LD_VAR 0 14
37701: PPUSH
37702: LD_VAR 0 9
37706: PPUSH
37707: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37711: LD_VAR 0 9
37715: PPUSH
37716: CALL_OW 313
37720: PUSH
37721: LD_INT 6
37723: EQUAL
37724: PUSH
37725: LD_VAR 0 9
37729: PPUSH
37730: CALL_OW 266
37734: PUSH
37735: LD_INT 32
37737: PUSH
37738: LD_INT 31
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: IN
37745: OR
37746: IFFALSE 37560
37748: GO 37557
37750: POP
37751: POP
// end else
37752: GO 38134
// for j = 1 to x do
37754: LD_ADDR_VAR 0 9
37758: PUSH
37759: DOUBLE
37760: LD_INT 1
37762: DEC
37763: ST_TO_ADDR
37764: LD_VAR 0 13
37768: PUSH
37769: FOR_TO
37770: IFFALSE 38132
// begin InitHc ;
37772: CALL_OW 19
// if not f then
37776: LD_VAR 0 12
37780: NOT
37781: IFFALSE 37870
// begin PrepareHuman ( false , i , skill ) ;
37783: LD_INT 0
37785: PPUSH
37786: LD_VAR 0 8
37790: PPUSH
37791: LD_VAR 0 4
37795: PPUSH
37796: CALL_OW 380
// un := CreateHuman ;
37800: LD_ADDR_VAR 0 14
37804: PUSH
37805: CALL_OW 44
37809: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37810: LD_ADDR_VAR 0 7
37814: PUSH
37815: LD_VAR 0 7
37819: PPUSH
37820: LD_INT 1
37822: PPUSH
37823: LD_VAR 0 14
37827: PPUSH
37828: CALL_OW 2
37832: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37833: LD_VAR 0 14
37837: PPUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 250
37847: PPUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 251
37857: PPUSH
37858: LD_INT 10
37860: PPUSH
37861: LD_INT 0
37863: PPUSH
37864: CALL_OW 50
// continue ;
37868: GO 37769
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37870: LD_VAR 0 12
37874: PUSH
37875: LD_INT 1
37877: ARRAY
37878: PPUSH
37879: CALL_OW 313
37883: PUSH
37884: LD_VAR 0 12
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: CALL_OW 266
37897: PUSH
37898: LD_INT 32
37900: PUSH
37901: LD_INT 31
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: IN
37908: AND
37909: PUSH
37910: LD_VAR 0 12
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PPUSH
37919: CALL_OW 313
37923: PUSH
37924: LD_INT 6
37926: EQUAL
37927: OR
37928: IFFALSE 37948
// f := Delete ( f , 1 ) ;
37930: LD_ADDR_VAR 0 12
37934: PUSH
37935: LD_VAR 0 12
37939: PPUSH
37940: LD_INT 1
37942: PPUSH
37943: CALL_OW 3
37947: ST_TO_ADDR
// if not f then
37948: LD_VAR 0 12
37952: NOT
37953: IFFALSE 37971
// begin x := x + 2 ;
37955: LD_ADDR_VAR 0 13
37959: PUSH
37960: LD_VAR 0 13
37964: PUSH
37965: LD_INT 2
37967: PLUS
37968: ST_TO_ADDR
// continue ;
37969: GO 37769
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37971: LD_VAR 0 12
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: CALL_OW 266
37984: PUSH
37985: LD_INT 5
37987: EQUAL
37988: IFFALSE 38062
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37990: LD_VAR 0 12
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PPUSH
37999: CALL_OW 313
38003: PUSH
38004: LD_INT 3
38006: LESS
38007: IFFALSE 38043
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38009: LD_INT 0
38011: PPUSH
38012: LD_INT 5
38014: PUSH
38015: LD_INT 8
38017: PUSH
38018: LD_INT 9
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: LD_VAR 0 17
38030: ARRAY
38031: PPUSH
38032: LD_VAR 0 4
38036: PPUSH
38037: CALL_OW 380
38041: GO 38060
// PrepareHuman ( false , i , skill ) ;
38043: LD_INT 0
38045: PPUSH
38046: LD_VAR 0 8
38050: PPUSH
38051: LD_VAR 0 4
38055: PPUSH
38056: CALL_OW 380
// end else
38060: GO 38079
// PrepareHuman ( false , i , skill ) ;
38062: LD_INT 0
38064: PPUSH
38065: LD_VAR 0 8
38069: PPUSH
38070: LD_VAR 0 4
38074: PPUSH
38075: CALL_OW 380
// un := CreateHuman ;
38079: LD_ADDR_VAR 0 14
38083: PUSH
38084: CALL_OW 44
38088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38089: LD_ADDR_VAR 0 7
38093: PUSH
38094: LD_VAR 0 7
38098: PPUSH
38099: LD_INT 1
38101: PPUSH
38102: LD_VAR 0 14
38106: PPUSH
38107: CALL_OW 2
38111: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38112: LD_VAR 0 14
38116: PPUSH
38117: LD_VAR 0 12
38121: PUSH
38122: LD_INT 1
38124: ARRAY
38125: PPUSH
38126: CALL_OW 52
// end ;
38130: GO 37769
38132: POP
38133: POP
// end ;
38134: GO 37071
38136: POP
38137: POP
// result := result ^ buildings ;
38138: LD_ADDR_VAR 0 7
38142: PUSH
38143: LD_VAR 0 7
38147: PUSH
38148: LD_VAR 0 18
38152: ADD
38153: ST_TO_ADDR
// end else
38154: GO 38297
// begin for i = 1 to personel do
38156: LD_ADDR_VAR 0 8
38160: PUSH
38161: DOUBLE
38162: LD_INT 1
38164: DEC
38165: ST_TO_ADDR
38166: LD_VAR 0 6
38170: PUSH
38171: FOR_TO
38172: IFFALSE 38295
// begin if i > 4 then
38174: LD_VAR 0 8
38178: PUSH
38179: LD_INT 4
38181: GREATER
38182: IFFALSE 38186
// break ;
38184: GO 38295
// x := personel [ i ] ;
38186: LD_ADDR_VAR 0 13
38190: PUSH
38191: LD_VAR 0 6
38195: PUSH
38196: LD_VAR 0 8
38200: ARRAY
38201: ST_TO_ADDR
// if x = - 1 then
38202: LD_VAR 0 13
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: EQUAL
38211: IFFALSE 38215
// continue ;
38213: GO 38171
// PrepareHuman ( false , i , skill ) ;
38215: LD_INT 0
38217: PPUSH
38218: LD_VAR 0 8
38222: PPUSH
38223: LD_VAR 0 4
38227: PPUSH
38228: CALL_OW 380
// un := CreateHuman ;
38232: LD_ADDR_VAR 0 14
38236: PUSH
38237: CALL_OW 44
38241: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38242: LD_VAR 0 14
38246: PPUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL_OW 250
38256: PPUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL_OW 251
38266: PPUSH
38267: LD_INT 10
38269: PPUSH
38270: LD_INT 0
38272: PPUSH
38273: CALL_OW 50
// result := result ^ un ;
38277: LD_ADDR_VAR 0 7
38281: PUSH
38282: LD_VAR 0 7
38286: PUSH
38287: LD_VAR 0 14
38291: ADD
38292: ST_TO_ADDR
// end ;
38293: GO 38171
38295: POP
38296: POP
// end ; end ;
38297: LD_VAR 0 7
38301: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38302: LD_INT 0
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
// result := false ;
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_INT 0
38327: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38328: LD_VAR 0 1
38332: NOT
38333: PUSH
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL_OW 266
38343: PUSH
38344: LD_INT 32
38346: PUSH
38347: LD_INT 33
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: IN
38354: NOT
38355: OR
38356: IFFALSE 38360
// exit ;
38358: GO 39496
// nat := GetNation ( tower ) ;
38360: LD_ADDR_VAR 0 12
38364: PUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL_OW 248
38374: ST_TO_ADDR
// side := GetSide ( tower ) ;
38375: LD_ADDR_VAR 0 16
38379: PUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 255
38389: ST_TO_ADDR
// x := GetX ( tower ) ;
38390: LD_ADDR_VAR 0 10
38394: PUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 250
38404: ST_TO_ADDR
// y := GetY ( tower ) ;
38405: LD_ADDR_VAR 0 11
38409: PUSH
38410: LD_VAR 0 1
38414: PPUSH
38415: CALL_OW 251
38419: ST_TO_ADDR
// if not x or not y then
38420: LD_VAR 0 10
38424: NOT
38425: PUSH
38426: LD_VAR 0 11
38430: NOT
38431: OR
38432: IFFALSE 38436
// exit ;
38434: GO 39496
// weapon := 0 ;
38436: LD_ADDR_VAR 0 18
38440: PUSH
38441: LD_INT 0
38443: ST_TO_ADDR
// fac_list := [ ] ;
38444: LD_ADDR_VAR 0 17
38448: PUSH
38449: EMPTY
38450: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38451: LD_ADDR_VAR 0 6
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 274
38465: PPUSH
38466: LD_VAR 0 2
38470: PPUSH
38471: CALL 36074 0 2
38475: PPUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PPUSH
38486: CALL_OW 72
38490: ST_TO_ADDR
// if not factories then
38491: LD_VAR 0 6
38495: NOT
38496: IFFALSE 38500
// exit ;
38498: GO 39496
// for i in factories do
38500: LD_ADDR_VAR 0 8
38504: PUSH
38505: LD_VAR 0 6
38509: PUSH
38510: FOR_IN
38511: IFFALSE 38536
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38513: LD_ADDR_VAR 0 17
38517: PUSH
38518: LD_VAR 0 17
38522: PUSH
38523: LD_VAR 0 8
38527: PPUSH
38528: CALL_OW 478
38532: UNION
38533: ST_TO_ADDR
38534: GO 38510
38536: POP
38537: POP
// if not fac_list then
38538: LD_VAR 0 17
38542: NOT
38543: IFFALSE 38547
// exit ;
38545: GO 39496
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38547: LD_ADDR_VAR 0 5
38551: PUSH
38552: LD_INT 4
38554: PUSH
38555: LD_INT 5
38557: PUSH
38558: LD_INT 9
38560: PUSH
38561: LD_INT 10
38563: PUSH
38564: LD_INT 6
38566: PUSH
38567: LD_INT 7
38569: PUSH
38570: LD_INT 11
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 27
38584: PUSH
38585: LD_INT 28
38587: PUSH
38588: LD_INT 26
38590: PUSH
38591: LD_INT 30
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 43
38602: PUSH
38603: LD_INT 44
38605: PUSH
38606: LD_INT 46
38608: PUSH
38609: LD_INT 45
38611: PUSH
38612: LD_INT 47
38614: PUSH
38615: LD_INT 49
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: PUSH
38631: LD_VAR 0 12
38635: ARRAY
38636: ST_TO_ADDR
// for i in list do
38637: LD_ADDR_VAR 0 8
38641: PUSH
38642: LD_VAR 0 5
38646: PUSH
38647: FOR_IN
38648: IFFALSE 38681
// if not i in fac_list then
38650: LD_VAR 0 8
38654: PUSH
38655: LD_VAR 0 17
38659: IN
38660: NOT
38661: IFFALSE 38679
// list := list diff i ;
38663: LD_ADDR_VAR 0 5
38667: PUSH
38668: LD_VAR 0 5
38672: PUSH
38673: LD_VAR 0 8
38677: DIFF
38678: ST_TO_ADDR
38679: GO 38647
38681: POP
38682: POP
// if not list then
38683: LD_VAR 0 5
38687: NOT
38688: IFFALSE 38692
// exit ;
38690: GO 39496
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38692: LD_VAR 0 12
38696: PUSH
38697: LD_INT 3
38699: EQUAL
38700: PUSH
38701: LD_INT 49
38703: PUSH
38704: LD_VAR 0 5
38708: IN
38709: AND
38710: PUSH
38711: LD_INT 31
38713: PPUSH
38714: LD_VAR 0 16
38718: PPUSH
38719: CALL_OW 321
38723: PUSH
38724: LD_INT 2
38726: EQUAL
38727: AND
38728: IFFALSE 38788
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38730: LD_INT 22
38732: PUSH
38733: LD_VAR 0 16
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 35
38744: PUSH
38745: LD_INT 49
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 91
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: LD_INT 10
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: PPUSH
38773: CALL_OW 69
38777: NOT
38778: IFFALSE 38788
// weapon := ru_time_lapser ;
38780: LD_ADDR_VAR 0 18
38784: PUSH
38785: LD_INT 49
38787: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38788: LD_VAR 0 12
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: IN
38803: PUSH
38804: LD_INT 11
38806: PUSH
38807: LD_VAR 0 5
38811: IN
38812: PUSH
38813: LD_INT 30
38815: PUSH
38816: LD_VAR 0 5
38820: IN
38821: OR
38822: AND
38823: PUSH
38824: LD_INT 6
38826: PPUSH
38827: LD_VAR 0 16
38831: PPUSH
38832: CALL_OW 321
38836: PUSH
38837: LD_INT 2
38839: EQUAL
38840: AND
38841: IFFALSE 39006
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38843: LD_INT 22
38845: PUSH
38846: LD_VAR 0 16
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 35
38860: PUSH
38861: LD_INT 11
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 35
38870: PUSH
38871: LD_INT 30
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 91
38885: PUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_INT 18
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PPUSH
38904: CALL_OW 69
38908: NOT
38909: PUSH
38910: LD_INT 22
38912: PUSH
38913: LD_VAR 0 16
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 30
38927: PUSH
38928: LD_INT 32
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 30
38937: PUSH
38938: LD_INT 33
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 91
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 12
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: PPUSH
38974: CALL_OW 69
38978: PUSH
38979: LD_INT 2
38981: GREATER
38982: AND
38983: IFFALSE 39006
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38985: LD_ADDR_VAR 0 18
38989: PUSH
38990: LD_INT 11
38992: PUSH
38993: LD_INT 30
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_VAR 0 12
39004: ARRAY
39005: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39006: LD_VAR 0 18
39010: NOT
39011: PUSH
39012: LD_INT 40
39014: PPUSH
39015: LD_VAR 0 16
39019: PPUSH
39020: CALL_OW 321
39024: PUSH
39025: LD_INT 2
39027: EQUAL
39028: AND
39029: PUSH
39030: LD_INT 7
39032: PUSH
39033: LD_VAR 0 5
39037: IN
39038: PUSH
39039: LD_INT 28
39041: PUSH
39042: LD_VAR 0 5
39046: IN
39047: OR
39048: PUSH
39049: LD_INT 45
39051: PUSH
39052: LD_VAR 0 5
39056: IN
39057: OR
39058: AND
39059: IFFALSE 39313
// begin hex := GetHexInfo ( x , y ) ;
39061: LD_ADDR_VAR 0 4
39065: PUSH
39066: LD_VAR 0 10
39070: PPUSH
39071: LD_VAR 0 11
39075: PPUSH
39076: CALL_OW 546
39080: ST_TO_ADDR
// if hex [ 1 ] then
39081: LD_VAR 0 4
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: IFFALSE 39093
// exit ;
39091: GO 39496
// height := hex [ 2 ] ;
39093: LD_ADDR_VAR 0 15
39097: PUSH
39098: LD_VAR 0 4
39102: PUSH
39103: LD_INT 2
39105: ARRAY
39106: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39107: LD_ADDR_VAR 0 14
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: LD_INT 5
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// for i in tmp do
39130: LD_ADDR_VAR 0 8
39134: PUSH
39135: LD_VAR 0 14
39139: PUSH
39140: FOR_IN
39141: IFFALSE 39311
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39143: LD_ADDR_VAR 0 9
39147: PUSH
39148: LD_VAR 0 10
39152: PPUSH
39153: LD_VAR 0 8
39157: PPUSH
39158: LD_INT 5
39160: PPUSH
39161: CALL_OW 272
39165: PUSH
39166: LD_VAR 0 11
39170: PPUSH
39171: LD_VAR 0 8
39175: PPUSH
39176: LD_INT 5
39178: PPUSH
39179: CALL_OW 273
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39188: LD_VAR 0 9
39192: PUSH
39193: LD_INT 1
39195: ARRAY
39196: PPUSH
39197: LD_VAR 0 9
39201: PUSH
39202: LD_INT 2
39204: ARRAY
39205: PPUSH
39206: CALL_OW 488
39210: IFFALSE 39309
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39212: LD_ADDR_VAR 0 4
39216: PUSH
39217: LD_VAR 0 9
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: PPUSH
39226: LD_VAR 0 9
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: PPUSH
39235: CALL_OW 546
39239: ST_TO_ADDR
// if hex [ 1 ] then
39240: LD_VAR 0 4
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: IFFALSE 39252
// continue ;
39250: GO 39140
// h := hex [ 2 ] ;
39252: LD_ADDR_VAR 0 13
39256: PUSH
39257: LD_VAR 0 4
39261: PUSH
39262: LD_INT 2
39264: ARRAY
39265: ST_TO_ADDR
// if h + 7 < height then
39266: LD_VAR 0 13
39270: PUSH
39271: LD_INT 7
39273: PLUS
39274: PUSH
39275: LD_VAR 0 15
39279: LESS
39280: IFFALSE 39309
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39282: LD_ADDR_VAR 0 18
39286: PUSH
39287: LD_INT 7
39289: PUSH
39290: LD_INT 28
39292: PUSH
39293: LD_INT 45
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: PUSH
39301: LD_VAR 0 12
39305: ARRAY
39306: ST_TO_ADDR
// break ;
39307: GO 39311
// end ; end ; end ;
39309: GO 39140
39311: POP
39312: POP
// end ; if not weapon then
39313: LD_VAR 0 18
39317: NOT
39318: IFFALSE 39378
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 5
39329: PUSH
39330: LD_INT 11
39332: PUSH
39333: LD_INT 30
39335: PUSH
39336: LD_INT 49
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: DIFF
39344: ST_TO_ADDR
// if not list then
39345: LD_VAR 0 5
39349: NOT
39350: IFFALSE 39354
// exit ;
39352: GO 39496
// weapon := list [ rand ( 1 , list ) ] ;
39354: LD_ADDR_VAR 0 18
39358: PUSH
39359: LD_VAR 0 5
39363: PUSH
39364: LD_INT 1
39366: PPUSH
39367: LD_VAR 0 5
39371: PPUSH
39372: CALL_OW 12
39376: ARRAY
39377: ST_TO_ADDR
// end ; if weapon then
39378: LD_VAR 0 18
39382: IFFALSE 39496
// begin tmp := CostOfWeapon ( weapon ) ;
39384: LD_ADDR_VAR 0 14
39388: PUSH
39389: LD_VAR 0 18
39393: PPUSH
39394: CALL_OW 451
39398: ST_TO_ADDR
// j := GetBase ( tower ) ;
39399: LD_ADDR_VAR 0 9
39403: PUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 274
39413: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39414: LD_VAR 0 9
39418: PPUSH
39419: LD_INT 1
39421: PPUSH
39422: CALL_OW 275
39426: PUSH
39427: LD_VAR 0 14
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: GREATEREQUAL
39436: PUSH
39437: LD_VAR 0 9
39441: PPUSH
39442: LD_INT 2
39444: PPUSH
39445: CALL_OW 275
39449: PUSH
39450: LD_VAR 0 14
39454: PUSH
39455: LD_INT 2
39457: ARRAY
39458: GREATEREQUAL
39459: AND
39460: PUSH
39461: LD_VAR 0 9
39465: PPUSH
39466: LD_INT 3
39468: PPUSH
39469: CALL_OW 275
39473: PUSH
39474: LD_VAR 0 14
39478: PUSH
39479: LD_INT 3
39481: ARRAY
39482: GREATEREQUAL
39483: AND
39484: IFFALSE 39496
// result := weapon ;
39486: LD_ADDR_VAR 0 3
39490: PUSH
39491: LD_VAR 0 18
39495: ST_TO_ADDR
// end ; end ;
39496: LD_VAR 0 3
39500: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39501: LD_INT 0
39503: PPUSH
39504: PPUSH
// result := true ;
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: LD_INT 1
39512: ST_TO_ADDR
// if array1 = array2 then
39513: LD_VAR 0 1
39517: PUSH
39518: LD_VAR 0 2
39522: EQUAL
39523: IFFALSE 39583
// begin for i = 1 to array1 do
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: DOUBLE
39531: LD_INT 1
39533: DEC
39534: ST_TO_ADDR
39535: LD_VAR 0 1
39539: PUSH
39540: FOR_TO
39541: IFFALSE 39579
// if array1 [ i ] <> array2 [ i ] then
39543: LD_VAR 0 1
39547: PUSH
39548: LD_VAR 0 4
39552: ARRAY
39553: PUSH
39554: LD_VAR 0 2
39558: PUSH
39559: LD_VAR 0 4
39563: ARRAY
39564: NONEQUAL
39565: IFFALSE 39577
// begin result := false ;
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_INT 0
39574: ST_TO_ADDR
// break ;
39575: GO 39579
// end ;
39577: GO 39540
39579: POP
39580: POP
// end else
39581: GO 39591
// result := false ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_INT 0
39590: ST_TO_ADDR
// end ;
39591: LD_VAR 0 3
39595: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39596: LD_INT 0
39598: PPUSH
39599: PPUSH
39600: PPUSH
// pom := GetBase ( fac ) ;
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 274
39615: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39616: LD_ADDR_VAR 0 4
39620: PUSH
39621: LD_VAR 0 2
39625: PUSH
39626: LD_INT 1
39628: ARRAY
39629: PPUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_INT 2
39637: ARRAY
39638: PPUSH
39639: LD_VAR 0 2
39643: PUSH
39644: LD_INT 3
39646: ARRAY
39647: PPUSH
39648: LD_VAR 0 2
39652: PUSH
39653: LD_INT 4
39655: ARRAY
39656: PPUSH
39657: CALL_OW 449
39661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39662: LD_ADDR_VAR 0 3
39666: PUSH
39667: LD_VAR 0 5
39671: PPUSH
39672: LD_INT 1
39674: PPUSH
39675: CALL_OW 275
39679: PUSH
39680: LD_VAR 0 4
39684: PUSH
39685: LD_INT 1
39687: ARRAY
39688: GREATEREQUAL
39689: PUSH
39690: LD_VAR 0 5
39694: PPUSH
39695: LD_INT 2
39697: PPUSH
39698: CALL_OW 275
39702: PUSH
39703: LD_VAR 0 4
39707: PUSH
39708: LD_INT 2
39710: ARRAY
39711: GREATEREQUAL
39712: AND
39713: PUSH
39714: LD_VAR 0 5
39718: PPUSH
39719: LD_INT 3
39721: PPUSH
39722: CALL_OW 275
39726: PUSH
39727: LD_VAR 0 4
39731: PUSH
39732: LD_INT 3
39734: ARRAY
39735: GREATEREQUAL
39736: AND
39737: ST_TO_ADDR
// end ;
39738: LD_VAR 0 3
39742: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39743: LD_INT 0
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
// pom := GetBase ( building ) ;
39749: LD_ADDR_VAR 0 3
39753: PUSH
39754: LD_VAR 0 1
39758: PPUSH
39759: CALL_OW 274
39763: ST_TO_ADDR
// if not pom then
39764: LD_VAR 0 3
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 39943
// btype := GetBType ( building ) ;
39773: LD_ADDR_VAR 0 5
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 266
39787: ST_TO_ADDR
// if btype = b_armoury then
39788: LD_VAR 0 5
39792: PUSH
39793: LD_INT 4
39795: EQUAL
39796: IFFALSE 39806
// btype := b_barracks ;
39798: LD_ADDR_VAR 0 5
39802: PUSH
39803: LD_INT 5
39805: ST_TO_ADDR
// if btype = b_depot then
39806: LD_VAR 0 5
39810: PUSH
39811: LD_INT 0
39813: EQUAL
39814: IFFALSE 39824
// btype := b_warehouse ;
39816: LD_ADDR_VAR 0 5
39820: PUSH
39821: LD_INT 1
39823: ST_TO_ADDR
// if btype = b_workshop then
39824: LD_VAR 0 5
39828: PUSH
39829: LD_INT 2
39831: EQUAL
39832: IFFALSE 39842
// btype := b_factory ;
39834: LD_ADDR_VAR 0 5
39838: PUSH
39839: LD_INT 3
39841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39842: LD_ADDR_VAR 0 4
39846: PUSH
39847: LD_VAR 0 5
39851: PPUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 248
39861: PPUSH
39862: CALL_OW 450
39866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39867: LD_ADDR_VAR 0 2
39871: PUSH
39872: LD_VAR 0 3
39876: PPUSH
39877: LD_INT 1
39879: PPUSH
39880: CALL_OW 275
39884: PUSH
39885: LD_VAR 0 4
39889: PUSH
39890: LD_INT 1
39892: ARRAY
39893: GREATEREQUAL
39894: PUSH
39895: LD_VAR 0 3
39899: PPUSH
39900: LD_INT 2
39902: PPUSH
39903: CALL_OW 275
39907: PUSH
39908: LD_VAR 0 4
39912: PUSH
39913: LD_INT 2
39915: ARRAY
39916: GREATEREQUAL
39917: AND
39918: PUSH
39919: LD_VAR 0 3
39923: PPUSH
39924: LD_INT 3
39926: PPUSH
39927: CALL_OW 275
39931: PUSH
39932: LD_VAR 0 4
39936: PUSH
39937: LD_INT 3
39939: ARRAY
39940: GREATEREQUAL
39941: AND
39942: ST_TO_ADDR
// end ;
39943: LD_VAR 0 2
39947: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
39952: PPUSH
// pom := GetBase ( building ) ;
39953: LD_ADDR_VAR 0 4
39957: PUSH
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 274
39967: ST_TO_ADDR
// if not pom then
39968: LD_VAR 0 4
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 40078
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39977: LD_ADDR_VAR 0 5
39981: PUSH
39982: LD_VAR 0 2
39986: PPUSH
39987: LD_VAR 0 1
39991: PPUSH
39992: CALL_OW 248
39996: PPUSH
39997: CALL_OW 450
40001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40002: LD_ADDR_VAR 0 3
40006: PUSH
40007: LD_VAR 0 4
40011: PPUSH
40012: LD_INT 1
40014: PPUSH
40015: CALL_OW 275
40019: PUSH
40020: LD_VAR 0 5
40024: PUSH
40025: LD_INT 1
40027: ARRAY
40028: GREATEREQUAL
40029: PUSH
40030: LD_VAR 0 4
40034: PPUSH
40035: LD_INT 2
40037: PPUSH
40038: CALL_OW 275
40042: PUSH
40043: LD_VAR 0 5
40047: PUSH
40048: LD_INT 2
40050: ARRAY
40051: GREATEREQUAL
40052: AND
40053: PUSH
40054: LD_VAR 0 4
40058: PPUSH
40059: LD_INT 3
40061: PPUSH
40062: CALL_OW 275
40066: PUSH
40067: LD_VAR 0 5
40071: PUSH
40072: LD_INT 3
40074: ARRAY
40075: GREATEREQUAL
40076: AND
40077: ST_TO_ADDR
// end ;
40078: LD_VAR 0 3
40082: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40083: LD_INT 0
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
// result := false ;
40095: LD_ADDR_VAR 0 6
40099: PUSH
40100: LD_INT 0
40102: ST_TO_ADDR
// if not base or not btype or not x or not y then
40103: LD_VAR 0 1
40107: NOT
40108: PUSH
40109: LD_VAR 0 2
40113: NOT
40114: OR
40115: PUSH
40116: LD_VAR 0 3
40120: NOT
40121: OR
40122: PUSH
40123: LD_VAR 0 4
40127: NOT
40128: OR
40129: IFFALSE 40133
// exit ;
40131: GO 40742
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40133: LD_ADDR_VAR 0 12
40137: PUSH
40138: LD_VAR 0 2
40142: PPUSH
40143: LD_VAR 0 3
40147: PPUSH
40148: LD_VAR 0 4
40152: PPUSH
40153: LD_VAR 0 5
40157: PPUSH
40158: LD_VAR 0 1
40162: PUSH
40163: LD_INT 1
40165: ARRAY
40166: PPUSH
40167: CALL_OW 248
40171: PPUSH
40172: LD_INT 0
40174: PPUSH
40175: CALL 41579 0 6
40179: ST_TO_ADDR
// if not hexes then
40180: LD_VAR 0 12
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 40742
// for i = 1 to hexes do
40189: LD_ADDR_VAR 0 7
40193: PUSH
40194: DOUBLE
40195: LD_INT 1
40197: DEC
40198: ST_TO_ADDR
40199: LD_VAR 0 12
40203: PUSH
40204: FOR_TO
40205: IFFALSE 40740
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40207: LD_ADDR_VAR 0 11
40211: PUSH
40212: LD_VAR 0 12
40216: PUSH
40217: LD_VAR 0 7
40221: ARRAY
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 12
40231: PUSH
40232: LD_VAR 0 7
40236: ARRAY
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 428
40246: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40247: LD_VAR 0 12
40251: PUSH
40252: LD_VAR 0 7
40256: ARRAY
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 12
40266: PUSH
40267: LD_VAR 0 7
40271: ARRAY
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL_OW 351
40281: PUSH
40282: LD_VAR 0 12
40286: PUSH
40287: LD_VAR 0 7
40291: ARRAY
40292: PUSH
40293: LD_INT 1
40295: ARRAY
40296: PPUSH
40297: LD_VAR 0 12
40301: PUSH
40302: LD_VAR 0 7
40306: ARRAY
40307: PUSH
40308: LD_INT 2
40310: ARRAY
40311: PPUSH
40312: CALL_OW 488
40316: NOT
40317: OR
40318: PUSH
40319: LD_VAR 0 11
40323: PPUSH
40324: CALL_OW 247
40328: PUSH
40329: LD_INT 3
40331: EQUAL
40332: OR
40333: IFFALSE 40339
// exit ;
40335: POP
40336: POP
40337: GO 40742
// if not tmp or not tmp in base then
40339: LD_VAR 0 11
40343: NOT
40344: PUSH
40345: LD_VAR 0 11
40349: PUSH
40350: LD_VAR 0 1
40354: IN
40355: NOT
40356: OR
40357: IFFALSE 40361
// continue ;
40359: GO 40204
// result := true ;
40361: LD_ADDR_VAR 0 6
40365: PUSH
40366: LD_INT 1
40368: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40369: LD_ADDR_VAR 0 15
40373: PUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: LD_INT 22
40381: PUSH
40382: LD_VAR 0 11
40386: PPUSH
40387: CALL_OW 255
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 30
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 30
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PPUSH
40428: CALL_OW 72
40432: ST_TO_ADDR
// if dep then
40433: LD_VAR 0 15
40437: IFFALSE 40573
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40439: LD_ADDR_VAR 0 14
40443: PUSH
40444: LD_VAR 0 15
40448: PUSH
40449: LD_INT 1
40451: ARRAY
40452: PPUSH
40453: CALL_OW 250
40457: PPUSH
40458: LD_VAR 0 15
40462: PUSH
40463: LD_INT 1
40465: ARRAY
40466: PPUSH
40467: CALL_OW 254
40471: PPUSH
40472: LD_INT 5
40474: PPUSH
40475: CALL_OW 272
40479: PUSH
40480: LD_VAR 0 15
40484: PUSH
40485: LD_INT 1
40487: ARRAY
40488: PPUSH
40489: CALL_OW 251
40493: PPUSH
40494: LD_VAR 0 15
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: PPUSH
40503: CALL_OW 254
40507: PPUSH
40508: LD_INT 5
40510: PPUSH
40511: CALL_OW 273
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40520: LD_VAR 0 14
40524: PUSH
40525: LD_INT 1
40527: ARRAY
40528: PPUSH
40529: LD_VAR 0 14
40533: PUSH
40534: LD_INT 2
40536: ARRAY
40537: PPUSH
40538: CALL_OW 488
40542: IFFALSE 40573
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40544: LD_VAR 0 11
40548: PPUSH
40549: LD_VAR 0 14
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: PPUSH
40558: LD_VAR 0 14
40562: PUSH
40563: LD_INT 2
40565: ARRAY
40566: PPUSH
40567: CALL_OW 111
// continue ;
40571: GO 40204
// end ; end ; r := GetDir ( tmp ) ;
40573: LD_ADDR_VAR 0 13
40577: PUSH
40578: LD_VAR 0 11
40582: PPUSH
40583: CALL_OW 254
40587: ST_TO_ADDR
// if r = 5 then
40588: LD_VAR 0 13
40592: PUSH
40593: LD_INT 5
40595: EQUAL
40596: IFFALSE 40606
// r := 0 ;
40598: LD_ADDR_VAR 0 13
40602: PUSH
40603: LD_INT 0
40605: ST_TO_ADDR
// for j = r to 5 do
40606: LD_ADDR_VAR 0 8
40610: PUSH
40611: DOUBLE
40612: LD_VAR 0 13
40616: DEC
40617: ST_TO_ADDR
40618: LD_INT 5
40620: PUSH
40621: FOR_TO
40622: IFFALSE 40736
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40624: LD_ADDR_VAR 0 9
40628: PUSH
40629: LD_VAR 0 11
40633: PPUSH
40634: CALL_OW 250
40638: PPUSH
40639: LD_VAR 0 8
40643: PPUSH
40644: LD_INT 2
40646: PPUSH
40647: CALL_OW 272
40651: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40652: LD_ADDR_VAR 0 10
40656: PUSH
40657: LD_VAR 0 11
40661: PPUSH
40662: CALL_OW 251
40666: PPUSH
40667: LD_VAR 0 8
40671: PPUSH
40672: LD_INT 2
40674: PPUSH
40675: CALL_OW 273
40679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40680: LD_VAR 0 9
40684: PPUSH
40685: LD_VAR 0 10
40689: PPUSH
40690: CALL_OW 488
40694: PUSH
40695: LD_VAR 0 9
40699: PPUSH
40700: LD_VAR 0 10
40704: PPUSH
40705: CALL_OW 428
40709: NOT
40710: AND
40711: IFFALSE 40734
// begin ComMoveXY ( tmp , _x , _y ) ;
40713: LD_VAR 0 11
40717: PPUSH
40718: LD_VAR 0 9
40722: PPUSH
40723: LD_VAR 0 10
40727: PPUSH
40728: CALL_OW 111
// break ;
40732: GO 40736
// end ; end ;
40734: GO 40621
40736: POP
40737: POP
// end ;
40738: GO 40204
40740: POP
40741: POP
// end ;
40742: LD_VAR 0 6
40746: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40747: LD_INT 0
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
// result := false ;
40759: LD_ADDR_VAR 0 6
40763: PUSH
40764: LD_INT 0
40766: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40767: LD_VAR 0 1
40771: NOT
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 266
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: IN
40793: NOT
40794: OR
40795: PUSH
40796: LD_VAR 0 2
40800: NOT
40801: OR
40802: PUSH
40803: LD_VAR 0 5
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: LD_INT 3
40819: PUSH
40820: LD_INT 4
40822: PUSH
40823: LD_INT 5
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: IN
40834: NOT
40835: OR
40836: PUSH
40837: LD_VAR 0 3
40841: PPUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: CALL_OW 488
40851: NOT
40852: OR
40853: IFFALSE 40857
// exit ;
40855: GO 41574
// pom := GetBase ( depot ) ;
40857: LD_ADDR_VAR 0 10
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 274
40871: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40872: LD_ADDR_VAR 0 11
40876: PUSH
40877: LD_VAR 0 2
40881: PPUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 248
40891: PPUSH
40892: CALL_OW 450
40896: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40897: LD_VAR 0 10
40901: PPUSH
40902: LD_INT 1
40904: PPUSH
40905: CALL_OW 275
40909: PUSH
40910: LD_VAR 0 11
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: GREATEREQUAL
40919: PUSH
40920: LD_VAR 0 10
40924: PPUSH
40925: LD_INT 2
40927: PPUSH
40928: CALL_OW 275
40932: PUSH
40933: LD_VAR 0 11
40937: PUSH
40938: LD_INT 2
40940: ARRAY
40941: GREATEREQUAL
40942: AND
40943: PUSH
40944: LD_VAR 0 10
40948: PPUSH
40949: LD_INT 3
40951: PPUSH
40952: CALL_OW 275
40956: PUSH
40957: LD_VAR 0 11
40961: PUSH
40962: LD_INT 3
40964: ARRAY
40965: GREATEREQUAL
40966: AND
40967: NOT
40968: IFFALSE 40972
// exit ;
40970: GO 41574
// if GetBType ( depot ) = b_depot then
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 266
40981: PUSH
40982: LD_INT 0
40984: EQUAL
40985: IFFALSE 40997
// dist := 28 else
40987: LD_ADDR_VAR 0 14
40991: PUSH
40992: LD_INT 28
40994: ST_TO_ADDR
40995: GO 41005
// dist := 36 ;
40997: LD_ADDR_VAR 0 14
41001: PUSH
41002: LD_INT 36
41004: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41005: LD_VAR 0 1
41009: PPUSH
41010: LD_VAR 0 3
41014: PPUSH
41015: LD_VAR 0 4
41019: PPUSH
41020: CALL_OW 297
41024: PUSH
41025: LD_VAR 0 14
41029: GREATER
41030: IFFALSE 41034
// exit ;
41032: GO 41574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41034: LD_ADDR_VAR 0 12
41038: PUSH
41039: LD_VAR 0 2
41043: PPUSH
41044: LD_VAR 0 3
41048: PPUSH
41049: LD_VAR 0 4
41053: PPUSH
41054: LD_VAR 0 5
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: CALL_OW 248
41068: PPUSH
41069: LD_INT 0
41071: PPUSH
41072: CALL 41579 0 6
41076: ST_TO_ADDR
// if not hexes then
41077: LD_VAR 0 12
41081: NOT
41082: IFFALSE 41086
// exit ;
41084: GO 41574
// hex := GetHexInfo ( x , y ) ;
41086: LD_ADDR_VAR 0 15
41090: PUSH
41091: LD_VAR 0 3
41095: PPUSH
41096: LD_VAR 0 4
41100: PPUSH
41101: CALL_OW 546
41105: ST_TO_ADDR
// if hex [ 1 ] then
41106: LD_VAR 0 15
41110: PUSH
41111: LD_INT 1
41113: ARRAY
41114: IFFALSE 41118
// exit ;
41116: GO 41574
// height := hex [ 2 ] ;
41118: LD_ADDR_VAR 0 13
41122: PUSH
41123: LD_VAR 0 15
41127: PUSH
41128: LD_INT 2
41130: ARRAY
41131: ST_TO_ADDR
// for i = 1 to hexes do
41132: LD_ADDR_VAR 0 7
41136: PUSH
41137: DOUBLE
41138: LD_INT 1
41140: DEC
41141: ST_TO_ADDR
41142: LD_VAR 0 12
41146: PUSH
41147: FOR_TO
41148: IFFALSE 41478
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41150: LD_VAR 0 12
41154: PUSH
41155: LD_VAR 0 7
41159: ARRAY
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: LD_VAR 0 12
41169: PUSH
41170: LD_VAR 0 7
41174: ARRAY
41175: PUSH
41176: LD_INT 2
41178: ARRAY
41179: PPUSH
41180: CALL_OW 488
41184: NOT
41185: PUSH
41186: LD_VAR 0 12
41190: PUSH
41191: LD_VAR 0 7
41195: ARRAY
41196: PUSH
41197: LD_INT 1
41199: ARRAY
41200: PPUSH
41201: LD_VAR 0 12
41205: PUSH
41206: LD_VAR 0 7
41210: ARRAY
41211: PUSH
41212: LD_INT 2
41214: ARRAY
41215: PPUSH
41216: CALL_OW 428
41220: PUSH
41221: LD_INT 0
41223: GREATER
41224: OR
41225: PUSH
41226: LD_VAR 0 12
41230: PUSH
41231: LD_VAR 0 7
41235: ARRAY
41236: PUSH
41237: LD_INT 1
41239: ARRAY
41240: PPUSH
41241: LD_VAR 0 12
41245: PUSH
41246: LD_VAR 0 7
41250: ARRAY
41251: PUSH
41252: LD_INT 2
41254: ARRAY
41255: PPUSH
41256: CALL_OW 351
41260: OR
41261: IFFALSE 41267
// exit ;
41263: POP
41264: POP
41265: GO 41574
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41267: LD_ADDR_VAR 0 8
41271: PUSH
41272: LD_VAR 0 12
41276: PUSH
41277: LD_VAR 0 7
41281: ARRAY
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: LD_VAR 0 12
41291: PUSH
41292: LD_VAR 0 7
41296: ARRAY
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: PPUSH
41302: CALL_OW 546
41306: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41307: LD_VAR 0 8
41311: PUSH
41312: LD_INT 1
41314: ARRAY
41315: PUSH
41316: LD_VAR 0 8
41320: PUSH
41321: LD_INT 2
41323: ARRAY
41324: PUSH
41325: LD_VAR 0 13
41329: PUSH
41330: LD_INT 2
41332: PLUS
41333: GREATER
41334: OR
41335: PUSH
41336: LD_VAR 0 8
41340: PUSH
41341: LD_INT 2
41343: ARRAY
41344: PUSH
41345: LD_VAR 0 13
41349: PUSH
41350: LD_INT 2
41352: MINUS
41353: LESS
41354: OR
41355: PUSH
41356: LD_VAR 0 8
41360: PUSH
41361: LD_INT 3
41363: ARRAY
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 8
41370: PUSH
41371: LD_INT 9
41373: PUSH
41374: LD_INT 10
41376: PUSH
41377: LD_INT 11
41379: PUSH
41380: LD_INT 12
41382: PUSH
41383: LD_INT 13
41385: PUSH
41386: LD_INT 16
41388: PUSH
41389: LD_INT 17
41391: PUSH
41392: LD_INT 18
41394: PUSH
41395: LD_INT 19
41397: PUSH
41398: LD_INT 20
41400: PUSH
41401: LD_INT 21
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: IN
41419: NOT
41420: OR
41421: PUSH
41422: LD_VAR 0 8
41426: PUSH
41427: LD_INT 5
41429: ARRAY
41430: NOT
41431: OR
41432: PUSH
41433: LD_VAR 0 8
41437: PUSH
41438: LD_INT 6
41440: ARRAY
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 7
41450: PUSH
41451: LD_INT 9
41453: PUSH
41454: LD_INT 10
41456: PUSH
41457: LD_INT 11
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: IN
41468: NOT
41469: OR
41470: IFFALSE 41476
// exit ;
41472: POP
41473: POP
41474: GO 41574
// end ;
41476: GO 41147
41478: POP
41479: POP
// side := GetSide ( depot ) ;
41480: LD_ADDR_VAR 0 9
41484: PUSH
41485: LD_VAR 0 1
41489: PPUSH
41490: CALL_OW 255
41494: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41495: LD_VAR 0 9
41499: PPUSH
41500: LD_VAR 0 3
41504: PPUSH
41505: LD_VAR 0 4
41509: PPUSH
41510: LD_INT 20
41512: PPUSH
41513: CALL 34228 0 4
41517: PUSH
41518: LD_INT 4
41520: ARRAY
41521: IFFALSE 41525
// exit ;
41523: GO 41574
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41525: LD_VAR 0 2
41529: PUSH
41530: LD_INT 29
41532: PUSH
41533: LD_INT 30
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: IN
41540: PUSH
41541: LD_VAR 0 3
41545: PPUSH
41546: LD_VAR 0 4
41550: PPUSH
41551: LD_VAR 0 9
41555: PPUSH
41556: CALL_OW 440
41560: NOT
41561: AND
41562: IFFALSE 41566
// exit ;
41564: GO 41574
// result := true ;
41566: LD_ADDR_VAR 0 6
41570: PUSH
41571: LD_INT 1
41573: ST_TO_ADDR
// end ;
41574: LD_VAR 0 6
41578: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41579: LD_INT 0
41581: PPUSH
41582: PPUSH
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
// result = [ ] ;
41639: LD_ADDR_VAR 0 7
41643: PUSH
41644: EMPTY
41645: ST_TO_ADDR
// temp_list = [ ] ;
41646: LD_ADDR_VAR 0 9
41650: PUSH
41651: EMPTY
41652: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41653: LD_VAR 0 4
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 3
41669: PUSH
41670: LD_INT 4
41672: PUSH
41673: LD_INT 5
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: IN
41684: NOT
41685: PUSH
41686: LD_VAR 0 1
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: IN
41701: PUSH
41702: LD_VAR 0 5
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: IN
41721: NOT
41722: AND
41723: OR
41724: IFFALSE 41728
// exit ;
41726: GO 60119
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41728: LD_VAR 0 1
41732: PUSH
41733: LD_INT 6
41735: PUSH
41736: LD_INT 7
41738: PUSH
41739: LD_INT 8
41741: PUSH
41742: LD_INT 13
41744: PUSH
41745: LD_INT 12
41747: PUSH
41748: LD_INT 15
41750: PUSH
41751: LD_INT 11
41753: PUSH
41754: LD_INT 14
41756: PUSH
41757: LD_INT 10
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: IN
41771: IFFALSE 41781
// btype = b_lab ;
41773: LD_ADDR_VAR 0 1
41777: PUSH
41778: LD_INT 6
41780: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41781: LD_VAR 0 6
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: IN
41800: NOT
41801: PUSH
41802: LD_VAR 0 1
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: LD_INT 6
41821: PUSH
41822: LD_INT 36
41824: PUSH
41825: LD_INT 4
41827: PUSH
41828: LD_INT 5
41830: PUSH
41831: LD_INT 31
41833: PUSH
41834: LD_INT 32
41836: PUSH
41837: LD_INT 33
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: IN
41853: NOT
41854: PUSH
41855: LD_VAR 0 6
41859: PUSH
41860: LD_INT 1
41862: EQUAL
41863: AND
41864: OR
41865: PUSH
41866: LD_VAR 0 1
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: IN
41881: NOT
41882: PUSH
41883: LD_VAR 0 6
41887: PUSH
41888: LD_INT 2
41890: EQUAL
41891: AND
41892: OR
41893: IFFALSE 41903
// mode = 0 ;
41895: LD_ADDR_VAR 0 6
41899: PUSH
41900: LD_INT 0
41902: ST_TO_ADDR
// case mode of 0 :
41903: LD_VAR 0 6
41907: PUSH
41908: LD_INT 0
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 53369
41916: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41917: LD_ADDR_VAR 0 11
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42110: LD_ADDR_VAR 0 12
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 3
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42306: LD_ADDR_VAR 0 13
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 3
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 3
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: NEG
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42505: LD_ADDR_VAR 0 14
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 3
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 3
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42701: LD_ADDR_VAR 0 15
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42894: LD_ADDR_VAR 0 16
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43087: LD_ADDR_VAR 0 17
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43317: LD_ADDR_VAR 0 18
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43547: LD_ADDR_VAR 0 19
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43777: LD_ADDR_VAR 0 20
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44007: LD_ADDR_VAR 0 21
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44237: LD_ADDR_VAR 0 22
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44467: LD_ADDR_VAR 0 23
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 3
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44747: LD_ADDR_VAR 0 24
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45023: LD_ADDR_VAR 0 25
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 3
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45297: LD_ADDR_VAR 0 26
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45573: LD_ADDR_VAR 0 27
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45853: LD_ADDR_VAR 0 28
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46135: LD_ADDR_VAR 0 29
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46414: LD_ADDR_VAR 0 30
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 3
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46692: LD_ADDR_VAR 0 31
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 3
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46970: LD_ADDR_VAR 0 32
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47248: LD_ADDR_VAR 0 33
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47527: LD_ADDR_VAR 0 34
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47807: LD_ADDR_VAR 0 35
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47919: LD_ADDR_VAR 0 36
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48031: LD_ADDR_VAR 0 37
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48143: LD_ADDR_VAR 0 38
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48255: LD_ADDR_VAR 0 39
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48367: LD_ADDR_VAR 0 40
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48479: LD_ADDR_VAR 0 41
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: NEG
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48829: LD_ADDR_VAR 0 42
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 3
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49179: LD_ADDR_VAR 0 43
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 3
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49527: LD_ADDR_VAR 0 44
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49877: LD_ADDR_VAR 0 45
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50227: LD_ADDR_VAR 0 46
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 3
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50575: LD_ADDR_VAR 0 47
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50726: LD_ADDR_VAR 0 48
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50873: LD_ADDR_VAR 0 49
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51017: LD_ADDR_VAR 0 50
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51161: LD_ADDR_VAR 0 51
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51308: LD_ADDR_VAR 0 52
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51459: LD_ADDR_VAR 0 53
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51689: LD_ADDR_VAR 0 54
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51919: LD_ADDR_VAR 0 55
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52149: LD_ADDR_VAR 0 56
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52379: LD_ADDR_VAR 0 57
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52609: LD_ADDR_VAR 0 58
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52839: LD_ADDR_VAR 0 59
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52927: LD_ADDR_VAR 0 60
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53015: LD_ADDR_VAR 0 61
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53103: LD_ADDR_VAR 0 62
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53191: LD_ADDR_VAR 0 63
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53279: LD_ADDR_VAR 0 64
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// end ; 1 :
53367: GO 59264
53369: LD_INT 1
53371: DOUBLE
53372: EQUAL
53373: IFTRUE 53377
53375: GO 56000
53377: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53378: LD_ADDR_VAR 0 11
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53422: LD_ADDR_VAR 0 12
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53463: LD_ADDR_VAR 0 13
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53503: LD_ADDR_VAR 0 14
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53544: LD_ADDR_VAR 0 15
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53588: LD_ADDR_VAR 0 16
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53634: LD_ADDR_VAR 0 17
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53678: LD_ADDR_VAR 0 18
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53719: LD_ADDR_VAR 0 19
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: LIST
53758: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53759: LD_ADDR_VAR 0 20
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53800: LD_ADDR_VAR 0 21
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53844: LD_ADDR_VAR 0 22
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 3
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53890: LD_ADDR_VAR 0 23
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 4
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53934: LD_ADDR_VAR 0 24
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53975: LD_ADDR_VAR 0 25
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54015: LD_ADDR_VAR 0 26
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 4
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54056: LD_ADDR_VAR 0 27
54060: PUSH
54061: LD_INT 3
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54100: LD_ADDR_VAR 0 28
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 4
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54146: LD_ADDR_VAR 0 29
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 4
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 4
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 5
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 5
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 4
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 6
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 6
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 5
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54301: LD_ADDR_VAR 0 30
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 4
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 4
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 5
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 5
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 5
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 6
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 6
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54444: LD_ADDR_VAR 0 31
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 4
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 6
54541: PUSH
54542: LD_INT 5
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 6
54551: PUSH
54552: LD_INT 6
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 5
54561: PUSH
54562: LD_INT 6
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54583: LD_ADDR_VAR 0 32
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 5
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 6
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 6
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 5
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54726: LD_ADDR_VAR 0 33
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 4
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 5
54812: NEG
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 6
54846: NEG
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 6
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54881: LD_ADDR_VAR 0 34
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 4
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 4
54948: NEG
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: LD_INT 5
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 5
54972: NEG
54973: PUSH
54974: LD_INT 4
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: NEG
54985: PUSH
54986: LD_INT 5
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 5
54996: NEG
54997: PUSH
54998: LD_INT 6
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 6
55008: NEG
55009: PUSH
55010: LD_INT 5
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 6
55020: NEG
55021: PUSH
55022: LD_INT 6
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55044: LD_ADDR_VAR 0 41
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55088: LD_ADDR_VAR 0 42
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55129: LD_ADDR_VAR 0 43
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55169: LD_ADDR_VAR 0 44
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55210: LD_ADDR_VAR 0 45
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55254: LD_ADDR_VAR 0 46
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55300: LD_ADDR_VAR 0 47
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55333: LD_ADDR_VAR 0 48
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55364: LD_ADDR_VAR 0 49
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55393: LD_ADDR_VAR 0 50
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55422: LD_ADDR_VAR 0 51
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55453: LD_ADDR_VAR 0 52
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55486: LD_ADDR_VAR 0 53
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 3
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55530: LD_ADDR_VAR 0 54
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55571: LD_ADDR_VAR 0 55
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55611: LD_ADDR_VAR 0 56
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55652: LD_ADDR_VAR 0 57
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55696: LD_ADDR_VAR 0 58
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 3
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: NEG
55728: PUSH
55729: LD_INT 3
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55742: LD_ADDR_VAR 0 59
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55786: LD_ADDR_VAR 0 60
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55827: LD_ADDR_VAR 0 61
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55867: LD_ADDR_VAR 0 62
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55908: LD_ADDR_VAR 0 63
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55952: LD_ADDR_VAR 0 64
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// end ; 2 :
55998: GO 59264
56000: LD_INT 2
56002: DOUBLE
56003: EQUAL
56004: IFTRUE 56008
56006: GO 59263
56008: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56009: LD_ADDR_VAR 0 29
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 5
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 5
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 4
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 5
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 3
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 4
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 4
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 4
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 4
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 5
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 5
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 4
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 4
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 4
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 4
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 4
56394: NEG
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: NEG
56407: PUSH
56408: LD_INT 5
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: NEG
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: LD_INT 5
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 5
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 5
56490: NEG
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56547: LD_ADDR_VAR 0 30
56551: PUSH
56552: LD_INT 4
56554: PUSH
56555: LD_INT 4
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 4
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 5
56574: PUSH
56575: LD_INT 4
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 5
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: LD_INT 5
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: LD_INT 5
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 4
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 4
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 5
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 5
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 5
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: LD_INT 4
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: NEG
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 5
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 4
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 5
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 5
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57094: LD_ADDR_VAR 0 31
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 4
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 5
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: NEG
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: NEG
57297: PUSH
57298: LD_INT 4
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: LD_INT 5
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 5
57356: NEG
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 5
57368: NEG
57369: PUSH
57370: LD_INT 5
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 5
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 4
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 4
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 5
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57644: LD_ADDR_VAR 0 32
57648: PUSH
57649: LD_INT 4
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 5
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 4
57825: NEG
57826: PUSH
57827: LD_INT 4
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: NEG
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 5
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 5
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 5
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 5
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 4
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 5
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 5
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58191: LD_ADDR_VAR 0 33
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: LD_INT 4
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: LD_INT 5
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: NEG
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 5
58270: NEG
58271: PUSH
58272: LD_INT 5
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 5
58294: NEG
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 4
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 4
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 5
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 5
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 4
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 4
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 5
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58729: LD_ADDR_VAR 0 34
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 4
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 5
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 4
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 5
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 5
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 4
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 5
58951: PUSH
58952: LD_INT 4
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 5
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 4
58971: PUSH
58972: LD_INT 5
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: LD_INT 4
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 5
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 4
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 4
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 4
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 5
59170: NEG
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 5
59181: NEG
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 5
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// end ; end ;
59261: GO 59264
59263: POP
// case btype of b_depot , b_warehouse :
59264: LD_VAR 0 1
59268: PUSH
59269: LD_INT 0
59271: DOUBLE
59272: EQUAL
59273: IFTRUE 59283
59275: LD_INT 1
59277: DOUBLE
59278: EQUAL
59279: IFTRUE 59283
59281: GO 59484
59283: POP
// case nation of nation_american :
59284: LD_VAR 0 5
59288: PUSH
59289: LD_INT 1
59291: DOUBLE
59292: EQUAL
59293: IFTRUE 59297
59295: GO 59353
59297: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59298: LD_ADDR_VAR 0 9
59302: PUSH
59303: LD_VAR 0 11
59307: PUSH
59308: LD_VAR 0 12
59312: PUSH
59313: LD_VAR 0 13
59317: PUSH
59318: LD_VAR 0 14
59322: PUSH
59323: LD_VAR 0 15
59327: PUSH
59328: LD_VAR 0 16
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: PUSH
59341: LD_VAR 0 4
59345: PUSH
59346: LD_INT 1
59348: PLUS
59349: ARRAY
59350: ST_TO_ADDR
59351: GO 59482
59353: LD_INT 2
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59361
59359: GO 59417
59361: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59362: LD_ADDR_VAR 0 9
59366: PUSH
59367: LD_VAR 0 17
59371: PUSH
59372: LD_VAR 0 18
59376: PUSH
59377: LD_VAR 0 19
59381: PUSH
59382: LD_VAR 0 20
59386: PUSH
59387: LD_VAR 0 21
59391: PUSH
59392: LD_VAR 0 22
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: PUSH
59405: LD_VAR 0 4
59409: PUSH
59410: LD_INT 1
59412: PLUS
59413: ARRAY
59414: ST_TO_ADDR
59415: GO 59482
59417: LD_INT 3
59419: DOUBLE
59420: EQUAL
59421: IFTRUE 59425
59423: GO 59481
59425: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59426: LD_ADDR_VAR 0 9
59430: PUSH
59431: LD_VAR 0 23
59435: PUSH
59436: LD_VAR 0 24
59440: PUSH
59441: LD_VAR 0 25
59445: PUSH
59446: LD_VAR 0 26
59450: PUSH
59451: LD_VAR 0 27
59455: PUSH
59456: LD_VAR 0 28
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: PUSH
59469: LD_VAR 0 4
59473: PUSH
59474: LD_INT 1
59476: PLUS
59477: ARRAY
59478: ST_TO_ADDR
59479: GO 59482
59481: POP
59482: GO 60037
59484: LD_INT 2
59486: DOUBLE
59487: EQUAL
59488: IFTRUE 59498
59490: LD_INT 3
59492: DOUBLE
59493: EQUAL
59494: IFTRUE 59498
59496: GO 59554
59498: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59499: LD_ADDR_VAR 0 9
59503: PUSH
59504: LD_VAR 0 29
59508: PUSH
59509: LD_VAR 0 30
59513: PUSH
59514: LD_VAR 0 31
59518: PUSH
59519: LD_VAR 0 32
59523: PUSH
59524: LD_VAR 0 33
59528: PUSH
59529: LD_VAR 0 34
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: PUSH
59542: LD_VAR 0 4
59546: PUSH
59547: LD_INT 1
59549: PLUS
59550: ARRAY
59551: ST_TO_ADDR
59552: GO 60037
59554: LD_INT 16
59556: DOUBLE
59557: EQUAL
59558: IFTRUE 59616
59560: LD_INT 17
59562: DOUBLE
59563: EQUAL
59564: IFTRUE 59616
59566: LD_INT 18
59568: DOUBLE
59569: EQUAL
59570: IFTRUE 59616
59572: LD_INT 19
59574: DOUBLE
59575: EQUAL
59576: IFTRUE 59616
59578: LD_INT 22
59580: DOUBLE
59581: EQUAL
59582: IFTRUE 59616
59584: LD_INT 20
59586: DOUBLE
59587: EQUAL
59588: IFTRUE 59616
59590: LD_INT 21
59592: DOUBLE
59593: EQUAL
59594: IFTRUE 59616
59596: LD_INT 23
59598: DOUBLE
59599: EQUAL
59600: IFTRUE 59616
59602: LD_INT 24
59604: DOUBLE
59605: EQUAL
59606: IFTRUE 59616
59608: LD_INT 25
59610: DOUBLE
59611: EQUAL
59612: IFTRUE 59616
59614: GO 59672
59616: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59617: LD_ADDR_VAR 0 9
59621: PUSH
59622: LD_VAR 0 35
59626: PUSH
59627: LD_VAR 0 36
59631: PUSH
59632: LD_VAR 0 37
59636: PUSH
59637: LD_VAR 0 38
59641: PUSH
59642: LD_VAR 0 39
59646: PUSH
59647: LD_VAR 0 40
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: PUSH
59660: LD_VAR 0 4
59664: PUSH
59665: LD_INT 1
59667: PLUS
59668: ARRAY
59669: ST_TO_ADDR
59670: GO 60037
59672: LD_INT 6
59674: DOUBLE
59675: EQUAL
59676: IFTRUE 59728
59678: LD_INT 7
59680: DOUBLE
59681: EQUAL
59682: IFTRUE 59728
59684: LD_INT 8
59686: DOUBLE
59687: EQUAL
59688: IFTRUE 59728
59690: LD_INT 13
59692: DOUBLE
59693: EQUAL
59694: IFTRUE 59728
59696: LD_INT 12
59698: DOUBLE
59699: EQUAL
59700: IFTRUE 59728
59702: LD_INT 15
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59728
59708: LD_INT 11
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59728
59714: LD_INT 14
59716: DOUBLE
59717: EQUAL
59718: IFTRUE 59728
59720: LD_INT 10
59722: DOUBLE
59723: EQUAL
59724: IFTRUE 59728
59726: GO 59784
59728: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59729: LD_ADDR_VAR 0 9
59733: PUSH
59734: LD_VAR 0 41
59738: PUSH
59739: LD_VAR 0 42
59743: PUSH
59744: LD_VAR 0 43
59748: PUSH
59749: LD_VAR 0 44
59753: PUSH
59754: LD_VAR 0 45
59758: PUSH
59759: LD_VAR 0 46
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: PUSH
59772: LD_VAR 0 4
59776: PUSH
59777: LD_INT 1
59779: PLUS
59780: ARRAY
59781: ST_TO_ADDR
59782: GO 60037
59784: LD_INT 36
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59792
59790: GO 59848
59792: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59793: LD_ADDR_VAR 0 9
59797: PUSH
59798: LD_VAR 0 47
59802: PUSH
59803: LD_VAR 0 48
59807: PUSH
59808: LD_VAR 0 49
59812: PUSH
59813: LD_VAR 0 50
59817: PUSH
59818: LD_VAR 0 51
59822: PUSH
59823: LD_VAR 0 52
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: PUSH
59836: LD_VAR 0 4
59840: PUSH
59841: LD_INT 1
59843: PLUS
59844: ARRAY
59845: ST_TO_ADDR
59846: GO 60037
59848: LD_INT 4
59850: DOUBLE
59851: EQUAL
59852: IFTRUE 59874
59854: LD_INT 5
59856: DOUBLE
59857: EQUAL
59858: IFTRUE 59874
59860: LD_INT 34
59862: DOUBLE
59863: EQUAL
59864: IFTRUE 59874
59866: LD_INT 37
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59874
59872: GO 59930
59874: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59875: LD_ADDR_VAR 0 9
59879: PUSH
59880: LD_VAR 0 53
59884: PUSH
59885: LD_VAR 0 54
59889: PUSH
59890: LD_VAR 0 55
59894: PUSH
59895: LD_VAR 0 56
59899: PUSH
59900: LD_VAR 0 57
59904: PUSH
59905: LD_VAR 0 58
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_VAR 0 4
59922: PUSH
59923: LD_INT 1
59925: PLUS
59926: ARRAY
59927: ST_TO_ADDR
59928: GO 60037
59930: LD_INT 31
59932: DOUBLE
59933: EQUAL
59934: IFTRUE 59980
59936: LD_INT 32
59938: DOUBLE
59939: EQUAL
59940: IFTRUE 59980
59942: LD_INT 33
59944: DOUBLE
59945: EQUAL
59946: IFTRUE 59980
59948: LD_INT 27
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59980
59954: LD_INT 26
59956: DOUBLE
59957: EQUAL
59958: IFTRUE 59980
59960: LD_INT 28
59962: DOUBLE
59963: EQUAL
59964: IFTRUE 59980
59966: LD_INT 29
59968: DOUBLE
59969: EQUAL
59970: IFTRUE 59980
59972: LD_INT 30
59974: DOUBLE
59975: EQUAL
59976: IFTRUE 59980
59978: GO 60036
59980: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59981: LD_ADDR_VAR 0 9
59985: PUSH
59986: LD_VAR 0 59
59990: PUSH
59991: LD_VAR 0 60
59995: PUSH
59996: LD_VAR 0 61
60000: PUSH
60001: LD_VAR 0 62
60005: PUSH
60006: LD_VAR 0 63
60010: PUSH
60011: LD_VAR 0 64
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: PUSH
60024: LD_VAR 0 4
60028: PUSH
60029: LD_INT 1
60031: PLUS
60032: ARRAY
60033: ST_TO_ADDR
60034: GO 60037
60036: POP
// temp_list2 = [ ] ;
60037: LD_ADDR_VAR 0 10
60041: PUSH
60042: EMPTY
60043: ST_TO_ADDR
// for i in temp_list do
60044: LD_ADDR_VAR 0 8
60048: PUSH
60049: LD_VAR 0 9
60053: PUSH
60054: FOR_IN
60055: IFFALSE 60107
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60057: LD_ADDR_VAR 0 10
60061: PUSH
60062: LD_VAR 0 10
60066: PUSH
60067: LD_VAR 0 8
60071: PUSH
60072: LD_INT 1
60074: ARRAY
60075: PUSH
60076: LD_VAR 0 2
60080: PLUS
60081: PUSH
60082: LD_VAR 0 8
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: PUSH
60091: LD_VAR 0 3
60095: PLUS
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: ADD
60104: ST_TO_ADDR
60105: GO 60054
60107: POP
60108: POP
// result = temp_list2 ;
60109: LD_ADDR_VAR 0 7
60113: PUSH
60114: LD_VAR 0 10
60118: ST_TO_ADDR
// end ;
60119: LD_VAR 0 7
60123: RET
// export function EnemyInRange ( unit , dist ) ; begin
60124: LD_INT 0
60126: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60127: LD_ADDR_VAR 0 3
60131: PUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL_OW 255
60141: PPUSH
60142: LD_VAR 0 1
60146: PPUSH
60147: CALL_OW 250
60151: PPUSH
60152: LD_VAR 0 1
60156: PPUSH
60157: CALL_OW 251
60161: PPUSH
60162: LD_VAR 0 2
60166: PPUSH
60167: CALL 34228 0 4
60171: PUSH
60172: LD_INT 4
60174: ARRAY
60175: ST_TO_ADDR
// end ;
60176: LD_VAR 0 3
60180: RET
// export function PlayerSeeMe ( unit ) ; begin
60181: LD_INT 0
60183: PPUSH
// result := See ( your_side , unit ) ;
60184: LD_ADDR_VAR 0 2
60188: PUSH
60189: LD_OWVAR 2
60193: PPUSH
60194: LD_VAR 0 1
60198: PPUSH
60199: CALL_OW 292
60203: ST_TO_ADDR
// end ;
60204: LD_VAR 0 2
60208: RET
// export function ReverseDir ( unit ) ; begin
60209: LD_INT 0
60211: PPUSH
// if not unit then
60212: LD_VAR 0 1
60216: NOT
60217: IFFALSE 60221
// exit ;
60219: GO 60244
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60221: LD_ADDR_VAR 0 2
60225: PUSH
60226: LD_VAR 0 1
60230: PPUSH
60231: CALL_OW 254
60235: PUSH
60236: LD_INT 3
60238: PLUS
60239: PUSH
60240: LD_INT 6
60242: MOD
60243: ST_TO_ADDR
// end ;
60244: LD_VAR 0 2
60248: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60249: LD_INT 0
60251: PPUSH
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
// if not hexes then
60256: LD_VAR 0 2
60260: NOT
60261: IFFALSE 60265
// exit ;
60263: GO 60413
// dist := 9999 ;
60265: LD_ADDR_VAR 0 5
60269: PUSH
60270: LD_INT 9999
60272: ST_TO_ADDR
// for i = 1 to hexes do
60273: LD_ADDR_VAR 0 4
60277: PUSH
60278: DOUBLE
60279: LD_INT 1
60281: DEC
60282: ST_TO_ADDR
60283: LD_VAR 0 2
60287: PUSH
60288: FOR_TO
60289: IFFALSE 60401
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60291: LD_VAR 0 1
60295: PPUSH
60296: LD_VAR 0 2
60300: PUSH
60301: LD_VAR 0 4
60305: ARRAY
60306: PUSH
60307: LD_INT 1
60309: ARRAY
60310: PPUSH
60311: LD_VAR 0 2
60315: PUSH
60316: LD_VAR 0 4
60320: ARRAY
60321: PUSH
60322: LD_INT 2
60324: ARRAY
60325: PPUSH
60326: CALL_OW 297
60330: PUSH
60331: LD_VAR 0 5
60335: LESS
60336: IFFALSE 60399
// begin hex := hexes [ i ] ;
60338: LD_ADDR_VAR 0 7
60342: PUSH
60343: LD_VAR 0 2
60347: PUSH
60348: LD_VAR 0 4
60352: ARRAY
60353: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60354: LD_ADDR_VAR 0 5
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: LD_VAR 0 2
60368: PUSH
60369: LD_VAR 0 4
60373: ARRAY
60374: PUSH
60375: LD_INT 1
60377: ARRAY
60378: PPUSH
60379: LD_VAR 0 2
60383: PUSH
60384: LD_VAR 0 4
60388: ARRAY
60389: PUSH
60390: LD_INT 2
60392: ARRAY
60393: PPUSH
60394: CALL_OW 297
60398: ST_TO_ADDR
// end ; end ;
60399: GO 60288
60401: POP
60402: POP
// result := hex ;
60403: LD_ADDR_VAR 0 3
60407: PUSH
60408: LD_VAR 0 7
60412: ST_TO_ADDR
// end ;
60413: LD_VAR 0 3
60417: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60418: LD_INT 0
60420: PPUSH
60421: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60422: LD_VAR 0 1
60426: NOT
60427: PUSH
60428: LD_VAR 0 1
60432: PUSH
60433: LD_INT 21
60435: PUSH
60436: LD_INT 2
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 23
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PPUSH
60457: CALL_OW 69
60461: IN
60462: NOT
60463: OR
60464: IFFALSE 60468
// exit ;
60466: GO 60515
// for i = 1 to 3 do
60468: LD_ADDR_VAR 0 3
60472: PUSH
60473: DOUBLE
60474: LD_INT 1
60476: DEC
60477: ST_TO_ADDR
60478: LD_INT 3
60480: PUSH
60481: FOR_TO
60482: IFFALSE 60513
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 250
60493: PPUSH
60494: LD_VAR 0 1
60498: PPUSH
60499: CALL_OW 251
60503: PPUSH
60504: LD_INT 1
60506: PPUSH
60507: CALL_OW 453
60511: GO 60481
60513: POP
60514: POP
// end ;
60515: LD_VAR 0 2
60519: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60520: LD_INT 0
60522: PPUSH
60523: PPUSH
60524: PPUSH
60525: PPUSH
60526: PPUSH
60527: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60528: LD_VAR 0 1
60532: NOT
60533: PUSH
60534: LD_VAR 0 2
60538: NOT
60539: OR
60540: PUSH
60541: LD_VAR 0 1
60545: PPUSH
60546: CALL_OW 314
60550: OR
60551: IFFALSE 60555
// exit ;
60553: GO 60996
// x := GetX ( enemy_unit ) ;
60555: LD_ADDR_VAR 0 7
60559: PUSH
60560: LD_VAR 0 2
60564: PPUSH
60565: CALL_OW 250
60569: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60570: LD_ADDR_VAR 0 8
60574: PUSH
60575: LD_VAR 0 2
60579: PPUSH
60580: CALL_OW 251
60584: ST_TO_ADDR
// if not x or not y then
60585: LD_VAR 0 7
60589: NOT
60590: PUSH
60591: LD_VAR 0 8
60595: NOT
60596: OR
60597: IFFALSE 60601
// exit ;
60599: GO 60996
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60601: LD_ADDR_VAR 0 6
60605: PUSH
60606: LD_VAR 0 7
60610: PPUSH
60611: LD_INT 0
60613: PPUSH
60614: LD_INT 4
60616: PPUSH
60617: CALL_OW 272
60621: PUSH
60622: LD_VAR 0 8
60626: PPUSH
60627: LD_INT 0
60629: PPUSH
60630: LD_INT 4
60632: PPUSH
60633: CALL_OW 273
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_VAR 0 7
60646: PPUSH
60647: LD_INT 1
60649: PPUSH
60650: LD_INT 4
60652: PPUSH
60653: CALL_OW 272
60657: PUSH
60658: LD_VAR 0 8
60662: PPUSH
60663: LD_INT 1
60665: PPUSH
60666: LD_INT 4
60668: PPUSH
60669: CALL_OW 273
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_VAR 0 7
60682: PPUSH
60683: LD_INT 2
60685: PPUSH
60686: LD_INT 4
60688: PPUSH
60689: CALL_OW 272
60693: PUSH
60694: LD_VAR 0 8
60698: PPUSH
60699: LD_INT 2
60701: PPUSH
60702: LD_INT 4
60704: PPUSH
60705: CALL_OW 273
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 7
60718: PPUSH
60719: LD_INT 3
60721: PPUSH
60722: LD_INT 4
60724: PPUSH
60725: CALL_OW 272
60729: PUSH
60730: LD_VAR 0 8
60734: PPUSH
60735: LD_INT 3
60737: PPUSH
60738: LD_INT 4
60740: PPUSH
60741: CALL_OW 273
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_VAR 0 7
60754: PPUSH
60755: LD_INT 4
60757: PPUSH
60758: LD_INT 4
60760: PPUSH
60761: CALL_OW 272
60765: PUSH
60766: LD_VAR 0 8
60770: PPUSH
60771: LD_INT 4
60773: PPUSH
60774: LD_INT 4
60776: PPUSH
60777: CALL_OW 273
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_VAR 0 7
60790: PPUSH
60791: LD_INT 5
60793: PPUSH
60794: LD_INT 4
60796: PPUSH
60797: CALL_OW 272
60801: PUSH
60802: LD_VAR 0 8
60806: PPUSH
60807: LD_INT 5
60809: PPUSH
60810: LD_INT 4
60812: PPUSH
60813: CALL_OW 273
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// for i = tmp downto 1 do
60830: LD_ADDR_VAR 0 4
60834: PUSH
60835: DOUBLE
60836: LD_VAR 0 6
60840: INC
60841: ST_TO_ADDR
60842: LD_INT 1
60844: PUSH
60845: FOR_DOWNTO
60846: IFFALSE 60947
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60848: LD_VAR 0 6
60852: PUSH
60853: LD_VAR 0 4
60857: ARRAY
60858: PUSH
60859: LD_INT 1
60861: ARRAY
60862: PPUSH
60863: LD_VAR 0 6
60867: PUSH
60868: LD_VAR 0 4
60872: ARRAY
60873: PUSH
60874: LD_INT 2
60876: ARRAY
60877: PPUSH
60878: CALL_OW 488
60882: NOT
60883: PUSH
60884: LD_VAR 0 6
60888: PUSH
60889: LD_VAR 0 4
60893: ARRAY
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: PPUSH
60899: LD_VAR 0 6
60903: PUSH
60904: LD_VAR 0 4
60908: ARRAY
60909: PUSH
60910: LD_INT 2
60912: ARRAY
60913: PPUSH
60914: CALL_OW 428
60918: PUSH
60919: LD_INT 0
60921: NONEQUAL
60922: OR
60923: IFFALSE 60945
// tmp := Delete ( tmp , i ) ;
60925: LD_ADDR_VAR 0 6
60929: PUSH
60930: LD_VAR 0 6
60934: PPUSH
60935: LD_VAR 0 4
60939: PPUSH
60940: CALL_OW 3
60944: ST_TO_ADDR
60945: GO 60845
60947: POP
60948: POP
// j := GetClosestHex ( unit , tmp ) ;
60949: LD_ADDR_VAR 0 5
60953: PUSH
60954: LD_VAR 0 1
60958: PPUSH
60959: LD_VAR 0 6
60963: PPUSH
60964: CALL 60249 0 2
60968: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60969: LD_VAR 0 1
60973: PPUSH
60974: LD_VAR 0 5
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: PPUSH
60983: LD_VAR 0 5
60987: PUSH
60988: LD_INT 2
60990: ARRAY
60991: PPUSH
60992: CALL_OW 111
// end ;
60996: LD_VAR 0 3
61000: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61001: LD_INT 0
61003: PPUSH
61004: PPUSH
61005: PPUSH
// uc_side = 0 ;
61006: LD_ADDR_OWVAR 20
61010: PUSH
61011: LD_INT 0
61013: ST_TO_ADDR
// uc_nation = 0 ;
61014: LD_ADDR_OWVAR 21
61018: PUSH
61019: LD_INT 0
61021: ST_TO_ADDR
// InitHc_All ( ) ;
61022: CALL_OW 584
// InitVc ;
61026: CALL_OW 20
// if mastodonts then
61030: LD_VAR 0 6
61034: IFFALSE 61101
// for i = 1 to mastodonts do
61036: LD_ADDR_VAR 0 11
61040: PUSH
61041: DOUBLE
61042: LD_INT 1
61044: DEC
61045: ST_TO_ADDR
61046: LD_VAR 0 6
61050: PUSH
61051: FOR_TO
61052: IFFALSE 61099
// begin vc_chassis := 31 ;
61054: LD_ADDR_OWVAR 37
61058: PUSH
61059: LD_INT 31
61061: ST_TO_ADDR
// vc_control := control_rider ;
61062: LD_ADDR_OWVAR 38
61066: PUSH
61067: LD_INT 4
61069: ST_TO_ADDR
// animal := CreateVehicle ;
61070: LD_ADDR_VAR 0 12
61074: PUSH
61075: CALL_OW 45
61079: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61080: LD_VAR 0 12
61084: PPUSH
61085: LD_VAR 0 8
61089: PPUSH
61090: LD_INT 0
61092: PPUSH
61093: CALL 63289 0 3
// end ;
61097: GO 61051
61099: POP
61100: POP
// if horses then
61101: LD_VAR 0 5
61105: IFFALSE 61172
// for i = 1 to horses do
61107: LD_ADDR_VAR 0 11
61111: PUSH
61112: DOUBLE
61113: LD_INT 1
61115: DEC
61116: ST_TO_ADDR
61117: LD_VAR 0 5
61121: PUSH
61122: FOR_TO
61123: IFFALSE 61170
// begin hc_class := 21 ;
61125: LD_ADDR_OWVAR 28
61129: PUSH
61130: LD_INT 21
61132: ST_TO_ADDR
// hc_gallery :=  ;
61133: LD_ADDR_OWVAR 33
61137: PUSH
61138: LD_STRING 
61140: ST_TO_ADDR
// animal := CreateHuman ;
61141: LD_ADDR_VAR 0 12
61145: PUSH
61146: CALL_OW 44
61150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61151: LD_VAR 0 12
61155: PPUSH
61156: LD_VAR 0 8
61160: PPUSH
61161: LD_INT 0
61163: PPUSH
61164: CALL 63289 0 3
// end ;
61168: GO 61122
61170: POP
61171: POP
// if birds then
61172: LD_VAR 0 1
61176: IFFALSE 61243
// for i = 1 to birds do
61178: LD_ADDR_VAR 0 11
61182: PUSH
61183: DOUBLE
61184: LD_INT 1
61186: DEC
61187: ST_TO_ADDR
61188: LD_VAR 0 1
61192: PUSH
61193: FOR_TO
61194: IFFALSE 61241
// begin hc_class = 18 ;
61196: LD_ADDR_OWVAR 28
61200: PUSH
61201: LD_INT 18
61203: ST_TO_ADDR
// hc_gallery =  ;
61204: LD_ADDR_OWVAR 33
61208: PUSH
61209: LD_STRING 
61211: ST_TO_ADDR
// animal := CreateHuman ;
61212: LD_ADDR_VAR 0 12
61216: PUSH
61217: CALL_OW 44
61221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61222: LD_VAR 0 12
61226: PPUSH
61227: LD_VAR 0 8
61231: PPUSH
61232: LD_INT 0
61234: PPUSH
61235: CALL 63289 0 3
// end ;
61239: GO 61193
61241: POP
61242: POP
// if tigers then
61243: LD_VAR 0 2
61247: IFFALSE 61331
// for i = 1 to tigers do
61249: LD_ADDR_VAR 0 11
61253: PUSH
61254: DOUBLE
61255: LD_INT 1
61257: DEC
61258: ST_TO_ADDR
61259: LD_VAR 0 2
61263: PUSH
61264: FOR_TO
61265: IFFALSE 61329
// begin hc_class = class_tiger ;
61267: LD_ADDR_OWVAR 28
61271: PUSH
61272: LD_INT 14
61274: ST_TO_ADDR
// hc_gallery =  ;
61275: LD_ADDR_OWVAR 33
61279: PUSH
61280: LD_STRING 
61282: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61283: LD_ADDR_OWVAR 35
61287: PUSH
61288: LD_INT 7
61290: NEG
61291: PPUSH
61292: LD_INT 7
61294: PPUSH
61295: CALL_OW 12
61299: ST_TO_ADDR
// animal := CreateHuman ;
61300: LD_ADDR_VAR 0 12
61304: PUSH
61305: CALL_OW 44
61309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61310: LD_VAR 0 12
61314: PPUSH
61315: LD_VAR 0 8
61319: PPUSH
61320: LD_INT 0
61322: PPUSH
61323: CALL 63289 0 3
// end ;
61327: GO 61264
61329: POP
61330: POP
// if apemans then
61331: LD_VAR 0 3
61335: IFFALSE 61458
// for i = 1 to apemans do
61337: LD_ADDR_VAR 0 11
61341: PUSH
61342: DOUBLE
61343: LD_INT 1
61345: DEC
61346: ST_TO_ADDR
61347: LD_VAR 0 3
61351: PUSH
61352: FOR_TO
61353: IFFALSE 61456
// begin hc_class = class_apeman ;
61355: LD_ADDR_OWVAR 28
61359: PUSH
61360: LD_INT 12
61362: ST_TO_ADDR
// hc_gallery =  ;
61363: LD_ADDR_OWVAR 33
61367: PUSH
61368: LD_STRING 
61370: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61371: LD_ADDR_OWVAR 35
61375: PUSH
61376: LD_INT 5
61378: NEG
61379: PPUSH
61380: LD_INT 5
61382: PPUSH
61383: CALL_OW 12
61387: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61388: LD_ADDR_OWVAR 31
61392: PUSH
61393: LD_INT 1
61395: PPUSH
61396: LD_INT 3
61398: PPUSH
61399: CALL_OW 12
61403: PUSH
61404: LD_INT 1
61406: PPUSH
61407: LD_INT 3
61409: PPUSH
61410: CALL_OW 12
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// animal := CreateHuman ;
61427: LD_ADDR_VAR 0 12
61431: PUSH
61432: CALL_OW 44
61436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61437: LD_VAR 0 12
61441: PPUSH
61442: LD_VAR 0 8
61446: PPUSH
61447: LD_INT 0
61449: PPUSH
61450: CALL 63289 0 3
// end ;
61454: GO 61352
61456: POP
61457: POP
// if enchidnas then
61458: LD_VAR 0 4
61462: IFFALSE 61529
// for i = 1 to enchidnas do
61464: LD_ADDR_VAR 0 11
61468: PUSH
61469: DOUBLE
61470: LD_INT 1
61472: DEC
61473: ST_TO_ADDR
61474: LD_VAR 0 4
61478: PUSH
61479: FOR_TO
61480: IFFALSE 61527
// begin hc_class = 13 ;
61482: LD_ADDR_OWVAR 28
61486: PUSH
61487: LD_INT 13
61489: ST_TO_ADDR
// hc_gallery =  ;
61490: LD_ADDR_OWVAR 33
61494: PUSH
61495: LD_STRING 
61497: ST_TO_ADDR
// animal := CreateHuman ;
61498: LD_ADDR_VAR 0 12
61502: PUSH
61503: CALL_OW 44
61507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61508: LD_VAR 0 12
61512: PPUSH
61513: LD_VAR 0 8
61517: PPUSH
61518: LD_INT 0
61520: PPUSH
61521: CALL 63289 0 3
// end ;
61525: GO 61479
61527: POP
61528: POP
// if fishes then
61529: LD_VAR 0 7
61533: IFFALSE 61600
// for i = 1 to fishes do
61535: LD_ADDR_VAR 0 11
61539: PUSH
61540: DOUBLE
61541: LD_INT 1
61543: DEC
61544: ST_TO_ADDR
61545: LD_VAR 0 7
61549: PUSH
61550: FOR_TO
61551: IFFALSE 61598
// begin hc_class = 20 ;
61553: LD_ADDR_OWVAR 28
61557: PUSH
61558: LD_INT 20
61560: ST_TO_ADDR
// hc_gallery =  ;
61561: LD_ADDR_OWVAR 33
61565: PUSH
61566: LD_STRING 
61568: ST_TO_ADDR
// animal := CreateHuman ;
61569: LD_ADDR_VAR 0 12
61573: PUSH
61574: CALL_OW 44
61578: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61579: LD_VAR 0 12
61583: PPUSH
61584: LD_VAR 0 9
61588: PPUSH
61589: LD_INT 0
61591: PPUSH
61592: CALL 63289 0 3
// end ;
61596: GO 61550
61598: POP
61599: POP
// end ;
61600: LD_VAR 0 10
61604: RET
// export function WantHeal ( sci , unit ) ; begin
61605: LD_INT 0
61607: PPUSH
// if GetTaskList ( sci ) > 0 then
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 437
61617: PUSH
61618: LD_INT 0
61620: GREATER
61621: IFFALSE 61691
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61623: LD_VAR 0 1
61627: PPUSH
61628: CALL_OW 437
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PUSH
61637: LD_INT 1
61639: ARRAY
61640: PUSH
61641: LD_STRING l
61643: EQUAL
61644: PUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL_OW 437
61654: PUSH
61655: LD_INT 1
61657: ARRAY
61658: PUSH
61659: LD_INT 4
61661: ARRAY
61662: PUSH
61663: LD_VAR 0 2
61667: EQUAL
61668: AND
61669: IFFALSE 61681
// result := true else
61671: LD_ADDR_VAR 0 3
61675: PUSH
61676: LD_INT 1
61678: ST_TO_ADDR
61679: GO 61689
// result := false ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: LD_INT 0
61688: ST_TO_ADDR
// end else
61689: GO 61699
// result := false ;
61691: LD_ADDR_VAR 0 3
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 3
61703: RET
// export function HealTarget ( sci ) ; begin
61704: LD_INT 0
61706: PPUSH
// if not sci then
61707: LD_VAR 0 1
61711: NOT
61712: IFFALSE 61716
// exit ;
61714: GO 61781
// result := 0 ;
61716: LD_ADDR_VAR 0 2
61720: PUSH
61721: LD_INT 0
61723: ST_TO_ADDR
// if GetTaskList ( sci ) then
61724: LD_VAR 0 1
61728: PPUSH
61729: CALL_OW 437
61733: IFFALSE 61781
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61735: LD_VAR 0 1
61739: PPUSH
61740: CALL_OW 437
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PUSH
61749: LD_INT 1
61751: ARRAY
61752: PUSH
61753: LD_STRING l
61755: EQUAL
61756: IFFALSE 61781
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61758: LD_ADDR_VAR 0 2
61762: PUSH
61763: LD_VAR 0 1
61767: PPUSH
61768: CALL_OW 437
61772: PUSH
61773: LD_INT 1
61775: ARRAY
61776: PUSH
61777: LD_INT 4
61779: ARRAY
61780: ST_TO_ADDR
// end ;
61781: LD_VAR 0 2
61785: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61786: LD_INT 0
61788: PPUSH
61789: PPUSH
61790: PPUSH
61791: PPUSH
// if not base_units then
61792: LD_VAR 0 1
61796: NOT
61797: IFFALSE 61801
// exit ;
61799: GO 61888
// result := false ;
61801: LD_ADDR_VAR 0 2
61805: PUSH
61806: LD_INT 0
61808: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61809: LD_ADDR_VAR 0 5
61813: PUSH
61814: LD_VAR 0 1
61818: PPUSH
61819: LD_INT 21
61821: PUSH
61822: LD_INT 3
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PPUSH
61829: CALL_OW 72
61833: ST_TO_ADDR
// if not tmp then
61834: LD_VAR 0 5
61838: NOT
61839: IFFALSE 61843
// exit ;
61841: GO 61888
// for i in tmp do
61843: LD_ADDR_VAR 0 3
61847: PUSH
61848: LD_VAR 0 5
61852: PUSH
61853: FOR_IN
61854: IFFALSE 61886
// begin result := EnemyInRange ( i , 22 ) ;
61856: LD_ADDR_VAR 0 2
61860: PUSH
61861: LD_VAR 0 3
61865: PPUSH
61866: LD_INT 22
61868: PPUSH
61869: CALL 60124 0 2
61873: ST_TO_ADDR
// if result then
61874: LD_VAR 0 2
61878: IFFALSE 61884
// exit ;
61880: POP
61881: POP
61882: GO 61888
// end ;
61884: GO 61853
61886: POP
61887: POP
// end ;
61888: LD_VAR 0 2
61892: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61893: LD_INT 0
61895: PPUSH
61896: PPUSH
// if not units then
61897: LD_VAR 0 1
61901: NOT
61902: IFFALSE 61906
// exit ;
61904: GO 61976
// result := [ ] ;
61906: LD_ADDR_VAR 0 3
61910: PUSH
61911: EMPTY
61912: ST_TO_ADDR
// for i in units do
61913: LD_ADDR_VAR 0 4
61917: PUSH
61918: LD_VAR 0 1
61922: PUSH
61923: FOR_IN
61924: IFFALSE 61974
// if GetTag ( i ) = tag then
61926: LD_VAR 0 4
61930: PPUSH
61931: CALL_OW 110
61935: PUSH
61936: LD_VAR 0 2
61940: EQUAL
61941: IFFALSE 61972
// result := Insert ( result , result + 1 , i ) ;
61943: LD_ADDR_VAR 0 3
61947: PUSH
61948: LD_VAR 0 3
61952: PPUSH
61953: LD_VAR 0 3
61957: PUSH
61958: LD_INT 1
61960: PLUS
61961: PPUSH
61962: LD_VAR 0 4
61966: PPUSH
61967: CALL_OW 2
61971: ST_TO_ADDR
61972: GO 61923
61974: POP
61975: POP
// end ;
61976: LD_VAR 0 3
61980: RET
// export function IsDriver ( un ) ; begin
61981: LD_INT 0
61983: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61984: LD_ADDR_VAR 0 2
61988: PUSH
61989: LD_VAR 0 1
61993: PUSH
61994: LD_INT 55
61996: PUSH
61997: EMPTY
61998: LIST
61999: PPUSH
62000: CALL_OW 69
62004: IN
62005: ST_TO_ADDR
// end ;
62006: LD_VAR 0 2
62010: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62011: LD_INT 0
62013: PPUSH
62014: PPUSH
// list := [ ] ;
62015: LD_ADDR_VAR 0 5
62019: PUSH
62020: EMPTY
62021: ST_TO_ADDR
// case d of 0 :
62022: LD_VAR 0 3
62026: PUSH
62027: LD_INT 0
62029: DOUBLE
62030: EQUAL
62031: IFTRUE 62035
62033: GO 62168
62035: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62036: LD_ADDR_VAR 0 5
62040: PUSH
62041: LD_VAR 0 1
62045: PUSH
62046: LD_INT 4
62048: MINUS
62049: PUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_INT 4
62057: MINUS
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: LIST
62066: PUSH
62067: LD_VAR 0 1
62071: PUSH
62072: LD_INT 3
62074: MINUS
62075: PUSH
62076: LD_VAR 0 2
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: PUSH
62089: LD_VAR 0 1
62093: PUSH
62094: LD_INT 4
62096: PLUS
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: LD_INT 4
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: PUSH
62111: LD_VAR 0 1
62115: PUSH
62116: LD_INT 3
62118: PLUS
62119: PUSH
62120: LD_VAR 0 2
62124: PUSH
62125: LD_INT 3
62127: PLUS
62128: PUSH
62129: LD_INT 5
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_VAR 0 2
62146: PUSH
62147: LD_INT 4
62149: PLUS
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// end ; 1 :
62166: GO 62866
62168: LD_INT 1
62170: DOUBLE
62171: EQUAL
62172: IFTRUE 62176
62174: GO 62309
62176: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62177: LD_ADDR_VAR 0 5
62181: PUSH
62182: LD_VAR 0 1
62186: PUSH
62187: LD_VAR 0 2
62191: PUSH
62192: LD_INT 4
62194: MINUS
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: PUSH
62204: LD_VAR 0 1
62208: PUSH
62209: LD_INT 3
62211: MINUS
62212: PUSH
62213: LD_VAR 0 2
62217: PUSH
62218: LD_INT 3
62220: MINUS
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: PUSH
62230: LD_VAR 0 1
62234: PUSH
62235: LD_INT 4
62237: MINUS
62238: PUSH
62239: LD_VAR 0 2
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: LIST
62251: PUSH
62252: LD_VAR 0 1
62256: PUSH
62257: LD_VAR 0 2
62261: PUSH
62262: LD_INT 3
62264: PLUS
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: LIST
62273: PUSH
62274: LD_VAR 0 1
62278: PUSH
62279: LD_INT 4
62281: PLUS
62282: PUSH
62283: LD_VAR 0 2
62287: PUSH
62288: LD_INT 4
62290: PLUS
62291: PUSH
62292: LD_INT 5
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// end ; 2 :
62307: GO 62866
62309: LD_INT 2
62311: DOUBLE
62312: EQUAL
62313: IFTRUE 62317
62315: GO 62446
62317: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62318: LD_ADDR_VAR 0 5
62322: PUSH
62323: LD_VAR 0 1
62327: PUSH
62328: LD_VAR 0 2
62332: PUSH
62333: LD_INT 3
62335: MINUS
62336: PUSH
62337: LD_INT 3
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: PUSH
62345: LD_VAR 0 1
62349: PUSH
62350: LD_INT 4
62352: PLUS
62353: PUSH
62354: LD_VAR 0 2
62358: PUSH
62359: LD_INT 4
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: LD_VAR 0 1
62371: PUSH
62372: LD_VAR 0 2
62376: PUSH
62377: LD_INT 4
62379: PLUS
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: PUSH
62389: LD_VAR 0 1
62393: PUSH
62394: LD_INT 3
62396: MINUS
62397: PUSH
62398: LD_VAR 0 2
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: PUSH
62411: LD_VAR 0 1
62415: PUSH
62416: LD_INT 4
62418: MINUS
62419: PUSH
62420: LD_VAR 0 2
62424: PUSH
62425: LD_INT 4
62427: MINUS
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: ST_TO_ADDR
// end ; 3 :
62444: GO 62866
62446: LD_INT 3
62448: DOUBLE
62449: EQUAL
62450: IFTRUE 62454
62452: GO 62587
62454: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62455: LD_ADDR_VAR 0 5
62459: PUSH
62460: LD_VAR 0 1
62464: PUSH
62465: LD_INT 3
62467: PLUS
62468: PUSH
62469: LD_VAR 0 2
62473: PUSH
62474: LD_INT 4
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: PUSH
62482: LD_VAR 0 1
62486: PUSH
62487: LD_INT 4
62489: PLUS
62490: PUSH
62491: LD_VAR 0 2
62495: PUSH
62496: LD_INT 4
62498: PLUS
62499: PUSH
62500: LD_INT 5
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: LD_VAR 0 1
62512: PUSH
62513: LD_INT 4
62515: MINUS
62516: PUSH
62517: LD_VAR 0 2
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: LIST
62529: PUSH
62530: LD_VAR 0 1
62534: PUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_INT 4
62542: MINUS
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: PUSH
62552: LD_VAR 0 1
62556: PUSH
62557: LD_INT 3
62559: MINUS
62560: PUSH
62561: LD_VAR 0 2
62565: PUSH
62566: LD_INT 3
62568: MINUS
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// end ; 4 :
62585: GO 62866
62587: LD_INT 4
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62595
62593: GO 62728
62595: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62596: LD_ADDR_VAR 0 5
62600: PUSH
62601: LD_VAR 0 1
62605: PUSH
62606: LD_VAR 0 2
62610: PUSH
62611: LD_INT 4
62613: PLUS
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 1
62627: PUSH
62628: LD_INT 3
62630: PLUS
62631: PUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 3
62639: PLUS
62640: PUSH
62641: LD_INT 5
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: LD_VAR 0 1
62653: PUSH
62654: LD_INT 4
62656: PLUS
62657: PUSH
62658: LD_VAR 0 2
62662: PUSH
62663: LD_INT 4
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: PUSH
62671: LD_VAR 0 1
62675: PUSH
62676: LD_VAR 0 2
62680: PUSH
62681: LD_INT 3
62683: MINUS
62684: PUSH
62685: LD_INT 3
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: LIST
62692: PUSH
62693: LD_VAR 0 1
62697: PUSH
62698: LD_INT 4
62700: MINUS
62701: PUSH
62702: LD_VAR 0 2
62706: PUSH
62707: LD_INT 4
62709: MINUS
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: ST_TO_ADDR
// end ; 5 :
62726: GO 62866
62728: LD_INT 5
62730: DOUBLE
62731: EQUAL
62732: IFTRUE 62736
62734: GO 62865
62736: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62737: LD_ADDR_VAR 0 5
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_INT 4
62749: MINUS
62750: PUSH
62751: LD_VAR 0 2
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_VAR 0 2
62773: PUSH
62774: LD_INT 4
62776: MINUS
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: LIST
62785: PUSH
62786: LD_VAR 0 1
62790: PUSH
62791: LD_INT 4
62793: PLUS
62794: PUSH
62795: LD_VAR 0 2
62799: PUSH
62800: LD_INT 4
62802: PLUS
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: PUSH
62812: LD_VAR 0 1
62816: PUSH
62817: LD_INT 3
62819: PLUS
62820: PUSH
62821: LD_VAR 0 2
62825: PUSH
62826: LD_INT 4
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: PUSH
62834: LD_VAR 0 1
62838: PUSH
62839: LD_VAR 0 2
62843: PUSH
62844: LD_INT 3
62846: PLUS
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: ST_TO_ADDR
// end ; end ;
62863: GO 62866
62865: POP
// result := list ;
62866: LD_ADDR_VAR 0 4
62870: PUSH
62871: LD_VAR 0 5
62875: ST_TO_ADDR
// end ;
62876: LD_VAR 0 4
62880: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62881: LD_INT 0
62883: PPUSH
62884: PPUSH
62885: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62886: LD_VAR 0 1
62890: NOT
62891: PUSH
62892: LD_VAR 0 2
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: LD_INT 3
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: IN
62915: NOT
62916: OR
62917: IFFALSE 62921
// exit ;
62919: GO 63013
// tmp := [ ] ;
62921: LD_ADDR_VAR 0 5
62925: PUSH
62926: EMPTY
62927: ST_TO_ADDR
// for i in units do
62928: LD_ADDR_VAR 0 4
62932: PUSH
62933: LD_VAR 0 1
62937: PUSH
62938: FOR_IN
62939: IFFALSE 62982
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62941: LD_ADDR_VAR 0 5
62945: PUSH
62946: LD_VAR 0 5
62950: PPUSH
62951: LD_VAR 0 5
62955: PUSH
62956: LD_INT 1
62958: PLUS
62959: PPUSH
62960: LD_VAR 0 4
62964: PPUSH
62965: LD_VAR 0 2
62969: PPUSH
62970: CALL_OW 259
62974: PPUSH
62975: CALL_OW 2
62979: ST_TO_ADDR
62980: GO 62938
62982: POP
62983: POP
// if not tmp then
62984: LD_VAR 0 5
62988: NOT
62989: IFFALSE 62993
// exit ;
62991: GO 63013
// result := SortListByListDesc ( units , tmp ) ;
62993: LD_ADDR_VAR 0 3
62997: PUSH
62998: LD_VAR 0 1
63002: PPUSH
63003: LD_VAR 0 5
63007: PPUSH
63008: CALL_OW 77
63012: ST_TO_ADDR
// end ;
63013: LD_VAR 0 3
63017: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63018: LD_INT 0
63020: PPUSH
63021: PPUSH
63022: PPUSH
// result := false ;
63023: LD_ADDR_VAR 0 3
63027: PUSH
63028: LD_INT 0
63030: ST_TO_ADDR
// x := GetX ( building ) ;
63031: LD_ADDR_VAR 0 4
63035: PUSH
63036: LD_VAR 0 2
63040: PPUSH
63041: CALL_OW 250
63045: ST_TO_ADDR
// y := GetY ( building ) ;
63046: LD_ADDR_VAR 0 5
63050: PUSH
63051: LD_VAR 0 2
63055: PPUSH
63056: CALL_OW 251
63060: ST_TO_ADDR
// if not building or not x or not y then
63061: LD_VAR 0 2
63065: NOT
63066: PUSH
63067: LD_VAR 0 4
63071: NOT
63072: OR
63073: PUSH
63074: LD_VAR 0 5
63078: NOT
63079: OR
63080: IFFALSE 63084
// exit ;
63082: GO 63176
// if GetTaskList ( unit ) then
63084: LD_VAR 0 1
63088: PPUSH
63089: CALL_OW 437
63093: IFFALSE 63176
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63095: LD_STRING e
63097: PUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: CALL_OW 437
63107: PUSH
63108: LD_INT 1
63110: ARRAY
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: EQUAL
63116: PUSH
63117: LD_VAR 0 4
63121: PUSH
63122: LD_VAR 0 1
63126: PPUSH
63127: CALL_OW 437
63131: PUSH
63132: LD_INT 1
63134: ARRAY
63135: PUSH
63136: LD_INT 2
63138: ARRAY
63139: EQUAL
63140: AND
63141: PUSH
63142: LD_VAR 0 5
63146: PUSH
63147: LD_VAR 0 1
63151: PPUSH
63152: CALL_OW 437
63156: PUSH
63157: LD_INT 1
63159: ARRAY
63160: PUSH
63161: LD_INT 3
63163: ARRAY
63164: EQUAL
63165: AND
63166: IFFALSE 63176
// result := true end ;
63168: LD_ADDR_VAR 0 3
63172: PUSH
63173: LD_INT 1
63175: ST_TO_ADDR
// end ;
63176: LD_VAR 0 3
63180: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63181: LD_INT 0
63183: PPUSH
// result := false ;
63184: LD_ADDR_VAR 0 4
63188: PUSH
63189: LD_INT 0
63191: ST_TO_ADDR
// if GetTaskList ( unit ) then
63192: LD_VAR 0 1
63196: PPUSH
63197: CALL_OW 437
63201: IFFALSE 63284
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63203: LD_STRING M
63205: PUSH
63206: LD_VAR 0 1
63210: PPUSH
63211: CALL_OW 437
63215: PUSH
63216: LD_INT 1
63218: ARRAY
63219: PUSH
63220: LD_INT 1
63222: ARRAY
63223: EQUAL
63224: PUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_VAR 0 1
63234: PPUSH
63235: CALL_OW 437
63239: PUSH
63240: LD_INT 1
63242: ARRAY
63243: PUSH
63244: LD_INT 2
63246: ARRAY
63247: EQUAL
63248: AND
63249: PUSH
63250: LD_VAR 0 3
63254: PUSH
63255: LD_VAR 0 1
63259: PPUSH
63260: CALL_OW 437
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PUSH
63269: LD_INT 3
63271: ARRAY
63272: EQUAL
63273: AND
63274: IFFALSE 63284
// result := true ;
63276: LD_ADDR_VAR 0 4
63280: PUSH
63281: LD_INT 1
63283: ST_TO_ADDR
// end ; end ;
63284: LD_VAR 0 4
63288: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
63293: PPUSH
63294: PPUSH
// if not unit or not area then
63295: LD_VAR 0 1
63299: NOT
63300: PUSH
63301: LD_VAR 0 2
63305: NOT
63306: OR
63307: IFFALSE 63311
// exit ;
63309: GO 63475
// tmp := AreaToList ( area , i ) ;
63311: LD_ADDR_VAR 0 6
63315: PUSH
63316: LD_VAR 0 2
63320: PPUSH
63321: LD_VAR 0 5
63325: PPUSH
63326: CALL_OW 517
63330: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63331: LD_ADDR_VAR 0 5
63335: PUSH
63336: DOUBLE
63337: LD_INT 1
63339: DEC
63340: ST_TO_ADDR
63341: LD_VAR 0 6
63345: PUSH
63346: LD_INT 1
63348: ARRAY
63349: PUSH
63350: FOR_TO
63351: IFFALSE 63473
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63353: LD_ADDR_VAR 0 7
63357: PUSH
63358: LD_VAR 0 6
63362: PUSH
63363: LD_INT 1
63365: ARRAY
63366: PUSH
63367: LD_VAR 0 5
63371: ARRAY
63372: PUSH
63373: LD_VAR 0 6
63377: PUSH
63378: LD_INT 2
63380: ARRAY
63381: PUSH
63382: LD_VAR 0 5
63386: ARRAY
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63392: LD_VAR 0 7
63396: PUSH
63397: LD_INT 1
63399: ARRAY
63400: PPUSH
63401: LD_VAR 0 7
63405: PUSH
63406: LD_INT 2
63408: ARRAY
63409: PPUSH
63410: CALL_OW 428
63414: PUSH
63415: LD_INT 0
63417: EQUAL
63418: IFFALSE 63471
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63420: LD_VAR 0 1
63424: PPUSH
63425: LD_VAR 0 7
63429: PUSH
63430: LD_INT 1
63432: ARRAY
63433: PPUSH
63434: LD_VAR 0 7
63438: PUSH
63439: LD_INT 2
63441: ARRAY
63442: PPUSH
63443: LD_VAR 0 3
63447: PPUSH
63448: CALL_OW 48
// result := IsPlaced ( unit ) ;
63452: LD_ADDR_VAR 0 4
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: CALL_OW 305
63466: ST_TO_ADDR
// exit ;
63467: POP
63468: POP
63469: GO 63475
// end ; end ;
63471: GO 63350
63473: POP
63474: POP
// end ;
63475: LD_VAR 0 4
63479: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63480: LD_INT 0
63482: PPUSH
63483: PPUSH
63484: PPUSH
// if not side or side > 8 then
63485: LD_VAR 0 1
63489: NOT
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 8
63498: GREATER
63499: OR
63500: IFFALSE 63504
// exit ;
63502: GO 63691
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63504: LD_ADDR_VAR 0 4
63508: PUSH
63509: LD_INT 22
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 21
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PPUSH
63535: CALL_OW 69
63539: ST_TO_ADDR
// if not tmp then
63540: LD_VAR 0 4
63544: NOT
63545: IFFALSE 63549
// exit ;
63547: GO 63691
// enable_addtolog := true ;
63549: LD_ADDR_OWVAR 81
63553: PUSH
63554: LD_INT 1
63556: ST_TO_ADDR
// AddToLog ( [ ) ;
63557: LD_STRING [
63559: PPUSH
63560: CALL_OW 561
// for i in tmp do
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_VAR 0 4
63573: PUSH
63574: FOR_IN
63575: IFFALSE 63682
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63577: LD_STRING [
63579: PUSH
63580: LD_VAR 0 3
63584: PPUSH
63585: CALL_OW 266
63589: STR
63590: PUSH
63591: LD_STRING , 
63593: STR
63594: PUSH
63595: LD_VAR 0 3
63599: PPUSH
63600: CALL_OW 250
63604: STR
63605: PUSH
63606: LD_STRING , 
63608: STR
63609: PUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 251
63619: STR
63620: PUSH
63621: LD_STRING , 
63623: STR
63624: PUSH
63625: LD_VAR 0 3
63629: PPUSH
63630: CALL_OW 254
63634: STR
63635: PUSH
63636: LD_STRING , 
63638: STR
63639: PUSH
63640: LD_VAR 0 3
63644: PPUSH
63645: LD_INT 1
63647: PPUSH
63648: CALL_OW 268
63652: STR
63653: PUSH
63654: LD_STRING , 
63656: STR
63657: PUSH
63658: LD_VAR 0 3
63662: PPUSH
63663: LD_INT 2
63665: PPUSH
63666: CALL_OW 268
63670: STR
63671: PUSH
63672: LD_STRING ],
63674: STR
63675: PPUSH
63676: CALL_OW 561
// end ;
63680: GO 63574
63682: POP
63683: POP
// AddToLog ( ]; ) ;
63684: LD_STRING ];
63686: PPUSH
63687: CALL_OW 561
// end ;
63691: LD_VAR 0 2
63695: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63696: LD_INT 0
63698: PPUSH
63699: PPUSH
63700: PPUSH
63701: PPUSH
63702: PPUSH
// if not area or not rate or not max then
63703: LD_VAR 0 1
63707: NOT
63708: PUSH
63709: LD_VAR 0 2
63713: NOT
63714: OR
63715: PUSH
63716: LD_VAR 0 4
63720: NOT
63721: OR
63722: IFFALSE 63726
// exit ;
63724: GO 63918
// while 1 do
63726: LD_INT 1
63728: IFFALSE 63918
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63730: LD_ADDR_VAR 0 9
63734: PUSH
63735: LD_VAR 0 1
63739: PPUSH
63740: LD_INT 1
63742: PPUSH
63743: CALL_OW 287
63747: PUSH
63748: LD_INT 10
63750: MUL
63751: ST_TO_ADDR
// r := rate / 10 ;
63752: LD_ADDR_VAR 0 7
63756: PUSH
63757: LD_VAR 0 2
63761: PUSH
63762: LD_INT 10
63764: DIVREAL
63765: ST_TO_ADDR
// time := 1 1$00 ;
63766: LD_ADDR_VAR 0 8
63770: PUSH
63771: LD_INT 2100
63773: ST_TO_ADDR
// if amount < min then
63774: LD_VAR 0 9
63778: PUSH
63779: LD_VAR 0 3
63783: LESS
63784: IFFALSE 63802
// r := r * 2 else
63786: LD_ADDR_VAR 0 7
63790: PUSH
63791: LD_VAR 0 7
63795: PUSH
63796: LD_INT 2
63798: MUL
63799: ST_TO_ADDR
63800: GO 63828
// if amount > max then
63802: LD_VAR 0 9
63806: PUSH
63807: LD_VAR 0 4
63811: GREATER
63812: IFFALSE 63828
// r := r / 2 ;
63814: LD_ADDR_VAR 0 7
63818: PUSH
63819: LD_VAR 0 7
63823: PUSH
63824: LD_INT 2
63826: DIVREAL
63827: ST_TO_ADDR
// time := time / r ;
63828: LD_ADDR_VAR 0 8
63832: PUSH
63833: LD_VAR 0 8
63837: PUSH
63838: LD_VAR 0 7
63842: DIVREAL
63843: ST_TO_ADDR
// if time < 0 then
63844: LD_VAR 0 8
63848: PUSH
63849: LD_INT 0
63851: LESS
63852: IFFALSE 63869
// time := time * - 1 ;
63854: LD_ADDR_VAR 0 8
63858: PUSH
63859: LD_VAR 0 8
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: MUL
63868: ST_TO_ADDR
// wait ( time ) ;
63869: LD_VAR 0 8
63873: PPUSH
63874: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63878: LD_INT 35
63880: PPUSH
63881: LD_INT 875
63883: PPUSH
63884: CALL_OW 12
63888: PPUSH
63889: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63893: LD_INT 1
63895: PPUSH
63896: LD_INT 5
63898: PPUSH
63899: CALL_OW 12
63903: PPUSH
63904: LD_VAR 0 1
63908: PPUSH
63909: LD_INT 1
63911: PPUSH
63912: CALL_OW 55
// end ;
63916: GO 63726
// end ;
63918: LD_VAR 0 5
63922: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63923: LD_INT 0
63925: PPUSH
63926: PPUSH
63927: PPUSH
63928: PPUSH
63929: PPUSH
63930: PPUSH
63931: PPUSH
63932: PPUSH
// if not turrets or not factories then
63933: LD_VAR 0 1
63937: NOT
63938: PUSH
63939: LD_VAR 0 2
63943: NOT
63944: OR
63945: IFFALSE 63949
// exit ;
63947: GO 64256
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63949: LD_ADDR_VAR 0 10
63953: PUSH
63954: LD_INT 5
63956: PUSH
63957: LD_INT 6
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: LD_INT 5
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 24
63991: PUSH
63992: LD_INT 25
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 23
64001: PUSH
64002: LD_INT 27
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 42
64015: PUSH
64016: LD_INT 43
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 44
64025: PUSH
64026: LD_INT 46
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 45
64035: PUSH
64036: LD_INT 47
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: ST_TO_ADDR
// result := [ ] ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: EMPTY
64059: ST_TO_ADDR
// for i in turrets do
64060: LD_ADDR_VAR 0 4
64064: PUSH
64065: LD_VAR 0 1
64069: PUSH
64070: FOR_IN
64071: IFFALSE 64254
// begin nat := GetNation ( i ) ;
64073: LD_ADDR_VAR 0 7
64077: PUSH
64078: LD_VAR 0 4
64082: PPUSH
64083: CALL_OW 248
64087: ST_TO_ADDR
// weapon := 0 ;
64088: LD_ADDR_VAR 0 8
64092: PUSH
64093: LD_INT 0
64095: ST_TO_ADDR
// if not nat then
64096: LD_VAR 0 7
64100: NOT
64101: IFFALSE 64105
// continue ;
64103: GO 64070
// for j in list [ nat ] do
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_VAR 0 10
64114: PUSH
64115: LD_VAR 0 7
64119: ARRAY
64120: PUSH
64121: FOR_IN
64122: IFFALSE 64163
// if GetBWeapon ( i ) = j [ 1 ] then
64124: LD_VAR 0 4
64128: PPUSH
64129: CALL_OW 269
64133: PUSH
64134: LD_VAR 0 5
64138: PUSH
64139: LD_INT 1
64141: ARRAY
64142: EQUAL
64143: IFFALSE 64161
// begin weapon := j [ 2 ] ;
64145: LD_ADDR_VAR 0 8
64149: PUSH
64150: LD_VAR 0 5
64154: PUSH
64155: LD_INT 2
64157: ARRAY
64158: ST_TO_ADDR
// break ;
64159: GO 64163
// end ;
64161: GO 64121
64163: POP
64164: POP
// if not weapon then
64165: LD_VAR 0 8
64169: NOT
64170: IFFALSE 64174
// continue ;
64172: GO 64070
// for k in factories do
64174: LD_ADDR_VAR 0 6
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: FOR_IN
64185: IFFALSE 64250
// begin weapons := AvailableWeaponList ( k ) ;
64187: LD_ADDR_VAR 0 9
64191: PUSH
64192: LD_VAR 0 6
64196: PPUSH
64197: CALL_OW 478
64201: ST_TO_ADDR
// if not weapons then
64202: LD_VAR 0 9
64206: NOT
64207: IFFALSE 64211
// continue ;
64209: GO 64184
// if weapon in weapons then
64211: LD_VAR 0 8
64215: PUSH
64216: LD_VAR 0 9
64220: IN
64221: IFFALSE 64248
// begin result := [ i , weapon ] ;
64223: LD_ADDR_VAR 0 3
64227: PUSH
64228: LD_VAR 0 4
64232: PUSH
64233: LD_VAR 0 8
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// exit ;
64242: POP
64243: POP
64244: POP
64245: POP
64246: GO 64256
// end ; end ;
64248: GO 64184
64250: POP
64251: POP
// end ;
64252: GO 64070
64254: POP
64255: POP
// end ;
64256: LD_VAR 0 3
64260: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64261: LD_INT 0
64263: PPUSH
// if not side or side > 8 then
64264: LD_VAR 0 3
64268: NOT
64269: PUSH
64270: LD_VAR 0 3
64274: PUSH
64275: LD_INT 8
64277: GREATER
64278: OR
64279: IFFALSE 64283
// exit ;
64281: GO 64342
// if not range then
64283: LD_VAR 0 4
64287: NOT
64288: IFFALSE 64299
// range := - 12 ;
64290: LD_ADDR_VAR 0 4
64294: PUSH
64295: LD_INT 12
64297: NEG
64298: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64299: LD_VAR 0 1
64303: PPUSH
64304: LD_VAR 0 2
64308: PPUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64323: LD_VAR 0 1
64327: PPUSH
64328: LD_VAR 0 2
64332: PPUSH
64333: LD_VAR 0 3
64337: PPUSH
64338: CALL_OW 331
// end ;
64342: LD_VAR 0 5
64346: RET
// export function Video ( mode ) ; begin
64347: LD_INT 0
64349: PPUSH
// ingame_video = mode ;
64350: LD_ADDR_OWVAR 52
64354: PUSH
64355: LD_VAR 0 1
64359: ST_TO_ADDR
// interface_hidden = mode ;
64360: LD_ADDR_OWVAR 54
64364: PUSH
64365: LD_VAR 0 1
64369: ST_TO_ADDR
// end ;
64370: LD_VAR 0 2
64374: RET
// export function Join ( array , element ) ; begin
64375: LD_INT 0
64377: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64378: LD_ADDR_VAR 0 3
64382: PUSH
64383: LD_VAR 0 1
64387: PPUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_INT 1
64395: PLUS
64396: PPUSH
64397: LD_VAR 0 2
64401: PPUSH
64402: CALL_OW 1
64406: ST_TO_ADDR
// end ;
64407: LD_VAR 0 3
64411: RET
// export function JoinUnion ( array , element ) ; begin
64412: LD_INT 0
64414: PPUSH
// result := array union element ;
64415: LD_ADDR_VAR 0 3
64419: PUSH
64420: LD_VAR 0 1
64424: PUSH
64425: LD_VAR 0 2
64429: UNION
64430: ST_TO_ADDR
// end ;
64431: LD_VAR 0 3
64435: RET
// export function GetBehemoths ( side ) ; begin
64436: LD_INT 0
64438: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64439: LD_ADDR_VAR 0 2
64443: PUSH
64444: LD_INT 22
64446: PUSH
64447: LD_VAR 0 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 31
64458: PUSH
64459: LD_INT 25
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PPUSH
64470: CALL_OW 69
64474: ST_TO_ADDR
// end ;
64475: LD_VAR 0 2
64479: RET
// export function Shuffle ( array ) ; var i , index ; begin
64480: LD_INT 0
64482: PPUSH
64483: PPUSH
64484: PPUSH
// result := [ ] ;
64485: LD_ADDR_VAR 0 2
64489: PUSH
64490: EMPTY
64491: ST_TO_ADDR
// if not array then
64492: LD_VAR 0 1
64496: NOT
64497: IFFALSE 64501
// exit ;
64499: GO 64600
// Randomize ;
64501: CALL_OW 10
// for i = array downto 1 do
64505: LD_ADDR_VAR 0 3
64509: PUSH
64510: DOUBLE
64511: LD_VAR 0 1
64515: INC
64516: ST_TO_ADDR
64517: LD_INT 1
64519: PUSH
64520: FOR_DOWNTO
64521: IFFALSE 64598
// begin index := rand ( 1 , array ) ;
64523: LD_ADDR_VAR 0 4
64527: PUSH
64528: LD_INT 1
64530: PPUSH
64531: LD_VAR 0 1
64535: PPUSH
64536: CALL_OW 12
64540: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64541: LD_ADDR_VAR 0 2
64545: PUSH
64546: LD_VAR 0 2
64550: PPUSH
64551: LD_VAR 0 2
64555: PUSH
64556: LD_INT 1
64558: PLUS
64559: PPUSH
64560: LD_VAR 0 1
64564: PUSH
64565: LD_VAR 0 4
64569: ARRAY
64570: PPUSH
64571: CALL_OW 2
64575: ST_TO_ADDR
// array := Delete ( array , index ) ;
64576: LD_ADDR_VAR 0 1
64580: PUSH
64581: LD_VAR 0 1
64585: PPUSH
64586: LD_VAR 0 4
64590: PPUSH
64591: CALL_OW 3
64595: ST_TO_ADDR
// end ;
64596: GO 64520
64598: POP
64599: POP
// end ;
64600: LD_VAR 0 2
64604: RET
// export function GetBaseMaterials ( base ) ; begin
64605: LD_INT 0
64607: PPUSH
// result := [ 0 , 0 , 0 ] ;
64608: LD_ADDR_VAR 0 2
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// if not base then
64627: LD_VAR 0 1
64631: NOT
64632: IFFALSE 64636
// exit ;
64634: GO 64685
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64636: LD_ADDR_VAR 0 2
64640: PUSH
64641: LD_VAR 0 1
64645: PPUSH
64646: LD_INT 1
64648: PPUSH
64649: CALL_OW 275
64653: PUSH
64654: LD_VAR 0 1
64658: PPUSH
64659: LD_INT 2
64661: PPUSH
64662: CALL_OW 275
64666: PUSH
64667: LD_VAR 0 1
64671: PPUSH
64672: LD_INT 3
64674: PPUSH
64675: CALL_OW 275
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// end ;
64685: LD_VAR 0 2
64689: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64690: LD_INT 0
64692: PPUSH
64693: PPUSH
// result := array ;
64694: LD_ADDR_VAR 0 3
64698: PUSH
64699: LD_VAR 0 1
64703: ST_TO_ADDR
// if size > 0 then
64704: LD_VAR 0 2
64708: PUSH
64709: LD_INT 0
64711: GREATER
64712: IFFALSE 64758
// for i := array downto size do
64714: LD_ADDR_VAR 0 4
64718: PUSH
64719: DOUBLE
64720: LD_VAR 0 1
64724: INC
64725: ST_TO_ADDR
64726: LD_VAR 0 2
64730: PUSH
64731: FOR_DOWNTO
64732: IFFALSE 64756
// result := Delete ( result , result ) ;
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 3
64743: PPUSH
64744: LD_VAR 0 3
64748: PPUSH
64749: CALL_OW 3
64753: ST_TO_ADDR
64754: GO 64731
64756: POP
64757: POP
// end ;
64758: LD_VAR 0 3
64762: RET
// export function ComExit ( unit ) ; var tmp ; begin
64763: LD_INT 0
64765: PPUSH
64766: PPUSH
// if not IsInUnit ( unit ) then
64767: LD_VAR 0 1
64771: PPUSH
64772: CALL_OW 310
64776: NOT
64777: IFFALSE 64781
// exit ;
64779: GO 64841
// tmp := IsInUnit ( unit ) ;
64781: LD_ADDR_VAR 0 3
64785: PUSH
64786: LD_VAR 0 1
64790: PPUSH
64791: CALL_OW 310
64795: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64796: LD_VAR 0 3
64800: PPUSH
64801: CALL_OW 247
64805: PUSH
64806: LD_INT 2
64808: EQUAL
64809: IFFALSE 64822
// ComExitVehicle ( unit ) else
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 121
64820: GO 64831
// ComExitBuilding ( unit ) ;
64822: LD_VAR 0 1
64826: PPUSH
64827: CALL_OW 122
// result := tmp ;
64831: LD_ADDR_VAR 0 2
64835: PUSH
64836: LD_VAR 0 3
64840: ST_TO_ADDR
// end ;
64841: LD_VAR 0 2
64845: RET
// export function ResetHc ; begin
64846: LD_INT 0
64848: PPUSH
// InitHc ;
64849: CALL_OW 19
// hc_importance := 0 ;
64853: LD_ADDR_OWVAR 32
64857: PUSH
64858: LD_INT 0
64860: ST_TO_ADDR
// end ;
64861: LD_VAR 0 1
64865: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64866: LD_INT 0
64868: PPUSH
64869: PPUSH
64870: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64871: LD_ADDR_VAR 0 6
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: LD_VAR 0 3
64885: PLUS
64886: PUSH
64887: LD_INT 2
64889: DIV
64890: ST_TO_ADDR
// if _x < 0 then
64891: LD_VAR 0 6
64895: PUSH
64896: LD_INT 0
64898: LESS
64899: IFFALSE 64916
// _x := _x * - 1 ;
64901: LD_ADDR_VAR 0 6
64905: PUSH
64906: LD_VAR 0 6
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: MUL
64915: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64916: LD_ADDR_VAR 0 7
64920: PUSH
64921: LD_VAR 0 2
64925: PUSH
64926: LD_VAR 0 4
64930: PLUS
64931: PUSH
64932: LD_INT 2
64934: DIV
64935: ST_TO_ADDR
// if _y < 0 then
64936: LD_VAR 0 7
64940: PUSH
64941: LD_INT 0
64943: LESS
64944: IFFALSE 64961
// _y := _y * - 1 ;
64946: LD_ADDR_VAR 0 7
64950: PUSH
64951: LD_VAR 0 7
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: MUL
64960: ST_TO_ADDR
// result := [ _x , _y ] ;
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: LD_VAR 0 6
64970: PUSH
64971: LD_VAR 0 7
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// end ;
64980: LD_VAR 0 5
64984: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64985: LD_INT 0
64987: PPUSH
64988: PPUSH
64989: PPUSH
64990: PPUSH
// task := GetTaskList ( unit ) ;
64991: LD_ADDR_VAR 0 7
64995: PUSH
64996: LD_VAR 0 1
65000: PPUSH
65001: CALL_OW 437
65005: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65006: LD_VAR 0 7
65010: NOT
65011: PUSH
65012: LD_VAR 0 1
65016: PPUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: CALL_OW 308
65026: NOT
65027: AND
65028: IFFALSE 65032
// exit ;
65030: GO 65150
// if IsInArea ( unit , area ) then
65032: LD_VAR 0 1
65036: PPUSH
65037: LD_VAR 0 2
65041: PPUSH
65042: CALL_OW 308
65046: IFFALSE 65064
// begin ComMoveToArea ( unit , goAway ) ;
65048: LD_VAR 0 1
65052: PPUSH
65053: LD_VAR 0 3
65057: PPUSH
65058: CALL_OW 113
// exit ;
65062: GO 65150
// end ; if task [ 1 ] [ 1 ] <> M then
65064: LD_VAR 0 7
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: PUSH
65073: LD_INT 1
65075: ARRAY
65076: PUSH
65077: LD_STRING M
65079: NONEQUAL
65080: IFFALSE 65084
// exit ;
65082: GO 65150
// x := task [ 1 ] [ 2 ] ;
65084: LD_ADDR_VAR 0 5
65088: PUSH
65089: LD_VAR 0 7
65093: PUSH
65094: LD_INT 1
65096: ARRAY
65097: PUSH
65098: LD_INT 2
65100: ARRAY
65101: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65102: LD_ADDR_VAR 0 6
65106: PUSH
65107: LD_VAR 0 7
65111: PUSH
65112: LD_INT 1
65114: ARRAY
65115: PUSH
65116: LD_INT 3
65118: ARRAY
65119: ST_TO_ADDR
// if InArea ( x , y , area ) then
65120: LD_VAR 0 5
65124: PPUSH
65125: LD_VAR 0 6
65129: PPUSH
65130: LD_VAR 0 2
65134: PPUSH
65135: CALL_OW 309
65139: IFFALSE 65150
// ComStop ( unit ) ;
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 141
// end ;
65150: LD_VAR 0 4
65154: RET
// export function Abs ( value ) ; begin
65155: LD_INT 0
65157: PPUSH
// result := value ;
65158: LD_ADDR_VAR 0 2
65162: PUSH
65163: LD_VAR 0 1
65167: ST_TO_ADDR
// if value < 0 then
65168: LD_VAR 0 1
65172: PUSH
65173: LD_INT 0
65175: LESS
65176: IFFALSE 65193
// result := value * - 1 ;
65178: LD_ADDR_VAR 0 2
65182: PUSH
65183: LD_VAR 0 1
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: MUL
65192: ST_TO_ADDR
// end ;
65193: LD_VAR 0 2
65197: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65198: LD_INT 0
65200: PPUSH
65201: PPUSH
65202: PPUSH
65203: PPUSH
65204: PPUSH
65205: PPUSH
65206: PPUSH
65207: PPUSH
// if not unit or not building then
65208: LD_VAR 0 1
65212: NOT
65213: PUSH
65214: LD_VAR 0 2
65218: NOT
65219: OR
65220: IFFALSE 65224
// exit ;
65222: GO 65450
// x := GetX ( building ) ;
65224: LD_ADDR_VAR 0 4
65228: PUSH
65229: LD_VAR 0 2
65233: PPUSH
65234: CALL_OW 250
65238: ST_TO_ADDR
// y := GetY ( building ) ;
65239: LD_ADDR_VAR 0 6
65243: PUSH
65244: LD_VAR 0 2
65248: PPUSH
65249: CALL_OW 251
65253: ST_TO_ADDR
// d := GetDir ( building ) ;
65254: LD_ADDR_VAR 0 8
65258: PUSH
65259: LD_VAR 0 2
65263: PPUSH
65264: CALL_OW 254
65268: ST_TO_ADDR
// r := 4 ;
65269: LD_ADDR_VAR 0 9
65273: PUSH
65274: LD_INT 4
65276: ST_TO_ADDR
// for i := 1 to 5 do
65277: LD_ADDR_VAR 0 10
65281: PUSH
65282: DOUBLE
65283: LD_INT 1
65285: DEC
65286: ST_TO_ADDR
65287: LD_INT 5
65289: PUSH
65290: FOR_TO
65291: IFFALSE 65448
// begin _x := ShiftX ( x , d , r + i ) ;
65293: LD_ADDR_VAR 0 5
65297: PUSH
65298: LD_VAR 0 4
65302: PPUSH
65303: LD_VAR 0 8
65307: PPUSH
65308: LD_VAR 0 9
65312: PUSH
65313: LD_VAR 0 10
65317: PLUS
65318: PPUSH
65319: CALL_OW 272
65323: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65324: LD_ADDR_VAR 0 7
65328: PUSH
65329: LD_VAR 0 6
65333: PPUSH
65334: LD_VAR 0 8
65338: PPUSH
65339: LD_VAR 0 9
65343: PUSH
65344: LD_VAR 0 10
65348: PLUS
65349: PPUSH
65350: CALL_OW 273
65354: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65355: LD_VAR 0 5
65359: PPUSH
65360: LD_VAR 0 7
65364: PPUSH
65365: CALL_OW 488
65369: PUSH
65370: LD_VAR 0 5
65374: PPUSH
65375: LD_VAR 0 7
65379: PPUSH
65380: CALL_OW 428
65384: PPUSH
65385: CALL_OW 247
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: IN
65400: NOT
65401: AND
65402: IFFALSE 65446
// begin ComMoveXY ( unit , _x , _y ) ;
65404: LD_VAR 0 1
65408: PPUSH
65409: LD_VAR 0 5
65413: PPUSH
65414: LD_VAR 0 7
65418: PPUSH
65419: CALL_OW 111
// result := [ _x , _y ] ;
65423: LD_ADDR_VAR 0 3
65427: PUSH
65428: LD_VAR 0 5
65432: PUSH
65433: LD_VAR 0 7
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// exit ;
65442: POP
65443: POP
65444: GO 65450
// end ; end ;
65446: GO 65290
65448: POP
65449: POP
// end ;
65450: LD_VAR 0 3
65454: RET
