// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10713 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8427 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10332 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10589 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10589 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10589 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10589 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7244 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7239
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7239
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7238
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7234
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 92
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 1
7117: PPUSH
7118: LD_INT 5
7120: PPUSH
7121: CALL_OW 12
7125: ARRAY
7126: ST_TO_ADDR
// veh := CreateVehicle ;
7127: LD_ADDR_VAR 0 5
7131: PUSH
7132: CALL_OW 45
7136: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7137: LD_VAR 0 5
7141: PPUSH
7142: LD_INT 16
7144: PPUSH
7145: LD_INT 0
7147: PPUSH
7148: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7152: LD_INT 0
7154: PPUSH
7155: LD_INT 3
7157: PPUSH
7158: LD_VAR 0 6
7162: PPUSH
7163: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7167: CALL_OW 44
7171: PPUSH
7172: LD_VAR 0 5
7176: PPUSH
7177: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7181: LD_ADDR_EXP 11
7185: PUSH
7186: LD_EXP 11
7190: PPUSH
7191: LD_EXP 11
7195: PUSH
7196: LD_INT 1
7198: PLUS
7199: PPUSH
7200: LD_VAR 0 5
7204: PPUSH
7205: CALL_OW 1
7209: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7210: LD_VAR 0 5
7214: PPUSH
7215: LD_INT 125
7217: PPUSH
7218: LD_INT 31
7220: PPUSH
7221: CALL_OW 111
// Wait ( 0 0$02 ) ;
7225: LD_INT 70
7227: PPUSH
7228: CALL_OW 67
// end ;
7232: GO 7061
7234: POP
7235: POP
// end ; end ;
7236: GO 7239
7238: POP
// end ;
7239: LD_VAR 0 2
7243: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// areas := [ river1 , river2 ] ;
7251: LD_ADDR_VAR 0 4
7255: PUSH
7256: LD_INT 14
7258: PUSH
7259: LD_INT 15
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: LD_INT 6
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: PUSH
7285: LD_OWVAR 67
7289: ARRAY
7290: ST_TO_ADDR
// uc_side := 2 ;
7291: LD_ADDR_OWVAR 20
7295: PUSH
7296: LD_INT 2
7298: ST_TO_ADDR
// uc_nation := 2 ;
7299: LD_ADDR_OWVAR 21
7303: PUSH
7304: LD_INT 2
7306: ST_TO_ADDR
// hc_name :=  ;
7307: LD_ADDR_OWVAR 26
7311: PUSH
7312: LD_STRING 
7314: ST_TO_ADDR
// hc_gallery :=  ;
7315: LD_ADDR_OWVAR 33
7319: PUSH
7320: LD_STRING 
7322: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: DOUBLE
7329: LD_INT 1
7331: DEC
7332: ST_TO_ADDR
7333: LD_INT 1
7335: PUSH
7336: LD_INT 2
7338: PUSH
7339: LD_INT 2
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: PUSH
7347: LD_OWVAR 67
7351: ARRAY
7352: PUSH
7353: FOR_TO
7354: IFFALSE 7490
// begin vc_chassis := ar_hovercraft ;
7356: LD_ADDR_OWVAR 37
7360: PUSH
7361: LD_INT 11
7363: ST_TO_ADDR
// vc_engine := engine_solar ;
7364: LD_ADDR_OWVAR 39
7368: PUSH
7369: LD_INT 2
7371: ST_TO_ADDR
// vc_control := control_manual ;
7372: LD_ADDR_OWVAR 38
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7380: LD_ADDR_OWVAR 40
7384: PUSH
7385: LD_INT 24
7387: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7388: LD_ADDR_OWVAR 41
7392: PUSH
7393: LD_INT 100
7395: ST_TO_ADDR
// un := CreateVehicle ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: CALL_OW 45
7405: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7406: LD_VAR 0 3
7410: PPUSH
7411: LD_INT 121
7413: PPUSH
7414: LD_INT 69
7416: PPUSH
7417: LD_INT 4
7419: PPUSH
7420: LD_INT 0
7422: PPUSH
7423: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7427: LD_INT 0
7429: PPUSH
7430: LD_INT 3
7432: PPUSH
7433: LD_VAR 0 5
7437: PPUSH
7438: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7442: CALL_OW 44
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7456: LD_ADDR_EXP 9
7460: PUSH
7461: LD_EXP 9
7465: PPUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_VAR 0 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 2
7487: ST_TO_ADDR
// end ;
7488: GO 7353
7490: POP
7491: POP
// end ;
7492: LD_VAR 0 1
7496: RET
// every 0 0$01 trigger riv do var i , c ;
7497: LD_EXP 9
7501: IFFALSE 7936
7503: GO 7505
7505: DISABLE
7506: LD_INT 0
7508: PPUSH
7509: PPUSH
// begin enable ;
7510: ENABLE
// for i = riv downto 1 do
7511: LD_ADDR_VAR 0 1
7515: PUSH
7516: DOUBLE
7517: LD_EXP 9
7521: INC
7522: ST_TO_ADDR
7523: LD_INT 1
7525: PUSH
7526: FOR_DOWNTO
7527: IFFALSE 7934
// begin if not riv [ i ] [ 1 ] then
7529: LD_EXP 9
7533: PUSH
7534: LD_VAR 0 1
7538: ARRAY
7539: PUSH
7540: LD_INT 1
7542: ARRAY
7543: NOT
7544: IFFALSE 7566
// begin riv := Delete ( riv , 1 ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL_OW 3
7563: ST_TO_ADDR
// break ;
7564: GO 7934
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7566: LD_EXP 9
7570: PUSH
7571: LD_VAR 0 1
7575: ARRAY
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: CALL_OW 314
7585: NOT
7586: IFFALSE 7654
// begin if riv [ i ] [ 2 ] = 1 then
7588: LD_EXP 9
7592: PUSH
7593: LD_VAR 0 1
7597: ARRAY
7598: PUSH
7599: LD_INT 2
7601: ARRAY
7602: PUSH
7603: LD_INT 1
7605: EQUAL
7606: IFFALSE 7618
// c := 2 else
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 2
7615: ST_TO_ADDR
7616: GO 7626
// c := 1 ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: LD_INT 1
7625: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7626: LD_ADDR_EXP 9
7630: PUSH
7631: LD_EXP 9
7635: PPUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_VAR 0 2
7648: PPUSH
7649: CALL 10332 0 4
7653: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7654: LD_EXP 9
7658: PUSH
7659: LD_VAR 0 1
7663: ARRAY
7664: PUSH
7665: LD_INT 1
7667: ARRAY
7668: PPUSH
7669: LD_INT 14
7671: PUSH
7672: LD_INT 15
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_EXP 9
7683: PUSH
7684: LD_VAR 0 1
7688: ARRAY
7689: PUSH
7690: LD_INT 2
7692: ARRAY
7693: ARRAY
7694: PPUSH
7695: CALL_OW 308
7699: NOT
7700: IFFALSE 7932
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7702: LD_EXP 9
7706: PUSH
7707: LD_VAR 0 1
7711: ARRAY
7712: PUSH
7713: LD_INT 1
7715: ARRAY
7716: PPUSH
7717: CALL_OW 261
7721: PUSH
7722: LD_INT 50
7724: LESS
7725: IFFALSE 7749
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7727: LD_EXP 9
7731: PUSH
7732: LD_VAR 0 1
7736: ARRAY
7737: PUSH
7738: LD_INT 1
7740: ARRAY
7741: PPUSH
7742: LD_INT 67
7744: PPUSH
7745: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7749: LD_EXP 9
7753: PUSH
7754: LD_VAR 0 1
7758: ARRAY
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PPUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 69
7778: PPUSH
7779: LD_EXP 9
7783: PUSH
7784: LD_VAR 0 1
7788: ARRAY
7789: PUSH
7790: LD_INT 1
7792: ARRAY
7793: PPUSH
7794: CALL_OW 74
7798: PPUSH
7799: CALL_OW 296
7803: PUSH
7804: LD_INT 9
7806: LESS
7807: IFFALSE 7865
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7809: LD_EXP 9
7813: PUSH
7814: LD_VAR 0 1
7818: ARRAY
7819: PUSH
7820: LD_INT 1
7822: ARRAY
7823: PPUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 69
7838: PPUSH
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: CALL_OW 74
7858: PPUSH
7859: CALL_OW 115
7863: GO 7932
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7865: LD_EXP 9
7869: PUSH
7870: LD_VAR 0 1
7874: ARRAY
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: LD_INT 14
7882: PUSH
7883: LD_INT 15
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_EXP 9
7894: PUSH
7895: LD_VAR 0 1
7899: ARRAY
7900: PUSH
7901: LD_INT 2
7903: ARRAY
7904: ARRAY
7905: PPUSH
7906: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7910: LD_EXP 9
7914: PUSH
7915: LD_VAR 0 1
7919: ARRAY
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: LD_INT 350
7927: PPUSH
7928: CALL_OW 202
// end ; end ; end ;
7932: GO 7526
7934: POP
7935: POP
// end ;
7936: PPOPN 2
7938: END
// every 10 10$00 trigger convoy_start do var i , un ;
7939: LD_EXP 7
7943: IFFALSE 8064
7945: GO 7947
7947: DISABLE
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
// begin enable ;
7952: ENABLE
// for i = 1 to 2 do
7953: LD_ADDR_VAR 0 1
7957: PUSH
7958: DOUBLE
7959: LD_INT 1
7961: DEC
7962: ST_TO_ADDR
7963: LD_INT 2
7965: PUSH
7966: FOR_TO
7967: IFFALSE 8062
// begin uc_side := 2 ;
7969: LD_ADDR_OWVAR 20
7973: PUSH
7974: LD_INT 2
7976: ST_TO_ADDR
// uc_nation := 2 ;
7977: LD_ADDR_OWVAR 21
7981: PUSH
7982: LD_INT 2
7984: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7985: LD_INT 0
7987: PPUSH
7988: LD_INT 1
7990: PPUSH
7991: LD_INT 4
7993: PPUSH
7994: CALL_OW 380
// un := CreateHuman ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: CALL_OW 44
8007: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_INT 10
8015: PPUSH
8016: LD_INT 2
8018: PPUSH
8019: LD_INT 0
8021: PPUSH
8022: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8026: LD_VAR 0 2
8030: PPUSH
8031: LD_INT 24
8033: PPUSH
8034: LD_INT 36
8036: PPUSH
8037: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8041: LD_VAR 0 2
8045: PPUSH
8046: LD_INT 9
8048: PPUSH
8049: CALL_OW 173
// Wait ( 0 0$02 ) ;
8053: LD_INT 70
8055: PPUSH
8056: CALL_OW 67
// end ;
8060: GO 7966
8062: POP
8063: POP
// end ;
8064: PPOPN 2
8066: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8067: LD_INT 22
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PPUSH
8077: CALL_OW 69
8081: IFFALSE 8393
8083: GO 8085
8085: DISABLE
8086: LD_INT 0
8088: PPUSH
8089: PPUSH
// begin enable ;
8090: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: LD_INT 22
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_EXP 11
8115: DIFF
8116: ST_TO_ADDR
// if rest then
8117: LD_VAR 0 2
8121: IFFALSE 8193
// for i in rest do
8123: LD_ADDR_VAR 0 1
8127: PUSH
8128: LD_VAR 0 2
8132: PUSH
8133: FOR_IN
8134: IFFALSE 8191
// if GetClass ( i ) = 3 then
8136: LD_VAR 0 1
8140: PPUSH
8141: CALL_OW 257
8145: PUSH
8146: LD_INT 3
8148: EQUAL
8149: IFFALSE 8189
// begin if not IsInArea ( i , ar2 ) then
8151: LD_VAR 0 1
8155: PPUSH
8156: LD_INT 17
8158: PPUSH
8159: CALL_OW 308
8163: NOT
8164: IFFALSE 8180
// ComMoveToArea ( i , ar2 ) else
8166: LD_VAR 0 1
8170: PPUSH
8171: LD_INT 17
8173: PPUSH
8174: CALL_OW 113
8178: GO 8189
// RemoveUnit ( i ) ;
8180: LD_VAR 0 1
8184: PPUSH
8185: CALL_OW 64
// end ;
8189: GO 8133
8191: POP
8192: POP
// if ar_force then
8193: LD_EXP 11
8197: IFFALSE 8393
// begin if ar_force > 15 then
8199: LD_EXP 11
8203: PUSH
8204: LD_INT 15
8206: GREATER
8207: IFFALSE 8224
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8209: LD_EXP 11
8213: PPUSH
8214: LD_INT 58
8216: PPUSH
8217: LD_INT 51
8219: PPUSH
8220: CALL_OW 114
// for i in ar_force do
8224: LD_ADDR_VAR 0 1
8228: PUSH
8229: LD_EXP 11
8233: PUSH
8234: FOR_IN
8235: IFFALSE 8391
// begin if GetClass ( i ) = class_soldier then
8237: LD_VAR 0 1
8241: PPUSH
8242: CALL_OW 257
8246: PUSH
8247: LD_INT 1
8249: EQUAL
8250: IFFALSE 8342
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 10589 0 1
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: IN
8277: IFFALSE 8323
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL 10589 0 1
8293: PPUSH
8294: CALL_OW 250
8298: PPUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL 10589 0 1
8308: PPUSH
8309: CALL_OW 251
8313: PPUSH
8314: LD_INT 0
8316: PPUSH
8317: CALL_OW 132
8321: GO 8342
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8323: LD_VAR 0 1
8327: PPUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL 10589 0 1
8337: PPUSH
8338: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL_OW 257
8351: PUSH
8352: LD_INT 1
8354: EQUAL
8355: NOT
8356: PUSH
8357: LD_VAR 0 1
8361: PPUSH
8362: CALL_OW 314
8366: NOT
8367: AND
8368: IFFALSE 8389
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8370: LD_VAR 0 1
8374: PPUSH
8375: LD_VAR 0 1
8379: PPUSH
8380: CALL 10589 0 1
8384: PPUSH
8385: CALL_OW 115
// end ;
8389: GO 8234
8391: POP
8392: POP
// end ; end ;
8393: PPOPN 2
8395: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8396: LD_INT 9
8398: PPUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 70
8413: IFFALSE 8426
8415: GO 8417
8417: DISABLE
// medal2 := false ; end_of_file
8418: LD_ADDR_EXP 4
8422: PUSH
8423: LD_INT 0
8425: ST_TO_ADDR
8426: END
// export function Action ; begin
8427: LD_INT 0
8429: PPUSH
// case Query ( info ) of 1 :
8430: LD_STRING info
8432: PPUSH
8433: CALL_OW 97
8437: PUSH
8438: LD_INT 1
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8449
8446: POP
// ; end ;
8447: GO 8450
8449: POP
// ChangeMissionObjectives ( PM_1 ) ;
8450: LD_STRING PM_1
8452: PPUSH
8453: CALL_OW 337
// SaveForQuickRestart ;
8457: CALL_OW 22
// end ;
8461: LD_VAR 0 1
8465: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8466: LD_INT 50
8468: PPUSH
8469: CALL_OW 255
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: IFFALSE 8758
8479: GO 8481
8481: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8482: LD_EXP 16
8486: PPUSH
8487: LD_STRING DPM_S1
8489: PPUSH
8490: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8494: LD_EXP 17
8498: PPUSH
8499: LD_STRING DPM_P1
8501: PPUSH
8502: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8506: LD_EXP 16
8510: PPUSH
8511: LD_STRING DPM_S2
8513: PPUSH
8514: CALL_OW 88
// SaveForQuickRestart ;
8518: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8522: LD_STRING PM_2
8524: PPUSH
8525: CALL_OW 337
// Wait ( 2 2$30 ) ;
8529: LD_INT 5250
8531: PPUSH
8532: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8536: LD_INT 117
8538: PPUSH
8539: LD_INT 4
8541: PPUSH
8542: CALL_OW 84
// Convoy ( 1 ) ;
8546: LD_INT 1
8548: PPUSH
8549: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8553: LD_INT 1050
8555: PPUSH
8556: CALL_OW 67
// Convoy ( 2 ) ;
8560: LD_INT 2
8562: PPUSH
8563: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8567: LD_INT 3150
8569: PPUSH
8570: CALL_OW 67
// Convoy ( 3 ) ;
8574: LD_INT 3
8576: PPUSH
8577: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8581: LD_INT 8400
8583: PPUSH
8584: CALL_OW 67
// convoy_start := true ;
8588: LD_ADDR_EXP 7
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// PrepareArabian ;
8596: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8600: LD_INT 1
8602: PPUSH
8603: CALL 6376 0 1
// while ( convoy_start ) do
8607: LD_EXP 7
8611: IFFALSE 8758
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8613: LD_INT 4200
8615: PPUSH
8616: LD_INT 7350
8618: PPUSH
8619: CALL_OW 12
8623: PPUSH
8624: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8628: LD_INT 22
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PPUSH
8638: CALL_OW 69
8642: PUSH
8643: LD_INT 20
8645: LESS
8646: IFFALSE 8663
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8648: LD_INT 1
8650: PPUSH
8651: LD_INT 2
8653: PPUSH
8654: CALL_OW 12
8658: PPUSH
8659: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8663: LD_INT 1
8665: PPUSH
8666: LD_INT 5
8668: PPUSH
8669: CALL_OW 12
8673: PPUSH
8674: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8678: LD_ADDR_EXP 13
8682: PUSH
8683: LD_EXP 13
8687: PUSH
8688: LD_INT 1
8690: PLUS
8691: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8692: LD_EXP 13
8696: PUSH
8697: LD_INT 4
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: LD_OWVAR 67
8715: ARRAY
8716: MOD
8717: PUSH
8718: LD_INT 0
8720: EQUAL
8721: IFFALSE 8756
// begin Wait ( 1 1$20 ) ;
8723: LD_INT 2800
8725: PPUSH
8726: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8730: LD_EXP 25
8734: PPUSH
8735: LD_STRING DPM_F2
8737: PPUSH
8738: CALL_OW 94
// PrepareAttack ( 3 ) ;
8742: LD_INT 3
8744: PPUSH
8745: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8749: LD_INT 6300
8751: PPUSH
8752: CALL_OW 67
// end ; end ;
8756: GO 8607
// end ;
8758: END
// every 0 0$1 trigger safeCounter > 30 do
8759: LD_EXP 15
8763: PUSH
8764: LD_INT 30
8766: GREATER
8767: IFFALSE 8779
8769: GO 8771
8771: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8772: LD_STRING ACH_SAFE
8774: PPUSH
8775: CALL_OW 543
8779: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8780: LD_EXP 13
8784: PUSH
8785: LD_INT 3
8787: MOD
8788: PUSH
8789: LD_INT 0
8791: EQUAL
8792: PUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 69
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: AND
8812: IFFALSE 8829
8814: GO 8816
8816: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8817: LD_EXP 25
8821: PPUSH
8822: LD_STRING DPM_F3
8824: PPUSH
8825: CALL_OW 94
8829: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8830: LD_EXP 13
8834: PUSH
8835: LD_INT 5
8837: MOD
8838: PUSH
8839: LD_INT 0
8841: EQUAL
8842: PUSH
8843: LD_INT 22
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 69
8857: PUSH
8858: LD_INT 0
8860: EQUAL
8861: AND
8862: IFFALSE 8879
8864: GO 8866
8866: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8867: LD_EXP 25
8871: PPUSH
8872: LD_STRING DPM_F4
8874: PPUSH
8875: CALL_OW 94
8879: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8880: LD_EXP 7
8884: PUSH
8885: LD_EXP 13
8889: PUSH
8890: LD_INT 8
8892: PUSH
8893: LD_INT 9
8895: PUSH
8896: LD_INT 10
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_OWVAR 67
8908: ARRAY
8909: GREATEREQUAL
8910: AND
8911: PUSH
8912: LD_INT 22
8914: PUSH
8915: LD_INT 6
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 69
8926: PUSH
8927: LD_INT 0
8929: EQUAL
8930: AND
8931: IFFALSE 9030
8933: GO 8935
8935: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8936: LD_EXP 17
8940: PPUSH
8941: LD_STRING DPM_PEnd
8943: PPUSH
8944: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8948: LD_STRING med1
8950: PPUSH
8951: LD_EXP 3
8955: PPUSH
8956: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8960: LD_STRING med2
8962: PPUSH
8963: LD_EXP 4
8967: PPUSH
8968: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8972: LD_EXP 8
8976: PUSH
8977: LD_INT 15
8979: PUSH
8980: LD_INT 10
8982: PUSH
8983: LD_INT 7
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: LD_OWVAR 67
8995: ARRAY
8996: GREATEREQUAL
8997: IFFALSE 9007
// medal3 := false ;
8999: LD_ADDR_EXP 5
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9007: LD_STRING med3
9009: PPUSH
9010: LD_EXP 5
9014: PPUSH
9015: CALL_OW 101
// GiveMedals ( MAIN ) ;
9019: LD_STRING MAIN
9021: PPUSH
9022: CALL_OW 102
// YouWin ;
9026: CALL_OW 103
// end ;
9030: END
// every 4 4$10 trigger convoy_start do var i ;
9031: LD_EXP 7
9035: IFFALSE 9401
9037: GO 9039
9039: DISABLE
9040: LD_INT 0
9042: PPUSH
// begin DialogueOn ;
9043: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9047: LD_EXP 17
9051: PPUSH
9052: LD_STRING DPM_PHelp
9054: PPUSH
9055: CALL_OW 94
// DialogueOff ;
9059: CALL_OW 7
// Wait ( 0 0$30 ) ;
9063: LD_INT 1050
9065: PPUSH
9066: CALL_OW 67
// Randomize ;
9070: CALL_OW 10
// uc_side := 3 ;
9074: LD_ADDR_OWVAR 20
9078: PUSH
9079: LD_INT 3
9081: ST_TO_ADDR
// uc_nation := 3 ;
9082: LD_ADDR_OWVAR 21
9086: PUSH
9087: LD_INT 3
9089: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9090: LD_ADDR_VAR 0 1
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_INT 5
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_OWVAR 67
9118: ARRAY
9119: PUSH
9120: FOR_TO
9121: IFFALSE 9161
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9123: LD_INT 0
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: LD_INT 3
9131: PPUSH
9132: CALL_OW 12
9136: PPUSH
9137: LD_INT 5
9139: PPUSH
9140: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9144: CALL_OW 44
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: LD_INT 0
9154: PPUSH
9155: CALL_OW 49
// end ;
9159: GO 9120
9161: POP
9162: POP
// vc_chassis := ru_heavy_wheeled ;
9163: LD_ADDR_OWVAR 37
9167: PUSH
9168: LD_INT 23
9170: ST_TO_ADDR
// vc_engine := engine_combustion ;
9171: LD_ADDR_OWVAR 39
9175: PUSH
9176: LD_INT 1
9178: ST_TO_ADDR
// vc_control := control_manual ;
9179: LD_ADDR_OWVAR 38
9183: PUSH
9184: LD_INT 1
9186: ST_TO_ADDR
// vc_weapon := 89 ;
9187: LD_ADDR_OWVAR 40
9191: PUSH
9192: LD_INT 89
9194: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9195: LD_ADDR_OWVAR 41
9199: PUSH
9200: LD_INT 88
9202: ST_TO_ADDR
// i := CreateVehicle ;
9203: LD_ADDR_VAR 0 1
9207: PUSH
9208: CALL_OW 45
9212: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9213: LD_VAR 0 1
9217: PPUSH
9218: LD_INT 5
9220: PPUSH
9221: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_INT 63
9232: PPUSH
9233: LD_INT 115
9235: PPUSH
9236: LD_INT 0
9238: PPUSH
9239: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9243: LD_VAR 0 1
9247: PPUSH
9248: LD_INT 1
9250: PPUSH
9251: LD_INT 200
9253: PPUSH
9254: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9258: LD_INT 0
9260: PPUSH
9261: LD_INT 3
9263: PPUSH
9264: LD_INT 5
9266: PPUSH
9267: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9271: CALL_OW 44
9275: PPUSH
9276: LD_VAR 0 1
9280: PPUSH
9281: CALL_OW 52
// DialogueOn ;
9285: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9289: LD_INT 169
9291: PPUSH
9292: LD_INT 115
9294: PPUSH
9295: CALL_OW 86
// DWait ( 0 0$01 ) ;
9299: LD_INT 35
9301: PPUSH
9302: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9306: LD_INT 63
9308: PPUSH
9309: LD_INT 115
9311: PPUSH
9312: CALL_OW 86
// DWait ( 0 0$01 ) ;
9316: LD_INT 35
9318: PPUSH
9319: CALL_OW 68
// DialogueOff ;
9323: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9327: LD_VAR 0 1
9331: PPUSH
9332: LD_INT 57
9334: PPUSH
9335: LD_INT 53
9337: PPUSH
9338: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9342: LD_INT 6300
9344: PPUSH
9345: LD_INT 14700
9347: PPUSH
9348: CALL_OW 12
9352: PPUSH
9353: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9357: LD_EXP 18
9361: PPUSH
9362: LD_INT 86
9364: PPUSH
9365: LD_INT 112
9367: PPUSH
9368: LD_INT 0
9370: PPUSH
9371: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9375: LD_INT 10
9377: PPUSH
9378: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9382: LD_EXP 18
9386: PPUSH
9387: LD_STRING DPM_Sa1
9389: PPUSH
9390: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9394: LD_STRING PM_3
9396: PPUSH
9397: CALL_OW 337
// end ;
9401: PPOPN 1
9403: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9404: LD_INT 3
9406: PPUSH
9407: LD_EXP 18
9411: PPUSH
9412: CALL_OW 292
9416: IFFALSE 9465
9418: GO 9420
9420: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9421: LD_EXP 18
9425: PPUSH
9426: LD_STRING DPM_Sa2
9428: PPUSH
9429: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9433: LD_STRING PM_4
9435: PPUSH
9436: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9440: LD_INT 40
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9453: LD_EXP 18
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: CALL_OW 235
// end ;
9465: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9466: LD_EXP 3
9470: NOT
9471: PUSH
9472: LD_INT 22
9474: PUSH
9475: LD_INT 6
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PPUSH
9482: CALL_OW 69
9486: PUSH
9487: LD_INT 0
9489: EQUAL
9490: AND
9491: IFFALSE 9553
9493: GO 9495
9495: DISABLE
// begin DialogueOn ;
9496: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9500: LD_EXP 16
9504: PPUSH
9505: LD_STRING DPM_S3
9507: PPUSH
9508: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9512: LD_INT 62
9514: PPUSH
9515: LD_INT 113
9517: PPUSH
9518: LD_INT 3
9520: PPUSH
9521: LD_INT 10
9523: PPUSH
9524: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9528: LD_INT 62
9530: PPUSH
9531: LD_INT 113
9533: PPUSH
9534: CALL_OW 84
// dwait ( 0 0$1 ) ;
9538: LD_INT 35
9540: PPUSH
9541: CALL_OW 68
// DialogueOff ;
9545: CALL_OW 7
// CounterAttack ;
9549: CALL 5789 0 0
// end ; end_of_file
9553: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9554: LD_VAR 0 1
9558: PPUSH
9559: CALL_OW 255
9563: PUSH
9564: LD_INT 1
9566: EQUAL
9567: IFFALSE 9603
// if not us_retreat then
9569: LD_EXP 22
9573: NOT
9574: IFFALSE 9603
// if GetClass ( h ) = 1 then
9576: LD_VAR 0 2
9580: PPUSH
9581: CALL_OW 257
9585: PUSH
9586: LD_INT 1
9588: EQUAL
9589: IFFALSE 9603
// ComEnterUnit ( h , us_arm ) ;
9591: LD_VAR 0 2
9595: PPUSH
9596: LD_INT 69
9598: PPUSH
9599: CALL_OW 120
// end ;
9603: PPOPN 2
9605: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL 26759 0 1
// if GetSide ( un ) = 1 then
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 255
9624: PUSH
9625: LD_INT 1
9627: EQUAL
9628: IFFALSE 9644
// us_count := us_count + 1 ;
9630: LD_ADDR_EXP 24
9634: PUSH
9635: LD_EXP 24
9639: PUSH
9640: LD_INT 1
9642: PLUS
9643: ST_TO_ADDR
// if un in us_force then
9644: LD_VAR 0 1
9648: PUSH
9649: LD_EXP 12
9653: IN
9654: IFFALSE 9672
// us_force := us_force diff un ;
9656: LD_ADDR_EXP 12
9660: PUSH
9661: LD_EXP 12
9665: PUSH
9666: LD_VAR 0 1
9670: DIFF
9671: ST_TO_ADDR
// if un in ar_force then
9672: LD_VAR 0 1
9676: PUSH
9677: LD_EXP 11
9681: IN
9682: IFFALSE 9700
// ar_force := ar_force diff un ;
9684: LD_ADDR_EXP 11
9688: PUSH
9689: LD_EXP 11
9693: PUSH
9694: LD_VAR 0 1
9698: DIFF
9699: ST_TO_ADDR
// if un = Stolypin then
9700: LD_VAR 0 1
9704: PUSH
9705: LD_EXP 16
9709: EQUAL
9710: IFFALSE 9719
// YouLost ( dead ) ;
9712: LD_STRING dead
9714: PPUSH
9715: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9719: LD_VAR 0 1
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: IN
9753: IFFALSE 9762
// YouLost ( depot ) ;
9755: LD_STRING depot
9757: PPUSH
9758: CALL_OW 104
// if GetSide ( un ) = 6 then
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 255
9771: PUSH
9772: LD_INT 6
9774: EQUAL
9775: IFFALSE 9791
// dest_counter := dest_counter + 1 ;
9777: LD_ADDR_EXP 8
9781: PUSH
9782: LD_EXP 8
9786: PUSH
9787: LD_INT 1
9789: PLUS
9790: ST_TO_ADDR
// end ;
9791: PPOPN 1
9793: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: CALL 26879 0 2
// if GetSide ( un ) = 1 then
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 255
9817: PUSH
9818: LD_INT 1
9820: EQUAL
9821: IFFALSE 9838
// ComMoveXY ( un , 57 , 52 ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: LD_INT 57
9830: PPUSH
9831: LD_INT 52
9833: PPUSH
9834: CALL_OW 111
// end ;
9838: PPOPN 2
9840: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9841: LD_EXP 21
9845: NOT
9846: IFFALSE 9896
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9848: LD_VAR 0 1
9852: PUSH
9853: LD_INT 3
9855: EQUAL
9856: PUSH
9857: LD_VAR 0 2
9861: PUSH
9862: LD_INT 1
9864: EQUAL
9865: AND
9866: PUSH
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 1
9874: EQUAL
9875: PUSH
9876: LD_VAR 0 2
9880: PUSH
9881: LD_INT 3
9883: EQUAL
9884: AND
9885: OR
9886: IFFALSE 9896
// us_alert := true ;
9888: LD_ADDR_EXP 21
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9896: LD_VAR 0 1
9900: PUSH
9901: LD_INT 6
9903: EQUAL
9904: PUSH
9905: LD_VAR 0 2
9909: PUSH
9910: LD_INT 3
9912: EQUAL
9913: AND
9914: PUSH
9915: LD_VAR 0 1
9919: PUSH
9920: LD_INT 3
9922: EQUAL
9923: PUSH
9924: LD_VAR 0 2
9928: PUSH
9929: LD_INT 6
9931: EQUAL
9932: AND
9933: OR
9934: IFFALSE 9943
// YouLost ( alat ) ;
9936: LD_STRING alat
9938: PPUSH
9939: CALL_OW 104
// end ;
9943: PPOPN 2
9945: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 255
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: PUSH
9960: LD_VAR 0 1
9964: PUSH
9965: LD_INT 58
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 69
9989: IN
9990: AND
9991: IFFALSE 10112
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9993: LD_OWVAR 3
9997: PUSH
9998: LD_VAR 0 1
10002: DIFF
10003: PPUSH
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 74
10013: PPUSH
10014: CALL_OW 255
10018: PUSH
10019: LD_INT 2
10021: NONEQUAL
10022: IFFALSE 10112
// begin Wait ( 0 0$1.3 ) ;
10024: LD_INT 46
10026: PPUSH
10027: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 250
10040: PPUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 251
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10058: LD_VAR 0 1
10062: PPUSH
10063: CALL_OW 250
10067: PPUSH
10068: LD_VAR 0 1
10072: PPUSH
10073: CALL_OW 251
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 453
// end ; end ;
10112: PPOPN 1
10114: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10115: LD_VAR 0 2
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: IN
10149: PUSH
10150: LD_VAR 0 2
10154: PPUSH
10155: CALL 10634 0 1
10159: PPUSH
10160: CALL_OW 255
10164: PUSH
10165: LD_INT 2
10167: EQUAL
10168: NOT
10169: AND
10170: IFFALSE 10295
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10172: LD_INT 105
10174: PPUSH
10175: LD_INT 210
10177: PPUSH
10178: CALL_OW 12
10182: PPUSH
10183: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10187: LD_VAR 0 2
10191: PPUSH
10192: CALL_OW 250
10196: PPUSH
10197: LD_VAR 0 2
10201: PPUSH
10202: CALL_OW 251
10206: PPUSH
10207: LD_INT 3
10209: PPUSH
10210: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10214: LD_VAR 0 2
10218: PPUSH
10219: CALL_OW 250
10223: PPUSH
10224: LD_VAR 0 2
10228: PPUSH
10229: CALL_OW 251
10233: PPUSH
10234: LD_INT 3
10236: PPUSH
10237: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10241: LD_VAR 0 2
10245: PPUSH
10246: CALL_OW 250
10250: PPUSH
10251: LD_VAR 0 2
10255: PPUSH
10256: CALL_OW 251
10260: PPUSH
10261: LD_INT 3
10263: PPUSH
10264: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10268: LD_VAR 0 2
10272: PPUSH
10273: CALL_OW 250
10277: PPUSH
10278: LD_VAR 0 2
10282: PPUSH
10283: CALL_OW 251
10287: PPUSH
10288: LD_INT 3
10290: PPUSH
10291: CALL_OW 453
// end ; end ;
10295: PPOPN 4
10297: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10298: LD_VAR 0 1
10302: PPUSH
10303: LD_VAR 0 2
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: CALL 26855 0 3
// end ;
10317: PPOPN 3
10319: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL 26863 0 1
// end ; end_of_file
10329: PPOPN 1
10331: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10332: LD_INT 0
10334: PPUSH
10335: PPUSH
10336: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10337: LD_ADDR_VAR 0 7
10341: PUSH
10342: LD_VAR 0 1
10346: PUSH
10347: LD_VAR 0 2
10351: ARRAY
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_VAR 0 4
10362: PPUSH
10363: CALL_OW 1
10367: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10368: LD_ADDR_VAR 0 1
10372: PUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: LD_VAR 0 2
10382: PPUSH
10383: LD_VAR 0 7
10387: PPUSH
10388: CALL_OW 1
10392: ST_TO_ADDR
// result := tab ;
10393: LD_ADDR_VAR 0 5
10397: PUSH
10398: LD_VAR 0 1
10402: ST_TO_ADDR
// end ;
10403: LD_VAR 0 5
10407: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10408: LD_INT 0
10410: PPUSH
10411: PPUSH
10412: PPUSH
// if not GetControl ( veh ) = control_manual then
10413: LD_VAR 0 1
10417: PPUSH
10418: CALL_OW 263
10422: PUSH
10423: LD_INT 1
10425: EQUAL
10426: NOT
10427: IFFALSE 10439
// result := false else
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
10437: GO 10584
// if veh in FilterAllUnits ( [ f_empty ] ) then
10439: LD_VAR 0 1
10443: PUSH
10444: LD_INT 58
10446: PUSH
10447: EMPTY
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: IN
10455: IFFALSE 10467
// result := false else
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
10465: GO 10584
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10467: LD_ADDR_VAR 0 4
10471: PUSH
10472: LD_INT 22
10474: PUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 255
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 55
10491: PUSH
10492: EMPTY
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: ST_TO_ADDR
// if not filter then
10504: LD_VAR 0 4
10508: NOT
10509: IFFALSE 10521
// result := false else
10511: LD_ADDR_VAR 0 2
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
10519: GO 10584
// for i = 1 to filter do
10521: LD_ADDR_VAR 0 3
10525: PUSH
10526: DOUBLE
10527: LD_INT 1
10529: DEC
10530: ST_TO_ADDR
10531: LD_VAR 0 4
10535: PUSH
10536: FOR_TO
10537: IFFALSE 10582
// if IsDriver ( filter [ i ] ) = veh then
10539: LD_VAR 0 4
10543: PUSH
10544: LD_VAR 0 3
10548: ARRAY
10549: PPUSH
10550: CALL 66033 0 1
10554: PUSH
10555: LD_VAR 0 1
10559: EQUAL
10560: IFFALSE 10580
// begin result := filter [ i ] ;
10562: LD_ADDR_VAR 0 2
10566: PUSH
10567: LD_VAR 0 4
10571: PUSH
10572: LD_VAR 0 3
10576: ARRAY
10577: ST_TO_ADDR
// break ;
10578: GO 10582
// end ;
10580: GO 10536
10582: POP
10583: POP
// end ; end ;
10584: LD_VAR 0 2
10588: RET
// export function FindTarget ( unit ) ; begin
10589: LD_INT 0
10591: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10592: LD_ADDR_VAR 0 2
10596: PUSH
10597: LD_INT 81
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PPUSH
10619: LD_VAR 0 1
10623: PPUSH
10624: CALL_OW 74
10628: ST_TO_ADDR
// end ;
10629: LD_VAR 0 2
10633: RET
// export function NearestUnit ( unit ) ; begin
10634: LD_INT 0
10636: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_OWVAR 3
10646: PUSH
10647: LD_VAR 0 1
10651: DIFF
10652: PPUSH
10653: LD_VAR 0 1
10657: PPUSH
10658: CALL_OW 74
10662: ST_TO_ADDR
// end ; end_of_file
10663: LD_VAR 0 2
10667: RET
// every 12 12$00 do
10668: GO 10670
10670: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10671: LD_INT 1
10673: PPUSH
10674: LD_INT 570
10676: PPUSH
10677: LD_INT 350
10679: PPUSH
10680: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10684: LD_INT 10500
10686: PPUSH
10687: LD_INT 21000
10689: PPUSH
10690: CALL_OW 12
10694: PPUSH
10695: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10699: LD_INT 0
10701: PPUSH
10702: LD_INT 570
10704: PPUSH
10705: LD_INT 350
10707: PPUSH
10708: CALL_OW 550
// end ;
10712: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10713: LD_INT 0
10715: PPUSH
10716: PPUSH
10717: PPUSH
10718: PPUSH
10719: PPUSH
// uc_nation = nation_nature ;
10720: LD_ADDR_OWVAR 21
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// uc_side = 0 ;
10728: LD_ADDR_OWVAR 20
10732: PUSH
10733: LD_INT 0
10735: ST_TO_ADDR
// l = 0 ;
10736: LD_ADDR_VAR 0 6
10740: PUSH
10741: LD_INT 0
10743: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10744: LD_ADDR_OWVAR 24
10748: PUSH
10749: LD_INT 0
10751: PPUSH
10752: LD_INT 5
10754: PPUSH
10755: CALL_OW 12
10759: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10760: LD_ADDR_OWVAR 35
10764: PUSH
10765: LD_INT 5
10767: NEG
10768: PPUSH
10769: LD_INT 5
10771: PPUSH
10772: CALL_OW 12
10776: ST_TO_ADDR
// hc_gallery =  ;
10777: LD_ADDR_OWVAR 33
10781: PUSH
10782: LD_STRING 
10784: ST_TO_ADDR
// hc_class = class_apeman ;
10785: LD_ADDR_OWVAR 28
10789: PUSH
10790: LD_INT 12
10792: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10793: LD_ADDR_OWVAR 29
10797: PUSH
10798: LD_INT 11
10800: PPUSH
10801: LD_INT 13
10803: PPUSH
10804: CALL_OW 12
10808: PUSH
10809: LD_INT 10
10811: PPUSH
10812: LD_INT 11
10814: PPUSH
10815: CALL_OW 12
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: ST_TO_ADDR
// hc_sex = sex_male ;
10824: LD_ADDR_OWVAR 27
10828: PUSH
10829: LD_INT 1
10831: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10832: LD_ADDR_OWVAR 31
10836: PUSH
10837: LD_INT 0
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 12
10847: PUSH
10848: LD_INT 0
10850: PUSH
10851: LD_INT 0
10853: PUSH
10854: LD_INT 0
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: ST_TO_ADDR
// apeman = CreateHuman ;
10863: LD_ADDR_VAR 0 7
10867: PUSH
10868: CALL_OW 44
10872: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10873: LD_VAR 0 7
10877: PPUSH
10878: LD_VAR 0 4
10882: PPUSH
10883: LD_INT 0
10885: PPUSH
10886: CALL_OW 49
// l = l + 1 ;
10890: LD_ADDR_VAR 0 6
10894: PUSH
10895: LD_VAR 0 6
10899: PUSH
10900: LD_INT 1
10902: PLUS
10903: ST_TO_ADDR
// end until l = num1 ;
10904: LD_VAR 0 6
10908: PUSH
10909: LD_VAR 0 1
10913: EQUAL
10914: IFFALSE 10744
// l = 0 ;
10916: LD_ADDR_VAR 0 6
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10924: LD_ADDR_OWVAR 35
10928: PUSH
10929: LD_INT 0
10931: PPUSH
10932: LD_INT 25
10934: PPUSH
10935: CALL_OW 12
10939: ST_TO_ADDR
// hc_class = class_tiger ;
10940: LD_ADDR_OWVAR 28
10944: PUSH
10945: LD_INT 14
10947: ST_TO_ADDR
// hc_sex = sex_male ;
10948: LD_ADDR_OWVAR 27
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// hc_gallery = sandnature ;
10956: LD_ADDR_OWVAR 33
10960: PUSH
10961: LD_STRING sandnature
10963: ST_TO_ADDR
// hc_face_number = 3 ;
10964: LD_ADDR_OWVAR 34
10968: PUSH
10969: LD_INT 3
10971: ST_TO_ADDR
// tiger = CreateHuman ;
10972: LD_ADDR_VAR 0 8
10976: PUSH
10977: CALL_OW 44
10981: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10982: LD_VAR 0 8
10986: PPUSH
10987: LD_VAR 0 4
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 49
// l = l + 1 ;
10999: LD_ADDR_VAR 0 6
11003: PUSH
11004: LD_VAR 0 6
11008: PUSH
11009: LD_INT 1
11011: PLUS
11012: ST_TO_ADDR
// end until l = num2 ;
11013: LD_VAR 0 6
11017: PUSH
11018: LD_VAR 0 2
11022: EQUAL
11023: IFFALSE 10924
// l = 0 ;
11025: LD_ADDR_VAR 0 6
11029: PUSH
11030: LD_INT 0
11032: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11033: LD_ADDR_OWVAR 28
11037: PUSH
11038: LD_INT 18
11040: ST_TO_ADDR
// hc_gallery = sandnature ;
11041: LD_ADDR_OWVAR 33
11045: PUSH
11046: LD_STRING sandnature
11048: ST_TO_ADDR
// hc_face_number = 1 ;
11049: LD_ADDR_OWVAR 34
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// bird = CreateHuman ;
11057: LD_ADDR_VAR 0 9
11061: PUSH
11062: CALL_OW 44
11066: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11067: LD_VAR 0 9
11071: PPUSH
11072: LD_INT 0
11074: PPUSH
11075: CALL_OW 51
// l = l + 1 ;
11079: LD_ADDR_VAR 0 6
11083: PUSH
11084: LD_VAR 0 6
11088: PUSH
11089: LD_INT 1
11091: PLUS
11092: ST_TO_ADDR
// end until l = num3 ;
11093: LD_VAR 0 6
11097: PUSH
11098: LD_VAR 0 3
11102: EQUAL
11103: IFFALSE 11033
// end ; end_of_file end_of_file
11105: LD_VAR 0 5
11109: RET
// every 0 0$1 do
11110: GO 11112
11112: DISABLE
// begin enable ;
11113: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11114: LD_STRING updateTimer(
11116: PUSH
11117: LD_OWVAR 1
11121: STR
11122: PUSH
11123: LD_STRING );
11125: STR
11126: PPUSH
11127: CALL_OW 559
// end ;
11131: END
// export function SOS_MapStart ( ) ; begin
11132: LD_INT 0
11134: PPUSH
// if streamModeActive then
11135: LD_EXP 26
11139: IFFALSE 11148
// DefineStreamItems ( true ) ;
11141: LD_INT 1
11143: PPUSH
11144: CALL 12802 0 1
// UpdateFactoryWaypoints ( ) ;
11148: CALL 25663 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11152: CALL 25920 0 0
// end ;
11156: LD_VAR 0 1
11160: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11161: LD_INT 0
11163: PPUSH
// if p2 = 100 then
11164: LD_VAR 0 2
11168: PUSH
11169: LD_INT 100
11171: EQUAL
11172: IFFALSE 12175
// begin if not StreamModeActive then
11174: LD_EXP 26
11178: NOT
11179: IFFALSE 11189
// StreamModeActive := true ;
11181: LD_ADDR_EXP 26
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
// if p3 = 0 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 0
11196: EQUAL
11197: IFFALSE 11203
// InitStreamMode ;
11199: CALL 12338 0 0
// if p3 = 1 then
11203: LD_VAR 0 3
11207: PUSH
11208: LD_INT 1
11210: EQUAL
11211: IFFALSE 11221
// sRocket := true ;
11213: LD_ADDR_EXP 31
11217: PUSH
11218: LD_INT 1
11220: ST_TO_ADDR
// if p3 = 2 then
11221: LD_VAR 0 3
11225: PUSH
11226: LD_INT 2
11228: EQUAL
11229: IFFALSE 11239
// sSpeed := true ;
11231: LD_ADDR_EXP 30
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// if p3 = 3 then
11239: LD_VAR 0 3
11243: PUSH
11244: LD_INT 3
11246: EQUAL
11247: IFFALSE 11257
// sEngine := true ;
11249: LD_ADDR_EXP 32
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// if p3 = 4 then
11257: LD_VAR 0 3
11261: PUSH
11262: LD_INT 4
11264: EQUAL
11265: IFFALSE 11275
// sSpec := true ;
11267: LD_ADDR_EXP 29
11271: PUSH
11272: LD_INT 1
11274: ST_TO_ADDR
// if p3 = 5 then
11275: LD_VAR 0 3
11279: PUSH
11280: LD_INT 5
11282: EQUAL
11283: IFFALSE 11293
// sLevel := true ;
11285: LD_ADDR_EXP 33
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// if p3 = 6 then
11293: LD_VAR 0 3
11297: PUSH
11298: LD_INT 6
11300: EQUAL
11301: IFFALSE 11311
// sArmoury := true ;
11303: LD_ADDR_EXP 34
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// if p3 = 7 then
11311: LD_VAR 0 3
11315: PUSH
11316: LD_INT 7
11318: EQUAL
11319: IFFALSE 11329
// sRadar := true ;
11321: LD_ADDR_EXP 35
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// if p3 = 8 then
11329: LD_VAR 0 3
11333: PUSH
11334: LD_INT 8
11336: EQUAL
11337: IFFALSE 11347
// sBunker := true ;
11339: LD_ADDR_EXP 36
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// if p3 = 9 then
11347: LD_VAR 0 3
11351: PUSH
11352: LD_INT 9
11354: EQUAL
11355: IFFALSE 11365
// sHack := true ;
11357: LD_ADDR_EXP 37
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// if p3 = 10 then
11365: LD_VAR 0 3
11369: PUSH
11370: LD_INT 10
11372: EQUAL
11373: IFFALSE 11383
// sFire := true ;
11375: LD_ADDR_EXP 38
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 11 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 11
11390: EQUAL
11391: IFFALSE 11401
// sRefresh := true ;
11393: LD_ADDR_EXP 39
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// if p3 = 12 then
11401: LD_VAR 0 3
11405: PUSH
11406: LD_INT 12
11408: EQUAL
11409: IFFALSE 11419
// sExp := true ;
11411: LD_ADDR_EXP 40
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// if p3 = 13 then
11419: LD_VAR 0 3
11423: PUSH
11424: LD_INT 13
11426: EQUAL
11427: IFFALSE 11437
// sDepot := true ;
11429: LD_ADDR_EXP 41
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// if p3 = 14 then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_INT 14
11444: EQUAL
11445: IFFALSE 11455
// sFlag := true ;
11447: LD_ADDR_EXP 42
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// if p3 = 15 then
11455: LD_VAR 0 3
11459: PUSH
11460: LD_INT 15
11462: EQUAL
11463: IFFALSE 11473
// sKamikadze := true ;
11465: LD_ADDR_EXP 50
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// if p3 = 16 then
11473: LD_VAR 0 3
11477: PUSH
11478: LD_INT 16
11480: EQUAL
11481: IFFALSE 11491
// sTroll := true ;
11483: LD_ADDR_EXP 51
11487: PUSH
11488: LD_INT 1
11490: ST_TO_ADDR
// if p3 = 17 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 17
11498: EQUAL
11499: IFFALSE 11509
// sSlow := true ;
11501: LD_ADDR_EXP 52
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 18 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 18
11516: EQUAL
11517: IFFALSE 11527
// sLack := true ;
11519: LD_ADDR_EXP 53
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 19 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 19
11534: EQUAL
11535: IFFALSE 11545
// sTank := true ;
11537: LD_ADDR_EXP 55
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 20 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 20
11552: EQUAL
11553: IFFALSE 11563
// sRemote := true ;
11555: LD_ADDR_EXP 56
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 21 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 21
11570: EQUAL
11571: IFFALSE 11581
// sPowell := true ;
11573: LD_ADDR_EXP 57
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 22 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 22
11588: EQUAL
11589: IFFALSE 11599
// sTeleport := true ;
11591: LD_ADDR_EXP 60
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 23 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 23
11606: EQUAL
11607: IFFALSE 11617
// sOilTower := true ;
11609: LD_ADDR_EXP 62
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 24 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 24
11624: EQUAL
11625: IFFALSE 11635
// sShovel := true ;
11627: LD_ADDR_EXP 63
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 25 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 25
11642: EQUAL
11643: IFFALSE 11653
// sSheik := true ;
11645: LD_ADDR_EXP 64
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 26 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 26
11660: EQUAL
11661: IFFALSE 11671
// sEarthquake := true ;
11663: LD_ADDR_EXP 66
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 27 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 27
11678: EQUAL
11679: IFFALSE 11689
// sAI := true ;
11681: LD_ADDR_EXP 67
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 28 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 28
11696: EQUAL
11697: IFFALSE 11707
// sCargo := true ;
11699: LD_ADDR_EXP 70
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 29 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 29
11714: EQUAL
11715: IFFALSE 11725
// sDLaser := true ;
11717: LD_ADDR_EXP 71
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 30 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 30
11732: EQUAL
11733: IFFALSE 11743
// sExchange := true ;
11735: LD_ADDR_EXP 72
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 31 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 31
11750: EQUAL
11751: IFFALSE 11761
// sFac := true ;
11753: LD_ADDR_EXP 73
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 32 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 32
11768: EQUAL
11769: IFFALSE 11779
// sPower := true ;
11771: LD_ADDR_EXP 74
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 33 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 33
11786: EQUAL
11787: IFFALSE 11797
// sRandom := true ;
11789: LD_ADDR_EXP 75
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 34 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 34
11804: EQUAL
11805: IFFALSE 11815
// sShield := true ;
11807: LD_ADDR_EXP 76
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 35 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 35
11822: EQUAL
11823: IFFALSE 11833
// sTime := true ;
11825: LD_ADDR_EXP 77
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 36 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 36
11840: EQUAL
11841: IFFALSE 11851
// sTools := true ;
11843: LD_ADDR_EXP 78
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 101 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 101
11858: EQUAL
11859: IFFALSE 11869
// sSold := true ;
11861: LD_ADDR_EXP 43
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 102 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 102
11876: EQUAL
11877: IFFALSE 11887
// sDiff := true ;
11879: LD_ADDR_EXP 44
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 103 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 103
11894: EQUAL
11895: IFFALSE 11905
// sFog := true ;
11897: LD_ADDR_EXP 47
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 104 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 104
11912: EQUAL
11913: IFFALSE 11923
// sReset := true ;
11915: LD_ADDR_EXP 48
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 105 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 105
11930: EQUAL
11931: IFFALSE 11941
// sSun := true ;
11933: LD_ADDR_EXP 49
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 106 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 106
11948: EQUAL
11949: IFFALSE 11959
// sTiger := true ;
11951: LD_ADDR_EXP 45
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 107 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 107
11966: EQUAL
11967: IFFALSE 11977
// sBomb := true ;
11969: LD_ADDR_EXP 46
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 108 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 108
11984: EQUAL
11985: IFFALSE 11995
// sWound := true ;
11987: LD_ADDR_EXP 54
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 109 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 109
12002: EQUAL
12003: IFFALSE 12013
// sBetray := true ;
12005: LD_ADDR_EXP 58
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 110 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 110
12020: EQUAL
12021: IFFALSE 12031
// sContamin := true ;
12023: LD_ADDR_EXP 59
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 111 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 111
12038: EQUAL
12039: IFFALSE 12049
// sOil := true ;
12041: LD_ADDR_EXP 61
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 112 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 112
12056: EQUAL
12057: IFFALSE 12067
// sStu := true ;
12059: LD_ADDR_EXP 65
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 113 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 113
12074: EQUAL
12075: IFFALSE 12085
// sBazooka := true ;
12077: LD_ADDR_EXP 68
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 114 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 114
12092: EQUAL
12093: IFFALSE 12103
// sMortar := true ;
12095: LD_ADDR_EXP 69
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 115 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 115
12110: EQUAL
12111: IFFALSE 12121
// sRanger := true ;
12113: LD_ADDR_EXP 79
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 116 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 116
12128: EQUAL
12129: IFFALSE 12139
// sComputer := true ;
12131: LD_ADDR_EXP 80
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 117 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 117
12146: EQUAL
12147: IFFALSE 12157
// s30 := true ;
12149: LD_ADDR_EXP 81
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 118 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 118
12164: EQUAL
12165: IFFALSE 12175
// s60 := true ;
12167: LD_ADDR_EXP 82
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// end ; if p2 = 101 then
12175: LD_VAR 0 2
12179: PUSH
12180: LD_INT 101
12182: EQUAL
12183: IFFALSE 12311
// begin case p3 of 1 :
12185: LD_VAR 0 3
12189: PUSH
12190: LD_INT 1
12192: DOUBLE
12193: EQUAL
12194: IFTRUE 12198
12196: GO 12205
12198: POP
// hHackUnlimitedResources ; 2 :
12199: CALL 24409 0 0
12203: GO 12311
12205: LD_INT 2
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12220
12213: POP
// hHackSetLevel10 ; 3 :
12214: CALL 24542 0 0
12218: GO 12311
12220: LD_INT 3
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12235
12228: POP
// hHackSetLevel10YourUnits ; 4 :
12229: CALL 24627 0 0
12233: GO 12311
12235: LD_INT 4
12237: DOUBLE
12238: EQUAL
12239: IFTRUE 12243
12241: GO 12250
12243: POP
// hHackInvincible ; 5 :
12244: CALL 25075 0 0
12248: GO 12311
12250: LD_INT 5
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12265
12258: POP
// hHackInvisible ; 6 :
12259: CALL 25186 0 0
12263: GO 12311
12265: LD_INT 6
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12280
12273: POP
// hHackChangeYourSide ; 7 :
12274: CALL 25243 0 0
12278: GO 12311
12280: LD_INT 7
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12295
12288: POP
// hHackChangeUnitSide ; 8 :
12289: CALL 25285 0 0
12293: GO 12311
12295: LD_INT 8
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12310
12303: POP
// hHackFog ; end ;
12304: CALL 25386 0 0
12308: GO 12311
12310: POP
// end ; end ;
12311: LD_VAR 0 7
12315: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12316: GO 12318
12318: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12319: LD_STRING initStreamRollete();
12321: PPUSH
12322: CALL_OW 559
// InitStreamMode ;
12326: CALL 12338 0 0
// DefineStreamItems ( false ) ;
12330: LD_INT 0
12332: PPUSH
12333: CALL 12802 0 1
// end ;
12337: END
// function InitStreamMode ; begin
12338: LD_INT 0
12340: PPUSH
// streamModeActive := false ;
12341: LD_ADDR_EXP 26
12345: PUSH
12346: LD_INT 0
12348: ST_TO_ADDR
// normalCounter := 36 ;
12349: LD_ADDR_EXP 27
12353: PUSH
12354: LD_INT 36
12356: ST_TO_ADDR
// hardcoreCounter := 18 ;
12357: LD_ADDR_EXP 28
12361: PUSH
12362: LD_INT 18
12364: ST_TO_ADDR
// sRocket := false ;
12365: LD_ADDR_EXP 31
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// sSpeed := false ;
12373: LD_ADDR_EXP 30
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// sEngine := false ;
12381: LD_ADDR_EXP 32
12385: PUSH
12386: LD_INT 0
12388: ST_TO_ADDR
// sSpec := false ;
12389: LD_ADDR_EXP 29
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// sLevel := false ;
12397: LD_ADDR_EXP 33
12401: PUSH
12402: LD_INT 0
12404: ST_TO_ADDR
// sArmoury := false ;
12405: LD_ADDR_EXP 34
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// sRadar := false ;
12413: LD_ADDR_EXP 35
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sBunker := false ;
12421: LD_ADDR_EXP 36
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sHack := false ;
12429: LD_ADDR_EXP 37
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sFire := false ;
12437: LD_ADDR_EXP 38
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sRefresh := false ;
12445: LD_ADDR_EXP 39
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sExp := false ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sDepot := false ;
12461: LD_ADDR_EXP 41
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sFlag := false ;
12469: LD_ADDR_EXP 42
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sKamikadze := false ;
12477: LD_ADDR_EXP 50
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sTroll := false ;
12485: LD_ADDR_EXP 51
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sSlow := false ;
12493: LD_ADDR_EXP 52
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sLack := false ;
12501: LD_ADDR_EXP 53
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sTank := false ;
12509: LD_ADDR_EXP 55
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sRemote := false ;
12517: LD_ADDR_EXP 56
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sPowell := false ;
12525: LD_ADDR_EXP 57
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sTeleport := false ;
12533: LD_ADDR_EXP 60
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sOilTower := false ;
12541: LD_ADDR_EXP 62
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sShovel := false ;
12549: LD_ADDR_EXP 63
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sSheik := false ;
12557: LD_ADDR_EXP 64
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sEarthquake := false ;
12565: LD_ADDR_EXP 66
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sAI := false ;
12573: LD_ADDR_EXP 67
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sCargo := false ;
12581: LD_ADDR_EXP 70
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sDLaser := false ;
12589: LD_ADDR_EXP 71
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sExchange := false ;
12597: LD_ADDR_EXP 72
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sFac := false ;
12605: LD_ADDR_EXP 73
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sPower := false ;
12613: LD_ADDR_EXP 74
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sRandom := false ;
12621: LD_ADDR_EXP 75
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sShield := false ;
12629: LD_ADDR_EXP 76
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sTime := false ;
12637: LD_ADDR_EXP 77
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sTools := false ;
12645: LD_ADDR_EXP 78
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sSold := false ;
12653: LD_ADDR_EXP 43
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sDiff := false ;
12661: LD_ADDR_EXP 44
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sFog := false ;
12669: LD_ADDR_EXP 47
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sReset := false ;
12677: LD_ADDR_EXP 48
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sSun := false ;
12685: LD_ADDR_EXP 49
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sTiger := false ;
12693: LD_ADDR_EXP 45
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sBomb := false ;
12701: LD_ADDR_EXP 46
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sWound := false ;
12709: LD_ADDR_EXP 54
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sBetray := false ;
12717: LD_ADDR_EXP 58
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sContamin := false ;
12725: LD_ADDR_EXP 59
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sOil := false ;
12733: LD_ADDR_EXP 61
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sStu := false ;
12741: LD_ADDR_EXP 65
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sBazooka := false ;
12749: LD_ADDR_EXP 68
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sMortar := false ;
12757: LD_ADDR_EXP 69
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sRanger := false ;
12765: LD_ADDR_EXP 79
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sComputer := false ;
12773: LD_ADDR_EXP 80
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// s30 := false ;
12781: LD_ADDR_EXP 81
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// s60 := false ;
12789: LD_ADDR_EXP 82
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// end ;
12797: LD_VAR 0 1
12801: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12802: LD_INT 0
12804: PPUSH
12805: PPUSH
12806: PPUSH
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
// result := [ ] ;
12811: LD_ADDR_VAR 0 2
12815: PUSH
12816: EMPTY
12817: ST_TO_ADDR
// if campaign_id = 1 then
12818: LD_OWVAR 69
12822: PUSH
12823: LD_INT 1
12825: EQUAL
12826: IFFALSE 15992
// begin case mission_number of 1 :
12828: LD_OWVAR 70
12832: PUSH
12833: LD_INT 1
12835: DOUBLE
12836: EQUAL
12837: IFTRUE 12841
12839: GO 12917
12841: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12842: LD_ADDR_VAR 0 2
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: LD_INT 4
12852: PUSH
12853: LD_INT 11
12855: PUSH
12856: LD_INT 12
12858: PUSH
12859: LD_INT 15
12861: PUSH
12862: LD_INT 16
12864: PUSH
12865: LD_INT 22
12867: PUSH
12868: LD_INT 23
12870: PUSH
12871: LD_INT 26
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 101
12887: PUSH
12888: LD_INT 102
12890: PUSH
12891: LD_INT 106
12893: PUSH
12894: LD_INT 116
12896: PUSH
12897: LD_INT 117
12899: PUSH
12900: LD_INT 118
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: ST_TO_ADDR
12915: GO 15990
12917: LD_INT 2
12919: DOUBLE
12920: EQUAL
12921: IFTRUE 12925
12923: GO 13009
12925: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: LD_INT 11
12939: PUSH
12940: LD_INT 12
12942: PUSH
12943: LD_INT 15
12945: PUSH
12946: LD_INT 16
12948: PUSH
12949: LD_INT 22
12951: PUSH
12952: LD_INT 23
12954: PUSH
12955: LD_INT 26
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 101
12971: PUSH
12972: LD_INT 102
12974: PUSH
12975: LD_INT 105
12977: PUSH
12978: LD_INT 106
12980: PUSH
12981: LD_INT 108
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: ST_TO_ADDR
13007: GO 15990
13009: LD_INT 3
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13105
13017: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 4
13028: PUSH
13029: LD_INT 5
13031: PUSH
13032: LD_INT 11
13034: PUSH
13035: LD_INT 12
13037: PUSH
13038: LD_INT 15
13040: PUSH
13041: LD_INT 16
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_INT 26
13049: PUSH
13050: LD_INT 36
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 101
13067: PUSH
13068: LD_INT 102
13070: PUSH
13071: LD_INT 105
13073: PUSH
13074: LD_INT 106
13076: PUSH
13077: LD_INT 108
13079: PUSH
13080: LD_INT 116
13082: PUSH
13083: LD_INT 117
13085: PUSH
13086: LD_INT 118
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: ST_TO_ADDR
13103: GO 15990
13105: LD_INT 4
13107: DOUBLE
13108: EQUAL
13109: IFTRUE 13113
13111: GO 13209
13113: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: LD_INT 2
13121: PUSH
13122: LD_INT 4
13124: PUSH
13125: LD_INT 5
13127: PUSH
13128: LD_INT 8
13130: PUSH
13131: LD_INT 11
13133: PUSH
13134: LD_INT 12
13136: PUSH
13137: LD_INT 15
13139: PUSH
13140: LD_INT 16
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_INT 23
13148: PUSH
13149: LD_INT 26
13151: PUSH
13152: LD_INT 36
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 101
13171: PUSH
13172: LD_INT 102
13174: PUSH
13175: LD_INT 105
13177: PUSH
13178: LD_INT 106
13180: PUSH
13181: LD_INT 108
13183: PUSH
13184: LD_INT 116
13186: PUSH
13187: LD_INT 117
13189: PUSH
13190: LD_INT 118
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: ST_TO_ADDR
13207: GO 15990
13209: LD_INT 5
13211: DOUBLE
13212: EQUAL
13213: IFTRUE 13217
13215: GO 13329
13217: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 4
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: LD_INT 6
13234: PUSH
13235: LD_INT 8
13237: PUSH
13238: LD_INT 11
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 15
13246: PUSH
13247: LD_INT 16
13249: PUSH
13250: LD_INT 22
13252: PUSH
13253: LD_INT 23
13255: PUSH
13256: LD_INT 25
13258: PUSH
13259: LD_INT 26
13261: PUSH
13262: LD_INT 36
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 101
13283: PUSH
13284: LD_INT 102
13286: PUSH
13287: LD_INT 105
13289: PUSH
13290: LD_INT 106
13292: PUSH
13293: LD_INT 108
13295: PUSH
13296: LD_INT 109
13298: PUSH
13299: LD_INT 112
13301: PUSH
13302: LD_INT 116
13304: PUSH
13305: LD_INT 117
13307: PUSH
13308: LD_INT 118
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: ST_TO_ADDR
13327: GO 15990
13329: LD_INT 6
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13469
13337: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_INT 2
13345: PUSH
13346: LD_INT 4
13348: PUSH
13349: LD_INT 5
13351: PUSH
13352: LD_INT 6
13354: PUSH
13355: LD_INT 8
13357: PUSH
13358: LD_INT 11
13360: PUSH
13361: LD_INT 12
13363: PUSH
13364: LD_INT 15
13366: PUSH
13367: LD_INT 16
13369: PUSH
13370: LD_INT 20
13372: PUSH
13373: LD_INT 21
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_INT 23
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 26
13387: PUSH
13388: LD_INT 30
13390: PUSH
13391: LD_INT 31
13393: PUSH
13394: LD_INT 32
13396: PUSH
13397: LD_INT 36
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 101
13423: PUSH
13424: LD_INT 102
13426: PUSH
13427: LD_INT 105
13429: PUSH
13430: LD_INT 106
13432: PUSH
13433: LD_INT 108
13435: PUSH
13436: LD_INT 109
13438: PUSH
13439: LD_INT 112
13441: PUSH
13442: LD_INT 116
13444: PUSH
13445: LD_INT 117
13447: PUSH
13448: LD_INT 118
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: ST_TO_ADDR
13467: GO 15990
13469: LD_INT 7
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13589
13477: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_INT 2
13485: PUSH
13486: LD_INT 4
13488: PUSH
13489: LD_INT 5
13491: PUSH
13492: LD_INT 7
13494: PUSH
13495: LD_INT 11
13497: PUSH
13498: LD_INT 12
13500: PUSH
13501: LD_INT 15
13503: PUSH
13504: LD_INT 16
13506: PUSH
13507: LD_INT 20
13509: PUSH
13510: LD_INT 21
13512: PUSH
13513: LD_INT 22
13515: PUSH
13516: LD_INT 23
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 26
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 101
13543: PUSH
13544: LD_INT 102
13546: PUSH
13547: LD_INT 103
13549: PUSH
13550: LD_INT 105
13552: PUSH
13553: LD_INT 106
13555: PUSH
13556: LD_INT 108
13558: PUSH
13559: LD_INT 112
13561: PUSH
13562: LD_INT 116
13564: PUSH
13565: LD_INT 117
13567: PUSH
13568: LD_INT 118
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: ST_TO_ADDR
13587: GO 15990
13589: LD_INT 8
13591: DOUBLE
13592: EQUAL
13593: IFTRUE 13597
13595: GO 13737
13597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13598: LD_ADDR_VAR 0 2
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 6
13614: PUSH
13615: LD_INT 7
13617: PUSH
13618: LD_INT 8
13620: PUSH
13621: LD_INT 11
13623: PUSH
13624: LD_INT 12
13626: PUSH
13627: LD_INT 15
13629: PUSH
13630: LD_INT 16
13632: PUSH
13633: LD_INT 20
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_INT 23
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 26
13650: PUSH
13651: LD_INT 30
13653: PUSH
13654: LD_INT 31
13656: PUSH
13657: LD_INT 32
13659: PUSH
13660: LD_INT 36
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 101
13687: PUSH
13688: LD_INT 102
13690: PUSH
13691: LD_INT 103
13693: PUSH
13694: LD_INT 105
13696: PUSH
13697: LD_INT 106
13699: PUSH
13700: LD_INT 108
13702: PUSH
13703: LD_INT 109
13705: PUSH
13706: LD_INT 112
13708: PUSH
13709: LD_INT 116
13711: PUSH
13712: LD_INT 117
13714: PUSH
13715: LD_INT 118
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: ST_TO_ADDR
13735: GO 15990
13737: LD_INT 9
13739: DOUBLE
13740: EQUAL
13741: IFTRUE 13745
13743: GO 13893
13745: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_INT 2
13753: PUSH
13754: LD_INT 4
13756: PUSH
13757: LD_INT 5
13759: PUSH
13760: LD_INT 6
13762: PUSH
13763: LD_INT 7
13765: PUSH
13766: LD_INT 8
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_INT 12
13774: PUSH
13775: LD_INT 15
13777: PUSH
13778: LD_INT 16
13780: PUSH
13781: LD_INT 20
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 22
13789: PUSH
13790: LD_INT 23
13792: PUSH
13793: LD_INT 25
13795: PUSH
13796: LD_INT 26
13798: PUSH
13799: LD_INT 28
13801: PUSH
13802: LD_INT 30
13804: PUSH
13805: LD_INT 31
13807: PUSH
13808: LD_INT 32
13810: PUSH
13811: LD_INT 36
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 101
13839: PUSH
13840: LD_INT 102
13842: PUSH
13843: LD_INT 103
13845: PUSH
13846: LD_INT 105
13848: PUSH
13849: LD_INT 106
13851: PUSH
13852: LD_INT 108
13854: PUSH
13855: LD_INT 109
13857: PUSH
13858: LD_INT 112
13860: PUSH
13861: LD_INT 114
13863: PUSH
13864: LD_INT 116
13866: PUSH
13867: LD_INT 117
13869: PUSH
13870: LD_INT 118
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: ST_TO_ADDR
13891: GO 15990
13893: LD_INT 10
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 14097
13901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13902: LD_ADDR_VAR 0 2
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 4
13912: PUSH
13913: LD_INT 5
13915: PUSH
13916: LD_INT 6
13918: PUSH
13919: LD_INT 7
13921: PUSH
13922: LD_INT 8
13924: PUSH
13925: LD_INT 9
13927: PUSH
13928: LD_INT 10
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 12
13936: PUSH
13937: LD_INT 13
13939: PUSH
13940: LD_INT 14
13942: PUSH
13943: LD_INT 15
13945: PUSH
13946: LD_INT 16
13948: PUSH
13949: LD_INT 17
13951: PUSH
13952: LD_INT 18
13954: PUSH
13955: LD_INT 19
13957: PUSH
13958: LD_INT 20
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_INT 23
13969: PUSH
13970: LD_INT 24
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 26
13978: PUSH
13979: LD_INT 28
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 31
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 36
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 101
14027: PUSH
14028: LD_INT 102
14030: PUSH
14031: LD_INT 103
14033: PUSH
14034: LD_INT 104
14036: PUSH
14037: LD_INT 105
14039: PUSH
14040: LD_INT 106
14042: PUSH
14043: LD_INT 107
14045: PUSH
14046: LD_INT 108
14048: PUSH
14049: LD_INT 109
14051: PUSH
14052: LD_INT 110
14054: PUSH
14055: LD_INT 111
14057: PUSH
14058: LD_INT 112
14060: PUSH
14061: LD_INT 114
14063: PUSH
14064: LD_INT 116
14066: PUSH
14067: LD_INT 117
14069: PUSH
14070: LD_INT 118
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 15990
14097: LD_INT 11
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14309
14105: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 3
14116: PUSH
14117: LD_INT 4
14119: PUSH
14120: LD_INT 5
14122: PUSH
14123: LD_INT 6
14125: PUSH
14126: LD_INT 7
14128: PUSH
14129: LD_INT 8
14131: PUSH
14132: LD_INT 9
14134: PUSH
14135: LD_INT 10
14137: PUSH
14138: LD_INT 11
14140: PUSH
14141: LD_INT 12
14143: PUSH
14144: LD_INT 13
14146: PUSH
14147: LD_INT 14
14149: PUSH
14150: LD_INT 15
14152: PUSH
14153: LD_INT 16
14155: PUSH
14156: LD_INT 17
14158: PUSH
14159: LD_INT 18
14161: PUSH
14162: LD_INT 19
14164: PUSH
14165: LD_INT 20
14167: PUSH
14168: LD_INT 21
14170: PUSH
14171: LD_INT 22
14173: PUSH
14174: LD_INT 23
14176: PUSH
14177: LD_INT 24
14179: PUSH
14180: LD_INT 25
14182: PUSH
14183: LD_INT 26
14185: PUSH
14186: LD_INT 28
14188: PUSH
14189: LD_INT 30
14191: PUSH
14192: LD_INT 31
14194: PUSH
14195: LD_INT 32
14197: PUSH
14198: LD_INT 34
14200: PUSH
14201: LD_INT 36
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 101
14239: PUSH
14240: LD_INT 102
14242: PUSH
14243: LD_INT 103
14245: PUSH
14246: LD_INT 104
14248: PUSH
14249: LD_INT 105
14251: PUSH
14252: LD_INT 106
14254: PUSH
14255: LD_INT 107
14257: PUSH
14258: LD_INT 108
14260: PUSH
14261: LD_INT 109
14263: PUSH
14264: LD_INT 110
14266: PUSH
14267: LD_INT 111
14269: PUSH
14270: LD_INT 112
14272: PUSH
14273: LD_INT 114
14275: PUSH
14276: LD_INT 116
14278: PUSH
14279: LD_INT 117
14281: PUSH
14282: LD_INT 118
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: ST_TO_ADDR
14307: GO 15990
14309: LD_INT 12
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14537
14317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: LD_INT 2
14328: PUSH
14329: LD_INT 3
14331: PUSH
14332: LD_INT 4
14334: PUSH
14335: LD_INT 5
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: LD_INT 7
14343: PUSH
14344: LD_INT 8
14346: PUSH
14347: LD_INT 9
14349: PUSH
14350: LD_INT 10
14352: PUSH
14353: LD_INT 11
14355: PUSH
14356: LD_INT 12
14358: PUSH
14359: LD_INT 13
14361: PUSH
14362: LD_INT 14
14364: PUSH
14365: LD_INT 15
14367: PUSH
14368: LD_INT 16
14370: PUSH
14371: LD_INT 17
14373: PUSH
14374: LD_INT 18
14376: PUSH
14377: LD_INT 19
14379: PUSH
14380: LD_INT 20
14382: PUSH
14383: LD_INT 21
14385: PUSH
14386: LD_INT 22
14388: PUSH
14389: LD_INT 23
14391: PUSH
14392: LD_INT 24
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 26
14400: PUSH
14401: LD_INT 27
14403: PUSH
14404: LD_INT 28
14406: PUSH
14407: LD_INT 30
14409: PUSH
14410: LD_INT 31
14412: PUSH
14413: LD_INT 32
14415: PUSH
14416: LD_INT 33
14418: PUSH
14419: LD_INT 34
14421: PUSH
14422: LD_INT 36
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 101
14463: PUSH
14464: LD_INT 102
14466: PUSH
14467: LD_INT 103
14469: PUSH
14470: LD_INT 104
14472: PUSH
14473: LD_INT 105
14475: PUSH
14476: LD_INT 106
14478: PUSH
14479: LD_INT 107
14481: PUSH
14482: LD_INT 108
14484: PUSH
14485: LD_INT 109
14487: PUSH
14488: LD_INT 110
14490: PUSH
14491: LD_INT 111
14493: PUSH
14494: LD_INT 112
14496: PUSH
14497: LD_INT 113
14499: PUSH
14500: LD_INT 114
14502: PUSH
14503: LD_INT 116
14505: PUSH
14506: LD_INT 117
14508: PUSH
14509: LD_INT 118
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: ST_TO_ADDR
14535: GO 15990
14537: LD_INT 13
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14753
14545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14546: LD_ADDR_VAR 0 2
14550: PUSH
14551: LD_INT 1
14553: PUSH
14554: LD_INT 2
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: LD_INT 4
14562: PUSH
14563: LD_INT 5
14565: PUSH
14566: LD_INT 8
14568: PUSH
14569: LD_INT 9
14571: PUSH
14572: LD_INT 10
14574: PUSH
14575: LD_INT 11
14577: PUSH
14578: LD_INT 12
14580: PUSH
14581: LD_INT 14
14583: PUSH
14584: LD_INT 15
14586: PUSH
14587: LD_INT 16
14589: PUSH
14590: LD_INT 17
14592: PUSH
14593: LD_INT 18
14595: PUSH
14596: LD_INT 19
14598: PUSH
14599: LD_INT 20
14601: PUSH
14602: LD_INT 21
14604: PUSH
14605: LD_INT 22
14607: PUSH
14608: LD_INT 23
14610: PUSH
14611: LD_INT 24
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 26
14619: PUSH
14620: LD_INT 27
14622: PUSH
14623: LD_INT 28
14625: PUSH
14626: LD_INT 30
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 32
14634: PUSH
14635: LD_INT 33
14637: PUSH
14638: LD_INT 34
14640: PUSH
14641: LD_INT 36
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 101
14679: PUSH
14680: LD_INT 102
14682: PUSH
14683: LD_INT 103
14685: PUSH
14686: LD_INT 104
14688: PUSH
14689: LD_INT 105
14691: PUSH
14692: LD_INT 106
14694: PUSH
14695: LD_INT 107
14697: PUSH
14698: LD_INT 108
14700: PUSH
14701: LD_INT 109
14703: PUSH
14704: LD_INT 110
14706: PUSH
14707: LD_INT 111
14709: PUSH
14710: LD_INT 112
14712: PUSH
14713: LD_INT 113
14715: PUSH
14716: LD_INT 114
14718: PUSH
14719: LD_INT 116
14721: PUSH
14722: LD_INT 117
14724: PUSH
14725: LD_INT 118
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: ST_TO_ADDR
14751: GO 15990
14753: LD_INT 14
14755: DOUBLE
14756: EQUAL
14757: IFTRUE 14761
14759: GO 14985
14761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14762: LD_ADDR_VAR 0 2
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: LD_INT 4
14778: PUSH
14779: LD_INT 5
14781: PUSH
14782: LD_INT 6
14784: PUSH
14785: LD_INT 7
14787: PUSH
14788: LD_INT 8
14790: PUSH
14791: LD_INT 9
14793: PUSH
14794: LD_INT 10
14796: PUSH
14797: LD_INT 11
14799: PUSH
14800: LD_INT 12
14802: PUSH
14803: LD_INT 13
14805: PUSH
14806: LD_INT 14
14808: PUSH
14809: LD_INT 15
14811: PUSH
14812: LD_INT 16
14814: PUSH
14815: LD_INT 17
14817: PUSH
14818: LD_INT 18
14820: PUSH
14821: LD_INT 19
14823: PUSH
14824: LD_INT 20
14826: PUSH
14827: LD_INT 21
14829: PUSH
14830: LD_INT 22
14832: PUSH
14833: LD_INT 23
14835: PUSH
14836: LD_INT 24
14838: PUSH
14839: LD_INT 25
14841: PUSH
14842: LD_INT 26
14844: PUSH
14845: LD_INT 27
14847: PUSH
14848: LD_INT 28
14850: PUSH
14851: LD_INT 29
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 31
14859: PUSH
14860: LD_INT 32
14862: PUSH
14863: LD_INT 33
14865: PUSH
14866: LD_INT 34
14868: PUSH
14869: LD_INT 36
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 101
14911: PUSH
14912: LD_INT 102
14914: PUSH
14915: LD_INT 103
14917: PUSH
14918: LD_INT 104
14920: PUSH
14921: LD_INT 105
14923: PUSH
14924: LD_INT 106
14926: PUSH
14927: LD_INT 107
14929: PUSH
14930: LD_INT 108
14932: PUSH
14933: LD_INT 109
14935: PUSH
14936: LD_INT 110
14938: PUSH
14939: LD_INT 111
14941: PUSH
14942: LD_INT 112
14944: PUSH
14945: LD_INT 113
14947: PUSH
14948: LD_INT 114
14950: PUSH
14951: LD_INT 116
14953: PUSH
14954: LD_INT 117
14956: PUSH
14957: LD_INT 118
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: ST_TO_ADDR
14983: GO 15990
14985: LD_INT 15
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15217
14993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14994: LD_ADDR_VAR 0 2
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: LD_INT 4
15010: PUSH
15011: LD_INT 5
15013: PUSH
15014: LD_INT 6
15016: PUSH
15017: LD_INT 7
15019: PUSH
15020: LD_INT 8
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 13
15037: PUSH
15038: LD_INT 14
15040: PUSH
15041: LD_INT 15
15043: PUSH
15044: LD_INT 16
15046: PUSH
15047: LD_INT 17
15049: PUSH
15050: LD_INT 18
15052: PUSH
15053: LD_INT 19
15055: PUSH
15056: LD_INT 20
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 23
15067: PUSH
15068: LD_INT 24
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 26
15076: PUSH
15077: LD_INT 27
15079: PUSH
15080: LD_INT 28
15082: PUSH
15083: LD_INT 29
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: LD_INT 31
15091: PUSH
15092: LD_INT 32
15094: PUSH
15095: LD_INT 33
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 36
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 101
15143: PUSH
15144: LD_INT 102
15146: PUSH
15147: LD_INT 103
15149: PUSH
15150: LD_INT 104
15152: PUSH
15153: LD_INT 105
15155: PUSH
15156: LD_INT 106
15158: PUSH
15159: LD_INT 107
15161: PUSH
15162: LD_INT 108
15164: PUSH
15165: LD_INT 109
15167: PUSH
15168: LD_INT 110
15170: PUSH
15171: LD_INT 111
15173: PUSH
15174: LD_INT 112
15176: PUSH
15177: LD_INT 113
15179: PUSH
15180: LD_INT 114
15182: PUSH
15183: LD_INT 116
15185: PUSH
15186: LD_INT 117
15188: PUSH
15189: LD_INT 118
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: ST_TO_ADDR
15215: GO 15990
15217: LD_INT 16
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15361
15225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_INT 2
15233: PUSH
15234: LD_INT 4
15236: PUSH
15237: LD_INT 5
15239: PUSH
15240: LD_INT 7
15242: PUSH
15243: LD_INT 11
15245: PUSH
15246: LD_INT 12
15248: PUSH
15249: LD_INT 15
15251: PUSH
15252: LD_INT 16
15254: PUSH
15255: LD_INT 20
15257: PUSH
15258: LD_INT 21
15260: PUSH
15261: LD_INT 22
15263: PUSH
15264: LD_INT 23
15266: PUSH
15267: LD_INT 25
15269: PUSH
15270: LD_INT 26
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: LD_INT 31
15278: PUSH
15279: LD_INT 32
15281: PUSH
15282: LD_INT 33
15284: PUSH
15285: LD_INT 34
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 101
15311: PUSH
15312: LD_INT 102
15314: PUSH
15315: LD_INT 103
15317: PUSH
15318: LD_INT 106
15320: PUSH
15321: LD_INT 108
15323: PUSH
15324: LD_INT 112
15326: PUSH
15327: LD_INT 113
15329: PUSH
15330: LD_INT 114
15332: PUSH
15333: LD_INT 116
15335: PUSH
15336: LD_INT 117
15338: PUSH
15339: LD_INT 118
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: ST_TO_ADDR
15359: GO 15990
15361: LD_INT 17
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15593
15369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: LD_INT 4
15386: PUSH
15387: LD_INT 5
15389: PUSH
15390: LD_INT 6
15392: PUSH
15393: LD_INT 7
15395: PUSH
15396: LD_INT 8
15398: PUSH
15399: LD_INT 9
15401: PUSH
15402: LD_INT 10
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 13
15413: PUSH
15414: LD_INT 14
15416: PUSH
15417: LD_INT 15
15419: PUSH
15420: LD_INT 16
15422: PUSH
15423: LD_INT 17
15425: PUSH
15426: LD_INT 18
15428: PUSH
15429: LD_INT 19
15431: PUSH
15432: LD_INT 20
15434: PUSH
15435: LD_INT 21
15437: PUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 23
15443: PUSH
15444: LD_INT 24
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 26
15452: PUSH
15453: LD_INT 27
15455: PUSH
15456: LD_INT 28
15458: PUSH
15459: LD_INT 29
15461: PUSH
15462: LD_INT 30
15464: PUSH
15465: LD_INT 31
15467: PUSH
15468: LD_INT 32
15470: PUSH
15471: LD_INT 33
15473: PUSH
15474: LD_INT 34
15476: PUSH
15477: LD_INT 36
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 101
15519: PUSH
15520: LD_INT 102
15522: PUSH
15523: LD_INT 103
15525: PUSH
15526: LD_INT 104
15528: PUSH
15529: LD_INT 105
15531: PUSH
15532: LD_INT 106
15534: PUSH
15535: LD_INT 107
15537: PUSH
15538: LD_INT 108
15540: PUSH
15541: LD_INT 109
15543: PUSH
15544: LD_INT 110
15546: PUSH
15547: LD_INT 111
15549: PUSH
15550: LD_INT 112
15552: PUSH
15553: LD_INT 113
15555: PUSH
15556: LD_INT 114
15558: PUSH
15559: LD_INT 116
15561: PUSH
15562: LD_INT 117
15564: PUSH
15565: LD_INT 118
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 15990
15593: LD_INT 18
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15749
15601: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 7
15618: PUSH
15619: LD_INT 11
15621: PUSH
15622: LD_INT 12
15624: PUSH
15625: LD_INT 15
15627: PUSH
15628: LD_INT 16
15630: PUSH
15631: LD_INT 20
15633: PUSH
15634: LD_INT 21
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_INT 23
15642: PUSH
15643: LD_INT 25
15645: PUSH
15646: LD_INT 26
15648: PUSH
15649: LD_INT 30
15651: PUSH
15652: LD_INT 31
15654: PUSH
15655: LD_INT 32
15657: PUSH
15658: LD_INT 33
15660: PUSH
15661: LD_INT 34
15663: PUSH
15664: LD_INT 35
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 101
15695: PUSH
15696: LD_INT 102
15698: PUSH
15699: LD_INT 103
15701: PUSH
15702: LD_INT 106
15704: PUSH
15705: LD_INT 108
15707: PUSH
15708: LD_INT 112
15710: PUSH
15711: LD_INT 113
15713: PUSH
15714: LD_INT 114
15716: PUSH
15717: LD_INT 115
15719: PUSH
15720: LD_INT 116
15722: PUSH
15723: LD_INT 117
15725: PUSH
15726: LD_INT 118
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
15747: GO 15990
15749: LD_INT 19
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15989
15757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15758: LD_ADDR_VAR 0 2
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: LD_INT 4
15774: PUSH
15775: LD_INT 5
15777: PUSH
15778: LD_INT 6
15780: PUSH
15781: LD_INT 7
15783: PUSH
15784: LD_INT 8
15786: PUSH
15787: LD_INT 9
15789: PUSH
15790: LD_INT 10
15792: PUSH
15793: LD_INT 11
15795: PUSH
15796: LD_INT 12
15798: PUSH
15799: LD_INT 13
15801: PUSH
15802: LD_INT 14
15804: PUSH
15805: LD_INT 15
15807: PUSH
15808: LD_INT 16
15810: PUSH
15811: LD_INT 17
15813: PUSH
15814: LD_INT 18
15816: PUSH
15817: LD_INT 19
15819: PUSH
15820: LD_INT 20
15822: PUSH
15823: LD_INT 21
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: LD_INT 23
15831: PUSH
15832: LD_INT 24
15834: PUSH
15835: LD_INT 25
15837: PUSH
15838: LD_INT 26
15840: PUSH
15841: LD_INT 27
15843: PUSH
15844: LD_INT 28
15846: PUSH
15847: LD_INT 29
15849: PUSH
15850: LD_INT 30
15852: PUSH
15853: LD_INT 31
15855: PUSH
15856: LD_INT 32
15858: PUSH
15859: LD_INT 33
15861: PUSH
15862: LD_INT 34
15864: PUSH
15865: LD_INT 35
15867: PUSH
15868: LD_INT 36
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 101
15911: PUSH
15912: LD_INT 102
15914: PUSH
15915: LD_INT 103
15917: PUSH
15918: LD_INT 104
15920: PUSH
15921: LD_INT 105
15923: PUSH
15924: LD_INT 106
15926: PUSH
15927: LD_INT 107
15929: PUSH
15930: LD_INT 108
15932: PUSH
15933: LD_INT 109
15935: PUSH
15936: LD_INT 110
15938: PUSH
15939: LD_INT 111
15941: PUSH
15942: LD_INT 112
15944: PUSH
15945: LD_INT 113
15947: PUSH
15948: LD_INT 114
15950: PUSH
15951: LD_INT 115
15953: PUSH
15954: LD_INT 116
15956: PUSH
15957: LD_INT 117
15959: PUSH
15960: LD_INT 118
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: ST_TO_ADDR
15987: GO 15990
15989: POP
// end else
15990: GO 16221
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: LD_INT 3
16005: PUSH
16006: LD_INT 4
16008: PUSH
16009: LD_INT 5
16011: PUSH
16012: LD_INT 6
16014: PUSH
16015: LD_INT 7
16017: PUSH
16018: LD_INT 8
16020: PUSH
16021: LD_INT 9
16023: PUSH
16024: LD_INT 10
16026: PUSH
16027: LD_INT 11
16029: PUSH
16030: LD_INT 12
16032: PUSH
16033: LD_INT 13
16035: PUSH
16036: LD_INT 14
16038: PUSH
16039: LD_INT 15
16041: PUSH
16042: LD_INT 16
16044: PUSH
16045: LD_INT 17
16047: PUSH
16048: LD_INT 18
16050: PUSH
16051: LD_INT 19
16053: PUSH
16054: LD_INT 20
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_INT 23
16065: PUSH
16066: LD_INT 24
16068: PUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 26
16074: PUSH
16075: LD_INT 27
16077: PUSH
16078: LD_INT 28
16080: PUSH
16081: LD_INT 29
16083: PUSH
16084: LD_INT 30
16086: PUSH
16087: LD_INT 31
16089: PUSH
16090: LD_INT 32
16092: PUSH
16093: LD_INT 33
16095: PUSH
16096: LD_INT 34
16098: PUSH
16099: LD_INT 35
16101: PUSH
16102: LD_INT 36
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 101
16145: PUSH
16146: LD_INT 102
16148: PUSH
16149: LD_INT 103
16151: PUSH
16152: LD_INT 104
16154: PUSH
16155: LD_INT 105
16157: PUSH
16158: LD_INT 106
16160: PUSH
16161: LD_INT 107
16163: PUSH
16164: LD_INT 108
16166: PUSH
16167: LD_INT 109
16169: PUSH
16170: LD_INT 110
16172: PUSH
16173: LD_INT 111
16175: PUSH
16176: LD_INT 112
16178: PUSH
16179: LD_INT 113
16181: PUSH
16182: LD_INT 114
16184: PUSH
16185: LD_INT 115
16187: PUSH
16188: LD_INT 116
16190: PUSH
16191: LD_INT 117
16193: PUSH
16194: LD_INT 118
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: ST_TO_ADDR
// if result then
16221: LD_VAR 0 2
16225: IFFALSE 17011
// begin normal :=  ;
16227: LD_ADDR_VAR 0 5
16231: PUSH
16232: LD_STRING 
16234: ST_TO_ADDR
// hardcore :=  ;
16235: LD_ADDR_VAR 0 6
16239: PUSH
16240: LD_STRING 
16242: ST_TO_ADDR
// active :=  ;
16243: LD_ADDR_VAR 0 7
16247: PUSH
16248: LD_STRING 
16250: ST_TO_ADDR
// for i = 1 to normalCounter do
16251: LD_ADDR_VAR 0 8
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_EXP 27
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16368
// begin tmp := 0 ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: LD_STRING 0
16276: ST_TO_ADDR
// if result [ 1 ] then
16277: LD_VAR 0 2
16281: PUSH
16282: LD_INT 1
16284: ARRAY
16285: IFFALSE 16350
// if result [ 1 ] [ 1 ] = i then
16287: LD_VAR 0 2
16291: PUSH
16292: LD_INT 1
16294: ARRAY
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: PUSH
16300: LD_VAR 0 8
16304: EQUAL
16305: IFFALSE 16350
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16307: LD_ADDR_VAR 0 2
16311: PUSH
16312: LD_VAR 0 2
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: LD_VAR 0 2
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 3
16336: PPUSH
16337: CALL_OW 1
16341: ST_TO_ADDR
// tmp := 1 ;
16342: LD_ADDR_VAR 0 3
16346: PUSH
16347: LD_STRING 1
16349: ST_TO_ADDR
// end ; normal := normal & tmp ;
16350: LD_ADDR_VAR 0 5
16354: PUSH
16355: LD_VAR 0 5
16359: PUSH
16360: LD_VAR 0 3
16364: STR
16365: ST_TO_ADDR
// end ;
16366: GO 16266
16368: POP
16369: POP
// for i = 1 to hardcoreCounter do
16370: LD_ADDR_VAR 0 8
16374: PUSH
16375: DOUBLE
16376: LD_INT 1
16378: DEC
16379: ST_TO_ADDR
16380: LD_EXP 28
16384: PUSH
16385: FOR_TO
16386: IFFALSE 16491
// begin tmp := 0 ;
16388: LD_ADDR_VAR 0 3
16392: PUSH
16393: LD_STRING 0
16395: ST_TO_ADDR
// if result [ 2 ] then
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 2
16403: ARRAY
16404: IFFALSE 16473
// if result [ 2 ] [ 1 ] = 100 + i then
16406: LD_VAR 0 2
16410: PUSH
16411: LD_INT 2
16413: ARRAY
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PUSH
16419: LD_INT 100
16421: PUSH
16422: LD_VAR 0 8
16426: PLUS
16427: EQUAL
16428: IFFALSE 16473
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16430: LD_ADDR_VAR 0 2
16434: PUSH
16435: LD_VAR 0 2
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 2
16450: ARRAY
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 3
16459: PPUSH
16460: CALL_OW 1
16464: ST_TO_ADDR
// tmp := 1 ;
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_STRING 1
16472: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16473: LD_ADDR_VAR 0 6
16477: PUSH
16478: LD_VAR 0 6
16482: PUSH
16483: LD_VAR 0 3
16487: STR
16488: ST_TO_ADDR
// end ;
16489: GO 16385
16491: POP
16492: POP
// if isGameLoad then
16493: LD_VAR 0 1
16497: IFFALSE 16972
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16499: LD_ADDR_VAR 0 4
16503: PUSH
16504: LD_EXP 31
16508: PUSH
16509: LD_EXP 30
16513: PUSH
16514: LD_EXP 32
16518: PUSH
16519: LD_EXP 29
16523: PUSH
16524: LD_EXP 33
16528: PUSH
16529: LD_EXP 34
16533: PUSH
16534: LD_EXP 35
16538: PUSH
16539: LD_EXP 36
16543: PUSH
16544: LD_EXP 37
16548: PUSH
16549: LD_EXP 38
16553: PUSH
16554: LD_EXP 39
16558: PUSH
16559: LD_EXP 40
16563: PUSH
16564: LD_EXP 41
16568: PUSH
16569: LD_EXP 42
16573: PUSH
16574: LD_EXP 50
16578: PUSH
16579: LD_EXP 51
16583: PUSH
16584: LD_EXP 52
16588: PUSH
16589: LD_EXP 53
16593: PUSH
16594: LD_EXP 55
16598: PUSH
16599: LD_EXP 56
16603: PUSH
16604: LD_EXP 57
16608: PUSH
16609: LD_EXP 60
16613: PUSH
16614: LD_EXP 62
16618: PUSH
16619: LD_EXP 63
16623: PUSH
16624: LD_EXP 64
16628: PUSH
16629: LD_EXP 66
16633: PUSH
16634: LD_EXP 67
16638: PUSH
16639: LD_EXP 70
16643: PUSH
16644: LD_EXP 71
16648: PUSH
16649: LD_EXP 72
16653: PUSH
16654: LD_EXP 73
16658: PUSH
16659: LD_EXP 74
16663: PUSH
16664: LD_EXP 75
16668: PUSH
16669: LD_EXP 76
16673: PUSH
16674: LD_EXP 77
16678: PUSH
16679: LD_EXP 78
16683: PUSH
16684: LD_EXP 43
16688: PUSH
16689: LD_EXP 44
16693: PUSH
16694: LD_EXP 47
16698: PUSH
16699: LD_EXP 48
16703: PUSH
16704: LD_EXP 49
16708: PUSH
16709: LD_EXP 45
16713: PUSH
16714: LD_EXP 46
16718: PUSH
16719: LD_EXP 54
16723: PUSH
16724: LD_EXP 58
16728: PUSH
16729: LD_EXP 59
16733: PUSH
16734: LD_EXP 61
16738: PUSH
16739: LD_EXP 65
16743: PUSH
16744: LD_EXP 68
16748: PUSH
16749: LD_EXP 69
16753: PUSH
16754: LD_EXP 79
16758: PUSH
16759: LD_EXP 80
16763: PUSH
16764: LD_EXP 81
16768: PUSH
16769: LD_EXP 82
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: ST_TO_ADDR
// tmp :=  ;
16830: LD_ADDR_VAR 0 3
16834: PUSH
16835: LD_STRING 
16837: ST_TO_ADDR
// for i = 1 to normalCounter do
16838: LD_ADDR_VAR 0 8
16842: PUSH
16843: DOUBLE
16844: LD_INT 1
16846: DEC
16847: ST_TO_ADDR
16848: LD_EXP 27
16852: PUSH
16853: FOR_TO
16854: IFFALSE 16890
// begin if flags [ i ] then
16856: LD_VAR 0 4
16860: PUSH
16861: LD_VAR 0 8
16865: ARRAY
16866: IFFALSE 16888
// tmp := tmp & i & ; ;
16868: LD_ADDR_VAR 0 3
16872: PUSH
16873: LD_VAR 0 3
16877: PUSH
16878: LD_VAR 0 8
16882: STR
16883: PUSH
16884: LD_STRING ;
16886: STR
16887: ST_TO_ADDR
// end ;
16888: GO 16853
16890: POP
16891: POP
// for i = 1 to hardcoreCounter do
16892: LD_ADDR_VAR 0 8
16896: PUSH
16897: DOUBLE
16898: LD_INT 1
16900: DEC
16901: ST_TO_ADDR
16902: LD_EXP 28
16906: PUSH
16907: FOR_TO
16908: IFFALSE 16954
// begin if flags [ normalCounter + i ] then
16910: LD_VAR 0 4
16914: PUSH
16915: LD_EXP 27
16919: PUSH
16920: LD_VAR 0 8
16924: PLUS
16925: ARRAY
16926: IFFALSE 16952
// tmp := tmp & ( 100 + i ) & ; ;
16928: LD_ADDR_VAR 0 3
16932: PUSH
16933: LD_VAR 0 3
16937: PUSH
16938: LD_INT 100
16940: PUSH
16941: LD_VAR 0 8
16945: PLUS
16946: STR
16947: PUSH
16948: LD_STRING ;
16950: STR
16951: ST_TO_ADDR
// end ;
16952: GO 16907
16954: POP
16955: POP
// if tmp then
16956: LD_VAR 0 3
16960: IFFALSE 16972
// active := tmp ;
16962: LD_ADDR_VAR 0 7
16966: PUSH
16967: LD_VAR 0 3
16971: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16972: LD_STRING getStreamItemsFromMission("
16974: PUSH
16975: LD_VAR 0 5
16979: STR
16980: PUSH
16981: LD_STRING ","
16983: STR
16984: PUSH
16985: LD_VAR 0 6
16989: STR
16990: PUSH
16991: LD_STRING ","
16993: STR
16994: PUSH
16995: LD_VAR 0 7
16999: STR
17000: PUSH
17001: LD_STRING ")
17003: STR
17004: PPUSH
17005: CALL_OW 559
// end else
17009: GO 17018
// ToLua ( getStreamItemsFromMission("","","") ) ;
17011: LD_STRING getStreamItemsFromMission("","","")
17013: PPUSH
17014: CALL_OW 559
// end ;
17018: LD_VAR 0 2
17022: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17023: LD_EXP 26
17027: PUSH
17028: LD_EXP 31
17032: AND
17033: IFFALSE 17157
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
// begin enable ;
17042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 34
17065: PUSH
17066: LD_INT 7
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 34
17075: PUSH
17076: LD_INT 45
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 34
17085: PUSH
17086: LD_INT 28
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 34
17095: PUSH
17096: LD_INT 47
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: ST_TO_ADDR
// if not tmp then
17119: LD_VAR 0 2
17123: NOT
17124: IFFALSE 17128
// exit ;
17126: GO 17157
// for i in tmp do
17128: LD_ADDR_VAR 0 1
17132: PUSH
17133: LD_VAR 0 2
17137: PUSH
17138: FOR_IN
17139: IFFALSE 17155
// begin SetLives ( i , 0 ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_INT 0
17148: PPUSH
17149: CALL_OW 234
// end ;
17153: GO 17138
17155: POP
17156: POP
// end ;
17157: PPOPN 2
17159: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17160: LD_EXP 26
17164: PUSH
17165: LD_EXP 32
17169: AND
17170: IFFALSE 17254
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
// begin enable ;
17179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17180: LD_ADDR_VAR 0 2
17184: PUSH
17185: LD_INT 22
17187: PUSH
17188: LD_OWVAR 2
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 32
17199: PUSH
17200: LD_INT 3
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 69
17215: ST_TO_ADDR
// if not tmp then
17216: LD_VAR 0 2
17220: NOT
17221: IFFALSE 17225
// exit ;
17223: GO 17254
// for i in tmp do
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_VAR 0 2
17234: PUSH
17235: FOR_IN
17236: IFFALSE 17252
// begin SetLives ( i , 0 ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 0
17245: PPUSH
17246: CALL_OW 234
// end ;
17250: GO 17235
17252: POP
17253: POP
// end ;
17254: PPOPN 2
17256: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17257: LD_EXP 26
17261: PUSH
17262: LD_EXP 29
17266: AND
17267: IFFALSE 17360
17269: GO 17271
17271: DISABLE
17272: LD_INT 0
17274: PPUSH
// begin enable ;
17275: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_OWVAR 2
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 5
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 25
17308: PUSH
17309: LD_INT 9
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 25
17318: PUSH
17319: LD_INT 8
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PPUSH
17336: CALL_OW 69
17340: PUSH
17341: FOR_IN
17342: IFFALSE 17358
// begin SetClass ( i , 1 ) ;
17344: LD_VAR 0 1
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: CALL_OW 336
// end ;
17356: GO 17341
17358: POP
17359: POP
// end ;
17360: PPOPN 1
17362: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17363: LD_EXP 26
17367: PUSH
17368: LD_EXP 30
17372: AND
17373: PUSH
17374: LD_OWVAR 65
17378: PUSH
17379: LD_INT 7
17381: LESS
17382: AND
17383: IFFALSE 17397
17385: GO 17387
17387: DISABLE
// begin enable ;
17388: ENABLE
// game_speed := 7 ;
17389: LD_ADDR_OWVAR 65
17393: PUSH
17394: LD_INT 7
17396: ST_TO_ADDR
// end ;
17397: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17398: LD_EXP 26
17402: PUSH
17403: LD_EXP 33
17407: AND
17408: IFFALSE 17610
17410: GO 17412
17412: DISABLE
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
17417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: LD_INT 81
17425: PUSH
17426: LD_OWVAR 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 21
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PPUSH
17449: CALL_OW 69
17453: ST_TO_ADDR
// if not tmp then
17454: LD_VAR 0 3
17458: NOT
17459: IFFALSE 17463
// exit ;
17461: GO 17610
// if tmp > 5 then
17463: LD_VAR 0 3
17467: PUSH
17468: LD_INT 5
17470: GREATER
17471: IFFALSE 17483
// k := 5 else
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_INT 5
17480: ST_TO_ADDR
17481: GO 17493
// k := tmp ;
17483: LD_ADDR_VAR 0 2
17487: PUSH
17488: LD_VAR 0 3
17492: ST_TO_ADDR
// for i := 1 to k do
17493: LD_ADDR_VAR 0 1
17497: PUSH
17498: DOUBLE
17499: LD_INT 1
17501: DEC
17502: ST_TO_ADDR
17503: LD_VAR 0 2
17507: PUSH
17508: FOR_TO
17509: IFFALSE 17608
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17511: LD_VAR 0 3
17515: PUSH
17516: LD_VAR 0 1
17520: ARRAY
17521: PPUSH
17522: LD_VAR 0 1
17526: PUSH
17527: LD_INT 4
17529: MOD
17530: PUSH
17531: LD_INT 1
17533: PLUS
17534: PPUSH
17535: CALL_OW 259
17539: PUSH
17540: LD_INT 10
17542: LESS
17543: IFFALSE 17606
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17545: LD_VAR 0 3
17549: PUSH
17550: LD_VAR 0 1
17554: ARRAY
17555: PPUSH
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 4
17563: MOD
17564: PUSH
17565: LD_INT 1
17567: PLUS
17568: PPUSH
17569: LD_VAR 0 3
17573: PUSH
17574: LD_VAR 0 1
17578: ARRAY
17579: PPUSH
17580: LD_VAR 0 1
17584: PUSH
17585: LD_INT 4
17587: MOD
17588: PUSH
17589: LD_INT 1
17591: PLUS
17592: PPUSH
17593: CALL_OW 259
17597: PUSH
17598: LD_INT 1
17600: PLUS
17601: PPUSH
17602: CALL_OW 237
17606: GO 17508
17608: POP
17609: POP
// end ;
17610: PPOPN 3
17612: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17613: LD_EXP 26
17617: PUSH
17618: LD_EXP 34
17622: AND
17623: IFFALSE 17643
17625: GO 17627
17627: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17628: LD_INT 4
17630: PPUSH
17631: LD_OWVAR 2
17635: PPUSH
17636: LD_INT 0
17638: PPUSH
17639: CALL_OW 324
17643: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17644: LD_EXP 26
17648: PUSH
17649: LD_EXP 63
17653: AND
17654: IFFALSE 17674
17656: GO 17658
17658: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17659: LD_INT 19
17661: PPUSH
17662: LD_OWVAR 2
17666: PPUSH
17667: LD_INT 0
17669: PPUSH
17670: CALL_OW 324
17674: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17675: LD_EXP 26
17679: PUSH
17680: LD_EXP 35
17684: AND
17685: IFFALSE 17787
17687: GO 17689
17689: DISABLE
17690: LD_INT 0
17692: PPUSH
17693: PPUSH
// begin enable ;
17694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 22
17702: PUSH
17703: LD_OWVAR 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 34
17717: PUSH
17718: LD_INT 11
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 34
17727: PUSH
17728: LD_INT 30
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 69
17748: ST_TO_ADDR
// if not tmp then
17749: LD_VAR 0 2
17753: NOT
17754: IFFALSE 17758
// exit ;
17756: GO 17787
// for i in tmp do
17758: LD_ADDR_VAR 0 1
17762: PUSH
17763: LD_VAR 0 2
17767: PUSH
17768: FOR_IN
17769: IFFALSE 17785
// begin SetLives ( i , 0 ) ;
17771: LD_VAR 0 1
17775: PPUSH
17776: LD_INT 0
17778: PPUSH
17779: CALL_OW 234
// end ;
17783: GO 17768
17785: POP
17786: POP
// end ;
17787: PPOPN 2
17789: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17790: LD_EXP 26
17794: PUSH
17795: LD_EXP 36
17799: AND
17800: IFFALSE 17820
17802: GO 17804
17804: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17805: LD_INT 32
17807: PPUSH
17808: LD_OWVAR 2
17812: PPUSH
17813: LD_INT 0
17815: PPUSH
17816: CALL_OW 324
17820: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17821: LD_EXP 26
17825: PUSH
17826: LD_EXP 37
17830: AND
17831: IFFALSE 18012
17833: GO 17835
17835: DISABLE
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
17840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17841: LD_ADDR_VAR 0 2
17845: PUSH
17846: LD_INT 22
17848: PUSH
17849: LD_OWVAR 2
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 33
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PPUSH
17872: CALL_OW 69
17876: ST_TO_ADDR
// if not tmp then
17877: LD_VAR 0 2
17881: NOT
17882: IFFALSE 17886
// exit ;
17884: GO 18012
// side := 0 ;
17886: LD_ADDR_VAR 0 3
17890: PUSH
17891: LD_INT 0
17893: ST_TO_ADDR
// for i := 1 to 8 do
17894: LD_ADDR_VAR 0 1
17898: PUSH
17899: DOUBLE
17900: LD_INT 1
17902: DEC
17903: ST_TO_ADDR
17904: LD_INT 8
17906: PUSH
17907: FOR_TO
17908: IFFALSE 17956
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17910: LD_OWVAR 2
17914: PUSH
17915: LD_VAR 0 1
17919: NONEQUAL
17920: PUSH
17921: LD_OWVAR 2
17925: PPUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 81
17935: PUSH
17936: LD_INT 2
17938: EQUAL
17939: AND
17940: IFFALSE 17954
// begin side := i ;
17942: LD_ADDR_VAR 0 3
17946: PUSH
17947: LD_VAR 0 1
17951: ST_TO_ADDR
// break ;
17952: GO 17956
// end ;
17954: GO 17907
17956: POP
17957: POP
// if not side then
17958: LD_VAR 0 3
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18012
// for i := 1 to tmp do
17967: LD_ADDR_VAR 0 1
17971: PUSH
17972: DOUBLE
17973: LD_INT 1
17975: DEC
17976: ST_TO_ADDR
17977: LD_VAR 0 2
17981: PUSH
17982: FOR_TO
17983: IFFALSE 18010
// if Prob ( 60 ) then
17985: LD_INT 60
17987: PPUSH
17988: CALL_OW 13
17992: IFFALSE 18008
// SetSide ( i , side ) ;
17994: LD_VAR 0 1
17998: PPUSH
17999: LD_VAR 0 3
18003: PPUSH
18004: CALL_OW 235
18008: GO 17982
18010: POP
18011: POP
// end ;
18012: PPOPN 3
18014: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18015: LD_EXP 26
18019: PUSH
18020: LD_EXP 39
18024: AND
18025: IFFALSE 18144
18027: GO 18029
18029: DISABLE
18030: LD_INT 0
18032: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18033: LD_ADDR_VAR 0 1
18037: PUSH
18038: LD_INT 22
18040: PUSH
18041: LD_OWVAR 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 21
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 3
18062: PUSH
18063: LD_INT 23
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: PPUSH
18082: CALL_OW 69
18086: PUSH
18087: FOR_IN
18088: IFFALSE 18142
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 257
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: LD_INT 3
18108: PUSH
18109: LD_INT 4
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: IN
18118: IFFALSE 18140
// SetClass ( un , rand ( 1 , 4 ) ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: LD_INT 4
18130: PPUSH
18131: CALL_OW 12
18135: PPUSH
18136: CALL_OW 336
18140: GO 18087
18142: POP
18143: POP
// end ;
18144: PPOPN 1
18146: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18147: LD_EXP 26
18151: PUSH
18152: LD_EXP 38
18156: AND
18157: IFFALSE 18236
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_OWVAR 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 21
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: ST_TO_ADDR
// if not tmp then
18201: LD_VAR 0 1
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18210: LD_VAR 0 1
18214: PUSH
18215: LD_INT 1
18217: PPUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 12
18227: ARRAY
18228: PPUSH
18229: LD_INT 100
18231: PPUSH
18232: CALL_OW 234
// end ;
18236: PPOPN 1
18238: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18239: LD_EXP 26
18243: PUSH
18244: LD_EXP 40
18248: AND
18249: IFFALSE 18347
18251: GO 18253
18253: DISABLE
18254: LD_INT 0
18256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18257: LD_ADDR_VAR 0 1
18261: PUSH
18262: LD_INT 22
18264: PUSH
18265: LD_OWVAR 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 21
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: ST_TO_ADDR
// if not tmp then
18293: LD_VAR 0 1
18297: NOT
18298: IFFALSE 18302
// exit ;
18300: GO 18347
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18302: LD_VAR 0 1
18306: PUSH
18307: LD_INT 1
18309: PPUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 12
18319: ARRAY
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 4
18326: PPUSH
18327: CALL_OW 12
18331: PPUSH
18332: LD_INT 3000
18334: PPUSH
18335: LD_INT 9000
18337: PPUSH
18338: CALL_OW 12
18342: PPUSH
18343: CALL_OW 492
// end ;
18347: PPOPN 1
18349: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18350: LD_EXP 26
18354: PUSH
18355: LD_EXP 41
18359: AND
18360: IFFALSE 18380
18362: GO 18364
18364: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18365: LD_INT 1
18367: PPUSH
18368: LD_OWVAR 2
18372: PPUSH
18373: LD_INT 0
18375: PPUSH
18376: CALL_OW 324
18380: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18381: LD_EXP 26
18385: PUSH
18386: LD_EXP 42
18390: AND
18391: IFFALSE 18474
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: LD_INT 22
18407: PUSH
18408: LD_OWVAR 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: ST_TO_ADDR
// if not tmp then
18436: LD_VAR 0 2
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 18474
// for i in tmp do
18445: LD_ADDR_VAR 0 1
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: FOR_IN
18456: IFFALSE 18472
// SetBLevel ( i , 10 ) ;
18458: LD_VAR 0 1
18462: PPUSH
18463: LD_INT 10
18465: PPUSH
18466: CALL_OW 241
18470: GO 18455
18472: POP
18473: POP
// end ;
18474: PPOPN 2
18476: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18477: LD_EXP 26
18481: PUSH
18482: LD_EXP 43
18486: AND
18487: IFFALSE 18598
18489: GO 18491
18491: DISABLE
18492: LD_INT 0
18494: PPUSH
18495: PPUSH
18496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18497: LD_ADDR_VAR 0 3
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_OWVAR 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 25
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 69
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 3
18537: NOT
18538: IFFALSE 18542
// exit ;
18540: GO 18598
// un := tmp [ rand ( 1 , tmp ) ] ;
18542: LD_ADDR_VAR 0 2
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_INT 1
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: CALL_OW 12
18564: ARRAY
18565: ST_TO_ADDR
// if Crawls ( un ) then
18566: LD_VAR 0 2
18570: PPUSH
18571: CALL_OW 318
18575: IFFALSE 18586
// ComWalk ( un ) ;
18577: LD_VAR 0 2
18581: PPUSH
18582: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18586: LD_VAR 0 2
18590: PPUSH
18591: LD_INT 5
18593: PPUSH
18594: CALL_OW 336
// end ;
18598: PPOPN 3
18600: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18601: LD_EXP 26
18605: PUSH
18606: LD_EXP 44
18610: AND
18611: PUSH
18612: LD_OWVAR 67
18616: PUSH
18617: LD_INT 4
18619: LESS
18620: AND
18621: IFFALSE 18640
18623: GO 18625
18625: DISABLE
// begin Difficulty := Difficulty + 1 ;
18626: LD_ADDR_OWVAR 67
18630: PUSH
18631: LD_OWVAR 67
18635: PUSH
18636: LD_INT 1
18638: PLUS
18639: ST_TO_ADDR
// end ;
18640: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18641: LD_EXP 26
18645: PUSH
18646: LD_EXP 45
18650: AND
18651: IFFALSE 18754
18653: GO 18655
18655: DISABLE
18656: LD_INT 0
18658: PPUSH
// begin for i := 1 to 5 do
18659: LD_ADDR_VAR 0 1
18663: PUSH
18664: DOUBLE
18665: LD_INT 1
18667: DEC
18668: ST_TO_ADDR
18669: LD_INT 5
18671: PUSH
18672: FOR_TO
18673: IFFALSE 18752
// begin uc_nation := nation_nature ;
18675: LD_ADDR_OWVAR 21
18679: PUSH
18680: LD_INT 0
18682: ST_TO_ADDR
// uc_side := 0 ;
18683: LD_ADDR_OWVAR 20
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18691: LD_ADDR_OWVAR 29
18695: PUSH
18696: LD_INT 12
18698: PUSH
18699: LD_INT 12
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: ST_TO_ADDR
// hc_agressivity := 20 ;
18706: LD_ADDR_OWVAR 35
18710: PUSH
18711: LD_INT 20
18713: ST_TO_ADDR
// hc_class := class_tiger ;
18714: LD_ADDR_OWVAR 28
18718: PUSH
18719: LD_INT 14
18721: ST_TO_ADDR
// hc_gallery :=  ;
18722: LD_ADDR_OWVAR 33
18726: PUSH
18727: LD_STRING 
18729: ST_TO_ADDR
// hc_name :=  ;
18730: LD_ADDR_OWVAR 26
18734: PUSH
18735: LD_STRING 
18737: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18738: CALL_OW 44
18742: PPUSH
18743: LD_INT 0
18745: PPUSH
18746: CALL_OW 51
// end ;
18750: GO 18672
18752: POP
18753: POP
// end ;
18754: PPOPN 1
18756: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18757: LD_EXP 26
18761: PUSH
18762: LD_EXP 46
18766: AND
18767: IFFALSE 18776
18769: GO 18771
18771: DISABLE
// StreamSibBomb ;
18772: CALL 18777 0 0
18776: END
// export function StreamSibBomb ; var i , x , y ; begin
18777: LD_INT 0
18779: PPUSH
18780: PPUSH
18781: PPUSH
18782: PPUSH
// result := false ;
18783: LD_ADDR_VAR 0 1
18787: PUSH
18788: LD_INT 0
18790: ST_TO_ADDR
// for i := 1 to 16 do
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: DOUBLE
18797: LD_INT 1
18799: DEC
18800: ST_TO_ADDR
18801: LD_INT 16
18803: PUSH
18804: FOR_TO
18805: IFFALSE 19004
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18807: LD_ADDR_VAR 0 3
18811: PUSH
18812: LD_INT 10
18814: PUSH
18815: LD_INT 20
18817: PUSH
18818: LD_INT 30
18820: PUSH
18821: LD_INT 40
18823: PUSH
18824: LD_INT 50
18826: PUSH
18827: LD_INT 60
18829: PUSH
18830: LD_INT 70
18832: PUSH
18833: LD_INT 80
18835: PUSH
18836: LD_INT 90
18838: PUSH
18839: LD_INT 100
18841: PUSH
18842: LD_INT 110
18844: PUSH
18845: LD_INT 120
18847: PUSH
18848: LD_INT 130
18850: PUSH
18851: LD_INT 140
18853: PUSH
18854: LD_INT 150
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: PPUSH
18877: LD_INT 15
18879: PPUSH
18880: CALL_OW 12
18884: ARRAY
18885: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18886: LD_ADDR_VAR 0 4
18890: PUSH
18891: LD_INT 10
18893: PUSH
18894: LD_INT 20
18896: PUSH
18897: LD_INT 30
18899: PUSH
18900: LD_INT 40
18902: PUSH
18903: LD_INT 50
18905: PUSH
18906: LD_INT 60
18908: PUSH
18909: LD_INT 70
18911: PUSH
18912: LD_INT 80
18914: PUSH
18915: LD_INT 90
18917: PUSH
18918: LD_INT 100
18920: PUSH
18921: LD_INT 110
18923: PUSH
18924: LD_INT 120
18926: PUSH
18927: LD_INT 130
18929: PUSH
18930: LD_INT 140
18932: PUSH
18933: LD_INT 150
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PPUSH
18956: LD_INT 15
18958: PPUSH
18959: CALL_OW 12
18963: ARRAY
18964: ST_TO_ADDR
// if ValidHex ( x , y ) then
18965: LD_VAR 0 3
18969: PPUSH
18970: LD_VAR 0 4
18974: PPUSH
18975: CALL_OW 488
18979: IFFALSE 19002
// begin result := [ x , y ] ;
18981: LD_ADDR_VAR 0 1
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: LD_VAR 0 4
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: ST_TO_ADDR
// break ;
19000: GO 19004
// end ; end ;
19002: GO 18804
19004: POP
19005: POP
// if result then
19006: LD_VAR 0 1
19010: IFFALSE 19070
// begin ToLua ( playSibBomb() ) ;
19012: LD_STRING playSibBomb()
19014: PPUSH
19015: CALL_OW 559
// wait ( 0 0$14 ) ;
19019: LD_INT 490
19021: PPUSH
19022: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19026: LD_VAR 0 1
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PPUSH
19035: LD_VAR 0 1
19039: PUSH
19040: LD_INT 2
19042: ARRAY
19043: PPUSH
19044: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19048: LD_VAR 0 1
19052: PUSH
19053: LD_INT 1
19055: ARRAY
19056: PPUSH
19057: LD_VAR 0 1
19061: PUSH
19062: LD_INT 2
19064: ARRAY
19065: PPUSH
19066: CALL_OW 429
// end ; end ;
19070: LD_VAR 0 1
19074: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19075: LD_EXP 26
19079: PUSH
19080: LD_EXP 48
19084: AND
19085: IFFALSE 19097
19087: GO 19089
19089: DISABLE
// YouLost (  ) ;
19090: LD_STRING 
19092: PPUSH
19093: CALL_OW 104
19097: END
// every 0 0$1 trigger StreamModeActive and sFog do
19098: LD_EXP 26
19102: PUSH
19103: LD_EXP 47
19107: AND
19108: IFFALSE 19122
19110: GO 19112
19112: DISABLE
// FogOff ( your_side ) ;
19113: LD_OWVAR 2
19117: PPUSH
19118: CALL_OW 344
19122: END
// every 0 0$1 trigger StreamModeActive and sSun do
19123: LD_EXP 26
19127: PUSH
19128: LD_EXP 49
19132: AND
19133: IFFALSE 19161
19135: GO 19137
19137: DISABLE
// begin solar_recharge_percent := 0 ;
19138: LD_ADDR_OWVAR 79
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19146: LD_INT 10500
19148: PPUSH
19149: CALL_OW 67
// solar_recharge_percent := 100 ;
19153: LD_ADDR_OWVAR 79
19157: PUSH
19158: LD_INT 100
19160: ST_TO_ADDR
// end ;
19161: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19162: LD_EXP 26
19166: PUSH
19167: LD_EXP 50
19171: AND
19172: IFFALSE 19411
19174: GO 19176
19176: DISABLE
19177: LD_INT 0
19179: PPUSH
19180: PPUSH
19181: PPUSH
// begin tmp := [ ] ;
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: EMPTY
19188: ST_TO_ADDR
// for i := 1 to 6 do
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: DOUBLE
19195: LD_INT 1
19197: DEC
19198: ST_TO_ADDR
19199: LD_INT 6
19201: PUSH
19202: FOR_TO
19203: IFFALSE 19308
// begin uc_nation := nation_nature ;
19205: LD_ADDR_OWVAR 21
19209: PUSH
19210: LD_INT 0
19212: ST_TO_ADDR
// uc_side := 0 ;
19213: LD_ADDR_OWVAR 20
19217: PUSH
19218: LD_INT 0
19220: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19221: LD_ADDR_OWVAR 29
19225: PUSH
19226: LD_INT 12
19228: PUSH
19229: LD_INT 12
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: ST_TO_ADDR
// hc_agressivity := 20 ;
19236: LD_ADDR_OWVAR 35
19240: PUSH
19241: LD_INT 20
19243: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19244: LD_ADDR_OWVAR 28
19248: PUSH
19249: LD_INT 17
19251: ST_TO_ADDR
// hc_gallery :=  ;
19252: LD_ADDR_OWVAR 33
19256: PUSH
19257: LD_STRING 
19259: ST_TO_ADDR
// hc_name :=  ;
19260: LD_ADDR_OWVAR 26
19264: PUSH
19265: LD_STRING 
19267: ST_TO_ADDR
// un := CreateHuman ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: CALL_OW 44
19277: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19278: LD_VAR 0 2
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 51
// tmp := tmp ^ un ;
19290: LD_ADDR_VAR 0 3
19294: PUSH
19295: LD_VAR 0 3
19299: PUSH
19300: LD_VAR 0 2
19304: ADD
19305: ST_TO_ADDR
// end ;
19306: GO 19202
19308: POP
19309: POP
// repeat wait ( 0 0$1 ) ;
19310: LD_INT 35
19312: PPUSH
19313: CALL_OW 67
// for un in tmp do
19317: LD_ADDR_VAR 0 2
19321: PUSH
19322: LD_VAR 0 3
19326: PUSH
19327: FOR_IN
19328: IFFALSE 19402
// begin if IsDead ( un ) then
19330: LD_VAR 0 2
19334: PPUSH
19335: CALL_OW 301
19339: IFFALSE 19359
// begin tmp := tmp diff un ;
19341: LD_ADDR_VAR 0 3
19345: PUSH
19346: LD_VAR 0 3
19350: PUSH
19351: LD_VAR 0 2
19355: DIFF
19356: ST_TO_ADDR
// continue ;
19357: GO 19327
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: LD_INT 3
19366: PUSH
19367: LD_INT 22
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: PPUSH
19386: LD_VAR 0 2
19390: PPUSH
19391: CALL_OW 74
19395: PPUSH
19396: CALL_OW 115
// end ;
19400: GO 19327
19402: POP
19403: POP
// until not tmp ;
19404: LD_VAR 0 3
19408: NOT
19409: IFFALSE 19310
// end ;
19411: PPOPN 3
19413: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19414: LD_EXP 26
19418: PUSH
19419: LD_EXP 51
19423: AND
19424: IFFALSE 19478
19426: GO 19428
19428: DISABLE
// begin ToLua ( displayTroll(); ) ;
19429: LD_STRING displayTroll();
19431: PPUSH
19432: CALL_OW 559
// wait ( 3 3$00 ) ;
19436: LD_INT 6300
19438: PPUSH
19439: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19443: LD_STRING hideTroll();
19445: PPUSH
19446: CALL_OW 559
// wait ( 1 1$00 ) ;
19450: LD_INT 2100
19452: PPUSH
19453: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19457: LD_STRING displayTroll();
19459: PPUSH
19460: CALL_OW 559
// wait ( 1 1$00 ) ;
19464: LD_INT 2100
19466: PPUSH
19467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19471: LD_STRING hideTroll();
19473: PPUSH
19474: CALL_OW 559
// end ;
19478: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19479: LD_EXP 26
19483: PUSH
19484: LD_EXP 52
19488: AND
19489: IFFALSE 19552
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
// begin p := 0 ;
19497: LD_ADDR_VAR 0 1
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
// repeat game_speed := 1 ;
19505: LD_ADDR_OWVAR 65
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19513: LD_INT 35
19515: PPUSH
19516: CALL_OW 67
// p := p + 1 ;
19520: LD_ADDR_VAR 0 1
19524: PUSH
19525: LD_VAR 0 1
19529: PUSH
19530: LD_INT 1
19532: PLUS
19533: ST_TO_ADDR
// until p >= 60 ;
19534: LD_VAR 0 1
19538: PUSH
19539: LD_INT 60
19541: GREATEREQUAL
19542: IFFALSE 19505
// game_speed := 4 ;
19544: LD_ADDR_OWVAR 65
19548: PUSH
19549: LD_INT 4
19551: ST_TO_ADDR
// end ;
19552: PPOPN 1
19554: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19555: LD_EXP 26
19559: PUSH
19560: LD_EXP 53
19564: AND
19565: IFFALSE 19711
19567: GO 19569
19569: DISABLE
19570: LD_INT 0
19572: PPUSH
19573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_INT 22
19581: PUSH
19582: LD_OWVAR 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: ST_TO_ADDR
// if not depot then
19628: LD_VAR 0 1
19632: NOT
19633: IFFALSE 19637
// exit ;
19635: GO 19711
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_VAR 0 1
19646: PUSH
19647: LD_INT 1
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 12
19659: ARRAY
19660: PPUSH
19661: CALL_OW 274
19665: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19666: LD_VAR 0 2
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: LD_INT 0
19676: PPUSH
19677: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19681: LD_VAR 0 2
19685: PPUSH
19686: LD_INT 2
19688: PPUSH
19689: LD_INT 0
19691: PPUSH
19692: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_INT 3
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 277
// end ;
19711: PPOPN 2
19713: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19714: LD_EXP 26
19718: PUSH
19719: LD_EXP 54
19723: AND
19724: IFFALSE 19821
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 22
19739: PUSH
19740: LD_OWVAR 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: LD_INT 23
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PPUSH
19781: CALL_OW 69
19785: ST_TO_ADDR
// if not tmp then
19786: LD_VAR 0 1
19790: NOT
19791: IFFALSE 19795
// exit ;
19793: GO 19821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19795: LD_VAR 0 1
19799: PUSH
19800: LD_INT 1
19802: PPUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL_OW 12
19812: ARRAY
19813: PPUSH
19814: LD_INT 200
19816: PPUSH
19817: CALL_OW 234
// end ;
19821: PPOPN 1
19823: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19824: LD_EXP 26
19828: PUSH
19829: LD_EXP 55
19833: AND
19834: IFFALSE 19913
19836: GO 19838
19838: DISABLE
19839: LD_INT 0
19841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19842: LD_ADDR_VAR 0 1
19846: PUSH
19847: LD_INT 22
19849: PUSH
19850: LD_OWVAR 2
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 21
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: ST_TO_ADDR
// if not tmp then
19878: LD_VAR 0 1
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 19913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19887: LD_VAR 0 1
19891: PUSH
19892: LD_INT 1
19894: PPUSH
19895: LD_VAR 0 1
19899: PPUSH
19900: CALL_OW 12
19904: ARRAY
19905: PPUSH
19906: LD_INT 60
19908: PPUSH
19909: CALL_OW 234
// end ;
19913: PPOPN 1
19915: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19916: LD_EXP 26
19920: PUSH
19921: LD_EXP 56
19925: AND
19926: IFFALSE 20025
19928: GO 19930
19930: DISABLE
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
// begin enable ;
19935: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19936: LD_ADDR_VAR 0 1
19940: PUSH
19941: LD_INT 22
19943: PUSH
19944: LD_OWVAR 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 61
19955: PUSH
19956: EMPTY
19957: LIST
19958: PUSH
19959: LD_INT 33
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: ST_TO_ADDR
// if not tmp then
19979: LD_VAR 0 1
19983: NOT
19984: IFFALSE 19988
// exit ;
19986: GO 20025
// for i in tmp do
19988: LD_ADDR_VAR 0 2
19992: PUSH
19993: LD_VAR 0 1
19997: PUSH
19998: FOR_IN
19999: IFFALSE 20023
// if IsControledBy ( i ) then
20001: LD_VAR 0 2
20005: PPUSH
20006: CALL_OW 312
20010: IFFALSE 20021
// ComUnlink ( i ) ;
20012: LD_VAR 0 2
20016: PPUSH
20017: CALL_OW 136
20021: GO 19998
20023: POP
20024: POP
// end ;
20025: PPOPN 2
20027: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20028: LD_EXP 26
20032: PUSH
20033: LD_EXP 57
20037: AND
20038: IFFALSE 20178
20040: GO 20042
20042: DISABLE
20043: LD_INT 0
20045: PPUSH
20046: PPUSH
// begin ToLua ( displayPowell(); ) ;
20047: LD_STRING displayPowell();
20049: PPUSH
20050: CALL_OW 559
// uc_side := 0 ;
20054: LD_ADDR_OWVAR 20
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// uc_nation := 2 ;
20062: LD_ADDR_OWVAR 21
20066: PUSH
20067: LD_INT 2
20069: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20070: LD_ADDR_OWVAR 37
20074: PUSH
20075: LD_INT 14
20077: ST_TO_ADDR
// vc_engine := engine_siberite ;
20078: LD_ADDR_OWVAR 39
20082: PUSH
20083: LD_INT 3
20085: ST_TO_ADDR
// vc_control := control_apeman ;
20086: LD_ADDR_OWVAR 38
20090: PUSH
20091: LD_INT 5
20093: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20094: LD_ADDR_OWVAR 40
20098: PUSH
20099: LD_INT 29
20101: ST_TO_ADDR
// un := CreateVehicle ;
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: CALL_OW 45
20111: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20112: LD_VAR 0 2
20116: PPUSH
20117: LD_INT 1
20119: PPUSH
20120: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20124: LD_INT 35
20126: PPUSH
20127: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: LD_INT 22
20138: PUSH
20139: LD_OWVAR 2
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: PPUSH
20153: LD_VAR 0 2
20157: PPUSH
20158: CALL_OW 74
20162: PPUSH
20163: CALL_OW 115
// until IsDead ( un ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 301
20176: IFFALSE 20124
// end ;
20178: PPOPN 2
20180: END
// every 0 0$1 trigger StreamModeActive and sStu do
20181: LD_EXP 26
20185: PUSH
20186: LD_EXP 65
20190: AND
20191: IFFALSE 20207
20193: GO 20195
20195: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20196: LD_STRING displayStucuk();
20198: PPUSH
20199: CALL_OW 559
// ResetFog ;
20203: CALL_OW 335
// end ;
20207: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20208: LD_EXP 26
20212: PUSH
20213: LD_EXP 58
20217: AND
20218: IFFALSE 20359
20220: GO 20222
20222: DISABLE
20223: LD_INT 0
20225: PPUSH
20226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20227: LD_ADDR_VAR 0 2
20231: PUSH
20232: LD_INT 22
20234: PUSH
20235: LD_OWVAR 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL_OW 69
20262: ST_TO_ADDR
// if not tmp then
20263: LD_VAR 0 2
20267: NOT
20268: IFFALSE 20272
// exit ;
20270: GO 20359
// un := tmp [ rand ( 1 , tmp ) ] ;
20272: LD_ADDR_VAR 0 1
20276: PUSH
20277: LD_VAR 0 2
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_INT 0
20303: PPUSH
20304: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20308: LD_VAR 0 1
20312: PPUSH
20313: LD_OWVAR 3
20317: PUSH
20318: LD_VAR 0 1
20322: DIFF
20323: PPUSH
20324: LD_VAR 0 1
20328: PPUSH
20329: CALL_OW 74
20333: PPUSH
20334: CALL_OW 115
// wait ( 0 0$20 ) ;
20338: LD_INT 700
20340: PPUSH
20341: CALL_OW 67
// SetSide ( un , your_side ) ;
20345: LD_VAR 0 1
20349: PPUSH
20350: LD_OWVAR 2
20354: PPUSH
20355: CALL_OW 235
// end ;
20359: PPOPN 2
20361: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20362: LD_EXP 26
20366: PUSH
20367: LD_EXP 59
20371: AND
20372: IFFALSE 20478
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_OWVAR 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 30
20402: PUSH
20403: LD_INT 0
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 30
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PPUSH
20429: CALL_OW 69
20433: ST_TO_ADDR
// if not depot then
20434: LD_VAR 0 1
20438: NOT
20439: IFFALSE 20443
// exit ;
20441: GO 20478
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20443: LD_VAR 0 1
20447: PUSH
20448: LD_INT 1
20450: ARRAY
20451: PPUSH
20452: CALL_OW 250
20456: PPUSH
20457: LD_VAR 0 1
20461: PUSH
20462: LD_INT 1
20464: ARRAY
20465: PPUSH
20466: CALL_OW 251
20470: PPUSH
20471: LD_INT 70
20473: PPUSH
20474: CALL_OW 495
// end ;
20478: PPOPN 1
20480: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20481: LD_EXP 26
20485: PUSH
20486: LD_EXP 60
20490: AND
20491: IFFALSE 20702
20493: GO 20495
20495: DISABLE
20496: LD_INT 0
20498: PPUSH
20499: PPUSH
20500: PPUSH
20501: PPUSH
20502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: LD_INT 22
20510: PUSH
20511: LD_OWVAR 2
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: ST_TO_ADDR
// if not tmp then
20539: LD_VAR 0 5
20543: NOT
20544: IFFALSE 20548
// exit ;
20546: GO 20702
// for i in tmp do
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_VAR 0 5
20557: PUSH
20558: FOR_IN
20559: IFFALSE 20700
// begin d := rand ( 0 , 5 ) ;
20561: LD_ADDR_VAR 0 4
20565: PUSH
20566: LD_INT 0
20568: PPUSH
20569: LD_INT 5
20571: PPUSH
20572: CALL_OW 12
20576: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20577: LD_ADDR_VAR 0 2
20581: PUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 250
20591: PPUSH
20592: LD_VAR 0 4
20596: PPUSH
20597: LD_INT 3
20599: PPUSH
20600: LD_INT 12
20602: PPUSH
20603: CALL_OW 12
20607: PPUSH
20608: CALL_OW 272
20612: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20613: LD_ADDR_VAR 0 3
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 251
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_INT 3
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 12
20643: PPUSH
20644: CALL_OW 273
20648: ST_TO_ADDR
// if ValidHex ( x , y ) then
20649: LD_VAR 0 2
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 488
20663: IFFALSE 20698
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_VAR 0 2
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: LD_INT 3
20682: PPUSH
20683: LD_INT 6
20685: PPUSH
20686: CALL_OW 12
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: CALL_OW 483
// end ;
20698: GO 20558
20700: POP
20701: POP
// end ;
20702: PPOPN 5
20704: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20705: LD_EXP 26
20709: PUSH
20710: LD_EXP 61
20714: AND
20715: IFFALSE 20809
20717: GO 20719
20719: DISABLE
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20724: LD_ADDR_VAR 0 2
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_OWVAR 2
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 32
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 21
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: PPUSH
20766: CALL_OW 69
20770: ST_TO_ADDR
// if not tmp then
20771: LD_VAR 0 2
20775: NOT
20776: IFFALSE 20780
// exit ;
20778: GO 20809
// for i in tmp do
20780: LD_ADDR_VAR 0 1
20784: PUSH
20785: LD_VAR 0 2
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20807
// SetFuel ( i , 0 ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: LD_INT 0
20800: PPUSH
20801: CALL_OW 240
20805: GO 20790
20807: POP
20808: POP
// end ;
20809: PPOPN 2
20811: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20812: LD_EXP 26
20816: PUSH
20817: LD_EXP 62
20821: AND
20822: IFFALSE 20888
20824: GO 20826
20826: DISABLE
20827: LD_INT 0
20829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20830: LD_ADDR_VAR 0 1
20834: PUSH
20835: LD_INT 22
20837: PUSH
20838: LD_OWVAR 2
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 30
20849: PUSH
20850: LD_INT 29
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PPUSH
20861: CALL_OW 69
20865: ST_TO_ADDR
// if not tmp then
20866: LD_VAR 0 1
20870: NOT
20871: IFFALSE 20875
// exit ;
20873: GO 20888
// DestroyUnit ( tmp [ 1 ] ) ;
20875: LD_VAR 0 1
20879: PUSH
20880: LD_INT 1
20882: ARRAY
20883: PPUSH
20884: CALL_OW 65
// end ;
20888: PPOPN 1
20890: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20891: LD_EXP 26
20895: PUSH
20896: LD_EXP 64
20900: AND
20901: IFFALSE 21030
20903: GO 20905
20905: DISABLE
20906: LD_INT 0
20908: PPUSH
// begin uc_side := 0 ;
20909: LD_ADDR_OWVAR 20
20913: PUSH
20914: LD_INT 0
20916: ST_TO_ADDR
// uc_nation := nation_arabian ;
20917: LD_ADDR_OWVAR 21
20921: PUSH
20922: LD_INT 2
20924: ST_TO_ADDR
// hc_gallery :=  ;
20925: LD_ADDR_OWVAR 33
20929: PUSH
20930: LD_STRING 
20932: ST_TO_ADDR
// hc_name :=  ;
20933: LD_ADDR_OWVAR 26
20937: PUSH
20938: LD_STRING 
20940: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20941: LD_INT 1
20943: PPUSH
20944: LD_INT 11
20946: PPUSH
20947: LD_INT 10
20949: PPUSH
20950: CALL_OW 380
// un := CreateHuman ;
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: CALL_OW 44
20963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20964: LD_VAR 0 1
20968: PPUSH
20969: LD_INT 1
20971: PPUSH
20972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20976: LD_INT 35
20978: PPUSH
20979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_INT 22
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL_OW 69
21004: PPUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 74
21014: PPUSH
21015: CALL_OW 115
// until IsDead ( un ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 301
21028: IFFALSE 20976
// end ;
21030: PPOPN 1
21032: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21033: LD_EXP 26
21037: PUSH
21038: LD_EXP 66
21042: AND
21043: IFFALSE 21055
21045: GO 21047
21047: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21048: LD_STRING earthquake(getX(game), 0, 32)
21050: PPUSH
21051: CALL_OW 559
21055: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21056: LD_EXP 26
21060: PUSH
21061: LD_EXP 67
21065: AND
21066: IFFALSE 21157
21068: GO 21070
21070: DISABLE
21071: LD_INT 0
21073: PPUSH
// begin enable ;
21074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21075: LD_ADDR_VAR 0 1
21079: PUSH
21080: LD_INT 22
21082: PUSH
21083: LD_OWVAR 2
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 21
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 33
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: ST_TO_ADDR
// if not tmp then
21122: LD_VAR 0 1
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21131: LD_VAR 0 1
21135: PUSH
21136: LD_INT 1
21138: PPUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 12
21148: ARRAY
21149: PPUSH
21150: LD_INT 1
21152: PPUSH
21153: CALL_OW 234
// end ;
21157: PPOPN 1
21159: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21160: LD_EXP 26
21164: PUSH
21165: LD_EXP 68
21169: AND
21170: IFFALSE 21311
21172: GO 21174
21174: DISABLE
21175: LD_INT 0
21177: PPUSH
21178: PPUSH
21179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21180: LD_ADDR_VAR 0 3
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_OWVAR 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 25
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PPUSH
21211: CALL_OW 69
21215: ST_TO_ADDR
// if not tmp then
21216: LD_VAR 0 3
21220: NOT
21221: IFFALSE 21225
// exit ;
21223: GO 21311
// un := tmp [ rand ( 1 , tmp ) ] ;
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: LD_VAR 0 3
21234: PUSH
21235: LD_INT 1
21237: PPUSH
21238: LD_VAR 0 3
21242: PPUSH
21243: CALL_OW 12
21247: ARRAY
21248: ST_TO_ADDR
// if Crawls ( un ) then
21249: LD_VAR 0 2
21253: PPUSH
21254: CALL_OW 318
21258: IFFALSE 21269
// ComWalk ( un ) ;
21260: LD_VAR 0 2
21264: PPUSH
21265: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_INT 9
21276: PPUSH
21277: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21281: LD_INT 28
21283: PPUSH
21284: LD_OWVAR 2
21288: PPUSH
21289: LD_INT 2
21291: PPUSH
21292: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21296: LD_INT 29
21298: PPUSH
21299: LD_OWVAR 2
21303: PPUSH
21304: LD_INT 2
21306: PPUSH
21307: CALL_OW 322
// end ;
21311: PPOPN 3
21313: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21314: LD_EXP 26
21318: PUSH
21319: LD_EXP 69
21323: AND
21324: IFFALSE 21435
21326: GO 21328
21328: DISABLE
21329: LD_INT 0
21331: PPUSH
21332: PPUSH
21333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21334: LD_ADDR_VAR 0 3
21338: PUSH
21339: LD_INT 22
21341: PUSH
21342: LD_OWVAR 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 25
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 69
21369: ST_TO_ADDR
// if not tmp then
21370: LD_VAR 0 3
21374: NOT
21375: IFFALSE 21379
// exit ;
21377: GO 21435
// un := tmp [ rand ( 1 , tmp ) ] ;
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: LD_VAR 0 3
21388: PUSH
21389: LD_INT 1
21391: PPUSH
21392: LD_VAR 0 3
21396: PPUSH
21397: CALL_OW 12
21401: ARRAY
21402: ST_TO_ADDR
// if Crawls ( un ) then
21403: LD_VAR 0 2
21407: PPUSH
21408: CALL_OW 318
21412: IFFALSE 21423
// ComWalk ( un ) ;
21414: LD_VAR 0 2
21418: PPUSH
21419: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21423: LD_VAR 0 2
21427: PPUSH
21428: LD_INT 8
21430: PPUSH
21431: CALL_OW 336
// end ;
21435: PPOPN 3
21437: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21438: LD_EXP 26
21442: PUSH
21443: LD_EXP 70
21447: AND
21448: IFFALSE 21592
21450: GO 21452
21452: DISABLE
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_OWVAR 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 34
21489: PUSH
21490: LD_INT 12
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 34
21499: PUSH
21500: LD_INT 51
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 34
21509: PUSH
21510: LD_INT 32
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: PPUSH
21528: CALL_OW 69
21532: ST_TO_ADDR
// if not tmp then
21533: LD_VAR 0 2
21537: NOT
21538: IFFALSE 21542
// exit ;
21540: GO 21592
// for i in tmp do
21542: LD_ADDR_VAR 0 1
21546: PUSH
21547: LD_VAR 0 2
21551: PUSH
21552: FOR_IN
21553: IFFALSE 21590
// if GetCargo ( i , mat_artifact ) = 0 then
21555: LD_VAR 0 1
21559: PPUSH
21560: LD_INT 4
21562: PPUSH
21563: CALL_OW 289
21567: PUSH
21568: LD_INT 0
21570: EQUAL
21571: IFFALSE 21588
// SetCargo ( i , mat_siberit , 100 ) ;
21573: LD_VAR 0 1
21577: PPUSH
21578: LD_INT 3
21580: PPUSH
21581: LD_INT 100
21583: PPUSH
21584: CALL_OW 290
21588: GO 21552
21590: POP
21591: POP
// end ;
21592: PPOPN 2
21594: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21595: LD_EXP 26
21599: PUSH
21600: LD_EXP 71
21604: AND
21605: IFFALSE 21788
21607: GO 21609
21609: DISABLE
21610: LD_INT 0
21612: PPUSH
21613: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_INT 22
21621: PUSH
21622: LD_OWVAR 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: ST_TO_ADDR
// if not tmp then
21636: LD_VAR 0 2
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21788
// for i := 1 to 2 do
21645: LD_ADDR_VAR 0 1
21649: PUSH
21650: DOUBLE
21651: LD_INT 1
21653: DEC
21654: ST_TO_ADDR
21655: LD_INT 2
21657: PUSH
21658: FOR_TO
21659: IFFALSE 21786
// begin uc_side := your_side ;
21661: LD_ADDR_OWVAR 20
21665: PUSH
21666: LD_OWVAR 2
21670: ST_TO_ADDR
// uc_nation := nation_american ;
21671: LD_ADDR_OWVAR 21
21675: PUSH
21676: LD_INT 1
21678: ST_TO_ADDR
// vc_chassis := us_morphling ;
21679: LD_ADDR_OWVAR 37
21683: PUSH
21684: LD_INT 5
21686: ST_TO_ADDR
// vc_engine := engine_siberite ;
21687: LD_ADDR_OWVAR 39
21691: PUSH
21692: LD_INT 3
21694: ST_TO_ADDR
// vc_control := control_computer ;
21695: LD_ADDR_OWVAR 38
21699: PUSH
21700: LD_INT 3
21702: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21703: LD_ADDR_OWVAR 40
21707: PUSH
21708: LD_INT 10
21710: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21711: LD_VAR 0 2
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: PPUSH
21720: CALL_OW 310
21724: NOT
21725: IFFALSE 21772
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21727: CALL_OW 45
21731: PPUSH
21732: LD_VAR 0 2
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 250
21745: PPUSH
21746: LD_VAR 0 2
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: CALL_OW 251
21759: PPUSH
21760: LD_INT 12
21762: PPUSH
21763: LD_INT 1
21765: PPUSH
21766: CALL_OW 50
21770: GO 21784
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21772: CALL_OW 45
21776: PPUSH
21777: LD_INT 1
21779: PPUSH
21780: CALL_OW 51
// end ;
21784: GO 21658
21786: POP
21787: POP
// end ;
21788: PPOPN 2
21790: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21791: LD_EXP 26
21795: PUSH
21796: LD_EXP 72
21800: AND
21801: IFFALSE 22023
21803: GO 21805
21805: DISABLE
21806: LD_INT 0
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
21812: PPUSH
21813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21814: LD_ADDR_VAR 0 6
21818: PUSH
21819: LD_INT 22
21821: PUSH
21822: LD_OWVAR 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 21
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 3
21843: PUSH
21844: LD_INT 23
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 69
21867: ST_TO_ADDR
// if not tmp then
21868: LD_VAR 0 6
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 22023
// s1 := rand ( 1 , 4 ) ;
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: LD_INT 1
21884: PPUSH
21885: LD_INT 4
21887: PPUSH
21888: CALL_OW 12
21892: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21893: LD_ADDR_VAR 0 4
21897: PUSH
21898: LD_VAR 0 6
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PPUSH
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 259
21916: ST_TO_ADDR
// if s1 = 1 then
21917: LD_VAR 0 2
21921: PUSH
21922: LD_INT 1
21924: EQUAL
21925: IFFALSE 21945
// s2 := rand ( 2 , 4 ) else
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_INT 2
21934: PPUSH
21935: LD_INT 4
21937: PPUSH
21938: CALL_OW 12
21942: ST_TO_ADDR
21943: GO 21953
// s2 := 1 ;
21945: LD_ADDR_VAR 0 3
21949: PUSH
21950: LD_INT 1
21952: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21953: LD_ADDR_VAR 0 5
21957: PUSH
21958: LD_VAR 0 6
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PPUSH
21967: LD_VAR 0 3
21971: PPUSH
21972: CALL_OW 259
21976: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21977: LD_VAR 0 6
21981: PUSH
21982: LD_INT 1
21984: ARRAY
21985: PPUSH
21986: LD_VAR 0 2
21990: PPUSH
21991: LD_VAR 0 5
21995: PPUSH
21996: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22000: LD_VAR 0 6
22004: PUSH
22005: LD_INT 1
22007: ARRAY
22008: PPUSH
22009: LD_VAR 0 3
22013: PPUSH
22014: LD_VAR 0 4
22018: PPUSH
22019: CALL_OW 237
// end ;
22023: PPOPN 6
22025: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22026: LD_EXP 26
22030: PUSH
22031: LD_EXP 73
22035: AND
22036: IFFALSE 22115
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22044: LD_ADDR_VAR 0 1
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_OWVAR 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 30
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PPUSH
22075: CALL_OW 69
22079: ST_TO_ADDR
// if not tmp then
22080: LD_VAR 0 1
22084: NOT
22085: IFFALSE 22089
// exit ;
22087: GO 22115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22089: LD_VAR 0 1
22093: PUSH
22094: LD_INT 1
22096: PPUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 12
22106: ARRAY
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 234
// end ;
22115: PPOPN 1
22117: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22118: LD_EXP 26
22122: PUSH
22123: LD_EXP 74
22127: AND
22128: IFFALSE 22240
22130: GO 22132
22132: DISABLE
22133: LD_INT 0
22135: PPUSH
22136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_INT 22
22144: PUSH
22145: LD_OWVAR 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: PUSH
22157: LD_INT 30
22159: PUSH
22160: LD_INT 27
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 30
22169: PUSH
22170: LD_INT 26
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 30
22179: PUSH
22180: LD_INT 28
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PPUSH
22197: CALL_OW 69
22201: ST_TO_ADDR
// if not tmp then
22202: LD_VAR 0 2
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22240
// for i in tmp do
22211: LD_ADDR_VAR 0 1
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: FOR_IN
22222: IFFALSE 22238
// SetLives ( i , 1 ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_INT 1
22231: PPUSH
22232: CALL_OW 234
22236: GO 22221
22238: POP
22239: POP
// end ;
22240: PPOPN 2
22242: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22243: LD_EXP 26
22247: PUSH
22248: LD_EXP 75
22252: AND
22253: IFFALSE 22540
22255: GO 22257
22257: DISABLE
22258: LD_INT 0
22260: PPUSH
22261: PPUSH
22262: PPUSH
// begin i := rand ( 1 , 7 ) ;
22263: LD_ADDR_VAR 0 1
22267: PUSH
22268: LD_INT 1
22270: PPUSH
22271: LD_INT 7
22273: PPUSH
22274: CALL_OW 12
22278: ST_TO_ADDR
// case i of 1 :
22279: LD_VAR 0 1
22283: PUSH
22284: LD_INT 1
22286: DOUBLE
22287: EQUAL
22288: IFTRUE 22292
22290: GO 22302
22292: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22293: LD_STRING earthquake(getX(game), 0, 32)
22295: PPUSH
22296: CALL_OW 559
22300: GO 22540
22302: LD_INT 2
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22324
22310: POP
// begin ToLua ( displayStucuk(); ) ;
22311: LD_STRING displayStucuk();
22313: PPUSH
22314: CALL_OW 559
// ResetFog ;
22318: CALL_OW 335
// end ; 3 :
22322: GO 22540
22324: LD_INT 3
22326: DOUBLE
22327: EQUAL
22328: IFTRUE 22332
22330: GO 22436
22332: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 22
22340: PUSH
22341: LD_OWVAR 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 25
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PPUSH
22364: CALL_OW 69
22368: ST_TO_ADDR
// if not tmp then
22369: LD_VAR 0 2
22373: NOT
22374: IFFALSE 22378
// exit ;
22376: GO 22540
// un := tmp [ rand ( 1 , tmp ) ] ;
22378: LD_ADDR_VAR 0 3
22382: PUSH
22383: LD_VAR 0 2
22387: PUSH
22388: LD_INT 1
22390: PPUSH
22391: LD_VAR 0 2
22395: PPUSH
22396: CALL_OW 12
22400: ARRAY
22401: ST_TO_ADDR
// if Crawls ( un ) then
22402: LD_VAR 0 3
22406: PPUSH
22407: CALL_OW 318
22411: IFFALSE 22422
// ComWalk ( un ) ;
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22422: LD_VAR 0 3
22426: PPUSH
22427: LD_INT 8
22429: PPUSH
22430: CALL_OW 336
// end ; 4 :
22434: GO 22540
22436: LD_INT 4
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22518
22444: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: LD_INT 22
22452: PUSH
22453: LD_OWVAR 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 30
22464: PUSH
22465: LD_INT 29
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PPUSH
22476: CALL_OW 69
22480: ST_TO_ADDR
// if not tmp then
22481: LD_VAR 0 2
22485: NOT
22486: IFFALSE 22490
// exit ;
22488: GO 22540
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22490: LD_VAR 0 2
22494: PUSH
22495: LD_INT 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22503: LD_VAR 0 2
22507: PUSH
22508: LD_INT 1
22510: ARRAY
22511: PPUSH
22512: CALL_OW 65
// end ; 5 .. 7 :
22516: GO 22540
22518: LD_INT 5
22520: DOUBLE
22521: GREATEREQUAL
22522: IFFALSE 22530
22524: LD_INT 7
22526: DOUBLE
22527: LESSEQUAL
22528: IFTRUE 22532
22530: GO 22539
22532: POP
// StreamSibBomb ; end ;
22533: CALL 18777 0 0
22537: GO 22540
22539: POP
// end ;
22540: PPOPN 3
22542: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22543: LD_EXP 26
22547: PUSH
22548: LD_EXP 76
22552: AND
22553: IFFALSE 22709
22555: GO 22557
22557: DISABLE
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: LD_INT 81
22570: PUSH
22571: LD_OWVAR 2
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL_OW 69
22616: ST_TO_ADDR
// if not tmp then
22617: LD_VAR 0 2
22621: NOT
22622: IFFALSE 22626
// exit ;
22624: GO 22709
// p := 0 ;
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: LD_INT 0
22633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22634: LD_INT 35
22636: PPUSH
22637: CALL_OW 67
// p := p + 1 ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_VAR 0 3
22650: PUSH
22651: LD_INT 1
22653: PLUS
22654: ST_TO_ADDR
// for i in tmp do
22655: LD_ADDR_VAR 0 1
22659: PUSH
22660: LD_VAR 0 2
22664: PUSH
22665: FOR_IN
22666: IFFALSE 22697
// if GetLives ( i ) < 1000 then
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 256
22677: PUSH
22678: LD_INT 1000
22680: LESS
22681: IFFALSE 22695
// SetLives ( i , 1000 ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_INT 1000
22690: PPUSH
22691: CALL_OW 234
22695: GO 22665
22697: POP
22698: POP
// until p > 20 ;
22699: LD_VAR 0 3
22703: PUSH
22704: LD_INT 20
22706: GREATER
22707: IFFALSE 22634
// end ;
22709: PPOPN 3
22711: END
// every 0 0$1 trigger StreamModeActive and sTime do
22712: LD_EXP 26
22716: PUSH
22717: LD_EXP 77
22721: AND
22722: IFFALSE 22757
22724: GO 22726
22726: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22727: LD_INT 28
22729: PPUSH
22730: LD_OWVAR 2
22734: PPUSH
22735: LD_INT 2
22737: PPUSH
22738: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22742: LD_INT 30
22744: PPUSH
22745: LD_OWVAR 2
22749: PPUSH
22750: LD_INT 2
22752: PPUSH
22753: CALL_OW 322
// end ;
22757: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22758: LD_EXP 26
22762: PUSH
22763: LD_EXP 78
22767: AND
22768: IFFALSE 22889
22770: GO 22772
22772: DISABLE
22773: LD_INT 0
22775: PPUSH
22776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22777: LD_ADDR_VAR 0 2
22781: PUSH
22782: LD_INT 22
22784: PUSH
22785: LD_OWVAR 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: LD_INT 23
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 69
22830: ST_TO_ADDR
// if not tmp then
22831: LD_VAR 0 2
22835: NOT
22836: IFFALSE 22840
// exit ;
22838: GO 22889
// for i in tmp do
22840: LD_ADDR_VAR 0 1
22844: PUSH
22845: LD_VAR 0 2
22849: PUSH
22850: FOR_IN
22851: IFFALSE 22887
// begin if Crawls ( i ) then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 318
22862: IFFALSE 22873
// ComWalk ( i ) ;
22864: LD_VAR 0 1
22868: PPUSH
22869: CALL_OW 138
// SetClass ( i , 2 ) ;
22873: LD_VAR 0 1
22877: PPUSH
22878: LD_INT 2
22880: PPUSH
22881: CALL_OW 336
// end ;
22885: GO 22850
22887: POP
22888: POP
// end ;
22889: PPOPN 2
22891: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22892: LD_EXP 26
22896: PUSH
22897: LD_EXP 79
22901: AND
22902: IFFALSE 23190
22904: GO 22906
22906: DISABLE
22907: LD_INT 0
22909: PPUSH
22910: PPUSH
22911: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22912: LD_OWVAR 2
22916: PPUSH
22917: LD_INT 9
22919: PPUSH
22920: LD_INT 1
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22930: LD_INT 9
22932: PPUSH
22933: LD_OWVAR 2
22937: PPUSH
22938: CALL_OW 343
// uc_side := 9 ;
22942: LD_ADDR_OWVAR 20
22946: PUSH
22947: LD_INT 9
22949: ST_TO_ADDR
// uc_nation := 2 ;
22950: LD_ADDR_OWVAR 21
22954: PUSH
22955: LD_INT 2
22957: ST_TO_ADDR
// hc_name := Dark Warrior ;
22958: LD_ADDR_OWVAR 26
22962: PUSH
22963: LD_STRING Dark Warrior
22965: ST_TO_ADDR
// hc_gallery :=  ;
22966: LD_ADDR_OWVAR 33
22970: PUSH
22971: LD_STRING 
22973: ST_TO_ADDR
// hc_noskilllimit := true ;
22974: LD_ADDR_OWVAR 76
22978: PUSH
22979: LD_INT 1
22981: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22982: LD_ADDR_OWVAR 31
22986: PUSH
22987: LD_INT 30
22989: PUSH
22990: LD_INT 30
22992: PUSH
22993: LD_INT 30
22995: PUSH
22996: LD_INT 30
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: ST_TO_ADDR
// un := CreateHuman ;
23005: LD_ADDR_VAR 0 3
23009: PUSH
23010: CALL_OW 44
23014: ST_TO_ADDR
// hc_noskilllimit := false ;
23015: LD_ADDR_OWVAR 76
23019: PUSH
23020: LD_INT 0
23022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23023: LD_VAR 0 3
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 51
// ToLua ( playRanger() ) ;
23035: LD_STRING playRanger()
23037: PPUSH
23038: CALL_OW 559
// p := 0 ;
23042: LD_ADDR_VAR 0 2
23046: PUSH
23047: LD_INT 0
23049: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23050: LD_INT 35
23052: PPUSH
23053: CALL_OW 67
// p := p + 1 ;
23057: LD_ADDR_VAR 0 2
23061: PUSH
23062: LD_VAR 0 2
23066: PUSH
23067: LD_INT 1
23069: PLUS
23070: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23071: LD_VAR 0 3
23075: PPUSH
23076: CALL_OW 256
23080: PUSH
23081: LD_INT 1000
23083: LESS
23084: IFFALSE 23098
// SetLives ( un , 1000 ) ;
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_INT 1000
23093: PPUSH
23094: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23098: LD_VAR 0 3
23102: PPUSH
23103: LD_INT 81
23105: PUSH
23106: LD_OWVAR 2
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 91
23117: PUSH
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 30
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PPUSH
23135: CALL_OW 69
23139: PPUSH
23140: LD_VAR 0 3
23144: PPUSH
23145: CALL_OW 74
23149: PPUSH
23150: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23154: LD_VAR 0 2
23158: PUSH
23159: LD_INT 80
23161: GREATER
23162: PUSH
23163: LD_VAR 0 3
23167: PPUSH
23168: CALL_OW 301
23172: OR
23173: IFFALSE 23050
// if un then
23175: LD_VAR 0 3
23179: IFFALSE 23190
// RemoveUnit ( un ) ;
23181: LD_VAR 0 3
23185: PPUSH
23186: CALL_OW 64
// end ;
23190: PPOPN 3
23192: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23193: LD_EXP 80
23197: IFFALSE 23313
23199: GO 23201
23201: DISABLE
23202: LD_INT 0
23204: PPUSH
23205: PPUSH
23206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23207: LD_ADDR_VAR 0 2
23211: PUSH
23212: LD_INT 81
23214: PUSH
23215: LD_OWVAR 2
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 21
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PPUSH
23238: CALL_OW 69
23242: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23243: LD_STRING playComputer()
23245: PPUSH
23246: CALL_OW 559
// if not tmp then
23250: LD_VAR 0 2
23254: NOT
23255: IFFALSE 23259
// exit ;
23257: GO 23313
// for i in tmp do
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: LD_VAR 0 2
23268: PUSH
23269: FOR_IN
23270: IFFALSE 23311
// for j := 1 to 4 do
23272: LD_ADDR_VAR 0 3
23276: PUSH
23277: DOUBLE
23278: LD_INT 1
23280: DEC
23281: ST_TO_ADDR
23282: LD_INT 4
23284: PUSH
23285: FOR_TO
23286: IFFALSE 23307
// SetSkill ( i , j , 10 ) ;
23288: LD_VAR 0 1
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: LD_INT 10
23300: PPUSH
23301: CALL_OW 237
23305: GO 23285
23307: POP
23308: POP
23309: GO 23269
23311: POP
23312: POP
// end ;
23313: PPOPN 3
23315: END
// every 0 0$1 trigger s30 do var i , tmp ;
23316: LD_EXP 81
23320: IFFALSE 23389
23322: GO 23324
23324: DISABLE
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23329: LD_ADDR_VAR 0 2
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_OWVAR 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 69
23350: ST_TO_ADDR
// if not tmp then
23351: LD_VAR 0 2
23355: NOT
23356: IFFALSE 23360
// exit ;
23358: GO 23389
// for i in tmp do
23360: LD_ADDR_VAR 0 1
23364: PUSH
23365: LD_VAR 0 2
23369: PUSH
23370: FOR_IN
23371: IFFALSE 23387
// SetLives ( i , 300 ) ;
23373: LD_VAR 0 1
23377: PPUSH
23378: LD_INT 300
23380: PPUSH
23381: CALL_OW 234
23385: GO 23370
23387: POP
23388: POP
// end ;
23389: PPOPN 2
23391: END
// every 0 0$1 trigger s60 do var i , tmp ;
23392: LD_EXP 82
23396: IFFALSE 23465
23398: GO 23400
23400: DISABLE
23401: LD_INT 0
23403: PPUSH
23404: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23405: LD_ADDR_VAR 0 2
23409: PUSH
23410: LD_INT 22
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 69
23426: ST_TO_ADDR
// if not tmp then
23427: LD_VAR 0 2
23431: NOT
23432: IFFALSE 23436
// exit ;
23434: GO 23465
// for i in tmp do
23436: LD_ADDR_VAR 0 1
23440: PUSH
23441: LD_VAR 0 2
23445: PUSH
23446: FOR_IN
23447: IFFALSE 23463
// SetLives ( i , 600 ) ;
23449: LD_VAR 0 1
23453: PPUSH
23454: LD_INT 600
23456: PPUSH
23457: CALL_OW 234
23461: GO 23446
23463: POP
23464: POP
// end ;
23465: PPOPN 2
23467: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23468: LD_INT 0
23470: PPUSH
// case cmd of 301 :
23471: LD_VAR 0 1
23475: PUSH
23476: LD_INT 301
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23516
23484: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23485: LD_VAR 0 6
23489: PPUSH
23490: LD_VAR 0 7
23494: PPUSH
23495: LD_VAR 0 8
23499: PPUSH
23500: LD_VAR 0 4
23504: PPUSH
23505: LD_VAR 0 5
23509: PPUSH
23510: CALL 24717 0 5
23514: GO 23637
23516: LD_INT 302
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23561
23524: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23525: LD_VAR 0 6
23529: PPUSH
23530: LD_VAR 0 7
23534: PPUSH
23535: LD_VAR 0 8
23539: PPUSH
23540: LD_VAR 0 9
23544: PPUSH
23545: LD_VAR 0 4
23549: PPUSH
23550: LD_VAR 0 5
23554: PPUSH
23555: CALL 24808 0 6
23559: GO 23637
23561: LD_INT 303
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23606
23569: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23570: LD_VAR 0 6
23574: PPUSH
23575: LD_VAR 0 7
23579: PPUSH
23580: LD_VAR 0 8
23584: PPUSH
23585: LD_VAR 0 9
23589: PPUSH
23590: LD_VAR 0 4
23594: PPUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: CALL 23642 0 6
23604: GO 23637
23606: LD_INT 304
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23636
23614: POP
// hHackTeleport ( unit , x , y ) ; end ;
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_VAR 0 4
23624: PPUSH
23625: LD_VAR 0 5
23629: PPUSH
23630: CALL 25401 0 3
23634: GO 23637
23636: POP
// end ;
23637: LD_VAR 0 12
23641: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23646: LD_VAR 0 1
23650: PUSH
23651: LD_INT 1
23653: LESS
23654: PUSH
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 3
23662: GREATER
23663: OR
23664: PUSH
23665: LD_VAR 0 5
23669: PPUSH
23670: LD_VAR 0 6
23674: PPUSH
23675: CALL_OW 428
23679: OR
23680: IFFALSE 23684
// exit ;
23682: GO 24404
// uc_side := your_side ;
23684: LD_ADDR_OWVAR 20
23688: PUSH
23689: LD_OWVAR 2
23693: ST_TO_ADDR
// uc_nation := nation ;
23694: LD_ADDR_OWVAR 21
23698: PUSH
23699: LD_VAR 0 1
23703: ST_TO_ADDR
// bc_level = 1 ;
23704: LD_ADDR_OWVAR 43
23708: PUSH
23709: LD_INT 1
23711: ST_TO_ADDR
// case btype of 1 :
23712: LD_VAR 0 2
23716: PUSH
23717: LD_INT 1
23719: DOUBLE
23720: EQUAL
23721: IFTRUE 23725
23723: GO 23736
23725: POP
// bc_type := b_depot ; 2 :
23726: LD_ADDR_OWVAR 42
23730: PUSH
23731: LD_INT 0
23733: ST_TO_ADDR
23734: GO 24348
23736: LD_INT 2
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23755
23744: POP
// bc_type := b_warehouse ; 3 :
23745: LD_ADDR_OWVAR 42
23749: PUSH
23750: LD_INT 1
23752: ST_TO_ADDR
23753: GO 24348
23755: LD_INT 3
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23774
23763: POP
// bc_type := b_lab ; 4 .. 9 :
23764: LD_ADDR_OWVAR 42
23768: PUSH
23769: LD_INT 6
23771: ST_TO_ADDR
23772: GO 24348
23774: LD_INT 4
23776: DOUBLE
23777: GREATEREQUAL
23778: IFFALSE 23786
23780: LD_INT 9
23782: DOUBLE
23783: LESSEQUAL
23784: IFTRUE 23788
23786: GO 23840
23788: POP
// begin bc_type := b_lab_half ;
23789: LD_ADDR_OWVAR 42
23793: PUSH
23794: LD_INT 7
23796: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23797: LD_ADDR_OWVAR 44
23801: PUSH
23802: LD_INT 10
23804: PUSH
23805: LD_INT 11
23807: PUSH
23808: LD_INT 12
23810: PUSH
23811: LD_INT 15
23813: PUSH
23814: LD_INT 14
23816: PUSH
23817: LD_INT 13
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: PUSH
23828: LD_VAR 0 2
23832: PUSH
23833: LD_INT 3
23835: MINUS
23836: ARRAY
23837: ST_TO_ADDR
// end ; 10 .. 13 :
23838: GO 24348
23840: LD_INT 10
23842: DOUBLE
23843: GREATEREQUAL
23844: IFFALSE 23852
23846: LD_INT 13
23848: DOUBLE
23849: LESSEQUAL
23850: IFTRUE 23854
23852: GO 23931
23854: POP
// begin bc_type := b_lab_full ;
23855: LD_ADDR_OWVAR 42
23859: PUSH
23860: LD_INT 8
23862: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23863: LD_ADDR_OWVAR 44
23867: PUSH
23868: LD_INT 10
23870: PUSH
23871: LD_INT 12
23873: PUSH
23874: LD_INT 14
23876: PUSH
23877: LD_INT 13
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: LD_VAR 0 2
23890: PUSH
23891: LD_INT 9
23893: MINUS
23894: ARRAY
23895: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23896: LD_ADDR_OWVAR 45
23900: PUSH
23901: LD_INT 11
23903: PUSH
23904: LD_INT 15
23906: PUSH
23907: LD_INT 12
23909: PUSH
23910: LD_INT 15
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: LD_VAR 0 2
23923: PUSH
23924: LD_INT 9
23926: MINUS
23927: ARRAY
23928: ST_TO_ADDR
// end ; 14 :
23929: GO 24348
23931: LD_INT 14
23933: DOUBLE
23934: EQUAL
23935: IFTRUE 23939
23937: GO 23950
23939: POP
// bc_type := b_workshop ; 15 :
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 2
23947: ST_TO_ADDR
23948: GO 24348
23950: LD_INT 15
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23958
23956: GO 23969
23958: POP
// bc_type := b_factory ; 16 :
23959: LD_ADDR_OWVAR 42
23963: PUSH
23964: LD_INT 3
23966: ST_TO_ADDR
23967: GO 24348
23969: LD_INT 16
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23977
23975: GO 23988
23977: POP
// bc_type := b_ext_gun ; 17 :
23978: LD_ADDR_OWVAR 42
23982: PUSH
23983: LD_INT 17
23985: ST_TO_ADDR
23986: GO 24348
23988: LD_INT 17
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24024
23996: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23997: LD_ADDR_OWVAR 42
24001: PUSH
24002: LD_INT 19
24004: PUSH
24005: LD_INT 23
24007: PUSH
24008: LD_INT 19
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: PUSH
24016: LD_VAR 0 1
24020: ARRAY
24021: ST_TO_ADDR
24022: GO 24348
24024: LD_INT 18
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24043
24032: POP
// bc_type := b_ext_radar ; 19 :
24033: LD_ADDR_OWVAR 42
24037: PUSH
24038: LD_INT 20
24040: ST_TO_ADDR
24041: GO 24348
24043: LD_INT 19
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24062
24051: POP
// bc_type := b_ext_radio ; 20 :
24052: LD_ADDR_OWVAR 42
24056: PUSH
24057: LD_INT 22
24059: ST_TO_ADDR
24060: GO 24348
24062: LD_INT 20
24064: DOUBLE
24065: EQUAL
24066: IFTRUE 24070
24068: GO 24081
24070: POP
// bc_type := b_ext_siberium ; 21 :
24071: LD_ADDR_OWVAR 42
24075: PUSH
24076: LD_INT 21
24078: ST_TO_ADDR
24079: GO 24348
24081: LD_INT 21
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24100
24089: POP
// bc_type := b_ext_computer ; 22 :
24090: LD_ADDR_OWVAR 42
24094: PUSH
24095: LD_INT 24
24097: ST_TO_ADDR
24098: GO 24348
24100: LD_INT 22
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24119
24108: POP
// bc_type := b_ext_track ; 23 :
24109: LD_ADDR_OWVAR 42
24113: PUSH
24114: LD_INT 16
24116: ST_TO_ADDR
24117: GO 24348
24119: LD_INT 23
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24138
24127: POP
// bc_type := b_ext_laser ; 24 :
24128: LD_ADDR_OWVAR 42
24132: PUSH
24133: LD_INT 25
24135: ST_TO_ADDR
24136: GO 24348
24138: LD_INT 24
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24157
24146: POP
// bc_type := b_control_tower ; 25 :
24147: LD_ADDR_OWVAR 42
24151: PUSH
24152: LD_INT 36
24154: ST_TO_ADDR
24155: GO 24348
24157: LD_INT 25
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24176
24165: POP
// bc_type := b_breastwork ; 26 :
24166: LD_ADDR_OWVAR 42
24170: PUSH
24171: LD_INT 31
24173: ST_TO_ADDR
24174: GO 24348
24176: LD_INT 26
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24195
24184: POP
// bc_type := b_bunker ; 27 :
24185: LD_ADDR_OWVAR 42
24189: PUSH
24190: LD_INT 32
24192: ST_TO_ADDR
24193: GO 24348
24195: LD_INT 27
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24214
24203: POP
// bc_type := b_turret ; 28 :
24204: LD_ADDR_OWVAR 42
24208: PUSH
24209: LD_INT 33
24211: ST_TO_ADDR
24212: GO 24348
24214: LD_INT 28
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24233
24222: POP
// bc_type := b_armoury ; 29 :
24223: LD_ADDR_OWVAR 42
24227: PUSH
24228: LD_INT 4
24230: ST_TO_ADDR
24231: GO 24348
24233: LD_INT 29
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24252
24241: POP
// bc_type := b_barracks ; 30 :
24242: LD_ADDR_OWVAR 42
24246: PUSH
24247: LD_INT 5
24249: ST_TO_ADDR
24250: GO 24348
24252: LD_INT 30
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24271
24260: POP
// bc_type := b_solar_power ; 31 :
24261: LD_ADDR_OWVAR 42
24265: PUSH
24266: LD_INT 27
24268: ST_TO_ADDR
24269: GO 24348
24271: LD_INT 31
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24290
24279: POP
// bc_type := b_oil_power ; 32 :
24280: LD_ADDR_OWVAR 42
24284: PUSH
24285: LD_INT 26
24287: ST_TO_ADDR
24288: GO 24348
24290: LD_INT 32
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// bc_type := b_siberite_power ; 33 :
24299: LD_ADDR_OWVAR 42
24303: PUSH
24304: LD_INT 28
24306: ST_TO_ADDR
24307: GO 24348
24309: LD_INT 33
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// bc_type := b_oil_mine ; 34 :
24318: LD_ADDR_OWVAR 42
24322: PUSH
24323: LD_INT 29
24325: ST_TO_ADDR
24326: GO 24348
24328: LD_INT 34
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24347
24336: POP
// bc_type := b_siberite_mine ; end ;
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 30
24344: ST_TO_ADDR
24345: GO 24348
24347: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24348: LD_ADDR_VAR 0 8
24352: PUSH
24353: LD_VAR 0 5
24357: PPUSH
24358: LD_VAR 0 6
24362: PPUSH
24363: LD_VAR 0 3
24367: PPUSH
24368: CALL_OW 47
24372: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24373: LD_OWVAR 42
24377: PUSH
24378: LD_INT 32
24380: PUSH
24381: LD_INT 33
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: IN
24388: IFFALSE 24404
// PlaceWeaponTurret ( b , weapon ) ;
24390: LD_VAR 0 8
24394: PPUSH
24395: LD_VAR 0 4
24399: PPUSH
24400: CALL_OW 431
// end ;
24404: LD_VAR 0 7
24408: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24415: LD_ADDR_VAR 0 4
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_OWVAR 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PPUSH
24464: CALL_OW 69
24468: ST_TO_ADDR
// if not tmp then
24469: LD_VAR 0 4
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24537
// for i in tmp do
24478: LD_ADDR_VAR 0 2
24482: PUSH
24483: LD_VAR 0 4
24487: PUSH
24488: FOR_IN
24489: IFFALSE 24535
// for j = 1 to 3 do
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: DOUBLE
24497: LD_INT 1
24499: DEC
24500: ST_TO_ADDR
24501: LD_INT 3
24503: PUSH
24504: FOR_TO
24505: IFFALSE 24531
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24507: LD_VAR 0 2
24511: PPUSH
24512: CALL_OW 274
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_INT 99999
24524: PPUSH
24525: CALL_OW 277
24529: GO 24504
24531: POP
24532: POP
24533: GO 24488
24535: POP
24536: POP
// end ;
24537: LD_VAR 0 1
24541: RET
// export function hHackSetLevel10 ; var i , j ; begin
24542: LD_INT 0
24544: PPUSH
24545: PPUSH
24546: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24547: LD_ADDR_VAR 0 2
24551: PUSH
24552: LD_INT 21
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: PUSH
24567: FOR_IN
24568: IFFALSE 24620
// if IsSelected ( i ) then
24570: LD_VAR 0 2
24574: PPUSH
24575: CALL_OW 306
24579: IFFALSE 24618
// begin for j := 1 to 4 do
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: DOUBLE
24587: LD_INT 1
24589: DEC
24590: ST_TO_ADDR
24591: LD_INT 4
24593: PUSH
24594: FOR_TO
24595: IFFALSE 24616
// SetSkill ( i , j , 10 ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_VAR 0 3
24606: PPUSH
24607: LD_INT 10
24609: PPUSH
24610: CALL_OW 237
24614: GO 24594
24616: POP
24617: POP
// end ;
24618: GO 24567
24620: POP
24621: POP
// end ;
24622: LD_VAR 0 1
24626: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
24631: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24632: LD_ADDR_VAR 0 2
24636: PUSH
24637: LD_INT 22
24639: PUSH
24640: LD_OWVAR 2
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 21
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL_OW 69
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24710
// begin for j := 1 to 4 do
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: DOUBLE
24677: LD_INT 1
24679: DEC
24680: ST_TO_ADDR
24681: LD_INT 4
24683: PUSH
24684: FOR_TO
24685: IFFALSE 24706
// SetSkill ( i , j , 10 ) ;
24687: LD_VAR 0 2
24691: PPUSH
24692: LD_VAR 0 3
24696: PPUSH
24697: LD_INT 10
24699: PPUSH
24700: CALL_OW 237
24704: GO 24684
24706: POP
24707: POP
// end ;
24708: GO 24668
24710: POP
24711: POP
// end ;
24712: LD_VAR 0 1
24716: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24717: LD_INT 0
24719: PPUSH
// uc_side := your_side ;
24720: LD_ADDR_OWVAR 20
24724: PUSH
24725: LD_OWVAR 2
24729: ST_TO_ADDR
// uc_nation := nation ;
24730: LD_ADDR_OWVAR 21
24734: PUSH
24735: LD_VAR 0 1
24739: ST_TO_ADDR
// InitHc ;
24740: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24744: LD_INT 0
24746: PPUSH
24747: LD_VAR 0 2
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24761: LD_VAR 0 4
24765: PPUSH
24766: LD_VAR 0 5
24770: PPUSH
24771: CALL_OW 428
24775: PUSH
24776: LD_INT 0
24778: EQUAL
24779: IFFALSE 24803
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24781: CALL_OW 44
24785: PPUSH
24786: LD_VAR 0 4
24790: PPUSH
24791: LD_VAR 0 5
24795: PPUSH
24796: LD_INT 1
24798: PPUSH
24799: CALL_OW 48
// end ;
24803: LD_VAR 0 6
24807: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
// uc_side := your_side ;
24812: LD_ADDR_OWVAR 20
24816: PUSH
24817: LD_OWVAR 2
24821: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: LD_INT 4
24838: PUSH
24839: LD_INT 5
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: IN
24849: IFFALSE 24861
// uc_nation := nation_american else
24851: LD_ADDR_OWVAR 21
24855: PUSH
24856: LD_INT 1
24858: ST_TO_ADDR
24859: GO 24904
// if chassis in [ 11 , 12 , 13 , 14 ] then
24861: LD_VAR 0 1
24865: PUSH
24866: LD_INT 11
24868: PUSH
24869: LD_INT 12
24871: PUSH
24872: LD_INT 13
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: IN
24884: IFFALSE 24896
// uc_nation := nation_arabian else
24886: LD_ADDR_OWVAR 21
24890: PUSH
24891: LD_INT 2
24893: ST_TO_ADDR
24894: GO 24904
// uc_nation := nation_russian ;
24896: LD_ADDR_OWVAR 21
24900: PUSH
24901: LD_INT 3
24903: ST_TO_ADDR
// vc_chassis := chassis ;
24904: LD_ADDR_OWVAR 37
24908: PUSH
24909: LD_VAR 0 1
24913: ST_TO_ADDR
// vc_engine := engine ;
24914: LD_ADDR_OWVAR 39
24918: PUSH
24919: LD_VAR 0 2
24923: ST_TO_ADDR
// vc_control := control ;
24924: LD_ADDR_OWVAR 38
24928: PUSH
24929: LD_VAR 0 3
24933: ST_TO_ADDR
// vc_weapon := weapon ;
24934: LD_ADDR_OWVAR 40
24938: PUSH
24939: LD_VAR 0 4
24943: ST_TO_ADDR
// un := CreateVehicle ;
24944: LD_ADDR_VAR 0 8
24948: PUSH
24949: CALL_OW 45
24953: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24954: LD_VAR 0 8
24958: PPUSH
24959: LD_INT 0
24961: PPUSH
24962: LD_INT 5
24964: PPUSH
24965: CALL_OW 12
24969: PPUSH
24970: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24974: LD_VAR 0 8
24978: PPUSH
24979: LD_VAR 0 5
24983: PPUSH
24984: LD_VAR 0 6
24988: PPUSH
24989: LD_INT 1
24991: PPUSH
24992: CALL_OW 48
// end ;
24996: LD_VAR 0 7
25000: RET
// export hInvincible ; every 1 do
25001: GO 25003
25003: DISABLE
// hInvincible := [ ] ;
25004: LD_ADDR_EXP 83
25008: PUSH
25009: EMPTY
25010: ST_TO_ADDR
25011: END
// every 10 do var i ;
25012: GO 25014
25014: DISABLE
25015: LD_INT 0
25017: PPUSH
// begin enable ;
25018: ENABLE
// if not hInvincible then
25019: LD_EXP 83
25023: NOT
25024: IFFALSE 25028
// exit ;
25026: GO 25072
// for i in hInvincible do
25028: LD_ADDR_VAR 0 1
25032: PUSH
25033: LD_EXP 83
25037: PUSH
25038: FOR_IN
25039: IFFALSE 25070
// if GetLives ( i ) < 1000 then
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL_OW 256
25050: PUSH
25051: LD_INT 1000
25053: LESS
25054: IFFALSE 25068
// SetLives ( i , 1000 ) ;
25056: LD_VAR 0 1
25060: PPUSH
25061: LD_INT 1000
25063: PPUSH
25064: CALL_OW 234
25068: GO 25038
25070: POP
25071: POP
// end ;
25072: PPOPN 1
25074: END
// export function hHackInvincible ; var i ; begin
25075: LD_INT 0
25077: PPUSH
25078: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25079: LD_ADDR_VAR 0 2
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 21
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: PPUSH
25112: CALL_OW 69
25116: PUSH
25117: FOR_IN
25118: IFFALSE 25179
// if IsSelected ( i ) then
25120: LD_VAR 0 2
25124: PPUSH
25125: CALL_OW 306
25129: IFFALSE 25177
// begin if i in hInvincible then
25131: LD_VAR 0 2
25135: PUSH
25136: LD_EXP 83
25140: IN
25141: IFFALSE 25161
// hInvincible := hInvincible diff i else
25143: LD_ADDR_EXP 83
25147: PUSH
25148: LD_EXP 83
25152: PUSH
25153: LD_VAR 0 2
25157: DIFF
25158: ST_TO_ADDR
25159: GO 25177
// hInvincible := hInvincible union i ;
25161: LD_ADDR_EXP 83
25165: PUSH
25166: LD_EXP 83
25170: PUSH
25171: LD_VAR 0 2
25175: UNION
25176: ST_TO_ADDR
// end ;
25177: GO 25117
25179: POP
25180: POP
// end ;
25181: LD_VAR 0 1
25185: RET
// export function hHackInvisible ; var i , j ; begin
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
25190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_INT 21
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL_OW 69
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25236
// if IsSelected ( i ) then
25214: LD_VAR 0 2
25218: PPUSH
25219: CALL_OW 306
25223: IFFALSE 25234
// ComForceInvisible ( i ) ;
25225: LD_VAR 0 2
25229: PPUSH
25230: CALL_OW 496
25234: GO 25211
25236: POP
25237: POP
// end ;
25238: LD_VAR 0 1
25242: RET
// export function hHackChangeYourSide ; begin
25243: LD_INT 0
25245: PPUSH
// if your_side = 8 then
25246: LD_OWVAR 2
25250: PUSH
25251: LD_INT 8
25253: EQUAL
25254: IFFALSE 25266
// your_side := 0 else
25256: LD_ADDR_OWVAR 2
25260: PUSH
25261: LD_INT 0
25263: ST_TO_ADDR
25264: GO 25280
// your_side := your_side + 1 ;
25266: LD_ADDR_OWVAR 2
25270: PUSH
25271: LD_OWVAR 2
25275: PUSH
25276: LD_INT 1
25278: PLUS
25279: ST_TO_ADDR
// end ;
25280: LD_VAR 0 1
25284: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25285: LD_INT 0
25287: PPUSH
25288: PPUSH
25289: PPUSH
// for i in all_units do
25290: LD_ADDR_VAR 0 2
25294: PUSH
25295: LD_OWVAR 3
25299: PUSH
25300: FOR_IN
25301: IFFALSE 25379
// if IsSelected ( i ) then
25303: LD_VAR 0 2
25307: PPUSH
25308: CALL_OW 306
25312: IFFALSE 25377
// begin j := GetSide ( i ) ;
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_VAR 0 2
25323: PPUSH
25324: CALL_OW 255
25328: ST_TO_ADDR
// if j = 8 then
25329: LD_VAR 0 3
25333: PUSH
25334: LD_INT 8
25336: EQUAL
25337: IFFALSE 25349
// j := 0 else
25339: LD_ADDR_VAR 0 3
25343: PUSH
25344: LD_INT 0
25346: ST_TO_ADDR
25347: GO 25363
// j := j + 1 ;
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: LD_VAR 0 3
25358: PUSH
25359: LD_INT 1
25361: PLUS
25362: ST_TO_ADDR
// SetSide ( i , j ) ;
25363: LD_VAR 0 2
25367: PPUSH
25368: LD_VAR 0 3
25372: PPUSH
25373: CALL_OW 235
// end ;
25377: GO 25300
25379: POP
25380: POP
// end ;
25381: LD_VAR 0 1
25385: RET
// export function hHackFog ; begin
25386: LD_INT 0
25388: PPUSH
// FogOff ( true ) ;
25389: LD_INT 1
25391: PPUSH
25392: CALL_OW 344
// end ;
25396: LD_VAR 0 1
25400: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25401: LD_INT 0
25403: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25404: LD_VAR 0 1
25408: PPUSH
25409: LD_VAR 0 2
25413: PPUSH
25414: LD_VAR 0 3
25418: PPUSH
25419: LD_INT 1
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL_OW 483
// CenterOnXY ( x , y ) ;
25429: LD_VAR 0 2
25433: PPUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL_OW 84
// end ;
25443: LD_VAR 0 4
25447: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25448: LD_INT 0
25450: PPUSH
25451: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25452: LD_VAR 0 1
25456: NOT
25457: PUSH
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL_OW 488
25472: NOT
25473: OR
25474: PUSH
25475: LD_VAR 0 1
25479: PPUSH
25480: CALL_OW 266
25484: PUSH
25485: LD_INT 3
25487: NONEQUAL
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 247
25498: PUSH
25499: LD_INT 1
25501: EQUAL
25502: NOT
25503: AND
25504: OR
25505: IFFALSE 25509
// exit ;
25507: GO 25658
// if GetType ( factory ) = unit_human then
25509: LD_VAR 0 1
25513: PPUSH
25514: CALL_OW 247
25518: PUSH
25519: LD_INT 1
25521: EQUAL
25522: IFFALSE 25539
// factory := IsInUnit ( factory ) ;
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 310
25538: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25539: LD_VAR 0 1
25543: PPUSH
25544: CALL_OW 266
25548: PUSH
25549: LD_INT 3
25551: NONEQUAL
25552: IFFALSE 25556
// exit ;
25554: GO 25658
// if HexInfo ( x , y ) = factory then
25556: LD_VAR 0 2
25560: PPUSH
25561: LD_VAR 0 3
25565: PPUSH
25566: CALL_OW 428
25570: PUSH
25571: LD_VAR 0 1
25575: EQUAL
25576: IFFALSE 25603
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25578: LD_ADDR_EXP 84
25582: PUSH
25583: LD_EXP 84
25587: PPUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 1
25600: ST_TO_ADDR
25601: GO 25654
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25603: LD_ADDR_EXP 84
25607: PUSH
25608: LD_EXP 84
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 255
25627: PUSH
25628: LD_VAR 0 1
25632: PUSH
25633: LD_VAR 0 2
25637: PUSH
25638: LD_VAR 0 3
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25654: CALL 25663 0 0
// end ;
25658: LD_VAR 0 4
25662: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25663: LD_INT 0
25665: PPUSH
25666: PPUSH
25667: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25668: LD_STRING resetFactoryWaypoint();
25670: PPUSH
25671: CALL_OW 559
// if factoryWaypoints then
25675: LD_EXP 84
25679: IFFALSE 25805
// begin list := PrepareArray ( factoryWaypoints ) ;
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_EXP 84
25690: PPUSH
25691: CALL 72182 0 1
25695: ST_TO_ADDR
// for i := 1 to list do
25696: LD_ADDR_VAR 0 2
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 3
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25803
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25714: LD_STRING setFactoryWaypointXY(
25716: PUSH
25717: LD_VAR 0 3
25721: PUSH
25722: LD_VAR 0 2
25726: ARRAY
25727: PUSH
25728: LD_INT 1
25730: ARRAY
25731: STR
25732: PUSH
25733: LD_STRING ,
25735: STR
25736: PUSH
25737: LD_VAR 0 3
25741: PUSH
25742: LD_VAR 0 2
25746: ARRAY
25747: PUSH
25748: LD_INT 2
25750: ARRAY
25751: STR
25752: PUSH
25753: LD_STRING ,
25755: STR
25756: PUSH
25757: LD_VAR 0 3
25761: PUSH
25762: LD_VAR 0 2
25766: ARRAY
25767: PUSH
25768: LD_INT 3
25770: ARRAY
25771: STR
25772: PUSH
25773: LD_STRING ,
25775: STR
25776: PUSH
25777: LD_VAR 0 3
25781: PUSH
25782: LD_VAR 0 2
25786: ARRAY
25787: PUSH
25788: LD_INT 4
25790: ARRAY
25791: STR
25792: PUSH
25793: LD_STRING )
25795: STR
25796: PPUSH
25797: CALL_OW 559
25801: GO 25711
25803: POP
25804: POP
// end ; end ;
25805: LD_VAR 0 1
25809: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25810: LD_INT 0
25812: PPUSH
// if HexInfo ( x , y ) = warehouse then
25813: LD_VAR 0 2
25817: PPUSH
25818: LD_VAR 0 3
25822: PPUSH
25823: CALL_OW 428
25827: PUSH
25828: LD_VAR 0 1
25832: EQUAL
25833: IFFALSE 25860
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25835: LD_ADDR_EXP 85
25839: PUSH
25840: LD_EXP 85
25844: PPUSH
25845: LD_VAR 0 1
25849: PPUSH
25850: LD_INT 0
25852: PPUSH
25853: CALL_OW 1
25857: ST_TO_ADDR
25858: GO 25911
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25860: LD_ADDR_EXP 85
25864: PUSH
25865: LD_EXP 85
25869: PPUSH
25870: LD_VAR 0 1
25874: PPUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 255
25884: PUSH
25885: LD_VAR 0 1
25889: PUSH
25890: LD_VAR 0 2
25894: PUSH
25895: LD_VAR 0 3
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25911: CALL 25920 0 0
// end ;
25915: LD_VAR 0 4
25919: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
25924: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25925: LD_STRING resetWarehouseGatheringPoints();
25927: PPUSH
25928: CALL_OW 559
// if warehouseGatheringPoints then
25932: LD_EXP 85
25936: IFFALSE 26062
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: LD_EXP 85
25947: PPUSH
25948: CALL 72182 0 1
25952: ST_TO_ADDR
// for i := 1 to list do
25953: LD_ADDR_VAR 0 2
25957: PUSH
25958: DOUBLE
25959: LD_INT 1
25961: DEC
25962: ST_TO_ADDR
25963: LD_VAR 0 3
25967: PUSH
25968: FOR_TO
25969: IFFALSE 26060
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25971: LD_STRING setWarehouseGatheringPointXY(
25973: PUSH
25974: LD_VAR 0 3
25978: PUSH
25979: LD_VAR 0 2
25983: ARRAY
25984: PUSH
25985: LD_INT 1
25987: ARRAY
25988: STR
25989: PUSH
25990: LD_STRING ,
25992: STR
25993: PUSH
25994: LD_VAR 0 3
25998: PUSH
25999: LD_VAR 0 2
26003: ARRAY
26004: PUSH
26005: LD_INT 2
26007: ARRAY
26008: STR
26009: PUSH
26010: LD_STRING ,
26012: STR
26013: PUSH
26014: LD_VAR 0 3
26018: PUSH
26019: LD_VAR 0 2
26023: ARRAY
26024: PUSH
26025: LD_INT 3
26027: ARRAY
26028: STR
26029: PUSH
26030: LD_STRING ,
26032: STR
26033: PUSH
26034: LD_VAR 0 3
26038: PUSH
26039: LD_VAR 0 2
26043: ARRAY
26044: PUSH
26045: LD_INT 4
26047: ARRAY
26048: STR
26049: PUSH
26050: LD_STRING )
26052: STR
26053: PPUSH
26054: CALL_OW 559
26058: GO 25968
26060: POP
26061: POP
// end ; end ;
26062: LD_VAR 0 1
26066: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26067: LD_EXP 85
26071: IFFALSE 26756
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
26080: PPUSH
26081: PPUSH
26082: PPUSH
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
// begin enable ;
26087: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26088: LD_ADDR_VAR 0 3
26092: PUSH
26093: LD_EXP 85
26097: PPUSH
26098: CALL 72182 0 1
26102: ST_TO_ADDR
// if not list then
26103: LD_VAR 0 3
26107: NOT
26108: IFFALSE 26112
// exit ;
26110: GO 26756
// for i := 1 to list do
26112: LD_ADDR_VAR 0 1
26116: PUSH
26117: DOUBLE
26118: LD_INT 1
26120: DEC
26121: ST_TO_ADDR
26122: LD_VAR 0 3
26126: PUSH
26127: FOR_TO
26128: IFFALSE 26754
// begin depot := list [ i ] [ 2 ] ;
26130: LD_ADDR_VAR 0 8
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: LD_VAR 0 1
26144: ARRAY
26145: PUSH
26146: LD_INT 2
26148: ARRAY
26149: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26150: LD_ADDR_VAR 0 5
26154: PUSH
26155: LD_VAR 0 3
26159: PUSH
26160: LD_VAR 0 1
26164: ARRAY
26165: PUSH
26166: LD_INT 1
26168: ARRAY
26169: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26170: LD_VAR 0 8
26174: PPUSH
26175: CALL_OW 301
26179: PUSH
26180: LD_VAR 0 5
26184: PUSH
26185: LD_VAR 0 8
26189: PPUSH
26190: CALL_OW 255
26194: NONEQUAL
26195: OR
26196: IFFALSE 26225
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26198: LD_ADDR_EXP 85
26202: PUSH
26203: LD_EXP 85
26207: PPUSH
26208: LD_VAR 0 8
26212: PPUSH
26213: LD_INT 0
26215: PPUSH
26216: CALL_OW 1
26220: ST_TO_ADDR
// exit ;
26221: POP
26222: POP
26223: GO 26756
// end ; x := list [ i ] [ 3 ] ;
26225: LD_ADDR_VAR 0 6
26229: PUSH
26230: LD_VAR 0 3
26234: PUSH
26235: LD_VAR 0 1
26239: ARRAY
26240: PUSH
26241: LD_INT 3
26243: ARRAY
26244: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26245: LD_ADDR_VAR 0 7
26249: PUSH
26250: LD_VAR 0 3
26254: PUSH
26255: LD_VAR 0 1
26259: ARRAY
26260: PUSH
26261: LD_INT 4
26263: ARRAY
26264: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26265: LD_ADDR_VAR 0 9
26269: PUSH
26270: LD_VAR 0 6
26274: PPUSH
26275: LD_VAR 0 7
26279: PPUSH
26280: LD_INT 16
26282: PPUSH
26283: CALL 70770 0 3
26287: ST_TO_ADDR
// if not cratesNearbyPoint then
26288: LD_VAR 0 9
26292: NOT
26293: IFFALSE 26299
// exit ;
26295: POP
26296: POP
26297: GO 26756
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26299: LD_ADDR_VAR 0 4
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_VAR 0 5
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: LD_INT 60
26321: PUSH
26322: EMPTY
26323: LIST
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 91
26331: PUSH
26332: LD_VAR 0 8
26336: PUSH
26337: LD_INT 6
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: LD_INT 25
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 25
26360: PUSH
26361: LD_INT 16
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: PPUSH
26379: CALL_OW 69
26383: PUSH
26384: LD_VAR 0 8
26388: PPUSH
26389: CALL_OW 313
26393: PPUSH
26394: LD_INT 3
26396: PUSH
26397: LD_INT 60
26399: PUSH
26400: EMPTY
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 16
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PPUSH
26439: CALL_OW 72
26443: UNION
26444: ST_TO_ADDR
// if tmp then
26445: LD_VAR 0 4
26449: IFFALSE 26529
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26451: LD_ADDR_VAR 0 4
26455: PUSH
26456: LD_VAR 0 4
26460: PPUSH
26461: LD_INT 3
26463: PPUSH
26464: CALL 68739 0 2
26468: ST_TO_ADDR
// for j in tmp do
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: LD_VAR 0 4
26478: PUSH
26479: FOR_IN
26480: IFFALSE 26523
// begin if IsInUnit ( j ) then
26482: LD_VAR 0 2
26486: PPUSH
26487: CALL_OW 310
26491: IFFALSE 26502
// ComExit ( j ) ;
26493: LD_VAR 0 2
26497: PPUSH
26498: CALL 68822 0 1
// AddComCollect ( j , x , y ) ;
26502: LD_VAR 0 2
26506: PPUSH
26507: LD_VAR 0 6
26511: PPUSH
26512: LD_VAR 0 7
26516: PPUSH
26517: CALL_OW 177
// end ;
26521: GO 26479
26523: POP
26524: POP
// exit ;
26525: POP
26526: POP
26527: GO 26756
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26529: LD_ADDR_VAR 0 4
26533: PUSH
26534: LD_INT 22
26536: PUSH
26537: LD_VAR 0 5
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 91
26548: PUSH
26549: LD_VAR 0 8
26553: PUSH
26554: LD_INT 8
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 34
26567: PUSH
26568: LD_INT 12
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 34
26577: PUSH
26578: LD_INT 51
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 34
26587: PUSH
26588: LD_INT 32
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 34
26597: PUSH
26598: LD_INT 89
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: PPUSH
26617: CALL_OW 69
26621: ST_TO_ADDR
// if tmp then
26622: LD_VAR 0 4
26626: IFFALSE 26752
// begin for j in tmp do
26628: LD_ADDR_VAR 0 2
26632: PUSH
26633: LD_VAR 0 4
26637: PUSH
26638: FOR_IN
26639: IFFALSE 26750
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26641: LD_VAR 0 2
26645: PPUSH
26646: CALL_OW 262
26650: PUSH
26651: LD_INT 3
26653: EQUAL
26654: PUSH
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL_OW 261
26664: PUSH
26665: LD_INT 20
26667: GREATER
26668: OR
26669: PUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: CALL_OW 314
26679: NOT
26680: AND
26681: PUSH
26682: LD_VAR 0 2
26686: PPUSH
26687: CALL_OW 263
26691: PUSH
26692: LD_INT 1
26694: NONEQUAL
26695: PUSH
26696: LD_VAR 0 2
26700: PPUSH
26701: CALL_OW 311
26705: OR
26706: AND
26707: IFFALSE 26748
// begin ComCollect ( j , x , y ) ;
26709: LD_VAR 0 2
26713: PPUSH
26714: LD_VAR 0 6
26718: PPUSH
26719: LD_VAR 0 7
26723: PPUSH
26724: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26728: LD_VAR 0 2
26732: PPUSH
26733: LD_VAR 0 8
26737: PPUSH
26738: CALL_OW 172
// exit ;
26742: POP
26743: POP
26744: POP
26745: POP
26746: GO 26756
// end ;
26748: GO 26638
26750: POP
26751: POP
// end ; end ;
26752: GO 26127
26754: POP
26755: POP
// end ; end_of_file
26756: PPOPN 9
26758: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 264
26774: PUSH
26775: LD_INT 91
26777: EQUAL
26778: IFFALSE 26850
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26780: LD_INT 68
26782: PPUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 255
26792: PPUSH
26793: CALL_OW 321
26797: PUSH
26798: LD_INT 2
26800: EQUAL
26801: IFFALSE 26813
// eff := 70 else
26803: LD_ADDR_VAR 0 4
26807: PUSH
26808: LD_INT 70
26810: ST_TO_ADDR
26811: GO 26821
// eff := 30 ;
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: LD_INT 30
26820: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 250
26830: PPUSH
26831: LD_VAR 0 1
26835: PPUSH
26836: CALL_OW 251
26840: PPUSH
26841: LD_VAR 0 4
26845: PPUSH
26846: CALL_OW 495
// end ; end ;
26850: LD_VAR 0 2
26854: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26855: LD_INT 0
26857: PPUSH
// end ;
26858: LD_VAR 0 4
26862: RET
// export function SOS_Command ( cmd ) ; begin
26863: LD_INT 0
26865: PPUSH
// end ;
26866: LD_VAR 0 2
26870: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26871: LD_INT 0
26873: PPUSH
// end ;
26874: LD_VAR 0 6
26878: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26879: LD_INT 0
26881: PPUSH
26882: PPUSH
// if not vehicle or not factory then
26883: LD_VAR 0 1
26887: NOT
26888: PUSH
26889: LD_VAR 0 2
26893: NOT
26894: OR
26895: IFFALSE 26899
// exit ;
26897: GO 27130
// if factoryWaypoints >= factory then
26899: LD_EXP 84
26903: PUSH
26904: LD_VAR 0 2
26908: GREATEREQUAL
26909: IFFALSE 27130
// if factoryWaypoints [ factory ] then
26911: LD_EXP 84
26915: PUSH
26916: LD_VAR 0 2
26920: ARRAY
26921: IFFALSE 27130
// begin if GetControl ( vehicle ) = control_manual then
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 263
26932: PUSH
26933: LD_INT 1
26935: EQUAL
26936: IFFALSE 27017
// begin driver := IsDrivenBy ( vehicle ) ;
26938: LD_ADDR_VAR 0 4
26942: PUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 311
26952: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26953: LD_VAR 0 4
26957: PPUSH
26958: LD_EXP 84
26962: PUSH
26963: LD_VAR 0 2
26967: ARRAY
26968: PUSH
26969: LD_INT 3
26971: ARRAY
26972: PPUSH
26973: LD_EXP 84
26977: PUSH
26978: LD_VAR 0 2
26982: ARRAY
26983: PUSH
26984: LD_INT 4
26986: ARRAY
26987: PPUSH
26988: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26992: LD_VAR 0 4
26996: PPUSH
26997: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27001: LD_VAR 0 4
27005: PPUSH
27006: LD_VAR 0 2
27010: PPUSH
27011: CALL_OW 180
// end else
27015: GO 27130
// if GetControl ( vehicle ) = control_remote then
27017: LD_VAR 0 1
27021: PPUSH
27022: CALL_OW 263
27026: PUSH
27027: LD_INT 2
27029: EQUAL
27030: IFFALSE 27091
// begin wait ( 0 0$2 ) ;
27032: LD_INT 70
27034: PPUSH
27035: CALL_OW 67
// if Connect ( vehicle ) then
27039: LD_VAR 0 1
27043: PPUSH
27044: CALL 39154 0 1
27048: IFFALSE 27089
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27050: LD_VAR 0 1
27054: PPUSH
27055: LD_EXP 84
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: PUSH
27066: LD_INT 3
27068: ARRAY
27069: PPUSH
27070: LD_EXP 84
27074: PUSH
27075: LD_VAR 0 2
27079: ARRAY
27080: PUSH
27081: LD_INT 4
27083: ARRAY
27084: PPUSH
27085: CALL_OW 171
// end else
27089: GO 27130
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_EXP 84
27100: PUSH
27101: LD_VAR 0 2
27105: ARRAY
27106: PUSH
27107: LD_INT 3
27109: ARRAY
27110: PPUSH
27111: LD_EXP 84
27115: PUSH
27116: LD_VAR 0 2
27120: ARRAY
27121: PUSH
27122: LD_INT 4
27124: ARRAY
27125: PPUSH
27126: CALL_OW 171
// end ; end ;
27130: LD_VAR 0 3
27134: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27135: LD_INT 0
27137: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27138: LD_VAR 0 1
27142: PUSH
27143: LD_INT 250
27145: EQUAL
27146: PUSH
27147: LD_VAR 0 2
27151: PPUSH
27152: CALL_OW 264
27156: PUSH
27157: LD_INT 81
27159: EQUAL
27160: AND
27161: IFFALSE 27182
// MinerPlaceMine ( unit , x , y ) ;
27163: LD_VAR 0 2
27167: PPUSH
27168: LD_VAR 0 4
27172: PPUSH
27173: LD_VAR 0 5
27177: PPUSH
27178: CALL 29567 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27182: LD_VAR 0 1
27186: PUSH
27187: LD_INT 251
27189: EQUAL
27190: PUSH
27191: LD_VAR 0 2
27195: PPUSH
27196: CALL_OW 264
27200: PUSH
27201: LD_INT 81
27203: EQUAL
27204: AND
27205: IFFALSE 27226
// MinerDetonateMine ( unit , x , y ) ;
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 4
27216: PPUSH
27217: LD_VAR 0 5
27221: PPUSH
27222: CALL 29842 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27226: LD_VAR 0 1
27230: PUSH
27231: LD_INT 252
27233: EQUAL
27234: PUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 264
27244: PUSH
27245: LD_INT 81
27247: EQUAL
27248: AND
27249: IFFALSE 27270
// MinerCreateMinefield ( unit , x , y ) ;
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: CALL 30259 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27270: LD_VAR 0 1
27274: PUSH
27275: LD_INT 253
27277: EQUAL
27278: PUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 257
27288: PUSH
27289: LD_INT 5
27291: EQUAL
27292: AND
27293: IFFALSE 27314
// ComBinocular ( unit , x , y ) ;
27295: LD_VAR 0 2
27299: PPUSH
27300: LD_VAR 0 4
27304: PPUSH
27305: LD_VAR 0 5
27309: PPUSH
27310: CALL 30628 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 254
27321: EQUAL
27322: PUSH
27323: LD_VAR 0 2
27327: PPUSH
27328: CALL_OW 264
27332: PUSH
27333: LD_INT 99
27335: EQUAL
27336: AND
27337: PUSH
27338: LD_VAR 0 3
27342: PPUSH
27343: CALL_OW 263
27347: PUSH
27348: LD_INT 3
27350: EQUAL
27351: AND
27352: IFFALSE 27368
// HackDestroyVehicle ( unit , selectedUnit ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: CALL 28931 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 255
27375: EQUAL
27376: PUSH
27377: LD_VAR 0 2
27381: PPUSH
27382: CALL_OW 264
27386: PUSH
27387: LD_INT 14
27389: PUSH
27390: LD_INT 53
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: IN
27397: AND
27398: PUSH
27399: LD_VAR 0 4
27403: PPUSH
27404: LD_VAR 0 5
27408: PPUSH
27409: CALL_OW 488
27413: AND
27414: IFFALSE 27438
// CutTreeXYR ( unit , x , y , 12 ) ;
27416: LD_VAR 0 2
27420: PPUSH
27421: LD_VAR 0 4
27425: PPUSH
27426: LD_VAR 0 5
27430: PPUSH
27431: LD_INT 12
27433: PPUSH
27434: CALL 27501 0 4
// if cmd = 256 then
27438: LD_VAR 0 1
27442: PUSH
27443: LD_INT 256
27445: EQUAL
27446: IFFALSE 27467
// SetFactoryWaypoint ( unit , x , y ) ;
27448: LD_VAR 0 2
27452: PPUSH
27453: LD_VAR 0 4
27457: PPUSH
27458: LD_VAR 0 5
27462: PPUSH
27463: CALL 25448 0 3
// if cmd = 257 then
27467: LD_VAR 0 1
27471: PUSH
27472: LD_INT 257
27474: EQUAL
27475: IFFALSE 27496
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27477: LD_VAR 0 2
27481: PPUSH
27482: LD_VAR 0 4
27486: PPUSH
27487: LD_VAR 0 5
27491: PPUSH
27492: CALL 25810 0 3
// end ;
27496: LD_VAR 0 6
27500: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27501: LD_INT 0
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27512: LD_VAR 0 1
27516: NOT
27517: PUSH
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_VAR 0 3
27527: PPUSH
27528: CALL_OW 488
27532: NOT
27533: OR
27534: PUSH
27535: LD_VAR 0 4
27539: NOT
27540: OR
27541: IFFALSE 27545
// exit ;
27543: GO 27885
// list := [ ] ;
27545: LD_ADDR_VAR 0 13
27549: PUSH
27550: EMPTY
27551: ST_TO_ADDR
// if x - r < 0 then
27552: LD_VAR 0 2
27556: PUSH
27557: LD_VAR 0 4
27561: MINUS
27562: PUSH
27563: LD_INT 0
27565: LESS
27566: IFFALSE 27578
// min_x := 0 else
27568: LD_ADDR_VAR 0 7
27572: PUSH
27573: LD_INT 0
27575: ST_TO_ADDR
27576: GO 27594
// min_x := x - r ;
27578: LD_ADDR_VAR 0 7
27582: PUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_VAR 0 4
27592: MINUS
27593: ST_TO_ADDR
// if y - r < 0 then
27594: LD_VAR 0 3
27598: PUSH
27599: LD_VAR 0 4
27603: MINUS
27604: PUSH
27605: LD_INT 0
27607: LESS
27608: IFFALSE 27620
// min_y := 0 else
27610: LD_ADDR_VAR 0 8
27614: PUSH
27615: LD_INT 0
27617: ST_TO_ADDR
27618: GO 27636
// min_y := y - r ;
27620: LD_ADDR_VAR 0 8
27624: PUSH
27625: LD_VAR 0 3
27629: PUSH
27630: LD_VAR 0 4
27634: MINUS
27635: ST_TO_ADDR
// max_x := x + r ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: LD_VAR 0 2
27645: PUSH
27646: LD_VAR 0 4
27650: PLUS
27651: ST_TO_ADDR
// max_y := y + r ;
27652: LD_ADDR_VAR 0 10
27656: PUSH
27657: LD_VAR 0 3
27661: PUSH
27662: LD_VAR 0 4
27666: PLUS
27667: ST_TO_ADDR
// for _x = min_x to max_x do
27668: LD_ADDR_VAR 0 11
27672: PUSH
27673: DOUBLE
27674: LD_VAR 0 7
27678: DEC
27679: ST_TO_ADDR
27680: LD_VAR 0 9
27684: PUSH
27685: FOR_TO
27686: IFFALSE 27803
// for _y = min_y to max_y do
27688: LD_ADDR_VAR 0 12
27692: PUSH
27693: DOUBLE
27694: LD_VAR 0 8
27698: DEC
27699: ST_TO_ADDR
27700: LD_VAR 0 10
27704: PUSH
27705: FOR_TO
27706: IFFALSE 27799
// begin if not ValidHex ( _x , _y ) then
27708: LD_VAR 0 11
27712: PPUSH
27713: LD_VAR 0 12
27717: PPUSH
27718: CALL_OW 488
27722: NOT
27723: IFFALSE 27727
// continue ;
27725: GO 27705
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27727: LD_VAR 0 11
27731: PPUSH
27732: LD_VAR 0 12
27736: PPUSH
27737: CALL_OW 351
27741: PUSH
27742: LD_VAR 0 11
27746: PPUSH
27747: LD_VAR 0 12
27751: PPUSH
27752: CALL_OW 554
27756: AND
27757: IFFALSE 27797
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27759: LD_ADDR_VAR 0 13
27763: PUSH
27764: LD_VAR 0 13
27768: PPUSH
27769: LD_VAR 0 13
27773: PUSH
27774: LD_INT 1
27776: PLUS
27777: PPUSH
27778: LD_VAR 0 11
27782: PUSH
27783: LD_VAR 0 12
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 2
27796: ST_TO_ADDR
// end ;
27797: GO 27705
27799: POP
27800: POP
27801: GO 27685
27803: POP
27804: POP
// if not list then
27805: LD_VAR 0 13
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 27885
// for i in list do
27814: LD_ADDR_VAR 0 6
27818: PUSH
27819: LD_VAR 0 13
27823: PUSH
27824: FOR_IN
27825: IFFALSE 27883
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27827: LD_VAR 0 1
27831: PPUSH
27832: LD_STRING M
27834: PUSH
27835: LD_VAR 0 6
27839: PUSH
27840: LD_INT 1
27842: ARRAY
27843: PUSH
27844: LD_VAR 0 6
27848: PUSH
27849: LD_INT 2
27851: ARRAY
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: PPUSH
27877: CALL_OW 447
27881: GO 27824
27883: POP
27884: POP
// end ;
27885: LD_VAR 0 5
27889: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27890: LD_EXP 87
27894: NOT
27895: IFFALSE 27945
27897: GO 27899
27899: DISABLE
// begin initHack := true ;
27900: LD_ADDR_EXP 87
27904: PUSH
27905: LD_INT 1
27907: ST_TO_ADDR
// hackTanks := [ ] ;
27908: LD_ADDR_EXP 88
27912: PUSH
27913: EMPTY
27914: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27915: LD_ADDR_EXP 89
27919: PUSH
27920: EMPTY
27921: ST_TO_ADDR
// hackLimit := 3 ;
27922: LD_ADDR_EXP 90
27926: PUSH
27927: LD_INT 3
27929: ST_TO_ADDR
// hackDist := 12 ;
27930: LD_ADDR_EXP 91
27934: PUSH
27935: LD_INT 12
27937: ST_TO_ADDR
// hackCounter := [ ] ;
27938: LD_ADDR_EXP 92
27942: PUSH
27943: EMPTY
27944: ST_TO_ADDR
// end ;
27945: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27946: LD_EXP 87
27950: PUSH
27951: LD_INT 34
27953: PUSH
27954: LD_INT 99
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: AND
27966: IFFALSE 28219
27968: GO 27970
27970: DISABLE
27971: LD_INT 0
27973: PPUSH
27974: PPUSH
// begin enable ;
27975: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27976: LD_ADDR_VAR 0 1
27980: PUSH
27981: LD_INT 34
27983: PUSH
27984: LD_INT 99
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 69
27995: PUSH
27996: FOR_IN
27997: IFFALSE 28217
// begin if not i in hackTanks then
27999: LD_VAR 0 1
28003: PUSH
28004: LD_EXP 88
28008: IN
28009: NOT
28010: IFFALSE 28093
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28012: LD_ADDR_EXP 88
28016: PUSH
28017: LD_EXP 88
28021: PPUSH
28022: LD_EXP 88
28026: PUSH
28027: LD_INT 1
28029: PLUS
28030: PPUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: CALL_OW 1
28040: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28041: LD_ADDR_EXP 89
28045: PUSH
28046: LD_EXP 89
28050: PPUSH
28051: LD_EXP 89
28055: PUSH
28056: LD_INT 1
28058: PLUS
28059: PPUSH
28060: EMPTY
28061: PPUSH
28062: CALL_OW 1
28066: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28067: LD_ADDR_EXP 92
28071: PUSH
28072: LD_EXP 92
28076: PPUSH
28077: LD_EXP 92
28081: PUSH
28082: LD_INT 1
28084: PLUS
28085: PPUSH
28086: EMPTY
28087: PPUSH
28088: CALL_OW 1
28092: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL_OW 302
28102: NOT
28103: IFFALSE 28116
// begin HackUnlinkAll ( i ) ;
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL 28222 0 1
// continue ;
28114: GO 27996
// end ; HackCheckCapturedStatus ( i ) ;
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL 28665 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28125: LD_ADDR_VAR 0 2
28129: PUSH
28130: LD_INT 81
28132: PUSH
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 255
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 33
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 91
28159: PUSH
28160: LD_VAR 0 1
28164: PUSH
28165: LD_EXP 91
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 50
28177: PUSH
28178: EMPTY
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: ST_TO_ADDR
// if not tmp then
28192: LD_VAR 0 2
28196: NOT
28197: IFFALSE 28201
// continue ;
28199: GO 27996
// HackLink ( i , tmp ) ;
28201: LD_VAR 0 1
28205: PPUSH
28206: LD_VAR 0 2
28210: PPUSH
28211: CALL 28358 0 2
// end ;
28215: GO 27996
28217: POP
28218: POP
// end ;
28219: PPOPN 2
28221: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28222: LD_INT 0
28224: PPUSH
28225: PPUSH
28226: PPUSH
// if not hack in hackTanks then
28227: LD_VAR 0 1
28231: PUSH
28232: LD_EXP 88
28236: IN
28237: NOT
28238: IFFALSE 28242
// exit ;
28240: GO 28353
// index := GetElementIndex ( hackTanks , hack ) ;
28242: LD_ADDR_VAR 0 4
28246: PUSH
28247: LD_EXP 88
28251: PPUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL 35970 0 2
28261: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28262: LD_EXP 89
28266: PUSH
28267: LD_VAR 0 4
28271: ARRAY
28272: IFFALSE 28353
// begin for i in hackTanksCaptured [ index ] do
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_EXP 89
28283: PUSH
28284: LD_VAR 0 4
28288: ARRAY
28289: PUSH
28290: FOR_IN
28291: IFFALSE 28317
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28293: LD_VAR 0 3
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 3
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: PPUSH
28311: CALL_OW 235
28315: GO 28290
28317: POP
28318: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28319: LD_ADDR_EXP 89
28323: PUSH
28324: LD_EXP 89
28328: PPUSH
28329: LD_VAR 0 4
28333: PPUSH
28334: EMPTY
28335: PPUSH
28336: CALL_OW 1
28340: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28341: LD_VAR 0 1
28345: PPUSH
28346: LD_INT 0
28348: PPUSH
28349: CALL_OW 505
// end ; end ;
28353: LD_VAR 0 2
28357: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28358: LD_INT 0
28360: PPUSH
28361: PPUSH
28362: PPUSH
// if not hack in hackTanks or not vehicles then
28363: LD_VAR 0 1
28367: PUSH
28368: LD_EXP 88
28372: IN
28373: NOT
28374: PUSH
28375: LD_VAR 0 2
28379: NOT
28380: OR
28381: IFFALSE 28385
// exit ;
28383: GO 28660
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 1
28394: PPUSH
28395: LD_VAR 0 2
28399: PPUSH
28400: LD_INT 1
28402: PPUSH
28403: LD_INT 1
28405: PPUSH
28406: CALL 36620 0 4
28410: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28411: LD_ADDR_VAR 0 5
28415: PUSH
28416: LD_EXP 88
28420: PPUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL 35970 0 2
28430: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28431: LD_EXP 89
28435: PUSH
28436: LD_VAR 0 5
28440: ARRAY
28441: PUSH
28442: LD_EXP 90
28446: LESS
28447: IFFALSE 28636
// begin for i := 1 to vehicles do
28449: LD_ADDR_VAR 0 4
28453: PUSH
28454: DOUBLE
28455: LD_INT 1
28457: DEC
28458: ST_TO_ADDR
28459: LD_VAR 0 2
28463: PUSH
28464: FOR_TO
28465: IFFALSE 28634
// begin if hackTanksCaptured [ index ] = hackLimit then
28467: LD_EXP 89
28471: PUSH
28472: LD_VAR 0 5
28476: ARRAY
28477: PUSH
28478: LD_EXP 90
28482: EQUAL
28483: IFFALSE 28487
// break ;
28485: GO 28634
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28487: LD_ADDR_EXP 92
28491: PUSH
28492: LD_EXP 92
28496: PPUSH
28497: LD_VAR 0 5
28501: PPUSH
28502: LD_EXP 92
28506: PUSH
28507: LD_VAR 0 5
28511: ARRAY
28512: PUSH
28513: LD_INT 1
28515: PLUS
28516: PPUSH
28517: CALL_OW 1
28521: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28522: LD_ADDR_EXP 89
28526: PUSH
28527: LD_EXP 89
28531: PPUSH
28532: LD_VAR 0 5
28536: PUSH
28537: LD_EXP 89
28541: PUSH
28542: LD_VAR 0 5
28546: ARRAY
28547: PUSH
28548: LD_INT 1
28550: PLUS
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PPUSH
28556: LD_VAR 0 2
28560: PUSH
28561: LD_VAR 0 4
28565: ARRAY
28566: PUSH
28567: LD_VAR 0 2
28571: PUSH
28572: LD_VAR 0 4
28576: ARRAY
28577: PPUSH
28578: CALL_OW 255
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL 36185 0 3
28591: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 4
28601: ARRAY
28602: PPUSH
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 255
28612: PPUSH
28613: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28617: LD_VAR 0 2
28621: PUSH
28622: LD_VAR 0 4
28626: ARRAY
28627: PPUSH
28628: CALL_OW 141
// end ;
28632: GO 28464
28634: POP
28635: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28636: LD_VAR 0 1
28640: PPUSH
28641: LD_EXP 89
28645: PUSH
28646: LD_VAR 0 5
28650: ARRAY
28651: PUSH
28652: LD_INT 0
28654: PLUS
28655: PPUSH
28656: CALL_OW 505
// end ;
28660: LD_VAR 0 3
28664: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
28669: PPUSH
28670: PPUSH
// if not hack in hackTanks then
28671: LD_VAR 0 1
28675: PUSH
28676: LD_EXP 88
28680: IN
28681: NOT
28682: IFFALSE 28686
// exit ;
28684: GO 28926
// index := GetElementIndex ( hackTanks , hack ) ;
28686: LD_ADDR_VAR 0 4
28690: PUSH
28691: LD_EXP 88
28695: PPUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL 35970 0 2
28705: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: DOUBLE
28712: LD_EXP 89
28716: PUSH
28717: LD_VAR 0 4
28721: ARRAY
28722: INC
28723: ST_TO_ADDR
28724: LD_INT 1
28726: PUSH
28727: FOR_DOWNTO
28728: IFFALSE 28900
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28730: LD_ADDR_VAR 0 5
28734: PUSH
28735: LD_EXP 89
28739: PUSH
28740: LD_VAR 0 4
28744: ARRAY
28745: PUSH
28746: LD_VAR 0 3
28750: ARRAY
28751: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28752: LD_VAR 0 5
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: PPUSH
28761: CALL_OW 302
28765: NOT
28766: PUSH
28767: LD_VAR 0 5
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: PPUSH
28776: CALL_OW 255
28780: PUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL_OW 255
28790: NONEQUAL
28791: OR
28792: IFFALSE 28898
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28794: LD_VAR 0 5
28798: PUSH
28799: LD_INT 1
28801: ARRAY
28802: PPUSH
28803: CALL_OW 305
28807: PUSH
28808: LD_VAR 0 5
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PPUSH
28817: CALL_OW 255
28821: PUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: CALL_OW 255
28831: EQUAL
28832: AND
28833: IFFALSE 28857
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28835: LD_VAR 0 5
28839: PUSH
28840: LD_INT 1
28842: ARRAY
28843: PPUSH
28844: LD_VAR 0 5
28848: PUSH
28849: LD_INT 2
28851: ARRAY
28852: PPUSH
28853: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28857: LD_ADDR_EXP 89
28861: PUSH
28862: LD_EXP 89
28866: PPUSH
28867: LD_VAR 0 4
28871: PPUSH
28872: LD_EXP 89
28876: PUSH
28877: LD_VAR 0 4
28881: ARRAY
28882: PPUSH
28883: LD_VAR 0 3
28887: PPUSH
28888: CALL_OW 3
28892: PPUSH
28893: CALL_OW 1
28897: ST_TO_ADDR
// end ; end ;
28898: GO 28727
28900: POP
28901: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28902: LD_VAR 0 1
28906: PPUSH
28907: LD_EXP 89
28911: PUSH
28912: LD_VAR 0 4
28916: ARRAY
28917: PUSH
28918: LD_INT 0
28920: PLUS
28921: PPUSH
28922: CALL_OW 505
// end ;
28926: LD_VAR 0 2
28930: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28931: LD_INT 0
28933: PPUSH
28934: PPUSH
28935: PPUSH
28936: PPUSH
// if not hack in hackTanks then
28937: LD_VAR 0 1
28941: PUSH
28942: LD_EXP 88
28946: IN
28947: NOT
28948: IFFALSE 28952
// exit ;
28950: GO 29037
// index := GetElementIndex ( hackTanks , hack ) ;
28952: LD_ADDR_VAR 0 5
28956: PUSH
28957: LD_EXP 88
28961: PPUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: CALL 35970 0 2
28971: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28972: LD_ADDR_VAR 0 4
28976: PUSH
28977: DOUBLE
28978: LD_INT 1
28980: DEC
28981: ST_TO_ADDR
28982: LD_EXP 89
28986: PUSH
28987: LD_VAR 0 5
28991: ARRAY
28992: PUSH
28993: FOR_TO
28994: IFFALSE 29035
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28996: LD_EXP 89
29000: PUSH
29001: LD_VAR 0 5
29005: ARRAY
29006: PUSH
29007: LD_VAR 0 4
29011: ARRAY
29012: PUSH
29013: LD_INT 1
29015: ARRAY
29016: PUSH
29017: LD_VAR 0 2
29021: EQUAL
29022: IFFALSE 29033
// KillUnit ( vehicle ) ;
29024: LD_VAR 0 2
29028: PPUSH
29029: CALL_OW 66
29033: GO 28993
29035: POP
29036: POP
// end ;
29037: LD_VAR 0 3
29041: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29042: LD_EXP 93
29046: NOT
29047: IFFALSE 29082
29049: GO 29051
29051: DISABLE
// begin initMiner := true ;
29052: LD_ADDR_EXP 93
29056: PUSH
29057: LD_INT 1
29059: ST_TO_ADDR
// minersList := [ ] ;
29060: LD_ADDR_EXP 94
29064: PUSH
29065: EMPTY
29066: ST_TO_ADDR
// minerMinesList := [ ] ;
29067: LD_ADDR_EXP 95
29071: PUSH
29072: EMPTY
29073: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29074: LD_ADDR_EXP 96
29078: PUSH
29079: LD_INT 5
29081: ST_TO_ADDR
// end ;
29082: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29083: LD_EXP 93
29087: PUSH
29088: LD_INT 34
29090: PUSH
29091: LD_INT 81
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PPUSH
29098: CALL_OW 69
29102: AND
29103: IFFALSE 29564
29105: GO 29107
29107: DISABLE
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
// begin enable ;
29114: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29115: LD_ADDR_VAR 0 1
29119: PUSH
29120: LD_INT 34
29122: PUSH
29123: LD_INT 81
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PPUSH
29130: CALL_OW 69
29134: PUSH
29135: FOR_IN
29136: IFFALSE 29208
// begin if not i in minersList then
29138: LD_VAR 0 1
29142: PUSH
29143: LD_EXP 94
29147: IN
29148: NOT
29149: IFFALSE 29206
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29151: LD_ADDR_EXP 94
29155: PUSH
29156: LD_EXP 94
29160: PPUSH
29161: LD_EXP 94
29165: PUSH
29166: LD_INT 1
29168: PLUS
29169: PPUSH
29170: LD_VAR 0 1
29174: PPUSH
29175: CALL_OW 1
29179: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29180: LD_ADDR_EXP 95
29184: PUSH
29185: LD_EXP 95
29189: PPUSH
29190: LD_EXP 95
29194: PUSH
29195: LD_INT 1
29197: PLUS
29198: PPUSH
29199: EMPTY
29200: PPUSH
29201: CALL_OW 1
29205: ST_TO_ADDR
// end end ;
29206: GO 29135
29208: POP
29209: POP
// for i := minerMinesList downto 1 do
29210: LD_ADDR_VAR 0 1
29214: PUSH
29215: DOUBLE
29216: LD_EXP 95
29220: INC
29221: ST_TO_ADDR
29222: LD_INT 1
29224: PUSH
29225: FOR_DOWNTO
29226: IFFALSE 29562
// begin if IsLive ( minersList [ i ] ) then
29228: LD_EXP 94
29232: PUSH
29233: LD_VAR 0 1
29237: ARRAY
29238: PPUSH
29239: CALL_OW 300
29243: IFFALSE 29271
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29245: LD_EXP 94
29249: PUSH
29250: LD_VAR 0 1
29254: ARRAY
29255: PPUSH
29256: LD_EXP 95
29260: PUSH
29261: LD_VAR 0 1
29265: ARRAY
29266: PPUSH
29267: CALL_OW 505
// if not minerMinesList [ i ] then
29271: LD_EXP 95
29275: PUSH
29276: LD_VAR 0 1
29280: ARRAY
29281: NOT
29282: IFFALSE 29286
// continue ;
29284: GO 29225
// for j := minerMinesList [ i ] downto 1 do
29286: LD_ADDR_VAR 0 2
29290: PUSH
29291: DOUBLE
29292: LD_EXP 95
29296: PUSH
29297: LD_VAR 0 1
29301: ARRAY
29302: INC
29303: ST_TO_ADDR
29304: LD_INT 1
29306: PUSH
29307: FOR_DOWNTO
29308: IFFALSE 29558
// begin side := GetSide ( minersList [ i ] ) ;
29310: LD_ADDR_VAR 0 3
29314: PUSH
29315: LD_EXP 94
29319: PUSH
29320: LD_VAR 0 1
29324: ARRAY
29325: PPUSH
29326: CALL_OW 255
29330: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29331: LD_ADDR_VAR 0 4
29335: PUSH
29336: LD_EXP 95
29340: PUSH
29341: LD_VAR 0 1
29345: ARRAY
29346: PUSH
29347: LD_VAR 0 2
29351: ARRAY
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PPUSH
29357: LD_EXP 95
29361: PUSH
29362: LD_VAR 0 1
29366: ARRAY
29367: PUSH
29368: LD_VAR 0 2
29372: ARRAY
29373: PUSH
29374: LD_INT 2
29376: ARRAY
29377: PPUSH
29378: CALL_OW 428
29382: ST_TO_ADDR
// if not tmp then
29383: LD_VAR 0 4
29387: NOT
29388: IFFALSE 29392
// continue ;
29390: GO 29307
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29392: LD_VAR 0 4
29396: PUSH
29397: LD_INT 81
29399: PUSH
29400: LD_VAR 0 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: IN
29414: PUSH
29415: LD_EXP 95
29419: PUSH
29420: LD_VAR 0 1
29424: ARRAY
29425: PUSH
29426: LD_VAR 0 2
29430: ARRAY
29431: PUSH
29432: LD_INT 1
29434: ARRAY
29435: PPUSH
29436: LD_EXP 95
29440: PUSH
29441: LD_VAR 0 1
29445: ARRAY
29446: PUSH
29447: LD_VAR 0 2
29451: ARRAY
29452: PUSH
29453: LD_INT 2
29455: ARRAY
29456: PPUSH
29457: CALL_OW 458
29461: AND
29462: IFFALSE 29556
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29464: LD_EXP 95
29468: PUSH
29469: LD_VAR 0 1
29473: ARRAY
29474: PUSH
29475: LD_VAR 0 2
29479: ARRAY
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: LD_EXP 95
29489: PUSH
29490: LD_VAR 0 1
29494: ARRAY
29495: PUSH
29496: LD_VAR 0 2
29500: ARRAY
29501: PUSH
29502: LD_INT 2
29504: ARRAY
29505: PPUSH
29506: LD_VAR 0 3
29510: PPUSH
29511: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29515: LD_ADDR_EXP 95
29519: PUSH
29520: LD_EXP 95
29524: PPUSH
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_EXP 95
29534: PUSH
29535: LD_VAR 0 1
29539: ARRAY
29540: PPUSH
29541: LD_VAR 0 2
29545: PPUSH
29546: CALL_OW 3
29550: PPUSH
29551: CALL_OW 1
29555: ST_TO_ADDR
// end ; end ;
29556: GO 29307
29558: POP
29559: POP
// end ;
29560: GO 29225
29562: POP
29563: POP
// end ;
29564: PPOPN 4
29566: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29567: LD_INT 0
29569: PPUSH
29570: PPUSH
// result := false ;
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_INT 0
29578: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 264
29588: PUSH
29589: LD_INT 81
29591: EQUAL
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29837
// index := GetElementIndex ( minersList , unit ) ;
29597: LD_ADDR_VAR 0 5
29601: PUSH
29602: LD_EXP 94
29606: PPUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL 35970 0 2
29616: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29617: LD_EXP 95
29621: PUSH
29622: LD_VAR 0 5
29626: ARRAY
29627: PUSH
29628: LD_EXP 96
29632: GREATEREQUAL
29633: IFFALSE 29637
// exit ;
29635: GO 29837
// ComMoveXY ( unit , x , y ) ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_VAR 0 2
29646: PPUSH
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29656: LD_INT 35
29658: PPUSH
29659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29663: LD_VAR 0 1
29667: PPUSH
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 3
29677: PPUSH
29678: CALL 67233 0 3
29682: NOT
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 314
29693: AND
29694: IFFALSE 29698
// exit ;
29696: GO 29837
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29698: LD_VAR 0 2
29702: PPUSH
29703: LD_VAR 0 3
29707: PPUSH
29708: CALL_OW 428
29712: PUSH
29713: LD_VAR 0 1
29717: EQUAL
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 314
29728: NOT
29729: AND
29730: IFFALSE 29656
// PlaySoundXY ( x , y , PlantMine ) ;
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: LD_STRING PlantMine
29744: PPUSH
29745: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29749: LD_VAR 0 2
29753: PPUSH
29754: LD_VAR 0 3
29758: PPUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 255
29768: PPUSH
29769: LD_INT 0
29771: PPUSH
29772: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29776: LD_ADDR_EXP 95
29780: PUSH
29781: LD_EXP 95
29785: PPUSH
29786: LD_VAR 0 5
29790: PUSH
29791: LD_EXP 95
29795: PUSH
29796: LD_VAR 0 5
29800: ARRAY
29801: PUSH
29802: LD_INT 1
29804: PLUS
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PPUSH
29810: LD_VAR 0 2
29814: PUSH
29815: LD_VAR 0 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PPUSH
29824: CALL 36185 0 3
29828: ST_TO_ADDR
// result := true ;
29829: LD_ADDR_VAR 0 4
29833: PUSH
29834: LD_INT 1
29836: ST_TO_ADDR
// end ;
29837: LD_VAR 0 4
29841: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29842: LD_INT 0
29844: PPUSH
29845: PPUSH
29846: PPUSH
// if not unit in minersList then
29847: LD_VAR 0 1
29851: PUSH
29852: LD_EXP 94
29856: IN
29857: NOT
29858: IFFALSE 29862
// exit ;
29860: GO 30254
// index := GetElementIndex ( minersList , unit ) ;
29862: LD_ADDR_VAR 0 6
29866: PUSH
29867: LD_EXP 94
29871: PPUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL 35970 0 2
29881: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29882: LD_ADDR_VAR 0 5
29886: PUSH
29887: DOUBLE
29888: LD_EXP 95
29892: PUSH
29893: LD_VAR 0 6
29897: ARRAY
29898: INC
29899: ST_TO_ADDR
29900: LD_INT 1
29902: PUSH
29903: FOR_DOWNTO
29904: IFFALSE 30065
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29906: LD_EXP 95
29910: PUSH
29911: LD_VAR 0 6
29915: ARRAY
29916: PUSH
29917: LD_VAR 0 5
29921: ARRAY
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PUSH
29927: LD_VAR 0 2
29931: EQUAL
29932: PUSH
29933: LD_EXP 95
29937: PUSH
29938: LD_VAR 0 6
29942: ARRAY
29943: PUSH
29944: LD_VAR 0 5
29948: ARRAY
29949: PUSH
29950: LD_INT 2
29952: ARRAY
29953: PUSH
29954: LD_VAR 0 3
29958: EQUAL
29959: AND
29960: IFFALSE 30063
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29962: LD_EXP 95
29966: PUSH
29967: LD_VAR 0 6
29971: ARRAY
29972: PUSH
29973: LD_VAR 0 5
29977: ARRAY
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PPUSH
29983: LD_EXP 95
29987: PUSH
29988: LD_VAR 0 6
29992: ARRAY
29993: PUSH
29994: LD_VAR 0 5
29998: ARRAY
29999: PUSH
30000: LD_INT 2
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 255
30013: PPUSH
30014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30018: LD_ADDR_EXP 95
30022: PUSH
30023: LD_EXP 95
30027: PPUSH
30028: LD_VAR 0 6
30032: PPUSH
30033: LD_EXP 95
30037: PUSH
30038: LD_VAR 0 6
30042: ARRAY
30043: PPUSH
30044: LD_VAR 0 5
30048: PPUSH
30049: CALL_OW 3
30053: PPUSH
30054: CALL_OW 1
30058: ST_TO_ADDR
// exit ;
30059: POP
30060: POP
30061: GO 30254
// end ; end ;
30063: GO 29903
30065: POP
30066: POP
// for i := minerMinesList [ index ] downto 1 do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: DOUBLE
30073: LD_EXP 95
30077: PUSH
30078: LD_VAR 0 6
30082: ARRAY
30083: INC
30084: ST_TO_ADDR
30085: LD_INT 1
30087: PUSH
30088: FOR_DOWNTO
30089: IFFALSE 30252
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30091: LD_EXP 95
30095: PUSH
30096: LD_VAR 0 6
30100: ARRAY
30101: PUSH
30102: LD_VAR 0 5
30106: ARRAY
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: LD_EXP 95
30116: PUSH
30117: LD_VAR 0 6
30121: ARRAY
30122: PUSH
30123: LD_VAR 0 5
30127: ARRAY
30128: PUSH
30129: LD_INT 2
30131: ARRAY
30132: PPUSH
30133: LD_VAR 0 2
30137: PPUSH
30138: LD_VAR 0 3
30142: PPUSH
30143: CALL_OW 298
30147: PUSH
30148: LD_INT 6
30150: LESS
30151: IFFALSE 30250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30153: LD_EXP 95
30157: PUSH
30158: LD_VAR 0 6
30162: ARRAY
30163: PUSH
30164: LD_VAR 0 5
30168: ARRAY
30169: PUSH
30170: LD_INT 1
30172: ARRAY
30173: PPUSH
30174: LD_EXP 95
30178: PUSH
30179: LD_VAR 0 6
30183: ARRAY
30184: PUSH
30185: LD_VAR 0 5
30189: ARRAY
30190: PUSH
30191: LD_INT 2
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 255
30204: PPUSH
30205: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30209: LD_ADDR_EXP 95
30213: PUSH
30214: LD_EXP 95
30218: PPUSH
30219: LD_VAR 0 6
30223: PPUSH
30224: LD_EXP 95
30228: PUSH
30229: LD_VAR 0 6
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 5
30239: PPUSH
30240: CALL_OW 3
30244: PPUSH
30245: CALL_OW 1
30249: ST_TO_ADDR
// end ; end ;
30250: GO 30088
30252: POP
30253: POP
// end ;
30254: LD_VAR 0 4
30258: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30259: LD_INT 0
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 264
30279: PUSH
30280: LD_INT 81
30282: EQUAL
30283: NOT
30284: PUSH
30285: LD_VAR 0 1
30289: PUSH
30290: LD_EXP 94
30294: IN
30295: NOT
30296: OR
30297: IFFALSE 30301
// exit ;
30299: GO 30623
// index := GetElementIndex ( minersList , unit ) ;
30301: LD_ADDR_VAR 0 6
30305: PUSH
30306: LD_EXP 94
30310: PPUSH
30311: LD_VAR 0 1
30315: PPUSH
30316: CALL 35970 0 2
30320: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30321: LD_ADDR_VAR 0 8
30325: PUSH
30326: LD_EXP 96
30330: PUSH
30331: LD_EXP 95
30335: PUSH
30336: LD_VAR 0 6
30340: ARRAY
30341: MINUS
30342: ST_TO_ADDR
// if not minesFreeAmount then
30343: LD_VAR 0 8
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30623
// tmp := [ ] ;
30352: LD_ADDR_VAR 0 7
30356: PUSH
30357: EMPTY
30358: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30359: LD_ADDR_VAR 0 5
30363: PUSH
30364: DOUBLE
30365: LD_INT 1
30367: DEC
30368: ST_TO_ADDR
30369: LD_VAR 0 8
30373: PUSH
30374: FOR_TO
30375: IFFALSE 30570
// begin _d := rand ( 0 , 5 ) ;
30377: LD_ADDR_VAR 0 11
30381: PUSH
30382: LD_INT 0
30384: PPUSH
30385: LD_INT 5
30387: PPUSH
30388: CALL_OW 12
30392: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30393: LD_ADDR_VAR 0 12
30397: PUSH
30398: LD_INT 2
30400: PPUSH
30401: LD_INT 6
30403: PPUSH
30404: CALL_OW 12
30408: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30409: LD_ADDR_VAR 0 9
30413: PUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 11
30423: PPUSH
30424: LD_VAR 0 12
30428: PPUSH
30429: CALL_OW 272
30433: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30434: LD_ADDR_VAR 0 10
30438: PUSH
30439: LD_VAR 0 3
30443: PPUSH
30444: LD_VAR 0 11
30448: PPUSH
30449: LD_VAR 0 12
30453: PPUSH
30454: CALL_OW 273
30458: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30459: LD_VAR 0 9
30463: PPUSH
30464: LD_VAR 0 10
30468: PPUSH
30469: CALL_OW 488
30473: PUSH
30474: LD_VAR 0 9
30478: PUSH
30479: LD_VAR 0 10
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_VAR 0 7
30492: IN
30493: NOT
30494: AND
30495: PUSH
30496: LD_VAR 0 9
30500: PPUSH
30501: LD_VAR 0 10
30505: PPUSH
30506: CALL_OW 458
30510: NOT
30511: AND
30512: IFFALSE 30554
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30514: LD_ADDR_VAR 0 7
30518: PUSH
30519: LD_VAR 0 7
30523: PPUSH
30524: LD_VAR 0 7
30528: PUSH
30529: LD_INT 1
30531: PLUS
30532: PPUSH
30533: LD_VAR 0 9
30537: PUSH
30538: LD_VAR 0 10
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PPUSH
30547: CALL_OW 1
30551: ST_TO_ADDR
30552: GO 30568
// i := i - 1 ;
30554: LD_ADDR_VAR 0 5
30558: PUSH
30559: LD_VAR 0 5
30563: PUSH
30564: LD_INT 1
30566: MINUS
30567: ST_TO_ADDR
// end ;
30568: GO 30374
30570: POP
30571: POP
// for i in tmp do
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_VAR 0 7
30581: PUSH
30582: FOR_IN
30583: IFFALSE 30621
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30585: LD_VAR 0 1
30589: PPUSH
30590: LD_VAR 0 5
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 5
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: CALL 29567 0 3
30612: NOT
30613: IFFALSE 30619
// exit ;
30615: POP
30616: POP
30617: GO 30623
30619: GO 30582
30621: POP
30622: POP
// end ;
30623: LD_VAR 0 4
30627: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30628: LD_INT 0
30630: PPUSH
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// if not GetClass ( unit ) = class_sniper then
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 257
30646: PUSH
30647: LD_INT 5
30649: EQUAL
30650: NOT
30651: IFFALSE 30655
// exit ;
30653: GO 31043
// dist := 8 ;
30655: LD_ADDR_VAR 0 5
30659: PUSH
30660: LD_INT 8
30662: ST_TO_ADDR
// viewRange := 12 ;
30663: LD_ADDR_VAR 0 7
30667: PUSH
30668: LD_INT 12
30670: ST_TO_ADDR
// side := GetSide ( unit ) ;
30671: LD_ADDR_VAR 0 6
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 255
30685: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30686: LD_INT 61
30688: PPUSH
30689: LD_VAR 0 6
30693: PPUSH
30694: CALL_OW 321
30698: PUSH
30699: LD_INT 2
30701: EQUAL
30702: IFFALSE 30712
// viewRange := 16 ;
30704: LD_ADDR_VAR 0 7
30708: PUSH
30709: LD_INT 16
30711: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_VAR 0 2
30721: PPUSH
30722: LD_VAR 0 3
30726: PPUSH
30727: CALL_OW 297
30731: PUSH
30732: LD_VAR 0 5
30736: GREATER
30737: IFFALSE 30816
// begin ComMoveXY ( unit , x , y ) ;
30739: LD_VAR 0 1
30743: PPUSH
30744: LD_VAR 0 2
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30758: LD_INT 35
30760: PPUSH
30761: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30765: LD_VAR 0 1
30769: PPUSH
30770: LD_VAR 0 2
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: CALL 67233 0 3
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 31043
// until GetDistUnitXY ( unit , x , y ) < dist ;
30789: LD_VAR 0 1
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 3
30803: PPUSH
30804: CALL_OW 297
30808: PUSH
30809: LD_VAR 0 5
30813: LESS
30814: IFFALSE 30758
// end ; ComTurnXY ( unit , x , y ) ;
30816: LD_VAR 0 1
30820: PPUSH
30821: LD_VAR 0 2
30825: PPUSH
30826: LD_VAR 0 3
30830: PPUSH
30831: CALL_OW 118
// wait ( 5 ) ;
30835: LD_INT 5
30837: PPUSH
30838: CALL_OW 67
// _d := GetDir ( unit ) ;
30842: LD_ADDR_VAR 0 10
30846: PUSH
30847: LD_VAR 0 1
30851: PPUSH
30852: CALL_OW 254
30856: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30857: LD_ADDR_VAR 0 8
30861: PUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 250
30871: PPUSH
30872: LD_VAR 0 10
30876: PPUSH
30877: LD_VAR 0 5
30881: PPUSH
30882: CALL_OW 272
30886: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30887: LD_ADDR_VAR 0 9
30891: PUSH
30892: LD_VAR 0 1
30896: PPUSH
30897: CALL_OW 251
30901: PPUSH
30902: LD_VAR 0 10
30906: PPUSH
30907: LD_VAR 0 5
30911: PPUSH
30912: CALL_OW 273
30916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30917: LD_VAR 0 8
30921: PPUSH
30922: LD_VAR 0 9
30926: PPUSH
30927: CALL_OW 488
30931: NOT
30932: IFFALSE 30936
// exit ;
30934: GO 31043
// ComAnimCustom ( unit , 1 ) ;
30936: LD_VAR 0 1
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30948: LD_VAR 0 8
30952: PPUSH
30953: LD_VAR 0 9
30957: PPUSH
30958: LD_VAR 0 6
30962: PPUSH
30963: LD_VAR 0 7
30967: PPUSH
30968: CALL_OW 330
// repeat wait ( 1 ) ;
30972: LD_INT 1
30974: PPUSH
30975: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 316
30988: PUSH
30989: LD_VAR 0 1
30993: PPUSH
30994: CALL_OW 314
30998: OR
30999: PUSH
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 302
31009: NOT
31010: OR
31011: PUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 301
31021: OR
31022: IFFALSE 30972
// RemoveSeeing ( _x , _y , side ) ;
31024: LD_VAR 0 8
31028: PPUSH
31029: LD_VAR 0 9
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 331
// end ; end_of_file
31043: LD_VAR 0 4
31047: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31048: LD_INT 0
31050: PPUSH
31051: PPUSH
// if exist_mode then
31052: LD_VAR 0 2
31056: IFFALSE 31081
// unit := CreateCharacter ( prefix & ident ) else
31058: LD_ADDR_VAR 0 5
31062: PUSH
31063: LD_VAR 0 3
31067: PUSH
31068: LD_VAR 0 1
31072: STR
31073: PPUSH
31074: CALL_OW 34
31078: ST_TO_ADDR
31079: GO 31096
// unit := NewCharacter ( ident ) ;
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_VAR 0 1
31090: PPUSH
31091: CALL_OW 25
31095: ST_TO_ADDR
// result := unit ;
31096: LD_ADDR_VAR 0 4
31100: PUSH
31101: LD_VAR 0 5
31105: ST_TO_ADDR
// end ;
31106: LD_VAR 0 4
31110: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31111: LD_INT 0
31113: PPUSH
31114: PPUSH
// if not side or not nation then
31115: LD_VAR 0 1
31119: NOT
31120: PUSH
31121: LD_VAR 0 2
31125: NOT
31126: OR
31127: IFFALSE 31131
// exit ;
31129: GO 31899
// case nation of nation_american :
31131: LD_VAR 0 2
31135: PUSH
31136: LD_INT 1
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31358
31144: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31145: LD_ADDR_VAR 0 4
31149: PUSH
31150: LD_INT 35
31152: PUSH
31153: LD_INT 45
31155: PUSH
31156: LD_INT 46
31158: PUSH
31159: LD_INT 47
31161: PUSH
31162: LD_INT 82
31164: PUSH
31165: LD_INT 83
31167: PUSH
31168: LD_INT 84
31170: PUSH
31171: LD_INT 85
31173: PUSH
31174: LD_INT 86
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 6
31185: PUSH
31186: LD_INT 15
31188: PUSH
31189: LD_INT 16
31191: PUSH
31192: LD_INT 7
31194: PUSH
31195: LD_INT 12
31197: PUSH
31198: LD_INT 13
31200: PUSH
31201: LD_INT 10
31203: PUSH
31204: LD_INT 14
31206: PUSH
31207: LD_INT 20
31209: PUSH
31210: LD_INT 21
31212: PUSH
31213: LD_INT 22
31215: PUSH
31216: LD_INT 25
31218: PUSH
31219: LD_INT 32
31221: PUSH
31222: LD_INT 27
31224: PUSH
31225: LD_INT 36
31227: PUSH
31228: LD_INT 69
31230: PUSH
31231: LD_INT 39
31233: PUSH
31234: LD_INT 34
31236: PUSH
31237: LD_INT 40
31239: PUSH
31240: LD_INT 48
31242: PUSH
31243: LD_INT 49
31245: PUSH
31246: LD_INT 50
31248: PUSH
31249: LD_INT 51
31251: PUSH
31252: LD_INT 52
31254: PUSH
31255: LD_INT 53
31257: PUSH
31258: LD_INT 54
31260: PUSH
31261: LD_INT 55
31263: PUSH
31264: LD_INT 56
31266: PUSH
31267: LD_INT 57
31269: PUSH
31270: LD_INT 58
31272: PUSH
31273: LD_INT 59
31275: PUSH
31276: LD_INT 60
31278: PUSH
31279: LD_INT 61
31281: PUSH
31282: LD_INT 62
31284: PUSH
31285: LD_INT 80
31287: PUSH
31288: LD_INT 82
31290: PUSH
31291: LD_INT 83
31293: PUSH
31294: LD_INT 84
31296: PUSH
31297: LD_INT 85
31299: PUSH
31300: LD_INT 86
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
31356: GO 31823
31358: LD_INT 2
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31592
31366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31367: LD_ADDR_VAR 0 4
31371: PUSH
31372: LD_INT 35
31374: PUSH
31375: LD_INT 45
31377: PUSH
31378: LD_INT 46
31380: PUSH
31381: LD_INT 47
31383: PUSH
31384: LD_INT 82
31386: PUSH
31387: LD_INT 83
31389: PUSH
31390: LD_INT 84
31392: PUSH
31393: LD_INT 85
31395: PUSH
31396: LD_INT 87
31398: PUSH
31399: LD_INT 70
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 11
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: LD_INT 4
31413: PUSH
31414: LD_INT 5
31416: PUSH
31417: LD_INT 6
31419: PUSH
31420: LD_INT 15
31422: PUSH
31423: LD_INT 18
31425: PUSH
31426: LD_INT 7
31428: PUSH
31429: LD_INT 17
31431: PUSH
31432: LD_INT 8
31434: PUSH
31435: LD_INT 20
31437: PUSH
31438: LD_INT 21
31440: PUSH
31441: LD_INT 22
31443: PUSH
31444: LD_INT 72
31446: PUSH
31447: LD_INT 26
31449: PUSH
31450: LD_INT 69
31452: PUSH
31453: LD_INT 39
31455: PUSH
31456: LD_INT 40
31458: PUSH
31459: LD_INT 41
31461: PUSH
31462: LD_INT 42
31464: PUSH
31465: LD_INT 43
31467: PUSH
31468: LD_INT 48
31470: PUSH
31471: LD_INT 49
31473: PUSH
31474: LD_INT 50
31476: PUSH
31477: LD_INT 51
31479: PUSH
31480: LD_INT 52
31482: PUSH
31483: LD_INT 53
31485: PUSH
31486: LD_INT 54
31488: PUSH
31489: LD_INT 55
31491: PUSH
31492: LD_INT 56
31494: PUSH
31495: LD_INT 60
31497: PUSH
31498: LD_INT 61
31500: PUSH
31501: LD_INT 62
31503: PUSH
31504: LD_INT 66
31506: PUSH
31507: LD_INT 67
31509: PUSH
31510: LD_INT 68
31512: PUSH
31513: LD_INT 81
31515: PUSH
31516: LD_INT 82
31518: PUSH
31519: LD_INT 83
31521: PUSH
31522: LD_INT 84
31524: PUSH
31525: LD_INT 85
31527: PUSH
31528: LD_INT 87
31530: PUSH
31531: LD_INT 88
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: ST_TO_ADDR
31590: GO 31823
31592: LD_INT 3
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31822
31600: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31601: LD_ADDR_VAR 0 4
31605: PUSH
31606: LD_INT 46
31608: PUSH
31609: LD_INT 47
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 82
31620: PUSH
31621: LD_INT 83
31623: PUSH
31624: LD_INT 84
31626: PUSH
31627: LD_INT 85
31629: PUSH
31630: LD_INT 86
31632: PUSH
31633: LD_INT 11
31635: PUSH
31636: LD_INT 9
31638: PUSH
31639: LD_INT 20
31641: PUSH
31642: LD_INT 19
31644: PUSH
31645: LD_INT 21
31647: PUSH
31648: LD_INT 24
31650: PUSH
31651: LD_INT 22
31653: PUSH
31654: LD_INT 25
31656: PUSH
31657: LD_INT 28
31659: PUSH
31660: LD_INT 29
31662: PUSH
31663: LD_INT 30
31665: PUSH
31666: LD_INT 31
31668: PUSH
31669: LD_INT 37
31671: PUSH
31672: LD_INT 38
31674: PUSH
31675: LD_INT 32
31677: PUSH
31678: LD_INT 27
31680: PUSH
31681: LD_INT 33
31683: PUSH
31684: LD_INT 69
31686: PUSH
31687: LD_INT 39
31689: PUSH
31690: LD_INT 34
31692: PUSH
31693: LD_INT 40
31695: PUSH
31696: LD_INT 71
31698: PUSH
31699: LD_INT 23
31701: PUSH
31702: LD_INT 44
31704: PUSH
31705: LD_INT 48
31707: PUSH
31708: LD_INT 49
31710: PUSH
31711: LD_INT 50
31713: PUSH
31714: LD_INT 51
31716: PUSH
31717: LD_INT 52
31719: PUSH
31720: LD_INT 53
31722: PUSH
31723: LD_INT 54
31725: PUSH
31726: LD_INT 55
31728: PUSH
31729: LD_INT 56
31731: PUSH
31732: LD_INT 57
31734: PUSH
31735: LD_INT 58
31737: PUSH
31738: LD_INT 59
31740: PUSH
31741: LD_INT 63
31743: PUSH
31744: LD_INT 64
31746: PUSH
31747: LD_INT 65
31749: PUSH
31750: LD_INT 82
31752: PUSH
31753: LD_INT 83
31755: PUSH
31756: LD_INT 84
31758: PUSH
31759: LD_INT 85
31761: PUSH
31762: LD_INT 86
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
31820: GO 31823
31822: POP
// if state > - 1 and state < 3 then
31823: LD_VAR 0 3
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: GREATER
31832: PUSH
31833: LD_VAR 0 3
31837: PUSH
31838: LD_INT 3
31840: LESS
31841: AND
31842: IFFALSE 31899
// for i in result do
31844: LD_ADDR_VAR 0 5
31848: PUSH
31849: LD_VAR 0 4
31853: PUSH
31854: FOR_IN
31855: IFFALSE 31897
// if GetTech ( i , side ) <> state then
31857: LD_VAR 0 5
31861: PPUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: CALL_OW 321
31871: PUSH
31872: LD_VAR 0 3
31876: NONEQUAL
31877: IFFALSE 31895
// result := result diff i ;
31879: LD_ADDR_VAR 0 4
31883: PUSH
31884: LD_VAR 0 4
31888: PUSH
31889: LD_VAR 0 5
31893: DIFF
31894: ST_TO_ADDR
31895: GO 31854
31897: POP
31898: POP
// end ;
31899: LD_VAR 0 4
31903: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
// result := true ;
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 1
31916: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31917: LD_ADDR_VAR 0 5
31921: PUSH
31922: LD_VAR 0 2
31926: PPUSH
31927: CALL_OW 480
31931: ST_TO_ADDR
// if not tmp then
31932: LD_VAR 0 5
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 31990
// for i in tmp do
31941: LD_ADDR_VAR 0 4
31945: PUSH
31946: LD_VAR 0 5
31950: PUSH
31951: FOR_IN
31952: IFFALSE 31988
// if GetTech ( i , side ) <> state_researched then
31954: LD_VAR 0 4
31958: PPUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: CALL_OW 321
31968: PUSH
31969: LD_INT 2
31971: NONEQUAL
31972: IFFALSE 31986
// begin result := false ;
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_INT 0
31981: ST_TO_ADDR
// exit ;
31982: POP
31983: POP
31984: GO 31990
// end ;
31986: GO 31951
31988: POP
31989: POP
// end ;
31990: LD_VAR 0 3
31994: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31995: LD_INT 0
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32010: LD_VAR 0 1
32014: NOT
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 257
32025: PUSH
32026: LD_INT 9
32028: NONEQUAL
32029: OR
32030: IFFALSE 32034
// exit ;
32032: GO 32607
// side := GetSide ( unit ) ;
32034: LD_ADDR_VAR 0 9
32038: PUSH
32039: LD_VAR 0 1
32043: PPUSH
32044: CALL_OW 255
32048: ST_TO_ADDR
// tech_space := tech_spacanom ;
32049: LD_ADDR_VAR 0 12
32053: PUSH
32054: LD_INT 29
32056: ST_TO_ADDR
// tech_time := tech_taurad ;
32057: LD_ADDR_VAR 0 13
32061: PUSH
32062: LD_INT 28
32064: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32065: LD_ADDR_VAR 0 11
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: CALL_OW 310
32079: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32080: LD_VAR 0 11
32084: PPUSH
32085: CALL_OW 247
32089: PUSH
32090: LD_INT 2
32092: EQUAL
32093: IFFALSE 32097
// exit ;
32095: GO 32607
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32097: LD_ADDR_VAR 0 8
32101: PUSH
32102: LD_INT 81
32104: PUSH
32105: LD_VAR 0 9
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 21
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: ST_TO_ADDR
// if not tmp then
32140: LD_VAR 0 8
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32607
// if in_unit then
32149: LD_VAR 0 11
32153: IFFALSE 32177
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32155: LD_ADDR_VAR 0 10
32159: PUSH
32160: LD_VAR 0 8
32164: PPUSH
32165: LD_VAR 0 11
32169: PPUSH
32170: CALL_OW 74
32174: ST_TO_ADDR
32175: GO 32197
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32177: LD_ADDR_VAR 0 10
32181: PUSH
32182: LD_VAR 0 8
32186: PPUSH
32187: LD_VAR 0 1
32191: PPUSH
32192: CALL_OW 74
32196: ST_TO_ADDR
// if not enemy then
32197: LD_VAR 0 10
32201: NOT
32202: IFFALSE 32206
// exit ;
32204: GO 32607
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32206: LD_VAR 0 11
32210: PUSH
32211: LD_VAR 0 11
32215: PPUSH
32216: LD_VAR 0 10
32220: PPUSH
32221: CALL_OW 296
32225: PUSH
32226: LD_INT 13
32228: GREATER
32229: AND
32230: PUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: LD_VAR 0 10
32240: PPUSH
32241: CALL_OW 296
32245: PUSH
32246: LD_INT 12
32248: GREATER
32249: OR
32250: IFFALSE 32254
// exit ;
32252: GO 32607
// missile := [ 1 ] ;
32254: LD_ADDR_VAR 0 14
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32265: LD_VAR 0 9
32269: PPUSH
32270: LD_VAR 0 12
32274: PPUSH
32275: CALL_OW 325
32279: IFFALSE 32308
// missile := Replace ( missile , missile + 1 , 2 ) ;
32281: LD_ADDR_VAR 0 14
32285: PUSH
32286: LD_VAR 0 14
32290: PPUSH
32291: LD_VAR 0 14
32295: PUSH
32296: LD_INT 1
32298: PLUS
32299: PPUSH
32300: LD_INT 2
32302: PPUSH
32303: CALL_OW 1
32307: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32308: LD_VAR 0 9
32312: PPUSH
32313: LD_VAR 0 13
32317: PPUSH
32318: CALL_OW 325
32322: PUSH
32323: LD_VAR 0 10
32327: PPUSH
32328: CALL_OW 255
32332: PPUSH
32333: LD_VAR 0 13
32337: PPUSH
32338: CALL_OW 325
32342: NOT
32343: AND
32344: IFFALSE 32373
// missile := Replace ( missile , missile + 1 , 3 ) ;
32346: LD_ADDR_VAR 0 14
32350: PUSH
32351: LD_VAR 0 14
32355: PPUSH
32356: LD_VAR 0 14
32360: PUSH
32361: LD_INT 1
32363: PLUS
32364: PPUSH
32365: LD_INT 3
32367: PPUSH
32368: CALL_OW 1
32372: ST_TO_ADDR
// if missile < 2 then
32373: LD_VAR 0 14
32377: PUSH
32378: LD_INT 2
32380: LESS
32381: IFFALSE 32385
// exit ;
32383: GO 32607
// x := GetX ( enemy ) ;
32385: LD_ADDR_VAR 0 4
32389: PUSH
32390: LD_VAR 0 10
32394: PPUSH
32395: CALL_OW 250
32399: ST_TO_ADDR
// y := GetY ( enemy ) ;
32400: LD_ADDR_VAR 0 5
32404: PUSH
32405: LD_VAR 0 10
32409: PPUSH
32410: CALL_OW 251
32414: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32415: LD_ADDR_VAR 0 6
32419: PUSH
32420: LD_VAR 0 4
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PPUSH
32429: LD_INT 1
32431: PPUSH
32432: CALL_OW 12
32436: PLUS
32437: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32438: LD_ADDR_VAR 0 7
32442: PUSH
32443: LD_VAR 0 5
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PPUSH
32452: LD_INT 1
32454: PPUSH
32455: CALL_OW 12
32459: PLUS
32460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32461: LD_VAR 0 6
32465: PPUSH
32466: LD_VAR 0 7
32470: PPUSH
32471: CALL_OW 488
32475: NOT
32476: IFFALSE 32498
// begin _x := x ;
32478: LD_ADDR_VAR 0 6
32482: PUSH
32483: LD_VAR 0 4
32487: ST_TO_ADDR
// _y := y ;
32488: LD_ADDR_VAR 0 7
32492: PUSH
32493: LD_VAR 0 5
32497: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_INT 1
32505: PPUSH
32506: LD_VAR 0 14
32510: PPUSH
32511: CALL_OW 12
32515: ST_TO_ADDR
// case i of 1 :
32516: LD_VAR 0 3
32520: PUSH
32521: LD_INT 1
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32546
32529: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32530: LD_VAR 0 1
32534: PPUSH
32535: LD_VAR 0 10
32539: PPUSH
32540: CALL_OW 115
32544: GO 32607
32546: LD_INT 2
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32576
32554: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32555: LD_VAR 0 1
32559: PPUSH
32560: LD_VAR 0 6
32564: PPUSH
32565: LD_VAR 0 7
32569: PPUSH
32570: CALL_OW 153
32574: GO 32607
32576: LD_INT 3
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32606
32584: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32585: LD_VAR 0 1
32589: PPUSH
32590: LD_VAR 0 6
32594: PPUSH
32595: LD_VAR 0 7
32599: PPUSH
32600: CALL_OW 154
32604: GO 32607
32606: POP
// end ;
32607: LD_VAR 0 2
32611: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32612: LD_INT 0
32614: PPUSH
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
// if not unit or not building then
32620: LD_VAR 0 1
32624: NOT
32625: PUSH
32626: LD_VAR 0 2
32630: NOT
32631: OR
32632: IFFALSE 32636
// exit ;
32634: GO 32794
// x := GetX ( building ) ;
32636: LD_ADDR_VAR 0 5
32640: PUSH
32641: LD_VAR 0 2
32645: PPUSH
32646: CALL_OW 250
32650: ST_TO_ADDR
// y := GetY ( building ) ;
32651: LD_ADDR_VAR 0 6
32655: PUSH
32656: LD_VAR 0 2
32660: PPUSH
32661: CALL_OW 251
32665: ST_TO_ADDR
// for i = 0 to 5 do
32666: LD_ADDR_VAR 0 4
32670: PUSH
32671: DOUBLE
32672: LD_INT 0
32674: DEC
32675: ST_TO_ADDR
32676: LD_INT 5
32678: PUSH
32679: FOR_TO
32680: IFFALSE 32792
// begin _x := ShiftX ( x , i , 3 ) ;
32682: LD_ADDR_VAR 0 7
32686: PUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: LD_VAR 0 4
32696: PPUSH
32697: LD_INT 3
32699: PPUSH
32700: CALL_OW 272
32704: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32705: LD_ADDR_VAR 0 8
32709: PUSH
32710: LD_VAR 0 6
32714: PPUSH
32715: LD_VAR 0 4
32719: PPUSH
32720: LD_INT 3
32722: PPUSH
32723: CALL_OW 273
32727: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32728: LD_VAR 0 7
32732: PPUSH
32733: LD_VAR 0 8
32737: PPUSH
32738: CALL_OW 488
32742: NOT
32743: IFFALSE 32747
// continue ;
32745: GO 32679
// if HexInfo ( _x , _y ) = 0 then
32747: LD_VAR 0 7
32751: PPUSH
32752: LD_VAR 0 8
32756: PPUSH
32757: CALL_OW 428
32761: PUSH
32762: LD_INT 0
32764: EQUAL
32765: IFFALSE 32790
// begin ComMoveXY ( unit , _x , _y ) ;
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 7
32776: PPUSH
32777: LD_VAR 0 8
32781: PPUSH
32782: CALL_OW 111
// exit ;
32786: POP
32787: POP
32788: GO 32794
// end ; end ;
32790: GO 32679
32792: POP
32793: POP
// end ;
32794: LD_VAR 0 3
32798: RET
// export function ScanBase ( side , base_area ) ; begin
32799: LD_INT 0
32801: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_VAR 0 2
32811: PPUSH
32812: LD_INT 81
32814: PUSH
32815: LD_VAR 0 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PPUSH
32824: CALL_OW 70
32828: ST_TO_ADDR
// end ;
32829: LD_VAR 0 3
32833: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32834: LD_INT 0
32836: PPUSH
32837: PPUSH
32838: PPUSH
32839: PPUSH
// result := false ;
32840: LD_ADDR_VAR 0 2
32844: PUSH
32845: LD_INT 0
32847: ST_TO_ADDR
// side := GetSide ( unit ) ;
32848: LD_ADDR_VAR 0 3
32852: PUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 255
32862: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32863: LD_ADDR_VAR 0 4
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 248
32877: ST_TO_ADDR
// case nat of 1 :
32878: LD_VAR 0 4
32882: PUSH
32883: LD_INT 1
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32891
32889: GO 32902
32891: POP
// tech := tech_lassight ; 2 :
32892: LD_ADDR_VAR 0 5
32896: PUSH
32897: LD_INT 12
32899: ST_TO_ADDR
32900: GO 32941
32902: LD_INT 2
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32921
32910: POP
// tech := tech_mortar ; 3 :
32911: LD_ADDR_VAR 0 5
32915: PUSH
32916: LD_INT 41
32918: ST_TO_ADDR
32919: GO 32941
32921: LD_INT 3
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32940
32929: POP
// tech := tech_bazooka ; end ;
32930: LD_ADDR_VAR 0 5
32934: PUSH
32935: LD_INT 44
32937: ST_TO_ADDR
32938: GO 32941
32940: POP
// if Researched ( side , tech ) then
32941: LD_VAR 0 3
32945: PPUSH
32946: LD_VAR 0 5
32950: PPUSH
32951: CALL_OW 325
32955: IFFALSE 32982
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32957: LD_ADDR_VAR 0 2
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: LD_INT 8
32967: PUSH
32968: LD_INT 9
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: LD_VAR 0 4
32980: ARRAY
32981: ST_TO_ADDR
// end ;
32982: LD_VAR 0 2
32986: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32987: LD_INT 0
32989: PPUSH
32990: PPUSH
32991: PPUSH
// if not mines then
32992: LD_VAR 0 2
32996: NOT
32997: IFFALSE 33001
// exit ;
32999: GO 33145
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33001: LD_ADDR_VAR 0 5
33005: PUSH
33006: LD_INT 81
33008: PUSH
33009: LD_VAR 0 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: PUSH
33021: LD_INT 21
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 69
33043: ST_TO_ADDR
// for i in mines do
33044: LD_ADDR_VAR 0 4
33048: PUSH
33049: LD_VAR 0 2
33053: PUSH
33054: FOR_IN
33055: IFFALSE 33143
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33057: LD_VAR 0 4
33061: PUSH
33062: LD_INT 1
33064: ARRAY
33065: PPUSH
33066: LD_VAR 0 4
33070: PUSH
33071: LD_INT 2
33073: ARRAY
33074: PPUSH
33075: CALL_OW 458
33079: NOT
33080: IFFALSE 33084
// continue ;
33082: GO 33054
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33084: LD_VAR 0 4
33088: PUSH
33089: LD_INT 1
33091: ARRAY
33092: PPUSH
33093: LD_VAR 0 4
33097: PUSH
33098: LD_INT 2
33100: ARRAY
33101: PPUSH
33102: CALL_OW 428
33106: PUSH
33107: LD_VAR 0 5
33111: IN
33112: IFFALSE 33141
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33114: LD_VAR 0 4
33118: PUSH
33119: LD_INT 1
33121: ARRAY
33122: PPUSH
33123: LD_VAR 0 4
33127: PUSH
33128: LD_INT 2
33130: ARRAY
33131: PPUSH
33132: LD_VAR 0 1
33136: PPUSH
33137: CALL_OW 456
// end ;
33141: GO 33054
33143: POP
33144: POP
// end ;
33145: LD_VAR 0 3
33149: RET
// export function Count ( array ) ; var i ; begin
33150: LD_INT 0
33152: PPUSH
33153: PPUSH
// result := 0 ;
33154: LD_ADDR_VAR 0 2
33158: PUSH
33159: LD_INT 0
33161: ST_TO_ADDR
// for i in array do
33162: LD_ADDR_VAR 0 3
33166: PUSH
33167: LD_VAR 0 1
33171: PUSH
33172: FOR_IN
33173: IFFALSE 33197
// if i then
33175: LD_VAR 0 3
33179: IFFALSE 33195
// result := result + 1 ;
33181: LD_ADDR_VAR 0 2
33185: PUSH
33186: LD_VAR 0 2
33190: PUSH
33191: LD_INT 1
33193: PLUS
33194: ST_TO_ADDR
33195: GO 33172
33197: POP
33198: POP
// end ;
33199: LD_VAR 0 2
33203: RET
// export function IsEmpty ( building ) ; begin
33204: LD_INT 0
33206: PPUSH
// if not building then
33207: LD_VAR 0 1
33211: NOT
33212: IFFALSE 33216
// exit ;
33214: GO 33259
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33216: LD_ADDR_VAR 0 2
33220: PUSH
33221: LD_VAR 0 1
33225: PUSH
33226: LD_INT 22
33228: PUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 255
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 58
33245: PUSH
33246: EMPTY
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PPUSH
33253: CALL_OW 69
33257: IN
33258: ST_TO_ADDR
// end ;
33259: LD_VAR 0 2
33263: RET
// export function IsNotFull ( building ) ; var places ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
// if not building then
33268: LD_VAR 0 1
33272: NOT
33273: IFFALSE 33277
// exit ;
33275: GO 33448
// result := false ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_INT 0
33284: ST_TO_ADDR
// places := 0 ;
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_INT 0
33292: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 266
33302: PUSH
33303: LD_INT 0
33305: DOUBLE
33306: EQUAL
33307: IFTRUE 33365
33309: LD_INT 1
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33365
33315: LD_INT 6
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33365
33321: LD_INT 7
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33365
33327: LD_INT 8
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33365
33333: LD_INT 4
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33365
33339: LD_INT 5
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33365
33345: LD_INT 2
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33365
33351: LD_INT 3
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33365
33357: LD_INT 35
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33376
33365: POP
// places := 6 ; b_bunker , b_breastwork :
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_INT 6
33373: ST_TO_ADDR
33374: GO 33421
33376: LD_INT 32
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33390
33382: LD_INT 31
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33401
33390: POP
// places := 1 ; b_control_tower :
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 1
33398: ST_TO_ADDR
33399: GO 33421
33401: LD_INT 36
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33420
33409: POP
// places := 3 ; end ;
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_INT 3
33417: ST_TO_ADDR
33418: GO 33421
33420: POP
// if places then
33421: LD_VAR 0 3
33425: IFFALSE 33448
// result := UnitsInside ( building ) < places ;
33427: LD_ADDR_VAR 0 2
33431: PUSH
33432: LD_VAR 0 1
33436: PPUSH
33437: CALL_OW 313
33441: PUSH
33442: LD_VAR 0 3
33446: LESS
33447: ST_TO_ADDR
// end ;
33448: LD_VAR 0 2
33452: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
// tmp := [ ] ;
33459: LD_ADDR_VAR 0 3
33463: PUSH
33464: EMPTY
33465: ST_TO_ADDR
// list := [ ] ;
33466: LD_ADDR_VAR 0 5
33470: PUSH
33471: EMPTY
33472: ST_TO_ADDR
// for i = 16 to 25 do
33473: LD_ADDR_VAR 0 4
33477: PUSH
33478: DOUBLE
33479: LD_INT 16
33481: DEC
33482: ST_TO_ADDR
33483: LD_INT 25
33485: PUSH
33486: FOR_TO
33487: IFFALSE 33560
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_VAR 0 3
33498: PUSH
33499: LD_INT 22
33501: PUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 255
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 91
33518: PUSH
33519: LD_VAR 0 1
33523: PUSH
33524: LD_INT 6
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 30
33534: PUSH
33535: LD_VAR 0 4
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: PPUSH
33552: CALL_OW 69
33556: ADD
33557: ST_TO_ADDR
33558: GO 33486
33560: POP
33561: POP
// for i = 1 to tmp do
33562: LD_ADDR_VAR 0 4
33566: PUSH
33567: DOUBLE
33568: LD_INT 1
33570: DEC
33571: ST_TO_ADDR
33572: LD_VAR 0 3
33576: PUSH
33577: FOR_TO
33578: IFFALSE 33666
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33580: LD_ADDR_VAR 0 5
33584: PUSH
33585: LD_VAR 0 5
33589: PUSH
33590: LD_VAR 0 3
33594: PUSH
33595: LD_VAR 0 4
33599: ARRAY
33600: PPUSH
33601: CALL_OW 266
33605: PUSH
33606: LD_VAR 0 3
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: PPUSH
33617: CALL_OW 250
33621: PUSH
33622: LD_VAR 0 3
33626: PUSH
33627: LD_VAR 0 4
33631: ARRAY
33632: PPUSH
33633: CALL_OW 251
33637: PUSH
33638: LD_VAR 0 3
33642: PUSH
33643: LD_VAR 0 4
33647: ARRAY
33648: PPUSH
33649: CALL_OW 254
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: ADD
33663: ST_TO_ADDR
33664: GO 33577
33666: POP
33667: POP
// result := list ;
33668: LD_ADDR_VAR 0 2
33672: PUSH
33673: LD_VAR 0 5
33677: ST_TO_ADDR
// end ;
33678: LD_VAR 0 2
33682: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33683: LD_INT 0
33685: PPUSH
33686: PPUSH
33687: PPUSH
33688: PPUSH
33689: PPUSH
33690: PPUSH
33691: PPUSH
// if not factory then
33692: LD_VAR 0 1
33696: NOT
33697: IFFALSE 33701
// exit ;
33699: GO 34294
// if control = control_apeman then
33701: LD_VAR 0 4
33705: PUSH
33706: LD_INT 5
33708: EQUAL
33709: IFFALSE 33818
// begin tmp := UnitsInside ( factory ) ;
33711: LD_ADDR_VAR 0 8
33715: PUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 313
33725: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33726: LD_VAR 0 8
33730: PPUSH
33731: LD_INT 25
33733: PUSH
33734: LD_INT 12
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PPUSH
33741: CALL_OW 72
33745: NOT
33746: IFFALSE 33756
// control := control_manual ;
33748: LD_ADDR_VAR 0 4
33752: PUSH
33753: LD_INT 1
33755: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33756: LD_ADDR_VAR 0 8
33760: PUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL 33453 0 1
33770: ST_TO_ADDR
// if tmp then
33771: LD_VAR 0 8
33775: IFFALSE 33818
// begin for i in tmp do
33777: LD_ADDR_VAR 0 7
33781: PUSH
33782: LD_VAR 0 8
33786: PUSH
33787: FOR_IN
33788: IFFALSE 33816
// if i [ 1 ] = b_ext_radio then
33790: LD_VAR 0 7
33794: PUSH
33795: LD_INT 1
33797: ARRAY
33798: PUSH
33799: LD_INT 22
33801: EQUAL
33802: IFFALSE 33814
// begin control := control_remote ;
33804: LD_ADDR_VAR 0 4
33808: PUSH
33809: LD_INT 2
33811: ST_TO_ADDR
// break ;
33812: GO 33816
// end ;
33814: GO 33787
33816: POP
33817: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33818: LD_VAR 0 1
33822: PPUSH
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: LD_VAR 0 4
33837: PPUSH
33838: LD_VAR 0 5
33842: PPUSH
33843: CALL_OW 448
33847: IFFALSE 33882
// begin result := [ chassis , engine , control , weapon ] ;
33849: LD_ADDR_VAR 0 6
33853: PUSH
33854: LD_VAR 0 2
33858: PUSH
33859: LD_VAR 0 3
33863: PUSH
33864: LD_VAR 0 4
33868: PUSH
33869: LD_VAR 0 5
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// exit ;
33880: GO 34294
// end ; _chassis := AvailableChassisList ( factory ) ;
33882: LD_ADDR_VAR 0 9
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 475
33896: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33897: LD_ADDR_VAR 0 11
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 476
33911: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33912: LD_ADDR_VAR 0 12
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 477
33926: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33927: LD_ADDR_VAR 0 10
33931: PUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 478
33941: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33942: LD_VAR 0 9
33946: NOT
33947: PUSH
33948: LD_VAR 0 11
33952: NOT
33953: OR
33954: PUSH
33955: LD_VAR 0 12
33959: NOT
33960: OR
33961: PUSH
33962: LD_VAR 0 10
33966: NOT
33967: OR
33968: IFFALSE 34003
// begin result := [ chassis , engine , control , weapon ] ;
33970: LD_ADDR_VAR 0 6
33974: PUSH
33975: LD_VAR 0 2
33979: PUSH
33980: LD_VAR 0 3
33984: PUSH
33985: LD_VAR 0 4
33989: PUSH
33990: LD_VAR 0 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: ST_TO_ADDR
// exit ;
34001: GO 34294
// end ; if not chassis in _chassis then
34003: LD_VAR 0 2
34007: PUSH
34008: LD_VAR 0 9
34012: IN
34013: NOT
34014: IFFALSE 34040
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34016: LD_ADDR_VAR 0 2
34020: PUSH
34021: LD_VAR 0 9
34025: PUSH
34026: LD_INT 1
34028: PPUSH
34029: LD_VAR 0 9
34033: PPUSH
34034: CALL_OW 12
34038: ARRAY
34039: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34040: LD_VAR 0 2
34044: PPUSH
34045: LD_VAR 0 3
34049: PPUSH
34050: CALL 34299 0 2
34054: NOT
34055: IFFALSE 34114
// repeat engine := _engine [ 1 ] ;
34057: LD_ADDR_VAR 0 3
34061: PUSH
34062: LD_VAR 0 11
34066: PUSH
34067: LD_INT 1
34069: ARRAY
34070: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34071: LD_ADDR_VAR 0 11
34075: PUSH
34076: LD_VAR 0 11
34080: PPUSH
34081: LD_INT 1
34083: PPUSH
34084: CALL_OW 3
34088: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34089: LD_VAR 0 2
34093: PPUSH
34094: LD_VAR 0 3
34098: PPUSH
34099: CALL 34299 0 2
34103: PUSH
34104: LD_VAR 0 11
34108: PUSH
34109: EMPTY
34110: EQUAL
34111: OR
34112: IFFALSE 34057
// if not control in _control then
34114: LD_VAR 0 4
34118: PUSH
34119: LD_VAR 0 12
34123: IN
34124: NOT
34125: IFFALSE 34151
// control := _control [ rand ( 1 , _control ) ] ;
34127: LD_ADDR_VAR 0 4
34131: PUSH
34132: LD_VAR 0 12
34136: PUSH
34137: LD_INT 1
34139: PPUSH
34140: LD_VAR 0 12
34144: PPUSH
34145: CALL_OW 12
34149: ARRAY
34150: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: CALL 34519 0 2
34165: NOT
34166: IFFALSE 34225
// repeat weapon := _weapon [ 1 ] ;
34168: LD_ADDR_VAR 0 5
34172: PUSH
34173: LD_VAR 0 10
34177: PUSH
34178: LD_INT 1
34180: ARRAY
34181: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34182: LD_ADDR_VAR 0 10
34186: PUSH
34187: LD_VAR 0 10
34191: PPUSH
34192: LD_INT 1
34194: PPUSH
34195: CALL_OW 3
34199: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34200: LD_VAR 0 2
34204: PPUSH
34205: LD_VAR 0 5
34209: PPUSH
34210: CALL 34519 0 2
34214: PUSH
34215: LD_VAR 0 10
34219: PUSH
34220: EMPTY
34221: EQUAL
34222: OR
34223: IFFALSE 34168
// result := [ ] ;
34225: LD_ADDR_VAR 0 6
34229: PUSH
34230: EMPTY
34231: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34232: LD_VAR 0 1
34236: PPUSH
34237: LD_VAR 0 2
34241: PPUSH
34242: LD_VAR 0 3
34246: PPUSH
34247: LD_VAR 0 4
34251: PPUSH
34252: LD_VAR 0 5
34256: PPUSH
34257: CALL_OW 448
34261: IFFALSE 34294
// result := [ chassis , engine , control , weapon ] ;
34263: LD_ADDR_VAR 0 6
34267: PUSH
34268: LD_VAR 0 2
34272: PUSH
34273: LD_VAR 0 3
34277: PUSH
34278: LD_VAR 0 4
34282: PUSH
34283: LD_VAR 0 5
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// end ;
34294: LD_VAR 0 6
34298: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34299: LD_INT 0
34301: PPUSH
// if not chassis or not engine then
34302: LD_VAR 0 1
34306: NOT
34307: PUSH
34308: LD_VAR 0 2
34312: NOT
34313: OR
34314: IFFALSE 34318
// exit ;
34316: GO 34514
// case engine of engine_solar :
34318: LD_VAR 0 2
34322: PUSH
34323: LD_INT 2
34325: DOUBLE
34326: EQUAL
34327: IFTRUE 34331
34329: GO 34369
34331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 11
34339: PUSH
34340: LD_INT 12
34342: PUSH
34343: LD_INT 13
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: ST_TO_ADDR
34367: GO 34498
34369: LD_INT 1
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34377
34375: GO 34439
34377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34378: LD_ADDR_VAR 0 3
34382: PUSH
34383: LD_INT 11
34385: PUSH
34386: LD_INT 12
34388: PUSH
34389: LD_INT 13
34391: PUSH
34392: LD_INT 14
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 4
34406: PUSH
34407: LD_INT 5
34409: PUSH
34410: LD_INT 21
34412: PUSH
34413: LD_INT 23
34415: PUSH
34416: LD_INT 22
34418: PUSH
34419: LD_INT 24
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
34437: GO 34498
34439: LD_INT 3
34441: DOUBLE
34442: EQUAL
34443: IFTRUE 34447
34445: GO 34497
34447: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: LD_INT 13
34455: PUSH
34456: LD_INT 14
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 5
34470: PUSH
34471: LD_INT 21
34473: PUSH
34474: LD_INT 22
34476: PUSH
34477: LD_INT 23
34479: PUSH
34480: LD_INT 24
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
34495: GO 34498
34497: POP
// result := ( chassis in result ) ;
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_VAR 0 1
34507: PUSH
34508: LD_VAR 0 3
34512: IN
34513: ST_TO_ADDR
// end ;
34514: LD_VAR 0 3
34518: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34519: LD_INT 0
34521: PPUSH
// if not chassis or not weapon then
34522: LD_VAR 0 1
34526: NOT
34527: PUSH
34528: LD_VAR 0 2
34532: NOT
34533: OR
34534: IFFALSE 34538
// exit ;
34536: GO 35598
// case weapon of us_machine_gun :
34538: LD_VAR 0 2
34542: PUSH
34543: LD_INT 2
34545: DOUBLE
34546: EQUAL
34547: IFTRUE 34551
34549: GO 34581
34551: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34552: LD_ADDR_VAR 0 3
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: LD_INT 5
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
34579: GO 35582
34581: LD_INT 3
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34589
34587: GO 34619
34589: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: LD_INT 4
34606: PUSH
34607: LD_INT 5
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 35582
34619: LD_INT 11
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34657
34627: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: LD_INT 5
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: ST_TO_ADDR
34655: GO 35582
34657: LD_INT 4
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34691
34665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: LD_INT 5
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: ST_TO_ADDR
34689: GO 35582
34691: LD_INT 5
34693: DOUBLE
34694: EQUAL
34695: IFTRUE 34699
34697: GO 34725
34699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34700: LD_ADDR_VAR 0 3
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: LD_INT 4
34713: PUSH
34714: LD_INT 5
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: ST_TO_ADDR
34723: GO 35582
34725: LD_INT 9
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34759
34733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34734: LD_ADDR_VAR 0 3
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 4
34747: PUSH
34748: LD_INT 5
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
34757: GO 35582
34759: LD_INT 7
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34793
34767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 4
34781: PUSH
34782: LD_INT 5
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: ST_TO_ADDR
34791: GO 35582
34793: LD_INT 12
34795: DOUBLE
34796: EQUAL
34797: IFTRUE 34801
34799: GO 34827
34801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: LD_INT 4
34815: PUSH
34816: LD_INT 5
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: ST_TO_ADDR
34825: GO 35582
34827: LD_INT 13
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34861
34835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 5
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
34859: GO 35582
34861: LD_INT 14
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34869
34867: GO 34887
34869: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: ST_TO_ADDR
34885: GO 35582
34887: LD_INT 6
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34913
34895: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34896: LD_ADDR_VAR 0 3
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: LD_INT 5
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: ST_TO_ADDR
34911: GO 35582
34913: LD_INT 10
34915: DOUBLE
34916: EQUAL
34917: IFTRUE 34921
34919: GO 34939
34921: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34922: LD_ADDR_VAR 0 3
34926: PUSH
34927: LD_INT 4
34929: PUSH
34930: LD_INT 5
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: ST_TO_ADDR
34937: GO 35582
34939: LD_INT 22
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34973
34947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34948: LD_ADDR_VAR 0 3
34952: PUSH
34953: LD_INT 11
34955: PUSH
34956: LD_INT 12
34958: PUSH
34959: LD_INT 13
34961: PUSH
34962: LD_INT 14
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: ST_TO_ADDR
34971: GO 35582
34973: LD_INT 23
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 34981
34979: GO 35007
34981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: LD_INT 11
34989: PUSH
34990: LD_INT 12
34992: PUSH
34993: LD_INT 13
34995: PUSH
34996: LD_INT 14
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: ST_TO_ADDR
35005: GO 35582
35007: LD_INT 24
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35041
35015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 11
35023: PUSH
35024: LD_INT 12
35026: PUSH
35027: LD_INT 13
35029: PUSH
35030: LD_INT 14
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
35039: GO 35582
35041: LD_INT 30
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35075
35049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_INT 11
35057: PUSH
35058: LD_INT 12
35060: PUSH
35061: LD_INT 13
35063: PUSH
35064: LD_INT 14
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
35073: GO 35582
35075: LD_INT 25
35077: DOUBLE
35078: EQUAL
35079: IFTRUE 35083
35081: GO 35101
35083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_INT 13
35091: PUSH
35092: LD_INT 14
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: ST_TO_ADDR
35099: GO 35582
35101: LD_INT 27
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35127
35109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 13
35117: PUSH
35118: LD_INT 14
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: ST_TO_ADDR
35125: GO 35582
35127: LD_INT 92
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35135
35133: GO 35161
35135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: LD_INT 11
35143: PUSH
35144: LD_INT 12
35146: PUSH
35147: LD_INT 13
35149: PUSH
35150: LD_INT 14
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
35159: GO 35582
35161: LD_INT 28
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35187
35169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35170: LD_ADDR_VAR 0 3
35174: PUSH
35175: LD_INT 13
35177: PUSH
35178: LD_INT 14
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: ST_TO_ADDR
35185: GO 35582
35187: LD_INT 29
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35195
35193: GO 35213
35195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35196: LD_ADDR_VAR 0 3
35200: PUSH
35201: LD_INT 13
35203: PUSH
35204: LD_INT 14
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: ST_TO_ADDR
35211: GO 35582
35213: LD_INT 31
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35221
35219: GO 35239
35221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35222: LD_ADDR_VAR 0 3
35226: PUSH
35227: LD_INT 13
35229: PUSH
35230: LD_INT 14
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: ST_TO_ADDR
35237: GO 35582
35239: LD_INT 26
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35247
35245: GO 35265
35247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35248: LD_ADDR_VAR 0 3
35252: PUSH
35253: LD_INT 13
35255: PUSH
35256: LD_INT 14
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 35582
35265: LD_INT 42
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35299
35273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 21
35281: PUSH
35282: LD_INT 22
35284: PUSH
35285: LD_INT 23
35287: PUSH
35288: LD_INT 24
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
35297: GO 35582
35299: LD_INT 43
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35333
35307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35308: LD_ADDR_VAR 0 3
35312: PUSH
35313: LD_INT 21
35315: PUSH
35316: LD_INT 22
35318: PUSH
35319: LD_INT 23
35321: PUSH
35322: LD_INT 24
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
35331: GO 35582
35333: LD_INT 44
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35367
35341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 21
35349: PUSH
35350: LD_INT 22
35352: PUSH
35353: LD_INT 23
35355: PUSH
35356: LD_INT 24
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
35365: GO 35582
35367: LD_INT 45
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35401
35375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35376: LD_ADDR_VAR 0 3
35380: PUSH
35381: LD_INT 21
35383: PUSH
35384: LD_INT 22
35386: PUSH
35387: LD_INT 23
35389: PUSH
35390: LD_INT 24
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
35399: GO 35582
35401: LD_INT 49
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35435
35409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 21
35417: PUSH
35418: LD_INT 22
35420: PUSH
35421: LD_INT 23
35423: PUSH
35424: LD_INT 24
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
35433: GO 35582
35435: LD_INT 51
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35443
35441: GO 35469
35443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35444: LD_ADDR_VAR 0 3
35448: PUSH
35449: LD_INT 21
35451: PUSH
35452: LD_INT 22
35454: PUSH
35455: LD_INT 23
35457: PUSH
35458: LD_INT 24
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: ST_TO_ADDR
35467: GO 35582
35469: LD_INT 52
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35503
35477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 21
35485: PUSH
35486: LD_INT 22
35488: PUSH
35489: LD_INT 23
35491: PUSH
35492: LD_INT 24
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: ST_TO_ADDR
35501: GO 35582
35503: LD_INT 53
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35511
35509: GO 35529
35511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35512: LD_ADDR_VAR 0 3
35516: PUSH
35517: LD_INT 23
35519: PUSH
35520: LD_INT 24
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: ST_TO_ADDR
35527: GO 35582
35529: LD_INT 46
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35555
35537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 23
35545: PUSH
35546: LD_INT 24
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: ST_TO_ADDR
35553: GO 35582
35555: LD_INT 47
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35581
35563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_INT 23
35571: PUSH
35572: LD_INT 24
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: ST_TO_ADDR
35579: GO 35582
35581: POP
// result := ( chassis in result ) ;
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_VAR 0 1
35591: PUSH
35592: LD_VAR 0 3
35596: IN
35597: ST_TO_ADDR
// end ;
35598: LD_VAR 0 3
35602: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
// result := array ;
35612: LD_ADDR_VAR 0 5
35616: PUSH
35617: LD_VAR 0 1
35621: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35622: LD_VAR 0 1
35626: NOT
35627: PUSH
35628: LD_VAR 0 2
35632: NOT
35633: OR
35634: PUSH
35635: LD_VAR 0 3
35639: NOT
35640: OR
35641: PUSH
35642: LD_VAR 0 2
35646: PUSH
35647: LD_VAR 0 1
35651: GREATER
35652: OR
35653: PUSH
35654: LD_VAR 0 3
35658: PUSH
35659: LD_VAR 0 1
35663: GREATER
35664: OR
35665: IFFALSE 35669
// exit ;
35667: GO 35965
// if direction then
35669: LD_VAR 0 4
35673: IFFALSE 35737
// begin d := 1 ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 1
35682: ST_TO_ADDR
// if i_from > i_to then
35683: LD_VAR 0 2
35687: PUSH
35688: LD_VAR 0 3
35692: GREATER
35693: IFFALSE 35719
// length := ( array - i_from ) + i_to else
35695: LD_ADDR_VAR 0 11
35699: PUSH
35700: LD_VAR 0 1
35704: PUSH
35705: LD_VAR 0 2
35709: MINUS
35710: PUSH
35711: LD_VAR 0 3
35715: PLUS
35716: ST_TO_ADDR
35717: GO 35735
// length := i_to - i_from ;
35719: LD_ADDR_VAR 0 11
35723: PUSH
35724: LD_VAR 0 3
35728: PUSH
35729: LD_VAR 0 2
35733: MINUS
35734: ST_TO_ADDR
// end else
35735: GO 35798
// begin d := - 1 ;
35737: LD_ADDR_VAR 0 9
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: ST_TO_ADDR
// if i_from > i_to then
35746: LD_VAR 0 2
35750: PUSH
35751: LD_VAR 0 3
35755: GREATER
35756: IFFALSE 35776
// length := i_from - i_to else
35758: LD_ADDR_VAR 0 11
35762: PUSH
35763: LD_VAR 0 2
35767: PUSH
35768: LD_VAR 0 3
35772: MINUS
35773: ST_TO_ADDR
35774: GO 35798
// length := ( array - i_to ) + i_from ;
35776: LD_ADDR_VAR 0 11
35780: PUSH
35781: LD_VAR 0 1
35785: PUSH
35786: LD_VAR 0 3
35790: MINUS
35791: PUSH
35792: LD_VAR 0 2
35796: PLUS
35797: ST_TO_ADDR
// end ; if not length then
35798: LD_VAR 0 11
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 35965
// tmp := array ;
35807: LD_ADDR_VAR 0 10
35811: PUSH
35812: LD_VAR 0 1
35816: ST_TO_ADDR
// for i = 1 to length do
35817: LD_ADDR_VAR 0 6
35821: PUSH
35822: DOUBLE
35823: LD_INT 1
35825: DEC
35826: ST_TO_ADDR
35827: LD_VAR 0 11
35831: PUSH
35832: FOR_TO
35833: IFFALSE 35953
// begin for j = 1 to array do
35835: LD_ADDR_VAR 0 7
35839: PUSH
35840: DOUBLE
35841: LD_INT 1
35843: DEC
35844: ST_TO_ADDR
35845: LD_VAR 0 1
35849: PUSH
35850: FOR_TO
35851: IFFALSE 35939
// begin k := j + d ;
35853: LD_ADDR_VAR 0 8
35857: PUSH
35858: LD_VAR 0 7
35862: PUSH
35863: LD_VAR 0 9
35867: PLUS
35868: ST_TO_ADDR
// if k > array then
35869: LD_VAR 0 8
35873: PUSH
35874: LD_VAR 0 1
35878: GREATER
35879: IFFALSE 35889
// k := 1 ;
35881: LD_ADDR_VAR 0 8
35885: PUSH
35886: LD_INT 1
35888: ST_TO_ADDR
// if not k then
35889: LD_VAR 0 8
35893: NOT
35894: IFFALSE 35906
// k := array ;
35896: LD_ADDR_VAR 0 8
35900: PUSH
35901: LD_VAR 0 1
35905: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35906: LD_ADDR_VAR 0 10
35910: PUSH
35911: LD_VAR 0 10
35915: PPUSH
35916: LD_VAR 0 8
35920: PPUSH
35921: LD_VAR 0 1
35925: PUSH
35926: LD_VAR 0 7
35930: ARRAY
35931: PPUSH
35932: CALL_OW 1
35936: ST_TO_ADDR
// end ;
35937: GO 35850
35939: POP
35940: POP
// array := tmp ;
35941: LD_ADDR_VAR 0 1
35945: PUSH
35946: LD_VAR 0 10
35950: ST_TO_ADDR
// end ;
35951: GO 35832
35953: POP
35954: POP
// result := array ;
35955: LD_ADDR_VAR 0 5
35959: PUSH
35960: LD_VAR 0 1
35964: ST_TO_ADDR
// end ;
35965: LD_VAR 0 5
35969: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35970: LD_INT 0
35972: PPUSH
35973: PPUSH
// result := 0 ;
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: LD_INT 0
35981: ST_TO_ADDR
// if not array or not value in array then
35982: LD_VAR 0 1
35986: NOT
35987: PUSH
35988: LD_VAR 0 2
35992: PUSH
35993: LD_VAR 0 1
35997: IN
35998: NOT
35999: OR
36000: IFFALSE 36004
// exit ;
36002: GO 36058
// for i = 1 to array do
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: DOUBLE
36010: LD_INT 1
36012: DEC
36013: ST_TO_ADDR
36014: LD_VAR 0 1
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36056
// if value = array [ i ] then
36022: LD_VAR 0 2
36026: PUSH
36027: LD_VAR 0 1
36031: PUSH
36032: LD_VAR 0 4
36036: ARRAY
36037: EQUAL
36038: IFFALSE 36054
// begin result := i ;
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_VAR 0 4
36049: ST_TO_ADDR
// exit ;
36050: POP
36051: POP
36052: GO 36058
// end ;
36054: GO 36019
36056: POP
36057: POP
// end ;
36058: LD_VAR 0 3
36062: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36063: LD_INT 0
36065: PPUSH
// vc_chassis := chassis ;
36066: LD_ADDR_OWVAR 37
36070: PUSH
36071: LD_VAR 0 1
36075: ST_TO_ADDR
// vc_engine := engine ;
36076: LD_ADDR_OWVAR 39
36080: PUSH
36081: LD_VAR 0 2
36085: ST_TO_ADDR
// vc_control := control ;
36086: LD_ADDR_OWVAR 38
36090: PUSH
36091: LD_VAR 0 3
36095: ST_TO_ADDR
// vc_weapon := weapon ;
36096: LD_ADDR_OWVAR 40
36100: PUSH
36101: LD_VAR 0 4
36105: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36106: LD_ADDR_OWVAR 41
36110: PUSH
36111: LD_VAR 0 5
36115: ST_TO_ADDR
// end ;
36116: LD_VAR 0 6
36120: RET
// export function WantPlant ( unit ) ; var task ; begin
36121: LD_INT 0
36123: PPUSH
36124: PPUSH
// result := false ;
36125: LD_ADDR_VAR 0 2
36129: PUSH
36130: LD_INT 0
36132: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36133: LD_ADDR_VAR 0 3
36137: PUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 437
36147: ST_TO_ADDR
// if task then
36148: LD_VAR 0 3
36152: IFFALSE 36180
// if task [ 1 ] [ 1 ] = p then
36154: LD_VAR 0 3
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: PUSH
36163: LD_INT 1
36165: ARRAY
36166: PUSH
36167: LD_STRING p
36169: EQUAL
36170: IFFALSE 36180
// result := true ;
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_INT 1
36179: ST_TO_ADDR
// end ;
36180: LD_VAR 0 2
36184: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36185: LD_INT 0
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
// if pos < 1 then
36191: LD_VAR 0 2
36195: PUSH
36196: LD_INT 1
36198: LESS
36199: IFFALSE 36203
// exit ;
36201: GO 36506
// if pos = 1 then
36203: LD_VAR 0 2
36207: PUSH
36208: LD_INT 1
36210: EQUAL
36211: IFFALSE 36244
// result := Replace ( arr , pos [ 1 ] , value ) else
36213: LD_ADDR_VAR 0 4
36217: PUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: LD_VAR 0 2
36227: PUSH
36228: LD_INT 1
36230: ARRAY
36231: PPUSH
36232: LD_VAR 0 3
36236: PPUSH
36237: CALL_OW 1
36241: ST_TO_ADDR
36242: GO 36506
// begin tmp := arr ;
36244: LD_ADDR_VAR 0 6
36248: PUSH
36249: LD_VAR 0 1
36253: ST_TO_ADDR
// s_arr := [ tmp ] ;
36254: LD_ADDR_VAR 0 7
36258: PUSH
36259: LD_VAR 0 6
36263: PUSH
36264: EMPTY
36265: LIST
36266: ST_TO_ADDR
// for i = 1 to pos - 1 do
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: DOUBLE
36273: LD_INT 1
36275: DEC
36276: ST_TO_ADDR
36277: LD_VAR 0 2
36281: PUSH
36282: LD_INT 1
36284: MINUS
36285: PUSH
36286: FOR_TO
36287: IFFALSE 36332
// begin tmp := tmp [ pos [ i ] ] ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: LD_VAR 0 6
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 5
36308: ARRAY
36309: ARRAY
36310: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36311: LD_ADDR_VAR 0 7
36315: PUSH
36316: LD_VAR 0 7
36320: PUSH
36321: LD_VAR 0 6
36325: PUSH
36326: EMPTY
36327: LIST
36328: ADD
36329: ST_TO_ADDR
// end ;
36330: GO 36286
36332: POP
36333: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36334: LD_ADDR_VAR 0 6
36338: PUSH
36339: LD_VAR 0 6
36343: PPUSH
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 2
36353: ARRAY
36354: PPUSH
36355: LD_VAR 0 3
36359: PPUSH
36360: CALL_OW 1
36364: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36365: LD_ADDR_VAR 0 7
36369: PUSH
36370: LD_VAR 0 7
36374: PPUSH
36375: LD_VAR 0 7
36379: PPUSH
36380: LD_VAR 0 6
36384: PPUSH
36385: CALL_OW 1
36389: ST_TO_ADDR
// for i = s_arr downto 2 do
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: DOUBLE
36396: LD_VAR 0 7
36400: INC
36401: ST_TO_ADDR
36402: LD_INT 2
36404: PUSH
36405: FOR_DOWNTO
36406: IFFALSE 36490
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36408: LD_ADDR_VAR 0 6
36412: PUSH
36413: LD_VAR 0 7
36417: PUSH
36418: LD_VAR 0 5
36422: PUSH
36423: LD_INT 1
36425: MINUS
36426: ARRAY
36427: PPUSH
36428: LD_VAR 0 2
36432: PUSH
36433: LD_VAR 0 5
36437: PUSH
36438: LD_INT 1
36440: MINUS
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 7
36447: PUSH
36448: LD_VAR 0 5
36452: ARRAY
36453: PPUSH
36454: CALL_OW 1
36458: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36459: LD_ADDR_VAR 0 7
36463: PUSH
36464: LD_VAR 0 7
36468: PPUSH
36469: LD_VAR 0 5
36473: PUSH
36474: LD_INT 1
36476: MINUS
36477: PPUSH
36478: LD_VAR 0 6
36482: PPUSH
36483: CALL_OW 1
36487: ST_TO_ADDR
// end ;
36488: GO 36405
36490: POP
36491: POP
// result := s_arr [ 1 ] ;
36492: LD_ADDR_VAR 0 4
36496: PUSH
36497: LD_VAR 0 7
36501: PUSH
36502: LD_INT 1
36504: ARRAY
36505: ST_TO_ADDR
// end ; end ;
36506: LD_VAR 0 4
36510: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36511: LD_INT 0
36513: PPUSH
36514: PPUSH
// if not list then
36515: LD_VAR 0 1
36519: NOT
36520: IFFALSE 36524
// exit ;
36522: GO 36615
// i := list [ pos1 ] ;
36524: LD_ADDR_VAR 0 5
36528: PUSH
36529: LD_VAR 0 1
36533: PUSH
36534: LD_VAR 0 2
36538: ARRAY
36539: ST_TO_ADDR
// if not i then
36540: LD_VAR 0 5
36544: NOT
36545: IFFALSE 36549
// exit ;
36547: GO 36615
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36549: LD_ADDR_VAR 0 1
36553: PUSH
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_VAR 0 2
36563: PPUSH
36564: LD_VAR 0 1
36568: PUSH
36569: LD_VAR 0 3
36573: ARRAY
36574: PPUSH
36575: CALL_OW 1
36579: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36580: LD_ADDR_VAR 0 1
36584: PUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: LD_VAR 0 3
36594: PPUSH
36595: LD_VAR 0 5
36599: PPUSH
36600: CALL_OW 1
36604: ST_TO_ADDR
// result := list ;
36605: LD_ADDR_VAR 0 4
36609: PUSH
36610: LD_VAR 0 1
36614: ST_TO_ADDR
// end ;
36615: LD_VAR 0 4
36619: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36620: LD_INT 0
36622: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36623: LD_ADDR_VAR 0 5
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 250
36637: PPUSH
36638: LD_VAR 0 1
36642: PPUSH
36643: CALL_OW 251
36647: PPUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: LD_VAR 0 3
36657: PPUSH
36658: LD_VAR 0 4
36662: PPUSH
36663: CALL 36673 0 5
36667: ST_TO_ADDR
// end ;
36668: LD_VAR 0 5
36672: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36673: LD_INT 0
36675: PPUSH
36676: PPUSH
36677: PPUSH
36678: PPUSH
// if not list then
36679: LD_VAR 0 3
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 37076
// result := [ ] ;
36688: LD_ADDR_VAR 0 6
36692: PUSH
36693: EMPTY
36694: ST_TO_ADDR
// for i in list do
36695: LD_ADDR_VAR 0 7
36699: PUSH
36700: LD_VAR 0 3
36704: PUSH
36705: FOR_IN
36706: IFFALSE 36908
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_VAR 0 7
36717: PPUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: LD_VAR 0 2
36727: PPUSH
36728: CALL_OW 297
36732: ST_TO_ADDR
// if not result then
36733: LD_VAR 0 6
36737: NOT
36738: IFFALSE 36764
// result := [ [ i , tmp ] ] else
36740: LD_ADDR_VAR 0 6
36744: PUSH
36745: LD_VAR 0 7
36749: PUSH
36750: LD_VAR 0 9
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: ST_TO_ADDR
36762: GO 36906
// begin if result [ result ] [ 2 ] < tmp then
36764: LD_VAR 0 6
36768: PUSH
36769: LD_VAR 0 6
36773: ARRAY
36774: PUSH
36775: LD_INT 2
36777: ARRAY
36778: PUSH
36779: LD_VAR 0 9
36783: LESS
36784: IFFALSE 36826
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36786: LD_ADDR_VAR 0 6
36790: PUSH
36791: LD_VAR 0 6
36795: PPUSH
36796: LD_VAR 0 6
36800: PUSH
36801: LD_INT 1
36803: PLUS
36804: PPUSH
36805: LD_VAR 0 7
36809: PUSH
36810: LD_VAR 0 9
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PPUSH
36819: CALL_OW 2
36823: ST_TO_ADDR
36824: GO 36906
// for j = 1 to result do
36826: LD_ADDR_VAR 0 8
36830: PUSH
36831: DOUBLE
36832: LD_INT 1
36834: DEC
36835: ST_TO_ADDR
36836: LD_VAR 0 6
36840: PUSH
36841: FOR_TO
36842: IFFALSE 36904
// begin if tmp < result [ j ] [ 2 ] then
36844: LD_VAR 0 9
36848: PUSH
36849: LD_VAR 0 6
36853: PUSH
36854: LD_VAR 0 8
36858: ARRAY
36859: PUSH
36860: LD_INT 2
36862: ARRAY
36863: LESS
36864: IFFALSE 36902
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36866: LD_ADDR_VAR 0 6
36870: PUSH
36871: LD_VAR 0 6
36875: PPUSH
36876: LD_VAR 0 8
36880: PPUSH
36881: LD_VAR 0 7
36885: PUSH
36886: LD_VAR 0 9
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PPUSH
36895: CALL_OW 2
36899: ST_TO_ADDR
// break ;
36900: GO 36904
// end ; end ;
36902: GO 36841
36904: POP
36905: POP
// end ; end ;
36906: GO 36705
36908: POP
36909: POP
// if result and not asc then
36910: LD_VAR 0 6
36914: PUSH
36915: LD_VAR 0 4
36919: NOT
36920: AND
36921: IFFALSE 36996
// begin tmp := result ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_VAR 0 6
36932: ST_TO_ADDR
// for i = tmp downto 1 do
36933: LD_ADDR_VAR 0 7
36937: PUSH
36938: DOUBLE
36939: LD_VAR 0 9
36943: INC
36944: ST_TO_ADDR
36945: LD_INT 1
36947: PUSH
36948: FOR_DOWNTO
36949: IFFALSE 36994
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36951: LD_ADDR_VAR 0 6
36955: PUSH
36956: LD_VAR 0 6
36960: PPUSH
36961: LD_VAR 0 9
36965: PUSH
36966: LD_VAR 0 7
36970: MINUS
36971: PUSH
36972: LD_INT 1
36974: PLUS
36975: PPUSH
36976: LD_VAR 0 9
36980: PUSH
36981: LD_VAR 0 7
36985: ARRAY
36986: PPUSH
36987: CALL_OW 1
36991: ST_TO_ADDR
36992: GO 36948
36994: POP
36995: POP
// end ; tmp := [ ] ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: EMPTY
37002: ST_TO_ADDR
// if mode then
37003: LD_VAR 0 5
37007: IFFALSE 37076
// begin for i = 1 to result do
37009: LD_ADDR_VAR 0 7
37013: PUSH
37014: DOUBLE
37015: LD_INT 1
37017: DEC
37018: ST_TO_ADDR
37019: LD_VAR 0 6
37023: PUSH
37024: FOR_TO
37025: IFFALSE 37064
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37027: LD_ADDR_VAR 0 9
37031: PUSH
37032: LD_VAR 0 9
37036: PPUSH
37037: LD_VAR 0 7
37041: PPUSH
37042: LD_VAR 0 6
37046: PUSH
37047: LD_VAR 0 7
37051: ARRAY
37052: PUSH
37053: LD_INT 1
37055: ARRAY
37056: PPUSH
37057: CALL_OW 1
37061: ST_TO_ADDR
37062: GO 37024
37064: POP
37065: POP
// result := tmp ;
37066: LD_ADDR_VAR 0 6
37070: PUSH
37071: LD_VAR 0 9
37075: ST_TO_ADDR
// end ; end ;
37076: LD_VAR 0 6
37080: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37081: LD_INT 0
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37089: LD_ADDR_VAR 0 5
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// if not x or not y then
37111: LD_VAR 0 2
37115: NOT
37116: PUSH
37117: LD_VAR 0 3
37121: NOT
37122: OR
37123: IFFALSE 37127
// exit ;
37125: GO 38777
// if not range then
37127: LD_VAR 0 4
37131: NOT
37132: IFFALSE 37142
// range := 10 ;
37134: LD_ADDR_VAR 0 4
37138: PUSH
37139: LD_INT 10
37141: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37142: LD_ADDR_VAR 0 8
37146: PUSH
37147: LD_INT 81
37149: PUSH
37150: LD_VAR 0 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 92
37161: PUSH
37162: LD_VAR 0 2
37166: PUSH
37167: LD_VAR 0 3
37171: PUSH
37172: LD_VAR 0 4
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: LD_INT 21
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 69
37209: ST_TO_ADDR
// if not tmp then
37210: LD_VAR 0 8
37214: NOT
37215: IFFALSE 37219
// exit ;
37217: GO 38777
// for i in tmp do
37219: LD_ADDR_VAR 0 6
37223: PUSH
37224: LD_VAR 0 8
37228: PUSH
37229: FOR_IN
37230: IFFALSE 38752
// begin points := [ 0 , 0 , 0 ] ;
37232: LD_ADDR_VAR 0 9
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// bpoints := 1 ;
37251: LD_ADDR_VAR 0 10
37255: PUSH
37256: LD_INT 1
37258: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37259: LD_VAR 0 6
37263: PPUSH
37264: CALL_OW 247
37268: PUSH
37269: LD_INT 1
37271: DOUBLE
37272: EQUAL
37273: IFTRUE 37277
37275: GO 37855
37277: POP
// begin if GetClass ( i ) = 1 then
37278: LD_VAR 0 6
37282: PPUSH
37283: CALL_OW 257
37287: PUSH
37288: LD_INT 1
37290: EQUAL
37291: IFFALSE 37312
// points := [ 10 , 5 , 3 ] ;
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: LD_INT 10
37300: PUSH
37301: LD_INT 5
37303: PUSH
37304: LD_INT 3
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37312: LD_VAR 0 6
37316: PPUSH
37317: CALL_OW 257
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: LD_INT 3
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: IN
37336: IFFALSE 37357
// points := [ 3 , 2 , 1 ] ;
37338: LD_ADDR_VAR 0 9
37342: PUSH
37343: LD_INT 3
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37357: LD_VAR 0 6
37361: PPUSH
37362: CALL_OW 257
37366: PUSH
37367: LD_INT 5
37369: EQUAL
37370: IFFALSE 37391
// points := [ 130 , 5 , 2 ] ;
37372: LD_ADDR_VAR 0 9
37376: PUSH
37377: LD_INT 130
37379: PUSH
37380: LD_INT 5
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 257
37400: PUSH
37401: LD_INT 8
37403: EQUAL
37404: IFFALSE 37425
// points := [ 35 , 35 , 30 ] ;
37406: LD_ADDR_VAR 0 9
37410: PUSH
37411: LD_INT 35
37413: PUSH
37414: LD_INT 35
37416: PUSH
37417: LD_INT 30
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37425: LD_VAR 0 6
37429: PPUSH
37430: CALL_OW 257
37434: PUSH
37435: LD_INT 9
37437: EQUAL
37438: IFFALSE 37459
// points := [ 20 , 55 , 40 ] ;
37440: LD_ADDR_VAR 0 9
37444: PUSH
37445: LD_INT 20
37447: PUSH
37448: LD_INT 55
37450: PUSH
37451: LD_INT 40
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37459: LD_VAR 0 6
37463: PPUSH
37464: CALL_OW 257
37468: PUSH
37469: LD_INT 12
37471: PUSH
37472: LD_INT 16
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: IN
37479: IFFALSE 37500
// points := [ 5 , 3 , 2 ] ;
37481: LD_ADDR_VAR 0 9
37485: PUSH
37486: LD_INT 5
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37500: LD_VAR 0 6
37504: PPUSH
37505: CALL_OW 257
37509: PUSH
37510: LD_INT 17
37512: EQUAL
37513: IFFALSE 37534
// points := [ 100 , 50 , 75 ] ;
37515: LD_ADDR_VAR 0 9
37519: PUSH
37520: LD_INT 100
37522: PUSH
37523: LD_INT 50
37525: PUSH
37526: LD_INT 75
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37534: LD_VAR 0 6
37538: PPUSH
37539: CALL_OW 257
37543: PUSH
37544: LD_INT 15
37546: EQUAL
37547: IFFALSE 37568
// points := [ 10 , 5 , 3 ] ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_INT 10
37556: PUSH
37557: LD_INT 5
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 257
37577: PUSH
37578: LD_INT 14
37580: EQUAL
37581: IFFALSE 37602
// points := [ 10 , 0 , 0 ] ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_INT 10
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37602: LD_VAR 0 6
37606: PPUSH
37607: CALL_OW 257
37611: PUSH
37612: LD_INT 11
37614: EQUAL
37615: IFFALSE 37636
// points := [ 30 , 10 , 5 ] ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_INT 30
37624: PUSH
37625: LD_INT 10
37627: PUSH
37628: LD_INT 5
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37636: LD_VAR 0 1
37640: PPUSH
37641: LD_INT 5
37643: PPUSH
37644: CALL_OW 321
37648: PUSH
37649: LD_INT 2
37651: EQUAL
37652: IFFALSE 37669
// bpoints := bpoints * 1.8 ;
37654: LD_ADDR_VAR 0 10
37658: PUSH
37659: LD_VAR 0 10
37663: PUSH
37664: LD_REAL  1.80000000000000E+0000
37667: MUL
37668: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 257
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 3
37687: PUSH
37688: LD_INT 4
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: IN
37697: PUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: LD_INT 51
37705: PPUSH
37706: CALL_OW 321
37710: PUSH
37711: LD_INT 2
37713: EQUAL
37714: AND
37715: IFFALSE 37732
// bpoints := bpoints * 1.2 ;
37717: LD_ADDR_VAR 0 10
37721: PUSH
37722: LD_VAR 0 10
37726: PUSH
37727: LD_REAL  1.20000000000000E+0000
37730: MUL
37731: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37732: LD_VAR 0 6
37736: PPUSH
37737: CALL_OW 257
37741: PUSH
37742: LD_INT 5
37744: PUSH
37745: LD_INT 7
37747: PUSH
37748: LD_INT 9
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: IN
37756: PUSH
37757: LD_VAR 0 1
37761: PPUSH
37762: LD_INT 52
37764: PPUSH
37765: CALL_OW 321
37769: PUSH
37770: LD_INT 2
37772: EQUAL
37773: AND
37774: IFFALSE 37791
// bpoints := bpoints * 1.5 ;
37776: LD_ADDR_VAR 0 10
37780: PUSH
37781: LD_VAR 0 10
37785: PUSH
37786: LD_REAL  1.50000000000000E+0000
37789: MUL
37790: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37791: LD_VAR 0 1
37795: PPUSH
37796: LD_INT 66
37798: PPUSH
37799: CALL_OW 321
37803: PUSH
37804: LD_INT 2
37806: EQUAL
37807: IFFALSE 37824
// bpoints := bpoints * 1.1 ;
37809: LD_ADDR_VAR 0 10
37813: PUSH
37814: LD_VAR 0 10
37818: PUSH
37819: LD_REAL  1.10000000000000E+0000
37822: MUL
37823: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37824: LD_ADDR_VAR 0 10
37828: PUSH
37829: LD_VAR 0 10
37833: PUSH
37834: LD_VAR 0 6
37838: PPUSH
37839: LD_INT 1
37841: PPUSH
37842: CALL_OW 259
37846: PUSH
37847: LD_REAL  1.15000000000000E+0000
37850: MUL
37851: MUL
37852: ST_TO_ADDR
// end ; unit_vehicle :
37853: GO 38681
37855: LD_INT 2
37857: DOUBLE
37858: EQUAL
37859: IFTRUE 37863
37861: GO 38669
37863: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37864: LD_VAR 0 6
37868: PPUSH
37869: CALL_OW 264
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 42
37879: PUSH
37880: LD_INT 24
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: IN
37888: IFFALSE 37909
// points := [ 25 , 5 , 3 ] ;
37890: LD_ADDR_VAR 0 9
37894: PUSH
37895: LD_INT 25
37897: PUSH
37898: LD_INT 5
37900: PUSH
37901: LD_INT 3
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 264
37918: PUSH
37919: LD_INT 4
37921: PUSH
37922: LD_INT 43
37924: PUSH
37925: LD_INT 25
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: IN
37933: IFFALSE 37954
// points := [ 40 , 15 , 5 ] ;
37935: LD_ADDR_VAR 0 9
37939: PUSH
37940: LD_INT 40
37942: PUSH
37943: LD_INT 15
37945: PUSH
37946: LD_INT 5
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 264
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: LD_INT 23
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: IN
37974: IFFALSE 37995
// points := [ 7 , 25 , 8 ] ;
37976: LD_ADDR_VAR 0 9
37980: PUSH
37981: LD_INT 7
37983: PUSH
37984: LD_INT 25
37986: PUSH
37987: LD_INT 8
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37995: LD_VAR 0 6
37999: PPUSH
38000: CALL_OW 264
38004: PUSH
38005: LD_INT 5
38007: PUSH
38008: LD_INT 27
38010: PUSH
38011: LD_INT 44
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: IN
38019: IFFALSE 38040
// points := [ 14 , 50 , 16 ] ;
38021: LD_ADDR_VAR 0 9
38025: PUSH
38026: LD_INT 14
38028: PUSH
38029: LD_INT 50
38031: PUSH
38032: LD_INT 16
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38040: LD_VAR 0 6
38044: PPUSH
38045: CALL_OW 264
38049: PUSH
38050: LD_INT 6
38052: PUSH
38053: LD_INT 46
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: IN
38060: IFFALSE 38081
// points := [ 32 , 120 , 70 ] ;
38062: LD_ADDR_VAR 0 9
38066: PUSH
38067: LD_INT 32
38069: PUSH
38070: LD_INT 120
38072: PUSH
38073: LD_INT 70
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38081: LD_VAR 0 6
38085: PPUSH
38086: CALL_OW 264
38090: PUSH
38091: LD_INT 7
38093: PUSH
38094: LD_INT 28
38096: PUSH
38097: LD_INT 45
38099: PUSH
38100: LD_INT 92
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: IN
38109: IFFALSE 38130
// points := [ 35 , 20 , 45 ] ;
38111: LD_ADDR_VAR 0 9
38115: PUSH
38116: LD_INT 35
38118: PUSH
38119: LD_INT 20
38121: PUSH
38122: LD_INT 45
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38130: LD_VAR 0 6
38134: PPUSH
38135: CALL_OW 264
38139: PUSH
38140: LD_INT 47
38142: PUSH
38143: EMPTY
38144: LIST
38145: IN
38146: IFFALSE 38167
// points := [ 67 , 45 , 75 ] ;
38148: LD_ADDR_VAR 0 9
38152: PUSH
38153: LD_INT 67
38155: PUSH
38156: LD_INT 45
38158: PUSH
38159: LD_INT 75
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 264
38176: PUSH
38177: LD_INT 26
38179: PUSH
38180: EMPTY
38181: LIST
38182: IN
38183: IFFALSE 38204
// points := [ 120 , 30 , 80 ] ;
38185: LD_ADDR_VAR 0 9
38189: PUSH
38190: LD_INT 120
38192: PUSH
38193: LD_INT 30
38195: PUSH
38196: LD_INT 80
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38204: LD_VAR 0 6
38208: PPUSH
38209: CALL_OW 264
38213: PUSH
38214: LD_INT 22
38216: PUSH
38217: EMPTY
38218: LIST
38219: IN
38220: IFFALSE 38241
// points := [ 40 , 1 , 1 ] ;
38222: LD_ADDR_VAR 0 9
38226: PUSH
38227: LD_INT 40
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38241: LD_VAR 0 6
38245: PPUSH
38246: CALL_OW 264
38250: PUSH
38251: LD_INT 29
38253: PUSH
38254: EMPTY
38255: LIST
38256: IN
38257: IFFALSE 38278
// points := [ 70 , 200 , 400 ] ;
38259: LD_ADDR_VAR 0 9
38263: PUSH
38264: LD_INT 70
38266: PUSH
38267: LD_INT 200
38269: PUSH
38270: LD_INT 400
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38278: LD_VAR 0 6
38282: PPUSH
38283: CALL_OW 264
38287: PUSH
38288: LD_INT 14
38290: PUSH
38291: LD_INT 53
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: IN
38298: IFFALSE 38319
// points := [ 40 , 10 , 20 ] ;
38300: LD_ADDR_VAR 0 9
38304: PUSH
38305: LD_INT 40
38307: PUSH
38308: LD_INT 10
38310: PUSH
38311: LD_INT 20
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38319: LD_VAR 0 6
38323: PPUSH
38324: CALL_OW 264
38328: PUSH
38329: LD_INT 9
38331: PUSH
38332: EMPTY
38333: LIST
38334: IN
38335: IFFALSE 38356
// points := [ 5 , 70 , 20 ] ;
38337: LD_ADDR_VAR 0 9
38341: PUSH
38342: LD_INT 5
38344: PUSH
38345: LD_INT 70
38347: PUSH
38348: LD_INT 20
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38356: LD_VAR 0 6
38360: PPUSH
38361: CALL_OW 264
38365: PUSH
38366: LD_INT 10
38368: PUSH
38369: EMPTY
38370: LIST
38371: IN
38372: IFFALSE 38393
// points := [ 35 , 110 , 70 ] ;
38374: LD_ADDR_VAR 0 9
38378: PUSH
38379: LD_INT 35
38381: PUSH
38382: LD_INT 110
38384: PUSH
38385: LD_INT 70
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38393: LD_VAR 0 6
38397: PPUSH
38398: CALL_OW 265
38402: PUSH
38403: LD_INT 25
38405: EQUAL
38406: IFFALSE 38427
// points := [ 80 , 65 , 100 ] ;
38408: LD_ADDR_VAR 0 9
38412: PUSH
38413: LD_INT 80
38415: PUSH
38416: LD_INT 65
38418: PUSH
38419: LD_INT 100
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38427: LD_VAR 0 6
38431: PPUSH
38432: CALL_OW 263
38436: PUSH
38437: LD_INT 1
38439: EQUAL
38440: IFFALSE 38475
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38442: LD_ADDR_VAR 0 10
38446: PUSH
38447: LD_VAR 0 10
38451: PUSH
38452: LD_VAR 0 6
38456: PPUSH
38457: CALL_OW 311
38461: PPUSH
38462: LD_INT 3
38464: PPUSH
38465: CALL_OW 259
38469: PUSH
38470: LD_INT 4
38472: MUL
38473: MUL
38474: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38475: LD_VAR 0 6
38479: PPUSH
38480: CALL_OW 263
38484: PUSH
38485: LD_INT 2
38487: EQUAL
38488: IFFALSE 38539
// begin j := IsControledBy ( i ) ;
38490: LD_ADDR_VAR 0 7
38494: PUSH
38495: LD_VAR 0 6
38499: PPUSH
38500: CALL_OW 312
38504: ST_TO_ADDR
// if j then
38505: LD_VAR 0 7
38509: IFFALSE 38539
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38511: LD_ADDR_VAR 0 10
38515: PUSH
38516: LD_VAR 0 10
38520: PUSH
38521: LD_VAR 0 7
38525: PPUSH
38526: LD_INT 3
38528: PPUSH
38529: CALL_OW 259
38533: PUSH
38534: LD_INT 3
38536: MUL
38537: MUL
38538: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38539: LD_VAR 0 6
38543: PPUSH
38544: CALL_OW 264
38548: PUSH
38549: LD_INT 5
38551: PUSH
38552: LD_INT 6
38554: PUSH
38555: LD_INT 46
38557: PUSH
38558: LD_INT 44
38560: PUSH
38561: LD_INT 47
38563: PUSH
38564: LD_INT 45
38566: PUSH
38567: LD_INT 28
38569: PUSH
38570: LD_INT 7
38572: PUSH
38573: LD_INT 27
38575: PUSH
38576: LD_INT 29
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: IN
38591: PUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: LD_INT 52
38599: PPUSH
38600: CALL_OW 321
38604: PUSH
38605: LD_INT 2
38607: EQUAL
38608: AND
38609: IFFALSE 38626
// bpoints := bpoints * 1.2 ;
38611: LD_ADDR_VAR 0 10
38615: PUSH
38616: LD_VAR 0 10
38620: PUSH
38621: LD_REAL  1.20000000000000E+0000
38624: MUL
38625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38626: LD_VAR 0 6
38630: PPUSH
38631: CALL_OW 264
38635: PUSH
38636: LD_INT 6
38638: PUSH
38639: LD_INT 46
38641: PUSH
38642: LD_INT 47
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: IN
38650: IFFALSE 38667
// bpoints := bpoints * 1.2 ;
38652: LD_ADDR_VAR 0 10
38656: PUSH
38657: LD_VAR 0 10
38661: PUSH
38662: LD_REAL  1.20000000000000E+0000
38665: MUL
38666: ST_TO_ADDR
// end ; unit_building :
38667: GO 38681
38669: LD_INT 3
38671: DOUBLE
38672: EQUAL
38673: IFTRUE 38677
38675: GO 38680
38677: POP
// ; end ;
38678: GO 38681
38680: POP
// for j = 1 to 3 do
38681: LD_ADDR_VAR 0 7
38685: PUSH
38686: DOUBLE
38687: LD_INT 1
38689: DEC
38690: ST_TO_ADDR
38691: LD_INT 3
38693: PUSH
38694: FOR_TO
38695: IFFALSE 38748
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38697: LD_ADDR_VAR 0 5
38701: PUSH
38702: LD_VAR 0 5
38706: PPUSH
38707: LD_VAR 0 7
38711: PPUSH
38712: LD_VAR 0 5
38716: PUSH
38717: LD_VAR 0 7
38721: ARRAY
38722: PUSH
38723: LD_VAR 0 9
38727: PUSH
38728: LD_VAR 0 7
38732: ARRAY
38733: PUSH
38734: LD_VAR 0 10
38738: MUL
38739: PLUS
38740: PPUSH
38741: CALL_OW 1
38745: ST_TO_ADDR
38746: GO 38694
38748: POP
38749: POP
// end ;
38750: GO 37229
38752: POP
38753: POP
// result := Replace ( result , 4 , tmp ) ;
38754: LD_ADDR_VAR 0 5
38758: PUSH
38759: LD_VAR 0 5
38763: PPUSH
38764: LD_INT 4
38766: PPUSH
38767: LD_VAR 0 8
38771: PPUSH
38772: CALL_OW 1
38776: ST_TO_ADDR
// end ;
38777: LD_VAR 0 5
38781: RET
// export function DangerAtRange ( unit , range ) ; begin
38782: LD_INT 0
38784: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38785: LD_ADDR_VAR 0 3
38789: PUSH
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 255
38799: PPUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 250
38809: PPUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 251
38819: PPUSH
38820: LD_VAR 0 2
38824: PPUSH
38825: CALL 37081 0 4
38829: ST_TO_ADDR
// end ;
38830: LD_VAR 0 3
38834: RET
// export function DangerInArea ( side , area ) ; begin
38835: LD_INT 0
38837: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38838: LD_ADDR_VAR 0 3
38842: PUSH
38843: LD_VAR 0 2
38847: PPUSH
38848: LD_INT 81
38850: PUSH
38851: LD_VAR 0 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PPUSH
38860: CALL_OW 70
38864: ST_TO_ADDR
// end ;
38865: LD_VAR 0 3
38869: RET
// export function IsExtension ( b ) ; begin
38870: LD_INT 0
38872: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38873: LD_ADDR_VAR 0 2
38877: PUSH
38878: LD_VAR 0 1
38882: PUSH
38883: LD_INT 23
38885: PUSH
38886: LD_INT 20
38888: PUSH
38889: LD_INT 22
38891: PUSH
38892: LD_INT 17
38894: PUSH
38895: LD_INT 24
38897: PUSH
38898: LD_INT 21
38900: PUSH
38901: LD_INT 19
38903: PUSH
38904: LD_INT 16
38906: PUSH
38907: LD_INT 25
38909: PUSH
38910: LD_INT 18
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: IN
38925: ST_TO_ADDR
// end ;
38926: LD_VAR 0 2
38930: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38931: LD_INT 0
38933: PPUSH
38934: PPUSH
38935: PPUSH
// result := [ ] ;
38936: LD_ADDR_VAR 0 4
38940: PUSH
38941: EMPTY
38942: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38943: LD_ADDR_VAR 0 5
38947: PUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: LD_INT 21
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 70
38967: ST_TO_ADDR
// if not tmp then
38968: LD_VAR 0 5
38972: NOT
38973: IFFALSE 38977
// exit ;
38975: GO 39041
// if checkLink then
38977: LD_VAR 0 3
38981: IFFALSE 39031
// begin for i in tmp do
38983: LD_ADDR_VAR 0 6
38987: PUSH
38988: LD_VAR 0 5
38992: PUSH
38993: FOR_IN
38994: IFFALSE 39029
// if GetBase ( i ) <> base then
38996: LD_VAR 0 6
39000: PPUSH
39001: CALL_OW 274
39005: PUSH
39006: LD_VAR 0 1
39010: NONEQUAL
39011: IFFALSE 39027
// ComLinkToBase ( base , i ) ;
39013: LD_VAR 0 1
39017: PPUSH
39018: LD_VAR 0 6
39022: PPUSH
39023: CALL_OW 169
39027: GO 38993
39029: POP
39030: POP
// end ; result := tmp ;
39031: LD_ADDR_VAR 0 4
39035: PUSH
39036: LD_VAR 0 5
39040: ST_TO_ADDR
// end ;
39041: LD_VAR 0 4
39045: RET
// export function ComComplete ( units , b ) ; var i ; begin
39046: LD_INT 0
39048: PPUSH
39049: PPUSH
// if not units then
39050: LD_VAR 0 1
39054: NOT
39055: IFFALSE 39059
// exit ;
39057: GO 39149
// for i in units do
39059: LD_ADDR_VAR 0 4
39063: PUSH
39064: LD_VAR 0 1
39068: PUSH
39069: FOR_IN
39070: IFFALSE 39147
// if BuildingStatus ( b ) = bs_build then
39072: LD_VAR 0 2
39076: PPUSH
39077: CALL_OW 461
39081: PUSH
39082: LD_INT 1
39084: EQUAL
39085: IFFALSE 39145
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39087: LD_VAR 0 4
39091: PPUSH
39092: LD_STRING h
39094: PUSH
39095: LD_VAR 0 2
39099: PPUSH
39100: CALL_OW 250
39104: PUSH
39105: LD_VAR 0 2
39109: PPUSH
39110: CALL_OW 251
39114: PUSH
39115: LD_VAR 0 2
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: PPUSH
39141: CALL_OW 446
39145: GO 39069
39147: POP
39148: POP
// end ;
39149: LD_VAR 0 3
39153: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39154: LD_INT 0
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39162: LD_VAR 0 1
39166: NOT
39167: PUSH
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 263
39177: PUSH
39178: LD_INT 2
39180: NONEQUAL
39181: OR
39182: IFFALSE 39186
// exit ;
39184: GO 39502
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39186: LD_ADDR_VAR 0 6
39190: PUSH
39191: LD_INT 22
39193: PUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 255
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 30
39213: PUSH
39214: LD_INT 36
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 34
39223: PUSH
39224: LD_INT 31
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PPUSH
39240: CALL_OW 69
39244: ST_TO_ADDR
// if not tmp then
39245: LD_VAR 0 6
39249: NOT
39250: IFFALSE 39254
// exit ;
39252: GO 39502
// result := [ ] ;
39254: LD_ADDR_VAR 0 2
39258: PUSH
39259: EMPTY
39260: ST_TO_ADDR
// for i in tmp do
39261: LD_ADDR_VAR 0 3
39265: PUSH
39266: LD_VAR 0 6
39270: PUSH
39271: FOR_IN
39272: IFFALSE 39343
// begin t := UnitsInside ( i ) ;
39274: LD_ADDR_VAR 0 4
39278: PUSH
39279: LD_VAR 0 3
39283: PPUSH
39284: CALL_OW 313
39288: ST_TO_ADDR
// if t then
39289: LD_VAR 0 4
39293: IFFALSE 39341
// for j in t do
39295: LD_ADDR_VAR 0 7
39299: PUSH
39300: LD_VAR 0 4
39304: PUSH
39305: FOR_IN
39306: IFFALSE 39339
// result := Replace ( result , result + 1 , j ) ;
39308: LD_ADDR_VAR 0 2
39312: PUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_INT 1
39325: PLUS
39326: PPUSH
39327: LD_VAR 0 7
39331: PPUSH
39332: CALL_OW 1
39336: ST_TO_ADDR
39337: GO 39305
39339: POP
39340: POP
// end ;
39341: GO 39271
39343: POP
39344: POP
// if not result then
39345: LD_VAR 0 2
39349: NOT
39350: IFFALSE 39354
// exit ;
39352: GO 39502
// mech := result [ 1 ] ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 1
39366: ARRAY
39367: ST_TO_ADDR
// if result > 1 then
39368: LD_VAR 0 2
39372: PUSH
39373: LD_INT 1
39375: GREATER
39376: IFFALSE 39488
// begin for i = 2 to result do
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: DOUBLE
39384: LD_INT 2
39386: DEC
39387: ST_TO_ADDR
39388: LD_VAR 0 2
39392: PUSH
39393: FOR_TO
39394: IFFALSE 39486
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39396: LD_ADDR_VAR 0 4
39400: PUSH
39401: LD_VAR 0 2
39405: PUSH
39406: LD_VAR 0 3
39410: ARRAY
39411: PPUSH
39412: LD_INT 3
39414: PPUSH
39415: CALL_OW 259
39419: PUSH
39420: LD_VAR 0 2
39424: PUSH
39425: LD_VAR 0 3
39429: ARRAY
39430: PPUSH
39431: CALL_OW 432
39435: MINUS
39436: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39437: LD_VAR 0 4
39441: PUSH
39442: LD_VAR 0 5
39446: PPUSH
39447: LD_INT 3
39449: PPUSH
39450: CALL_OW 259
39454: PUSH
39455: LD_VAR 0 5
39459: PPUSH
39460: CALL_OW 432
39464: MINUS
39465: GREATEREQUAL
39466: IFFALSE 39484
// mech := result [ i ] ;
39468: LD_ADDR_VAR 0 5
39472: PUSH
39473: LD_VAR 0 2
39477: PUSH
39478: LD_VAR 0 3
39482: ARRAY
39483: ST_TO_ADDR
// end ;
39484: GO 39393
39486: POP
39487: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39488: LD_VAR 0 1
39492: PPUSH
39493: LD_VAR 0 5
39497: PPUSH
39498: CALL_OW 135
// end ;
39502: LD_VAR 0 2
39506: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39507: LD_INT 0
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
// result := [ ] ;
39522: LD_ADDR_VAR 0 7
39526: PUSH
39527: EMPTY
39528: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 266
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: IN
39549: NOT
39550: IFFALSE 39554
// exit ;
39552: GO 41188
// if name then
39554: LD_VAR 0 3
39558: IFFALSE 39574
// SetBName ( base_dep , name ) ;
39560: LD_VAR 0 1
39564: PPUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: CALL_OW 500
// base := GetBase ( base_dep ) ;
39574: LD_ADDR_VAR 0 15
39578: PUSH
39579: LD_VAR 0 1
39583: PPUSH
39584: CALL_OW 274
39588: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39589: LD_ADDR_VAR 0 16
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL_OW 255
39603: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39604: LD_ADDR_VAR 0 17
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 248
39618: ST_TO_ADDR
// if sources then
39619: LD_VAR 0 5
39623: IFFALSE 39670
// for i = 1 to 3 do
39625: LD_ADDR_VAR 0 8
39629: PUSH
39630: DOUBLE
39631: LD_INT 1
39633: DEC
39634: ST_TO_ADDR
39635: LD_INT 3
39637: PUSH
39638: FOR_TO
39639: IFFALSE 39668
// AddResourceType ( base , i , sources [ i ] ) ;
39641: LD_VAR 0 15
39645: PPUSH
39646: LD_VAR 0 8
39650: PPUSH
39651: LD_VAR 0 5
39655: PUSH
39656: LD_VAR 0 8
39660: ARRAY
39661: PPUSH
39662: CALL_OW 276
39666: GO 39638
39668: POP
39669: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39670: LD_ADDR_VAR 0 18
39674: PUSH
39675: LD_VAR 0 15
39679: PPUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL 38931 0 3
39692: ST_TO_ADDR
// InitHc ;
39693: CALL_OW 19
// InitUc ;
39697: CALL_OW 18
// uc_side := side ;
39701: LD_ADDR_OWVAR 20
39705: PUSH
39706: LD_VAR 0 16
39710: ST_TO_ADDR
// uc_nation := nation ;
39711: LD_ADDR_OWVAR 21
39715: PUSH
39716: LD_VAR 0 17
39720: ST_TO_ADDR
// if buildings then
39721: LD_VAR 0 18
39725: IFFALSE 41047
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39727: LD_ADDR_VAR 0 19
39731: PUSH
39732: LD_VAR 0 18
39736: PPUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 30
39742: PUSH
39743: LD_INT 29
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 30
39752: PUSH
39753: LD_INT 30
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: PPUSH
39765: CALL_OW 72
39769: ST_TO_ADDR
// if tmp then
39770: LD_VAR 0 19
39774: IFFALSE 39822
// for i in tmp do
39776: LD_ADDR_VAR 0 8
39780: PUSH
39781: LD_VAR 0 19
39785: PUSH
39786: FOR_IN
39787: IFFALSE 39820
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39789: LD_VAR 0 8
39793: PPUSH
39794: CALL_OW 250
39798: PPUSH
39799: LD_VAR 0 8
39803: PPUSH
39804: CALL_OW 251
39808: PPUSH
39809: LD_VAR 0 16
39813: PPUSH
39814: CALL_OW 441
39818: GO 39786
39820: POP
39821: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39822: LD_VAR 0 18
39826: PPUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 30
39832: PUSH
39833: LD_INT 32
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 30
39842: PUSH
39843: LD_INT 33
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: PPUSH
39855: CALL_OW 72
39859: IFFALSE 39947
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39861: LD_ADDR_VAR 0 8
39865: PUSH
39866: LD_VAR 0 18
39870: PPUSH
39871: LD_INT 2
39873: PUSH
39874: LD_INT 30
39876: PUSH
39877: LD_INT 32
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 30
39886: PUSH
39887: LD_INT 33
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: PPUSH
39899: CALL_OW 72
39903: PUSH
39904: FOR_IN
39905: IFFALSE 39945
// begin if not GetBWeapon ( i ) then
39907: LD_VAR 0 8
39911: PPUSH
39912: CALL_OW 269
39916: NOT
39917: IFFALSE 39943
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39919: LD_VAR 0 8
39923: PPUSH
39924: LD_VAR 0 8
39928: PPUSH
39929: LD_VAR 0 2
39933: PPUSH
39934: CALL 41193 0 2
39938: PPUSH
39939: CALL_OW 431
// end ;
39943: GO 39904
39945: POP
39946: POP
// end ; for i = 1 to personel do
39947: LD_ADDR_VAR 0 8
39951: PUSH
39952: DOUBLE
39953: LD_INT 1
39955: DEC
39956: ST_TO_ADDR
39957: LD_VAR 0 6
39961: PUSH
39962: FOR_TO
39963: IFFALSE 41027
// begin if i > 4 then
39965: LD_VAR 0 8
39969: PUSH
39970: LD_INT 4
39972: GREATER
39973: IFFALSE 39977
// break ;
39975: GO 41027
// case i of 1 :
39977: LD_VAR 0 8
39981: PUSH
39982: LD_INT 1
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40070
39990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39991: LD_ADDR_VAR 0 12
39995: PUSH
39996: LD_VAR 0 18
40000: PPUSH
40001: LD_INT 22
40003: PUSH
40004: LD_VAR 0 16
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 58
40015: PUSH
40016: EMPTY
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 30
40024: PUSH
40025: LD_INT 32
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 30
40034: PUSH
40035: LD_INT 4
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 30
40044: PUSH
40045: LD_INT 5
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: PPUSH
40063: CALL_OW 72
40067: ST_TO_ADDR
40068: GO 40292
40070: LD_INT 2
40072: DOUBLE
40073: EQUAL
40074: IFTRUE 40078
40076: GO 40140
40078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40079: LD_ADDR_VAR 0 12
40083: PUSH
40084: LD_VAR 0 18
40088: PPUSH
40089: LD_INT 22
40091: PUSH
40092: LD_VAR 0 16
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 30
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 30
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PPUSH
40133: CALL_OW 72
40137: ST_TO_ADDR
40138: GO 40292
40140: LD_INT 3
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40148
40146: GO 40210
40148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40149: LD_ADDR_VAR 0 12
40153: PUSH
40154: LD_VAR 0 18
40158: PPUSH
40159: LD_INT 22
40161: PUSH
40162: LD_VAR 0 16
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 30
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 30
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PPUSH
40203: CALL_OW 72
40207: ST_TO_ADDR
40208: GO 40292
40210: LD_INT 4
40212: DOUBLE
40213: EQUAL
40214: IFTRUE 40218
40216: GO 40291
40218: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40219: LD_ADDR_VAR 0 12
40223: PUSH
40224: LD_VAR 0 18
40228: PPUSH
40229: LD_INT 22
40231: PUSH
40232: LD_VAR 0 16
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 30
40246: PUSH
40247: LD_INT 6
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 30
40256: PUSH
40257: LD_INT 7
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 30
40266: PUSH
40267: LD_INT 8
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PPUSH
40284: CALL_OW 72
40288: ST_TO_ADDR
40289: GO 40292
40291: POP
// if i = 1 then
40292: LD_VAR 0 8
40296: PUSH
40297: LD_INT 1
40299: EQUAL
40300: IFFALSE 40411
// begin tmp := [ ] ;
40302: LD_ADDR_VAR 0 19
40306: PUSH
40307: EMPTY
40308: ST_TO_ADDR
// for j in f do
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: LD_VAR 0 12
40318: PUSH
40319: FOR_IN
40320: IFFALSE 40393
// if GetBType ( j ) = b_bunker then
40322: LD_VAR 0 9
40326: PPUSH
40327: CALL_OW 266
40331: PUSH
40332: LD_INT 32
40334: EQUAL
40335: IFFALSE 40362
// tmp := Insert ( tmp , 1 , j ) else
40337: LD_ADDR_VAR 0 19
40341: PUSH
40342: LD_VAR 0 19
40346: PPUSH
40347: LD_INT 1
40349: PPUSH
40350: LD_VAR 0 9
40354: PPUSH
40355: CALL_OW 2
40359: ST_TO_ADDR
40360: GO 40391
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40362: LD_ADDR_VAR 0 19
40366: PUSH
40367: LD_VAR 0 19
40371: PPUSH
40372: LD_VAR 0 19
40376: PUSH
40377: LD_INT 1
40379: PLUS
40380: PPUSH
40381: LD_VAR 0 9
40385: PPUSH
40386: CALL_OW 2
40390: ST_TO_ADDR
40391: GO 40319
40393: POP
40394: POP
// if tmp then
40395: LD_VAR 0 19
40399: IFFALSE 40411
// f := tmp ;
40401: LD_ADDR_VAR 0 12
40405: PUSH
40406: LD_VAR 0 19
40410: ST_TO_ADDR
// end ; x := personel [ i ] ;
40411: LD_ADDR_VAR 0 13
40415: PUSH
40416: LD_VAR 0 6
40420: PUSH
40421: LD_VAR 0 8
40425: ARRAY
40426: ST_TO_ADDR
// if x = - 1 then
40427: LD_VAR 0 13
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: EQUAL
40436: IFFALSE 40645
// begin for j in f do
40438: LD_ADDR_VAR 0 9
40442: PUSH
40443: LD_VAR 0 12
40447: PUSH
40448: FOR_IN
40449: IFFALSE 40641
// repeat InitHc ;
40451: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40455: LD_VAR 0 9
40459: PPUSH
40460: CALL_OW 266
40464: PUSH
40465: LD_INT 5
40467: EQUAL
40468: IFFALSE 40538
// begin if UnitsInside ( j ) < 3 then
40470: LD_VAR 0 9
40474: PPUSH
40475: CALL_OW 313
40479: PUSH
40480: LD_INT 3
40482: LESS
40483: IFFALSE 40519
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40485: LD_INT 0
40487: PPUSH
40488: LD_INT 5
40490: PUSH
40491: LD_INT 8
40493: PUSH
40494: LD_INT 9
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: PUSH
40502: LD_VAR 0 17
40506: ARRAY
40507: PPUSH
40508: LD_VAR 0 4
40512: PPUSH
40513: CALL_OW 380
40517: GO 40536
// PrepareHuman ( false , i , skill ) ;
40519: LD_INT 0
40521: PPUSH
40522: LD_VAR 0 8
40526: PPUSH
40527: LD_VAR 0 4
40531: PPUSH
40532: CALL_OW 380
// end else
40536: GO 40555
// PrepareHuman ( false , i , skill ) ;
40538: LD_INT 0
40540: PPUSH
40541: LD_VAR 0 8
40545: PPUSH
40546: LD_VAR 0 4
40550: PPUSH
40551: CALL_OW 380
// un := CreateHuman ;
40555: LD_ADDR_VAR 0 14
40559: PUSH
40560: CALL_OW 44
40564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40565: LD_ADDR_VAR 0 7
40569: PUSH
40570: LD_VAR 0 7
40574: PPUSH
40575: LD_INT 1
40577: PPUSH
40578: LD_VAR 0 14
40582: PPUSH
40583: CALL_OW 2
40587: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40588: LD_VAR 0 14
40592: PPUSH
40593: LD_VAR 0 9
40597: PPUSH
40598: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40602: LD_VAR 0 9
40606: PPUSH
40607: CALL_OW 313
40611: PUSH
40612: LD_INT 6
40614: EQUAL
40615: PUSH
40616: LD_VAR 0 9
40620: PPUSH
40621: CALL_OW 266
40625: PUSH
40626: LD_INT 32
40628: PUSH
40629: LD_INT 31
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: IN
40636: OR
40637: IFFALSE 40451
40639: GO 40448
40641: POP
40642: POP
// end else
40643: GO 41025
// for j = 1 to x do
40645: LD_ADDR_VAR 0 9
40649: PUSH
40650: DOUBLE
40651: LD_INT 1
40653: DEC
40654: ST_TO_ADDR
40655: LD_VAR 0 13
40659: PUSH
40660: FOR_TO
40661: IFFALSE 41023
// begin InitHc ;
40663: CALL_OW 19
// if not f then
40667: LD_VAR 0 12
40671: NOT
40672: IFFALSE 40761
// begin PrepareHuman ( false , i , skill ) ;
40674: LD_INT 0
40676: PPUSH
40677: LD_VAR 0 8
40681: PPUSH
40682: LD_VAR 0 4
40686: PPUSH
40687: CALL_OW 380
// un := CreateHuman ;
40691: LD_ADDR_VAR 0 14
40695: PUSH
40696: CALL_OW 44
40700: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40701: LD_ADDR_VAR 0 7
40705: PUSH
40706: LD_VAR 0 7
40710: PPUSH
40711: LD_INT 1
40713: PPUSH
40714: LD_VAR 0 14
40718: PPUSH
40719: CALL_OW 2
40723: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40724: LD_VAR 0 14
40728: PPUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 250
40738: PPUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 251
40748: PPUSH
40749: LD_INT 10
40751: PPUSH
40752: LD_INT 0
40754: PPUSH
40755: CALL_OW 50
// continue ;
40759: GO 40660
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40761: LD_VAR 0 12
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: PPUSH
40770: CALL_OW 313
40774: PUSH
40775: LD_VAR 0 12
40779: PUSH
40780: LD_INT 1
40782: ARRAY
40783: PPUSH
40784: CALL_OW 266
40788: PUSH
40789: LD_INT 32
40791: PUSH
40792: LD_INT 31
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: IN
40799: AND
40800: PUSH
40801: LD_VAR 0 12
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PPUSH
40810: CALL_OW 313
40814: PUSH
40815: LD_INT 6
40817: EQUAL
40818: OR
40819: IFFALSE 40839
// f := Delete ( f , 1 ) ;
40821: LD_ADDR_VAR 0 12
40825: PUSH
40826: LD_VAR 0 12
40830: PPUSH
40831: LD_INT 1
40833: PPUSH
40834: CALL_OW 3
40838: ST_TO_ADDR
// if not f then
40839: LD_VAR 0 12
40843: NOT
40844: IFFALSE 40862
// begin x := x + 2 ;
40846: LD_ADDR_VAR 0 13
40850: PUSH
40851: LD_VAR 0 13
40855: PUSH
40856: LD_INT 2
40858: PLUS
40859: ST_TO_ADDR
// continue ;
40860: GO 40660
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40862: LD_VAR 0 12
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: CALL_OW 266
40875: PUSH
40876: LD_INT 5
40878: EQUAL
40879: IFFALSE 40953
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40881: LD_VAR 0 12
40885: PUSH
40886: LD_INT 1
40888: ARRAY
40889: PPUSH
40890: CALL_OW 313
40894: PUSH
40895: LD_INT 3
40897: LESS
40898: IFFALSE 40934
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40900: LD_INT 0
40902: PPUSH
40903: LD_INT 5
40905: PUSH
40906: LD_INT 8
40908: PUSH
40909: LD_INT 9
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: PUSH
40917: LD_VAR 0 17
40921: ARRAY
40922: PPUSH
40923: LD_VAR 0 4
40927: PPUSH
40928: CALL_OW 380
40932: GO 40951
// PrepareHuman ( false , i , skill ) ;
40934: LD_INT 0
40936: PPUSH
40937: LD_VAR 0 8
40941: PPUSH
40942: LD_VAR 0 4
40946: PPUSH
40947: CALL_OW 380
// end else
40951: GO 40970
// PrepareHuman ( false , i , skill ) ;
40953: LD_INT 0
40955: PPUSH
40956: LD_VAR 0 8
40960: PPUSH
40961: LD_VAR 0 4
40965: PPUSH
40966: CALL_OW 380
// un := CreateHuman ;
40970: LD_ADDR_VAR 0 14
40974: PUSH
40975: CALL_OW 44
40979: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40980: LD_ADDR_VAR 0 7
40984: PUSH
40985: LD_VAR 0 7
40989: PPUSH
40990: LD_INT 1
40992: PPUSH
40993: LD_VAR 0 14
40997: PPUSH
40998: CALL_OW 2
41002: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41003: LD_VAR 0 14
41007: PPUSH
41008: LD_VAR 0 12
41012: PUSH
41013: LD_INT 1
41015: ARRAY
41016: PPUSH
41017: CALL_OW 52
// end ;
41021: GO 40660
41023: POP
41024: POP
// end ;
41025: GO 39962
41027: POP
41028: POP
// result := result ^ buildings ;
41029: LD_ADDR_VAR 0 7
41033: PUSH
41034: LD_VAR 0 7
41038: PUSH
41039: LD_VAR 0 18
41043: ADD
41044: ST_TO_ADDR
// end else
41045: GO 41188
// begin for i = 1 to personel do
41047: LD_ADDR_VAR 0 8
41051: PUSH
41052: DOUBLE
41053: LD_INT 1
41055: DEC
41056: ST_TO_ADDR
41057: LD_VAR 0 6
41061: PUSH
41062: FOR_TO
41063: IFFALSE 41186
// begin if i > 4 then
41065: LD_VAR 0 8
41069: PUSH
41070: LD_INT 4
41072: GREATER
41073: IFFALSE 41077
// break ;
41075: GO 41186
// x := personel [ i ] ;
41077: LD_ADDR_VAR 0 13
41081: PUSH
41082: LD_VAR 0 6
41086: PUSH
41087: LD_VAR 0 8
41091: ARRAY
41092: ST_TO_ADDR
// if x = - 1 then
41093: LD_VAR 0 13
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: EQUAL
41102: IFFALSE 41106
// continue ;
41104: GO 41062
// PrepareHuman ( false , i , skill ) ;
41106: LD_INT 0
41108: PPUSH
41109: LD_VAR 0 8
41113: PPUSH
41114: LD_VAR 0 4
41118: PPUSH
41119: CALL_OW 380
// un := CreateHuman ;
41123: LD_ADDR_VAR 0 14
41127: PUSH
41128: CALL_OW 44
41132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41133: LD_VAR 0 14
41137: PPUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: CALL_OW 250
41147: PPUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 251
41157: PPUSH
41158: LD_INT 10
41160: PPUSH
41161: LD_INT 0
41163: PPUSH
41164: CALL_OW 50
// result := result ^ un ;
41168: LD_ADDR_VAR 0 7
41172: PUSH
41173: LD_VAR 0 7
41177: PUSH
41178: LD_VAR 0 14
41182: ADD
41183: ST_TO_ADDR
// end ;
41184: GO 41062
41186: POP
41187: POP
// end ; end ;
41188: LD_VAR 0 7
41192: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41193: LD_INT 0
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
// result := false ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_INT 0
41218: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41219: LD_VAR 0 1
41223: NOT
41224: PUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 266
41234: PUSH
41235: LD_INT 32
41237: PUSH
41238: LD_INT 33
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: IN
41245: NOT
41246: OR
41247: IFFALSE 41251
// exit ;
41249: GO 42360
// nat := GetNation ( tower ) ;
41251: LD_ADDR_VAR 0 12
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 248
41265: ST_TO_ADDR
// side := GetSide ( tower ) ;
41266: LD_ADDR_VAR 0 16
41270: PUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: CALL_OW 255
41280: ST_TO_ADDR
// x := GetX ( tower ) ;
41281: LD_ADDR_VAR 0 10
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 250
41295: ST_TO_ADDR
// y := GetY ( tower ) ;
41296: LD_ADDR_VAR 0 11
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 251
41310: ST_TO_ADDR
// if not x or not y then
41311: LD_VAR 0 10
41315: NOT
41316: PUSH
41317: LD_VAR 0 11
41321: NOT
41322: OR
41323: IFFALSE 41327
// exit ;
41325: GO 42360
// weapon := 0 ;
41327: LD_ADDR_VAR 0 18
41331: PUSH
41332: LD_INT 0
41334: ST_TO_ADDR
// fac_list := [ ] ;
41335: LD_ADDR_VAR 0 17
41339: PUSH
41340: EMPTY
41341: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41342: LD_ADDR_VAR 0 6
41346: PUSH
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 274
41356: PPUSH
41357: LD_VAR 0 2
41361: PPUSH
41362: LD_INT 0
41364: PPUSH
41365: CALL 38931 0 3
41369: PPUSH
41370: LD_INT 30
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PPUSH
41380: CALL_OW 72
41384: ST_TO_ADDR
// if not factories then
41385: LD_VAR 0 6
41389: NOT
41390: IFFALSE 41394
// exit ;
41392: GO 42360
// for i in factories do
41394: LD_ADDR_VAR 0 8
41398: PUSH
41399: LD_VAR 0 6
41403: PUSH
41404: FOR_IN
41405: IFFALSE 41430
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41407: LD_ADDR_VAR 0 17
41411: PUSH
41412: LD_VAR 0 17
41416: PUSH
41417: LD_VAR 0 8
41421: PPUSH
41422: CALL_OW 478
41426: UNION
41427: ST_TO_ADDR
41428: GO 41404
41430: POP
41431: POP
// if not fac_list then
41432: LD_VAR 0 17
41436: NOT
41437: IFFALSE 41441
// exit ;
41439: GO 42360
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41441: LD_ADDR_VAR 0 5
41445: PUSH
41446: LD_INT 4
41448: PUSH
41449: LD_INT 5
41451: PUSH
41452: LD_INT 9
41454: PUSH
41455: LD_INT 10
41457: PUSH
41458: LD_INT 6
41460: PUSH
41461: LD_INT 7
41463: PUSH
41464: LD_INT 11
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 27
41478: PUSH
41479: LD_INT 28
41481: PUSH
41482: LD_INT 26
41484: PUSH
41485: LD_INT 30
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 43
41496: PUSH
41497: LD_INT 44
41499: PUSH
41500: LD_INT 46
41502: PUSH
41503: LD_INT 45
41505: PUSH
41506: LD_INT 47
41508: PUSH
41509: LD_INT 49
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: LIST
41524: PUSH
41525: LD_VAR 0 12
41529: ARRAY
41530: ST_TO_ADDR
// list := list isect fac_list ;
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_VAR 0 5
41540: PUSH
41541: LD_VAR 0 17
41545: ISECT
41546: ST_TO_ADDR
// if not list then
41547: LD_VAR 0 5
41551: NOT
41552: IFFALSE 41556
// exit ;
41554: GO 42360
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41556: LD_VAR 0 12
41560: PUSH
41561: LD_INT 3
41563: EQUAL
41564: PUSH
41565: LD_INT 49
41567: PUSH
41568: LD_VAR 0 5
41572: IN
41573: AND
41574: PUSH
41575: LD_INT 31
41577: PPUSH
41578: LD_VAR 0 16
41582: PPUSH
41583: CALL_OW 321
41587: PUSH
41588: LD_INT 2
41590: EQUAL
41591: AND
41592: IFFALSE 41652
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41594: LD_INT 22
41596: PUSH
41597: LD_VAR 0 16
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 35
41608: PUSH
41609: LD_INT 49
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 91
41618: PUSH
41619: LD_VAR 0 1
41623: PUSH
41624: LD_INT 10
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: PPUSH
41637: CALL_OW 69
41641: NOT
41642: IFFALSE 41652
// weapon := ru_time_lapser ;
41644: LD_ADDR_VAR 0 18
41648: PUSH
41649: LD_INT 49
41651: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41652: LD_VAR 0 12
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: IN
41667: PUSH
41668: LD_INT 11
41670: PUSH
41671: LD_VAR 0 5
41675: IN
41676: PUSH
41677: LD_INT 30
41679: PUSH
41680: LD_VAR 0 5
41684: IN
41685: OR
41686: AND
41687: PUSH
41688: LD_INT 6
41690: PPUSH
41691: LD_VAR 0 16
41695: PPUSH
41696: CALL_OW 321
41700: PUSH
41701: LD_INT 2
41703: EQUAL
41704: AND
41705: IFFALSE 41870
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41707: LD_INT 22
41709: PUSH
41710: LD_VAR 0 16
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: LD_INT 35
41724: PUSH
41725: LD_INT 11
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 35
41734: PUSH
41735: LD_INT 30
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 91
41749: PUSH
41750: LD_VAR 0 1
41754: PUSH
41755: LD_INT 18
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: PPUSH
41768: CALL_OW 69
41772: NOT
41773: PUSH
41774: LD_INT 22
41776: PUSH
41777: LD_VAR 0 16
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 30
41791: PUSH
41792: LD_INT 32
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 30
41801: PUSH
41802: LD_INT 33
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 91
41816: PUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_INT 12
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: PPUSH
41838: CALL_OW 69
41842: PUSH
41843: LD_INT 2
41845: GREATER
41846: AND
41847: IFFALSE 41870
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41849: LD_ADDR_VAR 0 18
41853: PUSH
41854: LD_INT 11
41856: PUSH
41857: LD_INT 30
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_VAR 0 12
41868: ARRAY
41869: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41870: LD_VAR 0 18
41874: NOT
41875: PUSH
41876: LD_INT 40
41878: PPUSH
41879: LD_VAR 0 16
41883: PPUSH
41884: CALL_OW 321
41888: PUSH
41889: LD_INT 2
41891: EQUAL
41892: AND
41893: PUSH
41894: LD_INT 7
41896: PUSH
41897: LD_VAR 0 5
41901: IN
41902: PUSH
41903: LD_INT 28
41905: PUSH
41906: LD_VAR 0 5
41910: IN
41911: OR
41912: PUSH
41913: LD_INT 45
41915: PUSH
41916: LD_VAR 0 5
41920: IN
41921: OR
41922: AND
41923: IFFALSE 42177
// begin hex := GetHexInfo ( x , y ) ;
41925: LD_ADDR_VAR 0 4
41929: PUSH
41930: LD_VAR 0 10
41934: PPUSH
41935: LD_VAR 0 11
41939: PPUSH
41940: CALL_OW 546
41944: ST_TO_ADDR
// if hex [ 1 ] then
41945: LD_VAR 0 4
41949: PUSH
41950: LD_INT 1
41952: ARRAY
41953: IFFALSE 41957
// exit ;
41955: GO 42360
// height := hex [ 2 ] ;
41957: LD_ADDR_VAR 0 15
41961: PUSH
41962: LD_VAR 0 4
41966: PUSH
41967: LD_INT 2
41969: ARRAY
41970: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41971: LD_ADDR_VAR 0 14
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 5
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// for i in tmp do
41994: LD_ADDR_VAR 0 8
41998: PUSH
41999: LD_VAR 0 14
42003: PUSH
42004: FOR_IN
42005: IFFALSE 42175
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42007: LD_ADDR_VAR 0 9
42011: PUSH
42012: LD_VAR 0 10
42016: PPUSH
42017: LD_VAR 0 8
42021: PPUSH
42022: LD_INT 5
42024: PPUSH
42025: CALL_OW 272
42029: PUSH
42030: LD_VAR 0 11
42034: PPUSH
42035: LD_VAR 0 8
42039: PPUSH
42040: LD_INT 5
42042: PPUSH
42043: CALL_OW 273
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42052: LD_VAR 0 9
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PPUSH
42061: LD_VAR 0 9
42065: PUSH
42066: LD_INT 2
42068: ARRAY
42069: PPUSH
42070: CALL_OW 488
42074: IFFALSE 42173
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42076: LD_ADDR_VAR 0 4
42080: PUSH
42081: LD_VAR 0 9
42085: PUSH
42086: LD_INT 1
42088: ARRAY
42089: PPUSH
42090: LD_VAR 0 9
42094: PUSH
42095: LD_INT 2
42097: ARRAY
42098: PPUSH
42099: CALL_OW 546
42103: ST_TO_ADDR
// if hex [ 1 ] then
42104: LD_VAR 0 4
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: IFFALSE 42116
// continue ;
42114: GO 42004
// h := hex [ 2 ] ;
42116: LD_ADDR_VAR 0 13
42120: PUSH
42121: LD_VAR 0 4
42125: PUSH
42126: LD_INT 2
42128: ARRAY
42129: ST_TO_ADDR
// if h + 7 < height then
42130: LD_VAR 0 13
42134: PUSH
42135: LD_INT 7
42137: PLUS
42138: PUSH
42139: LD_VAR 0 15
42143: LESS
42144: IFFALSE 42173
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42146: LD_ADDR_VAR 0 18
42150: PUSH
42151: LD_INT 7
42153: PUSH
42154: LD_INT 28
42156: PUSH
42157: LD_INT 45
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: PUSH
42165: LD_VAR 0 12
42169: ARRAY
42170: ST_TO_ADDR
// break ;
42171: GO 42175
// end ; end ; end ;
42173: GO 42004
42175: POP
42176: POP
// end ; if not weapon then
42177: LD_VAR 0 18
42181: NOT
42182: IFFALSE 42242
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42184: LD_ADDR_VAR 0 5
42188: PUSH
42189: LD_VAR 0 5
42193: PUSH
42194: LD_INT 11
42196: PUSH
42197: LD_INT 30
42199: PUSH
42200: LD_INT 49
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: DIFF
42208: ST_TO_ADDR
// if not list then
42209: LD_VAR 0 5
42213: NOT
42214: IFFALSE 42218
// exit ;
42216: GO 42360
// weapon := list [ rand ( 1 , list ) ] ;
42218: LD_ADDR_VAR 0 18
42222: PUSH
42223: LD_VAR 0 5
42227: PUSH
42228: LD_INT 1
42230: PPUSH
42231: LD_VAR 0 5
42235: PPUSH
42236: CALL_OW 12
42240: ARRAY
42241: ST_TO_ADDR
// end ; if weapon then
42242: LD_VAR 0 18
42246: IFFALSE 42360
// begin tmp := CostOfWeapon ( weapon ) ;
42248: LD_ADDR_VAR 0 14
42252: PUSH
42253: LD_VAR 0 18
42257: PPUSH
42258: CALL_OW 451
42262: ST_TO_ADDR
// j := GetBase ( tower ) ;
42263: LD_ADDR_VAR 0 9
42267: PUSH
42268: LD_VAR 0 1
42272: PPUSH
42273: CALL_OW 274
42277: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42278: LD_VAR 0 9
42282: PPUSH
42283: LD_INT 1
42285: PPUSH
42286: CALL_OW 275
42290: PUSH
42291: LD_VAR 0 14
42295: PUSH
42296: LD_INT 1
42298: ARRAY
42299: GREATEREQUAL
42300: PUSH
42301: LD_VAR 0 9
42305: PPUSH
42306: LD_INT 2
42308: PPUSH
42309: CALL_OW 275
42313: PUSH
42314: LD_VAR 0 14
42318: PUSH
42319: LD_INT 2
42321: ARRAY
42322: GREATEREQUAL
42323: AND
42324: PUSH
42325: LD_VAR 0 9
42329: PPUSH
42330: LD_INT 3
42332: PPUSH
42333: CALL_OW 275
42337: PUSH
42338: LD_VAR 0 14
42342: PUSH
42343: LD_INT 3
42345: ARRAY
42346: GREATEREQUAL
42347: AND
42348: IFFALSE 42360
// result := weapon ;
42350: LD_ADDR_VAR 0 3
42354: PUSH
42355: LD_VAR 0 18
42359: ST_TO_ADDR
// end ; end ;
42360: LD_VAR 0 3
42364: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42365: LD_INT 0
42367: PPUSH
42368: PPUSH
// result := true ;
42369: LD_ADDR_VAR 0 3
42373: PUSH
42374: LD_INT 1
42376: ST_TO_ADDR
// if array1 = array2 then
42377: LD_VAR 0 1
42381: PUSH
42382: LD_VAR 0 2
42386: EQUAL
42387: IFFALSE 42447
// begin for i = 1 to array1 do
42389: LD_ADDR_VAR 0 4
42393: PUSH
42394: DOUBLE
42395: LD_INT 1
42397: DEC
42398: ST_TO_ADDR
42399: LD_VAR 0 1
42403: PUSH
42404: FOR_TO
42405: IFFALSE 42443
// if array1 [ i ] <> array2 [ i ] then
42407: LD_VAR 0 1
42411: PUSH
42412: LD_VAR 0 4
42416: ARRAY
42417: PUSH
42418: LD_VAR 0 2
42422: PUSH
42423: LD_VAR 0 4
42427: ARRAY
42428: NONEQUAL
42429: IFFALSE 42441
// begin result := false ;
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// break ;
42439: GO 42443
// end ;
42441: GO 42404
42443: POP
42444: POP
// end else
42445: GO 42455
// result := false ;
42447: LD_ADDR_VAR 0 3
42451: PUSH
42452: LD_INT 0
42454: ST_TO_ADDR
// end ;
42455: LD_VAR 0 3
42459: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
// if not array1 or not array2 then
42464: LD_VAR 0 1
42468: NOT
42469: PUSH
42470: LD_VAR 0 2
42474: NOT
42475: OR
42476: IFFALSE 42480
// exit ;
42478: GO 42544
// result := true ;
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 1
42487: ST_TO_ADDR
// for i = 1 to array1 do
42488: LD_ADDR_VAR 0 4
42492: PUSH
42493: DOUBLE
42494: LD_INT 1
42496: DEC
42497: ST_TO_ADDR
42498: LD_VAR 0 1
42502: PUSH
42503: FOR_TO
42504: IFFALSE 42542
// if array1 [ i ] <> array2 [ i ] then
42506: LD_VAR 0 1
42510: PUSH
42511: LD_VAR 0 4
42515: ARRAY
42516: PUSH
42517: LD_VAR 0 2
42521: PUSH
42522: LD_VAR 0 4
42526: ARRAY
42527: NONEQUAL
42528: IFFALSE 42540
// begin result := false ;
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_INT 0
42537: ST_TO_ADDR
// break ;
42538: GO 42542
// end ;
42540: GO 42503
42542: POP
42543: POP
// end ;
42544: LD_VAR 0 3
42548: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42549: LD_INT 0
42551: PPUSH
42552: PPUSH
42553: PPUSH
// pom := GetBase ( fac ) ;
42554: LD_ADDR_VAR 0 5
42558: PUSH
42559: LD_VAR 0 1
42563: PPUSH
42564: CALL_OW 274
42568: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42569: LD_ADDR_VAR 0 4
42573: PUSH
42574: LD_VAR 0 2
42578: PUSH
42579: LD_INT 1
42581: ARRAY
42582: PPUSH
42583: LD_VAR 0 2
42587: PUSH
42588: LD_INT 2
42590: ARRAY
42591: PPUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 3
42599: ARRAY
42600: PPUSH
42601: LD_VAR 0 2
42605: PUSH
42606: LD_INT 4
42608: ARRAY
42609: PPUSH
42610: CALL_OW 449
42614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: LD_VAR 0 5
42624: PPUSH
42625: LD_INT 1
42627: PPUSH
42628: CALL_OW 275
42632: PUSH
42633: LD_VAR 0 4
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: GREATEREQUAL
42642: PUSH
42643: LD_VAR 0 5
42647: PPUSH
42648: LD_INT 2
42650: PPUSH
42651: CALL_OW 275
42655: PUSH
42656: LD_VAR 0 4
42660: PUSH
42661: LD_INT 2
42663: ARRAY
42664: GREATEREQUAL
42665: AND
42666: PUSH
42667: LD_VAR 0 5
42671: PPUSH
42672: LD_INT 3
42674: PPUSH
42675: CALL_OW 275
42679: PUSH
42680: LD_VAR 0 4
42684: PUSH
42685: LD_INT 3
42687: ARRAY
42688: GREATEREQUAL
42689: AND
42690: ST_TO_ADDR
// end ;
42691: LD_VAR 0 3
42695: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42696: LD_INT 0
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
// pom := GetBase ( building ) ;
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_VAR 0 1
42711: PPUSH
42712: CALL_OW 274
42716: ST_TO_ADDR
// if not pom then
42717: LD_VAR 0 3
42721: NOT
42722: IFFALSE 42726
// exit ;
42724: GO 42896
// btype := GetBType ( building ) ;
42726: LD_ADDR_VAR 0 5
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 266
42740: ST_TO_ADDR
// if btype = b_armoury then
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 4
42748: EQUAL
42749: IFFALSE 42759
// btype := b_barracks ;
42751: LD_ADDR_VAR 0 5
42755: PUSH
42756: LD_INT 5
42758: ST_TO_ADDR
// if btype = b_depot then
42759: LD_VAR 0 5
42763: PUSH
42764: LD_INT 0
42766: EQUAL
42767: IFFALSE 42777
// btype := b_warehouse ;
42769: LD_ADDR_VAR 0 5
42773: PUSH
42774: LD_INT 1
42776: ST_TO_ADDR
// if btype = b_workshop then
42777: LD_VAR 0 5
42781: PUSH
42782: LD_INT 2
42784: EQUAL
42785: IFFALSE 42795
// btype := b_factory ;
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: LD_INT 3
42794: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42795: LD_ADDR_VAR 0 4
42799: PUSH
42800: LD_VAR 0 5
42804: PPUSH
42805: LD_VAR 0 1
42809: PPUSH
42810: CALL_OW 248
42814: PPUSH
42815: CALL_OW 450
42819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42820: LD_ADDR_VAR 0 2
42824: PUSH
42825: LD_VAR 0 3
42829: PPUSH
42830: LD_INT 1
42832: PPUSH
42833: CALL_OW 275
42837: PUSH
42838: LD_VAR 0 4
42842: PUSH
42843: LD_INT 1
42845: ARRAY
42846: GREATEREQUAL
42847: PUSH
42848: LD_VAR 0 3
42852: PPUSH
42853: LD_INT 2
42855: PPUSH
42856: CALL_OW 275
42860: PUSH
42861: LD_VAR 0 4
42865: PUSH
42866: LD_INT 2
42868: ARRAY
42869: GREATEREQUAL
42870: AND
42871: PUSH
42872: LD_VAR 0 3
42876: PPUSH
42877: LD_INT 3
42879: PPUSH
42880: CALL_OW 275
42884: PUSH
42885: LD_VAR 0 4
42889: PUSH
42890: LD_INT 3
42892: ARRAY
42893: GREATEREQUAL
42894: AND
42895: ST_TO_ADDR
// end ;
42896: LD_VAR 0 2
42900: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
42905: PPUSH
// pom := GetBase ( building ) ;
42906: LD_ADDR_VAR 0 4
42910: PUSH
42911: LD_VAR 0 1
42915: PPUSH
42916: CALL_OW 274
42920: ST_TO_ADDR
// if not pom then
42921: LD_VAR 0 4
42925: NOT
42926: IFFALSE 42930
// exit ;
42928: GO 43031
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42930: LD_ADDR_VAR 0 5
42934: PUSH
42935: LD_VAR 0 2
42939: PPUSH
42940: LD_VAR 0 1
42944: PPUSH
42945: CALL_OW 248
42949: PPUSH
42950: CALL_OW 450
42954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_VAR 0 4
42964: PPUSH
42965: LD_INT 1
42967: PPUSH
42968: CALL_OW 275
42972: PUSH
42973: LD_VAR 0 5
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: GREATEREQUAL
42982: PUSH
42983: LD_VAR 0 4
42987: PPUSH
42988: LD_INT 2
42990: PPUSH
42991: CALL_OW 275
42995: PUSH
42996: LD_VAR 0 5
43000: PUSH
43001: LD_INT 2
43003: ARRAY
43004: GREATEREQUAL
43005: AND
43006: PUSH
43007: LD_VAR 0 4
43011: PPUSH
43012: LD_INT 3
43014: PPUSH
43015: CALL_OW 275
43019: PUSH
43020: LD_VAR 0 5
43024: PUSH
43025: LD_INT 3
43027: ARRAY
43028: GREATEREQUAL
43029: AND
43030: ST_TO_ADDR
// end ;
43031: LD_VAR 0 3
43035: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43036: LD_INT 0
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
// result := false ;
43049: LD_ADDR_VAR 0 8
43053: PUSH
43054: LD_INT 0
43056: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43057: LD_VAR 0 5
43061: NOT
43062: PUSH
43063: LD_VAR 0 1
43067: NOT
43068: OR
43069: PUSH
43070: LD_VAR 0 2
43074: NOT
43075: OR
43076: PUSH
43077: LD_VAR 0 3
43081: NOT
43082: OR
43083: IFFALSE 43087
// exit ;
43085: GO 43901
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43087: LD_ADDR_VAR 0 14
43091: PUSH
43092: LD_VAR 0 1
43096: PPUSH
43097: LD_VAR 0 2
43101: PPUSH
43102: LD_VAR 0 3
43106: PPUSH
43107: LD_VAR 0 4
43111: PPUSH
43112: LD_VAR 0 5
43116: PUSH
43117: LD_INT 1
43119: ARRAY
43120: PPUSH
43121: CALL_OW 248
43125: PPUSH
43126: LD_INT 0
43128: PPUSH
43129: CALL 45134 0 6
43133: ST_TO_ADDR
// if not hexes then
43134: LD_VAR 0 14
43138: NOT
43139: IFFALSE 43143
// exit ;
43141: GO 43901
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43143: LD_ADDR_VAR 0 17
43147: PUSH
43148: LD_VAR 0 5
43152: PPUSH
43153: LD_INT 22
43155: PUSH
43156: LD_VAR 0 13
43160: PPUSH
43161: CALL_OW 255
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 30
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 30
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PPUSH
43202: CALL_OW 72
43206: ST_TO_ADDR
// for i = 1 to hexes do
43207: LD_ADDR_VAR 0 9
43211: PUSH
43212: DOUBLE
43213: LD_INT 1
43215: DEC
43216: ST_TO_ADDR
43217: LD_VAR 0 14
43221: PUSH
43222: FOR_TO
43223: IFFALSE 43899
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43225: LD_ADDR_VAR 0 13
43229: PUSH
43230: LD_VAR 0 14
43234: PUSH
43235: LD_VAR 0 9
43239: ARRAY
43240: PUSH
43241: LD_INT 1
43243: ARRAY
43244: PPUSH
43245: LD_VAR 0 14
43249: PUSH
43250: LD_VAR 0 9
43254: ARRAY
43255: PUSH
43256: LD_INT 2
43258: ARRAY
43259: PPUSH
43260: CALL_OW 428
43264: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43265: LD_VAR 0 14
43269: PUSH
43270: LD_VAR 0 9
43274: ARRAY
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PPUSH
43280: LD_VAR 0 14
43284: PUSH
43285: LD_VAR 0 9
43289: ARRAY
43290: PUSH
43291: LD_INT 2
43293: ARRAY
43294: PPUSH
43295: CALL_OW 351
43299: PUSH
43300: LD_VAR 0 14
43304: PUSH
43305: LD_VAR 0 9
43309: ARRAY
43310: PUSH
43311: LD_INT 1
43313: ARRAY
43314: PPUSH
43315: LD_VAR 0 14
43319: PUSH
43320: LD_VAR 0 9
43324: ARRAY
43325: PUSH
43326: LD_INT 2
43328: ARRAY
43329: PPUSH
43330: CALL_OW 488
43334: NOT
43335: OR
43336: PUSH
43337: LD_VAR 0 13
43341: PPUSH
43342: CALL_OW 247
43346: PUSH
43347: LD_INT 3
43349: EQUAL
43350: OR
43351: IFFALSE 43357
// exit ;
43353: POP
43354: POP
43355: GO 43901
// if not tmp then
43357: LD_VAR 0 13
43361: NOT
43362: IFFALSE 43366
// continue ;
43364: GO 43222
// result := true ;
43366: LD_ADDR_VAR 0 8
43370: PUSH
43371: LD_INT 1
43373: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43374: LD_VAR 0 6
43378: PUSH
43379: LD_VAR 0 13
43383: PPUSH
43384: CALL_OW 247
43388: PUSH
43389: LD_INT 2
43391: EQUAL
43392: AND
43393: PUSH
43394: LD_VAR 0 13
43398: PPUSH
43399: CALL_OW 263
43403: PUSH
43404: LD_INT 1
43406: EQUAL
43407: AND
43408: IFFALSE 43572
// begin if IsDrivenBy ( tmp ) then
43410: LD_VAR 0 13
43414: PPUSH
43415: CALL_OW 311
43419: IFFALSE 43423
// continue ;
43421: GO 43222
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43423: LD_VAR 0 6
43427: PPUSH
43428: LD_INT 3
43430: PUSH
43431: LD_INT 60
43433: PUSH
43434: EMPTY
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 55
43446: PUSH
43447: EMPTY
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PPUSH
43458: CALL_OW 72
43462: IFFALSE 43570
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43464: LD_ADDR_VAR 0 18
43468: PUSH
43469: LD_VAR 0 6
43473: PPUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 60
43479: PUSH
43480: EMPTY
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 55
43492: PUSH
43493: EMPTY
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PPUSH
43504: CALL_OW 72
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: ST_TO_ADDR
// if IsInUnit ( driver ) then
43513: LD_VAR 0 18
43517: PPUSH
43518: CALL_OW 310
43522: IFFALSE 43533
// ComExit ( driver ) ;
43524: LD_VAR 0 18
43528: PPUSH
43529: CALL 68822 0 1
// AddComEnterUnit ( driver , tmp ) ;
43533: LD_VAR 0 18
43537: PPUSH
43538: LD_VAR 0 13
43542: PPUSH
43543: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43547: LD_VAR 0 18
43551: PPUSH
43552: LD_VAR 0 7
43556: PPUSH
43557: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43561: LD_VAR 0 18
43565: PPUSH
43566: CALL_OW 181
// end ; continue ;
43570: GO 43222
// end ; if not cleaners or not tmp in cleaners then
43572: LD_VAR 0 6
43576: NOT
43577: PUSH
43578: LD_VAR 0 13
43582: PUSH
43583: LD_VAR 0 6
43587: IN
43588: NOT
43589: OR
43590: IFFALSE 43897
// begin if dep then
43592: LD_VAR 0 17
43596: IFFALSE 43732
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43598: LD_ADDR_VAR 0 16
43602: PUSH
43603: LD_VAR 0 17
43607: PUSH
43608: LD_INT 1
43610: ARRAY
43611: PPUSH
43612: CALL_OW 250
43616: PPUSH
43617: LD_VAR 0 17
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PPUSH
43626: CALL_OW 254
43630: PPUSH
43631: LD_INT 5
43633: PPUSH
43634: CALL_OW 272
43638: PUSH
43639: LD_VAR 0 17
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PPUSH
43648: CALL_OW 251
43652: PPUSH
43653: LD_VAR 0 17
43657: PUSH
43658: LD_INT 1
43660: ARRAY
43661: PPUSH
43662: CALL_OW 254
43666: PPUSH
43667: LD_INT 5
43669: PPUSH
43670: CALL_OW 273
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43679: LD_VAR 0 16
43683: PUSH
43684: LD_INT 1
43686: ARRAY
43687: PPUSH
43688: LD_VAR 0 16
43692: PUSH
43693: LD_INT 2
43695: ARRAY
43696: PPUSH
43697: CALL_OW 488
43701: IFFALSE 43732
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43703: LD_VAR 0 13
43707: PPUSH
43708: LD_VAR 0 16
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: LD_VAR 0 16
43721: PUSH
43722: LD_INT 2
43724: ARRAY
43725: PPUSH
43726: CALL_OW 111
// continue ;
43730: GO 43222
// end ; end ; r := GetDir ( tmp ) ;
43732: LD_ADDR_VAR 0 15
43736: PUSH
43737: LD_VAR 0 13
43741: PPUSH
43742: CALL_OW 254
43746: ST_TO_ADDR
// if r = 5 then
43747: LD_VAR 0 15
43751: PUSH
43752: LD_INT 5
43754: EQUAL
43755: IFFALSE 43765
// r := 0 ;
43757: LD_ADDR_VAR 0 15
43761: PUSH
43762: LD_INT 0
43764: ST_TO_ADDR
// for j = r to 5 do
43765: LD_ADDR_VAR 0 10
43769: PUSH
43770: DOUBLE
43771: LD_VAR 0 15
43775: DEC
43776: ST_TO_ADDR
43777: LD_INT 5
43779: PUSH
43780: FOR_TO
43781: IFFALSE 43895
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43783: LD_ADDR_VAR 0 11
43787: PUSH
43788: LD_VAR 0 13
43792: PPUSH
43793: CALL_OW 250
43797: PPUSH
43798: LD_VAR 0 10
43802: PPUSH
43803: LD_INT 2
43805: PPUSH
43806: CALL_OW 272
43810: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43811: LD_ADDR_VAR 0 12
43815: PUSH
43816: LD_VAR 0 13
43820: PPUSH
43821: CALL_OW 251
43825: PPUSH
43826: LD_VAR 0 10
43830: PPUSH
43831: LD_INT 2
43833: PPUSH
43834: CALL_OW 273
43838: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43839: LD_VAR 0 11
43843: PPUSH
43844: LD_VAR 0 12
43848: PPUSH
43849: CALL_OW 488
43853: PUSH
43854: LD_VAR 0 11
43858: PPUSH
43859: LD_VAR 0 12
43863: PPUSH
43864: CALL_OW 428
43868: NOT
43869: AND
43870: IFFALSE 43893
// begin ComMoveXY ( tmp , _x , _y ) ;
43872: LD_VAR 0 13
43876: PPUSH
43877: LD_VAR 0 11
43881: PPUSH
43882: LD_VAR 0 12
43886: PPUSH
43887: CALL_OW 111
// break ;
43891: GO 43895
// end ; end ;
43893: GO 43780
43895: POP
43896: POP
// end ; end ;
43897: GO 43222
43899: POP
43900: POP
// end ;
43901: LD_VAR 0 8
43905: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43906: LD_INT 0
43908: PPUSH
// result := true ;
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_INT 1
43916: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43917: LD_VAR 0 2
43921: PUSH
43922: LD_INT 24
43924: DOUBLE
43925: EQUAL
43926: IFTRUE 43936
43928: LD_INT 33
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43961
43936: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_INT 32
43944: PPUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 321
43954: PUSH
43955: LD_INT 2
43957: EQUAL
43958: ST_TO_ADDR
43959: GO 44277
43961: LD_INT 20
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43969
43967: GO 43994
43969: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43970: LD_ADDR_VAR 0 3
43974: PUSH
43975: LD_INT 6
43977: PPUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 321
43987: PUSH
43988: LD_INT 2
43990: EQUAL
43991: ST_TO_ADDR
43992: GO 44277
43994: LD_INT 22
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44008
44000: LD_INT 36
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 44033
44008: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_INT 15
44016: PPUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 321
44026: PUSH
44027: LD_INT 2
44029: EQUAL
44030: ST_TO_ADDR
44031: GO 44277
44033: LD_INT 30
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44066
44041: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 20
44049: PPUSH
44050: LD_VAR 0 1
44054: PPUSH
44055: CALL_OW 321
44059: PUSH
44060: LD_INT 2
44062: EQUAL
44063: ST_TO_ADDR
44064: GO 44277
44066: LD_INT 28
44068: DOUBLE
44069: EQUAL
44070: IFTRUE 44080
44072: LD_INT 21
44074: DOUBLE
44075: EQUAL
44076: IFTRUE 44080
44078: GO 44105
44080: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44081: LD_ADDR_VAR 0 3
44085: PUSH
44086: LD_INT 21
44088: PPUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 321
44098: PUSH
44099: LD_INT 2
44101: EQUAL
44102: ST_TO_ADDR
44103: GO 44277
44105: LD_INT 16
44107: DOUBLE
44108: EQUAL
44109: IFTRUE 44113
44111: GO 44138
44113: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44114: LD_ADDR_VAR 0 3
44118: PUSH
44119: LD_INT 84
44121: PPUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 321
44131: PUSH
44132: LD_INT 2
44134: EQUAL
44135: ST_TO_ADDR
44136: GO 44277
44138: LD_INT 19
44140: DOUBLE
44141: EQUAL
44142: IFTRUE 44152
44144: LD_INT 23
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44177
44152: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 83
44160: PPUSH
44161: LD_VAR 0 1
44165: PPUSH
44166: CALL_OW 321
44170: PUSH
44171: LD_INT 2
44173: EQUAL
44174: ST_TO_ADDR
44175: GO 44277
44177: LD_INT 17
44179: DOUBLE
44180: EQUAL
44181: IFTRUE 44185
44183: GO 44210
44185: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44186: LD_ADDR_VAR 0 3
44190: PUSH
44191: LD_INT 39
44193: PPUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 321
44203: PUSH
44204: LD_INT 2
44206: EQUAL
44207: ST_TO_ADDR
44208: GO 44277
44210: LD_INT 18
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44243
44218: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 40
44226: PPUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 321
44236: PUSH
44237: LD_INT 2
44239: EQUAL
44240: ST_TO_ADDR
44241: GO 44277
44243: LD_INT 27
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44276
44251: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_INT 35
44259: PPUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 321
44269: PUSH
44270: LD_INT 2
44272: EQUAL
44273: ST_TO_ADDR
44274: GO 44277
44276: POP
// end ;
44277: LD_VAR 0 3
44281: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44282: LD_INT 0
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
// result := false ;
44295: LD_ADDR_VAR 0 6
44299: PUSH
44300: LD_INT 0
44302: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44303: LD_VAR 0 1
44307: NOT
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 266
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: IN
44329: NOT
44330: OR
44331: PUSH
44332: LD_VAR 0 2
44336: NOT
44337: OR
44338: PUSH
44339: LD_VAR 0 5
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: LD_INT 5
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: IN
44370: NOT
44371: OR
44372: PUSH
44373: LD_VAR 0 3
44377: PPUSH
44378: LD_VAR 0 4
44382: PPUSH
44383: CALL_OW 488
44387: NOT
44388: OR
44389: IFFALSE 44393
// exit ;
44391: GO 45129
// side := GetSide ( depot ) ;
44393: LD_ADDR_VAR 0 9
44397: PUSH
44398: LD_VAR 0 1
44402: PPUSH
44403: CALL_OW 255
44407: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44408: LD_VAR 0 9
44412: PPUSH
44413: LD_VAR 0 2
44417: PPUSH
44418: CALL 43906 0 2
44422: NOT
44423: IFFALSE 44427
// exit ;
44425: GO 45129
// pom := GetBase ( depot ) ;
44427: LD_ADDR_VAR 0 10
44431: PUSH
44432: LD_VAR 0 1
44436: PPUSH
44437: CALL_OW 274
44441: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44442: LD_ADDR_VAR 0 11
44446: PUSH
44447: LD_VAR 0 2
44451: PPUSH
44452: LD_VAR 0 1
44456: PPUSH
44457: CALL_OW 248
44461: PPUSH
44462: CALL_OW 450
44466: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44467: LD_VAR 0 10
44471: PPUSH
44472: LD_INT 1
44474: PPUSH
44475: CALL_OW 275
44479: PUSH
44480: LD_VAR 0 11
44484: PUSH
44485: LD_INT 1
44487: ARRAY
44488: GREATEREQUAL
44489: PUSH
44490: LD_VAR 0 10
44494: PPUSH
44495: LD_INT 2
44497: PPUSH
44498: CALL_OW 275
44502: PUSH
44503: LD_VAR 0 11
44507: PUSH
44508: LD_INT 2
44510: ARRAY
44511: GREATEREQUAL
44512: AND
44513: PUSH
44514: LD_VAR 0 10
44518: PPUSH
44519: LD_INT 3
44521: PPUSH
44522: CALL_OW 275
44526: PUSH
44527: LD_VAR 0 11
44531: PUSH
44532: LD_INT 3
44534: ARRAY
44535: GREATEREQUAL
44536: AND
44537: NOT
44538: IFFALSE 44542
// exit ;
44540: GO 45129
// if GetBType ( depot ) = b_depot then
44542: LD_VAR 0 1
44546: PPUSH
44547: CALL_OW 266
44551: PUSH
44552: LD_INT 0
44554: EQUAL
44555: IFFALSE 44567
// dist := 28 else
44557: LD_ADDR_VAR 0 14
44561: PUSH
44562: LD_INT 28
44564: ST_TO_ADDR
44565: GO 44575
// dist := 36 ;
44567: LD_ADDR_VAR 0 14
44571: PUSH
44572: LD_INT 36
44574: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 3
44584: PPUSH
44585: LD_VAR 0 4
44589: PPUSH
44590: CALL_OW 297
44594: PUSH
44595: LD_VAR 0 14
44599: GREATER
44600: IFFALSE 44604
// exit ;
44602: GO 45129
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44604: LD_ADDR_VAR 0 12
44608: PUSH
44609: LD_VAR 0 2
44613: PPUSH
44614: LD_VAR 0 3
44618: PPUSH
44619: LD_VAR 0 4
44623: PPUSH
44624: LD_VAR 0 5
44628: PPUSH
44629: LD_VAR 0 1
44633: PPUSH
44634: CALL_OW 248
44638: PPUSH
44639: LD_INT 0
44641: PPUSH
44642: CALL 45134 0 6
44646: ST_TO_ADDR
// if not hexes then
44647: LD_VAR 0 12
44651: NOT
44652: IFFALSE 44656
// exit ;
44654: GO 45129
// hex := GetHexInfo ( x , y ) ;
44656: LD_ADDR_VAR 0 15
44660: PUSH
44661: LD_VAR 0 3
44665: PPUSH
44666: LD_VAR 0 4
44670: PPUSH
44671: CALL_OW 546
44675: ST_TO_ADDR
// if hex [ 1 ] then
44676: LD_VAR 0 15
44680: PUSH
44681: LD_INT 1
44683: ARRAY
44684: IFFALSE 44688
// exit ;
44686: GO 45129
// height := hex [ 2 ] ;
44688: LD_ADDR_VAR 0 13
44692: PUSH
44693: LD_VAR 0 15
44697: PUSH
44698: LD_INT 2
44700: ARRAY
44701: ST_TO_ADDR
// for i = 1 to hexes do
44702: LD_ADDR_VAR 0 7
44706: PUSH
44707: DOUBLE
44708: LD_INT 1
44710: DEC
44711: ST_TO_ADDR
44712: LD_VAR 0 12
44716: PUSH
44717: FOR_TO
44718: IFFALSE 45048
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44720: LD_VAR 0 12
44724: PUSH
44725: LD_VAR 0 7
44729: ARRAY
44730: PUSH
44731: LD_INT 1
44733: ARRAY
44734: PPUSH
44735: LD_VAR 0 12
44739: PUSH
44740: LD_VAR 0 7
44744: ARRAY
44745: PUSH
44746: LD_INT 2
44748: ARRAY
44749: PPUSH
44750: CALL_OW 488
44754: NOT
44755: PUSH
44756: LD_VAR 0 12
44760: PUSH
44761: LD_VAR 0 7
44765: ARRAY
44766: PUSH
44767: LD_INT 1
44769: ARRAY
44770: PPUSH
44771: LD_VAR 0 12
44775: PUSH
44776: LD_VAR 0 7
44780: ARRAY
44781: PUSH
44782: LD_INT 2
44784: ARRAY
44785: PPUSH
44786: CALL_OW 428
44790: PUSH
44791: LD_INT 0
44793: GREATER
44794: OR
44795: PUSH
44796: LD_VAR 0 12
44800: PUSH
44801: LD_VAR 0 7
44805: ARRAY
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: PPUSH
44811: LD_VAR 0 12
44815: PUSH
44816: LD_VAR 0 7
44820: ARRAY
44821: PUSH
44822: LD_INT 2
44824: ARRAY
44825: PPUSH
44826: CALL_OW 351
44830: OR
44831: IFFALSE 44837
// exit ;
44833: POP
44834: POP
44835: GO 45129
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44837: LD_ADDR_VAR 0 8
44841: PUSH
44842: LD_VAR 0 12
44846: PUSH
44847: LD_VAR 0 7
44851: ARRAY
44852: PUSH
44853: LD_INT 1
44855: ARRAY
44856: PPUSH
44857: LD_VAR 0 12
44861: PUSH
44862: LD_VAR 0 7
44866: ARRAY
44867: PUSH
44868: LD_INT 2
44870: ARRAY
44871: PPUSH
44872: CALL_OW 546
44876: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44877: LD_VAR 0 8
44881: PUSH
44882: LD_INT 1
44884: ARRAY
44885: PUSH
44886: LD_VAR 0 8
44890: PUSH
44891: LD_INT 2
44893: ARRAY
44894: PUSH
44895: LD_VAR 0 13
44899: PUSH
44900: LD_INT 2
44902: PLUS
44903: GREATER
44904: OR
44905: PUSH
44906: LD_VAR 0 8
44910: PUSH
44911: LD_INT 2
44913: ARRAY
44914: PUSH
44915: LD_VAR 0 13
44919: PUSH
44920: LD_INT 2
44922: MINUS
44923: LESS
44924: OR
44925: PUSH
44926: LD_VAR 0 8
44930: PUSH
44931: LD_INT 3
44933: ARRAY
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 8
44940: PUSH
44941: LD_INT 9
44943: PUSH
44944: LD_INT 10
44946: PUSH
44947: LD_INT 11
44949: PUSH
44950: LD_INT 12
44952: PUSH
44953: LD_INT 13
44955: PUSH
44956: LD_INT 16
44958: PUSH
44959: LD_INT 17
44961: PUSH
44962: LD_INT 18
44964: PUSH
44965: LD_INT 19
44967: PUSH
44968: LD_INT 20
44970: PUSH
44971: LD_INT 21
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: IN
44989: NOT
44990: OR
44991: PUSH
44992: LD_VAR 0 8
44996: PUSH
44997: LD_INT 5
44999: ARRAY
45000: NOT
45001: OR
45002: PUSH
45003: LD_VAR 0 8
45007: PUSH
45008: LD_INT 6
45010: ARRAY
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 7
45020: PUSH
45021: LD_INT 9
45023: PUSH
45024: LD_INT 10
45026: PUSH
45027: LD_INT 11
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: IN
45038: NOT
45039: OR
45040: IFFALSE 45046
// exit ;
45042: POP
45043: POP
45044: GO 45129
// end ;
45046: GO 44717
45048: POP
45049: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45050: LD_VAR 0 9
45054: PPUSH
45055: LD_VAR 0 3
45059: PPUSH
45060: LD_VAR 0 4
45064: PPUSH
45065: LD_INT 20
45067: PPUSH
45068: CALL 37081 0 4
45072: PUSH
45073: LD_INT 4
45075: ARRAY
45076: IFFALSE 45080
// exit ;
45078: GO 45129
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45080: LD_VAR 0 2
45084: PUSH
45085: LD_INT 29
45087: PUSH
45088: LD_INT 30
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: IN
45095: PUSH
45096: LD_VAR 0 3
45100: PPUSH
45101: LD_VAR 0 4
45105: PPUSH
45106: LD_VAR 0 9
45110: PPUSH
45111: CALL_OW 440
45115: NOT
45116: AND
45117: IFFALSE 45121
// exit ;
45119: GO 45129
// result := true ;
45121: LD_ADDR_VAR 0 6
45125: PUSH
45126: LD_INT 1
45128: ST_TO_ADDR
// end ;
45129: LD_VAR 0 6
45133: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45134: LD_INT 0
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
// result = [ ] ;
45194: LD_ADDR_VAR 0 7
45198: PUSH
45199: EMPTY
45200: ST_TO_ADDR
// temp_list = [ ] ;
45201: LD_ADDR_VAR 0 9
45205: PUSH
45206: EMPTY
45207: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45208: LD_VAR 0 4
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 4
45227: PUSH
45228: LD_INT 5
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: IN
45239: NOT
45240: PUSH
45241: LD_VAR 0 1
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: IN
45256: PUSH
45257: LD_VAR 0 5
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: IN
45276: NOT
45277: AND
45278: OR
45279: IFFALSE 45283
// exit ;
45281: GO 63674
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45283: LD_VAR 0 1
45287: PUSH
45288: LD_INT 6
45290: PUSH
45291: LD_INT 7
45293: PUSH
45294: LD_INT 8
45296: PUSH
45297: LD_INT 13
45299: PUSH
45300: LD_INT 12
45302: PUSH
45303: LD_INT 15
45305: PUSH
45306: LD_INT 11
45308: PUSH
45309: LD_INT 14
45311: PUSH
45312: LD_INT 10
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: IN
45326: IFFALSE 45336
// btype = b_lab ;
45328: LD_ADDR_VAR 0 1
45332: PUSH
45333: LD_INT 6
45335: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45336: LD_VAR 0 6
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: IN
45355: NOT
45356: PUSH
45357: LD_VAR 0 1
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: LD_INT 6
45376: PUSH
45377: LD_INT 36
45379: PUSH
45380: LD_INT 4
45382: PUSH
45383: LD_INT 5
45385: PUSH
45386: LD_INT 31
45388: PUSH
45389: LD_INT 32
45391: PUSH
45392: LD_INT 33
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: IN
45408: NOT
45409: PUSH
45410: LD_VAR 0 6
45414: PUSH
45415: LD_INT 1
45417: EQUAL
45418: AND
45419: OR
45420: PUSH
45421: LD_VAR 0 1
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: IN
45436: NOT
45437: PUSH
45438: LD_VAR 0 6
45442: PUSH
45443: LD_INT 2
45445: EQUAL
45446: AND
45447: OR
45448: IFFALSE 45458
// mode = 0 ;
45450: LD_ADDR_VAR 0 6
45454: PUSH
45455: LD_INT 0
45457: ST_TO_ADDR
// case mode of 0 :
45458: LD_VAR 0 6
45462: PUSH
45463: LD_INT 0
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45471
45469: GO 56924
45471: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45472: LD_ADDR_VAR 0 11
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 3
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 3
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45665: LD_ADDR_VAR 0 12
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45861: LD_ADDR_VAR 0 13
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46060: LD_ADDR_VAR 0 14
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 3
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46256: LD_ADDR_VAR 0 15
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46449: LD_ADDR_VAR 0 16
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 3
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46642: LD_ADDR_VAR 0 17
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46872: LD_ADDR_VAR 0 18
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47102: LD_ADDR_VAR 0 19
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 20
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 21
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47792: LD_ADDR_VAR 0 22
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48022: LD_ADDR_VAR 0 23
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 3
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48302: LD_ADDR_VAR 0 24
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48578: LD_ADDR_VAR 0 25
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48852: LD_ADDR_VAR 0 26
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49128: LD_ADDR_VAR 0 27
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49408: LD_ADDR_VAR 0 28
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49690: LD_ADDR_VAR 0 29
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49969: LD_ADDR_VAR 0 30
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 3
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50247: LD_ADDR_VAR 0 31
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50525: LD_ADDR_VAR 0 32
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50803: LD_ADDR_VAR 0 33
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51082: LD_ADDR_VAR 0 34
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51362: LD_ADDR_VAR 0 35
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51474: LD_ADDR_VAR 0 36
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51586: LD_ADDR_VAR 0 37
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51698: LD_ADDR_VAR 0 38
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51810: LD_ADDR_VAR 0 39
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51922: LD_ADDR_VAR 0 40
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52034: LD_ADDR_VAR 0 41
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52384: LD_ADDR_VAR 0 42
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 3
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52734: LD_ADDR_VAR 0 43
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53082: LD_ADDR_VAR 0 44
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53432: LD_ADDR_VAR 0 45
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53782: LD_ADDR_VAR 0 46
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54130: LD_ADDR_VAR 0 47
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54281: LD_ADDR_VAR 0 48
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54428: LD_ADDR_VAR 0 49
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54572: LD_ADDR_VAR 0 50
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54716: LD_ADDR_VAR 0 51
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54863: LD_ADDR_VAR 0 52
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55014: LD_ADDR_VAR 0 53
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55244: LD_ADDR_VAR 0 54
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55474: LD_ADDR_VAR 0 55
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55704: LD_ADDR_VAR 0 56
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55934: LD_ADDR_VAR 0 57
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56164: LD_ADDR_VAR 0 58
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56394: LD_ADDR_VAR 0 59
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56482: LD_ADDR_VAR 0 60
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56570: LD_ADDR_VAR 0 61
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56658: LD_ADDR_VAR 0 62
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56746: LD_ADDR_VAR 0 63
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56834: LD_ADDR_VAR 0 64
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// end ; 1 :
56922: GO 62819
56924: LD_INT 1
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56932
56930: GO 59555
56932: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56933: LD_ADDR_VAR 0 11
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56977: LD_ADDR_VAR 0 12
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57018: LD_ADDR_VAR 0 13
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57058: LD_ADDR_VAR 0 14
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57099: LD_ADDR_VAR 0 15
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57143: LD_ADDR_VAR 0 16
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 3
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57189: LD_ADDR_VAR 0 17
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57233: LD_ADDR_VAR 0 18
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57274: LD_ADDR_VAR 0 19
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57314: LD_ADDR_VAR 0 20
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57355: LD_ADDR_VAR 0 21
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57399: LD_ADDR_VAR 0 22
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57445: LD_ADDR_VAR 0 23
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 3
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57489: LD_ADDR_VAR 0 24
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 4
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57530: LD_ADDR_VAR 0 25
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57570: LD_ADDR_VAR 0 26
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 4
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57611: LD_ADDR_VAR 0 27
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57655: LD_ADDR_VAR 0 28
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57701: LD_ADDR_VAR 0 29
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 4
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 5
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 5
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: LD_INT 4
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 6
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 6
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 5
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57856: LD_ADDR_VAR 0 30
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 4
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 5
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 5
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 6
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 6
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57999: LD_ADDR_VAR 0 31
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 5
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 5
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 4
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 6
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 6
58106: PUSH
58107: LD_INT 6
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 5
58116: PUSH
58117: LD_INT 6
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58138: LD_ADDR_VAR 0 32
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 6
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 6
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 5
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58281: LD_ADDR_VAR 0 33
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 4
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 4
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 5
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 5
58390: NEG
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 6
58401: NEG
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 6
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58436: LD_ADDR_VAR 0 34
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 5
58527: NEG
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: NEG
58540: PUSH
58541: LD_INT 5
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 5
58551: NEG
58552: PUSH
58553: LD_INT 6
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 6
58563: NEG
58564: PUSH
58565: LD_INT 5
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 6
58575: NEG
58576: PUSH
58577: LD_INT 6
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58599: LD_ADDR_VAR 0 41
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58643: LD_ADDR_VAR 0 42
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58684: LD_ADDR_VAR 0 43
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58724: LD_ADDR_VAR 0 44
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58765: LD_ADDR_VAR 0 45
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58809: LD_ADDR_VAR 0 46
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58855: LD_ADDR_VAR 0 47
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58888: LD_ADDR_VAR 0 48
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58919: LD_ADDR_VAR 0 49
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58948: LD_ADDR_VAR 0 50
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58977: LD_ADDR_VAR 0 51
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59008: LD_ADDR_VAR 0 52
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59041: LD_ADDR_VAR 0 53
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 3
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59085: LD_ADDR_VAR 0 54
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: LIST
59125: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59126: LD_ADDR_VAR 0 55
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59166: LD_ADDR_VAR 0 56
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59207: LD_ADDR_VAR 0 57
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: NEG
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59251: LD_ADDR_VAR 0 58
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59297: LD_ADDR_VAR 0 59
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59341: LD_ADDR_VAR 0 60
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59382: LD_ADDR_VAR 0 61
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59422: LD_ADDR_VAR 0 62
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: LIST
59462: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59463: LD_ADDR_VAR 0 63
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59507: LD_ADDR_VAR 0 64
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// end ; 2 :
59553: GO 62819
59555: LD_INT 2
59557: DOUBLE
59558: EQUAL
59559: IFTRUE 59563
59561: GO 62818
59563: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59564: LD_ADDR_VAR 0 29
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 5
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: LD_INT 3
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 4
59694: PUSH
59695: LD_INT 4
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 4
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 4
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 4
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: LD_INT 4
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: LD_INT 5
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: NEG
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 5
60009: NEG
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 5
60021: NEG
60022: PUSH
60023: LD_INT 5
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: LD_INT 5
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60102: LD_ADDR_VAR 0 30
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: LD_INT 3
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 5
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: LD_INT 5
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: LD_INT 5
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 3
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 3
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 5
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 5
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 4
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 4
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 5
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 5
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: LD_INT 4
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 4
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 4
60466: NEG
60467: PUSH
60468: LD_INT 4
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 4
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 4
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 5
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 3
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 3
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 4
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 5
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 5
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60649: LD_ADDR_VAR 0 31
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 4
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 5
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 5
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: LD_INT 5
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 3
60749: NEG
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 4
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: NEG
60864: PUSH
60865: LD_INT 5
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 5
60911: NEG
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 5
60923: NEG
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 3
60935: NEG
60936: PUSH
60937: LD_INT 5
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: LD_INT 3
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 4
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 4
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 4
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 5
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61199: LD_ADDR_VAR 0 32
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 5
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: LD_INT 4
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: NEG
61393: PUSH
61394: LD_INT 4
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 4
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 5
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 3
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 4
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 5
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 5
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 4
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 5
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 5
61641: PUSH
61642: LD_INT 5
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: LD_INT 4
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 5
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61746: LD_ADDR_VAR 0 33
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 5
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: LD_INT 4
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 4
61801: NEG
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 4
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: NEG
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 3
61837: NEG
61838: PUSH
61839: LD_INT 5
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 4
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 3
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 4
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 4
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 5
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 5
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 4
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 4
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 4
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: LD_INT 4
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 4
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: LD_INT 4
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 5
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: LD_INT 5
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62284: LD_ADDR_VAR 0 34
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 4
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 5
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 4
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 3
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 4
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 5
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: LD_INT 5
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 3
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 3
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 4
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 4
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: LD_INT 4
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 5
62506: PUSH
62507: LD_INT 4
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: LD_INT 5
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 4
62526: PUSH
62527: LD_INT 5
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: LD_INT 4
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 5
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: LD_INT 5
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 3
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 4
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 4
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 4
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 5
62725: NEG
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 5
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 5
62748: NEG
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// end ; end ;
62816: GO 62819
62818: POP
// case btype of b_depot , b_warehouse :
62819: LD_VAR 0 1
62823: PUSH
62824: LD_INT 0
62826: DOUBLE
62827: EQUAL
62828: IFTRUE 62838
62830: LD_INT 1
62832: DOUBLE
62833: EQUAL
62834: IFTRUE 62838
62836: GO 63039
62838: POP
// case nation of nation_american :
62839: LD_VAR 0 5
62843: PUSH
62844: LD_INT 1
62846: DOUBLE
62847: EQUAL
62848: IFTRUE 62852
62850: GO 62908
62852: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62853: LD_ADDR_VAR 0 9
62857: PUSH
62858: LD_VAR 0 11
62862: PUSH
62863: LD_VAR 0 12
62867: PUSH
62868: LD_VAR 0 13
62872: PUSH
62873: LD_VAR 0 14
62877: PUSH
62878: LD_VAR 0 15
62882: PUSH
62883: LD_VAR 0 16
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: PUSH
62896: LD_VAR 0 4
62900: PUSH
62901: LD_INT 1
62903: PLUS
62904: ARRAY
62905: ST_TO_ADDR
62906: GO 63037
62908: LD_INT 2
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 62972
62916: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62917: LD_ADDR_VAR 0 9
62921: PUSH
62922: LD_VAR 0 17
62926: PUSH
62927: LD_VAR 0 18
62931: PUSH
62932: LD_VAR 0 19
62936: PUSH
62937: LD_VAR 0 20
62941: PUSH
62942: LD_VAR 0 21
62946: PUSH
62947: LD_VAR 0 22
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: LD_VAR 0 4
62964: PUSH
62965: LD_INT 1
62967: PLUS
62968: ARRAY
62969: ST_TO_ADDR
62970: GO 63037
62972: LD_INT 3
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 62980
62978: GO 63036
62980: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62981: LD_ADDR_VAR 0 9
62985: PUSH
62986: LD_VAR 0 23
62990: PUSH
62991: LD_VAR 0 24
62995: PUSH
62996: LD_VAR 0 25
63000: PUSH
63001: LD_VAR 0 26
63005: PUSH
63006: LD_VAR 0 27
63010: PUSH
63011: LD_VAR 0 28
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 4
63028: PUSH
63029: LD_INT 1
63031: PLUS
63032: ARRAY
63033: ST_TO_ADDR
63034: GO 63037
63036: POP
63037: GO 63592
63039: LD_INT 2
63041: DOUBLE
63042: EQUAL
63043: IFTRUE 63053
63045: LD_INT 3
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63053
63051: GO 63109
63053: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63054: LD_ADDR_VAR 0 9
63058: PUSH
63059: LD_VAR 0 29
63063: PUSH
63064: LD_VAR 0 30
63068: PUSH
63069: LD_VAR 0 31
63073: PUSH
63074: LD_VAR 0 32
63078: PUSH
63079: LD_VAR 0 33
63083: PUSH
63084: LD_VAR 0 34
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: LD_VAR 0 4
63101: PUSH
63102: LD_INT 1
63104: PLUS
63105: ARRAY
63106: ST_TO_ADDR
63107: GO 63592
63109: LD_INT 16
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63171
63115: LD_INT 17
63117: DOUBLE
63118: EQUAL
63119: IFTRUE 63171
63121: LD_INT 18
63123: DOUBLE
63124: EQUAL
63125: IFTRUE 63171
63127: LD_INT 19
63129: DOUBLE
63130: EQUAL
63131: IFTRUE 63171
63133: LD_INT 22
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63171
63139: LD_INT 20
63141: DOUBLE
63142: EQUAL
63143: IFTRUE 63171
63145: LD_INT 21
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63171
63151: LD_INT 23
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63171
63157: LD_INT 24
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63171
63163: LD_INT 25
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63171
63169: GO 63227
63171: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63172: LD_ADDR_VAR 0 9
63176: PUSH
63177: LD_VAR 0 35
63181: PUSH
63182: LD_VAR 0 36
63186: PUSH
63187: LD_VAR 0 37
63191: PUSH
63192: LD_VAR 0 38
63196: PUSH
63197: LD_VAR 0 39
63201: PUSH
63202: LD_VAR 0 40
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: LD_VAR 0 4
63219: PUSH
63220: LD_INT 1
63222: PLUS
63223: ARRAY
63224: ST_TO_ADDR
63225: GO 63592
63227: LD_INT 6
63229: DOUBLE
63230: EQUAL
63231: IFTRUE 63283
63233: LD_INT 7
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63283
63239: LD_INT 8
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63283
63245: LD_INT 13
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63283
63251: LD_INT 12
63253: DOUBLE
63254: EQUAL
63255: IFTRUE 63283
63257: LD_INT 15
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63283
63263: LD_INT 11
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63283
63269: LD_INT 14
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63283
63275: LD_INT 10
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63283
63281: GO 63339
63283: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63284: LD_ADDR_VAR 0 9
63288: PUSH
63289: LD_VAR 0 41
63293: PUSH
63294: LD_VAR 0 42
63298: PUSH
63299: LD_VAR 0 43
63303: PUSH
63304: LD_VAR 0 44
63308: PUSH
63309: LD_VAR 0 45
63313: PUSH
63314: LD_VAR 0 46
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: LD_VAR 0 4
63331: PUSH
63332: LD_INT 1
63334: PLUS
63335: ARRAY
63336: ST_TO_ADDR
63337: GO 63592
63339: LD_INT 36
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63347
63345: GO 63403
63347: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63348: LD_ADDR_VAR 0 9
63352: PUSH
63353: LD_VAR 0 47
63357: PUSH
63358: LD_VAR 0 48
63362: PUSH
63363: LD_VAR 0 49
63367: PUSH
63368: LD_VAR 0 50
63372: PUSH
63373: LD_VAR 0 51
63377: PUSH
63378: LD_VAR 0 52
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: PUSH
63391: LD_VAR 0 4
63395: PUSH
63396: LD_INT 1
63398: PLUS
63399: ARRAY
63400: ST_TO_ADDR
63401: GO 63592
63403: LD_INT 4
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63429
63409: LD_INT 5
63411: DOUBLE
63412: EQUAL
63413: IFTRUE 63429
63415: LD_INT 34
63417: DOUBLE
63418: EQUAL
63419: IFTRUE 63429
63421: LD_INT 37
63423: DOUBLE
63424: EQUAL
63425: IFTRUE 63429
63427: GO 63485
63429: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63430: LD_ADDR_VAR 0 9
63434: PUSH
63435: LD_VAR 0 53
63439: PUSH
63440: LD_VAR 0 54
63444: PUSH
63445: LD_VAR 0 55
63449: PUSH
63450: LD_VAR 0 56
63454: PUSH
63455: LD_VAR 0 57
63459: PUSH
63460: LD_VAR 0 58
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: PUSH
63473: LD_VAR 0 4
63477: PUSH
63478: LD_INT 1
63480: PLUS
63481: ARRAY
63482: ST_TO_ADDR
63483: GO 63592
63485: LD_INT 31
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63535
63491: LD_INT 32
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63535
63497: LD_INT 33
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63535
63503: LD_INT 27
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63535
63509: LD_INT 26
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63535
63515: LD_INT 28
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63535
63521: LD_INT 29
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63535
63527: LD_INT 30
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63535
63533: GO 63591
63535: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63536: LD_ADDR_VAR 0 9
63540: PUSH
63541: LD_VAR 0 59
63545: PUSH
63546: LD_VAR 0 60
63550: PUSH
63551: LD_VAR 0 61
63555: PUSH
63556: LD_VAR 0 62
63560: PUSH
63561: LD_VAR 0 63
63565: PUSH
63566: LD_VAR 0 64
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: PUSH
63579: LD_VAR 0 4
63583: PUSH
63584: LD_INT 1
63586: PLUS
63587: ARRAY
63588: ST_TO_ADDR
63589: GO 63592
63591: POP
// temp_list2 = [ ] ;
63592: LD_ADDR_VAR 0 10
63596: PUSH
63597: EMPTY
63598: ST_TO_ADDR
// for i in temp_list do
63599: LD_ADDR_VAR 0 8
63603: PUSH
63604: LD_VAR 0 9
63608: PUSH
63609: FOR_IN
63610: IFFALSE 63662
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63612: LD_ADDR_VAR 0 10
63616: PUSH
63617: LD_VAR 0 10
63621: PUSH
63622: LD_VAR 0 8
63626: PUSH
63627: LD_INT 1
63629: ARRAY
63630: PUSH
63631: LD_VAR 0 2
63635: PLUS
63636: PUSH
63637: LD_VAR 0 8
63641: PUSH
63642: LD_INT 2
63644: ARRAY
63645: PUSH
63646: LD_VAR 0 3
63650: PLUS
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: EMPTY
63657: LIST
63658: ADD
63659: ST_TO_ADDR
63660: GO 63609
63662: POP
63663: POP
// result = temp_list2 ;
63664: LD_ADDR_VAR 0 7
63668: PUSH
63669: LD_VAR 0 10
63673: ST_TO_ADDR
// end ;
63674: LD_VAR 0 7
63678: RET
// export function EnemyInRange ( unit , dist ) ; begin
63679: LD_INT 0
63681: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63682: LD_ADDR_VAR 0 3
63686: PUSH
63687: LD_VAR 0 1
63691: PPUSH
63692: CALL_OW 255
63696: PPUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: CALL_OW 250
63706: PPUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 251
63716: PPUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: CALL 37081 0 4
63726: PUSH
63727: LD_INT 4
63729: ARRAY
63730: ST_TO_ADDR
// end ;
63731: LD_VAR 0 3
63735: RET
// export function PlayerSeeMe ( unit ) ; begin
63736: LD_INT 0
63738: PPUSH
// result := See ( your_side , unit ) ;
63739: LD_ADDR_VAR 0 2
63743: PUSH
63744: LD_OWVAR 2
63748: PPUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: CALL_OW 292
63758: ST_TO_ADDR
// end ;
63759: LD_VAR 0 2
63763: RET
// export function ReverseDir ( unit ) ; begin
63764: LD_INT 0
63766: PPUSH
// if not unit then
63767: LD_VAR 0 1
63771: NOT
63772: IFFALSE 63776
// exit ;
63774: GO 63799
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63776: LD_ADDR_VAR 0 2
63780: PUSH
63781: LD_VAR 0 1
63785: PPUSH
63786: CALL_OW 254
63790: PUSH
63791: LD_INT 3
63793: PLUS
63794: PUSH
63795: LD_INT 6
63797: MOD
63798: ST_TO_ADDR
// end ;
63799: LD_VAR 0 2
63803: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63804: LD_INT 0
63806: PPUSH
63807: PPUSH
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
// if not unit or not hexes then
63812: LD_VAR 0 1
63816: NOT
63817: PUSH
63818: LD_VAR 0 2
63822: NOT
63823: OR
63824: IFFALSE 63828
// exit ;
63826: GO 63951
// dist := 9999 ;
63828: LD_ADDR_VAR 0 5
63832: PUSH
63833: LD_INT 9999
63835: ST_TO_ADDR
// for i = 1 to hexes do
63836: LD_ADDR_VAR 0 4
63840: PUSH
63841: DOUBLE
63842: LD_INT 1
63844: DEC
63845: ST_TO_ADDR
63846: LD_VAR 0 2
63850: PUSH
63851: FOR_TO
63852: IFFALSE 63939
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63854: LD_ADDR_VAR 0 6
63858: PUSH
63859: LD_VAR 0 1
63863: PPUSH
63864: LD_VAR 0 2
63868: PUSH
63869: LD_VAR 0 4
63873: ARRAY
63874: PUSH
63875: LD_INT 1
63877: ARRAY
63878: PPUSH
63879: LD_VAR 0 2
63883: PUSH
63884: LD_VAR 0 4
63888: ARRAY
63889: PUSH
63890: LD_INT 2
63892: ARRAY
63893: PPUSH
63894: CALL_OW 297
63898: ST_TO_ADDR
// if tdist < dist then
63899: LD_VAR 0 6
63903: PUSH
63904: LD_VAR 0 5
63908: LESS
63909: IFFALSE 63937
// begin hex := hexes [ i ] ;
63911: LD_ADDR_VAR 0 8
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 4
63925: ARRAY
63926: ST_TO_ADDR
// dist := tdist ;
63927: LD_ADDR_VAR 0 5
63931: PUSH
63932: LD_VAR 0 6
63936: ST_TO_ADDR
// end ; end ;
63937: GO 63851
63939: POP
63940: POP
// result := hex ;
63941: LD_ADDR_VAR 0 3
63945: PUSH
63946: LD_VAR 0 8
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 3
63955: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63960: LD_VAR 0 1
63964: NOT
63965: PUSH
63966: LD_VAR 0 1
63970: PUSH
63971: LD_INT 21
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 23
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PPUSH
63995: CALL_OW 69
63999: IN
64000: NOT
64001: OR
64002: IFFALSE 64006
// exit ;
64004: GO 64053
// for i = 1 to 3 do
64006: LD_ADDR_VAR 0 3
64010: PUSH
64011: DOUBLE
64012: LD_INT 1
64014: DEC
64015: ST_TO_ADDR
64016: LD_INT 3
64018: PUSH
64019: FOR_TO
64020: IFFALSE 64051
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64022: LD_VAR 0 1
64026: PPUSH
64027: CALL_OW 250
64031: PPUSH
64032: LD_VAR 0 1
64036: PPUSH
64037: CALL_OW 251
64041: PPUSH
64042: LD_INT 1
64044: PPUSH
64045: CALL_OW 453
64049: GO 64019
64051: POP
64052: POP
// end ;
64053: LD_VAR 0 2
64057: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64058: LD_INT 0
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64066: LD_VAR 0 1
64070: NOT
64071: PUSH
64072: LD_VAR 0 2
64076: NOT
64077: OR
64078: PUSH
64079: LD_VAR 0 1
64083: PPUSH
64084: CALL_OW 314
64088: OR
64089: IFFALSE 64093
// exit ;
64091: GO 64534
// x := GetX ( enemy_unit ) ;
64093: LD_ADDR_VAR 0 7
64097: PUSH
64098: LD_VAR 0 2
64102: PPUSH
64103: CALL_OW 250
64107: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64108: LD_ADDR_VAR 0 8
64112: PUSH
64113: LD_VAR 0 2
64117: PPUSH
64118: CALL_OW 251
64122: ST_TO_ADDR
// if not x or not y then
64123: LD_VAR 0 7
64127: NOT
64128: PUSH
64129: LD_VAR 0 8
64133: NOT
64134: OR
64135: IFFALSE 64139
// exit ;
64137: GO 64534
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64139: LD_ADDR_VAR 0 6
64143: PUSH
64144: LD_VAR 0 7
64148: PPUSH
64149: LD_INT 0
64151: PPUSH
64152: LD_INT 4
64154: PPUSH
64155: CALL_OW 272
64159: PUSH
64160: LD_VAR 0 8
64164: PPUSH
64165: LD_INT 0
64167: PPUSH
64168: LD_INT 4
64170: PPUSH
64171: CALL_OW 273
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_VAR 0 7
64184: PPUSH
64185: LD_INT 1
64187: PPUSH
64188: LD_INT 4
64190: PPUSH
64191: CALL_OW 272
64195: PUSH
64196: LD_VAR 0 8
64200: PPUSH
64201: LD_INT 1
64203: PPUSH
64204: LD_INT 4
64206: PPUSH
64207: CALL_OW 273
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_VAR 0 7
64220: PPUSH
64221: LD_INT 2
64223: PPUSH
64224: LD_INT 4
64226: PPUSH
64227: CALL_OW 272
64231: PUSH
64232: LD_VAR 0 8
64236: PPUSH
64237: LD_INT 2
64239: PPUSH
64240: LD_INT 4
64242: PPUSH
64243: CALL_OW 273
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_VAR 0 7
64256: PPUSH
64257: LD_INT 3
64259: PPUSH
64260: LD_INT 4
64262: PPUSH
64263: CALL_OW 272
64267: PUSH
64268: LD_VAR 0 8
64272: PPUSH
64273: LD_INT 3
64275: PPUSH
64276: LD_INT 4
64278: PPUSH
64279: CALL_OW 273
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_VAR 0 7
64292: PPUSH
64293: LD_INT 4
64295: PPUSH
64296: LD_INT 4
64298: PPUSH
64299: CALL_OW 272
64303: PUSH
64304: LD_VAR 0 8
64308: PPUSH
64309: LD_INT 4
64311: PPUSH
64312: LD_INT 4
64314: PPUSH
64315: CALL_OW 273
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_VAR 0 7
64328: PPUSH
64329: LD_INT 5
64331: PPUSH
64332: LD_INT 4
64334: PPUSH
64335: CALL_OW 272
64339: PUSH
64340: LD_VAR 0 8
64344: PPUSH
64345: LD_INT 5
64347: PPUSH
64348: LD_INT 4
64350: PPUSH
64351: CALL_OW 273
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// for i = tmp downto 1 do
64368: LD_ADDR_VAR 0 4
64372: PUSH
64373: DOUBLE
64374: LD_VAR 0 6
64378: INC
64379: ST_TO_ADDR
64380: LD_INT 1
64382: PUSH
64383: FOR_DOWNTO
64384: IFFALSE 64485
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64386: LD_VAR 0 6
64390: PUSH
64391: LD_VAR 0 4
64395: ARRAY
64396: PUSH
64397: LD_INT 1
64399: ARRAY
64400: PPUSH
64401: LD_VAR 0 6
64405: PUSH
64406: LD_VAR 0 4
64410: ARRAY
64411: PUSH
64412: LD_INT 2
64414: ARRAY
64415: PPUSH
64416: CALL_OW 488
64420: NOT
64421: PUSH
64422: LD_VAR 0 6
64426: PUSH
64427: LD_VAR 0 4
64431: ARRAY
64432: PUSH
64433: LD_INT 1
64435: ARRAY
64436: PPUSH
64437: LD_VAR 0 6
64441: PUSH
64442: LD_VAR 0 4
64446: ARRAY
64447: PUSH
64448: LD_INT 2
64450: ARRAY
64451: PPUSH
64452: CALL_OW 428
64456: PUSH
64457: LD_INT 0
64459: NONEQUAL
64460: OR
64461: IFFALSE 64483
// tmp := Delete ( tmp , i ) ;
64463: LD_ADDR_VAR 0 6
64467: PUSH
64468: LD_VAR 0 6
64472: PPUSH
64473: LD_VAR 0 4
64477: PPUSH
64478: CALL_OW 3
64482: ST_TO_ADDR
64483: GO 64383
64485: POP
64486: POP
// j := GetClosestHex ( unit , tmp ) ;
64487: LD_ADDR_VAR 0 5
64491: PUSH
64492: LD_VAR 0 1
64496: PPUSH
64497: LD_VAR 0 6
64501: PPUSH
64502: CALL 63804 0 2
64506: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64507: LD_VAR 0 1
64511: PPUSH
64512: LD_VAR 0 5
64516: PUSH
64517: LD_INT 1
64519: ARRAY
64520: PPUSH
64521: LD_VAR 0 5
64525: PUSH
64526: LD_INT 2
64528: ARRAY
64529: PPUSH
64530: CALL_OW 111
// end ;
64534: LD_VAR 0 3
64538: RET
// export function PrepareApemanSoldier ( ) ; begin
64539: LD_INT 0
64541: PPUSH
// uc_nation := 0 ;
64542: LD_ADDR_OWVAR 21
64546: PUSH
64547: LD_INT 0
64549: ST_TO_ADDR
// hc_sex := sex_male ;
64550: LD_ADDR_OWVAR 27
64554: PUSH
64555: LD_INT 1
64557: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64558: LD_ADDR_OWVAR 28
64562: PUSH
64563: LD_INT 15
64565: ST_TO_ADDR
// hc_gallery :=  ;
64566: LD_ADDR_OWVAR 33
64570: PUSH
64571: LD_STRING 
64573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64574: LD_ADDR_OWVAR 31
64578: PUSH
64579: LD_INT 0
64581: PPUSH
64582: LD_INT 3
64584: PPUSH
64585: CALL_OW 12
64589: PUSH
64590: LD_INT 0
64592: PPUSH
64593: LD_INT 3
64595: PPUSH
64596: CALL_OW 12
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// end ;
64613: LD_VAR 0 1
64617: RET
// export function PrepareApemanEngineer ( ) ; begin
64618: LD_INT 0
64620: PPUSH
// uc_nation := 0 ;
64621: LD_ADDR_OWVAR 21
64625: PUSH
64626: LD_INT 0
64628: ST_TO_ADDR
// hc_sex := sex_male ;
64629: LD_ADDR_OWVAR 27
64633: PUSH
64634: LD_INT 1
64636: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64637: LD_ADDR_OWVAR 28
64641: PUSH
64642: LD_INT 16
64644: ST_TO_ADDR
// hc_gallery :=  ;
64645: LD_ADDR_OWVAR 33
64649: PUSH
64650: LD_STRING 
64652: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64653: LD_ADDR_OWVAR 31
64657: PUSH
64658: LD_INT 0
64660: PPUSH
64661: LD_INT 3
64663: PPUSH
64664: CALL_OW 12
64668: PUSH
64669: LD_INT 0
64671: PPUSH
64672: LD_INT 3
64674: PPUSH
64675: CALL_OW 12
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: ST_TO_ADDR
// end ;
64692: LD_VAR 0 1
64696: RET
// export function PrepareApeman ( agressivity ) ; begin
64697: LD_INT 0
64699: PPUSH
// uc_side := 0 ;
64700: LD_ADDR_OWVAR 20
64704: PUSH
64705: LD_INT 0
64707: ST_TO_ADDR
// uc_nation := 0 ;
64708: LD_ADDR_OWVAR 21
64712: PUSH
64713: LD_INT 0
64715: ST_TO_ADDR
// hc_sex := sex_male ;
64716: LD_ADDR_OWVAR 27
64720: PUSH
64721: LD_INT 1
64723: ST_TO_ADDR
// hc_class := class_apeman ;
64724: LD_ADDR_OWVAR 28
64728: PUSH
64729: LD_INT 12
64731: ST_TO_ADDR
// hc_gallery :=  ;
64732: LD_ADDR_OWVAR 33
64736: PUSH
64737: LD_STRING 
64739: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64740: LD_ADDR_OWVAR 35
64744: PUSH
64745: LD_VAR 0 1
64749: NEG
64750: PPUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 12
64760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64761: LD_ADDR_OWVAR 31
64765: PUSH
64766: LD_INT 0
64768: PPUSH
64769: LD_INT 3
64771: PPUSH
64772: CALL_OW 12
64776: PUSH
64777: LD_INT 0
64779: PPUSH
64780: LD_INT 3
64782: PPUSH
64783: CALL_OW 12
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// end ;
64800: LD_VAR 0 2
64804: RET
// export function PrepareTiger ( agressivity ) ; begin
64805: LD_INT 0
64807: PPUSH
// uc_side := 0 ;
64808: LD_ADDR_OWVAR 20
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// uc_nation := 0 ;
64816: LD_ADDR_OWVAR 21
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// hc_class := class_tiger ;
64824: LD_ADDR_OWVAR 28
64828: PUSH
64829: LD_INT 14
64831: ST_TO_ADDR
// hc_gallery :=  ;
64832: LD_ADDR_OWVAR 33
64836: PUSH
64837: LD_STRING 
64839: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64840: LD_ADDR_OWVAR 35
64844: PUSH
64845: LD_VAR 0 1
64849: NEG
64850: PPUSH
64851: LD_VAR 0 1
64855: PPUSH
64856: CALL_OW 12
64860: ST_TO_ADDR
// end ;
64861: LD_VAR 0 2
64865: RET
// export function PrepareEnchidna ( ) ; begin
64866: LD_INT 0
64868: PPUSH
// uc_side := 0 ;
64869: LD_ADDR_OWVAR 20
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// uc_nation := 0 ;
64877: LD_ADDR_OWVAR 21
64881: PUSH
64882: LD_INT 0
64884: ST_TO_ADDR
// hc_class := class_baggie ;
64885: LD_ADDR_OWVAR 28
64889: PUSH
64890: LD_INT 13
64892: ST_TO_ADDR
// hc_gallery :=  ;
64893: LD_ADDR_OWVAR 33
64897: PUSH
64898: LD_STRING 
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 1
64905: RET
// export function PrepareFrog ( ) ; begin
64906: LD_INT 0
64908: PPUSH
// uc_side := 0 ;
64909: LD_ADDR_OWVAR 20
64913: PUSH
64914: LD_INT 0
64916: ST_TO_ADDR
// uc_nation := 0 ;
64917: LD_ADDR_OWVAR 21
64921: PUSH
64922: LD_INT 0
64924: ST_TO_ADDR
// hc_class := class_frog ;
64925: LD_ADDR_OWVAR 28
64929: PUSH
64930: LD_INT 19
64932: ST_TO_ADDR
// hc_gallery :=  ;
64933: LD_ADDR_OWVAR 33
64937: PUSH
64938: LD_STRING 
64940: ST_TO_ADDR
// end ;
64941: LD_VAR 0 1
64945: RET
// export function PrepareFish ( ) ; begin
64946: LD_INT 0
64948: PPUSH
// uc_side := 0 ;
64949: LD_ADDR_OWVAR 20
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// uc_nation := 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// hc_class := class_fish ;
64965: LD_ADDR_OWVAR 28
64969: PUSH
64970: LD_INT 20
64972: ST_TO_ADDR
// hc_gallery :=  ;
64973: LD_ADDR_OWVAR 33
64977: PUSH
64978: LD_STRING 
64980: ST_TO_ADDR
// end ;
64981: LD_VAR 0 1
64985: RET
// export function PrepareBird ( ) ; begin
64986: LD_INT 0
64988: PPUSH
// uc_side := 0 ;
64989: LD_ADDR_OWVAR 20
64993: PUSH
64994: LD_INT 0
64996: ST_TO_ADDR
// uc_nation := 0 ;
64997: LD_ADDR_OWVAR 21
65001: PUSH
65002: LD_INT 0
65004: ST_TO_ADDR
// hc_class := class_phororhacos ;
65005: LD_ADDR_OWVAR 28
65009: PUSH
65010: LD_INT 18
65012: ST_TO_ADDR
// hc_gallery :=  ;
65013: LD_ADDR_OWVAR 33
65017: PUSH
65018: LD_STRING 
65020: ST_TO_ADDR
// end ;
65021: LD_VAR 0 1
65025: RET
// export function PrepareHorse ( ) ; begin
65026: LD_INT 0
65028: PPUSH
// uc_side := 0 ;
65029: LD_ADDR_OWVAR 20
65033: PUSH
65034: LD_INT 0
65036: ST_TO_ADDR
// uc_nation := 0 ;
65037: LD_ADDR_OWVAR 21
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
// hc_class := class_horse ;
65045: LD_ADDR_OWVAR 28
65049: PUSH
65050: LD_INT 21
65052: ST_TO_ADDR
// hc_gallery :=  ;
65053: LD_ADDR_OWVAR 33
65057: PUSH
65058: LD_STRING 
65060: ST_TO_ADDR
// end ;
65061: LD_VAR 0 1
65065: RET
// export function PrepareMastodont ( ) ; begin
65066: LD_INT 0
65068: PPUSH
// uc_side := 0 ;
65069: LD_ADDR_OWVAR 20
65073: PUSH
65074: LD_INT 0
65076: ST_TO_ADDR
// uc_nation := 0 ;
65077: LD_ADDR_OWVAR 21
65081: PUSH
65082: LD_INT 0
65084: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65085: LD_ADDR_OWVAR 37
65089: PUSH
65090: LD_INT 31
65092: ST_TO_ADDR
// vc_control := control_rider ;
65093: LD_ADDR_OWVAR 38
65097: PUSH
65098: LD_INT 4
65100: ST_TO_ADDR
// end ;
65101: LD_VAR 0 1
65105: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65106: LD_INT 0
65108: PPUSH
65109: PPUSH
65110: PPUSH
// uc_side = 0 ;
65111: LD_ADDR_OWVAR 20
65115: PUSH
65116: LD_INT 0
65118: ST_TO_ADDR
// uc_nation = 0 ;
65119: LD_ADDR_OWVAR 21
65123: PUSH
65124: LD_INT 0
65126: ST_TO_ADDR
// InitHc_All ( ) ;
65127: CALL_OW 584
// InitVc ;
65131: CALL_OW 20
// if mastodonts then
65135: LD_VAR 0 6
65139: IFFALSE 65206
// for i = 1 to mastodonts do
65141: LD_ADDR_VAR 0 11
65145: PUSH
65146: DOUBLE
65147: LD_INT 1
65149: DEC
65150: ST_TO_ADDR
65151: LD_VAR 0 6
65155: PUSH
65156: FOR_TO
65157: IFFALSE 65204
// begin vc_chassis := 31 ;
65159: LD_ADDR_OWVAR 37
65163: PUSH
65164: LD_INT 31
65166: ST_TO_ADDR
// vc_control := control_rider ;
65167: LD_ADDR_OWVAR 38
65171: PUSH
65172: LD_INT 4
65174: ST_TO_ADDR
// animal := CreateVehicle ;
65175: LD_ADDR_VAR 0 12
65179: PUSH
65180: CALL_OW 45
65184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65185: LD_VAR 0 12
65189: PPUSH
65190: LD_VAR 0 8
65194: PPUSH
65195: LD_INT 0
65197: PPUSH
65198: CALL 67341 0 3
// end ;
65202: GO 65156
65204: POP
65205: POP
// if horses then
65206: LD_VAR 0 5
65210: IFFALSE 65277
// for i = 1 to horses do
65212: LD_ADDR_VAR 0 11
65216: PUSH
65217: DOUBLE
65218: LD_INT 1
65220: DEC
65221: ST_TO_ADDR
65222: LD_VAR 0 5
65226: PUSH
65227: FOR_TO
65228: IFFALSE 65275
// begin hc_class := 21 ;
65230: LD_ADDR_OWVAR 28
65234: PUSH
65235: LD_INT 21
65237: ST_TO_ADDR
// hc_gallery :=  ;
65238: LD_ADDR_OWVAR 33
65242: PUSH
65243: LD_STRING 
65245: ST_TO_ADDR
// animal := CreateHuman ;
65246: LD_ADDR_VAR 0 12
65250: PUSH
65251: CALL_OW 44
65255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65256: LD_VAR 0 12
65260: PPUSH
65261: LD_VAR 0 8
65265: PPUSH
65266: LD_INT 0
65268: PPUSH
65269: CALL 67341 0 3
// end ;
65273: GO 65227
65275: POP
65276: POP
// if birds then
65277: LD_VAR 0 1
65281: IFFALSE 65348
// for i = 1 to birds do
65283: LD_ADDR_VAR 0 11
65287: PUSH
65288: DOUBLE
65289: LD_INT 1
65291: DEC
65292: ST_TO_ADDR
65293: LD_VAR 0 1
65297: PUSH
65298: FOR_TO
65299: IFFALSE 65346
// begin hc_class = 18 ;
65301: LD_ADDR_OWVAR 28
65305: PUSH
65306: LD_INT 18
65308: ST_TO_ADDR
// hc_gallery =  ;
65309: LD_ADDR_OWVAR 33
65313: PUSH
65314: LD_STRING 
65316: ST_TO_ADDR
// animal := CreateHuman ;
65317: LD_ADDR_VAR 0 12
65321: PUSH
65322: CALL_OW 44
65326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65327: LD_VAR 0 12
65331: PPUSH
65332: LD_VAR 0 8
65336: PPUSH
65337: LD_INT 0
65339: PPUSH
65340: CALL 67341 0 3
// end ;
65344: GO 65298
65346: POP
65347: POP
// if tigers then
65348: LD_VAR 0 2
65352: IFFALSE 65436
// for i = 1 to tigers do
65354: LD_ADDR_VAR 0 11
65358: PUSH
65359: DOUBLE
65360: LD_INT 1
65362: DEC
65363: ST_TO_ADDR
65364: LD_VAR 0 2
65368: PUSH
65369: FOR_TO
65370: IFFALSE 65434
// begin hc_class = class_tiger ;
65372: LD_ADDR_OWVAR 28
65376: PUSH
65377: LD_INT 14
65379: ST_TO_ADDR
// hc_gallery =  ;
65380: LD_ADDR_OWVAR 33
65384: PUSH
65385: LD_STRING 
65387: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65388: LD_ADDR_OWVAR 35
65392: PUSH
65393: LD_INT 7
65395: NEG
65396: PPUSH
65397: LD_INT 7
65399: PPUSH
65400: CALL_OW 12
65404: ST_TO_ADDR
// animal := CreateHuman ;
65405: LD_ADDR_VAR 0 12
65409: PUSH
65410: CALL_OW 44
65414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65415: LD_VAR 0 12
65419: PPUSH
65420: LD_VAR 0 8
65424: PPUSH
65425: LD_INT 0
65427: PPUSH
65428: CALL 67341 0 3
// end ;
65432: GO 65369
65434: POP
65435: POP
// if apemans then
65436: LD_VAR 0 3
65440: IFFALSE 65563
// for i = 1 to apemans do
65442: LD_ADDR_VAR 0 11
65446: PUSH
65447: DOUBLE
65448: LD_INT 1
65450: DEC
65451: ST_TO_ADDR
65452: LD_VAR 0 3
65456: PUSH
65457: FOR_TO
65458: IFFALSE 65561
// begin hc_class = class_apeman ;
65460: LD_ADDR_OWVAR 28
65464: PUSH
65465: LD_INT 12
65467: ST_TO_ADDR
// hc_gallery =  ;
65468: LD_ADDR_OWVAR 33
65472: PUSH
65473: LD_STRING 
65475: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65476: LD_ADDR_OWVAR 35
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PPUSH
65485: LD_INT 2
65487: PPUSH
65488: CALL_OW 12
65492: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65493: LD_ADDR_OWVAR 31
65497: PUSH
65498: LD_INT 1
65500: PPUSH
65501: LD_INT 3
65503: PPUSH
65504: CALL_OW 12
65508: PUSH
65509: LD_INT 1
65511: PPUSH
65512: LD_INT 3
65514: PPUSH
65515: CALL_OW 12
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: ST_TO_ADDR
// animal := CreateHuman ;
65532: LD_ADDR_VAR 0 12
65536: PUSH
65537: CALL_OW 44
65541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65542: LD_VAR 0 12
65546: PPUSH
65547: LD_VAR 0 8
65551: PPUSH
65552: LD_INT 0
65554: PPUSH
65555: CALL 67341 0 3
// end ;
65559: GO 65457
65561: POP
65562: POP
// if enchidnas then
65563: LD_VAR 0 4
65567: IFFALSE 65634
// for i = 1 to enchidnas do
65569: LD_ADDR_VAR 0 11
65573: PUSH
65574: DOUBLE
65575: LD_INT 1
65577: DEC
65578: ST_TO_ADDR
65579: LD_VAR 0 4
65583: PUSH
65584: FOR_TO
65585: IFFALSE 65632
// begin hc_class = 13 ;
65587: LD_ADDR_OWVAR 28
65591: PUSH
65592: LD_INT 13
65594: ST_TO_ADDR
// hc_gallery =  ;
65595: LD_ADDR_OWVAR 33
65599: PUSH
65600: LD_STRING 
65602: ST_TO_ADDR
// animal := CreateHuman ;
65603: LD_ADDR_VAR 0 12
65607: PUSH
65608: CALL_OW 44
65612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65613: LD_VAR 0 12
65617: PPUSH
65618: LD_VAR 0 8
65622: PPUSH
65623: LD_INT 0
65625: PPUSH
65626: CALL 67341 0 3
// end ;
65630: GO 65584
65632: POP
65633: POP
// if fishes then
65634: LD_VAR 0 7
65638: IFFALSE 65705
// for i = 1 to fishes do
65640: LD_ADDR_VAR 0 11
65644: PUSH
65645: DOUBLE
65646: LD_INT 1
65648: DEC
65649: ST_TO_ADDR
65650: LD_VAR 0 7
65654: PUSH
65655: FOR_TO
65656: IFFALSE 65703
// begin hc_class = 20 ;
65658: LD_ADDR_OWVAR 28
65662: PUSH
65663: LD_INT 20
65665: ST_TO_ADDR
// hc_gallery =  ;
65666: LD_ADDR_OWVAR 33
65670: PUSH
65671: LD_STRING 
65673: ST_TO_ADDR
// animal := CreateHuman ;
65674: LD_ADDR_VAR 0 12
65678: PUSH
65679: CALL_OW 44
65683: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65684: LD_VAR 0 12
65688: PPUSH
65689: LD_VAR 0 9
65693: PPUSH
65694: LD_INT 0
65696: PPUSH
65697: CALL 67341 0 3
// end ;
65701: GO 65655
65703: POP
65704: POP
// end ;
65705: LD_VAR 0 10
65709: RET
// export function WantHeal ( sci , unit ) ; begin
65710: LD_INT 0
65712: PPUSH
// if GetTaskList ( sci ) > 0 then
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL_OW 437
65722: PUSH
65723: LD_INT 0
65725: GREATER
65726: IFFALSE 65796
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65728: LD_VAR 0 1
65732: PPUSH
65733: CALL_OW 437
65737: PUSH
65738: LD_INT 1
65740: ARRAY
65741: PUSH
65742: LD_INT 1
65744: ARRAY
65745: PUSH
65746: LD_STRING l
65748: EQUAL
65749: PUSH
65750: LD_VAR 0 1
65754: PPUSH
65755: CALL_OW 437
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: PUSH
65764: LD_INT 4
65766: ARRAY
65767: PUSH
65768: LD_VAR 0 2
65772: EQUAL
65773: AND
65774: IFFALSE 65786
// result := true else
65776: LD_ADDR_VAR 0 3
65780: PUSH
65781: LD_INT 1
65783: ST_TO_ADDR
65784: GO 65794
// result := false ;
65786: LD_ADDR_VAR 0 3
65790: PUSH
65791: LD_INT 0
65793: ST_TO_ADDR
// end else
65794: GO 65804
// result := false ;
65796: LD_ADDR_VAR 0 3
65800: PUSH
65801: LD_INT 0
65803: ST_TO_ADDR
// end ;
65804: LD_VAR 0 3
65808: RET
// export function HealTarget ( sci ) ; begin
65809: LD_INT 0
65811: PPUSH
// if not sci then
65812: LD_VAR 0 1
65816: NOT
65817: IFFALSE 65821
// exit ;
65819: GO 65886
// result := 0 ;
65821: LD_ADDR_VAR 0 2
65825: PUSH
65826: LD_INT 0
65828: ST_TO_ADDR
// if GetTaskList ( sci ) then
65829: LD_VAR 0 1
65833: PPUSH
65834: CALL_OW 437
65838: IFFALSE 65886
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 437
65849: PUSH
65850: LD_INT 1
65852: ARRAY
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PUSH
65858: LD_STRING l
65860: EQUAL
65861: IFFALSE 65886
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65863: LD_ADDR_VAR 0 2
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: CALL_OW 437
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: PUSH
65882: LD_INT 4
65884: ARRAY
65885: ST_TO_ADDR
// end ;
65886: LD_VAR 0 2
65890: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65891: LD_INT 0
65893: PPUSH
65894: PPUSH
65895: PPUSH
65896: PPUSH
// if not base_units then
65897: LD_VAR 0 1
65901: NOT
65902: IFFALSE 65906
// exit ;
65904: GO 65993
// result := false ;
65906: LD_ADDR_VAR 0 2
65910: PUSH
65911: LD_INT 0
65913: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65914: LD_ADDR_VAR 0 5
65918: PUSH
65919: LD_VAR 0 1
65923: PPUSH
65924: LD_INT 21
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PPUSH
65934: CALL_OW 72
65938: ST_TO_ADDR
// if not tmp then
65939: LD_VAR 0 5
65943: NOT
65944: IFFALSE 65948
// exit ;
65946: GO 65993
// for i in tmp do
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_VAR 0 5
65957: PUSH
65958: FOR_IN
65959: IFFALSE 65991
// begin result := EnemyInRange ( i , 22 ) ;
65961: LD_ADDR_VAR 0 2
65965: PUSH
65966: LD_VAR 0 3
65970: PPUSH
65971: LD_INT 22
65973: PPUSH
65974: CALL 63679 0 2
65978: ST_TO_ADDR
// if result then
65979: LD_VAR 0 2
65983: IFFALSE 65989
// exit ;
65985: POP
65986: POP
65987: GO 65993
// end ;
65989: GO 65958
65991: POP
65992: POP
// end ;
65993: LD_VAR 0 2
65997: RET
// export function FilterByTag ( units , tag ) ; begin
65998: LD_INT 0
66000: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66001: LD_ADDR_VAR 0 3
66005: PUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: LD_INT 120
66013: PUSH
66014: LD_VAR 0 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PPUSH
66023: CALL_OW 72
66027: ST_TO_ADDR
// end ;
66028: LD_VAR 0 3
66032: RET
// export function IsDriver ( un ) ; begin
66033: LD_INT 0
66035: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66036: LD_ADDR_VAR 0 2
66040: PUSH
66041: LD_VAR 0 1
66045: PUSH
66046: LD_INT 55
66048: PUSH
66049: EMPTY
66050: LIST
66051: PPUSH
66052: CALL_OW 69
66056: IN
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 2
66062: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
// list := [ ] ;
66067: LD_ADDR_VAR 0 5
66071: PUSH
66072: EMPTY
66073: ST_TO_ADDR
// case d of 0 :
66074: LD_VAR 0 3
66078: PUSH
66079: LD_INT 0
66081: DOUBLE
66082: EQUAL
66083: IFTRUE 66087
66085: GO 66220
66087: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66088: LD_ADDR_VAR 0 5
66092: PUSH
66093: LD_VAR 0 1
66097: PUSH
66098: LD_INT 4
66100: MINUS
66101: PUSH
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 4
66109: MINUS
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_INT 3
66126: MINUS
66127: PUSH
66128: LD_VAR 0 2
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: LD_INT 4
66148: PLUS
66149: PUSH
66150: LD_VAR 0 2
66154: PUSH
66155: LD_INT 4
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 3
66170: PLUS
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 3
66179: PLUS
66180: PUSH
66181: LD_INT 5
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: LD_VAR 0 1
66193: PUSH
66194: LD_VAR 0 2
66198: PUSH
66199: LD_INT 4
66201: PLUS
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// end ; 1 :
66218: GO 66918
66220: LD_INT 1
66222: DOUBLE
66223: EQUAL
66224: IFTRUE 66228
66226: GO 66361
66228: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66229: LD_ADDR_VAR 0 5
66233: PUSH
66234: LD_VAR 0 1
66238: PUSH
66239: LD_VAR 0 2
66243: PUSH
66244: LD_INT 4
66246: MINUS
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: PUSH
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 3
66263: MINUS
66264: PUSH
66265: LD_VAR 0 2
66269: PUSH
66270: LD_INT 3
66272: MINUS
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 4
66289: MINUS
66290: PUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_VAR 0 2
66313: PUSH
66314: LD_INT 3
66316: PLUS
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: LD_VAR 0 1
66330: PUSH
66331: LD_INT 4
66333: PLUS
66334: PUSH
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 4
66342: PLUS
66343: PUSH
66344: LD_INT 5
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// end ; 2 :
66359: GO 66918
66361: LD_INT 2
66363: DOUBLE
66364: EQUAL
66365: IFTRUE 66369
66367: GO 66498
66369: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66370: LD_ADDR_VAR 0 5
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_VAR 0 2
66384: PUSH
66385: LD_INT 3
66387: MINUS
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 4
66404: PLUS
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: LD_INT 4
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: PUSH
66419: LD_VAR 0 1
66423: PUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_INT 4
66431: PLUS
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: LIST
66440: PUSH
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 3
66448: MINUS
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_INT 4
66470: MINUS
66471: PUSH
66472: LD_VAR 0 2
66476: PUSH
66477: LD_INT 4
66479: MINUS
66480: PUSH
66481: LD_INT 2
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// end ; 3 :
66496: GO 66918
66498: LD_INT 3
66500: DOUBLE
66501: EQUAL
66502: IFTRUE 66506
66504: GO 66639
66506: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66507: LD_ADDR_VAR 0 5
66511: PUSH
66512: LD_VAR 0 1
66516: PUSH
66517: LD_INT 3
66519: PLUS
66520: PUSH
66521: LD_VAR 0 2
66525: PUSH
66526: LD_INT 4
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: LD_INT 4
66541: PLUS
66542: PUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 4
66550: PLUS
66551: PUSH
66552: LD_INT 5
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: PUSH
66560: LD_VAR 0 1
66564: PUSH
66565: LD_INT 4
66567: MINUS
66568: PUSH
66569: LD_VAR 0 2
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: LIST
66581: PUSH
66582: LD_VAR 0 1
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: LD_INT 4
66594: MINUS
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: LD_INT 3
66611: MINUS
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: LD_INT 3
66620: MINUS
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: ST_TO_ADDR
// end ; 4 :
66637: GO 66918
66639: LD_INT 4
66641: DOUBLE
66642: EQUAL
66643: IFTRUE 66647
66645: GO 66780
66647: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66648: LD_ADDR_VAR 0 5
66652: PUSH
66653: LD_VAR 0 1
66657: PUSH
66658: LD_VAR 0 2
66662: PUSH
66663: LD_INT 4
66665: PLUS
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: PUSH
66675: LD_VAR 0 1
66679: PUSH
66680: LD_INT 3
66682: PLUS
66683: PUSH
66684: LD_VAR 0 2
66688: PUSH
66689: LD_INT 3
66691: PLUS
66692: PUSH
66693: LD_INT 5
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: PUSH
66701: LD_VAR 0 1
66705: PUSH
66706: LD_INT 4
66708: PLUS
66709: PUSH
66710: LD_VAR 0 2
66714: PUSH
66715: LD_INT 4
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: LD_VAR 0 2
66732: PUSH
66733: LD_INT 3
66735: MINUS
66736: PUSH
66737: LD_INT 3
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_INT 4
66752: MINUS
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 4
66761: MINUS
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: ST_TO_ADDR
// end ; 5 :
66778: GO 66918
66780: LD_INT 5
66782: DOUBLE
66783: EQUAL
66784: IFTRUE 66788
66786: GO 66917
66788: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66789: LD_ADDR_VAR 0 5
66793: PUSH
66794: LD_VAR 0 1
66798: PUSH
66799: LD_INT 4
66801: MINUS
66802: PUSH
66803: LD_VAR 0 2
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: PUSH
66816: LD_VAR 0 1
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 4
66828: MINUS
66829: PUSH
66830: LD_INT 3
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: PUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_INT 4
66845: PLUS
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_INT 4
66854: PLUS
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_INT 3
66871: PLUS
66872: PUSH
66873: LD_VAR 0 2
66877: PUSH
66878: LD_INT 4
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 3
66898: PLUS
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: ST_TO_ADDR
// end ; end ;
66915: GO 66918
66917: POP
// result := list ;
66918: LD_ADDR_VAR 0 4
66922: PUSH
66923: LD_VAR 0 5
66927: ST_TO_ADDR
// end ;
66928: LD_VAR 0 4
66932: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66933: LD_INT 0
66935: PPUSH
66936: PPUSH
66937: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66938: LD_VAR 0 1
66942: NOT
66943: PUSH
66944: LD_VAR 0 2
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: LD_INT 4
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: IN
66967: NOT
66968: OR
66969: IFFALSE 66973
// exit ;
66971: GO 67065
// tmp := [ ] ;
66973: LD_ADDR_VAR 0 5
66977: PUSH
66978: EMPTY
66979: ST_TO_ADDR
// for i in units do
66980: LD_ADDR_VAR 0 4
66984: PUSH
66985: LD_VAR 0 1
66989: PUSH
66990: FOR_IN
66991: IFFALSE 67034
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66993: LD_ADDR_VAR 0 5
66997: PUSH
66998: LD_VAR 0 5
67002: PPUSH
67003: LD_VAR 0 5
67007: PUSH
67008: LD_INT 1
67010: PLUS
67011: PPUSH
67012: LD_VAR 0 4
67016: PPUSH
67017: LD_VAR 0 2
67021: PPUSH
67022: CALL_OW 259
67026: PPUSH
67027: CALL_OW 2
67031: ST_TO_ADDR
67032: GO 66990
67034: POP
67035: POP
// if not tmp then
67036: LD_VAR 0 5
67040: NOT
67041: IFFALSE 67045
// exit ;
67043: GO 67065
// result := SortListByListDesc ( units , tmp ) ;
67045: LD_ADDR_VAR 0 3
67049: PUSH
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_VAR 0 5
67059: PPUSH
67060: CALL_OW 77
67064: ST_TO_ADDR
// end ;
67065: LD_VAR 0 3
67069: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67070: LD_INT 0
67072: PPUSH
67073: PPUSH
67074: PPUSH
// result := false ;
67075: LD_ADDR_VAR 0 3
67079: PUSH
67080: LD_INT 0
67082: ST_TO_ADDR
// x := GetX ( building ) ;
67083: LD_ADDR_VAR 0 4
67087: PUSH
67088: LD_VAR 0 2
67092: PPUSH
67093: CALL_OW 250
67097: ST_TO_ADDR
// y := GetY ( building ) ;
67098: LD_ADDR_VAR 0 5
67102: PUSH
67103: LD_VAR 0 2
67107: PPUSH
67108: CALL_OW 251
67112: ST_TO_ADDR
// if not building or not x or not y then
67113: LD_VAR 0 2
67117: NOT
67118: PUSH
67119: LD_VAR 0 4
67123: NOT
67124: OR
67125: PUSH
67126: LD_VAR 0 5
67130: NOT
67131: OR
67132: IFFALSE 67136
// exit ;
67134: GO 67228
// if GetTaskList ( unit ) then
67136: LD_VAR 0 1
67140: PPUSH
67141: CALL_OW 437
67145: IFFALSE 67228
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67147: LD_STRING e
67149: PUSH
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 437
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: LD_INT 1
67166: ARRAY
67167: EQUAL
67168: PUSH
67169: LD_VAR 0 4
67173: PUSH
67174: LD_VAR 0 1
67178: PPUSH
67179: CALL_OW 437
67183: PUSH
67184: LD_INT 1
67186: ARRAY
67187: PUSH
67188: LD_INT 2
67190: ARRAY
67191: EQUAL
67192: AND
67193: PUSH
67194: LD_VAR 0 5
67198: PUSH
67199: LD_VAR 0 1
67203: PPUSH
67204: CALL_OW 437
67208: PUSH
67209: LD_INT 1
67211: ARRAY
67212: PUSH
67213: LD_INT 3
67215: ARRAY
67216: EQUAL
67217: AND
67218: IFFALSE 67228
// result := true end ;
67220: LD_ADDR_VAR 0 3
67224: PUSH
67225: LD_INT 1
67227: ST_TO_ADDR
// end ;
67228: LD_VAR 0 3
67232: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67233: LD_INT 0
67235: PPUSH
// result := false ;
67236: LD_ADDR_VAR 0 4
67240: PUSH
67241: LD_INT 0
67243: ST_TO_ADDR
// if GetTaskList ( unit ) then
67244: LD_VAR 0 1
67248: PPUSH
67249: CALL_OW 437
67253: IFFALSE 67336
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67255: LD_STRING M
67257: PUSH
67258: LD_VAR 0 1
67262: PPUSH
67263: CALL_OW 437
67267: PUSH
67268: LD_INT 1
67270: ARRAY
67271: PUSH
67272: LD_INT 1
67274: ARRAY
67275: EQUAL
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: CALL_OW 437
67291: PUSH
67292: LD_INT 1
67294: ARRAY
67295: PUSH
67296: LD_INT 2
67298: ARRAY
67299: EQUAL
67300: AND
67301: PUSH
67302: LD_VAR 0 3
67306: PUSH
67307: LD_VAR 0 1
67311: PPUSH
67312: CALL_OW 437
67316: PUSH
67317: LD_INT 1
67319: ARRAY
67320: PUSH
67321: LD_INT 3
67323: ARRAY
67324: EQUAL
67325: AND
67326: IFFALSE 67336
// result := true ;
67328: LD_ADDR_VAR 0 4
67332: PUSH
67333: LD_INT 1
67335: ST_TO_ADDR
// end ; end ;
67336: LD_VAR 0 4
67340: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67341: LD_INT 0
67343: PPUSH
67344: PPUSH
67345: PPUSH
67346: PPUSH
// if not unit or not area then
67347: LD_VAR 0 1
67351: NOT
67352: PUSH
67353: LD_VAR 0 2
67357: NOT
67358: OR
67359: IFFALSE 67363
// exit ;
67361: GO 67527
// tmp := AreaToList ( area , i ) ;
67363: LD_ADDR_VAR 0 6
67367: PUSH
67368: LD_VAR 0 2
67372: PPUSH
67373: LD_VAR 0 5
67377: PPUSH
67378: CALL_OW 517
67382: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67383: LD_ADDR_VAR 0 5
67387: PUSH
67388: DOUBLE
67389: LD_INT 1
67391: DEC
67392: ST_TO_ADDR
67393: LD_VAR 0 6
67397: PUSH
67398: LD_INT 1
67400: ARRAY
67401: PUSH
67402: FOR_TO
67403: IFFALSE 67525
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67405: LD_ADDR_VAR 0 7
67409: PUSH
67410: LD_VAR 0 6
67414: PUSH
67415: LD_INT 1
67417: ARRAY
67418: PUSH
67419: LD_VAR 0 5
67423: ARRAY
67424: PUSH
67425: LD_VAR 0 6
67429: PUSH
67430: LD_INT 2
67432: ARRAY
67433: PUSH
67434: LD_VAR 0 5
67438: ARRAY
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67444: LD_VAR 0 7
67448: PUSH
67449: LD_INT 1
67451: ARRAY
67452: PPUSH
67453: LD_VAR 0 7
67457: PUSH
67458: LD_INT 2
67460: ARRAY
67461: PPUSH
67462: CALL_OW 428
67466: PUSH
67467: LD_INT 0
67469: EQUAL
67470: IFFALSE 67523
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67472: LD_VAR 0 1
67476: PPUSH
67477: LD_VAR 0 7
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PPUSH
67486: LD_VAR 0 7
67490: PUSH
67491: LD_INT 2
67493: ARRAY
67494: PPUSH
67495: LD_VAR 0 3
67499: PPUSH
67500: CALL_OW 48
// result := IsPlaced ( unit ) ;
67504: LD_ADDR_VAR 0 4
67508: PUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 305
67518: ST_TO_ADDR
// exit ;
67519: POP
67520: POP
67521: GO 67527
// end ; end ;
67523: GO 67402
67525: POP
67526: POP
// end ;
67527: LD_VAR 0 4
67531: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67532: LD_INT 0
67534: PPUSH
67535: PPUSH
67536: PPUSH
// if not side or side > 8 then
67537: LD_VAR 0 1
67541: NOT
67542: PUSH
67543: LD_VAR 0 1
67547: PUSH
67548: LD_INT 8
67550: GREATER
67551: OR
67552: IFFALSE 67556
// exit ;
67554: GO 67743
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67556: LD_ADDR_VAR 0 4
67560: PUSH
67561: LD_INT 22
67563: PUSH
67564: LD_VAR 0 1
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 21
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PPUSH
67587: CALL_OW 69
67591: ST_TO_ADDR
// if not tmp then
67592: LD_VAR 0 4
67596: NOT
67597: IFFALSE 67601
// exit ;
67599: GO 67743
// enable_addtolog := true ;
67601: LD_ADDR_OWVAR 81
67605: PUSH
67606: LD_INT 1
67608: ST_TO_ADDR
// AddToLog ( [ ) ;
67609: LD_STRING [
67611: PPUSH
67612: CALL_OW 561
// for i in tmp do
67616: LD_ADDR_VAR 0 3
67620: PUSH
67621: LD_VAR 0 4
67625: PUSH
67626: FOR_IN
67627: IFFALSE 67734
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67629: LD_STRING [
67631: PUSH
67632: LD_VAR 0 3
67636: PPUSH
67637: CALL_OW 266
67641: STR
67642: PUSH
67643: LD_STRING , 
67645: STR
67646: PUSH
67647: LD_VAR 0 3
67651: PPUSH
67652: CALL_OW 250
67656: STR
67657: PUSH
67658: LD_STRING , 
67660: STR
67661: PUSH
67662: LD_VAR 0 3
67666: PPUSH
67667: CALL_OW 251
67671: STR
67672: PUSH
67673: LD_STRING , 
67675: STR
67676: PUSH
67677: LD_VAR 0 3
67681: PPUSH
67682: CALL_OW 254
67686: STR
67687: PUSH
67688: LD_STRING , 
67690: STR
67691: PUSH
67692: LD_VAR 0 3
67696: PPUSH
67697: LD_INT 1
67699: PPUSH
67700: CALL_OW 268
67704: STR
67705: PUSH
67706: LD_STRING , 
67708: STR
67709: PUSH
67710: LD_VAR 0 3
67714: PPUSH
67715: LD_INT 2
67717: PPUSH
67718: CALL_OW 268
67722: STR
67723: PUSH
67724: LD_STRING ],
67726: STR
67727: PPUSH
67728: CALL_OW 561
// end ;
67732: GO 67626
67734: POP
67735: POP
// AddToLog ( ]; ) ;
67736: LD_STRING ];
67738: PPUSH
67739: CALL_OW 561
// end ;
67743: LD_VAR 0 2
67747: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67748: LD_INT 0
67750: PPUSH
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
// if not area or not rate or not max then
67755: LD_VAR 0 1
67759: NOT
67760: PUSH
67761: LD_VAR 0 2
67765: NOT
67766: OR
67767: PUSH
67768: LD_VAR 0 4
67772: NOT
67773: OR
67774: IFFALSE 67778
// exit ;
67776: GO 67967
// while 1 do
67778: LD_INT 1
67780: IFFALSE 67967
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67782: LD_ADDR_VAR 0 9
67786: PUSH
67787: LD_VAR 0 1
67791: PPUSH
67792: LD_INT 1
67794: PPUSH
67795: CALL_OW 287
67799: PUSH
67800: LD_INT 10
67802: MUL
67803: ST_TO_ADDR
// r := rate / 10 ;
67804: LD_ADDR_VAR 0 7
67808: PUSH
67809: LD_VAR 0 2
67813: PUSH
67814: LD_INT 10
67816: DIVREAL
67817: ST_TO_ADDR
// time := 1 1$00 ;
67818: LD_ADDR_VAR 0 8
67822: PUSH
67823: LD_INT 2100
67825: ST_TO_ADDR
// if amount < min then
67826: LD_VAR 0 9
67830: PUSH
67831: LD_VAR 0 3
67835: LESS
67836: IFFALSE 67854
// r := r * 2 else
67838: LD_ADDR_VAR 0 7
67842: PUSH
67843: LD_VAR 0 7
67847: PUSH
67848: LD_INT 2
67850: MUL
67851: ST_TO_ADDR
67852: GO 67880
// if amount > max then
67854: LD_VAR 0 9
67858: PUSH
67859: LD_VAR 0 4
67863: GREATER
67864: IFFALSE 67880
// r := r / 2 ;
67866: LD_ADDR_VAR 0 7
67870: PUSH
67871: LD_VAR 0 7
67875: PUSH
67876: LD_INT 2
67878: DIVREAL
67879: ST_TO_ADDR
// time := time / r ;
67880: LD_ADDR_VAR 0 8
67884: PUSH
67885: LD_VAR 0 8
67889: PUSH
67890: LD_VAR 0 7
67894: DIVREAL
67895: ST_TO_ADDR
// if time < 0 then
67896: LD_VAR 0 8
67900: PUSH
67901: LD_INT 0
67903: LESS
67904: IFFALSE 67921
// time := time * - 1 ;
67906: LD_ADDR_VAR 0 8
67910: PUSH
67911: LD_VAR 0 8
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: MUL
67920: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67921: LD_VAR 0 8
67925: PUSH
67926: LD_INT 35
67928: PPUSH
67929: LD_INT 875
67931: PPUSH
67932: CALL_OW 12
67936: PLUS
67937: PPUSH
67938: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67942: LD_INT 1
67944: PPUSH
67945: LD_INT 5
67947: PPUSH
67948: CALL_OW 12
67952: PPUSH
67953: LD_VAR 0 1
67957: PPUSH
67958: LD_INT 1
67960: PPUSH
67961: CALL_OW 55
// end ;
67965: GO 67778
// end ;
67967: LD_VAR 0 5
67971: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67972: LD_INT 0
67974: PPUSH
67975: PPUSH
67976: PPUSH
67977: PPUSH
67978: PPUSH
67979: PPUSH
67980: PPUSH
67981: PPUSH
// if not turrets or not factories then
67982: LD_VAR 0 1
67986: NOT
67987: PUSH
67988: LD_VAR 0 2
67992: NOT
67993: OR
67994: IFFALSE 67998
// exit ;
67996: GO 68305
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67998: LD_ADDR_VAR 0 10
68002: PUSH
68003: LD_INT 5
68005: PUSH
68006: LD_INT 6
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: LD_INT 4
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: LD_INT 5
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 24
68040: PUSH
68041: LD_INT 25
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 23
68050: PUSH
68051: LD_INT 27
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 42
68064: PUSH
68065: LD_INT 43
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 44
68074: PUSH
68075: LD_INT 46
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 45
68084: PUSH
68085: LD_INT 47
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// result := [ ] ;
68102: LD_ADDR_VAR 0 3
68106: PUSH
68107: EMPTY
68108: ST_TO_ADDR
// for i in turrets do
68109: LD_ADDR_VAR 0 4
68113: PUSH
68114: LD_VAR 0 1
68118: PUSH
68119: FOR_IN
68120: IFFALSE 68303
// begin nat := GetNation ( i ) ;
68122: LD_ADDR_VAR 0 7
68126: PUSH
68127: LD_VAR 0 4
68131: PPUSH
68132: CALL_OW 248
68136: ST_TO_ADDR
// weapon := 0 ;
68137: LD_ADDR_VAR 0 8
68141: PUSH
68142: LD_INT 0
68144: ST_TO_ADDR
// if not nat then
68145: LD_VAR 0 7
68149: NOT
68150: IFFALSE 68154
// continue ;
68152: GO 68119
// for j in list [ nat ] do
68154: LD_ADDR_VAR 0 5
68158: PUSH
68159: LD_VAR 0 10
68163: PUSH
68164: LD_VAR 0 7
68168: ARRAY
68169: PUSH
68170: FOR_IN
68171: IFFALSE 68212
// if GetBWeapon ( i ) = j [ 1 ] then
68173: LD_VAR 0 4
68177: PPUSH
68178: CALL_OW 269
68182: PUSH
68183: LD_VAR 0 5
68187: PUSH
68188: LD_INT 1
68190: ARRAY
68191: EQUAL
68192: IFFALSE 68210
// begin weapon := j [ 2 ] ;
68194: LD_ADDR_VAR 0 8
68198: PUSH
68199: LD_VAR 0 5
68203: PUSH
68204: LD_INT 2
68206: ARRAY
68207: ST_TO_ADDR
// break ;
68208: GO 68212
// end ;
68210: GO 68170
68212: POP
68213: POP
// if not weapon then
68214: LD_VAR 0 8
68218: NOT
68219: IFFALSE 68223
// continue ;
68221: GO 68119
// for k in factories do
68223: LD_ADDR_VAR 0 6
68227: PUSH
68228: LD_VAR 0 2
68232: PUSH
68233: FOR_IN
68234: IFFALSE 68299
// begin weapons := AvailableWeaponList ( k ) ;
68236: LD_ADDR_VAR 0 9
68240: PUSH
68241: LD_VAR 0 6
68245: PPUSH
68246: CALL_OW 478
68250: ST_TO_ADDR
// if not weapons then
68251: LD_VAR 0 9
68255: NOT
68256: IFFALSE 68260
// continue ;
68258: GO 68233
// if weapon in weapons then
68260: LD_VAR 0 8
68264: PUSH
68265: LD_VAR 0 9
68269: IN
68270: IFFALSE 68297
// begin result := [ i , weapon ] ;
68272: LD_ADDR_VAR 0 3
68276: PUSH
68277: LD_VAR 0 4
68281: PUSH
68282: LD_VAR 0 8
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// exit ;
68291: POP
68292: POP
68293: POP
68294: POP
68295: GO 68305
// end ; end ;
68297: GO 68233
68299: POP
68300: POP
// end ;
68301: GO 68119
68303: POP
68304: POP
// end ;
68305: LD_VAR 0 3
68309: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68310: LD_INT 0
68312: PPUSH
// if not side or side > 8 then
68313: LD_VAR 0 3
68317: NOT
68318: PUSH
68319: LD_VAR 0 3
68323: PUSH
68324: LD_INT 8
68326: GREATER
68327: OR
68328: IFFALSE 68332
// exit ;
68330: GO 68391
// if not range then
68332: LD_VAR 0 4
68336: NOT
68337: IFFALSE 68348
// range := - 12 ;
68339: LD_ADDR_VAR 0 4
68343: PUSH
68344: LD_INT 12
68346: NEG
68347: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68348: LD_VAR 0 1
68352: PPUSH
68353: LD_VAR 0 2
68357: PPUSH
68358: LD_VAR 0 3
68362: PPUSH
68363: LD_VAR 0 4
68367: PPUSH
68368: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68372: LD_VAR 0 1
68376: PPUSH
68377: LD_VAR 0 2
68381: PPUSH
68382: LD_VAR 0 3
68386: PPUSH
68387: CALL_OW 331
// end ;
68391: LD_VAR 0 5
68395: RET
// export function Video ( mode ) ; begin
68396: LD_INT 0
68398: PPUSH
// ingame_video = mode ;
68399: LD_ADDR_OWVAR 52
68403: PUSH
68404: LD_VAR 0 1
68408: ST_TO_ADDR
// interface_hidden = mode ;
68409: LD_ADDR_OWVAR 54
68413: PUSH
68414: LD_VAR 0 1
68418: ST_TO_ADDR
// end ;
68419: LD_VAR 0 2
68423: RET
// export function Join ( array , element ) ; begin
68424: LD_INT 0
68426: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68427: LD_ADDR_VAR 0 3
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: LD_VAR 0 1
68441: PUSH
68442: LD_INT 1
68444: PLUS
68445: PPUSH
68446: LD_VAR 0 2
68450: PPUSH
68451: CALL_OW 1
68455: ST_TO_ADDR
// end ;
68456: LD_VAR 0 3
68460: RET
// export function JoinUnion ( array , element ) ; begin
68461: LD_INT 0
68463: PPUSH
// result := array union element ;
68464: LD_ADDR_VAR 0 3
68468: PUSH
68469: LD_VAR 0 1
68473: PUSH
68474: LD_VAR 0 2
68478: UNION
68479: ST_TO_ADDR
// end ;
68480: LD_VAR 0 3
68484: RET
// export function GetBehemoths ( side ) ; begin
68485: LD_INT 0
68487: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68488: LD_ADDR_VAR 0 2
68492: PUSH
68493: LD_INT 22
68495: PUSH
68496: LD_VAR 0 1
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 31
68507: PUSH
68508: LD_INT 25
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PPUSH
68519: CALL_OW 69
68523: ST_TO_ADDR
// end ;
68524: LD_VAR 0 2
68528: RET
// export function Shuffle ( array ) ; var i , index ; begin
68529: LD_INT 0
68531: PPUSH
68532: PPUSH
68533: PPUSH
// result := [ ] ;
68534: LD_ADDR_VAR 0 2
68538: PUSH
68539: EMPTY
68540: ST_TO_ADDR
// if not array then
68541: LD_VAR 0 1
68545: NOT
68546: IFFALSE 68550
// exit ;
68548: GO 68649
// Randomize ;
68550: CALL_OW 10
// for i = array downto 1 do
68554: LD_ADDR_VAR 0 3
68558: PUSH
68559: DOUBLE
68560: LD_VAR 0 1
68564: INC
68565: ST_TO_ADDR
68566: LD_INT 1
68568: PUSH
68569: FOR_DOWNTO
68570: IFFALSE 68647
// begin index := rand ( 1 , array ) ;
68572: LD_ADDR_VAR 0 4
68576: PUSH
68577: LD_INT 1
68579: PPUSH
68580: LD_VAR 0 1
68584: PPUSH
68585: CALL_OW 12
68589: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68590: LD_ADDR_VAR 0 2
68594: PUSH
68595: LD_VAR 0 2
68599: PPUSH
68600: LD_VAR 0 2
68604: PUSH
68605: LD_INT 1
68607: PLUS
68608: PPUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_VAR 0 4
68618: ARRAY
68619: PPUSH
68620: CALL_OW 2
68624: ST_TO_ADDR
// array := Delete ( array , index ) ;
68625: LD_ADDR_VAR 0 1
68629: PUSH
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_VAR 0 4
68639: PPUSH
68640: CALL_OW 3
68644: ST_TO_ADDR
// end ;
68645: GO 68569
68647: POP
68648: POP
// end ;
68649: LD_VAR 0 2
68653: RET
// export function GetBaseMaterials ( base ) ; begin
68654: LD_INT 0
68656: PPUSH
// result := [ 0 , 0 , 0 ] ;
68657: LD_ADDR_VAR 0 2
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: ST_TO_ADDR
// if not base then
68676: LD_VAR 0 1
68680: NOT
68681: IFFALSE 68685
// exit ;
68683: GO 68734
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68685: LD_ADDR_VAR 0 2
68689: PUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_INT 1
68697: PPUSH
68698: CALL_OW 275
68702: PUSH
68703: LD_VAR 0 1
68707: PPUSH
68708: LD_INT 2
68710: PPUSH
68711: CALL_OW 275
68715: PUSH
68716: LD_VAR 0 1
68720: PPUSH
68721: LD_INT 3
68723: PPUSH
68724: CALL_OW 275
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 2
68738: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68739: LD_INT 0
68741: PPUSH
68742: PPUSH
// result := array ;
68743: LD_ADDR_VAR 0 3
68747: PUSH
68748: LD_VAR 0 1
68752: ST_TO_ADDR
// if size >= result then
68753: LD_VAR 0 2
68757: PUSH
68758: LD_VAR 0 3
68762: GREATEREQUAL
68763: IFFALSE 68767
// exit ;
68765: GO 68817
// if size then
68767: LD_VAR 0 2
68771: IFFALSE 68817
// for i := array downto size do
68773: LD_ADDR_VAR 0 4
68777: PUSH
68778: DOUBLE
68779: LD_VAR 0 1
68783: INC
68784: ST_TO_ADDR
68785: LD_VAR 0 2
68789: PUSH
68790: FOR_DOWNTO
68791: IFFALSE 68815
// result := Delete ( result , result ) ;
68793: LD_ADDR_VAR 0 3
68797: PUSH
68798: LD_VAR 0 3
68802: PPUSH
68803: LD_VAR 0 3
68807: PPUSH
68808: CALL_OW 3
68812: ST_TO_ADDR
68813: GO 68790
68815: POP
68816: POP
// end ;
68817: LD_VAR 0 3
68821: RET
// export function ComExit ( unit ) ; var tmp ; begin
68822: LD_INT 0
68824: PPUSH
68825: PPUSH
// if not IsInUnit ( unit ) then
68826: LD_VAR 0 1
68830: PPUSH
68831: CALL_OW 310
68835: NOT
68836: IFFALSE 68840
// exit ;
68838: GO 68900
// tmp := IsInUnit ( unit ) ;
68840: LD_ADDR_VAR 0 3
68844: PUSH
68845: LD_VAR 0 1
68849: PPUSH
68850: CALL_OW 310
68854: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68855: LD_VAR 0 3
68859: PPUSH
68860: CALL_OW 247
68864: PUSH
68865: LD_INT 2
68867: EQUAL
68868: IFFALSE 68881
// ComExitVehicle ( unit ) else
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 121
68879: GO 68890
// ComExitBuilding ( unit ) ;
68881: LD_VAR 0 1
68885: PPUSH
68886: CALL_OW 122
// result := tmp ;
68890: LD_ADDR_VAR 0 2
68894: PUSH
68895: LD_VAR 0 3
68899: ST_TO_ADDR
// end ;
68900: LD_VAR 0 2
68904: RET
// export function ComExitAll ( units ) ; var i ; begin
68905: LD_INT 0
68907: PPUSH
68908: PPUSH
// if not units then
68909: LD_VAR 0 1
68913: NOT
68914: IFFALSE 68918
// exit ;
68916: GO 68944
// for i in units do
68918: LD_ADDR_VAR 0 3
68922: PUSH
68923: LD_VAR 0 1
68927: PUSH
68928: FOR_IN
68929: IFFALSE 68942
// ComExit ( i ) ;
68931: LD_VAR 0 3
68935: PPUSH
68936: CALL 68822 0 1
68940: GO 68928
68942: POP
68943: POP
// end ;
68944: LD_VAR 0 2
68948: RET
// export function ResetHc ; begin
68949: LD_INT 0
68951: PPUSH
// InitHc ;
68952: CALL_OW 19
// hc_importance := 0 ;
68956: LD_ADDR_OWVAR 32
68960: PUSH
68961: LD_INT 0
68963: ST_TO_ADDR
// end ;
68964: LD_VAR 0 1
68968: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68969: LD_INT 0
68971: PPUSH
68972: PPUSH
68973: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68974: LD_ADDR_VAR 0 6
68978: PUSH
68979: LD_VAR 0 1
68983: PUSH
68984: LD_VAR 0 3
68988: PLUS
68989: PUSH
68990: LD_INT 2
68992: DIV
68993: ST_TO_ADDR
// if _x < 0 then
68994: LD_VAR 0 6
68998: PUSH
68999: LD_INT 0
69001: LESS
69002: IFFALSE 69019
// _x := _x * - 1 ;
69004: LD_ADDR_VAR 0 6
69008: PUSH
69009: LD_VAR 0 6
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: MUL
69018: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69019: LD_ADDR_VAR 0 7
69023: PUSH
69024: LD_VAR 0 2
69028: PUSH
69029: LD_VAR 0 4
69033: PLUS
69034: PUSH
69035: LD_INT 2
69037: DIV
69038: ST_TO_ADDR
// if _y < 0 then
69039: LD_VAR 0 7
69043: PUSH
69044: LD_INT 0
69046: LESS
69047: IFFALSE 69064
// _y := _y * - 1 ;
69049: LD_ADDR_VAR 0 7
69053: PUSH
69054: LD_VAR 0 7
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: MUL
69063: ST_TO_ADDR
// result := [ _x , _y ] ;
69064: LD_ADDR_VAR 0 5
69068: PUSH
69069: LD_VAR 0 6
69073: PUSH
69074: LD_VAR 0 7
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: ST_TO_ADDR
// end ;
69083: LD_VAR 0 5
69087: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69088: LD_INT 0
69090: PPUSH
69091: PPUSH
69092: PPUSH
69093: PPUSH
// task := GetTaskList ( unit ) ;
69094: LD_ADDR_VAR 0 7
69098: PUSH
69099: LD_VAR 0 1
69103: PPUSH
69104: CALL_OW 437
69108: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69109: LD_VAR 0 7
69113: NOT
69114: PUSH
69115: LD_VAR 0 1
69119: PPUSH
69120: LD_VAR 0 2
69124: PPUSH
69125: CALL_OW 308
69129: NOT
69130: AND
69131: IFFALSE 69135
// exit ;
69133: GO 69253
// if IsInArea ( unit , area ) then
69135: LD_VAR 0 1
69139: PPUSH
69140: LD_VAR 0 2
69144: PPUSH
69145: CALL_OW 308
69149: IFFALSE 69167
// begin ComMoveToArea ( unit , goAway ) ;
69151: LD_VAR 0 1
69155: PPUSH
69156: LD_VAR 0 3
69160: PPUSH
69161: CALL_OW 113
// exit ;
69165: GO 69253
// end ; if task [ 1 ] [ 1 ] <> M then
69167: LD_VAR 0 7
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PUSH
69176: LD_INT 1
69178: ARRAY
69179: PUSH
69180: LD_STRING M
69182: NONEQUAL
69183: IFFALSE 69187
// exit ;
69185: GO 69253
// x := task [ 1 ] [ 2 ] ;
69187: LD_ADDR_VAR 0 5
69191: PUSH
69192: LD_VAR 0 7
69196: PUSH
69197: LD_INT 1
69199: ARRAY
69200: PUSH
69201: LD_INT 2
69203: ARRAY
69204: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69205: LD_ADDR_VAR 0 6
69209: PUSH
69210: LD_VAR 0 7
69214: PUSH
69215: LD_INT 1
69217: ARRAY
69218: PUSH
69219: LD_INT 3
69221: ARRAY
69222: ST_TO_ADDR
// if InArea ( x , y , area ) then
69223: LD_VAR 0 5
69227: PPUSH
69228: LD_VAR 0 6
69232: PPUSH
69233: LD_VAR 0 2
69237: PPUSH
69238: CALL_OW 309
69242: IFFALSE 69253
// ComStop ( unit ) ;
69244: LD_VAR 0 1
69248: PPUSH
69249: CALL_OW 141
// end ;
69253: LD_VAR 0 4
69257: RET
// export function Abs ( value ) ; begin
69258: LD_INT 0
69260: PPUSH
// result := value ;
69261: LD_ADDR_VAR 0 2
69265: PUSH
69266: LD_VAR 0 1
69270: ST_TO_ADDR
// if value < 0 then
69271: LD_VAR 0 1
69275: PUSH
69276: LD_INT 0
69278: LESS
69279: IFFALSE 69296
// result := value * - 1 ;
69281: LD_ADDR_VAR 0 2
69285: PUSH
69286: LD_VAR 0 1
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: MUL
69295: ST_TO_ADDR
// end ;
69296: LD_VAR 0 2
69300: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69301: LD_INT 0
69303: PPUSH
69304: PPUSH
69305: PPUSH
69306: PPUSH
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
// if not unit or not building then
69311: LD_VAR 0 1
69315: NOT
69316: PUSH
69317: LD_VAR 0 2
69321: NOT
69322: OR
69323: IFFALSE 69327
// exit ;
69325: GO 69553
// x := GetX ( building ) ;
69327: LD_ADDR_VAR 0 4
69331: PUSH
69332: LD_VAR 0 2
69336: PPUSH
69337: CALL_OW 250
69341: ST_TO_ADDR
// y := GetY ( building ) ;
69342: LD_ADDR_VAR 0 6
69346: PUSH
69347: LD_VAR 0 2
69351: PPUSH
69352: CALL_OW 251
69356: ST_TO_ADDR
// d := GetDir ( building ) ;
69357: LD_ADDR_VAR 0 8
69361: PUSH
69362: LD_VAR 0 2
69366: PPUSH
69367: CALL_OW 254
69371: ST_TO_ADDR
// r := 4 ;
69372: LD_ADDR_VAR 0 9
69376: PUSH
69377: LD_INT 4
69379: ST_TO_ADDR
// for i := 1 to 5 do
69380: LD_ADDR_VAR 0 10
69384: PUSH
69385: DOUBLE
69386: LD_INT 1
69388: DEC
69389: ST_TO_ADDR
69390: LD_INT 5
69392: PUSH
69393: FOR_TO
69394: IFFALSE 69551
// begin _x := ShiftX ( x , d , r + i ) ;
69396: LD_ADDR_VAR 0 5
69400: PUSH
69401: LD_VAR 0 4
69405: PPUSH
69406: LD_VAR 0 8
69410: PPUSH
69411: LD_VAR 0 9
69415: PUSH
69416: LD_VAR 0 10
69420: PLUS
69421: PPUSH
69422: CALL_OW 272
69426: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69427: LD_ADDR_VAR 0 7
69431: PUSH
69432: LD_VAR 0 6
69436: PPUSH
69437: LD_VAR 0 8
69441: PPUSH
69442: LD_VAR 0 9
69446: PUSH
69447: LD_VAR 0 10
69451: PLUS
69452: PPUSH
69453: CALL_OW 273
69457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69458: LD_VAR 0 5
69462: PPUSH
69463: LD_VAR 0 7
69467: PPUSH
69468: CALL_OW 488
69472: PUSH
69473: LD_VAR 0 5
69477: PPUSH
69478: LD_VAR 0 7
69482: PPUSH
69483: CALL_OW 428
69487: PPUSH
69488: CALL_OW 247
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: LD_INT 2
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: IN
69503: NOT
69504: AND
69505: IFFALSE 69549
// begin ComMoveXY ( unit , _x , _y ) ;
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_VAR 0 5
69516: PPUSH
69517: LD_VAR 0 7
69521: PPUSH
69522: CALL_OW 111
// result := [ _x , _y ] ;
69526: LD_ADDR_VAR 0 3
69530: PUSH
69531: LD_VAR 0 5
69535: PUSH
69536: LD_VAR 0 7
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: ST_TO_ADDR
// exit ;
69545: POP
69546: POP
69547: GO 69553
// end ; end ;
69549: GO 69393
69551: POP
69552: POP
// end ;
69553: LD_VAR 0 3
69557: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69558: LD_INT 0
69560: PPUSH
69561: PPUSH
69562: PPUSH
// result := 0 ;
69563: LD_ADDR_VAR 0 3
69567: PUSH
69568: LD_INT 0
69570: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69571: LD_VAR 0 1
69575: PUSH
69576: LD_INT 0
69578: LESS
69579: PUSH
69580: LD_VAR 0 1
69584: PUSH
69585: LD_INT 8
69587: GREATER
69588: OR
69589: PUSH
69590: LD_VAR 0 2
69594: PUSH
69595: LD_INT 0
69597: LESS
69598: OR
69599: PUSH
69600: LD_VAR 0 2
69604: PUSH
69605: LD_INT 8
69607: GREATER
69608: OR
69609: IFFALSE 69613
// exit ;
69611: GO 69688
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69613: LD_ADDR_VAR 0 4
69617: PUSH
69618: LD_INT 22
69620: PUSH
69621: LD_VAR 0 2
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PPUSH
69630: CALL_OW 69
69634: PUSH
69635: FOR_IN
69636: IFFALSE 69686
// begin un := UnitShoot ( i ) ;
69638: LD_ADDR_VAR 0 5
69642: PUSH
69643: LD_VAR 0 4
69647: PPUSH
69648: CALL_OW 504
69652: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69653: LD_VAR 0 5
69657: PPUSH
69658: CALL_OW 255
69662: PUSH
69663: LD_VAR 0 1
69667: EQUAL
69668: IFFALSE 69684
// begin result := un ;
69670: LD_ADDR_VAR 0 3
69674: PUSH
69675: LD_VAR 0 5
69679: ST_TO_ADDR
// exit ;
69680: POP
69681: POP
69682: GO 69688
// end ; end ;
69684: GO 69635
69686: POP
69687: POP
// end ;
69688: LD_VAR 0 3
69692: RET
// export function GetCargoBay ( units ) ; begin
69693: LD_INT 0
69695: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69696: LD_ADDR_VAR 0 2
69700: PUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 34
69711: PUSH
69712: LD_INT 12
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 34
69721: PUSH
69722: LD_INT 51
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 34
69731: PUSH
69732: LD_INT 32
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 34
69741: PUSH
69742: LD_INT 89
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: PPUSH
69756: CALL_OW 72
69760: ST_TO_ADDR
// end ;
69761: LD_VAR 0 2
69765: RET
// export function Negate ( value ) ; begin
69766: LD_INT 0
69768: PPUSH
// result := not value ;
69769: LD_ADDR_VAR 0 2
69773: PUSH
69774: LD_VAR 0 1
69778: NOT
69779: ST_TO_ADDR
// end ;
69780: LD_VAR 0 2
69784: RET
// export function Inc ( value ) ; begin
69785: LD_INT 0
69787: PPUSH
// result := value + 1 ;
69788: LD_ADDR_VAR 0 2
69792: PUSH
69793: LD_VAR 0 1
69797: PUSH
69798: LD_INT 1
69800: PLUS
69801: ST_TO_ADDR
// end ;
69802: LD_VAR 0 2
69806: RET
// export function Dec ( value ) ; begin
69807: LD_INT 0
69809: PPUSH
// result := value - 1 ;
69810: LD_ADDR_VAR 0 2
69814: PUSH
69815: LD_VAR 0 1
69819: PUSH
69820: LD_INT 1
69822: MINUS
69823: ST_TO_ADDR
// end ;
69824: LD_VAR 0 2
69828: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69829: LD_INT 0
69831: PPUSH
69832: PPUSH
69833: PPUSH
69834: PPUSH
69835: PPUSH
69836: PPUSH
69837: PPUSH
69838: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69839: LD_VAR 0 1
69843: PPUSH
69844: LD_VAR 0 2
69848: PPUSH
69849: CALL_OW 488
69853: NOT
69854: PUSH
69855: LD_VAR 0 3
69859: PPUSH
69860: LD_VAR 0 4
69864: PPUSH
69865: CALL_OW 488
69869: NOT
69870: OR
69871: IFFALSE 69884
// begin result := - 1 ;
69873: LD_ADDR_VAR 0 5
69877: PUSH
69878: LD_INT 1
69880: NEG
69881: ST_TO_ADDR
// exit ;
69882: GO 70119
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69884: LD_ADDR_VAR 0 12
69888: PUSH
69889: LD_VAR 0 1
69893: PPUSH
69894: LD_VAR 0 2
69898: PPUSH
69899: LD_VAR 0 3
69903: PPUSH
69904: LD_VAR 0 4
69908: PPUSH
69909: CALL 68969 0 4
69913: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69914: LD_ADDR_VAR 0 11
69918: PUSH
69919: LD_VAR 0 1
69923: PPUSH
69924: LD_VAR 0 2
69928: PPUSH
69929: LD_VAR 0 12
69933: PUSH
69934: LD_INT 1
69936: ARRAY
69937: PPUSH
69938: LD_VAR 0 12
69942: PUSH
69943: LD_INT 2
69945: ARRAY
69946: PPUSH
69947: CALL_OW 298
69951: ST_TO_ADDR
// distance := 9999 ;
69952: LD_ADDR_VAR 0 10
69956: PUSH
69957: LD_INT 9999
69959: ST_TO_ADDR
// for i := 0 to 5 do
69960: LD_ADDR_VAR 0 6
69964: PUSH
69965: DOUBLE
69966: LD_INT 0
69968: DEC
69969: ST_TO_ADDR
69970: LD_INT 5
69972: PUSH
69973: FOR_TO
69974: IFFALSE 70117
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69976: LD_ADDR_VAR 0 7
69980: PUSH
69981: LD_VAR 0 1
69985: PPUSH
69986: LD_VAR 0 6
69990: PPUSH
69991: LD_VAR 0 11
69995: PPUSH
69996: CALL_OW 272
70000: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70001: LD_ADDR_VAR 0 8
70005: PUSH
70006: LD_VAR 0 2
70010: PPUSH
70011: LD_VAR 0 6
70015: PPUSH
70016: LD_VAR 0 11
70020: PPUSH
70021: CALL_OW 273
70025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70026: LD_VAR 0 7
70030: PPUSH
70031: LD_VAR 0 8
70035: PPUSH
70036: CALL_OW 488
70040: NOT
70041: IFFALSE 70045
// continue ;
70043: GO 69973
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70045: LD_ADDR_VAR 0 9
70049: PUSH
70050: LD_VAR 0 12
70054: PUSH
70055: LD_INT 1
70057: ARRAY
70058: PPUSH
70059: LD_VAR 0 12
70063: PUSH
70064: LD_INT 2
70066: ARRAY
70067: PPUSH
70068: LD_VAR 0 7
70072: PPUSH
70073: LD_VAR 0 8
70077: PPUSH
70078: CALL_OW 298
70082: ST_TO_ADDR
// if tmp < distance then
70083: LD_VAR 0 9
70087: PUSH
70088: LD_VAR 0 10
70092: LESS
70093: IFFALSE 70115
// begin result := i ;
70095: LD_ADDR_VAR 0 5
70099: PUSH
70100: LD_VAR 0 6
70104: ST_TO_ADDR
// distance := tmp ;
70105: LD_ADDR_VAR 0 10
70109: PUSH
70110: LD_VAR 0 9
70114: ST_TO_ADDR
// end ; end ;
70115: GO 69973
70117: POP
70118: POP
// end ;
70119: LD_VAR 0 5
70123: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70124: LD_INT 0
70126: PPUSH
70127: PPUSH
// if not driver or not IsInUnit ( driver ) then
70128: LD_VAR 0 1
70132: NOT
70133: PUSH
70134: LD_VAR 0 1
70138: PPUSH
70139: CALL_OW 310
70143: NOT
70144: OR
70145: IFFALSE 70149
// exit ;
70147: GO 70239
// vehicle := IsInUnit ( driver ) ;
70149: LD_ADDR_VAR 0 3
70153: PUSH
70154: LD_VAR 0 1
70158: PPUSH
70159: CALL_OW 310
70163: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70164: LD_VAR 0 1
70168: PPUSH
70169: LD_STRING \
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: PUSH
70199: LD_STRING E
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_VAR 0 3
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PPUSH
70235: CALL_OW 446
// end ;
70239: LD_VAR 0 2
70243: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70244: LD_INT 0
70246: PPUSH
70247: PPUSH
// if not driver or not IsInUnit ( driver ) then
70248: LD_VAR 0 1
70252: NOT
70253: PUSH
70254: LD_VAR 0 1
70258: PPUSH
70259: CALL_OW 310
70263: NOT
70264: OR
70265: IFFALSE 70269
// exit ;
70267: GO 70359
// vehicle := IsInUnit ( driver ) ;
70269: LD_ADDR_VAR 0 3
70273: PUSH
70274: LD_VAR 0 1
70278: PPUSH
70279: CALL_OW 310
70283: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70284: LD_VAR 0 1
70288: PPUSH
70289: LD_STRING \
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: PUSH
70319: LD_STRING E
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 0
70327: PUSH
70328: LD_VAR 0 3
70332: PUSH
70333: LD_INT 0
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PPUSH
70355: CALL_OW 447
// end ;
70359: LD_VAR 0 2
70363: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
70368: PPUSH
// tmp := [ ] ;
70369: LD_ADDR_VAR 0 5
70373: PUSH
70374: EMPTY
70375: ST_TO_ADDR
// for i in units do
70376: LD_ADDR_VAR 0 4
70380: PUSH
70381: LD_VAR 0 1
70385: PUSH
70386: FOR_IN
70387: IFFALSE 70425
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70389: LD_ADDR_VAR 0 5
70393: PUSH
70394: LD_VAR 0 5
70398: PPUSH
70399: LD_VAR 0 5
70403: PUSH
70404: LD_INT 1
70406: PLUS
70407: PPUSH
70408: LD_VAR 0 4
70412: PPUSH
70413: CALL_OW 256
70417: PPUSH
70418: CALL_OW 2
70422: ST_TO_ADDR
70423: GO 70386
70425: POP
70426: POP
// if not tmp then
70427: LD_VAR 0 5
70431: NOT
70432: IFFALSE 70436
// exit ;
70434: GO 70484
// if asc then
70436: LD_VAR 0 2
70440: IFFALSE 70464
// result := SortListByListAsc ( units , tmp ) else
70442: LD_ADDR_VAR 0 3
70446: PUSH
70447: LD_VAR 0 1
70451: PPUSH
70452: LD_VAR 0 5
70456: PPUSH
70457: CALL_OW 76
70461: ST_TO_ADDR
70462: GO 70484
// result := SortListByListDesc ( units , tmp ) ;
70464: LD_ADDR_VAR 0 3
70468: PUSH
70469: LD_VAR 0 1
70473: PPUSH
70474: LD_VAR 0 5
70478: PPUSH
70479: CALL_OW 77
70483: ST_TO_ADDR
// end ;
70484: LD_VAR 0 3
70488: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70489: LD_INT 0
70491: PPUSH
70492: PPUSH
// task := GetTaskList ( mech ) ;
70493: LD_ADDR_VAR 0 4
70497: PUSH
70498: LD_VAR 0 1
70502: PPUSH
70503: CALL_OW 437
70507: ST_TO_ADDR
// if not task then
70508: LD_VAR 0 4
70512: NOT
70513: IFFALSE 70517
// exit ;
70515: GO 70559
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70517: LD_ADDR_VAR 0 3
70521: PUSH
70522: LD_VAR 0 4
70526: PUSH
70527: LD_INT 1
70529: ARRAY
70530: PUSH
70531: LD_INT 1
70533: ARRAY
70534: PUSH
70535: LD_STRING r
70537: EQUAL
70538: PUSH
70539: LD_VAR 0 4
70543: PUSH
70544: LD_INT 1
70546: ARRAY
70547: PUSH
70548: LD_INT 4
70550: ARRAY
70551: PUSH
70552: LD_VAR 0 2
70556: EQUAL
70557: AND
70558: ST_TO_ADDR
// end ;
70559: LD_VAR 0 3
70563: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70564: LD_INT 0
70566: PPUSH
// SetDir ( unit , d ) ;
70567: LD_VAR 0 1
70571: PPUSH
70572: LD_VAR 0 4
70576: PPUSH
70577: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70581: LD_VAR 0 1
70585: PPUSH
70586: LD_VAR 0 2
70590: PPUSH
70591: LD_VAR 0 3
70595: PPUSH
70596: LD_VAR 0 5
70600: PPUSH
70601: CALL_OW 48
// end ;
70605: LD_VAR 0 6
70609: RET
// export function ToNaturalNumber ( number ) ; begin
70610: LD_INT 0
70612: PPUSH
// result := number div 1 ;
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_VAR 0 1
70622: PUSH
70623: LD_INT 1
70625: DIV
70626: ST_TO_ADDR
// if number < 0 then
70627: LD_VAR 0 1
70631: PUSH
70632: LD_INT 0
70634: LESS
70635: IFFALSE 70645
// result := 0 ;
70637: LD_ADDR_VAR 0 2
70641: PUSH
70642: LD_INT 0
70644: ST_TO_ADDR
// end ;
70645: LD_VAR 0 2
70649: RET
// export function SortByClass ( units , class ) ; var un ; begin
70650: LD_INT 0
70652: PPUSH
70653: PPUSH
// if not units or not class then
70654: LD_VAR 0 1
70658: NOT
70659: PUSH
70660: LD_VAR 0 2
70664: NOT
70665: OR
70666: IFFALSE 70670
// exit ;
70668: GO 70765
// result := [ ] ;
70670: LD_ADDR_VAR 0 3
70674: PUSH
70675: EMPTY
70676: ST_TO_ADDR
// for un in units do
70677: LD_ADDR_VAR 0 4
70681: PUSH
70682: LD_VAR 0 1
70686: PUSH
70687: FOR_IN
70688: IFFALSE 70763
// if GetClass ( un ) = class then
70690: LD_VAR 0 4
70694: PPUSH
70695: CALL_OW 257
70699: PUSH
70700: LD_VAR 0 2
70704: EQUAL
70705: IFFALSE 70732
// result := Insert ( result , 1 , un ) else
70707: LD_ADDR_VAR 0 3
70711: PUSH
70712: LD_VAR 0 3
70716: PPUSH
70717: LD_INT 1
70719: PPUSH
70720: LD_VAR 0 4
70724: PPUSH
70725: CALL_OW 2
70729: ST_TO_ADDR
70730: GO 70761
// result := Replace ( result , result + 1 , un ) ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_VAR 0 3
70741: PPUSH
70742: LD_VAR 0 3
70746: PUSH
70747: LD_INT 1
70749: PLUS
70750: PPUSH
70751: LD_VAR 0 4
70755: PPUSH
70756: CALL_OW 1
70760: ST_TO_ADDR
70761: GO 70687
70763: POP
70764: POP
// end ;
70765: LD_VAR 0 3
70769: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70770: LD_INT 0
70772: PPUSH
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
70777: PPUSH
70778: PPUSH
// result := [ ] ;
70779: LD_ADDR_VAR 0 4
70783: PUSH
70784: EMPTY
70785: ST_TO_ADDR
// if x - r < 0 then
70786: LD_VAR 0 1
70790: PUSH
70791: LD_VAR 0 3
70795: MINUS
70796: PUSH
70797: LD_INT 0
70799: LESS
70800: IFFALSE 70812
// min_x := 0 else
70802: LD_ADDR_VAR 0 8
70806: PUSH
70807: LD_INT 0
70809: ST_TO_ADDR
70810: GO 70828
// min_x := x - r ;
70812: LD_ADDR_VAR 0 8
70816: PUSH
70817: LD_VAR 0 1
70821: PUSH
70822: LD_VAR 0 3
70826: MINUS
70827: ST_TO_ADDR
// if y - r < 0 then
70828: LD_VAR 0 2
70832: PUSH
70833: LD_VAR 0 3
70837: MINUS
70838: PUSH
70839: LD_INT 0
70841: LESS
70842: IFFALSE 70854
// min_y := 0 else
70844: LD_ADDR_VAR 0 7
70848: PUSH
70849: LD_INT 0
70851: ST_TO_ADDR
70852: GO 70870
// min_y := y - r ;
70854: LD_ADDR_VAR 0 7
70858: PUSH
70859: LD_VAR 0 2
70863: PUSH
70864: LD_VAR 0 3
70868: MINUS
70869: ST_TO_ADDR
// max_x := x + r ;
70870: LD_ADDR_VAR 0 9
70874: PUSH
70875: LD_VAR 0 1
70879: PUSH
70880: LD_VAR 0 3
70884: PLUS
70885: ST_TO_ADDR
// max_y := y + r ;
70886: LD_ADDR_VAR 0 10
70890: PUSH
70891: LD_VAR 0 2
70895: PUSH
70896: LD_VAR 0 3
70900: PLUS
70901: ST_TO_ADDR
// for _x = min_x to max_x do
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: DOUBLE
70908: LD_VAR 0 8
70912: DEC
70913: ST_TO_ADDR
70914: LD_VAR 0 9
70918: PUSH
70919: FOR_TO
70920: IFFALSE 71021
// for _y = min_y to max_y do
70922: LD_ADDR_VAR 0 6
70926: PUSH
70927: DOUBLE
70928: LD_VAR 0 7
70932: DEC
70933: ST_TO_ADDR
70934: LD_VAR 0 10
70938: PUSH
70939: FOR_TO
70940: IFFALSE 71017
// begin if not ValidHex ( _x , _y ) then
70942: LD_VAR 0 5
70946: PPUSH
70947: LD_VAR 0 6
70951: PPUSH
70952: CALL_OW 488
70956: NOT
70957: IFFALSE 70961
// continue ;
70959: GO 70939
// if GetResourceTypeXY ( _x , _y ) then
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_VAR 0 6
70970: PPUSH
70971: CALL_OW 283
70975: IFFALSE 71015
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70977: LD_ADDR_VAR 0 4
70981: PUSH
70982: LD_VAR 0 4
70986: PPUSH
70987: LD_VAR 0 4
70991: PUSH
70992: LD_INT 1
70994: PLUS
70995: PPUSH
70996: LD_VAR 0 5
71000: PUSH
71001: LD_VAR 0 6
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PPUSH
71010: CALL_OW 1
71014: ST_TO_ADDR
// end ;
71015: GO 70939
71017: POP
71018: POP
71019: GO 70919
71021: POP
71022: POP
// end ;
71023: LD_VAR 0 4
71027: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71028: LD_INT 0
71030: PPUSH
71031: PPUSH
71032: PPUSH
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
71037: PPUSH
// if not units then
71038: LD_VAR 0 1
71042: NOT
71043: IFFALSE 71047
// exit ;
71045: GO 71571
// result := UnitFilter ( units , [ f_ok ] ) ;
71047: LD_ADDR_VAR 0 3
71051: PUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: LD_INT 50
71059: PUSH
71060: EMPTY
71061: LIST
71062: PPUSH
71063: CALL_OW 72
71067: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71068: LD_ADDR_VAR 0 8
71072: PUSH
71073: LD_VAR 0 1
71077: PUSH
71078: LD_INT 1
71080: ARRAY
71081: PPUSH
71082: CALL_OW 255
71086: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71087: LD_ADDR_VAR 0 10
71091: PUSH
71092: LD_INT 29
71094: PUSH
71095: LD_INT 91
71097: PUSH
71098: LD_INT 49
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: ST_TO_ADDR
// if not result then
71106: LD_VAR 0 3
71110: NOT
71111: IFFALSE 71115
// exit ;
71113: GO 71571
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71115: LD_ADDR_VAR 0 5
71119: PUSH
71120: LD_INT 81
71122: PUSH
71123: LD_VAR 0 8
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PPUSH
71132: CALL_OW 69
71136: ST_TO_ADDR
// for i in result do
71137: LD_ADDR_VAR 0 4
71141: PUSH
71142: LD_VAR 0 3
71146: PUSH
71147: FOR_IN
71148: IFFALSE 71569
// begin tag := GetTag ( i ) + 1 ;
71150: LD_ADDR_VAR 0 9
71154: PUSH
71155: LD_VAR 0 4
71159: PPUSH
71160: CALL_OW 110
71164: PUSH
71165: LD_INT 1
71167: PLUS
71168: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71169: LD_ADDR_VAR 0 7
71173: PUSH
71174: LD_VAR 0 4
71178: PPUSH
71179: CALL_OW 250
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: CALL_OW 251
71193: PPUSH
71194: LD_INT 6
71196: PPUSH
71197: CALL 70770 0 3
71201: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71202: LD_VAR 0 4
71206: PPUSH
71207: CALL_OW 247
71211: PUSH
71212: LD_INT 2
71214: EQUAL
71215: PUSH
71216: LD_VAR 0 7
71220: AND
71221: PUSH
71222: LD_VAR 0 4
71226: PPUSH
71227: CALL_OW 264
71231: PUSH
71232: LD_VAR 0 10
71236: IN
71237: NOT
71238: AND
71239: IFFALSE 71278
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71241: LD_VAR 0 4
71245: PPUSH
71246: LD_VAR 0 7
71250: PUSH
71251: LD_INT 1
71253: ARRAY
71254: PUSH
71255: LD_INT 1
71257: ARRAY
71258: PPUSH
71259: LD_VAR 0 7
71263: PUSH
71264: LD_INT 1
71266: ARRAY
71267: PUSH
71268: LD_INT 2
71270: ARRAY
71271: PPUSH
71272: CALL_OW 116
71276: GO 71567
// if path > tag then
71278: LD_VAR 0 2
71282: PUSH
71283: LD_VAR 0 9
71287: GREATER
71288: IFFALSE 71496
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71290: LD_ADDR_VAR 0 6
71294: PUSH
71295: LD_VAR 0 5
71299: PPUSH
71300: LD_INT 91
71302: PUSH
71303: LD_VAR 0 4
71307: PUSH
71308: LD_INT 8
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: PPUSH
71316: CALL_OW 72
71320: ST_TO_ADDR
// if nearEnemy then
71321: LD_VAR 0 6
71325: IFFALSE 71394
// begin if GetWeapon ( i ) = ru_time_lapser then
71327: LD_VAR 0 4
71331: PPUSH
71332: CALL_OW 264
71336: PUSH
71337: LD_INT 49
71339: EQUAL
71340: IFFALSE 71368
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71342: LD_VAR 0 4
71346: PPUSH
71347: LD_VAR 0 6
71351: PPUSH
71352: LD_VAR 0 4
71356: PPUSH
71357: CALL_OW 74
71361: PPUSH
71362: CALL_OW 112
71366: GO 71392
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71368: LD_VAR 0 4
71372: PPUSH
71373: LD_VAR 0 6
71377: PPUSH
71378: LD_VAR 0 4
71382: PPUSH
71383: CALL_OW 74
71387: PPUSH
71388: CALL_OW 115
// end else
71392: GO 71494
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71394: LD_VAR 0 4
71398: PPUSH
71399: LD_VAR 0 2
71403: PUSH
71404: LD_VAR 0 9
71408: ARRAY
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PPUSH
71414: LD_VAR 0 2
71418: PUSH
71419: LD_VAR 0 9
71423: ARRAY
71424: PUSH
71425: LD_INT 2
71427: ARRAY
71428: PPUSH
71429: CALL_OW 297
71433: PUSH
71434: LD_INT 6
71436: GREATER
71437: IFFALSE 71480
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71439: LD_VAR 0 4
71443: PPUSH
71444: LD_VAR 0 2
71448: PUSH
71449: LD_VAR 0 9
71453: ARRAY
71454: PUSH
71455: LD_INT 1
71457: ARRAY
71458: PPUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_VAR 0 9
71468: ARRAY
71469: PUSH
71470: LD_INT 2
71472: ARRAY
71473: PPUSH
71474: CALL_OW 114
71478: GO 71494
// SetTag ( i , tag ) ;
71480: LD_VAR 0 4
71484: PPUSH
71485: LD_VAR 0 9
71489: PPUSH
71490: CALL_OW 109
// end else
71494: GO 71567
// if enemy then
71496: LD_VAR 0 5
71500: IFFALSE 71567
// begin if GetWeapon ( i ) = ru_time_lapser then
71502: LD_VAR 0 4
71506: PPUSH
71507: CALL_OW 264
71511: PUSH
71512: LD_INT 49
71514: EQUAL
71515: IFFALSE 71543
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71517: LD_VAR 0 4
71521: PPUSH
71522: LD_VAR 0 5
71526: PPUSH
71527: LD_VAR 0 4
71531: PPUSH
71532: CALL_OW 74
71536: PPUSH
71537: CALL_OW 112
71541: GO 71567
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71543: LD_VAR 0 4
71547: PPUSH
71548: LD_VAR 0 5
71552: PPUSH
71553: LD_VAR 0 4
71557: PPUSH
71558: CALL_OW 74
71562: PPUSH
71563: CALL_OW 115
// end ; end ;
71567: GO 71147
71569: POP
71570: POP
// end ;
71571: LD_VAR 0 3
71575: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71576: LD_INT 0
71578: PPUSH
71579: PPUSH
71580: PPUSH
// if not unit or IsInUnit ( unit ) then
71581: LD_VAR 0 1
71585: NOT
71586: PUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: CALL_OW 310
71596: OR
71597: IFFALSE 71601
// exit ;
71599: GO 71692
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71601: LD_ADDR_VAR 0 4
71605: PUSH
71606: LD_VAR 0 1
71610: PPUSH
71611: CALL_OW 250
71615: PPUSH
71616: LD_VAR 0 2
71620: PPUSH
71621: LD_INT 1
71623: PPUSH
71624: CALL_OW 272
71628: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71629: LD_ADDR_VAR 0 5
71633: PUSH
71634: LD_VAR 0 1
71638: PPUSH
71639: CALL_OW 251
71643: PPUSH
71644: LD_VAR 0 2
71648: PPUSH
71649: LD_INT 1
71651: PPUSH
71652: CALL_OW 273
71656: ST_TO_ADDR
// if ValidHex ( x , y ) then
71657: LD_VAR 0 4
71661: PPUSH
71662: LD_VAR 0 5
71666: PPUSH
71667: CALL_OW 488
71671: IFFALSE 71692
// ComTurnXY ( unit , x , y ) ;
71673: LD_VAR 0 1
71677: PPUSH
71678: LD_VAR 0 4
71682: PPUSH
71683: LD_VAR 0 5
71687: PPUSH
71688: CALL_OW 118
// end ;
71692: LD_VAR 0 3
71696: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71697: LD_INT 0
71699: PPUSH
71700: PPUSH
// result := false ;
71701: LD_ADDR_VAR 0 3
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// if not units then
71709: LD_VAR 0 2
71713: NOT
71714: IFFALSE 71718
// exit ;
71716: GO 71763
// for i in units do
71718: LD_ADDR_VAR 0 4
71722: PUSH
71723: LD_VAR 0 2
71727: PUSH
71728: FOR_IN
71729: IFFALSE 71761
// if See ( side , i ) then
71731: LD_VAR 0 1
71735: PPUSH
71736: LD_VAR 0 4
71740: PPUSH
71741: CALL_OW 292
71745: IFFALSE 71759
// begin result := true ;
71747: LD_ADDR_VAR 0 3
71751: PUSH
71752: LD_INT 1
71754: ST_TO_ADDR
// exit ;
71755: POP
71756: POP
71757: GO 71763
// end ;
71759: GO 71728
71761: POP
71762: POP
// end ;
71763: LD_VAR 0 3
71767: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71768: LD_INT 0
71770: PPUSH
71771: PPUSH
71772: PPUSH
71773: PPUSH
// if not unit or not points then
71774: LD_VAR 0 1
71778: NOT
71779: PUSH
71780: LD_VAR 0 2
71784: NOT
71785: OR
71786: IFFALSE 71790
// exit ;
71788: GO 71880
// dist := 99999 ;
71790: LD_ADDR_VAR 0 5
71794: PUSH
71795: LD_INT 99999
71797: ST_TO_ADDR
// for i in points do
71798: LD_ADDR_VAR 0 4
71802: PUSH
71803: LD_VAR 0 2
71807: PUSH
71808: FOR_IN
71809: IFFALSE 71878
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71811: LD_ADDR_VAR 0 6
71815: PUSH
71816: LD_VAR 0 1
71820: PPUSH
71821: LD_VAR 0 4
71825: PUSH
71826: LD_INT 1
71828: ARRAY
71829: PPUSH
71830: LD_VAR 0 4
71834: PUSH
71835: LD_INT 2
71837: ARRAY
71838: PPUSH
71839: CALL_OW 297
71843: ST_TO_ADDR
// if tmpDist < dist then
71844: LD_VAR 0 6
71848: PUSH
71849: LD_VAR 0 5
71853: LESS
71854: IFFALSE 71876
// begin result := i ;
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: LD_VAR 0 4
71865: ST_TO_ADDR
// dist := tmpDist ;
71866: LD_ADDR_VAR 0 5
71870: PUSH
71871: LD_VAR 0 6
71875: ST_TO_ADDR
// end ; end ;
71876: GO 71808
71878: POP
71879: POP
// end ;
71880: LD_VAR 0 3
71884: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71885: LD_INT 0
71887: PPUSH
// uc_side := side ;
71888: LD_ADDR_OWVAR 20
71892: PUSH
71893: LD_VAR 0 1
71897: ST_TO_ADDR
// uc_nation := 3 ;
71898: LD_ADDR_OWVAR 21
71902: PUSH
71903: LD_INT 3
71905: ST_TO_ADDR
// vc_chassis := 25 ;
71906: LD_ADDR_OWVAR 37
71910: PUSH
71911: LD_INT 25
71913: ST_TO_ADDR
// vc_engine := engine_siberite ;
71914: LD_ADDR_OWVAR 39
71918: PUSH
71919: LD_INT 3
71921: ST_TO_ADDR
// vc_control := control_computer ;
71922: LD_ADDR_OWVAR 38
71926: PUSH
71927: LD_INT 3
71929: ST_TO_ADDR
// vc_weapon := 59 ;
71930: LD_ADDR_OWVAR 40
71934: PUSH
71935: LD_INT 59
71937: ST_TO_ADDR
// result := CreateVehicle ;
71938: LD_ADDR_VAR 0 5
71942: PUSH
71943: CALL_OW 45
71947: ST_TO_ADDR
// SetDir ( result , d ) ;
71948: LD_VAR 0 5
71952: PPUSH
71953: LD_VAR 0 4
71957: PPUSH
71958: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71962: LD_VAR 0 5
71966: PPUSH
71967: LD_VAR 0 2
71971: PPUSH
71972: LD_VAR 0 3
71976: PPUSH
71977: LD_INT 0
71979: PPUSH
71980: CALL_OW 48
// end ;
71984: LD_VAR 0 5
71988: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71989: LD_INT 0
71991: PPUSH
71992: PPUSH
71993: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71994: LD_ADDR_VAR 0 2
71998: PUSH
71999: LD_INT 0
72001: PUSH
72002: LD_INT 0
72004: PUSH
72005: LD_INT 0
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72017: LD_VAR 0 1
72021: NOT
72022: PUSH
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 264
72032: PUSH
72033: LD_INT 12
72035: PUSH
72036: LD_INT 51
72038: PUSH
72039: LD_INT 32
72041: PUSH
72042: LD_INT 89
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: IN
72051: NOT
72052: OR
72053: IFFALSE 72057
// exit ;
72055: GO 72155
// for i := 1 to 3 do
72057: LD_ADDR_VAR 0 3
72061: PUSH
72062: DOUBLE
72063: LD_INT 1
72065: DEC
72066: ST_TO_ADDR
72067: LD_INT 3
72069: PUSH
72070: FOR_TO
72071: IFFALSE 72153
// begin tmp := GetCargo ( cargo , i ) ;
72073: LD_ADDR_VAR 0 4
72077: PUSH
72078: LD_VAR 0 1
72082: PPUSH
72083: LD_VAR 0 3
72087: PPUSH
72088: CALL_OW 289
72092: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72093: LD_ADDR_VAR 0 2
72097: PUSH
72098: LD_VAR 0 2
72102: PPUSH
72103: LD_VAR 0 3
72107: PPUSH
72108: LD_VAR 0 4
72112: PPUSH
72113: CALL_OW 1
72117: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72118: LD_ADDR_VAR 0 2
72122: PUSH
72123: LD_VAR 0 2
72127: PPUSH
72128: LD_INT 4
72130: PPUSH
72131: LD_VAR 0 2
72135: PUSH
72136: LD_INT 4
72138: ARRAY
72139: PUSH
72140: LD_VAR 0 4
72144: PLUS
72145: PPUSH
72146: CALL_OW 1
72150: ST_TO_ADDR
// end ;
72151: GO 72070
72153: POP
72154: POP
// end ;
72155: LD_VAR 0 2
72159: RET
// export function Length ( array ) ; begin
72160: LD_INT 0
72162: PPUSH
// result := array + 0 ;
72163: LD_ADDR_VAR 0 2
72167: PUSH
72168: LD_VAR 0 1
72172: PUSH
72173: LD_INT 0
72175: PLUS
72176: ST_TO_ADDR
// end ;
72177: LD_VAR 0 2
72181: RET
// export function PrepareArray ( array ) ; begin
72182: LD_INT 0
72184: PPUSH
// result := array diff 0 ;
72185: LD_ADDR_VAR 0 2
72189: PUSH
72190: LD_VAR 0 1
72194: PUSH
72195: LD_INT 0
72197: DIFF
72198: ST_TO_ADDR
// if not result [ 1 ] then
72199: LD_VAR 0 2
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: NOT
72208: IFFALSE 72228
// result := Delete ( result , 1 ) ;
72210: LD_ADDR_VAR 0 2
72214: PUSH
72215: LD_VAR 0 2
72219: PPUSH
72220: LD_INT 1
72222: PPUSH
72223: CALL_OW 3
72227: ST_TO_ADDR
// end ; end_of_file
72228: LD_VAR 0 2
72232: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72233: LD_VAR 0 1
72237: PUSH
72238: LD_INT 200
72240: DOUBLE
72241: GREATEREQUAL
72242: IFFALSE 72250
72244: LD_INT 299
72246: DOUBLE
72247: LESSEQUAL
72248: IFTRUE 72252
72250: GO 72284
72252: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72253: LD_VAR 0 1
72257: PPUSH
72258: LD_VAR 0 2
72262: PPUSH
72263: LD_VAR 0 3
72267: PPUSH
72268: LD_VAR 0 4
72272: PPUSH
72273: LD_VAR 0 5
72277: PPUSH
72278: CALL 27135 0 5
72282: GO 72361
72284: LD_INT 300
72286: DOUBLE
72287: GREATEREQUAL
72288: IFFALSE 72296
72290: LD_INT 399
72292: DOUBLE
72293: LESSEQUAL
72294: IFTRUE 72298
72296: GO 72360
72298: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72299: LD_VAR 0 1
72303: PPUSH
72304: LD_VAR 0 2
72308: PPUSH
72309: LD_VAR 0 3
72313: PPUSH
72314: LD_VAR 0 4
72318: PPUSH
72319: LD_VAR 0 5
72323: PPUSH
72324: LD_VAR 0 6
72328: PPUSH
72329: LD_VAR 0 7
72333: PPUSH
72334: LD_VAR 0 8
72338: PPUSH
72339: LD_VAR 0 9
72343: PPUSH
72344: LD_VAR 0 10
72348: PPUSH
72349: LD_VAR 0 11
72353: PPUSH
72354: CALL 23468 0 11
72358: GO 72361
72360: POP
// end ;
72361: PPOPN 11
72363: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_VAR 0 2
72373: PPUSH
72374: LD_VAR 0 3
72378: PPUSH
72379: LD_VAR 0 4
72383: PPUSH
72384: LD_VAR 0 5
72388: PPUSH
72389: CALL 26871 0 5
// end ; end_of_file
72393: PPOPN 5
72395: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72396: LD_VAR 0 1
72400: PPUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: LD_VAR 0 3
72410: PPUSH
72411: LD_VAR 0 4
72415: PPUSH
72416: LD_VAR 0 5
72420: PPUSH
72421: LD_VAR 0 6
72425: PPUSH
72426: CALL 11161 0 6
// end ;
72430: PPOPN 6
72432: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72433: LD_INT 0
72435: PPUSH
// begin if not units then
72436: LD_VAR 0 1
72440: NOT
72441: IFFALSE 72445
// exit ;
72443: GO 72445
// end ;
72445: PPOPN 7
72447: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72448: CALL 11132 0 0
// end ;
72452: PPOPN 1
72454: END
