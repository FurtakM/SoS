// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10701 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10320 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10577 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10577 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10577 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10577 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10320 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10577 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10577 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10577 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10577 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10577 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 24438 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 255
9805: PUSH
9806: LD_INT 1
9808: EQUAL
9809: IFFALSE 9826
// ComMoveXY ( un , 57 , 52 ) ;
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 57
9818: PPUSH
9819: LD_INT 52
9821: PPUSH
9822: CALL_OW 111
// end ;
9826: PPOPN 2
9828: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9829: LD_EXP 21
9833: NOT
9834: IFFALSE 9884
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 3
9843: EQUAL
9844: PUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: PUSH
9855: LD_VAR 0 1
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: PUSH
9864: LD_VAR 0 2
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: AND
9873: OR
9874: IFFALSE 9884
// us_alert := true ;
9876: LD_ADDR_EXP 21
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 6
9891: EQUAL
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_INT 3
9900: EQUAL
9901: AND
9902: PUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 3
9910: EQUAL
9911: PUSH
9912: LD_VAR 0 2
9916: PUSH
9917: LD_INT 6
9919: EQUAL
9920: AND
9921: OR
9922: IFFALSE 9931
// YouLost ( alat ) ;
9924: LD_STRING alat
9926: PPUSH
9927: CALL_OW 104
// end ;
9931: PPOPN 2
9933: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 2
9946: EQUAL
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: LD_INT 58
9955: PUSH
9956: EMPTY
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: IN
9978: AND
9979: IFFALSE 10100
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9981: LD_OWVAR 3
9985: PUSH
9986: LD_VAR 0 1
9990: DIFF
9991: PPUSH
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 74
10001: PPUSH
10002: CALL_OW 255
10006: PUSH
10007: LD_INT 2
10009: NONEQUAL
10010: IFFALSE 10100
// begin Wait ( 0 0$1.3 ) ;
10012: LD_INT 46
10014: PPUSH
10015: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 250
10028: PPUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 251
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 250
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 251
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 250
10082: PPUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 251
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 453
// end ; end ;
10100: PPOPN 1
10102: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10103: LD_VAR 0 2
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: IN
10137: PUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: CALL 10622 0 1
10147: PPUSH
10148: CALL_OW 255
10152: PUSH
10153: LD_INT 2
10155: EQUAL
10156: NOT
10157: AND
10158: IFFALSE 10283
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10160: LD_INT 105
10162: PPUSH
10163: LD_INT 210
10165: PPUSH
10166: CALL_OW 12
10170: PPUSH
10171: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 250
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 251
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10229: LD_VAR 0 2
10233: PPUSH
10234: CALL_OW 250
10238: PPUSH
10239: LD_VAR 0 2
10243: PPUSH
10244: CALL_OW 251
10248: PPUSH
10249: LD_INT 3
10251: PPUSH
10252: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: CALL_OW 250
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: CALL_OW 251
10275: PPUSH
10276: LD_INT 3
10278: PPUSH
10279: CALL_OW 453
// end ; end ;
10283: PPOPN 4
10285: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: CALL 24536 0 3
// end ;
10305: PPOPN 3
10307: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL 24544 0 1
// end ; end_of_file
10317: PPOPN 1
10319: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 1
10334: PUSH
10335: LD_VAR 0 2
10339: ARRAY
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_VAR 0 4
10350: PPUSH
10351: CALL_OW 1
10355: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_VAR 0 7
10375: PPUSH
10376: CALL_OW 1
10380: ST_TO_ADDR
// result := tab ;
10381: LD_ADDR_VAR 0 5
10385: PUSH
10386: LD_VAR 0 1
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 5
10395: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
// if not GetControl ( veh ) = control_manual then
10401: LD_VAR 0 1
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: NOT
10415: IFFALSE 10427
// result := false else
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10572
// if veh in FilterAllUnits ( [ f_empty ] ) then
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 58
10434: PUSH
10435: EMPTY
10436: LIST
10437: PPUSH
10438: CALL_OW 69
10442: IN
10443: IFFALSE 10455
// result := false else
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
10453: GO 10572
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 255
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 55
10479: PUSH
10480: EMPTY
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// if not filter then
10492: LD_VAR 0 4
10496: NOT
10497: IFFALSE 10509
// result := false else
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
10507: GO 10572
// for i = 1 to filter do
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: DOUBLE
10515: LD_INT 1
10517: DEC
10518: ST_TO_ADDR
10519: LD_VAR 0 4
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10570
// if IsDriver ( filter [ i ] ) = veh then
10527: LD_VAR 0 4
10531: PUSH
10532: LD_VAR 0 3
10536: ARRAY
10537: PPUSH
10538: CALL 62797 0 1
10542: PUSH
10543: LD_VAR 0 1
10547: EQUAL
10548: IFFALSE 10568
// begin result := filter [ i ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 4
10559: PUSH
10560: LD_VAR 0 3
10564: ARRAY
10565: ST_TO_ADDR
// break ;
10566: GO 10570
// end ;
10568: GO 10524
10570: POP
10571: POP
// end ; end ;
10572: LD_VAR 0 2
10576: RET
// export function FindTarget ( unit ) ; begin
10577: LD_INT 0
10579: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 81
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 255
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 74
10616: ST_TO_ADDR
// end ;
10617: LD_VAR 0 2
10621: RET
// export function NearestUnit ( unit ) ; begin
10622: LD_INT 0
10624: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_OWVAR 3
10634: PUSH
10635: LD_VAR 0 1
10639: DIFF
10640: PPUSH
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 74
10650: ST_TO_ADDR
// end ; end_of_file
10651: LD_VAR 0 2
10655: RET
// every 12 12$00 do
10656: GO 10658
10658: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 570
10664: PPUSH
10665: LD_INT 350
10667: PPUSH
10668: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10672: LD_INT 10500
10674: PPUSH
10675: LD_INT 21000
10677: PPUSH
10678: CALL_OW 12
10682: PPUSH
10683: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10687: LD_INT 0
10689: PPUSH
10690: LD_INT 570
10692: PPUSH
10693: LD_INT 350
10695: PPUSH
10696: CALL_OW 550
// end ;
10700: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// uc_nation = nation_nature ;
10708: LD_ADDR_OWVAR 21
10712: PUSH
10713: LD_INT 0
10715: ST_TO_ADDR
// uc_side = 0 ;
10716: LD_ADDR_OWVAR 20
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// l = 0 ;
10724: LD_ADDR_VAR 0 6
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10732: LD_ADDR_OWVAR 24
10736: PUSH
10737: LD_INT 0
10739: PPUSH
10740: LD_INT 5
10742: PPUSH
10743: CALL_OW 12
10747: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10748: LD_ADDR_OWVAR 35
10752: PUSH
10753: LD_INT 5
10755: NEG
10756: PPUSH
10757: LD_INT 5
10759: PPUSH
10760: CALL_OW 12
10764: ST_TO_ADDR
// hc_gallery =  ;
10765: LD_ADDR_OWVAR 33
10769: PUSH
10770: LD_STRING 
10772: ST_TO_ADDR
// hc_class = class_apeman ;
10773: LD_ADDR_OWVAR 28
10777: PUSH
10778: LD_INT 12
10780: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10781: LD_ADDR_OWVAR 29
10785: PUSH
10786: LD_INT 11
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: CALL_OW 12
10796: PUSH
10797: LD_INT 10
10799: PPUSH
10800: LD_INT 11
10802: PPUSH
10803: CALL_OW 12
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// hc_sex = sex_male ;
10812: LD_ADDR_OWVAR 27
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10820: LD_ADDR_OWVAR 31
10824: PUSH
10825: LD_INT 0
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 12
10835: PUSH
10836: LD_INT 0
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// apeman = CreateHuman ;
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: CALL_OW 44
10860: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_INT 0
10873: PPUSH
10874: CALL_OW 49
// l = l + 1 ;
10878: LD_ADDR_VAR 0 6
10882: PUSH
10883: LD_VAR 0 6
10887: PUSH
10888: LD_INT 1
10890: PLUS
10891: ST_TO_ADDR
// end until l = num1 ;
10892: LD_VAR 0 6
10896: PUSH
10897: LD_VAR 0 1
10901: EQUAL
10902: IFFALSE 10732
// l = 0 ;
10904: LD_ADDR_VAR 0 6
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10912: LD_ADDR_OWVAR 35
10916: PUSH
10917: LD_INT 0
10919: PPUSH
10920: LD_INT 25
10922: PPUSH
10923: CALL_OW 12
10927: ST_TO_ADDR
// hc_class = class_tiger ;
10928: LD_ADDR_OWVAR 28
10932: PUSH
10933: LD_INT 14
10935: ST_TO_ADDR
// hc_sex = sex_male ;
10936: LD_ADDR_OWVAR 27
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// hc_gallery = sandnature ;
10944: LD_ADDR_OWVAR 33
10948: PUSH
10949: LD_STRING sandnature
10951: ST_TO_ADDR
// hc_face_number = 3 ;
10952: LD_ADDR_OWVAR 34
10956: PUSH
10957: LD_INT 3
10959: ST_TO_ADDR
// tiger = CreateHuman ;
10960: LD_ADDR_VAR 0 8
10964: PUSH
10965: CALL_OW 44
10969: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10970: LD_VAR 0 8
10974: PPUSH
10975: LD_VAR 0 4
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 49
// l = l + 1 ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_VAR 0 6
10996: PUSH
10997: LD_INT 1
10999: PLUS
11000: ST_TO_ADDR
// end until l = num2 ;
11001: LD_VAR 0 6
11005: PUSH
11006: LD_VAR 0 2
11010: EQUAL
11011: IFFALSE 10912
// l = 0 ;
11013: LD_ADDR_VAR 0 6
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11021: LD_ADDR_OWVAR 28
11025: PUSH
11026: LD_INT 18
11028: ST_TO_ADDR
// hc_gallery = sandnature ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING sandnature
11036: ST_TO_ADDR
// hc_face_number = 1 ;
11037: LD_ADDR_OWVAR 34
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// bird = CreateHuman ;
11045: LD_ADDR_VAR 0 9
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11055: LD_VAR 0 9
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 51
// l = l + 1 ;
11067: LD_ADDR_VAR 0 6
11071: PUSH
11072: LD_VAR 0 6
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: ST_TO_ADDR
// end until l = num3 ;
11081: LD_VAR 0 6
11085: PUSH
11086: LD_VAR 0 3
11090: EQUAL
11091: IFFALSE 11021
// end ; end_of_file
11093: LD_VAR 0 5
11097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11098: LD_INT 0
11100: PPUSH
// ar_miner := 81 ;
11101: LD_ADDR_EXP 33
11105: PUSH
11106: LD_INT 81
11108: ST_TO_ADDR
// ar_crane := 88 ;
11109: LD_ADDR_EXP 32
11113: PUSH
11114: LD_INT 88
11116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11117: LD_ADDR_EXP 27
11121: PUSH
11122: LD_INT 89
11124: ST_TO_ADDR
// us_hack := 99 ;
11125: LD_ADDR_EXP 28
11129: PUSH
11130: LD_INT 99
11132: ST_TO_ADDR
// us_artillery := 97 ;
11133: LD_ADDR_EXP 29
11137: PUSH
11138: LD_INT 97
11140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11141: LD_ADDR_EXP 30
11145: PUSH
11146: LD_INT 91
11148: ST_TO_ADDR
// ar_mortar := 92 ;
11149: LD_ADDR_EXP 31
11153: PUSH
11154: LD_INT 92
11156: ST_TO_ADDR
// ru_radar := 98 ;
11157: LD_ADDR_EXP 26
11161: PUSH
11162: LD_INT 98
11164: ST_TO_ADDR
// tech_Artillery := 80 ;
11165: LD_ADDR_EXP 34
11169: PUSH
11170: LD_INT 80
11172: ST_TO_ADDR
// tech_RadMat := 81 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 81
11180: ST_TO_ADDR
// tech_BasicTools := 82 ;
11181: LD_ADDR_EXP 36
11185: PUSH
11186: LD_INT 82
11188: ST_TO_ADDR
// tech_Cargo := 83 ;
11189: LD_ADDR_EXP 37
11193: PUSH
11194: LD_INT 83
11196: ST_TO_ADDR
// tech_Track := 84 ;
11197: LD_ADDR_EXP 38
11201: PUSH
11202: LD_INT 84
11204: ST_TO_ADDR
// tech_Crane := 85 ;
11205: LD_ADDR_EXP 39
11209: PUSH
11210: LD_INT 85
11212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11213: LD_ADDR_EXP 40
11217: PUSH
11218: LD_INT 86
11220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11221: LD_ADDR_EXP 41
11225: PUSH
11226: LD_INT 87
11228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11229: LD_ADDR_EXP 42
11233: PUSH
11234: LD_INT 88
11236: ST_TO_ADDR
// class_mastodont := 31 ;
11237: LD_ADDR_EXP 43
11241: PUSH
11242: LD_INT 31
11244: ST_TO_ADDR
// class_horse := 21 ;
11245: LD_ADDR_EXP 44
11249: PUSH
11250: LD_INT 21
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 1
11257: RET
// every 1 do
11258: GO 11260
11260: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11261: CALL 11098 0 0
11265: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11266: LD_INT 0
11268: PPUSH
// if p2 = 100 then
11269: LD_VAR 0 2
11273: PUSH
11274: LD_INT 100
11276: EQUAL
11277: IFFALSE 12226
// begin if not StreamModeActive then
11279: LD_EXP 45
11283: NOT
11284: IFFALSE 11294
// StreamModeActive := true ;
11286: LD_ADDR_EXP 45
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 0 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 0
11301: EQUAL
11302: IFFALSE 11308
// InitStreamMode ;
11304: CALL 12386 0 0
// if p3 = 1 then
11308: LD_VAR 0 3
11312: PUSH
11313: LD_INT 1
11315: EQUAL
11316: IFFALSE 11326
// sRocket := true ;
11318: LD_ADDR_EXP 50
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// if p3 = 2 then
11326: LD_VAR 0 3
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11344
// sSpeed := true ;
11336: LD_ADDR_EXP 49
11340: PUSH
11341: LD_INT 1
11343: ST_TO_ADDR
// if p3 = 3 then
11344: LD_VAR 0 3
11348: PUSH
11349: LD_INT 3
11351: EQUAL
11352: IFFALSE 11362
// sEngine := true ;
11354: LD_ADDR_EXP 51
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
// if p3 = 4 then
11362: LD_VAR 0 3
11366: PUSH
11367: LD_INT 4
11369: EQUAL
11370: IFFALSE 11380
// sSpec := true ;
11372: LD_ADDR_EXP 48
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// if p3 = 5 then
11380: LD_VAR 0 3
11384: PUSH
11385: LD_INT 5
11387: EQUAL
11388: IFFALSE 11398
// sLevel := true ;
11390: LD_ADDR_EXP 52
11394: PUSH
11395: LD_INT 1
11397: ST_TO_ADDR
// if p3 = 6 then
11398: LD_VAR 0 3
11402: PUSH
11403: LD_INT 6
11405: EQUAL
11406: IFFALSE 11416
// sArmoury := true ;
11408: LD_ADDR_EXP 53
11412: PUSH
11413: LD_INT 1
11415: ST_TO_ADDR
// if p3 = 7 then
11416: LD_VAR 0 3
11420: PUSH
11421: LD_INT 7
11423: EQUAL
11424: IFFALSE 11434
// sRadar := true ;
11426: LD_ADDR_EXP 54
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// if p3 = 8 then
11434: LD_VAR 0 3
11438: PUSH
11439: LD_INT 8
11441: EQUAL
11442: IFFALSE 11452
// sBunker := true ;
11444: LD_ADDR_EXP 55
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// if p3 = 9 then
11452: LD_VAR 0 3
11456: PUSH
11457: LD_INT 9
11459: EQUAL
11460: IFFALSE 11470
// sHack := true ;
11462: LD_ADDR_EXP 56
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// if p3 = 10 then
11470: LD_VAR 0 3
11474: PUSH
11475: LD_INT 10
11477: EQUAL
11478: IFFALSE 11488
// sFire := true ;
11480: LD_ADDR_EXP 57
11484: PUSH
11485: LD_INT 1
11487: ST_TO_ADDR
// if p3 = 11 then
11488: LD_VAR 0 3
11492: PUSH
11493: LD_INT 11
11495: EQUAL
11496: IFFALSE 11506
// sRefresh := true ;
11498: LD_ADDR_EXP 58
11502: PUSH
11503: LD_INT 1
11505: ST_TO_ADDR
// if p3 = 12 then
11506: LD_VAR 0 3
11510: PUSH
11511: LD_INT 12
11513: EQUAL
11514: IFFALSE 11524
// sExp := true ;
11516: LD_ADDR_EXP 59
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// if p3 = 13 then
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 13
11531: EQUAL
11532: IFFALSE 11542
// sDepot := true ;
11534: LD_ADDR_EXP 60
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// if p3 = 14 then
11542: LD_VAR 0 3
11546: PUSH
11547: LD_INT 14
11549: EQUAL
11550: IFFALSE 11560
// sFlag := true ;
11552: LD_ADDR_EXP 61
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// if p3 = 15 then
11560: LD_VAR 0 3
11564: PUSH
11565: LD_INT 15
11567: EQUAL
11568: IFFALSE 11578
// sKamikadze := true ;
11570: LD_ADDR_EXP 69
11574: PUSH
11575: LD_INT 1
11577: ST_TO_ADDR
// if p3 = 16 then
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 16
11585: EQUAL
11586: IFFALSE 11596
// sTroll := true ;
11588: LD_ADDR_EXP 70
11592: PUSH
11593: LD_INT 1
11595: ST_TO_ADDR
// if p3 = 17 then
11596: LD_VAR 0 3
11600: PUSH
11601: LD_INT 17
11603: EQUAL
11604: IFFALSE 11614
// sSlow := true ;
11606: LD_ADDR_EXP 71
11610: PUSH
11611: LD_INT 1
11613: ST_TO_ADDR
// if p3 = 18 then
11614: LD_VAR 0 3
11618: PUSH
11619: LD_INT 18
11621: EQUAL
11622: IFFALSE 11632
// sLack := true ;
11624: LD_ADDR_EXP 72
11628: PUSH
11629: LD_INT 1
11631: ST_TO_ADDR
// if p3 = 19 then
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 19
11639: EQUAL
11640: IFFALSE 11650
// sTank := true ;
11642: LD_ADDR_EXP 74
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// if p3 = 20 then
11650: LD_VAR 0 3
11654: PUSH
11655: LD_INT 20
11657: EQUAL
11658: IFFALSE 11668
// sRemote := true ;
11660: LD_ADDR_EXP 75
11664: PUSH
11665: LD_INT 1
11667: ST_TO_ADDR
// if p3 = 21 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 21
11675: EQUAL
11676: IFFALSE 11686
// sPowell := true ;
11678: LD_ADDR_EXP 76
11682: PUSH
11683: LD_INT 1
11685: ST_TO_ADDR
// if p3 = 22 then
11686: LD_VAR 0 3
11690: PUSH
11691: LD_INT 22
11693: EQUAL
11694: IFFALSE 11704
// sTeleport := true ;
11696: LD_ADDR_EXP 79
11700: PUSH
11701: LD_INT 1
11703: ST_TO_ADDR
// if p3 = 23 then
11704: LD_VAR 0 3
11708: PUSH
11709: LD_INT 23
11711: EQUAL
11712: IFFALSE 11722
// sOilTower := true ;
11714: LD_ADDR_EXP 81
11718: PUSH
11719: LD_INT 1
11721: ST_TO_ADDR
// if p3 = 24 then
11722: LD_VAR 0 3
11726: PUSH
11727: LD_INT 24
11729: EQUAL
11730: IFFALSE 11740
// sShovel := true ;
11732: LD_ADDR_EXP 82
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// if p3 = 25 then
11740: LD_VAR 0 3
11744: PUSH
11745: LD_INT 25
11747: EQUAL
11748: IFFALSE 11758
// sSheik := true ;
11750: LD_ADDR_EXP 83
11754: PUSH
11755: LD_INT 1
11757: ST_TO_ADDR
// if p3 = 26 then
11758: LD_VAR 0 3
11762: PUSH
11763: LD_INT 26
11765: EQUAL
11766: IFFALSE 11776
// sEarthquake := true ;
11768: LD_ADDR_EXP 85
11772: PUSH
11773: LD_INT 1
11775: ST_TO_ADDR
// if p3 = 27 then
11776: LD_VAR 0 3
11780: PUSH
11781: LD_INT 27
11783: EQUAL
11784: IFFALSE 11794
// sAI := true ;
11786: LD_ADDR_EXP 86
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// if p3 = 28 then
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 28
11801: EQUAL
11802: IFFALSE 11812
// sCargo := true ;
11804: LD_ADDR_EXP 89
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// if p3 = 29 then
11812: LD_VAR 0 3
11816: PUSH
11817: LD_INT 29
11819: EQUAL
11820: IFFALSE 11830
// sDLaser := true ;
11822: LD_ADDR_EXP 90
11826: PUSH
11827: LD_INT 1
11829: ST_TO_ADDR
// if p3 = 30 then
11830: LD_VAR 0 3
11834: PUSH
11835: LD_INT 30
11837: EQUAL
11838: IFFALSE 11848
// sExchange := true ;
11840: LD_ADDR_EXP 91
11844: PUSH
11845: LD_INT 1
11847: ST_TO_ADDR
// if p3 = 31 then
11848: LD_VAR 0 3
11852: PUSH
11853: LD_INT 31
11855: EQUAL
11856: IFFALSE 11866
// sFac := true ;
11858: LD_ADDR_EXP 92
11862: PUSH
11863: LD_INT 1
11865: ST_TO_ADDR
// if p3 = 32 then
11866: LD_VAR 0 3
11870: PUSH
11871: LD_INT 32
11873: EQUAL
11874: IFFALSE 11884
// sPower := true ;
11876: LD_ADDR_EXP 93
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// if p3 = 33 then
11884: LD_VAR 0 3
11888: PUSH
11889: LD_INT 33
11891: EQUAL
11892: IFFALSE 11902
// sRandom := true ;
11894: LD_ADDR_EXP 94
11898: PUSH
11899: LD_INT 1
11901: ST_TO_ADDR
// if p3 = 34 then
11902: LD_VAR 0 3
11906: PUSH
11907: LD_INT 34
11909: EQUAL
11910: IFFALSE 11920
// sShield := true ;
11912: LD_ADDR_EXP 95
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// if p3 = 35 then
11920: LD_VAR 0 3
11924: PUSH
11925: LD_INT 35
11927: EQUAL
11928: IFFALSE 11938
// sTime := true ;
11930: LD_ADDR_EXP 96
11934: PUSH
11935: LD_INT 1
11937: ST_TO_ADDR
// if p3 = 36 then
11938: LD_VAR 0 3
11942: PUSH
11943: LD_INT 36
11945: EQUAL
11946: IFFALSE 11956
// sTools := true ;
11948: LD_ADDR_EXP 97
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// if p3 = 101 then
11956: LD_VAR 0 3
11960: PUSH
11961: LD_INT 101
11963: EQUAL
11964: IFFALSE 11974
// sSold := true ;
11966: LD_ADDR_EXP 62
11970: PUSH
11971: LD_INT 1
11973: ST_TO_ADDR
// if p3 = 102 then
11974: LD_VAR 0 3
11978: PUSH
11979: LD_INT 102
11981: EQUAL
11982: IFFALSE 11992
// sDiff := true ;
11984: LD_ADDR_EXP 63
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// if p3 = 103 then
11992: LD_VAR 0 3
11996: PUSH
11997: LD_INT 103
11999: EQUAL
12000: IFFALSE 12010
// sFog := true ;
12002: LD_ADDR_EXP 66
12006: PUSH
12007: LD_INT 1
12009: ST_TO_ADDR
// if p3 = 104 then
12010: LD_VAR 0 3
12014: PUSH
12015: LD_INT 104
12017: EQUAL
12018: IFFALSE 12028
// sReset := true ;
12020: LD_ADDR_EXP 67
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// if p3 = 105 then
12028: LD_VAR 0 3
12032: PUSH
12033: LD_INT 105
12035: EQUAL
12036: IFFALSE 12046
// sSun := true ;
12038: LD_ADDR_EXP 68
12042: PUSH
12043: LD_INT 1
12045: ST_TO_ADDR
// if p3 = 106 then
12046: LD_VAR 0 3
12050: PUSH
12051: LD_INT 106
12053: EQUAL
12054: IFFALSE 12064
// sTiger := true ;
12056: LD_ADDR_EXP 64
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// if p3 = 107 then
12064: LD_VAR 0 3
12068: PUSH
12069: LD_INT 107
12071: EQUAL
12072: IFFALSE 12082
// sBomb := true ;
12074: LD_ADDR_EXP 65
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if p3 = 108 then
12082: LD_VAR 0 3
12086: PUSH
12087: LD_INT 108
12089: EQUAL
12090: IFFALSE 12100
// sWound := true ;
12092: LD_ADDR_EXP 73
12096: PUSH
12097: LD_INT 1
12099: ST_TO_ADDR
// if p3 = 109 then
12100: LD_VAR 0 3
12104: PUSH
12105: LD_INT 109
12107: EQUAL
12108: IFFALSE 12118
// sBetray := true ;
12110: LD_ADDR_EXP 77
12114: PUSH
12115: LD_INT 1
12117: ST_TO_ADDR
// if p3 = 110 then
12118: LD_VAR 0 3
12122: PUSH
12123: LD_INT 110
12125: EQUAL
12126: IFFALSE 12136
// sContamin := true ;
12128: LD_ADDR_EXP 78
12132: PUSH
12133: LD_INT 1
12135: ST_TO_ADDR
// if p3 = 111 then
12136: LD_VAR 0 3
12140: PUSH
12141: LD_INT 111
12143: EQUAL
12144: IFFALSE 12154
// sOil := true ;
12146: LD_ADDR_EXP 80
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// if p3 = 112 then
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 112
12161: EQUAL
12162: IFFALSE 12172
// sStu := true ;
12164: LD_ADDR_EXP 84
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// if p3 = 113 then
12172: LD_VAR 0 3
12176: PUSH
12177: LD_INT 113
12179: EQUAL
12180: IFFALSE 12190
// sBazooka := true ;
12182: LD_ADDR_EXP 87
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// if p3 = 114 then
12190: LD_VAR 0 3
12194: PUSH
12195: LD_INT 114
12197: EQUAL
12198: IFFALSE 12208
// sMortar := true ;
12200: LD_ADDR_EXP 88
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// if p3 = 115 then
12208: LD_VAR 0 3
12212: PUSH
12213: LD_INT 115
12215: EQUAL
12216: IFFALSE 12226
// sRanger := true ;
12218: LD_ADDR_EXP 98
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// end ; if p2 = 101 then
12226: LD_VAR 0 2
12230: PUSH
12231: LD_INT 101
12233: EQUAL
12234: IFFALSE 12362
// begin case p3 of 1 :
12236: LD_VAR 0 3
12240: PUSH
12241: LD_INT 1
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12256
12249: POP
// hHackUnlimitedResources ; 2 :
12250: CALL 23399 0 0
12254: GO 12362
12256: LD_INT 2
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12271
12264: POP
// hHackSetLevel10 ; 3 :
12265: CALL 23532 0 0
12269: GO 12362
12271: LD_INT 3
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12286
12279: POP
// hHackSetLevel10YourUnits ; 4 :
12280: CALL 23617 0 0
12284: GO 12362
12286: LD_INT 4
12288: DOUBLE
12289: EQUAL
12290: IFTRUE 12294
12292: GO 12301
12294: POP
// hHackInvincible ; 5 :
12295: CALL 24065 0 0
12299: GO 12362
12301: LD_INT 5
12303: DOUBLE
12304: EQUAL
12305: IFTRUE 12309
12307: GO 12316
12309: POP
// hHackInvisible ; 6 :
12310: CALL 24176 0 0
12314: GO 12362
12316: LD_INT 6
12318: DOUBLE
12319: EQUAL
12320: IFTRUE 12324
12322: GO 12331
12324: POP
// hHackChangeYourSide ; 7 :
12325: CALL 24233 0 0
12329: GO 12362
12331: LD_INT 7
12333: DOUBLE
12334: EQUAL
12335: IFTRUE 12339
12337: GO 12346
12339: POP
// hHackChangeUnitSide ; 8 :
12340: CALL 24275 0 0
12344: GO 12362
12346: LD_INT 8
12348: DOUBLE
12349: EQUAL
12350: IFTRUE 12354
12352: GO 12361
12354: POP
// hHackFog ; end ;
12355: CALL 24376 0 0
12359: GO 12362
12361: POP
// end ; end ;
12362: LD_VAR 0 7
12366: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12367: GO 12369
12369: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12370: LD_STRING initStreamRollete();
12372: PPUSH
12373: CALL_OW 559
// InitStreamMode ;
12377: CALL 12386 0 0
// DefineStreamItems ( ) ;
12381: CALL 12826 0 0
// end ;
12385: END
// function InitStreamMode ; begin
12386: LD_INT 0
12388: PPUSH
// streamModeActive := false ;
12389: LD_ADDR_EXP 45
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// normalCounter := 36 ;
12397: LD_ADDR_EXP 46
12401: PUSH
12402: LD_INT 36
12404: ST_TO_ADDR
// hardcoreCounter := 16 ;
12405: LD_ADDR_EXP 47
12409: PUSH
12410: LD_INT 16
12412: ST_TO_ADDR
// sRocket := false ;
12413: LD_ADDR_EXP 50
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sSpeed := false ;
12421: LD_ADDR_EXP 49
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sEngine := false ;
12429: LD_ADDR_EXP 51
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sSpec := false ;
12437: LD_ADDR_EXP 48
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sLevel := false ;
12445: LD_ADDR_EXP 52
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sArmoury := false ;
12453: LD_ADDR_EXP 53
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sRadar := false ;
12461: LD_ADDR_EXP 54
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sBunker := false ;
12469: LD_ADDR_EXP 55
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sHack := false ;
12477: LD_ADDR_EXP 56
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sFire := false ;
12485: LD_ADDR_EXP 57
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sRefresh := false ;
12493: LD_ADDR_EXP 58
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sExp := false ;
12501: LD_ADDR_EXP 59
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sDepot := false ;
12509: LD_ADDR_EXP 60
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sFlag := false ;
12517: LD_ADDR_EXP 61
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sKamikadze := false ;
12525: LD_ADDR_EXP 69
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sTroll := false ;
12533: LD_ADDR_EXP 70
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sSlow := false ;
12541: LD_ADDR_EXP 71
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sLack := false ;
12549: LD_ADDR_EXP 72
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sTank := false ;
12557: LD_ADDR_EXP 74
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sRemote := false ;
12565: LD_ADDR_EXP 75
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sPowell := false ;
12573: LD_ADDR_EXP 76
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sTeleport := false ;
12581: LD_ADDR_EXP 79
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sOilTower := false ;
12589: LD_ADDR_EXP 81
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sShovel := false ;
12597: LD_ADDR_EXP 82
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sSheik := false ;
12605: LD_ADDR_EXP 83
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sEarthquake := false ;
12613: LD_ADDR_EXP 85
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sAI := false ;
12621: LD_ADDR_EXP 86
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sCargo := false ;
12629: LD_ADDR_EXP 89
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sDLaser := false ;
12637: LD_ADDR_EXP 90
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sExchange := false ;
12645: LD_ADDR_EXP 91
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sFac := false ;
12653: LD_ADDR_EXP 92
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sPower := false ;
12661: LD_ADDR_EXP 93
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sRandom := false ;
12669: LD_ADDR_EXP 94
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sShield := false ;
12677: LD_ADDR_EXP 95
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sTime := false ;
12685: LD_ADDR_EXP 96
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sTools := false ;
12693: LD_ADDR_EXP 97
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sSold := false ;
12701: LD_ADDR_EXP 62
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sDiff := false ;
12709: LD_ADDR_EXP 63
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sFog := false ;
12717: LD_ADDR_EXP 66
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sReset := false ;
12725: LD_ADDR_EXP 67
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sSun := false ;
12733: LD_ADDR_EXP 68
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sTiger := false ;
12741: LD_ADDR_EXP 64
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sBomb := false ;
12749: LD_ADDR_EXP 65
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sWound := false ;
12757: LD_ADDR_EXP 73
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sBetray := false ;
12765: LD_ADDR_EXP 77
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sContamin := false ;
12773: LD_ADDR_EXP 78
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sOil := false ;
12781: LD_ADDR_EXP 80
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sStu := false ;
12789: LD_ADDR_EXP 84
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sBazooka := false ;
12797: LD_ADDR_EXP 87
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sMortar := false ;
12805: LD_ADDR_EXP 88
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sRanger := false ;
12813: LD_ADDR_EXP 98
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// end ;
12821: LD_VAR 0 1
12825: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12826: LD_INT 0
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
12832: PPUSH
// result := [ ] ;
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: EMPTY
12839: ST_TO_ADDR
// if campaign_id = 1 then
12840: LD_OWVAR 69
12844: PUSH
12845: LD_INT 1
12847: EQUAL
12848: IFFALSE 15786
// begin case mission_number of 1 :
12850: LD_OWVAR 70
12854: PUSH
12855: LD_INT 1
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12927
12863: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12864: LD_ADDR_VAR 0 1
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: LD_INT 4
12874: PUSH
12875: LD_INT 11
12877: PUSH
12878: LD_INT 12
12880: PUSH
12881: LD_INT 15
12883: PUSH
12884: LD_INT 16
12886: PUSH
12887: LD_INT 22
12889: PUSH
12890: LD_INT 23
12892: PUSH
12893: LD_INT 26
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 101
12909: PUSH
12910: LD_INT 102
12912: PUSH
12913: LD_INT 106
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: ST_TO_ADDR
12925: GO 15784
12927: LD_INT 2
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 13007
12935: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12936: LD_ADDR_VAR 0 1
12940: PUSH
12941: LD_INT 2
12943: PUSH
12944: LD_INT 4
12946: PUSH
12947: LD_INT 11
12949: PUSH
12950: LD_INT 12
12952: PUSH
12953: LD_INT 15
12955: PUSH
12956: LD_INT 16
12958: PUSH
12959: LD_INT 22
12961: PUSH
12962: LD_INT 23
12964: PUSH
12965: LD_INT 26
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 101
12981: PUSH
12982: LD_INT 102
12984: PUSH
12985: LD_INT 105
12987: PUSH
12988: LD_INT 106
12990: PUSH
12991: LD_INT 108
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: ST_TO_ADDR
13005: GO 15784
13007: LD_INT 3
13009: DOUBLE
13010: EQUAL
13011: IFTRUE 13015
13013: GO 13091
13015: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13016: LD_ADDR_VAR 0 1
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 5
13029: PUSH
13030: LD_INT 11
13032: PUSH
13033: LD_INT 12
13035: PUSH
13036: LD_INT 15
13038: PUSH
13039: LD_INT 16
13041: PUSH
13042: LD_INT 22
13044: PUSH
13045: LD_INT 26
13047: PUSH
13048: LD_INT 36
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 101
13065: PUSH
13066: LD_INT 102
13068: PUSH
13069: LD_INT 105
13071: PUSH
13072: LD_INT 106
13074: PUSH
13075: LD_INT 108
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: ST_TO_ADDR
13089: GO 15784
13091: LD_INT 4
13093: DOUBLE
13094: EQUAL
13095: IFTRUE 13099
13097: GO 13183
13099: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13100: LD_ADDR_VAR 0 1
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 4
13110: PUSH
13111: LD_INT 5
13113: PUSH
13114: LD_INT 8
13116: PUSH
13117: LD_INT 11
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: LD_INT 15
13125: PUSH
13126: LD_INT 16
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_INT 23
13134: PUSH
13135: LD_INT 26
13137: PUSH
13138: LD_INT 36
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 101
13157: PUSH
13158: LD_INT 102
13160: PUSH
13161: LD_INT 105
13163: PUSH
13164: LD_INT 106
13166: PUSH
13167: LD_INT 108
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: ST_TO_ADDR
13181: GO 15784
13183: LD_INT 5
13185: DOUBLE
13186: EQUAL
13187: IFTRUE 13191
13189: GO 13291
13191: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_INT 2
13199: PUSH
13200: LD_INT 4
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: LD_INT 6
13208: PUSH
13209: LD_INT 8
13211: PUSH
13212: LD_INT 11
13214: PUSH
13215: LD_INT 12
13217: PUSH
13218: LD_INT 15
13220: PUSH
13221: LD_INT 16
13223: PUSH
13224: LD_INT 22
13226: PUSH
13227: LD_INT 23
13229: PUSH
13230: LD_INT 25
13232: PUSH
13233: LD_INT 26
13235: PUSH
13236: LD_INT 36
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 101
13257: PUSH
13258: LD_INT 102
13260: PUSH
13261: LD_INT 105
13263: PUSH
13264: LD_INT 106
13266: PUSH
13267: LD_INT 108
13269: PUSH
13270: LD_INT 109
13272: PUSH
13273: LD_INT 112
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: ST_TO_ADDR
13289: GO 15784
13291: LD_INT 6
13293: DOUBLE
13294: EQUAL
13295: IFTRUE 13299
13297: GO 13419
13299: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13300: LD_ADDR_VAR 0 1
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: LD_INT 4
13310: PUSH
13311: LD_INT 5
13313: PUSH
13314: LD_INT 6
13316: PUSH
13317: LD_INT 8
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 15
13328: PUSH
13329: LD_INT 16
13331: PUSH
13332: LD_INT 20
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 22
13340: PUSH
13341: LD_INT 23
13343: PUSH
13344: LD_INT 25
13346: PUSH
13347: LD_INT 26
13349: PUSH
13350: LD_INT 30
13352: PUSH
13353: LD_INT 31
13355: PUSH
13356: LD_INT 32
13358: PUSH
13359: LD_INT 36
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 101
13385: PUSH
13386: LD_INT 102
13388: PUSH
13389: LD_INT 105
13391: PUSH
13392: LD_INT 106
13394: PUSH
13395: LD_INT 108
13397: PUSH
13398: LD_INT 109
13400: PUSH
13401: LD_INT 112
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: ST_TO_ADDR
13417: GO 15784
13419: LD_INT 7
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13527
13427: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13428: LD_ADDR_VAR 0 1
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 4
13438: PUSH
13439: LD_INT 5
13441: PUSH
13442: LD_INT 7
13444: PUSH
13445: LD_INT 11
13447: PUSH
13448: LD_INT 12
13450: PUSH
13451: LD_INT 15
13453: PUSH
13454: LD_INT 16
13456: PUSH
13457: LD_INT 20
13459: PUSH
13460: LD_INT 21
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_INT 23
13468: PUSH
13469: LD_INT 25
13471: PUSH
13472: LD_INT 26
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 101
13493: PUSH
13494: LD_INT 102
13496: PUSH
13497: LD_INT 103
13499: PUSH
13500: LD_INT 105
13502: PUSH
13503: LD_INT 106
13505: PUSH
13506: LD_INT 108
13508: PUSH
13509: LD_INT 112
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: ST_TO_ADDR
13525: GO 15784
13527: LD_INT 8
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13663
13535: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: LD_INT 4
13546: PUSH
13547: LD_INT 5
13549: PUSH
13550: LD_INT 6
13552: PUSH
13553: LD_INT 7
13555: PUSH
13556: LD_INT 8
13558: PUSH
13559: LD_INT 11
13561: PUSH
13562: LD_INT 12
13564: PUSH
13565: LD_INT 15
13567: PUSH
13568: LD_INT 16
13570: PUSH
13571: LD_INT 20
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_INT 23
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 26
13588: PUSH
13589: LD_INT 30
13591: PUSH
13592: LD_INT 31
13594: PUSH
13595: LD_INT 32
13597: PUSH
13598: LD_INT 36
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 101
13625: PUSH
13626: LD_INT 102
13628: PUSH
13629: LD_INT 103
13631: PUSH
13632: LD_INT 105
13634: PUSH
13635: LD_INT 106
13637: PUSH
13638: LD_INT 108
13640: PUSH
13641: LD_INT 109
13643: PUSH
13644: LD_INT 112
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 15784
13663: LD_INT 9
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13807
13671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13672: LD_ADDR_VAR 0 1
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: LD_INT 7
13691: PUSH
13692: LD_INT 8
13694: PUSH
13695: LD_INT 11
13697: PUSH
13698: LD_INT 12
13700: PUSH
13701: LD_INT 15
13703: PUSH
13704: LD_INT 16
13706: PUSH
13707: LD_INT 20
13709: PUSH
13710: LD_INT 21
13712: PUSH
13713: LD_INT 22
13715: PUSH
13716: LD_INT 23
13718: PUSH
13719: LD_INT 25
13721: PUSH
13722: LD_INT 26
13724: PUSH
13725: LD_INT 28
13727: PUSH
13728: LD_INT 30
13730: PUSH
13731: LD_INT 31
13733: PUSH
13734: LD_INT 32
13736: PUSH
13737: LD_INT 36
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 101
13765: PUSH
13766: LD_INT 102
13768: PUSH
13769: LD_INT 103
13771: PUSH
13772: LD_INT 105
13774: PUSH
13775: LD_INT 106
13777: PUSH
13778: LD_INT 108
13780: PUSH
13781: LD_INT 109
13783: PUSH
13784: LD_INT 112
13786: PUSH
13787: LD_INT 114
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: ST_TO_ADDR
13805: GO 15784
13807: LD_INT 10
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13999
13815: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 6
13832: PUSH
13833: LD_INT 7
13835: PUSH
13836: LD_INT 8
13838: PUSH
13839: LD_INT 9
13841: PUSH
13842: LD_INT 10
13844: PUSH
13845: LD_INT 11
13847: PUSH
13848: LD_INT 12
13850: PUSH
13851: LD_INT 13
13853: PUSH
13854: LD_INT 14
13856: PUSH
13857: LD_INT 15
13859: PUSH
13860: LD_INT 16
13862: PUSH
13863: LD_INT 17
13865: PUSH
13866: LD_INT 18
13868: PUSH
13869: LD_INT 19
13871: PUSH
13872: LD_INT 20
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 23
13883: PUSH
13884: LD_INT 24
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 26
13892: PUSH
13893: LD_INT 28
13895: PUSH
13896: LD_INT 30
13898: PUSH
13899: LD_INT 31
13901: PUSH
13902: LD_INT 32
13904: PUSH
13905: LD_INT 36
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 101
13941: PUSH
13942: LD_INT 102
13944: PUSH
13945: LD_INT 103
13947: PUSH
13948: LD_INT 104
13950: PUSH
13951: LD_INT 105
13953: PUSH
13954: LD_INT 106
13956: PUSH
13957: LD_INT 107
13959: PUSH
13960: LD_INT 108
13962: PUSH
13963: LD_INT 109
13965: PUSH
13966: LD_INT 110
13968: PUSH
13969: LD_INT 111
13971: PUSH
13972: LD_INT 112
13974: PUSH
13975: LD_INT 114
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
13997: GO 15784
13999: LD_INT 11
14001: DOUBLE
14002: EQUAL
14003: IFTRUE 14007
14005: GO 14199
14007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: LD_INT 3
14018: PUSH
14019: LD_INT 4
14021: PUSH
14022: LD_INT 5
14024: PUSH
14025: LD_INT 6
14027: PUSH
14028: LD_INT 7
14030: PUSH
14031: LD_INT 8
14033: PUSH
14034: LD_INT 9
14036: PUSH
14037: LD_INT 10
14039: PUSH
14040: LD_INT 11
14042: PUSH
14043: LD_INT 12
14045: PUSH
14046: LD_INT 13
14048: PUSH
14049: LD_INT 14
14051: PUSH
14052: LD_INT 15
14054: PUSH
14055: LD_INT 16
14057: PUSH
14058: LD_INT 17
14060: PUSH
14061: LD_INT 18
14063: PUSH
14064: LD_INT 19
14066: PUSH
14067: LD_INT 20
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 23
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 26
14087: PUSH
14088: LD_INT 28
14090: PUSH
14091: LD_INT 30
14093: PUSH
14094: LD_INT 31
14096: PUSH
14097: LD_INT 32
14099: PUSH
14100: LD_INT 34
14102: PUSH
14103: LD_INT 36
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 101
14141: PUSH
14142: LD_INT 102
14144: PUSH
14145: LD_INT 103
14147: PUSH
14148: LD_INT 104
14150: PUSH
14151: LD_INT 105
14153: PUSH
14154: LD_INT 106
14156: PUSH
14157: LD_INT 107
14159: PUSH
14160: LD_INT 108
14162: PUSH
14163: LD_INT 109
14165: PUSH
14166: LD_INT 110
14168: PUSH
14169: LD_INT 111
14171: PUSH
14172: LD_INT 112
14174: PUSH
14175: LD_INT 114
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: ST_TO_ADDR
14197: GO 15784
14199: LD_INT 12
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14415
14207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_INT 1
14215: PUSH
14216: LD_INT 2
14218: PUSH
14219: LD_INT 3
14221: PUSH
14222: LD_INT 4
14224: PUSH
14225: LD_INT 5
14227: PUSH
14228: LD_INT 6
14230: PUSH
14231: LD_INT 7
14233: PUSH
14234: LD_INT 8
14236: PUSH
14237: LD_INT 9
14239: PUSH
14240: LD_INT 10
14242: PUSH
14243: LD_INT 11
14245: PUSH
14246: LD_INT 12
14248: PUSH
14249: LD_INT 13
14251: PUSH
14252: LD_INT 14
14254: PUSH
14255: LD_INT 15
14257: PUSH
14258: LD_INT 16
14260: PUSH
14261: LD_INT 17
14263: PUSH
14264: LD_INT 18
14266: PUSH
14267: LD_INT 19
14269: PUSH
14270: LD_INT 20
14272: PUSH
14273: LD_INT 21
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: LD_INT 24
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 26
14290: PUSH
14291: LD_INT 27
14293: PUSH
14294: LD_INT 28
14296: PUSH
14297: LD_INT 30
14299: PUSH
14300: LD_INT 31
14302: PUSH
14303: LD_INT 32
14305: PUSH
14306: LD_INT 33
14308: PUSH
14309: LD_INT 34
14311: PUSH
14312: LD_INT 36
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 101
14353: PUSH
14354: LD_INT 102
14356: PUSH
14357: LD_INT 103
14359: PUSH
14360: LD_INT 104
14362: PUSH
14363: LD_INT 105
14365: PUSH
14366: LD_INT 106
14368: PUSH
14369: LD_INT 107
14371: PUSH
14372: LD_INT 108
14374: PUSH
14375: LD_INT 109
14377: PUSH
14378: LD_INT 110
14380: PUSH
14381: LD_INT 111
14383: PUSH
14384: LD_INT 112
14386: PUSH
14387: LD_INT 113
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: ST_TO_ADDR
14413: GO 15784
14415: LD_INT 13
14417: DOUBLE
14418: EQUAL
14419: IFTRUE 14423
14421: GO 14619
14423: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14424: LD_ADDR_VAR 0 1
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 3
14437: PUSH
14438: LD_INT 4
14440: PUSH
14441: LD_INT 5
14443: PUSH
14444: LD_INT 8
14446: PUSH
14447: LD_INT 9
14449: PUSH
14450: LD_INT 10
14452: PUSH
14453: LD_INT 11
14455: PUSH
14456: LD_INT 12
14458: PUSH
14459: LD_INT 14
14461: PUSH
14462: LD_INT 15
14464: PUSH
14465: LD_INT 16
14467: PUSH
14468: LD_INT 17
14470: PUSH
14471: LD_INT 18
14473: PUSH
14474: LD_INT 19
14476: PUSH
14477: LD_INT 20
14479: PUSH
14480: LD_INT 21
14482: PUSH
14483: LD_INT 22
14485: PUSH
14486: LD_INT 23
14488: PUSH
14489: LD_INT 24
14491: PUSH
14492: LD_INT 25
14494: PUSH
14495: LD_INT 26
14497: PUSH
14498: LD_INT 27
14500: PUSH
14501: LD_INT 28
14503: PUSH
14504: LD_INT 30
14506: PUSH
14507: LD_INT 31
14509: PUSH
14510: LD_INT 32
14512: PUSH
14513: LD_INT 33
14515: PUSH
14516: LD_INT 34
14518: PUSH
14519: LD_INT 36
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 101
14557: PUSH
14558: LD_INT 102
14560: PUSH
14561: LD_INT 103
14563: PUSH
14564: LD_INT 104
14566: PUSH
14567: LD_INT 105
14569: PUSH
14570: LD_INT 106
14572: PUSH
14573: LD_INT 107
14575: PUSH
14576: LD_INT 108
14578: PUSH
14579: LD_INT 109
14581: PUSH
14582: LD_INT 110
14584: PUSH
14585: LD_INT 111
14587: PUSH
14588: LD_INT 112
14590: PUSH
14591: LD_INT 113
14593: PUSH
14594: LD_INT 114
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: ST_TO_ADDR
14617: GO 15784
14619: LD_INT 14
14621: DOUBLE
14622: EQUAL
14623: IFTRUE 14627
14625: GO 14839
14627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_INT 1
14635: PUSH
14636: LD_INT 2
14638: PUSH
14639: LD_INT 3
14641: PUSH
14642: LD_INT 4
14644: PUSH
14645: LD_INT 5
14647: PUSH
14648: LD_INT 6
14650: PUSH
14651: LD_INT 7
14653: PUSH
14654: LD_INT 8
14656: PUSH
14657: LD_INT 9
14659: PUSH
14660: LD_INT 10
14662: PUSH
14663: LD_INT 11
14665: PUSH
14666: LD_INT 12
14668: PUSH
14669: LD_INT 13
14671: PUSH
14672: LD_INT 14
14674: PUSH
14675: LD_INT 15
14677: PUSH
14678: LD_INT 16
14680: PUSH
14681: LD_INT 17
14683: PUSH
14684: LD_INT 18
14686: PUSH
14687: LD_INT 19
14689: PUSH
14690: LD_INT 20
14692: PUSH
14693: LD_INT 21
14695: PUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 23
14701: PUSH
14702: LD_INT 24
14704: PUSH
14705: LD_INT 25
14707: PUSH
14708: LD_INT 26
14710: PUSH
14711: LD_INT 27
14713: PUSH
14714: LD_INT 28
14716: PUSH
14717: LD_INT 29
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 32
14728: PUSH
14729: LD_INT 33
14731: PUSH
14732: LD_INT 34
14734: PUSH
14735: LD_INT 36
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 101
14777: PUSH
14778: LD_INT 102
14780: PUSH
14781: LD_INT 103
14783: PUSH
14784: LD_INT 104
14786: PUSH
14787: LD_INT 105
14789: PUSH
14790: LD_INT 106
14792: PUSH
14793: LD_INT 107
14795: PUSH
14796: LD_INT 108
14798: PUSH
14799: LD_INT 109
14801: PUSH
14802: LD_INT 110
14804: PUSH
14805: LD_INT 111
14807: PUSH
14808: LD_INT 112
14810: PUSH
14811: LD_INT 113
14813: PUSH
14814: LD_INT 114
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: ST_TO_ADDR
14837: GO 15784
14839: LD_INT 15
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 15059
14847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14848: LD_ADDR_VAR 0 1
14852: PUSH
14853: LD_INT 1
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: LD_INT 4
14864: PUSH
14865: LD_INT 5
14867: PUSH
14868: LD_INT 6
14870: PUSH
14871: LD_INT 7
14873: PUSH
14874: LD_INT 8
14876: PUSH
14877: LD_INT 9
14879: PUSH
14880: LD_INT 10
14882: PUSH
14883: LD_INT 11
14885: PUSH
14886: LD_INT 12
14888: PUSH
14889: LD_INT 13
14891: PUSH
14892: LD_INT 14
14894: PUSH
14895: LD_INT 15
14897: PUSH
14898: LD_INT 16
14900: PUSH
14901: LD_INT 17
14903: PUSH
14904: LD_INT 18
14906: PUSH
14907: LD_INT 19
14909: PUSH
14910: LD_INT 20
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: LD_INT 22
14918: PUSH
14919: LD_INT 23
14921: PUSH
14922: LD_INT 24
14924: PUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 26
14930: PUSH
14931: LD_INT 27
14933: PUSH
14934: LD_INT 28
14936: PUSH
14937: LD_INT 29
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 31
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 33
14951: PUSH
14952: LD_INT 34
14954: PUSH
14955: LD_INT 36
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 101
14997: PUSH
14998: LD_INT 102
15000: PUSH
15001: LD_INT 103
15003: PUSH
15004: LD_INT 104
15006: PUSH
15007: LD_INT 105
15009: PUSH
15010: LD_INT 106
15012: PUSH
15013: LD_INT 107
15015: PUSH
15016: LD_INT 108
15018: PUSH
15019: LD_INT 109
15021: PUSH
15022: LD_INT 110
15024: PUSH
15025: LD_INT 111
15027: PUSH
15028: LD_INT 112
15030: PUSH
15031: LD_INT 113
15033: PUSH
15034: LD_INT 114
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: ST_TO_ADDR
15057: GO 15784
15059: LD_INT 16
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15191
15067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15068: LD_ADDR_VAR 0 1
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: LD_INT 5
15081: PUSH
15082: LD_INT 7
15084: PUSH
15085: LD_INT 11
15087: PUSH
15088: LD_INT 12
15090: PUSH
15091: LD_INT 15
15093: PUSH
15094: LD_INT 16
15096: PUSH
15097: LD_INT 20
15099: PUSH
15100: LD_INT 21
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_INT 23
15108: PUSH
15109: LD_INT 25
15111: PUSH
15112: LD_INT 26
15114: PUSH
15115: LD_INT 30
15117: PUSH
15118: LD_INT 31
15120: PUSH
15121: LD_INT 32
15123: PUSH
15124: LD_INT 33
15126: PUSH
15127: LD_INT 34
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 101
15153: PUSH
15154: LD_INT 102
15156: PUSH
15157: LD_INT 103
15159: PUSH
15160: LD_INT 106
15162: PUSH
15163: LD_INT 108
15165: PUSH
15166: LD_INT 112
15168: PUSH
15169: LD_INT 113
15171: PUSH
15172: LD_INT 114
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: ST_TO_ADDR
15189: GO 15784
15191: LD_INT 17
15193: DOUBLE
15194: EQUAL
15195: IFTRUE 15199
15197: GO 15411
15199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: LD_INT 4
15216: PUSH
15217: LD_INT 5
15219: PUSH
15220: LD_INT 6
15222: PUSH
15223: LD_INT 7
15225: PUSH
15226: LD_INT 8
15228: PUSH
15229: LD_INT 9
15231: PUSH
15232: LD_INT 10
15234: PUSH
15235: LD_INT 11
15237: PUSH
15238: LD_INT 12
15240: PUSH
15241: LD_INT 13
15243: PUSH
15244: LD_INT 14
15246: PUSH
15247: LD_INT 15
15249: PUSH
15250: LD_INT 16
15252: PUSH
15253: LD_INT 17
15255: PUSH
15256: LD_INT 18
15258: PUSH
15259: LD_INT 19
15261: PUSH
15262: LD_INT 20
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 23
15273: PUSH
15274: LD_INT 24
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 26
15282: PUSH
15283: LD_INT 27
15285: PUSH
15286: LD_INT 28
15288: PUSH
15289: LD_INT 29
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 31
15297: PUSH
15298: LD_INT 32
15300: PUSH
15301: LD_INT 33
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 36
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 101
15349: PUSH
15350: LD_INT 102
15352: PUSH
15353: LD_INT 103
15355: PUSH
15356: LD_INT 104
15358: PUSH
15359: LD_INT 105
15361: PUSH
15362: LD_INT 106
15364: PUSH
15365: LD_INT 107
15367: PUSH
15368: LD_INT 108
15370: PUSH
15371: LD_INT 109
15373: PUSH
15374: LD_INT 110
15376: PUSH
15377: LD_INT 111
15379: PUSH
15380: LD_INT 112
15382: PUSH
15383: LD_INT 113
15385: PUSH
15386: LD_INT 114
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: ST_TO_ADDR
15409: GO 15784
15411: LD_INT 18
15413: DOUBLE
15414: EQUAL
15415: IFTRUE 15419
15417: GO 15555
15419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15420: LD_ADDR_VAR 0 1
15424: PUSH
15425: LD_INT 2
15427: PUSH
15428: LD_INT 4
15430: PUSH
15431: LD_INT 5
15433: PUSH
15434: LD_INT 7
15436: PUSH
15437: LD_INT 11
15439: PUSH
15440: LD_INT 12
15442: PUSH
15443: LD_INT 15
15445: PUSH
15446: LD_INT 16
15448: PUSH
15449: LD_INT 20
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 22
15457: PUSH
15458: LD_INT 23
15460: PUSH
15461: LD_INT 25
15463: PUSH
15464: LD_INT 26
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 31
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 33
15478: PUSH
15479: LD_INT 34
15481: PUSH
15482: LD_INT 35
15484: PUSH
15485: LD_INT 36
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 101
15513: PUSH
15514: LD_INT 102
15516: PUSH
15517: LD_INT 103
15519: PUSH
15520: LD_INT 106
15522: PUSH
15523: LD_INT 108
15525: PUSH
15526: LD_INT 112
15528: PUSH
15529: LD_INT 113
15531: PUSH
15532: LD_INT 114
15534: PUSH
15535: LD_INT 115
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: ST_TO_ADDR
15553: GO 15784
15555: LD_INT 19
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 15783
15563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15564: LD_ADDR_VAR 0 1
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: LD_INT 2
15574: PUSH
15575: LD_INT 3
15577: PUSH
15578: LD_INT 4
15580: PUSH
15581: LD_INT 5
15583: PUSH
15584: LD_INT 6
15586: PUSH
15587: LD_INT 7
15589: PUSH
15590: LD_INT 8
15592: PUSH
15593: LD_INT 9
15595: PUSH
15596: LD_INT 10
15598: PUSH
15599: LD_INT 11
15601: PUSH
15602: LD_INT 12
15604: PUSH
15605: LD_INT 13
15607: PUSH
15608: LD_INT 14
15610: PUSH
15611: LD_INT 15
15613: PUSH
15614: LD_INT 16
15616: PUSH
15617: LD_INT 17
15619: PUSH
15620: LD_INT 18
15622: PUSH
15623: LD_INT 19
15625: PUSH
15626: LD_INT 20
15628: PUSH
15629: LD_INT 21
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_INT 23
15637: PUSH
15638: LD_INT 24
15640: PUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 26
15646: PUSH
15647: LD_INT 27
15649: PUSH
15650: LD_INT 28
15652: PUSH
15653: LD_INT 29
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: LD_INT 31
15661: PUSH
15662: LD_INT 32
15664: PUSH
15665: LD_INT 33
15667: PUSH
15668: LD_INT 34
15670: PUSH
15671: LD_INT 35
15673: PUSH
15674: LD_INT 36
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 101
15717: PUSH
15718: LD_INT 102
15720: PUSH
15721: LD_INT 103
15723: PUSH
15724: LD_INT 104
15726: PUSH
15727: LD_INT 105
15729: PUSH
15730: LD_INT 106
15732: PUSH
15733: LD_INT 107
15735: PUSH
15736: LD_INT 108
15738: PUSH
15739: LD_INT 109
15741: PUSH
15742: LD_INT 110
15744: PUSH
15745: LD_INT 111
15747: PUSH
15748: LD_INT 112
15750: PUSH
15751: LD_INT 113
15753: PUSH
15754: LD_INT 114
15756: PUSH
15757: LD_INT 115
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: ST_TO_ADDR
15781: GO 15784
15783: POP
// end else
15784: GO 16003
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15786: LD_ADDR_VAR 0 1
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: LD_INT 2
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: LD_INT 4
15802: PUSH
15803: LD_INT 5
15805: PUSH
15806: LD_INT 6
15808: PUSH
15809: LD_INT 7
15811: PUSH
15812: LD_INT 8
15814: PUSH
15815: LD_INT 9
15817: PUSH
15818: LD_INT 10
15820: PUSH
15821: LD_INT 11
15823: PUSH
15824: LD_INT 12
15826: PUSH
15827: LD_INT 13
15829: PUSH
15830: LD_INT 14
15832: PUSH
15833: LD_INT 15
15835: PUSH
15836: LD_INT 16
15838: PUSH
15839: LD_INT 17
15841: PUSH
15842: LD_INT 18
15844: PUSH
15845: LD_INT 19
15847: PUSH
15848: LD_INT 20
15850: PUSH
15851: LD_INT 21
15853: PUSH
15854: LD_INT 22
15856: PUSH
15857: LD_INT 23
15859: PUSH
15860: LD_INT 24
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 26
15868: PUSH
15869: LD_INT 27
15871: PUSH
15872: LD_INT 28
15874: PUSH
15875: LD_INT 29
15877: PUSH
15878: LD_INT 30
15880: PUSH
15881: LD_INT 31
15883: PUSH
15884: LD_INT 32
15886: PUSH
15887: LD_INT 33
15889: PUSH
15890: LD_INT 34
15892: PUSH
15893: LD_INT 35
15895: PUSH
15896: LD_INT 36
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 101
15939: PUSH
15940: LD_INT 102
15942: PUSH
15943: LD_INT 103
15945: PUSH
15946: LD_INT 104
15948: PUSH
15949: LD_INT 105
15951: PUSH
15952: LD_INT 106
15954: PUSH
15955: LD_INT 107
15957: PUSH
15958: LD_INT 108
15960: PUSH
15961: LD_INT 109
15963: PUSH
15964: LD_INT 110
15966: PUSH
15967: LD_INT 111
15969: PUSH
15970: LD_INT 112
15972: PUSH
15973: LD_INT 113
15975: PUSH
15976: LD_INT 114
15978: PUSH
15979: LD_INT 115
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: ST_TO_ADDR
// if result then
16003: LD_VAR 0 1
16007: IFFALSE 16296
// begin normal :=  ;
16009: LD_ADDR_VAR 0 3
16013: PUSH
16014: LD_STRING 
16016: ST_TO_ADDR
// hardcore :=  ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_STRING 
16024: ST_TO_ADDR
// for i = 1 to normalCounter do
16025: LD_ADDR_VAR 0 5
16029: PUSH
16030: DOUBLE
16031: LD_INT 1
16033: DEC
16034: ST_TO_ADDR
16035: LD_EXP 46
16039: PUSH
16040: FOR_TO
16041: IFFALSE 16142
// begin tmp := 0 ;
16043: LD_ADDR_VAR 0 2
16047: PUSH
16048: LD_STRING 0
16050: ST_TO_ADDR
// if result [ 1 ] then
16051: LD_VAR 0 1
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: IFFALSE 16124
// if result [ 1 ] [ 1 ] = i then
16061: LD_VAR 0 1
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PUSH
16074: LD_VAR 0 5
16078: EQUAL
16079: IFFALSE 16124
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: LD_VAR 0 1
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 3
16110: PPUSH
16111: CALL_OW 1
16115: ST_TO_ADDR
// tmp := 1 ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: LD_STRING 1
16123: ST_TO_ADDR
// end ; normal := normal & tmp ;
16124: LD_ADDR_VAR 0 3
16128: PUSH
16129: LD_VAR 0 3
16133: PUSH
16134: LD_VAR 0 2
16138: STR
16139: ST_TO_ADDR
// end ;
16140: GO 16040
16142: POP
16143: POP
// for i = 1 to hardcoreCounter do
16144: LD_ADDR_VAR 0 5
16148: PUSH
16149: DOUBLE
16150: LD_INT 1
16152: DEC
16153: ST_TO_ADDR
16154: LD_EXP 47
16158: PUSH
16159: FOR_TO
16160: IFFALSE 16265
// begin tmp := 0 ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: LD_STRING 0
16169: ST_TO_ADDR
// if result [ 2 ] then
16170: LD_VAR 0 1
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: IFFALSE 16247
// if result [ 2 ] [ 1 ] = 100 + i then
16180: LD_VAR 0 1
16184: PUSH
16185: LD_INT 2
16187: ARRAY
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PUSH
16193: LD_INT 100
16195: PUSH
16196: LD_VAR 0 5
16200: PLUS
16201: EQUAL
16202: IFFALSE 16247
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16204: LD_ADDR_VAR 0 1
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: LD_INT 2
16216: PPUSH
16217: LD_VAR 0 1
16221: PUSH
16222: LD_INT 2
16224: ARRAY
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: CALL_OW 3
16233: PPUSH
16234: CALL_OW 1
16238: ST_TO_ADDR
// tmp := 1 ;
16239: LD_ADDR_VAR 0 2
16243: PUSH
16244: LD_STRING 1
16246: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16247: LD_ADDR_VAR 0 4
16251: PUSH
16252: LD_VAR 0 4
16256: PUSH
16257: LD_VAR 0 2
16261: STR
16262: ST_TO_ADDR
// end ;
16263: GO 16159
16265: POP
16266: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16267: LD_STRING getStreamItemsFromMission("
16269: PUSH
16270: LD_VAR 0 3
16274: STR
16275: PUSH
16276: LD_STRING ","
16278: STR
16279: PUSH
16280: LD_VAR 0 4
16284: STR
16285: PUSH
16286: LD_STRING ")
16288: STR
16289: PPUSH
16290: CALL_OW 559
// end else
16294: GO 16303
// ToLua ( getStreamItemsFromMission("","") ) ;
16296: LD_STRING getStreamItemsFromMission("","")
16298: PPUSH
16299: CALL_OW 559
// end ;
16303: LD_VAR 0 1
16307: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16308: LD_EXP 45
16312: PUSH
16313: LD_EXP 50
16317: AND
16318: IFFALSE 16442
16320: GO 16322
16322: DISABLE
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
// begin enable ;
16327: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16328: LD_ADDR_VAR 0 2
16332: PUSH
16333: LD_INT 22
16335: PUSH
16336: LD_OWVAR 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: LD_INT 34
16350: PUSH
16351: LD_INT 7
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 34
16360: PUSH
16361: LD_INT 45
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 34
16370: PUSH
16371: LD_INT 28
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 34
16380: PUSH
16381: LD_INT 47
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 69
16403: ST_TO_ADDR
// if not tmp then
16404: LD_VAR 0 2
16408: NOT
16409: IFFALSE 16413
// exit ;
16411: GO 16442
// for i in tmp do
16413: LD_ADDR_VAR 0 1
16417: PUSH
16418: LD_VAR 0 2
16422: PUSH
16423: FOR_IN
16424: IFFALSE 16440
// begin SetLives ( i , 0 ) ;
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: CALL_OW 234
// end ;
16438: GO 16423
16440: POP
16441: POP
// end ;
16442: PPOPN 2
16444: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16445: LD_EXP 45
16449: PUSH
16450: LD_EXP 51
16454: AND
16455: IFFALSE 16539
16457: GO 16459
16459: DISABLE
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
// begin enable ;
16464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16465: LD_ADDR_VAR 0 2
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_OWVAR 2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 32
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PPUSH
16496: CALL_OW 69
16500: ST_TO_ADDR
// if not tmp then
16501: LD_VAR 0 2
16505: NOT
16506: IFFALSE 16510
// exit ;
16508: GO 16539
// for i in tmp do
16510: LD_ADDR_VAR 0 1
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: FOR_IN
16521: IFFALSE 16537
// begin SetLives ( i , 0 ) ;
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 0
16530: PPUSH
16531: CALL_OW 234
// end ;
16535: GO 16520
16537: POP
16538: POP
// end ;
16539: PPOPN 2
16541: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16542: LD_EXP 45
16546: PUSH
16547: LD_EXP 48
16551: AND
16552: IFFALSE 16645
16554: GO 16556
16556: DISABLE
16557: LD_INT 0
16559: PPUSH
// begin enable ;
16560: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16561: LD_ADDR_VAR 0 1
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 25
16583: PUSH
16584: LD_INT 5
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 9
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 25
16603: PUSH
16604: LD_INT 8
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PPUSH
16621: CALL_OW 69
16625: PUSH
16626: FOR_IN
16627: IFFALSE 16643
// begin SetClass ( i , 1 ) ;
16629: LD_VAR 0 1
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 336
// end ;
16641: GO 16626
16643: POP
16644: POP
// end ;
16645: PPOPN 1
16647: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16648: LD_EXP 45
16652: PUSH
16653: LD_EXP 49
16657: AND
16658: PUSH
16659: LD_OWVAR 65
16663: PUSH
16664: LD_INT 7
16666: LESS
16667: AND
16668: IFFALSE 16682
16670: GO 16672
16672: DISABLE
// begin enable ;
16673: ENABLE
// game_speed := 7 ;
16674: LD_ADDR_OWVAR 65
16678: PUSH
16679: LD_INT 7
16681: ST_TO_ADDR
// end ;
16682: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16683: LD_EXP 45
16687: PUSH
16688: LD_EXP 52
16692: AND
16693: IFFALSE 16895
16695: GO 16697
16697: DISABLE
16698: LD_INT 0
16700: PPUSH
16701: PPUSH
16702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_INT 81
16710: PUSH
16711: LD_OWVAR 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 21
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 69
16738: ST_TO_ADDR
// if not tmp then
16739: LD_VAR 0 3
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16895
// if tmp > 5 then
16748: LD_VAR 0 3
16752: PUSH
16753: LD_INT 5
16755: GREATER
16756: IFFALSE 16768
// k := 5 else
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_INT 5
16765: ST_TO_ADDR
16766: GO 16778
// k := tmp ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_VAR 0 3
16777: ST_TO_ADDR
// for i := 1 to k do
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: DOUBLE
16784: LD_INT 1
16786: DEC
16787: ST_TO_ADDR
16788: LD_VAR 0 2
16792: PUSH
16793: FOR_TO
16794: IFFALSE 16893
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16796: LD_VAR 0 3
16800: PUSH
16801: LD_VAR 0 1
16805: ARRAY
16806: PPUSH
16807: LD_VAR 0 1
16811: PUSH
16812: LD_INT 4
16814: MOD
16815: PUSH
16816: LD_INT 1
16818: PLUS
16819: PPUSH
16820: CALL_OW 259
16824: PUSH
16825: LD_INT 10
16827: LESS
16828: IFFALSE 16891
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16830: LD_VAR 0 3
16834: PUSH
16835: LD_VAR 0 1
16839: ARRAY
16840: PPUSH
16841: LD_VAR 0 1
16845: PUSH
16846: LD_INT 4
16848: MOD
16849: PUSH
16850: LD_INT 1
16852: PLUS
16853: PPUSH
16854: LD_VAR 0 3
16858: PUSH
16859: LD_VAR 0 1
16863: ARRAY
16864: PPUSH
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 4
16872: MOD
16873: PUSH
16874: LD_INT 1
16876: PLUS
16877: PPUSH
16878: CALL_OW 259
16882: PUSH
16883: LD_INT 1
16885: PLUS
16886: PPUSH
16887: CALL_OW 237
16891: GO 16793
16893: POP
16894: POP
// end ;
16895: PPOPN 3
16897: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16898: LD_EXP 45
16902: PUSH
16903: LD_EXP 53
16907: AND
16908: IFFALSE 16928
16910: GO 16912
16912: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16913: LD_INT 4
16915: PPUSH
16916: LD_OWVAR 2
16920: PPUSH
16921: LD_INT 0
16923: PPUSH
16924: CALL_OW 324
16928: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16929: LD_EXP 45
16933: PUSH
16934: LD_EXP 82
16938: AND
16939: IFFALSE 16959
16941: GO 16943
16943: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16944: LD_INT 19
16946: PPUSH
16947: LD_OWVAR 2
16951: PPUSH
16952: LD_INT 0
16954: PPUSH
16955: CALL_OW 324
16959: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16960: LD_EXP 45
16964: PUSH
16965: LD_EXP 54
16969: AND
16970: IFFALSE 17072
16972: GO 16974
16974: DISABLE
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
// begin enable ;
16979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16980: LD_ADDR_VAR 0 2
16984: PUSH
16985: LD_INT 22
16987: PUSH
16988: LD_OWVAR 2
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 34
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 34
17012: PUSH
17013: LD_INT 30
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 69
17033: ST_TO_ADDR
// if not tmp then
17034: LD_VAR 0 2
17038: NOT
17039: IFFALSE 17043
// exit ;
17041: GO 17072
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 2
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17070
// begin SetLives ( i , 0 ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 0
17063: PPUSH
17064: CALL_OW 234
// end ;
17068: GO 17053
17070: POP
17071: POP
// end ;
17072: PPOPN 2
17074: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17075: LD_EXP 45
17079: PUSH
17080: LD_EXP 55
17084: AND
17085: IFFALSE 17105
17087: GO 17089
17089: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17090: LD_INT 32
17092: PPUSH
17093: LD_OWVAR 2
17097: PPUSH
17098: LD_INT 0
17100: PPUSH
17101: CALL_OW 324
17105: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17106: LD_EXP 45
17110: PUSH
17111: LD_EXP 56
17115: AND
17116: IFFALSE 17297
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
17125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17126: LD_ADDR_VAR 0 2
17130: PUSH
17131: LD_INT 22
17133: PUSH
17134: LD_OWVAR 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 33
17145: PUSH
17146: LD_INT 3
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: ST_TO_ADDR
// if not tmp then
17162: LD_VAR 0 2
17166: NOT
17167: IFFALSE 17171
// exit ;
17169: GO 17297
// side := 0 ;
17171: LD_ADDR_VAR 0 3
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// for i := 1 to 8 do
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: DOUBLE
17185: LD_INT 1
17187: DEC
17188: ST_TO_ADDR
17189: LD_INT 8
17191: PUSH
17192: FOR_TO
17193: IFFALSE 17241
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17195: LD_OWVAR 2
17199: PUSH
17200: LD_VAR 0 1
17204: NONEQUAL
17205: PUSH
17206: LD_OWVAR 2
17210: PPUSH
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 81
17220: PUSH
17221: LD_INT 2
17223: EQUAL
17224: AND
17225: IFFALSE 17239
// begin side := i ;
17227: LD_ADDR_VAR 0 3
17231: PUSH
17232: LD_VAR 0 1
17236: ST_TO_ADDR
// break ;
17237: GO 17241
// end ;
17239: GO 17192
17241: POP
17242: POP
// if not side then
17243: LD_VAR 0 3
17247: NOT
17248: IFFALSE 17252
// exit ;
17250: GO 17297
// for i := 1 to tmp do
17252: LD_ADDR_VAR 0 1
17256: PUSH
17257: DOUBLE
17258: LD_INT 1
17260: DEC
17261: ST_TO_ADDR
17262: LD_VAR 0 2
17266: PUSH
17267: FOR_TO
17268: IFFALSE 17295
// if Prob ( 60 ) then
17270: LD_INT 60
17272: PPUSH
17273: CALL_OW 13
17277: IFFALSE 17293
// SetSide ( i , side ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: CALL_OW 235
17293: GO 17267
17295: POP
17296: POP
// end ;
17297: PPOPN 3
17299: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17300: LD_EXP 45
17304: PUSH
17305: LD_EXP 58
17309: AND
17310: IFFALSE 17429
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17318: LD_ADDR_VAR 0 1
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_OWVAR 2
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 21
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 23
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL_OW 69
17371: PUSH
17372: FOR_IN
17373: IFFALSE 17427
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 257
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 4
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: IN
17403: IFFALSE 17425
// SetClass ( un , rand ( 1 , 4 ) ) ;
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 4
17415: PPUSH
17416: CALL_OW 12
17420: PPUSH
17421: CALL_OW 336
17425: GO 17372
17427: POP
17428: POP
// end ;
17429: PPOPN 1
17431: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17432: LD_EXP 45
17436: PUSH
17437: LD_EXP 57
17441: AND
17442: IFFALSE 17521
17444: GO 17446
17446: DISABLE
17447: LD_INT 0
17449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17450: LD_ADDR_VAR 0 1
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_OWVAR 2
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 21
17469: PUSH
17470: LD_INT 3
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PPUSH
17481: CALL_OW 69
17485: ST_TO_ADDR
// if not tmp then
17486: LD_VAR 0 1
17490: NOT
17491: IFFALSE 17495
// exit ;
17493: GO 17521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17495: LD_VAR 0 1
17499: PUSH
17500: LD_INT 1
17502: PPUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 12
17512: ARRAY
17513: PPUSH
17514: LD_INT 100
17516: PPUSH
17517: CALL_OW 234
// end ;
17521: PPOPN 1
17523: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17524: LD_EXP 45
17528: PUSH
17529: LD_EXP 59
17533: AND
17534: IFFALSE 17632
17536: GO 17538
17538: DISABLE
17539: LD_INT 0
17541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17542: LD_ADDR_VAR 0 1
17546: PUSH
17547: LD_INT 22
17549: PUSH
17550: LD_OWVAR 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 21
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PPUSH
17573: CALL_OW 69
17577: ST_TO_ADDR
// if not tmp then
17578: LD_VAR 0 1
17582: NOT
17583: IFFALSE 17587
// exit ;
17585: GO 17632
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17587: LD_VAR 0 1
17591: PUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 12
17604: ARRAY
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_INT 4
17611: PPUSH
17612: CALL_OW 12
17616: PPUSH
17617: LD_INT 3000
17619: PPUSH
17620: LD_INT 9000
17622: PPUSH
17623: CALL_OW 12
17627: PPUSH
17628: CALL_OW 492
// end ;
17632: PPOPN 1
17634: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17635: LD_EXP 45
17639: PUSH
17640: LD_EXP 60
17644: AND
17645: IFFALSE 17665
17647: GO 17649
17649: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17650: LD_INT 1
17652: PPUSH
17653: LD_OWVAR 2
17657: PPUSH
17658: LD_INT 0
17660: PPUSH
17661: CALL_OW 324
17665: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17666: LD_EXP 45
17670: PUSH
17671: LD_EXP 61
17675: AND
17676: IFFALSE 17759
17678: GO 17680
17680: DISABLE
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 22
17692: PUSH
17693: LD_OWVAR 2
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 69
17720: ST_TO_ADDR
// if not tmp then
17721: LD_VAR 0 2
17725: NOT
17726: IFFALSE 17730
// exit ;
17728: GO 17759
// for i in tmp do
17730: LD_ADDR_VAR 0 1
17734: PUSH
17735: LD_VAR 0 2
17739: PUSH
17740: FOR_IN
17741: IFFALSE 17757
// SetBLevel ( i , 10 ) ;
17743: LD_VAR 0 1
17747: PPUSH
17748: LD_INT 10
17750: PPUSH
17751: CALL_OW 241
17755: GO 17740
17757: POP
17758: POP
// end ;
17759: PPOPN 2
17761: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17762: LD_EXP 45
17766: PUSH
17767: LD_EXP 62
17771: AND
17772: IFFALSE 17883
17774: GO 17776
17776: DISABLE
17777: LD_INT 0
17779: PPUSH
17780: PPUSH
17781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17782: LD_ADDR_VAR 0 3
17786: PUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 25
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 69
17817: ST_TO_ADDR
// if not tmp then
17818: LD_VAR 0 3
17822: NOT
17823: IFFALSE 17827
// exit ;
17825: GO 17883
// un := tmp [ rand ( 1 , tmp ) ] ;
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: LD_VAR 0 3
17836: PUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_VAR 0 3
17844: PPUSH
17845: CALL_OW 12
17849: ARRAY
17850: ST_TO_ADDR
// if Crawls ( un ) then
17851: LD_VAR 0 2
17855: PPUSH
17856: CALL_OW 318
17860: IFFALSE 17871
// ComWalk ( un ) ;
17862: LD_VAR 0 2
17866: PPUSH
17867: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17871: LD_VAR 0 2
17875: PPUSH
17876: LD_INT 5
17878: PPUSH
17879: CALL_OW 336
// end ;
17883: PPOPN 3
17885: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17886: LD_EXP 45
17890: PUSH
17891: LD_EXP 63
17895: AND
17896: PUSH
17897: LD_OWVAR 67
17901: PUSH
17902: LD_INT 3
17904: LESS
17905: AND
17906: IFFALSE 17925
17908: GO 17910
17910: DISABLE
// Difficulty := Difficulty + 1 ;
17911: LD_ADDR_OWVAR 67
17915: PUSH
17916: LD_OWVAR 67
17920: PUSH
17921: LD_INT 1
17923: PLUS
17924: ST_TO_ADDR
17925: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17926: LD_EXP 45
17930: PUSH
17931: LD_EXP 64
17935: AND
17936: IFFALSE 18039
17938: GO 17940
17940: DISABLE
17941: LD_INT 0
17943: PPUSH
// begin for i := 1 to 5 do
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: DOUBLE
17950: LD_INT 1
17952: DEC
17953: ST_TO_ADDR
17954: LD_INT 5
17956: PUSH
17957: FOR_TO
17958: IFFALSE 18037
// begin uc_nation := nation_nature ;
17960: LD_ADDR_OWVAR 21
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// uc_side := 0 ;
17968: LD_ADDR_OWVAR 20
17972: PUSH
17973: LD_INT 0
17975: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17976: LD_ADDR_OWVAR 29
17980: PUSH
17981: LD_INT 12
17983: PUSH
17984: LD_INT 12
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: ST_TO_ADDR
// hc_agressivity := 20 ;
17991: LD_ADDR_OWVAR 35
17995: PUSH
17996: LD_INT 20
17998: ST_TO_ADDR
// hc_class := class_tiger ;
17999: LD_ADDR_OWVAR 28
18003: PUSH
18004: LD_INT 14
18006: ST_TO_ADDR
// hc_gallery :=  ;
18007: LD_ADDR_OWVAR 33
18011: PUSH
18012: LD_STRING 
18014: ST_TO_ADDR
// hc_name :=  ;
18015: LD_ADDR_OWVAR 26
18019: PUSH
18020: LD_STRING 
18022: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18023: CALL_OW 44
18027: PPUSH
18028: LD_INT 0
18030: PPUSH
18031: CALL_OW 51
// end ;
18035: GO 17957
18037: POP
18038: POP
// end ;
18039: PPOPN 1
18041: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18042: LD_EXP 45
18046: PUSH
18047: LD_EXP 65
18051: AND
18052: IFFALSE 18061
18054: GO 18056
18056: DISABLE
// StreamSibBomb ;
18057: CALL 18062 0 0
18061: END
// export function StreamSibBomb ; var i , x , y ; begin
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
18066: PPUSH
18067: PPUSH
// result := false ;
18068: LD_ADDR_VAR 0 1
18072: PUSH
18073: LD_INT 0
18075: ST_TO_ADDR
// for i := 1 to 16 do
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: DOUBLE
18082: LD_INT 1
18084: DEC
18085: ST_TO_ADDR
18086: LD_INT 16
18088: PUSH
18089: FOR_TO
18090: IFFALSE 18289
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18092: LD_ADDR_VAR 0 3
18096: PUSH
18097: LD_INT 10
18099: PUSH
18100: LD_INT 20
18102: PUSH
18103: LD_INT 30
18105: PUSH
18106: LD_INT 40
18108: PUSH
18109: LD_INT 50
18111: PUSH
18112: LD_INT 60
18114: PUSH
18115: LD_INT 70
18117: PUSH
18118: LD_INT 80
18120: PUSH
18121: LD_INT 90
18123: PUSH
18124: LD_INT 100
18126: PUSH
18127: LD_INT 110
18129: PUSH
18130: LD_INT 120
18132: PUSH
18133: LD_INT 130
18135: PUSH
18136: LD_INT 140
18138: PUSH
18139: LD_INT 150
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PPUSH
18162: LD_INT 15
18164: PPUSH
18165: CALL_OW 12
18169: ARRAY
18170: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18171: LD_ADDR_VAR 0 4
18175: PUSH
18176: LD_INT 10
18178: PUSH
18179: LD_INT 20
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: LD_INT 40
18187: PUSH
18188: LD_INT 50
18190: PUSH
18191: LD_INT 60
18193: PUSH
18194: LD_INT 70
18196: PUSH
18197: LD_INT 80
18199: PUSH
18200: LD_INT 90
18202: PUSH
18203: LD_INT 100
18205: PUSH
18206: LD_INT 110
18208: PUSH
18209: LD_INT 120
18211: PUSH
18212: LD_INT 130
18214: PUSH
18215: LD_INT 140
18217: PUSH
18218: LD_INT 150
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_INT 15
18243: PPUSH
18244: CALL_OW 12
18248: ARRAY
18249: ST_TO_ADDR
// if ValidHex ( x , y ) then
18250: LD_VAR 0 3
18254: PPUSH
18255: LD_VAR 0 4
18259: PPUSH
18260: CALL_OW 488
18264: IFFALSE 18287
// begin result := [ x , y ] ;
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 3
18275: PUSH
18276: LD_VAR 0 4
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: ST_TO_ADDR
// break ;
18285: GO 18289
// end ; end ;
18287: GO 18089
18289: POP
18290: POP
// if result then
18291: LD_VAR 0 1
18295: IFFALSE 18355
// begin ToLua ( playSibBomb() ) ;
18297: LD_STRING playSibBomb()
18299: PPUSH
18300: CALL_OW 559
// wait ( 0 0$14 ) ;
18304: LD_INT 490
18306: PPUSH
18307: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18311: LD_VAR 0 1
18315: PUSH
18316: LD_INT 1
18318: ARRAY
18319: PPUSH
18320: LD_VAR 0 1
18324: PUSH
18325: LD_INT 2
18327: ARRAY
18328: PPUSH
18329: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18333: LD_VAR 0 1
18337: PUSH
18338: LD_INT 1
18340: ARRAY
18341: PPUSH
18342: LD_VAR 0 1
18346: PUSH
18347: LD_INT 2
18349: ARRAY
18350: PPUSH
18351: CALL_OW 429
// end ; end ;
18355: LD_VAR 0 1
18359: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18360: LD_EXP 45
18364: PUSH
18365: LD_EXP 67
18369: AND
18370: IFFALSE 18382
18372: GO 18374
18374: DISABLE
// YouLost (  ) ;
18375: LD_STRING 
18377: PPUSH
18378: CALL_OW 104
18382: END
// every 0 0$1 trigger StreamModeActive and sFog do
18383: LD_EXP 45
18387: PUSH
18388: LD_EXP 66
18392: AND
18393: IFFALSE 18407
18395: GO 18397
18397: DISABLE
// FogOff ( your_side ) ;
18398: LD_OWVAR 2
18402: PPUSH
18403: CALL_OW 344
18407: END
// every 0 0$1 trigger StreamModeActive and sSun do
18408: LD_EXP 45
18412: PUSH
18413: LD_EXP 68
18417: AND
18418: IFFALSE 18446
18420: GO 18422
18422: DISABLE
// begin solar_recharge_percent := 0 ;
18423: LD_ADDR_OWVAR 79
18427: PUSH
18428: LD_INT 0
18430: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18431: LD_INT 10500
18433: PPUSH
18434: CALL_OW 67
// solar_recharge_percent := 100 ;
18438: LD_ADDR_OWVAR 79
18442: PUSH
18443: LD_INT 100
18445: ST_TO_ADDR
// end ;
18446: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18447: LD_EXP 45
18451: PUSH
18452: LD_EXP 69
18456: AND
18457: IFFALSE 18696
18459: GO 18461
18461: DISABLE
18462: LD_INT 0
18464: PPUSH
18465: PPUSH
18466: PPUSH
// begin tmp := [ ] ;
18467: LD_ADDR_VAR 0 3
18471: PUSH
18472: EMPTY
18473: ST_TO_ADDR
// for i := 1 to 6 do
18474: LD_ADDR_VAR 0 1
18478: PUSH
18479: DOUBLE
18480: LD_INT 1
18482: DEC
18483: ST_TO_ADDR
18484: LD_INT 6
18486: PUSH
18487: FOR_TO
18488: IFFALSE 18593
// begin uc_nation := nation_nature ;
18490: LD_ADDR_OWVAR 21
18494: PUSH
18495: LD_INT 0
18497: ST_TO_ADDR
// uc_side := 0 ;
18498: LD_ADDR_OWVAR 20
18502: PUSH
18503: LD_INT 0
18505: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18506: LD_ADDR_OWVAR 29
18510: PUSH
18511: LD_INT 12
18513: PUSH
18514: LD_INT 12
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: ST_TO_ADDR
// hc_agressivity := 20 ;
18521: LD_ADDR_OWVAR 35
18525: PUSH
18526: LD_INT 20
18528: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18529: LD_ADDR_OWVAR 28
18533: PUSH
18534: LD_INT 17
18536: ST_TO_ADDR
// hc_gallery :=  ;
18537: LD_ADDR_OWVAR 33
18541: PUSH
18542: LD_STRING 
18544: ST_TO_ADDR
// hc_name :=  ;
18545: LD_ADDR_OWVAR 26
18549: PUSH
18550: LD_STRING 
18552: ST_TO_ADDR
// un := CreateHuman ;
18553: LD_ADDR_VAR 0 2
18557: PUSH
18558: CALL_OW 44
18562: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18563: LD_VAR 0 2
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 51
// tmp := tmp ^ un ;
18575: LD_ADDR_VAR 0 3
18579: PUSH
18580: LD_VAR 0 3
18584: PUSH
18585: LD_VAR 0 2
18589: ADD
18590: ST_TO_ADDR
// end ;
18591: GO 18487
18593: POP
18594: POP
// repeat wait ( 0 0$1 ) ;
18595: LD_INT 35
18597: PPUSH
18598: CALL_OW 67
// for un in tmp do
18602: LD_ADDR_VAR 0 2
18606: PUSH
18607: LD_VAR 0 3
18611: PUSH
18612: FOR_IN
18613: IFFALSE 18687
// begin if IsDead ( un ) then
18615: LD_VAR 0 2
18619: PPUSH
18620: CALL_OW 301
18624: IFFALSE 18644
// begin tmp := tmp diff un ;
18626: LD_ADDR_VAR 0 3
18630: PUSH
18631: LD_VAR 0 3
18635: PUSH
18636: LD_VAR 0 2
18640: DIFF
18641: ST_TO_ADDR
// continue ;
18642: GO 18612
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: PPUSH
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 74
18680: PPUSH
18681: CALL_OW 115
// end ;
18685: GO 18612
18687: POP
18688: POP
// until not tmp ;
18689: LD_VAR 0 3
18693: NOT
18694: IFFALSE 18595
// end ;
18696: PPOPN 3
18698: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18699: LD_EXP 45
18703: PUSH
18704: LD_EXP 70
18708: AND
18709: IFFALSE 18763
18711: GO 18713
18713: DISABLE
// begin ToLua ( displayTroll(); ) ;
18714: LD_STRING displayTroll();
18716: PPUSH
18717: CALL_OW 559
// wait ( 3 3$00 ) ;
18721: LD_INT 6300
18723: PPUSH
18724: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18728: LD_STRING hideTroll();
18730: PPUSH
18731: CALL_OW 559
// wait ( 1 1$00 ) ;
18735: LD_INT 2100
18737: PPUSH
18738: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18742: LD_STRING displayTroll();
18744: PPUSH
18745: CALL_OW 559
// wait ( 1 1$00 ) ;
18749: LD_INT 2100
18751: PPUSH
18752: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18756: LD_STRING hideTroll();
18758: PPUSH
18759: CALL_OW 559
// end ;
18763: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18764: LD_EXP 45
18768: PUSH
18769: LD_EXP 71
18773: AND
18774: IFFALSE 18837
18776: GO 18778
18778: DISABLE
18779: LD_INT 0
18781: PPUSH
// begin p := 0 ;
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// repeat game_speed := 1 ;
18790: LD_ADDR_OWVAR 65
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18798: LD_INT 35
18800: PPUSH
18801: CALL_OW 67
// p := p + 1 ;
18805: LD_ADDR_VAR 0 1
18809: PUSH
18810: LD_VAR 0 1
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: ST_TO_ADDR
// until p >= 60 ;
18819: LD_VAR 0 1
18823: PUSH
18824: LD_INT 60
18826: GREATEREQUAL
18827: IFFALSE 18790
// game_speed := 4 ;
18829: LD_ADDR_OWVAR 65
18833: PUSH
18834: LD_INT 4
18836: ST_TO_ADDR
// end ;
18837: PPOPN 1
18839: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18840: LD_EXP 45
18844: PUSH
18845: LD_EXP 72
18849: AND
18850: IFFALSE 18996
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18859: LD_ADDR_VAR 0 1
18863: PUSH
18864: LD_INT 22
18866: PUSH
18867: LD_OWVAR 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 30
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 30
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 69
18912: ST_TO_ADDR
// if not depot then
18913: LD_VAR 0 1
18917: NOT
18918: IFFALSE 18922
// exit ;
18920: GO 18996
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18922: LD_ADDR_VAR 0 2
18926: PUSH
18927: LD_VAR 0 1
18931: PUSH
18932: LD_INT 1
18934: PPUSH
18935: LD_VAR 0 1
18939: PPUSH
18940: CALL_OW 12
18944: ARRAY
18945: PPUSH
18946: CALL_OW 274
18950: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18951: LD_VAR 0 2
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: LD_INT 0
18961: PPUSH
18962: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18966: LD_VAR 0 2
18970: PPUSH
18971: LD_INT 2
18973: PPUSH
18974: LD_INT 0
18976: PPUSH
18977: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18981: LD_VAR 0 2
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: LD_INT 0
18991: PPUSH
18992: CALL_OW 277
// end ;
18996: PPOPN 2
18998: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18999: LD_EXP 45
19003: PUSH
19004: LD_EXP 73
19008: AND
19009: IFFALSE 19106
19011: GO 19013
19013: DISABLE
19014: LD_INT 0
19016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_INT 22
19024: PUSH
19025: LD_OWVAR 2
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 21
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 3
19046: PUSH
19047: LD_INT 23
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// if not tmp then
19071: LD_VAR 0 1
19075: NOT
19076: IFFALSE 19080
// exit ;
19078: GO 19106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19080: LD_VAR 0 1
19084: PUSH
19085: LD_INT 1
19087: PPUSH
19088: LD_VAR 0 1
19092: PPUSH
19093: CALL_OW 12
19097: ARRAY
19098: PPUSH
19099: LD_INT 200
19101: PPUSH
19102: CALL_OW 234
// end ;
19106: PPOPN 1
19108: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19109: LD_EXP 45
19113: PUSH
19114: LD_EXP 74
19118: AND
19119: IFFALSE 19198
19121: GO 19123
19123: DISABLE
19124: LD_INT 0
19126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19127: LD_ADDR_VAR 0 1
19131: PUSH
19132: LD_INT 22
19134: PUSH
19135: LD_OWVAR 2
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 21
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// if not tmp then
19163: LD_VAR 0 1
19167: NOT
19168: IFFALSE 19172
// exit ;
19170: GO 19198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19172: LD_VAR 0 1
19176: PUSH
19177: LD_INT 1
19179: PPUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 12
19189: ARRAY
19190: PPUSH
19191: LD_INT 60
19193: PPUSH
19194: CALL_OW 234
// end ;
19198: PPOPN 1
19200: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19201: LD_EXP 45
19205: PUSH
19206: LD_EXP 75
19210: AND
19211: IFFALSE 19310
19213: GO 19215
19215: DISABLE
19216: LD_INT 0
19218: PPUSH
19219: PPUSH
// begin enable ;
19220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19221: LD_ADDR_VAR 0 1
19225: PUSH
19226: LD_INT 22
19228: PUSH
19229: LD_OWVAR 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 61
19240: PUSH
19241: EMPTY
19242: LIST
19243: PUSH
19244: LD_INT 33
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 69
19263: ST_TO_ADDR
// if not tmp then
19264: LD_VAR 0 1
19268: NOT
19269: IFFALSE 19273
// exit ;
19271: GO 19310
// for i in tmp do
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: LD_VAR 0 1
19282: PUSH
19283: FOR_IN
19284: IFFALSE 19308
// if IsControledBy ( i ) then
19286: LD_VAR 0 2
19290: PPUSH
19291: CALL_OW 312
19295: IFFALSE 19306
// ComUnlink ( i ) ;
19297: LD_VAR 0 2
19301: PPUSH
19302: CALL_OW 136
19306: GO 19283
19308: POP
19309: POP
// end ;
19310: PPOPN 2
19312: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19313: LD_EXP 45
19317: PUSH
19318: LD_EXP 76
19322: AND
19323: IFFALSE 19463
19325: GO 19327
19327: DISABLE
19328: LD_INT 0
19330: PPUSH
19331: PPUSH
// begin ToLua ( displayPowell(); ) ;
19332: LD_STRING displayPowell();
19334: PPUSH
19335: CALL_OW 559
// uc_side := 0 ;
19339: LD_ADDR_OWVAR 20
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// uc_nation := 2 ;
19347: LD_ADDR_OWVAR 21
19351: PUSH
19352: LD_INT 2
19354: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19355: LD_ADDR_OWVAR 37
19359: PUSH
19360: LD_INT 14
19362: ST_TO_ADDR
// vc_engine := engine_siberite ;
19363: LD_ADDR_OWVAR 39
19367: PUSH
19368: LD_INT 3
19370: ST_TO_ADDR
// vc_control := control_apeman ;
19371: LD_ADDR_OWVAR 38
19375: PUSH
19376: LD_INT 5
19378: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19379: LD_ADDR_OWVAR 40
19383: PUSH
19384: LD_INT 29
19386: ST_TO_ADDR
// un := CreateVehicle ;
19387: LD_ADDR_VAR 0 2
19391: PUSH
19392: CALL_OW 45
19396: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19397: LD_VAR 0 2
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19409: LD_INT 35
19411: PPUSH
19412: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19416: LD_VAR 0 2
19420: PPUSH
19421: LD_INT 22
19423: PUSH
19424: LD_OWVAR 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PPUSH
19433: CALL_OW 69
19437: PPUSH
19438: LD_VAR 0 2
19442: PPUSH
19443: CALL_OW 74
19447: PPUSH
19448: CALL_OW 115
// until IsDead ( un ) ;
19452: LD_VAR 0 2
19456: PPUSH
19457: CALL_OW 301
19461: IFFALSE 19409
// end ;
19463: PPOPN 2
19465: END
// every 0 0$1 trigger StreamModeActive and sStu do
19466: LD_EXP 45
19470: PUSH
19471: LD_EXP 84
19475: AND
19476: IFFALSE 19492
19478: GO 19480
19480: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19481: LD_STRING displayStucuk();
19483: PPUSH
19484: CALL_OW 559
// ResetFog ;
19488: CALL_OW 335
// end ;
19492: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19493: LD_EXP 45
19497: PUSH
19498: LD_EXP 77
19502: AND
19503: IFFALSE 19644
19505: GO 19507
19507: DISABLE
19508: LD_INT 0
19510: PPUSH
19511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19512: LD_ADDR_VAR 0 2
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_OWVAR 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 21
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 69
19547: ST_TO_ADDR
// if not tmp then
19548: LD_VAR 0 2
19552: NOT
19553: IFFALSE 19557
// exit ;
19555: GO 19644
// un := tmp [ rand ( 1 , tmp ) ] ;
19557: LD_ADDR_VAR 0 1
19561: PUSH
19562: LD_VAR 0 2
19566: PUSH
19567: LD_INT 1
19569: PPUSH
19570: LD_VAR 0 2
19574: PPUSH
19575: CALL_OW 12
19579: ARRAY
19580: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_INT 0
19588: PPUSH
19589: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_OWVAR 3
19602: PUSH
19603: LD_VAR 0 1
19607: DIFF
19608: PPUSH
19609: LD_VAR 0 1
19613: PPUSH
19614: CALL_OW 74
19618: PPUSH
19619: CALL_OW 115
// wait ( 0 0$20 ) ;
19623: LD_INT 700
19625: PPUSH
19626: CALL_OW 67
// SetSide ( un , your_side ) ;
19630: LD_VAR 0 1
19634: PPUSH
19635: LD_OWVAR 2
19639: PPUSH
19640: CALL_OW 235
// end ;
19644: PPOPN 2
19646: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19647: LD_EXP 45
19651: PUSH
19652: LD_EXP 78
19656: AND
19657: IFFALSE 19763
19659: GO 19661
19661: DISABLE
19662: LD_INT 0
19664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_OWVAR 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 30
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not depot then
19719: LD_VAR 0 1
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19763
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: PPUSH
19737: CALL_OW 250
19741: PPUSH
19742: LD_VAR 0 1
19746: PUSH
19747: LD_INT 1
19749: ARRAY
19750: PPUSH
19751: CALL_OW 251
19755: PPUSH
19756: LD_INT 70
19758: PPUSH
19759: CALL_OW 495
// end ;
19763: PPOPN 1
19765: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19766: LD_EXP 45
19770: PUSH
19771: LD_EXP 79
19775: AND
19776: IFFALSE 19987
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19788: LD_ADDR_VAR 0 5
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_OWVAR 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 21
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: ST_TO_ADDR
// if not tmp then
19824: LD_VAR 0 5
19828: NOT
19829: IFFALSE 19833
// exit ;
19831: GO 19987
// for i in tmp do
19833: LD_ADDR_VAR 0 1
19837: PUSH
19838: LD_VAR 0 5
19842: PUSH
19843: FOR_IN
19844: IFFALSE 19985
// begin d := rand ( 0 , 5 ) ;
19846: LD_ADDR_VAR 0 4
19850: PUSH
19851: LD_INT 0
19853: PPUSH
19854: LD_INT 5
19856: PPUSH
19857: CALL_OW 12
19861: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19862: LD_ADDR_VAR 0 2
19866: PUSH
19867: LD_VAR 0 1
19871: PPUSH
19872: CALL_OW 250
19876: PPUSH
19877: LD_VAR 0 4
19881: PPUSH
19882: LD_INT 3
19884: PPUSH
19885: LD_INT 12
19887: PPUSH
19888: CALL_OW 12
19892: PPUSH
19893: CALL_OW 272
19897: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19898: LD_ADDR_VAR 0 3
19902: PUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 251
19912: PPUSH
19913: LD_VAR 0 4
19917: PPUSH
19918: LD_INT 3
19920: PPUSH
19921: LD_INT 12
19923: PPUSH
19924: CALL_OW 12
19928: PPUSH
19929: CALL_OW 273
19933: ST_TO_ADDR
// if ValidHex ( x , y ) then
19934: LD_VAR 0 2
19938: PPUSH
19939: LD_VAR 0 3
19943: PPUSH
19944: CALL_OW 488
19948: IFFALSE 19983
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_VAR 0 2
19959: PPUSH
19960: LD_VAR 0 3
19964: PPUSH
19965: LD_INT 3
19967: PPUSH
19968: LD_INT 6
19970: PPUSH
19971: CALL_OW 12
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: CALL_OW 483
// end ;
19983: GO 19843
19985: POP
19986: POP
// end ;
19987: PPOPN 5
19989: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19990: LD_EXP 45
19994: PUSH
19995: LD_EXP 80
19999: AND
20000: IFFALSE 20094
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 32
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 21
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: PPUSH
20051: CALL_OW 69
20055: ST_TO_ADDR
// if not tmp then
20056: LD_VAR 0 2
20060: NOT
20061: IFFALSE 20065
// exit ;
20063: GO 20094
// for i in tmp do
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_VAR 0 2
20074: PUSH
20075: FOR_IN
20076: IFFALSE 20092
// SetFuel ( i , 0 ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 0
20085: PPUSH
20086: CALL_OW 240
20090: GO 20075
20092: POP
20093: POP
// end ;
20094: PPOPN 2
20096: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20097: LD_EXP 45
20101: PUSH
20102: LD_EXP 81
20106: AND
20107: IFFALSE 20173
20109: GO 20111
20111: DISABLE
20112: LD_INT 0
20114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20115: LD_ADDR_VAR 0 1
20119: PUSH
20120: LD_INT 22
20122: PUSH
20123: LD_OWVAR 2
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 30
20134: PUSH
20135: LD_INT 29
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PPUSH
20146: CALL_OW 69
20150: ST_TO_ADDR
// if not tmp then
20151: LD_VAR 0 1
20155: NOT
20156: IFFALSE 20160
// exit ;
20158: GO 20173
// DestroyUnit ( tmp [ 1 ] ) ;
20160: LD_VAR 0 1
20164: PUSH
20165: LD_INT 1
20167: ARRAY
20168: PPUSH
20169: CALL_OW 65
// end ;
20173: PPOPN 1
20175: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20176: LD_EXP 45
20180: PUSH
20181: LD_EXP 83
20185: AND
20186: IFFALSE 20315
20188: GO 20190
20190: DISABLE
20191: LD_INT 0
20193: PPUSH
// begin uc_side := 0 ;
20194: LD_ADDR_OWVAR 20
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// uc_nation := nation_arabian ;
20202: LD_ADDR_OWVAR 21
20206: PUSH
20207: LD_INT 2
20209: ST_TO_ADDR
// hc_gallery :=  ;
20210: LD_ADDR_OWVAR 33
20214: PUSH
20215: LD_STRING 
20217: ST_TO_ADDR
// hc_name :=  ;
20218: LD_ADDR_OWVAR 26
20222: PUSH
20223: LD_STRING 
20225: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20226: LD_INT 1
20228: PPUSH
20229: LD_INT 11
20231: PPUSH
20232: LD_INT 10
20234: PPUSH
20235: CALL_OW 380
// un := CreateHuman ;
20239: LD_ADDR_VAR 0 1
20243: PUSH
20244: CALL_OW 44
20248: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20249: LD_VAR 0 1
20253: PPUSH
20254: LD_INT 1
20256: PPUSH
20257: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20261: LD_INT 35
20263: PPUSH
20264: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 22
20275: PUSH
20276: LD_OWVAR 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: PPUSH
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 74
20299: PPUSH
20300: CALL_OW 115
// until IsDead ( un ) ;
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 301
20313: IFFALSE 20261
// end ;
20315: PPOPN 1
20317: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20318: LD_EXP 45
20322: PUSH
20323: LD_EXP 85
20327: AND
20328: IFFALSE 20340
20330: GO 20332
20332: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20333: LD_STRING earthquake(getX(game), 0, 32)
20335: PPUSH
20336: CALL_OW 559
20340: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20341: LD_EXP 45
20345: PUSH
20346: LD_EXP 86
20350: AND
20351: IFFALSE 20442
20353: GO 20355
20355: DISABLE
20356: LD_INT 0
20358: PPUSH
// begin enable ;
20359: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20360: LD_ADDR_VAR 0 1
20364: PUSH
20365: LD_INT 22
20367: PUSH
20368: LD_OWVAR 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 21
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 33
20389: PUSH
20390: LD_INT 3
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PPUSH
20402: CALL_OW 69
20406: ST_TO_ADDR
// if not tmp then
20407: LD_VAR 0 1
20411: NOT
20412: IFFALSE 20416
// exit ;
20414: GO 20442
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20416: LD_VAR 0 1
20420: PUSH
20421: LD_INT 1
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 12
20433: ARRAY
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 234
// end ;
20442: PPOPN 1
20444: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20445: LD_EXP 45
20449: PUSH
20450: LD_EXP 87
20454: AND
20455: IFFALSE 20596
20457: GO 20459
20459: DISABLE
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
20464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20465: LD_ADDR_VAR 0 3
20469: PUSH
20470: LD_INT 22
20472: PUSH
20473: LD_OWVAR 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 25
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PPUSH
20496: CALL_OW 69
20500: ST_TO_ADDR
// if not tmp then
20501: LD_VAR 0 3
20505: NOT
20506: IFFALSE 20510
// exit ;
20508: GO 20596
// un := tmp [ rand ( 1 , tmp ) ] ;
20510: LD_ADDR_VAR 0 2
20514: PUSH
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 1
20522: PPUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: CALL_OW 12
20532: ARRAY
20533: ST_TO_ADDR
// if Crawls ( un ) then
20534: LD_VAR 0 2
20538: PPUSH
20539: CALL_OW 318
20543: IFFALSE 20554
// ComWalk ( un ) ;
20545: LD_VAR 0 2
20549: PPUSH
20550: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20554: LD_VAR 0 2
20558: PPUSH
20559: LD_INT 9
20561: PPUSH
20562: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20566: LD_INT 28
20568: PPUSH
20569: LD_OWVAR 2
20573: PPUSH
20574: LD_INT 2
20576: PPUSH
20577: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20581: LD_INT 29
20583: PPUSH
20584: LD_OWVAR 2
20588: PPUSH
20589: LD_INT 2
20591: PPUSH
20592: CALL_OW 322
// end ;
20596: PPOPN 3
20598: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20599: LD_EXP 45
20603: PUSH
20604: LD_EXP 88
20608: AND
20609: IFFALSE 20720
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_INT 22
20626: PUSH
20627: LD_OWVAR 2
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 25
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 69
20654: ST_TO_ADDR
// if not tmp then
20655: LD_VAR 0 3
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20720
// un := tmp [ rand ( 1 , tmp ) ] ;
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_VAR 0 3
20673: PUSH
20674: LD_INT 1
20676: PPUSH
20677: LD_VAR 0 3
20681: PPUSH
20682: CALL_OW 12
20686: ARRAY
20687: ST_TO_ADDR
// if Crawls ( un ) then
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 318
20697: IFFALSE 20708
// ComWalk ( un ) ;
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_INT 8
20715: PPUSH
20716: CALL_OW 336
// end ;
20720: PPOPN 3
20722: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20723: LD_EXP 45
20727: PUSH
20728: LD_EXP 89
20732: AND
20733: IFFALSE 20877
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_OWVAR 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 21
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 34
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 34
20784: PUSH
20785: LD_INT 51
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 34
20794: PUSH
20795: LD_INT 32
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: PPUSH
20813: CALL_OW 69
20817: ST_TO_ADDR
// if not tmp then
20818: LD_VAR 0 2
20822: NOT
20823: IFFALSE 20827
// exit ;
20825: GO 20877
// for i in tmp do
20827: LD_ADDR_VAR 0 1
20831: PUSH
20832: LD_VAR 0 2
20836: PUSH
20837: FOR_IN
20838: IFFALSE 20875
// if GetCargo ( i , mat_artifact ) = 0 then
20840: LD_VAR 0 1
20844: PPUSH
20845: LD_INT 4
20847: PPUSH
20848: CALL_OW 289
20852: PUSH
20853: LD_INT 0
20855: EQUAL
20856: IFFALSE 20873
// SetCargo ( i , mat_siberit , 100 ) ;
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: LD_INT 100
20868: PPUSH
20869: CALL_OW 290
20873: GO 20837
20875: POP
20876: POP
// end ;
20877: PPOPN 2
20879: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20880: LD_EXP 45
20884: PUSH
20885: LD_EXP 90
20889: AND
20890: IFFALSE 21073
20892: GO 20894
20894: DISABLE
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20899: LD_ADDR_VAR 0 2
20903: PUSH
20904: LD_INT 22
20906: PUSH
20907: LD_OWVAR 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 69
20920: ST_TO_ADDR
// if not tmp then
20921: LD_VAR 0 2
20925: NOT
20926: IFFALSE 20930
// exit ;
20928: GO 21073
// for i := 1 to 2 do
20930: LD_ADDR_VAR 0 1
20934: PUSH
20935: DOUBLE
20936: LD_INT 1
20938: DEC
20939: ST_TO_ADDR
20940: LD_INT 2
20942: PUSH
20943: FOR_TO
20944: IFFALSE 21071
// begin uc_side := your_side ;
20946: LD_ADDR_OWVAR 20
20950: PUSH
20951: LD_OWVAR 2
20955: ST_TO_ADDR
// uc_nation := nation_american ;
20956: LD_ADDR_OWVAR 21
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// vc_chassis := us_morphling ;
20964: LD_ADDR_OWVAR 37
20968: PUSH
20969: LD_INT 5
20971: ST_TO_ADDR
// vc_engine := engine_siberite ;
20972: LD_ADDR_OWVAR 39
20976: PUSH
20977: LD_INT 3
20979: ST_TO_ADDR
// vc_control := control_computer ;
20980: LD_ADDR_OWVAR 38
20984: PUSH
20985: LD_INT 3
20987: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20988: LD_ADDR_OWVAR 40
20992: PUSH
20993: LD_INT 10
20995: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20996: LD_VAR 0 2
21000: PUSH
21001: LD_INT 1
21003: ARRAY
21004: PPUSH
21005: CALL_OW 310
21009: NOT
21010: IFFALSE 21057
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21012: CALL_OW 45
21016: PPUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PPUSH
21026: CALL_OW 250
21030: PPUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 1
21038: ARRAY
21039: PPUSH
21040: CALL_OW 251
21044: PPUSH
21045: LD_INT 12
21047: PPUSH
21048: LD_INT 1
21050: PPUSH
21051: CALL_OW 50
21055: GO 21069
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21057: CALL_OW 45
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 51
// end ;
21069: GO 20943
21071: POP
21072: POP
// end ;
21073: PPOPN 2
21075: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21076: LD_EXP 45
21080: PUSH
21081: LD_EXP 91
21085: AND
21086: IFFALSE 21308
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
21094: PPUSH
21095: PPUSH
21096: PPUSH
21097: PPUSH
21098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21099: LD_ADDR_VAR 0 6
21103: PUSH
21104: LD_INT 22
21106: PUSH
21107: LD_OWVAR 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 21
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 3
21128: PUSH
21129: LD_INT 23
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PPUSH
21148: CALL_OW 69
21152: ST_TO_ADDR
// if not tmp then
21153: LD_VAR 0 6
21157: NOT
21158: IFFALSE 21162
// exit ;
21160: GO 21308
// s1 := rand ( 1 , 4 ) ;
21162: LD_ADDR_VAR 0 2
21166: PUSH
21167: LD_INT 1
21169: PPUSH
21170: LD_INT 4
21172: PPUSH
21173: CALL_OW 12
21177: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21178: LD_ADDR_VAR 0 4
21182: PUSH
21183: LD_VAR 0 6
21187: PUSH
21188: LD_INT 1
21190: ARRAY
21191: PPUSH
21192: LD_VAR 0 2
21196: PPUSH
21197: CALL_OW 259
21201: ST_TO_ADDR
// if s1 = 1 then
21202: LD_VAR 0 2
21206: PUSH
21207: LD_INT 1
21209: EQUAL
21210: IFFALSE 21230
// s2 := rand ( 2 , 4 ) else
21212: LD_ADDR_VAR 0 3
21216: PUSH
21217: LD_INT 2
21219: PPUSH
21220: LD_INT 4
21222: PPUSH
21223: CALL_OW 12
21227: ST_TO_ADDR
21228: GO 21238
// s2 := 1 ;
21230: LD_ADDR_VAR 0 3
21234: PUSH
21235: LD_INT 1
21237: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21238: LD_ADDR_VAR 0 5
21242: PUSH
21243: LD_VAR 0 6
21247: PUSH
21248: LD_INT 1
21250: ARRAY
21251: PPUSH
21252: LD_VAR 0 3
21256: PPUSH
21257: CALL_OW 259
21261: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21262: LD_VAR 0 6
21266: PUSH
21267: LD_INT 1
21269: ARRAY
21270: PPUSH
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_VAR 0 5
21280: PPUSH
21281: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21285: LD_VAR 0 6
21289: PUSH
21290: LD_INT 1
21292: ARRAY
21293: PPUSH
21294: LD_VAR 0 3
21298: PPUSH
21299: LD_VAR 0 4
21303: PPUSH
21304: CALL_OW 237
// end ;
21308: PPOPN 6
21310: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21311: LD_EXP 45
21315: PUSH
21316: LD_EXP 92
21320: AND
21321: IFFALSE 21400
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21329: LD_ADDR_VAR 0 1
21333: PUSH
21334: LD_INT 22
21336: PUSH
21337: LD_OWVAR 2
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 3
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 69
21364: ST_TO_ADDR
// if not tmp then
21365: LD_VAR 0 1
21369: NOT
21370: IFFALSE 21374
// exit ;
21372: GO 21400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21374: LD_VAR 0 1
21378: PUSH
21379: LD_INT 1
21381: PPUSH
21382: LD_VAR 0 1
21386: PPUSH
21387: CALL_OW 12
21391: ARRAY
21392: PPUSH
21393: LD_INT 1
21395: PPUSH
21396: CALL_OW 234
// end ;
21400: PPOPN 1
21402: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21403: LD_EXP 45
21407: PUSH
21408: LD_EXP 93
21412: AND
21413: IFFALSE 21525
21415: GO 21417
21417: DISABLE
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_OWVAR 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 30
21444: PUSH
21445: LD_INT 27
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 30
21454: PUSH
21455: LD_INT 26
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 30
21464: PUSH
21465: LD_INT 28
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: ST_TO_ADDR
// if not tmp then
21487: LD_VAR 0 2
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21525
// for i in tmp do
21496: LD_ADDR_VAR 0 1
21500: PUSH
21501: LD_VAR 0 2
21505: PUSH
21506: FOR_IN
21507: IFFALSE 21523
// SetLives ( i , 1 ) ;
21509: LD_VAR 0 1
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: CALL_OW 234
21521: GO 21506
21523: POP
21524: POP
// end ;
21525: PPOPN 2
21527: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21528: LD_EXP 45
21532: PUSH
21533: LD_EXP 94
21537: AND
21538: IFFALSE 21812
21540: GO 21542
21542: DISABLE
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
21547: PPUSH
// begin i := rand ( 1 , 7 ) ;
21548: LD_ADDR_VAR 0 1
21552: PUSH
21553: LD_INT 1
21555: PPUSH
21556: LD_INT 7
21558: PPUSH
21559: CALL_OW 12
21563: ST_TO_ADDR
// case i of 1 :
21564: LD_VAR 0 1
21568: PUSH
21569: LD_INT 1
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21587
21577: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21578: LD_STRING earthquake(getX(game), 0, 32)
21580: PPUSH
21581: CALL_OW 559
21585: GO 21812
21587: LD_INT 2
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21609
21595: POP
// begin ToLua ( displayStucuk(); ) ;
21596: LD_STRING displayStucuk();
21598: PPUSH
21599: CALL_OW 559
// ResetFog ;
21603: CALL_OW 335
// end ; 3 :
21607: GO 21812
21609: LD_INT 3
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21721
21617: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 22
21625: PUSH
21626: LD_OWVAR 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 25
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 69
21653: ST_TO_ADDR
// if not tmp then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 21812
// un := tmp [ rand ( 1 , tmp ) ] ;
21663: LD_ADDR_VAR 0 3
21667: PUSH
21668: LD_VAR 0 2
21672: PUSH
21673: LD_INT 1
21675: PPUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: CALL_OW 12
21685: ARRAY
21686: ST_TO_ADDR
// if Crawls ( un ) then
21687: LD_VAR 0 3
21691: PPUSH
21692: CALL_OW 318
21696: IFFALSE 21707
// ComWalk ( un ) ;
21698: LD_VAR 0 3
21702: PPUSH
21703: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21707: LD_VAR 0 3
21711: PPUSH
21712: LD_INT 8
21714: PPUSH
21715: CALL_OW 336
// end ; 4 :
21719: GO 21812
21721: LD_INT 4
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21790
21729: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 22
21737: PUSH
21738: LD_OWVAR 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 30
21749: PUSH
21750: LD_INT 29
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: ST_TO_ADDR
// if not tmp then
21766: LD_VAR 0 2
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 21812
// DestroyUnit ( tmp [ 1 ] ) ;
21775: LD_VAR 0 2
21779: PUSH
21780: LD_INT 1
21782: ARRAY
21783: PPUSH
21784: CALL_OW 65
// end ; 5 .. 7 :
21788: GO 21812
21790: LD_INT 5
21792: DOUBLE
21793: GREATEREQUAL
21794: IFFALSE 21802
21796: LD_INT 7
21798: DOUBLE
21799: LESSEQUAL
21800: IFTRUE 21804
21802: GO 21811
21804: POP
// StreamSibBomb ; end ;
21805: CALL 18062 0 0
21809: GO 21812
21811: POP
// end ;
21812: PPOPN 3
21814: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21815: LD_EXP 45
21819: PUSH
21820: LD_EXP 95
21824: AND
21825: IFFALSE 21981
21827: GO 21829
21829: DISABLE
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
21834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21835: LD_ADDR_VAR 0 2
21839: PUSH
21840: LD_INT 81
21842: PUSH
21843: LD_OWVAR 2
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 21
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 21
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 69
21888: ST_TO_ADDR
// if not tmp then
21889: LD_VAR 0 2
21893: NOT
21894: IFFALSE 21898
// exit ;
21896: GO 21981
// p := 0 ;
21898: LD_ADDR_VAR 0 3
21902: PUSH
21903: LD_INT 0
21905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21906: LD_INT 35
21908: PPUSH
21909: CALL_OW 67
// p := p + 1 ;
21913: LD_ADDR_VAR 0 3
21917: PUSH
21918: LD_VAR 0 3
21922: PUSH
21923: LD_INT 1
21925: PLUS
21926: ST_TO_ADDR
// for i in tmp do
21927: LD_ADDR_VAR 0 1
21931: PUSH
21932: LD_VAR 0 2
21936: PUSH
21937: FOR_IN
21938: IFFALSE 21969
// if GetLives ( i ) < 1000 then
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 256
21949: PUSH
21950: LD_INT 1000
21952: LESS
21953: IFFALSE 21967
// SetLives ( i , 1000 ) ;
21955: LD_VAR 0 1
21959: PPUSH
21960: LD_INT 1000
21962: PPUSH
21963: CALL_OW 234
21967: GO 21937
21969: POP
21970: POP
// until p > 20 ;
21971: LD_VAR 0 3
21975: PUSH
21976: LD_INT 20
21978: GREATER
21979: IFFALSE 21906
// end ;
21981: PPOPN 3
21983: END
// every 0 0$1 trigger StreamModeActive and sTime do
21984: LD_EXP 45
21988: PUSH
21989: LD_EXP 96
21993: AND
21994: IFFALSE 22029
21996: GO 21998
21998: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21999: LD_INT 28
22001: PPUSH
22002: LD_OWVAR 2
22006: PPUSH
22007: LD_INT 2
22009: PPUSH
22010: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22014: LD_INT 30
22016: PPUSH
22017: LD_OWVAR 2
22021: PPUSH
22022: LD_INT 2
22024: PPUSH
22025: CALL_OW 322
// end ;
22029: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22030: LD_EXP 45
22034: PUSH
22035: LD_EXP 97
22039: AND
22040: IFFALSE 22161
22042: GO 22044
22044: DISABLE
22045: LD_INT 0
22047: PPUSH
22048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22049: LD_ADDR_VAR 0 2
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: ST_TO_ADDR
// if not tmp then
22103: LD_VAR 0 2
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22161
// for i in tmp do
22112: LD_ADDR_VAR 0 1
22116: PUSH
22117: LD_VAR 0 2
22121: PUSH
22122: FOR_IN
22123: IFFALSE 22159
// begin if Crawls ( i ) then
22125: LD_VAR 0 1
22129: PPUSH
22130: CALL_OW 318
22134: IFFALSE 22145
// ComWalk ( i ) ;
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 138
// SetClass ( i , 2 ) ;
22145: LD_VAR 0 1
22149: PPUSH
22150: LD_INT 2
22152: PPUSH
22153: CALL_OW 336
// end ;
22157: GO 22122
22159: POP
22160: POP
// end ;
22161: PPOPN 2
22163: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22164: LD_EXP 45
22168: PUSH
22169: LD_EXP 98
22173: AND
22174: IFFALSE 22455
22176: GO 22178
22178: DISABLE
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22184: LD_OWVAR 2
22188: PPUSH
22189: LD_INT 9
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22202: LD_INT 9
22204: PPUSH
22205: LD_OWVAR 2
22209: PPUSH
22210: CALL_OW 343
// uc_side := 9 ;
22214: LD_ADDR_OWVAR 20
22218: PUSH
22219: LD_INT 9
22221: ST_TO_ADDR
// uc_nation := 2 ;
22222: LD_ADDR_OWVAR 21
22226: PUSH
22227: LD_INT 2
22229: ST_TO_ADDR
// hc_name := Dark Warrior ;
22230: LD_ADDR_OWVAR 26
22234: PUSH
22235: LD_STRING Dark Warrior
22237: ST_TO_ADDR
// hc_gallery :=  ;
22238: LD_ADDR_OWVAR 33
22242: PUSH
22243: LD_STRING 
22245: ST_TO_ADDR
// hc_noskilllimit := true ;
22246: LD_ADDR_OWVAR 76
22250: PUSH
22251: LD_INT 1
22253: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22254: LD_ADDR_OWVAR 31
22258: PUSH
22259: LD_INT 30
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 30
22267: PUSH
22268: LD_INT 30
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: ST_TO_ADDR
// un := CreateHuman ;
22277: LD_ADDR_VAR 0 3
22281: PUSH
22282: CALL_OW 44
22286: ST_TO_ADDR
// hc_noskilllimit := false ;
22287: LD_ADDR_OWVAR 76
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22295: LD_VAR 0 3
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL_OW 51
// p := 0 ;
22307: LD_ADDR_VAR 0 2
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22315: LD_INT 35
22317: PPUSH
22318: CALL_OW 67
// p := p + 1 ;
22322: LD_ADDR_VAR 0 2
22326: PUSH
22327: LD_VAR 0 2
22331: PUSH
22332: LD_INT 1
22334: PLUS
22335: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22336: LD_VAR 0 3
22340: PPUSH
22341: CALL_OW 256
22345: PUSH
22346: LD_INT 1000
22348: LESS
22349: IFFALSE 22363
// SetLives ( un , 1000 ) ;
22351: LD_VAR 0 3
22355: PPUSH
22356: LD_INT 1000
22358: PPUSH
22359: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22363: LD_VAR 0 3
22367: PPUSH
22368: LD_INT 81
22370: PUSH
22371: LD_OWVAR 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 91
22382: PUSH
22383: LD_VAR 0 3
22387: PUSH
22388: LD_INT 30
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 74
22414: PPUSH
22415: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22419: LD_VAR 0 2
22423: PUSH
22424: LD_INT 60
22426: GREATER
22427: PUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 301
22437: OR
22438: IFFALSE 22315
// if un then
22440: LD_VAR 0 3
22444: IFFALSE 22455
// RemoveUnit ( un ) ;
22446: LD_VAR 0 3
22450: PPUSH
22451: CALL_OW 64
// end ;
22455: PPOPN 3
22457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22458: LD_INT 0
22460: PPUSH
// case cmd of 301 :
22461: LD_VAR 0 1
22465: PUSH
22466: LD_INT 301
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22506
22474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22475: LD_VAR 0 6
22479: PPUSH
22480: LD_VAR 0 7
22484: PPUSH
22485: LD_VAR 0 8
22489: PPUSH
22490: LD_VAR 0 4
22494: PPUSH
22495: LD_VAR 0 5
22499: PPUSH
22500: CALL 23707 0 5
22504: GO 22627
22506: LD_INT 302
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22551
22514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22515: LD_VAR 0 6
22519: PPUSH
22520: LD_VAR 0 7
22524: PPUSH
22525: LD_VAR 0 8
22529: PPUSH
22530: LD_VAR 0 9
22534: PPUSH
22535: LD_VAR 0 4
22539: PPUSH
22540: LD_VAR 0 5
22544: PPUSH
22545: CALL 23798 0 6
22549: GO 22627
22551: LD_INT 303
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22596
22559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22560: LD_VAR 0 6
22564: PPUSH
22565: LD_VAR 0 7
22569: PPUSH
22570: LD_VAR 0 8
22574: PPUSH
22575: LD_VAR 0 9
22579: PPUSH
22580: LD_VAR 0 4
22584: PPUSH
22585: LD_VAR 0 5
22589: PPUSH
22590: CALL 22632 0 6
22594: GO 22627
22596: LD_INT 304
22598: DOUBLE
22599: EQUAL
22600: IFTRUE 22604
22602: GO 22626
22604: POP
// hHackTeleport ( unit , x , y ) ; end ;
22605: LD_VAR 0 2
22609: PPUSH
22610: LD_VAR 0 4
22614: PPUSH
22615: LD_VAR 0 5
22619: PPUSH
22620: CALL 24391 0 3
22624: GO 22627
22626: POP
// end ;
22627: LD_VAR 0 12
22631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22632: LD_INT 0
22634: PPUSH
22635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22636: LD_VAR 0 1
22640: PUSH
22641: LD_INT 1
22643: LESS
22644: PUSH
22645: LD_VAR 0 1
22649: PUSH
22650: LD_INT 3
22652: GREATER
22653: OR
22654: PUSH
22655: LD_VAR 0 5
22659: PPUSH
22660: LD_VAR 0 6
22664: PPUSH
22665: CALL_OW 428
22669: OR
22670: IFFALSE 22674
// exit ;
22672: GO 23394
// uc_side := your_side ;
22674: LD_ADDR_OWVAR 20
22678: PUSH
22679: LD_OWVAR 2
22683: ST_TO_ADDR
// uc_nation := nation ;
22684: LD_ADDR_OWVAR 21
22688: PUSH
22689: LD_VAR 0 1
22693: ST_TO_ADDR
// bc_level = 1 ;
22694: LD_ADDR_OWVAR 43
22698: PUSH
22699: LD_INT 1
22701: ST_TO_ADDR
// case btype of 1 :
22702: LD_VAR 0 2
22706: PUSH
22707: LD_INT 1
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22726
22715: POP
// bc_type := b_depot ; 2 :
22716: LD_ADDR_OWVAR 42
22720: PUSH
22721: LD_INT 0
22723: ST_TO_ADDR
22724: GO 23338
22726: LD_INT 2
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// bc_type := b_warehouse ; 3 :
22735: LD_ADDR_OWVAR 42
22739: PUSH
22740: LD_INT 1
22742: ST_TO_ADDR
22743: GO 23338
22745: LD_INT 3
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// bc_type := b_lab ; 4 .. 9 :
22754: LD_ADDR_OWVAR 42
22758: PUSH
22759: LD_INT 6
22761: ST_TO_ADDR
22762: GO 23338
22764: LD_INT 4
22766: DOUBLE
22767: GREATEREQUAL
22768: IFFALSE 22776
22770: LD_INT 9
22772: DOUBLE
22773: LESSEQUAL
22774: IFTRUE 22778
22776: GO 22830
22778: POP
// begin bc_type := b_lab_half ;
22779: LD_ADDR_OWVAR 42
22783: PUSH
22784: LD_INT 7
22786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22787: LD_ADDR_OWVAR 44
22791: PUSH
22792: LD_INT 10
22794: PUSH
22795: LD_INT 11
22797: PUSH
22798: LD_INT 12
22800: PUSH
22801: LD_INT 15
22803: PUSH
22804: LD_INT 14
22806: PUSH
22807: LD_INT 13
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: PUSH
22818: LD_VAR 0 2
22822: PUSH
22823: LD_INT 3
22825: MINUS
22826: ARRAY
22827: ST_TO_ADDR
// end ; 10 .. 13 :
22828: GO 23338
22830: LD_INT 10
22832: DOUBLE
22833: GREATEREQUAL
22834: IFFALSE 22842
22836: LD_INT 13
22838: DOUBLE
22839: LESSEQUAL
22840: IFTRUE 22844
22842: GO 22921
22844: POP
// begin bc_type := b_lab_full ;
22845: LD_ADDR_OWVAR 42
22849: PUSH
22850: LD_INT 8
22852: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22853: LD_ADDR_OWVAR 44
22857: PUSH
22858: LD_INT 10
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 14
22866: PUSH
22867: LD_INT 13
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: LD_VAR 0 2
22880: PUSH
22881: LD_INT 9
22883: MINUS
22884: ARRAY
22885: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22886: LD_ADDR_OWVAR 45
22890: PUSH
22891: LD_INT 11
22893: PUSH
22894: LD_INT 15
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 15
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: PUSH
22909: LD_VAR 0 2
22913: PUSH
22914: LD_INT 9
22916: MINUS
22917: ARRAY
22918: ST_TO_ADDR
// end ; 14 :
22919: GO 23338
22921: LD_INT 14
22923: DOUBLE
22924: EQUAL
22925: IFTRUE 22929
22927: GO 22940
22929: POP
// bc_type := b_workshop ; 15 :
22930: LD_ADDR_OWVAR 42
22934: PUSH
22935: LD_INT 2
22937: ST_TO_ADDR
22938: GO 23338
22940: LD_INT 15
22942: DOUBLE
22943: EQUAL
22944: IFTRUE 22948
22946: GO 22959
22948: POP
// bc_type := b_factory ; 16 :
22949: LD_ADDR_OWVAR 42
22953: PUSH
22954: LD_INT 3
22956: ST_TO_ADDR
22957: GO 23338
22959: LD_INT 16
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 22978
22967: POP
// bc_type := b_ext_gun ; 17 :
22968: LD_ADDR_OWVAR 42
22972: PUSH
22973: LD_INT 17
22975: ST_TO_ADDR
22976: GO 23338
22978: LD_INT 17
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22986
22984: GO 23014
22986: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22987: LD_ADDR_OWVAR 42
22991: PUSH
22992: LD_INT 19
22994: PUSH
22995: LD_INT 23
22997: PUSH
22998: LD_INT 19
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: LD_VAR 0 1
23010: ARRAY
23011: ST_TO_ADDR
23012: GO 23338
23014: LD_INT 18
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23033
23022: POP
// bc_type := b_ext_radar ; 19 :
23023: LD_ADDR_OWVAR 42
23027: PUSH
23028: LD_INT 20
23030: ST_TO_ADDR
23031: GO 23338
23033: LD_INT 19
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23052
23041: POP
// bc_type := b_ext_radio ; 20 :
23042: LD_ADDR_OWVAR 42
23046: PUSH
23047: LD_INT 22
23049: ST_TO_ADDR
23050: GO 23338
23052: LD_INT 20
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23071
23060: POP
// bc_type := b_ext_siberium ; 21 :
23061: LD_ADDR_OWVAR 42
23065: PUSH
23066: LD_INT 21
23068: ST_TO_ADDR
23069: GO 23338
23071: LD_INT 21
23073: DOUBLE
23074: EQUAL
23075: IFTRUE 23079
23077: GO 23090
23079: POP
// bc_type := b_ext_computer ; 22 :
23080: LD_ADDR_OWVAR 42
23084: PUSH
23085: LD_INT 24
23087: ST_TO_ADDR
23088: GO 23338
23090: LD_INT 22
23092: DOUBLE
23093: EQUAL
23094: IFTRUE 23098
23096: GO 23109
23098: POP
// bc_type := b_ext_track ; 23 :
23099: LD_ADDR_OWVAR 42
23103: PUSH
23104: LD_INT 16
23106: ST_TO_ADDR
23107: GO 23338
23109: LD_INT 23
23111: DOUBLE
23112: EQUAL
23113: IFTRUE 23117
23115: GO 23128
23117: POP
// bc_type := b_ext_laser ; 24 :
23118: LD_ADDR_OWVAR 42
23122: PUSH
23123: LD_INT 25
23125: ST_TO_ADDR
23126: GO 23338
23128: LD_INT 24
23130: DOUBLE
23131: EQUAL
23132: IFTRUE 23136
23134: GO 23147
23136: POP
// bc_type := b_control_tower ; 25 :
23137: LD_ADDR_OWVAR 42
23141: PUSH
23142: LD_INT 36
23144: ST_TO_ADDR
23145: GO 23338
23147: LD_INT 25
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23166
23155: POP
// bc_type := b_breastwork ; 26 :
23156: LD_ADDR_OWVAR 42
23160: PUSH
23161: LD_INT 31
23163: ST_TO_ADDR
23164: GO 23338
23166: LD_INT 26
23168: DOUBLE
23169: EQUAL
23170: IFTRUE 23174
23172: GO 23185
23174: POP
// bc_type := b_bunker ; 27 :
23175: LD_ADDR_OWVAR 42
23179: PUSH
23180: LD_INT 32
23182: ST_TO_ADDR
23183: GO 23338
23185: LD_INT 27
23187: DOUBLE
23188: EQUAL
23189: IFTRUE 23193
23191: GO 23204
23193: POP
// bc_type := b_turret ; 28 :
23194: LD_ADDR_OWVAR 42
23198: PUSH
23199: LD_INT 33
23201: ST_TO_ADDR
23202: GO 23338
23204: LD_INT 28
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23223
23212: POP
// bc_type := b_armoury ; 29 :
23213: LD_ADDR_OWVAR 42
23217: PUSH
23218: LD_INT 4
23220: ST_TO_ADDR
23221: GO 23338
23223: LD_INT 29
23225: DOUBLE
23226: EQUAL
23227: IFTRUE 23231
23229: GO 23242
23231: POP
// bc_type := b_barracks ; 30 :
23232: LD_ADDR_OWVAR 42
23236: PUSH
23237: LD_INT 5
23239: ST_TO_ADDR
23240: GO 23338
23242: LD_INT 30
23244: DOUBLE
23245: EQUAL
23246: IFTRUE 23250
23248: GO 23261
23250: POP
// bc_type := b_solar_power ; 31 :
23251: LD_ADDR_OWVAR 42
23255: PUSH
23256: LD_INT 27
23258: ST_TO_ADDR
23259: GO 23338
23261: LD_INT 31
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23280
23269: POP
// bc_type := b_oil_power ; 32 :
23270: LD_ADDR_OWVAR 42
23274: PUSH
23275: LD_INT 26
23277: ST_TO_ADDR
23278: GO 23338
23280: LD_INT 32
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23299
23288: POP
// bc_type := b_siberite_power ; 33 :
23289: LD_ADDR_OWVAR 42
23293: PUSH
23294: LD_INT 28
23296: ST_TO_ADDR
23297: GO 23338
23299: LD_INT 33
23301: DOUBLE
23302: EQUAL
23303: IFTRUE 23307
23305: GO 23318
23307: POP
// bc_type := b_oil_mine ; 34 :
23308: LD_ADDR_OWVAR 42
23312: PUSH
23313: LD_INT 29
23315: ST_TO_ADDR
23316: GO 23338
23318: LD_INT 34
23320: DOUBLE
23321: EQUAL
23322: IFTRUE 23326
23324: GO 23337
23326: POP
// bc_type := b_siberite_mine ; end ;
23327: LD_ADDR_OWVAR 42
23331: PUSH
23332: LD_INT 30
23334: ST_TO_ADDR
23335: GO 23338
23337: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23338: LD_ADDR_VAR 0 8
23342: PUSH
23343: LD_VAR 0 5
23347: PPUSH
23348: LD_VAR 0 6
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: CALL_OW 47
23362: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23363: LD_OWVAR 42
23367: PUSH
23368: LD_INT 32
23370: PUSH
23371: LD_INT 33
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: IN
23378: IFFALSE 23394
// PlaceWeaponTurret ( b , weapon ) ;
23380: LD_VAR 0 8
23384: PPUSH
23385: LD_VAR 0 4
23389: PPUSH
23390: CALL_OW 431
// end ;
23394: LD_VAR 0 7
23398: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23399: LD_INT 0
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23405: LD_ADDR_VAR 0 4
23409: PUSH
23410: LD_INT 22
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: LD_INT 30
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 69
23458: ST_TO_ADDR
// if not tmp then
23459: LD_VAR 0 4
23463: NOT
23464: IFFALSE 23468
// exit ;
23466: GO 23527
// for i in tmp do
23468: LD_ADDR_VAR 0 2
23472: PUSH
23473: LD_VAR 0 4
23477: PUSH
23478: FOR_IN
23479: IFFALSE 23525
// for j = 1 to 3 do
23481: LD_ADDR_VAR 0 3
23485: PUSH
23486: DOUBLE
23487: LD_INT 1
23489: DEC
23490: ST_TO_ADDR
23491: LD_INT 3
23493: PUSH
23494: FOR_TO
23495: IFFALSE 23521
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23497: LD_VAR 0 2
23501: PPUSH
23502: CALL_OW 274
23506: PPUSH
23507: LD_VAR 0 3
23511: PPUSH
23512: LD_INT 99999
23514: PPUSH
23515: CALL_OW 277
23519: GO 23494
23521: POP
23522: POP
23523: GO 23478
23525: POP
23526: POP
// end ;
23527: LD_VAR 0 1
23531: RET
// export function hHackSetLevel10 ; var i , j ; begin
23532: LD_INT 0
23534: PPUSH
23535: PPUSH
23536: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_INT 21
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PPUSH
23552: CALL_OW 69
23556: PUSH
23557: FOR_IN
23558: IFFALSE 23610
// if IsSelected ( i ) then
23560: LD_VAR 0 2
23564: PPUSH
23565: CALL_OW 306
23569: IFFALSE 23608
// begin for j := 1 to 4 do
23571: LD_ADDR_VAR 0 3
23575: PUSH
23576: DOUBLE
23577: LD_INT 1
23579: DEC
23580: ST_TO_ADDR
23581: LD_INT 4
23583: PUSH
23584: FOR_TO
23585: IFFALSE 23606
// SetSkill ( i , j , 10 ) ;
23587: LD_VAR 0 2
23591: PPUSH
23592: LD_VAR 0 3
23596: PPUSH
23597: LD_INT 10
23599: PPUSH
23600: CALL_OW 237
23604: GO 23584
23606: POP
23607: POP
// end ;
23608: GO 23557
23610: POP
23611: POP
// end ;
23612: LD_VAR 0 1
23616: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23617: LD_INT 0
23619: PPUSH
23620: PPUSH
23621: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 21
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: PUSH
23658: FOR_IN
23659: IFFALSE 23700
// begin for j := 1 to 4 do
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: DOUBLE
23667: LD_INT 1
23669: DEC
23670: ST_TO_ADDR
23671: LD_INT 4
23673: PUSH
23674: FOR_TO
23675: IFFALSE 23696
// SetSkill ( i , j , 10 ) ;
23677: LD_VAR 0 2
23681: PPUSH
23682: LD_VAR 0 3
23686: PPUSH
23687: LD_INT 10
23689: PPUSH
23690: CALL_OW 237
23694: GO 23674
23696: POP
23697: POP
// end ;
23698: GO 23658
23700: POP
23701: POP
// end ;
23702: LD_VAR 0 1
23706: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23707: LD_INT 0
23709: PPUSH
// uc_side := your_side ;
23710: LD_ADDR_OWVAR 20
23714: PUSH
23715: LD_OWVAR 2
23719: ST_TO_ADDR
// uc_nation := nation ;
23720: LD_ADDR_OWVAR 21
23724: PUSH
23725: LD_VAR 0 1
23729: ST_TO_ADDR
// InitHc ;
23730: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23734: LD_INT 0
23736: PPUSH
23737: LD_VAR 0 2
23741: PPUSH
23742: LD_VAR 0 3
23746: PPUSH
23747: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23751: LD_VAR 0 4
23755: PPUSH
23756: LD_VAR 0 5
23760: PPUSH
23761: CALL_OW 428
23765: PUSH
23766: LD_INT 0
23768: EQUAL
23769: IFFALSE 23793
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23771: CALL_OW 44
23775: PPUSH
23776: LD_VAR 0 4
23780: PPUSH
23781: LD_VAR 0 5
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: CALL_OW 48
// end ;
23793: LD_VAR 0 6
23797: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
// uc_side := your_side ;
23802: LD_ADDR_OWVAR 20
23806: PUSH
23807: LD_OWVAR 2
23811: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23812: LD_VAR 0 1
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 3
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: LD_INT 5
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: IN
23839: IFFALSE 23851
// uc_nation := nation_american else
23841: LD_ADDR_OWVAR 21
23845: PUSH
23846: LD_INT 1
23848: ST_TO_ADDR
23849: GO 23894
// if chassis in [ 11 , 12 , 13 , 14 ] then
23851: LD_VAR 0 1
23855: PUSH
23856: LD_INT 11
23858: PUSH
23859: LD_INT 12
23861: PUSH
23862: LD_INT 13
23864: PUSH
23865: LD_INT 14
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: IN
23874: IFFALSE 23886
// uc_nation := nation_arabian else
23876: LD_ADDR_OWVAR 21
23880: PUSH
23881: LD_INT 2
23883: ST_TO_ADDR
23884: GO 23894
// uc_nation := nation_russian ;
23886: LD_ADDR_OWVAR 21
23890: PUSH
23891: LD_INT 3
23893: ST_TO_ADDR
// vc_chassis := chassis ;
23894: LD_ADDR_OWVAR 37
23898: PUSH
23899: LD_VAR 0 1
23903: ST_TO_ADDR
// vc_engine := engine ;
23904: LD_ADDR_OWVAR 39
23908: PUSH
23909: LD_VAR 0 2
23913: ST_TO_ADDR
// vc_control := control ;
23914: LD_ADDR_OWVAR 38
23918: PUSH
23919: LD_VAR 0 3
23923: ST_TO_ADDR
// vc_weapon := weapon ;
23924: LD_ADDR_OWVAR 40
23928: PUSH
23929: LD_VAR 0 4
23933: ST_TO_ADDR
// un := CreateVehicle ;
23934: LD_ADDR_VAR 0 8
23938: PUSH
23939: CALL_OW 45
23943: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23944: LD_VAR 0 8
23948: PPUSH
23949: LD_INT 0
23951: PPUSH
23952: LD_INT 5
23954: PPUSH
23955: CALL_OW 12
23959: PPUSH
23960: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23964: LD_VAR 0 8
23968: PPUSH
23969: LD_VAR 0 5
23973: PPUSH
23974: LD_VAR 0 6
23978: PPUSH
23979: LD_INT 1
23981: PPUSH
23982: CALL_OW 48
// end ;
23986: LD_VAR 0 7
23990: RET
// export hInvincible ; every 1 do
23991: GO 23993
23993: DISABLE
// hInvincible := [ ] ;
23994: LD_ADDR_EXP 99
23998: PUSH
23999: EMPTY
24000: ST_TO_ADDR
24001: END
// every 10 do var i ;
24002: GO 24004
24004: DISABLE
24005: LD_INT 0
24007: PPUSH
// begin enable ;
24008: ENABLE
// if not hInvincible then
24009: LD_EXP 99
24013: NOT
24014: IFFALSE 24018
// exit ;
24016: GO 24062
// for i in hInvincible do
24018: LD_ADDR_VAR 0 1
24022: PUSH
24023: LD_EXP 99
24027: PUSH
24028: FOR_IN
24029: IFFALSE 24060
// if GetLives ( i ) < 1000 then
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 256
24040: PUSH
24041: LD_INT 1000
24043: LESS
24044: IFFALSE 24058
// SetLives ( i , 1000 ) ;
24046: LD_VAR 0 1
24050: PPUSH
24051: LD_INT 1000
24053: PPUSH
24054: CALL_OW 234
24058: GO 24028
24060: POP
24061: POP
// end ;
24062: PPOPN 1
24064: END
// export function hHackInvincible ; var i ; begin
24065: LD_INT 0
24067: PPUSH
24068: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 21
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 21
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: PPUSH
24102: CALL_OW 69
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24169
// if IsSelected ( i ) then
24110: LD_VAR 0 2
24114: PPUSH
24115: CALL_OW 306
24119: IFFALSE 24167
// begin if i in hInvincible then
24121: LD_VAR 0 2
24125: PUSH
24126: LD_EXP 99
24130: IN
24131: IFFALSE 24151
// hInvincible := hInvincible diff i else
24133: LD_ADDR_EXP 99
24137: PUSH
24138: LD_EXP 99
24142: PUSH
24143: LD_VAR 0 2
24147: DIFF
24148: ST_TO_ADDR
24149: GO 24167
// hInvincible := hInvincible union i ;
24151: LD_ADDR_EXP 99
24155: PUSH
24156: LD_EXP 99
24160: PUSH
24161: LD_VAR 0 2
24165: UNION
24166: ST_TO_ADDR
// end ;
24167: GO 24107
24169: POP
24170: POP
// end ;
24171: LD_VAR 0 1
24175: RET
// export function hHackInvisible ; var i , j ; begin
24176: LD_INT 0
24178: PPUSH
24179: PPUSH
24180: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24181: LD_ADDR_VAR 0 2
24185: PUSH
24186: LD_INT 21
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 69
24200: PUSH
24201: FOR_IN
24202: IFFALSE 24226
// if IsSelected ( i ) then
24204: LD_VAR 0 2
24208: PPUSH
24209: CALL_OW 306
24213: IFFALSE 24224
// ComForceInvisible ( i ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: CALL_OW 496
24224: GO 24201
24226: POP
24227: POP
// end ;
24228: LD_VAR 0 1
24232: RET
// export function hHackChangeYourSide ; begin
24233: LD_INT 0
24235: PPUSH
// if your_side = 8 then
24236: LD_OWVAR 2
24240: PUSH
24241: LD_INT 8
24243: EQUAL
24244: IFFALSE 24256
// your_side := 0 else
24246: LD_ADDR_OWVAR 2
24250: PUSH
24251: LD_INT 0
24253: ST_TO_ADDR
24254: GO 24270
// your_side := your_side + 1 ;
24256: LD_ADDR_OWVAR 2
24260: PUSH
24261: LD_OWVAR 2
24265: PUSH
24266: LD_INT 1
24268: PLUS
24269: ST_TO_ADDR
// end ;
24270: LD_VAR 0 1
24274: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24275: LD_INT 0
24277: PPUSH
24278: PPUSH
24279: PPUSH
// for i in all_units do
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_OWVAR 3
24289: PUSH
24290: FOR_IN
24291: IFFALSE 24369
// if IsSelected ( i ) then
24293: LD_VAR 0 2
24297: PPUSH
24298: CALL_OW 306
24302: IFFALSE 24367
// begin j := GetSide ( i ) ;
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_VAR 0 2
24313: PPUSH
24314: CALL_OW 255
24318: ST_TO_ADDR
// if j = 8 then
24319: LD_VAR 0 3
24323: PUSH
24324: LD_INT 8
24326: EQUAL
24327: IFFALSE 24339
// j := 0 else
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_INT 0
24336: ST_TO_ADDR
24337: GO 24353
// j := j + 1 ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_VAR 0 3
24348: PUSH
24349: LD_INT 1
24351: PLUS
24352: ST_TO_ADDR
// SetSide ( i , j ) ;
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_VAR 0 3
24362: PPUSH
24363: CALL_OW 235
// end ;
24367: GO 24290
24369: POP
24370: POP
// end ;
24371: LD_VAR 0 1
24375: RET
// export function hHackFog ; begin
24376: LD_INT 0
24378: PPUSH
// FogOff ( true ) ;
24379: LD_INT 1
24381: PPUSH
24382: CALL_OW 344
// end ;
24386: LD_VAR 0 1
24390: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24391: LD_INT 0
24393: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24394: LD_VAR 0 1
24398: PPUSH
24399: LD_VAR 0 2
24403: PPUSH
24404: LD_VAR 0 3
24408: PPUSH
24409: LD_INT 1
24411: PPUSH
24412: LD_INT 1
24414: PPUSH
24415: CALL_OW 483
// CenterOnXY ( x , y ) ;
24419: LD_VAR 0 2
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL_OW 84
// end ; end_of_file
24433: LD_VAR 0 4
24437: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24438: LD_INT 0
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 264
24453: PUSH
24454: LD_EXP 30
24458: EQUAL
24459: IFFALSE 24531
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24461: LD_INT 68
24463: PPUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 255
24473: PPUSH
24474: CALL_OW 321
24478: PUSH
24479: LD_INT 2
24481: EQUAL
24482: IFFALSE 24494
// eff := 70 else
24484: LD_ADDR_VAR 0 4
24488: PUSH
24489: LD_INT 70
24491: ST_TO_ADDR
24492: GO 24502
// eff := 30 ;
24494: LD_ADDR_VAR 0 4
24498: PUSH
24499: LD_INT 30
24501: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 250
24511: PPUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 251
24521: PPUSH
24522: LD_VAR 0 4
24526: PPUSH
24527: CALL_OW 495
// end ; end ;
24531: LD_VAR 0 2
24535: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24536: LD_INT 0
24538: PPUSH
// end ;
24539: LD_VAR 0 4
24543: RET
// export function SOS_Command ( cmd ) ; begin
24544: LD_INT 0
24546: PPUSH
// end ;
24547: LD_VAR 0 2
24551: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24552: LD_INT 0
24554: PPUSH
// if cmd = 121 then
24555: LD_VAR 0 1
24559: PUSH
24560: LD_INT 121
24562: EQUAL
24563: IFFALSE 24565
// end ;
24565: LD_VAR 0 6
24569: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24570: LD_INT 0
24572: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24573: LD_VAR 0 1
24577: PUSH
24578: LD_INT 250
24580: EQUAL
24581: PUSH
24582: LD_VAR 0 2
24586: PPUSH
24587: CALL_OW 264
24591: PUSH
24592: LD_EXP 33
24596: EQUAL
24597: AND
24598: IFFALSE 24619
// MinerPlaceMine ( unit , x , y ) ;
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_VAR 0 4
24609: PPUSH
24610: LD_VAR 0 5
24614: PPUSH
24615: CALL 26968 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24619: LD_VAR 0 1
24623: PUSH
24624: LD_INT 251
24626: EQUAL
24627: PUSH
24628: LD_VAR 0 2
24632: PPUSH
24633: CALL_OW 264
24637: PUSH
24638: LD_EXP 33
24642: EQUAL
24643: AND
24644: IFFALSE 24665
// MinerDetonateMine ( unit , x , y ) ;
24646: LD_VAR 0 2
24650: PPUSH
24651: LD_VAR 0 4
24655: PPUSH
24656: LD_VAR 0 5
24660: PPUSH
24661: CALL 27245 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24665: LD_VAR 0 1
24669: PUSH
24670: LD_INT 252
24672: EQUAL
24673: PUSH
24674: LD_VAR 0 2
24678: PPUSH
24679: CALL_OW 264
24683: PUSH
24684: LD_EXP 33
24688: EQUAL
24689: AND
24690: IFFALSE 24711
// MinerCreateMinefield ( unit , x , y ) ;
24692: LD_VAR 0 2
24696: PPUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: LD_VAR 0 5
24706: PPUSH
24707: CALL 27662 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24711: LD_VAR 0 1
24715: PUSH
24716: LD_INT 253
24718: EQUAL
24719: PUSH
24720: LD_VAR 0 2
24724: PPUSH
24725: CALL_OW 257
24729: PUSH
24730: LD_INT 5
24732: EQUAL
24733: AND
24734: IFFALSE 24755
// ComBinocular ( unit , x , y ) ;
24736: LD_VAR 0 2
24740: PPUSH
24741: LD_VAR 0 4
24745: PPUSH
24746: LD_VAR 0 5
24750: PPUSH
24751: CALL 28033 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24755: LD_VAR 0 1
24759: PUSH
24760: LD_INT 254
24762: EQUAL
24763: PUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: CALL_OW 264
24773: PUSH
24774: LD_EXP 28
24778: EQUAL
24779: AND
24780: PUSH
24781: LD_VAR 0 3
24785: PPUSH
24786: CALL_OW 263
24790: PUSH
24791: LD_INT 3
24793: EQUAL
24794: AND
24795: IFFALSE 24811
// HackDestroyVehicle ( unit , selectedUnit ) ;
24797: LD_VAR 0 2
24801: PPUSH
24802: LD_VAR 0 3
24806: PPUSH
24807: CALL 26328 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24811: LD_VAR 0 1
24815: PUSH
24816: LD_INT 255
24818: EQUAL
24819: PUSH
24820: LD_VAR 0 2
24824: PPUSH
24825: CALL_OW 264
24829: PUSH
24830: LD_INT 14
24832: PUSH
24833: LD_INT 53
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: IN
24840: AND
24841: PUSH
24842: LD_VAR 0 4
24846: PPUSH
24847: LD_VAR 0 5
24851: PPUSH
24852: CALL_OW 488
24856: AND
24857: IFFALSE 24881
// CutTreeXYR ( unit , x , y , 12 ) ;
24859: LD_VAR 0 2
24863: PPUSH
24864: LD_VAR 0 4
24868: PPUSH
24869: LD_VAR 0 5
24873: PPUSH
24874: LD_INT 12
24876: PPUSH
24877: CALL 24894 0 4
// end ;
24881: LD_VAR 0 6
24885: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24886: LD_INT 0
24888: PPUSH
// end ;
24889: LD_VAR 0 4
24893: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24894: LD_INT 0
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24905: LD_VAR 0 1
24909: NOT
24910: PUSH
24911: LD_VAR 0 2
24915: PPUSH
24916: LD_VAR 0 3
24920: PPUSH
24921: CALL_OW 488
24925: NOT
24926: OR
24927: PUSH
24928: LD_VAR 0 4
24932: NOT
24933: OR
24934: IFFALSE 24938
// exit ;
24936: GO 25278
// list := [ ] ;
24938: LD_ADDR_VAR 0 13
24942: PUSH
24943: EMPTY
24944: ST_TO_ADDR
// if x - r < 0 then
24945: LD_VAR 0 2
24949: PUSH
24950: LD_VAR 0 4
24954: MINUS
24955: PUSH
24956: LD_INT 0
24958: LESS
24959: IFFALSE 24971
// min_x := 0 else
24961: LD_ADDR_VAR 0 7
24965: PUSH
24966: LD_INT 0
24968: ST_TO_ADDR
24969: GO 24987
// min_x := x - r ;
24971: LD_ADDR_VAR 0 7
24975: PUSH
24976: LD_VAR 0 2
24980: PUSH
24981: LD_VAR 0 4
24985: MINUS
24986: ST_TO_ADDR
// if y - r < 0 then
24987: LD_VAR 0 3
24991: PUSH
24992: LD_VAR 0 4
24996: MINUS
24997: PUSH
24998: LD_INT 0
25000: LESS
25001: IFFALSE 25013
// min_y := 0 else
25003: LD_ADDR_VAR 0 8
25007: PUSH
25008: LD_INT 0
25010: ST_TO_ADDR
25011: GO 25029
// min_y := y - r ;
25013: LD_ADDR_VAR 0 8
25017: PUSH
25018: LD_VAR 0 3
25022: PUSH
25023: LD_VAR 0 4
25027: MINUS
25028: ST_TO_ADDR
// max_x := x + r ;
25029: LD_ADDR_VAR 0 9
25033: PUSH
25034: LD_VAR 0 2
25038: PUSH
25039: LD_VAR 0 4
25043: PLUS
25044: ST_TO_ADDR
// max_y := y + r ;
25045: LD_ADDR_VAR 0 10
25049: PUSH
25050: LD_VAR 0 3
25054: PUSH
25055: LD_VAR 0 4
25059: PLUS
25060: ST_TO_ADDR
// for _x = min_x to max_x do
25061: LD_ADDR_VAR 0 11
25065: PUSH
25066: DOUBLE
25067: LD_VAR 0 7
25071: DEC
25072: ST_TO_ADDR
25073: LD_VAR 0 9
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25196
// for _y = min_y to max_y do
25081: LD_ADDR_VAR 0 12
25085: PUSH
25086: DOUBLE
25087: LD_VAR 0 8
25091: DEC
25092: ST_TO_ADDR
25093: LD_VAR 0 10
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25192
// begin if not ValidHex ( _x , _y ) then
25101: LD_VAR 0 11
25105: PPUSH
25106: LD_VAR 0 12
25110: PPUSH
25111: CALL_OW 488
25115: NOT
25116: IFFALSE 25120
// continue ;
25118: GO 25098
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25120: LD_VAR 0 11
25124: PPUSH
25125: LD_VAR 0 12
25129: PPUSH
25130: CALL_OW 351
25134: PUSH
25135: LD_VAR 0 11
25139: PPUSH
25140: LD_VAR 0 12
25144: PPUSH
25145: CALL_OW 554
25149: AND
25150: IFFALSE 25190
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25152: LD_ADDR_VAR 0 13
25156: PUSH
25157: LD_VAR 0 13
25161: PPUSH
25162: LD_VAR 0 13
25166: PUSH
25167: LD_INT 1
25169: PLUS
25170: PPUSH
25171: LD_VAR 0 11
25175: PUSH
25176: LD_VAR 0 12
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 2
25189: ST_TO_ADDR
// end ;
25190: GO 25098
25192: POP
25193: POP
25194: GO 25078
25196: POP
25197: POP
// if not list then
25198: LD_VAR 0 13
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 25278
// for i in list do
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 13
25216: PUSH
25217: FOR_IN
25218: IFFALSE 25276
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25220: LD_VAR 0 1
25224: PPUSH
25225: LD_STRING M
25227: PUSH
25228: LD_VAR 0 6
25232: PUSH
25233: LD_INT 1
25235: ARRAY
25236: PUSH
25237: LD_VAR 0 6
25241: PUSH
25242: LD_INT 2
25244: ARRAY
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: PUSH
25267: EMPTY
25268: LIST
25269: PPUSH
25270: CALL_OW 447
25274: GO 25217
25276: POP
25277: POP
// end ;
25278: LD_VAR 0 5
25282: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25283: LD_EXP 102
25287: NOT
25288: IFFALSE 25338
25290: GO 25292
25292: DISABLE
// begin initHack := true ;
25293: LD_ADDR_EXP 102
25297: PUSH
25298: LD_INT 1
25300: ST_TO_ADDR
// hackTanks := [ ] ;
25301: LD_ADDR_EXP 103
25305: PUSH
25306: EMPTY
25307: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25308: LD_ADDR_EXP 104
25312: PUSH
25313: EMPTY
25314: ST_TO_ADDR
// hackLimit := 3 ;
25315: LD_ADDR_EXP 105
25319: PUSH
25320: LD_INT 3
25322: ST_TO_ADDR
// hackDist := 12 ;
25323: LD_ADDR_EXP 106
25327: PUSH
25328: LD_INT 12
25330: ST_TO_ADDR
// hackCounter := [ ] ;
25331: LD_ADDR_EXP 107
25335: PUSH
25336: EMPTY
25337: ST_TO_ADDR
// end ;
25338: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25339: LD_EXP 102
25343: PUSH
25344: LD_INT 34
25346: PUSH
25347: LD_EXP 28
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 69
25360: AND
25361: IFFALSE 25616
25363: GO 25365
25365: DISABLE
25366: LD_INT 0
25368: PPUSH
25369: PPUSH
// begin enable ;
25370: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25371: LD_ADDR_VAR 0 1
25375: PUSH
25376: LD_INT 34
25378: PUSH
25379: LD_EXP 28
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PPUSH
25388: CALL_OW 69
25392: PUSH
25393: FOR_IN
25394: IFFALSE 25614
// begin if not i in hackTanks then
25396: LD_VAR 0 1
25400: PUSH
25401: LD_EXP 103
25405: IN
25406: NOT
25407: IFFALSE 25490
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25409: LD_ADDR_EXP 103
25413: PUSH
25414: LD_EXP 103
25418: PPUSH
25419: LD_EXP 103
25423: PUSH
25424: LD_INT 1
25426: PLUS
25427: PPUSH
25428: LD_VAR 0 1
25432: PPUSH
25433: CALL_OW 1
25437: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25438: LD_ADDR_EXP 104
25442: PUSH
25443: LD_EXP 104
25447: PPUSH
25448: LD_EXP 104
25452: PUSH
25453: LD_INT 1
25455: PLUS
25456: PPUSH
25457: EMPTY
25458: PPUSH
25459: CALL_OW 1
25463: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25464: LD_ADDR_EXP 107
25468: PUSH
25469: LD_EXP 107
25473: PPUSH
25474: LD_EXP 107
25478: PUSH
25479: LD_INT 1
25481: PLUS
25482: PPUSH
25483: EMPTY
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 302
25499: NOT
25500: IFFALSE 25513
// begin HackUnlinkAll ( i ) ;
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL 25619 0 1
// continue ;
25511: GO 25393
// end ; HackCheckCapturedStatus ( i ) ;
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL 26062 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_INT 81
25529: PUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 255
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 33
25546: PUSH
25547: LD_INT 3
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 91
25556: PUSH
25557: LD_VAR 0 1
25561: PUSH
25562: LD_EXP 106
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 50
25574: PUSH
25575: EMPTY
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 69
25588: ST_TO_ADDR
// if not tmp then
25589: LD_VAR 0 2
25593: NOT
25594: IFFALSE 25598
// continue ;
25596: GO 25393
// HackLink ( i , tmp ) ;
25598: LD_VAR 0 1
25602: PPUSH
25603: LD_VAR 0 2
25607: PPUSH
25608: CALL 25755 0 2
// end ;
25612: GO 25393
25614: POP
25615: POP
// end ;
25616: PPOPN 2
25618: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
25623: PPUSH
// if not hack in hackTanks then
25624: LD_VAR 0 1
25628: PUSH
25629: LD_EXP 103
25633: IN
25634: NOT
25635: IFFALSE 25639
// exit ;
25637: GO 25750
// index := GetElementIndex ( hackTanks , hack ) ;
25639: LD_ADDR_VAR 0 4
25643: PUSH
25644: LD_EXP 103
25648: PPUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: CALL 33224 0 2
25658: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25659: LD_EXP 104
25663: PUSH
25664: LD_VAR 0 4
25668: ARRAY
25669: IFFALSE 25750
// begin for i in hackTanksCaptured [ index ] do
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_EXP 104
25680: PUSH
25681: LD_VAR 0 4
25685: ARRAY
25686: PUSH
25687: FOR_IN
25688: IFFALSE 25714
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25690: LD_VAR 0 3
25694: PUSH
25695: LD_INT 1
25697: ARRAY
25698: PPUSH
25699: LD_VAR 0 3
25703: PUSH
25704: LD_INT 2
25706: ARRAY
25707: PPUSH
25708: CALL_OW 235
25712: GO 25687
25714: POP
25715: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25716: LD_ADDR_EXP 104
25720: PUSH
25721: LD_EXP 104
25725: PPUSH
25726: LD_VAR 0 4
25730: PPUSH
25731: EMPTY
25732: PPUSH
25733: CALL_OW 1
25737: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_INT 0
25745: PPUSH
25746: CALL_OW 505
// end ; end ;
25750: LD_VAR 0 2
25754: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
// if not hack in hackTanks or not vehicles then
25760: LD_VAR 0 1
25764: PUSH
25765: LD_EXP 103
25769: IN
25770: NOT
25771: PUSH
25772: LD_VAR 0 2
25776: NOT
25777: OR
25778: IFFALSE 25782
// exit ;
25780: GO 26057
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_INT 1
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL 33874 0 4
25807: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25808: LD_ADDR_VAR 0 5
25812: PUSH
25813: LD_EXP 103
25817: PPUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL 33224 0 2
25827: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25828: LD_EXP 104
25832: PUSH
25833: LD_VAR 0 5
25837: ARRAY
25838: PUSH
25839: LD_EXP 105
25843: LESS
25844: IFFALSE 26033
// begin for i := 1 to vehicles do
25846: LD_ADDR_VAR 0 4
25850: PUSH
25851: DOUBLE
25852: LD_INT 1
25854: DEC
25855: ST_TO_ADDR
25856: LD_VAR 0 2
25860: PUSH
25861: FOR_TO
25862: IFFALSE 26031
// begin if hackTanksCaptured [ index ] = hackLimit then
25864: LD_EXP 104
25868: PUSH
25869: LD_VAR 0 5
25873: ARRAY
25874: PUSH
25875: LD_EXP 105
25879: EQUAL
25880: IFFALSE 25884
// break ;
25882: GO 26031
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25884: LD_ADDR_EXP 107
25888: PUSH
25889: LD_EXP 107
25893: PPUSH
25894: LD_VAR 0 5
25898: PPUSH
25899: LD_EXP 107
25903: PUSH
25904: LD_VAR 0 5
25908: ARRAY
25909: PUSH
25910: LD_INT 1
25912: PLUS
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25919: LD_ADDR_EXP 104
25923: PUSH
25924: LD_EXP 104
25928: PPUSH
25929: LD_VAR 0 5
25933: PUSH
25934: LD_EXP 104
25938: PUSH
25939: LD_VAR 0 5
25943: ARRAY
25944: PUSH
25945: LD_INT 1
25947: PLUS
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PPUSH
25953: LD_VAR 0 2
25957: PUSH
25958: LD_VAR 0 4
25962: ARRAY
25963: PUSH
25964: LD_VAR 0 2
25968: PUSH
25969: LD_VAR 0 4
25973: ARRAY
25974: PPUSH
25975: CALL_OW 255
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL 33439 0 3
25988: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25989: LD_VAR 0 2
25993: PUSH
25994: LD_VAR 0 4
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 255
26009: PPUSH
26010: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26014: LD_VAR 0 2
26018: PUSH
26019: LD_VAR 0 4
26023: ARRAY
26024: PPUSH
26025: CALL_OW 141
// end ;
26029: GO 25861
26031: POP
26032: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26033: LD_VAR 0 1
26037: PPUSH
26038: LD_EXP 104
26042: PUSH
26043: LD_VAR 0 5
26047: ARRAY
26048: PUSH
26049: LD_INT 0
26051: PLUS
26052: PPUSH
26053: CALL_OW 505
// end ;
26057: LD_VAR 0 3
26061: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26062: LD_INT 0
26064: PPUSH
26065: PPUSH
26066: PPUSH
26067: PPUSH
// if not hack in hackTanks then
26068: LD_VAR 0 1
26072: PUSH
26073: LD_EXP 103
26077: IN
26078: NOT
26079: IFFALSE 26083
// exit ;
26081: GO 26323
// index := GetElementIndex ( hackTanks , hack ) ;
26083: LD_ADDR_VAR 0 4
26087: PUSH
26088: LD_EXP 103
26092: PPUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL 33224 0 2
26102: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: DOUBLE
26109: LD_EXP 104
26113: PUSH
26114: LD_VAR 0 4
26118: ARRAY
26119: INC
26120: ST_TO_ADDR
26121: LD_INT 1
26123: PUSH
26124: FOR_DOWNTO
26125: IFFALSE 26297
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26127: LD_ADDR_VAR 0 5
26131: PUSH
26132: LD_EXP 104
26136: PUSH
26137: LD_VAR 0 4
26141: ARRAY
26142: PUSH
26143: LD_VAR 0 3
26147: ARRAY
26148: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26149: LD_VAR 0 5
26153: PUSH
26154: LD_INT 1
26156: ARRAY
26157: PPUSH
26158: CALL_OW 302
26162: NOT
26163: PUSH
26164: LD_VAR 0 5
26168: PUSH
26169: LD_INT 1
26171: ARRAY
26172: PPUSH
26173: CALL_OW 255
26177: PUSH
26178: LD_VAR 0 1
26182: PPUSH
26183: CALL_OW 255
26187: NONEQUAL
26188: OR
26189: IFFALSE 26295
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26191: LD_VAR 0 5
26195: PUSH
26196: LD_INT 1
26198: ARRAY
26199: PPUSH
26200: CALL_OW 305
26204: PUSH
26205: LD_VAR 0 5
26209: PUSH
26210: LD_INT 1
26212: ARRAY
26213: PPUSH
26214: CALL_OW 255
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 255
26228: EQUAL
26229: AND
26230: IFFALSE 26254
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26232: LD_VAR 0 5
26236: PUSH
26237: LD_INT 1
26239: ARRAY
26240: PPUSH
26241: LD_VAR 0 5
26245: PUSH
26246: LD_INT 2
26248: ARRAY
26249: PPUSH
26250: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26254: LD_ADDR_EXP 104
26258: PUSH
26259: LD_EXP 104
26263: PPUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: LD_EXP 104
26273: PUSH
26274: LD_VAR 0 4
26278: ARRAY
26279: PPUSH
26280: LD_VAR 0 3
26284: PPUSH
26285: CALL_OW 3
26289: PPUSH
26290: CALL_OW 1
26294: ST_TO_ADDR
// end ; end ;
26295: GO 26124
26297: POP
26298: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26299: LD_VAR 0 1
26303: PPUSH
26304: LD_EXP 104
26308: PUSH
26309: LD_VAR 0 4
26313: ARRAY
26314: PUSH
26315: LD_INT 0
26317: PLUS
26318: PPUSH
26319: CALL_OW 505
// end ;
26323: LD_VAR 0 2
26327: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26328: LD_INT 0
26330: PPUSH
26331: PPUSH
26332: PPUSH
26333: PPUSH
// if not hack in hackTanks then
26334: LD_VAR 0 1
26338: PUSH
26339: LD_EXP 103
26343: IN
26344: NOT
26345: IFFALSE 26349
// exit ;
26347: GO 26434
// index := GetElementIndex ( hackTanks , hack ) ;
26349: LD_ADDR_VAR 0 5
26353: PUSH
26354: LD_EXP 103
26358: PPUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: CALL 33224 0 2
26368: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26369: LD_ADDR_VAR 0 4
26373: PUSH
26374: DOUBLE
26375: LD_INT 1
26377: DEC
26378: ST_TO_ADDR
26379: LD_EXP 104
26383: PUSH
26384: LD_VAR 0 5
26388: ARRAY
26389: PUSH
26390: FOR_TO
26391: IFFALSE 26432
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26393: LD_EXP 104
26397: PUSH
26398: LD_VAR 0 5
26402: ARRAY
26403: PUSH
26404: LD_VAR 0 4
26408: ARRAY
26409: PUSH
26410: LD_INT 1
26412: ARRAY
26413: PUSH
26414: LD_VAR 0 2
26418: EQUAL
26419: IFFALSE 26430
// KillUnit ( vehicle ) ;
26421: LD_VAR 0 2
26425: PPUSH
26426: CALL_OW 66
26430: GO 26390
26432: POP
26433: POP
// end ;
26434: LD_VAR 0 3
26438: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26439: LD_EXP 108
26443: NOT
26444: IFFALSE 26479
26446: GO 26448
26448: DISABLE
// begin initMiner := true ;
26449: LD_ADDR_EXP 108
26453: PUSH
26454: LD_INT 1
26456: ST_TO_ADDR
// minersList := [ ] ;
26457: LD_ADDR_EXP 109
26461: PUSH
26462: EMPTY
26463: ST_TO_ADDR
// minerMinesList := [ ] ;
26464: LD_ADDR_EXP 110
26468: PUSH
26469: EMPTY
26470: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26471: LD_ADDR_EXP 111
26475: PUSH
26476: LD_INT 5
26478: ST_TO_ADDR
// end ;
26479: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26480: LD_EXP 108
26484: PUSH
26485: LD_INT 34
26487: PUSH
26488: LD_EXP 33
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PPUSH
26497: CALL_OW 69
26501: AND
26502: IFFALSE 26965
26504: GO 26506
26506: DISABLE
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
26511: PPUSH
26512: PPUSH
// begin enable ;
26513: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26514: LD_ADDR_VAR 0 1
26518: PUSH
26519: LD_INT 34
26521: PUSH
26522: LD_EXP 33
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: PUSH
26536: FOR_IN
26537: IFFALSE 26609
// begin if not i in minersList then
26539: LD_VAR 0 1
26543: PUSH
26544: LD_EXP 109
26548: IN
26549: NOT
26550: IFFALSE 26607
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26552: LD_ADDR_EXP 109
26556: PUSH
26557: LD_EXP 109
26561: PPUSH
26562: LD_EXP 109
26566: PUSH
26567: LD_INT 1
26569: PLUS
26570: PPUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 1
26580: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26581: LD_ADDR_EXP 110
26585: PUSH
26586: LD_EXP 110
26590: PPUSH
26591: LD_EXP 110
26595: PUSH
26596: LD_INT 1
26598: PLUS
26599: PPUSH
26600: EMPTY
26601: PPUSH
26602: CALL_OW 1
26606: ST_TO_ADDR
// end end ;
26607: GO 26536
26609: POP
26610: POP
// for i := minerMinesList downto 1 do
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: DOUBLE
26617: LD_EXP 110
26621: INC
26622: ST_TO_ADDR
26623: LD_INT 1
26625: PUSH
26626: FOR_DOWNTO
26627: IFFALSE 26963
// begin if IsLive ( minersList [ i ] ) then
26629: LD_EXP 109
26633: PUSH
26634: LD_VAR 0 1
26638: ARRAY
26639: PPUSH
26640: CALL_OW 300
26644: IFFALSE 26672
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26646: LD_EXP 109
26650: PUSH
26651: LD_VAR 0 1
26655: ARRAY
26656: PPUSH
26657: LD_EXP 110
26661: PUSH
26662: LD_VAR 0 1
26666: ARRAY
26667: PPUSH
26668: CALL_OW 505
// if not minerMinesList [ i ] then
26672: LD_EXP 110
26676: PUSH
26677: LD_VAR 0 1
26681: ARRAY
26682: NOT
26683: IFFALSE 26687
// continue ;
26685: GO 26626
// for j := minerMinesList [ i ] downto 1 do
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: DOUBLE
26693: LD_EXP 110
26697: PUSH
26698: LD_VAR 0 1
26702: ARRAY
26703: INC
26704: ST_TO_ADDR
26705: LD_INT 1
26707: PUSH
26708: FOR_DOWNTO
26709: IFFALSE 26959
// begin side := GetSide ( minersList [ i ] ) ;
26711: LD_ADDR_VAR 0 3
26715: PUSH
26716: LD_EXP 109
26720: PUSH
26721: LD_VAR 0 1
26725: ARRAY
26726: PPUSH
26727: CALL_OW 255
26731: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_EXP 110
26741: PUSH
26742: LD_VAR 0 1
26746: ARRAY
26747: PUSH
26748: LD_VAR 0 2
26752: ARRAY
26753: PUSH
26754: LD_INT 1
26756: ARRAY
26757: PPUSH
26758: LD_EXP 110
26762: PUSH
26763: LD_VAR 0 1
26767: ARRAY
26768: PUSH
26769: LD_VAR 0 2
26773: ARRAY
26774: PUSH
26775: LD_INT 2
26777: ARRAY
26778: PPUSH
26779: CALL_OW 428
26783: ST_TO_ADDR
// if not tmp then
26784: LD_VAR 0 4
26788: NOT
26789: IFFALSE 26793
// continue ;
26791: GO 26708
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26793: LD_VAR 0 4
26797: PUSH
26798: LD_INT 81
26800: PUSH
26801: LD_VAR 0 3
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL_OW 69
26814: IN
26815: PUSH
26816: LD_EXP 110
26820: PUSH
26821: LD_VAR 0 1
26825: ARRAY
26826: PUSH
26827: LD_VAR 0 2
26831: ARRAY
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_EXP 110
26841: PUSH
26842: LD_VAR 0 1
26846: ARRAY
26847: PUSH
26848: LD_VAR 0 2
26852: ARRAY
26853: PUSH
26854: LD_INT 2
26856: ARRAY
26857: PPUSH
26858: CALL_OW 458
26862: AND
26863: IFFALSE 26957
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26865: LD_EXP 110
26869: PUSH
26870: LD_VAR 0 1
26874: ARRAY
26875: PUSH
26876: LD_VAR 0 2
26880: ARRAY
26881: PUSH
26882: LD_INT 1
26884: ARRAY
26885: PPUSH
26886: LD_EXP 110
26890: PUSH
26891: LD_VAR 0 1
26895: ARRAY
26896: PUSH
26897: LD_VAR 0 2
26901: ARRAY
26902: PUSH
26903: LD_INT 2
26905: ARRAY
26906: PPUSH
26907: LD_VAR 0 3
26911: PPUSH
26912: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26916: LD_ADDR_EXP 110
26920: PUSH
26921: LD_EXP 110
26925: PPUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: LD_EXP 110
26935: PUSH
26936: LD_VAR 0 1
26940: ARRAY
26941: PPUSH
26942: LD_VAR 0 2
26946: PPUSH
26947: CALL_OW 3
26951: PPUSH
26952: CALL_OW 1
26956: ST_TO_ADDR
// end ; end ;
26957: GO 26708
26959: POP
26960: POP
// end ;
26961: GO 26626
26963: POP
26964: POP
// end ;
26965: PPOPN 4
26967: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26968: LD_INT 0
26970: PPUSH
26971: PPUSH
// result := false ;
26972: LD_ADDR_VAR 0 4
26976: PUSH
26977: LD_INT 0
26979: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 264
26989: PUSH
26990: LD_EXP 33
26994: EQUAL
26995: NOT
26996: IFFALSE 27000
// exit ;
26998: GO 27240
// index := GetElementIndex ( minersList , unit ) ;
27000: LD_ADDR_VAR 0 5
27004: PUSH
27005: LD_EXP 109
27009: PPUSH
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL 33224 0 2
27019: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27020: LD_EXP 110
27024: PUSH
27025: LD_VAR 0 5
27029: ARRAY
27030: PUSH
27031: LD_EXP 111
27035: GREATEREQUAL
27036: IFFALSE 27040
// exit ;
27038: GO 27240
// ComMoveXY ( unit , x , y ) ;
27040: LD_VAR 0 1
27044: PPUSH
27045: LD_VAR 0 2
27049: PPUSH
27050: LD_VAR 0 3
27054: PPUSH
27055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27059: LD_INT 35
27061: PPUSH
27062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27066: LD_VAR 0 1
27070: PPUSH
27071: LD_VAR 0 2
27075: PPUSH
27076: LD_VAR 0 3
27080: PPUSH
27081: CALL 63997 0 3
27085: NOT
27086: PUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 314
27096: AND
27097: IFFALSE 27101
// exit ;
27099: GO 27240
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 428
27115: PUSH
27116: LD_VAR 0 1
27120: EQUAL
27121: PUSH
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 314
27131: NOT
27132: AND
27133: IFFALSE 27059
// PlaySoundXY ( x , y , PlantMine ) ;
27135: LD_VAR 0 2
27139: PPUSH
27140: LD_VAR 0 3
27144: PPUSH
27145: LD_STRING PlantMine
27147: PPUSH
27148: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27152: LD_VAR 0 2
27156: PPUSH
27157: LD_VAR 0 3
27161: PPUSH
27162: LD_VAR 0 1
27166: PPUSH
27167: CALL_OW 255
27171: PPUSH
27172: LD_INT 0
27174: PPUSH
27175: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27179: LD_ADDR_EXP 110
27183: PUSH
27184: LD_EXP 110
27188: PPUSH
27189: LD_VAR 0 5
27193: PUSH
27194: LD_EXP 110
27198: PUSH
27199: LD_VAR 0 5
27203: ARRAY
27204: PUSH
27205: LD_INT 1
27207: PLUS
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: LD_VAR 0 2
27217: PUSH
27218: LD_VAR 0 3
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PPUSH
27227: CALL 33439 0 3
27231: ST_TO_ADDR
// result := true ;
27232: LD_ADDR_VAR 0 4
27236: PUSH
27237: LD_INT 1
27239: ST_TO_ADDR
// end ;
27240: LD_VAR 0 4
27244: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
27249: PPUSH
// if not unit in minersList then
27250: LD_VAR 0 1
27254: PUSH
27255: LD_EXP 109
27259: IN
27260: NOT
27261: IFFALSE 27265
// exit ;
27263: GO 27657
// index := GetElementIndex ( minersList , unit ) ;
27265: LD_ADDR_VAR 0 6
27269: PUSH
27270: LD_EXP 109
27274: PPUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL 33224 0 2
27284: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27285: LD_ADDR_VAR 0 5
27289: PUSH
27290: DOUBLE
27291: LD_EXP 110
27295: PUSH
27296: LD_VAR 0 6
27300: ARRAY
27301: INC
27302: ST_TO_ADDR
27303: LD_INT 1
27305: PUSH
27306: FOR_DOWNTO
27307: IFFALSE 27468
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27309: LD_EXP 110
27313: PUSH
27314: LD_VAR 0 6
27318: ARRAY
27319: PUSH
27320: LD_VAR 0 5
27324: ARRAY
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: PUSH
27330: LD_VAR 0 2
27334: EQUAL
27335: PUSH
27336: LD_EXP 110
27340: PUSH
27341: LD_VAR 0 6
27345: ARRAY
27346: PUSH
27347: LD_VAR 0 5
27351: ARRAY
27352: PUSH
27353: LD_INT 2
27355: ARRAY
27356: PUSH
27357: LD_VAR 0 3
27361: EQUAL
27362: AND
27363: IFFALSE 27466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27365: LD_EXP 110
27369: PUSH
27370: LD_VAR 0 6
27374: ARRAY
27375: PUSH
27376: LD_VAR 0 5
27380: ARRAY
27381: PUSH
27382: LD_INT 1
27384: ARRAY
27385: PPUSH
27386: LD_EXP 110
27390: PUSH
27391: LD_VAR 0 6
27395: ARRAY
27396: PUSH
27397: LD_VAR 0 5
27401: ARRAY
27402: PUSH
27403: LD_INT 2
27405: ARRAY
27406: PPUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 255
27416: PPUSH
27417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27421: LD_ADDR_EXP 110
27425: PUSH
27426: LD_EXP 110
27430: PPUSH
27431: LD_VAR 0 6
27435: PPUSH
27436: LD_EXP 110
27440: PUSH
27441: LD_VAR 0 6
27445: ARRAY
27446: PPUSH
27447: LD_VAR 0 5
27451: PPUSH
27452: CALL_OW 3
27456: PPUSH
27457: CALL_OW 1
27461: ST_TO_ADDR
// exit ;
27462: POP
27463: POP
27464: GO 27657
// end ; end ;
27466: GO 27306
27468: POP
27469: POP
// for i := minerMinesList [ index ] downto 1 do
27470: LD_ADDR_VAR 0 5
27474: PUSH
27475: DOUBLE
27476: LD_EXP 110
27480: PUSH
27481: LD_VAR 0 6
27485: ARRAY
27486: INC
27487: ST_TO_ADDR
27488: LD_INT 1
27490: PUSH
27491: FOR_DOWNTO
27492: IFFALSE 27655
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27494: LD_EXP 110
27498: PUSH
27499: LD_VAR 0 6
27503: ARRAY
27504: PUSH
27505: LD_VAR 0 5
27509: ARRAY
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: PPUSH
27515: LD_EXP 110
27519: PUSH
27520: LD_VAR 0 6
27524: ARRAY
27525: PUSH
27526: LD_VAR 0 5
27530: ARRAY
27531: PUSH
27532: LD_INT 2
27534: ARRAY
27535: PPUSH
27536: LD_VAR 0 2
27540: PPUSH
27541: LD_VAR 0 3
27545: PPUSH
27546: CALL_OW 298
27550: PUSH
27551: LD_INT 6
27553: LESS
27554: IFFALSE 27653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27556: LD_EXP 110
27560: PUSH
27561: LD_VAR 0 6
27565: ARRAY
27566: PUSH
27567: LD_VAR 0 5
27571: ARRAY
27572: PUSH
27573: LD_INT 1
27575: ARRAY
27576: PPUSH
27577: LD_EXP 110
27581: PUSH
27582: LD_VAR 0 6
27586: ARRAY
27587: PUSH
27588: LD_VAR 0 5
27592: ARRAY
27593: PUSH
27594: LD_INT 2
27596: ARRAY
27597: PPUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 255
27607: PPUSH
27608: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27612: LD_ADDR_EXP 110
27616: PUSH
27617: LD_EXP 110
27621: PPUSH
27622: LD_VAR 0 6
27626: PPUSH
27627: LD_EXP 110
27631: PUSH
27632: LD_VAR 0 6
27636: ARRAY
27637: PPUSH
27638: LD_VAR 0 5
27642: PPUSH
27643: CALL_OW 3
27647: PPUSH
27648: CALL_OW 1
27652: ST_TO_ADDR
// end ; end ;
27653: GO 27491
27655: POP
27656: POP
// end ;
27657: LD_VAR 0 4
27661: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27662: LD_INT 0
27664: PPUSH
27665: PPUSH
27666: PPUSH
27667: PPUSH
27668: PPUSH
27669: PPUSH
27670: PPUSH
27671: PPUSH
27672: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27673: LD_VAR 0 1
27677: PPUSH
27678: CALL_OW 264
27682: PUSH
27683: LD_EXP 33
27687: EQUAL
27688: NOT
27689: PUSH
27690: LD_VAR 0 1
27694: PUSH
27695: LD_EXP 109
27699: IN
27700: NOT
27701: OR
27702: IFFALSE 27706
// exit ;
27704: GO 28028
// index := GetElementIndex ( minersList , unit ) ;
27706: LD_ADDR_VAR 0 6
27710: PUSH
27711: LD_EXP 109
27715: PPUSH
27716: LD_VAR 0 1
27720: PPUSH
27721: CALL 33224 0 2
27725: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27726: LD_ADDR_VAR 0 8
27730: PUSH
27731: LD_EXP 111
27735: PUSH
27736: LD_EXP 110
27740: PUSH
27741: LD_VAR 0 6
27745: ARRAY
27746: MINUS
27747: ST_TO_ADDR
// if not minesFreeAmount then
27748: LD_VAR 0 8
27752: NOT
27753: IFFALSE 27757
// exit ;
27755: GO 28028
// tmp := [ ] ;
27757: LD_ADDR_VAR 0 7
27761: PUSH
27762: EMPTY
27763: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27764: LD_ADDR_VAR 0 5
27768: PUSH
27769: DOUBLE
27770: LD_INT 1
27772: DEC
27773: ST_TO_ADDR
27774: LD_VAR 0 8
27778: PUSH
27779: FOR_TO
27780: IFFALSE 27975
// begin _d := rand ( 0 , 5 ) ;
27782: LD_ADDR_VAR 0 11
27786: PUSH
27787: LD_INT 0
27789: PPUSH
27790: LD_INT 5
27792: PPUSH
27793: CALL_OW 12
27797: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27798: LD_ADDR_VAR 0 12
27802: PUSH
27803: LD_INT 2
27805: PPUSH
27806: LD_INT 6
27808: PPUSH
27809: CALL_OW 12
27813: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27814: LD_ADDR_VAR 0 9
27818: PUSH
27819: LD_VAR 0 2
27823: PPUSH
27824: LD_VAR 0 11
27828: PPUSH
27829: LD_VAR 0 12
27833: PPUSH
27834: CALL_OW 272
27838: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27839: LD_ADDR_VAR 0 10
27843: PUSH
27844: LD_VAR 0 3
27848: PPUSH
27849: LD_VAR 0 11
27853: PPUSH
27854: LD_VAR 0 12
27858: PPUSH
27859: CALL_OW 273
27863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27864: LD_VAR 0 9
27868: PPUSH
27869: LD_VAR 0 10
27873: PPUSH
27874: CALL_OW 488
27878: PUSH
27879: LD_VAR 0 9
27883: PUSH
27884: LD_VAR 0 10
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_VAR 0 7
27897: IN
27898: NOT
27899: AND
27900: PUSH
27901: LD_VAR 0 9
27905: PPUSH
27906: LD_VAR 0 10
27910: PPUSH
27911: CALL_OW 458
27915: NOT
27916: AND
27917: IFFALSE 27959
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27919: LD_ADDR_VAR 0 7
27923: PUSH
27924: LD_VAR 0 7
27928: PPUSH
27929: LD_VAR 0 7
27933: PUSH
27934: LD_INT 1
27936: PLUS
27937: PPUSH
27938: LD_VAR 0 9
27942: PUSH
27943: LD_VAR 0 10
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PPUSH
27952: CALL_OW 1
27956: ST_TO_ADDR
27957: GO 27973
// i := i - 1 ;
27959: LD_ADDR_VAR 0 5
27963: PUSH
27964: LD_VAR 0 5
27968: PUSH
27969: LD_INT 1
27971: MINUS
27972: ST_TO_ADDR
// end ;
27973: GO 27779
27975: POP
27976: POP
// for i in tmp do
27977: LD_ADDR_VAR 0 5
27981: PUSH
27982: LD_VAR 0 7
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28026
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_VAR 0 5
27999: PUSH
28000: LD_INT 1
28002: ARRAY
28003: PPUSH
28004: LD_VAR 0 5
28008: PUSH
28009: LD_INT 2
28011: ARRAY
28012: PPUSH
28013: CALL 26968 0 3
28017: NOT
28018: IFFALSE 28024
// exit ;
28020: POP
28021: POP
28022: GO 28028
28024: GO 27987
28026: POP
28027: POP
// end ;
28028: LD_VAR 0 4
28032: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28033: LD_INT 0
28035: PPUSH
28036: PPUSH
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
// if not GetClass ( unit ) = class_sniper then
28042: LD_VAR 0 1
28046: PPUSH
28047: CALL_OW 257
28051: PUSH
28052: LD_INT 5
28054: EQUAL
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28448
// dist := 8 ;
28060: LD_ADDR_VAR 0 5
28064: PUSH
28065: LD_INT 8
28067: ST_TO_ADDR
// viewRange := 12 ;
28068: LD_ADDR_VAR 0 7
28072: PUSH
28073: LD_INT 12
28075: ST_TO_ADDR
// side := GetSide ( unit ) ;
28076: LD_ADDR_VAR 0 6
28080: PUSH
28081: LD_VAR 0 1
28085: PPUSH
28086: CALL_OW 255
28090: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28091: LD_INT 61
28093: PPUSH
28094: LD_VAR 0 6
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 2
28106: EQUAL
28107: IFFALSE 28117
// viewRange := 16 ;
28109: LD_ADDR_VAR 0 7
28113: PUSH
28114: LD_INT 16
28116: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28117: LD_VAR 0 1
28121: PPUSH
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_VAR 0 3
28131: PPUSH
28132: CALL_OW 297
28136: PUSH
28137: LD_VAR 0 5
28141: GREATER
28142: IFFALSE 28221
// begin ComMoveXY ( unit , x , y ) ;
28144: LD_VAR 0 1
28148: PPUSH
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_VAR 0 3
28158: PPUSH
28159: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28163: LD_INT 35
28165: PPUSH
28166: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28170: LD_VAR 0 1
28174: PPUSH
28175: LD_VAR 0 2
28179: PPUSH
28180: LD_VAR 0 3
28184: PPUSH
28185: CALL 63997 0 3
28189: NOT
28190: IFFALSE 28194
// exit ;
28192: GO 28448
// until GetDistUnitXY ( unit , x , y ) < dist ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_VAR 0 3
28208: PPUSH
28209: CALL_OW 297
28213: PUSH
28214: LD_VAR 0 5
28218: LESS
28219: IFFALSE 28163
// end ; ComTurnXY ( unit , x , y ) ;
28221: LD_VAR 0 1
28225: PPUSH
28226: LD_VAR 0 2
28230: PPUSH
28231: LD_VAR 0 3
28235: PPUSH
28236: CALL_OW 118
// wait ( 5 ) ;
28240: LD_INT 5
28242: PPUSH
28243: CALL_OW 67
// _d := GetDir ( unit ) ;
28247: LD_ADDR_VAR 0 10
28251: PUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 254
28261: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28262: LD_ADDR_VAR 0 8
28266: PUSH
28267: LD_VAR 0 1
28271: PPUSH
28272: CALL_OW 250
28276: PPUSH
28277: LD_VAR 0 10
28281: PPUSH
28282: LD_VAR 0 5
28286: PPUSH
28287: CALL_OW 272
28291: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28292: LD_ADDR_VAR 0 9
28296: PUSH
28297: LD_VAR 0 1
28301: PPUSH
28302: CALL_OW 251
28306: PPUSH
28307: LD_VAR 0 10
28311: PPUSH
28312: LD_VAR 0 5
28316: PPUSH
28317: CALL_OW 273
28321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28322: LD_VAR 0 8
28326: PPUSH
28327: LD_VAR 0 9
28331: PPUSH
28332: CALL_OW 488
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 28448
// ComAnimCustom ( unit , 1 ) ;
28341: LD_VAR 0 1
28345: PPUSH
28346: LD_INT 1
28348: PPUSH
28349: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28353: LD_VAR 0 8
28357: PPUSH
28358: LD_VAR 0 9
28362: PPUSH
28363: LD_VAR 0 6
28367: PPUSH
28368: LD_VAR 0 7
28372: PPUSH
28373: CALL_OW 330
// repeat wait ( 1 ) ;
28377: LD_INT 1
28379: PPUSH
28380: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28384: LD_VAR 0 1
28388: PPUSH
28389: CALL_OW 316
28393: PUSH
28394: LD_VAR 0 1
28398: PPUSH
28399: CALL_OW 314
28403: OR
28404: PUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 302
28414: NOT
28415: OR
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 301
28426: OR
28427: IFFALSE 28377
// RemoveSeeing ( _x , _y , side ) ;
28429: LD_VAR 0 8
28433: PPUSH
28434: LD_VAR 0 9
28438: PPUSH
28439: LD_VAR 0 6
28443: PPUSH
28444: CALL_OW 331
// end ; end_of_file
28448: LD_VAR 0 4
28452: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28453: LD_INT 0
28455: PPUSH
28456: PPUSH
// if exist_mode then
28457: LD_VAR 0 2
28461: IFFALSE 28486
// unit := CreateCharacter ( prefix & ident ) else
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_VAR 0 3
28472: PUSH
28473: LD_VAR 0 1
28477: STR
28478: PPUSH
28479: CALL_OW 34
28483: ST_TO_ADDR
28484: GO 28501
// unit := NewCharacter ( ident ) ;
28486: LD_ADDR_VAR 0 5
28490: PUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 25
28500: ST_TO_ADDR
// result := unit ;
28501: LD_ADDR_VAR 0 4
28505: PUSH
28506: LD_VAR 0 5
28510: ST_TO_ADDR
// end ;
28511: LD_VAR 0 4
28515: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28516: LD_INT 0
28518: PPUSH
28519: PPUSH
// if not side or not nation then
28520: LD_VAR 0 1
28524: NOT
28525: PUSH
28526: LD_VAR 0 2
28530: NOT
28531: OR
28532: IFFALSE 28536
// exit ;
28534: GO 29304
// case nation of nation_american :
28536: LD_VAR 0 2
28540: PUSH
28541: LD_INT 1
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28763
28549: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28550: LD_ADDR_VAR 0 4
28554: PUSH
28555: LD_INT 35
28557: PUSH
28558: LD_INT 45
28560: PUSH
28561: LD_INT 46
28563: PUSH
28564: LD_INT 47
28566: PUSH
28567: LD_INT 82
28569: PUSH
28570: LD_INT 83
28572: PUSH
28573: LD_INT 84
28575: PUSH
28576: LD_INT 85
28578: PUSH
28579: LD_INT 86
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 6
28590: PUSH
28591: LD_INT 15
28593: PUSH
28594: LD_INT 16
28596: PUSH
28597: LD_INT 7
28599: PUSH
28600: LD_INT 12
28602: PUSH
28603: LD_INT 13
28605: PUSH
28606: LD_INT 10
28608: PUSH
28609: LD_INT 14
28611: PUSH
28612: LD_INT 20
28614: PUSH
28615: LD_INT 21
28617: PUSH
28618: LD_INT 22
28620: PUSH
28621: LD_INT 25
28623: PUSH
28624: LD_INT 32
28626: PUSH
28627: LD_INT 27
28629: PUSH
28630: LD_INT 36
28632: PUSH
28633: LD_INT 69
28635: PUSH
28636: LD_INT 39
28638: PUSH
28639: LD_INT 34
28641: PUSH
28642: LD_INT 40
28644: PUSH
28645: LD_INT 48
28647: PUSH
28648: LD_INT 49
28650: PUSH
28651: LD_INT 50
28653: PUSH
28654: LD_INT 51
28656: PUSH
28657: LD_INT 52
28659: PUSH
28660: LD_INT 53
28662: PUSH
28663: LD_INT 54
28665: PUSH
28666: LD_INT 55
28668: PUSH
28669: LD_INT 56
28671: PUSH
28672: LD_INT 57
28674: PUSH
28675: LD_INT 58
28677: PUSH
28678: LD_INT 59
28680: PUSH
28681: LD_INT 60
28683: PUSH
28684: LD_INT 61
28686: PUSH
28687: LD_INT 62
28689: PUSH
28690: LD_INT 80
28692: PUSH
28693: LD_INT 82
28695: PUSH
28696: LD_INT 83
28698: PUSH
28699: LD_INT 84
28701: PUSH
28702: LD_INT 85
28704: PUSH
28705: LD_INT 86
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
28761: GO 29228
28763: LD_INT 2
28765: DOUBLE
28766: EQUAL
28767: IFTRUE 28771
28769: GO 28997
28771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28772: LD_ADDR_VAR 0 4
28776: PUSH
28777: LD_INT 35
28779: PUSH
28780: LD_INT 45
28782: PUSH
28783: LD_INT 46
28785: PUSH
28786: LD_INT 47
28788: PUSH
28789: LD_INT 82
28791: PUSH
28792: LD_INT 83
28794: PUSH
28795: LD_INT 84
28797: PUSH
28798: LD_INT 85
28800: PUSH
28801: LD_INT 87
28803: PUSH
28804: LD_INT 70
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 11
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 4
28818: PUSH
28819: LD_INT 5
28821: PUSH
28822: LD_INT 6
28824: PUSH
28825: LD_INT 15
28827: PUSH
28828: LD_INT 18
28830: PUSH
28831: LD_INT 7
28833: PUSH
28834: LD_INT 17
28836: PUSH
28837: LD_INT 8
28839: PUSH
28840: LD_INT 20
28842: PUSH
28843: LD_INT 21
28845: PUSH
28846: LD_INT 22
28848: PUSH
28849: LD_INT 72
28851: PUSH
28852: LD_INT 26
28854: PUSH
28855: LD_INT 69
28857: PUSH
28858: LD_INT 39
28860: PUSH
28861: LD_INT 40
28863: PUSH
28864: LD_INT 41
28866: PUSH
28867: LD_INT 42
28869: PUSH
28870: LD_INT 43
28872: PUSH
28873: LD_INT 48
28875: PUSH
28876: LD_INT 49
28878: PUSH
28879: LD_INT 50
28881: PUSH
28882: LD_INT 51
28884: PUSH
28885: LD_INT 52
28887: PUSH
28888: LD_INT 53
28890: PUSH
28891: LD_INT 54
28893: PUSH
28894: LD_INT 55
28896: PUSH
28897: LD_INT 56
28899: PUSH
28900: LD_INT 60
28902: PUSH
28903: LD_INT 61
28905: PUSH
28906: LD_INT 62
28908: PUSH
28909: LD_INT 66
28911: PUSH
28912: LD_INT 67
28914: PUSH
28915: LD_INT 68
28917: PUSH
28918: LD_INT 81
28920: PUSH
28921: LD_INT 82
28923: PUSH
28924: LD_INT 83
28926: PUSH
28927: LD_INT 84
28929: PUSH
28930: LD_INT 85
28932: PUSH
28933: LD_INT 87
28935: PUSH
28936: LD_INT 88
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
28995: GO 29228
28997: LD_INT 3
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29227
29005: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29006: LD_ADDR_VAR 0 4
29010: PUSH
29011: LD_INT 46
29013: PUSH
29014: LD_INT 47
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: LD_INT 82
29025: PUSH
29026: LD_INT 83
29028: PUSH
29029: LD_INT 84
29031: PUSH
29032: LD_INT 85
29034: PUSH
29035: LD_INT 86
29037: PUSH
29038: LD_INT 11
29040: PUSH
29041: LD_INT 9
29043: PUSH
29044: LD_INT 20
29046: PUSH
29047: LD_INT 19
29049: PUSH
29050: LD_INT 21
29052: PUSH
29053: LD_INT 24
29055: PUSH
29056: LD_INT 22
29058: PUSH
29059: LD_INT 25
29061: PUSH
29062: LD_INT 28
29064: PUSH
29065: LD_INT 29
29067: PUSH
29068: LD_INT 30
29070: PUSH
29071: LD_INT 31
29073: PUSH
29074: LD_INT 37
29076: PUSH
29077: LD_INT 38
29079: PUSH
29080: LD_INT 32
29082: PUSH
29083: LD_INT 27
29085: PUSH
29086: LD_INT 33
29088: PUSH
29089: LD_INT 69
29091: PUSH
29092: LD_INT 39
29094: PUSH
29095: LD_INT 34
29097: PUSH
29098: LD_INT 40
29100: PUSH
29101: LD_INT 71
29103: PUSH
29104: LD_INT 23
29106: PUSH
29107: LD_INT 44
29109: PUSH
29110: LD_INT 48
29112: PUSH
29113: LD_INT 49
29115: PUSH
29116: LD_INT 50
29118: PUSH
29119: LD_INT 51
29121: PUSH
29122: LD_INT 52
29124: PUSH
29125: LD_INT 53
29127: PUSH
29128: LD_INT 54
29130: PUSH
29131: LD_INT 55
29133: PUSH
29134: LD_INT 56
29136: PUSH
29137: LD_INT 57
29139: PUSH
29140: LD_INT 58
29142: PUSH
29143: LD_INT 59
29145: PUSH
29146: LD_INT 63
29148: PUSH
29149: LD_INT 64
29151: PUSH
29152: LD_INT 65
29154: PUSH
29155: LD_INT 82
29157: PUSH
29158: LD_INT 83
29160: PUSH
29161: LD_INT 84
29163: PUSH
29164: LD_INT 85
29166: PUSH
29167: LD_INT 86
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
29225: GO 29228
29227: POP
// if state > - 1 and state < 3 then
29228: LD_VAR 0 3
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: GREATER
29237: PUSH
29238: LD_VAR 0 3
29242: PUSH
29243: LD_INT 3
29245: LESS
29246: AND
29247: IFFALSE 29304
// for i in result do
29249: LD_ADDR_VAR 0 5
29253: PUSH
29254: LD_VAR 0 4
29258: PUSH
29259: FOR_IN
29260: IFFALSE 29302
// if GetTech ( i , side ) <> state then
29262: LD_VAR 0 5
29266: PPUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL_OW 321
29276: PUSH
29277: LD_VAR 0 3
29281: NONEQUAL
29282: IFFALSE 29300
// result := result diff i ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_VAR 0 4
29293: PUSH
29294: LD_VAR 0 5
29298: DIFF
29299: ST_TO_ADDR
29300: GO 29259
29302: POP
29303: POP
// end ;
29304: LD_VAR 0 4
29308: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
29313: PPUSH
// result := true ;
29314: LD_ADDR_VAR 0 3
29318: PUSH
29319: LD_INT 1
29321: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29322: LD_ADDR_VAR 0 5
29326: PUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL_OW 480
29336: ST_TO_ADDR
// if not tmp then
29337: LD_VAR 0 5
29341: NOT
29342: IFFALSE 29346
// exit ;
29344: GO 29395
// for i in tmp do
29346: LD_ADDR_VAR 0 4
29350: PUSH
29351: LD_VAR 0 5
29355: PUSH
29356: FOR_IN
29357: IFFALSE 29393
// if GetTech ( i , side ) <> state_researched then
29359: LD_VAR 0 4
29363: PPUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: CALL_OW 321
29373: PUSH
29374: LD_INT 2
29376: NONEQUAL
29377: IFFALSE 29391
// begin result := false ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_INT 0
29386: ST_TO_ADDR
// exit ;
29387: POP
29388: POP
29389: GO 29395
// end ;
29391: GO 29356
29393: POP
29394: POP
// end ;
29395: LD_VAR 0 3
29399: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29415: LD_VAR 0 1
29419: NOT
29420: PUSH
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 257
29430: PUSH
29431: LD_INT 9
29433: NONEQUAL
29434: OR
29435: IFFALSE 29439
// exit ;
29437: GO 30012
// side := GetSide ( unit ) ;
29439: LD_ADDR_VAR 0 9
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 255
29453: ST_TO_ADDR
// tech_space := tech_spacanom ;
29454: LD_ADDR_VAR 0 12
29458: PUSH
29459: LD_INT 29
29461: ST_TO_ADDR
// tech_time := tech_taurad ;
29462: LD_ADDR_VAR 0 13
29466: PUSH
29467: LD_INT 28
29469: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29470: LD_ADDR_VAR 0 11
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 310
29484: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29485: LD_VAR 0 11
29489: PPUSH
29490: CALL_OW 247
29494: PUSH
29495: LD_INT 2
29497: EQUAL
29498: IFFALSE 29502
// exit ;
29500: GO 30012
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29502: LD_ADDR_VAR 0 8
29506: PUSH
29507: LD_INT 81
29509: PUSH
29510: LD_VAR 0 9
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 3
29521: PUSH
29522: LD_INT 21
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PPUSH
29540: CALL_OW 69
29544: ST_TO_ADDR
// if not tmp then
29545: LD_VAR 0 8
29549: NOT
29550: IFFALSE 29554
// exit ;
29552: GO 30012
// if in_unit then
29554: LD_VAR 0 11
29558: IFFALSE 29582
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29560: LD_ADDR_VAR 0 10
29564: PUSH
29565: LD_VAR 0 8
29569: PPUSH
29570: LD_VAR 0 11
29574: PPUSH
29575: CALL_OW 74
29579: ST_TO_ADDR
29580: GO 29602
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29582: LD_ADDR_VAR 0 10
29586: PUSH
29587: LD_VAR 0 8
29591: PPUSH
29592: LD_VAR 0 1
29596: PPUSH
29597: CALL_OW 74
29601: ST_TO_ADDR
// if not enemy then
29602: LD_VAR 0 10
29606: NOT
29607: IFFALSE 29611
// exit ;
29609: GO 30012
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29611: LD_VAR 0 11
29615: PUSH
29616: LD_VAR 0 11
29620: PPUSH
29621: LD_VAR 0 10
29625: PPUSH
29626: CALL_OW 296
29630: PUSH
29631: LD_INT 13
29633: GREATER
29634: AND
29635: PUSH
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_VAR 0 10
29645: PPUSH
29646: CALL_OW 296
29650: PUSH
29651: LD_INT 12
29653: GREATER
29654: OR
29655: IFFALSE 29659
// exit ;
29657: GO 30012
// missile := [ 1 ] ;
29659: LD_ADDR_VAR 0 14
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29670: LD_VAR 0 9
29674: PPUSH
29675: LD_VAR 0 12
29679: PPUSH
29680: CALL_OW 325
29684: IFFALSE 29713
// missile := Insert ( missile , missile + 1 , 2 ) ;
29686: LD_ADDR_VAR 0 14
29690: PUSH
29691: LD_VAR 0 14
29695: PPUSH
29696: LD_VAR 0 14
29700: PUSH
29701: LD_INT 1
29703: PLUS
29704: PPUSH
29705: LD_INT 2
29707: PPUSH
29708: CALL_OW 2
29712: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29713: LD_VAR 0 9
29717: PPUSH
29718: LD_VAR 0 13
29722: PPUSH
29723: CALL_OW 325
29727: PUSH
29728: LD_VAR 0 10
29732: PPUSH
29733: CALL_OW 255
29737: PPUSH
29738: LD_VAR 0 13
29742: PPUSH
29743: CALL_OW 325
29747: NOT
29748: AND
29749: IFFALSE 29778
// missile := Insert ( missile , missile + 1 , 3 ) ;
29751: LD_ADDR_VAR 0 14
29755: PUSH
29756: LD_VAR 0 14
29760: PPUSH
29761: LD_VAR 0 14
29765: PUSH
29766: LD_INT 1
29768: PLUS
29769: PPUSH
29770: LD_INT 3
29772: PPUSH
29773: CALL_OW 2
29777: ST_TO_ADDR
// if missile < 2 then
29778: LD_VAR 0 14
29782: PUSH
29783: LD_INT 2
29785: LESS
29786: IFFALSE 29790
// exit ;
29788: GO 30012
// x := GetX ( enemy ) ;
29790: LD_ADDR_VAR 0 4
29794: PUSH
29795: LD_VAR 0 10
29799: PPUSH
29800: CALL_OW 250
29804: ST_TO_ADDR
// y := GetY ( enemy ) ;
29805: LD_ADDR_VAR 0 5
29809: PUSH
29810: LD_VAR 0 10
29814: PPUSH
29815: CALL_OW 251
29819: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29820: LD_ADDR_VAR 0 6
29824: PUSH
29825: LD_VAR 0 4
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PPUSH
29834: LD_INT 1
29836: PPUSH
29837: CALL_OW 12
29841: PLUS
29842: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29843: LD_ADDR_VAR 0 7
29847: PUSH
29848: LD_VAR 0 5
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PPUSH
29857: LD_INT 1
29859: PPUSH
29860: CALL_OW 12
29864: PLUS
29865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29866: LD_VAR 0 6
29870: PPUSH
29871: LD_VAR 0 7
29875: PPUSH
29876: CALL_OW 488
29880: NOT
29881: IFFALSE 29903
// begin _x := x ;
29883: LD_ADDR_VAR 0 6
29887: PUSH
29888: LD_VAR 0 4
29892: ST_TO_ADDR
// _y := y ;
29893: LD_ADDR_VAR 0 7
29897: PUSH
29898: LD_VAR 0 5
29902: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_INT 1
29910: PPUSH
29911: LD_VAR 0 14
29915: PPUSH
29916: CALL_OW 12
29920: ST_TO_ADDR
// case i of 1 :
29921: LD_VAR 0 3
29925: PUSH
29926: LD_INT 1
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29951
29934: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29935: LD_VAR 0 1
29939: PPUSH
29940: LD_VAR 0 10
29944: PPUSH
29945: CALL_OW 115
29949: GO 30012
29951: LD_INT 2
29953: DOUBLE
29954: EQUAL
29955: IFTRUE 29959
29957: GO 29981
29959: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29960: LD_VAR 0 1
29964: PPUSH
29965: LD_VAR 0 6
29969: PPUSH
29970: LD_VAR 0 7
29974: PPUSH
29975: CALL_OW 153
29979: GO 30012
29981: LD_INT 3
29983: DOUBLE
29984: EQUAL
29985: IFTRUE 29989
29987: GO 30011
29989: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29990: LD_VAR 0 1
29994: PPUSH
29995: LD_VAR 0 6
29999: PPUSH
30000: LD_VAR 0 7
30004: PPUSH
30005: CALL_OW 154
30009: GO 30012
30011: POP
// end ;
30012: LD_VAR 0 2
30016: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30017: LD_INT 0
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
// if not unit or not building then
30025: LD_VAR 0 1
30029: NOT
30030: PUSH
30031: LD_VAR 0 2
30035: NOT
30036: OR
30037: IFFALSE 30041
// exit ;
30039: GO 30199
// x := GetX ( building ) ;
30041: LD_ADDR_VAR 0 5
30045: PUSH
30046: LD_VAR 0 2
30050: PPUSH
30051: CALL_OW 250
30055: ST_TO_ADDR
// y := GetY ( building ) ;
30056: LD_ADDR_VAR 0 6
30060: PUSH
30061: LD_VAR 0 2
30065: PPUSH
30066: CALL_OW 251
30070: ST_TO_ADDR
// for i = 0 to 5 do
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: DOUBLE
30077: LD_INT 0
30079: DEC
30080: ST_TO_ADDR
30081: LD_INT 5
30083: PUSH
30084: FOR_TO
30085: IFFALSE 30197
// begin _x := ShiftX ( x , i , 3 ) ;
30087: LD_ADDR_VAR 0 7
30091: PUSH
30092: LD_VAR 0 5
30096: PPUSH
30097: LD_VAR 0 4
30101: PPUSH
30102: LD_INT 3
30104: PPUSH
30105: CALL_OW 272
30109: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30110: LD_ADDR_VAR 0 8
30114: PUSH
30115: LD_VAR 0 6
30119: PPUSH
30120: LD_VAR 0 4
30124: PPUSH
30125: LD_INT 3
30127: PPUSH
30128: CALL_OW 273
30132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30133: LD_VAR 0 7
30137: PPUSH
30138: LD_VAR 0 8
30142: PPUSH
30143: CALL_OW 488
30147: NOT
30148: IFFALSE 30152
// continue ;
30150: GO 30084
// if HexInfo ( _x , _y ) = 0 then
30152: LD_VAR 0 7
30156: PPUSH
30157: LD_VAR 0 8
30161: PPUSH
30162: CALL_OW 428
30166: PUSH
30167: LD_INT 0
30169: EQUAL
30170: IFFALSE 30195
// begin ComMoveXY ( unit , _x , _y ) ;
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_VAR 0 7
30181: PPUSH
30182: LD_VAR 0 8
30186: PPUSH
30187: CALL_OW 111
// exit ;
30191: POP
30192: POP
30193: GO 30199
// end ; end ;
30195: GO 30084
30197: POP
30198: POP
// end ;
30199: LD_VAR 0 3
30203: RET
// export function ScanBase ( side , base_area ) ; begin
30204: LD_INT 0
30206: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30207: LD_ADDR_VAR 0 3
30211: PUSH
30212: LD_VAR 0 2
30216: PPUSH
30217: LD_INT 81
30219: PUSH
30220: LD_VAR 0 1
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PPUSH
30229: CALL_OW 70
30233: ST_TO_ADDR
// end ;
30234: LD_VAR 0 3
30238: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30239: LD_INT 0
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
// result := false ;
30245: LD_ADDR_VAR 0 2
30249: PUSH
30250: LD_INT 0
30252: ST_TO_ADDR
// side := GetSide ( unit ) ;
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_VAR 0 1
30262: PPUSH
30263: CALL_OW 255
30267: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: LD_VAR 0 1
30277: PPUSH
30278: CALL_OW 248
30282: ST_TO_ADDR
// case nat of 1 :
30283: LD_VAR 0 4
30287: PUSH
30288: LD_INT 1
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30307
30296: POP
// tech := tech_lassight ; 2 :
30297: LD_ADDR_VAR 0 5
30301: PUSH
30302: LD_INT 12
30304: ST_TO_ADDR
30305: GO 30346
30307: LD_INT 2
30309: DOUBLE
30310: EQUAL
30311: IFTRUE 30315
30313: GO 30326
30315: POP
// tech := tech_mortar ; 3 :
30316: LD_ADDR_VAR 0 5
30320: PUSH
30321: LD_INT 41
30323: ST_TO_ADDR
30324: GO 30346
30326: LD_INT 3
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30345
30334: POP
// tech := tech_bazooka ; end ;
30335: LD_ADDR_VAR 0 5
30339: PUSH
30340: LD_INT 44
30342: ST_TO_ADDR
30343: GO 30346
30345: POP
// if Researched ( side , tech ) then
30346: LD_VAR 0 3
30350: PPUSH
30351: LD_VAR 0 5
30355: PPUSH
30356: CALL_OW 325
30360: IFFALSE 30387
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30362: LD_ADDR_VAR 0 2
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: LD_INT 8
30372: PUSH
30373: LD_INT 9
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: PUSH
30381: LD_VAR 0 4
30385: ARRAY
30386: ST_TO_ADDR
// end ;
30387: LD_VAR 0 2
30391: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30392: LD_INT 0
30394: PPUSH
30395: PPUSH
30396: PPUSH
// if not mines then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30550
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30406: LD_ADDR_VAR 0 5
30410: PUSH
30411: LD_INT 81
30413: PUSH
30414: LD_VAR 0 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 21
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PPUSH
30444: CALL_OW 69
30448: ST_TO_ADDR
// for i in mines do
30449: LD_ADDR_VAR 0 4
30453: PUSH
30454: LD_VAR 0 2
30458: PUSH
30459: FOR_IN
30460: IFFALSE 30548
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30462: LD_VAR 0 4
30466: PUSH
30467: LD_INT 1
30469: ARRAY
30470: PPUSH
30471: LD_VAR 0 4
30475: PUSH
30476: LD_INT 2
30478: ARRAY
30479: PPUSH
30480: CALL_OW 458
30484: NOT
30485: IFFALSE 30489
// continue ;
30487: GO 30459
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30489: LD_VAR 0 4
30493: PUSH
30494: LD_INT 1
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 4
30502: PUSH
30503: LD_INT 2
30505: ARRAY
30506: PPUSH
30507: CALL_OW 428
30511: PUSH
30512: LD_VAR 0 5
30516: IN
30517: IFFALSE 30546
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30519: LD_VAR 0 4
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: LD_VAR 0 4
30532: PUSH
30533: LD_INT 2
30535: ARRAY
30536: PPUSH
30537: LD_VAR 0 1
30541: PPUSH
30542: CALL_OW 456
// end ;
30546: GO 30459
30548: POP
30549: POP
// end ;
30550: LD_VAR 0 3
30554: RET
// export function Count ( array ) ; var i ; begin
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
// result := 0 ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_INT 0
30566: ST_TO_ADDR
// for i in array do
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_VAR 0 1
30576: PUSH
30577: FOR_IN
30578: IFFALSE 30602
// if i then
30580: LD_VAR 0 3
30584: IFFALSE 30600
// result := result + 1 ;
30586: LD_ADDR_VAR 0 2
30590: PUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_INT 1
30598: PLUS
30599: ST_TO_ADDR
30600: GO 30577
30602: POP
30603: POP
// end ;
30604: LD_VAR 0 2
30608: RET
// export function IsEmpty ( building ) ; begin
30609: LD_INT 0
30611: PPUSH
// if not building then
30612: LD_VAR 0 1
30616: NOT
30617: IFFALSE 30621
// exit ;
30619: GO 30664
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30621: LD_ADDR_VAR 0 2
30625: PUSH
30626: LD_VAR 0 1
30630: PUSH
30631: LD_INT 22
30633: PUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 255
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 58
30650: PUSH
30651: EMPTY
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PPUSH
30658: CALL_OW 69
30662: IN
30663: ST_TO_ADDR
// end ;
30664: LD_VAR 0 2
30668: RET
// export function IsNotFull ( building ) ; begin
30669: LD_INT 0
30671: PPUSH
// if not building then
30672: LD_VAR 0 1
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30700
// result := UnitsInside ( building ) < 6 ;
30681: LD_ADDR_VAR 0 2
30685: PUSH
30686: LD_VAR 0 1
30690: PPUSH
30691: CALL_OW 313
30695: PUSH
30696: LD_INT 6
30698: LESS
30699: ST_TO_ADDR
// end ;
30700: LD_VAR 0 2
30704: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30705: LD_INT 0
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// tmp := [ ] ;
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: EMPTY
30717: ST_TO_ADDR
// list := [ ] ;
30718: LD_ADDR_VAR 0 5
30722: PUSH
30723: EMPTY
30724: ST_TO_ADDR
// for i = 16 to 25 do
30725: LD_ADDR_VAR 0 4
30729: PUSH
30730: DOUBLE
30731: LD_INT 16
30733: DEC
30734: ST_TO_ADDR
30735: LD_INT 25
30737: PUSH
30738: FOR_TO
30739: IFFALSE 30812
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30741: LD_ADDR_VAR 0 3
30745: PUSH
30746: LD_VAR 0 3
30750: PUSH
30751: LD_INT 22
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 255
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 91
30770: PUSH
30771: LD_VAR 0 1
30775: PUSH
30776: LD_INT 6
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 30
30786: PUSH
30787: LD_VAR 0 4
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: PUSH
30801: EMPTY
30802: LIST
30803: PPUSH
30804: CALL_OW 69
30808: ADD
30809: ST_TO_ADDR
30810: GO 30738
30812: POP
30813: POP
// for i = 1 to tmp do
30814: LD_ADDR_VAR 0 4
30818: PUSH
30819: DOUBLE
30820: LD_INT 1
30822: DEC
30823: ST_TO_ADDR
30824: LD_VAR 0 3
30828: PUSH
30829: FOR_TO
30830: IFFALSE 30918
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30832: LD_ADDR_VAR 0 5
30836: PUSH
30837: LD_VAR 0 5
30841: PUSH
30842: LD_VAR 0 3
30846: PUSH
30847: LD_VAR 0 4
30851: ARRAY
30852: PPUSH
30853: CALL_OW 266
30857: PUSH
30858: LD_VAR 0 3
30862: PUSH
30863: LD_VAR 0 4
30867: ARRAY
30868: PPUSH
30869: CALL_OW 250
30873: PUSH
30874: LD_VAR 0 3
30878: PUSH
30879: LD_VAR 0 4
30883: ARRAY
30884: PPUSH
30885: CALL_OW 251
30889: PUSH
30890: LD_VAR 0 3
30894: PUSH
30895: LD_VAR 0 4
30899: ARRAY
30900: PPUSH
30901: CALL_OW 254
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: ADD
30915: ST_TO_ADDR
30916: GO 30829
30918: POP
30919: POP
// result := list ;
30920: LD_ADDR_VAR 0 2
30924: PUSH
30925: LD_VAR 0 5
30929: ST_TO_ADDR
// end ;
30930: LD_VAR 0 2
30934: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30935: LD_INT 0
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
30943: PPUSH
// if not factory then
30944: LD_VAR 0 1
30948: NOT
30949: IFFALSE 30953
// exit ;
30951: GO 31546
// if control = control_apeman then
30953: LD_VAR 0 4
30957: PUSH
30958: LD_INT 5
30960: EQUAL
30961: IFFALSE 31070
// begin tmp := UnitsInside ( factory ) ;
30963: LD_ADDR_VAR 0 8
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 313
30977: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_INT 25
30985: PUSH
30986: LD_INT 12
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PPUSH
30993: CALL_OW 72
30997: NOT
30998: IFFALSE 31008
// control := control_manual ;
31000: LD_ADDR_VAR 0 4
31004: PUSH
31005: LD_INT 1
31007: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31008: LD_ADDR_VAR 0 8
31012: PUSH
31013: LD_VAR 0 1
31017: PPUSH
31018: CALL 30705 0 1
31022: ST_TO_ADDR
// if tmp then
31023: LD_VAR 0 8
31027: IFFALSE 31070
// begin for i in tmp do
31029: LD_ADDR_VAR 0 7
31033: PUSH
31034: LD_VAR 0 8
31038: PUSH
31039: FOR_IN
31040: IFFALSE 31068
// if i [ 1 ] = b_ext_radio then
31042: LD_VAR 0 7
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PUSH
31051: LD_INT 22
31053: EQUAL
31054: IFFALSE 31066
// begin control := control_remote ;
31056: LD_ADDR_VAR 0 4
31060: PUSH
31061: LD_INT 2
31063: ST_TO_ADDR
// break ;
31064: GO 31068
// end ;
31066: GO 31039
31068: POP
31069: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31070: LD_VAR 0 1
31074: PPUSH
31075: LD_VAR 0 2
31079: PPUSH
31080: LD_VAR 0 3
31084: PPUSH
31085: LD_VAR 0 4
31089: PPUSH
31090: LD_VAR 0 5
31094: PPUSH
31095: CALL_OW 448
31099: IFFALSE 31134
// begin result := [ chassis , engine , control , weapon ] ;
31101: LD_ADDR_VAR 0 6
31105: PUSH
31106: LD_VAR 0 2
31110: PUSH
31111: LD_VAR 0 3
31115: PUSH
31116: LD_VAR 0 4
31120: PUSH
31121: LD_VAR 0 5
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// exit ;
31132: GO 31546
// end ; _chassis := AvailableChassisList ( factory ) ;
31134: LD_ADDR_VAR 0 9
31138: PUSH
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 475
31148: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31149: LD_ADDR_VAR 0 11
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 476
31163: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31164: LD_ADDR_VAR 0 12
31168: PUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL_OW 477
31178: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31179: LD_ADDR_VAR 0 10
31183: PUSH
31184: LD_VAR 0 1
31188: PPUSH
31189: CALL_OW 478
31193: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31194: LD_VAR 0 9
31198: NOT
31199: PUSH
31200: LD_VAR 0 11
31204: NOT
31205: OR
31206: PUSH
31207: LD_VAR 0 12
31211: NOT
31212: OR
31213: PUSH
31214: LD_VAR 0 10
31218: NOT
31219: OR
31220: IFFALSE 31255
// begin result := [ chassis , engine , control , weapon ] ;
31222: LD_ADDR_VAR 0 6
31226: PUSH
31227: LD_VAR 0 2
31231: PUSH
31232: LD_VAR 0 3
31236: PUSH
31237: LD_VAR 0 4
31241: PUSH
31242: LD_VAR 0 5
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
// exit ;
31253: GO 31546
// end ; if not chassis in _chassis then
31255: LD_VAR 0 2
31259: PUSH
31260: LD_VAR 0 9
31264: IN
31265: NOT
31266: IFFALSE 31292
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_VAR 0 9
31277: PUSH
31278: LD_INT 1
31280: PPUSH
31281: LD_VAR 0 9
31285: PPUSH
31286: CALL_OW 12
31290: ARRAY
31291: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31292: LD_VAR 0 2
31296: PPUSH
31297: LD_VAR 0 3
31301: PPUSH
31302: CALL 31551 0 2
31306: NOT
31307: IFFALSE 31366
// repeat engine := _engine [ 1 ] ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 11
31318: PUSH
31319: LD_INT 1
31321: ARRAY
31322: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31323: LD_ADDR_VAR 0 11
31327: PUSH
31328: LD_VAR 0 11
31332: PPUSH
31333: LD_INT 1
31335: PPUSH
31336: CALL_OW 3
31340: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31341: LD_VAR 0 2
31345: PPUSH
31346: LD_VAR 0 3
31350: PPUSH
31351: CALL 31551 0 2
31355: PUSH
31356: LD_VAR 0 11
31360: PUSH
31361: EMPTY
31362: EQUAL
31363: OR
31364: IFFALSE 31309
// if not control in _control then
31366: LD_VAR 0 4
31370: PUSH
31371: LD_VAR 0 12
31375: IN
31376: NOT
31377: IFFALSE 31403
// control := _control [ rand ( 1 , _control ) ] ;
31379: LD_ADDR_VAR 0 4
31383: PUSH
31384: LD_VAR 0 12
31388: PUSH
31389: LD_INT 1
31391: PPUSH
31392: LD_VAR 0 12
31396: PPUSH
31397: CALL_OW 12
31401: ARRAY
31402: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31403: LD_VAR 0 2
31407: PPUSH
31408: LD_VAR 0 5
31412: PPUSH
31413: CALL 31771 0 2
31417: NOT
31418: IFFALSE 31477
// repeat weapon := _weapon [ 1 ] ;
31420: LD_ADDR_VAR 0 5
31424: PUSH
31425: LD_VAR 0 10
31429: PUSH
31430: LD_INT 1
31432: ARRAY
31433: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31434: LD_ADDR_VAR 0 10
31438: PUSH
31439: LD_VAR 0 10
31443: PPUSH
31444: LD_INT 1
31446: PPUSH
31447: CALL_OW 3
31451: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31452: LD_VAR 0 2
31456: PPUSH
31457: LD_VAR 0 5
31461: PPUSH
31462: CALL 31771 0 2
31466: PUSH
31467: LD_VAR 0 10
31471: PUSH
31472: EMPTY
31473: EQUAL
31474: OR
31475: IFFALSE 31420
// result := [ ] ;
31477: LD_ADDR_VAR 0 6
31481: PUSH
31482: EMPTY
31483: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31484: LD_VAR 0 1
31488: PPUSH
31489: LD_VAR 0 2
31493: PPUSH
31494: LD_VAR 0 3
31498: PPUSH
31499: LD_VAR 0 4
31503: PPUSH
31504: LD_VAR 0 5
31508: PPUSH
31509: CALL_OW 448
31513: IFFALSE 31546
// result := [ chassis , engine , control , weapon ] ;
31515: LD_ADDR_VAR 0 6
31519: PUSH
31520: LD_VAR 0 2
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_VAR 0 4
31534: PUSH
31535: LD_VAR 0 5
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// end ;
31546: LD_VAR 0 6
31550: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31551: LD_INT 0
31553: PPUSH
// if not chassis or not engine then
31554: LD_VAR 0 1
31558: NOT
31559: PUSH
31560: LD_VAR 0 2
31564: NOT
31565: OR
31566: IFFALSE 31570
// exit ;
31568: GO 31766
// case engine of engine_solar :
31570: LD_VAR 0 2
31574: PUSH
31575: LD_INT 2
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31621
31583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_INT 11
31591: PUSH
31592: LD_INT 12
31594: PUSH
31595: LD_INT 13
31597: PUSH
31598: LD_INT 14
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
31619: GO 31750
31621: LD_INT 1
31623: DOUBLE
31624: EQUAL
31625: IFTRUE 31629
31627: GO 31691
31629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31630: LD_ADDR_VAR 0 3
31634: PUSH
31635: LD_INT 11
31637: PUSH
31638: LD_INT 12
31640: PUSH
31641: LD_INT 13
31643: PUSH
31644: LD_INT 14
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: LD_INT 5
31661: PUSH
31662: LD_INT 21
31664: PUSH
31665: LD_INT 23
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_INT 24
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
31689: GO 31750
31691: LD_INT 3
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31749
31699: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 13
31707: PUSH
31708: LD_INT 14
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: LD_INT 4
31719: PUSH
31720: LD_INT 5
31722: PUSH
31723: LD_INT 21
31725: PUSH
31726: LD_INT 22
31728: PUSH
31729: LD_INT 23
31731: PUSH
31732: LD_INT 24
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
31747: GO 31750
31749: POP
// result := ( chassis in result ) ;
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: LD_VAR 0 1
31759: PUSH
31760: LD_VAR 0 3
31764: IN
31765: ST_TO_ADDR
// end ;
31766: LD_VAR 0 3
31770: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31771: LD_INT 0
31773: PPUSH
// if not chassis or not weapon then
31774: LD_VAR 0 1
31778: NOT
31779: PUSH
31780: LD_VAR 0 2
31784: NOT
31785: OR
31786: IFFALSE 31790
// exit ;
31788: GO 32852
// case weapon of us_machine_gun :
31790: LD_VAR 0 2
31794: PUSH
31795: LD_INT 2
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31833
31803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31804: LD_ADDR_VAR 0 3
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: ST_TO_ADDR
31831: GO 32836
31833: LD_INT 3
31835: DOUBLE
31836: EQUAL
31837: IFTRUE 31841
31839: GO 31871
31841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 4
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
31869: GO 32836
31871: LD_INT 11
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31909
31879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31880: LD_ADDR_VAR 0 3
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: LD_INT 3
31893: PUSH
31894: LD_INT 4
31896: PUSH
31897: LD_INT 5
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
31907: GO 32836
31909: LD_INT 4
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31943
31917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31918: LD_ADDR_VAR 0 3
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 3
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: LD_INT 5
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
31941: GO 32836
31943: LD_INT 5
31945: DOUBLE
31946: EQUAL
31947: IFTRUE 31951
31949: GO 31977
31951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31952: LD_ADDR_VAR 0 3
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: LD_INT 4
31965: PUSH
31966: LD_INT 5
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
31975: GO 32836
31977: LD_INT 9
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 32011
31985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31986: LD_ADDR_VAR 0 3
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 3
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: LD_INT 5
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
32009: GO 32836
32011: LD_INT 7
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 32045
32019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32020: LD_ADDR_VAR 0 3
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
32043: GO 32836
32045: LD_INT 12
32047: DOUBLE
32048: EQUAL
32049: IFTRUE 32053
32051: GO 32079
32053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32054: LD_ADDR_VAR 0 3
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 4
32067: PUSH
32068: LD_INT 5
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
32077: GO 32836
32079: LD_INT 13
32081: DOUBLE
32082: EQUAL
32083: IFTRUE 32087
32085: GO 32113
32087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: ST_TO_ADDR
32111: GO 32836
32113: LD_INT 14
32115: DOUBLE
32116: EQUAL
32117: IFTRUE 32121
32119: GO 32139
32121: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32122: LD_ADDR_VAR 0 3
32126: PUSH
32127: LD_INT 4
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: ST_TO_ADDR
32137: GO 32836
32139: LD_INT 6
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32147
32145: GO 32165
32147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32148: LD_ADDR_VAR 0 3
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: ST_TO_ADDR
32163: GO 32836
32165: LD_INT 10
32167: DOUBLE
32168: EQUAL
32169: IFTRUE 32173
32171: GO 32191
32173: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: LD_INT 5
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: ST_TO_ADDR
32189: GO 32836
32191: LD_INT 22
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32225
32199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32200: LD_ADDR_VAR 0 3
32204: PUSH
32205: LD_INT 11
32207: PUSH
32208: LD_INT 12
32210: PUSH
32211: LD_INT 13
32213: PUSH
32214: LD_INT 14
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
32223: GO 32836
32225: LD_INT 23
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32233
32231: GO 32259
32233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32234: LD_ADDR_VAR 0 3
32238: PUSH
32239: LD_INT 11
32241: PUSH
32242: LD_INT 12
32244: PUSH
32245: LD_INT 13
32247: PUSH
32248: LD_INT 14
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 32836
32259: LD_INT 24
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32293
32267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32268: LD_ADDR_VAR 0 3
32272: PUSH
32273: LD_INT 11
32275: PUSH
32276: LD_INT 12
32278: PUSH
32279: LD_INT 13
32281: PUSH
32282: LD_INT 14
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
32291: GO 32836
32293: LD_INT 30
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32301
32299: GO 32327
32301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32302: LD_ADDR_VAR 0 3
32306: PUSH
32307: LD_INT 11
32309: PUSH
32310: LD_INT 12
32312: PUSH
32313: LD_INT 13
32315: PUSH
32316: LD_INT 14
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: ST_TO_ADDR
32325: GO 32836
32327: LD_INT 25
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32353
32335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_INT 13
32343: PUSH
32344: LD_INT 14
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: ST_TO_ADDR
32351: GO 32836
32353: LD_INT 27
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32379
32361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 13
32369: PUSH
32370: LD_INT 14
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: ST_TO_ADDR
32377: GO 32836
32379: LD_EXP 31
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32415
32389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 11
32397: PUSH
32398: LD_INT 12
32400: PUSH
32401: LD_INT 13
32403: PUSH
32404: LD_INT 14
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
32413: GO 32836
32415: LD_INT 28
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32423
32421: GO 32441
32423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_INT 13
32431: PUSH
32432: LD_INT 14
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: ST_TO_ADDR
32439: GO 32836
32441: LD_INT 29
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32467
32449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32450: LD_ADDR_VAR 0 3
32454: PUSH
32455: LD_INT 13
32457: PUSH
32458: LD_INT 14
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: ST_TO_ADDR
32465: GO 32836
32467: LD_INT 31
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32493
32475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_INT 13
32483: PUSH
32484: LD_INT 14
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: ST_TO_ADDR
32491: GO 32836
32493: LD_INT 26
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32519
32501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32502: LD_ADDR_VAR 0 3
32506: PUSH
32507: LD_INT 13
32509: PUSH
32510: LD_INT 14
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: ST_TO_ADDR
32517: GO 32836
32519: LD_INT 42
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 32553
32527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32528: LD_ADDR_VAR 0 3
32532: PUSH
32533: LD_INT 21
32535: PUSH
32536: LD_INT 22
32538: PUSH
32539: LD_INT 23
32541: PUSH
32542: LD_INT 24
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
32551: GO 32836
32553: LD_INT 43
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32587
32561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32562: LD_ADDR_VAR 0 3
32566: PUSH
32567: LD_INT 21
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_INT 23
32575: PUSH
32576: LD_INT 24
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
32585: GO 32836
32587: LD_INT 44
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32621
32595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 23
32609: PUSH
32610: LD_INT 24
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: ST_TO_ADDR
32619: GO 32836
32621: LD_INT 45
32623: DOUBLE
32624: EQUAL
32625: IFTRUE 32629
32627: GO 32655
32629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32630: LD_ADDR_VAR 0 3
32634: PUSH
32635: LD_INT 21
32637: PUSH
32638: LD_INT 22
32640: PUSH
32641: LD_INT 23
32643: PUSH
32644: LD_INT 24
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 32836
32655: LD_INT 49
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32689
32663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 21
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 23
32677: PUSH
32678: LD_INT 24
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
32687: GO 32836
32689: LD_INT 51
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32723
32697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 21
32705: PUSH
32706: LD_INT 22
32708: PUSH
32709: LD_INT 23
32711: PUSH
32712: LD_INT 24
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32836
32723: LD_INT 52
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32757
32731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 21
32739: PUSH
32740: LD_INT 22
32742: PUSH
32743: LD_INT 23
32745: PUSH
32746: LD_INT 24
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
32755: GO 32836
32757: LD_INT 53
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32783
32765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 23
32773: PUSH
32774: LD_INT 24
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: ST_TO_ADDR
32781: GO 32836
32783: LD_INT 46
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32809
32791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: LD_INT 23
32799: PUSH
32800: LD_INT 24
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: ST_TO_ADDR
32807: GO 32836
32809: LD_INT 47
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32835
32817: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 23
32825: PUSH
32826: LD_INT 24
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 32836
32835: POP
// result := ( chassis in result ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 1
32845: PUSH
32846: LD_VAR 0 3
32850: IN
32851: ST_TO_ADDR
// end ;
32852: LD_VAR 0 3
32856: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
// result := array ;
32866: LD_ADDR_VAR 0 5
32870: PUSH
32871: LD_VAR 0 1
32875: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32876: LD_VAR 0 1
32880: NOT
32881: PUSH
32882: LD_VAR 0 2
32886: NOT
32887: OR
32888: PUSH
32889: LD_VAR 0 3
32893: NOT
32894: OR
32895: PUSH
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 1
32905: GREATER
32906: OR
32907: PUSH
32908: LD_VAR 0 3
32912: PUSH
32913: LD_VAR 0 1
32917: GREATER
32918: OR
32919: IFFALSE 32923
// exit ;
32921: GO 33219
// if direction then
32923: LD_VAR 0 4
32927: IFFALSE 32991
// begin d := 1 ;
32929: LD_ADDR_VAR 0 9
32933: PUSH
32934: LD_INT 1
32936: ST_TO_ADDR
// if i_from > i_to then
32937: LD_VAR 0 2
32941: PUSH
32942: LD_VAR 0 3
32946: GREATER
32947: IFFALSE 32973
// length := ( array - i_from ) + i_to else
32949: LD_ADDR_VAR 0 11
32953: PUSH
32954: LD_VAR 0 1
32958: PUSH
32959: LD_VAR 0 2
32963: MINUS
32964: PUSH
32965: LD_VAR 0 3
32969: PLUS
32970: ST_TO_ADDR
32971: GO 32989
// length := i_to - i_from ;
32973: LD_ADDR_VAR 0 11
32977: PUSH
32978: LD_VAR 0 3
32982: PUSH
32983: LD_VAR 0 2
32987: MINUS
32988: ST_TO_ADDR
// end else
32989: GO 33052
// begin d := - 1 ;
32991: LD_ADDR_VAR 0 9
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: ST_TO_ADDR
// if i_from > i_to then
33000: LD_VAR 0 2
33004: PUSH
33005: LD_VAR 0 3
33009: GREATER
33010: IFFALSE 33030
// length := i_from - i_to else
33012: LD_ADDR_VAR 0 11
33016: PUSH
33017: LD_VAR 0 2
33021: PUSH
33022: LD_VAR 0 3
33026: MINUS
33027: ST_TO_ADDR
33028: GO 33052
// length := ( array - i_to ) + i_from ;
33030: LD_ADDR_VAR 0 11
33034: PUSH
33035: LD_VAR 0 1
33039: PUSH
33040: LD_VAR 0 3
33044: MINUS
33045: PUSH
33046: LD_VAR 0 2
33050: PLUS
33051: ST_TO_ADDR
// end ; if not length then
33052: LD_VAR 0 11
33056: NOT
33057: IFFALSE 33061
// exit ;
33059: GO 33219
// tmp := array ;
33061: LD_ADDR_VAR 0 10
33065: PUSH
33066: LD_VAR 0 1
33070: ST_TO_ADDR
// for i = 1 to length do
33071: LD_ADDR_VAR 0 6
33075: PUSH
33076: DOUBLE
33077: LD_INT 1
33079: DEC
33080: ST_TO_ADDR
33081: LD_VAR 0 11
33085: PUSH
33086: FOR_TO
33087: IFFALSE 33207
// begin for j = 1 to array do
33089: LD_ADDR_VAR 0 7
33093: PUSH
33094: DOUBLE
33095: LD_INT 1
33097: DEC
33098: ST_TO_ADDR
33099: LD_VAR 0 1
33103: PUSH
33104: FOR_TO
33105: IFFALSE 33193
// begin k := j + d ;
33107: LD_ADDR_VAR 0 8
33111: PUSH
33112: LD_VAR 0 7
33116: PUSH
33117: LD_VAR 0 9
33121: PLUS
33122: ST_TO_ADDR
// if k > array then
33123: LD_VAR 0 8
33127: PUSH
33128: LD_VAR 0 1
33132: GREATER
33133: IFFALSE 33143
// k := 1 ;
33135: LD_ADDR_VAR 0 8
33139: PUSH
33140: LD_INT 1
33142: ST_TO_ADDR
// if not k then
33143: LD_VAR 0 8
33147: NOT
33148: IFFALSE 33160
// k := array ;
33150: LD_ADDR_VAR 0 8
33154: PUSH
33155: LD_VAR 0 1
33159: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33160: LD_ADDR_VAR 0 10
33164: PUSH
33165: LD_VAR 0 10
33169: PPUSH
33170: LD_VAR 0 8
33174: PPUSH
33175: LD_VAR 0 1
33179: PUSH
33180: LD_VAR 0 7
33184: ARRAY
33185: PPUSH
33186: CALL_OW 1
33190: ST_TO_ADDR
// end ;
33191: GO 33104
33193: POP
33194: POP
// array := tmp ;
33195: LD_ADDR_VAR 0 1
33199: PUSH
33200: LD_VAR 0 10
33204: ST_TO_ADDR
// end ;
33205: GO 33086
33207: POP
33208: POP
// result := array ;
33209: LD_ADDR_VAR 0 5
33213: PUSH
33214: LD_VAR 0 1
33218: ST_TO_ADDR
// end ;
33219: LD_VAR 0 5
33223: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33224: LD_INT 0
33226: PPUSH
33227: PPUSH
// result := 0 ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_INT 0
33235: ST_TO_ADDR
// if not array or not value in array then
33236: LD_VAR 0 1
33240: NOT
33241: PUSH
33242: LD_VAR 0 2
33246: PUSH
33247: LD_VAR 0 1
33251: IN
33252: NOT
33253: OR
33254: IFFALSE 33258
// exit ;
33256: GO 33312
// for i = 1 to array do
33258: LD_ADDR_VAR 0 4
33262: PUSH
33263: DOUBLE
33264: LD_INT 1
33266: DEC
33267: ST_TO_ADDR
33268: LD_VAR 0 1
33272: PUSH
33273: FOR_TO
33274: IFFALSE 33310
// if value = array [ i ] then
33276: LD_VAR 0 2
33280: PUSH
33281: LD_VAR 0 1
33285: PUSH
33286: LD_VAR 0 4
33290: ARRAY
33291: EQUAL
33292: IFFALSE 33308
// begin result := i ;
33294: LD_ADDR_VAR 0 3
33298: PUSH
33299: LD_VAR 0 4
33303: ST_TO_ADDR
// exit ;
33304: POP
33305: POP
33306: GO 33312
// end ;
33308: GO 33273
33310: POP
33311: POP
// end ;
33312: LD_VAR 0 3
33316: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33317: LD_INT 0
33319: PPUSH
// vc_chassis := chassis ;
33320: LD_ADDR_OWVAR 37
33324: PUSH
33325: LD_VAR 0 1
33329: ST_TO_ADDR
// vc_engine := engine ;
33330: LD_ADDR_OWVAR 39
33334: PUSH
33335: LD_VAR 0 2
33339: ST_TO_ADDR
// vc_control := control ;
33340: LD_ADDR_OWVAR 38
33344: PUSH
33345: LD_VAR 0 3
33349: ST_TO_ADDR
// vc_weapon := weapon ;
33350: LD_ADDR_OWVAR 40
33354: PUSH
33355: LD_VAR 0 4
33359: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33360: LD_ADDR_OWVAR 41
33364: PUSH
33365: LD_VAR 0 5
33369: ST_TO_ADDR
// end ;
33370: LD_VAR 0 6
33374: RET
// export function WantPlant ( unit ) ; var task ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
// result := false ;
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_INT 0
33386: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33387: LD_ADDR_VAR 0 3
33391: PUSH
33392: LD_VAR 0 1
33396: PPUSH
33397: CALL_OW 437
33401: ST_TO_ADDR
// if task then
33402: LD_VAR 0 3
33406: IFFALSE 33434
// if task [ 1 ] [ 1 ] = p then
33408: LD_VAR 0 3
33412: PUSH
33413: LD_INT 1
33415: ARRAY
33416: PUSH
33417: LD_INT 1
33419: ARRAY
33420: PUSH
33421: LD_STRING p
33423: EQUAL
33424: IFFALSE 33434
// result := true ;
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_INT 1
33433: ST_TO_ADDR
// end ;
33434: LD_VAR 0 2
33438: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33439: LD_INT 0
33441: PPUSH
33442: PPUSH
33443: PPUSH
33444: PPUSH
// if pos < 1 then
33445: LD_VAR 0 2
33449: PUSH
33450: LD_INT 1
33452: LESS
33453: IFFALSE 33457
// exit ;
33455: GO 33760
// if pos = 1 then
33457: LD_VAR 0 2
33461: PUSH
33462: LD_INT 1
33464: EQUAL
33465: IFFALSE 33498
// result := Replace ( arr , pos [ 1 ] , value ) else
33467: LD_ADDR_VAR 0 4
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PUSH
33482: LD_INT 1
33484: ARRAY
33485: PPUSH
33486: LD_VAR 0 3
33490: PPUSH
33491: CALL_OW 1
33495: ST_TO_ADDR
33496: GO 33760
// begin tmp := arr ;
33498: LD_ADDR_VAR 0 6
33502: PUSH
33503: LD_VAR 0 1
33507: ST_TO_ADDR
// s_arr := [ tmp ] ;
33508: LD_ADDR_VAR 0 7
33512: PUSH
33513: LD_VAR 0 6
33517: PUSH
33518: EMPTY
33519: LIST
33520: ST_TO_ADDR
// for i = 1 to pos - 1 do
33521: LD_ADDR_VAR 0 5
33525: PUSH
33526: DOUBLE
33527: LD_INT 1
33529: DEC
33530: ST_TO_ADDR
33531: LD_VAR 0 2
33535: PUSH
33536: LD_INT 1
33538: MINUS
33539: PUSH
33540: FOR_TO
33541: IFFALSE 33586
// begin tmp := tmp [ pos [ i ] ] ;
33543: LD_ADDR_VAR 0 6
33547: PUSH
33548: LD_VAR 0 6
33552: PUSH
33553: LD_VAR 0 2
33557: PUSH
33558: LD_VAR 0 5
33562: ARRAY
33563: ARRAY
33564: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33565: LD_ADDR_VAR 0 7
33569: PUSH
33570: LD_VAR 0 7
33574: PUSH
33575: LD_VAR 0 6
33579: PUSH
33580: EMPTY
33581: LIST
33582: ADD
33583: ST_TO_ADDR
// end ;
33584: GO 33540
33586: POP
33587: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33588: LD_ADDR_VAR 0 6
33592: PUSH
33593: LD_VAR 0 6
33597: PPUSH
33598: LD_VAR 0 2
33602: PUSH
33603: LD_VAR 0 2
33607: ARRAY
33608: PPUSH
33609: LD_VAR 0 3
33613: PPUSH
33614: CALL_OW 1
33618: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33619: LD_ADDR_VAR 0 7
33623: PUSH
33624: LD_VAR 0 7
33628: PPUSH
33629: LD_VAR 0 7
33633: PPUSH
33634: LD_VAR 0 6
33638: PPUSH
33639: CALL_OW 1
33643: ST_TO_ADDR
// for i = s_arr downto 2 do
33644: LD_ADDR_VAR 0 5
33648: PUSH
33649: DOUBLE
33650: LD_VAR 0 7
33654: INC
33655: ST_TO_ADDR
33656: LD_INT 2
33658: PUSH
33659: FOR_DOWNTO
33660: IFFALSE 33744
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33662: LD_ADDR_VAR 0 6
33666: PUSH
33667: LD_VAR 0 7
33671: PUSH
33672: LD_VAR 0 5
33676: PUSH
33677: LD_INT 1
33679: MINUS
33680: ARRAY
33681: PPUSH
33682: LD_VAR 0 2
33686: PUSH
33687: LD_VAR 0 5
33691: PUSH
33692: LD_INT 1
33694: MINUS
33695: ARRAY
33696: PPUSH
33697: LD_VAR 0 7
33701: PUSH
33702: LD_VAR 0 5
33706: ARRAY
33707: PPUSH
33708: CALL_OW 1
33712: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33713: LD_ADDR_VAR 0 7
33717: PUSH
33718: LD_VAR 0 7
33722: PPUSH
33723: LD_VAR 0 5
33727: PUSH
33728: LD_INT 1
33730: MINUS
33731: PPUSH
33732: LD_VAR 0 6
33736: PPUSH
33737: CALL_OW 1
33741: ST_TO_ADDR
// end ;
33742: GO 33659
33744: POP
33745: POP
// result := s_arr [ 1 ] ;
33746: LD_ADDR_VAR 0 4
33750: PUSH
33751: LD_VAR 0 7
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: ST_TO_ADDR
// end ; end ;
33760: LD_VAR 0 4
33764: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33765: LD_INT 0
33767: PPUSH
33768: PPUSH
// if not list then
33769: LD_VAR 0 1
33773: NOT
33774: IFFALSE 33778
// exit ;
33776: GO 33869
// i := list [ pos1 ] ;
33778: LD_ADDR_VAR 0 5
33782: PUSH
33783: LD_VAR 0 1
33787: PUSH
33788: LD_VAR 0 2
33792: ARRAY
33793: ST_TO_ADDR
// if not i then
33794: LD_VAR 0 5
33798: NOT
33799: IFFALSE 33803
// exit ;
33801: GO 33869
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33803: LD_ADDR_VAR 0 1
33807: PUSH
33808: LD_VAR 0 1
33812: PPUSH
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_VAR 0 1
33822: PUSH
33823: LD_VAR 0 3
33827: ARRAY
33828: PPUSH
33829: CALL_OW 1
33833: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33834: LD_ADDR_VAR 0 1
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: LD_VAR 0 3
33848: PPUSH
33849: LD_VAR 0 5
33853: PPUSH
33854: CALL_OW 1
33858: ST_TO_ADDR
// result := list ;
33859: LD_ADDR_VAR 0 4
33863: PUSH
33864: LD_VAR 0 1
33868: ST_TO_ADDR
// end ;
33869: LD_VAR 0 4
33873: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33874: LD_INT 0
33876: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33877: LD_ADDR_VAR 0 5
33881: PUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 250
33891: PPUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 251
33901: PPUSH
33902: LD_VAR 0 2
33906: PPUSH
33907: LD_VAR 0 3
33911: PPUSH
33912: LD_VAR 0 4
33916: PPUSH
33917: CALL 33927 0 5
33921: ST_TO_ADDR
// end ;
33922: LD_VAR 0 5
33926: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33927: LD_INT 0
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
// if not list then
33933: LD_VAR 0 3
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 34330
// result := [ ] ;
33942: LD_ADDR_VAR 0 6
33946: PUSH
33947: EMPTY
33948: ST_TO_ADDR
// for i in list do
33949: LD_ADDR_VAR 0 7
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: FOR_IN
33960: IFFALSE 34162
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33962: LD_ADDR_VAR 0 9
33966: PUSH
33967: LD_VAR 0 7
33971: PPUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: LD_VAR 0 2
33981: PPUSH
33982: CALL_OW 297
33986: ST_TO_ADDR
// if not result then
33987: LD_VAR 0 6
33991: NOT
33992: IFFALSE 34018
// result := [ [ i , tmp ] ] else
33994: LD_ADDR_VAR 0 6
33998: PUSH
33999: LD_VAR 0 7
34003: PUSH
34004: LD_VAR 0 9
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: ST_TO_ADDR
34016: GO 34160
// begin if result [ result ] [ 2 ] < tmp then
34018: LD_VAR 0 6
34022: PUSH
34023: LD_VAR 0 6
34027: ARRAY
34028: PUSH
34029: LD_INT 2
34031: ARRAY
34032: PUSH
34033: LD_VAR 0 9
34037: LESS
34038: IFFALSE 34080
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34040: LD_ADDR_VAR 0 6
34044: PUSH
34045: LD_VAR 0 6
34049: PPUSH
34050: LD_VAR 0 6
34054: PUSH
34055: LD_INT 1
34057: PLUS
34058: PPUSH
34059: LD_VAR 0 7
34063: PUSH
34064: LD_VAR 0 9
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PPUSH
34073: CALL_OW 2
34077: ST_TO_ADDR
34078: GO 34160
// for j = 1 to result do
34080: LD_ADDR_VAR 0 8
34084: PUSH
34085: DOUBLE
34086: LD_INT 1
34088: DEC
34089: ST_TO_ADDR
34090: LD_VAR 0 6
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34158
// begin if tmp < result [ j ] [ 2 ] then
34098: LD_VAR 0 9
34102: PUSH
34103: LD_VAR 0 6
34107: PUSH
34108: LD_VAR 0 8
34112: ARRAY
34113: PUSH
34114: LD_INT 2
34116: ARRAY
34117: LESS
34118: IFFALSE 34156
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34120: LD_ADDR_VAR 0 6
34124: PUSH
34125: LD_VAR 0 6
34129: PPUSH
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 7
34139: PUSH
34140: LD_VAR 0 9
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PPUSH
34149: CALL_OW 2
34153: ST_TO_ADDR
// break ;
34154: GO 34158
// end ; end ;
34156: GO 34095
34158: POP
34159: POP
// end ; end ;
34160: GO 33959
34162: POP
34163: POP
// if result and not asc then
34164: LD_VAR 0 6
34168: PUSH
34169: LD_VAR 0 4
34173: NOT
34174: AND
34175: IFFALSE 34250
// begin tmp := result ;
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: LD_VAR 0 6
34186: ST_TO_ADDR
// for i = tmp downto 1 do
34187: LD_ADDR_VAR 0 7
34191: PUSH
34192: DOUBLE
34193: LD_VAR 0 9
34197: INC
34198: ST_TO_ADDR
34199: LD_INT 1
34201: PUSH
34202: FOR_DOWNTO
34203: IFFALSE 34248
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34205: LD_ADDR_VAR 0 6
34209: PUSH
34210: LD_VAR 0 6
34214: PPUSH
34215: LD_VAR 0 9
34219: PUSH
34220: LD_VAR 0 7
34224: MINUS
34225: PUSH
34226: LD_INT 1
34228: PLUS
34229: PPUSH
34230: LD_VAR 0 9
34234: PUSH
34235: LD_VAR 0 7
34239: ARRAY
34240: PPUSH
34241: CALL_OW 1
34245: ST_TO_ADDR
34246: GO 34202
34248: POP
34249: POP
// end ; tmp := [ ] ;
34250: LD_ADDR_VAR 0 9
34254: PUSH
34255: EMPTY
34256: ST_TO_ADDR
// if mode then
34257: LD_VAR 0 5
34261: IFFALSE 34330
// begin for i = 1 to result do
34263: LD_ADDR_VAR 0 7
34267: PUSH
34268: DOUBLE
34269: LD_INT 1
34271: DEC
34272: ST_TO_ADDR
34273: LD_VAR 0 6
34277: PUSH
34278: FOR_TO
34279: IFFALSE 34318
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34281: LD_ADDR_VAR 0 9
34285: PUSH
34286: LD_VAR 0 9
34290: PPUSH
34291: LD_VAR 0 7
34295: PPUSH
34296: LD_VAR 0 6
34300: PUSH
34301: LD_VAR 0 7
34305: ARRAY
34306: PUSH
34307: LD_INT 1
34309: ARRAY
34310: PPUSH
34311: CALL_OW 1
34315: ST_TO_ADDR
34316: GO 34278
34318: POP
34319: POP
// result := tmp ;
34320: LD_ADDR_VAR 0 6
34324: PUSH
34325: LD_VAR 0 9
34329: ST_TO_ADDR
// end ; end ;
34330: LD_VAR 0 6
34334: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34343: LD_ADDR_VAR 0 5
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: ST_TO_ADDR
// if not x or not y then
34365: LD_VAR 0 2
34369: NOT
34370: PUSH
34371: LD_VAR 0 3
34375: NOT
34376: OR
34377: IFFALSE 34381
// exit ;
34379: GO 36033
// if not range then
34381: LD_VAR 0 4
34385: NOT
34386: IFFALSE 34396
// range := 10 ;
34388: LD_ADDR_VAR 0 4
34392: PUSH
34393: LD_INT 10
34395: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34396: LD_ADDR_VAR 0 8
34400: PUSH
34401: LD_INT 81
34403: PUSH
34404: LD_VAR 0 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 92
34415: PUSH
34416: LD_VAR 0 2
34420: PUSH
34421: LD_VAR 0 3
34425: PUSH
34426: LD_VAR 0 4
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: LD_INT 21
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: PPUSH
34459: CALL_OW 69
34463: ST_TO_ADDR
// if not tmp then
34464: LD_VAR 0 8
34468: NOT
34469: IFFALSE 34473
// exit ;
34471: GO 36033
// for i in tmp do
34473: LD_ADDR_VAR 0 6
34477: PUSH
34478: LD_VAR 0 8
34482: PUSH
34483: FOR_IN
34484: IFFALSE 36008
// begin points := [ 0 , 0 , 0 ] ;
34486: LD_ADDR_VAR 0 9
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
// bpoints := 1 ;
34505: LD_ADDR_VAR 0 10
34509: PUSH
34510: LD_INT 1
34512: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34513: LD_VAR 0 6
34517: PPUSH
34518: CALL_OW 247
34522: PUSH
34523: LD_INT 1
34525: DOUBLE
34526: EQUAL
34527: IFTRUE 34531
34529: GO 35109
34531: POP
// begin if GetClass ( i ) = 1 then
34532: LD_VAR 0 6
34536: PPUSH
34537: CALL_OW 257
34541: PUSH
34542: LD_INT 1
34544: EQUAL
34545: IFFALSE 34566
// points := [ 10 , 5 , 3 ] ;
34547: LD_ADDR_VAR 0 9
34551: PUSH
34552: LD_INT 10
34554: PUSH
34555: LD_INT 5
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 257
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: IN
34590: IFFALSE 34611
// points := [ 3 , 2 , 1 ] ;
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34611: LD_VAR 0 6
34615: PPUSH
34616: CALL_OW 257
34620: PUSH
34621: LD_INT 5
34623: EQUAL
34624: IFFALSE 34645
// points := [ 130 , 5 , 2 ] ;
34626: LD_ADDR_VAR 0 9
34630: PUSH
34631: LD_INT 130
34633: PUSH
34634: LD_INT 5
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34645: LD_VAR 0 6
34649: PPUSH
34650: CALL_OW 257
34654: PUSH
34655: LD_INT 8
34657: EQUAL
34658: IFFALSE 34679
// points := [ 35 , 35 , 30 ] ;
34660: LD_ADDR_VAR 0 9
34664: PUSH
34665: LD_INT 35
34667: PUSH
34668: LD_INT 35
34670: PUSH
34671: LD_INT 30
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34679: LD_VAR 0 6
34683: PPUSH
34684: CALL_OW 257
34688: PUSH
34689: LD_INT 9
34691: EQUAL
34692: IFFALSE 34713
// points := [ 20 , 55 , 40 ] ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_INT 20
34701: PUSH
34702: LD_INT 55
34704: PUSH
34705: LD_INT 40
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 257
34722: PUSH
34723: LD_INT 12
34725: PUSH
34726: LD_INT 16
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: IN
34733: IFFALSE 34754
// points := [ 5 , 3 , 2 ] ;
34735: LD_ADDR_VAR 0 9
34739: PUSH
34740: LD_INT 5
34742: PUSH
34743: LD_INT 3
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34754: LD_VAR 0 6
34758: PPUSH
34759: CALL_OW 257
34763: PUSH
34764: LD_INT 17
34766: EQUAL
34767: IFFALSE 34788
// points := [ 100 , 50 , 75 ] ;
34769: LD_ADDR_VAR 0 9
34773: PUSH
34774: LD_INT 100
34776: PUSH
34777: LD_INT 50
34779: PUSH
34780: LD_INT 75
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34788: LD_VAR 0 6
34792: PPUSH
34793: CALL_OW 257
34797: PUSH
34798: LD_INT 15
34800: EQUAL
34801: IFFALSE 34822
// points := [ 10 , 5 , 3 ] ;
34803: LD_ADDR_VAR 0 9
34807: PUSH
34808: LD_INT 10
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34822: LD_VAR 0 6
34826: PPUSH
34827: CALL_OW 257
34831: PUSH
34832: LD_INT 14
34834: EQUAL
34835: IFFALSE 34856
// points := [ 10 , 0 , 0 ] ;
34837: LD_ADDR_VAR 0 9
34841: PUSH
34842: LD_INT 10
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34856: LD_VAR 0 6
34860: PPUSH
34861: CALL_OW 257
34865: PUSH
34866: LD_INT 11
34868: EQUAL
34869: IFFALSE 34890
// points := [ 30 , 10 , 5 ] ;
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_INT 30
34878: PUSH
34879: LD_INT 10
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_INT 5
34897: PPUSH
34898: CALL_OW 321
34902: PUSH
34903: LD_INT 2
34905: EQUAL
34906: IFFALSE 34923
// bpoints := bpoints * 1.8 ;
34908: LD_ADDR_VAR 0 10
34912: PUSH
34913: LD_VAR 0 10
34917: PUSH
34918: LD_REAL  1.80000000000000E+0000
34921: MUL
34922: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34923: LD_VAR 0 6
34927: PPUSH
34928: CALL_OW 257
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 4
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: IN
34951: PUSH
34952: LD_VAR 0 1
34956: PPUSH
34957: LD_INT 51
34959: PPUSH
34960: CALL_OW 321
34964: PUSH
34965: LD_INT 2
34967: EQUAL
34968: AND
34969: IFFALSE 34986
// bpoints := bpoints * 1.2 ;
34971: LD_ADDR_VAR 0 10
34975: PUSH
34976: LD_VAR 0 10
34980: PUSH
34981: LD_REAL  1.20000000000000E+0000
34984: MUL
34985: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34986: LD_VAR 0 6
34990: PPUSH
34991: CALL_OW 257
34995: PUSH
34996: LD_INT 5
34998: PUSH
34999: LD_INT 7
35001: PUSH
35002: LD_INT 9
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: IN
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: LD_INT 52
35018: PPUSH
35019: CALL_OW 321
35023: PUSH
35024: LD_INT 2
35026: EQUAL
35027: AND
35028: IFFALSE 35045
// bpoints := bpoints * 1.5 ;
35030: LD_ADDR_VAR 0 10
35034: PUSH
35035: LD_VAR 0 10
35039: PUSH
35040: LD_REAL  1.50000000000000E+0000
35043: MUL
35044: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35045: LD_VAR 0 1
35049: PPUSH
35050: LD_INT 66
35052: PPUSH
35053: CALL_OW 321
35057: PUSH
35058: LD_INT 2
35060: EQUAL
35061: IFFALSE 35078
// bpoints := bpoints * 1.1 ;
35063: LD_ADDR_VAR 0 10
35067: PUSH
35068: LD_VAR 0 10
35072: PUSH
35073: LD_REAL  1.10000000000000E+0000
35076: MUL
35077: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35078: LD_ADDR_VAR 0 10
35082: PUSH
35083: LD_VAR 0 10
35087: PUSH
35088: LD_VAR 0 6
35092: PPUSH
35093: LD_INT 1
35095: PPUSH
35096: CALL_OW 259
35100: PUSH
35101: LD_REAL  1.15000000000000E+0000
35104: MUL
35105: MUL
35106: ST_TO_ADDR
// end ; unit_vehicle :
35107: GO 35937
35109: LD_INT 2
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35925
35117: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35118: LD_VAR 0 6
35122: PPUSH
35123: CALL_OW 264
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 42
35133: PUSH
35134: LD_INT 24
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: IN
35142: IFFALSE 35163
// points := [ 25 , 5 , 3 ] ;
35144: LD_ADDR_VAR 0 9
35148: PUSH
35149: LD_INT 25
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35163: LD_VAR 0 6
35167: PPUSH
35168: CALL_OW 264
35172: PUSH
35173: LD_INT 4
35175: PUSH
35176: LD_INT 43
35178: PUSH
35179: LD_INT 25
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: IN
35187: IFFALSE 35208
// points := [ 40 , 15 , 5 ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_INT 40
35196: PUSH
35197: LD_INT 15
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35208: LD_VAR 0 6
35212: PPUSH
35213: CALL_OW 264
35217: PUSH
35218: LD_INT 3
35220: PUSH
35221: LD_INT 23
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: IN
35228: IFFALSE 35249
// points := [ 7 , 25 , 8 ] ;
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: LD_INT 7
35237: PUSH
35238: LD_INT 25
35240: PUSH
35241: LD_INT 8
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35249: LD_VAR 0 6
35253: PPUSH
35254: CALL_OW 264
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: LD_INT 27
35264: PUSH
35265: LD_INT 44
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: IN
35273: IFFALSE 35294
// points := [ 14 , 50 , 16 ] ;
35275: LD_ADDR_VAR 0 9
35279: PUSH
35280: LD_INT 14
35282: PUSH
35283: LD_INT 50
35285: PUSH
35286: LD_INT 16
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35294: LD_VAR 0 6
35298: PPUSH
35299: CALL_OW 264
35303: PUSH
35304: LD_INT 6
35306: PUSH
35307: LD_INT 46
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: IN
35314: IFFALSE 35335
// points := [ 32 , 120 , 70 ] ;
35316: LD_ADDR_VAR 0 9
35320: PUSH
35321: LD_INT 32
35323: PUSH
35324: LD_INT 120
35326: PUSH
35327: LD_INT 70
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35335: LD_VAR 0 6
35339: PPUSH
35340: CALL_OW 264
35344: PUSH
35345: LD_INT 7
35347: PUSH
35348: LD_INT 28
35350: PUSH
35351: LD_INT 45
35353: PUSH
35354: LD_EXP 31
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: IN
35365: IFFALSE 35386
// points := [ 35 , 20 , 45 ] ;
35367: LD_ADDR_VAR 0 9
35371: PUSH
35372: LD_INT 35
35374: PUSH
35375: LD_INT 20
35377: PUSH
35378: LD_INT 45
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35386: LD_VAR 0 6
35390: PPUSH
35391: CALL_OW 264
35395: PUSH
35396: LD_INT 47
35398: PUSH
35399: EMPTY
35400: LIST
35401: IN
35402: IFFALSE 35423
// points := [ 67 , 45 , 75 ] ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_INT 67
35411: PUSH
35412: LD_INT 45
35414: PUSH
35415: LD_INT 75
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35423: LD_VAR 0 6
35427: PPUSH
35428: CALL_OW 264
35432: PUSH
35433: LD_INT 26
35435: PUSH
35436: EMPTY
35437: LIST
35438: IN
35439: IFFALSE 35460
// points := [ 120 , 30 , 80 ] ;
35441: LD_ADDR_VAR 0 9
35445: PUSH
35446: LD_INT 120
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 80
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35460: LD_VAR 0 6
35464: PPUSH
35465: CALL_OW 264
35469: PUSH
35470: LD_INT 22
35472: PUSH
35473: EMPTY
35474: LIST
35475: IN
35476: IFFALSE 35497
// points := [ 40 , 1 , 1 ] ;
35478: LD_ADDR_VAR 0 9
35482: PUSH
35483: LD_INT 40
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35497: LD_VAR 0 6
35501: PPUSH
35502: CALL_OW 264
35506: PUSH
35507: LD_INT 29
35509: PUSH
35510: EMPTY
35511: LIST
35512: IN
35513: IFFALSE 35534
// points := [ 70 , 200 , 400 ] ;
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_INT 70
35522: PUSH
35523: LD_INT 200
35525: PUSH
35526: LD_INT 400
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35534: LD_VAR 0 6
35538: PPUSH
35539: CALL_OW 264
35543: PUSH
35544: LD_INT 14
35546: PUSH
35547: LD_INT 53
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: IN
35554: IFFALSE 35575
// points := [ 40 , 10 , 20 ] ;
35556: LD_ADDR_VAR 0 9
35560: PUSH
35561: LD_INT 40
35563: PUSH
35564: LD_INT 10
35566: PUSH
35567: LD_INT 20
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35575: LD_VAR 0 6
35579: PPUSH
35580: CALL_OW 264
35584: PUSH
35585: LD_INT 9
35587: PUSH
35588: EMPTY
35589: LIST
35590: IN
35591: IFFALSE 35612
// points := [ 5 , 70 , 20 ] ;
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: LD_INT 70
35603: PUSH
35604: LD_INT 20
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35612: LD_VAR 0 6
35616: PPUSH
35617: CALL_OW 264
35621: PUSH
35622: LD_INT 10
35624: PUSH
35625: EMPTY
35626: LIST
35627: IN
35628: IFFALSE 35649
// points := [ 35 , 110 , 70 ] ;
35630: LD_ADDR_VAR 0 9
35634: PUSH
35635: LD_INT 35
35637: PUSH
35638: LD_INT 110
35640: PUSH
35641: LD_INT 70
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35649: LD_VAR 0 6
35653: PPUSH
35654: CALL_OW 265
35658: PUSH
35659: LD_INT 25
35661: EQUAL
35662: IFFALSE 35683
// points := [ 80 , 65 , 100 ] ;
35664: LD_ADDR_VAR 0 9
35668: PUSH
35669: LD_INT 80
35671: PUSH
35672: LD_INT 65
35674: PUSH
35675: LD_INT 100
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35683: LD_VAR 0 6
35687: PPUSH
35688: CALL_OW 263
35692: PUSH
35693: LD_INT 1
35695: EQUAL
35696: IFFALSE 35731
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35698: LD_ADDR_VAR 0 10
35702: PUSH
35703: LD_VAR 0 10
35707: PUSH
35708: LD_VAR 0 6
35712: PPUSH
35713: CALL_OW 311
35717: PPUSH
35718: LD_INT 3
35720: PPUSH
35721: CALL_OW 259
35725: PUSH
35726: LD_INT 4
35728: MUL
35729: MUL
35730: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35731: LD_VAR 0 6
35735: PPUSH
35736: CALL_OW 263
35740: PUSH
35741: LD_INT 2
35743: EQUAL
35744: IFFALSE 35795
// begin j := IsControledBy ( i ) ;
35746: LD_ADDR_VAR 0 7
35750: PUSH
35751: LD_VAR 0 6
35755: PPUSH
35756: CALL_OW 312
35760: ST_TO_ADDR
// if j then
35761: LD_VAR 0 7
35765: IFFALSE 35795
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35767: LD_ADDR_VAR 0 10
35771: PUSH
35772: LD_VAR 0 10
35776: PUSH
35777: LD_VAR 0 7
35781: PPUSH
35782: LD_INT 3
35784: PPUSH
35785: CALL_OW 259
35789: PUSH
35790: LD_INT 3
35792: MUL
35793: MUL
35794: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35795: LD_VAR 0 6
35799: PPUSH
35800: CALL_OW 264
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: LD_INT 6
35810: PUSH
35811: LD_INT 46
35813: PUSH
35814: LD_INT 44
35816: PUSH
35817: LD_INT 47
35819: PUSH
35820: LD_INT 45
35822: PUSH
35823: LD_INT 28
35825: PUSH
35826: LD_INT 7
35828: PUSH
35829: LD_INT 27
35831: PUSH
35832: LD_INT 29
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: IN
35847: PUSH
35848: LD_VAR 0 1
35852: PPUSH
35853: LD_INT 52
35855: PPUSH
35856: CALL_OW 321
35860: PUSH
35861: LD_INT 2
35863: EQUAL
35864: AND
35865: IFFALSE 35882
// bpoints := bpoints * 1.2 ;
35867: LD_ADDR_VAR 0 10
35871: PUSH
35872: LD_VAR 0 10
35876: PUSH
35877: LD_REAL  1.20000000000000E+0000
35880: MUL
35881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35882: LD_VAR 0 6
35886: PPUSH
35887: CALL_OW 264
35891: PUSH
35892: LD_INT 6
35894: PUSH
35895: LD_INT 46
35897: PUSH
35898: LD_INT 47
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: IN
35906: IFFALSE 35923
// bpoints := bpoints * 1.2 ;
35908: LD_ADDR_VAR 0 10
35912: PUSH
35913: LD_VAR 0 10
35917: PUSH
35918: LD_REAL  1.20000000000000E+0000
35921: MUL
35922: ST_TO_ADDR
// end ; unit_building :
35923: GO 35937
35925: LD_INT 3
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35933
35931: GO 35936
35933: POP
// ; end ;
35934: GO 35937
35936: POP
// for j = 1 to 3 do
35937: LD_ADDR_VAR 0 7
35941: PUSH
35942: DOUBLE
35943: LD_INT 1
35945: DEC
35946: ST_TO_ADDR
35947: LD_INT 3
35949: PUSH
35950: FOR_TO
35951: IFFALSE 36004
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35953: LD_ADDR_VAR 0 5
35957: PUSH
35958: LD_VAR 0 5
35962: PPUSH
35963: LD_VAR 0 7
35967: PPUSH
35968: LD_VAR 0 5
35972: PUSH
35973: LD_VAR 0 7
35977: ARRAY
35978: PUSH
35979: LD_VAR 0 9
35983: PUSH
35984: LD_VAR 0 7
35988: ARRAY
35989: PUSH
35990: LD_VAR 0 10
35994: MUL
35995: PLUS
35996: PPUSH
35997: CALL_OW 1
36001: ST_TO_ADDR
36002: GO 35950
36004: POP
36005: POP
// end ;
36006: GO 34483
36008: POP
36009: POP
// result := Replace ( result , 4 , tmp ) ;
36010: LD_ADDR_VAR 0 5
36014: PUSH
36015: LD_VAR 0 5
36019: PPUSH
36020: LD_INT 4
36022: PPUSH
36023: LD_VAR 0 8
36027: PPUSH
36028: CALL_OW 1
36032: ST_TO_ADDR
// end ;
36033: LD_VAR 0 5
36037: RET
// export function DangerAtRange ( unit , range ) ; begin
36038: LD_INT 0
36040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36041: LD_ADDR_VAR 0 3
36045: PUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: CALL_OW 255
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 250
36065: PPUSH
36066: LD_VAR 0 1
36070: PPUSH
36071: CALL_OW 251
36075: PPUSH
36076: LD_VAR 0 2
36080: PPUSH
36081: CALL 34335 0 4
36085: ST_TO_ADDR
// end ;
36086: LD_VAR 0 3
36090: RET
// export function DangerInArea ( side , area ) ; begin
36091: LD_INT 0
36093: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36094: LD_ADDR_VAR 0 3
36098: PUSH
36099: LD_VAR 0 2
36103: PPUSH
36104: LD_INT 81
36106: PUSH
36107: LD_VAR 0 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PPUSH
36116: CALL_OW 70
36120: ST_TO_ADDR
// end ;
36121: LD_VAR 0 3
36125: RET
// export function IsExtension ( b ) ; begin
36126: LD_INT 0
36128: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36129: LD_ADDR_VAR 0 2
36133: PUSH
36134: LD_VAR 0 1
36138: PUSH
36139: LD_INT 23
36141: PUSH
36142: LD_INT 20
36144: PUSH
36145: LD_INT 22
36147: PUSH
36148: LD_INT 17
36150: PUSH
36151: LD_INT 24
36153: PUSH
36154: LD_INT 21
36156: PUSH
36157: LD_INT 19
36159: PUSH
36160: LD_INT 16
36162: PUSH
36163: LD_INT 25
36165: PUSH
36166: LD_INT 18
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: IN
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 2
36186: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
// result := [ ] ;
36192: LD_ADDR_VAR 0 4
36196: PUSH
36197: EMPTY
36198: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: LD_INT 21
36211: PUSH
36212: LD_INT 3
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PPUSH
36219: CALL_OW 70
36223: ST_TO_ADDR
// if not tmp then
36224: LD_VAR 0 5
36228: NOT
36229: IFFALSE 36233
// exit ;
36231: GO 36297
// if checkLink then
36233: LD_VAR 0 3
36237: IFFALSE 36287
// begin for i in tmp do
36239: LD_ADDR_VAR 0 6
36243: PUSH
36244: LD_VAR 0 5
36248: PUSH
36249: FOR_IN
36250: IFFALSE 36285
// if GetBase ( i ) <> base then
36252: LD_VAR 0 6
36256: PPUSH
36257: CALL_OW 274
36261: PUSH
36262: LD_VAR 0 1
36266: NONEQUAL
36267: IFFALSE 36283
// ComLinkToBase ( base , i ) ;
36269: LD_VAR 0 1
36273: PPUSH
36274: LD_VAR 0 6
36278: PPUSH
36279: CALL_OW 169
36283: GO 36249
36285: POP
36286: POP
// end ; result := tmp ;
36287: LD_ADDR_VAR 0 4
36291: PUSH
36292: LD_VAR 0 5
36296: ST_TO_ADDR
// end ;
36297: LD_VAR 0 4
36301: RET
// export function ComComplete ( units , b ) ; var i ; begin
36302: LD_INT 0
36304: PPUSH
36305: PPUSH
// if not units then
36306: LD_VAR 0 1
36310: NOT
36311: IFFALSE 36315
// exit ;
36313: GO 36405
// for i in units do
36315: LD_ADDR_VAR 0 4
36319: PUSH
36320: LD_VAR 0 1
36324: PUSH
36325: FOR_IN
36326: IFFALSE 36403
// if BuildingStatus ( b ) = bs_build then
36328: LD_VAR 0 2
36332: PPUSH
36333: CALL_OW 461
36337: PUSH
36338: LD_INT 1
36340: EQUAL
36341: IFFALSE 36401
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36343: LD_VAR 0 4
36347: PPUSH
36348: LD_STRING h
36350: PUSH
36351: LD_VAR 0 2
36355: PPUSH
36356: CALL_OW 250
36360: PUSH
36361: LD_VAR 0 2
36365: PPUSH
36366: CALL_OW 251
36370: PUSH
36371: LD_VAR 0 2
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: PPUSH
36397: CALL_OW 446
36401: GO 36325
36403: POP
36404: POP
// end ;
36405: LD_VAR 0 3
36409: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36410: LD_INT 0
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36418: LD_VAR 0 1
36422: NOT
36423: PUSH
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 263
36433: PUSH
36434: LD_INT 2
36436: EQUAL
36437: NOT
36438: OR
36439: IFFALSE 36443
// exit ;
36441: GO 36759
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36443: LD_ADDR_VAR 0 6
36447: PUSH
36448: LD_INT 22
36450: PUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 255
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 30
36470: PUSH
36471: LD_INT 36
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 34
36480: PUSH
36481: LD_INT 31
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PPUSH
36497: CALL_OW 69
36501: ST_TO_ADDR
// if not tmp then
36502: LD_VAR 0 6
36506: NOT
36507: IFFALSE 36511
// exit ;
36509: GO 36759
// result := [ ] ;
36511: LD_ADDR_VAR 0 2
36515: PUSH
36516: EMPTY
36517: ST_TO_ADDR
// for i in tmp do
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_VAR 0 6
36527: PUSH
36528: FOR_IN
36529: IFFALSE 36600
// begin t := UnitsInside ( i ) ;
36531: LD_ADDR_VAR 0 4
36535: PUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: CALL_OW 313
36545: ST_TO_ADDR
// if t then
36546: LD_VAR 0 4
36550: IFFALSE 36598
// for j in t do
36552: LD_ADDR_VAR 0 7
36556: PUSH
36557: LD_VAR 0 4
36561: PUSH
36562: FOR_IN
36563: IFFALSE 36596
// result := Insert ( result , result + 1 , j ) ;
36565: LD_ADDR_VAR 0 2
36569: PUSH
36570: LD_VAR 0 2
36574: PPUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 1
36582: PLUS
36583: PPUSH
36584: LD_VAR 0 7
36588: PPUSH
36589: CALL_OW 2
36593: ST_TO_ADDR
36594: GO 36562
36596: POP
36597: POP
// end ;
36598: GO 36528
36600: POP
36601: POP
// if not result then
36602: LD_VAR 0 2
36606: NOT
36607: IFFALSE 36611
// exit ;
36609: GO 36759
// mech := result [ 1 ] ;
36611: LD_ADDR_VAR 0 5
36615: PUSH
36616: LD_VAR 0 2
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: ST_TO_ADDR
// if result > 1 then
36625: LD_VAR 0 2
36629: PUSH
36630: LD_INT 1
36632: GREATER
36633: IFFALSE 36745
// for i = 2 to result do
36635: LD_ADDR_VAR 0 3
36639: PUSH
36640: DOUBLE
36641: LD_INT 2
36643: DEC
36644: ST_TO_ADDR
36645: LD_VAR 0 2
36649: PUSH
36650: FOR_TO
36651: IFFALSE 36743
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36653: LD_ADDR_VAR 0 4
36657: PUSH
36658: LD_VAR 0 2
36662: PUSH
36663: LD_VAR 0 3
36667: ARRAY
36668: PPUSH
36669: LD_INT 3
36671: PPUSH
36672: CALL_OW 259
36676: PUSH
36677: LD_VAR 0 2
36681: PUSH
36682: LD_VAR 0 3
36686: ARRAY
36687: PPUSH
36688: CALL_OW 432
36692: MINUS
36693: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36694: LD_VAR 0 4
36698: PUSH
36699: LD_VAR 0 5
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: CALL_OW 259
36711: PUSH
36712: LD_VAR 0 5
36716: PPUSH
36717: CALL_OW 432
36721: MINUS
36722: GREATEREQUAL
36723: IFFALSE 36741
// mech := result [ i ] ;
36725: LD_ADDR_VAR 0 5
36729: PUSH
36730: LD_VAR 0 2
36734: PUSH
36735: LD_VAR 0 3
36739: ARRAY
36740: ST_TO_ADDR
// end ;
36741: GO 36650
36743: POP
36744: POP
// ComLinkTo ( vehicle , mech ) ;
36745: LD_VAR 0 1
36749: PPUSH
36750: LD_VAR 0 5
36754: PPUSH
36755: CALL_OW 135
// end ;
36759: LD_VAR 0 2
36763: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36764: LD_INT 0
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
// result := [ ] ;
36779: LD_ADDR_VAR 0 7
36783: PUSH
36784: EMPTY
36785: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL_OW 266
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: IN
36806: NOT
36807: IFFALSE 36811
// exit ;
36809: GO 38445
// if name then
36811: LD_VAR 0 3
36815: IFFALSE 36831
// SetBName ( base_dep , name ) ;
36817: LD_VAR 0 1
36821: PPUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: CALL_OW 500
// base := GetBase ( base_dep ) ;
36831: LD_ADDR_VAR 0 15
36835: PUSH
36836: LD_VAR 0 1
36840: PPUSH
36841: CALL_OW 274
36845: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36846: LD_ADDR_VAR 0 16
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: CALL_OW 255
36860: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36861: LD_ADDR_VAR 0 17
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 248
36875: ST_TO_ADDR
// if sources then
36876: LD_VAR 0 5
36880: IFFALSE 36927
// for i = 1 to 3 do
36882: LD_ADDR_VAR 0 8
36886: PUSH
36887: DOUBLE
36888: LD_INT 1
36890: DEC
36891: ST_TO_ADDR
36892: LD_INT 3
36894: PUSH
36895: FOR_TO
36896: IFFALSE 36925
// AddResourceType ( base , i , sources [ i ] ) ;
36898: LD_VAR 0 15
36902: PPUSH
36903: LD_VAR 0 8
36907: PPUSH
36908: LD_VAR 0 5
36912: PUSH
36913: LD_VAR 0 8
36917: ARRAY
36918: PPUSH
36919: CALL_OW 276
36923: GO 36895
36925: POP
36926: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36927: LD_ADDR_VAR 0 18
36931: PUSH
36932: LD_VAR 0 15
36936: PPUSH
36937: LD_VAR 0 2
36941: PPUSH
36942: LD_INT 1
36944: PPUSH
36945: CALL 36187 0 3
36949: ST_TO_ADDR
// InitHc ;
36950: CALL_OW 19
// InitUc ;
36954: CALL_OW 18
// uc_side := side ;
36958: LD_ADDR_OWVAR 20
36962: PUSH
36963: LD_VAR 0 16
36967: ST_TO_ADDR
// uc_nation := nation ;
36968: LD_ADDR_OWVAR 21
36972: PUSH
36973: LD_VAR 0 17
36977: ST_TO_ADDR
// if buildings then
36978: LD_VAR 0 18
36982: IFFALSE 38304
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36984: LD_ADDR_VAR 0 19
36988: PUSH
36989: LD_VAR 0 18
36993: PPUSH
36994: LD_INT 2
36996: PUSH
36997: LD_INT 30
36999: PUSH
37000: LD_INT 29
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 30
37009: PUSH
37010: LD_INT 30
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: PPUSH
37022: CALL_OW 72
37026: ST_TO_ADDR
// if tmp then
37027: LD_VAR 0 19
37031: IFFALSE 37079
// for i in tmp do
37033: LD_ADDR_VAR 0 8
37037: PUSH
37038: LD_VAR 0 19
37042: PUSH
37043: FOR_IN
37044: IFFALSE 37077
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37046: LD_VAR 0 8
37050: PPUSH
37051: CALL_OW 250
37055: PPUSH
37056: LD_VAR 0 8
37060: PPUSH
37061: CALL_OW 251
37065: PPUSH
37066: LD_VAR 0 16
37070: PPUSH
37071: CALL_OW 441
37075: GO 37043
37077: POP
37078: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37079: LD_VAR 0 18
37083: PPUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 30
37089: PUSH
37090: LD_INT 32
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 30
37099: PUSH
37100: LD_INT 33
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 72
37116: IFFALSE 37204
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: LD_VAR 0 18
37127: PPUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 30
37133: PUSH
37134: LD_INT 32
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 30
37143: PUSH
37144: LD_INT 33
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 72
37160: PUSH
37161: FOR_IN
37162: IFFALSE 37202
// begin if not GetBWeapon ( i ) then
37164: LD_VAR 0 8
37168: PPUSH
37169: CALL_OW 269
37173: NOT
37174: IFFALSE 37200
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37176: LD_VAR 0 8
37180: PPUSH
37181: LD_VAR 0 8
37185: PPUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: CALL 38450 0 2
37195: PPUSH
37196: CALL_OW 431
// end ;
37200: GO 37161
37202: POP
37203: POP
// end ; for i = 1 to personel do
37204: LD_ADDR_VAR 0 8
37208: PUSH
37209: DOUBLE
37210: LD_INT 1
37212: DEC
37213: ST_TO_ADDR
37214: LD_VAR 0 6
37218: PUSH
37219: FOR_TO
37220: IFFALSE 38284
// begin if i > 4 then
37222: LD_VAR 0 8
37226: PUSH
37227: LD_INT 4
37229: GREATER
37230: IFFALSE 37234
// break ;
37232: GO 38284
// case i of 1 :
37234: LD_VAR 0 8
37238: PUSH
37239: LD_INT 1
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37327
37247: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37248: LD_ADDR_VAR 0 12
37252: PUSH
37253: LD_VAR 0 18
37257: PPUSH
37258: LD_INT 22
37260: PUSH
37261: LD_VAR 0 16
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 58
37272: PUSH
37273: EMPTY
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: LD_INT 30
37281: PUSH
37282: LD_INT 32
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 30
37291: PUSH
37292: LD_INT 4
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 30
37301: PUSH
37302: LD_INT 5
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PPUSH
37320: CALL_OW 72
37324: ST_TO_ADDR
37325: GO 37549
37327: LD_INT 2
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 37397
37335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37336: LD_ADDR_VAR 0 12
37340: PUSH
37341: LD_VAR 0 18
37345: PPUSH
37346: LD_INT 22
37348: PUSH
37349: LD_VAR 0 16
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 30
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PPUSH
37390: CALL_OW 72
37394: ST_TO_ADDR
37395: GO 37549
37397: LD_INT 3
37399: DOUBLE
37400: EQUAL
37401: IFTRUE 37405
37403: GO 37467
37405: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37406: LD_ADDR_VAR 0 12
37410: PUSH
37411: LD_VAR 0 18
37415: PPUSH
37416: LD_INT 22
37418: PUSH
37419: LD_VAR 0 16
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 30
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 30
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PPUSH
37460: CALL_OW 72
37464: ST_TO_ADDR
37465: GO 37549
37467: LD_INT 4
37469: DOUBLE
37470: EQUAL
37471: IFTRUE 37475
37473: GO 37548
37475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37476: LD_ADDR_VAR 0 12
37480: PUSH
37481: LD_VAR 0 18
37485: PPUSH
37486: LD_INT 22
37488: PUSH
37489: LD_VAR 0 16
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 30
37503: PUSH
37504: LD_INT 6
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: LD_INT 7
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 30
37523: PUSH
37524: LD_INT 8
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PPUSH
37541: CALL_OW 72
37545: ST_TO_ADDR
37546: GO 37549
37548: POP
// if i = 1 then
37549: LD_VAR 0 8
37553: PUSH
37554: LD_INT 1
37556: EQUAL
37557: IFFALSE 37668
// begin tmp := [ ] ;
37559: LD_ADDR_VAR 0 19
37563: PUSH
37564: EMPTY
37565: ST_TO_ADDR
// for j in f do
37566: LD_ADDR_VAR 0 9
37570: PUSH
37571: LD_VAR 0 12
37575: PUSH
37576: FOR_IN
37577: IFFALSE 37650
// if GetBType ( j ) = b_bunker then
37579: LD_VAR 0 9
37583: PPUSH
37584: CALL_OW 266
37588: PUSH
37589: LD_INT 32
37591: EQUAL
37592: IFFALSE 37619
// tmp := Insert ( tmp , 1 , j ) else
37594: LD_ADDR_VAR 0 19
37598: PUSH
37599: LD_VAR 0 19
37603: PPUSH
37604: LD_INT 1
37606: PPUSH
37607: LD_VAR 0 9
37611: PPUSH
37612: CALL_OW 2
37616: ST_TO_ADDR
37617: GO 37648
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37619: LD_ADDR_VAR 0 19
37623: PUSH
37624: LD_VAR 0 19
37628: PPUSH
37629: LD_VAR 0 19
37633: PUSH
37634: LD_INT 1
37636: PLUS
37637: PPUSH
37638: LD_VAR 0 9
37642: PPUSH
37643: CALL_OW 2
37647: ST_TO_ADDR
37648: GO 37576
37650: POP
37651: POP
// if tmp then
37652: LD_VAR 0 19
37656: IFFALSE 37668
// f := tmp ;
37658: LD_ADDR_VAR 0 12
37662: PUSH
37663: LD_VAR 0 19
37667: ST_TO_ADDR
// end ; x := personel [ i ] ;
37668: LD_ADDR_VAR 0 13
37672: PUSH
37673: LD_VAR 0 6
37677: PUSH
37678: LD_VAR 0 8
37682: ARRAY
37683: ST_TO_ADDR
// if x = - 1 then
37684: LD_VAR 0 13
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: EQUAL
37693: IFFALSE 37902
// begin for j in f do
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: LD_VAR 0 12
37704: PUSH
37705: FOR_IN
37706: IFFALSE 37898
// repeat InitHc ;
37708: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37712: LD_VAR 0 9
37716: PPUSH
37717: CALL_OW 266
37721: PUSH
37722: LD_INT 5
37724: EQUAL
37725: IFFALSE 37795
// begin if UnitsInside ( j ) < 3 then
37727: LD_VAR 0 9
37731: PPUSH
37732: CALL_OW 313
37736: PUSH
37737: LD_INT 3
37739: LESS
37740: IFFALSE 37776
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37742: LD_INT 0
37744: PPUSH
37745: LD_INT 5
37747: PUSH
37748: LD_INT 8
37750: PUSH
37751: LD_INT 9
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: LD_VAR 0 17
37763: ARRAY
37764: PPUSH
37765: LD_VAR 0 4
37769: PPUSH
37770: CALL_OW 380
37774: GO 37793
// PrepareHuman ( false , i , skill ) ;
37776: LD_INT 0
37778: PPUSH
37779: LD_VAR 0 8
37783: PPUSH
37784: LD_VAR 0 4
37788: PPUSH
37789: CALL_OW 380
// end else
37793: GO 37812
// PrepareHuman ( false , i , skill ) ;
37795: LD_INT 0
37797: PPUSH
37798: LD_VAR 0 8
37802: PPUSH
37803: LD_VAR 0 4
37807: PPUSH
37808: CALL_OW 380
// un := CreateHuman ;
37812: LD_ADDR_VAR 0 14
37816: PUSH
37817: CALL_OW 44
37821: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37822: LD_ADDR_VAR 0 7
37826: PUSH
37827: LD_VAR 0 7
37831: PPUSH
37832: LD_INT 1
37834: PPUSH
37835: LD_VAR 0 14
37839: PPUSH
37840: CALL_OW 2
37844: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37845: LD_VAR 0 14
37849: PPUSH
37850: LD_VAR 0 9
37854: PPUSH
37855: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37859: LD_VAR 0 9
37863: PPUSH
37864: CALL_OW 313
37868: PUSH
37869: LD_INT 6
37871: EQUAL
37872: PUSH
37873: LD_VAR 0 9
37877: PPUSH
37878: CALL_OW 266
37882: PUSH
37883: LD_INT 32
37885: PUSH
37886: LD_INT 31
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: IN
37893: OR
37894: IFFALSE 37708
37896: GO 37705
37898: POP
37899: POP
// end else
37900: GO 38282
// for j = 1 to x do
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: DOUBLE
37908: LD_INT 1
37910: DEC
37911: ST_TO_ADDR
37912: LD_VAR 0 13
37916: PUSH
37917: FOR_TO
37918: IFFALSE 38280
// begin InitHc ;
37920: CALL_OW 19
// if not f then
37924: LD_VAR 0 12
37928: NOT
37929: IFFALSE 38018
// begin PrepareHuman ( false , i , skill ) ;
37931: LD_INT 0
37933: PPUSH
37934: LD_VAR 0 8
37938: PPUSH
37939: LD_VAR 0 4
37943: PPUSH
37944: CALL_OW 380
// un := CreateHuman ;
37948: LD_ADDR_VAR 0 14
37952: PUSH
37953: CALL_OW 44
37957: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37958: LD_ADDR_VAR 0 7
37962: PUSH
37963: LD_VAR 0 7
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: LD_VAR 0 14
37975: PPUSH
37976: CALL_OW 2
37980: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37981: LD_VAR 0 14
37985: PPUSH
37986: LD_VAR 0 1
37990: PPUSH
37991: CALL_OW 250
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 251
38005: PPUSH
38006: LD_INT 10
38008: PPUSH
38009: LD_INT 0
38011: PPUSH
38012: CALL_OW 50
// continue ;
38016: GO 37917
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38018: LD_VAR 0 12
38022: PUSH
38023: LD_INT 1
38025: ARRAY
38026: PPUSH
38027: CALL_OW 313
38031: PUSH
38032: LD_VAR 0 12
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PPUSH
38041: CALL_OW 266
38045: PUSH
38046: LD_INT 32
38048: PUSH
38049: LD_INT 31
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: IN
38056: AND
38057: PUSH
38058: LD_VAR 0 12
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PPUSH
38067: CALL_OW 313
38071: PUSH
38072: LD_INT 6
38074: EQUAL
38075: OR
38076: IFFALSE 38096
// f := Delete ( f , 1 ) ;
38078: LD_ADDR_VAR 0 12
38082: PUSH
38083: LD_VAR 0 12
38087: PPUSH
38088: LD_INT 1
38090: PPUSH
38091: CALL_OW 3
38095: ST_TO_ADDR
// if not f then
38096: LD_VAR 0 12
38100: NOT
38101: IFFALSE 38119
// begin x := x + 2 ;
38103: LD_ADDR_VAR 0 13
38107: PUSH
38108: LD_VAR 0 13
38112: PUSH
38113: LD_INT 2
38115: PLUS
38116: ST_TO_ADDR
// continue ;
38117: GO 37917
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38119: LD_VAR 0 12
38123: PUSH
38124: LD_INT 1
38126: ARRAY
38127: PPUSH
38128: CALL_OW 266
38132: PUSH
38133: LD_INT 5
38135: EQUAL
38136: IFFALSE 38210
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38138: LD_VAR 0 12
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PPUSH
38147: CALL_OW 313
38151: PUSH
38152: LD_INT 3
38154: LESS
38155: IFFALSE 38191
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38157: LD_INT 0
38159: PPUSH
38160: LD_INT 5
38162: PUSH
38163: LD_INT 8
38165: PUSH
38166: LD_INT 9
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: PUSH
38174: LD_VAR 0 17
38178: ARRAY
38179: PPUSH
38180: LD_VAR 0 4
38184: PPUSH
38185: CALL_OW 380
38189: GO 38208
// PrepareHuman ( false , i , skill ) ;
38191: LD_INT 0
38193: PPUSH
38194: LD_VAR 0 8
38198: PPUSH
38199: LD_VAR 0 4
38203: PPUSH
38204: CALL_OW 380
// end else
38208: GO 38227
// PrepareHuman ( false , i , skill ) ;
38210: LD_INT 0
38212: PPUSH
38213: LD_VAR 0 8
38217: PPUSH
38218: LD_VAR 0 4
38222: PPUSH
38223: CALL_OW 380
// un := CreateHuman ;
38227: LD_ADDR_VAR 0 14
38231: PUSH
38232: CALL_OW 44
38236: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38237: LD_ADDR_VAR 0 7
38241: PUSH
38242: LD_VAR 0 7
38246: PPUSH
38247: LD_INT 1
38249: PPUSH
38250: LD_VAR 0 14
38254: PPUSH
38255: CALL_OW 2
38259: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38260: LD_VAR 0 14
38264: PPUSH
38265: LD_VAR 0 12
38269: PUSH
38270: LD_INT 1
38272: ARRAY
38273: PPUSH
38274: CALL_OW 52
// end ;
38278: GO 37917
38280: POP
38281: POP
// end ;
38282: GO 37219
38284: POP
38285: POP
// result := result ^ buildings ;
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: LD_VAR 0 7
38295: PUSH
38296: LD_VAR 0 18
38300: ADD
38301: ST_TO_ADDR
// end else
38302: GO 38445
// begin for i = 1 to personel do
38304: LD_ADDR_VAR 0 8
38308: PUSH
38309: DOUBLE
38310: LD_INT 1
38312: DEC
38313: ST_TO_ADDR
38314: LD_VAR 0 6
38318: PUSH
38319: FOR_TO
38320: IFFALSE 38443
// begin if i > 4 then
38322: LD_VAR 0 8
38326: PUSH
38327: LD_INT 4
38329: GREATER
38330: IFFALSE 38334
// break ;
38332: GO 38443
// x := personel [ i ] ;
38334: LD_ADDR_VAR 0 13
38338: PUSH
38339: LD_VAR 0 6
38343: PUSH
38344: LD_VAR 0 8
38348: ARRAY
38349: ST_TO_ADDR
// if x = - 1 then
38350: LD_VAR 0 13
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: EQUAL
38359: IFFALSE 38363
// continue ;
38361: GO 38319
// PrepareHuman ( false , i , skill ) ;
38363: LD_INT 0
38365: PPUSH
38366: LD_VAR 0 8
38370: PPUSH
38371: LD_VAR 0 4
38375: PPUSH
38376: CALL_OW 380
// un := CreateHuman ;
38380: LD_ADDR_VAR 0 14
38384: PUSH
38385: CALL_OW 44
38389: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38390: LD_VAR 0 14
38394: PPUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 250
38404: PPUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 251
38414: PPUSH
38415: LD_INT 10
38417: PPUSH
38418: LD_INT 0
38420: PPUSH
38421: CALL_OW 50
// result := result ^ un ;
38425: LD_ADDR_VAR 0 7
38429: PUSH
38430: LD_VAR 0 7
38434: PUSH
38435: LD_VAR 0 14
38439: ADD
38440: ST_TO_ADDR
// end ;
38441: GO 38319
38443: POP
38444: POP
// end ; end ;
38445: LD_VAR 0 7
38449: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
// result := false ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_INT 0
38475: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38476: LD_VAR 0 1
38480: NOT
38481: PUSH
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 266
38491: PUSH
38492: LD_INT 32
38494: PUSH
38495: LD_INT 33
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: IN
38502: NOT
38503: OR
38504: IFFALSE 38508
// exit ;
38506: GO 39617
// nat := GetNation ( tower ) ;
38508: LD_ADDR_VAR 0 12
38512: PUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 248
38522: ST_TO_ADDR
// side := GetSide ( tower ) ;
38523: LD_ADDR_VAR 0 16
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 255
38537: ST_TO_ADDR
// x := GetX ( tower ) ;
38538: LD_ADDR_VAR 0 10
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 250
38552: ST_TO_ADDR
// y := GetY ( tower ) ;
38553: LD_ADDR_VAR 0 11
38557: PUSH
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 251
38567: ST_TO_ADDR
// if not x or not y then
38568: LD_VAR 0 10
38572: NOT
38573: PUSH
38574: LD_VAR 0 11
38578: NOT
38579: OR
38580: IFFALSE 38584
// exit ;
38582: GO 39617
// weapon := 0 ;
38584: LD_ADDR_VAR 0 18
38588: PUSH
38589: LD_INT 0
38591: ST_TO_ADDR
// fac_list := [ ] ;
38592: LD_ADDR_VAR 0 17
38596: PUSH
38597: EMPTY
38598: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38599: LD_ADDR_VAR 0 6
38603: PUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL_OW 274
38613: PPUSH
38614: LD_VAR 0 2
38618: PPUSH
38619: LD_INT 0
38621: PPUSH
38622: CALL 36187 0 3
38626: PPUSH
38627: LD_INT 30
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: ST_TO_ADDR
// if not factories then
38642: LD_VAR 0 6
38646: NOT
38647: IFFALSE 38651
// exit ;
38649: GO 39617
// for i in factories do
38651: LD_ADDR_VAR 0 8
38655: PUSH
38656: LD_VAR 0 6
38660: PUSH
38661: FOR_IN
38662: IFFALSE 38687
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38664: LD_ADDR_VAR 0 17
38668: PUSH
38669: LD_VAR 0 17
38673: PUSH
38674: LD_VAR 0 8
38678: PPUSH
38679: CALL_OW 478
38683: UNION
38684: ST_TO_ADDR
38685: GO 38661
38687: POP
38688: POP
// if not fac_list then
38689: LD_VAR 0 17
38693: NOT
38694: IFFALSE 38698
// exit ;
38696: GO 39617
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38698: LD_ADDR_VAR 0 5
38702: PUSH
38703: LD_INT 4
38705: PUSH
38706: LD_INT 5
38708: PUSH
38709: LD_INT 9
38711: PUSH
38712: LD_INT 10
38714: PUSH
38715: LD_INT 6
38717: PUSH
38718: LD_INT 7
38720: PUSH
38721: LD_INT 11
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 27
38735: PUSH
38736: LD_INT 28
38738: PUSH
38739: LD_INT 26
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 43
38753: PUSH
38754: LD_INT 44
38756: PUSH
38757: LD_INT 46
38759: PUSH
38760: LD_INT 45
38762: PUSH
38763: LD_INT 47
38765: PUSH
38766: LD_INT 49
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_VAR 0 12
38786: ARRAY
38787: ST_TO_ADDR
// list := list isect fac_list ;
38788: LD_ADDR_VAR 0 5
38792: PUSH
38793: LD_VAR 0 5
38797: PUSH
38798: LD_VAR 0 17
38802: ISECT
38803: ST_TO_ADDR
// if not list then
38804: LD_VAR 0 5
38808: NOT
38809: IFFALSE 38813
// exit ;
38811: GO 39617
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38813: LD_VAR 0 12
38817: PUSH
38818: LD_INT 3
38820: EQUAL
38821: PUSH
38822: LD_INT 49
38824: PUSH
38825: LD_VAR 0 5
38829: IN
38830: AND
38831: PUSH
38832: LD_INT 31
38834: PPUSH
38835: LD_VAR 0 16
38839: PPUSH
38840: CALL_OW 321
38844: PUSH
38845: LD_INT 2
38847: EQUAL
38848: AND
38849: IFFALSE 38909
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38851: LD_INT 22
38853: PUSH
38854: LD_VAR 0 16
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 35
38865: PUSH
38866: LD_INT 49
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 91
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_INT 10
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: PPUSH
38894: CALL_OW 69
38898: NOT
38899: IFFALSE 38909
// weapon := ru_time_lapser ;
38901: LD_ADDR_VAR 0 18
38905: PUSH
38906: LD_INT 49
38908: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38909: LD_VAR 0 12
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: IN
38924: PUSH
38925: LD_INT 11
38927: PUSH
38928: LD_VAR 0 5
38932: IN
38933: PUSH
38934: LD_INT 30
38936: PUSH
38937: LD_VAR 0 5
38941: IN
38942: OR
38943: AND
38944: PUSH
38945: LD_INT 6
38947: PPUSH
38948: LD_VAR 0 16
38952: PPUSH
38953: CALL_OW 321
38957: PUSH
38958: LD_INT 2
38960: EQUAL
38961: AND
38962: IFFALSE 39127
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38964: LD_INT 22
38966: PUSH
38967: LD_VAR 0 16
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: LD_INT 35
38981: PUSH
38982: LD_INT 11
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 35
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 91
39006: PUSH
39007: LD_VAR 0 1
39011: PUSH
39012: LD_INT 18
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: PPUSH
39025: CALL_OW 69
39029: NOT
39030: PUSH
39031: LD_INT 22
39033: PUSH
39034: LD_VAR 0 16
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 30
39048: PUSH
39049: LD_INT 32
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 30
39058: PUSH
39059: LD_INT 33
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 91
39073: PUSH
39074: LD_VAR 0 1
39078: PUSH
39079: LD_INT 12
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: PPUSH
39095: CALL_OW 69
39099: PUSH
39100: LD_INT 2
39102: GREATER
39103: AND
39104: IFFALSE 39127
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39106: LD_ADDR_VAR 0 18
39110: PUSH
39111: LD_INT 11
39113: PUSH
39114: LD_INT 30
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_VAR 0 12
39125: ARRAY
39126: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39127: LD_VAR 0 18
39131: NOT
39132: PUSH
39133: LD_INT 40
39135: PPUSH
39136: LD_VAR 0 16
39140: PPUSH
39141: CALL_OW 321
39145: PUSH
39146: LD_INT 2
39148: EQUAL
39149: AND
39150: PUSH
39151: LD_INT 7
39153: PUSH
39154: LD_VAR 0 5
39158: IN
39159: PUSH
39160: LD_INT 28
39162: PUSH
39163: LD_VAR 0 5
39167: IN
39168: OR
39169: PUSH
39170: LD_INT 45
39172: PUSH
39173: LD_VAR 0 5
39177: IN
39178: OR
39179: AND
39180: IFFALSE 39434
// begin hex := GetHexInfo ( x , y ) ;
39182: LD_ADDR_VAR 0 4
39186: PUSH
39187: LD_VAR 0 10
39191: PPUSH
39192: LD_VAR 0 11
39196: PPUSH
39197: CALL_OW 546
39201: ST_TO_ADDR
// if hex [ 1 ] then
39202: LD_VAR 0 4
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: IFFALSE 39214
// exit ;
39212: GO 39617
// height := hex [ 2 ] ;
39214: LD_ADDR_VAR 0 15
39218: PUSH
39219: LD_VAR 0 4
39223: PUSH
39224: LD_INT 2
39226: ARRAY
39227: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39228: LD_ADDR_VAR 0 14
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// for i in tmp do
39251: LD_ADDR_VAR 0 8
39255: PUSH
39256: LD_VAR 0 14
39260: PUSH
39261: FOR_IN
39262: IFFALSE 39432
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39264: LD_ADDR_VAR 0 9
39268: PUSH
39269: LD_VAR 0 10
39273: PPUSH
39274: LD_VAR 0 8
39278: PPUSH
39279: LD_INT 5
39281: PPUSH
39282: CALL_OW 272
39286: PUSH
39287: LD_VAR 0 11
39291: PPUSH
39292: LD_VAR 0 8
39296: PPUSH
39297: LD_INT 5
39299: PPUSH
39300: CALL_OW 273
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39309: LD_VAR 0 9
39313: PUSH
39314: LD_INT 1
39316: ARRAY
39317: PPUSH
39318: LD_VAR 0 9
39322: PUSH
39323: LD_INT 2
39325: ARRAY
39326: PPUSH
39327: CALL_OW 488
39331: IFFALSE 39430
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39333: LD_ADDR_VAR 0 4
39337: PUSH
39338: LD_VAR 0 9
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PPUSH
39347: LD_VAR 0 9
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PPUSH
39356: CALL_OW 546
39360: ST_TO_ADDR
// if hex [ 1 ] then
39361: LD_VAR 0 4
39365: PUSH
39366: LD_INT 1
39368: ARRAY
39369: IFFALSE 39373
// continue ;
39371: GO 39261
// h := hex [ 2 ] ;
39373: LD_ADDR_VAR 0 13
39377: PUSH
39378: LD_VAR 0 4
39382: PUSH
39383: LD_INT 2
39385: ARRAY
39386: ST_TO_ADDR
// if h + 7 < height then
39387: LD_VAR 0 13
39391: PUSH
39392: LD_INT 7
39394: PLUS
39395: PUSH
39396: LD_VAR 0 15
39400: LESS
39401: IFFALSE 39430
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39403: LD_ADDR_VAR 0 18
39407: PUSH
39408: LD_INT 7
39410: PUSH
39411: LD_INT 28
39413: PUSH
39414: LD_INT 45
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: PUSH
39422: LD_VAR 0 12
39426: ARRAY
39427: ST_TO_ADDR
// break ;
39428: GO 39432
// end ; end ; end ;
39430: GO 39261
39432: POP
39433: POP
// end ; if not weapon then
39434: LD_VAR 0 18
39438: NOT
39439: IFFALSE 39499
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39441: LD_ADDR_VAR 0 5
39445: PUSH
39446: LD_VAR 0 5
39450: PUSH
39451: LD_INT 11
39453: PUSH
39454: LD_INT 30
39456: PUSH
39457: LD_INT 49
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: DIFF
39465: ST_TO_ADDR
// if not list then
39466: LD_VAR 0 5
39470: NOT
39471: IFFALSE 39475
// exit ;
39473: GO 39617
// weapon := list [ rand ( 1 , list ) ] ;
39475: LD_ADDR_VAR 0 18
39479: PUSH
39480: LD_VAR 0 5
39484: PUSH
39485: LD_INT 1
39487: PPUSH
39488: LD_VAR 0 5
39492: PPUSH
39493: CALL_OW 12
39497: ARRAY
39498: ST_TO_ADDR
// end ; if weapon then
39499: LD_VAR 0 18
39503: IFFALSE 39617
// begin tmp := CostOfWeapon ( weapon ) ;
39505: LD_ADDR_VAR 0 14
39509: PUSH
39510: LD_VAR 0 18
39514: PPUSH
39515: CALL_OW 451
39519: ST_TO_ADDR
// j := GetBase ( tower ) ;
39520: LD_ADDR_VAR 0 9
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: CALL_OW 274
39534: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39535: LD_VAR 0 9
39539: PPUSH
39540: LD_INT 1
39542: PPUSH
39543: CALL_OW 275
39547: PUSH
39548: LD_VAR 0 14
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: GREATEREQUAL
39557: PUSH
39558: LD_VAR 0 9
39562: PPUSH
39563: LD_INT 2
39565: PPUSH
39566: CALL_OW 275
39570: PUSH
39571: LD_VAR 0 14
39575: PUSH
39576: LD_INT 2
39578: ARRAY
39579: GREATEREQUAL
39580: AND
39581: PUSH
39582: LD_VAR 0 9
39586: PPUSH
39587: LD_INT 3
39589: PPUSH
39590: CALL_OW 275
39594: PUSH
39595: LD_VAR 0 14
39599: PUSH
39600: LD_INT 3
39602: ARRAY
39603: GREATEREQUAL
39604: AND
39605: IFFALSE 39617
// result := weapon ;
39607: LD_ADDR_VAR 0 3
39611: PUSH
39612: LD_VAR 0 18
39616: ST_TO_ADDR
// end ; end ;
39617: LD_VAR 0 3
39621: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39622: LD_INT 0
39624: PPUSH
39625: PPUSH
// result := true ;
39626: LD_ADDR_VAR 0 3
39630: PUSH
39631: LD_INT 1
39633: ST_TO_ADDR
// if array1 = array2 then
39634: LD_VAR 0 1
39638: PUSH
39639: LD_VAR 0 2
39643: EQUAL
39644: IFFALSE 39704
// begin for i = 1 to array1 do
39646: LD_ADDR_VAR 0 4
39650: PUSH
39651: DOUBLE
39652: LD_INT 1
39654: DEC
39655: ST_TO_ADDR
39656: LD_VAR 0 1
39660: PUSH
39661: FOR_TO
39662: IFFALSE 39700
// if array1 [ i ] <> array2 [ i ] then
39664: LD_VAR 0 1
39668: PUSH
39669: LD_VAR 0 4
39673: ARRAY
39674: PUSH
39675: LD_VAR 0 2
39679: PUSH
39680: LD_VAR 0 4
39684: ARRAY
39685: NONEQUAL
39686: IFFALSE 39698
// begin result := false ;
39688: LD_ADDR_VAR 0 3
39692: PUSH
39693: LD_INT 0
39695: ST_TO_ADDR
// break ;
39696: GO 39700
// end ;
39698: GO 39661
39700: POP
39701: POP
// end else
39702: GO 39712
// result := false ;
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_INT 0
39711: ST_TO_ADDR
// end ;
39712: LD_VAR 0 3
39716: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39717: LD_INT 0
39719: PPUSH
39720: PPUSH
// if not array1 or not array2 then
39721: LD_VAR 0 1
39725: NOT
39726: PUSH
39727: LD_VAR 0 2
39731: NOT
39732: OR
39733: IFFALSE 39737
// exit ;
39735: GO 39801
// result := true ;
39737: LD_ADDR_VAR 0 3
39741: PUSH
39742: LD_INT 1
39744: ST_TO_ADDR
// for i = 1 to array1 do
39745: LD_ADDR_VAR 0 4
39749: PUSH
39750: DOUBLE
39751: LD_INT 1
39753: DEC
39754: ST_TO_ADDR
39755: LD_VAR 0 1
39759: PUSH
39760: FOR_TO
39761: IFFALSE 39799
// if array1 [ i ] <> array2 [ i ] then
39763: LD_VAR 0 1
39767: PUSH
39768: LD_VAR 0 4
39772: ARRAY
39773: PUSH
39774: LD_VAR 0 2
39778: PUSH
39779: LD_VAR 0 4
39783: ARRAY
39784: NONEQUAL
39785: IFFALSE 39797
// begin result := false ;
39787: LD_ADDR_VAR 0 3
39791: PUSH
39792: LD_INT 0
39794: ST_TO_ADDR
// break ;
39795: GO 39799
// end ;
39797: GO 39760
39799: POP
39800: POP
// end ;
39801: LD_VAR 0 3
39805: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39806: LD_INT 0
39808: PPUSH
39809: PPUSH
39810: PPUSH
// pom := GetBase ( fac ) ;
39811: LD_ADDR_VAR 0 5
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 274
39825: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39826: LD_ADDR_VAR 0 4
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_INT 1
39838: ARRAY
39839: PPUSH
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 2
39847: ARRAY
39848: PPUSH
39849: LD_VAR 0 2
39853: PUSH
39854: LD_INT 3
39856: ARRAY
39857: PPUSH
39858: LD_VAR 0 2
39862: PUSH
39863: LD_INT 4
39865: ARRAY
39866: PPUSH
39867: CALL_OW 449
39871: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39872: LD_ADDR_VAR 0 3
39876: PUSH
39877: LD_VAR 0 5
39881: PPUSH
39882: LD_INT 1
39884: PPUSH
39885: CALL_OW 275
39889: PUSH
39890: LD_VAR 0 4
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: GREATEREQUAL
39899: PUSH
39900: LD_VAR 0 5
39904: PPUSH
39905: LD_INT 2
39907: PPUSH
39908: CALL_OW 275
39912: PUSH
39913: LD_VAR 0 4
39917: PUSH
39918: LD_INT 2
39920: ARRAY
39921: GREATEREQUAL
39922: AND
39923: PUSH
39924: LD_VAR 0 5
39928: PPUSH
39929: LD_INT 3
39931: PPUSH
39932: CALL_OW 275
39936: PUSH
39937: LD_VAR 0 4
39941: PUSH
39942: LD_INT 3
39944: ARRAY
39945: GREATEREQUAL
39946: AND
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 3
39952: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
// pom := GetBase ( building ) ;
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 274
39973: ST_TO_ADDR
// if not pom then
39974: LD_VAR 0 3
39978: NOT
39979: IFFALSE 39983
// exit ;
39981: GO 40153
// btype := GetBType ( building ) ;
39983: LD_ADDR_VAR 0 5
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 266
39997: ST_TO_ADDR
// if btype = b_armoury then
39998: LD_VAR 0 5
40002: PUSH
40003: LD_INT 4
40005: EQUAL
40006: IFFALSE 40016
// btype := b_barracks ;
40008: LD_ADDR_VAR 0 5
40012: PUSH
40013: LD_INT 5
40015: ST_TO_ADDR
// if btype = b_depot then
40016: LD_VAR 0 5
40020: PUSH
40021: LD_INT 0
40023: EQUAL
40024: IFFALSE 40034
// btype := b_warehouse ;
40026: LD_ADDR_VAR 0 5
40030: PUSH
40031: LD_INT 1
40033: ST_TO_ADDR
// if btype = b_workshop then
40034: LD_VAR 0 5
40038: PUSH
40039: LD_INT 2
40041: EQUAL
40042: IFFALSE 40052
// btype := b_factory ;
40044: LD_ADDR_VAR 0 5
40048: PUSH
40049: LD_INT 3
40051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40052: LD_ADDR_VAR 0 4
40056: PUSH
40057: LD_VAR 0 5
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 248
40071: PPUSH
40072: CALL_OW 450
40076: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40077: LD_ADDR_VAR 0 2
40081: PUSH
40082: LD_VAR 0 3
40086: PPUSH
40087: LD_INT 1
40089: PPUSH
40090: CALL_OW 275
40094: PUSH
40095: LD_VAR 0 4
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: GREATEREQUAL
40104: PUSH
40105: LD_VAR 0 3
40109: PPUSH
40110: LD_INT 2
40112: PPUSH
40113: CALL_OW 275
40117: PUSH
40118: LD_VAR 0 4
40122: PUSH
40123: LD_INT 2
40125: ARRAY
40126: GREATEREQUAL
40127: AND
40128: PUSH
40129: LD_VAR 0 3
40133: PPUSH
40134: LD_INT 3
40136: PPUSH
40137: CALL_OW 275
40141: PUSH
40142: LD_VAR 0 4
40146: PUSH
40147: LD_INT 3
40149: ARRAY
40150: GREATEREQUAL
40151: AND
40152: ST_TO_ADDR
// end ;
40153: LD_VAR 0 2
40157: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
// pom := GetBase ( building ) ;
40163: LD_ADDR_VAR 0 4
40167: PUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 274
40177: ST_TO_ADDR
// if not pom then
40178: LD_VAR 0 4
40182: NOT
40183: IFFALSE 40187
// exit ;
40185: GO 40288
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40187: LD_ADDR_VAR 0 5
40191: PUSH
40192: LD_VAR 0 2
40196: PPUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 248
40206: PPUSH
40207: CALL_OW 450
40211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40212: LD_ADDR_VAR 0 3
40216: PUSH
40217: LD_VAR 0 4
40221: PPUSH
40222: LD_INT 1
40224: PPUSH
40225: CALL_OW 275
40229: PUSH
40230: LD_VAR 0 5
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: GREATEREQUAL
40239: PUSH
40240: LD_VAR 0 4
40244: PPUSH
40245: LD_INT 2
40247: PPUSH
40248: CALL_OW 275
40252: PUSH
40253: LD_VAR 0 5
40257: PUSH
40258: LD_INT 2
40260: ARRAY
40261: GREATEREQUAL
40262: AND
40263: PUSH
40264: LD_VAR 0 4
40268: PPUSH
40269: LD_INT 3
40271: PPUSH
40272: CALL_OW 275
40276: PUSH
40277: LD_VAR 0 5
40281: PUSH
40282: LD_INT 3
40284: ARRAY
40285: GREATEREQUAL
40286: AND
40287: ST_TO_ADDR
// end ;
40288: LD_VAR 0 3
40292: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
// result := false ;
40306: LD_ADDR_VAR 0 8
40310: PUSH
40311: LD_INT 0
40313: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40314: LD_VAR 0 5
40318: NOT
40319: PUSH
40320: LD_VAR 0 1
40324: NOT
40325: OR
40326: PUSH
40327: LD_VAR 0 2
40331: NOT
40332: OR
40333: PUSH
40334: LD_VAR 0 3
40338: NOT
40339: OR
40340: IFFALSE 40344
// exit ;
40342: GO 41158
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40344: LD_ADDR_VAR 0 14
40348: PUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: LD_VAR 0 3
40363: PPUSH
40364: LD_VAR 0 4
40368: PPUSH
40369: LD_VAR 0 5
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PPUSH
40378: CALL_OW 248
40382: PPUSH
40383: LD_INT 0
40385: PPUSH
40386: CALL 42395 0 6
40390: ST_TO_ADDR
// if not hexes then
40391: LD_VAR 0 14
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 41158
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40400: LD_ADDR_VAR 0 17
40404: PUSH
40405: LD_VAR 0 5
40409: PPUSH
40410: LD_INT 22
40412: PUSH
40413: LD_VAR 0 13
40417: PPUSH
40418: CALL_OW 255
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 30
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 30
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PPUSH
40459: CALL_OW 72
40463: ST_TO_ADDR
// for i = 1 to hexes do
40464: LD_ADDR_VAR 0 9
40468: PUSH
40469: DOUBLE
40470: LD_INT 1
40472: DEC
40473: ST_TO_ADDR
40474: LD_VAR 0 14
40478: PUSH
40479: FOR_TO
40480: IFFALSE 41156
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40482: LD_ADDR_VAR 0 13
40486: PUSH
40487: LD_VAR 0 14
40491: PUSH
40492: LD_VAR 0 9
40496: ARRAY
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PPUSH
40502: LD_VAR 0 14
40506: PUSH
40507: LD_VAR 0 9
40511: ARRAY
40512: PUSH
40513: LD_INT 2
40515: ARRAY
40516: PPUSH
40517: CALL_OW 428
40521: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40522: LD_VAR 0 14
40526: PUSH
40527: LD_VAR 0 9
40531: ARRAY
40532: PUSH
40533: LD_INT 1
40535: ARRAY
40536: PPUSH
40537: LD_VAR 0 14
40541: PUSH
40542: LD_VAR 0 9
40546: ARRAY
40547: PUSH
40548: LD_INT 2
40550: ARRAY
40551: PPUSH
40552: CALL_OW 351
40556: PUSH
40557: LD_VAR 0 14
40561: PUSH
40562: LD_VAR 0 9
40566: ARRAY
40567: PUSH
40568: LD_INT 1
40570: ARRAY
40571: PPUSH
40572: LD_VAR 0 14
40576: PUSH
40577: LD_VAR 0 9
40581: ARRAY
40582: PUSH
40583: LD_INT 2
40585: ARRAY
40586: PPUSH
40587: CALL_OW 488
40591: NOT
40592: OR
40593: PUSH
40594: LD_VAR 0 13
40598: PPUSH
40599: CALL_OW 247
40603: PUSH
40604: LD_INT 3
40606: EQUAL
40607: OR
40608: IFFALSE 40614
// exit ;
40610: POP
40611: POP
40612: GO 41158
// if not tmp then
40614: LD_VAR 0 13
40618: NOT
40619: IFFALSE 40623
// continue ;
40621: GO 40479
// result := true ;
40623: LD_ADDR_VAR 0 8
40627: PUSH
40628: LD_INT 1
40630: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40631: LD_VAR 0 6
40635: PUSH
40636: LD_VAR 0 13
40640: PPUSH
40641: CALL_OW 247
40645: PUSH
40646: LD_INT 2
40648: EQUAL
40649: AND
40650: PUSH
40651: LD_VAR 0 13
40655: PPUSH
40656: CALL_OW 263
40660: PUSH
40661: LD_INT 1
40663: EQUAL
40664: AND
40665: IFFALSE 40829
// begin if IsDrivenBy ( tmp ) then
40667: LD_VAR 0 13
40671: PPUSH
40672: CALL_OW 311
40676: IFFALSE 40680
// continue ;
40678: GO 40479
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40680: LD_VAR 0 6
40684: PPUSH
40685: LD_INT 3
40687: PUSH
40688: LD_INT 60
40690: PUSH
40691: EMPTY
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: LD_INT 55
40703: PUSH
40704: EMPTY
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL_OW 72
40719: IFFALSE 40827
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40721: LD_ADDR_VAR 0 18
40725: PUSH
40726: LD_VAR 0 6
40730: PPUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 60
40736: PUSH
40737: EMPTY
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 55
40749: PUSH
40750: EMPTY
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PPUSH
40761: CALL_OW 72
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: ST_TO_ADDR
// if IsInUnit ( driver ) then
40770: LD_VAR 0 18
40774: PPUSH
40775: CALL_OW 310
40779: IFFALSE 40790
// ComExit ( driver ) ;
40781: LD_VAR 0 18
40785: PPUSH
40786: CALL 65579 0 1
// AddComEnterUnit ( driver , tmp ) ;
40790: LD_VAR 0 18
40794: PPUSH
40795: LD_VAR 0 13
40799: PPUSH
40800: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40804: LD_VAR 0 18
40808: PPUSH
40809: LD_VAR 0 7
40813: PPUSH
40814: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40818: LD_VAR 0 18
40822: PPUSH
40823: CALL_OW 181
// end ; continue ;
40827: GO 40479
// end ; if not cleaners or not tmp in cleaners then
40829: LD_VAR 0 6
40833: NOT
40834: PUSH
40835: LD_VAR 0 13
40839: PUSH
40840: LD_VAR 0 6
40844: IN
40845: NOT
40846: OR
40847: IFFALSE 41154
// begin if dep then
40849: LD_VAR 0 17
40853: IFFALSE 40989
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40855: LD_ADDR_VAR 0 16
40859: PUSH
40860: LD_VAR 0 17
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: CALL_OW 250
40873: PPUSH
40874: LD_VAR 0 17
40878: PUSH
40879: LD_INT 1
40881: ARRAY
40882: PPUSH
40883: CALL_OW 254
40887: PPUSH
40888: LD_INT 5
40890: PPUSH
40891: CALL_OW 272
40895: PUSH
40896: LD_VAR 0 17
40900: PUSH
40901: LD_INT 1
40903: ARRAY
40904: PPUSH
40905: CALL_OW 251
40909: PPUSH
40910: LD_VAR 0 17
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: PPUSH
40919: CALL_OW 254
40923: PPUSH
40924: LD_INT 5
40926: PPUSH
40927: CALL_OW 273
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40936: LD_VAR 0 16
40940: PUSH
40941: LD_INT 1
40943: ARRAY
40944: PPUSH
40945: LD_VAR 0 16
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: PPUSH
40954: CALL_OW 488
40958: IFFALSE 40989
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40960: LD_VAR 0 13
40964: PPUSH
40965: LD_VAR 0 16
40969: PUSH
40970: LD_INT 1
40972: ARRAY
40973: PPUSH
40974: LD_VAR 0 16
40978: PUSH
40979: LD_INT 2
40981: ARRAY
40982: PPUSH
40983: CALL_OW 111
// continue ;
40987: GO 40479
// end ; end ; r := GetDir ( tmp ) ;
40989: LD_ADDR_VAR 0 15
40993: PUSH
40994: LD_VAR 0 13
40998: PPUSH
40999: CALL_OW 254
41003: ST_TO_ADDR
// if r = 5 then
41004: LD_VAR 0 15
41008: PUSH
41009: LD_INT 5
41011: EQUAL
41012: IFFALSE 41022
// r := 0 ;
41014: LD_ADDR_VAR 0 15
41018: PUSH
41019: LD_INT 0
41021: ST_TO_ADDR
// for j = r to 5 do
41022: LD_ADDR_VAR 0 10
41026: PUSH
41027: DOUBLE
41028: LD_VAR 0 15
41032: DEC
41033: ST_TO_ADDR
41034: LD_INT 5
41036: PUSH
41037: FOR_TO
41038: IFFALSE 41152
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41040: LD_ADDR_VAR 0 11
41044: PUSH
41045: LD_VAR 0 13
41049: PPUSH
41050: CALL_OW 250
41054: PPUSH
41055: LD_VAR 0 10
41059: PPUSH
41060: LD_INT 2
41062: PPUSH
41063: CALL_OW 272
41067: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41068: LD_ADDR_VAR 0 12
41072: PUSH
41073: LD_VAR 0 13
41077: PPUSH
41078: CALL_OW 251
41082: PPUSH
41083: LD_VAR 0 10
41087: PPUSH
41088: LD_INT 2
41090: PPUSH
41091: CALL_OW 273
41095: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41096: LD_VAR 0 11
41100: PPUSH
41101: LD_VAR 0 12
41105: PPUSH
41106: CALL_OW 488
41110: PUSH
41111: LD_VAR 0 11
41115: PPUSH
41116: LD_VAR 0 12
41120: PPUSH
41121: CALL_OW 428
41125: NOT
41126: AND
41127: IFFALSE 41150
// begin ComMoveXY ( tmp , _x , _y ) ;
41129: LD_VAR 0 13
41133: PPUSH
41134: LD_VAR 0 11
41138: PPUSH
41139: LD_VAR 0 12
41143: PPUSH
41144: CALL_OW 111
// break ;
41148: GO 41152
// end ; end ;
41150: GO 41037
41152: POP
41153: POP
// end ; end ;
41154: GO 40479
41156: POP
41157: POP
// end ;
41158: LD_VAR 0 8
41162: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41163: LD_INT 0
41165: PPUSH
// result := true ;
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: LD_INT 1
41173: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41174: LD_VAR 0 2
41178: PUSH
41179: LD_INT 24
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41193
41185: LD_INT 33
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41193
41191: GO 41218
41193: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 32
41201: PPUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 321
41211: PUSH
41212: LD_INT 2
41214: EQUAL
41215: ST_TO_ADDR
41216: GO 41538
41218: LD_INT 20
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41226
41224: GO 41251
41226: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41227: LD_ADDR_VAR 0 3
41231: PUSH
41232: LD_INT 6
41234: PPUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 321
41244: PUSH
41245: LD_INT 2
41247: EQUAL
41248: ST_TO_ADDR
41249: GO 41538
41251: LD_INT 22
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41265
41257: LD_INT 36
41259: DOUBLE
41260: EQUAL
41261: IFTRUE 41265
41263: GO 41290
41265: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41266: LD_ADDR_VAR 0 3
41270: PUSH
41271: LD_INT 15
41273: PPUSH
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 321
41283: PUSH
41284: LD_INT 2
41286: EQUAL
41287: ST_TO_ADDR
41288: GO 41538
41290: LD_INT 30
41292: DOUBLE
41293: EQUAL
41294: IFTRUE 41298
41296: GO 41323
41298: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_INT 20
41306: PPUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 321
41316: PUSH
41317: LD_INT 2
41319: EQUAL
41320: ST_TO_ADDR
41321: GO 41538
41323: LD_INT 28
41325: DOUBLE
41326: EQUAL
41327: IFTRUE 41337
41329: LD_INT 21
41331: DOUBLE
41332: EQUAL
41333: IFTRUE 41337
41335: GO 41362
41337: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_INT 21
41345: PPUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 321
41355: PUSH
41356: LD_INT 2
41358: EQUAL
41359: ST_TO_ADDR
41360: GO 41538
41362: LD_INT 16
41364: DOUBLE
41365: EQUAL
41366: IFTRUE 41370
41368: GO 41397
41370: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: LD_EXP 38
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 321
41390: PUSH
41391: LD_INT 2
41393: EQUAL
41394: ST_TO_ADDR
41395: GO 41538
41397: LD_INT 19
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41411
41403: LD_INT 23
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41438
41411: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41412: LD_ADDR_VAR 0 3
41416: PUSH
41417: LD_EXP 37
41421: PPUSH
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 321
41431: PUSH
41432: LD_INT 2
41434: EQUAL
41435: ST_TO_ADDR
41436: GO 41538
41438: LD_INT 17
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41471
41446: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41447: LD_ADDR_VAR 0 3
41451: PUSH
41452: LD_INT 39
41454: PPUSH
41455: LD_VAR 0 1
41459: PPUSH
41460: CALL_OW 321
41464: PUSH
41465: LD_INT 2
41467: EQUAL
41468: ST_TO_ADDR
41469: GO 41538
41471: LD_INT 18
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41504
41479: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_INT 40
41487: PPUSH
41488: LD_VAR 0 1
41492: PPUSH
41493: CALL_OW 321
41497: PUSH
41498: LD_INT 2
41500: EQUAL
41501: ST_TO_ADDR
41502: GO 41538
41504: LD_INT 27
41506: DOUBLE
41507: EQUAL
41508: IFTRUE 41512
41510: GO 41537
41512: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_INT 35
41520: PPUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 321
41530: PUSH
41531: LD_INT 2
41533: EQUAL
41534: ST_TO_ADDR
41535: GO 41538
41537: POP
// end ;
41538: LD_VAR 0 3
41542: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41543: LD_INT 0
41545: PPUSH
41546: PPUSH
41547: PPUSH
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
41552: PPUSH
41553: PPUSH
41554: PPUSH
41555: PPUSH
// result := false ;
41556: LD_ADDR_VAR 0 6
41560: PUSH
41561: LD_INT 0
41563: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41564: LD_VAR 0 1
41568: NOT
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 266
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: IN
41590: NOT
41591: OR
41592: PUSH
41593: LD_VAR 0 2
41597: NOT
41598: OR
41599: PUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: LD_INT 4
41619: PUSH
41620: LD_INT 5
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: IN
41631: NOT
41632: OR
41633: PUSH
41634: LD_VAR 0 3
41638: PPUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 488
41648: NOT
41649: OR
41650: IFFALSE 41654
// exit ;
41652: GO 42390
// side := GetSide ( depot ) ;
41654: LD_ADDR_VAR 0 9
41658: PUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: CALL_OW 255
41668: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41669: LD_VAR 0 9
41673: PPUSH
41674: LD_VAR 0 2
41678: PPUSH
41679: CALL 41163 0 2
41683: NOT
41684: IFFALSE 41688
// exit ;
41686: GO 42390
// pom := GetBase ( depot ) ;
41688: LD_ADDR_VAR 0 10
41692: PUSH
41693: LD_VAR 0 1
41697: PPUSH
41698: CALL_OW 274
41702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41703: LD_ADDR_VAR 0 11
41707: PUSH
41708: LD_VAR 0 2
41712: PPUSH
41713: LD_VAR 0 1
41717: PPUSH
41718: CALL_OW 248
41722: PPUSH
41723: CALL_OW 450
41727: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41728: LD_VAR 0 10
41732: PPUSH
41733: LD_INT 1
41735: PPUSH
41736: CALL_OW 275
41740: PUSH
41741: LD_VAR 0 11
41745: PUSH
41746: LD_INT 1
41748: ARRAY
41749: GREATEREQUAL
41750: PUSH
41751: LD_VAR 0 10
41755: PPUSH
41756: LD_INT 2
41758: PPUSH
41759: CALL_OW 275
41763: PUSH
41764: LD_VAR 0 11
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: GREATEREQUAL
41773: AND
41774: PUSH
41775: LD_VAR 0 10
41779: PPUSH
41780: LD_INT 3
41782: PPUSH
41783: CALL_OW 275
41787: PUSH
41788: LD_VAR 0 11
41792: PUSH
41793: LD_INT 3
41795: ARRAY
41796: GREATEREQUAL
41797: AND
41798: NOT
41799: IFFALSE 41803
// exit ;
41801: GO 42390
// if GetBType ( depot ) = b_depot then
41803: LD_VAR 0 1
41807: PPUSH
41808: CALL_OW 266
41812: PUSH
41813: LD_INT 0
41815: EQUAL
41816: IFFALSE 41828
// dist := 28 else
41818: LD_ADDR_VAR 0 14
41822: PUSH
41823: LD_INT 28
41825: ST_TO_ADDR
41826: GO 41836
// dist := 36 ;
41828: LD_ADDR_VAR 0 14
41832: PUSH
41833: LD_INT 36
41835: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41836: LD_VAR 0 1
41840: PPUSH
41841: LD_VAR 0 3
41845: PPUSH
41846: LD_VAR 0 4
41850: PPUSH
41851: CALL_OW 297
41855: PUSH
41856: LD_VAR 0 14
41860: GREATER
41861: IFFALSE 41865
// exit ;
41863: GO 42390
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41865: LD_ADDR_VAR 0 12
41869: PUSH
41870: LD_VAR 0 2
41874: PPUSH
41875: LD_VAR 0 3
41879: PPUSH
41880: LD_VAR 0 4
41884: PPUSH
41885: LD_VAR 0 5
41889: PPUSH
41890: LD_VAR 0 1
41894: PPUSH
41895: CALL_OW 248
41899: PPUSH
41900: LD_INT 0
41902: PPUSH
41903: CALL 42395 0 6
41907: ST_TO_ADDR
// if not hexes then
41908: LD_VAR 0 12
41912: NOT
41913: IFFALSE 41917
// exit ;
41915: GO 42390
// hex := GetHexInfo ( x , y ) ;
41917: LD_ADDR_VAR 0 15
41921: PUSH
41922: LD_VAR 0 3
41926: PPUSH
41927: LD_VAR 0 4
41931: PPUSH
41932: CALL_OW 546
41936: ST_TO_ADDR
// if hex [ 1 ] then
41937: LD_VAR 0 15
41941: PUSH
41942: LD_INT 1
41944: ARRAY
41945: IFFALSE 41949
// exit ;
41947: GO 42390
// height := hex [ 2 ] ;
41949: LD_ADDR_VAR 0 13
41953: PUSH
41954: LD_VAR 0 15
41958: PUSH
41959: LD_INT 2
41961: ARRAY
41962: ST_TO_ADDR
// for i = 1 to hexes do
41963: LD_ADDR_VAR 0 7
41967: PUSH
41968: DOUBLE
41969: LD_INT 1
41971: DEC
41972: ST_TO_ADDR
41973: LD_VAR 0 12
41977: PUSH
41978: FOR_TO
41979: IFFALSE 42309
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41981: LD_VAR 0 12
41985: PUSH
41986: LD_VAR 0 7
41990: ARRAY
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: PPUSH
41996: LD_VAR 0 12
42000: PUSH
42001: LD_VAR 0 7
42005: ARRAY
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: PPUSH
42011: CALL_OW 488
42015: NOT
42016: PUSH
42017: LD_VAR 0 12
42021: PUSH
42022: LD_VAR 0 7
42026: ARRAY
42027: PUSH
42028: LD_INT 1
42030: ARRAY
42031: PPUSH
42032: LD_VAR 0 12
42036: PUSH
42037: LD_VAR 0 7
42041: ARRAY
42042: PUSH
42043: LD_INT 2
42045: ARRAY
42046: PPUSH
42047: CALL_OW 428
42051: PUSH
42052: LD_INT 0
42054: GREATER
42055: OR
42056: PUSH
42057: LD_VAR 0 12
42061: PUSH
42062: LD_VAR 0 7
42066: ARRAY
42067: PUSH
42068: LD_INT 1
42070: ARRAY
42071: PPUSH
42072: LD_VAR 0 12
42076: PUSH
42077: LD_VAR 0 7
42081: ARRAY
42082: PUSH
42083: LD_INT 2
42085: ARRAY
42086: PPUSH
42087: CALL_OW 351
42091: OR
42092: IFFALSE 42098
// exit ;
42094: POP
42095: POP
42096: GO 42390
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42098: LD_ADDR_VAR 0 8
42102: PUSH
42103: LD_VAR 0 12
42107: PUSH
42108: LD_VAR 0 7
42112: ARRAY
42113: PUSH
42114: LD_INT 1
42116: ARRAY
42117: PPUSH
42118: LD_VAR 0 12
42122: PUSH
42123: LD_VAR 0 7
42127: ARRAY
42128: PUSH
42129: LD_INT 2
42131: ARRAY
42132: PPUSH
42133: CALL_OW 546
42137: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42138: LD_VAR 0 8
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: PUSH
42147: LD_VAR 0 8
42151: PUSH
42152: LD_INT 2
42154: ARRAY
42155: PUSH
42156: LD_VAR 0 13
42160: PUSH
42161: LD_INT 2
42163: PLUS
42164: GREATER
42165: OR
42166: PUSH
42167: LD_VAR 0 8
42171: PUSH
42172: LD_INT 2
42174: ARRAY
42175: PUSH
42176: LD_VAR 0 13
42180: PUSH
42181: LD_INT 2
42183: MINUS
42184: LESS
42185: OR
42186: PUSH
42187: LD_VAR 0 8
42191: PUSH
42192: LD_INT 3
42194: ARRAY
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 8
42201: PUSH
42202: LD_INT 9
42204: PUSH
42205: LD_INT 10
42207: PUSH
42208: LD_INT 11
42210: PUSH
42211: LD_INT 12
42213: PUSH
42214: LD_INT 13
42216: PUSH
42217: LD_INT 16
42219: PUSH
42220: LD_INT 17
42222: PUSH
42223: LD_INT 18
42225: PUSH
42226: LD_INT 19
42228: PUSH
42229: LD_INT 20
42231: PUSH
42232: LD_INT 21
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: IN
42250: NOT
42251: OR
42252: PUSH
42253: LD_VAR 0 8
42257: PUSH
42258: LD_INT 5
42260: ARRAY
42261: NOT
42262: OR
42263: PUSH
42264: LD_VAR 0 8
42268: PUSH
42269: LD_INT 6
42271: ARRAY
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 7
42281: PUSH
42282: LD_INT 9
42284: PUSH
42285: LD_INT 10
42287: PUSH
42288: LD_INT 11
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: IN
42299: NOT
42300: OR
42301: IFFALSE 42307
// exit ;
42303: POP
42304: POP
42305: GO 42390
// end ;
42307: GO 41978
42309: POP
42310: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42311: LD_VAR 0 9
42315: PPUSH
42316: LD_VAR 0 3
42320: PPUSH
42321: LD_VAR 0 4
42325: PPUSH
42326: LD_INT 20
42328: PPUSH
42329: CALL 34335 0 4
42333: PUSH
42334: LD_INT 4
42336: ARRAY
42337: IFFALSE 42341
// exit ;
42339: GO 42390
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42341: LD_VAR 0 2
42345: PUSH
42346: LD_INT 29
42348: PUSH
42349: LD_INT 30
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: IN
42356: PUSH
42357: LD_VAR 0 3
42361: PPUSH
42362: LD_VAR 0 4
42366: PPUSH
42367: LD_VAR 0 9
42371: PPUSH
42372: CALL_OW 440
42376: NOT
42377: AND
42378: IFFALSE 42382
// exit ;
42380: GO 42390
// result := true ;
42382: LD_ADDR_VAR 0 6
42386: PUSH
42387: LD_INT 1
42389: ST_TO_ADDR
// end ;
42390: LD_VAR 0 6
42394: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42395: LD_INT 0
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
42423: PPUSH
42424: PPUSH
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
// result = [ ] ;
42455: LD_ADDR_VAR 0 7
42459: PUSH
42460: EMPTY
42461: ST_TO_ADDR
// temp_list = [ ] ;
42462: LD_ADDR_VAR 0 9
42466: PUSH
42467: EMPTY
42468: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42469: LD_VAR 0 4
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: LD_INT 5
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: IN
42500: NOT
42501: PUSH
42502: LD_VAR 0 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: IN
42517: PUSH
42518: LD_VAR 0 5
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 3
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: IN
42537: NOT
42538: AND
42539: OR
42540: IFFALSE 42544
// exit ;
42542: GO 60935
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42544: LD_VAR 0 1
42548: PUSH
42549: LD_INT 6
42551: PUSH
42552: LD_INT 7
42554: PUSH
42555: LD_INT 8
42557: PUSH
42558: LD_INT 13
42560: PUSH
42561: LD_INT 12
42563: PUSH
42564: LD_INT 15
42566: PUSH
42567: LD_INT 11
42569: PUSH
42570: LD_INT 14
42572: PUSH
42573: LD_INT 10
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: IN
42587: IFFALSE 42597
// btype = b_lab ;
42589: LD_ADDR_VAR 0 1
42593: PUSH
42594: LD_INT 6
42596: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42597: LD_VAR 0 6
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: IN
42616: NOT
42617: PUSH
42618: LD_VAR 0 1
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 3
42634: PUSH
42635: LD_INT 6
42637: PUSH
42638: LD_INT 36
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: LD_INT 5
42646: PUSH
42647: LD_INT 31
42649: PUSH
42650: LD_INT 32
42652: PUSH
42653: LD_INT 33
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: IN
42669: NOT
42670: PUSH
42671: LD_VAR 0 6
42675: PUSH
42676: LD_INT 1
42678: EQUAL
42679: AND
42680: OR
42681: PUSH
42682: LD_VAR 0 1
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: IN
42697: NOT
42698: PUSH
42699: LD_VAR 0 6
42703: PUSH
42704: LD_INT 2
42706: EQUAL
42707: AND
42708: OR
42709: IFFALSE 42719
// mode = 0 ;
42711: LD_ADDR_VAR 0 6
42715: PUSH
42716: LD_INT 0
42718: ST_TO_ADDR
// case mode of 0 :
42719: LD_VAR 0 6
42723: PUSH
42724: LD_INT 0
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 54185
42732: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42733: LD_ADDR_VAR 0 11
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42926: LD_ADDR_VAR 0 12
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 3
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43122: LD_ADDR_VAR 0 13
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: LD_INT 3
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 3
43293: NEG
43294: PUSH
43295: LD_INT 3
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43321: LD_ADDR_VAR 0 14
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43517: LD_ADDR_VAR 0 15
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43710: LD_ADDR_VAR 0 16
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43903: LD_ADDR_VAR 0 17
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44133: LD_ADDR_VAR 0 18
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44363: LD_ADDR_VAR 0 19
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44593: LD_ADDR_VAR 0 20
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44823: LD_ADDR_VAR 0 21
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45053: LD_ADDR_VAR 0 22
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45283: LD_ADDR_VAR 0 23
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45563: LD_ADDR_VAR 0 24
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45839: LD_ADDR_VAR 0 25
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46113: LD_ADDR_VAR 0 26
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46389: LD_ADDR_VAR 0 27
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46669: LD_ADDR_VAR 0 28
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46951: LD_ADDR_VAR 0 29
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 3
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47230: LD_ADDR_VAR 0 30
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47508: LD_ADDR_VAR 0 31
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47786: LD_ADDR_VAR 0 32
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48064: LD_ADDR_VAR 0 33
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48343: LD_ADDR_VAR 0 34
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48623: LD_ADDR_VAR 0 35
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48735: LD_ADDR_VAR 0 36
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48847: LD_ADDR_VAR 0 37
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48959: LD_ADDR_VAR 0 38
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49071: LD_ADDR_VAR 0 39
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49183: LD_ADDR_VAR 0 40
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49295: LD_ADDR_VAR 0 41
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49645: LD_ADDR_VAR 0 42
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49995: LD_ADDR_VAR 0 43
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50343: LD_ADDR_VAR 0 44
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50693: LD_ADDR_VAR 0 45
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 3
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51043: LD_ADDR_VAR 0 46
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51391: LD_ADDR_VAR 0 47
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51542: LD_ADDR_VAR 0 48
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51689: LD_ADDR_VAR 0 49
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51833: LD_ADDR_VAR 0 50
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51977: LD_ADDR_VAR 0 51
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52124: LD_ADDR_VAR 0 52
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52275: LD_ADDR_VAR 0 53
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52505: LD_ADDR_VAR 0 54
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52735: LD_ADDR_VAR 0 55
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52965: LD_ADDR_VAR 0 56
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53195: LD_ADDR_VAR 0 57
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53425: LD_ADDR_VAR 0 58
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53655: LD_ADDR_VAR 0 59
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53743: LD_ADDR_VAR 0 60
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53831: LD_ADDR_VAR 0 61
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53919: LD_ADDR_VAR 0 62
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54007: LD_ADDR_VAR 0 63
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54095: LD_ADDR_VAR 0 64
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// end ; 1 :
54183: GO 60080
54185: LD_INT 1
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54193
54191: GO 56816
54193: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54194: LD_ADDR_VAR 0 11
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54238: LD_ADDR_VAR 0 12
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54279: LD_ADDR_VAR 0 13
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54319: LD_ADDR_VAR 0 14
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54360: LD_ADDR_VAR 0 15
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54404: LD_ADDR_VAR 0 16
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54450: LD_ADDR_VAR 0 17
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 3
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54494: LD_ADDR_VAR 0 18
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54535: LD_ADDR_VAR 0 19
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54575: LD_ADDR_VAR 0 20
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54616: LD_ADDR_VAR 0 21
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54660: LD_ADDR_VAR 0 22
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54706: LD_ADDR_VAR 0 23
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 4
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54750: LD_ADDR_VAR 0 24
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 4
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54791: LD_ADDR_VAR 0 25
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 4
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54831: LD_ADDR_VAR 0 26
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 4
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54872: LD_ADDR_VAR 0 27
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54916: LD_ADDR_VAR 0 28
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54962: LD_ADDR_VAR 0 29
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 4
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 4
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 5
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 5
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 6
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 6
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 5
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55117: LD_ADDR_VAR 0 30
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 4
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 4
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 4
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 5
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 5
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 6
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 6
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55260: LD_ADDR_VAR 0 31
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: PUSH
55338: LD_INT 5
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: PUSH
55348: LD_INT 5
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 6
55357: PUSH
55358: LD_INT 5
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 6
55367: PUSH
55368: LD_INT 6
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: PUSH
55378: LD_INT 6
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55399: LD_ADDR_VAR 0 32
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 4
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 4
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 5
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 6
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 6
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 5
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55542: LD_ADDR_VAR 0 33
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 4
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 4
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 5
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 5
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 6
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 6
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55697: LD_ADDR_VAR 0 34
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: LD_INT 4
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 4
55752: NEG
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: LD_INT 4
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: LD_INT 5
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 5
55800: NEG
55801: PUSH
55802: LD_INT 5
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 5
55812: NEG
55813: PUSH
55814: LD_INT 6
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 6
55824: NEG
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 6
55836: NEG
55837: PUSH
55838: LD_INT 6
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55860: LD_ADDR_VAR 0 41
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55904: LD_ADDR_VAR 0 42
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55945: LD_ADDR_VAR 0 43
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55985: LD_ADDR_VAR 0 44
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56026: LD_ADDR_VAR 0 45
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56070: LD_ADDR_VAR 0 46
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56116: LD_ADDR_VAR 0 47
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56149: LD_ADDR_VAR 0 48
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56180: LD_ADDR_VAR 0 49
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56209: LD_ADDR_VAR 0 50
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56238: LD_ADDR_VAR 0 51
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56269: LD_ADDR_VAR 0 52
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56302: LD_ADDR_VAR 0 53
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56346: LD_ADDR_VAR 0 54
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56387: LD_ADDR_VAR 0 55
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56427: LD_ADDR_VAR 0 56
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56468: LD_ADDR_VAR 0 57
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56512: LD_ADDR_VAR 0 58
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 59
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56602: LD_ADDR_VAR 0 60
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56643: LD_ADDR_VAR 0 61
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56683: LD_ADDR_VAR 0 62
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56724: LD_ADDR_VAR 0 63
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56768: LD_ADDR_VAR 0 64
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// end ; 2 :
56814: GO 60080
56816: LD_INT 2
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56824
56822: GO 60079
56824: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56825: LD_ADDR_VAR 0 29
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 5
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 4
56955: PUSH
56956: LD_INT 4
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 4
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 4
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 4
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 5
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 5
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 5
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 4
57164: NEG
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 4
57210: NEG
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 4
57222: NEG
57223: PUSH
57224: LD_INT 5
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 4
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 5
57270: NEG
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 5
57282: NEG
57283: PUSH
57284: LD_INT 5
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 5
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 5
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57363: LD_ADDR_VAR 0 30
57367: PUSH
57368: LD_INT 4
57370: PUSH
57371: LD_INT 4
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: LD_INT 4
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 5
57400: PUSH
57401: LD_INT 5
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 4
57410: PUSH
57411: LD_INT 5
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 4
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 5
57440: PUSH
57441: LD_INT 3
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 5
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 4
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 4
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 5
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 4
57715: NEG
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 4
57727: NEG
57728: PUSH
57729: LD_INT 4
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 4
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 5
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 4
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 5
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 5
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57910: LD_ADDR_VAR 0 31
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 5
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 4
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 4
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: NEG
58113: PUSH
58114: LD_INT 4
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 5
58172: NEG
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 5
58184: NEG
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 5
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 4
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 5
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58460: LD_ADDR_VAR 0 32
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 5
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 5
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 4
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 4
58629: NEG
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 4
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 4
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 4
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 4
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 5
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 3
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: LD_INT 4
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 4
58882: PUSH
58883: LD_INT 3
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: PUSH
58893: LD_INT 4
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: PUSH
58903: LD_INT 5
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: PUSH
58913: LD_INT 5
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: PUSH
58953: LD_INT 5
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59007: LD_ADDR_VAR 0 33
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: LD_INT 4
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 4
59026: NEG
59027: PUSH
59028: LD_INT 5
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 5
59074: NEG
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: LD_INT 5
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: LD_INT 5
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 4
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 4
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 5
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: PUSH
59348: LD_INT 4
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: LD_INT 4
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 4
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 4
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 5
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 5
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: LD_INT 5
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59545: LD_ADDR_VAR 0 34
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 5
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 4
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 5
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: LD_INT 5
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 4
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 4
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 4
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 4
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 5
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 5
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 5
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// end ; end ;
60077: GO 60080
60079: POP
// case btype of b_depot , b_warehouse :
60080: LD_VAR 0 1
60084: PUSH
60085: LD_INT 0
60087: DOUBLE
60088: EQUAL
60089: IFTRUE 60099
60091: LD_INT 1
60093: DOUBLE
60094: EQUAL
60095: IFTRUE 60099
60097: GO 60300
60099: POP
// case nation of nation_american :
60100: LD_VAR 0 5
60104: PUSH
60105: LD_INT 1
60107: DOUBLE
60108: EQUAL
60109: IFTRUE 60113
60111: GO 60169
60113: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60114: LD_ADDR_VAR 0 9
60118: PUSH
60119: LD_VAR 0 11
60123: PUSH
60124: LD_VAR 0 12
60128: PUSH
60129: LD_VAR 0 13
60133: PUSH
60134: LD_VAR 0 14
60138: PUSH
60139: LD_VAR 0 15
60143: PUSH
60144: LD_VAR 0 16
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: LD_VAR 0 4
60161: PUSH
60162: LD_INT 1
60164: PLUS
60165: ARRAY
60166: ST_TO_ADDR
60167: GO 60298
60169: LD_INT 2
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60177
60175: GO 60233
60177: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60178: LD_ADDR_VAR 0 9
60182: PUSH
60183: LD_VAR 0 17
60187: PUSH
60188: LD_VAR 0 18
60192: PUSH
60193: LD_VAR 0 19
60197: PUSH
60198: LD_VAR 0 20
60202: PUSH
60203: LD_VAR 0 21
60207: PUSH
60208: LD_VAR 0 22
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: PUSH
60221: LD_VAR 0 4
60225: PUSH
60226: LD_INT 1
60228: PLUS
60229: ARRAY
60230: ST_TO_ADDR
60231: GO 60298
60233: LD_INT 3
60235: DOUBLE
60236: EQUAL
60237: IFTRUE 60241
60239: GO 60297
60241: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60242: LD_ADDR_VAR 0 9
60246: PUSH
60247: LD_VAR 0 23
60251: PUSH
60252: LD_VAR 0 24
60256: PUSH
60257: LD_VAR 0 25
60261: PUSH
60262: LD_VAR 0 26
60266: PUSH
60267: LD_VAR 0 27
60271: PUSH
60272: LD_VAR 0 28
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: LD_VAR 0 4
60289: PUSH
60290: LD_INT 1
60292: PLUS
60293: ARRAY
60294: ST_TO_ADDR
60295: GO 60298
60297: POP
60298: GO 60853
60300: LD_INT 2
60302: DOUBLE
60303: EQUAL
60304: IFTRUE 60314
60306: LD_INT 3
60308: DOUBLE
60309: EQUAL
60310: IFTRUE 60314
60312: GO 60370
60314: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60315: LD_ADDR_VAR 0 9
60319: PUSH
60320: LD_VAR 0 29
60324: PUSH
60325: LD_VAR 0 30
60329: PUSH
60330: LD_VAR 0 31
60334: PUSH
60335: LD_VAR 0 32
60339: PUSH
60340: LD_VAR 0 33
60344: PUSH
60345: LD_VAR 0 34
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: PUSH
60358: LD_VAR 0 4
60362: PUSH
60363: LD_INT 1
60365: PLUS
60366: ARRAY
60367: ST_TO_ADDR
60368: GO 60853
60370: LD_INT 16
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60432
60376: LD_INT 17
60378: DOUBLE
60379: EQUAL
60380: IFTRUE 60432
60382: LD_INT 18
60384: DOUBLE
60385: EQUAL
60386: IFTRUE 60432
60388: LD_INT 19
60390: DOUBLE
60391: EQUAL
60392: IFTRUE 60432
60394: LD_INT 22
60396: DOUBLE
60397: EQUAL
60398: IFTRUE 60432
60400: LD_INT 20
60402: DOUBLE
60403: EQUAL
60404: IFTRUE 60432
60406: LD_INT 21
60408: DOUBLE
60409: EQUAL
60410: IFTRUE 60432
60412: LD_INT 23
60414: DOUBLE
60415: EQUAL
60416: IFTRUE 60432
60418: LD_INT 24
60420: DOUBLE
60421: EQUAL
60422: IFTRUE 60432
60424: LD_INT 25
60426: DOUBLE
60427: EQUAL
60428: IFTRUE 60432
60430: GO 60488
60432: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60433: LD_ADDR_VAR 0 9
60437: PUSH
60438: LD_VAR 0 35
60442: PUSH
60443: LD_VAR 0 36
60447: PUSH
60448: LD_VAR 0 37
60452: PUSH
60453: LD_VAR 0 38
60457: PUSH
60458: LD_VAR 0 39
60462: PUSH
60463: LD_VAR 0 40
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: PUSH
60476: LD_VAR 0 4
60480: PUSH
60481: LD_INT 1
60483: PLUS
60484: ARRAY
60485: ST_TO_ADDR
60486: GO 60853
60488: LD_INT 6
60490: DOUBLE
60491: EQUAL
60492: IFTRUE 60544
60494: LD_INT 7
60496: DOUBLE
60497: EQUAL
60498: IFTRUE 60544
60500: LD_INT 8
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60544
60506: LD_INT 13
60508: DOUBLE
60509: EQUAL
60510: IFTRUE 60544
60512: LD_INT 12
60514: DOUBLE
60515: EQUAL
60516: IFTRUE 60544
60518: LD_INT 15
60520: DOUBLE
60521: EQUAL
60522: IFTRUE 60544
60524: LD_INT 11
60526: DOUBLE
60527: EQUAL
60528: IFTRUE 60544
60530: LD_INT 14
60532: DOUBLE
60533: EQUAL
60534: IFTRUE 60544
60536: LD_INT 10
60538: DOUBLE
60539: EQUAL
60540: IFTRUE 60544
60542: GO 60600
60544: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60545: LD_ADDR_VAR 0 9
60549: PUSH
60550: LD_VAR 0 41
60554: PUSH
60555: LD_VAR 0 42
60559: PUSH
60560: LD_VAR 0 43
60564: PUSH
60565: LD_VAR 0 44
60569: PUSH
60570: LD_VAR 0 45
60574: PUSH
60575: LD_VAR 0 46
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: PUSH
60588: LD_VAR 0 4
60592: PUSH
60593: LD_INT 1
60595: PLUS
60596: ARRAY
60597: ST_TO_ADDR
60598: GO 60853
60600: LD_INT 36
60602: DOUBLE
60603: EQUAL
60604: IFTRUE 60608
60606: GO 60664
60608: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60609: LD_ADDR_VAR 0 9
60613: PUSH
60614: LD_VAR 0 47
60618: PUSH
60619: LD_VAR 0 48
60623: PUSH
60624: LD_VAR 0 49
60628: PUSH
60629: LD_VAR 0 50
60633: PUSH
60634: LD_VAR 0 51
60638: PUSH
60639: LD_VAR 0 52
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: PUSH
60652: LD_VAR 0 4
60656: PUSH
60657: LD_INT 1
60659: PLUS
60660: ARRAY
60661: ST_TO_ADDR
60662: GO 60853
60664: LD_INT 4
60666: DOUBLE
60667: EQUAL
60668: IFTRUE 60690
60670: LD_INT 5
60672: DOUBLE
60673: EQUAL
60674: IFTRUE 60690
60676: LD_INT 34
60678: DOUBLE
60679: EQUAL
60680: IFTRUE 60690
60682: LD_INT 37
60684: DOUBLE
60685: EQUAL
60686: IFTRUE 60690
60688: GO 60746
60690: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60691: LD_ADDR_VAR 0 9
60695: PUSH
60696: LD_VAR 0 53
60700: PUSH
60701: LD_VAR 0 54
60705: PUSH
60706: LD_VAR 0 55
60710: PUSH
60711: LD_VAR 0 56
60715: PUSH
60716: LD_VAR 0 57
60720: PUSH
60721: LD_VAR 0 58
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: PUSH
60734: LD_VAR 0 4
60738: PUSH
60739: LD_INT 1
60741: PLUS
60742: ARRAY
60743: ST_TO_ADDR
60744: GO 60853
60746: LD_INT 31
60748: DOUBLE
60749: EQUAL
60750: IFTRUE 60796
60752: LD_INT 32
60754: DOUBLE
60755: EQUAL
60756: IFTRUE 60796
60758: LD_INT 33
60760: DOUBLE
60761: EQUAL
60762: IFTRUE 60796
60764: LD_INT 27
60766: DOUBLE
60767: EQUAL
60768: IFTRUE 60796
60770: LD_INT 26
60772: DOUBLE
60773: EQUAL
60774: IFTRUE 60796
60776: LD_INT 28
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60796
60782: LD_INT 29
60784: DOUBLE
60785: EQUAL
60786: IFTRUE 60796
60788: LD_INT 30
60790: DOUBLE
60791: EQUAL
60792: IFTRUE 60796
60794: GO 60852
60796: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60797: LD_ADDR_VAR 0 9
60801: PUSH
60802: LD_VAR 0 59
60806: PUSH
60807: LD_VAR 0 60
60811: PUSH
60812: LD_VAR 0 61
60816: PUSH
60817: LD_VAR 0 62
60821: PUSH
60822: LD_VAR 0 63
60826: PUSH
60827: LD_VAR 0 64
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: PUSH
60840: LD_VAR 0 4
60844: PUSH
60845: LD_INT 1
60847: PLUS
60848: ARRAY
60849: ST_TO_ADDR
60850: GO 60853
60852: POP
// temp_list2 = [ ] ;
60853: LD_ADDR_VAR 0 10
60857: PUSH
60858: EMPTY
60859: ST_TO_ADDR
// for i in temp_list do
60860: LD_ADDR_VAR 0 8
60864: PUSH
60865: LD_VAR 0 9
60869: PUSH
60870: FOR_IN
60871: IFFALSE 60923
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60873: LD_ADDR_VAR 0 10
60877: PUSH
60878: LD_VAR 0 10
60882: PUSH
60883: LD_VAR 0 8
60887: PUSH
60888: LD_INT 1
60890: ARRAY
60891: PUSH
60892: LD_VAR 0 2
60896: PLUS
60897: PUSH
60898: LD_VAR 0 8
60902: PUSH
60903: LD_INT 2
60905: ARRAY
60906: PUSH
60907: LD_VAR 0 3
60911: PLUS
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: EMPTY
60918: LIST
60919: ADD
60920: ST_TO_ADDR
60921: GO 60870
60923: POP
60924: POP
// result = temp_list2 ;
60925: LD_ADDR_VAR 0 7
60929: PUSH
60930: LD_VAR 0 10
60934: ST_TO_ADDR
// end ;
60935: LD_VAR 0 7
60939: RET
// export function EnemyInRange ( unit , dist ) ; begin
60940: LD_INT 0
60942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60943: LD_ADDR_VAR 0 3
60947: PUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: CALL_OW 255
60957: PPUSH
60958: LD_VAR 0 1
60962: PPUSH
60963: CALL_OW 250
60967: PPUSH
60968: LD_VAR 0 1
60972: PPUSH
60973: CALL_OW 251
60977: PPUSH
60978: LD_VAR 0 2
60982: PPUSH
60983: CALL 34335 0 4
60987: PUSH
60988: LD_INT 4
60990: ARRAY
60991: ST_TO_ADDR
// end ;
60992: LD_VAR 0 3
60996: RET
// export function PlayerSeeMe ( unit ) ; begin
60997: LD_INT 0
60999: PPUSH
// result := See ( your_side , unit ) ;
61000: LD_ADDR_VAR 0 2
61004: PUSH
61005: LD_OWVAR 2
61009: PPUSH
61010: LD_VAR 0 1
61014: PPUSH
61015: CALL_OW 292
61019: ST_TO_ADDR
// end ;
61020: LD_VAR 0 2
61024: RET
// export function ReverseDir ( unit ) ; begin
61025: LD_INT 0
61027: PPUSH
// if not unit then
61028: LD_VAR 0 1
61032: NOT
61033: IFFALSE 61037
// exit ;
61035: GO 61060
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61037: LD_ADDR_VAR 0 2
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 254
61051: PUSH
61052: LD_INT 3
61054: PLUS
61055: PUSH
61056: LD_INT 6
61058: MOD
61059: ST_TO_ADDR
// end ;
61060: LD_VAR 0 2
61064: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61065: LD_INT 0
61067: PPUSH
61068: PPUSH
61069: PPUSH
61070: PPUSH
61071: PPUSH
// if not hexes then
61072: LD_VAR 0 2
61076: NOT
61077: IFFALSE 61081
// exit ;
61079: GO 61229
// dist := 9999 ;
61081: LD_ADDR_VAR 0 5
61085: PUSH
61086: LD_INT 9999
61088: ST_TO_ADDR
// for i = 1 to hexes do
61089: LD_ADDR_VAR 0 4
61093: PUSH
61094: DOUBLE
61095: LD_INT 1
61097: DEC
61098: ST_TO_ADDR
61099: LD_VAR 0 2
61103: PUSH
61104: FOR_TO
61105: IFFALSE 61217
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61107: LD_VAR 0 1
61111: PPUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_VAR 0 4
61121: ARRAY
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PPUSH
61127: LD_VAR 0 2
61131: PUSH
61132: LD_VAR 0 4
61136: ARRAY
61137: PUSH
61138: LD_INT 2
61140: ARRAY
61141: PPUSH
61142: CALL_OW 297
61146: PUSH
61147: LD_VAR 0 5
61151: LESS
61152: IFFALSE 61215
// begin hex := hexes [ i ] ;
61154: LD_ADDR_VAR 0 7
61158: PUSH
61159: LD_VAR 0 2
61163: PUSH
61164: LD_VAR 0 4
61168: ARRAY
61169: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61170: LD_ADDR_VAR 0 5
61174: PUSH
61175: LD_VAR 0 1
61179: PPUSH
61180: LD_VAR 0 2
61184: PUSH
61185: LD_VAR 0 4
61189: ARRAY
61190: PUSH
61191: LD_INT 1
61193: ARRAY
61194: PPUSH
61195: LD_VAR 0 2
61199: PUSH
61200: LD_VAR 0 4
61204: ARRAY
61205: PUSH
61206: LD_INT 2
61208: ARRAY
61209: PPUSH
61210: CALL_OW 297
61214: ST_TO_ADDR
// end ; end ;
61215: GO 61104
61217: POP
61218: POP
// result := hex ;
61219: LD_ADDR_VAR 0 3
61223: PUSH
61224: LD_VAR 0 7
61228: ST_TO_ADDR
// end ;
61229: LD_VAR 0 3
61233: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61238: LD_VAR 0 1
61242: NOT
61243: PUSH
61244: LD_VAR 0 1
61248: PUSH
61249: LD_INT 21
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 23
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PPUSH
61273: CALL_OW 69
61277: IN
61278: NOT
61279: OR
61280: IFFALSE 61284
// exit ;
61282: GO 61331
// for i = 1 to 3 do
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: DOUBLE
61290: LD_INT 1
61292: DEC
61293: ST_TO_ADDR
61294: LD_INT 3
61296: PUSH
61297: FOR_TO
61298: IFFALSE 61329
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61300: LD_VAR 0 1
61304: PPUSH
61305: CALL_OW 250
61309: PPUSH
61310: LD_VAR 0 1
61314: PPUSH
61315: CALL_OW 251
61319: PPUSH
61320: LD_INT 1
61322: PPUSH
61323: CALL_OW 453
61327: GO 61297
61329: POP
61330: POP
// end ;
61331: LD_VAR 0 2
61335: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61336: LD_INT 0
61338: PPUSH
61339: PPUSH
61340: PPUSH
61341: PPUSH
61342: PPUSH
61343: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61344: LD_VAR 0 1
61348: NOT
61349: PUSH
61350: LD_VAR 0 2
61354: NOT
61355: OR
61356: PUSH
61357: LD_VAR 0 1
61361: PPUSH
61362: CALL_OW 314
61366: OR
61367: IFFALSE 61371
// exit ;
61369: GO 61812
// x := GetX ( enemy_unit ) ;
61371: LD_ADDR_VAR 0 7
61375: PUSH
61376: LD_VAR 0 2
61380: PPUSH
61381: CALL_OW 250
61385: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61386: LD_ADDR_VAR 0 8
61390: PUSH
61391: LD_VAR 0 2
61395: PPUSH
61396: CALL_OW 251
61400: ST_TO_ADDR
// if not x or not y then
61401: LD_VAR 0 7
61405: NOT
61406: PUSH
61407: LD_VAR 0 8
61411: NOT
61412: OR
61413: IFFALSE 61417
// exit ;
61415: GO 61812
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61417: LD_ADDR_VAR 0 6
61421: PUSH
61422: LD_VAR 0 7
61426: PPUSH
61427: LD_INT 0
61429: PPUSH
61430: LD_INT 4
61432: PPUSH
61433: CALL_OW 272
61437: PUSH
61438: LD_VAR 0 8
61442: PPUSH
61443: LD_INT 0
61445: PPUSH
61446: LD_INT 4
61448: PPUSH
61449: CALL_OW 273
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_VAR 0 7
61462: PPUSH
61463: LD_INT 1
61465: PPUSH
61466: LD_INT 4
61468: PPUSH
61469: CALL_OW 272
61473: PUSH
61474: LD_VAR 0 8
61478: PPUSH
61479: LD_INT 1
61481: PPUSH
61482: LD_INT 4
61484: PPUSH
61485: CALL_OW 273
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_VAR 0 7
61498: PPUSH
61499: LD_INT 2
61501: PPUSH
61502: LD_INT 4
61504: PPUSH
61505: CALL_OW 272
61509: PUSH
61510: LD_VAR 0 8
61514: PPUSH
61515: LD_INT 2
61517: PPUSH
61518: LD_INT 4
61520: PPUSH
61521: CALL_OW 273
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_VAR 0 7
61534: PPUSH
61535: LD_INT 3
61537: PPUSH
61538: LD_INT 4
61540: PPUSH
61541: CALL_OW 272
61545: PUSH
61546: LD_VAR 0 8
61550: PPUSH
61551: LD_INT 3
61553: PPUSH
61554: LD_INT 4
61556: PPUSH
61557: CALL_OW 273
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_VAR 0 7
61570: PPUSH
61571: LD_INT 4
61573: PPUSH
61574: LD_INT 4
61576: PPUSH
61577: CALL_OW 272
61581: PUSH
61582: LD_VAR 0 8
61586: PPUSH
61587: LD_INT 4
61589: PPUSH
61590: LD_INT 4
61592: PPUSH
61593: CALL_OW 273
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_VAR 0 7
61606: PPUSH
61607: LD_INT 5
61609: PPUSH
61610: LD_INT 4
61612: PPUSH
61613: CALL_OW 272
61617: PUSH
61618: LD_VAR 0 8
61622: PPUSH
61623: LD_INT 5
61625: PPUSH
61626: LD_INT 4
61628: PPUSH
61629: CALL_OW 273
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: ST_TO_ADDR
// for i = tmp downto 1 do
61646: LD_ADDR_VAR 0 4
61650: PUSH
61651: DOUBLE
61652: LD_VAR 0 6
61656: INC
61657: ST_TO_ADDR
61658: LD_INT 1
61660: PUSH
61661: FOR_DOWNTO
61662: IFFALSE 61763
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61664: LD_VAR 0 6
61668: PUSH
61669: LD_VAR 0 4
61673: ARRAY
61674: PUSH
61675: LD_INT 1
61677: ARRAY
61678: PPUSH
61679: LD_VAR 0 6
61683: PUSH
61684: LD_VAR 0 4
61688: ARRAY
61689: PUSH
61690: LD_INT 2
61692: ARRAY
61693: PPUSH
61694: CALL_OW 488
61698: NOT
61699: PUSH
61700: LD_VAR 0 6
61704: PUSH
61705: LD_VAR 0 4
61709: ARRAY
61710: PUSH
61711: LD_INT 1
61713: ARRAY
61714: PPUSH
61715: LD_VAR 0 6
61719: PUSH
61720: LD_VAR 0 4
61724: ARRAY
61725: PUSH
61726: LD_INT 2
61728: ARRAY
61729: PPUSH
61730: CALL_OW 428
61734: PUSH
61735: LD_INT 0
61737: NONEQUAL
61738: OR
61739: IFFALSE 61761
// tmp := Delete ( tmp , i ) ;
61741: LD_ADDR_VAR 0 6
61745: PUSH
61746: LD_VAR 0 6
61750: PPUSH
61751: LD_VAR 0 4
61755: PPUSH
61756: CALL_OW 3
61760: ST_TO_ADDR
61761: GO 61661
61763: POP
61764: POP
// j := GetClosestHex ( unit , tmp ) ;
61765: LD_ADDR_VAR 0 5
61769: PUSH
61770: LD_VAR 0 1
61774: PPUSH
61775: LD_VAR 0 6
61779: PPUSH
61780: CALL 61065 0 2
61784: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61785: LD_VAR 0 1
61789: PPUSH
61790: LD_VAR 0 5
61794: PUSH
61795: LD_INT 1
61797: ARRAY
61798: PPUSH
61799: LD_VAR 0 5
61803: PUSH
61804: LD_INT 2
61806: ARRAY
61807: PPUSH
61808: CALL_OW 111
// end ;
61812: LD_VAR 0 3
61816: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61817: LD_INT 0
61819: PPUSH
61820: PPUSH
61821: PPUSH
// uc_side = 0 ;
61822: LD_ADDR_OWVAR 20
61826: PUSH
61827: LD_INT 0
61829: ST_TO_ADDR
// uc_nation = 0 ;
61830: LD_ADDR_OWVAR 21
61834: PUSH
61835: LD_INT 0
61837: ST_TO_ADDR
// InitHc_All ( ) ;
61838: CALL_OW 584
// InitVc ;
61842: CALL_OW 20
// if mastodonts then
61846: LD_VAR 0 6
61850: IFFALSE 61917
// for i = 1 to mastodonts do
61852: LD_ADDR_VAR 0 11
61856: PUSH
61857: DOUBLE
61858: LD_INT 1
61860: DEC
61861: ST_TO_ADDR
61862: LD_VAR 0 6
61866: PUSH
61867: FOR_TO
61868: IFFALSE 61915
// begin vc_chassis := 31 ;
61870: LD_ADDR_OWVAR 37
61874: PUSH
61875: LD_INT 31
61877: ST_TO_ADDR
// vc_control := control_rider ;
61878: LD_ADDR_OWVAR 38
61882: PUSH
61883: LD_INT 4
61885: ST_TO_ADDR
// animal := CreateVehicle ;
61886: LD_ADDR_VAR 0 12
61890: PUSH
61891: CALL_OW 45
61895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61896: LD_VAR 0 12
61900: PPUSH
61901: LD_VAR 0 8
61905: PPUSH
61906: LD_INT 0
61908: PPUSH
61909: CALL 64105 0 3
// end ;
61913: GO 61867
61915: POP
61916: POP
// if horses then
61917: LD_VAR 0 5
61921: IFFALSE 61988
// for i = 1 to horses do
61923: LD_ADDR_VAR 0 11
61927: PUSH
61928: DOUBLE
61929: LD_INT 1
61931: DEC
61932: ST_TO_ADDR
61933: LD_VAR 0 5
61937: PUSH
61938: FOR_TO
61939: IFFALSE 61986
// begin hc_class := 21 ;
61941: LD_ADDR_OWVAR 28
61945: PUSH
61946: LD_INT 21
61948: ST_TO_ADDR
// hc_gallery :=  ;
61949: LD_ADDR_OWVAR 33
61953: PUSH
61954: LD_STRING 
61956: ST_TO_ADDR
// animal := CreateHuman ;
61957: LD_ADDR_VAR 0 12
61961: PUSH
61962: CALL_OW 44
61966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61967: LD_VAR 0 12
61971: PPUSH
61972: LD_VAR 0 8
61976: PPUSH
61977: LD_INT 0
61979: PPUSH
61980: CALL 64105 0 3
// end ;
61984: GO 61938
61986: POP
61987: POP
// if birds then
61988: LD_VAR 0 1
61992: IFFALSE 62059
// for i = 1 to birds do
61994: LD_ADDR_VAR 0 11
61998: PUSH
61999: DOUBLE
62000: LD_INT 1
62002: DEC
62003: ST_TO_ADDR
62004: LD_VAR 0 1
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62057
// begin hc_class = 18 ;
62012: LD_ADDR_OWVAR 28
62016: PUSH
62017: LD_INT 18
62019: ST_TO_ADDR
// hc_gallery =  ;
62020: LD_ADDR_OWVAR 33
62024: PUSH
62025: LD_STRING 
62027: ST_TO_ADDR
// animal := CreateHuman ;
62028: LD_ADDR_VAR 0 12
62032: PUSH
62033: CALL_OW 44
62037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62038: LD_VAR 0 12
62042: PPUSH
62043: LD_VAR 0 8
62047: PPUSH
62048: LD_INT 0
62050: PPUSH
62051: CALL 64105 0 3
// end ;
62055: GO 62009
62057: POP
62058: POP
// if tigers then
62059: LD_VAR 0 2
62063: IFFALSE 62147
// for i = 1 to tigers do
62065: LD_ADDR_VAR 0 11
62069: PUSH
62070: DOUBLE
62071: LD_INT 1
62073: DEC
62074: ST_TO_ADDR
62075: LD_VAR 0 2
62079: PUSH
62080: FOR_TO
62081: IFFALSE 62145
// begin hc_class = class_tiger ;
62083: LD_ADDR_OWVAR 28
62087: PUSH
62088: LD_INT 14
62090: ST_TO_ADDR
// hc_gallery =  ;
62091: LD_ADDR_OWVAR 33
62095: PUSH
62096: LD_STRING 
62098: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62099: LD_ADDR_OWVAR 35
62103: PUSH
62104: LD_INT 7
62106: NEG
62107: PPUSH
62108: LD_INT 7
62110: PPUSH
62111: CALL_OW 12
62115: ST_TO_ADDR
// animal := CreateHuman ;
62116: LD_ADDR_VAR 0 12
62120: PUSH
62121: CALL_OW 44
62125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62126: LD_VAR 0 12
62130: PPUSH
62131: LD_VAR 0 8
62135: PPUSH
62136: LD_INT 0
62138: PPUSH
62139: CALL 64105 0 3
// end ;
62143: GO 62080
62145: POP
62146: POP
// if apemans then
62147: LD_VAR 0 3
62151: IFFALSE 62274
// for i = 1 to apemans do
62153: LD_ADDR_VAR 0 11
62157: PUSH
62158: DOUBLE
62159: LD_INT 1
62161: DEC
62162: ST_TO_ADDR
62163: LD_VAR 0 3
62167: PUSH
62168: FOR_TO
62169: IFFALSE 62272
// begin hc_class = class_apeman ;
62171: LD_ADDR_OWVAR 28
62175: PUSH
62176: LD_INT 12
62178: ST_TO_ADDR
// hc_gallery =  ;
62179: LD_ADDR_OWVAR 33
62183: PUSH
62184: LD_STRING 
62186: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62187: LD_ADDR_OWVAR 35
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PPUSH
62196: LD_INT 2
62198: PPUSH
62199: CALL_OW 12
62203: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62204: LD_ADDR_OWVAR 31
62208: PUSH
62209: LD_INT 1
62211: PPUSH
62212: LD_INT 3
62214: PPUSH
62215: CALL_OW 12
62219: PUSH
62220: LD_INT 1
62222: PPUSH
62223: LD_INT 3
62225: PPUSH
62226: CALL_OW 12
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: ST_TO_ADDR
// animal := CreateHuman ;
62243: LD_ADDR_VAR 0 12
62247: PUSH
62248: CALL_OW 44
62252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62253: LD_VAR 0 12
62257: PPUSH
62258: LD_VAR 0 8
62262: PPUSH
62263: LD_INT 0
62265: PPUSH
62266: CALL 64105 0 3
// end ;
62270: GO 62168
62272: POP
62273: POP
// if enchidnas then
62274: LD_VAR 0 4
62278: IFFALSE 62345
// for i = 1 to enchidnas do
62280: LD_ADDR_VAR 0 11
62284: PUSH
62285: DOUBLE
62286: LD_INT 1
62288: DEC
62289: ST_TO_ADDR
62290: LD_VAR 0 4
62294: PUSH
62295: FOR_TO
62296: IFFALSE 62343
// begin hc_class = 13 ;
62298: LD_ADDR_OWVAR 28
62302: PUSH
62303: LD_INT 13
62305: ST_TO_ADDR
// hc_gallery =  ;
62306: LD_ADDR_OWVAR 33
62310: PUSH
62311: LD_STRING 
62313: ST_TO_ADDR
// animal := CreateHuman ;
62314: LD_ADDR_VAR 0 12
62318: PUSH
62319: CALL_OW 44
62323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62324: LD_VAR 0 12
62328: PPUSH
62329: LD_VAR 0 8
62333: PPUSH
62334: LD_INT 0
62336: PPUSH
62337: CALL 64105 0 3
// end ;
62341: GO 62295
62343: POP
62344: POP
// if fishes then
62345: LD_VAR 0 7
62349: IFFALSE 62416
// for i = 1 to fishes do
62351: LD_ADDR_VAR 0 11
62355: PUSH
62356: DOUBLE
62357: LD_INT 1
62359: DEC
62360: ST_TO_ADDR
62361: LD_VAR 0 7
62365: PUSH
62366: FOR_TO
62367: IFFALSE 62414
// begin hc_class = 20 ;
62369: LD_ADDR_OWVAR 28
62373: PUSH
62374: LD_INT 20
62376: ST_TO_ADDR
// hc_gallery =  ;
62377: LD_ADDR_OWVAR 33
62381: PUSH
62382: LD_STRING 
62384: ST_TO_ADDR
// animal := CreateHuman ;
62385: LD_ADDR_VAR 0 12
62389: PUSH
62390: CALL_OW 44
62394: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62395: LD_VAR 0 12
62399: PPUSH
62400: LD_VAR 0 9
62404: PPUSH
62405: LD_INT 0
62407: PPUSH
62408: CALL 64105 0 3
// end ;
62412: GO 62366
62414: POP
62415: POP
// end ;
62416: LD_VAR 0 10
62420: RET
// export function WantHeal ( sci , unit ) ; begin
62421: LD_INT 0
62423: PPUSH
// if GetTaskList ( sci ) > 0 then
62424: LD_VAR 0 1
62428: PPUSH
62429: CALL_OW 437
62433: PUSH
62434: LD_INT 0
62436: GREATER
62437: IFFALSE 62507
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62439: LD_VAR 0 1
62443: PPUSH
62444: CALL_OW 437
62448: PUSH
62449: LD_INT 1
62451: ARRAY
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PUSH
62457: LD_STRING l
62459: EQUAL
62460: PUSH
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL_OW 437
62470: PUSH
62471: LD_INT 1
62473: ARRAY
62474: PUSH
62475: LD_INT 4
62477: ARRAY
62478: PUSH
62479: LD_VAR 0 2
62483: EQUAL
62484: AND
62485: IFFALSE 62497
// result := true else
62487: LD_ADDR_VAR 0 3
62491: PUSH
62492: LD_INT 1
62494: ST_TO_ADDR
62495: GO 62505
// result := false ;
62497: LD_ADDR_VAR 0 3
62501: PUSH
62502: LD_INT 0
62504: ST_TO_ADDR
// end else
62505: GO 62515
// result := false ;
62507: LD_ADDR_VAR 0 3
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
// end ;
62515: LD_VAR 0 3
62519: RET
// export function HealTarget ( sci ) ; begin
62520: LD_INT 0
62522: PPUSH
// if not sci then
62523: LD_VAR 0 1
62527: NOT
62528: IFFALSE 62532
// exit ;
62530: GO 62597
// result := 0 ;
62532: LD_ADDR_VAR 0 2
62536: PUSH
62537: LD_INT 0
62539: ST_TO_ADDR
// if GetTaskList ( sci ) then
62540: LD_VAR 0 1
62544: PPUSH
62545: CALL_OW 437
62549: IFFALSE 62597
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 437
62560: PUSH
62561: LD_INT 1
62563: ARRAY
62564: PUSH
62565: LD_INT 1
62567: ARRAY
62568: PUSH
62569: LD_STRING l
62571: EQUAL
62572: IFFALSE 62597
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62574: LD_ADDR_VAR 0 2
62578: PUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 437
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PUSH
62593: LD_INT 4
62595: ARRAY
62596: ST_TO_ADDR
// end ;
62597: LD_VAR 0 2
62601: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62602: LD_INT 0
62604: PPUSH
62605: PPUSH
62606: PPUSH
62607: PPUSH
// if not base_units then
62608: LD_VAR 0 1
62612: NOT
62613: IFFALSE 62617
// exit ;
62615: GO 62704
// result := false ;
62617: LD_ADDR_VAR 0 2
62621: PUSH
62622: LD_INT 0
62624: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62625: LD_ADDR_VAR 0 5
62629: PUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_INT 21
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PPUSH
62645: CALL_OW 72
62649: ST_TO_ADDR
// if not tmp then
62650: LD_VAR 0 5
62654: NOT
62655: IFFALSE 62659
// exit ;
62657: GO 62704
// for i in tmp do
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_VAR 0 5
62668: PUSH
62669: FOR_IN
62670: IFFALSE 62702
// begin result := EnemyInRange ( i , 22 ) ;
62672: LD_ADDR_VAR 0 2
62676: PUSH
62677: LD_VAR 0 3
62681: PPUSH
62682: LD_INT 22
62684: PPUSH
62685: CALL 60940 0 2
62689: ST_TO_ADDR
// if result then
62690: LD_VAR 0 2
62694: IFFALSE 62700
// exit ;
62696: POP
62697: POP
62698: GO 62704
// end ;
62700: GO 62669
62702: POP
62703: POP
// end ;
62704: LD_VAR 0 2
62708: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62709: LD_INT 0
62711: PPUSH
62712: PPUSH
// if not units then
62713: LD_VAR 0 1
62717: NOT
62718: IFFALSE 62722
// exit ;
62720: GO 62792
// result := [ ] ;
62722: LD_ADDR_VAR 0 3
62726: PUSH
62727: EMPTY
62728: ST_TO_ADDR
// for i in units do
62729: LD_ADDR_VAR 0 4
62733: PUSH
62734: LD_VAR 0 1
62738: PUSH
62739: FOR_IN
62740: IFFALSE 62790
// if GetTag ( i ) = tag then
62742: LD_VAR 0 4
62746: PPUSH
62747: CALL_OW 110
62751: PUSH
62752: LD_VAR 0 2
62756: EQUAL
62757: IFFALSE 62788
// result := Insert ( result , result + 1 , i ) ;
62759: LD_ADDR_VAR 0 3
62763: PUSH
62764: LD_VAR 0 3
62768: PPUSH
62769: LD_VAR 0 3
62773: PUSH
62774: LD_INT 1
62776: PLUS
62777: PPUSH
62778: LD_VAR 0 4
62782: PPUSH
62783: CALL_OW 2
62787: ST_TO_ADDR
62788: GO 62739
62790: POP
62791: POP
// end ;
62792: LD_VAR 0 3
62796: RET
// export function IsDriver ( un ) ; begin
62797: LD_INT 0
62799: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62800: LD_ADDR_VAR 0 2
62804: PUSH
62805: LD_VAR 0 1
62809: PUSH
62810: LD_INT 55
62812: PUSH
62813: EMPTY
62814: LIST
62815: PPUSH
62816: CALL_OW 69
62820: IN
62821: ST_TO_ADDR
// end ;
62822: LD_VAR 0 2
62826: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62827: LD_INT 0
62829: PPUSH
62830: PPUSH
// list := [ ] ;
62831: LD_ADDR_VAR 0 5
62835: PUSH
62836: EMPTY
62837: ST_TO_ADDR
// case d of 0 :
62838: LD_VAR 0 3
62842: PUSH
62843: LD_INT 0
62845: DOUBLE
62846: EQUAL
62847: IFTRUE 62851
62849: GO 62984
62851: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62852: LD_ADDR_VAR 0 5
62856: PUSH
62857: LD_VAR 0 1
62861: PUSH
62862: LD_INT 4
62864: MINUS
62865: PUSH
62866: LD_VAR 0 2
62870: PUSH
62871: LD_INT 4
62873: MINUS
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: LD_INT 3
62890: MINUS
62891: PUSH
62892: LD_VAR 0 2
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: LD_VAR 0 1
62909: PUSH
62910: LD_INT 4
62912: PLUS
62913: PUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_INT 4
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: PUSH
62927: LD_VAR 0 1
62931: PUSH
62932: LD_INT 3
62934: PLUS
62935: PUSH
62936: LD_VAR 0 2
62940: PUSH
62941: LD_INT 3
62943: PLUS
62944: PUSH
62945: LD_INT 5
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: PUSH
62953: LD_VAR 0 1
62957: PUSH
62958: LD_VAR 0 2
62962: PUSH
62963: LD_INT 4
62965: PLUS
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: ST_TO_ADDR
// end ; 1 :
62982: GO 63682
62984: LD_INT 1
62986: DOUBLE
62987: EQUAL
62988: IFTRUE 62992
62990: GO 63125
62992: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62993: LD_ADDR_VAR 0 5
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: LD_VAR 0 2
63007: PUSH
63008: LD_INT 4
63010: MINUS
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: PUSH
63020: LD_VAR 0 1
63024: PUSH
63025: LD_INT 3
63027: MINUS
63028: PUSH
63029: LD_VAR 0 2
63033: PUSH
63034: LD_INT 3
63036: MINUS
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: PUSH
63046: LD_VAR 0 1
63050: PUSH
63051: LD_INT 4
63053: MINUS
63054: PUSH
63055: LD_VAR 0 2
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: LD_VAR 0 1
63072: PUSH
63073: LD_VAR 0 2
63077: PUSH
63078: LD_INT 3
63080: PLUS
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 1
63094: PUSH
63095: LD_INT 4
63097: PLUS
63098: PUSH
63099: LD_VAR 0 2
63103: PUSH
63104: LD_INT 4
63106: PLUS
63107: PUSH
63108: LD_INT 5
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// end ; 2 :
63123: GO 63682
63125: LD_INT 2
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63133
63131: GO 63262
63133: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63134: LD_ADDR_VAR 0 5
63138: PUSH
63139: LD_VAR 0 1
63143: PUSH
63144: LD_VAR 0 2
63148: PUSH
63149: LD_INT 3
63151: MINUS
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: PUSH
63161: LD_VAR 0 1
63165: PUSH
63166: LD_INT 4
63168: PLUS
63169: PUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_INT 4
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: LIST
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: LD_VAR 0 2
63192: PUSH
63193: LD_INT 4
63195: PLUS
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: PUSH
63205: LD_VAR 0 1
63209: PUSH
63210: LD_INT 3
63212: MINUS
63213: PUSH
63214: LD_VAR 0 2
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: LD_VAR 0 1
63231: PUSH
63232: LD_INT 4
63234: MINUS
63235: PUSH
63236: LD_VAR 0 2
63240: PUSH
63241: LD_INT 4
63243: MINUS
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// end ; 3 :
63260: GO 63682
63262: LD_INT 3
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63270
63268: GO 63403
63270: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63271: LD_ADDR_VAR 0 5
63275: PUSH
63276: LD_VAR 0 1
63280: PUSH
63281: LD_INT 3
63283: PLUS
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: LD_INT 4
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: PUSH
63298: LD_VAR 0 1
63302: PUSH
63303: LD_INT 4
63305: PLUS
63306: PUSH
63307: LD_VAR 0 2
63311: PUSH
63312: LD_INT 4
63314: PLUS
63315: PUSH
63316: LD_INT 5
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: PUSH
63324: LD_VAR 0 1
63328: PUSH
63329: LD_INT 4
63331: MINUS
63332: PUSH
63333: LD_VAR 0 2
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: PUSH
63346: LD_VAR 0 1
63350: PUSH
63351: LD_VAR 0 2
63355: PUSH
63356: LD_INT 4
63358: MINUS
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: PUSH
63368: LD_VAR 0 1
63372: PUSH
63373: LD_INT 3
63375: MINUS
63376: PUSH
63377: LD_VAR 0 2
63381: PUSH
63382: LD_INT 3
63384: MINUS
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// end ; 4 :
63401: GO 63682
63403: LD_INT 4
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63411
63409: GO 63544
63411: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63412: LD_ADDR_VAR 0 5
63416: PUSH
63417: LD_VAR 0 1
63421: PUSH
63422: LD_VAR 0 2
63426: PUSH
63427: LD_INT 4
63429: PLUS
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: LD_VAR 0 1
63443: PUSH
63444: LD_INT 3
63446: PLUS
63447: PUSH
63448: LD_VAR 0 2
63452: PUSH
63453: LD_INT 3
63455: PLUS
63456: PUSH
63457: LD_INT 5
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_INT 4
63472: PLUS
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 4
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: LD_VAR 0 2
63496: PUSH
63497: LD_INT 3
63499: MINUS
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: LD_VAR 0 1
63513: PUSH
63514: LD_INT 4
63516: MINUS
63517: PUSH
63518: LD_VAR 0 2
63522: PUSH
63523: LD_INT 4
63525: MINUS
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// end ; 5 :
63542: GO 63682
63544: LD_INT 5
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63552
63550: GO 63681
63552: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63553: LD_ADDR_VAR 0 5
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 4
63565: MINUS
63566: PUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_VAR 0 2
63589: PUSH
63590: LD_INT 4
63592: MINUS
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: PUSH
63602: LD_VAR 0 1
63606: PUSH
63607: LD_INT 4
63609: PLUS
63610: PUSH
63611: LD_VAR 0 2
63615: PUSH
63616: LD_INT 4
63618: PLUS
63619: PUSH
63620: LD_INT 5
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_INT 3
63635: PLUS
63636: PUSH
63637: LD_VAR 0 2
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: LD_VAR 0 2
63659: PUSH
63660: LD_INT 3
63662: PLUS
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: ST_TO_ADDR
// end ; end ;
63679: GO 63682
63681: POP
// result := list ;
63682: LD_ADDR_VAR 0 4
63686: PUSH
63687: LD_VAR 0 5
63691: ST_TO_ADDR
// end ;
63692: LD_VAR 0 4
63696: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
63701: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63702: LD_VAR 0 1
63706: NOT
63707: PUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: LD_INT 3
63721: PUSH
63722: LD_INT 4
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: IN
63731: NOT
63732: OR
63733: IFFALSE 63737
// exit ;
63735: GO 63829
// tmp := [ ] ;
63737: LD_ADDR_VAR 0 5
63741: PUSH
63742: EMPTY
63743: ST_TO_ADDR
// for i in units do
63744: LD_ADDR_VAR 0 4
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: FOR_IN
63755: IFFALSE 63798
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63757: LD_ADDR_VAR 0 5
63761: PUSH
63762: LD_VAR 0 5
63766: PPUSH
63767: LD_VAR 0 5
63771: PUSH
63772: LD_INT 1
63774: PLUS
63775: PPUSH
63776: LD_VAR 0 4
63780: PPUSH
63781: LD_VAR 0 2
63785: PPUSH
63786: CALL_OW 259
63790: PPUSH
63791: CALL_OW 2
63795: ST_TO_ADDR
63796: GO 63754
63798: POP
63799: POP
// if not tmp then
63800: LD_VAR 0 5
63804: NOT
63805: IFFALSE 63809
// exit ;
63807: GO 63829
// result := SortListByListDesc ( units , tmp ) ;
63809: LD_ADDR_VAR 0 3
63813: PUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: LD_VAR 0 5
63823: PPUSH
63824: CALL_OW 77
63828: ST_TO_ADDR
// end ;
63829: LD_VAR 0 3
63833: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63834: LD_INT 0
63836: PPUSH
63837: PPUSH
63838: PPUSH
// result := false ;
63839: LD_ADDR_VAR 0 3
63843: PUSH
63844: LD_INT 0
63846: ST_TO_ADDR
// x := GetX ( building ) ;
63847: LD_ADDR_VAR 0 4
63851: PUSH
63852: LD_VAR 0 2
63856: PPUSH
63857: CALL_OW 250
63861: ST_TO_ADDR
// y := GetY ( building ) ;
63862: LD_ADDR_VAR 0 5
63866: PUSH
63867: LD_VAR 0 2
63871: PPUSH
63872: CALL_OW 251
63876: ST_TO_ADDR
// if not building or not x or not y then
63877: LD_VAR 0 2
63881: NOT
63882: PUSH
63883: LD_VAR 0 4
63887: NOT
63888: OR
63889: PUSH
63890: LD_VAR 0 5
63894: NOT
63895: OR
63896: IFFALSE 63900
// exit ;
63898: GO 63992
// if GetTaskList ( unit ) then
63900: LD_VAR 0 1
63904: PPUSH
63905: CALL_OW 437
63909: IFFALSE 63992
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63911: LD_STRING e
63913: PUSH
63914: LD_VAR 0 1
63918: PPUSH
63919: CALL_OW 437
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: PUSH
63928: LD_INT 1
63930: ARRAY
63931: EQUAL
63932: PUSH
63933: LD_VAR 0 4
63937: PUSH
63938: LD_VAR 0 1
63942: PPUSH
63943: CALL_OW 437
63947: PUSH
63948: LD_INT 1
63950: ARRAY
63951: PUSH
63952: LD_INT 2
63954: ARRAY
63955: EQUAL
63956: AND
63957: PUSH
63958: LD_VAR 0 5
63962: PUSH
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 437
63972: PUSH
63973: LD_INT 1
63975: ARRAY
63976: PUSH
63977: LD_INT 3
63979: ARRAY
63980: EQUAL
63981: AND
63982: IFFALSE 63992
// result := true end ;
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: LD_INT 1
63991: ST_TO_ADDR
// end ;
63992: LD_VAR 0 3
63996: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63997: LD_INT 0
63999: PPUSH
// result := false ;
64000: LD_ADDR_VAR 0 4
64004: PUSH
64005: LD_INT 0
64007: ST_TO_ADDR
// if GetTaskList ( unit ) then
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 437
64017: IFFALSE 64100
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64019: LD_STRING M
64021: PUSH
64022: LD_VAR 0 1
64026: PPUSH
64027: CALL_OW 437
64031: PUSH
64032: LD_INT 1
64034: ARRAY
64035: PUSH
64036: LD_INT 1
64038: ARRAY
64039: EQUAL
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: LD_VAR 0 1
64050: PPUSH
64051: CALL_OW 437
64055: PUSH
64056: LD_INT 1
64058: ARRAY
64059: PUSH
64060: LD_INT 2
64062: ARRAY
64063: EQUAL
64064: AND
64065: PUSH
64066: LD_VAR 0 3
64070: PUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: CALL_OW 437
64080: PUSH
64081: LD_INT 1
64083: ARRAY
64084: PUSH
64085: LD_INT 3
64087: ARRAY
64088: EQUAL
64089: AND
64090: IFFALSE 64100
// result := true ;
64092: LD_ADDR_VAR 0 4
64096: PUSH
64097: LD_INT 1
64099: ST_TO_ADDR
// end ; end ;
64100: LD_VAR 0 4
64104: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64105: LD_INT 0
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
// if not unit or not area then
64111: LD_VAR 0 1
64115: NOT
64116: PUSH
64117: LD_VAR 0 2
64121: NOT
64122: OR
64123: IFFALSE 64127
// exit ;
64125: GO 64291
// tmp := AreaToList ( area , i ) ;
64127: LD_ADDR_VAR 0 6
64131: PUSH
64132: LD_VAR 0 2
64136: PPUSH
64137: LD_VAR 0 5
64141: PPUSH
64142: CALL_OW 517
64146: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64147: LD_ADDR_VAR 0 5
64151: PUSH
64152: DOUBLE
64153: LD_INT 1
64155: DEC
64156: ST_TO_ADDR
64157: LD_VAR 0 6
64161: PUSH
64162: LD_INT 1
64164: ARRAY
64165: PUSH
64166: FOR_TO
64167: IFFALSE 64289
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64169: LD_ADDR_VAR 0 7
64173: PUSH
64174: LD_VAR 0 6
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: PUSH
64183: LD_VAR 0 5
64187: ARRAY
64188: PUSH
64189: LD_VAR 0 6
64193: PUSH
64194: LD_INT 2
64196: ARRAY
64197: PUSH
64198: LD_VAR 0 5
64202: ARRAY
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64208: LD_VAR 0 7
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PPUSH
64217: LD_VAR 0 7
64221: PUSH
64222: LD_INT 2
64224: ARRAY
64225: PPUSH
64226: CALL_OW 428
64230: PUSH
64231: LD_INT 0
64233: EQUAL
64234: IFFALSE 64287
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64236: LD_VAR 0 1
64240: PPUSH
64241: LD_VAR 0 7
64245: PUSH
64246: LD_INT 1
64248: ARRAY
64249: PPUSH
64250: LD_VAR 0 7
64254: PUSH
64255: LD_INT 2
64257: ARRAY
64258: PPUSH
64259: LD_VAR 0 3
64263: PPUSH
64264: CALL_OW 48
// result := IsPlaced ( unit ) ;
64268: LD_ADDR_VAR 0 4
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: CALL_OW 305
64282: ST_TO_ADDR
// exit ;
64283: POP
64284: POP
64285: GO 64291
// end ; end ;
64287: GO 64166
64289: POP
64290: POP
// end ;
64291: LD_VAR 0 4
64295: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64296: LD_INT 0
64298: PPUSH
64299: PPUSH
64300: PPUSH
// if not side or side > 8 then
64301: LD_VAR 0 1
64305: NOT
64306: PUSH
64307: LD_VAR 0 1
64311: PUSH
64312: LD_INT 8
64314: GREATER
64315: OR
64316: IFFALSE 64320
// exit ;
64318: GO 64507
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64320: LD_ADDR_VAR 0 4
64324: PUSH
64325: LD_INT 22
64327: PUSH
64328: LD_VAR 0 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 21
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PPUSH
64351: CALL_OW 69
64355: ST_TO_ADDR
// if not tmp then
64356: LD_VAR 0 4
64360: NOT
64361: IFFALSE 64365
// exit ;
64363: GO 64507
// enable_addtolog := true ;
64365: LD_ADDR_OWVAR 81
64369: PUSH
64370: LD_INT 1
64372: ST_TO_ADDR
// AddToLog ( [ ) ;
64373: LD_STRING [
64375: PPUSH
64376: CALL_OW 561
// for i in tmp do
64380: LD_ADDR_VAR 0 3
64384: PUSH
64385: LD_VAR 0 4
64389: PUSH
64390: FOR_IN
64391: IFFALSE 64498
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64393: LD_STRING [
64395: PUSH
64396: LD_VAR 0 3
64400: PPUSH
64401: CALL_OW 266
64405: STR
64406: PUSH
64407: LD_STRING , 
64409: STR
64410: PUSH
64411: LD_VAR 0 3
64415: PPUSH
64416: CALL_OW 250
64420: STR
64421: PUSH
64422: LD_STRING , 
64424: STR
64425: PUSH
64426: LD_VAR 0 3
64430: PPUSH
64431: CALL_OW 251
64435: STR
64436: PUSH
64437: LD_STRING , 
64439: STR
64440: PUSH
64441: LD_VAR 0 3
64445: PPUSH
64446: CALL_OW 254
64450: STR
64451: PUSH
64452: LD_STRING , 
64454: STR
64455: PUSH
64456: LD_VAR 0 3
64460: PPUSH
64461: LD_INT 1
64463: PPUSH
64464: CALL_OW 268
64468: STR
64469: PUSH
64470: LD_STRING , 
64472: STR
64473: PUSH
64474: LD_VAR 0 3
64478: PPUSH
64479: LD_INT 2
64481: PPUSH
64482: CALL_OW 268
64486: STR
64487: PUSH
64488: LD_STRING ],
64490: STR
64491: PPUSH
64492: CALL_OW 561
// end ;
64496: GO 64390
64498: POP
64499: POP
// AddToLog ( ]; ) ;
64500: LD_STRING ];
64502: PPUSH
64503: CALL_OW 561
// end ;
64507: LD_VAR 0 2
64511: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64512: LD_INT 0
64514: PPUSH
64515: PPUSH
64516: PPUSH
64517: PPUSH
64518: PPUSH
// if not area or not rate or not max then
64519: LD_VAR 0 1
64523: NOT
64524: PUSH
64525: LD_VAR 0 2
64529: NOT
64530: OR
64531: PUSH
64532: LD_VAR 0 4
64536: NOT
64537: OR
64538: IFFALSE 64542
// exit ;
64540: GO 64734
// while 1 do
64542: LD_INT 1
64544: IFFALSE 64734
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64546: LD_ADDR_VAR 0 9
64550: PUSH
64551: LD_VAR 0 1
64555: PPUSH
64556: LD_INT 1
64558: PPUSH
64559: CALL_OW 287
64563: PUSH
64564: LD_INT 10
64566: MUL
64567: ST_TO_ADDR
// r := rate / 10 ;
64568: LD_ADDR_VAR 0 7
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: LD_INT 10
64580: DIVREAL
64581: ST_TO_ADDR
// time := 1 1$00 ;
64582: LD_ADDR_VAR 0 8
64586: PUSH
64587: LD_INT 2100
64589: ST_TO_ADDR
// if amount < min then
64590: LD_VAR 0 9
64594: PUSH
64595: LD_VAR 0 3
64599: LESS
64600: IFFALSE 64618
// r := r * 2 else
64602: LD_ADDR_VAR 0 7
64606: PUSH
64607: LD_VAR 0 7
64611: PUSH
64612: LD_INT 2
64614: MUL
64615: ST_TO_ADDR
64616: GO 64644
// if amount > max then
64618: LD_VAR 0 9
64622: PUSH
64623: LD_VAR 0 4
64627: GREATER
64628: IFFALSE 64644
// r := r / 2 ;
64630: LD_ADDR_VAR 0 7
64634: PUSH
64635: LD_VAR 0 7
64639: PUSH
64640: LD_INT 2
64642: DIVREAL
64643: ST_TO_ADDR
// time := time / r ;
64644: LD_ADDR_VAR 0 8
64648: PUSH
64649: LD_VAR 0 8
64653: PUSH
64654: LD_VAR 0 7
64658: DIVREAL
64659: ST_TO_ADDR
// if time < 0 then
64660: LD_VAR 0 8
64664: PUSH
64665: LD_INT 0
64667: LESS
64668: IFFALSE 64685
// time := time * - 1 ;
64670: LD_ADDR_VAR 0 8
64674: PUSH
64675: LD_VAR 0 8
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: MUL
64684: ST_TO_ADDR
// wait ( time ) ;
64685: LD_VAR 0 8
64689: PPUSH
64690: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64694: LD_INT 35
64696: PPUSH
64697: LD_INT 875
64699: PPUSH
64700: CALL_OW 12
64704: PPUSH
64705: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64709: LD_INT 1
64711: PPUSH
64712: LD_INT 5
64714: PPUSH
64715: CALL_OW 12
64719: PPUSH
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_INT 1
64727: PPUSH
64728: CALL_OW 55
// end ;
64732: GO 64542
// end ;
64734: LD_VAR 0 5
64738: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64739: LD_INT 0
64741: PPUSH
64742: PPUSH
64743: PPUSH
64744: PPUSH
64745: PPUSH
64746: PPUSH
64747: PPUSH
64748: PPUSH
// if not turrets or not factories then
64749: LD_VAR 0 1
64753: NOT
64754: PUSH
64755: LD_VAR 0 2
64759: NOT
64760: OR
64761: IFFALSE 64765
// exit ;
64763: GO 65072
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64765: LD_ADDR_VAR 0 10
64769: PUSH
64770: LD_INT 5
64772: PUSH
64773: LD_INT 6
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: LD_INT 5
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 24
64807: PUSH
64808: LD_INT 25
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 23
64817: PUSH
64818: LD_INT 27
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 42
64831: PUSH
64832: LD_INT 43
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 44
64841: PUSH
64842: LD_INT 46
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 45
64851: PUSH
64852: LD_INT 47
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: ST_TO_ADDR
// result := [ ] ;
64869: LD_ADDR_VAR 0 3
64873: PUSH
64874: EMPTY
64875: ST_TO_ADDR
// for i in turrets do
64876: LD_ADDR_VAR 0 4
64880: PUSH
64881: LD_VAR 0 1
64885: PUSH
64886: FOR_IN
64887: IFFALSE 65070
// begin nat := GetNation ( i ) ;
64889: LD_ADDR_VAR 0 7
64893: PUSH
64894: LD_VAR 0 4
64898: PPUSH
64899: CALL_OW 248
64903: ST_TO_ADDR
// weapon := 0 ;
64904: LD_ADDR_VAR 0 8
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// if not nat then
64912: LD_VAR 0 7
64916: NOT
64917: IFFALSE 64921
// continue ;
64919: GO 64886
// for j in list [ nat ] do
64921: LD_ADDR_VAR 0 5
64925: PUSH
64926: LD_VAR 0 10
64930: PUSH
64931: LD_VAR 0 7
64935: ARRAY
64936: PUSH
64937: FOR_IN
64938: IFFALSE 64979
// if GetBWeapon ( i ) = j [ 1 ] then
64940: LD_VAR 0 4
64944: PPUSH
64945: CALL_OW 269
64949: PUSH
64950: LD_VAR 0 5
64954: PUSH
64955: LD_INT 1
64957: ARRAY
64958: EQUAL
64959: IFFALSE 64977
// begin weapon := j [ 2 ] ;
64961: LD_ADDR_VAR 0 8
64965: PUSH
64966: LD_VAR 0 5
64970: PUSH
64971: LD_INT 2
64973: ARRAY
64974: ST_TO_ADDR
// break ;
64975: GO 64979
// end ;
64977: GO 64937
64979: POP
64980: POP
// if not weapon then
64981: LD_VAR 0 8
64985: NOT
64986: IFFALSE 64990
// continue ;
64988: GO 64886
// for k in factories do
64990: LD_ADDR_VAR 0 6
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: FOR_IN
65001: IFFALSE 65066
// begin weapons := AvailableWeaponList ( k ) ;
65003: LD_ADDR_VAR 0 9
65007: PUSH
65008: LD_VAR 0 6
65012: PPUSH
65013: CALL_OW 478
65017: ST_TO_ADDR
// if not weapons then
65018: LD_VAR 0 9
65022: NOT
65023: IFFALSE 65027
// continue ;
65025: GO 65000
// if weapon in weapons then
65027: LD_VAR 0 8
65031: PUSH
65032: LD_VAR 0 9
65036: IN
65037: IFFALSE 65064
// begin result := [ i , weapon ] ;
65039: LD_ADDR_VAR 0 3
65043: PUSH
65044: LD_VAR 0 4
65048: PUSH
65049: LD_VAR 0 8
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: ST_TO_ADDR
// exit ;
65058: POP
65059: POP
65060: POP
65061: POP
65062: GO 65072
// end ; end ;
65064: GO 65000
65066: POP
65067: POP
// end ;
65068: GO 64886
65070: POP
65071: POP
// end ;
65072: LD_VAR 0 3
65076: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65077: LD_INT 0
65079: PPUSH
// if not side or side > 8 then
65080: LD_VAR 0 3
65084: NOT
65085: PUSH
65086: LD_VAR 0 3
65090: PUSH
65091: LD_INT 8
65093: GREATER
65094: OR
65095: IFFALSE 65099
// exit ;
65097: GO 65158
// if not range then
65099: LD_VAR 0 4
65103: NOT
65104: IFFALSE 65115
// range := - 12 ;
65106: LD_ADDR_VAR 0 4
65110: PUSH
65111: LD_INT 12
65113: NEG
65114: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65115: LD_VAR 0 1
65119: PPUSH
65120: LD_VAR 0 2
65124: PPUSH
65125: LD_VAR 0 3
65129: PPUSH
65130: LD_VAR 0 4
65134: PPUSH
65135: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65139: LD_VAR 0 1
65143: PPUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: LD_VAR 0 3
65153: PPUSH
65154: CALL_OW 331
// end ;
65158: LD_VAR 0 5
65162: RET
// export function Video ( mode ) ; begin
65163: LD_INT 0
65165: PPUSH
// ingame_video = mode ;
65166: LD_ADDR_OWVAR 52
65170: PUSH
65171: LD_VAR 0 1
65175: ST_TO_ADDR
// interface_hidden = mode ;
65176: LD_ADDR_OWVAR 54
65180: PUSH
65181: LD_VAR 0 1
65185: ST_TO_ADDR
// end ;
65186: LD_VAR 0 2
65190: RET
// export function Join ( array , element ) ; begin
65191: LD_INT 0
65193: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_VAR 0 1
65203: PPUSH
65204: LD_VAR 0 1
65208: PUSH
65209: LD_INT 1
65211: PLUS
65212: PPUSH
65213: LD_VAR 0 2
65217: PPUSH
65218: CALL_OW 1
65222: ST_TO_ADDR
// end ;
65223: LD_VAR 0 3
65227: RET
// export function JoinUnion ( array , element ) ; begin
65228: LD_INT 0
65230: PPUSH
// result := array union element ;
65231: LD_ADDR_VAR 0 3
65235: PUSH
65236: LD_VAR 0 1
65240: PUSH
65241: LD_VAR 0 2
65245: UNION
65246: ST_TO_ADDR
// end ;
65247: LD_VAR 0 3
65251: RET
// export function GetBehemoths ( side ) ; begin
65252: LD_INT 0
65254: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65255: LD_ADDR_VAR 0 2
65259: PUSH
65260: LD_INT 22
65262: PUSH
65263: LD_VAR 0 1
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 31
65274: PUSH
65275: LD_INT 25
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PPUSH
65286: CALL_OW 69
65290: ST_TO_ADDR
// end ;
65291: LD_VAR 0 2
65295: RET
// export function Shuffle ( array ) ; var i , index ; begin
65296: LD_INT 0
65298: PPUSH
65299: PPUSH
65300: PPUSH
// result := [ ] ;
65301: LD_ADDR_VAR 0 2
65305: PUSH
65306: EMPTY
65307: ST_TO_ADDR
// if not array then
65308: LD_VAR 0 1
65312: NOT
65313: IFFALSE 65317
// exit ;
65315: GO 65416
// Randomize ;
65317: CALL_OW 10
// for i = array downto 1 do
65321: LD_ADDR_VAR 0 3
65325: PUSH
65326: DOUBLE
65327: LD_VAR 0 1
65331: INC
65332: ST_TO_ADDR
65333: LD_INT 1
65335: PUSH
65336: FOR_DOWNTO
65337: IFFALSE 65414
// begin index := rand ( 1 , array ) ;
65339: LD_ADDR_VAR 0 4
65343: PUSH
65344: LD_INT 1
65346: PPUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 12
65356: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65357: LD_ADDR_VAR 0 2
65361: PUSH
65362: LD_VAR 0 2
65366: PPUSH
65367: LD_VAR 0 2
65371: PUSH
65372: LD_INT 1
65374: PLUS
65375: PPUSH
65376: LD_VAR 0 1
65380: PUSH
65381: LD_VAR 0 4
65385: ARRAY
65386: PPUSH
65387: CALL_OW 2
65391: ST_TO_ADDR
// array := Delete ( array , index ) ;
65392: LD_ADDR_VAR 0 1
65396: PUSH
65397: LD_VAR 0 1
65401: PPUSH
65402: LD_VAR 0 4
65406: PPUSH
65407: CALL_OW 3
65411: ST_TO_ADDR
// end ;
65412: GO 65336
65414: POP
65415: POP
// end ;
65416: LD_VAR 0 2
65420: RET
// export function GetBaseMaterials ( base ) ; begin
65421: LD_INT 0
65423: PPUSH
// result := [ 0 , 0 , 0 ] ;
65424: LD_ADDR_VAR 0 2
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: LIST
65442: ST_TO_ADDR
// if not base then
65443: LD_VAR 0 1
65447: NOT
65448: IFFALSE 65452
// exit ;
65450: GO 65501
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65452: LD_ADDR_VAR 0 2
65456: PUSH
65457: LD_VAR 0 1
65461: PPUSH
65462: LD_INT 1
65464: PPUSH
65465: CALL_OW 275
65469: PUSH
65470: LD_VAR 0 1
65474: PPUSH
65475: LD_INT 2
65477: PPUSH
65478: CALL_OW 275
65482: PUSH
65483: LD_VAR 0 1
65487: PPUSH
65488: LD_INT 3
65490: PPUSH
65491: CALL_OW 275
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: ST_TO_ADDR
// end ;
65501: LD_VAR 0 2
65505: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65506: LD_INT 0
65508: PPUSH
65509: PPUSH
// result := array ;
65510: LD_ADDR_VAR 0 3
65514: PUSH
65515: LD_VAR 0 1
65519: ST_TO_ADDR
// if size > 0 then
65520: LD_VAR 0 2
65524: PUSH
65525: LD_INT 0
65527: GREATER
65528: IFFALSE 65574
// for i := array downto size do
65530: LD_ADDR_VAR 0 4
65534: PUSH
65535: DOUBLE
65536: LD_VAR 0 1
65540: INC
65541: ST_TO_ADDR
65542: LD_VAR 0 2
65546: PUSH
65547: FOR_DOWNTO
65548: IFFALSE 65572
// result := Delete ( result , result ) ;
65550: LD_ADDR_VAR 0 3
65554: PUSH
65555: LD_VAR 0 3
65559: PPUSH
65560: LD_VAR 0 3
65564: PPUSH
65565: CALL_OW 3
65569: ST_TO_ADDR
65570: GO 65547
65572: POP
65573: POP
// end ;
65574: LD_VAR 0 3
65578: RET
// export function ComExit ( unit ) ; var tmp ; begin
65579: LD_INT 0
65581: PPUSH
65582: PPUSH
// if not IsInUnit ( unit ) then
65583: LD_VAR 0 1
65587: PPUSH
65588: CALL_OW 310
65592: NOT
65593: IFFALSE 65597
// exit ;
65595: GO 65657
// tmp := IsInUnit ( unit ) ;
65597: LD_ADDR_VAR 0 3
65601: PUSH
65602: LD_VAR 0 1
65606: PPUSH
65607: CALL_OW 310
65611: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65612: LD_VAR 0 3
65616: PPUSH
65617: CALL_OW 247
65621: PUSH
65622: LD_INT 2
65624: EQUAL
65625: IFFALSE 65638
// ComExitVehicle ( unit ) else
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 121
65636: GO 65647
// ComExitBuilding ( unit ) ;
65638: LD_VAR 0 1
65642: PPUSH
65643: CALL_OW 122
// result := tmp ;
65647: LD_ADDR_VAR 0 2
65651: PUSH
65652: LD_VAR 0 3
65656: ST_TO_ADDR
// end ;
65657: LD_VAR 0 2
65661: RET
// export function ComExitAll ( units ) ; var i ; begin
65662: LD_INT 0
65664: PPUSH
65665: PPUSH
// if not units then
65666: LD_VAR 0 1
65670: NOT
65671: IFFALSE 65675
// exit ;
65673: GO 65701
// for i in units do
65675: LD_ADDR_VAR 0 3
65679: PUSH
65680: LD_VAR 0 1
65684: PUSH
65685: FOR_IN
65686: IFFALSE 65699
// ComExit ( i ) ;
65688: LD_VAR 0 3
65692: PPUSH
65693: CALL 65579 0 1
65697: GO 65685
65699: POP
65700: POP
// end ;
65701: LD_VAR 0 2
65705: RET
// export function ResetHc ; begin
65706: LD_INT 0
65708: PPUSH
// InitHc ;
65709: CALL_OW 19
// hc_importance := 0 ;
65713: LD_ADDR_OWVAR 32
65717: PUSH
65718: LD_INT 0
65720: ST_TO_ADDR
// end ;
65721: LD_VAR 0 1
65725: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65726: LD_INT 0
65728: PPUSH
65729: PPUSH
65730: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65731: LD_ADDR_VAR 0 6
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: LD_VAR 0 3
65745: PLUS
65746: PUSH
65747: LD_INT 2
65749: DIV
65750: ST_TO_ADDR
// if _x < 0 then
65751: LD_VAR 0 6
65755: PUSH
65756: LD_INT 0
65758: LESS
65759: IFFALSE 65776
// _x := _x * - 1 ;
65761: LD_ADDR_VAR 0 6
65765: PUSH
65766: LD_VAR 0 6
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: MUL
65775: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65776: LD_ADDR_VAR 0 7
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: LD_VAR 0 4
65790: PLUS
65791: PUSH
65792: LD_INT 2
65794: DIV
65795: ST_TO_ADDR
// if _y < 0 then
65796: LD_VAR 0 7
65800: PUSH
65801: LD_INT 0
65803: LESS
65804: IFFALSE 65821
// _y := _y * - 1 ;
65806: LD_ADDR_VAR 0 7
65810: PUSH
65811: LD_VAR 0 7
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: MUL
65820: ST_TO_ADDR
// result := [ _x , _y ] ;
65821: LD_ADDR_VAR 0 5
65825: PUSH
65826: LD_VAR 0 6
65830: PUSH
65831: LD_VAR 0 7
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// end ;
65840: LD_VAR 0 5
65844: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65845: LD_INT 0
65847: PPUSH
65848: PPUSH
65849: PPUSH
65850: PPUSH
// task := GetTaskList ( unit ) ;
65851: LD_ADDR_VAR 0 7
65855: PUSH
65856: LD_VAR 0 1
65860: PPUSH
65861: CALL_OW 437
65865: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65866: LD_VAR 0 7
65870: NOT
65871: PUSH
65872: LD_VAR 0 1
65876: PPUSH
65877: LD_VAR 0 2
65881: PPUSH
65882: CALL_OW 308
65886: NOT
65887: AND
65888: IFFALSE 65892
// exit ;
65890: GO 66010
// if IsInArea ( unit , area ) then
65892: LD_VAR 0 1
65896: PPUSH
65897: LD_VAR 0 2
65901: PPUSH
65902: CALL_OW 308
65906: IFFALSE 65924
// begin ComMoveToArea ( unit , goAway ) ;
65908: LD_VAR 0 1
65912: PPUSH
65913: LD_VAR 0 3
65917: PPUSH
65918: CALL_OW 113
// exit ;
65922: GO 66010
// end ; if task [ 1 ] [ 1 ] <> M then
65924: LD_VAR 0 7
65928: PUSH
65929: LD_INT 1
65931: ARRAY
65932: PUSH
65933: LD_INT 1
65935: ARRAY
65936: PUSH
65937: LD_STRING M
65939: NONEQUAL
65940: IFFALSE 65944
// exit ;
65942: GO 66010
// x := task [ 1 ] [ 2 ] ;
65944: LD_ADDR_VAR 0 5
65948: PUSH
65949: LD_VAR 0 7
65953: PUSH
65954: LD_INT 1
65956: ARRAY
65957: PUSH
65958: LD_INT 2
65960: ARRAY
65961: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65962: LD_ADDR_VAR 0 6
65966: PUSH
65967: LD_VAR 0 7
65971: PUSH
65972: LD_INT 1
65974: ARRAY
65975: PUSH
65976: LD_INT 3
65978: ARRAY
65979: ST_TO_ADDR
// if InArea ( x , y , area ) then
65980: LD_VAR 0 5
65984: PPUSH
65985: LD_VAR 0 6
65989: PPUSH
65990: LD_VAR 0 2
65994: PPUSH
65995: CALL_OW 309
65999: IFFALSE 66010
// ComStop ( unit ) ;
66001: LD_VAR 0 1
66005: PPUSH
66006: CALL_OW 141
// end ;
66010: LD_VAR 0 4
66014: RET
// export function Abs ( value ) ; begin
66015: LD_INT 0
66017: PPUSH
// result := value ;
66018: LD_ADDR_VAR 0 2
66022: PUSH
66023: LD_VAR 0 1
66027: ST_TO_ADDR
// if value < 0 then
66028: LD_VAR 0 1
66032: PUSH
66033: LD_INT 0
66035: LESS
66036: IFFALSE 66053
// result := value * - 1 ;
66038: LD_ADDR_VAR 0 2
66042: PUSH
66043: LD_VAR 0 1
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: MUL
66052: ST_TO_ADDR
// end ;
66053: LD_VAR 0 2
66057: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66058: LD_INT 0
66060: PPUSH
66061: PPUSH
66062: PPUSH
66063: PPUSH
66064: PPUSH
66065: PPUSH
66066: PPUSH
66067: PPUSH
// if not unit or not building then
66068: LD_VAR 0 1
66072: NOT
66073: PUSH
66074: LD_VAR 0 2
66078: NOT
66079: OR
66080: IFFALSE 66084
// exit ;
66082: GO 66310
// x := GetX ( building ) ;
66084: LD_ADDR_VAR 0 4
66088: PUSH
66089: LD_VAR 0 2
66093: PPUSH
66094: CALL_OW 250
66098: ST_TO_ADDR
// y := GetY ( building ) ;
66099: LD_ADDR_VAR 0 6
66103: PUSH
66104: LD_VAR 0 2
66108: PPUSH
66109: CALL_OW 251
66113: ST_TO_ADDR
// d := GetDir ( building ) ;
66114: LD_ADDR_VAR 0 8
66118: PUSH
66119: LD_VAR 0 2
66123: PPUSH
66124: CALL_OW 254
66128: ST_TO_ADDR
// r := 4 ;
66129: LD_ADDR_VAR 0 9
66133: PUSH
66134: LD_INT 4
66136: ST_TO_ADDR
// for i := 1 to 5 do
66137: LD_ADDR_VAR 0 10
66141: PUSH
66142: DOUBLE
66143: LD_INT 1
66145: DEC
66146: ST_TO_ADDR
66147: LD_INT 5
66149: PUSH
66150: FOR_TO
66151: IFFALSE 66308
// begin _x := ShiftX ( x , d , r + i ) ;
66153: LD_ADDR_VAR 0 5
66157: PUSH
66158: LD_VAR 0 4
66162: PPUSH
66163: LD_VAR 0 8
66167: PPUSH
66168: LD_VAR 0 9
66172: PUSH
66173: LD_VAR 0 10
66177: PLUS
66178: PPUSH
66179: CALL_OW 272
66183: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66184: LD_ADDR_VAR 0 7
66188: PUSH
66189: LD_VAR 0 6
66193: PPUSH
66194: LD_VAR 0 8
66198: PPUSH
66199: LD_VAR 0 9
66203: PUSH
66204: LD_VAR 0 10
66208: PLUS
66209: PPUSH
66210: CALL_OW 273
66214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66215: LD_VAR 0 5
66219: PPUSH
66220: LD_VAR 0 7
66224: PPUSH
66225: CALL_OW 488
66229: PUSH
66230: LD_VAR 0 5
66234: PPUSH
66235: LD_VAR 0 7
66239: PPUSH
66240: CALL_OW 428
66244: PPUSH
66245: CALL_OW 247
66249: PUSH
66250: LD_INT 3
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: IN
66260: NOT
66261: AND
66262: IFFALSE 66306
// begin ComMoveXY ( unit , _x , _y ) ;
66264: LD_VAR 0 1
66268: PPUSH
66269: LD_VAR 0 5
66273: PPUSH
66274: LD_VAR 0 7
66278: PPUSH
66279: CALL_OW 111
// result := [ _x , _y ] ;
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: LD_VAR 0 5
66292: PUSH
66293: LD_VAR 0 7
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: ST_TO_ADDR
// exit ;
66302: POP
66303: POP
66304: GO 66310
// end ; end ;
66306: GO 66150
66308: POP
66309: POP
// end ;
66310: LD_VAR 0 3
66314: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66315: LD_INT 0
66317: PPUSH
66318: PPUSH
66319: PPUSH
// result := 0 ;
66320: LD_ADDR_VAR 0 3
66324: PUSH
66325: LD_INT 0
66327: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66328: LD_VAR 0 1
66332: PUSH
66333: LD_INT 0
66335: LESS
66336: PUSH
66337: LD_VAR 0 1
66341: PUSH
66342: LD_INT 8
66344: GREATER
66345: OR
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 0
66354: LESS
66355: OR
66356: PUSH
66357: LD_VAR 0 2
66361: PUSH
66362: LD_INT 8
66364: GREATER
66365: OR
66366: IFFALSE 66370
// exit ;
66368: GO 66445
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66370: LD_ADDR_VAR 0 4
66374: PUSH
66375: LD_INT 22
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PPUSH
66387: CALL_OW 69
66391: PUSH
66392: FOR_IN
66393: IFFALSE 66443
// begin un := UnitShoot ( i ) ;
66395: LD_ADDR_VAR 0 5
66399: PUSH
66400: LD_VAR 0 4
66404: PPUSH
66405: CALL_OW 504
66409: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66410: LD_VAR 0 5
66414: PPUSH
66415: CALL_OW 255
66419: PUSH
66420: LD_VAR 0 1
66424: EQUAL
66425: IFFALSE 66441
// begin result := un ;
66427: LD_ADDR_VAR 0 3
66431: PUSH
66432: LD_VAR 0 5
66436: ST_TO_ADDR
// exit ;
66437: POP
66438: POP
66439: GO 66445
// end ; end ;
66441: GO 66392
66443: POP
66444: POP
// end ;
66445: LD_VAR 0 3
66449: RET
// export function GetCargoBay ( units ) ; begin
66450: LD_INT 0
66452: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66453: LD_ADDR_VAR 0 2
66457: PUSH
66458: LD_VAR 0 1
66462: PPUSH
66463: LD_INT 2
66465: PUSH
66466: LD_INT 34
66468: PUSH
66469: LD_INT 12
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 34
66478: PUSH
66479: LD_INT 51
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 34
66488: PUSH
66489: LD_INT 32
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 34
66498: PUSH
66499: LD_EXP 27
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: PPUSH
66515: CALL_OW 72
66519: ST_TO_ADDR
// end ;
66520: LD_VAR 0 2
66524: RET
// export function Negate ( value ) ; begin
66525: LD_INT 0
66527: PPUSH
// result := not value ;
66528: LD_ADDR_VAR 0 2
66532: PUSH
66533: LD_VAR 0 1
66537: NOT
66538: ST_TO_ADDR
// end ;
66539: LD_VAR 0 2
66543: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66544: LD_INT 0
66546: PPUSH
// if x1 = x2 then
66547: LD_VAR 0 1
66551: PUSH
66552: LD_VAR 0 3
66556: EQUAL
66557: IFFALSE 66591
// begin if y1 > y2 then
66559: LD_VAR 0 2
66563: PUSH
66564: LD_VAR 0 4
66568: GREATER
66569: IFFALSE 66581
// result := 0 else
66571: LD_ADDR_VAR 0 5
66575: PUSH
66576: LD_INT 0
66578: ST_TO_ADDR
66579: GO 66589
// result := 3 ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_INT 3
66588: ST_TO_ADDR
// exit ;
66589: GO 66677
// end ; if y1 = y2 then
66591: LD_VAR 0 2
66595: PUSH
66596: LD_VAR 0 4
66600: EQUAL
66601: IFFALSE 66635
// begin if x1 > x2 then
66603: LD_VAR 0 1
66607: PUSH
66608: LD_VAR 0 3
66612: GREATER
66613: IFFALSE 66625
// result := 1 else
66615: LD_ADDR_VAR 0 5
66619: PUSH
66620: LD_INT 1
66622: ST_TO_ADDR
66623: GO 66633
// result := 4 ;
66625: LD_ADDR_VAR 0 5
66629: PUSH
66630: LD_INT 4
66632: ST_TO_ADDR
// exit ;
66633: GO 66677
// end ; if x1 > x2 and y1 > y2 then
66635: LD_VAR 0 1
66639: PUSH
66640: LD_VAR 0 3
66644: GREATER
66645: PUSH
66646: LD_VAR 0 2
66650: PUSH
66651: LD_VAR 0 4
66655: GREATER
66656: AND
66657: IFFALSE 66669
// result := 2 else
66659: LD_ADDR_VAR 0 5
66663: PUSH
66664: LD_INT 2
66666: ST_TO_ADDR
66667: GO 66677
// result := 5 ;
66669: LD_ADDR_VAR 0 5
66673: PUSH
66674: LD_INT 5
66676: ST_TO_ADDR
// end ;
66677: LD_VAR 0 5
66681: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66682: LD_INT 0
66684: PPUSH
66685: PPUSH
// if not driver or not IsInUnit ( driver ) then
66686: LD_VAR 0 1
66690: NOT
66691: PUSH
66692: LD_VAR 0 1
66696: PPUSH
66697: CALL_OW 310
66701: NOT
66702: OR
66703: IFFALSE 66707
// exit ;
66705: GO 66797
// vehicle := IsInUnit ( driver ) ;
66707: LD_ADDR_VAR 0 3
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 310
66721: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_STRING \
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: PUSH
66757: LD_STRING E
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_VAR 0 3
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PPUSH
66793: CALL_OW 446
// end ;
66797: LD_VAR 0 2
66801: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66802: LD_INT 0
66804: PPUSH
66805: PPUSH
66806: PPUSH
// tmp := [ ] ;
66807: LD_ADDR_VAR 0 5
66811: PUSH
66812: EMPTY
66813: ST_TO_ADDR
// for i in units do
66814: LD_ADDR_VAR 0 4
66818: PUSH
66819: LD_VAR 0 1
66823: PUSH
66824: FOR_IN
66825: IFFALSE 66863
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66827: LD_ADDR_VAR 0 5
66831: PUSH
66832: LD_VAR 0 5
66836: PPUSH
66837: LD_VAR 0 5
66841: PUSH
66842: LD_INT 1
66844: PLUS
66845: PPUSH
66846: LD_VAR 0 4
66850: PPUSH
66851: CALL_OW 256
66855: PPUSH
66856: CALL_OW 2
66860: ST_TO_ADDR
66861: GO 66824
66863: POP
66864: POP
// if not tmp then
66865: LD_VAR 0 5
66869: NOT
66870: IFFALSE 66874
// exit ;
66872: GO 66922
// if asc then
66874: LD_VAR 0 2
66878: IFFALSE 66902
// result := SortListByListAsc ( units , tmp ) else
66880: LD_ADDR_VAR 0 3
66884: PUSH
66885: LD_VAR 0 1
66889: PPUSH
66890: LD_VAR 0 5
66894: PPUSH
66895: CALL_OW 76
66899: ST_TO_ADDR
66900: GO 66922
// result := SortListByListDesc ( units , tmp ) ;
66902: LD_ADDR_VAR 0 3
66906: PUSH
66907: LD_VAR 0 1
66911: PPUSH
66912: LD_VAR 0 5
66916: PPUSH
66917: CALL_OW 77
66921: ST_TO_ADDR
// end ;
66922: LD_VAR 0 3
66926: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66927: LD_INT 0
66929: PPUSH
66930: PPUSH
// task := GetTaskList ( mech ) ;
66931: LD_ADDR_VAR 0 4
66935: PUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 437
66945: ST_TO_ADDR
// if not task then
66946: LD_VAR 0 4
66950: NOT
66951: IFFALSE 66955
// exit ;
66953: GO 66997
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66955: LD_ADDR_VAR 0 3
66959: PUSH
66960: LD_VAR 0 4
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PUSH
66973: LD_STRING r
66975: EQUAL
66976: PUSH
66977: LD_VAR 0 4
66981: PUSH
66982: LD_INT 1
66984: ARRAY
66985: PUSH
66986: LD_INT 4
66988: ARRAY
66989: PUSH
66990: LD_VAR 0 2
66994: EQUAL
66995: AND
66996: ST_TO_ADDR
// end ;
66997: LD_VAR 0 3
67001: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67002: LD_INT 0
67004: PPUSH
// SetDir ( unit , d ) ;
67005: LD_VAR 0 1
67009: PPUSH
67010: LD_VAR 0 4
67014: PPUSH
67015: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67019: LD_VAR 0 1
67023: PPUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: LD_VAR 0 3
67033: PPUSH
67034: LD_VAR 0 5
67038: PPUSH
67039: CALL_OW 48
// end ; end_of_file
67043: LD_VAR 0 6
67047: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 200
67055: DOUBLE
67056: GREATEREQUAL
67057: IFFALSE 67065
67059: LD_INT 299
67061: DOUBLE
67062: LESSEQUAL
67063: IFTRUE 67067
67065: GO 67099
67067: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67068: LD_VAR 0 1
67072: PPUSH
67073: LD_VAR 0 2
67077: PPUSH
67078: LD_VAR 0 3
67082: PPUSH
67083: LD_VAR 0 4
67087: PPUSH
67088: LD_VAR 0 5
67092: PPUSH
67093: CALL 24570 0 5
67097: GO 67176
67099: LD_INT 300
67101: DOUBLE
67102: GREATEREQUAL
67103: IFFALSE 67111
67105: LD_INT 399
67107: DOUBLE
67108: LESSEQUAL
67109: IFTRUE 67113
67111: GO 67175
67113: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67114: LD_VAR 0 1
67118: PPUSH
67119: LD_VAR 0 2
67123: PPUSH
67124: LD_VAR 0 3
67128: PPUSH
67129: LD_VAR 0 4
67133: PPUSH
67134: LD_VAR 0 5
67138: PPUSH
67139: LD_VAR 0 6
67143: PPUSH
67144: LD_VAR 0 7
67148: PPUSH
67149: LD_VAR 0 8
67153: PPUSH
67154: LD_VAR 0 9
67158: PPUSH
67159: LD_VAR 0 10
67163: PPUSH
67164: LD_VAR 0 11
67168: PPUSH
67169: CALL 22458 0 11
67173: GO 67176
67175: POP
// end ;
67176: PPOPN 11
67178: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67179: LD_VAR 0 1
67183: PPUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: LD_VAR 0 4
67198: PPUSH
67199: LD_VAR 0 5
67203: PPUSH
67204: CALL 24552 0 5
// end ; end_of_file
67208: PPOPN 5
67210: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67211: LD_VAR 0 1
67215: PPUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: LD_VAR 0 3
67225: PPUSH
67226: LD_VAR 0 4
67230: PPUSH
67231: LD_VAR 0 5
67235: PPUSH
67236: LD_VAR 0 6
67240: PPUSH
67241: CALL 11266 0 6
// end ;
67245: PPOPN 6
67247: END
