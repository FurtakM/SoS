// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10701 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10320 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10577 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10577 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10577 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10577 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10320 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10577 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10577 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10577 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10577 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10577 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 25051 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 255
9805: PUSH
9806: LD_INT 1
9808: EQUAL
9809: IFFALSE 9826
// ComMoveXY ( un , 57 , 52 ) ;
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 57
9818: PPUSH
9819: LD_INT 52
9821: PPUSH
9822: CALL_OW 111
// end ;
9826: PPOPN 2
9828: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9829: LD_EXP 21
9833: NOT
9834: IFFALSE 9884
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 3
9843: EQUAL
9844: PUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: PUSH
9855: LD_VAR 0 1
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: PUSH
9864: LD_VAR 0 2
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: AND
9873: OR
9874: IFFALSE 9884
// us_alert := true ;
9876: LD_ADDR_EXP 21
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 6
9891: EQUAL
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_INT 3
9900: EQUAL
9901: AND
9902: PUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 3
9910: EQUAL
9911: PUSH
9912: LD_VAR 0 2
9916: PUSH
9917: LD_INT 6
9919: EQUAL
9920: AND
9921: OR
9922: IFFALSE 9931
// YouLost ( alat ) ;
9924: LD_STRING alat
9926: PPUSH
9927: CALL_OW 104
// end ;
9931: PPOPN 2
9933: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 2
9946: EQUAL
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: LD_INT 58
9955: PUSH
9956: EMPTY
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: IN
9978: AND
9979: IFFALSE 10100
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9981: LD_OWVAR 3
9985: PUSH
9986: LD_VAR 0 1
9990: DIFF
9991: PPUSH
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 74
10001: PPUSH
10002: CALL_OW 255
10006: PUSH
10007: LD_INT 2
10009: NONEQUAL
10010: IFFALSE 10100
// begin Wait ( 0 0$1.3 ) ;
10012: LD_INT 46
10014: PPUSH
10015: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 250
10028: PPUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 251
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 250
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 251
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 250
10082: PPUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 251
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 453
// end ; end ;
10100: PPOPN 1
10102: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10103: LD_VAR 0 2
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: IN
10137: PUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: CALL 10622 0 1
10147: PPUSH
10148: CALL_OW 255
10152: PUSH
10153: LD_INT 2
10155: EQUAL
10156: NOT
10157: AND
10158: IFFALSE 10283
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10160: LD_INT 105
10162: PPUSH
10163: LD_INT 210
10165: PPUSH
10166: CALL_OW 12
10170: PPUSH
10171: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 250
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 251
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10229: LD_VAR 0 2
10233: PPUSH
10234: CALL_OW 250
10238: PPUSH
10239: LD_VAR 0 2
10243: PPUSH
10244: CALL_OW 251
10248: PPUSH
10249: LD_INT 3
10251: PPUSH
10252: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: CALL_OW 250
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: CALL_OW 251
10275: PPUSH
10276: LD_INT 3
10278: PPUSH
10279: CALL_OW 453
// end ; end ;
10283: PPOPN 4
10285: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: CALL 25149 0 3
// end ;
10305: PPOPN 3
10307: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL 25157 0 1
// end ; end_of_file
10317: PPOPN 1
10319: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 1
10334: PUSH
10335: LD_VAR 0 2
10339: ARRAY
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_VAR 0 4
10350: PPUSH
10351: CALL_OW 1
10355: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_VAR 0 7
10375: PPUSH
10376: CALL_OW 1
10380: ST_TO_ADDR
// result := tab ;
10381: LD_ADDR_VAR 0 5
10385: PUSH
10386: LD_VAR 0 1
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 5
10395: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
// if not GetControl ( veh ) = control_manual then
10401: LD_VAR 0 1
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: NOT
10415: IFFALSE 10427
// result := false else
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10572
// if veh in FilterAllUnits ( [ f_empty ] ) then
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 58
10434: PUSH
10435: EMPTY
10436: LIST
10437: PPUSH
10438: CALL_OW 69
10442: IN
10443: IFFALSE 10455
// result := false else
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
10453: GO 10572
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 255
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 55
10479: PUSH
10480: EMPTY
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// if not filter then
10492: LD_VAR 0 4
10496: NOT
10497: IFFALSE 10509
// result := false else
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
10507: GO 10572
// for i = 1 to filter do
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: DOUBLE
10515: LD_INT 1
10517: DEC
10518: ST_TO_ADDR
10519: LD_VAR 0 4
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10570
// if IsDriver ( filter [ i ] ) = veh then
10527: LD_VAR 0 4
10531: PUSH
10532: LD_VAR 0 3
10536: ARRAY
10537: PPUSH
10538: CALL 63399 0 1
10542: PUSH
10543: LD_VAR 0 1
10547: EQUAL
10548: IFFALSE 10568
// begin result := filter [ i ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 4
10559: PUSH
10560: LD_VAR 0 3
10564: ARRAY
10565: ST_TO_ADDR
// break ;
10566: GO 10570
// end ;
10568: GO 10524
10570: POP
10571: POP
// end ; end ;
10572: LD_VAR 0 2
10576: RET
// export function FindTarget ( unit ) ; begin
10577: LD_INT 0
10579: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 81
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 255
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 74
10616: ST_TO_ADDR
// end ;
10617: LD_VAR 0 2
10621: RET
// export function NearestUnit ( unit ) ; begin
10622: LD_INT 0
10624: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_OWVAR 3
10634: PUSH
10635: LD_VAR 0 1
10639: DIFF
10640: PPUSH
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 74
10650: ST_TO_ADDR
// end ; end_of_file
10651: LD_VAR 0 2
10655: RET
// every 12 12$00 do
10656: GO 10658
10658: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 570
10664: PPUSH
10665: LD_INT 350
10667: PPUSH
10668: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10672: LD_INT 10500
10674: PPUSH
10675: LD_INT 21000
10677: PPUSH
10678: CALL_OW 12
10682: PPUSH
10683: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10687: LD_INT 0
10689: PPUSH
10690: LD_INT 570
10692: PPUSH
10693: LD_INT 350
10695: PPUSH
10696: CALL_OW 550
// end ;
10700: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// uc_nation = nation_nature ;
10708: LD_ADDR_OWVAR 21
10712: PUSH
10713: LD_INT 0
10715: ST_TO_ADDR
// uc_side = 0 ;
10716: LD_ADDR_OWVAR 20
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// l = 0 ;
10724: LD_ADDR_VAR 0 6
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10732: LD_ADDR_OWVAR 24
10736: PUSH
10737: LD_INT 0
10739: PPUSH
10740: LD_INT 5
10742: PPUSH
10743: CALL_OW 12
10747: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10748: LD_ADDR_OWVAR 35
10752: PUSH
10753: LD_INT 5
10755: NEG
10756: PPUSH
10757: LD_INT 5
10759: PPUSH
10760: CALL_OW 12
10764: ST_TO_ADDR
// hc_gallery =  ;
10765: LD_ADDR_OWVAR 33
10769: PUSH
10770: LD_STRING 
10772: ST_TO_ADDR
// hc_class = class_apeman ;
10773: LD_ADDR_OWVAR 28
10777: PUSH
10778: LD_INT 12
10780: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10781: LD_ADDR_OWVAR 29
10785: PUSH
10786: LD_INT 11
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: CALL_OW 12
10796: PUSH
10797: LD_INT 10
10799: PPUSH
10800: LD_INT 11
10802: PPUSH
10803: CALL_OW 12
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// hc_sex = sex_male ;
10812: LD_ADDR_OWVAR 27
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10820: LD_ADDR_OWVAR 31
10824: PUSH
10825: LD_INT 0
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 12
10835: PUSH
10836: LD_INT 0
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// apeman = CreateHuman ;
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: CALL_OW 44
10860: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_INT 0
10873: PPUSH
10874: CALL_OW 49
// l = l + 1 ;
10878: LD_ADDR_VAR 0 6
10882: PUSH
10883: LD_VAR 0 6
10887: PUSH
10888: LD_INT 1
10890: PLUS
10891: ST_TO_ADDR
// end until l = num1 ;
10892: LD_VAR 0 6
10896: PUSH
10897: LD_VAR 0 1
10901: EQUAL
10902: IFFALSE 10732
// l = 0 ;
10904: LD_ADDR_VAR 0 6
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10912: LD_ADDR_OWVAR 35
10916: PUSH
10917: LD_INT 0
10919: PPUSH
10920: LD_INT 25
10922: PPUSH
10923: CALL_OW 12
10927: ST_TO_ADDR
// hc_class = class_tiger ;
10928: LD_ADDR_OWVAR 28
10932: PUSH
10933: LD_INT 14
10935: ST_TO_ADDR
// hc_sex = sex_male ;
10936: LD_ADDR_OWVAR 27
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// hc_gallery = sandnature ;
10944: LD_ADDR_OWVAR 33
10948: PUSH
10949: LD_STRING sandnature
10951: ST_TO_ADDR
// hc_face_number = 3 ;
10952: LD_ADDR_OWVAR 34
10956: PUSH
10957: LD_INT 3
10959: ST_TO_ADDR
// tiger = CreateHuman ;
10960: LD_ADDR_VAR 0 8
10964: PUSH
10965: CALL_OW 44
10969: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10970: LD_VAR 0 8
10974: PPUSH
10975: LD_VAR 0 4
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 49
// l = l + 1 ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_VAR 0 6
10996: PUSH
10997: LD_INT 1
10999: PLUS
11000: ST_TO_ADDR
// end until l = num2 ;
11001: LD_VAR 0 6
11005: PUSH
11006: LD_VAR 0 2
11010: EQUAL
11011: IFFALSE 10912
// l = 0 ;
11013: LD_ADDR_VAR 0 6
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11021: LD_ADDR_OWVAR 28
11025: PUSH
11026: LD_INT 18
11028: ST_TO_ADDR
// hc_gallery = sandnature ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING sandnature
11036: ST_TO_ADDR
// hc_face_number = 1 ;
11037: LD_ADDR_OWVAR 34
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// bird = CreateHuman ;
11045: LD_ADDR_VAR 0 9
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11055: LD_VAR 0 9
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 51
// l = l + 1 ;
11067: LD_ADDR_VAR 0 6
11071: PUSH
11072: LD_VAR 0 6
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: ST_TO_ADDR
// end until l = num3 ;
11081: LD_VAR 0 6
11085: PUSH
11086: LD_VAR 0 3
11090: EQUAL
11091: IFFALSE 11021
// end ; end_of_file
11093: LD_VAR 0 5
11097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11098: LD_INT 0
11100: PPUSH
// ar_miner := 81 ;
11101: LD_ADDR_EXP 33
11105: PUSH
11106: LD_INT 81
11108: ST_TO_ADDR
// ar_crane := 88 ;
11109: LD_ADDR_EXP 32
11113: PUSH
11114: LD_INT 88
11116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11117: LD_ADDR_EXP 27
11121: PUSH
11122: LD_INT 89
11124: ST_TO_ADDR
// us_hack := 99 ;
11125: LD_ADDR_EXP 28
11129: PUSH
11130: LD_INT 99
11132: ST_TO_ADDR
// us_artillery := 97 ;
11133: LD_ADDR_EXP 29
11137: PUSH
11138: LD_INT 97
11140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11141: LD_ADDR_EXP 30
11145: PUSH
11146: LD_INT 91
11148: ST_TO_ADDR
// ar_mortar := 92 ;
11149: LD_ADDR_EXP 31
11153: PUSH
11154: LD_INT 92
11156: ST_TO_ADDR
// ru_radar := 98 ;
11157: LD_ADDR_EXP 26
11161: PUSH
11162: LD_INT 98
11164: ST_TO_ADDR
// tech_Artillery := 80 ;
11165: LD_ADDR_EXP 34
11169: PUSH
11170: LD_INT 80
11172: ST_TO_ADDR
// tech_RadMat := 81 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 81
11180: ST_TO_ADDR
// tech_BasicTools := 82 ;
11181: LD_ADDR_EXP 36
11185: PUSH
11186: LD_INT 82
11188: ST_TO_ADDR
// tech_Cargo := 83 ;
11189: LD_ADDR_EXP 37
11193: PUSH
11194: LD_INT 83
11196: ST_TO_ADDR
// tech_Track := 84 ;
11197: LD_ADDR_EXP 38
11201: PUSH
11202: LD_INT 84
11204: ST_TO_ADDR
// tech_Crane := 85 ;
11205: LD_ADDR_EXP 39
11209: PUSH
11210: LD_INT 85
11212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11213: LD_ADDR_EXP 40
11217: PUSH
11218: LD_INT 86
11220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11221: LD_ADDR_EXP 41
11225: PUSH
11226: LD_INT 87
11228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11229: LD_ADDR_EXP 42
11233: PUSH
11234: LD_INT 88
11236: ST_TO_ADDR
// class_mastodont := 31 ;
11237: LD_ADDR_EXP 43
11241: PUSH
11242: LD_INT 31
11244: ST_TO_ADDR
// class_horse := 21 ;
11245: LD_ADDR_EXP 44
11249: PUSH
11250: LD_INT 21
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 1
11257: RET
// every 1 do
11258: GO 11260
11260: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11261: CALL 11098 0 0
11265: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11266: LD_INT 0
11268: PPUSH
// if p2 = 100 then
11269: LD_VAR 0 2
11273: PUSH
11274: LD_INT 100
11276: EQUAL
11277: IFFALSE 12280
// begin if not StreamModeActive then
11279: LD_EXP 45
11283: NOT
11284: IFFALSE 11294
// StreamModeActive := true ;
11286: LD_ADDR_EXP 45
11290: PUSH
11291: LD_INT 1
11293: ST_TO_ADDR
// if p3 = 0 then
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 0
11301: EQUAL
11302: IFFALSE 11308
// InitStreamMode ;
11304: CALL 12440 0 0
// if p3 = 1 then
11308: LD_VAR 0 3
11312: PUSH
11313: LD_INT 1
11315: EQUAL
11316: IFFALSE 11326
// sRocket := true ;
11318: LD_ADDR_EXP 50
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// if p3 = 2 then
11326: LD_VAR 0 3
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11344
// sSpeed := true ;
11336: LD_ADDR_EXP 49
11340: PUSH
11341: LD_INT 1
11343: ST_TO_ADDR
// if p3 = 3 then
11344: LD_VAR 0 3
11348: PUSH
11349: LD_INT 3
11351: EQUAL
11352: IFFALSE 11362
// sEngine := true ;
11354: LD_ADDR_EXP 51
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
// if p3 = 4 then
11362: LD_VAR 0 3
11366: PUSH
11367: LD_INT 4
11369: EQUAL
11370: IFFALSE 11380
// sSpec := true ;
11372: LD_ADDR_EXP 48
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// if p3 = 5 then
11380: LD_VAR 0 3
11384: PUSH
11385: LD_INT 5
11387: EQUAL
11388: IFFALSE 11398
// sLevel := true ;
11390: LD_ADDR_EXP 52
11394: PUSH
11395: LD_INT 1
11397: ST_TO_ADDR
// if p3 = 6 then
11398: LD_VAR 0 3
11402: PUSH
11403: LD_INT 6
11405: EQUAL
11406: IFFALSE 11416
// sArmoury := true ;
11408: LD_ADDR_EXP 53
11412: PUSH
11413: LD_INT 1
11415: ST_TO_ADDR
// if p3 = 7 then
11416: LD_VAR 0 3
11420: PUSH
11421: LD_INT 7
11423: EQUAL
11424: IFFALSE 11434
// sRadar := true ;
11426: LD_ADDR_EXP 54
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// if p3 = 8 then
11434: LD_VAR 0 3
11438: PUSH
11439: LD_INT 8
11441: EQUAL
11442: IFFALSE 11452
// sBunker := true ;
11444: LD_ADDR_EXP 55
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// if p3 = 9 then
11452: LD_VAR 0 3
11456: PUSH
11457: LD_INT 9
11459: EQUAL
11460: IFFALSE 11470
// sHack := true ;
11462: LD_ADDR_EXP 56
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// if p3 = 10 then
11470: LD_VAR 0 3
11474: PUSH
11475: LD_INT 10
11477: EQUAL
11478: IFFALSE 11488
// sFire := true ;
11480: LD_ADDR_EXP 57
11484: PUSH
11485: LD_INT 1
11487: ST_TO_ADDR
// if p3 = 11 then
11488: LD_VAR 0 3
11492: PUSH
11493: LD_INT 11
11495: EQUAL
11496: IFFALSE 11506
// sRefresh := true ;
11498: LD_ADDR_EXP 58
11502: PUSH
11503: LD_INT 1
11505: ST_TO_ADDR
// if p3 = 12 then
11506: LD_VAR 0 3
11510: PUSH
11511: LD_INT 12
11513: EQUAL
11514: IFFALSE 11524
// sExp := true ;
11516: LD_ADDR_EXP 59
11520: PUSH
11521: LD_INT 1
11523: ST_TO_ADDR
// if p3 = 13 then
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 13
11531: EQUAL
11532: IFFALSE 11542
// sDepot := true ;
11534: LD_ADDR_EXP 60
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// if p3 = 14 then
11542: LD_VAR 0 3
11546: PUSH
11547: LD_INT 14
11549: EQUAL
11550: IFFALSE 11560
// sFlag := true ;
11552: LD_ADDR_EXP 61
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// if p3 = 15 then
11560: LD_VAR 0 3
11564: PUSH
11565: LD_INT 15
11567: EQUAL
11568: IFFALSE 11578
// sKamikadze := true ;
11570: LD_ADDR_EXP 69
11574: PUSH
11575: LD_INT 1
11577: ST_TO_ADDR
// if p3 = 16 then
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 16
11585: EQUAL
11586: IFFALSE 11596
// sTroll := true ;
11588: LD_ADDR_EXP 70
11592: PUSH
11593: LD_INT 1
11595: ST_TO_ADDR
// if p3 = 17 then
11596: LD_VAR 0 3
11600: PUSH
11601: LD_INT 17
11603: EQUAL
11604: IFFALSE 11614
// sSlow := true ;
11606: LD_ADDR_EXP 71
11610: PUSH
11611: LD_INT 1
11613: ST_TO_ADDR
// if p3 = 18 then
11614: LD_VAR 0 3
11618: PUSH
11619: LD_INT 18
11621: EQUAL
11622: IFFALSE 11632
// sLack := true ;
11624: LD_ADDR_EXP 72
11628: PUSH
11629: LD_INT 1
11631: ST_TO_ADDR
// if p3 = 19 then
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 19
11639: EQUAL
11640: IFFALSE 11650
// sTank := true ;
11642: LD_ADDR_EXP 74
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// if p3 = 20 then
11650: LD_VAR 0 3
11654: PUSH
11655: LD_INT 20
11657: EQUAL
11658: IFFALSE 11668
// sRemote := true ;
11660: LD_ADDR_EXP 75
11664: PUSH
11665: LD_INT 1
11667: ST_TO_ADDR
// if p3 = 21 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 21
11675: EQUAL
11676: IFFALSE 11686
// sPowell := true ;
11678: LD_ADDR_EXP 76
11682: PUSH
11683: LD_INT 1
11685: ST_TO_ADDR
// if p3 = 22 then
11686: LD_VAR 0 3
11690: PUSH
11691: LD_INT 22
11693: EQUAL
11694: IFFALSE 11704
// sTeleport := true ;
11696: LD_ADDR_EXP 79
11700: PUSH
11701: LD_INT 1
11703: ST_TO_ADDR
// if p3 = 23 then
11704: LD_VAR 0 3
11708: PUSH
11709: LD_INT 23
11711: EQUAL
11712: IFFALSE 11722
// sOilTower := true ;
11714: LD_ADDR_EXP 81
11718: PUSH
11719: LD_INT 1
11721: ST_TO_ADDR
// if p3 = 24 then
11722: LD_VAR 0 3
11726: PUSH
11727: LD_INT 24
11729: EQUAL
11730: IFFALSE 11740
// sShovel := true ;
11732: LD_ADDR_EXP 82
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// if p3 = 25 then
11740: LD_VAR 0 3
11744: PUSH
11745: LD_INT 25
11747: EQUAL
11748: IFFALSE 11758
// sSheik := true ;
11750: LD_ADDR_EXP 83
11754: PUSH
11755: LD_INT 1
11757: ST_TO_ADDR
// if p3 = 26 then
11758: LD_VAR 0 3
11762: PUSH
11763: LD_INT 26
11765: EQUAL
11766: IFFALSE 11776
// sEarthquake := true ;
11768: LD_ADDR_EXP 85
11772: PUSH
11773: LD_INT 1
11775: ST_TO_ADDR
// if p3 = 27 then
11776: LD_VAR 0 3
11780: PUSH
11781: LD_INT 27
11783: EQUAL
11784: IFFALSE 11794
// sAI := true ;
11786: LD_ADDR_EXP 86
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// if p3 = 28 then
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 28
11801: EQUAL
11802: IFFALSE 11812
// sCargo := true ;
11804: LD_ADDR_EXP 89
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// if p3 = 29 then
11812: LD_VAR 0 3
11816: PUSH
11817: LD_INT 29
11819: EQUAL
11820: IFFALSE 11830
// sDLaser := true ;
11822: LD_ADDR_EXP 90
11826: PUSH
11827: LD_INT 1
11829: ST_TO_ADDR
// if p3 = 30 then
11830: LD_VAR 0 3
11834: PUSH
11835: LD_INT 30
11837: EQUAL
11838: IFFALSE 11848
// sExchange := true ;
11840: LD_ADDR_EXP 91
11844: PUSH
11845: LD_INT 1
11847: ST_TO_ADDR
// if p3 = 31 then
11848: LD_VAR 0 3
11852: PUSH
11853: LD_INT 31
11855: EQUAL
11856: IFFALSE 11866
// sFac := true ;
11858: LD_ADDR_EXP 92
11862: PUSH
11863: LD_INT 1
11865: ST_TO_ADDR
// if p3 = 32 then
11866: LD_VAR 0 3
11870: PUSH
11871: LD_INT 32
11873: EQUAL
11874: IFFALSE 11884
// sPower := true ;
11876: LD_ADDR_EXP 93
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// if p3 = 33 then
11884: LD_VAR 0 3
11888: PUSH
11889: LD_INT 33
11891: EQUAL
11892: IFFALSE 11902
// sRandom := true ;
11894: LD_ADDR_EXP 94
11898: PUSH
11899: LD_INT 1
11901: ST_TO_ADDR
// if p3 = 34 then
11902: LD_VAR 0 3
11906: PUSH
11907: LD_INT 34
11909: EQUAL
11910: IFFALSE 11920
// sShield := true ;
11912: LD_ADDR_EXP 95
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// if p3 = 35 then
11920: LD_VAR 0 3
11924: PUSH
11925: LD_INT 35
11927: EQUAL
11928: IFFALSE 11938
// sTime := true ;
11930: LD_ADDR_EXP 96
11934: PUSH
11935: LD_INT 1
11937: ST_TO_ADDR
// if p3 = 36 then
11938: LD_VAR 0 3
11942: PUSH
11943: LD_INT 36
11945: EQUAL
11946: IFFALSE 11956
// sTools := true ;
11948: LD_ADDR_EXP 97
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// if p3 = 101 then
11956: LD_VAR 0 3
11960: PUSH
11961: LD_INT 101
11963: EQUAL
11964: IFFALSE 11974
// sSold := true ;
11966: LD_ADDR_EXP 62
11970: PUSH
11971: LD_INT 1
11973: ST_TO_ADDR
// if p3 = 102 then
11974: LD_VAR 0 3
11978: PUSH
11979: LD_INT 102
11981: EQUAL
11982: IFFALSE 11992
// sDiff := true ;
11984: LD_ADDR_EXP 63
11988: PUSH
11989: LD_INT 1
11991: ST_TO_ADDR
// if p3 = 103 then
11992: LD_VAR 0 3
11996: PUSH
11997: LD_INT 103
11999: EQUAL
12000: IFFALSE 12010
// sFog := true ;
12002: LD_ADDR_EXP 66
12006: PUSH
12007: LD_INT 1
12009: ST_TO_ADDR
// if p3 = 104 then
12010: LD_VAR 0 3
12014: PUSH
12015: LD_INT 104
12017: EQUAL
12018: IFFALSE 12028
// sReset := true ;
12020: LD_ADDR_EXP 67
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// if p3 = 105 then
12028: LD_VAR 0 3
12032: PUSH
12033: LD_INT 105
12035: EQUAL
12036: IFFALSE 12046
// sSun := true ;
12038: LD_ADDR_EXP 68
12042: PUSH
12043: LD_INT 1
12045: ST_TO_ADDR
// if p3 = 106 then
12046: LD_VAR 0 3
12050: PUSH
12051: LD_INT 106
12053: EQUAL
12054: IFFALSE 12064
// sTiger := true ;
12056: LD_ADDR_EXP 64
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// if p3 = 107 then
12064: LD_VAR 0 3
12068: PUSH
12069: LD_INT 107
12071: EQUAL
12072: IFFALSE 12082
// sBomb := true ;
12074: LD_ADDR_EXP 65
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if p3 = 108 then
12082: LD_VAR 0 3
12086: PUSH
12087: LD_INT 108
12089: EQUAL
12090: IFFALSE 12100
// sWound := true ;
12092: LD_ADDR_EXP 73
12096: PUSH
12097: LD_INT 1
12099: ST_TO_ADDR
// if p3 = 109 then
12100: LD_VAR 0 3
12104: PUSH
12105: LD_INT 109
12107: EQUAL
12108: IFFALSE 12118
// sBetray := true ;
12110: LD_ADDR_EXP 77
12114: PUSH
12115: LD_INT 1
12117: ST_TO_ADDR
// if p3 = 110 then
12118: LD_VAR 0 3
12122: PUSH
12123: LD_INT 110
12125: EQUAL
12126: IFFALSE 12136
// sContamin := true ;
12128: LD_ADDR_EXP 78
12132: PUSH
12133: LD_INT 1
12135: ST_TO_ADDR
// if p3 = 111 then
12136: LD_VAR 0 3
12140: PUSH
12141: LD_INT 111
12143: EQUAL
12144: IFFALSE 12154
// sOil := true ;
12146: LD_ADDR_EXP 80
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// if p3 = 112 then
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 112
12161: EQUAL
12162: IFFALSE 12172
// sStu := true ;
12164: LD_ADDR_EXP 84
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// if p3 = 113 then
12172: LD_VAR 0 3
12176: PUSH
12177: LD_INT 113
12179: EQUAL
12180: IFFALSE 12190
// sBazooka := true ;
12182: LD_ADDR_EXP 87
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// if p3 = 114 then
12190: LD_VAR 0 3
12194: PUSH
12195: LD_INT 114
12197: EQUAL
12198: IFFALSE 12208
// sMortar := true ;
12200: LD_ADDR_EXP 88
12204: PUSH
12205: LD_INT 1
12207: ST_TO_ADDR
// if p3 = 115 then
12208: LD_VAR 0 3
12212: PUSH
12213: LD_INT 115
12215: EQUAL
12216: IFFALSE 12226
// sRanger := true ;
12218: LD_ADDR_EXP 98
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// if p3 = 116 then
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 116
12233: EQUAL
12234: IFFALSE 12244
// sComputer := true ;
12236: LD_ADDR_EXP 99
12240: PUSH
12241: LD_INT 1
12243: ST_TO_ADDR
// if p3 = 117 then
12244: LD_VAR 0 3
12248: PUSH
12249: LD_INT 117
12251: EQUAL
12252: IFFALSE 12262
// s30 := true ;
12254: LD_ADDR_EXP 100
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// if p3 = 118 then
12262: LD_VAR 0 3
12266: PUSH
12267: LD_INT 118
12269: EQUAL
12270: IFFALSE 12280
// s60 := true ;
12272: LD_ADDR_EXP 101
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// end ; if p2 = 101 then
12280: LD_VAR 0 2
12284: PUSH
12285: LD_INT 101
12287: EQUAL
12288: IFFALSE 12416
// begin case p3 of 1 :
12290: LD_VAR 0 3
12294: PUSH
12295: LD_INT 1
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12310
12303: POP
// hHackUnlimitedResources ; 2 :
12304: CALL 24012 0 0
12308: GO 12416
12310: LD_INT 2
12312: DOUBLE
12313: EQUAL
12314: IFTRUE 12318
12316: GO 12325
12318: POP
// hHackSetLevel10 ; 3 :
12319: CALL 24145 0 0
12323: GO 12416
12325: LD_INT 3
12327: DOUBLE
12328: EQUAL
12329: IFTRUE 12333
12331: GO 12340
12333: POP
// hHackSetLevel10YourUnits ; 4 :
12334: CALL 24230 0 0
12338: GO 12416
12340: LD_INT 4
12342: DOUBLE
12343: EQUAL
12344: IFTRUE 12348
12346: GO 12355
12348: POP
// hHackInvincible ; 5 :
12349: CALL 24678 0 0
12353: GO 12416
12355: LD_INT 5
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12370
12363: POP
// hHackInvisible ; 6 :
12364: CALL 24789 0 0
12368: GO 12416
12370: LD_INT 6
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12385
12378: POP
// hHackChangeYourSide ; 7 :
12379: CALL 24846 0 0
12383: GO 12416
12385: LD_INT 7
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12400
12393: POP
// hHackChangeUnitSide ; 8 :
12394: CALL 24888 0 0
12398: GO 12416
12400: LD_INT 8
12402: DOUBLE
12403: EQUAL
12404: IFTRUE 12408
12406: GO 12415
12408: POP
// hHackFog ; end ;
12409: CALL 24989 0 0
12413: GO 12416
12415: POP
// end ; end ;
12416: LD_VAR 0 7
12420: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12421: GO 12423
12423: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12424: LD_STRING initStreamRollete();
12426: PPUSH
12427: CALL_OW 559
// InitStreamMode ;
12431: CALL 12440 0 0
// DefineStreamItems ( ) ;
12435: CALL 12904 0 0
// end ;
12439: END
// function InitStreamMode ; begin
12440: LD_INT 0
12442: PPUSH
// streamModeActive := false ;
12443: LD_ADDR_EXP 45
12447: PUSH
12448: LD_INT 0
12450: ST_TO_ADDR
// normalCounter := 36 ;
12451: LD_ADDR_EXP 46
12455: PUSH
12456: LD_INT 36
12458: ST_TO_ADDR
// hardcoreCounter := 16 ;
12459: LD_ADDR_EXP 47
12463: PUSH
12464: LD_INT 16
12466: ST_TO_ADDR
// sRocket := false ;
12467: LD_ADDR_EXP 50
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// sSpeed := false ;
12475: LD_ADDR_EXP 49
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// sEngine := false ;
12483: LD_ADDR_EXP 51
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// sSpec := false ;
12491: LD_ADDR_EXP 48
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// sLevel := false ;
12499: LD_ADDR_EXP 52
12503: PUSH
12504: LD_INT 0
12506: ST_TO_ADDR
// sArmoury := false ;
12507: LD_ADDR_EXP 53
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sRadar := false ;
12515: LD_ADDR_EXP 54
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sBunker := false ;
12523: LD_ADDR_EXP 55
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sHack := false ;
12531: LD_ADDR_EXP 56
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sFire := false ;
12539: LD_ADDR_EXP 57
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sRefresh := false ;
12547: LD_ADDR_EXP 58
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sExp := false ;
12555: LD_ADDR_EXP 59
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// sDepot := false ;
12563: LD_ADDR_EXP 60
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// sFlag := false ;
12571: LD_ADDR_EXP 61
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// sKamikadze := false ;
12579: LD_ADDR_EXP 69
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// sTroll := false ;
12587: LD_ADDR_EXP 70
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// sSlow := false ;
12595: LD_ADDR_EXP 71
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sLack := false ;
12603: LD_ADDR_EXP 72
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sTank := false ;
12611: LD_ADDR_EXP 74
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sRemote := false ;
12619: LD_ADDR_EXP 75
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sPowell := false ;
12627: LD_ADDR_EXP 76
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sTeleport := false ;
12635: LD_ADDR_EXP 79
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sOilTower := false ;
12643: LD_ADDR_EXP 81
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sShovel := false ;
12651: LD_ADDR_EXP 82
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sSheik := false ;
12659: LD_ADDR_EXP 83
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sEarthquake := false ;
12667: LD_ADDR_EXP 85
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sAI := false ;
12675: LD_ADDR_EXP 86
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sCargo := false ;
12683: LD_ADDR_EXP 89
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sDLaser := false ;
12691: LD_ADDR_EXP 90
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sExchange := false ;
12699: LD_ADDR_EXP 91
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sFac := false ;
12707: LD_ADDR_EXP 92
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sPower := false ;
12715: LD_ADDR_EXP 93
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sRandom := false ;
12723: LD_ADDR_EXP 94
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// sShield := false ;
12731: LD_ADDR_EXP 95
12735: PUSH
12736: LD_INT 0
12738: ST_TO_ADDR
// sTime := false ;
12739: LD_ADDR_EXP 96
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// sTools := false ;
12747: LD_ADDR_EXP 97
12751: PUSH
12752: LD_INT 0
12754: ST_TO_ADDR
// sSold := false ;
12755: LD_ADDR_EXP 62
12759: PUSH
12760: LD_INT 0
12762: ST_TO_ADDR
// sDiff := false ;
12763: LD_ADDR_EXP 63
12767: PUSH
12768: LD_INT 0
12770: ST_TO_ADDR
// sFog := false ;
12771: LD_ADDR_EXP 66
12775: PUSH
12776: LD_INT 0
12778: ST_TO_ADDR
// sReset := false ;
12779: LD_ADDR_EXP 67
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// sSun := false ;
12787: LD_ADDR_EXP 68
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// sTiger := false ;
12795: LD_ADDR_EXP 64
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// sBomb := false ;
12803: LD_ADDR_EXP 65
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// sWound := false ;
12811: LD_ADDR_EXP 73
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// sBetray := false ;
12819: LD_ADDR_EXP 77
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sContamin := false ;
12827: LD_ADDR_EXP 78
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sOil := false ;
12835: LD_ADDR_EXP 80
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sStu := false ;
12843: LD_ADDR_EXP 84
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sBazooka := false ;
12851: LD_ADDR_EXP 87
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sMortar := false ;
12859: LD_ADDR_EXP 88
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sRanger := false ;
12867: LD_ADDR_EXP 98
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sComputer := false ;
12875: LD_ADDR_EXP 99
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// s30 := false ;
12883: LD_ADDR_EXP 100
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// s60 := false ;
12891: LD_ADDR_EXP 101
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// end ;
12899: LD_VAR 0 1
12903: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12904: LD_INT 0
12906: PPUSH
12907: PPUSH
12908: PPUSH
12909: PPUSH
12910: PPUSH
// result := [ ] ;
12911: LD_ADDR_VAR 0 1
12915: PUSH
12916: EMPTY
12917: ST_TO_ADDR
// if campaign_id = 1 then
12918: LD_OWVAR 69
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: IFFALSE 16092
// begin case mission_number of 1 :
12928: LD_OWVAR 70
12932: PUSH
12933: LD_INT 1
12935: DOUBLE
12936: EQUAL
12937: IFTRUE 12941
12939: GO 13017
12941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12942: LD_ADDR_VAR 0 1
12946: PUSH
12947: LD_INT 2
12949: PUSH
12950: LD_INT 4
12952: PUSH
12953: LD_INT 11
12955: PUSH
12956: LD_INT 12
12958: PUSH
12959: LD_INT 15
12961: PUSH
12962: LD_INT 16
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_INT 23
12970: PUSH
12971: LD_INT 26
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 101
12987: PUSH
12988: LD_INT 102
12990: PUSH
12991: LD_INT 106
12993: PUSH
12994: LD_INT 116
12996: PUSH
12997: LD_INT 117
12999: PUSH
13000: LD_INT 118
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 16090
13017: LD_INT 2
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13109
13025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13026: LD_ADDR_VAR 0 1
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 4
13036: PUSH
13037: LD_INT 11
13039: PUSH
13040: LD_INT 12
13042: PUSH
13043: LD_INT 15
13045: PUSH
13046: LD_INT 16
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_INT 23
13054: PUSH
13055: LD_INT 26
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 101
13071: PUSH
13072: LD_INT 102
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 108
13083: PUSH
13084: LD_INT 116
13086: PUSH
13087: LD_INT 117
13089: PUSH
13090: LD_INT 118
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: ST_TO_ADDR
13107: GO 16090
13109: LD_INT 3
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13205
13117: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13118: LD_ADDR_VAR 0 1
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: LD_INT 4
13128: PUSH
13129: LD_INT 5
13131: PUSH
13132: LD_INT 11
13134: PUSH
13135: LD_INT 12
13137: PUSH
13138: LD_INT 15
13140: PUSH
13141: LD_INT 16
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_INT 26
13149: PUSH
13150: LD_INT 36
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 101
13167: PUSH
13168: LD_INT 102
13170: PUSH
13171: LD_INT 105
13173: PUSH
13174: LD_INT 106
13176: PUSH
13177: LD_INT 108
13179: PUSH
13180: LD_INT 116
13182: PUSH
13183: LD_INT 117
13185: PUSH
13186: LD_INT 118
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: ST_TO_ADDR
13203: GO 16090
13205: LD_INT 4
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13309
13213: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 4
13224: PUSH
13225: LD_INT 5
13227: PUSH
13228: LD_INT 8
13230: PUSH
13231: LD_INT 11
13233: PUSH
13234: LD_INT 12
13236: PUSH
13237: LD_INT 15
13239: PUSH
13240: LD_INT 16
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_INT 23
13248: PUSH
13249: LD_INT 26
13251: PUSH
13252: LD_INT 36
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 101
13271: PUSH
13272: LD_INT 102
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 116
13286: PUSH
13287: LD_INT 117
13289: PUSH
13290: LD_INT 118
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: ST_TO_ADDR
13307: GO 16090
13309: LD_INT 5
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13429
13317: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13318: LD_ADDR_VAR 0 1
13322: PUSH
13323: LD_INT 2
13325: PUSH
13326: LD_INT 4
13328: PUSH
13329: LD_INT 5
13331: PUSH
13332: LD_INT 6
13334: PUSH
13335: LD_INT 8
13337: PUSH
13338: LD_INT 11
13340: PUSH
13341: LD_INT 12
13343: PUSH
13344: LD_INT 15
13346: PUSH
13347: LD_INT 16
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 23
13355: PUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 26
13361: PUSH
13362: LD_INT 36
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 101
13383: PUSH
13384: LD_INT 102
13386: PUSH
13387: LD_INT 105
13389: PUSH
13390: LD_INT 106
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: LD_INT 109
13398: PUSH
13399: LD_INT 112
13401: PUSH
13402: LD_INT 116
13404: PUSH
13405: LD_INT 117
13407: PUSH
13408: LD_INT 118
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: ST_TO_ADDR
13427: GO 16090
13429: LD_INT 6
13431: DOUBLE
13432: EQUAL
13433: IFTRUE 13437
13435: GO 13569
13437: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_INT 2
13445: PUSH
13446: LD_INT 4
13448: PUSH
13449: LD_INT 5
13451: PUSH
13452: LD_INT 6
13454: PUSH
13455: LD_INT 8
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 15
13466: PUSH
13467: LD_INT 16
13469: PUSH
13470: LD_INT 20
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_INT 23
13481: PUSH
13482: LD_INT 25
13484: PUSH
13485: LD_INT 26
13487: PUSH
13488: LD_INT 30
13490: PUSH
13491: LD_INT 31
13493: PUSH
13494: LD_INT 32
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 101
13523: PUSH
13524: LD_INT 102
13526: PUSH
13527: LD_INT 105
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 108
13535: PUSH
13536: LD_INT 109
13538: PUSH
13539: LD_INT 112
13541: PUSH
13542: LD_INT 116
13544: PUSH
13545: LD_INT 117
13547: PUSH
13548: LD_INT 118
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: ST_TO_ADDR
13567: GO 16090
13569: LD_INT 7
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13689
13577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13578: LD_ADDR_VAR 0 1
13582: PUSH
13583: LD_INT 2
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: LD_INT 7
13594: PUSH
13595: LD_INT 11
13597: PUSH
13598: LD_INT 12
13600: PUSH
13601: LD_INT 15
13603: PUSH
13604: LD_INT 16
13606: PUSH
13607: LD_INT 20
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 22
13615: PUSH
13616: LD_INT 23
13618: PUSH
13619: LD_INT 25
13621: PUSH
13622: LD_INT 26
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 101
13643: PUSH
13644: LD_INT 102
13646: PUSH
13647: LD_INT 103
13649: PUSH
13650: LD_INT 105
13652: PUSH
13653: LD_INT 106
13655: PUSH
13656: LD_INT 108
13658: PUSH
13659: LD_INT 112
13661: PUSH
13662: LD_INT 116
13664: PUSH
13665: LD_INT 117
13667: PUSH
13668: LD_INT 118
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: ST_TO_ADDR
13687: GO 16090
13689: LD_INT 8
13691: DOUBLE
13692: EQUAL
13693: IFTRUE 13697
13695: GO 13837
13697: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13698: LD_ADDR_VAR 0 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 6
13714: PUSH
13715: LD_INT 7
13717: PUSH
13718: LD_INT 8
13720: PUSH
13721: LD_INT 11
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 31
13756: PUSH
13757: LD_INT 32
13759: PUSH
13760: LD_INT 36
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 101
13787: PUSH
13788: LD_INT 102
13790: PUSH
13791: LD_INT 103
13793: PUSH
13794: LD_INT 105
13796: PUSH
13797: LD_INT 106
13799: PUSH
13800: LD_INT 108
13802: PUSH
13803: LD_INT 109
13805: PUSH
13806: LD_INT 112
13808: PUSH
13809: LD_INT 116
13811: PUSH
13812: LD_INT 117
13814: PUSH
13815: LD_INT 118
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: ST_TO_ADDR
13835: GO 16090
13837: LD_INT 9
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13993
13845: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: LD_INT 6
13862: PUSH
13863: LD_INT 7
13865: PUSH
13866: LD_INT 8
13868: PUSH
13869: LD_INT 11
13871: PUSH
13872: LD_INT 12
13874: PUSH
13875: LD_INT 15
13877: PUSH
13878: LD_INT 16
13880: PUSH
13881: LD_INT 20
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_INT 23
13892: PUSH
13893: LD_INT 25
13895: PUSH
13896: LD_INT 26
13898: PUSH
13899: LD_INT 28
13901: PUSH
13902: LD_INT 30
13904: PUSH
13905: LD_INT 31
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: LD_INT 36
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 101
13939: PUSH
13940: LD_INT 102
13942: PUSH
13943: LD_INT 103
13945: PUSH
13946: LD_INT 105
13948: PUSH
13949: LD_INT 106
13951: PUSH
13952: LD_INT 108
13954: PUSH
13955: LD_INT 109
13957: PUSH
13958: LD_INT 112
13960: PUSH
13961: LD_INT 114
13963: PUSH
13964: LD_INT 116
13966: PUSH
13967: LD_INT 117
13969: PUSH
13970: LD_INT 118
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: ST_TO_ADDR
13991: GO 16090
13993: LD_INT 10
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14197
14001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14002: LD_ADDR_VAR 0 1
14006: PUSH
14007: LD_INT 2
14009: PUSH
14010: LD_INT 4
14012: PUSH
14013: LD_INT 5
14015: PUSH
14016: LD_INT 6
14018: PUSH
14019: LD_INT 7
14021: PUSH
14022: LD_INT 8
14024: PUSH
14025: LD_INT 9
14027: PUSH
14028: LD_INT 10
14030: PUSH
14031: LD_INT 11
14033: PUSH
14034: LD_INT 12
14036: PUSH
14037: LD_INT 13
14039: PUSH
14040: LD_INT 14
14042: PUSH
14043: LD_INT 15
14045: PUSH
14046: LD_INT 16
14048: PUSH
14049: LD_INT 17
14051: PUSH
14052: LD_INT 18
14054: PUSH
14055: LD_INT 19
14057: PUSH
14058: LD_INT 20
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 23
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 26
14078: PUSH
14079: LD_INT 28
14081: PUSH
14082: LD_INT 30
14084: PUSH
14085: LD_INT 31
14087: PUSH
14088: LD_INT 32
14090: PUSH
14091: LD_INT 36
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 101
14127: PUSH
14128: LD_INT 102
14130: PUSH
14131: LD_INT 103
14133: PUSH
14134: LD_INT 104
14136: PUSH
14137: LD_INT 105
14139: PUSH
14140: LD_INT 106
14142: PUSH
14143: LD_INT 107
14145: PUSH
14146: LD_INT 108
14148: PUSH
14149: LD_INT 109
14151: PUSH
14152: LD_INT 110
14154: PUSH
14155: LD_INT 111
14157: PUSH
14158: LD_INT 112
14160: PUSH
14161: LD_INT 114
14163: PUSH
14164: LD_INT 116
14166: PUSH
14167: LD_INT 117
14169: PUSH
14170: LD_INT 118
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16090
14197: LD_INT 11
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14409
14205: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14206: LD_ADDR_VAR 0 1
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: LD_INT 5
14222: PUSH
14223: LD_INT 6
14225: PUSH
14226: LD_INT 7
14228: PUSH
14229: LD_INT 8
14231: PUSH
14232: LD_INT 9
14234: PUSH
14235: LD_INT 10
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_INT 12
14243: PUSH
14244: LD_INT 13
14246: PUSH
14247: LD_INT 14
14249: PUSH
14250: LD_INT 15
14252: PUSH
14253: LD_INT 16
14255: PUSH
14256: LD_INT 17
14258: PUSH
14259: LD_INT 18
14261: PUSH
14262: LD_INT 19
14264: PUSH
14265: LD_INT 20
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 23
14276: PUSH
14277: LD_INT 24
14279: PUSH
14280: LD_INT 25
14282: PUSH
14283: LD_INT 26
14285: PUSH
14286: LD_INT 28
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: LD_INT 31
14294: PUSH
14295: LD_INT 32
14297: PUSH
14298: LD_INT 34
14300: PUSH
14301: LD_INT 36
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 101
14339: PUSH
14340: LD_INT 102
14342: PUSH
14343: LD_INT 103
14345: PUSH
14346: LD_INT 104
14348: PUSH
14349: LD_INT 105
14351: PUSH
14352: LD_INT 106
14354: PUSH
14355: LD_INT 107
14357: PUSH
14358: LD_INT 108
14360: PUSH
14361: LD_INT 109
14363: PUSH
14364: LD_INT 110
14366: PUSH
14367: LD_INT 111
14369: PUSH
14370: LD_INT 112
14372: PUSH
14373: LD_INT 114
14375: PUSH
14376: LD_INT 116
14378: PUSH
14379: LD_INT 117
14381: PUSH
14382: LD_INT 118
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: ST_TO_ADDR
14407: GO 16090
14409: LD_INT 12
14411: DOUBLE
14412: EQUAL
14413: IFTRUE 14417
14415: GO 14637
14417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: LD_INT 4
14434: PUSH
14435: LD_INT 5
14437: PUSH
14438: LD_INT 6
14440: PUSH
14441: LD_INT 7
14443: PUSH
14444: LD_INT 8
14446: PUSH
14447: LD_INT 9
14449: PUSH
14450: LD_INT 10
14452: PUSH
14453: LD_INT 11
14455: PUSH
14456: LD_INT 12
14458: PUSH
14459: LD_INT 13
14461: PUSH
14462: LD_INT 14
14464: PUSH
14465: LD_INT 15
14467: PUSH
14468: LD_INT 16
14470: PUSH
14471: LD_INT 17
14473: PUSH
14474: LD_INT 18
14476: PUSH
14477: LD_INT 19
14479: PUSH
14480: LD_INT 20
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 23
14491: PUSH
14492: LD_INT 24
14494: PUSH
14495: LD_INT 25
14497: PUSH
14498: LD_INT 26
14500: PUSH
14501: LD_INT 27
14503: PUSH
14504: LD_INT 28
14506: PUSH
14507: LD_INT 30
14509: PUSH
14510: LD_INT 31
14512: PUSH
14513: LD_INT 32
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 34
14521: PUSH
14522: LD_INT 36
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 101
14563: PUSH
14564: LD_INT 102
14566: PUSH
14567: LD_INT 103
14569: PUSH
14570: LD_INT 104
14572: PUSH
14573: LD_INT 105
14575: PUSH
14576: LD_INT 106
14578: PUSH
14579: LD_INT 107
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 110
14590: PUSH
14591: LD_INT 111
14593: PUSH
14594: LD_INT 112
14596: PUSH
14597: LD_INT 113
14599: PUSH
14600: LD_INT 114
14602: PUSH
14603: LD_INT 116
14605: PUSH
14606: LD_INT 117
14608: PUSH
14609: LD_INT 118
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: ST_TO_ADDR
14635: GO 16090
14637: LD_INT 13
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14645
14643: GO 14853
14645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 1
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 3
14659: PUSH
14660: LD_INT 4
14662: PUSH
14663: LD_INT 5
14665: PUSH
14666: LD_INT 8
14668: PUSH
14669: LD_INT 9
14671: PUSH
14672: LD_INT 10
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: LD_INT 12
14680: PUSH
14681: LD_INT 14
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: LD_INT 16
14689: PUSH
14690: LD_INT 17
14692: PUSH
14693: LD_INT 18
14695: PUSH
14696: LD_INT 19
14698: PUSH
14699: LD_INT 20
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 24
14713: PUSH
14714: LD_INT 25
14716: PUSH
14717: LD_INT 26
14719: PUSH
14720: LD_INT 27
14722: PUSH
14723: LD_INT 28
14725: PUSH
14726: LD_INT 30
14728: PUSH
14729: LD_INT 31
14731: PUSH
14732: LD_INT 32
14734: PUSH
14735: LD_INT 33
14737: PUSH
14738: LD_INT 34
14740: PUSH
14741: LD_INT 36
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 101
14779: PUSH
14780: LD_INT 102
14782: PUSH
14783: LD_INT 103
14785: PUSH
14786: LD_INT 104
14788: PUSH
14789: LD_INT 105
14791: PUSH
14792: LD_INT 106
14794: PUSH
14795: LD_INT 107
14797: PUSH
14798: LD_INT 108
14800: PUSH
14801: LD_INT 109
14803: PUSH
14804: LD_INT 110
14806: PUSH
14807: LD_INT 111
14809: PUSH
14810: LD_INT 112
14812: PUSH
14813: LD_INT 113
14815: PUSH
14816: LD_INT 114
14818: PUSH
14819: LD_INT 116
14821: PUSH
14822: LD_INT 117
14824: PUSH
14825: LD_INT 118
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: ST_TO_ADDR
14851: GO 16090
14853: LD_INT 14
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 15085
14861: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: LD_INT 2
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: LD_INT 4
14878: PUSH
14879: LD_INT 5
14881: PUSH
14882: LD_INT 6
14884: PUSH
14885: LD_INT 7
14887: PUSH
14888: LD_INT 8
14890: PUSH
14891: LD_INT 9
14893: PUSH
14894: LD_INT 10
14896: PUSH
14897: LD_INT 11
14899: PUSH
14900: LD_INT 12
14902: PUSH
14903: LD_INT 13
14905: PUSH
14906: LD_INT 14
14908: PUSH
14909: LD_INT 15
14911: PUSH
14912: LD_INT 16
14914: PUSH
14915: LD_INT 17
14917: PUSH
14918: LD_INT 18
14920: PUSH
14921: LD_INT 19
14923: PUSH
14924: LD_INT 20
14926: PUSH
14927: LD_INT 21
14929: PUSH
14930: LD_INT 22
14932: PUSH
14933: LD_INT 23
14935: PUSH
14936: LD_INT 24
14938: PUSH
14939: LD_INT 25
14941: PUSH
14942: LD_INT 26
14944: PUSH
14945: LD_INT 27
14947: PUSH
14948: LD_INT 28
14950: PUSH
14951: LD_INT 29
14953: PUSH
14954: LD_INT 30
14956: PUSH
14957: LD_INT 31
14959: PUSH
14960: LD_INT 32
14962: PUSH
14963: LD_INT 33
14965: PUSH
14966: LD_INT 34
14968: PUSH
14969: LD_INT 36
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 101
15011: PUSH
15012: LD_INT 102
15014: PUSH
15015: LD_INT 103
15017: PUSH
15018: LD_INT 104
15020: PUSH
15021: LD_INT 105
15023: PUSH
15024: LD_INT 106
15026: PUSH
15027: LD_INT 107
15029: PUSH
15030: LD_INT 108
15032: PUSH
15033: LD_INT 109
15035: PUSH
15036: LD_INT 110
15038: PUSH
15039: LD_INT 111
15041: PUSH
15042: LD_INT 112
15044: PUSH
15045: LD_INT 113
15047: PUSH
15048: LD_INT 114
15050: PUSH
15051: LD_INT 116
15053: PUSH
15054: LD_INT 117
15056: PUSH
15057: LD_INT 118
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: ST_TO_ADDR
15083: GO 16090
15085: LD_INT 15
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15317
15093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15094: LD_ADDR_VAR 0 1
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: LD_INT 2
15104: PUSH
15105: LD_INT 3
15107: PUSH
15108: LD_INT 4
15110: PUSH
15111: LD_INT 5
15113: PUSH
15114: LD_INT 6
15116: PUSH
15117: LD_INT 7
15119: PUSH
15120: LD_INT 8
15122: PUSH
15123: LD_INT 9
15125: PUSH
15126: LD_INT 10
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 13
15137: PUSH
15138: LD_INT 14
15140: PUSH
15141: LD_INT 15
15143: PUSH
15144: LD_INT 16
15146: PUSH
15147: LD_INT 17
15149: PUSH
15150: LD_INT 18
15152: PUSH
15153: LD_INT 19
15155: PUSH
15156: LD_INT 20
15158: PUSH
15159: LD_INT 21
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_INT 23
15167: PUSH
15168: LD_INT 24
15170: PUSH
15171: LD_INT 25
15173: PUSH
15174: LD_INT 26
15176: PUSH
15177: LD_INT 27
15179: PUSH
15180: LD_INT 28
15182: PUSH
15183: LD_INT 29
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 31
15191: PUSH
15192: LD_INT 32
15194: PUSH
15195: LD_INT 33
15197: PUSH
15198: LD_INT 34
15200: PUSH
15201: LD_INT 36
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 101
15243: PUSH
15244: LD_INT 102
15246: PUSH
15247: LD_INT 103
15249: PUSH
15250: LD_INT 104
15252: PUSH
15253: LD_INT 105
15255: PUSH
15256: LD_INT 106
15258: PUSH
15259: LD_INT 107
15261: PUSH
15262: LD_INT 108
15264: PUSH
15265: LD_INT 109
15267: PUSH
15268: LD_INT 110
15270: PUSH
15271: LD_INT 111
15273: PUSH
15274: LD_INT 112
15276: PUSH
15277: LD_INT 113
15279: PUSH
15280: LD_INT 114
15282: PUSH
15283: LD_INT 116
15285: PUSH
15286: LD_INT 117
15288: PUSH
15289: LD_INT 118
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: ST_TO_ADDR
15315: GO 16090
15317: LD_INT 16
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15461
15325: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: LD_INT 7
15342: PUSH
15343: LD_INT 11
15345: PUSH
15346: LD_INT 12
15348: PUSH
15349: LD_INT 15
15351: PUSH
15352: LD_INT 16
15354: PUSH
15355: LD_INT 20
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 23
15366: PUSH
15367: LD_INT 25
15369: PUSH
15370: LD_INT 26
15372: PUSH
15373: LD_INT 30
15375: PUSH
15376: LD_INT 31
15378: PUSH
15379: LD_INT 32
15381: PUSH
15382: LD_INT 33
15384: PUSH
15385: LD_INT 34
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 101
15411: PUSH
15412: LD_INT 102
15414: PUSH
15415: LD_INT 103
15417: PUSH
15418: LD_INT 106
15420: PUSH
15421: LD_INT 108
15423: PUSH
15424: LD_INT 112
15426: PUSH
15427: LD_INT 113
15429: PUSH
15430: LD_INT 114
15432: PUSH
15433: LD_INT 116
15435: PUSH
15436: LD_INT 117
15438: PUSH
15439: LD_INT 118
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: ST_TO_ADDR
15459: GO 16090
15461: LD_INT 17
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15693
15469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: LD_INT 6
15492: PUSH
15493: LD_INT 7
15495: PUSH
15496: LD_INT 8
15498: PUSH
15499: LD_INT 9
15501: PUSH
15502: LD_INT 10
15504: PUSH
15505: LD_INT 11
15507: PUSH
15508: LD_INT 12
15510: PUSH
15511: LD_INT 13
15513: PUSH
15514: LD_INT 14
15516: PUSH
15517: LD_INT 15
15519: PUSH
15520: LD_INT 16
15522: PUSH
15523: LD_INT 17
15525: PUSH
15526: LD_INT 18
15528: PUSH
15529: LD_INT 19
15531: PUSH
15532: LD_INT 20
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 23
15543: PUSH
15544: LD_INT 24
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 26
15552: PUSH
15553: LD_INT 27
15555: PUSH
15556: LD_INT 28
15558: PUSH
15559: LD_INT 29
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 31
15567: PUSH
15568: LD_INT 32
15570: PUSH
15571: LD_INT 33
15573: PUSH
15574: LD_INT 34
15576: PUSH
15577: LD_INT 36
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 101
15619: PUSH
15620: LD_INT 102
15622: PUSH
15623: LD_INT 103
15625: PUSH
15626: LD_INT 104
15628: PUSH
15629: LD_INT 105
15631: PUSH
15632: LD_INT 106
15634: PUSH
15635: LD_INT 107
15637: PUSH
15638: LD_INT 108
15640: PUSH
15641: LD_INT 109
15643: PUSH
15644: LD_INT 110
15646: PUSH
15647: LD_INT 111
15649: PUSH
15650: LD_INT 112
15652: PUSH
15653: LD_INT 113
15655: PUSH
15656: LD_INT 114
15658: PUSH
15659: LD_INT 116
15661: PUSH
15662: LD_INT 117
15664: PUSH
15665: LD_INT 118
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
15691: GO 16090
15693: LD_INT 18
15695: DOUBLE
15696: EQUAL
15697: IFTRUE 15701
15699: GO 15849
15701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 7
15718: PUSH
15719: LD_INT 11
15721: PUSH
15722: LD_INT 12
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 20
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_INT 23
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 26
15748: PUSH
15749: LD_INT 30
15751: PUSH
15752: LD_INT 31
15754: PUSH
15755: LD_INT 32
15757: PUSH
15758: LD_INT 33
15760: PUSH
15761: LD_INT 34
15763: PUSH
15764: LD_INT 35
15766: PUSH
15767: LD_INT 36
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 101
15795: PUSH
15796: LD_INT 102
15798: PUSH
15799: LD_INT 103
15801: PUSH
15802: LD_INT 106
15804: PUSH
15805: LD_INT 108
15807: PUSH
15808: LD_INT 112
15810: PUSH
15811: LD_INT 113
15813: PUSH
15814: LD_INT 114
15816: PUSH
15817: LD_INT 115
15819: PUSH
15820: LD_INT 116
15822: PUSH
15823: LD_INT 117
15825: PUSH
15826: LD_INT 118
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: ST_TO_ADDR
15847: GO 16090
15849: LD_INT 19
15851: DOUBLE
15852: EQUAL
15853: IFTRUE 15857
15855: GO 16089
15857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 3
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: LD_INT 5
15877: PUSH
15878: LD_INT 6
15880: PUSH
15881: LD_INT 7
15883: PUSH
15884: LD_INT 8
15886: PUSH
15887: LD_INT 9
15889: PUSH
15890: LD_INT 10
15892: PUSH
15893: LD_INT 11
15895: PUSH
15896: LD_INT 12
15898: PUSH
15899: LD_INT 13
15901: PUSH
15902: LD_INT 14
15904: PUSH
15905: LD_INT 15
15907: PUSH
15908: LD_INT 16
15910: PUSH
15911: LD_INT 17
15913: PUSH
15914: LD_INT 18
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: LD_INT 20
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_INT 23
15931: PUSH
15932: LD_INT 24
15934: PUSH
15935: LD_INT 25
15937: PUSH
15938: LD_INT 26
15940: PUSH
15941: LD_INT 27
15943: PUSH
15944: LD_INT 28
15946: PUSH
15947: LD_INT 29
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 31
15955: PUSH
15956: LD_INT 32
15958: PUSH
15959: LD_INT 33
15961: PUSH
15962: LD_INT 34
15964: PUSH
15965: LD_INT 35
15967: PUSH
15968: LD_INT 36
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 101
16011: PUSH
16012: LD_INT 102
16014: PUSH
16015: LD_INT 103
16017: PUSH
16018: LD_INT 104
16020: PUSH
16021: LD_INT 105
16023: PUSH
16024: LD_INT 106
16026: PUSH
16027: LD_INT 107
16029: PUSH
16030: LD_INT 108
16032: PUSH
16033: LD_INT 109
16035: PUSH
16036: LD_INT 110
16038: PUSH
16039: LD_INT 111
16041: PUSH
16042: LD_INT 112
16044: PUSH
16045: LD_INT 113
16047: PUSH
16048: LD_INT 114
16050: PUSH
16051: LD_INT 115
16053: PUSH
16054: LD_INT 116
16056: PUSH
16057: LD_INT 117
16059: PUSH
16060: LD_INT 118
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: ST_TO_ADDR
16087: GO 16090
16089: POP
// end else
16090: GO 16321
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16092: LD_ADDR_VAR 0 1
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: LD_INT 3
16105: PUSH
16106: LD_INT 4
16108: PUSH
16109: LD_INT 5
16111: PUSH
16112: LD_INT 6
16114: PUSH
16115: LD_INT 7
16117: PUSH
16118: LD_INT 8
16120: PUSH
16121: LD_INT 9
16123: PUSH
16124: LD_INT 10
16126: PUSH
16127: LD_INT 11
16129: PUSH
16130: LD_INT 12
16132: PUSH
16133: LD_INT 13
16135: PUSH
16136: LD_INT 14
16138: PUSH
16139: LD_INT 15
16141: PUSH
16142: LD_INT 16
16144: PUSH
16145: LD_INT 17
16147: PUSH
16148: LD_INT 18
16150: PUSH
16151: LD_INT 19
16153: PUSH
16154: LD_INT 20
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 22
16162: PUSH
16163: LD_INT 23
16165: PUSH
16166: LD_INT 24
16168: PUSH
16169: LD_INT 25
16171: PUSH
16172: LD_INT 26
16174: PUSH
16175: LD_INT 27
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: LD_INT 29
16183: PUSH
16184: LD_INT 30
16186: PUSH
16187: LD_INT 31
16189: PUSH
16190: LD_INT 32
16192: PUSH
16193: LD_INT 33
16195: PUSH
16196: LD_INT 34
16198: PUSH
16199: LD_INT 35
16201: PUSH
16202: LD_INT 36
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 101
16245: PUSH
16246: LD_INT 102
16248: PUSH
16249: LD_INT 103
16251: PUSH
16252: LD_INT 104
16254: PUSH
16255: LD_INT 105
16257: PUSH
16258: LD_INT 106
16260: PUSH
16261: LD_INT 107
16263: PUSH
16264: LD_INT 108
16266: PUSH
16267: LD_INT 109
16269: PUSH
16270: LD_INT 110
16272: PUSH
16273: LD_INT 111
16275: PUSH
16276: LD_INT 112
16278: PUSH
16279: LD_INT 113
16281: PUSH
16282: LD_INT 114
16284: PUSH
16285: LD_INT 115
16287: PUSH
16288: LD_INT 116
16290: PUSH
16291: LD_INT 117
16293: PUSH
16294: LD_INT 118
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: ST_TO_ADDR
// if result then
16321: LD_VAR 0 1
16325: IFFALSE 16614
// begin normal :=  ;
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_STRING 
16334: ST_TO_ADDR
// hardcore :=  ;
16335: LD_ADDR_VAR 0 4
16339: PUSH
16340: LD_STRING 
16342: ST_TO_ADDR
// for i = 1 to normalCounter do
16343: LD_ADDR_VAR 0 5
16347: PUSH
16348: DOUBLE
16349: LD_INT 1
16351: DEC
16352: ST_TO_ADDR
16353: LD_EXP 46
16357: PUSH
16358: FOR_TO
16359: IFFALSE 16460
// begin tmp := 0 ;
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: LD_STRING 0
16368: ST_TO_ADDR
// if result [ 1 ] then
16369: LD_VAR 0 1
16373: PUSH
16374: LD_INT 1
16376: ARRAY
16377: IFFALSE 16442
// if result [ 1 ] [ 1 ] = i then
16379: LD_VAR 0 1
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PUSH
16392: LD_VAR 0 5
16396: EQUAL
16397: IFFALSE 16442
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_VAR 0 1
16416: PUSH
16417: LD_INT 1
16419: ARRAY
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 3
16428: PPUSH
16429: CALL_OW 1
16433: ST_TO_ADDR
// tmp := 1 ;
16434: LD_ADDR_VAR 0 2
16438: PUSH
16439: LD_STRING 1
16441: ST_TO_ADDR
// end ; normal := normal & tmp ;
16442: LD_ADDR_VAR 0 3
16446: PUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_VAR 0 2
16456: STR
16457: ST_TO_ADDR
// end ;
16458: GO 16358
16460: POP
16461: POP
// for i = 1 to hardcoreCounter do
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: DOUBLE
16468: LD_INT 1
16470: DEC
16471: ST_TO_ADDR
16472: LD_EXP 47
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16583
// begin tmp := 0 ;
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_STRING 0
16487: ST_TO_ADDR
// if result [ 2 ] then
16488: LD_VAR 0 1
16492: PUSH
16493: LD_INT 2
16495: ARRAY
16496: IFFALSE 16565
// if result [ 2 ] [ 1 ] = 100 + i then
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 2
16505: ARRAY
16506: PUSH
16507: LD_INT 1
16509: ARRAY
16510: PUSH
16511: LD_INT 100
16513: PUSH
16514: LD_VAR 0 5
16518: PLUS
16519: EQUAL
16520: IFFALSE 16565
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_INT 2
16534: PPUSH
16535: LD_VAR 0 1
16539: PUSH
16540: LD_INT 2
16542: ARRAY
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 3
16551: PPUSH
16552: CALL_OW 1
16556: ST_TO_ADDR
// tmp := 1 ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_STRING 1
16564: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16565: LD_ADDR_VAR 0 4
16569: PUSH
16570: LD_VAR 0 4
16574: PUSH
16575: LD_VAR 0 2
16579: STR
16580: ST_TO_ADDR
// end ;
16581: GO 16477
16583: POP
16584: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16585: LD_STRING getStreamItemsFromMission("
16587: PUSH
16588: LD_VAR 0 3
16592: STR
16593: PUSH
16594: LD_STRING ","
16596: STR
16597: PUSH
16598: LD_VAR 0 4
16602: STR
16603: PUSH
16604: LD_STRING ")
16606: STR
16607: PPUSH
16608: CALL_OW 559
// end else
16612: GO 16621
// ToLua ( getStreamItemsFromMission("","") ) ;
16614: LD_STRING getStreamItemsFromMission("","")
16616: PPUSH
16617: CALL_OW 559
// end ;
16621: LD_VAR 0 1
16625: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16626: LD_EXP 45
16630: PUSH
16631: LD_EXP 50
16635: AND
16636: IFFALSE 16760
16638: GO 16640
16640: DISABLE
16641: LD_INT 0
16643: PPUSH
16644: PPUSH
// begin enable ;
16645: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_OWVAR 2
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: LD_INT 34
16668: PUSH
16669: LD_INT 7
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 34
16678: PUSH
16679: LD_INT 45
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 34
16688: PUSH
16689: LD_INT 28
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 34
16698: PUSH
16699: LD_INT 47
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 69
16721: ST_TO_ADDR
// if not tmp then
16722: LD_VAR 0 2
16726: NOT
16727: IFFALSE 16731
// exit ;
16729: GO 16760
// for i in tmp do
16731: LD_ADDR_VAR 0 1
16735: PUSH
16736: LD_VAR 0 2
16740: PUSH
16741: FOR_IN
16742: IFFALSE 16758
// begin SetLives ( i , 0 ) ;
16744: LD_VAR 0 1
16748: PPUSH
16749: LD_INT 0
16751: PPUSH
16752: CALL_OW 234
// end ;
16756: GO 16741
16758: POP
16759: POP
// end ;
16760: PPOPN 2
16762: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16763: LD_EXP 45
16767: PUSH
16768: LD_EXP 51
16772: AND
16773: IFFALSE 16857
16775: GO 16777
16777: DISABLE
16778: LD_INT 0
16780: PPUSH
16781: PPUSH
// begin enable ;
16782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 22
16790: PUSH
16791: LD_OWVAR 2
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 32
16802: PUSH
16803: LD_INT 3
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PPUSH
16814: CALL_OW 69
16818: ST_TO_ADDR
// if not tmp then
16819: LD_VAR 0 2
16823: NOT
16824: IFFALSE 16828
// exit ;
16826: GO 16857
// for i in tmp do
16828: LD_ADDR_VAR 0 1
16832: PUSH
16833: LD_VAR 0 2
16837: PUSH
16838: FOR_IN
16839: IFFALSE 16855
// begin SetLives ( i , 0 ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_INT 0
16848: PPUSH
16849: CALL_OW 234
// end ;
16853: GO 16838
16855: POP
16856: POP
// end ;
16857: PPOPN 2
16859: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16860: LD_EXP 45
16864: PUSH
16865: LD_EXP 48
16869: AND
16870: IFFALSE 16963
16872: GO 16874
16874: DISABLE
16875: LD_INT 0
16877: PPUSH
// begin enable ;
16878: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16879: LD_ADDR_VAR 0 1
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_OWVAR 2
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 25
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 25
16911: PUSH
16912: LD_INT 9
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 25
16921: PUSH
16922: LD_INT 8
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: PUSH
16944: FOR_IN
16945: IFFALSE 16961
// begin SetClass ( i , 1 ) ;
16947: LD_VAR 0 1
16951: PPUSH
16952: LD_INT 1
16954: PPUSH
16955: CALL_OW 336
// end ;
16959: GO 16944
16961: POP
16962: POP
// end ;
16963: PPOPN 1
16965: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16966: LD_EXP 45
16970: PUSH
16971: LD_EXP 49
16975: AND
16976: PUSH
16977: LD_OWVAR 65
16981: PUSH
16982: LD_INT 7
16984: LESS
16985: AND
16986: IFFALSE 17000
16988: GO 16990
16990: DISABLE
// begin enable ;
16991: ENABLE
// game_speed := 7 ;
16992: LD_ADDR_OWVAR 65
16996: PUSH
16997: LD_INT 7
16999: ST_TO_ADDR
// end ;
17000: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17001: LD_EXP 45
17005: PUSH
17006: LD_EXP 52
17010: AND
17011: IFFALSE 17213
17013: GO 17015
17015: DISABLE
17016: LD_INT 0
17018: PPUSH
17019: PPUSH
17020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17021: LD_ADDR_VAR 0 3
17025: PUSH
17026: LD_INT 81
17028: PUSH
17029: LD_OWVAR 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 21
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PPUSH
17052: CALL_OW 69
17056: ST_TO_ADDR
// if not tmp then
17057: LD_VAR 0 3
17061: NOT
17062: IFFALSE 17066
// exit ;
17064: GO 17213
// if tmp > 5 then
17066: LD_VAR 0 3
17070: PUSH
17071: LD_INT 5
17073: GREATER
17074: IFFALSE 17086
// k := 5 else
17076: LD_ADDR_VAR 0 2
17080: PUSH
17081: LD_INT 5
17083: ST_TO_ADDR
17084: GO 17096
// k := tmp ;
17086: LD_ADDR_VAR 0 2
17090: PUSH
17091: LD_VAR 0 3
17095: ST_TO_ADDR
// for i := 1 to k do
17096: LD_ADDR_VAR 0 1
17100: PUSH
17101: DOUBLE
17102: LD_INT 1
17104: DEC
17105: ST_TO_ADDR
17106: LD_VAR 0 2
17110: PUSH
17111: FOR_TO
17112: IFFALSE 17211
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17114: LD_VAR 0 3
17118: PUSH
17119: LD_VAR 0 1
17123: ARRAY
17124: PPUSH
17125: LD_VAR 0 1
17129: PUSH
17130: LD_INT 4
17132: MOD
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: PPUSH
17138: CALL_OW 259
17142: PUSH
17143: LD_INT 10
17145: LESS
17146: IFFALSE 17209
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17148: LD_VAR 0 3
17152: PUSH
17153: LD_VAR 0 1
17157: ARRAY
17158: PPUSH
17159: LD_VAR 0 1
17163: PUSH
17164: LD_INT 4
17166: MOD
17167: PUSH
17168: LD_INT 1
17170: PLUS
17171: PPUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_VAR 0 1
17181: ARRAY
17182: PPUSH
17183: LD_VAR 0 1
17187: PUSH
17188: LD_INT 4
17190: MOD
17191: PUSH
17192: LD_INT 1
17194: PLUS
17195: PPUSH
17196: CALL_OW 259
17200: PUSH
17201: LD_INT 1
17203: PLUS
17204: PPUSH
17205: CALL_OW 237
17209: GO 17111
17211: POP
17212: POP
// end ;
17213: PPOPN 3
17215: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17216: LD_EXP 45
17220: PUSH
17221: LD_EXP 53
17225: AND
17226: IFFALSE 17246
17228: GO 17230
17230: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17231: LD_INT 4
17233: PPUSH
17234: LD_OWVAR 2
17238: PPUSH
17239: LD_INT 0
17241: PPUSH
17242: CALL_OW 324
17246: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17247: LD_EXP 45
17251: PUSH
17252: LD_EXP 82
17256: AND
17257: IFFALSE 17277
17259: GO 17261
17261: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17262: LD_INT 19
17264: PPUSH
17265: LD_OWVAR 2
17269: PPUSH
17270: LD_INT 0
17272: PPUSH
17273: CALL_OW 324
17277: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17278: LD_EXP 45
17282: PUSH
17283: LD_EXP 54
17287: AND
17288: IFFALSE 17390
17290: GO 17292
17292: DISABLE
17293: LD_INT 0
17295: PPUSH
17296: PPUSH
// begin enable ;
17297: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17298: LD_ADDR_VAR 0 2
17302: PUSH
17303: LD_INT 22
17305: PUSH
17306: LD_OWVAR 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 2
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 11
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 30
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: ST_TO_ADDR
// if not tmp then
17352: LD_VAR 0 2
17356: NOT
17357: IFFALSE 17361
// exit ;
17359: GO 17390
// for i in tmp do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: LD_VAR 0 2
17370: PUSH
17371: FOR_IN
17372: IFFALSE 17388
// begin SetLives ( i , 0 ) ;
17374: LD_VAR 0 1
17378: PPUSH
17379: LD_INT 0
17381: PPUSH
17382: CALL_OW 234
// end ;
17386: GO 17371
17388: POP
17389: POP
// end ;
17390: PPOPN 2
17392: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17393: LD_EXP 45
17397: PUSH
17398: LD_EXP 55
17402: AND
17403: IFFALSE 17423
17405: GO 17407
17407: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17408: LD_INT 32
17410: PPUSH
17411: LD_OWVAR 2
17415: PPUSH
17416: LD_INT 0
17418: PPUSH
17419: CALL_OW 324
17423: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17424: LD_EXP 45
17428: PUSH
17429: LD_EXP 56
17433: AND
17434: IFFALSE 17615
17436: GO 17438
17438: DISABLE
17439: LD_INT 0
17441: PPUSH
17442: PPUSH
17443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17444: LD_ADDR_VAR 0 2
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_OWVAR 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 33
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 69
17479: ST_TO_ADDR
// if not tmp then
17480: LD_VAR 0 2
17484: NOT
17485: IFFALSE 17489
// exit ;
17487: GO 17615
// side := 0 ;
17489: LD_ADDR_VAR 0 3
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// for i := 1 to 8 do
17497: LD_ADDR_VAR 0 1
17501: PUSH
17502: DOUBLE
17503: LD_INT 1
17505: DEC
17506: ST_TO_ADDR
17507: LD_INT 8
17509: PUSH
17510: FOR_TO
17511: IFFALSE 17559
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17513: LD_OWVAR 2
17517: PUSH
17518: LD_VAR 0 1
17522: NONEQUAL
17523: PUSH
17524: LD_OWVAR 2
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 81
17538: PUSH
17539: LD_INT 2
17541: EQUAL
17542: AND
17543: IFFALSE 17557
// begin side := i ;
17545: LD_ADDR_VAR 0 3
17549: PUSH
17550: LD_VAR 0 1
17554: ST_TO_ADDR
// break ;
17555: GO 17559
// end ;
17557: GO 17510
17559: POP
17560: POP
// if not side then
17561: LD_VAR 0 3
17565: NOT
17566: IFFALSE 17570
// exit ;
17568: GO 17615
// for i := 1 to tmp do
17570: LD_ADDR_VAR 0 1
17574: PUSH
17575: DOUBLE
17576: LD_INT 1
17578: DEC
17579: ST_TO_ADDR
17580: LD_VAR 0 2
17584: PUSH
17585: FOR_TO
17586: IFFALSE 17613
// if Prob ( 60 ) then
17588: LD_INT 60
17590: PPUSH
17591: CALL_OW 13
17595: IFFALSE 17611
// SetSide ( i , side ) ;
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_VAR 0 3
17606: PPUSH
17607: CALL_OW 235
17611: GO 17585
17613: POP
17614: POP
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17618: LD_EXP 45
17622: PUSH
17623: LD_EXP 58
17627: AND
17628: IFFALSE 17747
17630: GO 17632
17632: DISABLE
17633: LD_INT 0
17635: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17636: LD_ADDR_VAR 0 1
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_OWVAR 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 3
17665: PUSH
17666: LD_INT 23
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17745
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 257
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: LD_INT 4
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: IN
17721: IFFALSE 17743
// SetClass ( un , rand ( 1 , 4 ) ) ;
17723: LD_VAR 0 1
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: LD_INT 4
17733: PPUSH
17734: CALL_OW 12
17738: PPUSH
17739: CALL_OW 336
17743: GO 17690
17745: POP
17746: POP
// end ;
17747: PPOPN 1
17749: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17750: LD_EXP 45
17754: PUSH
17755: LD_EXP 57
17759: AND
17760: IFFALSE 17839
17762: GO 17764
17764: DISABLE
17765: LD_INT 0
17767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: LD_OWVAR 2
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 3
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: ST_TO_ADDR
// if not tmp then
17804: LD_VAR 0 1
17808: NOT
17809: IFFALSE 17813
// exit ;
17811: GO 17839
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17813: LD_VAR 0 1
17817: PUSH
17818: LD_INT 1
17820: PPUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 12
17830: ARRAY
17831: PPUSH
17832: LD_INT 100
17834: PPUSH
17835: CALL_OW 234
// end ;
17839: PPOPN 1
17841: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17842: LD_EXP 45
17846: PUSH
17847: LD_EXP 59
17851: AND
17852: IFFALSE 17950
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17860: LD_ADDR_VAR 0 1
17864: PUSH
17865: LD_INT 22
17867: PUSH
17868: LD_OWVAR 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 21
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: ST_TO_ADDR
// if not tmp then
17896: LD_VAR 0 1
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 17950
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17905: LD_VAR 0 1
17909: PUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 12
17922: ARRAY
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 4
17929: PPUSH
17930: CALL_OW 12
17934: PPUSH
17935: LD_INT 3000
17937: PPUSH
17938: LD_INT 9000
17940: PPUSH
17941: CALL_OW 12
17945: PPUSH
17946: CALL_OW 492
// end ;
17950: PPOPN 1
17952: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17953: LD_EXP 45
17957: PUSH
17958: LD_EXP 60
17962: AND
17963: IFFALSE 17983
17965: GO 17967
17967: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17968: LD_INT 1
17970: PPUSH
17971: LD_OWVAR 2
17975: PPUSH
17976: LD_INT 0
17978: PPUSH
17979: CALL_OW 324
17983: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17984: LD_EXP 45
17988: PUSH
17989: LD_EXP 61
17993: AND
17994: IFFALSE 18077
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 3
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18077
// for i in tmp do
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_VAR 0 2
18057: PUSH
18058: FOR_IN
18059: IFFALSE 18075
// SetBLevel ( i , 10 ) ;
18061: LD_VAR 0 1
18065: PPUSH
18066: LD_INT 10
18068: PPUSH
18069: CALL_OW 241
18073: GO 18058
18075: POP
18076: POP
// end ;
18077: PPOPN 2
18079: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18080: LD_EXP 45
18084: PUSH
18085: LD_EXP 62
18089: AND
18090: IFFALSE 18201
18092: GO 18094
18094: DISABLE
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
18099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18100: LD_ADDR_VAR 0 3
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_OWVAR 2
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 25
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: ST_TO_ADDR
// if not tmp then
18136: LD_VAR 0 3
18140: NOT
18141: IFFALSE 18145
// exit ;
18143: GO 18201
// un := tmp [ rand ( 1 , tmp ) ] ;
18145: LD_ADDR_VAR 0 2
18149: PUSH
18150: LD_VAR 0 3
18154: PUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: CALL_OW 12
18167: ARRAY
18168: ST_TO_ADDR
// if Crawls ( un ) then
18169: LD_VAR 0 2
18173: PPUSH
18174: CALL_OW 318
18178: IFFALSE 18189
// ComWalk ( un ) ;
18180: LD_VAR 0 2
18184: PPUSH
18185: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18189: LD_VAR 0 2
18193: PPUSH
18194: LD_INT 5
18196: PPUSH
18197: CALL_OW 336
// end ;
18201: PPOPN 3
18203: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18204: LD_EXP 45
18208: PUSH
18209: LD_EXP 63
18213: AND
18214: PUSH
18215: LD_OWVAR 67
18219: PUSH
18220: LD_INT 4
18222: LESS
18223: AND
18224: IFFALSE 18243
18226: GO 18228
18228: DISABLE
// begin Difficulty := Difficulty + 1 ;
18229: LD_ADDR_OWVAR 67
18233: PUSH
18234: LD_OWVAR 67
18238: PUSH
18239: LD_INT 1
18241: PLUS
18242: ST_TO_ADDR
// end ;
18243: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18244: LD_EXP 45
18248: PUSH
18249: LD_EXP 64
18253: AND
18254: IFFALSE 18357
18256: GO 18258
18258: DISABLE
18259: LD_INT 0
18261: PPUSH
// begin for i := 1 to 5 do
18262: LD_ADDR_VAR 0 1
18266: PUSH
18267: DOUBLE
18268: LD_INT 1
18270: DEC
18271: ST_TO_ADDR
18272: LD_INT 5
18274: PUSH
18275: FOR_TO
18276: IFFALSE 18355
// begin uc_nation := nation_nature ;
18278: LD_ADDR_OWVAR 21
18282: PUSH
18283: LD_INT 0
18285: ST_TO_ADDR
// uc_side := 0 ;
18286: LD_ADDR_OWVAR 20
18290: PUSH
18291: LD_INT 0
18293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18294: LD_ADDR_OWVAR 29
18298: PUSH
18299: LD_INT 12
18301: PUSH
18302: LD_INT 12
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: ST_TO_ADDR
// hc_agressivity := 20 ;
18309: LD_ADDR_OWVAR 35
18313: PUSH
18314: LD_INT 20
18316: ST_TO_ADDR
// hc_class := class_tiger ;
18317: LD_ADDR_OWVAR 28
18321: PUSH
18322: LD_INT 14
18324: ST_TO_ADDR
// hc_gallery :=  ;
18325: LD_ADDR_OWVAR 33
18329: PUSH
18330: LD_STRING 
18332: ST_TO_ADDR
// hc_name :=  ;
18333: LD_ADDR_OWVAR 26
18337: PUSH
18338: LD_STRING 
18340: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18341: CALL_OW 44
18345: PPUSH
18346: LD_INT 0
18348: PPUSH
18349: CALL_OW 51
// end ;
18353: GO 18275
18355: POP
18356: POP
// end ;
18357: PPOPN 1
18359: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18360: LD_EXP 45
18364: PUSH
18365: LD_EXP 65
18369: AND
18370: IFFALSE 18379
18372: GO 18374
18374: DISABLE
// StreamSibBomb ;
18375: CALL 18380 0 0
18379: END
// export function StreamSibBomb ; var i , x , y ; begin
18380: LD_INT 0
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
// result := false ;
18386: LD_ADDR_VAR 0 1
18390: PUSH
18391: LD_INT 0
18393: ST_TO_ADDR
// for i := 1 to 16 do
18394: LD_ADDR_VAR 0 2
18398: PUSH
18399: DOUBLE
18400: LD_INT 1
18402: DEC
18403: ST_TO_ADDR
18404: LD_INT 16
18406: PUSH
18407: FOR_TO
18408: IFFALSE 18607
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18410: LD_ADDR_VAR 0 3
18414: PUSH
18415: LD_INT 10
18417: PUSH
18418: LD_INT 20
18420: PUSH
18421: LD_INT 30
18423: PUSH
18424: LD_INT 40
18426: PUSH
18427: LD_INT 50
18429: PUSH
18430: LD_INT 60
18432: PUSH
18433: LD_INT 70
18435: PUSH
18436: LD_INT 80
18438: PUSH
18439: LD_INT 90
18441: PUSH
18442: LD_INT 100
18444: PUSH
18445: LD_INT 110
18447: PUSH
18448: LD_INT 120
18450: PUSH
18451: LD_INT 130
18453: PUSH
18454: LD_INT 140
18456: PUSH
18457: LD_INT 150
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: PPUSH
18480: LD_INT 15
18482: PPUSH
18483: CALL_OW 12
18487: ARRAY
18488: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18489: LD_ADDR_VAR 0 4
18493: PUSH
18494: LD_INT 10
18496: PUSH
18497: LD_INT 20
18499: PUSH
18500: LD_INT 30
18502: PUSH
18503: LD_INT 40
18505: PUSH
18506: LD_INT 50
18508: PUSH
18509: LD_INT 60
18511: PUSH
18512: LD_INT 70
18514: PUSH
18515: LD_INT 80
18517: PUSH
18518: LD_INT 90
18520: PUSH
18521: LD_INT 100
18523: PUSH
18524: LD_INT 110
18526: PUSH
18527: LD_INT 120
18529: PUSH
18530: LD_INT 130
18532: PUSH
18533: LD_INT 140
18535: PUSH
18536: LD_INT 150
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_INT 15
18561: PPUSH
18562: CALL_OW 12
18566: ARRAY
18567: ST_TO_ADDR
// if ValidHex ( x , y ) then
18568: LD_VAR 0 3
18572: PPUSH
18573: LD_VAR 0 4
18577: PPUSH
18578: CALL_OW 488
18582: IFFALSE 18605
// begin result := [ x , y ] ;
18584: LD_ADDR_VAR 0 1
18588: PUSH
18589: LD_VAR 0 3
18593: PUSH
18594: LD_VAR 0 4
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: ST_TO_ADDR
// break ;
18603: GO 18607
// end ; end ;
18605: GO 18407
18607: POP
18608: POP
// if result then
18609: LD_VAR 0 1
18613: IFFALSE 18673
// begin ToLua ( playSibBomb() ) ;
18615: LD_STRING playSibBomb()
18617: PPUSH
18618: CALL_OW 559
// wait ( 0 0$14 ) ;
18622: LD_INT 490
18624: PPUSH
18625: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18629: LD_VAR 0 1
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_VAR 0 1
18642: PUSH
18643: LD_INT 2
18645: ARRAY
18646: PPUSH
18647: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: LD_VAR 0 1
18664: PUSH
18665: LD_INT 2
18667: ARRAY
18668: PPUSH
18669: CALL_OW 429
// end ; end ;
18673: LD_VAR 0 1
18677: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18678: LD_EXP 45
18682: PUSH
18683: LD_EXP 67
18687: AND
18688: IFFALSE 18700
18690: GO 18692
18692: DISABLE
// YouLost (  ) ;
18693: LD_STRING 
18695: PPUSH
18696: CALL_OW 104
18700: END
// every 0 0$1 trigger StreamModeActive and sFog do
18701: LD_EXP 45
18705: PUSH
18706: LD_EXP 66
18710: AND
18711: IFFALSE 18725
18713: GO 18715
18715: DISABLE
// FogOff ( your_side ) ;
18716: LD_OWVAR 2
18720: PPUSH
18721: CALL_OW 344
18725: END
// every 0 0$1 trigger StreamModeActive and sSun do
18726: LD_EXP 45
18730: PUSH
18731: LD_EXP 68
18735: AND
18736: IFFALSE 18764
18738: GO 18740
18740: DISABLE
// begin solar_recharge_percent := 0 ;
18741: LD_ADDR_OWVAR 79
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18749: LD_INT 10500
18751: PPUSH
18752: CALL_OW 67
// solar_recharge_percent := 100 ;
18756: LD_ADDR_OWVAR 79
18760: PUSH
18761: LD_INT 100
18763: ST_TO_ADDR
// end ;
18764: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18765: LD_EXP 45
18769: PUSH
18770: LD_EXP 69
18774: AND
18775: IFFALSE 19014
18777: GO 18779
18779: DISABLE
18780: LD_INT 0
18782: PPUSH
18783: PPUSH
18784: PPUSH
// begin tmp := [ ] ;
18785: LD_ADDR_VAR 0 3
18789: PUSH
18790: EMPTY
18791: ST_TO_ADDR
// for i := 1 to 6 do
18792: LD_ADDR_VAR 0 1
18796: PUSH
18797: DOUBLE
18798: LD_INT 1
18800: DEC
18801: ST_TO_ADDR
18802: LD_INT 6
18804: PUSH
18805: FOR_TO
18806: IFFALSE 18911
// begin uc_nation := nation_nature ;
18808: LD_ADDR_OWVAR 21
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// uc_side := 0 ;
18816: LD_ADDR_OWVAR 20
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18824: LD_ADDR_OWVAR 29
18828: PUSH
18829: LD_INT 12
18831: PUSH
18832: LD_INT 12
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// hc_agressivity := 20 ;
18839: LD_ADDR_OWVAR 35
18843: PUSH
18844: LD_INT 20
18846: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18847: LD_ADDR_OWVAR 28
18851: PUSH
18852: LD_INT 17
18854: ST_TO_ADDR
// hc_gallery :=  ;
18855: LD_ADDR_OWVAR 33
18859: PUSH
18860: LD_STRING 
18862: ST_TO_ADDR
// hc_name :=  ;
18863: LD_ADDR_OWVAR 26
18867: PUSH
18868: LD_STRING 
18870: ST_TO_ADDR
// un := CreateHuman ;
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: CALL_OW 44
18880: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 51
// tmp := tmp ^ un ;
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_VAR 0 2
18907: ADD
18908: ST_TO_ADDR
// end ;
18909: GO 18805
18911: POP
18912: POP
// repeat wait ( 0 0$1 ) ;
18913: LD_INT 35
18915: PPUSH
18916: CALL_OW 67
// for un in tmp do
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_VAR 0 3
18929: PUSH
18930: FOR_IN
18931: IFFALSE 19005
// begin if IsDead ( un ) then
18933: LD_VAR 0 2
18937: PPUSH
18938: CALL_OW 301
18942: IFFALSE 18962
// begin tmp := tmp diff un ;
18944: LD_ADDR_VAR 0 3
18948: PUSH
18949: LD_VAR 0 3
18953: PUSH
18954: LD_VAR 0 2
18958: DIFF
18959: ST_TO_ADDR
// continue ;
18960: GO 18930
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18962: LD_VAR 0 2
18966: PPUSH
18967: LD_INT 3
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PPUSH
18989: LD_VAR 0 2
18993: PPUSH
18994: CALL_OW 74
18998: PPUSH
18999: CALL_OW 115
// end ;
19003: GO 18930
19005: POP
19006: POP
// until not tmp ;
19007: LD_VAR 0 3
19011: NOT
19012: IFFALSE 18913
// end ;
19014: PPOPN 3
19016: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19017: LD_EXP 45
19021: PUSH
19022: LD_EXP 70
19026: AND
19027: IFFALSE 19081
19029: GO 19031
19031: DISABLE
// begin ToLua ( displayTroll(); ) ;
19032: LD_STRING displayTroll();
19034: PPUSH
19035: CALL_OW 559
// wait ( 3 3$00 ) ;
19039: LD_INT 6300
19041: PPUSH
19042: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19046: LD_STRING hideTroll();
19048: PPUSH
19049: CALL_OW 559
// wait ( 1 1$00 ) ;
19053: LD_INT 2100
19055: PPUSH
19056: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19060: LD_STRING displayTroll();
19062: PPUSH
19063: CALL_OW 559
// wait ( 1 1$00 ) ;
19067: LD_INT 2100
19069: PPUSH
19070: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19074: LD_STRING hideTroll();
19076: PPUSH
19077: CALL_OW 559
// end ;
19081: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19082: LD_EXP 45
19086: PUSH
19087: LD_EXP 71
19091: AND
19092: IFFALSE 19155
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
// begin p := 0 ;
19100: LD_ADDR_VAR 0 1
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// repeat game_speed := 1 ;
19108: LD_ADDR_OWVAR 65
19112: PUSH
19113: LD_INT 1
19115: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19116: LD_INT 35
19118: PPUSH
19119: CALL_OW 67
// p := p + 1 ;
19123: LD_ADDR_VAR 0 1
19127: PUSH
19128: LD_VAR 0 1
19132: PUSH
19133: LD_INT 1
19135: PLUS
19136: ST_TO_ADDR
// until p >= 60 ;
19137: LD_VAR 0 1
19141: PUSH
19142: LD_INT 60
19144: GREATEREQUAL
19145: IFFALSE 19108
// game_speed := 4 ;
19147: LD_ADDR_OWVAR 65
19151: PUSH
19152: LD_INT 4
19154: ST_TO_ADDR
// end ;
19155: PPOPN 1
19157: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19158: LD_EXP 45
19162: PUSH
19163: LD_EXP 72
19167: AND
19168: IFFALSE 19314
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_OWVAR 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 30
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 30
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PPUSH
19226: CALL_OW 69
19230: ST_TO_ADDR
// if not depot then
19231: LD_VAR 0 1
19235: NOT
19236: IFFALSE 19240
// exit ;
19238: GO 19314
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: LD_VAR 0 1
19249: PUSH
19250: LD_INT 1
19252: PPUSH
19253: LD_VAR 0 1
19257: PPUSH
19258: CALL_OW 12
19262: ARRAY
19263: PPUSH
19264: CALL_OW 274
19268: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19269: LD_VAR 0 2
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: LD_INT 0
19279: PPUSH
19280: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19284: LD_VAR 0 2
19288: PPUSH
19289: LD_INT 2
19291: PPUSH
19292: LD_INT 0
19294: PPUSH
19295: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19299: LD_VAR 0 2
19303: PPUSH
19304: LD_INT 3
19306: PPUSH
19307: LD_INT 0
19309: PPUSH
19310: CALL_OW 277
// end ;
19314: PPOPN 2
19316: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19317: LD_EXP 45
19321: PUSH
19322: LD_EXP 73
19326: AND
19327: IFFALSE 19424
19329: GO 19331
19331: DISABLE
19332: LD_INT 0
19334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19335: LD_ADDR_VAR 0 1
19339: PUSH
19340: LD_INT 22
19342: PUSH
19343: LD_OWVAR 2
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 21
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: LD_INT 3
19364: PUSH
19365: LD_INT 23
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: PPUSH
19384: CALL_OW 69
19388: ST_TO_ADDR
// if not tmp then
19389: LD_VAR 0 1
19393: NOT
19394: IFFALSE 19398
// exit ;
19396: GO 19424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 1
19405: PPUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 12
19415: ARRAY
19416: PPUSH
19417: LD_INT 200
19419: PPUSH
19420: CALL_OW 234
// end ;
19424: PPOPN 1
19426: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19427: LD_EXP 45
19431: PUSH
19432: LD_EXP 74
19436: AND
19437: IFFALSE 19516
19439: GO 19441
19441: DISABLE
19442: LD_INT 0
19444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19445: LD_ADDR_VAR 0 1
19449: PUSH
19450: LD_INT 22
19452: PUSH
19453: LD_OWVAR 2
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 21
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 69
19480: ST_TO_ADDR
// if not tmp then
19481: LD_VAR 0 1
19485: NOT
19486: IFFALSE 19490
// exit ;
19488: GO 19516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19490: LD_VAR 0 1
19494: PUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 12
19507: ARRAY
19508: PPUSH
19509: LD_INT 60
19511: PPUSH
19512: CALL_OW 234
// end ;
19516: PPOPN 1
19518: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19519: LD_EXP 45
19523: PUSH
19524: LD_EXP 75
19528: AND
19529: IFFALSE 19628
19531: GO 19533
19533: DISABLE
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
// begin enable ;
19538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19539: LD_ADDR_VAR 0 1
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 61
19558: PUSH
19559: EMPTY
19560: LIST
19561: PUSH
19562: LD_INT 33
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 1
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19628
// for i in tmp do
19591: LD_ADDR_VAR 0 2
19595: PUSH
19596: LD_VAR 0 1
19600: PUSH
19601: FOR_IN
19602: IFFALSE 19626
// if IsControledBy ( i ) then
19604: LD_VAR 0 2
19608: PPUSH
19609: CALL_OW 312
19613: IFFALSE 19624
// ComUnlink ( i ) ;
19615: LD_VAR 0 2
19619: PPUSH
19620: CALL_OW 136
19624: GO 19601
19626: POP
19627: POP
// end ;
19628: PPOPN 2
19630: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19631: LD_EXP 45
19635: PUSH
19636: LD_EXP 76
19640: AND
19641: IFFALSE 19781
19643: GO 19645
19645: DISABLE
19646: LD_INT 0
19648: PPUSH
19649: PPUSH
// begin ToLua ( displayPowell(); ) ;
19650: LD_STRING displayPowell();
19652: PPUSH
19653: CALL_OW 559
// uc_side := 0 ;
19657: LD_ADDR_OWVAR 20
19661: PUSH
19662: LD_INT 0
19664: ST_TO_ADDR
// uc_nation := 2 ;
19665: LD_ADDR_OWVAR 21
19669: PUSH
19670: LD_INT 2
19672: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19673: LD_ADDR_OWVAR 37
19677: PUSH
19678: LD_INT 14
19680: ST_TO_ADDR
// vc_engine := engine_siberite ;
19681: LD_ADDR_OWVAR 39
19685: PUSH
19686: LD_INT 3
19688: ST_TO_ADDR
// vc_control := control_apeman ;
19689: LD_ADDR_OWVAR 38
19693: PUSH
19694: LD_INT 5
19696: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19697: LD_ADDR_OWVAR 40
19701: PUSH
19702: LD_INT 29
19704: ST_TO_ADDR
// un := CreateVehicle ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: CALL_OW 45
19714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19727: LD_INT 35
19729: PPUSH
19730: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19734: LD_VAR 0 2
19738: PPUSH
19739: LD_INT 22
19741: PUSH
19742: LD_OWVAR 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PPUSH
19756: LD_VAR 0 2
19760: PPUSH
19761: CALL_OW 74
19765: PPUSH
19766: CALL_OW 115
// until IsDead ( un ) ;
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 301
19779: IFFALSE 19727
// end ;
19781: PPOPN 2
19783: END
// every 0 0$1 trigger StreamModeActive and sStu do
19784: LD_EXP 45
19788: PUSH
19789: LD_EXP 84
19793: AND
19794: IFFALSE 19810
19796: GO 19798
19798: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19799: LD_STRING displayStucuk();
19801: PPUSH
19802: CALL_OW 559
// ResetFog ;
19806: CALL_OW 335
// end ;
19810: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19811: LD_EXP 45
19815: PUSH
19816: LD_EXP 77
19820: AND
19821: IFFALSE 19962
19823: GO 19825
19825: DISABLE
19826: LD_INT 0
19828: PPUSH
19829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19830: LD_ADDR_VAR 0 2
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_OWVAR 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: ST_TO_ADDR
// if not tmp then
19866: LD_VAR 0 2
19870: NOT
19871: IFFALSE 19875
// exit ;
19873: GO 19962
// un := tmp [ rand ( 1 , tmp ) ] ;
19875: LD_ADDR_VAR 0 1
19879: PUSH
19880: LD_VAR 0 2
19884: PUSH
19885: LD_INT 1
19887: PPUSH
19888: LD_VAR 0 2
19892: PPUSH
19893: CALL_OW 12
19897: ARRAY
19898: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19899: LD_VAR 0 1
19903: PPUSH
19904: LD_INT 0
19906: PPUSH
19907: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19911: LD_VAR 0 1
19915: PPUSH
19916: LD_OWVAR 3
19920: PUSH
19921: LD_VAR 0 1
19925: DIFF
19926: PPUSH
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 74
19936: PPUSH
19937: CALL_OW 115
// wait ( 0 0$20 ) ;
19941: LD_INT 700
19943: PPUSH
19944: CALL_OW 67
// SetSide ( un , your_side ) ;
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_OWVAR 2
19957: PPUSH
19958: CALL_OW 235
// end ;
19962: PPOPN 2
19964: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19965: LD_EXP 45
19969: PUSH
19970: LD_EXP 78
19974: AND
19975: IFFALSE 20081
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_INT 22
19990: PUSH
19991: LD_OWVAR 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: LD_INT 30
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 30
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not depot then
20037: LD_VAR 0 1
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20081
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20046: LD_VAR 0 1
20050: PUSH
20051: LD_INT 1
20053: ARRAY
20054: PPUSH
20055: CALL_OW 250
20059: PPUSH
20060: LD_VAR 0 1
20064: PUSH
20065: LD_INT 1
20067: ARRAY
20068: PPUSH
20069: CALL_OW 251
20073: PPUSH
20074: LD_INT 70
20076: PPUSH
20077: CALL_OW 495
// end ;
20081: PPOPN 1
20083: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20084: LD_EXP 45
20088: PUSH
20089: LD_EXP 79
20093: AND
20094: IFFALSE 20305
20096: GO 20098
20098: DISABLE
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20106: LD_ADDR_VAR 0 5
20110: PUSH
20111: LD_INT 22
20113: PUSH
20114: LD_OWVAR 2
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 21
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PPUSH
20137: CALL_OW 69
20141: ST_TO_ADDR
// if not tmp then
20142: LD_VAR 0 5
20146: NOT
20147: IFFALSE 20151
// exit ;
20149: GO 20305
// for i in tmp do
20151: LD_ADDR_VAR 0 1
20155: PUSH
20156: LD_VAR 0 5
20160: PUSH
20161: FOR_IN
20162: IFFALSE 20303
// begin d := rand ( 0 , 5 ) ;
20164: LD_ADDR_VAR 0 4
20168: PUSH
20169: LD_INT 0
20171: PPUSH
20172: LD_INT 5
20174: PPUSH
20175: CALL_OW 12
20179: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 250
20194: PPUSH
20195: LD_VAR 0 4
20199: PPUSH
20200: LD_INT 3
20202: PPUSH
20203: LD_INT 12
20205: PPUSH
20206: CALL_OW 12
20210: PPUSH
20211: CALL_OW 272
20215: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20216: LD_ADDR_VAR 0 3
20220: PUSH
20221: LD_VAR 0 1
20225: PPUSH
20226: CALL_OW 251
20230: PPUSH
20231: LD_VAR 0 4
20235: PPUSH
20236: LD_INT 3
20238: PPUSH
20239: LD_INT 12
20241: PPUSH
20242: CALL_OW 12
20246: PPUSH
20247: CALL_OW 273
20251: ST_TO_ADDR
// if ValidHex ( x , y ) then
20252: LD_VAR 0 2
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 488
20266: IFFALSE 20301
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: LD_VAR 0 3
20282: PPUSH
20283: LD_INT 3
20285: PPUSH
20286: LD_INT 6
20288: PPUSH
20289: CALL_OW 12
20293: PPUSH
20294: LD_INT 1
20296: PPUSH
20297: CALL_OW 483
// end ;
20301: GO 20161
20303: POP
20304: POP
// end ;
20305: PPOPN 5
20307: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20308: LD_EXP 45
20312: PUSH
20313: LD_EXP 80
20317: AND
20318: IFFALSE 20412
20320: GO 20322
20322: DISABLE
20323: LD_INT 0
20325: PPUSH
20326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 32
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 21
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 69
20373: ST_TO_ADDR
// if not tmp then
20374: LD_VAR 0 2
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20412
// for i in tmp do
20383: LD_ADDR_VAR 0 1
20387: PUSH
20388: LD_VAR 0 2
20392: PUSH
20393: FOR_IN
20394: IFFALSE 20410
// SetFuel ( i , 0 ) ;
20396: LD_VAR 0 1
20400: PPUSH
20401: LD_INT 0
20403: PPUSH
20404: CALL_OW 240
20408: GO 20393
20410: POP
20411: POP
// end ;
20412: PPOPN 2
20414: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20415: LD_EXP 45
20419: PUSH
20420: LD_EXP 81
20424: AND
20425: IFFALSE 20491
20427: GO 20429
20429: DISABLE
20430: LD_INT 0
20432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20433: LD_ADDR_VAR 0 1
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_OWVAR 2
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 30
20452: PUSH
20453: LD_INT 29
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PPUSH
20464: CALL_OW 69
20468: ST_TO_ADDR
// if not tmp then
20469: LD_VAR 0 1
20473: NOT
20474: IFFALSE 20478
// exit ;
20476: GO 20491
// DestroyUnit ( tmp [ 1 ] ) ;
20478: LD_VAR 0 1
20482: PUSH
20483: LD_INT 1
20485: ARRAY
20486: PPUSH
20487: CALL_OW 65
// end ;
20491: PPOPN 1
20493: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20494: LD_EXP 45
20498: PUSH
20499: LD_EXP 83
20503: AND
20504: IFFALSE 20633
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin uc_side := 0 ;
20512: LD_ADDR_OWVAR 20
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// uc_nation := nation_arabian ;
20520: LD_ADDR_OWVAR 21
20524: PUSH
20525: LD_INT 2
20527: ST_TO_ADDR
// hc_gallery :=  ;
20528: LD_ADDR_OWVAR 33
20532: PUSH
20533: LD_STRING 
20535: ST_TO_ADDR
// hc_name :=  ;
20536: LD_ADDR_OWVAR 26
20540: PUSH
20541: LD_STRING 
20543: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20544: LD_INT 1
20546: PPUSH
20547: LD_INT 11
20549: PPUSH
20550: LD_INT 10
20552: PPUSH
20553: CALL_OW 380
// un := CreateHuman ;
20557: LD_ADDR_VAR 0 1
20561: PUSH
20562: CALL_OW 44
20566: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20567: LD_VAR 0 1
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20579: LD_INT 35
20581: PPUSH
20582: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_INT 22
20593: PUSH
20594: LD_OWVAR 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: PPUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 74
20617: PPUSH
20618: CALL_OW 115
// until IsDead ( un ) ;
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL_OW 301
20631: IFFALSE 20579
// end ;
20633: PPOPN 1
20635: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20636: LD_EXP 45
20640: PUSH
20641: LD_EXP 85
20645: AND
20646: IFFALSE 20658
20648: GO 20650
20650: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20651: LD_STRING earthquake(getX(game), 0, 32)
20653: PPUSH
20654: CALL_OW 559
20658: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20659: LD_EXP 45
20663: PUSH
20664: LD_EXP 86
20668: AND
20669: IFFALSE 20760
20671: GO 20673
20673: DISABLE
20674: LD_INT 0
20676: PPUSH
// begin enable ;
20677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20678: LD_ADDR_VAR 0 1
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_OWVAR 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 33
20707: PUSH
20708: LD_INT 3
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: ST_TO_ADDR
// if not tmp then
20725: LD_VAR 0 1
20729: NOT
20730: IFFALSE 20734
// exit ;
20732: GO 20760
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 1
20741: PPUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 12
20751: ARRAY
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: CALL_OW 234
// end ;
20760: PPOPN 1
20762: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20763: LD_EXP 45
20767: PUSH
20768: LD_EXP 87
20772: AND
20773: IFFALSE 20914
20775: GO 20777
20777: DISABLE
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20783: LD_ADDR_VAR 0 3
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 25
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: ST_TO_ADDR
// if not tmp then
20819: LD_VAR 0 3
20823: NOT
20824: IFFALSE 20828
// exit ;
20826: GO 20914
// un := tmp [ rand ( 1 , tmp ) ] ;
20828: LD_ADDR_VAR 0 2
20832: PUSH
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 1
20840: PPUSH
20841: LD_VAR 0 3
20845: PPUSH
20846: CALL_OW 12
20850: ARRAY
20851: ST_TO_ADDR
// if Crawls ( un ) then
20852: LD_VAR 0 2
20856: PPUSH
20857: CALL_OW 318
20861: IFFALSE 20872
// ComWalk ( un ) ;
20863: LD_VAR 0 2
20867: PPUSH
20868: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20872: LD_VAR 0 2
20876: PPUSH
20877: LD_INT 9
20879: PPUSH
20880: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20884: LD_INT 28
20886: PPUSH
20887: LD_OWVAR 2
20891: PPUSH
20892: LD_INT 2
20894: PPUSH
20895: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20899: LD_INT 29
20901: PPUSH
20902: LD_OWVAR 2
20906: PPUSH
20907: LD_INT 2
20909: PPUSH
20910: CALL_OW 322
// end ;
20914: PPOPN 3
20916: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20917: LD_EXP 45
20921: PUSH
20922: LD_EXP 88
20926: AND
20927: IFFALSE 21038
20929: GO 20931
20931: DISABLE
20932: LD_INT 0
20934: PPUSH
20935: PPUSH
20936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20937: LD_ADDR_VAR 0 3
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_OWVAR 2
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 25
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PPUSH
20968: CALL_OW 69
20972: ST_TO_ADDR
// if not tmp then
20973: LD_VAR 0 3
20977: NOT
20978: IFFALSE 20982
// exit ;
20980: GO 21038
// un := tmp [ rand ( 1 , tmp ) ] ;
20982: LD_ADDR_VAR 0 2
20986: PUSH
20987: LD_VAR 0 3
20991: PUSH
20992: LD_INT 1
20994: PPUSH
20995: LD_VAR 0 3
20999: PPUSH
21000: CALL_OW 12
21004: ARRAY
21005: ST_TO_ADDR
// if Crawls ( un ) then
21006: LD_VAR 0 2
21010: PPUSH
21011: CALL_OW 318
21015: IFFALSE 21026
// ComWalk ( un ) ;
21017: LD_VAR 0 2
21021: PPUSH
21022: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_INT 8
21033: PPUSH
21034: CALL_OW 336
// end ;
21038: PPOPN 3
21040: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21041: LD_EXP 45
21045: PUSH
21046: LD_EXP 89
21050: AND
21051: IFFALSE 21195
21053: GO 21055
21055: DISABLE
21056: LD_INT 0
21058: PPUSH
21059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_OWVAR 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 21
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: LD_INT 34
21092: PUSH
21093: LD_INT 12
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 34
21102: PUSH
21103: LD_INT 51
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 34
21112: PUSH
21113: LD_INT 32
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 69
21135: ST_TO_ADDR
// if not tmp then
21136: LD_VAR 0 2
21140: NOT
21141: IFFALSE 21145
// exit ;
21143: GO 21195
// for i in tmp do
21145: LD_ADDR_VAR 0 1
21149: PUSH
21150: LD_VAR 0 2
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21193
// if GetCargo ( i , mat_artifact ) = 0 then
21158: LD_VAR 0 1
21162: PPUSH
21163: LD_INT 4
21165: PPUSH
21166: CALL_OW 289
21170: PUSH
21171: LD_INT 0
21173: EQUAL
21174: IFFALSE 21191
// SetCargo ( i , mat_siberit , 100 ) ;
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_INT 3
21183: PPUSH
21184: LD_INT 100
21186: PPUSH
21187: CALL_OW 290
21191: GO 21155
21193: POP
21194: POP
// end ;
21195: PPOPN 2
21197: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21198: LD_EXP 45
21202: PUSH
21203: LD_EXP 90
21207: AND
21208: IFFALSE 21391
21210: GO 21212
21212: DISABLE
21213: LD_INT 0
21215: PPUSH
21216: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21217: LD_ADDR_VAR 0 2
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_OWVAR 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PPUSH
21234: CALL_OW 69
21238: ST_TO_ADDR
// if not tmp then
21239: LD_VAR 0 2
21243: NOT
21244: IFFALSE 21248
// exit ;
21246: GO 21391
// for i := 1 to 2 do
21248: LD_ADDR_VAR 0 1
21252: PUSH
21253: DOUBLE
21254: LD_INT 1
21256: DEC
21257: ST_TO_ADDR
21258: LD_INT 2
21260: PUSH
21261: FOR_TO
21262: IFFALSE 21389
// begin uc_side := your_side ;
21264: LD_ADDR_OWVAR 20
21268: PUSH
21269: LD_OWVAR 2
21273: ST_TO_ADDR
// uc_nation := nation_american ;
21274: LD_ADDR_OWVAR 21
21278: PUSH
21279: LD_INT 1
21281: ST_TO_ADDR
// vc_chassis := us_morphling ;
21282: LD_ADDR_OWVAR 37
21286: PUSH
21287: LD_INT 5
21289: ST_TO_ADDR
// vc_engine := engine_siberite ;
21290: LD_ADDR_OWVAR 39
21294: PUSH
21295: LD_INT 3
21297: ST_TO_ADDR
// vc_control := control_computer ;
21298: LD_ADDR_OWVAR 38
21302: PUSH
21303: LD_INT 3
21305: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21306: LD_ADDR_OWVAR 40
21310: PUSH
21311: LD_INT 10
21313: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21314: LD_VAR 0 2
21318: PUSH
21319: LD_INT 1
21321: ARRAY
21322: PPUSH
21323: CALL_OW 310
21327: NOT
21328: IFFALSE 21375
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21330: CALL_OW 45
21334: PPUSH
21335: LD_VAR 0 2
21339: PUSH
21340: LD_INT 1
21342: ARRAY
21343: PPUSH
21344: CALL_OW 250
21348: PPUSH
21349: LD_VAR 0 2
21353: PUSH
21354: LD_INT 1
21356: ARRAY
21357: PPUSH
21358: CALL_OW 251
21362: PPUSH
21363: LD_INT 12
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: CALL_OW 50
21373: GO 21387
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21375: CALL_OW 45
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 51
// end ;
21387: GO 21261
21389: POP
21390: POP
// end ;
21391: PPOPN 2
21393: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21394: LD_EXP 45
21398: PUSH
21399: LD_EXP 91
21403: AND
21404: IFFALSE 21626
21406: GO 21408
21408: DISABLE
21409: LD_INT 0
21411: PPUSH
21412: PPUSH
21413: PPUSH
21414: PPUSH
21415: PPUSH
21416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21417: LD_ADDR_VAR 0 6
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_OWVAR 2
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 21
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 23
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: ST_TO_ADDR
// if not tmp then
21471: LD_VAR 0 6
21475: NOT
21476: IFFALSE 21480
// exit ;
21478: GO 21626
// s1 := rand ( 1 , 4 ) ;
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 1
21487: PPUSH
21488: LD_INT 4
21490: PPUSH
21491: CALL_OW 12
21495: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21496: LD_ADDR_VAR 0 4
21500: PUSH
21501: LD_VAR 0 6
21505: PUSH
21506: LD_INT 1
21508: ARRAY
21509: PPUSH
21510: LD_VAR 0 2
21514: PPUSH
21515: CALL_OW 259
21519: ST_TO_ADDR
// if s1 = 1 then
21520: LD_VAR 0 2
21524: PUSH
21525: LD_INT 1
21527: EQUAL
21528: IFFALSE 21548
// s2 := rand ( 2 , 4 ) else
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_INT 2
21537: PPUSH
21538: LD_INT 4
21540: PPUSH
21541: CALL_OW 12
21545: ST_TO_ADDR
21546: GO 21556
// s2 := 1 ;
21548: LD_ADDR_VAR 0 3
21552: PUSH
21553: LD_INT 1
21555: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21556: LD_ADDR_VAR 0 5
21560: PUSH
21561: LD_VAR 0 6
21565: PUSH
21566: LD_INT 1
21568: ARRAY
21569: PPUSH
21570: LD_VAR 0 3
21574: PPUSH
21575: CALL_OW 259
21579: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21580: LD_VAR 0 6
21584: PUSH
21585: LD_INT 1
21587: ARRAY
21588: PPUSH
21589: LD_VAR 0 2
21593: PPUSH
21594: LD_VAR 0 5
21598: PPUSH
21599: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21603: LD_VAR 0 6
21607: PUSH
21608: LD_INT 1
21610: ARRAY
21611: PPUSH
21612: LD_VAR 0 3
21616: PPUSH
21617: LD_VAR 0 4
21621: PPUSH
21622: CALL_OW 237
// end ;
21626: PPOPN 6
21628: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21629: LD_EXP 45
21633: PUSH
21634: LD_EXP 92
21638: AND
21639: IFFALSE 21718
21641: GO 21643
21643: DISABLE
21644: LD_INT 0
21646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21647: LD_ADDR_VAR 0 1
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 3
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 1
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: CALL_OW 12
21709: ARRAY
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 234
// end ;
21718: PPOPN 1
21720: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21721: LD_EXP 45
21725: PUSH
21726: LD_EXP 93
21730: AND
21731: IFFALSE 21843
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21740: LD_ADDR_VAR 0 2
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_OWVAR 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 30
21762: PUSH
21763: LD_INT 27
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 26
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 30
21782: PUSH
21783: LD_INT 28
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: CALL_OW 69
21804: ST_TO_ADDR
// if not tmp then
21805: LD_VAR 0 2
21809: NOT
21810: IFFALSE 21814
// exit ;
21812: GO 21843
// for i in tmp do
21814: LD_ADDR_VAR 0 1
21818: PUSH
21819: LD_VAR 0 2
21823: PUSH
21824: FOR_IN
21825: IFFALSE 21841
// SetLives ( i , 1 ) ;
21827: LD_VAR 0 1
21831: PPUSH
21832: LD_INT 1
21834: PPUSH
21835: CALL_OW 234
21839: GO 21824
21841: POP
21842: POP
// end ;
21843: PPOPN 2
21845: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21846: LD_EXP 45
21850: PUSH
21851: LD_EXP 94
21855: AND
21856: IFFALSE 22143
21858: GO 21860
21860: DISABLE
21861: LD_INT 0
21863: PPUSH
21864: PPUSH
21865: PPUSH
// begin i := rand ( 1 , 7 ) ;
21866: LD_ADDR_VAR 0 1
21870: PUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 7
21876: PPUSH
21877: CALL_OW 12
21881: ST_TO_ADDR
// case i of 1 :
21882: LD_VAR 0 1
21886: PUSH
21887: LD_INT 1
21889: DOUBLE
21890: EQUAL
21891: IFTRUE 21895
21893: GO 21905
21895: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21896: LD_STRING earthquake(getX(game), 0, 32)
21898: PPUSH
21899: CALL_OW 559
21903: GO 22143
21905: LD_INT 2
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 21927
21913: POP
// begin ToLua ( displayStucuk(); ) ;
21914: LD_STRING displayStucuk();
21916: PPUSH
21917: CALL_OW 559
// ResetFog ;
21921: CALL_OW 335
// end ; 3 :
21925: GO 22143
21927: LD_INT 3
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 22039
21935: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21936: LD_ADDR_VAR 0 2
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_OWVAR 2
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 25
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PPUSH
21967: CALL_OW 69
21971: ST_TO_ADDR
// if not tmp then
21972: LD_VAR 0 2
21976: NOT
21977: IFFALSE 21981
// exit ;
21979: GO 22143
// un := tmp [ rand ( 1 , tmp ) ] ;
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: LD_VAR 0 2
21990: PUSH
21991: LD_INT 1
21993: PPUSH
21994: LD_VAR 0 2
21998: PPUSH
21999: CALL_OW 12
22003: ARRAY
22004: ST_TO_ADDR
// if Crawls ( un ) then
22005: LD_VAR 0 3
22009: PPUSH
22010: CALL_OW 318
22014: IFFALSE 22025
// ComWalk ( un ) ;
22016: LD_VAR 0 3
22020: PPUSH
22021: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22025: LD_VAR 0 3
22029: PPUSH
22030: LD_INT 8
22032: PPUSH
22033: CALL_OW 336
// end ; 4 :
22037: GO 22143
22039: LD_INT 4
22041: DOUBLE
22042: EQUAL
22043: IFTRUE 22047
22045: GO 22121
22047: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_INT 22
22055: PUSH
22056: LD_OWVAR 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 30
22067: PUSH
22068: LD_INT 29
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: ST_TO_ADDR
// if not tmp then
22084: LD_VAR 0 2
22088: NOT
22089: IFFALSE 22093
// exit ;
22091: GO 22143
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22093: LD_VAR 0 2
22097: PUSH
22098: LD_INT 1
22100: ARRAY
22101: PPUSH
22102: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22106: LD_VAR 0 2
22110: PUSH
22111: LD_INT 1
22113: ARRAY
22114: PPUSH
22115: CALL_OW 65
// end ; 5 .. 7 :
22119: GO 22143
22121: LD_INT 5
22123: DOUBLE
22124: GREATEREQUAL
22125: IFFALSE 22133
22127: LD_INT 7
22129: DOUBLE
22130: LESSEQUAL
22131: IFTRUE 22135
22133: GO 22142
22135: POP
// StreamSibBomb ; end ;
22136: CALL 18380 0 0
22140: GO 22143
22142: POP
// end ;
22143: PPOPN 3
22145: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22146: LD_EXP 45
22150: PUSH
22151: LD_EXP 95
22155: AND
22156: IFFALSE 22312
22158: GO 22160
22160: DISABLE
22161: LD_INT 0
22163: PPUSH
22164: PPUSH
22165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_INT 81
22173: PUSH
22174: LD_OWVAR 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 21
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PPUSH
22215: CALL_OW 69
22219: ST_TO_ADDR
// if not tmp then
22220: LD_VAR 0 2
22224: NOT
22225: IFFALSE 22229
// exit ;
22227: GO 22312
// p := 0 ;
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: LD_INT 0
22236: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22237: LD_INT 35
22239: PPUSH
22240: CALL_OW 67
// p := p + 1 ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_VAR 0 3
22253: PUSH
22254: LD_INT 1
22256: PLUS
22257: ST_TO_ADDR
// for i in tmp do
22258: LD_ADDR_VAR 0 1
22262: PUSH
22263: LD_VAR 0 2
22267: PUSH
22268: FOR_IN
22269: IFFALSE 22300
// if GetLives ( i ) < 1000 then
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 256
22280: PUSH
22281: LD_INT 1000
22283: LESS
22284: IFFALSE 22298
// SetLives ( i , 1000 ) ;
22286: LD_VAR 0 1
22290: PPUSH
22291: LD_INT 1000
22293: PPUSH
22294: CALL_OW 234
22298: GO 22268
22300: POP
22301: POP
// until p > 20 ;
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 20
22309: GREATER
22310: IFFALSE 22237
// end ;
22312: PPOPN 3
22314: END
// every 0 0$1 trigger StreamModeActive and sTime do
22315: LD_EXP 45
22319: PUSH
22320: LD_EXP 96
22324: AND
22325: IFFALSE 22360
22327: GO 22329
22329: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22330: LD_INT 28
22332: PPUSH
22333: LD_OWVAR 2
22337: PPUSH
22338: LD_INT 2
22340: PPUSH
22341: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22345: LD_INT 30
22347: PPUSH
22348: LD_OWVAR 2
22352: PPUSH
22353: LD_INT 2
22355: PPUSH
22356: CALL_OW 322
// end ;
22360: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22361: LD_EXP 45
22365: PUSH
22366: LD_EXP 97
22370: AND
22371: IFFALSE 22492
22373: GO 22375
22375: DISABLE
22376: LD_INT 0
22378: PPUSH
22379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22380: LD_ADDR_VAR 0 2
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_OWVAR 2
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 69
22433: ST_TO_ADDR
// if not tmp then
22434: LD_VAR 0 2
22438: NOT
22439: IFFALSE 22443
// exit ;
22441: GO 22492
// for i in tmp do
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: LD_VAR 0 2
22452: PUSH
22453: FOR_IN
22454: IFFALSE 22490
// begin if Crawls ( i ) then
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 318
22465: IFFALSE 22476
// ComWalk ( i ) ;
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 138
// SetClass ( i , 2 ) ;
22476: LD_VAR 0 1
22480: PPUSH
22481: LD_INT 2
22483: PPUSH
22484: CALL_OW 336
// end ;
22488: GO 22453
22490: POP
22491: POP
// end ;
22492: PPOPN 2
22494: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22495: LD_EXP 45
22499: PUSH
22500: LD_EXP 98
22504: AND
22505: IFFALSE 22793
22507: GO 22509
22509: DISABLE
22510: LD_INT 0
22512: PPUSH
22513: PPUSH
22514: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22515: LD_OWVAR 2
22519: PPUSH
22520: LD_INT 9
22522: PPUSH
22523: LD_INT 1
22525: PPUSH
22526: LD_INT 1
22528: PPUSH
22529: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22533: LD_INT 9
22535: PPUSH
22536: LD_OWVAR 2
22540: PPUSH
22541: CALL_OW 343
// uc_side := 9 ;
22545: LD_ADDR_OWVAR 20
22549: PUSH
22550: LD_INT 9
22552: ST_TO_ADDR
// uc_nation := 2 ;
22553: LD_ADDR_OWVAR 21
22557: PUSH
22558: LD_INT 2
22560: ST_TO_ADDR
// hc_name := Dark Warrior ;
22561: LD_ADDR_OWVAR 26
22565: PUSH
22566: LD_STRING Dark Warrior
22568: ST_TO_ADDR
// hc_gallery :=  ;
22569: LD_ADDR_OWVAR 33
22573: PUSH
22574: LD_STRING 
22576: ST_TO_ADDR
// hc_noskilllimit := true ;
22577: LD_ADDR_OWVAR 76
22581: PUSH
22582: LD_INT 1
22584: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22585: LD_ADDR_OWVAR 31
22589: PUSH
22590: LD_INT 30
22592: PUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 30
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: ST_TO_ADDR
// un := CreateHuman ;
22608: LD_ADDR_VAR 0 3
22612: PUSH
22613: CALL_OW 44
22617: ST_TO_ADDR
// hc_noskilllimit := false ;
22618: LD_ADDR_OWVAR 76
22622: PUSH
22623: LD_INT 0
22625: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22626: LD_VAR 0 3
22630: PPUSH
22631: LD_INT 1
22633: PPUSH
22634: CALL_OW 51
// ToLua ( playRanger() ) ;
22638: LD_STRING playRanger()
22640: PPUSH
22641: CALL_OW 559
// p := 0 ;
22645: LD_ADDR_VAR 0 2
22649: PUSH
22650: LD_INT 0
22652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22653: LD_INT 35
22655: PPUSH
22656: CALL_OW 67
// p := p + 1 ;
22660: LD_ADDR_VAR 0 2
22664: PUSH
22665: LD_VAR 0 2
22669: PUSH
22670: LD_INT 1
22672: PLUS
22673: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22674: LD_VAR 0 3
22678: PPUSH
22679: CALL_OW 256
22683: PUSH
22684: LD_INT 1000
22686: LESS
22687: IFFALSE 22701
// SetLives ( un , 1000 ) ;
22689: LD_VAR 0 3
22693: PPUSH
22694: LD_INT 1000
22696: PPUSH
22697: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22701: LD_VAR 0 3
22705: PPUSH
22706: LD_INT 81
22708: PUSH
22709: LD_OWVAR 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 91
22720: PUSH
22721: LD_VAR 0 3
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PPUSH
22743: LD_VAR 0 3
22747: PPUSH
22748: CALL_OW 74
22752: PPUSH
22753: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22757: LD_VAR 0 2
22761: PUSH
22762: LD_INT 80
22764: GREATER
22765: PUSH
22766: LD_VAR 0 3
22770: PPUSH
22771: CALL_OW 301
22775: OR
22776: IFFALSE 22653
// if un then
22778: LD_VAR 0 3
22782: IFFALSE 22793
// RemoveUnit ( un ) ;
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 64
// end ;
22793: PPOPN 3
22795: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22796: LD_EXP 99
22800: IFFALSE 22916
22802: GO 22804
22804: DISABLE
22805: LD_INT 0
22807: PPUSH
22808: PPUSH
22809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22810: LD_ADDR_VAR 0 2
22814: PUSH
22815: LD_INT 81
22817: PUSH
22818: LD_OWVAR 2
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 21
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PPUSH
22841: CALL_OW 69
22845: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22846: LD_STRING playComputer()
22848: PPUSH
22849: CALL_OW 559
// if not tmp then
22853: LD_VAR 0 2
22857: NOT
22858: IFFALSE 22862
// exit ;
22860: GO 22916
// for i in tmp do
22862: LD_ADDR_VAR 0 1
22866: PUSH
22867: LD_VAR 0 2
22871: PUSH
22872: FOR_IN
22873: IFFALSE 22914
// for j := 1 to 4 do
22875: LD_ADDR_VAR 0 3
22879: PUSH
22880: DOUBLE
22881: LD_INT 1
22883: DEC
22884: ST_TO_ADDR
22885: LD_INT 4
22887: PUSH
22888: FOR_TO
22889: IFFALSE 22910
// SetSkill ( i , j , 10 ) ;
22891: LD_VAR 0 1
22895: PPUSH
22896: LD_VAR 0 3
22900: PPUSH
22901: LD_INT 10
22903: PPUSH
22904: CALL_OW 237
22908: GO 22888
22910: POP
22911: POP
22912: GO 22872
22914: POP
22915: POP
// end ;
22916: PPOPN 3
22918: END
// every 0 0$1 trigger s30 do var i , tmp ;
22919: LD_EXP 100
22923: IFFALSE 22992
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_INT 22
22939: PUSH
22940: LD_OWVAR 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: ST_TO_ADDR
// if not tmp then
22954: LD_VAR 0 2
22958: NOT
22959: IFFALSE 22963
// exit ;
22961: GO 22992
// for i in tmp do
22963: LD_ADDR_VAR 0 1
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: FOR_IN
22974: IFFALSE 22990
// SetLives ( i , 300 ) ;
22976: LD_VAR 0 1
22980: PPUSH
22981: LD_INT 300
22983: PPUSH
22984: CALL_OW 234
22988: GO 22973
22990: POP
22991: POP
// end ;
22992: PPOPN 2
22994: END
// every 0 0$1 trigger s60 do var i , tmp ;
22995: LD_EXP 101
22999: IFFALSE 23068
23001: GO 23003
23003: DISABLE
23004: LD_INT 0
23006: PPUSH
23007: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23008: LD_ADDR_VAR 0 2
23012: PUSH
23013: LD_INT 22
23015: PUSH
23016: LD_OWVAR 2
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: ST_TO_ADDR
// if not tmp then
23030: LD_VAR 0 2
23034: NOT
23035: IFFALSE 23039
// exit ;
23037: GO 23068
// for i in tmp do
23039: LD_ADDR_VAR 0 1
23043: PUSH
23044: LD_VAR 0 2
23048: PUSH
23049: FOR_IN
23050: IFFALSE 23066
// SetLives ( i , 600 ) ;
23052: LD_VAR 0 1
23056: PPUSH
23057: LD_INT 600
23059: PPUSH
23060: CALL_OW 234
23064: GO 23049
23066: POP
23067: POP
// end ;
23068: PPOPN 2
23070: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23071: LD_INT 0
23073: PPUSH
// case cmd of 301 :
23074: LD_VAR 0 1
23078: PUSH
23079: LD_INT 301
23081: DOUBLE
23082: EQUAL
23083: IFTRUE 23087
23085: GO 23119
23087: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23088: LD_VAR 0 6
23092: PPUSH
23093: LD_VAR 0 7
23097: PPUSH
23098: LD_VAR 0 8
23102: PPUSH
23103: LD_VAR 0 4
23107: PPUSH
23108: LD_VAR 0 5
23112: PPUSH
23113: CALL 24320 0 5
23117: GO 23240
23119: LD_INT 302
23121: DOUBLE
23122: EQUAL
23123: IFTRUE 23127
23125: GO 23164
23127: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23128: LD_VAR 0 6
23132: PPUSH
23133: LD_VAR 0 7
23137: PPUSH
23138: LD_VAR 0 8
23142: PPUSH
23143: LD_VAR 0 9
23147: PPUSH
23148: LD_VAR 0 4
23152: PPUSH
23153: LD_VAR 0 5
23157: PPUSH
23158: CALL 24411 0 6
23162: GO 23240
23164: LD_INT 303
23166: DOUBLE
23167: EQUAL
23168: IFTRUE 23172
23170: GO 23209
23172: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23173: LD_VAR 0 6
23177: PPUSH
23178: LD_VAR 0 7
23182: PPUSH
23183: LD_VAR 0 8
23187: PPUSH
23188: LD_VAR 0 9
23192: PPUSH
23193: LD_VAR 0 4
23197: PPUSH
23198: LD_VAR 0 5
23202: PPUSH
23203: CALL 23245 0 6
23207: GO 23240
23209: LD_INT 304
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23217
23215: GO 23239
23217: POP
// hHackTeleport ( unit , x , y ) ; end ;
23218: LD_VAR 0 2
23222: PPUSH
23223: LD_VAR 0 4
23227: PPUSH
23228: LD_VAR 0 5
23232: PPUSH
23233: CALL 25004 0 3
23237: GO 23240
23239: POP
// end ;
23240: LD_VAR 0 12
23244: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23245: LD_INT 0
23247: PPUSH
23248: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23249: LD_VAR 0 1
23253: PUSH
23254: LD_INT 1
23256: LESS
23257: PUSH
23258: LD_VAR 0 1
23262: PUSH
23263: LD_INT 3
23265: GREATER
23266: OR
23267: PUSH
23268: LD_VAR 0 5
23272: PPUSH
23273: LD_VAR 0 6
23277: PPUSH
23278: CALL_OW 428
23282: OR
23283: IFFALSE 23287
// exit ;
23285: GO 24007
// uc_side := your_side ;
23287: LD_ADDR_OWVAR 20
23291: PUSH
23292: LD_OWVAR 2
23296: ST_TO_ADDR
// uc_nation := nation ;
23297: LD_ADDR_OWVAR 21
23301: PUSH
23302: LD_VAR 0 1
23306: ST_TO_ADDR
// bc_level = 1 ;
23307: LD_ADDR_OWVAR 43
23311: PUSH
23312: LD_INT 1
23314: ST_TO_ADDR
// case btype of 1 :
23315: LD_VAR 0 2
23319: PUSH
23320: LD_INT 1
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23339
23328: POP
// bc_type := b_depot ; 2 :
23329: LD_ADDR_OWVAR 42
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
23337: GO 23951
23339: LD_INT 2
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23358
23347: POP
// bc_type := b_warehouse ; 3 :
23348: LD_ADDR_OWVAR 42
23352: PUSH
23353: LD_INT 1
23355: ST_TO_ADDR
23356: GO 23951
23358: LD_INT 3
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23377
23366: POP
// bc_type := b_lab ; 4 .. 9 :
23367: LD_ADDR_OWVAR 42
23371: PUSH
23372: LD_INT 6
23374: ST_TO_ADDR
23375: GO 23951
23377: LD_INT 4
23379: DOUBLE
23380: GREATEREQUAL
23381: IFFALSE 23389
23383: LD_INT 9
23385: DOUBLE
23386: LESSEQUAL
23387: IFTRUE 23391
23389: GO 23443
23391: POP
// begin bc_type := b_lab_half ;
23392: LD_ADDR_OWVAR 42
23396: PUSH
23397: LD_INT 7
23399: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23400: LD_ADDR_OWVAR 44
23404: PUSH
23405: LD_INT 10
23407: PUSH
23408: LD_INT 11
23410: PUSH
23411: LD_INT 12
23413: PUSH
23414: LD_INT 15
23416: PUSH
23417: LD_INT 14
23419: PUSH
23420: LD_INT 13
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: PUSH
23431: LD_VAR 0 2
23435: PUSH
23436: LD_INT 3
23438: MINUS
23439: ARRAY
23440: ST_TO_ADDR
// end ; 10 .. 13 :
23441: GO 23951
23443: LD_INT 10
23445: DOUBLE
23446: GREATEREQUAL
23447: IFFALSE 23455
23449: LD_INT 13
23451: DOUBLE
23452: LESSEQUAL
23453: IFTRUE 23457
23455: GO 23534
23457: POP
// begin bc_type := b_lab_full ;
23458: LD_ADDR_OWVAR 42
23462: PUSH
23463: LD_INT 8
23465: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23466: LD_ADDR_OWVAR 44
23470: PUSH
23471: LD_INT 10
23473: PUSH
23474: LD_INT 12
23476: PUSH
23477: LD_INT 14
23479: PUSH
23480: LD_INT 13
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: PUSH
23489: LD_VAR 0 2
23493: PUSH
23494: LD_INT 9
23496: MINUS
23497: ARRAY
23498: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23499: LD_ADDR_OWVAR 45
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 15
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 15
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: LD_INT 9
23529: MINUS
23530: ARRAY
23531: ST_TO_ADDR
// end ; 14 :
23532: GO 23951
23534: LD_INT 14
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23553
23542: POP
// bc_type := b_workshop ; 15 :
23543: LD_ADDR_OWVAR 42
23547: PUSH
23548: LD_INT 2
23550: ST_TO_ADDR
23551: GO 23951
23553: LD_INT 15
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23572
23561: POP
// bc_type := b_factory ; 16 :
23562: LD_ADDR_OWVAR 42
23566: PUSH
23567: LD_INT 3
23569: ST_TO_ADDR
23570: GO 23951
23572: LD_INT 16
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23591
23580: POP
// bc_type := b_ext_gun ; 17 :
23581: LD_ADDR_OWVAR 42
23585: PUSH
23586: LD_INT 17
23588: ST_TO_ADDR
23589: GO 23951
23591: LD_INT 17
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23627
23599: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23600: LD_ADDR_OWVAR 42
23604: PUSH
23605: LD_INT 19
23607: PUSH
23608: LD_INT 23
23610: PUSH
23611: LD_INT 19
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_VAR 0 1
23623: ARRAY
23624: ST_TO_ADDR
23625: GO 23951
23627: LD_INT 18
23629: DOUBLE
23630: EQUAL
23631: IFTRUE 23635
23633: GO 23646
23635: POP
// bc_type := b_ext_radar ; 19 :
23636: LD_ADDR_OWVAR 42
23640: PUSH
23641: LD_INT 20
23643: ST_TO_ADDR
23644: GO 23951
23646: LD_INT 19
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23665
23654: POP
// bc_type := b_ext_radio ; 20 :
23655: LD_ADDR_OWVAR 42
23659: PUSH
23660: LD_INT 22
23662: ST_TO_ADDR
23663: GO 23951
23665: LD_INT 20
23667: DOUBLE
23668: EQUAL
23669: IFTRUE 23673
23671: GO 23684
23673: POP
// bc_type := b_ext_siberium ; 21 :
23674: LD_ADDR_OWVAR 42
23678: PUSH
23679: LD_INT 21
23681: ST_TO_ADDR
23682: GO 23951
23684: LD_INT 21
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23703
23692: POP
// bc_type := b_ext_computer ; 22 :
23693: LD_ADDR_OWVAR 42
23697: PUSH
23698: LD_INT 24
23700: ST_TO_ADDR
23701: GO 23951
23703: LD_INT 22
23705: DOUBLE
23706: EQUAL
23707: IFTRUE 23711
23709: GO 23722
23711: POP
// bc_type := b_ext_track ; 23 :
23712: LD_ADDR_OWVAR 42
23716: PUSH
23717: LD_INT 16
23719: ST_TO_ADDR
23720: GO 23951
23722: LD_INT 23
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23741
23730: POP
// bc_type := b_ext_laser ; 24 :
23731: LD_ADDR_OWVAR 42
23735: PUSH
23736: LD_INT 25
23738: ST_TO_ADDR
23739: GO 23951
23741: LD_INT 24
23743: DOUBLE
23744: EQUAL
23745: IFTRUE 23749
23747: GO 23760
23749: POP
// bc_type := b_control_tower ; 25 :
23750: LD_ADDR_OWVAR 42
23754: PUSH
23755: LD_INT 36
23757: ST_TO_ADDR
23758: GO 23951
23760: LD_INT 25
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23779
23768: POP
// bc_type := b_breastwork ; 26 :
23769: LD_ADDR_OWVAR 42
23773: PUSH
23774: LD_INT 31
23776: ST_TO_ADDR
23777: GO 23951
23779: LD_INT 26
23781: DOUBLE
23782: EQUAL
23783: IFTRUE 23787
23785: GO 23798
23787: POP
// bc_type := b_bunker ; 27 :
23788: LD_ADDR_OWVAR 42
23792: PUSH
23793: LD_INT 32
23795: ST_TO_ADDR
23796: GO 23951
23798: LD_INT 27
23800: DOUBLE
23801: EQUAL
23802: IFTRUE 23806
23804: GO 23817
23806: POP
// bc_type := b_turret ; 28 :
23807: LD_ADDR_OWVAR 42
23811: PUSH
23812: LD_INT 33
23814: ST_TO_ADDR
23815: GO 23951
23817: LD_INT 28
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23836
23825: POP
// bc_type := b_armoury ; 29 :
23826: LD_ADDR_OWVAR 42
23830: PUSH
23831: LD_INT 4
23833: ST_TO_ADDR
23834: GO 23951
23836: LD_INT 29
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23855
23844: POP
// bc_type := b_barracks ; 30 :
23845: LD_ADDR_OWVAR 42
23849: PUSH
23850: LD_INT 5
23852: ST_TO_ADDR
23853: GO 23951
23855: LD_INT 30
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23874
23863: POP
// bc_type := b_solar_power ; 31 :
23864: LD_ADDR_OWVAR 42
23868: PUSH
23869: LD_INT 27
23871: ST_TO_ADDR
23872: GO 23951
23874: LD_INT 31
23876: DOUBLE
23877: EQUAL
23878: IFTRUE 23882
23880: GO 23893
23882: POP
// bc_type := b_oil_power ; 32 :
23883: LD_ADDR_OWVAR 42
23887: PUSH
23888: LD_INT 26
23890: ST_TO_ADDR
23891: GO 23951
23893: LD_INT 32
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 23912
23901: POP
// bc_type := b_siberite_power ; 33 :
23902: LD_ADDR_OWVAR 42
23906: PUSH
23907: LD_INT 28
23909: ST_TO_ADDR
23910: GO 23951
23912: LD_INT 33
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23931
23920: POP
// bc_type := b_oil_mine ; 34 :
23921: LD_ADDR_OWVAR 42
23925: PUSH
23926: LD_INT 29
23928: ST_TO_ADDR
23929: GO 23951
23931: LD_INT 34
23933: DOUBLE
23934: EQUAL
23935: IFTRUE 23939
23937: GO 23950
23939: POP
// bc_type := b_siberite_mine ; end ;
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 30
23947: ST_TO_ADDR
23948: GO 23951
23950: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23951: LD_ADDR_VAR 0 8
23955: PUSH
23956: LD_VAR 0 5
23960: PPUSH
23961: LD_VAR 0 6
23965: PPUSH
23966: LD_VAR 0 3
23970: PPUSH
23971: CALL_OW 47
23975: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23976: LD_OWVAR 42
23980: PUSH
23981: LD_INT 32
23983: PUSH
23984: LD_INT 33
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: IN
23991: IFFALSE 24007
// PlaceWeaponTurret ( b , weapon ) ;
23993: LD_VAR 0 8
23997: PPUSH
23998: LD_VAR 0 4
24002: PPUSH
24003: CALL_OW 431
// end ;
24007: LD_VAR 0 7
24011: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24018: LD_ADDR_VAR 0 4
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_OWVAR 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 30
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 30
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PPUSH
24067: CALL_OW 69
24071: ST_TO_ADDR
// if not tmp then
24072: LD_VAR 0 4
24076: NOT
24077: IFFALSE 24081
// exit ;
24079: GO 24140
// for i in tmp do
24081: LD_ADDR_VAR 0 2
24085: PUSH
24086: LD_VAR 0 4
24090: PUSH
24091: FOR_IN
24092: IFFALSE 24138
// for j = 1 to 3 do
24094: LD_ADDR_VAR 0 3
24098: PUSH
24099: DOUBLE
24100: LD_INT 1
24102: DEC
24103: ST_TO_ADDR
24104: LD_INT 3
24106: PUSH
24107: FOR_TO
24108: IFFALSE 24134
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24110: LD_VAR 0 2
24114: PPUSH
24115: CALL_OW 274
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 99999
24127: PPUSH
24128: CALL_OW 277
24132: GO 24107
24134: POP
24135: POP
24136: GO 24091
24138: POP
24139: POP
// end ;
24140: LD_VAR 0 1
24144: RET
// export function hHackSetLevel10 ; var i , j ; begin
24145: LD_INT 0
24147: PPUSH
24148: PPUSH
24149: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24150: LD_ADDR_VAR 0 2
24154: PUSH
24155: LD_INT 21
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 69
24169: PUSH
24170: FOR_IN
24171: IFFALSE 24223
// if IsSelected ( i ) then
24173: LD_VAR 0 2
24177: PPUSH
24178: CALL_OW 306
24182: IFFALSE 24221
// begin for j := 1 to 4 do
24184: LD_ADDR_VAR 0 3
24188: PUSH
24189: DOUBLE
24190: LD_INT 1
24192: DEC
24193: ST_TO_ADDR
24194: LD_INT 4
24196: PUSH
24197: FOR_TO
24198: IFFALSE 24219
// SetSkill ( i , j , 10 ) ;
24200: LD_VAR 0 2
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: LD_INT 10
24212: PPUSH
24213: CALL_OW 237
24217: GO 24197
24219: POP
24220: POP
// end ;
24221: GO 24170
24223: POP
24224: POP
// end ;
24225: LD_VAR 0 1
24229: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
24234: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24235: LD_ADDR_VAR 0 2
24239: PUSH
24240: LD_INT 22
24242: PUSH
24243: LD_OWVAR 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 21
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: FOR_IN
24272: IFFALSE 24313
// begin for j := 1 to 4 do
24274: LD_ADDR_VAR 0 3
24278: PUSH
24279: DOUBLE
24280: LD_INT 1
24282: DEC
24283: ST_TO_ADDR
24284: LD_INT 4
24286: PUSH
24287: FOR_TO
24288: IFFALSE 24309
// SetSkill ( i , j , 10 ) ;
24290: LD_VAR 0 2
24294: PPUSH
24295: LD_VAR 0 3
24299: PPUSH
24300: LD_INT 10
24302: PPUSH
24303: CALL_OW 237
24307: GO 24287
24309: POP
24310: POP
// end ;
24311: GO 24271
24313: POP
24314: POP
// end ;
24315: LD_VAR 0 1
24319: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24320: LD_INT 0
24322: PPUSH
// uc_side := your_side ;
24323: LD_ADDR_OWVAR 20
24327: PUSH
24328: LD_OWVAR 2
24332: ST_TO_ADDR
// uc_nation := nation ;
24333: LD_ADDR_OWVAR 21
24337: PUSH
24338: LD_VAR 0 1
24342: ST_TO_ADDR
// InitHc ;
24343: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24347: LD_INT 0
24349: PPUSH
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24364: LD_VAR 0 4
24368: PPUSH
24369: LD_VAR 0 5
24373: PPUSH
24374: CALL_OW 428
24378: PUSH
24379: LD_INT 0
24381: EQUAL
24382: IFFALSE 24406
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24384: CALL_OW 44
24388: PPUSH
24389: LD_VAR 0 4
24393: PPUSH
24394: LD_VAR 0 5
24398: PPUSH
24399: LD_INT 1
24401: PPUSH
24402: CALL_OW 48
// end ;
24406: LD_VAR 0 6
24410: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24411: LD_INT 0
24413: PPUSH
24414: PPUSH
// uc_side := your_side ;
24415: LD_ADDR_OWVAR 20
24419: PUSH
24420: LD_OWVAR 2
24424: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24425: LD_VAR 0 1
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 3
24438: PUSH
24439: LD_INT 4
24441: PUSH
24442: LD_INT 5
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: IN
24452: IFFALSE 24464
// uc_nation := nation_american else
24454: LD_ADDR_OWVAR 21
24458: PUSH
24459: LD_INT 1
24461: ST_TO_ADDR
24462: GO 24507
// if chassis in [ 11 , 12 , 13 , 14 ] then
24464: LD_VAR 0 1
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: LD_INT 12
24474: PUSH
24475: LD_INT 13
24477: PUSH
24478: LD_INT 14
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: IN
24487: IFFALSE 24499
// uc_nation := nation_arabian else
24489: LD_ADDR_OWVAR 21
24493: PUSH
24494: LD_INT 2
24496: ST_TO_ADDR
24497: GO 24507
// uc_nation := nation_russian ;
24499: LD_ADDR_OWVAR 21
24503: PUSH
24504: LD_INT 3
24506: ST_TO_ADDR
// vc_chassis := chassis ;
24507: LD_ADDR_OWVAR 37
24511: PUSH
24512: LD_VAR 0 1
24516: ST_TO_ADDR
// vc_engine := engine ;
24517: LD_ADDR_OWVAR 39
24521: PUSH
24522: LD_VAR 0 2
24526: ST_TO_ADDR
// vc_control := control ;
24527: LD_ADDR_OWVAR 38
24531: PUSH
24532: LD_VAR 0 3
24536: ST_TO_ADDR
// vc_weapon := weapon ;
24537: LD_ADDR_OWVAR 40
24541: PUSH
24542: LD_VAR 0 4
24546: ST_TO_ADDR
// un := CreateVehicle ;
24547: LD_ADDR_VAR 0 8
24551: PUSH
24552: CALL_OW 45
24556: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24557: LD_VAR 0 8
24561: PPUSH
24562: LD_INT 0
24564: PPUSH
24565: LD_INT 5
24567: PPUSH
24568: CALL_OW 12
24572: PPUSH
24573: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24577: LD_VAR 0 8
24581: PPUSH
24582: LD_VAR 0 5
24586: PPUSH
24587: LD_VAR 0 6
24591: PPUSH
24592: LD_INT 1
24594: PPUSH
24595: CALL_OW 48
// end ;
24599: LD_VAR 0 7
24603: RET
// export hInvincible ; every 1 do
24604: GO 24606
24606: DISABLE
// hInvincible := [ ] ;
24607: LD_ADDR_EXP 102
24611: PUSH
24612: EMPTY
24613: ST_TO_ADDR
24614: END
// every 10 do var i ;
24615: GO 24617
24617: DISABLE
24618: LD_INT 0
24620: PPUSH
// begin enable ;
24621: ENABLE
// if not hInvincible then
24622: LD_EXP 102
24626: NOT
24627: IFFALSE 24631
// exit ;
24629: GO 24675
// for i in hInvincible do
24631: LD_ADDR_VAR 0 1
24635: PUSH
24636: LD_EXP 102
24640: PUSH
24641: FOR_IN
24642: IFFALSE 24673
// if GetLives ( i ) < 1000 then
24644: LD_VAR 0 1
24648: PPUSH
24649: CALL_OW 256
24653: PUSH
24654: LD_INT 1000
24656: LESS
24657: IFFALSE 24671
// SetLives ( i , 1000 ) ;
24659: LD_VAR 0 1
24663: PPUSH
24664: LD_INT 1000
24666: PPUSH
24667: CALL_OW 234
24671: GO 24641
24673: POP
24674: POP
// end ;
24675: PPOPN 1
24677: END
// export function hHackInvincible ; var i ; begin
24678: LD_INT 0
24680: PPUSH
24681: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24682: LD_ADDR_VAR 0 2
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: LD_INT 21
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: PUSH
24720: FOR_IN
24721: IFFALSE 24782
// if IsSelected ( i ) then
24723: LD_VAR 0 2
24727: PPUSH
24728: CALL_OW 306
24732: IFFALSE 24780
// begin if i in hInvincible then
24734: LD_VAR 0 2
24738: PUSH
24739: LD_EXP 102
24743: IN
24744: IFFALSE 24764
// hInvincible := hInvincible diff i else
24746: LD_ADDR_EXP 102
24750: PUSH
24751: LD_EXP 102
24755: PUSH
24756: LD_VAR 0 2
24760: DIFF
24761: ST_TO_ADDR
24762: GO 24780
// hInvincible := hInvincible union i ;
24764: LD_ADDR_EXP 102
24768: PUSH
24769: LD_EXP 102
24773: PUSH
24774: LD_VAR 0 2
24778: UNION
24779: ST_TO_ADDR
// end ;
24780: GO 24720
24782: POP
24783: POP
// end ;
24784: LD_VAR 0 1
24788: RET
// export function hHackInvisible ; var i , j ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24794: LD_ADDR_VAR 0 2
24798: PUSH
24799: LD_INT 21
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PPUSH
24809: CALL_OW 69
24813: PUSH
24814: FOR_IN
24815: IFFALSE 24839
// if IsSelected ( i ) then
24817: LD_VAR 0 2
24821: PPUSH
24822: CALL_OW 306
24826: IFFALSE 24837
// ComForceInvisible ( i ) ;
24828: LD_VAR 0 2
24832: PPUSH
24833: CALL_OW 496
24837: GO 24814
24839: POP
24840: POP
// end ;
24841: LD_VAR 0 1
24845: RET
// export function hHackChangeYourSide ; begin
24846: LD_INT 0
24848: PPUSH
// if your_side = 8 then
24849: LD_OWVAR 2
24853: PUSH
24854: LD_INT 8
24856: EQUAL
24857: IFFALSE 24869
// your_side := 0 else
24859: LD_ADDR_OWVAR 2
24863: PUSH
24864: LD_INT 0
24866: ST_TO_ADDR
24867: GO 24883
// your_side := your_side + 1 ;
24869: LD_ADDR_OWVAR 2
24873: PUSH
24874: LD_OWVAR 2
24878: PUSH
24879: LD_INT 1
24881: PLUS
24882: ST_TO_ADDR
// end ;
24883: LD_VAR 0 1
24887: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24888: LD_INT 0
24890: PPUSH
24891: PPUSH
24892: PPUSH
// for i in all_units do
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_OWVAR 3
24902: PUSH
24903: FOR_IN
24904: IFFALSE 24982
// if IsSelected ( i ) then
24906: LD_VAR 0 2
24910: PPUSH
24911: CALL_OW 306
24915: IFFALSE 24980
// begin j := GetSide ( i ) ;
24917: LD_ADDR_VAR 0 3
24921: PUSH
24922: LD_VAR 0 2
24926: PPUSH
24927: CALL_OW 255
24931: ST_TO_ADDR
// if j = 8 then
24932: LD_VAR 0 3
24936: PUSH
24937: LD_INT 8
24939: EQUAL
24940: IFFALSE 24952
// j := 0 else
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 0
24949: ST_TO_ADDR
24950: GO 24966
// j := j + 1 ;
24952: LD_ADDR_VAR 0 3
24956: PUSH
24957: LD_VAR 0 3
24961: PUSH
24962: LD_INT 1
24964: PLUS
24965: ST_TO_ADDR
// SetSide ( i , j ) ;
24966: LD_VAR 0 2
24970: PPUSH
24971: LD_VAR 0 3
24975: PPUSH
24976: CALL_OW 235
// end ;
24980: GO 24903
24982: POP
24983: POP
// end ;
24984: LD_VAR 0 1
24988: RET
// export function hHackFog ; begin
24989: LD_INT 0
24991: PPUSH
// FogOff ( true ) ;
24992: LD_INT 1
24994: PPUSH
24995: CALL_OW 344
// end ;
24999: LD_VAR 0 1
25003: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25004: LD_INT 0
25006: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 2
25016: PPUSH
25017: LD_VAR 0 3
25021: PPUSH
25022: LD_INT 1
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 483
// CenterOnXY ( x , y ) ;
25032: LD_VAR 0 2
25036: PPUSH
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 84
// end ; end_of_file
25046: LD_VAR 0 4
25050: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
25055: PPUSH
25056: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 264
25066: PUSH
25067: LD_EXP 30
25071: EQUAL
25072: IFFALSE 25144
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25074: LD_INT 68
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 255
25086: PPUSH
25087: CALL_OW 321
25091: PUSH
25092: LD_INT 2
25094: EQUAL
25095: IFFALSE 25107
// eff := 70 else
25097: LD_ADDR_VAR 0 4
25101: PUSH
25102: LD_INT 70
25104: ST_TO_ADDR
25105: GO 25115
// eff := 30 ;
25107: LD_ADDR_VAR 0 4
25111: PUSH
25112: LD_INT 30
25114: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 250
25124: PPUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 251
25134: PPUSH
25135: LD_VAR 0 4
25139: PPUSH
25140: CALL_OW 495
// end ; end ;
25144: LD_VAR 0 2
25148: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25149: LD_INT 0
25151: PPUSH
// end ;
25152: LD_VAR 0 4
25156: RET
// export function SOS_Command ( cmd ) ; begin
25157: LD_INT 0
25159: PPUSH
// end ;
25160: LD_VAR 0 2
25164: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25165: LD_INT 0
25167: PPUSH
// end ;
25168: LD_VAR 0 6
25172: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25173: LD_INT 0
25175: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25176: LD_VAR 0 1
25180: PUSH
25181: LD_INT 250
25183: EQUAL
25184: PUSH
25185: LD_VAR 0 2
25189: PPUSH
25190: CALL_OW 264
25194: PUSH
25195: LD_EXP 33
25199: EQUAL
25200: AND
25201: IFFALSE 25222
// MinerPlaceMine ( unit , x , y ) ;
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 4
25212: PPUSH
25213: LD_VAR 0 5
25217: PPUSH
25218: CALL 27571 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25222: LD_VAR 0 1
25226: PUSH
25227: LD_INT 251
25229: EQUAL
25230: PUSH
25231: LD_VAR 0 2
25235: PPUSH
25236: CALL_OW 264
25240: PUSH
25241: LD_EXP 33
25245: EQUAL
25246: AND
25247: IFFALSE 25268
// MinerDetonateMine ( unit , x , y ) ;
25249: LD_VAR 0 2
25253: PPUSH
25254: LD_VAR 0 4
25258: PPUSH
25259: LD_VAR 0 5
25263: PPUSH
25264: CALL 27848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25268: LD_VAR 0 1
25272: PUSH
25273: LD_INT 252
25275: EQUAL
25276: PUSH
25277: LD_VAR 0 2
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_EXP 33
25291: EQUAL
25292: AND
25293: IFFALSE 25314
// MinerCreateMinefield ( unit , x , y ) ;
25295: LD_VAR 0 2
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: LD_VAR 0 5
25309: PPUSH
25310: CALL 28265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25314: LD_VAR 0 1
25318: PUSH
25319: LD_INT 253
25321: EQUAL
25322: PUSH
25323: LD_VAR 0 2
25327: PPUSH
25328: CALL_OW 257
25332: PUSH
25333: LD_INT 5
25335: EQUAL
25336: AND
25337: IFFALSE 25358
// ComBinocular ( unit , x , y ) ;
25339: LD_VAR 0 2
25343: PPUSH
25344: LD_VAR 0 4
25348: PPUSH
25349: LD_VAR 0 5
25353: PPUSH
25354: CALL 28636 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25358: LD_VAR 0 1
25362: PUSH
25363: LD_INT 254
25365: EQUAL
25366: PUSH
25367: LD_VAR 0 2
25371: PPUSH
25372: CALL_OW 264
25376: PUSH
25377: LD_EXP 28
25381: EQUAL
25382: AND
25383: PUSH
25384: LD_VAR 0 3
25388: PPUSH
25389: CALL_OW 263
25393: PUSH
25394: LD_INT 3
25396: EQUAL
25397: AND
25398: IFFALSE 25414
// HackDestroyVehicle ( unit , selectedUnit ) ;
25400: LD_VAR 0 2
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: CALL 26931 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25414: LD_VAR 0 1
25418: PUSH
25419: LD_INT 255
25421: EQUAL
25422: PUSH
25423: LD_VAR 0 2
25427: PPUSH
25428: CALL_OW 264
25432: PUSH
25433: LD_INT 14
25435: PUSH
25436: LD_INT 53
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: IN
25443: AND
25444: PUSH
25445: LD_VAR 0 4
25449: PPUSH
25450: LD_VAR 0 5
25454: PPUSH
25455: CALL_OW 488
25459: AND
25460: IFFALSE 25484
// CutTreeXYR ( unit , x , y , 12 ) ;
25462: LD_VAR 0 2
25466: PPUSH
25467: LD_VAR 0 4
25471: PPUSH
25472: LD_VAR 0 5
25476: PPUSH
25477: LD_INT 12
25479: PPUSH
25480: CALL 25497 0 4
// end ;
25484: LD_VAR 0 6
25488: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25489: LD_INT 0
25491: PPUSH
// end ;
25492: LD_VAR 0 4
25496: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25497: LD_INT 0
25499: PPUSH
25500: PPUSH
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
25507: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25508: LD_VAR 0 1
25512: NOT
25513: PUSH
25514: LD_VAR 0 2
25518: PPUSH
25519: LD_VAR 0 3
25523: PPUSH
25524: CALL_OW 488
25528: NOT
25529: OR
25530: PUSH
25531: LD_VAR 0 4
25535: NOT
25536: OR
25537: IFFALSE 25541
// exit ;
25539: GO 25881
// list := [ ] ;
25541: LD_ADDR_VAR 0 13
25545: PUSH
25546: EMPTY
25547: ST_TO_ADDR
// if x - r < 0 then
25548: LD_VAR 0 2
25552: PUSH
25553: LD_VAR 0 4
25557: MINUS
25558: PUSH
25559: LD_INT 0
25561: LESS
25562: IFFALSE 25574
// min_x := 0 else
25564: LD_ADDR_VAR 0 7
25568: PUSH
25569: LD_INT 0
25571: ST_TO_ADDR
25572: GO 25590
// min_x := x - r ;
25574: LD_ADDR_VAR 0 7
25578: PUSH
25579: LD_VAR 0 2
25583: PUSH
25584: LD_VAR 0 4
25588: MINUS
25589: ST_TO_ADDR
// if y - r < 0 then
25590: LD_VAR 0 3
25594: PUSH
25595: LD_VAR 0 4
25599: MINUS
25600: PUSH
25601: LD_INT 0
25603: LESS
25604: IFFALSE 25616
// min_y := 0 else
25606: LD_ADDR_VAR 0 8
25610: PUSH
25611: LD_INT 0
25613: ST_TO_ADDR
25614: GO 25632
// min_y := y - r ;
25616: LD_ADDR_VAR 0 8
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_VAR 0 4
25630: MINUS
25631: ST_TO_ADDR
// max_x := x + r ;
25632: LD_ADDR_VAR 0 9
25636: PUSH
25637: LD_VAR 0 2
25641: PUSH
25642: LD_VAR 0 4
25646: PLUS
25647: ST_TO_ADDR
// max_y := y + r ;
25648: LD_ADDR_VAR 0 10
25652: PUSH
25653: LD_VAR 0 3
25657: PUSH
25658: LD_VAR 0 4
25662: PLUS
25663: ST_TO_ADDR
// for _x = min_x to max_x do
25664: LD_ADDR_VAR 0 11
25668: PUSH
25669: DOUBLE
25670: LD_VAR 0 7
25674: DEC
25675: ST_TO_ADDR
25676: LD_VAR 0 9
25680: PUSH
25681: FOR_TO
25682: IFFALSE 25799
// for _y = min_y to max_y do
25684: LD_ADDR_VAR 0 12
25688: PUSH
25689: DOUBLE
25690: LD_VAR 0 8
25694: DEC
25695: ST_TO_ADDR
25696: LD_VAR 0 10
25700: PUSH
25701: FOR_TO
25702: IFFALSE 25795
// begin if not ValidHex ( _x , _y ) then
25704: LD_VAR 0 11
25708: PPUSH
25709: LD_VAR 0 12
25713: PPUSH
25714: CALL_OW 488
25718: NOT
25719: IFFALSE 25723
// continue ;
25721: GO 25701
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25723: LD_VAR 0 11
25727: PPUSH
25728: LD_VAR 0 12
25732: PPUSH
25733: CALL_OW 351
25737: PUSH
25738: LD_VAR 0 11
25742: PPUSH
25743: LD_VAR 0 12
25747: PPUSH
25748: CALL_OW 554
25752: AND
25753: IFFALSE 25793
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25755: LD_ADDR_VAR 0 13
25759: PUSH
25760: LD_VAR 0 13
25764: PPUSH
25765: LD_VAR 0 13
25769: PUSH
25770: LD_INT 1
25772: PLUS
25773: PPUSH
25774: LD_VAR 0 11
25778: PUSH
25779: LD_VAR 0 12
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 2
25792: ST_TO_ADDR
// end ;
25793: GO 25701
25795: POP
25796: POP
25797: GO 25681
25799: POP
25800: POP
// if not list then
25801: LD_VAR 0 13
25805: NOT
25806: IFFALSE 25810
// exit ;
25808: GO 25881
// for i in list do
25810: LD_ADDR_VAR 0 6
25814: PUSH
25815: LD_VAR 0 13
25819: PUSH
25820: FOR_IN
25821: IFFALSE 25879
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_STRING M
25830: PUSH
25831: LD_VAR 0 6
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PUSH
25840: LD_VAR 0 6
25844: PUSH
25845: LD_INT 2
25847: ARRAY
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: PUSH
25870: EMPTY
25871: LIST
25872: PPUSH
25873: CALL_OW 447
25877: GO 25820
25879: POP
25880: POP
// end ;
25881: LD_VAR 0 5
25885: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25886: LD_EXP 105
25890: NOT
25891: IFFALSE 25941
25893: GO 25895
25895: DISABLE
// begin initHack := true ;
25896: LD_ADDR_EXP 105
25900: PUSH
25901: LD_INT 1
25903: ST_TO_ADDR
// hackTanks := [ ] ;
25904: LD_ADDR_EXP 106
25908: PUSH
25909: EMPTY
25910: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25911: LD_ADDR_EXP 107
25915: PUSH
25916: EMPTY
25917: ST_TO_ADDR
// hackLimit := 3 ;
25918: LD_ADDR_EXP 108
25922: PUSH
25923: LD_INT 3
25925: ST_TO_ADDR
// hackDist := 12 ;
25926: LD_ADDR_EXP 109
25930: PUSH
25931: LD_INT 12
25933: ST_TO_ADDR
// hackCounter := [ ] ;
25934: LD_ADDR_EXP 110
25938: PUSH
25939: EMPTY
25940: ST_TO_ADDR
// end ;
25941: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25942: LD_EXP 105
25946: PUSH
25947: LD_INT 34
25949: PUSH
25950: LD_EXP 28
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: AND
25964: IFFALSE 26219
25966: GO 25968
25968: DISABLE
25969: LD_INT 0
25971: PPUSH
25972: PPUSH
// begin enable ;
25973: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25974: LD_ADDR_VAR 0 1
25978: PUSH
25979: LD_INT 34
25981: PUSH
25982: LD_EXP 28
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: PUSH
25996: FOR_IN
25997: IFFALSE 26217
// begin if not i in hackTanks then
25999: LD_VAR 0 1
26003: PUSH
26004: LD_EXP 106
26008: IN
26009: NOT
26010: IFFALSE 26093
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26012: LD_ADDR_EXP 106
26016: PUSH
26017: LD_EXP 106
26021: PPUSH
26022: LD_EXP 106
26026: PUSH
26027: LD_INT 1
26029: PLUS
26030: PPUSH
26031: LD_VAR 0 1
26035: PPUSH
26036: CALL_OW 1
26040: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26041: LD_ADDR_EXP 107
26045: PUSH
26046: LD_EXP 107
26050: PPUSH
26051: LD_EXP 107
26055: PUSH
26056: LD_INT 1
26058: PLUS
26059: PPUSH
26060: EMPTY
26061: PPUSH
26062: CALL_OW 1
26066: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26067: LD_ADDR_EXP 110
26071: PUSH
26072: LD_EXP 110
26076: PPUSH
26077: LD_EXP 110
26081: PUSH
26082: LD_INT 1
26084: PLUS
26085: PPUSH
26086: EMPTY
26087: PPUSH
26088: CALL_OW 1
26092: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL_OW 302
26102: NOT
26103: IFFALSE 26116
// begin HackUnlinkAll ( i ) ;
26105: LD_VAR 0 1
26109: PPUSH
26110: CALL 26222 0 1
// continue ;
26114: GO 25996
// end ; HackCheckCapturedStatus ( i ) ;
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL 26665 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26125: LD_ADDR_VAR 0 2
26129: PUSH
26130: LD_INT 81
26132: PUSH
26133: LD_VAR 0 1
26137: PPUSH
26138: CALL_OW 255
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 33
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 91
26159: PUSH
26160: LD_VAR 0 1
26164: PUSH
26165: LD_EXP 109
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 50
26177: PUSH
26178: EMPTY
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 2
26196: NOT
26197: IFFALSE 26201
// continue ;
26199: GO 25996
// HackLink ( i , tmp ) ;
26201: LD_VAR 0 1
26205: PPUSH
26206: LD_VAR 0 2
26210: PPUSH
26211: CALL 26358 0 2
// end ;
26215: GO 25996
26217: POP
26218: POP
// end ;
26219: PPOPN 2
26221: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26222: LD_INT 0
26224: PPUSH
26225: PPUSH
26226: PPUSH
// if not hack in hackTanks then
26227: LD_VAR 0 1
26231: PUSH
26232: LD_EXP 106
26236: IN
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26353
// index := GetElementIndex ( hackTanks , hack ) ;
26242: LD_ADDR_VAR 0 4
26246: PUSH
26247: LD_EXP 106
26251: PPUSH
26252: LD_VAR 0 1
26256: PPUSH
26257: CALL 33827 0 2
26261: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26262: LD_EXP 107
26266: PUSH
26267: LD_VAR 0 4
26271: ARRAY
26272: IFFALSE 26353
// begin for i in hackTanksCaptured [ index ] do
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_EXP 107
26283: PUSH
26284: LD_VAR 0 4
26288: ARRAY
26289: PUSH
26290: FOR_IN
26291: IFFALSE 26317
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26293: LD_VAR 0 3
26297: PUSH
26298: LD_INT 1
26300: ARRAY
26301: PPUSH
26302: LD_VAR 0 3
26306: PUSH
26307: LD_INT 2
26309: ARRAY
26310: PPUSH
26311: CALL_OW 235
26315: GO 26290
26317: POP
26318: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26319: LD_ADDR_EXP 107
26323: PUSH
26324: LD_EXP 107
26328: PPUSH
26329: LD_VAR 0 4
26333: PPUSH
26334: EMPTY
26335: PPUSH
26336: CALL_OW 1
26340: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26341: LD_VAR 0 1
26345: PPUSH
26346: LD_INT 0
26348: PPUSH
26349: CALL_OW 505
// end ; end ;
26353: LD_VAR 0 2
26357: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
26362: PPUSH
// if not hack in hackTanks or not vehicles then
26363: LD_VAR 0 1
26367: PUSH
26368: LD_EXP 106
26372: IN
26373: NOT
26374: PUSH
26375: LD_VAR 0 2
26379: NOT
26380: OR
26381: IFFALSE 26385
// exit ;
26383: GO 26660
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26385: LD_ADDR_VAR 0 2
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: LD_INT 1
26405: PPUSH
26406: CALL 34477 0 4
26410: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_EXP 106
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL 33827 0 2
26430: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26431: LD_EXP 107
26435: PUSH
26436: LD_VAR 0 5
26440: ARRAY
26441: PUSH
26442: LD_EXP 108
26446: LESS
26447: IFFALSE 26636
// begin for i := 1 to vehicles do
26449: LD_ADDR_VAR 0 4
26453: PUSH
26454: DOUBLE
26455: LD_INT 1
26457: DEC
26458: ST_TO_ADDR
26459: LD_VAR 0 2
26463: PUSH
26464: FOR_TO
26465: IFFALSE 26634
// begin if hackTanksCaptured [ index ] = hackLimit then
26467: LD_EXP 107
26471: PUSH
26472: LD_VAR 0 5
26476: ARRAY
26477: PUSH
26478: LD_EXP 108
26482: EQUAL
26483: IFFALSE 26487
// break ;
26485: GO 26634
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26487: LD_ADDR_EXP 110
26491: PUSH
26492: LD_EXP 110
26496: PPUSH
26497: LD_VAR 0 5
26501: PPUSH
26502: LD_EXP 110
26506: PUSH
26507: LD_VAR 0 5
26511: ARRAY
26512: PUSH
26513: LD_INT 1
26515: PLUS
26516: PPUSH
26517: CALL_OW 1
26521: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26522: LD_ADDR_EXP 107
26526: PUSH
26527: LD_EXP 107
26531: PPUSH
26532: LD_VAR 0 5
26536: PUSH
26537: LD_EXP 107
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: PLUS
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PPUSH
26556: LD_VAR 0 2
26560: PUSH
26561: LD_VAR 0 4
26565: ARRAY
26566: PUSH
26567: LD_VAR 0 2
26571: PUSH
26572: LD_VAR 0 4
26576: ARRAY
26577: PPUSH
26578: CALL_OW 255
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL 34042 0 3
26591: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26592: LD_VAR 0 2
26596: PUSH
26597: LD_VAR 0 4
26601: ARRAY
26602: PPUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 255
26612: PPUSH
26613: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26617: LD_VAR 0 2
26621: PUSH
26622: LD_VAR 0 4
26626: ARRAY
26627: PPUSH
26628: CALL_OW 141
// end ;
26632: GO 26464
26634: POP
26635: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26636: LD_VAR 0 1
26640: PPUSH
26641: LD_EXP 107
26645: PUSH
26646: LD_VAR 0 5
26650: ARRAY
26651: PUSH
26652: LD_INT 0
26654: PLUS
26655: PPUSH
26656: CALL_OW 505
// end ;
26660: LD_VAR 0 3
26664: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26665: LD_INT 0
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
// if not hack in hackTanks then
26671: LD_VAR 0 1
26675: PUSH
26676: LD_EXP 106
26680: IN
26681: NOT
26682: IFFALSE 26686
// exit ;
26684: GO 26926
// index := GetElementIndex ( hackTanks , hack ) ;
26686: LD_ADDR_VAR 0 4
26690: PUSH
26691: LD_EXP 106
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL 33827 0 2
26705: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26706: LD_ADDR_VAR 0 3
26710: PUSH
26711: DOUBLE
26712: LD_EXP 107
26716: PUSH
26717: LD_VAR 0 4
26721: ARRAY
26722: INC
26723: ST_TO_ADDR
26724: LD_INT 1
26726: PUSH
26727: FOR_DOWNTO
26728: IFFALSE 26900
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26730: LD_ADDR_VAR 0 5
26734: PUSH
26735: LD_EXP 107
26739: PUSH
26740: LD_VAR 0 4
26744: ARRAY
26745: PUSH
26746: LD_VAR 0 3
26750: ARRAY
26751: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26752: LD_VAR 0 5
26756: PUSH
26757: LD_INT 1
26759: ARRAY
26760: PPUSH
26761: CALL_OW 302
26765: NOT
26766: PUSH
26767: LD_VAR 0 5
26771: PUSH
26772: LD_INT 1
26774: ARRAY
26775: PPUSH
26776: CALL_OW 255
26780: PUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 255
26790: NONEQUAL
26791: OR
26792: IFFALSE 26898
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26794: LD_VAR 0 5
26798: PUSH
26799: LD_INT 1
26801: ARRAY
26802: PPUSH
26803: CALL_OW 305
26807: PUSH
26808: LD_VAR 0 5
26812: PUSH
26813: LD_INT 1
26815: ARRAY
26816: PPUSH
26817: CALL_OW 255
26821: PUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 255
26831: EQUAL
26832: AND
26833: IFFALSE 26857
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26835: LD_VAR 0 5
26839: PUSH
26840: LD_INT 1
26842: ARRAY
26843: PPUSH
26844: LD_VAR 0 5
26848: PUSH
26849: LD_INT 2
26851: ARRAY
26852: PPUSH
26853: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26857: LD_ADDR_EXP 107
26861: PUSH
26862: LD_EXP 107
26866: PPUSH
26867: LD_VAR 0 4
26871: PPUSH
26872: LD_EXP 107
26876: PUSH
26877: LD_VAR 0 4
26881: ARRAY
26882: PPUSH
26883: LD_VAR 0 3
26887: PPUSH
26888: CALL_OW 3
26892: PPUSH
26893: CALL_OW 1
26897: ST_TO_ADDR
// end ; end ;
26898: GO 26727
26900: POP
26901: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_EXP 107
26911: PUSH
26912: LD_VAR 0 4
26916: ARRAY
26917: PUSH
26918: LD_INT 0
26920: PLUS
26921: PPUSH
26922: CALL_OW 505
// end ;
26926: LD_VAR 0 2
26930: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
26935: PPUSH
26936: PPUSH
// if not hack in hackTanks then
26937: LD_VAR 0 1
26941: PUSH
26942: LD_EXP 106
26946: IN
26947: NOT
26948: IFFALSE 26952
// exit ;
26950: GO 27037
// index := GetElementIndex ( hackTanks , hack ) ;
26952: LD_ADDR_VAR 0 5
26956: PUSH
26957: LD_EXP 106
26961: PPUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL 33827 0 2
26971: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26972: LD_ADDR_VAR 0 4
26976: PUSH
26977: DOUBLE
26978: LD_INT 1
26980: DEC
26981: ST_TO_ADDR
26982: LD_EXP 107
26986: PUSH
26987: LD_VAR 0 5
26991: ARRAY
26992: PUSH
26993: FOR_TO
26994: IFFALSE 27035
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26996: LD_EXP 107
27000: PUSH
27001: LD_VAR 0 5
27005: ARRAY
27006: PUSH
27007: LD_VAR 0 4
27011: ARRAY
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: PUSH
27017: LD_VAR 0 2
27021: EQUAL
27022: IFFALSE 27033
// KillUnit ( vehicle ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 66
27033: GO 26993
27035: POP
27036: POP
// end ;
27037: LD_VAR 0 3
27041: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27042: LD_EXP 111
27046: NOT
27047: IFFALSE 27082
27049: GO 27051
27051: DISABLE
// begin initMiner := true ;
27052: LD_ADDR_EXP 111
27056: PUSH
27057: LD_INT 1
27059: ST_TO_ADDR
// minersList := [ ] ;
27060: LD_ADDR_EXP 112
27064: PUSH
27065: EMPTY
27066: ST_TO_ADDR
// minerMinesList := [ ] ;
27067: LD_ADDR_EXP 113
27071: PUSH
27072: EMPTY
27073: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27074: LD_ADDR_EXP 114
27078: PUSH
27079: LD_INT 5
27081: ST_TO_ADDR
// end ;
27082: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27083: LD_EXP 111
27087: PUSH
27088: LD_INT 34
27090: PUSH
27091: LD_EXP 33
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PPUSH
27100: CALL_OW 69
27104: AND
27105: IFFALSE 27568
27107: GO 27109
27109: DISABLE
27110: LD_INT 0
27112: PPUSH
27113: PPUSH
27114: PPUSH
27115: PPUSH
// begin enable ;
27116: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27117: LD_ADDR_VAR 0 1
27121: PUSH
27122: LD_INT 34
27124: PUSH
27125: LD_EXP 33
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PPUSH
27134: CALL_OW 69
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27212
// begin if not i in minersList then
27142: LD_VAR 0 1
27146: PUSH
27147: LD_EXP 112
27151: IN
27152: NOT
27153: IFFALSE 27210
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27155: LD_ADDR_EXP 112
27159: PUSH
27160: LD_EXP 112
27164: PPUSH
27165: LD_EXP 112
27169: PUSH
27170: LD_INT 1
27172: PLUS
27173: PPUSH
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 1
27183: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27184: LD_ADDR_EXP 113
27188: PUSH
27189: LD_EXP 113
27193: PPUSH
27194: LD_EXP 113
27198: PUSH
27199: LD_INT 1
27201: PLUS
27202: PPUSH
27203: EMPTY
27204: PPUSH
27205: CALL_OW 1
27209: ST_TO_ADDR
// end end ;
27210: GO 27139
27212: POP
27213: POP
// for i := minerMinesList downto 1 do
27214: LD_ADDR_VAR 0 1
27218: PUSH
27219: DOUBLE
27220: LD_EXP 113
27224: INC
27225: ST_TO_ADDR
27226: LD_INT 1
27228: PUSH
27229: FOR_DOWNTO
27230: IFFALSE 27566
// begin if IsLive ( minersList [ i ] ) then
27232: LD_EXP 112
27236: PUSH
27237: LD_VAR 0 1
27241: ARRAY
27242: PPUSH
27243: CALL_OW 300
27247: IFFALSE 27275
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27249: LD_EXP 112
27253: PUSH
27254: LD_VAR 0 1
27258: ARRAY
27259: PPUSH
27260: LD_EXP 113
27264: PUSH
27265: LD_VAR 0 1
27269: ARRAY
27270: PPUSH
27271: CALL_OW 505
// if not minerMinesList [ i ] then
27275: LD_EXP 113
27279: PUSH
27280: LD_VAR 0 1
27284: ARRAY
27285: NOT
27286: IFFALSE 27290
// continue ;
27288: GO 27229
// for j := minerMinesList [ i ] downto 1 do
27290: LD_ADDR_VAR 0 2
27294: PUSH
27295: DOUBLE
27296: LD_EXP 113
27300: PUSH
27301: LD_VAR 0 1
27305: ARRAY
27306: INC
27307: ST_TO_ADDR
27308: LD_INT 1
27310: PUSH
27311: FOR_DOWNTO
27312: IFFALSE 27562
// begin side := GetSide ( minersList [ i ] ) ;
27314: LD_ADDR_VAR 0 3
27318: PUSH
27319: LD_EXP 112
27323: PUSH
27324: LD_VAR 0 1
27328: ARRAY
27329: PPUSH
27330: CALL_OW 255
27334: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27335: LD_ADDR_VAR 0 4
27339: PUSH
27340: LD_EXP 113
27344: PUSH
27345: LD_VAR 0 1
27349: ARRAY
27350: PUSH
27351: LD_VAR 0 2
27355: ARRAY
27356: PUSH
27357: LD_INT 1
27359: ARRAY
27360: PPUSH
27361: LD_EXP 113
27365: PUSH
27366: LD_VAR 0 1
27370: ARRAY
27371: PUSH
27372: LD_VAR 0 2
27376: ARRAY
27377: PUSH
27378: LD_INT 2
27380: ARRAY
27381: PPUSH
27382: CALL_OW 428
27386: ST_TO_ADDR
// if not tmp then
27387: LD_VAR 0 4
27391: NOT
27392: IFFALSE 27396
// continue ;
27394: GO 27311
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27396: LD_VAR 0 4
27400: PUSH
27401: LD_INT 81
27403: PUSH
27404: LD_VAR 0 3
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PPUSH
27413: CALL_OW 69
27417: IN
27418: PUSH
27419: LD_EXP 113
27423: PUSH
27424: LD_VAR 0 1
27428: ARRAY
27429: PUSH
27430: LD_VAR 0 2
27434: ARRAY
27435: PUSH
27436: LD_INT 1
27438: ARRAY
27439: PPUSH
27440: LD_EXP 113
27444: PUSH
27445: LD_VAR 0 1
27449: ARRAY
27450: PUSH
27451: LD_VAR 0 2
27455: ARRAY
27456: PUSH
27457: LD_INT 2
27459: ARRAY
27460: PPUSH
27461: CALL_OW 458
27465: AND
27466: IFFALSE 27560
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27468: LD_EXP 113
27472: PUSH
27473: LD_VAR 0 1
27477: ARRAY
27478: PUSH
27479: LD_VAR 0 2
27483: ARRAY
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: PPUSH
27489: LD_EXP 113
27493: PUSH
27494: LD_VAR 0 1
27498: ARRAY
27499: PUSH
27500: LD_VAR 0 2
27504: ARRAY
27505: PUSH
27506: LD_INT 2
27508: ARRAY
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27519: LD_ADDR_EXP 113
27523: PUSH
27524: LD_EXP 113
27528: PPUSH
27529: LD_VAR 0 1
27533: PPUSH
27534: LD_EXP 113
27538: PUSH
27539: LD_VAR 0 1
27543: ARRAY
27544: PPUSH
27545: LD_VAR 0 2
27549: PPUSH
27550: CALL_OW 3
27554: PPUSH
27555: CALL_OW 1
27559: ST_TO_ADDR
// end ; end ;
27560: GO 27311
27562: POP
27563: POP
// end ;
27564: GO 27229
27566: POP
27567: POP
// end ;
27568: PPOPN 4
27570: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27571: LD_INT 0
27573: PPUSH
27574: PPUSH
// result := false ;
27575: LD_ADDR_VAR 0 4
27579: PUSH
27580: LD_INT 0
27582: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 264
27592: PUSH
27593: LD_EXP 33
27597: EQUAL
27598: NOT
27599: IFFALSE 27603
// exit ;
27601: GO 27843
// index := GetElementIndex ( minersList , unit ) ;
27603: LD_ADDR_VAR 0 5
27607: PUSH
27608: LD_EXP 112
27612: PPUSH
27613: LD_VAR 0 1
27617: PPUSH
27618: CALL 33827 0 2
27622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27623: LD_EXP 113
27627: PUSH
27628: LD_VAR 0 5
27632: ARRAY
27633: PUSH
27634: LD_EXP 114
27638: GREATEREQUAL
27639: IFFALSE 27643
// exit ;
27641: GO 27843
// ComMoveXY ( unit , x , y ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_VAR 0 2
27652: PPUSH
27653: LD_VAR 0 3
27657: PPUSH
27658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27662: LD_INT 35
27664: PPUSH
27665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27669: LD_VAR 0 1
27673: PPUSH
27674: LD_VAR 0 2
27678: PPUSH
27679: LD_VAR 0 3
27683: PPUSH
27684: CALL 64599 0 3
27688: NOT
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 314
27699: AND
27700: IFFALSE 27704
// exit ;
27702: GO 27843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27704: LD_VAR 0 2
27708: PPUSH
27709: LD_VAR 0 3
27713: PPUSH
27714: CALL_OW 428
27718: PUSH
27719: LD_VAR 0 1
27723: EQUAL
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 314
27734: NOT
27735: AND
27736: IFFALSE 27662
// PlaySoundXY ( x , y , PlantMine ) ;
27738: LD_VAR 0 2
27742: PPUSH
27743: LD_VAR 0 3
27747: PPUSH
27748: LD_STRING PlantMine
27750: PPUSH
27751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27755: LD_VAR 0 2
27759: PPUSH
27760: LD_VAR 0 3
27764: PPUSH
27765: LD_VAR 0 1
27769: PPUSH
27770: CALL_OW 255
27774: PPUSH
27775: LD_INT 0
27777: PPUSH
27778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27782: LD_ADDR_EXP 113
27786: PUSH
27787: LD_EXP 113
27791: PPUSH
27792: LD_VAR 0 5
27796: PUSH
27797: LD_EXP 113
27801: PUSH
27802: LD_VAR 0 5
27806: ARRAY
27807: PUSH
27808: LD_INT 1
27810: PLUS
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PPUSH
27816: LD_VAR 0 2
27820: PUSH
27821: LD_VAR 0 3
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL 34042 0 3
27834: ST_TO_ADDR
// result := true ;
27835: LD_ADDR_VAR 0 4
27839: PUSH
27840: LD_INT 1
27842: ST_TO_ADDR
// end ;
27843: LD_VAR 0 4
27847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27848: LD_INT 0
27850: PPUSH
27851: PPUSH
27852: PPUSH
// if not unit in minersList then
27853: LD_VAR 0 1
27857: PUSH
27858: LD_EXP 112
27862: IN
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 28260
// index := GetElementIndex ( minersList , unit ) ;
27868: LD_ADDR_VAR 0 6
27872: PUSH
27873: LD_EXP 112
27877: PPUSH
27878: LD_VAR 0 1
27882: PPUSH
27883: CALL 33827 0 2
27887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27888: LD_ADDR_VAR 0 5
27892: PUSH
27893: DOUBLE
27894: LD_EXP 113
27898: PUSH
27899: LD_VAR 0 6
27903: ARRAY
27904: INC
27905: ST_TO_ADDR
27906: LD_INT 1
27908: PUSH
27909: FOR_DOWNTO
27910: IFFALSE 28071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27912: LD_EXP 113
27916: PUSH
27917: LD_VAR 0 6
27921: ARRAY
27922: PUSH
27923: LD_VAR 0 5
27927: ARRAY
27928: PUSH
27929: LD_INT 1
27931: ARRAY
27932: PUSH
27933: LD_VAR 0 2
27937: EQUAL
27938: PUSH
27939: LD_EXP 113
27943: PUSH
27944: LD_VAR 0 6
27948: ARRAY
27949: PUSH
27950: LD_VAR 0 5
27954: ARRAY
27955: PUSH
27956: LD_INT 2
27958: ARRAY
27959: PUSH
27960: LD_VAR 0 3
27964: EQUAL
27965: AND
27966: IFFALSE 28069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27968: LD_EXP 113
27972: PUSH
27973: LD_VAR 0 6
27977: ARRAY
27978: PUSH
27979: LD_VAR 0 5
27983: ARRAY
27984: PUSH
27985: LD_INT 1
27987: ARRAY
27988: PPUSH
27989: LD_EXP 113
27993: PUSH
27994: LD_VAR 0 6
27998: ARRAY
27999: PUSH
28000: LD_VAR 0 5
28004: ARRAY
28005: PUSH
28006: LD_INT 2
28008: ARRAY
28009: PPUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: CALL_OW 255
28019: PPUSH
28020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28024: LD_ADDR_EXP 113
28028: PUSH
28029: LD_EXP 113
28033: PPUSH
28034: LD_VAR 0 6
28038: PPUSH
28039: LD_EXP 113
28043: PUSH
28044: LD_VAR 0 6
28048: ARRAY
28049: PPUSH
28050: LD_VAR 0 5
28054: PPUSH
28055: CALL_OW 3
28059: PPUSH
28060: CALL_OW 1
28064: ST_TO_ADDR
// exit ;
28065: POP
28066: POP
28067: GO 28260
// end ; end ;
28069: GO 27909
28071: POP
28072: POP
// for i := minerMinesList [ index ] downto 1 do
28073: LD_ADDR_VAR 0 5
28077: PUSH
28078: DOUBLE
28079: LD_EXP 113
28083: PUSH
28084: LD_VAR 0 6
28088: ARRAY
28089: INC
28090: ST_TO_ADDR
28091: LD_INT 1
28093: PUSH
28094: FOR_DOWNTO
28095: IFFALSE 28258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28097: LD_EXP 113
28101: PUSH
28102: LD_VAR 0 6
28106: ARRAY
28107: PUSH
28108: LD_VAR 0 5
28112: ARRAY
28113: PUSH
28114: LD_INT 1
28116: ARRAY
28117: PPUSH
28118: LD_EXP 113
28122: PUSH
28123: LD_VAR 0 6
28127: ARRAY
28128: PUSH
28129: LD_VAR 0 5
28133: ARRAY
28134: PUSH
28135: LD_INT 2
28137: ARRAY
28138: PPUSH
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_VAR 0 3
28148: PPUSH
28149: CALL_OW 298
28153: PUSH
28154: LD_INT 6
28156: LESS
28157: IFFALSE 28256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28159: LD_EXP 113
28163: PUSH
28164: LD_VAR 0 6
28168: ARRAY
28169: PUSH
28170: LD_VAR 0 5
28174: ARRAY
28175: PUSH
28176: LD_INT 1
28178: ARRAY
28179: PPUSH
28180: LD_EXP 113
28184: PUSH
28185: LD_VAR 0 6
28189: ARRAY
28190: PUSH
28191: LD_VAR 0 5
28195: ARRAY
28196: PUSH
28197: LD_INT 2
28199: ARRAY
28200: PPUSH
28201: LD_VAR 0 1
28205: PPUSH
28206: CALL_OW 255
28210: PPUSH
28211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28215: LD_ADDR_EXP 113
28219: PUSH
28220: LD_EXP 113
28224: PPUSH
28225: LD_VAR 0 6
28229: PPUSH
28230: LD_EXP 113
28234: PUSH
28235: LD_VAR 0 6
28239: ARRAY
28240: PPUSH
28241: LD_VAR 0 5
28245: PPUSH
28246: CALL_OW 3
28250: PPUSH
28251: CALL_OW 1
28255: ST_TO_ADDR
// end ; end ;
28256: GO 28094
28258: POP
28259: POP
// end ;
28260: LD_VAR 0 4
28264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28265: LD_INT 0
28267: PPUSH
28268: PPUSH
28269: PPUSH
28270: PPUSH
28271: PPUSH
28272: PPUSH
28273: PPUSH
28274: PPUSH
28275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 264
28285: PUSH
28286: LD_EXP 33
28290: EQUAL
28291: NOT
28292: PUSH
28293: LD_VAR 0 1
28297: PUSH
28298: LD_EXP 112
28302: IN
28303: NOT
28304: OR
28305: IFFALSE 28309
// exit ;
28307: GO 28631
// index := GetElementIndex ( minersList , unit ) ;
28309: LD_ADDR_VAR 0 6
28313: PUSH
28314: LD_EXP 112
28318: PPUSH
28319: LD_VAR 0 1
28323: PPUSH
28324: CALL 33827 0 2
28328: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28329: LD_ADDR_VAR 0 8
28333: PUSH
28334: LD_EXP 114
28338: PUSH
28339: LD_EXP 113
28343: PUSH
28344: LD_VAR 0 6
28348: ARRAY
28349: MINUS
28350: ST_TO_ADDR
// if not minesFreeAmount then
28351: LD_VAR 0 8
28355: NOT
28356: IFFALSE 28360
// exit ;
28358: GO 28631
// tmp := [ ] ;
28360: LD_ADDR_VAR 0 7
28364: PUSH
28365: EMPTY
28366: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28367: LD_ADDR_VAR 0 5
28371: PUSH
28372: DOUBLE
28373: LD_INT 1
28375: DEC
28376: ST_TO_ADDR
28377: LD_VAR 0 8
28381: PUSH
28382: FOR_TO
28383: IFFALSE 28578
// begin _d := rand ( 0 , 5 ) ;
28385: LD_ADDR_VAR 0 11
28389: PUSH
28390: LD_INT 0
28392: PPUSH
28393: LD_INT 5
28395: PPUSH
28396: CALL_OW 12
28400: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28401: LD_ADDR_VAR 0 12
28405: PUSH
28406: LD_INT 2
28408: PPUSH
28409: LD_INT 6
28411: PPUSH
28412: CALL_OW 12
28416: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28417: LD_ADDR_VAR 0 9
28421: PUSH
28422: LD_VAR 0 2
28426: PPUSH
28427: LD_VAR 0 11
28431: PPUSH
28432: LD_VAR 0 12
28436: PPUSH
28437: CALL_OW 272
28441: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28442: LD_ADDR_VAR 0 10
28446: PUSH
28447: LD_VAR 0 3
28451: PPUSH
28452: LD_VAR 0 11
28456: PPUSH
28457: LD_VAR 0 12
28461: PPUSH
28462: CALL_OW 273
28466: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28467: LD_VAR 0 9
28471: PPUSH
28472: LD_VAR 0 10
28476: PPUSH
28477: CALL_OW 488
28481: PUSH
28482: LD_VAR 0 9
28486: PUSH
28487: LD_VAR 0 10
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_VAR 0 7
28500: IN
28501: NOT
28502: AND
28503: PUSH
28504: LD_VAR 0 9
28508: PPUSH
28509: LD_VAR 0 10
28513: PPUSH
28514: CALL_OW 458
28518: NOT
28519: AND
28520: IFFALSE 28562
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28522: LD_ADDR_VAR 0 7
28526: PUSH
28527: LD_VAR 0 7
28531: PPUSH
28532: LD_VAR 0 7
28536: PUSH
28537: LD_INT 1
28539: PLUS
28540: PPUSH
28541: LD_VAR 0 9
28545: PUSH
28546: LD_VAR 0 10
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PPUSH
28555: CALL_OW 1
28559: ST_TO_ADDR
28560: GO 28576
// i := i - 1 ;
28562: LD_ADDR_VAR 0 5
28566: PUSH
28567: LD_VAR 0 5
28571: PUSH
28572: LD_INT 1
28574: MINUS
28575: ST_TO_ADDR
// end ;
28576: GO 28382
28578: POP
28579: POP
// for i in tmp do
28580: LD_ADDR_VAR 0 5
28584: PUSH
28585: LD_VAR 0 7
28589: PUSH
28590: FOR_IN
28591: IFFALSE 28629
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28593: LD_VAR 0 1
28597: PPUSH
28598: LD_VAR 0 5
28602: PUSH
28603: LD_INT 1
28605: ARRAY
28606: PPUSH
28607: LD_VAR 0 5
28611: PUSH
28612: LD_INT 2
28614: ARRAY
28615: PPUSH
28616: CALL 27571 0 3
28620: NOT
28621: IFFALSE 28627
// exit ;
28623: POP
28624: POP
28625: GO 28631
28627: GO 28590
28629: POP
28630: POP
// end ;
28631: LD_VAR 0 4
28635: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28636: LD_INT 0
28638: PPUSH
28639: PPUSH
28640: PPUSH
28641: PPUSH
28642: PPUSH
28643: PPUSH
28644: PPUSH
// if not GetClass ( unit ) = class_sniper then
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 257
28654: PUSH
28655: LD_INT 5
28657: EQUAL
28658: NOT
28659: IFFALSE 28663
// exit ;
28661: GO 29051
// dist := 8 ;
28663: LD_ADDR_VAR 0 5
28667: PUSH
28668: LD_INT 8
28670: ST_TO_ADDR
// viewRange := 12 ;
28671: LD_ADDR_VAR 0 7
28675: PUSH
28676: LD_INT 12
28678: ST_TO_ADDR
// side := GetSide ( unit ) ;
28679: LD_ADDR_VAR 0 6
28683: PUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 255
28693: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28694: LD_INT 61
28696: PPUSH
28697: LD_VAR 0 6
28701: PPUSH
28702: CALL_OW 321
28706: PUSH
28707: LD_INT 2
28709: EQUAL
28710: IFFALSE 28720
// viewRange := 16 ;
28712: LD_ADDR_VAR 0 7
28716: PUSH
28717: LD_INT 16
28719: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: CALL_OW 297
28739: PUSH
28740: LD_VAR 0 5
28744: GREATER
28745: IFFALSE 28824
// begin ComMoveXY ( unit , x , y ) ;
28747: LD_VAR 0 1
28751: PPUSH
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28766: LD_INT 35
28768: PPUSH
28769: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_VAR 0 2
28782: PPUSH
28783: LD_VAR 0 3
28787: PPUSH
28788: CALL 64599 0 3
28792: NOT
28793: IFFALSE 28797
// exit ;
28795: GO 29051
// until GetDistUnitXY ( unit , x , y ) < dist ;
28797: LD_VAR 0 1
28801: PPUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: LD_VAR 0 3
28811: PPUSH
28812: CALL_OW 297
28816: PUSH
28817: LD_VAR 0 5
28821: LESS
28822: IFFALSE 28766
// end ; ComTurnXY ( unit , x , y ) ;
28824: LD_VAR 0 1
28828: PPUSH
28829: LD_VAR 0 2
28833: PPUSH
28834: LD_VAR 0 3
28838: PPUSH
28839: CALL_OW 118
// wait ( 5 ) ;
28843: LD_INT 5
28845: PPUSH
28846: CALL_OW 67
// _d := GetDir ( unit ) ;
28850: LD_ADDR_VAR 0 10
28854: PUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 254
28864: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28865: LD_ADDR_VAR 0 8
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 250
28879: PPUSH
28880: LD_VAR 0 10
28884: PPUSH
28885: LD_VAR 0 5
28889: PPUSH
28890: CALL_OW 272
28894: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28895: LD_ADDR_VAR 0 9
28899: PUSH
28900: LD_VAR 0 1
28904: PPUSH
28905: CALL_OW 251
28909: PPUSH
28910: LD_VAR 0 10
28914: PPUSH
28915: LD_VAR 0 5
28919: PPUSH
28920: CALL_OW 273
28924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28925: LD_VAR 0 8
28929: PPUSH
28930: LD_VAR 0 9
28934: PPUSH
28935: CALL_OW 488
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 29051
// ComAnimCustom ( unit , 1 ) ;
28944: LD_VAR 0 1
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28956: LD_VAR 0 8
28960: PPUSH
28961: LD_VAR 0 9
28965: PPUSH
28966: LD_VAR 0 6
28970: PPUSH
28971: LD_VAR 0 7
28975: PPUSH
28976: CALL_OW 330
// repeat wait ( 1 ) ;
28980: LD_INT 1
28982: PPUSH
28983: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 316
28996: PUSH
28997: LD_VAR 0 1
29001: PPUSH
29002: CALL_OW 314
29006: OR
29007: PUSH
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 302
29017: NOT
29018: OR
29019: PUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 301
29029: OR
29030: IFFALSE 28980
// RemoveSeeing ( _x , _y , side ) ;
29032: LD_VAR 0 8
29036: PPUSH
29037: LD_VAR 0 9
29041: PPUSH
29042: LD_VAR 0 6
29046: PPUSH
29047: CALL_OW 331
// end ; end_of_file
29051: LD_VAR 0 4
29055: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
// if exist_mode then
29060: LD_VAR 0 2
29064: IFFALSE 29089
// unit := CreateCharacter ( prefix & ident ) else
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 3
29075: PUSH
29076: LD_VAR 0 1
29080: STR
29081: PPUSH
29082: CALL_OW 34
29086: ST_TO_ADDR
29087: GO 29104
// unit := NewCharacter ( ident ) ;
29089: LD_ADDR_VAR 0 5
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 25
29103: ST_TO_ADDR
// result := unit ;
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: LD_VAR 0 5
29113: ST_TO_ADDR
// end ;
29114: LD_VAR 0 4
29118: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29119: LD_INT 0
29121: PPUSH
29122: PPUSH
// if not side or not nation then
29123: LD_VAR 0 1
29127: NOT
29128: PUSH
29129: LD_VAR 0 2
29133: NOT
29134: OR
29135: IFFALSE 29139
// exit ;
29137: GO 29907
// case nation of nation_american :
29139: LD_VAR 0 2
29143: PUSH
29144: LD_INT 1
29146: DOUBLE
29147: EQUAL
29148: IFTRUE 29152
29150: GO 29366
29152: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29153: LD_ADDR_VAR 0 4
29157: PUSH
29158: LD_INT 35
29160: PUSH
29161: LD_INT 45
29163: PUSH
29164: LD_INT 46
29166: PUSH
29167: LD_INT 47
29169: PUSH
29170: LD_INT 82
29172: PUSH
29173: LD_INT 83
29175: PUSH
29176: LD_INT 84
29178: PUSH
29179: LD_INT 85
29181: PUSH
29182: LD_INT 86
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 6
29193: PUSH
29194: LD_INT 15
29196: PUSH
29197: LD_INT 16
29199: PUSH
29200: LD_INT 7
29202: PUSH
29203: LD_INT 12
29205: PUSH
29206: LD_INT 13
29208: PUSH
29209: LD_INT 10
29211: PUSH
29212: LD_INT 14
29214: PUSH
29215: LD_INT 20
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_INT 25
29226: PUSH
29227: LD_INT 32
29229: PUSH
29230: LD_INT 27
29232: PUSH
29233: LD_INT 36
29235: PUSH
29236: LD_INT 69
29238: PUSH
29239: LD_INT 39
29241: PUSH
29242: LD_INT 34
29244: PUSH
29245: LD_INT 40
29247: PUSH
29248: LD_INT 48
29250: PUSH
29251: LD_INT 49
29253: PUSH
29254: LD_INT 50
29256: PUSH
29257: LD_INT 51
29259: PUSH
29260: LD_INT 52
29262: PUSH
29263: LD_INT 53
29265: PUSH
29266: LD_INT 54
29268: PUSH
29269: LD_INT 55
29271: PUSH
29272: LD_INT 56
29274: PUSH
29275: LD_INT 57
29277: PUSH
29278: LD_INT 58
29280: PUSH
29281: LD_INT 59
29283: PUSH
29284: LD_INT 60
29286: PUSH
29287: LD_INT 61
29289: PUSH
29290: LD_INT 62
29292: PUSH
29293: LD_INT 80
29295: PUSH
29296: LD_INT 82
29298: PUSH
29299: LD_INT 83
29301: PUSH
29302: LD_INT 84
29304: PUSH
29305: LD_INT 85
29307: PUSH
29308: LD_INT 86
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 29831
29366: LD_INT 2
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 29600
29374: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29375: LD_ADDR_VAR 0 4
29379: PUSH
29380: LD_INT 35
29382: PUSH
29383: LD_INT 45
29385: PUSH
29386: LD_INT 46
29388: PUSH
29389: LD_INT 47
29391: PUSH
29392: LD_INT 82
29394: PUSH
29395: LD_INT 83
29397: PUSH
29398: LD_INT 84
29400: PUSH
29401: LD_INT 85
29403: PUSH
29404: LD_INT 87
29406: PUSH
29407: LD_INT 70
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 11
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: LD_INT 4
29421: PUSH
29422: LD_INT 5
29424: PUSH
29425: LD_INT 6
29427: PUSH
29428: LD_INT 15
29430: PUSH
29431: LD_INT 18
29433: PUSH
29434: LD_INT 7
29436: PUSH
29437: LD_INT 17
29439: PUSH
29440: LD_INT 8
29442: PUSH
29443: LD_INT 20
29445: PUSH
29446: LD_INT 21
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 72
29454: PUSH
29455: LD_INT 26
29457: PUSH
29458: LD_INT 69
29460: PUSH
29461: LD_INT 39
29463: PUSH
29464: LD_INT 40
29466: PUSH
29467: LD_INT 41
29469: PUSH
29470: LD_INT 42
29472: PUSH
29473: LD_INT 43
29475: PUSH
29476: LD_INT 48
29478: PUSH
29479: LD_INT 49
29481: PUSH
29482: LD_INT 50
29484: PUSH
29485: LD_INT 51
29487: PUSH
29488: LD_INT 52
29490: PUSH
29491: LD_INT 53
29493: PUSH
29494: LD_INT 54
29496: PUSH
29497: LD_INT 55
29499: PUSH
29500: LD_INT 56
29502: PUSH
29503: LD_INT 60
29505: PUSH
29506: LD_INT 61
29508: PUSH
29509: LD_INT 62
29511: PUSH
29512: LD_INT 66
29514: PUSH
29515: LD_INT 67
29517: PUSH
29518: LD_INT 68
29520: PUSH
29521: LD_INT 81
29523: PUSH
29524: LD_INT 82
29526: PUSH
29527: LD_INT 83
29529: PUSH
29530: LD_INT 84
29532: PUSH
29533: LD_INT 85
29535: PUSH
29536: LD_INT 87
29538: PUSH
29539: LD_INT 88
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
29598: GO 29831
29600: LD_INT 3
29602: DOUBLE
29603: EQUAL
29604: IFTRUE 29608
29606: GO 29830
29608: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29609: LD_ADDR_VAR 0 4
29613: PUSH
29614: LD_INT 46
29616: PUSH
29617: LD_INT 47
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 82
29628: PUSH
29629: LD_INT 83
29631: PUSH
29632: LD_INT 84
29634: PUSH
29635: LD_INT 85
29637: PUSH
29638: LD_INT 86
29640: PUSH
29641: LD_INT 11
29643: PUSH
29644: LD_INT 9
29646: PUSH
29647: LD_INT 20
29649: PUSH
29650: LD_INT 19
29652: PUSH
29653: LD_INT 21
29655: PUSH
29656: LD_INT 24
29658: PUSH
29659: LD_INT 22
29661: PUSH
29662: LD_INT 25
29664: PUSH
29665: LD_INT 28
29667: PUSH
29668: LD_INT 29
29670: PUSH
29671: LD_INT 30
29673: PUSH
29674: LD_INT 31
29676: PUSH
29677: LD_INT 37
29679: PUSH
29680: LD_INT 38
29682: PUSH
29683: LD_INT 32
29685: PUSH
29686: LD_INT 27
29688: PUSH
29689: LD_INT 33
29691: PUSH
29692: LD_INT 69
29694: PUSH
29695: LD_INT 39
29697: PUSH
29698: LD_INT 34
29700: PUSH
29701: LD_INT 40
29703: PUSH
29704: LD_INT 71
29706: PUSH
29707: LD_INT 23
29709: PUSH
29710: LD_INT 44
29712: PUSH
29713: LD_INT 48
29715: PUSH
29716: LD_INT 49
29718: PUSH
29719: LD_INT 50
29721: PUSH
29722: LD_INT 51
29724: PUSH
29725: LD_INT 52
29727: PUSH
29728: LD_INT 53
29730: PUSH
29731: LD_INT 54
29733: PUSH
29734: LD_INT 55
29736: PUSH
29737: LD_INT 56
29739: PUSH
29740: LD_INT 57
29742: PUSH
29743: LD_INT 58
29745: PUSH
29746: LD_INT 59
29748: PUSH
29749: LD_INT 63
29751: PUSH
29752: LD_INT 64
29754: PUSH
29755: LD_INT 65
29757: PUSH
29758: LD_INT 82
29760: PUSH
29761: LD_INT 83
29763: PUSH
29764: LD_INT 84
29766: PUSH
29767: LD_INT 85
29769: PUSH
29770: LD_INT 86
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: ST_TO_ADDR
29828: GO 29831
29830: POP
// if state > - 1 and state < 3 then
29831: LD_VAR 0 3
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: GREATER
29840: PUSH
29841: LD_VAR 0 3
29845: PUSH
29846: LD_INT 3
29848: LESS
29849: AND
29850: IFFALSE 29907
// for i in result do
29852: LD_ADDR_VAR 0 5
29856: PUSH
29857: LD_VAR 0 4
29861: PUSH
29862: FOR_IN
29863: IFFALSE 29905
// if GetTech ( i , side ) <> state then
29865: LD_VAR 0 5
29869: PPUSH
29870: LD_VAR 0 1
29874: PPUSH
29875: CALL_OW 321
29879: PUSH
29880: LD_VAR 0 3
29884: NONEQUAL
29885: IFFALSE 29903
// result := result diff i ;
29887: LD_ADDR_VAR 0 4
29891: PUSH
29892: LD_VAR 0 4
29896: PUSH
29897: LD_VAR 0 5
29901: DIFF
29902: ST_TO_ADDR
29903: GO 29862
29905: POP
29906: POP
// end ;
29907: LD_VAR 0 4
29911: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29912: LD_INT 0
29914: PPUSH
29915: PPUSH
29916: PPUSH
// result := true ;
29917: LD_ADDR_VAR 0 3
29921: PUSH
29922: LD_INT 1
29924: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29925: LD_ADDR_VAR 0 5
29929: PUSH
29930: LD_VAR 0 2
29934: PPUSH
29935: CALL_OW 480
29939: ST_TO_ADDR
// if not tmp then
29940: LD_VAR 0 5
29944: NOT
29945: IFFALSE 29949
// exit ;
29947: GO 29998
// for i in tmp do
29949: LD_ADDR_VAR 0 4
29953: PUSH
29954: LD_VAR 0 5
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29996
// if GetTech ( i , side ) <> state_researched then
29962: LD_VAR 0 4
29966: PPUSH
29967: LD_VAR 0 1
29971: PPUSH
29972: CALL_OW 321
29976: PUSH
29977: LD_INT 2
29979: NONEQUAL
29980: IFFALSE 29994
// begin result := false ;
29982: LD_ADDR_VAR 0 3
29986: PUSH
29987: LD_INT 0
29989: ST_TO_ADDR
// exit ;
29990: POP
29991: POP
29992: GO 29998
// end ;
29994: GO 29959
29996: POP
29997: POP
// end ;
29998: LD_VAR 0 3
30002: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30003: LD_INT 0
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30018: LD_VAR 0 1
30022: NOT
30023: PUSH
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 257
30033: PUSH
30034: LD_INT 9
30036: NONEQUAL
30037: OR
30038: IFFALSE 30042
// exit ;
30040: GO 30615
// side := GetSide ( unit ) ;
30042: LD_ADDR_VAR 0 9
30046: PUSH
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 255
30056: ST_TO_ADDR
// tech_space := tech_spacanom ;
30057: LD_ADDR_VAR 0 12
30061: PUSH
30062: LD_INT 29
30064: ST_TO_ADDR
// tech_time := tech_taurad ;
30065: LD_ADDR_VAR 0 13
30069: PUSH
30070: LD_INT 28
30072: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30073: LD_ADDR_VAR 0 11
30077: PUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 310
30087: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30088: LD_VAR 0 11
30092: PPUSH
30093: CALL_OW 247
30097: PUSH
30098: LD_INT 2
30100: EQUAL
30101: IFFALSE 30105
// exit ;
30103: GO 30615
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30105: LD_ADDR_VAR 0 8
30109: PUSH
30110: LD_INT 81
30112: PUSH
30113: LD_VAR 0 9
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: PUSH
30125: LD_INT 21
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PPUSH
30143: CALL_OW 69
30147: ST_TO_ADDR
// if not tmp then
30148: LD_VAR 0 8
30152: NOT
30153: IFFALSE 30157
// exit ;
30155: GO 30615
// if in_unit then
30157: LD_VAR 0 11
30161: IFFALSE 30185
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30163: LD_ADDR_VAR 0 10
30167: PUSH
30168: LD_VAR 0 8
30172: PPUSH
30173: LD_VAR 0 11
30177: PPUSH
30178: CALL_OW 74
30182: ST_TO_ADDR
30183: GO 30205
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30185: LD_ADDR_VAR 0 10
30189: PUSH
30190: LD_VAR 0 8
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 74
30204: ST_TO_ADDR
// if not enemy then
30205: LD_VAR 0 10
30209: NOT
30210: IFFALSE 30214
// exit ;
30212: GO 30615
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30214: LD_VAR 0 11
30218: PUSH
30219: LD_VAR 0 11
30223: PPUSH
30224: LD_VAR 0 10
30228: PPUSH
30229: CALL_OW 296
30233: PUSH
30234: LD_INT 13
30236: GREATER
30237: AND
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: LD_VAR 0 10
30248: PPUSH
30249: CALL_OW 296
30253: PUSH
30254: LD_INT 12
30256: GREATER
30257: OR
30258: IFFALSE 30262
// exit ;
30260: GO 30615
// missile := [ 1 ] ;
30262: LD_ADDR_VAR 0 14
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30273: LD_VAR 0 9
30277: PPUSH
30278: LD_VAR 0 12
30282: PPUSH
30283: CALL_OW 325
30287: IFFALSE 30316
// missile := Insert ( missile , missile + 1 , 2 ) ;
30289: LD_ADDR_VAR 0 14
30293: PUSH
30294: LD_VAR 0 14
30298: PPUSH
30299: LD_VAR 0 14
30303: PUSH
30304: LD_INT 1
30306: PLUS
30307: PPUSH
30308: LD_INT 2
30310: PPUSH
30311: CALL_OW 2
30315: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30316: LD_VAR 0 9
30320: PPUSH
30321: LD_VAR 0 13
30325: PPUSH
30326: CALL_OW 325
30330: PUSH
30331: LD_VAR 0 10
30335: PPUSH
30336: CALL_OW 255
30340: PPUSH
30341: LD_VAR 0 13
30345: PPUSH
30346: CALL_OW 325
30350: NOT
30351: AND
30352: IFFALSE 30381
// missile := Insert ( missile , missile + 1 , 3 ) ;
30354: LD_ADDR_VAR 0 14
30358: PUSH
30359: LD_VAR 0 14
30363: PPUSH
30364: LD_VAR 0 14
30368: PUSH
30369: LD_INT 1
30371: PLUS
30372: PPUSH
30373: LD_INT 3
30375: PPUSH
30376: CALL_OW 2
30380: ST_TO_ADDR
// if missile < 2 then
30381: LD_VAR 0 14
30385: PUSH
30386: LD_INT 2
30388: LESS
30389: IFFALSE 30393
// exit ;
30391: GO 30615
// x := GetX ( enemy ) ;
30393: LD_ADDR_VAR 0 4
30397: PUSH
30398: LD_VAR 0 10
30402: PPUSH
30403: CALL_OW 250
30407: ST_TO_ADDR
// y := GetY ( enemy ) ;
30408: LD_ADDR_VAR 0 5
30412: PUSH
30413: LD_VAR 0 10
30417: PPUSH
30418: CALL_OW 251
30422: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30423: LD_ADDR_VAR 0 6
30427: PUSH
30428: LD_VAR 0 4
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PPUSH
30437: LD_INT 1
30439: PPUSH
30440: CALL_OW 12
30444: PLUS
30445: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30446: LD_ADDR_VAR 0 7
30450: PUSH
30451: LD_VAR 0 5
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PPUSH
30460: LD_INT 1
30462: PPUSH
30463: CALL_OW 12
30467: PLUS
30468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30469: LD_VAR 0 6
30473: PPUSH
30474: LD_VAR 0 7
30478: PPUSH
30479: CALL_OW 488
30483: NOT
30484: IFFALSE 30506
// begin _x := x ;
30486: LD_ADDR_VAR 0 6
30490: PUSH
30491: LD_VAR 0 4
30495: ST_TO_ADDR
// _y := y ;
30496: LD_ADDR_VAR 0 7
30500: PUSH
30501: LD_VAR 0 5
30505: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30506: LD_ADDR_VAR 0 3
30510: PUSH
30511: LD_INT 1
30513: PPUSH
30514: LD_VAR 0 14
30518: PPUSH
30519: CALL_OW 12
30523: ST_TO_ADDR
// case i of 1 :
30524: LD_VAR 0 3
30528: PUSH
30529: LD_INT 1
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30554
30537: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30538: LD_VAR 0 1
30542: PPUSH
30543: LD_VAR 0 10
30547: PPUSH
30548: CALL_OW 115
30552: GO 30615
30554: LD_INT 2
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30584
30562: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30563: LD_VAR 0 1
30567: PPUSH
30568: LD_VAR 0 6
30572: PPUSH
30573: LD_VAR 0 7
30577: PPUSH
30578: CALL_OW 153
30582: GO 30615
30584: LD_INT 3
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30614
30592: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30593: LD_VAR 0 1
30597: PPUSH
30598: LD_VAR 0 6
30602: PPUSH
30603: LD_VAR 0 7
30607: PPUSH
30608: CALL_OW 154
30612: GO 30615
30614: POP
// end ;
30615: LD_VAR 0 2
30619: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30620: LD_INT 0
30622: PPUSH
30623: PPUSH
30624: PPUSH
30625: PPUSH
30626: PPUSH
30627: PPUSH
// if not unit or not building then
30628: LD_VAR 0 1
30632: NOT
30633: PUSH
30634: LD_VAR 0 2
30638: NOT
30639: OR
30640: IFFALSE 30644
// exit ;
30642: GO 30802
// x := GetX ( building ) ;
30644: LD_ADDR_VAR 0 5
30648: PUSH
30649: LD_VAR 0 2
30653: PPUSH
30654: CALL_OW 250
30658: ST_TO_ADDR
// y := GetY ( building ) ;
30659: LD_ADDR_VAR 0 6
30663: PUSH
30664: LD_VAR 0 2
30668: PPUSH
30669: CALL_OW 251
30673: ST_TO_ADDR
// for i = 0 to 5 do
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: DOUBLE
30680: LD_INT 0
30682: DEC
30683: ST_TO_ADDR
30684: LD_INT 5
30686: PUSH
30687: FOR_TO
30688: IFFALSE 30800
// begin _x := ShiftX ( x , i , 3 ) ;
30690: LD_ADDR_VAR 0 7
30694: PUSH
30695: LD_VAR 0 5
30699: PPUSH
30700: LD_VAR 0 4
30704: PPUSH
30705: LD_INT 3
30707: PPUSH
30708: CALL_OW 272
30712: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30713: LD_ADDR_VAR 0 8
30717: PUSH
30718: LD_VAR 0 6
30722: PPUSH
30723: LD_VAR 0 4
30727: PPUSH
30728: LD_INT 3
30730: PPUSH
30731: CALL_OW 273
30735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30736: LD_VAR 0 7
30740: PPUSH
30741: LD_VAR 0 8
30745: PPUSH
30746: CALL_OW 488
30750: NOT
30751: IFFALSE 30755
// continue ;
30753: GO 30687
// if HexInfo ( _x , _y ) = 0 then
30755: LD_VAR 0 7
30759: PPUSH
30760: LD_VAR 0 8
30764: PPUSH
30765: CALL_OW 428
30769: PUSH
30770: LD_INT 0
30772: EQUAL
30773: IFFALSE 30798
// begin ComMoveXY ( unit , _x , _y ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: CALL_OW 111
// exit ;
30794: POP
30795: POP
30796: GO 30802
// end ; end ;
30798: GO 30687
30800: POP
30801: POP
// end ;
30802: LD_VAR 0 3
30806: RET
// export function ScanBase ( side , base_area ) ; begin
30807: LD_INT 0
30809: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_VAR 0 2
30819: PPUSH
30820: LD_INT 81
30822: PUSH
30823: LD_VAR 0 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PPUSH
30832: CALL_OW 70
30836: ST_TO_ADDR
// end ;
30837: LD_VAR 0 3
30841: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30842: LD_INT 0
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
// result := false ;
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 0
30855: ST_TO_ADDR
// side := GetSide ( unit ) ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 255
30870: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30871: LD_ADDR_VAR 0 4
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: CALL_OW 248
30885: ST_TO_ADDR
// case nat of 1 :
30886: LD_VAR 0 4
30890: PUSH
30891: LD_INT 1
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30910
30899: POP
// tech := tech_lassight ; 2 :
30900: LD_ADDR_VAR 0 5
30904: PUSH
30905: LD_INT 12
30907: ST_TO_ADDR
30908: GO 30949
30910: LD_INT 2
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30929
30918: POP
// tech := tech_mortar ; 3 :
30919: LD_ADDR_VAR 0 5
30923: PUSH
30924: LD_INT 41
30926: ST_TO_ADDR
30927: GO 30949
30929: LD_INT 3
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30948
30937: POP
// tech := tech_bazooka ; end ;
30938: LD_ADDR_VAR 0 5
30942: PUSH
30943: LD_INT 44
30945: ST_TO_ADDR
30946: GO 30949
30948: POP
// if Researched ( side , tech ) then
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_VAR 0 5
30958: PPUSH
30959: CALL_OW 325
30963: IFFALSE 30990
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30965: LD_ADDR_VAR 0 2
30969: PUSH
30970: LD_INT 5
30972: PUSH
30973: LD_INT 8
30975: PUSH
30976: LD_INT 9
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: PUSH
30984: LD_VAR 0 4
30988: ARRAY
30989: ST_TO_ADDR
// end ;
30990: LD_VAR 0 2
30994: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30995: LD_INT 0
30997: PPUSH
30998: PPUSH
30999: PPUSH
// if not mines then
31000: LD_VAR 0 2
31004: NOT
31005: IFFALSE 31009
// exit ;
31007: GO 31153
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31009: LD_ADDR_VAR 0 5
31013: PUSH
31014: LD_INT 81
31016: PUSH
31017: LD_VAR 0 1
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: LD_INT 21
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 69
31051: ST_TO_ADDR
// for i in mines do
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: LD_VAR 0 2
31061: PUSH
31062: FOR_IN
31063: IFFALSE 31151
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31065: LD_VAR 0 4
31069: PUSH
31070: LD_INT 1
31072: ARRAY
31073: PPUSH
31074: LD_VAR 0 4
31078: PUSH
31079: LD_INT 2
31081: ARRAY
31082: PPUSH
31083: CALL_OW 458
31087: NOT
31088: IFFALSE 31092
// continue ;
31090: GO 31062
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31092: LD_VAR 0 4
31096: PUSH
31097: LD_INT 1
31099: ARRAY
31100: PPUSH
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 2
31108: ARRAY
31109: PPUSH
31110: CALL_OW 428
31114: PUSH
31115: LD_VAR 0 5
31119: IN
31120: IFFALSE 31149
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31122: LD_VAR 0 4
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: LD_VAR 0 4
31135: PUSH
31136: LD_INT 2
31138: ARRAY
31139: PPUSH
31140: LD_VAR 0 1
31144: PPUSH
31145: CALL_OW 456
// end ;
31149: GO 31062
31151: POP
31152: POP
// end ;
31153: LD_VAR 0 3
31157: RET
// export function Count ( array ) ; var i ; begin
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
// result := 0 ;
31162: LD_ADDR_VAR 0 2
31166: PUSH
31167: LD_INT 0
31169: ST_TO_ADDR
// for i in array do
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_VAR 0 1
31179: PUSH
31180: FOR_IN
31181: IFFALSE 31205
// if i then
31183: LD_VAR 0 3
31187: IFFALSE 31203
// result := result + 1 ;
31189: LD_ADDR_VAR 0 2
31193: PUSH
31194: LD_VAR 0 2
31198: PUSH
31199: LD_INT 1
31201: PLUS
31202: ST_TO_ADDR
31203: GO 31180
31205: POP
31206: POP
// end ;
31207: LD_VAR 0 2
31211: RET
// export function IsEmpty ( building ) ; begin
31212: LD_INT 0
31214: PPUSH
// if not building then
31215: LD_VAR 0 1
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31267
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31224: LD_ADDR_VAR 0 2
31228: PUSH
31229: LD_VAR 0 1
31233: PUSH
31234: LD_INT 22
31236: PUSH
31237: LD_VAR 0 1
31241: PPUSH
31242: CALL_OW 255
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 58
31253: PUSH
31254: EMPTY
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PPUSH
31261: CALL_OW 69
31265: IN
31266: ST_TO_ADDR
// end ;
31267: LD_VAR 0 2
31271: RET
// export function IsNotFull ( building ) ; begin
31272: LD_INT 0
31274: PPUSH
// if not building then
31275: LD_VAR 0 1
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31303
// result := UnitsInside ( building ) < 6 ;
31284: LD_ADDR_VAR 0 2
31288: PUSH
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 313
31298: PUSH
31299: LD_INT 6
31301: LESS
31302: ST_TO_ADDR
// end ;
31303: LD_VAR 0 2
31307: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31308: LD_INT 0
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
// tmp := [ ] ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: EMPTY
31320: ST_TO_ADDR
// list := [ ] ;
31321: LD_ADDR_VAR 0 5
31325: PUSH
31326: EMPTY
31327: ST_TO_ADDR
// for i = 16 to 25 do
31328: LD_ADDR_VAR 0 4
31332: PUSH
31333: DOUBLE
31334: LD_INT 16
31336: DEC
31337: ST_TO_ADDR
31338: LD_INT 25
31340: PUSH
31341: FOR_TO
31342: IFFALSE 31415
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_INT 22
31356: PUSH
31357: LD_VAR 0 1
31361: PPUSH
31362: CALL_OW 255
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 91
31373: PUSH
31374: LD_VAR 0 1
31378: PUSH
31379: LD_INT 6
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: LD_VAR 0 4
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: PUSH
31404: EMPTY
31405: LIST
31406: PPUSH
31407: CALL_OW 69
31411: ADD
31412: ST_TO_ADDR
31413: GO 31341
31415: POP
31416: POP
// for i = 1 to tmp do
31417: LD_ADDR_VAR 0 4
31421: PUSH
31422: DOUBLE
31423: LD_INT 1
31425: DEC
31426: ST_TO_ADDR
31427: LD_VAR 0 3
31431: PUSH
31432: FOR_TO
31433: IFFALSE 31521
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31435: LD_ADDR_VAR 0 5
31439: PUSH
31440: LD_VAR 0 5
31444: PUSH
31445: LD_VAR 0 3
31449: PUSH
31450: LD_VAR 0 4
31454: ARRAY
31455: PPUSH
31456: CALL_OW 266
31460: PUSH
31461: LD_VAR 0 3
31465: PUSH
31466: LD_VAR 0 4
31470: ARRAY
31471: PPUSH
31472: CALL_OW 250
31476: PUSH
31477: LD_VAR 0 3
31481: PUSH
31482: LD_VAR 0 4
31486: ARRAY
31487: PPUSH
31488: CALL_OW 251
31492: PUSH
31493: LD_VAR 0 3
31497: PUSH
31498: LD_VAR 0 4
31502: ARRAY
31503: PPUSH
31504: CALL_OW 254
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: PUSH
31515: EMPTY
31516: LIST
31517: ADD
31518: ST_TO_ADDR
31519: GO 31432
31521: POP
31522: POP
// result := list ;
31523: LD_ADDR_VAR 0 2
31527: PUSH
31528: LD_VAR 0 5
31532: ST_TO_ADDR
// end ;
31533: LD_VAR 0 2
31537: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31538: LD_INT 0
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
// if not factory then
31547: LD_VAR 0 1
31551: NOT
31552: IFFALSE 31556
// exit ;
31554: GO 32149
// if control = control_apeman then
31556: LD_VAR 0 4
31560: PUSH
31561: LD_INT 5
31563: EQUAL
31564: IFFALSE 31673
// begin tmp := UnitsInside ( factory ) ;
31566: LD_ADDR_VAR 0 8
31570: PUSH
31571: LD_VAR 0 1
31575: PPUSH
31576: CALL_OW 313
31580: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31581: LD_VAR 0 8
31585: PPUSH
31586: LD_INT 25
31588: PUSH
31589: LD_INT 12
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PPUSH
31596: CALL_OW 72
31600: NOT
31601: IFFALSE 31611
// control := control_manual ;
31603: LD_ADDR_VAR 0 4
31607: PUSH
31608: LD_INT 1
31610: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31611: LD_ADDR_VAR 0 8
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL 31308 0 1
31625: ST_TO_ADDR
// if tmp then
31626: LD_VAR 0 8
31630: IFFALSE 31673
// begin for i in tmp do
31632: LD_ADDR_VAR 0 7
31636: PUSH
31637: LD_VAR 0 8
31641: PUSH
31642: FOR_IN
31643: IFFALSE 31671
// if i [ 1 ] = b_ext_radio then
31645: LD_VAR 0 7
31649: PUSH
31650: LD_INT 1
31652: ARRAY
31653: PUSH
31654: LD_INT 22
31656: EQUAL
31657: IFFALSE 31669
// begin control := control_remote ;
31659: LD_ADDR_VAR 0 4
31663: PUSH
31664: LD_INT 2
31666: ST_TO_ADDR
// break ;
31667: GO 31671
// end ;
31669: GO 31642
31671: POP
31672: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_VAR 0 3
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: CALL_OW 448
31702: IFFALSE 31737
// begin result := [ chassis , engine , control , weapon ] ;
31704: LD_ADDR_VAR 0 6
31708: PUSH
31709: LD_VAR 0 2
31713: PUSH
31714: LD_VAR 0 3
31718: PUSH
31719: LD_VAR 0 4
31723: PUSH
31724: LD_VAR 0 5
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// exit ;
31735: GO 32149
// end ; _chassis := AvailableChassisList ( factory ) ;
31737: LD_ADDR_VAR 0 9
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 475
31751: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31752: LD_ADDR_VAR 0 11
31756: PUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 476
31766: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31767: LD_ADDR_VAR 0 12
31771: PUSH
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 477
31781: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31782: LD_ADDR_VAR 0 10
31786: PUSH
31787: LD_VAR 0 1
31791: PPUSH
31792: CALL_OW 478
31796: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31797: LD_VAR 0 9
31801: NOT
31802: PUSH
31803: LD_VAR 0 11
31807: NOT
31808: OR
31809: PUSH
31810: LD_VAR 0 12
31814: NOT
31815: OR
31816: PUSH
31817: LD_VAR 0 10
31821: NOT
31822: OR
31823: IFFALSE 31858
// begin result := [ chassis , engine , control , weapon ] ;
31825: LD_ADDR_VAR 0 6
31829: PUSH
31830: LD_VAR 0 2
31834: PUSH
31835: LD_VAR 0 3
31839: PUSH
31840: LD_VAR 0 4
31844: PUSH
31845: LD_VAR 0 5
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// exit ;
31856: GO 32149
// end ; if not chassis in _chassis then
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 9
31867: IN
31868: NOT
31869: IFFALSE 31895
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31871: LD_ADDR_VAR 0 2
31875: PUSH
31876: LD_VAR 0 9
31880: PUSH
31881: LD_INT 1
31883: PPUSH
31884: LD_VAR 0 9
31888: PPUSH
31889: CALL_OW 12
31893: ARRAY
31894: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31895: LD_VAR 0 2
31899: PPUSH
31900: LD_VAR 0 3
31904: PPUSH
31905: CALL 32154 0 2
31909: NOT
31910: IFFALSE 31969
// repeat engine := _engine [ 1 ] ;
31912: LD_ADDR_VAR 0 3
31916: PUSH
31917: LD_VAR 0 11
31921: PUSH
31922: LD_INT 1
31924: ARRAY
31925: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31926: LD_ADDR_VAR 0 11
31930: PUSH
31931: LD_VAR 0 11
31935: PPUSH
31936: LD_INT 1
31938: PPUSH
31939: CALL_OW 3
31943: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31944: LD_VAR 0 2
31948: PPUSH
31949: LD_VAR 0 3
31953: PPUSH
31954: CALL 32154 0 2
31958: PUSH
31959: LD_VAR 0 11
31963: PUSH
31964: EMPTY
31965: EQUAL
31966: OR
31967: IFFALSE 31912
// if not control in _control then
31969: LD_VAR 0 4
31973: PUSH
31974: LD_VAR 0 12
31978: IN
31979: NOT
31980: IFFALSE 32006
// control := _control [ rand ( 1 , _control ) ] ;
31982: LD_ADDR_VAR 0 4
31986: PUSH
31987: LD_VAR 0 12
31991: PUSH
31992: LD_INT 1
31994: PPUSH
31995: LD_VAR 0 12
31999: PPUSH
32000: CALL_OW 12
32004: ARRAY
32005: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32006: LD_VAR 0 2
32010: PPUSH
32011: LD_VAR 0 5
32015: PPUSH
32016: CALL 32374 0 2
32020: NOT
32021: IFFALSE 32080
// repeat weapon := _weapon [ 1 ] ;
32023: LD_ADDR_VAR 0 5
32027: PUSH
32028: LD_VAR 0 10
32032: PUSH
32033: LD_INT 1
32035: ARRAY
32036: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32037: LD_ADDR_VAR 0 10
32041: PUSH
32042: LD_VAR 0 10
32046: PPUSH
32047: LD_INT 1
32049: PPUSH
32050: CALL_OW 3
32054: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32055: LD_VAR 0 2
32059: PPUSH
32060: LD_VAR 0 5
32064: PPUSH
32065: CALL 32374 0 2
32069: PUSH
32070: LD_VAR 0 10
32074: PUSH
32075: EMPTY
32076: EQUAL
32077: OR
32078: IFFALSE 32023
// result := [ ] ;
32080: LD_ADDR_VAR 0 6
32084: PUSH
32085: EMPTY
32086: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32087: LD_VAR 0 1
32091: PPUSH
32092: LD_VAR 0 2
32096: PPUSH
32097: LD_VAR 0 3
32101: PPUSH
32102: LD_VAR 0 4
32106: PPUSH
32107: LD_VAR 0 5
32111: PPUSH
32112: CALL_OW 448
32116: IFFALSE 32149
// result := [ chassis , engine , control , weapon ] ;
32118: LD_ADDR_VAR 0 6
32122: PUSH
32123: LD_VAR 0 2
32127: PUSH
32128: LD_VAR 0 3
32132: PUSH
32133: LD_VAR 0 4
32137: PUSH
32138: LD_VAR 0 5
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// end ;
32149: LD_VAR 0 6
32153: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32154: LD_INT 0
32156: PPUSH
// if not chassis or not engine then
32157: LD_VAR 0 1
32161: NOT
32162: PUSH
32163: LD_VAR 0 2
32167: NOT
32168: OR
32169: IFFALSE 32173
// exit ;
32171: GO 32369
// case engine of engine_solar :
32173: LD_VAR 0 2
32177: PUSH
32178: LD_INT 2
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32224
32186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32187: LD_ADDR_VAR 0 3
32191: PUSH
32192: LD_INT 11
32194: PUSH
32195: LD_INT 12
32197: PUSH
32198: LD_INT 13
32200: PUSH
32201: LD_INT 14
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
32222: GO 32353
32224: LD_INT 1
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32294
32232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32233: LD_ADDR_VAR 0 3
32237: PUSH
32238: LD_INT 11
32240: PUSH
32241: LD_INT 12
32243: PUSH
32244: LD_INT 13
32246: PUSH
32247: LD_INT 14
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: LD_INT 21
32267: PUSH
32268: LD_INT 23
32270: PUSH
32271: LD_INT 22
32273: PUSH
32274: LD_INT 24
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
32292: GO 32353
32294: LD_INT 3
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32352
32302: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32303: LD_ADDR_VAR 0 3
32307: PUSH
32308: LD_INT 13
32310: PUSH
32311: LD_INT 14
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 4
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: LD_INT 21
32328: PUSH
32329: LD_INT 22
32331: PUSH
32332: LD_INT 23
32334: PUSH
32335: LD_INT 24
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
32350: GO 32353
32352: POP
// result := ( chassis in result ) ;
32353: LD_ADDR_VAR 0 3
32357: PUSH
32358: LD_VAR 0 1
32362: PUSH
32363: LD_VAR 0 3
32367: IN
32368: ST_TO_ADDR
// end ;
32369: LD_VAR 0 3
32373: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32374: LD_INT 0
32376: PPUSH
// if not chassis or not weapon then
32377: LD_VAR 0 1
32381: NOT
32382: PUSH
32383: LD_VAR 0 2
32387: NOT
32388: OR
32389: IFFALSE 32393
// exit ;
32391: GO 33455
// case weapon of us_machine_gun :
32393: LD_VAR 0 2
32397: PUSH
32398: LD_INT 2
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32436
32406: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: LD_INT 4
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: ST_TO_ADDR
32434: GO 33439
32436: LD_INT 3
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32474
32444: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32445: LD_ADDR_VAR 0 3
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: LD_INT 4
32461: PUSH
32462: LD_INT 5
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 33439
32474: LD_INT 11
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32512
32482: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 33439
32512: LD_INT 4
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32546
32520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 3
32531: PUSH
32532: LD_INT 4
32534: PUSH
32535: LD_INT 5
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 33439
32546: LD_INT 5
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32580
32554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 5
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 33439
32580: LD_INT 9
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32614
32588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: LD_INT 5
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 33439
32614: LD_INT 7
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32648
32622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
32646: GO 33439
32648: LD_INT 12
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32682
32656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: LD_INT 4
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 33439
32682: LD_INT 13
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32716
32690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: LD_INT 4
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 33439
32716: LD_INT 14
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32742
32724: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 4
32732: PUSH
32733: LD_INT 5
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: ST_TO_ADDR
32740: GO 33439
32742: LD_INT 6
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32768
32750: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: LD_INT 5
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: ST_TO_ADDR
32766: GO 33439
32768: LD_INT 10
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32794
32776: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32777: LD_ADDR_VAR 0 3
32781: PUSH
32782: LD_INT 4
32784: PUSH
32785: LD_INT 5
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: ST_TO_ADDR
32792: GO 33439
32794: LD_INT 22
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32828
32802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32803: LD_ADDR_VAR 0 3
32807: PUSH
32808: LD_INT 11
32810: PUSH
32811: LD_INT 12
32813: PUSH
32814: LD_INT 13
32816: PUSH
32817: LD_INT 14
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: ST_TO_ADDR
32826: GO 33439
32828: LD_INT 23
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32862
32836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_INT 11
32844: PUSH
32845: LD_INT 12
32847: PUSH
32848: LD_INT 13
32850: PUSH
32851: LD_INT 14
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: ST_TO_ADDR
32860: GO 33439
32862: LD_INT 24
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32896
32870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_INT 11
32878: PUSH
32879: LD_INT 12
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: LD_INT 14
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
32894: GO 33439
32896: LD_INT 30
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 32930
32904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 12
32915: PUSH
32916: LD_INT 13
32918: PUSH
32919: LD_INT 14
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
32928: GO 33439
32930: LD_INT 25
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32956
32938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_INT 13
32946: PUSH
32947: LD_INT 14
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: ST_TO_ADDR
32954: GO 33439
32956: LD_INT 27
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 32982
32964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32965: LD_ADDR_VAR 0 3
32969: PUSH
32970: LD_INT 13
32972: PUSH
32973: LD_INT 14
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: ST_TO_ADDR
32980: GO 33439
32982: LD_EXP 31
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 11
33000: PUSH
33001: LD_INT 12
33003: PUSH
33004: LD_INT 13
33006: PUSH
33007: LD_INT 14
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33439
33018: LD_INT 28
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33044
33026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 13
33034: PUSH
33035: LD_INT 14
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: ST_TO_ADDR
33042: GO 33439
33044: LD_INT 29
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33070
33052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33053: LD_ADDR_VAR 0 3
33057: PUSH
33058: LD_INT 13
33060: PUSH
33061: LD_INT 14
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: ST_TO_ADDR
33068: GO 33439
33070: LD_INT 31
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33096
33078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33079: LD_ADDR_VAR 0 3
33083: PUSH
33084: LD_INT 13
33086: PUSH
33087: LD_INT 14
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: ST_TO_ADDR
33094: GO 33439
33096: LD_INT 26
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33122
33104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 13
33112: PUSH
33113: LD_INT 14
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: ST_TO_ADDR
33120: GO 33439
33122: LD_INT 42
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33156
33130: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33131: LD_ADDR_VAR 0 3
33135: PUSH
33136: LD_INT 21
33138: PUSH
33139: LD_INT 22
33141: PUSH
33142: LD_INT 23
33144: PUSH
33145: LD_INT 24
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
33154: GO 33439
33156: LD_INT 43
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33190
33164: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33165: LD_ADDR_VAR 0 3
33169: PUSH
33170: LD_INT 21
33172: PUSH
33173: LD_INT 22
33175: PUSH
33176: LD_INT 23
33178: PUSH
33179: LD_INT 24
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: ST_TO_ADDR
33188: GO 33439
33190: LD_INT 44
33192: DOUBLE
33193: EQUAL
33194: IFTRUE 33198
33196: GO 33224
33198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: LD_INT 21
33206: PUSH
33207: LD_INT 22
33209: PUSH
33210: LD_INT 23
33212: PUSH
33213: LD_INT 24
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
33222: GO 33439
33224: LD_INT 45
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33258
33232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_INT 21
33240: PUSH
33241: LD_INT 22
33243: PUSH
33244: LD_INT 23
33246: PUSH
33247: LD_INT 24
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
33256: GO 33439
33258: LD_INT 49
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33292
33266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33267: LD_ADDR_VAR 0 3
33271: PUSH
33272: LD_INT 21
33274: PUSH
33275: LD_INT 22
33277: PUSH
33278: LD_INT 23
33280: PUSH
33281: LD_INT 24
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
33290: GO 33439
33292: LD_INT 51
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33326
33300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_INT 21
33308: PUSH
33309: LD_INT 22
33311: PUSH
33312: LD_INT 23
33314: PUSH
33315: LD_INT 24
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
33324: GO 33439
33326: LD_INT 52
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33360
33334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_INT 21
33342: PUSH
33343: LD_INT 22
33345: PUSH
33346: LD_INT 23
33348: PUSH
33349: LD_INT 24
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 33439
33360: LD_INT 53
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33386
33368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_INT 23
33376: PUSH
33377: LD_INT 24
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: ST_TO_ADDR
33384: GO 33439
33386: LD_INT 46
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33412
33394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_INT 23
33402: PUSH
33403: LD_INT 24
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: ST_TO_ADDR
33410: GO 33439
33412: LD_INT 47
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33438
33420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: LD_INT 23
33428: PUSH
33429: LD_INT 24
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: ST_TO_ADDR
33436: GO 33439
33438: POP
// result := ( chassis in result ) ;
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_VAR 0 1
33448: PUSH
33449: LD_VAR 0 3
33453: IN
33454: ST_TO_ADDR
// end ;
33455: LD_VAR 0 3
33459: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33460: LD_INT 0
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
// result := array ;
33469: LD_ADDR_VAR 0 5
33473: PUSH
33474: LD_VAR 0 1
33478: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33479: LD_VAR 0 1
33483: NOT
33484: PUSH
33485: LD_VAR 0 2
33489: NOT
33490: OR
33491: PUSH
33492: LD_VAR 0 3
33496: NOT
33497: OR
33498: PUSH
33499: LD_VAR 0 2
33503: PUSH
33504: LD_VAR 0 1
33508: GREATER
33509: OR
33510: PUSH
33511: LD_VAR 0 3
33515: PUSH
33516: LD_VAR 0 1
33520: GREATER
33521: OR
33522: IFFALSE 33526
// exit ;
33524: GO 33822
// if direction then
33526: LD_VAR 0 4
33530: IFFALSE 33594
// begin d := 1 ;
33532: LD_ADDR_VAR 0 9
33536: PUSH
33537: LD_INT 1
33539: ST_TO_ADDR
// if i_from > i_to then
33540: LD_VAR 0 2
33544: PUSH
33545: LD_VAR 0 3
33549: GREATER
33550: IFFALSE 33576
// length := ( array - i_from ) + i_to else
33552: LD_ADDR_VAR 0 11
33556: PUSH
33557: LD_VAR 0 1
33561: PUSH
33562: LD_VAR 0 2
33566: MINUS
33567: PUSH
33568: LD_VAR 0 3
33572: PLUS
33573: ST_TO_ADDR
33574: GO 33592
// length := i_to - i_from ;
33576: LD_ADDR_VAR 0 11
33580: PUSH
33581: LD_VAR 0 3
33585: PUSH
33586: LD_VAR 0 2
33590: MINUS
33591: ST_TO_ADDR
// end else
33592: GO 33655
// begin d := - 1 ;
33594: LD_ADDR_VAR 0 9
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: ST_TO_ADDR
// if i_from > i_to then
33603: LD_VAR 0 2
33607: PUSH
33608: LD_VAR 0 3
33612: GREATER
33613: IFFALSE 33633
// length := i_from - i_to else
33615: LD_ADDR_VAR 0 11
33619: PUSH
33620: LD_VAR 0 2
33624: PUSH
33625: LD_VAR 0 3
33629: MINUS
33630: ST_TO_ADDR
33631: GO 33655
// length := ( array - i_to ) + i_from ;
33633: LD_ADDR_VAR 0 11
33637: PUSH
33638: LD_VAR 0 1
33642: PUSH
33643: LD_VAR 0 3
33647: MINUS
33648: PUSH
33649: LD_VAR 0 2
33653: PLUS
33654: ST_TO_ADDR
// end ; if not length then
33655: LD_VAR 0 11
33659: NOT
33660: IFFALSE 33664
// exit ;
33662: GO 33822
// tmp := array ;
33664: LD_ADDR_VAR 0 10
33668: PUSH
33669: LD_VAR 0 1
33673: ST_TO_ADDR
// for i = 1 to length do
33674: LD_ADDR_VAR 0 6
33678: PUSH
33679: DOUBLE
33680: LD_INT 1
33682: DEC
33683: ST_TO_ADDR
33684: LD_VAR 0 11
33688: PUSH
33689: FOR_TO
33690: IFFALSE 33810
// begin for j = 1 to array do
33692: LD_ADDR_VAR 0 7
33696: PUSH
33697: DOUBLE
33698: LD_INT 1
33700: DEC
33701: ST_TO_ADDR
33702: LD_VAR 0 1
33706: PUSH
33707: FOR_TO
33708: IFFALSE 33796
// begin k := j + d ;
33710: LD_ADDR_VAR 0 8
33714: PUSH
33715: LD_VAR 0 7
33719: PUSH
33720: LD_VAR 0 9
33724: PLUS
33725: ST_TO_ADDR
// if k > array then
33726: LD_VAR 0 8
33730: PUSH
33731: LD_VAR 0 1
33735: GREATER
33736: IFFALSE 33746
// k := 1 ;
33738: LD_ADDR_VAR 0 8
33742: PUSH
33743: LD_INT 1
33745: ST_TO_ADDR
// if not k then
33746: LD_VAR 0 8
33750: NOT
33751: IFFALSE 33763
// k := array ;
33753: LD_ADDR_VAR 0 8
33757: PUSH
33758: LD_VAR 0 1
33762: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33763: LD_ADDR_VAR 0 10
33767: PUSH
33768: LD_VAR 0 10
33772: PPUSH
33773: LD_VAR 0 8
33777: PPUSH
33778: LD_VAR 0 1
33782: PUSH
33783: LD_VAR 0 7
33787: ARRAY
33788: PPUSH
33789: CALL_OW 1
33793: ST_TO_ADDR
// end ;
33794: GO 33707
33796: POP
33797: POP
// array := tmp ;
33798: LD_ADDR_VAR 0 1
33802: PUSH
33803: LD_VAR 0 10
33807: ST_TO_ADDR
// end ;
33808: GO 33689
33810: POP
33811: POP
// result := array ;
33812: LD_ADDR_VAR 0 5
33816: PUSH
33817: LD_VAR 0 1
33821: ST_TO_ADDR
// end ;
33822: LD_VAR 0 5
33826: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33827: LD_INT 0
33829: PPUSH
33830: PPUSH
// result := 0 ;
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_INT 0
33838: ST_TO_ADDR
// if not array or not value in array then
33839: LD_VAR 0 1
33843: NOT
33844: PUSH
33845: LD_VAR 0 2
33849: PUSH
33850: LD_VAR 0 1
33854: IN
33855: NOT
33856: OR
33857: IFFALSE 33861
// exit ;
33859: GO 33915
// for i = 1 to array do
33861: LD_ADDR_VAR 0 4
33865: PUSH
33866: DOUBLE
33867: LD_INT 1
33869: DEC
33870: ST_TO_ADDR
33871: LD_VAR 0 1
33875: PUSH
33876: FOR_TO
33877: IFFALSE 33913
// if value = array [ i ] then
33879: LD_VAR 0 2
33883: PUSH
33884: LD_VAR 0 1
33888: PUSH
33889: LD_VAR 0 4
33893: ARRAY
33894: EQUAL
33895: IFFALSE 33911
// begin result := i ;
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_VAR 0 4
33906: ST_TO_ADDR
// exit ;
33907: POP
33908: POP
33909: GO 33915
// end ;
33911: GO 33876
33913: POP
33914: POP
// end ;
33915: LD_VAR 0 3
33919: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33920: LD_INT 0
33922: PPUSH
// vc_chassis := chassis ;
33923: LD_ADDR_OWVAR 37
33927: PUSH
33928: LD_VAR 0 1
33932: ST_TO_ADDR
// vc_engine := engine ;
33933: LD_ADDR_OWVAR 39
33937: PUSH
33938: LD_VAR 0 2
33942: ST_TO_ADDR
// vc_control := control ;
33943: LD_ADDR_OWVAR 38
33947: PUSH
33948: LD_VAR 0 3
33952: ST_TO_ADDR
// vc_weapon := weapon ;
33953: LD_ADDR_OWVAR 40
33957: PUSH
33958: LD_VAR 0 4
33962: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33963: LD_ADDR_OWVAR 41
33967: PUSH
33968: LD_VAR 0 5
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 6
33977: RET
// export function WantPlant ( unit ) ; var task ; begin
33978: LD_INT 0
33980: PPUSH
33981: PPUSH
// result := false ;
33982: LD_ADDR_VAR 0 2
33986: PUSH
33987: LD_INT 0
33989: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33990: LD_ADDR_VAR 0 3
33994: PUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 437
34004: ST_TO_ADDR
// if task then
34005: LD_VAR 0 3
34009: IFFALSE 34037
// if task [ 1 ] [ 1 ] = p then
34011: LD_VAR 0 3
34015: PUSH
34016: LD_INT 1
34018: ARRAY
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PUSH
34024: LD_STRING p
34026: EQUAL
34027: IFFALSE 34037
// result := true ;
34029: LD_ADDR_VAR 0 2
34033: PUSH
34034: LD_INT 1
34036: ST_TO_ADDR
// end ;
34037: LD_VAR 0 2
34041: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34042: LD_INT 0
34044: PPUSH
34045: PPUSH
34046: PPUSH
34047: PPUSH
// if pos < 1 then
34048: LD_VAR 0 2
34052: PUSH
34053: LD_INT 1
34055: LESS
34056: IFFALSE 34060
// exit ;
34058: GO 34363
// if pos = 1 then
34060: LD_VAR 0 2
34064: PUSH
34065: LD_INT 1
34067: EQUAL
34068: IFFALSE 34101
// result := Replace ( arr , pos [ 1 ] , value ) else
34070: LD_ADDR_VAR 0 4
34074: PUSH
34075: LD_VAR 0 1
34079: PPUSH
34080: LD_VAR 0 2
34084: PUSH
34085: LD_INT 1
34087: ARRAY
34088: PPUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: CALL_OW 1
34098: ST_TO_ADDR
34099: GO 34363
// begin tmp := arr ;
34101: LD_ADDR_VAR 0 6
34105: PUSH
34106: LD_VAR 0 1
34110: ST_TO_ADDR
// s_arr := [ tmp ] ;
34111: LD_ADDR_VAR 0 7
34115: PUSH
34116: LD_VAR 0 6
34120: PUSH
34121: EMPTY
34122: LIST
34123: ST_TO_ADDR
// for i = 1 to pos - 1 do
34124: LD_ADDR_VAR 0 5
34128: PUSH
34129: DOUBLE
34130: LD_INT 1
34132: DEC
34133: ST_TO_ADDR
34134: LD_VAR 0 2
34138: PUSH
34139: LD_INT 1
34141: MINUS
34142: PUSH
34143: FOR_TO
34144: IFFALSE 34189
// begin tmp := tmp [ pos [ i ] ] ;
34146: LD_ADDR_VAR 0 6
34150: PUSH
34151: LD_VAR 0 6
34155: PUSH
34156: LD_VAR 0 2
34160: PUSH
34161: LD_VAR 0 5
34165: ARRAY
34166: ARRAY
34167: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34168: LD_ADDR_VAR 0 7
34172: PUSH
34173: LD_VAR 0 7
34177: PUSH
34178: LD_VAR 0 6
34182: PUSH
34183: EMPTY
34184: LIST
34185: ADD
34186: ST_TO_ADDR
// end ;
34187: GO 34143
34189: POP
34190: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34191: LD_ADDR_VAR 0 6
34195: PUSH
34196: LD_VAR 0 6
34200: PPUSH
34201: LD_VAR 0 2
34205: PUSH
34206: LD_VAR 0 2
34210: ARRAY
34211: PPUSH
34212: LD_VAR 0 3
34216: PPUSH
34217: CALL_OW 1
34221: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34222: LD_ADDR_VAR 0 7
34226: PUSH
34227: LD_VAR 0 7
34231: PPUSH
34232: LD_VAR 0 7
34236: PPUSH
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 1
34246: ST_TO_ADDR
// for i = s_arr downto 2 do
34247: LD_ADDR_VAR 0 5
34251: PUSH
34252: DOUBLE
34253: LD_VAR 0 7
34257: INC
34258: ST_TO_ADDR
34259: LD_INT 2
34261: PUSH
34262: FOR_DOWNTO
34263: IFFALSE 34347
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34265: LD_ADDR_VAR 0 6
34269: PUSH
34270: LD_VAR 0 7
34274: PUSH
34275: LD_VAR 0 5
34279: PUSH
34280: LD_INT 1
34282: MINUS
34283: ARRAY
34284: PPUSH
34285: LD_VAR 0 2
34289: PUSH
34290: LD_VAR 0 5
34294: PUSH
34295: LD_INT 1
34297: MINUS
34298: ARRAY
34299: PPUSH
34300: LD_VAR 0 7
34304: PUSH
34305: LD_VAR 0 5
34309: ARRAY
34310: PPUSH
34311: CALL_OW 1
34315: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34316: LD_ADDR_VAR 0 7
34320: PUSH
34321: LD_VAR 0 7
34325: PPUSH
34326: LD_VAR 0 5
34330: PUSH
34331: LD_INT 1
34333: MINUS
34334: PPUSH
34335: LD_VAR 0 6
34339: PPUSH
34340: CALL_OW 1
34344: ST_TO_ADDR
// end ;
34345: GO 34262
34347: POP
34348: POP
// result := s_arr [ 1 ] ;
34349: LD_ADDR_VAR 0 4
34353: PUSH
34354: LD_VAR 0 7
34358: PUSH
34359: LD_INT 1
34361: ARRAY
34362: ST_TO_ADDR
// end ; end ;
34363: LD_VAR 0 4
34367: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34368: LD_INT 0
34370: PPUSH
34371: PPUSH
// if not list then
34372: LD_VAR 0 1
34376: NOT
34377: IFFALSE 34381
// exit ;
34379: GO 34472
// i := list [ pos1 ] ;
34381: LD_ADDR_VAR 0 5
34385: PUSH
34386: LD_VAR 0 1
34390: PUSH
34391: LD_VAR 0 2
34395: ARRAY
34396: ST_TO_ADDR
// if not i then
34397: LD_VAR 0 5
34401: NOT
34402: IFFALSE 34406
// exit ;
34404: GO 34472
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34406: LD_ADDR_VAR 0 1
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 2
34420: PPUSH
34421: LD_VAR 0 1
34425: PUSH
34426: LD_VAR 0 3
34430: ARRAY
34431: PPUSH
34432: CALL_OW 1
34436: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34437: LD_ADDR_VAR 0 1
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: LD_VAR 0 3
34451: PPUSH
34452: LD_VAR 0 5
34456: PPUSH
34457: CALL_OW 1
34461: ST_TO_ADDR
// result := list ;
34462: LD_ADDR_VAR 0 4
34466: PUSH
34467: LD_VAR 0 1
34471: ST_TO_ADDR
// end ;
34472: LD_VAR 0 4
34476: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34477: LD_INT 0
34479: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34480: LD_ADDR_VAR 0 5
34484: PUSH
34485: LD_VAR 0 1
34489: PPUSH
34490: CALL_OW 250
34494: PPUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 251
34504: PPUSH
34505: LD_VAR 0 2
34509: PPUSH
34510: LD_VAR 0 3
34514: PPUSH
34515: LD_VAR 0 4
34519: PPUSH
34520: CALL 34530 0 5
34524: ST_TO_ADDR
// end ;
34525: LD_VAR 0 5
34529: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34530: LD_INT 0
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
// if not list then
34536: LD_VAR 0 3
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 34933
// result := [ ] ;
34545: LD_ADDR_VAR 0 6
34549: PUSH
34550: EMPTY
34551: ST_TO_ADDR
// for i in list do
34552: LD_ADDR_VAR 0 7
34556: PUSH
34557: LD_VAR 0 3
34561: PUSH
34562: FOR_IN
34563: IFFALSE 34765
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34565: LD_ADDR_VAR 0 9
34569: PUSH
34570: LD_VAR 0 7
34574: PPUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: LD_VAR 0 2
34584: PPUSH
34585: CALL_OW 297
34589: ST_TO_ADDR
// if not result then
34590: LD_VAR 0 6
34594: NOT
34595: IFFALSE 34621
// result := [ [ i , tmp ] ] else
34597: LD_ADDR_VAR 0 6
34601: PUSH
34602: LD_VAR 0 7
34606: PUSH
34607: LD_VAR 0 9
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: ST_TO_ADDR
34619: GO 34763
// begin if result [ result ] [ 2 ] < tmp then
34621: LD_VAR 0 6
34625: PUSH
34626: LD_VAR 0 6
34630: ARRAY
34631: PUSH
34632: LD_INT 2
34634: ARRAY
34635: PUSH
34636: LD_VAR 0 9
34640: LESS
34641: IFFALSE 34683
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34643: LD_ADDR_VAR 0 6
34647: PUSH
34648: LD_VAR 0 6
34652: PPUSH
34653: LD_VAR 0 6
34657: PUSH
34658: LD_INT 1
34660: PLUS
34661: PPUSH
34662: LD_VAR 0 7
34666: PUSH
34667: LD_VAR 0 9
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 2
34680: ST_TO_ADDR
34681: GO 34763
// for j = 1 to result do
34683: LD_ADDR_VAR 0 8
34687: PUSH
34688: DOUBLE
34689: LD_INT 1
34691: DEC
34692: ST_TO_ADDR
34693: LD_VAR 0 6
34697: PUSH
34698: FOR_TO
34699: IFFALSE 34761
// begin if tmp < result [ j ] [ 2 ] then
34701: LD_VAR 0 9
34705: PUSH
34706: LD_VAR 0 6
34710: PUSH
34711: LD_VAR 0 8
34715: ARRAY
34716: PUSH
34717: LD_INT 2
34719: ARRAY
34720: LESS
34721: IFFALSE 34759
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34723: LD_ADDR_VAR 0 6
34727: PUSH
34728: LD_VAR 0 6
34732: PPUSH
34733: LD_VAR 0 8
34737: PPUSH
34738: LD_VAR 0 7
34742: PUSH
34743: LD_VAR 0 9
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PPUSH
34752: CALL_OW 2
34756: ST_TO_ADDR
// break ;
34757: GO 34761
// end ; end ;
34759: GO 34698
34761: POP
34762: POP
// end ; end ;
34763: GO 34562
34765: POP
34766: POP
// if result and not asc then
34767: LD_VAR 0 6
34771: PUSH
34772: LD_VAR 0 4
34776: NOT
34777: AND
34778: IFFALSE 34853
// begin tmp := result ;
34780: LD_ADDR_VAR 0 9
34784: PUSH
34785: LD_VAR 0 6
34789: ST_TO_ADDR
// for i = tmp downto 1 do
34790: LD_ADDR_VAR 0 7
34794: PUSH
34795: DOUBLE
34796: LD_VAR 0 9
34800: INC
34801: ST_TO_ADDR
34802: LD_INT 1
34804: PUSH
34805: FOR_DOWNTO
34806: IFFALSE 34851
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34808: LD_ADDR_VAR 0 6
34812: PUSH
34813: LD_VAR 0 6
34817: PPUSH
34818: LD_VAR 0 9
34822: PUSH
34823: LD_VAR 0 7
34827: MINUS
34828: PUSH
34829: LD_INT 1
34831: PLUS
34832: PPUSH
34833: LD_VAR 0 9
34837: PUSH
34838: LD_VAR 0 7
34842: ARRAY
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
34849: GO 34805
34851: POP
34852: POP
// end ; tmp := [ ] ;
34853: LD_ADDR_VAR 0 9
34857: PUSH
34858: EMPTY
34859: ST_TO_ADDR
// if mode then
34860: LD_VAR 0 5
34864: IFFALSE 34933
// begin for i = 1 to result do
34866: LD_ADDR_VAR 0 7
34870: PUSH
34871: DOUBLE
34872: LD_INT 1
34874: DEC
34875: ST_TO_ADDR
34876: LD_VAR 0 6
34880: PUSH
34881: FOR_TO
34882: IFFALSE 34921
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34884: LD_ADDR_VAR 0 9
34888: PUSH
34889: LD_VAR 0 9
34893: PPUSH
34894: LD_VAR 0 7
34898: PPUSH
34899: LD_VAR 0 6
34903: PUSH
34904: LD_VAR 0 7
34908: ARRAY
34909: PUSH
34910: LD_INT 1
34912: ARRAY
34913: PPUSH
34914: CALL_OW 1
34918: ST_TO_ADDR
34919: GO 34881
34921: POP
34922: POP
// result := tmp ;
34923: LD_ADDR_VAR 0 6
34927: PUSH
34928: LD_VAR 0 9
34932: ST_TO_ADDR
// end ; end ;
34933: LD_VAR 0 6
34937: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34938: LD_INT 0
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34946: LD_ADDR_VAR 0 5
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: ST_TO_ADDR
// if not x or not y then
34968: LD_VAR 0 2
34972: NOT
34973: PUSH
34974: LD_VAR 0 3
34978: NOT
34979: OR
34980: IFFALSE 34984
// exit ;
34982: GO 36636
// if not range then
34984: LD_VAR 0 4
34988: NOT
34989: IFFALSE 34999
// range := 10 ;
34991: LD_ADDR_VAR 0 4
34995: PUSH
34996: LD_INT 10
34998: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34999: LD_ADDR_VAR 0 8
35003: PUSH
35004: LD_INT 81
35006: PUSH
35007: LD_VAR 0 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 92
35018: PUSH
35019: LD_VAR 0 2
35023: PUSH
35024: LD_VAR 0 3
35028: PUSH
35029: LD_VAR 0 4
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 21
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: PPUSH
35062: CALL_OW 69
35066: ST_TO_ADDR
// if not tmp then
35067: LD_VAR 0 8
35071: NOT
35072: IFFALSE 35076
// exit ;
35074: GO 36636
// for i in tmp do
35076: LD_ADDR_VAR 0 6
35080: PUSH
35081: LD_VAR 0 8
35085: PUSH
35086: FOR_IN
35087: IFFALSE 36611
// begin points := [ 0 , 0 , 0 ] ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// bpoints := 1 ;
35108: LD_ADDR_VAR 0 10
35112: PUSH
35113: LD_INT 1
35115: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 247
35125: PUSH
35126: LD_INT 1
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35712
35134: POP
// begin if GetClass ( i ) = 1 then
35135: LD_VAR 0 6
35139: PPUSH
35140: CALL_OW 257
35144: PUSH
35145: LD_INT 1
35147: EQUAL
35148: IFFALSE 35169
// points := [ 10 , 5 , 3 ] ;
35150: LD_ADDR_VAR 0 9
35154: PUSH
35155: LD_INT 10
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35169: LD_VAR 0 6
35173: PPUSH
35174: CALL_OW 257
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 3
35184: PUSH
35185: LD_INT 4
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: IN
35193: IFFALSE 35214
// points := [ 3 , 2 , 1 ] ;
35195: LD_ADDR_VAR 0 9
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35214: LD_VAR 0 6
35218: PPUSH
35219: CALL_OW 257
35223: PUSH
35224: LD_INT 5
35226: EQUAL
35227: IFFALSE 35248
// points := [ 130 , 5 , 2 ] ;
35229: LD_ADDR_VAR 0 9
35233: PUSH
35234: LD_INT 130
35236: PUSH
35237: LD_INT 5
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35248: LD_VAR 0 6
35252: PPUSH
35253: CALL_OW 257
35257: PUSH
35258: LD_INT 8
35260: EQUAL
35261: IFFALSE 35282
// points := [ 35 , 35 , 30 ] ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_INT 35
35270: PUSH
35271: LD_INT 35
35273: PUSH
35274: LD_INT 30
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35282: LD_VAR 0 6
35286: PPUSH
35287: CALL_OW 257
35291: PUSH
35292: LD_INT 9
35294: EQUAL
35295: IFFALSE 35316
// points := [ 20 , 55 , 40 ] ;
35297: LD_ADDR_VAR 0 9
35301: PUSH
35302: LD_INT 20
35304: PUSH
35305: LD_INT 55
35307: PUSH
35308: LD_INT 40
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35316: LD_VAR 0 6
35320: PPUSH
35321: CALL_OW 257
35325: PUSH
35326: LD_INT 12
35328: PUSH
35329: LD_INT 16
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: IN
35336: IFFALSE 35357
// points := [ 5 , 3 , 2 ] ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: LD_INT 3
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 257
35366: PUSH
35367: LD_INT 17
35369: EQUAL
35370: IFFALSE 35391
// points := [ 100 , 50 , 75 ] ;
35372: LD_ADDR_VAR 0 9
35376: PUSH
35377: LD_INT 100
35379: PUSH
35380: LD_INT 50
35382: PUSH
35383: LD_INT 75
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35391: LD_VAR 0 6
35395: PPUSH
35396: CALL_OW 257
35400: PUSH
35401: LD_INT 15
35403: EQUAL
35404: IFFALSE 35425
// points := [ 10 , 5 , 3 ] ;
35406: LD_ADDR_VAR 0 9
35410: PUSH
35411: LD_INT 10
35413: PUSH
35414: LD_INT 5
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35425: LD_VAR 0 6
35429: PPUSH
35430: CALL_OW 257
35434: PUSH
35435: LD_INT 14
35437: EQUAL
35438: IFFALSE 35459
// points := [ 10 , 0 , 0 ] ;
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_INT 10
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35459: LD_VAR 0 6
35463: PPUSH
35464: CALL_OW 257
35468: PUSH
35469: LD_INT 11
35471: EQUAL
35472: IFFALSE 35493
// points := [ 30 , 10 , 5 ] ;
35474: LD_ADDR_VAR 0 9
35478: PUSH
35479: LD_INT 30
35481: PUSH
35482: LD_INT 10
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_INT 5
35500: PPUSH
35501: CALL_OW 321
35505: PUSH
35506: LD_INT 2
35508: EQUAL
35509: IFFALSE 35526
// bpoints := bpoints * 1.8 ;
35511: LD_ADDR_VAR 0 10
35515: PUSH
35516: LD_VAR 0 10
35520: PUSH
35521: LD_REAL  1.80000000000000E+0000
35524: MUL
35525: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 257
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: IN
35554: PUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: LD_INT 51
35562: PPUSH
35563: CALL_OW 321
35567: PUSH
35568: LD_INT 2
35570: EQUAL
35571: AND
35572: IFFALSE 35589
// bpoints := bpoints * 1.2 ;
35574: LD_ADDR_VAR 0 10
35578: PUSH
35579: LD_VAR 0 10
35583: PUSH
35584: LD_REAL  1.20000000000000E+0000
35587: MUL
35588: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35589: LD_VAR 0 6
35593: PPUSH
35594: CALL_OW 257
35598: PUSH
35599: LD_INT 5
35601: PUSH
35602: LD_INT 7
35604: PUSH
35605: LD_INT 9
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: IN
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_INT 52
35621: PPUSH
35622: CALL_OW 321
35626: PUSH
35627: LD_INT 2
35629: EQUAL
35630: AND
35631: IFFALSE 35648
// bpoints := bpoints * 1.5 ;
35633: LD_ADDR_VAR 0 10
35637: PUSH
35638: LD_VAR 0 10
35642: PUSH
35643: LD_REAL  1.50000000000000E+0000
35646: MUL
35647: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35648: LD_VAR 0 1
35652: PPUSH
35653: LD_INT 66
35655: PPUSH
35656: CALL_OW 321
35660: PUSH
35661: LD_INT 2
35663: EQUAL
35664: IFFALSE 35681
// bpoints := bpoints * 1.1 ;
35666: LD_ADDR_VAR 0 10
35670: PUSH
35671: LD_VAR 0 10
35675: PUSH
35676: LD_REAL  1.10000000000000E+0000
35679: MUL
35680: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35681: LD_ADDR_VAR 0 10
35685: PUSH
35686: LD_VAR 0 10
35690: PUSH
35691: LD_VAR 0 6
35695: PPUSH
35696: LD_INT 1
35698: PPUSH
35699: CALL_OW 259
35703: PUSH
35704: LD_REAL  1.15000000000000E+0000
35707: MUL
35708: MUL
35709: ST_TO_ADDR
// end ; unit_vehicle :
35710: GO 36540
35712: LD_INT 2
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35720
35718: GO 36528
35720: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 42
35736: PUSH
35737: LD_INT 24
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: IN
35745: IFFALSE 35766
// points := [ 25 , 5 , 3 ] ;
35747: LD_ADDR_VAR 0 9
35751: PUSH
35752: LD_INT 25
35754: PUSH
35755: LD_INT 5
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35766: LD_VAR 0 6
35770: PPUSH
35771: CALL_OW 264
35775: PUSH
35776: LD_INT 4
35778: PUSH
35779: LD_INT 43
35781: PUSH
35782: LD_INT 25
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: LIST
35789: IN
35790: IFFALSE 35811
// points := [ 40 , 15 , 5 ] ;
35792: LD_ADDR_VAR 0 9
35796: PUSH
35797: LD_INT 40
35799: PUSH
35800: LD_INT 15
35802: PUSH
35803: LD_INT 5
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35811: LD_VAR 0 6
35815: PPUSH
35816: CALL_OW 264
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: LD_INT 23
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: IN
35831: IFFALSE 35852
// points := [ 7 , 25 , 8 ] ;
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_INT 7
35840: PUSH
35841: LD_INT 25
35843: PUSH
35844: LD_INT 8
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35852: LD_VAR 0 6
35856: PPUSH
35857: CALL_OW 264
35861: PUSH
35862: LD_INT 5
35864: PUSH
35865: LD_INT 27
35867: PUSH
35868: LD_INT 44
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: IN
35876: IFFALSE 35897
// points := [ 14 , 50 , 16 ] ;
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_INT 14
35885: PUSH
35886: LD_INT 50
35888: PUSH
35889: LD_INT 16
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 264
35906: PUSH
35907: LD_INT 6
35909: PUSH
35910: LD_INT 46
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: IN
35917: IFFALSE 35938
// points := [ 32 , 120 , 70 ] ;
35919: LD_ADDR_VAR 0 9
35923: PUSH
35924: LD_INT 32
35926: PUSH
35927: LD_INT 120
35929: PUSH
35930: LD_INT 70
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35938: LD_VAR 0 6
35942: PPUSH
35943: CALL_OW 264
35947: PUSH
35948: LD_INT 7
35950: PUSH
35951: LD_INT 28
35953: PUSH
35954: LD_INT 45
35956: PUSH
35957: LD_EXP 31
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: IN
35968: IFFALSE 35989
// points := [ 35 , 20 , 45 ] ;
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_INT 35
35977: PUSH
35978: LD_INT 20
35980: PUSH
35981: LD_INT 45
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 264
35998: PUSH
35999: LD_INT 47
36001: PUSH
36002: EMPTY
36003: LIST
36004: IN
36005: IFFALSE 36026
// points := [ 67 , 45 , 75 ] ;
36007: LD_ADDR_VAR 0 9
36011: PUSH
36012: LD_INT 67
36014: PUSH
36015: LD_INT 45
36017: PUSH
36018: LD_INT 75
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 264
36035: PUSH
36036: LD_INT 26
36038: PUSH
36039: EMPTY
36040: LIST
36041: IN
36042: IFFALSE 36063
// points := [ 120 , 30 , 80 ] ;
36044: LD_ADDR_VAR 0 9
36048: PUSH
36049: LD_INT 120
36051: PUSH
36052: LD_INT 30
36054: PUSH
36055: LD_INT 80
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36063: LD_VAR 0 6
36067: PPUSH
36068: CALL_OW 264
36072: PUSH
36073: LD_INT 22
36075: PUSH
36076: EMPTY
36077: LIST
36078: IN
36079: IFFALSE 36100
// points := [ 40 , 1 , 1 ] ;
36081: LD_ADDR_VAR 0 9
36085: PUSH
36086: LD_INT 40
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36100: LD_VAR 0 6
36104: PPUSH
36105: CALL_OW 264
36109: PUSH
36110: LD_INT 29
36112: PUSH
36113: EMPTY
36114: LIST
36115: IN
36116: IFFALSE 36137
// points := [ 70 , 200 , 400 ] ;
36118: LD_ADDR_VAR 0 9
36122: PUSH
36123: LD_INT 70
36125: PUSH
36126: LD_INT 200
36128: PUSH
36129: LD_INT 400
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36137: LD_VAR 0 6
36141: PPUSH
36142: CALL_OW 264
36146: PUSH
36147: LD_INT 14
36149: PUSH
36150: LD_INT 53
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: IN
36157: IFFALSE 36178
// points := [ 40 , 10 , 20 ] ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_INT 40
36166: PUSH
36167: LD_INT 10
36169: PUSH
36170: LD_INT 20
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 264
36187: PUSH
36188: LD_INT 9
36190: PUSH
36191: EMPTY
36192: LIST
36193: IN
36194: IFFALSE 36215
// points := [ 5 , 70 , 20 ] ;
36196: LD_ADDR_VAR 0 9
36200: PUSH
36201: LD_INT 5
36203: PUSH
36204: LD_INT 70
36206: PUSH
36207: LD_INT 20
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36215: LD_VAR 0 6
36219: PPUSH
36220: CALL_OW 264
36224: PUSH
36225: LD_INT 10
36227: PUSH
36228: EMPTY
36229: LIST
36230: IN
36231: IFFALSE 36252
// points := [ 35 , 110 , 70 ] ;
36233: LD_ADDR_VAR 0 9
36237: PUSH
36238: LD_INT 35
36240: PUSH
36241: LD_INT 110
36243: PUSH
36244: LD_INT 70
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36252: LD_VAR 0 6
36256: PPUSH
36257: CALL_OW 265
36261: PUSH
36262: LD_INT 25
36264: EQUAL
36265: IFFALSE 36286
// points := [ 80 , 65 , 100 ] ;
36267: LD_ADDR_VAR 0 9
36271: PUSH
36272: LD_INT 80
36274: PUSH
36275: LD_INT 65
36277: PUSH
36278: LD_INT 100
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36286: LD_VAR 0 6
36290: PPUSH
36291: CALL_OW 263
36295: PUSH
36296: LD_INT 1
36298: EQUAL
36299: IFFALSE 36334
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36301: LD_ADDR_VAR 0 10
36305: PUSH
36306: LD_VAR 0 10
36310: PUSH
36311: LD_VAR 0 6
36315: PPUSH
36316: CALL_OW 311
36320: PPUSH
36321: LD_INT 3
36323: PPUSH
36324: CALL_OW 259
36328: PUSH
36329: LD_INT 4
36331: MUL
36332: MUL
36333: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36334: LD_VAR 0 6
36338: PPUSH
36339: CALL_OW 263
36343: PUSH
36344: LD_INT 2
36346: EQUAL
36347: IFFALSE 36398
// begin j := IsControledBy ( i ) ;
36349: LD_ADDR_VAR 0 7
36353: PUSH
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 312
36363: ST_TO_ADDR
// if j then
36364: LD_VAR 0 7
36368: IFFALSE 36398
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36370: LD_ADDR_VAR 0 10
36374: PUSH
36375: LD_VAR 0 10
36379: PUSH
36380: LD_VAR 0 7
36384: PPUSH
36385: LD_INT 3
36387: PPUSH
36388: CALL_OW 259
36392: PUSH
36393: LD_INT 3
36395: MUL
36396: MUL
36397: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36398: LD_VAR 0 6
36402: PPUSH
36403: CALL_OW 264
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: LD_INT 6
36413: PUSH
36414: LD_INT 46
36416: PUSH
36417: LD_INT 44
36419: PUSH
36420: LD_INT 47
36422: PUSH
36423: LD_INT 45
36425: PUSH
36426: LD_INT 28
36428: PUSH
36429: LD_INT 7
36431: PUSH
36432: LD_INT 27
36434: PUSH
36435: LD_INT 29
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: IN
36450: PUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: LD_INT 52
36458: PPUSH
36459: CALL_OW 321
36463: PUSH
36464: LD_INT 2
36466: EQUAL
36467: AND
36468: IFFALSE 36485
// bpoints := bpoints * 1.2 ;
36470: LD_ADDR_VAR 0 10
36474: PUSH
36475: LD_VAR 0 10
36479: PUSH
36480: LD_REAL  1.20000000000000E+0000
36483: MUL
36484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36485: LD_VAR 0 6
36489: PPUSH
36490: CALL_OW 264
36494: PUSH
36495: LD_INT 6
36497: PUSH
36498: LD_INT 46
36500: PUSH
36501: LD_INT 47
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: IN
36509: IFFALSE 36526
// bpoints := bpoints * 1.2 ;
36511: LD_ADDR_VAR 0 10
36515: PUSH
36516: LD_VAR 0 10
36520: PUSH
36521: LD_REAL  1.20000000000000E+0000
36524: MUL
36525: ST_TO_ADDR
// end ; unit_building :
36526: GO 36540
36528: LD_INT 3
36530: DOUBLE
36531: EQUAL
36532: IFTRUE 36536
36534: GO 36539
36536: POP
// ; end ;
36537: GO 36540
36539: POP
// for j = 1 to 3 do
36540: LD_ADDR_VAR 0 7
36544: PUSH
36545: DOUBLE
36546: LD_INT 1
36548: DEC
36549: ST_TO_ADDR
36550: LD_INT 3
36552: PUSH
36553: FOR_TO
36554: IFFALSE 36607
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36556: LD_ADDR_VAR 0 5
36560: PUSH
36561: LD_VAR 0 5
36565: PPUSH
36566: LD_VAR 0 7
36570: PPUSH
36571: LD_VAR 0 5
36575: PUSH
36576: LD_VAR 0 7
36580: ARRAY
36581: PUSH
36582: LD_VAR 0 9
36586: PUSH
36587: LD_VAR 0 7
36591: ARRAY
36592: PUSH
36593: LD_VAR 0 10
36597: MUL
36598: PLUS
36599: PPUSH
36600: CALL_OW 1
36604: ST_TO_ADDR
36605: GO 36553
36607: POP
36608: POP
// end ;
36609: GO 35086
36611: POP
36612: POP
// result := Replace ( result , 4 , tmp ) ;
36613: LD_ADDR_VAR 0 5
36617: PUSH
36618: LD_VAR 0 5
36622: PPUSH
36623: LD_INT 4
36625: PPUSH
36626: LD_VAR 0 8
36630: PPUSH
36631: CALL_OW 1
36635: ST_TO_ADDR
// end ;
36636: LD_VAR 0 5
36640: RET
// export function DangerAtRange ( unit , range ) ; begin
36641: LD_INT 0
36643: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36644: LD_ADDR_VAR 0 3
36648: PUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: CALL_OW 255
36658: PPUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 250
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 251
36678: PPUSH
36679: LD_VAR 0 2
36683: PPUSH
36684: CALL 34938 0 4
36688: ST_TO_ADDR
// end ;
36689: LD_VAR 0 3
36693: RET
// export function DangerInArea ( side , area ) ; begin
36694: LD_INT 0
36696: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_VAR 0 2
36706: PPUSH
36707: LD_INT 81
36709: PUSH
36710: LD_VAR 0 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PPUSH
36719: CALL_OW 70
36723: ST_TO_ADDR
// end ;
36724: LD_VAR 0 3
36728: RET
// export function IsExtension ( b ) ; begin
36729: LD_INT 0
36731: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36732: LD_ADDR_VAR 0 2
36736: PUSH
36737: LD_VAR 0 1
36741: PUSH
36742: LD_INT 23
36744: PUSH
36745: LD_INT 20
36747: PUSH
36748: LD_INT 22
36750: PUSH
36751: LD_INT 17
36753: PUSH
36754: LD_INT 24
36756: PUSH
36757: LD_INT 21
36759: PUSH
36760: LD_INT 19
36762: PUSH
36763: LD_INT 16
36765: PUSH
36766: LD_INT 25
36768: PUSH
36769: LD_INT 18
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: IN
36784: ST_TO_ADDR
// end ;
36785: LD_VAR 0 2
36789: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
36794: PPUSH
// result := [ ] ;
36795: LD_ADDR_VAR 0 4
36799: PUSH
36800: EMPTY
36801: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36802: LD_ADDR_VAR 0 5
36806: PUSH
36807: LD_VAR 0 2
36811: PPUSH
36812: LD_INT 21
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PPUSH
36822: CALL_OW 70
36826: ST_TO_ADDR
// if not tmp then
36827: LD_VAR 0 5
36831: NOT
36832: IFFALSE 36836
// exit ;
36834: GO 36900
// if checkLink then
36836: LD_VAR 0 3
36840: IFFALSE 36890
// begin for i in tmp do
36842: LD_ADDR_VAR 0 6
36846: PUSH
36847: LD_VAR 0 5
36851: PUSH
36852: FOR_IN
36853: IFFALSE 36888
// if GetBase ( i ) <> base then
36855: LD_VAR 0 6
36859: PPUSH
36860: CALL_OW 274
36864: PUSH
36865: LD_VAR 0 1
36869: NONEQUAL
36870: IFFALSE 36886
// ComLinkToBase ( base , i ) ;
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_VAR 0 6
36881: PPUSH
36882: CALL_OW 169
36886: GO 36852
36888: POP
36889: POP
// end ; result := tmp ;
36890: LD_ADDR_VAR 0 4
36894: PUSH
36895: LD_VAR 0 5
36899: ST_TO_ADDR
// end ;
36900: LD_VAR 0 4
36904: RET
// export function ComComplete ( units , b ) ; var i ; begin
36905: LD_INT 0
36907: PPUSH
36908: PPUSH
// if not units then
36909: LD_VAR 0 1
36913: NOT
36914: IFFALSE 36918
// exit ;
36916: GO 37008
// for i in units do
36918: LD_ADDR_VAR 0 4
36922: PUSH
36923: LD_VAR 0 1
36927: PUSH
36928: FOR_IN
36929: IFFALSE 37006
// if BuildingStatus ( b ) = bs_build then
36931: LD_VAR 0 2
36935: PPUSH
36936: CALL_OW 461
36940: PUSH
36941: LD_INT 1
36943: EQUAL
36944: IFFALSE 37004
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36946: LD_VAR 0 4
36950: PPUSH
36951: LD_STRING h
36953: PUSH
36954: LD_VAR 0 2
36958: PPUSH
36959: CALL_OW 250
36963: PUSH
36964: LD_VAR 0 2
36968: PPUSH
36969: CALL_OW 251
36973: PUSH
36974: LD_VAR 0 2
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: EMPTY
36998: LIST
36999: PPUSH
37000: CALL_OW 446
37004: GO 36928
37006: POP
37007: POP
// end ;
37008: LD_VAR 0 3
37012: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37021: LD_VAR 0 1
37025: NOT
37026: PUSH
37027: LD_VAR 0 1
37031: PPUSH
37032: CALL_OW 263
37036: PUSH
37037: LD_INT 2
37039: NONEQUAL
37040: OR
37041: IFFALSE 37045
// exit ;
37043: GO 37361
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37045: LD_ADDR_VAR 0 6
37049: PUSH
37050: LD_INT 22
37052: PUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 255
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 30
37072: PUSH
37073: LD_INT 36
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 34
37082: PUSH
37083: LD_INT 31
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: CALL_OW 69
37103: ST_TO_ADDR
// if not tmp then
37104: LD_VAR 0 6
37108: NOT
37109: IFFALSE 37113
// exit ;
37111: GO 37361
// result := [ ] ;
37113: LD_ADDR_VAR 0 2
37117: PUSH
37118: EMPTY
37119: ST_TO_ADDR
// for i in tmp do
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_VAR 0 6
37129: PUSH
37130: FOR_IN
37131: IFFALSE 37202
// begin t := UnitsInside ( i ) ;
37133: LD_ADDR_VAR 0 4
37137: PUSH
37138: LD_VAR 0 3
37142: PPUSH
37143: CALL_OW 313
37147: ST_TO_ADDR
// if t then
37148: LD_VAR 0 4
37152: IFFALSE 37200
// for j in t do
37154: LD_ADDR_VAR 0 7
37158: PUSH
37159: LD_VAR 0 4
37163: PUSH
37164: FOR_IN
37165: IFFALSE 37198
// result := Replace ( result , result + 1 , j ) ;
37167: LD_ADDR_VAR 0 2
37171: PUSH
37172: LD_VAR 0 2
37176: PPUSH
37177: LD_VAR 0 2
37181: PUSH
37182: LD_INT 1
37184: PLUS
37185: PPUSH
37186: LD_VAR 0 7
37190: PPUSH
37191: CALL_OW 1
37195: ST_TO_ADDR
37196: GO 37164
37198: POP
37199: POP
// end ;
37200: GO 37130
37202: POP
37203: POP
// if not result then
37204: LD_VAR 0 2
37208: NOT
37209: IFFALSE 37213
// exit ;
37211: GO 37361
// mech := result [ 1 ] ;
37213: LD_ADDR_VAR 0 5
37217: PUSH
37218: LD_VAR 0 2
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: ST_TO_ADDR
// if result > 1 then
37227: LD_VAR 0 2
37231: PUSH
37232: LD_INT 1
37234: GREATER
37235: IFFALSE 37347
// begin for i = 2 to result do
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: DOUBLE
37243: LD_INT 2
37245: DEC
37246: ST_TO_ADDR
37247: LD_VAR 0 2
37251: PUSH
37252: FOR_TO
37253: IFFALSE 37345
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37255: LD_ADDR_VAR 0 4
37259: PUSH
37260: LD_VAR 0 2
37264: PUSH
37265: LD_VAR 0 3
37269: ARRAY
37270: PPUSH
37271: LD_INT 3
37273: PPUSH
37274: CALL_OW 259
37278: PUSH
37279: LD_VAR 0 2
37283: PUSH
37284: LD_VAR 0 3
37288: ARRAY
37289: PPUSH
37290: CALL_OW 432
37294: MINUS
37295: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37296: LD_VAR 0 4
37300: PUSH
37301: LD_VAR 0 5
37305: PPUSH
37306: LD_INT 3
37308: PPUSH
37309: CALL_OW 259
37313: PUSH
37314: LD_VAR 0 5
37318: PPUSH
37319: CALL_OW 432
37323: MINUS
37324: GREATEREQUAL
37325: IFFALSE 37343
// mech := result [ i ] ;
37327: LD_ADDR_VAR 0 5
37331: PUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_VAR 0 3
37341: ARRAY
37342: ST_TO_ADDR
// end ;
37343: GO 37252
37345: POP
37346: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37347: LD_VAR 0 1
37351: PPUSH
37352: LD_VAR 0 5
37356: PPUSH
37357: CALL_OW 135
// end ;
37361: LD_VAR 0 2
37365: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37366: LD_INT 0
37368: PPUSH
37369: PPUSH
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
37376: PPUSH
37377: PPUSH
37378: PPUSH
37379: PPUSH
37380: PPUSH
// result := [ ] ;
37381: LD_ADDR_VAR 0 7
37385: PUSH
37386: EMPTY
37387: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37388: LD_VAR 0 1
37392: PPUSH
37393: CALL_OW 266
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: IN
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 39047
// if name then
37413: LD_VAR 0 3
37417: IFFALSE 37433
// SetBName ( base_dep , name ) ;
37419: LD_VAR 0 1
37423: PPUSH
37424: LD_VAR 0 3
37428: PPUSH
37429: CALL_OW 500
// base := GetBase ( base_dep ) ;
37433: LD_ADDR_VAR 0 15
37437: PUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 274
37447: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37448: LD_ADDR_VAR 0 16
37452: PUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37463: LD_ADDR_VAR 0 17
37467: PUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 248
37477: ST_TO_ADDR
// if sources then
37478: LD_VAR 0 5
37482: IFFALSE 37529
// for i = 1 to 3 do
37484: LD_ADDR_VAR 0 8
37488: PUSH
37489: DOUBLE
37490: LD_INT 1
37492: DEC
37493: ST_TO_ADDR
37494: LD_INT 3
37496: PUSH
37497: FOR_TO
37498: IFFALSE 37527
// AddResourceType ( base , i , sources [ i ] ) ;
37500: LD_VAR 0 15
37504: PPUSH
37505: LD_VAR 0 8
37509: PPUSH
37510: LD_VAR 0 5
37514: PUSH
37515: LD_VAR 0 8
37519: ARRAY
37520: PPUSH
37521: CALL_OW 276
37525: GO 37497
37527: POP
37528: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37529: LD_ADDR_VAR 0 18
37533: PUSH
37534: LD_VAR 0 15
37538: PPUSH
37539: LD_VAR 0 2
37543: PPUSH
37544: LD_INT 1
37546: PPUSH
37547: CALL 36790 0 3
37551: ST_TO_ADDR
// InitHc ;
37552: CALL_OW 19
// InitUc ;
37556: CALL_OW 18
// uc_side := side ;
37560: LD_ADDR_OWVAR 20
37564: PUSH
37565: LD_VAR 0 16
37569: ST_TO_ADDR
// uc_nation := nation ;
37570: LD_ADDR_OWVAR 21
37574: PUSH
37575: LD_VAR 0 17
37579: ST_TO_ADDR
// if buildings then
37580: LD_VAR 0 18
37584: IFFALSE 38906
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37586: LD_ADDR_VAR 0 19
37590: PUSH
37591: LD_VAR 0 18
37595: PPUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 30
37601: PUSH
37602: LD_INT 29
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: LD_INT 30
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 72
37628: ST_TO_ADDR
// if tmp then
37629: LD_VAR 0 19
37633: IFFALSE 37681
// for i in tmp do
37635: LD_ADDR_VAR 0 8
37639: PUSH
37640: LD_VAR 0 19
37644: PUSH
37645: FOR_IN
37646: IFFALSE 37679
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37648: LD_VAR 0 8
37652: PPUSH
37653: CALL_OW 250
37657: PPUSH
37658: LD_VAR 0 8
37662: PPUSH
37663: CALL_OW 251
37667: PPUSH
37668: LD_VAR 0 16
37672: PPUSH
37673: CALL_OW 441
37677: GO 37645
37679: POP
37680: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37681: LD_VAR 0 18
37685: PPUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 30
37691: PUSH
37692: LD_INT 32
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 30
37701: PUSH
37702: LD_INT 33
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: PPUSH
37714: CALL_OW 72
37718: IFFALSE 37806
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37720: LD_ADDR_VAR 0 8
37724: PUSH
37725: LD_VAR 0 18
37729: PPUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 30
37735: PUSH
37736: LD_INT 32
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: LD_INT 33
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: PPUSH
37758: CALL_OW 72
37762: PUSH
37763: FOR_IN
37764: IFFALSE 37804
// begin if not GetBWeapon ( i ) then
37766: LD_VAR 0 8
37770: PPUSH
37771: CALL_OW 269
37775: NOT
37776: IFFALSE 37802
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37778: LD_VAR 0 8
37782: PPUSH
37783: LD_VAR 0 8
37787: PPUSH
37788: LD_VAR 0 2
37792: PPUSH
37793: CALL 39052 0 2
37797: PPUSH
37798: CALL_OW 431
// end ;
37802: GO 37763
37804: POP
37805: POP
// end ; for i = 1 to personel do
37806: LD_ADDR_VAR 0 8
37810: PUSH
37811: DOUBLE
37812: LD_INT 1
37814: DEC
37815: ST_TO_ADDR
37816: LD_VAR 0 6
37820: PUSH
37821: FOR_TO
37822: IFFALSE 38886
// begin if i > 4 then
37824: LD_VAR 0 8
37828: PUSH
37829: LD_INT 4
37831: GREATER
37832: IFFALSE 37836
// break ;
37834: GO 38886
// case i of 1 :
37836: LD_VAR 0 8
37840: PUSH
37841: LD_INT 1
37843: DOUBLE
37844: EQUAL
37845: IFTRUE 37849
37847: GO 37929
37849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37850: LD_ADDR_VAR 0 12
37854: PUSH
37855: LD_VAR 0 18
37859: PPUSH
37860: LD_INT 22
37862: PUSH
37863: LD_VAR 0 16
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 58
37874: PUSH
37875: EMPTY
37876: LIST
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: LD_INT 30
37883: PUSH
37884: LD_INT 32
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 30
37893: PUSH
37894: LD_INT 4
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 30
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: PPUSH
37922: CALL_OW 72
37926: ST_TO_ADDR
37927: GO 38151
37929: LD_INT 2
37931: DOUBLE
37932: EQUAL
37933: IFTRUE 37937
37935: GO 37999
37937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37938: LD_ADDR_VAR 0 12
37942: PUSH
37943: LD_VAR 0 18
37947: PPUSH
37948: LD_INT 22
37950: PUSH
37951: LD_VAR 0 16
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 30
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 30
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PPUSH
37992: CALL_OW 72
37996: ST_TO_ADDR
37997: GO 38151
37999: LD_INT 3
38001: DOUBLE
38002: EQUAL
38003: IFTRUE 38007
38005: GO 38069
38007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38008: LD_ADDR_VAR 0 12
38012: PUSH
38013: LD_VAR 0 18
38017: PPUSH
38018: LD_INT 22
38020: PUSH
38021: LD_VAR 0 16
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: LD_INT 30
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 30
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PPUSH
38062: CALL_OW 72
38066: ST_TO_ADDR
38067: GO 38151
38069: LD_INT 4
38071: DOUBLE
38072: EQUAL
38073: IFTRUE 38077
38075: GO 38150
38077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38078: LD_ADDR_VAR 0 12
38082: PUSH
38083: LD_VAR 0 18
38087: PPUSH
38088: LD_INT 22
38090: PUSH
38091: LD_VAR 0 16
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 30
38105: PUSH
38106: LD_INT 6
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 30
38115: PUSH
38116: LD_INT 7
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 30
38125: PUSH
38126: LD_INT 8
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PPUSH
38143: CALL_OW 72
38147: ST_TO_ADDR
38148: GO 38151
38150: POP
// if i = 1 then
38151: LD_VAR 0 8
38155: PUSH
38156: LD_INT 1
38158: EQUAL
38159: IFFALSE 38270
// begin tmp := [ ] ;
38161: LD_ADDR_VAR 0 19
38165: PUSH
38166: EMPTY
38167: ST_TO_ADDR
// for j in f do
38168: LD_ADDR_VAR 0 9
38172: PUSH
38173: LD_VAR 0 12
38177: PUSH
38178: FOR_IN
38179: IFFALSE 38252
// if GetBType ( j ) = b_bunker then
38181: LD_VAR 0 9
38185: PPUSH
38186: CALL_OW 266
38190: PUSH
38191: LD_INT 32
38193: EQUAL
38194: IFFALSE 38221
// tmp := Insert ( tmp , 1 , j ) else
38196: LD_ADDR_VAR 0 19
38200: PUSH
38201: LD_VAR 0 19
38205: PPUSH
38206: LD_INT 1
38208: PPUSH
38209: LD_VAR 0 9
38213: PPUSH
38214: CALL_OW 2
38218: ST_TO_ADDR
38219: GO 38250
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38221: LD_ADDR_VAR 0 19
38225: PUSH
38226: LD_VAR 0 19
38230: PPUSH
38231: LD_VAR 0 19
38235: PUSH
38236: LD_INT 1
38238: PLUS
38239: PPUSH
38240: LD_VAR 0 9
38244: PPUSH
38245: CALL_OW 2
38249: ST_TO_ADDR
38250: GO 38178
38252: POP
38253: POP
// if tmp then
38254: LD_VAR 0 19
38258: IFFALSE 38270
// f := tmp ;
38260: LD_ADDR_VAR 0 12
38264: PUSH
38265: LD_VAR 0 19
38269: ST_TO_ADDR
// end ; x := personel [ i ] ;
38270: LD_ADDR_VAR 0 13
38274: PUSH
38275: LD_VAR 0 6
38279: PUSH
38280: LD_VAR 0 8
38284: ARRAY
38285: ST_TO_ADDR
// if x = - 1 then
38286: LD_VAR 0 13
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: EQUAL
38295: IFFALSE 38504
// begin for j in f do
38297: LD_ADDR_VAR 0 9
38301: PUSH
38302: LD_VAR 0 12
38306: PUSH
38307: FOR_IN
38308: IFFALSE 38500
// repeat InitHc ;
38310: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38314: LD_VAR 0 9
38318: PPUSH
38319: CALL_OW 266
38323: PUSH
38324: LD_INT 5
38326: EQUAL
38327: IFFALSE 38397
// begin if UnitsInside ( j ) < 3 then
38329: LD_VAR 0 9
38333: PPUSH
38334: CALL_OW 313
38338: PUSH
38339: LD_INT 3
38341: LESS
38342: IFFALSE 38378
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38344: LD_INT 0
38346: PPUSH
38347: LD_INT 5
38349: PUSH
38350: LD_INT 8
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: PUSH
38361: LD_VAR 0 17
38365: ARRAY
38366: PPUSH
38367: LD_VAR 0 4
38371: PPUSH
38372: CALL_OW 380
38376: GO 38395
// PrepareHuman ( false , i , skill ) ;
38378: LD_INT 0
38380: PPUSH
38381: LD_VAR 0 8
38385: PPUSH
38386: LD_VAR 0 4
38390: PPUSH
38391: CALL_OW 380
// end else
38395: GO 38414
// PrepareHuman ( false , i , skill ) ;
38397: LD_INT 0
38399: PPUSH
38400: LD_VAR 0 8
38404: PPUSH
38405: LD_VAR 0 4
38409: PPUSH
38410: CALL_OW 380
// un := CreateHuman ;
38414: LD_ADDR_VAR 0 14
38418: PUSH
38419: CALL_OW 44
38423: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38424: LD_ADDR_VAR 0 7
38428: PUSH
38429: LD_VAR 0 7
38433: PPUSH
38434: LD_INT 1
38436: PPUSH
38437: LD_VAR 0 14
38441: PPUSH
38442: CALL_OW 2
38446: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38447: LD_VAR 0 14
38451: PPUSH
38452: LD_VAR 0 9
38456: PPUSH
38457: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38461: LD_VAR 0 9
38465: PPUSH
38466: CALL_OW 313
38470: PUSH
38471: LD_INT 6
38473: EQUAL
38474: PUSH
38475: LD_VAR 0 9
38479: PPUSH
38480: CALL_OW 266
38484: PUSH
38485: LD_INT 32
38487: PUSH
38488: LD_INT 31
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: IN
38495: OR
38496: IFFALSE 38310
38498: GO 38307
38500: POP
38501: POP
// end else
38502: GO 38884
// for j = 1 to x do
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: DOUBLE
38510: LD_INT 1
38512: DEC
38513: ST_TO_ADDR
38514: LD_VAR 0 13
38518: PUSH
38519: FOR_TO
38520: IFFALSE 38882
// begin InitHc ;
38522: CALL_OW 19
// if not f then
38526: LD_VAR 0 12
38530: NOT
38531: IFFALSE 38620
// begin PrepareHuman ( false , i , skill ) ;
38533: LD_INT 0
38535: PPUSH
38536: LD_VAR 0 8
38540: PPUSH
38541: LD_VAR 0 4
38545: PPUSH
38546: CALL_OW 380
// un := CreateHuman ;
38550: LD_ADDR_VAR 0 14
38554: PUSH
38555: CALL_OW 44
38559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38560: LD_ADDR_VAR 0 7
38564: PUSH
38565: LD_VAR 0 7
38569: PPUSH
38570: LD_INT 1
38572: PPUSH
38573: LD_VAR 0 14
38577: PPUSH
38578: CALL_OW 2
38582: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38583: LD_VAR 0 14
38587: PPUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 250
38597: PPUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 251
38607: PPUSH
38608: LD_INT 10
38610: PPUSH
38611: LD_INT 0
38613: PPUSH
38614: CALL_OW 50
// continue ;
38618: GO 38519
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38620: LD_VAR 0 12
38624: PUSH
38625: LD_INT 1
38627: ARRAY
38628: PPUSH
38629: CALL_OW 313
38633: PUSH
38634: LD_VAR 0 12
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: CALL_OW 266
38647: PUSH
38648: LD_INT 32
38650: PUSH
38651: LD_INT 31
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: IN
38658: AND
38659: PUSH
38660: LD_VAR 0 12
38664: PUSH
38665: LD_INT 1
38667: ARRAY
38668: PPUSH
38669: CALL_OW 313
38673: PUSH
38674: LD_INT 6
38676: EQUAL
38677: OR
38678: IFFALSE 38698
// f := Delete ( f , 1 ) ;
38680: LD_ADDR_VAR 0 12
38684: PUSH
38685: LD_VAR 0 12
38689: PPUSH
38690: LD_INT 1
38692: PPUSH
38693: CALL_OW 3
38697: ST_TO_ADDR
// if not f then
38698: LD_VAR 0 12
38702: NOT
38703: IFFALSE 38721
// begin x := x + 2 ;
38705: LD_ADDR_VAR 0 13
38709: PUSH
38710: LD_VAR 0 13
38714: PUSH
38715: LD_INT 2
38717: PLUS
38718: ST_TO_ADDR
// continue ;
38719: GO 38519
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38721: LD_VAR 0 12
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: CALL_OW 266
38734: PUSH
38735: LD_INT 5
38737: EQUAL
38738: IFFALSE 38812
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38740: LD_VAR 0 12
38744: PUSH
38745: LD_INT 1
38747: ARRAY
38748: PPUSH
38749: CALL_OW 313
38753: PUSH
38754: LD_INT 3
38756: LESS
38757: IFFALSE 38793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38759: LD_INT 0
38761: PPUSH
38762: LD_INT 5
38764: PUSH
38765: LD_INT 8
38767: PUSH
38768: LD_INT 9
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: PUSH
38776: LD_VAR 0 17
38780: ARRAY
38781: PPUSH
38782: LD_VAR 0 4
38786: PPUSH
38787: CALL_OW 380
38791: GO 38810
// PrepareHuman ( false , i , skill ) ;
38793: LD_INT 0
38795: PPUSH
38796: LD_VAR 0 8
38800: PPUSH
38801: LD_VAR 0 4
38805: PPUSH
38806: CALL_OW 380
// end else
38810: GO 38829
// PrepareHuman ( false , i , skill ) ;
38812: LD_INT 0
38814: PPUSH
38815: LD_VAR 0 8
38819: PPUSH
38820: LD_VAR 0 4
38824: PPUSH
38825: CALL_OW 380
// un := CreateHuman ;
38829: LD_ADDR_VAR 0 14
38833: PUSH
38834: CALL_OW 44
38838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38839: LD_ADDR_VAR 0 7
38843: PUSH
38844: LD_VAR 0 7
38848: PPUSH
38849: LD_INT 1
38851: PPUSH
38852: LD_VAR 0 14
38856: PPUSH
38857: CALL_OW 2
38861: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38862: LD_VAR 0 14
38866: PPUSH
38867: LD_VAR 0 12
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: PPUSH
38876: CALL_OW 52
// end ;
38880: GO 38519
38882: POP
38883: POP
// end ;
38884: GO 37821
38886: POP
38887: POP
// result := result ^ buildings ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_VAR 0 7
38897: PUSH
38898: LD_VAR 0 18
38902: ADD
38903: ST_TO_ADDR
// end else
38904: GO 39047
// begin for i = 1 to personel do
38906: LD_ADDR_VAR 0 8
38910: PUSH
38911: DOUBLE
38912: LD_INT 1
38914: DEC
38915: ST_TO_ADDR
38916: LD_VAR 0 6
38920: PUSH
38921: FOR_TO
38922: IFFALSE 39045
// begin if i > 4 then
38924: LD_VAR 0 8
38928: PUSH
38929: LD_INT 4
38931: GREATER
38932: IFFALSE 38936
// break ;
38934: GO 39045
// x := personel [ i ] ;
38936: LD_ADDR_VAR 0 13
38940: PUSH
38941: LD_VAR 0 6
38945: PUSH
38946: LD_VAR 0 8
38950: ARRAY
38951: ST_TO_ADDR
// if x = - 1 then
38952: LD_VAR 0 13
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: EQUAL
38961: IFFALSE 38965
// continue ;
38963: GO 38921
// PrepareHuman ( false , i , skill ) ;
38965: LD_INT 0
38967: PPUSH
38968: LD_VAR 0 8
38972: PPUSH
38973: LD_VAR 0 4
38977: PPUSH
38978: CALL_OW 380
// un := CreateHuman ;
38982: LD_ADDR_VAR 0 14
38986: PUSH
38987: CALL_OW 44
38991: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38992: LD_VAR 0 14
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 250
39006: PPUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 251
39016: PPUSH
39017: LD_INT 10
39019: PPUSH
39020: LD_INT 0
39022: PPUSH
39023: CALL_OW 50
// result := result ^ un ;
39027: LD_ADDR_VAR 0 7
39031: PUSH
39032: LD_VAR 0 7
39036: PUSH
39037: LD_VAR 0 14
39041: ADD
39042: ST_TO_ADDR
// end ;
39043: GO 38921
39045: POP
39046: POP
// end ; end ;
39047: LD_VAR 0 7
39051: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39052: LD_INT 0
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
// result := false ;
39070: LD_ADDR_VAR 0 3
39074: PUSH
39075: LD_INT 0
39077: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39078: LD_VAR 0 1
39082: NOT
39083: PUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL_OW 266
39093: PUSH
39094: LD_INT 32
39096: PUSH
39097: LD_INT 33
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: IN
39104: NOT
39105: OR
39106: IFFALSE 39110
// exit ;
39108: GO 40219
// nat := GetNation ( tower ) ;
39110: LD_ADDR_VAR 0 12
39114: PUSH
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL_OW 248
39124: ST_TO_ADDR
// side := GetSide ( tower ) ;
39125: LD_ADDR_VAR 0 16
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 255
39139: ST_TO_ADDR
// x := GetX ( tower ) ;
39140: LD_ADDR_VAR 0 10
39144: PUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: CALL_OW 250
39154: ST_TO_ADDR
// y := GetY ( tower ) ;
39155: LD_ADDR_VAR 0 11
39159: PUSH
39160: LD_VAR 0 1
39164: PPUSH
39165: CALL_OW 251
39169: ST_TO_ADDR
// if not x or not y then
39170: LD_VAR 0 10
39174: NOT
39175: PUSH
39176: LD_VAR 0 11
39180: NOT
39181: OR
39182: IFFALSE 39186
// exit ;
39184: GO 40219
// weapon := 0 ;
39186: LD_ADDR_VAR 0 18
39190: PUSH
39191: LD_INT 0
39193: ST_TO_ADDR
// fac_list := [ ] ;
39194: LD_ADDR_VAR 0 17
39198: PUSH
39199: EMPTY
39200: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39201: LD_ADDR_VAR 0 6
39205: PUSH
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 274
39215: PPUSH
39216: LD_VAR 0 2
39220: PPUSH
39221: LD_INT 0
39223: PPUSH
39224: CALL 36790 0 3
39228: PPUSH
39229: LD_INT 30
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PPUSH
39239: CALL_OW 72
39243: ST_TO_ADDR
// if not factories then
39244: LD_VAR 0 6
39248: NOT
39249: IFFALSE 39253
// exit ;
39251: GO 40219
// for i in factories do
39253: LD_ADDR_VAR 0 8
39257: PUSH
39258: LD_VAR 0 6
39262: PUSH
39263: FOR_IN
39264: IFFALSE 39289
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39266: LD_ADDR_VAR 0 17
39270: PUSH
39271: LD_VAR 0 17
39275: PUSH
39276: LD_VAR 0 8
39280: PPUSH
39281: CALL_OW 478
39285: UNION
39286: ST_TO_ADDR
39287: GO 39263
39289: POP
39290: POP
// if not fac_list then
39291: LD_VAR 0 17
39295: NOT
39296: IFFALSE 39300
// exit ;
39298: GO 40219
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39300: LD_ADDR_VAR 0 5
39304: PUSH
39305: LD_INT 4
39307: PUSH
39308: LD_INT 5
39310: PUSH
39311: LD_INT 9
39313: PUSH
39314: LD_INT 10
39316: PUSH
39317: LD_INT 6
39319: PUSH
39320: LD_INT 7
39322: PUSH
39323: LD_INT 11
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 27
39337: PUSH
39338: LD_INT 28
39340: PUSH
39341: LD_INT 26
39343: PUSH
39344: LD_INT 30
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 43
39355: PUSH
39356: LD_INT 44
39358: PUSH
39359: LD_INT 46
39361: PUSH
39362: LD_INT 45
39364: PUSH
39365: LD_INT 47
39367: PUSH
39368: LD_INT 49
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: PUSH
39384: LD_VAR 0 12
39388: ARRAY
39389: ST_TO_ADDR
// list := list isect fac_list ;
39390: LD_ADDR_VAR 0 5
39394: PUSH
39395: LD_VAR 0 5
39399: PUSH
39400: LD_VAR 0 17
39404: ISECT
39405: ST_TO_ADDR
// if not list then
39406: LD_VAR 0 5
39410: NOT
39411: IFFALSE 39415
// exit ;
39413: GO 40219
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39415: LD_VAR 0 12
39419: PUSH
39420: LD_INT 3
39422: EQUAL
39423: PUSH
39424: LD_INT 49
39426: PUSH
39427: LD_VAR 0 5
39431: IN
39432: AND
39433: PUSH
39434: LD_INT 31
39436: PPUSH
39437: LD_VAR 0 16
39441: PPUSH
39442: CALL_OW 321
39446: PUSH
39447: LD_INT 2
39449: EQUAL
39450: AND
39451: IFFALSE 39511
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39453: LD_INT 22
39455: PUSH
39456: LD_VAR 0 16
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 35
39467: PUSH
39468: LD_INT 49
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 91
39477: PUSH
39478: LD_VAR 0 1
39482: PUSH
39483: LD_INT 10
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: PPUSH
39496: CALL_OW 69
39500: NOT
39501: IFFALSE 39511
// weapon := ru_time_lapser ;
39503: LD_ADDR_VAR 0 18
39507: PUSH
39508: LD_INT 49
39510: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39511: LD_VAR 0 12
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: IN
39526: PUSH
39527: LD_INT 11
39529: PUSH
39530: LD_VAR 0 5
39534: IN
39535: PUSH
39536: LD_INT 30
39538: PUSH
39539: LD_VAR 0 5
39543: IN
39544: OR
39545: AND
39546: PUSH
39547: LD_INT 6
39549: PPUSH
39550: LD_VAR 0 16
39554: PPUSH
39555: CALL_OW 321
39559: PUSH
39560: LD_INT 2
39562: EQUAL
39563: AND
39564: IFFALSE 39729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39566: LD_INT 22
39568: PUSH
39569: LD_VAR 0 16
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 35
39583: PUSH
39584: LD_INT 11
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 35
39593: PUSH
39594: LD_INT 30
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 91
39608: PUSH
39609: LD_VAR 0 1
39613: PUSH
39614: LD_INT 18
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: PPUSH
39627: CALL_OW 69
39631: NOT
39632: PUSH
39633: LD_INT 22
39635: PUSH
39636: LD_VAR 0 16
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: LD_INT 30
39650: PUSH
39651: LD_INT 32
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 30
39660: PUSH
39661: LD_INT 33
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 91
39675: PUSH
39676: LD_VAR 0 1
39680: PUSH
39681: LD_INT 12
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: PPUSH
39697: CALL_OW 69
39701: PUSH
39702: LD_INT 2
39704: GREATER
39705: AND
39706: IFFALSE 39729
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39708: LD_ADDR_VAR 0 18
39712: PUSH
39713: LD_INT 11
39715: PUSH
39716: LD_INT 30
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_VAR 0 12
39727: ARRAY
39728: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39729: LD_VAR 0 18
39733: NOT
39734: PUSH
39735: LD_INT 40
39737: PPUSH
39738: LD_VAR 0 16
39742: PPUSH
39743: CALL_OW 321
39747: PUSH
39748: LD_INT 2
39750: EQUAL
39751: AND
39752: PUSH
39753: LD_INT 7
39755: PUSH
39756: LD_VAR 0 5
39760: IN
39761: PUSH
39762: LD_INT 28
39764: PUSH
39765: LD_VAR 0 5
39769: IN
39770: OR
39771: PUSH
39772: LD_INT 45
39774: PUSH
39775: LD_VAR 0 5
39779: IN
39780: OR
39781: AND
39782: IFFALSE 40036
// begin hex := GetHexInfo ( x , y ) ;
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_VAR 0 10
39793: PPUSH
39794: LD_VAR 0 11
39798: PPUSH
39799: CALL_OW 546
39803: ST_TO_ADDR
// if hex [ 1 ] then
39804: LD_VAR 0 4
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: IFFALSE 39816
// exit ;
39814: GO 40219
// height := hex [ 2 ] ;
39816: LD_ADDR_VAR 0 15
39820: PUSH
39821: LD_VAR 0 4
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39830: LD_ADDR_VAR 0 14
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: LD_INT 5
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: ST_TO_ADDR
// for i in tmp do
39853: LD_ADDR_VAR 0 8
39857: PUSH
39858: LD_VAR 0 14
39862: PUSH
39863: FOR_IN
39864: IFFALSE 40034
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39866: LD_ADDR_VAR 0 9
39870: PUSH
39871: LD_VAR 0 10
39875: PPUSH
39876: LD_VAR 0 8
39880: PPUSH
39881: LD_INT 5
39883: PPUSH
39884: CALL_OW 272
39888: PUSH
39889: LD_VAR 0 11
39893: PPUSH
39894: LD_VAR 0 8
39898: PPUSH
39899: LD_INT 5
39901: PPUSH
39902: CALL_OW 273
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39911: LD_VAR 0 9
39915: PUSH
39916: LD_INT 1
39918: ARRAY
39919: PPUSH
39920: LD_VAR 0 9
39924: PUSH
39925: LD_INT 2
39927: ARRAY
39928: PPUSH
39929: CALL_OW 488
39933: IFFALSE 40032
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39935: LD_ADDR_VAR 0 4
39939: PUSH
39940: LD_VAR 0 9
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PPUSH
39949: LD_VAR 0 9
39953: PUSH
39954: LD_INT 2
39956: ARRAY
39957: PPUSH
39958: CALL_OW 546
39962: ST_TO_ADDR
// if hex [ 1 ] then
39963: LD_VAR 0 4
39967: PUSH
39968: LD_INT 1
39970: ARRAY
39971: IFFALSE 39975
// continue ;
39973: GO 39863
// h := hex [ 2 ] ;
39975: LD_ADDR_VAR 0 13
39979: PUSH
39980: LD_VAR 0 4
39984: PUSH
39985: LD_INT 2
39987: ARRAY
39988: ST_TO_ADDR
// if h + 7 < height then
39989: LD_VAR 0 13
39993: PUSH
39994: LD_INT 7
39996: PLUS
39997: PUSH
39998: LD_VAR 0 15
40002: LESS
40003: IFFALSE 40032
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40005: LD_ADDR_VAR 0 18
40009: PUSH
40010: LD_INT 7
40012: PUSH
40013: LD_INT 28
40015: PUSH
40016: LD_INT 45
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: LD_VAR 0 12
40028: ARRAY
40029: ST_TO_ADDR
// break ;
40030: GO 40034
// end ; end ; end ;
40032: GO 39863
40034: POP
40035: POP
// end ; if not weapon then
40036: LD_VAR 0 18
40040: NOT
40041: IFFALSE 40101
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40043: LD_ADDR_VAR 0 5
40047: PUSH
40048: LD_VAR 0 5
40052: PUSH
40053: LD_INT 11
40055: PUSH
40056: LD_INT 30
40058: PUSH
40059: LD_INT 49
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: DIFF
40067: ST_TO_ADDR
// if not list then
40068: LD_VAR 0 5
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 40219
// weapon := list [ rand ( 1 , list ) ] ;
40077: LD_ADDR_VAR 0 18
40081: PUSH
40082: LD_VAR 0 5
40086: PUSH
40087: LD_INT 1
40089: PPUSH
40090: LD_VAR 0 5
40094: PPUSH
40095: CALL_OW 12
40099: ARRAY
40100: ST_TO_ADDR
// end ; if weapon then
40101: LD_VAR 0 18
40105: IFFALSE 40219
// begin tmp := CostOfWeapon ( weapon ) ;
40107: LD_ADDR_VAR 0 14
40111: PUSH
40112: LD_VAR 0 18
40116: PPUSH
40117: CALL_OW 451
40121: ST_TO_ADDR
// j := GetBase ( tower ) ;
40122: LD_ADDR_VAR 0 9
40126: PUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 274
40136: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40137: LD_VAR 0 9
40141: PPUSH
40142: LD_INT 1
40144: PPUSH
40145: CALL_OW 275
40149: PUSH
40150: LD_VAR 0 14
40154: PUSH
40155: LD_INT 1
40157: ARRAY
40158: GREATEREQUAL
40159: PUSH
40160: LD_VAR 0 9
40164: PPUSH
40165: LD_INT 2
40167: PPUSH
40168: CALL_OW 275
40172: PUSH
40173: LD_VAR 0 14
40177: PUSH
40178: LD_INT 2
40180: ARRAY
40181: GREATEREQUAL
40182: AND
40183: PUSH
40184: LD_VAR 0 9
40188: PPUSH
40189: LD_INT 3
40191: PPUSH
40192: CALL_OW 275
40196: PUSH
40197: LD_VAR 0 14
40201: PUSH
40202: LD_INT 3
40204: ARRAY
40205: GREATEREQUAL
40206: AND
40207: IFFALSE 40219
// result := weapon ;
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_VAR 0 18
40218: ST_TO_ADDR
// end ; end ;
40219: LD_VAR 0 3
40223: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40224: LD_INT 0
40226: PPUSH
40227: PPUSH
// result := true ;
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 1
40235: ST_TO_ADDR
// if array1 = array2 then
40236: LD_VAR 0 1
40240: PUSH
40241: LD_VAR 0 2
40245: EQUAL
40246: IFFALSE 40306
// begin for i = 1 to array1 do
40248: LD_ADDR_VAR 0 4
40252: PUSH
40253: DOUBLE
40254: LD_INT 1
40256: DEC
40257: ST_TO_ADDR
40258: LD_VAR 0 1
40262: PUSH
40263: FOR_TO
40264: IFFALSE 40302
// if array1 [ i ] <> array2 [ i ] then
40266: LD_VAR 0 1
40270: PUSH
40271: LD_VAR 0 4
40275: ARRAY
40276: PUSH
40277: LD_VAR 0 2
40281: PUSH
40282: LD_VAR 0 4
40286: ARRAY
40287: NONEQUAL
40288: IFFALSE 40300
// begin result := false ;
40290: LD_ADDR_VAR 0 3
40294: PUSH
40295: LD_INT 0
40297: ST_TO_ADDR
// break ;
40298: GO 40302
// end ;
40300: GO 40263
40302: POP
40303: POP
// end else
40304: GO 40314
// result := false ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_INT 0
40313: ST_TO_ADDR
// end ;
40314: LD_VAR 0 3
40318: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40319: LD_INT 0
40321: PPUSH
40322: PPUSH
// if not array1 or not array2 then
40323: LD_VAR 0 1
40327: NOT
40328: PUSH
40329: LD_VAR 0 2
40333: NOT
40334: OR
40335: IFFALSE 40339
// exit ;
40337: GO 40403
// result := true ;
40339: LD_ADDR_VAR 0 3
40343: PUSH
40344: LD_INT 1
40346: ST_TO_ADDR
// for i = 1 to array1 do
40347: LD_ADDR_VAR 0 4
40351: PUSH
40352: DOUBLE
40353: LD_INT 1
40355: DEC
40356: ST_TO_ADDR
40357: LD_VAR 0 1
40361: PUSH
40362: FOR_TO
40363: IFFALSE 40401
// if array1 [ i ] <> array2 [ i ] then
40365: LD_VAR 0 1
40369: PUSH
40370: LD_VAR 0 4
40374: ARRAY
40375: PUSH
40376: LD_VAR 0 2
40380: PUSH
40381: LD_VAR 0 4
40385: ARRAY
40386: NONEQUAL
40387: IFFALSE 40399
// begin result := false ;
40389: LD_ADDR_VAR 0 3
40393: PUSH
40394: LD_INT 0
40396: ST_TO_ADDR
// break ;
40397: GO 40401
// end ;
40399: GO 40362
40401: POP
40402: POP
// end ;
40403: LD_VAR 0 3
40407: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40408: LD_INT 0
40410: PPUSH
40411: PPUSH
40412: PPUSH
// pom := GetBase ( fac ) ;
40413: LD_ADDR_VAR 0 5
40417: PUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 274
40427: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40428: LD_ADDR_VAR 0 4
40432: PUSH
40433: LD_VAR 0 2
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: PPUSH
40442: LD_VAR 0 2
40446: PUSH
40447: LD_INT 2
40449: ARRAY
40450: PPUSH
40451: LD_VAR 0 2
40455: PUSH
40456: LD_INT 3
40458: ARRAY
40459: PPUSH
40460: LD_VAR 0 2
40464: PUSH
40465: LD_INT 4
40467: ARRAY
40468: PPUSH
40469: CALL_OW 449
40473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_VAR 0 5
40483: PPUSH
40484: LD_INT 1
40486: PPUSH
40487: CALL_OW 275
40491: PUSH
40492: LD_VAR 0 4
40496: PUSH
40497: LD_INT 1
40499: ARRAY
40500: GREATEREQUAL
40501: PUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: LD_INT 2
40509: PPUSH
40510: CALL_OW 275
40514: PUSH
40515: LD_VAR 0 4
40519: PUSH
40520: LD_INT 2
40522: ARRAY
40523: GREATEREQUAL
40524: AND
40525: PUSH
40526: LD_VAR 0 5
40530: PPUSH
40531: LD_INT 3
40533: PPUSH
40534: CALL_OW 275
40538: PUSH
40539: LD_VAR 0 4
40543: PUSH
40544: LD_INT 3
40546: ARRAY
40547: GREATEREQUAL
40548: AND
40549: ST_TO_ADDR
// end ;
40550: LD_VAR 0 3
40554: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40555: LD_INT 0
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
// pom := GetBase ( building ) ;
40561: LD_ADDR_VAR 0 3
40565: PUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: CALL_OW 274
40575: ST_TO_ADDR
// if not pom then
40576: LD_VAR 0 3
40580: NOT
40581: IFFALSE 40585
// exit ;
40583: GO 40755
// btype := GetBType ( building ) ;
40585: LD_ADDR_VAR 0 5
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 266
40599: ST_TO_ADDR
// if btype = b_armoury then
40600: LD_VAR 0 5
40604: PUSH
40605: LD_INT 4
40607: EQUAL
40608: IFFALSE 40618
// btype := b_barracks ;
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: LD_INT 5
40617: ST_TO_ADDR
// if btype = b_depot then
40618: LD_VAR 0 5
40622: PUSH
40623: LD_INT 0
40625: EQUAL
40626: IFFALSE 40636
// btype := b_warehouse ;
40628: LD_ADDR_VAR 0 5
40632: PUSH
40633: LD_INT 1
40635: ST_TO_ADDR
// if btype = b_workshop then
40636: LD_VAR 0 5
40640: PUSH
40641: LD_INT 2
40643: EQUAL
40644: IFFALSE 40654
// btype := b_factory ;
40646: LD_ADDR_VAR 0 5
40650: PUSH
40651: LD_INT 3
40653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40654: LD_ADDR_VAR 0 4
40658: PUSH
40659: LD_VAR 0 5
40663: PPUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 248
40673: PPUSH
40674: CALL_OW 450
40678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40679: LD_ADDR_VAR 0 2
40683: PUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: LD_INT 1
40691: PPUSH
40692: CALL_OW 275
40696: PUSH
40697: LD_VAR 0 4
40701: PUSH
40702: LD_INT 1
40704: ARRAY
40705: GREATEREQUAL
40706: PUSH
40707: LD_VAR 0 3
40711: PPUSH
40712: LD_INT 2
40714: PPUSH
40715: CALL_OW 275
40719: PUSH
40720: LD_VAR 0 4
40724: PUSH
40725: LD_INT 2
40727: ARRAY
40728: GREATEREQUAL
40729: AND
40730: PUSH
40731: LD_VAR 0 3
40735: PPUSH
40736: LD_INT 3
40738: PPUSH
40739: CALL_OW 275
40743: PUSH
40744: LD_VAR 0 4
40748: PUSH
40749: LD_INT 3
40751: ARRAY
40752: GREATEREQUAL
40753: AND
40754: ST_TO_ADDR
// end ;
40755: LD_VAR 0 2
40759: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40760: LD_INT 0
40762: PPUSH
40763: PPUSH
40764: PPUSH
// pom := GetBase ( building ) ;
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 274
40779: ST_TO_ADDR
// if not pom then
40780: LD_VAR 0 4
40784: NOT
40785: IFFALSE 40789
// exit ;
40787: GO 40890
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40789: LD_ADDR_VAR 0 5
40793: PUSH
40794: LD_VAR 0 2
40798: PPUSH
40799: LD_VAR 0 1
40803: PPUSH
40804: CALL_OW 248
40808: PPUSH
40809: CALL_OW 450
40813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40814: LD_ADDR_VAR 0 3
40818: PUSH
40819: LD_VAR 0 4
40823: PPUSH
40824: LD_INT 1
40826: PPUSH
40827: CALL_OW 275
40831: PUSH
40832: LD_VAR 0 5
40836: PUSH
40837: LD_INT 1
40839: ARRAY
40840: GREATEREQUAL
40841: PUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: LD_INT 2
40849: PPUSH
40850: CALL_OW 275
40854: PUSH
40855: LD_VAR 0 5
40859: PUSH
40860: LD_INT 2
40862: ARRAY
40863: GREATEREQUAL
40864: AND
40865: PUSH
40866: LD_VAR 0 4
40870: PPUSH
40871: LD_INT 3
40873: PPUSH
40874: CALL_OW 275
40878: PUSH
40879: LD_VAR 0 5
40883: PUSH
40884: LD_INT 3
40886: ARRAY
40887: GREATEREQUAL
40888: AND
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 3
40894: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
40899: PPUSH
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
// result := false ;
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: LD_INT 0
40915: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40916: LD_VAR 0 5
40920: NOT
40921: PUSH
40922: LD_VAR 0 1
40926: NOT
40927: OR
40928: PUSH
40929: LD_VAR 0 2
40933: NOT
40934: OR
40935: PUSH
40936: LD_VAR 0 3
40940: NOT
40941: OR
40942: IFFALSE 40946
// exit ;
40944: GO 41760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40946: LD_ADDR_VAR 0 14
40950: PUSH
40951: LD_VAR 0 1
40955: PPUSH
40956: LD_VAR 0 2
40960: PPUSH
40961: LD_VAR 0 3
40965: PPUSH
40966: LD_VAR 0 4
40970: PPUSH
40971: LD_VAR 0 5
40975: PUSH
40976: LD_INT 1
40978: ARRAY
40979: PPUSH
40980: CALL_OW 248
40984: PPUSH
40985: LD_INT 0
40987: PPUSH
40988: CALL 42997 0 6
40992: ST_TO_ADDR
// if not hexes then
40993: LD_VAR 0 14
40997: NOT
40998: IFFALSE 41002
// exit ;
41000: GO 41760
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41002: LD_ADDR_VAR 0 17
41006: PUSH
41007: LD_VAR 0 5
41011: PPUSH
41012: LD_INT 22
41014: PUSH
41015: LD_VAR 0 13
41019: PPUSH
41020: CALL_OW 255
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: LD_INT 30
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 30
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PPUSH
41061: CALL_OW 72
41065: ST_TO_ADDR
// for i = 1 to hexes do
41066: LD_ADDR_VAR 0 9
41070: PUSH
41071: DOUBLE
41072: LD_INT 1
41074: DEC
41075: ST_TO_ADDR
41076: LD_VAR 0 14
41080: PUSH
41081: FOR_TO
41082: IFFALSE 41758
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41084: LD_ADDR_VAR 0 13
41088: PUSH
41089: LD_VAR 0 14
41093: PUSH
41094: LD_VAR 0 9
41098: ARRAY
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: PPUSH
41104: LD_VAR 0 14
41108: PUSH
41109: LD_VAR 0 9
41113: ARRAY
41114: PUSH
41115: LD_INT 2
41117: ARRAY
41118: PPUSH
41119: CALL_OW 428
41123: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41124: LD_VAR 0 14
41128: PUSH
41129: LD_VAR 0 9
41133: ARRAY
41134: PUSH
41135: LD_INT 1
41137: ARRAY
41138: PPUSH
41139: LD_VAR 0 14
41143: PUSH
41144: LD_VAR 0 9
41148: ARRAY
41149: PUSH
41150: LD_INT 2
41152: ARRAY
41153: PPUSH
41154: CALL_OW 351
41158: PUSH
41159: LD_VAR 0 14
41163: PUSH
41164: LD_VAR 0 9
41168: ARRAY
41169: PUSH
41170: LD_INT 1
41172: ARRAY
41173: PPUSH
41174: LD_VAR 0 14
41178: PUSH
41179: LD_VAR 0 9
41183: ARRAY
41184: PUSH
41185: LD_INT 2
41187: ARRAY
41188: PPUSH
41189: CALL_OW 488
41193: NOT
41194: OR
41195: PUSH
41196: LD_VAR 0 13
41200: PPUSH
41201: CALL_OW 247
41205: PUSH
41206: LD_INT 3
41208: EQUAL
41209: OR
41210: IFFALSE 41216
// exit ;
41212: POP
41213: POP
41214: GO 41760
// if not tmp then
41216: LD_VAR 0 13
41220: NOT
41221: IFFALSE 41225
// continue ;
41223: GO 41081
// result := true ;
41225: LD_ADDR_VAR 0 8
41229: PUSH
41230: LD_INT 1
41232: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41233: LD_VAR 0 6
41237: PUSH
41238: LD_VAR 0 13
41242: PPUSH
41243: CALL_OW 247
41247: PUSH
41248: LD_INT 2
41250: EQUAL
41251: AND
41252: PUSH
41253: LD_VAR 0 13
41257: PPUSH
41258: CALL_OW 263
41262: PUSH
41263: LD_INT 1
41265: EQUAL
41266: AND
41267: IFFALSE 41431
// begin if IsDrivenBy ( tmp ) then
41269: LD_VAR 0 13
41273: PPUSH
41274: CALL_OW 311
41278: IFFALSE 41282
// continue ;
41280: GO 41081
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41282: LD_VAR 0 6
41286: PPUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 60
41292: PUSH
41293: EMPTY
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 55
41305: PUSH
41306: EMPTY
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: CALL_OW 72
41321: IFFALSE 41429
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41323: LD_ADDR_VAR 0 18
41327: PUSH
41328: LD_VAR 0 6
41332: PPUSH
41333: LD_INT 3
41335: PUSH
41336: LD_INT 60
41338: PUSH
41339: EMPTY
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: LD_INT 55
41351: PUSH
41352: EMPTY
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PPUSH
41363: CALL_OW 72
41367: PUSH
41368: LD_INT 1
41370: ARRAY
41371: ST_TO_ADDR
// if IsInUnit ( driver ) then
41372: LD_VAR 0 18
41376: PPUSH
41377: CALL_OW 310
41381: IFFALSE 41392
// ComExit ( driver ) ;
41383: LD_VAR 0 18
41387: PPUSH
41388: CALL 66181 0 1
// AddComEnterUnit ( driver , tmp ) ;
41392: LD_VAR 0 18
41396: PPUSH
41397: LD_VAR 0 13
41401: PPUSH
41402: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41406: LD_VAR 0 18
41410: PPUSH
41411: LD_VAR 0 7
41415: PPUSH
41416: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41420: LD_VAR 0 18
41424: PPUSH
41425: CALL_OW 181
// end ; continue ;
41429: GO 41081
// end ; if not cleaners or not tmp in cleaners then
41431: LD_VAR 0 6
41435: NOT
41436: PUSH
41437: LD_VAR 0 13
41441: PUSH
41442: LD_VAR 0 6
41446: IN
41447: NOT
41448: OR
41449: IFFALSE 41756
// begin if dep then
41451: LD_VAR 0 17
41455: IFFALSE 41591
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41457: LD_ADDR_VAR 0 16
41461: PUSH
41462: LD_VAR 0 17
41466: PUSH
41467: LD_INT 1
41469: ARRAY
41470: PPUSH
41471: CALL_OW 250
41475: PPUSH
41476: LD_VAR 0 17
41480: PUSH
41481: LD_INT 1
41483: ARRAY
41484: PPUSH
41485: CALL_OW 254
41489: PPUSH
41490: LD_INT 5
41492: PPUSH
41493: CALL_OW 272
41497: PUSH
41498: LD_VAR 0 17
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: PPUSH
41507: CALL_OW 251
41511: PPUSH
41512: LD_VAR 0 17
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: PPUSH
41521: CALL_OW 254
41525: PPUSH
41526: LD_INT 5
41528: PPUSH
41529: CALL_OW 273
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41538: LD_VAR 0 16
41542: PUSH
41543: LD_INT 1
41545: ARRAY
41546: PPUSH
41547: LD_VAR 0 16
41551: PUSH
41552: LD_INT 2
41554: ARRAY
41555: PPUSH
41556: CALL_OW 488
41560: IFFALSE 41591
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41562: LD_VAR 0 13
41566: PPUSH
41567: LD_VAR 0 16
41571: PUSH
41572: LD_INT 1
41574: ARRAY
41575: PPUSH
41576: LD_VAR 0 16
41580: PUSH
41581: LD_INT 2
41583: ARRAY
41584: PPUSH
41585: CALL_OW 111
// continue ;
41589: GO 41081
// end ; end ; r := GetDir ( tmp ) ;
41591: LD_ADDR_VAR 0 15
41595: PUSH
41596: LD_VAR 0 13
41600: PPUSH
41601: CALL_OW 254
41605: ST_TO_ADDR
// if r = 5 then
41606: LD_VAR 0 15
41610: PUSH
41611: LD_INT 5
41613: EQUAL
41614: IFFALSE 41624
// r := 0 ;
41616: LD_ADDR_VAR 0 15
41620: PUSH
41621: LD_INT 0
41623: ST_TO_ADDR
// for j = r to 5 do
41624: LD_ADDR_VAR 0 10
41628: PUSH
41629: DOUBLE
41630: LD_VAR 0 15
41634: DEC
41635: ST_TO_ADDR
41636: LD_INT 5
41638: PUSH
41639: FOR_TO
41640: IFFALSE 41754
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41642: LD_ADDR_VAR 0 11
41646: PUSH
41647: LD_VAR 0 13
41651: PPUSH
41652: CALL_OW 250
41656: PPUSH
41657: LD_VAR 0 10
41661: PPUSH
41662: LD_INT 2
41664: PPUSH
41665: CALL_OW 272
41669: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41670: LD_ADDR_VAR 0 12
41674: PUSH
41675: LD_VAR 0 13
41679: PPUSH
41680: CALL_OW 251
41684: PPUSH
41685: LD_VAR 0 10
41689: PPUSH
41690: LD_INT 2
41692: PPUSH
41693: CALL_OW 273
41697: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41698: LD_VAR 0 11
41702: PPUSH
41703: LD_VAR 0 12
41707: PPUSH
41708: CALL_OW 488
41712: PUSH
41713: LD_VAR 0 11
41717: PPUSH
41718: LD_VAR 0 12
41722: PPUSH
41723: CALL_OW 428
41727: NOT
41728: AND
41729: IFFALSE 41752
// begin ComMoveXY ( tmp , _x , _y ) ;
41731: LD_VAR 0 13
41735: PPUSH
41736: LD_VAR 0 11
41740: PPUSH
41741: LD_VAR 0 12
41745: PPUSH
41746: CALL_OW 111
// break ;
41750: GO 41754
// end ; end ;
41752: GO 41639
41754: POP
41755: POP
// end ; end ;
41756: GO 41081
41758: POP
41759: POP
// end ;
41760: LD_VAR 0 8
41764: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41765: LD_INT 0
41767: PPUSH
// result := true ;
41768: LD_ADDR_VAR 0 3
41772: PUSH
41773: LD_INT 1
41775: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41776: LD_VAR 0 2
41780: PUSH
41781: LD_INT 24
41783: DOUBLE
41784: EQUAL
41785: IFTRUE 41795
41787: LD_INT 33
41789: DOUBLE
41790: EQUAL
41791: IFTRUE 41795
41793: GO 41820
41795: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 32
41803: PPUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: CALL_OW 321
41813: PUSH
41814: LD_INT 2
41816: EQUAL
41817: ST_TO_ADDR
41818: GO 42140
41820: LD_INT 20
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41853
41828: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_INT 6
41836: PPUSH
41837: LD_VAR 0 1
41841: PPUSH
41842: CALL_OW 321
41846: PUSH
41847: LD_INT 2
41849: EQUAL
41850: ST_TO_ADDR
41851: GO 42140
41853: LD_INT 22
41855: DOUBLE
41856: EQUAL
41857: IFTRUE 41867
41859: LD_INT 36
41861: DOUBLE
41862: EQUAL
41863: IFTRUE 41867
41865: GO 41892
41867: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41868: LD_ADDR_VAR 0 3
41872: PUSH
41873: LD_INT 15
41875: PPUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 321
41885: PUSH
41886: LD_INT 2
41888: EQUAL
41889: ST_TO_ADDR
41890: GO 42140
41892: LD_INT 30
41894: DOUBLE
41895: EQUAL
41896: IFTRUE 41900
41898: GO 41925
41900: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41901: LD_ADDR_VAR 0 3
41905: PUSH
41906: LD_INT 20
41908: PPUSH
41909: LD_VAR 0 1
41913: PPUSH
41914: CALL_OW 321
41918: PUSH
41919: LD_INT 2
41921: EQUAL
41922: ST_TO_ADDR
41923: GO 42140
41925: LD_INT 28
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41939
41931: LD_INT 21
41933: DOUBLE
41934: EQUAL
41935: IFTRUE 41939
41937: GO 41964
41939: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41940: LD_ADDR_VAR 0 3
41944: PUSH
41945: LD_INT 21
41947: PPUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 321
41957: PUSH
41958: LD_INT 2
41960: EQUAL
41961: ST_TO_ADDR
41962: GO 42140
41964: LD_INT 16
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 41999
41972: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_EXP 38
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: CALL_OW 321
41992: PUSH
41993: LD_INT 2
41995: EQUAL
41996: ST_TO_ADDR
41997: GO 42140
41999: LD_INT 19
42001: DOUBLE
42002: EQUAL
42003: IFTRUE 42013
42005: LD_INT 23
42007: DOUBLE
42008: EQUAL
42009: IFTRUE 42013
42011: GO 42040
42013: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_EXP 37
42023: PPUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 321
42033: PUSH
42034: LD_INT 2
42036: EQUAL
42037: ST_TO_ADDR
42038: GO 42140
42040: LD_INT 17
42042: DOUBLE
42043: EQUAL
42044: IFTRUE 42048
42046: GO 42073
42048: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42049: LD_ADDR_VAR 0 3
42053: PUSH
42054: LD_INT 39
42056: PPUSH
42057: LD_VAR 0 1
42061: PPUSH
42062: CALL_OW 321
42066: PUSH
42067: LD_INT 2
42069: EQUAL
42070: ST_TO_ADDR
42071: GO 42140
42073: LD_INT 18
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42106
42081: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42082: LD_ADDR_VAR 0 3
42086: PUSH
42087: LD_INT 40
42089: PPUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 321
42099: PUSH
42100: LD_INT 2
42102: EQUAL
42103: ST_TO_ADDR
42104: GO 42140
42106: LD_INT 27
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42139
42114: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_INT 35
42122: PPUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 321
42132: PUSH
42133: LD_INT 2
42135: EQUAL
42136: ST_TO_ADDR
42137: GO 42140
42139: POP
// end ;
42140: LD_VAR 0 3
42144: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42145: LD_INT 0
42147: PPUSH
42148: PPUSH
42149: PPUSH
42150: PPUSH
42151: PPUSH
42152: PPUSH
42153: PPUSH
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
// result := false ;
42158: LD_ADDR_VAR 0 6
42162: PUSH
42163: LD_INT 0
42165: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42166: LD_VAR 0 1
42170: NOT
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 266
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: IN
42192: NOT
42193: OR
42194: PUSH
42195: LD_VAR 0 2
42199: NOT
42200: OR
42201: PUSH
42202: LD_VAR 0 5
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 3
42218: PUSH
42219: LD_INT 4
42221: PUSH
42222: LD_INT 5
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: IN
42233: NOT
42234: OR
42235: PUSH
42236: LD_VAR 0 3
42240: PPUSH
42241: LD_VAR 0 4
42245: PPUSH
42246: CALL_OW 488
42250: NOT
42251: OR
42252: IFFALSE 42256
// exit ;
42254: GO 42992
// side := GetSide ( depot ) ;
42256: LD_ADDR_VAR 0 9
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 255
42270: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42271: LD_VAR 0 9
42275: PPUSH
42276: LD_VAR 0 2
42280: PPUSH
42281: CALL 41765 0 2
42285: NOT
42286: IFFALSE 42290
// exit ;
42288: GO 42992
// pom := GetBase ( depot ) ;
42290: LD_ADDR_VAR 0 10
42294: PUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 274
42304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42305: LD_ADDR_VAR 0 11
42309: PUSH
42310: LD_VAR 0 2
42314: PPUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 248
42324: PPUSH
42325: CALL_OW 450
42329: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42330: LD_VAR 0 10
42334: PPUSH
42335: LD_INT 1
42337: PPUSH
42338: CALL_OW 275
42342: PUSH
42343: LD_VAR 0 11
42347: PUSH
42348: LD_INT 1
42350: ARRAY
42351: GREATEREQUAL
42352: PUSH
42353: LD_VAR 0 10
42357: PPUSH
42358: LD_INT 2
42360: PPUSH
42361: CALL_OW 275
42365: PUSH
42366: LD_VAR 0 11
42370: PUSH
42371: LD_INT 2
42373: ARRAY
42374: GREATEREQUAL
42375: AND
42376: PUSH
42377: LD_VAR 0 10
42381: PPUSH
42382: LD_INT 3
42384: PPUSH
42385: CALL_OW 275
42389: PUSH
42390: LD_VAR 0 11
42394: PUSH
42395: LD_INT 3
42397: ARRAY
42398: GREATEREQUAL
42399: AND
42400: NOT
42401: IFFALSE 42405
// exit ;
42403: GO 42992
// if GetBType ( depot ) = b_depot then
42405: LD_VAR 0 1
42409: PPUSH
42410: CALL_OW 266
42414: PUSH
42415: LD_INT 0
42417: EQUAL
42418: IFFALSE 42430
// dist := 28 else
42420: LD_ADDR_VAR 0 14
42424: PUSH
42425: LD_INT 28
42427: ST_TO_ADDR
42428: GO 42438
// dist := 36 ;
42430: LD_ADDR_VAR 0 14
42434: PUSH
42435: LD_INT 36
42437: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 3
42447: PPUSH
42448: LD_VAR 0 4
42452: PPUSH
42453: CALL_OW 297
42457: PUSH
42458: LD_VAR 0 14
42462: GREATER
42463: IFFALSE 42467
// exit ;
42465: GO 42992
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42467: LD_ADDR_VAR 0 12
42471: PUSH
42472: LD_VAR 0 2
42476: PPUSH
42477: LD_VAR 0 3
42481: PPUSH
42482: LD_VAR 0 4
42486: PPUSH
42487: LD_VAR 0 5
42491: PPUSH
42492: LD_VAR 0 1
42496: PPUSH
42497: CALL_OW 248
42501: PPUSH
42502: LD_INT 0
42504: PPUSH
42505: CALL 42997 0 6
42509: ST_TO_ADDR
// if not hexes then
42510: LD_VAR 0 12
42514: NOT
42515: IFFALSE 42519
// exit ;
42517: GO 42992
// hex := GetHexInfo ( x , y ) ;
42519: LD_ADDR_VAR 0 15
42523: PUSH
42524: LD_VAR 0 3
42528: PPUSH
42529: LD_VAR 0 4
42533: PPUSH
42534: CALL_OW 546
42538: ST_TO_ADDR
// if hex [ 1 ] then
42539: LD_VAR 0 15
42543: PUSH
42544: LD_INT 1
42546: ARRAY
42547: IFFALSE 42551
// exit ;
42549: GO 42992
// height := hex [ 2 ] ;
42551: LD_ADDR_VAR 0 13
42555: PUSH
42556: LD_VAR 0 15
42560: PUSH
42561: LD_INT 2
42563: ARRAY
42564: ST_TO_ADDR
// for i = 1 to hexes do
42565: LD_ADDR_VAR 0 7
42569: PUSH
42570: DOUBLE
42571: LD_INT 1
42573: DEC
42574: ST_TO_ADDR
42575: LD_VAR 0 12
42579: PUSH
42580: FOR_TO
42581: IFFALSE 42911
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42583: LD_VAR 0 12
42587: PUSH
42588: LD_VAR 0 7
42592: ARRAY
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 12
42602: PUSH
42603: LD_VAR 0 7
42607: ARRAY
42608: PUSH
42609: LD_INT 2
42611: ARRAY
42612: PPUSH
42613: CALL_OW 488
42617: NOT
42618: PUSH
42619: LD_VAR 0 12
42623: PUSH
42624: LD_VAR 0 7
42628: ARRAY
42629: PUSH
42630: LD_INT 1
42632: ARRAY
42633: PPUSH
42634: LD_VAR 0 12
42638: PUSH
42639: LD_VAR 0 7
42643: ARRAY
42644: PUSH
42645: LD_INT 2
42647: ARRAY
42648: PPUSH
42649: CALL_OW 428
42653: PUSH
42654: LD_INT 0
42656: GREATER
42657: OR
42658: PUSH
42659: LD_VAR 0 12
42663: PUSH
42664: LD_VAR 0 7
42668: ARRAY
42669: PUSH
42670: LD_INT 1
42672: ARRAY
42673: PPUSH
42674: LD_VAR 0 12
42678: PUSH
42679: LD_VAR 0 7
42683: ARRAY
42684: PUSH
42685: LD_INT 2
42687: ARRAY
42688: PPUSH
42689: CALL_OW 351
42693: OR
42694: IFFALSE 42700
// exit ;
42696: POP
42697: POP
42698: GO 42992
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42700: LD_ADDR_VAR 0 8
42704: PUSH
42705: LD_VAR 0 12
42709: PUSH
42710: LD_VAR 0 7
42714: ARRAY
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PPUSH
42720: LD_VAR 0 12
42724: PUSH
42725: LD_VAR 0 7
42729: ARRAY
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: CALL_OW 546
42739: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42740: LD_VAR 0 8
42744: PUSH
42745: LD_INT 1
42747: ARRAY
42748: PUSH
42749: LD_VAR 0 8
42753: PUSH
42754: LD_INT 2
42756: ARRAY
42757: PUSH
42758: LD_VAR 0 13
42762: PUSH
42763: LD_INT 2
42765: PLUS
42766: GREATER
42767: OR
42768: PUSH
42769: LD_VAR 0 8
42773: PUSH
42774: LD_INT 2
42776: ARRAY
42777: PUSH
42778: LD_VAR 0 13
42782: PUSH
42783: LD_INT 2
42785: MINUS
42786: LESS
42787: OR
42788: PUSH
42789: LD_VAR 0 8
42793: PUSH
42794: LD_INT 3
42796: ARRAY
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 8
42803: PUSH
42804: LD_INT 9
42806: PUSH
42807: LD_INT 10
42809: PUSH
42810: LD_INT 11
42812: PUSH
42813: LD_INT 12
42815: PUSH
42816: LD_INT 13
42818: PUSH
42819: LD_INT 16
42821: PUSH
42822: LD_INT 17
42824: PUSH
42825: LD_INT 18
42827: PUSH
42828: LD_INT 19
42830: PUSH
42831: LD_INT 20
42833: PUSH
42834: LD_INT 21
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: IN
42852: NOT
42853: OR
42854: PUSH
42855: LD_VAR 0 8
42859: PUSH
42860: LD_INT 5
42862: ARRAY
42863: NOT
42864: OR
42865: PUSH
42866: LD_VAR 0 8
42870: PUSH
42871: LD_INT 6
42873: ARRAY
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 7
42883: PUSH
42884: LD_INT 9
42886: PUSH
42887: LD_INT 10
42889: PUSH
42890: LD_INT 11
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: IN
42901: NOT
42902: OR
42903: IFFALSE 42909
// exit ;
42905: POP
42906: POP
42907: GO 42992
// end ;
42909: GO 42580
42911: POP
42912: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42913: LD_VAR 0 9
42917: PPUSH
42918: LD_VAR 0 3
42922: PPUSH
42923: LD_VAR 0 4
42927: PPUSH
42928: LD_INT 20
42930: PPUSH
42931: CALL 34938 0 4
42935: PUSH
42936: LD_INT 4
42938: ARRAY
42939: IFFALSE 42943
// exit ;
42941: GO 42992
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42943: LD_VAR 0 2
42947: PUSH
42948: LD_INT 29
42950: PUSH
42951: LD_INT 30
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: IN
42958: PUSH
42959: LD_VAR 0 3
42963: PPUSH
42964: LD_VAR 0 4
42968: PPUSH
42969: LD_VAR 0 9
42973: PPUSH
42974: CALL_OW 440
42978: NOT
42979: AND
42980: IFFALSE 42984
// exit ;
42982: GO 42992
// result := true ;
42984: LD_ADDR_VAR 0 6
42988: PUSH
42989: LD_INT 1
42991: ST_TO_ADDR
// end ;
42992: LD_VAR 0 6
42996: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
43015: PPUSH
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
// result = [ ] ;
43057: LD_ADDR_VAR 0 7
43061: PUSH
43062: EMPTY
43063: ST_TO_ADDR
// temp_list = [ ] ;
43064: LD_ADDR_VAR 0 9
43068: PUSH
43069: EMPTY
43070: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43071: LD_VAR 0 4
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 4
43090: PUSH
43091: LD_INT 5
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: IN
43102: NOT
43103: PUSH
43104: LD_VAR 0 1
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: IN
43119: PUSH
43120: LD_VAR 0 5
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: IN
43139: NOT
43140: AND
43141: OR
43142: IFFALSE 43146
// exit ;
43144: GO 61537
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43146: LD_VAR 0 1
43150: PUSH
43151: LD_INT 6
43153: PUSH
43154: LD_INT 7
43156: PUSH
43157: LD_INT 8
43159: PUSH
43160: LD_INT 13
43162: PUSH
43163: LD_INT 12
43165: PUSH
43166: LD_INT 15
43168: PUSH
43169: LD_INT 11
43171: PUSH
43172: LD_INT 14
43174: PUSH
43175: LD_INT 10
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: IN
43189: IFFALSE 43199
// btype = b_lab ;
43191: LD_ADDR_VAR 0 1
43195: PUSH
43196: LD_INT 6
43198: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43199: LD_VAR 0 6
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: IN
43218: NOT
43219: PUSH
43220: LD_VAR 0 1
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 6
43239: PUSH
43240: LD_INT 36
43242: PUSH
43243: LD_INT 4
43245: PUSH
43246: LD_INT 5
43248: PUSH
43249: LD_INT 31
43251: PUSH
43252: LD_INT 32
43254: PUSH
43255: LD_INT 33
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: IN
43271: NOT
43272: PUSH
43273: LD_VAR 0 6
43277: PUSH
43278: LD_INT 1
43280: EQUAL
43281: AND
43282: OR
43283: PUSH
43284: LD_VAR 0 1
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: IN
43299: NOT
43300: PUSH
43301: LD_VAR 0 6
43305: PUSH
43306: LD_INT 2
43308: EQUAL
43309: AND
43310: OR
43311: IFFALSE 43321
// mode = 0 ;
43313: LD_ADDR_VAR 0 6
43317: PUSH
43318: LD_INT 0
43320: ST_TO_ADDR
// case mode of 0 :
43321: LD_VAR 0 6
43325: PUSH
43326: LD_INT 0
43328: DOUBLE
43329: EQUAL
43330: IFTRUE 43334
43332: GO 54787
43334: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43335: LD_ADDR_VAR 0 11
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 3
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 12
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43724: LD_ADDR_VAR 0 13
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 3
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: LD_INT 3
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43923: LD_ADDR_VAR 0 14
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 3
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44119: LD_ADDR_VAR 0 15
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44312: LD_ADDR_VAR 0 16
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44505: LD_ADDR_VAR 0 17
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44735: LD_ADDR_VAR 0 18
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44965: LD_ADDR_VAR 0 19
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45195: LD_ADDR_VAR 0 20
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45425: LD_ADDR_VAR 0 21
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45655: LD_ADDR_VAR 0 22
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45885: LD_ADDR_VAR 0 23
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46165: LD_ADDR_VAR 0 24
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46441: LD_ADDR_VAR 0 25
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46715: LD_ADDR_VAR 0 26
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46991: LD_ADDR_VAR 0 27
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47271: LD_ADDR_VAR 0 28
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47553: LD_ADDR_VAR 0 29
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: LD_INT 3
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47832: LD_ADDR_VAR 0 30
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48110: LD_ADDR_VAR 0 31
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48388: LD_ADDR_VAR 0 32
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48666: LD_ADDR_VAR 0 33
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 3
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48945: LD_ADDR_VAR 0 34
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49225: LD_ADDR_VAR 0 35
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49337: LD_ADDR_VAR 0 36
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49449: LD_ADDR_VAR 0 37
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49561: LD_ADDR_VAR 0 38
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49673: LD_ADDR_VAR 0 39
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49785: LD_ADDR_VAR 0 40
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49897: LD_ADDR_VAR 0 41
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50247: LD_ADDR_VAR 0 42
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 3
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50597: LD_ADDR_VAR 0 43
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50945: LD_ADDR_VAR 0 44
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51295: LD_ADDR_VAR 0 45
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51645: LD_ADDR_VAR 0 46
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51993: LD_ADDR_VAR 0 47
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52144: LD_ADDR_VAR 0 48
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52291: LD_ADDR_VAR 0 49
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52435: LD_ADDR_VAR 0 50
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52579: LD_ADDR_VAR 0 51
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52726: LD_ADDR_VAR 0 52
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52877: LD_ADDR_VAR 0 53
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53107: LD_ADDR_VAR 0 54
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53337: LD_ADDR_VAR 0 55
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53567: LD_ADDR_VAR 0 56
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53797: LD_ADDR_VAR 0 57
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54027: LD_ADDR_VAR 0 58
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54257: LD_ADDR_VAR 0 59
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54345: LD_ADDR_VAR 0 60
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54433: LD_ADDR_VAR 0 61
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54521: LD_ADDR_VAR 0 62
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54609: LD_ADDR_VAR 0 63
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54697: LD_ADDR_VAR 0 64
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// end ; 1 :
54785: GO 60682
54787: LD_INT 1
54789: DOUBLE
54790: EQUAL
54791: IFTRUE 54795
54793: GO 57418
54795: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54796: LD_ADDR_VAR 0 11
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54840: LD_ADDR_VAR 0 12
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54881: LD_ADDR_VAR 0 13
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54921: LD_ADDR_VAR 0 14
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54962: LD_ADDR_VAR 0 15
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55006: LD_ADDR_VAR 0 16
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55052: LD_ADDR_VAR 0 17
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55096: LD_ADDR_VAR 0 18
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55137: LD_ADDR_VAR 0 19
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55177: LD_ADDR_VAR 0 20
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55218: LD_ADDR_VAR 0 21
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55262: LD_ADDR_VAR 0 22
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 3
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55308: LD_ADDR_VAR 0 23
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 4
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55352: LD_ADDR_VAR 0 24
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 4
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55393: LD_ADDR_VAR 0 25
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 4
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55433: LD_ADDR_VAR 0 26
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 4
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55474: LD_ADDR_VAR 0 27
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55518: LD_ADDR_VAR 0 28
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: LD_INT 4
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55564: LD_ADDR_VAR 0 29
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 4
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 4
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 5
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 6
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 6
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 5
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55719: LD_ADDR_VAR 0 30
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 4
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 4
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 5
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 5
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 6
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 6
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55862: LD_ADDR_VAR 0 31
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 4
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 4
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 4
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 5
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 5
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: LD_INT 5
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 6
55959: PUSH
55960: LD_INT 5
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 6
55969: PUSH
55970: LD_INT 6
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 5
55979: PUSH
55980: LD_INT 6
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56001: LD_ADDR_VAR 0 32
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 4
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 4
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 5
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 5
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 6
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 6
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 5
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56144: LD_ADDR_VAR 0 33
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 4
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 5
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 5
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 6
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 6
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56299: LD_ADDR_VAR 0 34
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: LD_INT 4
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 4
56354: NEG
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 4
56366: NEG
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 4
56378: NEG
56379: PUSH
56380: LD_INT 5
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: NEG
56391: PUSH
56392: LD_INT 4
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 5
56402: NEG
56403: PUSH
56404: LD_INT 5
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 5
56414: NEG
56415: PUSH
56416: LD_INT 6
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 6
56426: NEG
56427: PUSH
56428: LD_INT 5
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 6
56438: NEG
56439: PUSH
56440: LD_INT 6
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56462: LD_ADDR_VAR 0 41
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56506: LD_ADDR_VAR 0 42
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56547: LD_ADDR_VAR 0 43
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56587: LD_ADDR_VAR 0 44
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56628: LD_ADDR_VAR 0 45
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56672: LD_ADDR_VAR 0 46
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56718: LD_ADDR_VAR 0 47
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 3
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56751: LD_ADDR_VAR 0 48
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56782: LD_ADDR_VAR 0 49
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56811: LD_ADDR_VAR 0 50
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 3
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56840: LD_ADDR_VAR 0 51
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56871: LD_ADDR_VAR 0 52
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56904: LD_ADDR_VAR 0 53
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56948: LD_ADDR_VAR 0 54
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56989: LD_ADDR_VAR 0 55
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: LIST
57028: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57029: LD_ADDR_VAR 0 56
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57070: LD_ADDR_VAR 0 57
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57114: LD_ADDR_VAR 0 58
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: LD_INT 3
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57160: LD_ADDR_VAR 0 59
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57204: LD_ADDR_VAR 0 60
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57245: LD_ADDR_VAR 0 61
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57285: LD_ADDR_VAR 0 62
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57326: LD_ADDR_VAR 0 63
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57370: LD_ADDR_VAR 0 64
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: ST_TO_ADDR
// end ; 2 :
57416: GO 60682
57418: LD_INT 2
57420: DOUBLE
57421: EQUAL
57422: IFTRUE 57426
57424: GO 60681
57426: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57427: LD_ADDR_VAR 0 29
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 5
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 4
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 4
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 4
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 5
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 5
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 4
57789: NEG
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 4
57812: NEG
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: NEG
57825: PUSH
57826: LD_INT 5
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 4
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 5
57872: NEG
57873: PUSH
57874: LD_INT 4
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 5
57884: NEG
57885: PUSH
57886: LD_INT 5
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 5
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: NEG
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57965: LD_ADDR_VAR 0 30
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: LD_INT 4
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: LD_INT 4
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 5
58002: PUSH
58003: LD_INT 5
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: PUSH
58013: LD_INT 5
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: LD_INT 4
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 5
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 5
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 5
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 5
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 5
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: NEG
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 4
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 5
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 4
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 4
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 5
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58512: LD_ADDR_VAR 0 31
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 5
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 5
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 4
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 5
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 2
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 4
58714: NEG
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: LD_INT 5
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: NEG
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 5
58774: NEG
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: NEG
58787: PUSH
58788: LD_INT 5
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: LD_INT 5
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 5
58810: NEG
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 4
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 4
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 5
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 4
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 3
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59062: LD_ADDR_VAR 0 32
59066: PUSH
59067: LD_INT 4
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 4
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 3
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 4
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 5
59125: NEG
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 5
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 5
59148: NEG
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: NEG
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: NEG
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: LD_INT 4
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 5
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 4
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 4
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 5
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 5
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 4
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: LD_INT 4
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 5
59494: PUSH
59495: LD_INT 4
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: PUSH
59505: LD_INT 5
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: LD_INT 5
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: LD_INT 5
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59609: LD_ADDR_VAR 0 33
59613: PUSH
59614: LD_INT 4
59616: NEG
59617: PUSH
59618: LD_INT 4
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 4
59628: NEG
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: NEG
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 4
59664: NEG
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 5
59676: NEG
59677: PUSH
59678: LD_INT 4
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 5
59688: NEG
59689: PUSH
59690: LD_INT 5
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 5
59712: NEG
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 3
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 3
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 4
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 4
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 4
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 5
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 5
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 5
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 4
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 4
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 5
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 4
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 5
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60147: LD_ADDR_VAR 0 34
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 4
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 5
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 4
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 4
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 5
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: LD_INT 5
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 4
60349: PUSH
60350: LD_INT 4
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: PUSH
60370: LD_INT 4
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 5
60379: PUSH
60380: LD_INT 5
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 5
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 5
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: NEG
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: ST_TO_ADDR
// end ; end ;
60679: GO 60682
60681: POP
// case btype of b_depot , b_warehouse :
60682: LD_VAR 0 1
60686: PUSH
60687: LD_INT 0
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60701
60693: LD_INT 1
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60701
60699: GO 60902
60701: POP
// case nation of nation_american :
60702: LD_VAR 0 5
60706: PUSH
60707: LD_INT 1
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60771
60715: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60716: LD_ADDR_VAR 0 9
60720: PUSH
60721: LD_VAR 0 11
60725: PUSH
60726: LD_VAR 0 12
60730: PUSH
60731: LD_VAR 0 13
60735: PUSH
60736: LD_VAR 0 14
60740: PUSH
60741: LD_VAR 0 15
60745: PUSH
60746: LD_VAR 0 16
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: LD_VAR 0 4
60763: PUSH
60764: LD_INT 1
60766: PLUS
60767: ARRAY
60768: ST_TO_ADDR
60769: GO 60900
60771: LD_INT 2
60773: DOUBLE
60774: EQUAL
60775: IFTRUE 60779
60777: GO 60835
60779: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60780: LD_ADDR_VAR 0 9
60784: PUSH
60785: LD_VAR 0 17
60789: PUSH
60790: LD_VAR 0 18
60794: PUSH
60795: LD_VAR 0 19
60799: PUSH
60800: LD_VAR 0 20
60804: PUSH
60805: LD_VAR 0 21
60809: PUSH
60810: LD_VAR 0 22
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: PUSH
60823: LD_VAR 0 4
60827: PUSH
60828: LD_INT 1
60830: PLUS
60831: ARRAY
60832: ST_TO_ADDR
60833: GO 60900
60835: LD_INT 3
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60843
60841: GO 60899
60843: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60844: LD_ADDR_VAR 0 9
60848: PUSH
60849: LD_VAR 0 23
60853: PUSH
60854: LD_VAR 0 24
60858: PUSH
60859: LD_VAR 0 25
60863: PUSH
60864: LD_VAR 0 26
60868: PUSH
60869: LD_VAR 0 27
60873: PUSH
60874: LD_VAR 0 28
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: PUSH
60887: LD_VAR 0 4
60891: PUSH
60892: LD_INT 1
60894: PLUS
60895: ARRAY
60896: ST_TO_ADDR
60897: GO 60900
60899: POP
60900: GO 61455
60902: LD_INT 2
60904: DOUBLE
60905: EQUAL
60906: IFTRUE 60916
60908: LD_INT 3
60910: DOUBLE
60911: EQUAL
60912: IFTRUE 60916
60914: GO 60972
60916: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60917: LD_ADDR_VAR 0 9
60921: PUSH
60922: LD_VAR 0 29
60926: PUSH
60927: LD_VAR 0 30
60931: PUSH
60932: LD_VAR 0 31
60936: PUSH
60937: LD_VAR 0 32
60941: PUSH
60942: LD_VAR 0 33
60946: PUSH
60947: LD_VAR 0 34
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: PUSH
60960: LD_VAR 0 4
60964: PUSH
60965: LD_INT 1
60967: PLUS
60968: ARRAY
60969: ST_TO_ADDR
60970: GO 61455
60972: LD_INT 16
60974: DOUBLE
60975: EQUAL
60976: IFTRUE 61034
60978: LD_INT 17
60980: DOUBLE
60981: EQUAL
60982: IFTRUE 61034
60984: LD_INT 18
60986: DOUBLE
60987: EQUAL
60988: IFTRUE 61034
60990: LD_INT 19
60992: DOUBLE
60993: EQUAL
60994: IFTRUE 61034
60996: LD_INT 22
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61034
61002: LD_INT 20
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61034
61008: LD_INT 21
61010: DOUBLE
61011: EQUAL
61012: IFTRUE 61034
61014: LD_INT 23
61016: DOUBLE
61017: EQUAL
61018: IFTRUE 61034
61020: LD_INT 24
61022: DOUBLE
61023: EQUAL
61024: IFTRUE 61034
61026: LD_INT 25
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61034
61032: GO 61090
61034: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61035: LD_ADDR_VAR 0 9
61039: PUSH
61040: LD_VAR 0 35
61044: PUSH
61045: LD_VAR 0 36
61049: PUSH
61050: LD_VAR 0 37
61054: PUSH
61055: LD_VAR 0 38
61059: PUSH
61060: LD_VAR 0 39
61064: PUSH
61065: LD_VAR 0 40
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: LD_VAR 0 4
61082: PUSH
61083: LD_INT 1
61085: PLUS
61086: ARRAY
61087: ST_TO_ADDR
61088: GO 61455
61090: LD_INT 6
61092: DOUBLE
61093: EQUAL
61094: IFTRUE 61146
61096: LD_INT 7
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61146
61102: LD_INT 8
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61146
61108: LD_INT 13
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61146
61114: LD_INT 12
61116: DOUBLE
61117: EQUAL
61118: IFTRUE 61146
61120: LD_INT 15
61122: DOUBLE
61123: EQUAL
61124: IFTRUE 61146
61126: LD_INT 11
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61146
61132: LD_INT 14
61134: DOUBLE
61135: EQUAL
61136: IFTRUE 61146
61138: LD_INT 10
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61146
61144: GO 61202
61146: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61147: LD_ADDR_VAR 0 9
61151: PUSH
61152: LD_VAR 0 41
61156: PUSH
61157: LD_VAR 0 42
61161: PUSH
61162: LD_VAR 0 43
61166: PUSH
61167: LD_VAR 0 44
61171: PUSH
61172: LD_VAR 0 45
61176: PUSH
61177: LD_VAR 0 46
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: LD_VAR 0 4
61194: PUSH
61195: LD_INT 1
61197: PLUS
61198: ARRAY
61199: ST_TO_ADDR
61200: GO 61455
61202: LD_INT 36
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61210
61208: GO 61266
61210: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61211: LD_ADDR_VAR 0 9
61215: PUSH
61216: LD_VAR 0 47
61220: PUSH
61221: LD_VAR 0 48
61225: PUSH
61226: LD_VAR 0 49
61230: PUSH
61231: LD_VAR 0 50
61235: PUSH
61236: LD_VAR 0 51
61240: PUSH
61241: LD_VAR 0 52
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: PUSH
61254: LD_VAR 0 4
61258: PUSH
61259: LD_INT 1
61261: PLUS
61262: ARRAY
61263: ST_TO_ADDR
61264: GO 61455
61266: LD_INT 4
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61292
61272: LD_INT 5
61274: DOUBLE
61275: EQUAL
61276: IFTRUE 61292
61278: LD_INT 34
61280: DOUBLE
61281: EQUAL
61282: IFTRUE 61292
61284: LD_INT 37
61286: DOUBLE
61287: EQUAL
61288: IFTRUE 61292
61290: GO 61348
61292: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61293: LD_ADDR_VAR 0 9
61297: PUSH
61298: LD_VAR 0 53
61302: PUSH
61303: LD_VAR 0 54
61307: PUSH
61308: LD_VAR 0 55
61312: PUSH
61313: LD_VAR 0 56
61317: PUSH
61318: LD_VAR 0 57
61322: PUSH
61323: LD_VAR 0 58
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 4
61340: PUSH
61341: LD_INT 1
61343: PLUS
61344: ARRAY
61345: ST_TO_ADDR
61346: GO 61455
61348: LD_INT 31
61350: DOUBLE
61351: EQUAL
61352: IFTRUE 61398
61354: LD_INT 32
61356: DOUBLE
61357: EQUAL
61358: IFTRUE 61398
61360: LD_INT 33
61362: DOUBLE
61363: EQUAL
61364: IFTRUE 61398
61366: LD_INT 27
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61398
61372: LD_INT 26
61374: DOUBLE
61375: EQUAL
61376: IFTRUE 61398
61378: LD_INT 28
61380: DOUBLE
61381: EQUAL
61382: IFTRUE 61398
61384: LD_INT 29
61386: DOUBLE
61387: EQUAL
61388: IFTRUE 61398
61390: LD_INT 30
61392: DOUBLE
61393: EQUAL
61394: IFTRUE 61398
61396: GO 61454
61398: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61399: LD_ADDR_VAR 0 9
61403: PUSH
61404: LD_VAR 0 59
61408: PUSH
61409: LD_VAR 0 60
61413: PUSH
61414: LD_VAR 0 61
61418: PUSH
61419: LD_VAR 0 62
61423: PUSH
61424: LD_VAR 0 63
61428: PUSH
61429: LD_VAR 0 64
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: PUSH
61442: LD_VAR 0 4
61446: PUSH
61447: LD_INT 1
61449: PLUS
61450: ARRAY
61451: ST_TO_ADDR
61452: GO 61455
61454: POP
// temp_list2 = [ ] ;
61455: LD_ADDR_VAR 0 10
61459: PUSH
61460: EMPTY
61461: ST_TO_ADDR
// for i in temp_list do
61462: LD_ADDR_VAR 0 8
61466: PUSH
61467: LD_VAR 0 9
61471: PUSH
61472: FOR_IN
61473: IFFALSE 61525
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61475: LD_ADDR_VAR 0 10
61479: PUSH
61480: LD_VAR 0 10
61484: PUSH
61485: LD_VAR 0 8
61489: PUSH
61490: LD_INT 1
61492: ARRAY
61493: PUSH
61494: LD_VAR 0 2
61498: PLUS
61499: PUSH
61500: LD_VAR 0 8
61504: PUSH
61505: LD_INT 2
61507: ARRAY
61508: PUSH
61509: LD_VAR 0 3
61513: PLUS
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: ADD
61522: ST_TO_ADDR
61523: GO 61472
61525: POP
61526: POP
// result = temp_list2 ;
61527: LD_ADDR_VAR 0 7
61531: PUSH
61532: LD_VAR 0 10
61536: ST_TO_ADDR
// end ;
61537: LD_VAR 0 7
61541: RET
// export function EnemyInRange ( unit , dist ) ; begin
61542: LD_INT 0
61544: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61545: LD_ADDR_VAR 0 3
61549: PUSH
61550: LD_VAR 0 1
61554: PPUSH
61555: CALL_OW 255
61559: PPUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: CALL_OW 250
61569: PPUSH
61570: LD_VAR 0 1
61574: PPUSH
61575: CALL_OW 251
61579: PPUSH
61580: LD_VAR 0 2
61584: PPUSH
61585: CALL 34938 0 4
61589: PUSH
61590: LD_INT 4
61592: ARRAY
61593: ST_TO_ADDR
// end ;
61594: LD_VAR 0 3
61598: RET
// export function PlayerSeeMe ( unit ) ; begin
61599: LD_INT 0
61601: PPUSH
// result := See ( your_side , unit ) ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: LD_OWVAR 2
61611: PPUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: CALL_OW 292
61621: ST_TO_ADDR
// end ;
61622: LD_VAR 0 2
61626: RET
// export function ReverseDir ( unit ) ; begin
61627: LD_INT 0
61629: PPUSH
// if not unit then
61630: LD_VAR 0 1
61634: NOT
61635: IFFALSE 61639
// exit ;
61637: GO 61662
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61639: LD_ADDR_VAR 0 2
61643: PUSH
61644: LD_VAR 0 1
61648: PPUSH
61649: CALL_OW 254
61653: PUSH
61654: LD_INT 3
61656: PLUS
61657: PUSH
61658: LD_INT 6
61660: MOD
61661: ST_TO_ADDR
// end ;
61662: LD_VAR 0 2
61666: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
// if not hexes then
61674: LD_VAR 0 2
61678: NOT
61679: IFFALSE 61683
// exit ;
61681: GO 61831
// dist := 9999 ;
61683: LD_ADDR_VAR 0 5
61687: PUSH
61688: LD_INT 9999
61690: ST_TO_ADDR
// for i = 1 to hexes do
61691: LD_ADDR_VAR 0 4
61695: PUSH
61696: DOUBLE
61697: LD_INT 1
61699: DEC
61700: ST_TO_ADDR
61701: LD_VAR 0 2
61705: PUSH
61706: FOR_TO
61707: IFFALSE 61819
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61709: LD_VAR 0 1
61713: PPUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_VAR 0 4
61723: ARRAY
61724: PUSH
61725: LD_INT 1
61727: ARRAY
61728: PPUSH
61729: LD_VAR 0 2
61733: PUSH
61734: LD_VAR 0 4
61738: ARRAY
61739: PUSH
61740: LD_INT 2
61742: ARRAY
61743: PPUSH
61744: CALL_OW 297
61748: PUSH
61749: LD_VAR 0 5
61753: LESS
61754: IFFALSE 61817
// begin hex := hexes [ i ] ;
61756: LD_ADDR_VAR 0 7
61760: PUSH
61761: LD_VAR 0 2
61765: PUSH
61766: LD_VAR 0 4
61770: ARRAY
61771: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61772: LD_ADDR_VAR 0 5
61776: PUSH
61777: LD_VAR 0 1
61781: PPUSH
61782: LD_VAR 0 2
61786: PUSH
61787: LD_VAR 0 4
61791: ARRAY
61792: PUSH
61793: LD_INT 1
61795: ARRAY
61796: PPUSH
61797: LD_VAR 0 2
61801: PUSH
61802: LD_VAR 0 4
61806: ARRAY
61807: PUSH
61808: LD_INT 2
61810: ARRAY
61811: PPUSH
61812: CALL_OW 297
61816: ST_TO_ADDR
// end ; end ;
61817: GO 61706
61819: POP
61820: POP
// result := hex ;
61821: LD_ADDR_VAR 0 3
61825: PUSH
61826: LD_VAR 0 7
61830: ST_TO_ADDR
// end ;
61831: LD_VAR 0 3
61835: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61836: LD_INT 0
61838: PPUSH
61839: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61840: LD_VAR 0 1
61844: NOT
61845: PUSH
61846: LD_VAR 0 1
61850: PUSH
61851: LD_INT 21
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 23
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PPUSH
61875: CALL_OW 69
61879: IN
61880: NOT
61881: OR
61882: IFFALSE 61886
// exit ;
61884: GO 61933
// for i = 1 to 3 do
61886: LD_ADDR_VAR 0 3
61890: PUSH
61891: DOUBLE
61892: LD_INT 1
61894: DEC
61895: ST_TO_ADDR
61896: LD_INT 3
61898: PUSH
61899: FOR_TO
61900: IFFALSE 61931
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61902: LD_VAR 0 1
61906: PPUSH
61907: CALL_OW 250
61911: PPUSH
61912: LD_VAR 0 1
61916: PPUSH
61917: CALL_OW 251
61921: PPUSH
61922: LD_INT 1
61924: PPUSH
61925: CALL_OW 453
61929: GO 61899
61931: POP
61932: POP
// end ;
61933: LD_VAR 0 2
61937: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61938: LD_INT 0
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
61945: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61946: LD_VAR 0 1
61950: NOT
61951: PUSH
61952: LD_VAR 0 2
61956: NOT
61957: OR
61958: PUSH
61959: LD_VAR 0 1
61963: PPUSH
61964: CALL_OW 314
61968: OR
61969: IFFALSE 61973
// exit ;
61971: GO 62414
// x := GetX ( enemy_unit ) ;
61973: LD_ADDR_VAR 0 7
61977: PUSH
61978: LD_VAR 0 2
61982: PPUSH
61983: CALL_OW 250
61987: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61988: LD_ADDR_VAR 0 8
61992: PUSH
61993: LD_VAR 0 2
61997: PPUSH
61998: CALL_OW 251
62002: ST_TO_ADDR
// if not x or not y then
62003: LD_VAR 0 7
62007: NOT
62008: PUSH
62009: LD_VAR 0 8
62013: NOT
62014: OR
62015: IFFALSE 62019
// exit ;
62017: GO 62414
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62019: LD_ADDR_VAR 0 6
62023: PUSH
62024: LD_VAR 0 7
62028: PPUSH
62029: LD_INT 0
62031: PPUSH
62032: LD_INT 4
62034: PPUSH
62035: CALL_OW 272
62039: PUSH
62040: LD_VAR 0 8
62044: PPUSH
62045: LD_INT 0
62047: PPUSH
62048: LD_INT 4
62050: PPUSH
62051: CALL_OW 273
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_VAR 0 7
62064: PPUSH
62065: LD_INT 1
62067: PPUSH
62068: LD_INT 4
62070: PPUSH
62071: CALL_OW 272
62075: PUSH
62076: LD_VAR 0 8
62080: PPUSH
62081: LD_INT 1
62083: PPUSH
62084: LD_INT 4
62086: PPUSH
62087: CALL_OW 273
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_VAR 0 7
62100: PPUSH
62101: LD_INT 2
62103: PPUSH
62104: LD_INT 4
62106: PPUSH
62107: CALL_OW 272
62111: PUSH
62112: LD_VAR 0 8
62116: PPUSH
62117: LD_INT 2
62119: PPUSH
62120: LD_INT 4
62122: PPUSH
62123: CALL_OW 273
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_VAR 0 7
62136: PPUSH
62137: LD_INT 3
62139: PPUSH
62140: LD_INT 4
62142: PPUSH
62143: CALL_OW 272
62147: PUSH
62148: LD_VAR 0 8
62152: PPUSH
62153: LD_INT 3
62155: PPUSH
62156: LD_INT 4
62158: PPUSH
62159: CALL_OW 273
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_VAR 0 7
62172: PPUSH
62173: LD_INT 4
62175: PPUSH
62176: LD_INT 4
62178: PPUSH
62179: CALL_OW 272
62183: PUSH
62184: LD_VAR 0 8
62188: PPUSH
62189: LD_INT 4
62191: PPUSH
62192: LD_INT 4
62194: PPUSH
62195: CALL_OW 273
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_VAR 0 7
62208: PPUSH
62209: LD_INT 5
62211: PPUSH
62212: LD_INT 4
62214: PPUSH
62215: CALL_OW 272
62219: PUSH
62220: LD_VAR 0 8
62224: PPUSH
62225: LD_INT 5
62227: PPUSH
62228: LD_INT 4
62230: PPUSH
62231: CALL_OW 273
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: ST_TO_ADDR
// for i = tmp downto 1 do
62248: LD_ADDR_VAR 0 4
62252: PUSH
62253: DOUBLE
62254: LD_VAR 0 6
62258: INC
62259: ST_TO_ADDR
62260: LD_INT 1
62262: PUSH
62263: FOR_DOWNTO
62264: IFFALSE 62365
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62266: LD_VAR 0 6
62270: PUSH
62271: LD_VAR 0 4
62275: ARRAY
62276: PUSH
62277: LD_INT 1
62279: ARRAY
62280: PPUSH
62281: LD_VAR 0 6
62285: PUSH
62286: LD_VAR 0 4
62290: ARRAY
62291: PUSH
62292: LD_INT 2
62294: ARRAY
62295: PPUSH
62296: CALL_OW 488
62300: NOT
62301: PUSH
62302: LD_VAR 0 6
62306: PUSH
62307: LD_VAR 0 4
62311: ARRAY
62312: PUSH
62313: LD_INT 1
62315: ARRAY
62316: PPUSH
62317: LD_VAR 0 6
62321: PUSH
62322: LD_VAR 0 4
62326: ARRAY
62327: PUSH
62328: LD_INT 2
62330: ARRAY
62331: PPUSH
62332: CALL_OW 428
62336: PUSH
62337: LD_INT 0
62339: NONEQUAL
62340: OR
62341: IFFALSE 62363
// tmp := Delete ( tmp , i ) ;
62343: LD_ADDR_VAR 0 6
62347: PUSH
62348: LD_VAR 0 6
62352: PPUSH
62353: LD_VAR 0 4
62357: PPUSH
62358: CALL_OW 3
62362: ST_TO_ADDR
62363: GO 62263
62365: POP
62366: POP
// j := GetClosestHex ( unit , tmp ) ;
62367: LD_ADDR_VAR 0 5
62371: PUSH
62372: LD_VAR 0 1
62376: PPUSH
62377: LD_VAR 0 6
62381: PPUSH
62382: CALL 61667 0 2
62386: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62387: LD_VAR 0 1
62391: PPUSH
62392: LD_VAR 0 5
62396: PUSH
62397: LD_INT 1
62399: ARRAY
62400: PPUSH
62401: LD_VAR 0 5
62405: PUSH
62406: LD_INT 2
62408: ARRAY
62409: PPUSH
62410: CALL_OW 111
// end ;
62414: LD_VAR 0 3
62418: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62419: LD_INT 0
62421: PPUSH
62422: PPUSH
62423: PPUSH
// uc_side = 0 ;
62424: LD_ADDR_OWVAR 20
62428: PUSH
62429: LD_INT 0
62431: ST_TO_ADDR
// uc_nation = 0 ;
62432: LD_ADDR_OWVAR 21
62436: PUSH
62437: LD_INT 0
62439: ST_TO_ADDR
// InitHc_All ( ) ;
62440: CALL_OW 584
// InitVc ;
62444: CALL_OW 20
// if mastodonts then
62448: LD_VAR 0 6
62452: IFFALSE 62519
// for i = 1 to mastodonts do
62454: LD_ADDR_VAR 0 11
62458: PUSH
62459: DOUBLE
62460: LD_INT 1
62462: DEC
62463: ST_TO_ADDR
62464: LD_VAR 0 6
62468: PUSH
62469: FOR_TO
62470: IFFALSE 62517
// begin vc_chassis := 31 ;
62472: LD_ADDR_OWVAR 37
62476: PUSH
62477: LD_INT 31
62479: ST_TO_ADDR
// vc_control := control_rider ;
62480: LD_ADDR_OWVAR 38
62484: PUSH
62485: LD_INT 4
62487: ST_TO_ADDR
// animal := CreateVehicle ;
62488: LD_ADDR_VAR 0 12
62492: PUSH
62493: CALL_OW 45
62497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62498: LD_VAR 0 12
62502: PPUSH
62503: LD_VAR 0 8
62507: PPUSH
62508: LD_INT 0
62510: PPUSH
62511: CALL 64707 0 3
// end ;
62515: GO 62469
62517: POP
62518: POP
// if horses then
62519: LD_VAR 0 5
62523: IFFALSE 62590
// for i = 1 to horses do
62525: LD_ADDR_VAR 0 11
62529: PUSH
62530: DOUBLE
62531: LD_INT 1
62533: DEC
62534: ST_TO_ADDR
62535: LD_VAR 0 5
62539: PUSH
62540: FOR_TO
62541: IFFALSE 62588
// begin hc_class := 21 ;
62543: LD_ADDR_OWVAR 28
62547: PUSH
62548: LD_INT 21
62550: ST_TO_ADDR
// hc_gallery :=  ;
62551: LD_ADDR_OWVAR 33
62555: PUSH
62556: LD_STRING 
62558: ST_TO_ADDR
// animal := CreateHuman ;
62559: LD_ADDR_VAR 0 12
62563: PUSH
62564: CALL_OW 44
62568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62569: LD_VAR 0 12
62573: PPUSH
62574: LD_VAR 0 8
62578: PPUSH
62579: LD_INT 0
62581: PPUSH
62582: CALL 64707 0 3
// end ;
62586: GO 62540
62588: POP
62589: POP
// if birds then
62590: LD_VAR 0 1
62594: IFFALSE 62661
// for i = 1 to birds do
62596: LD_ADDR_VAR 0 11
62600: PUSH
62601: DOUBLE
62602: LD_INT 1
62604: DEC
62605: ST_TO_ADDR
62606: LD_VAR 0 1
62610: PUSH
62611: FOR_TO
62612: IFFALSE 62659
// begin hc_class = 18 ;
62614: LD_ADDR_OWVAR 28
62618: PUSH
62619: LD_INT 18
62621: ST_TO_ADDR
// hc_gallery =  ;
62622: LD_ADDR_OWVAR 33
62626: PUSH
62627: LD_STRING 
62629: ST_TO_ADDR
// animal := CreateHuman ;
62630: LD_ADDR_VAR 0 12
62634: PUSH
62635: CALL_OW 44
62639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62640: LD_VAR 0 12
62644: PPUSH
62645: LD_VAR 0 8
62649: PPUSH
62650: LD_INT 0
62652: PPUSH
62653: CALL 64707 0 3
// end ;
62657: GO 62611
62659: POP
62660: POP
// if tigers then
62661: LD_VAR 0 2
62665: IFFALSE 62749
// for i = 1 to tigers do
62667: LD_ADDR_VAR 0 11
62671: PUSH
62672: DOUBLE
62673: LD_INT 1
62675: DEC
62676: ST_TO_ADDR
62677: LD_VAR 0 2
62681: PUSH
62682: FOR_TO
62683: IFFALSE 62747
// begin hc_class = class_tiger ;
62685: LD_ADDR_OWVAR 28
62689: PUSH
62690: LD_INT 14
62692: ST_TO_ADDR
// hc_gallery =  ;
62693: LD_ADDR_OWVAR 33
62697: PUSH
62698: LD_STRING 
62700: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62701: LD_ADDR_OWVAR 35
62705: PUSH
62706: LD_INT 7
62708: NEG
62709: PPUSH
62710: LD_INT 7
62712: PPUSH
62713: CALL_OW 12
62717: ST_TO_ADDR
// animal := CreateHuman ;
62718: LD_ADDR_VAR 0 12
62722: PUSH
62723: CALL_OW 44
62727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62728: LD_VAR 0 12
62732: PPUSH
62733: LD_VAR 0 8
62737: PPUSH
62738: LD_INT 0
62740: PPUSH
62741: CALL 64707 0 3
// end ;
62745: GO 62682
62747: POP
62748: POP
// if apemans then
62749: LD_VAR 0 3
62753: IFFALSE 62876
// for i = 1 to apemans do
62755: LD_ADDR_VAR 0 11
62759: PUSH
62760: DOUBLE
62761: LD_INT 1
62763: DEC
62764: ST_TO_ADDR
62765: LD_VAR 0 3
62769: PUSH
62770: FOR_TO
62771: IFFALSE 62874
// begin hc_class = class_apeman ;
62773: LD_ADDR_OWVAR 28
62777: PUSH
62778: LD_INT 12
62780: ST_TO_ADDR
// hc_gallery =  ;
62781: LD_ADDR_OWVAR 33
62785: PUSH
62786: LD_STRING 
62788: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62789: LD_ADDR_OWVAR 35
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PPUSH
62798: LD_INT 2
62800: PPUSH
62801: CALL_OW 12
62805: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62806: LD_ADDR_OWVAR 31
62810: PUSH
62811: LD_INT 1
62813: PPUSH
62814: LD_INT 3
62816: PPUSH
62817: CALL_OW 12
62821: PUSH
62822: LD_INT 1
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: CALL_OW 12
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// animal := CreateHuman ;
62845: LD_ADDR_VAR 0 12
62849: PUSH
62850: CALL_OW 44
62854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62855: LD_VAR 0 12
62859: PPUSH
62860: LD_VAR 0 8
62864: PPUSH
62865: LD_INT 0
62867: PPUSH
62868: CALL 64707 0 3
// end ;
62872: GO 62770
62874: POP
62875: POP
// if enchidnas then
62876: LD_VAR 0 4
62880: IFFALSE 62947
// for i = 1 to enchidnas do
62882: LD_ADDR_VAR 0 11
62886: PUSH
62887: DOUBLE
62888: LD_INT 1
62890: DEC
62891: ST_TO_ADDR
62892: LD_VAR 0 4
62896: PUSH
62897: FOR_TO
62898: IFFALSE 62945
// begin hc_class = 13 ;
62900: LD_ADDR_OWVAR 28
62904: PUSH
62905: LD_INT 13
62907: ST_TO_ADDR
// hc_gallery =  ;
62908: LD_ADDR_OWVAR 33
62912: PUSH
62913: LD_STRING 
62915: ST_TO_ADDR
// animal := CreateHuman ;
62916: LD_ADDR_VAR 0 12
62920: PUSH
62921: CALL_OW 44
62925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62926: LD_VAR 0 12
62930: PPUSH
62931: LD_VAR 0 8
62935: PPUSH
62936: LD_INT 0
62938: PPUSH
62939: CALL 64707 0 3
// end ;
62943: GO 62897
62945: POP
62946: POP
// if fishes then
62947: LD_VAR 0 7
62951: IFFALSE 63018
// for i = 1 to fishes do
62953: LD_ADDR_VAR 0 11
62957: PUSH
62958: DOUBLE
62959: LD_INT 1
62961: DEC
62962: ST_TO_ADDR
62963: LD_VAR 0 7
62967: PUSH
62968: FOR_TO
62969: IFFALSE 63016
// begin hc_class = 20 ;
62971: LD_ADDR_OWVAR 28
62975: PUSH
62976: LD_INT 20
62978: ST_TO_ADDR
// hc_gallery =  ;
62979: LD_ADDR_OWVAR 33
62983: PUSH
62984: LD_STRING 
62986: ST_TO_ADDR
// animal := CreateHuman ;
62987: LD_ADDR_VAR 0 12
62991: PUSH
62992: CALL_OW 44
62996: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62997: LD_VAR 0 12
63001: PPUSH
63002: LD_VAR 0 9
63006: PPUSH
63007: LD_INT 0
63009: PPUSH
63010: CALL 64707 0 3
// end ;
63014: GO 62968
63016: POP
63017: POP
// end ;
63018: LD_VAR 0 10
63022: RET
// export function WantHeal ( sci , unit ) ; begin
63023: LD_INT 0
63025: PPUSH
// if GetTaskList ( sci ) > 0 then
63026: LD_VAR 0 1
63030: PPUSH
63031: CALL_OW 437
63035: PUSH
63036: LD_INT 0
63038: GREATER
63039: IFFALSE 63109
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63041: LD_VAR 0 1
63045: PPUSH
63046: CALL_OW 437
63050: PUSH
63051: LD_INT 1
63053: ARRAY
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PUSH
63059: LD_STRING l
63061: EQUAL
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 437
63072: PUSH
63073: LD_INT 1
63075: ARRAY
63076: PUSH
63077: LD_INT 4
63079: ARRAY
63080: PUSH
63081: LD_VAR 0 2
63085: EQUAL
63086: AND
63087: IFFALSE 63099
// result := true else
63089: LD_ADDR_VAR 0 3
63093: PUSH
63094: LD_INT 1
63096: ST_TO_ADDR
63097: GO 63107
// result := false ;
63099: LD_ADDR_VAR 0 3
63103: PUSH
63104: LD_INT 0
63106: ST_TO_ADDR
// end else
63107: GO 63117
// result := false ;
63109: LD_ADDR_VAR 0 3
63113: PUSH
63114: LD_INT 0
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 3
63121: RET
// export function HealTarget ( sci ) ; begin
63122: LD_INT 0
63124: PPUSH
// if not sci then
63125: LD_VAR 0 1
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63199
// result := 0 ;
63134: LD_ADDR_VAR 0 2
63138: PUSH
63139: LD_INT 0
63141: ST_TO_ADDR
// if GetTaskList ( sci ) then
63142: LD_VAR 0 1
63146: PPUSH
63147: CALL_OW 437
63151: IFFALSE 63199
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63153: LD_VAR 0 1
63157: PPUSH
63158: CALL_OW 437
63162: PUSH
63163: LD_INT 1
63165: ARRAY
63166: PUSH
63167: LD_INT 1
63169: ARRAY
63170: PUSH
63171: LD_STRING l
63173: EQUAL
63174: IFFALSE 63199
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63176: LD_ADDR_VAR 0 2
63180: PUSH
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 437
63190: PUSH
63191: LD_INT 1
63193: ARRAY
63194: PUSH
63195: LD_INT 4
63197: ARRAY
63198: ST_TO_ADDR
// end ;
63199: LD_VAR 0 2
63203: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63204: LD_INT 0
63206: PPUSH
63207: PPUSH
63208: PPUSH
63209: PPUSH
// if not base_units then
63210: LD_VAR 0 1
63214: NOT
63215: IFFALSE 63219
// exit ;
63217: GO 63306
// result := false ;
63219: LD_ADDR_VAR 0 2
63223: PUSH
63224: LD_INT 0
63226: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63227: LD_ADDR_VAR 0 5
63231: PUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: LD_INT 21
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 72
63251: ST_TO_ADDR
// if not tmp then
63252: LD_VAR 0 5
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63306
// for i in tmp do
63261: LD_ADDR_VAR 0 3
63265: PUSH
63266: LD_VAR 0 5
63270: PUSH
63271: FOR_IN
63272: IFFALSE 63304
// begin result := EnemyInRange ( i , 22 ) ;
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_VAR 0 3
63283: PPUSH
63284: LD_INT 22
63286: PPUSH
63287: CALL 61542 0 2
63291: ST_TO_ADDR
// if result then
63292: LD_VAR 0 2
63296: IFFALSE 63302
// exit ;
63298: POP
63299: POP
63300: GO 63306
// end ;
63302: GO 63271
63304: POP
63305: POP
// end ;
63306: LD_VAR 0 2
63310: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63311: LD_INT 0
63313: PPUSH
63314: PPUSH
// if not units then
63315: LD_VAR 0 1
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63394
// result := [ ] ;
63324: LD_ADDR_VAR 0 3
63328: PUSH
63329: EMPTY
63330: ST_TO_ADDR
// for i in units do
63331: LD_ADDR_VAR 0 4
63335: PUSH
63336: LD_VAR 0 1
63340: PUSH
63341: FOR_IN
63342: IFFALSE 63392
// if GetTag ( i ) = tag then
63344: LD_VAR 0 4
63348: PPUSH
63349: CALL_OW 110
63353: PUSH
63354: LD_VAR 0 2
63358: EQUAL
63359: IFFALSE 63390
// result := Replace ( result , result + 1 , i ) ;
63361: LD_ADDR_VAR 0 3
63365: PUSH
63366: LD_VAR 0 3
63370: PPUSH
63371: LD_VAR 0 3
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: CALL_OW 1
63389: ST_TO_ADDR
63390: GO 63341
63392: POP
63393: POP
// end ;
63394: LD_VAR 0 3
63398: RET
// export function IsDriver ( un ) ; begin
63399: LD_INT 0
63401: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63402: LD_ADDR_VAR 0 2
63406: PUSH
63407: LD_VAR 0 1
63411: PUSH
63412: LD_INT 55
63414: PUSH
63415: EMPTY
63416: LIST
63417: PPUSH
63418: CALL_OW 69
63422: IN
63423: ST_TO_ADDR
// end ;
63424: LD_VAR 0 2
63428: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63429: LD_INT 0
63431: PPUSH
63432: PPUSH
// list := [ ] ;
63433: LD_ADDR_VAR 0 5
63437: PUSH
63438: EMPTY
63439: ST_TO_ADDR
// case d of 0 :
63440: LD_VAR 0 3
63444: PUSH
63445: LD_INT 0
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63453
63451: GO 63586
63453: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63454: LD_ADDR_VAR 0 5
63458: PUSH
63459: LD_VAR 0 1
63463: PUSH
63464: LD_INT 4
63466: MINUS
63467: PUSH
63468: LD_VAR 0 2
63472: PUSH
63473: LD_INT 4
63475: MINUS
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: PUSH
63485: LD_VAR 0 1
63489: PUSH
63490: LD_INT 3
63492: MINUS
63493: PUSH
63494: LD_VAR 0 2
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: PUSH
63507: LD_VAR 0 1
63511: PUSH
63512: LD_INT 4
63514: PLUS
63515: PUSH
63516: LD_VAR 0 2
63520: PUSH
63521: LD_INT 4
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: LD_VAR 0 1
63533: PUSH
63534: LD_INT 3
63536: PLUS
63537: PUSH
63538: LD_VAR 0 2
63542: PUSH
63543: LD_INT 3
63545: PLUS
63546: PUSH
63547: LD_INT 5
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: PUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_VAR 0 2
63564: PUSH
63565: LD_INT 4
63567: PLUS
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: ST_TO_ADDR
// end ; 1 :
63584: GO 64284
63586: LD_INT 1
63588: DOUBLE
63589: EQUAL
63590: IFTRUE 63594
63592: GO 63727
63594: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63595: LD_ADDR_VAR 0 5
63599: PUSH
63600: LD_VAR 0 1
63604: PUSH
63605: LD_VAR 0 2
63609: PUSH
63610: LD_INT 4
63612: MINUS
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: LD_VAR 0 1
63626: PUSH
63627: LD_INT 3
63629: MINUS
63630: PUSH
63631: LD_VAR 0 2
63635: PUSH
63636: LD_INT 3
63638: MINUS
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: LIST
63647: PUSH
63648: LD_VAR 0 1
63652: PUSH
63653: LD_INT 4
63655: MINUS
63656: PUSH
63657: LD_VAR 0 2
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: PUSH
63670: LD_VAR 0 1
63674: PUSH
63675: LD_VAR 0 2
63679: PUSH
63680: LD_INT 3
63682: PLUS
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: LD_INT 4
63699: PLUS
63700: PUSH
63701: LD_VAR 0 2
63705: PUSH
63706: LD_INT 4
63708: PLUS
63709: PUSH
63710: LD_INT 5
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: ST_TO_ADDR
// end ; 2 :
63725: GO 64284
63727: LD_INT 2
63729: DOUBLE
63730: EQUAL
63731: IFTRUE 63735
63733: GO 63864
63735: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63736: LD_ADDR_VAR 0 5
63740: PUSH
63741: LD_VAR 0 1
63745: PUSH
63746: LD_VAR 0 2
63750: PUSH
63751: LD_INT 3
63753: MINUS
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: PUSH
63763: LD_VAR 0 1
63767: PUSH
63768: LD_INT 4
63770: PLUS
63771: PUSH
63772: LD_VAR 0 2
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: LIST
63784: PUSH
63785: LD_VAR 0 1
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 4
63797: PLUS
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: PUSH
63807: LD_VAR 0 1
63811: PUSH
63812: LD_INT 3
63814: MINUS
63815: PUSH
63816: LD_VAR 0 2
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: PUSH
63829: LD_VAR 0 1
63833: PUSH
63834: LD_INT 4
63836: MINUS
63837: PUSH
63838: LD_VAR 0 2
63842: PUSH
63843: LD_INT 4
63845: MINUS
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: ST_TO_ADDR
// end ; 3 :
63862: GO 64284
63864: LD_INT 3
63866: DOUBLE
63867: EQUAL
63868: IFTRUE 63872
63870: GO 64005
63872: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63873: LD_ADDR_VAR 0 5
63877: PUSH
63878: LD_VAR 0 1
63882: PUSH
63883: LD_INT 3
63885: PLUS
63886: PUSH
63887: LD_VAR 0 2
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_INT 4
63907: PLUS
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 4
63916: PLUS
63917: PUSH
63918: LD_INT 5
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: PUSH
63926: LD_VAR 0 1
63930: PUSH
63931: LD_INT 4
63933: MINUS
63934: PUSH
63935: LD_VAR 0 2
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: LD_VAR 0 1
63952: PUSH
63953: LD_VAR 0 2
63957: PUSH
63958: LD_INT 4
63960: MINUS
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 3
63977: MINUS
63978: PUSH
63979: LD_VAR 0 2
63983: PUSH
63984: LD_INT 3
63986: MINUS
63987: PUSH
63988: LD_INT 2
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// end ; 4 :
64003: GO 64284
64005: LD_INT 4
64007: DOUBLE
64008: EQUAL
64009: IFTRUE 64013
64011: GO 64146
64013: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64014: LD_ADDR_VAR 0 5
64018: PUSH
64019: LD_VAR 0 1
64023: PUSH
64024: LD_VAR 0 2
64028: PUSH
64029: LD_INT 4
64031: PLUS
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: PUSH
64041: LD_VAR 0 1
64045: PUSH
64046: LD_INT 3
64048: PLUS
64049: PUSH
64050: LD_VAR 0 2
64054: PUSH
64055: LD_INT 3
64057: PLUS
64058: PUSH
64059: LD_INT 5
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: LIST
64066: PUSH
64067: LD_VAR 0 1
64071: PUSH
64072: LD_INT 4
64074: PLUS
64075: PUSH
64076: LD_VAR 0 2
64080: PUSH
64081: LD_INT 4
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: PUSH
64089: LD_VAR 0 1
64093: PUSH
64094: LD_VAR 0 2
64098: PUSH
64099: LD_INT 3
64101: MINUS
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 1
64115: PUSH
64116: LD_INT 4
64118: MINUS
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: LD_INT 4
64127: MINUS
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// end ; 5 :
64144: GO 64284
64146: LD_INT 5
64148: DOUBLE
64149: EQUAL
64150: IFTRUE 64154
64152: GO 64283
64154: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64155: LD_ADDR_VAR 0 5
64159: PUSH
64160: LD_VAR 0 1
64164: PUSH
64165: LD_INT 4
64167: MINUS
64168: PUSH
64169: LD_VAR 0 2
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: PUSH
64182: LD_VAR 0 1
64186: PUSH
64187: LD_VAR 0 2
64191: PUSH
64192: LD_INT 4
64194: MINUS
64195: PUSH
64196: LD_INT 3
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: PUSH
64204: LD_VAR 0 1
64208: PUSH
64209: LD_INT 4
64211: PLUS
64212: PUSH
64213: LD_VAR 0 2
64217: PUSH
64218: LD_INT 4
64220: PLUS
64221: PUSH
64222: LD_INT 5
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: PUSH
64230: LD_VAR 0 1
64234: PUSH
64235: LD_INT 3
64237: PLUS
64238: PUSH
64239: LD_VAR 0 2
64243: PUSH
64244: LD_INT 4
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: LD_VAR 0 2
64261: PUSH
64262: LD_INT 3
64264: PLUS
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// end ; end ;
64281: GO 64284
64283: POP
// result := list ;
64284: LD_ADDR_VAR 0 4
64288: PUSH
64289: LD_VAR 0 5
64293: ST_TO_ADDR
// end ;
64294: LD_VAR 0 4
64298: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64299: LD_INT 0
64301: PPUSH
64302: PPUSH
64303: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64304: LD_VAR 0 1
64308: NOT
64309: PUSH
64310: LD_VAR 0 2
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: IN
64333: NOT
64334: OR
64335: IFFALSE 64339
// exit ;
64337: GO 64431
// tmp := [ ] ;
64339: LD_ADDR_VAR 0 5
64343: PUSH
64344: EMPTY
64345: ST_TO_ADDR
// for i in units do
64346: LD_ADDR_VAR 0 4
64350: PUSH
64351: LD_VAR 0 1
64355: PUSH
64356: FOR_IN
64357: IFFALSE 64400
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64359: LD_ADDR_VAR 0 5
64363: PUSH
64364: LD_VAR 0 5
64368: PPUSH
64369: LD_VAR 0 5
64373: PUSH
64374: LD_INT 1
64376: PLUS
64377: PPUSH
64378: LD_VAR 0 4
64382: PPUSH
64383: LD_VAR 0 2
64387: PPUSH
64388: CALL_OW 259
64392: PPUSH
64393: CALL_OW 2
64397: ST_TO_ADDR
64398: GO 64356
64400: POP
64401: POP
// if not tmp then
64402: LD_VAR 0 5
64406: NOT
64407: IFFALSE 64411
// exit ;
64409: GO 64431
// result := SortListByListDesc ( units , tmp ) ;
64411: LD_ADDR_VAR 0 3
64415: PUSH
64416: LD_VAR 0 1
64420: PPUSH
64421: LD_VAR 0 5
64425: PPUSH
64426: CALL_OW 77
64430: ST_TO_ADDR
// end ;
64431: LD_VAR 0 3
64435: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64436: LD_INT 0
64438: PPUSH
64439: PPUSH
64440: PPUSH
// result := false ;
64441: LD_ADDR_VAR 0 3
64445: PUSH
64446: LD_INT 0
64448: ST_TO_ADDR
// x := GetX ( building ) ;
64449: LD_ADDR_VAR 0 4
64453: PUSH
64454: LD_VAR 0 2
64458: PPUSH
64459: CALL_OW 250
64463: ST_TO_ADDR
// y := GetY ( building ) ;
64464: LD_ADDR_VAR 0 5
64468: PUSH
64469: LD_VAR 0 2
64473: PPUSH
64474: CALL_OW 251
64478: ST_TO_ADDR
// if not building or not x or not y then
64479: LD_VAR 0 2
64483: NOT
64484: PUSH
64485: LD_VAR 0 4
64489: NOT
64490: OR
64491: PUSH
64492: LD_VAR 0 5
64496: NOT
64497: OR
64498: IFFALSE 64502
// exit ;
64500: GO 64594
// if GetTaskList ( unit ) then
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 437
64511: IFFALSE 64594
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64513: LD_STRING e
64515: PUSH
64516: LD_VAR 0 1
64520: PPUSH
64521: CALL_OW 437
64525: PUSH
64526: LD_INT 1
64528: ARRAY
64529: PUSH
64530: LD_INT 1
64532: ARRAY
64533: EQUAL
64534: PUSH
64535: LD_VAR 0 4
64539: PUSH
64540: LD_VAR 0 1
64544: PPUSH
64545: CALL_OW 437
64549: PUSH
64550: LD_INT 1
64552: ARRAY
64553: PUSH
64554: LD_INT 2
64556: ARRAY
64557: EQUAL
64558: AND
64559: PUSH
64560: LD_VAR 0 5
64564: PUSH
64565: LD_VAR 0 1
64569: PPUSH
64570: CALL_OW 437
64574: PUSH
64575: LD_INT 1
64577: ARRAY
64578: PUSH
64579: LD_INT 3
64581: ARRAY
64582: EQUAL
64583: AND
64584: IFFALSE 64594
// result := true end ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_INT 1
64593: ST_TO_ADDR
// end ;
64594: LD_VAR 0 3
64598: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64599: LD_INT 0
64601: PPUSH
// result := false ;
64602: LD_ADDR_VAR 0 4
64606: PUSH
64607: LD_INT 0
64609: ST_TO_ADDR
// if GetTaskList ( unit ) then
64610: LD_VAR 0 1
64614: PPUSH
64615: CALL_OW 437
64619: IFFALSE 64702
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64621: LD_STRING M
64623: PUSH
64624: LD_VAR 0 1
64628: PPUSH
64629: CALL_OW 437
64633: PUSH
64634: LD_INT 1
64636: ARRAY
64637: PUSH
64638: LD_INT 1
64640: ARRAY
64641: EQUAL
64642: PUSH
64643: LD_VAR 0 2
64647: PUSH
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL_OW 437
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: LD_INT 2
64664: ARRAY
64665: EQUAL
64666: AND
64667: PUSH
64668: LD_VAR 0 3
64672: PUSH
64673: LD_VAR 0 1
64677: PPUSH
64678: CALL_OW 437
64682: PUSH
64683: LD_INT 1
64685: ARRAY
64686: PUSH
64687: LD_INT 3
64689: ARRAY
64690: EQUAL
64691: AND
64692: IFFALSE 64702
// result := true ;
64694: LD_ADDR_VAR 0 4
64698: PUSH
64699: LD_INT 1
64701: ST_TO_ADDR
// end ; end ;
64702: LD_VAR 0 4
64706: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64707: LD_INT 0
64709: PPUSH
64710: PPUSH
64711: PPUSH
64712: PPUSH
// if not unit or not area then
64713: LD_VAR 0 1
64717: NOT
64718: PUSH
64719: LD_VAR 0 2
64723: NOT
64724: OR
64725: IFFALSE 64729
// exit ;
64727: GO 64893
// tmp := AreaToList ( area , i ) ;
64729: LD_ADDR_VAR 0 6
64733: PUSH
64734: LD_VAR 0 2
64738: PPUSH
64739: LD_VAR 0 5
64743: PPUSH
64744: CALL_OW 517
64748: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64749: LD_ADDR_VAR 0 5
64753: PUSH
64754: DOUBLE
64755: LD_INT 1
64757: DEC
64758: ST_TO_ADDR
64759: LD_VAR 0 6
64763: PUSH
64764: LD_INT 1
64766: ARRAY
64767: PUSH
64768: FOR_TO
64769: IFFALSE 64891
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64771: LD_ADDR_VAR 0 7
64775: PUSH
64776: LD_VAR 0 6
64780: PUSH
64781: LD_INT 1
64783: ARRAY
64784: PUSH
64785: LD_VAR 0 5
64789: ARRAY
64790: PUSH
64791: LD_VAR 0 6
64795: PUSH
64796: LD_INT 2
64798: ARRAY
64799: PUSH
64800: LD_VAR 0 5
64804: ARRAY
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64810: LD_VAR 0 7
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PPUSH
64819: LD_VAR 0 7
64823: PUSH
64824: LD_INT 2
64826: ARRAY
64827: PPUSH
64828: CALL_OW 428
64832: PUSH
64833: LD_INT 0
64835: EQUAL
64836: IFFALSE 64889
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64838: LD_VAR 0 1
64842: PPUSH
64843: LD_VAR 0 7
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PPUSH
64852: LD_VAR 0 7
64856: PUSH
64857: LD_INT 2
64859: ARRAY
64860: PPUSH
64861: LD_VAR 0 3
64865: PPUSH
64866: CALL_OW 48
// result := IsPlaced ( unit ) ;
64870: LD_ADDR_VAR 0 4
64874: PUSH
64875: LD_VAR 0 1
64879: PPUSH
64880: CALL_OW 305
64884: ST_TO_ADDR
// exit ;
64885: POP
64886: POP
64887: GO 64893
// end ; end ;
64889: GO 64768
64891: POP
64892: POP
// end ;
64893: LD_VAR 0 4
64897: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64898: LD_INT 0
64900: PPUSH
64901: PPUSH
64902: PPUSH
// if not side or side > 8 then
64903: LD_VAR 0 1
64907: NOT
64908: PUSH
64909: LD_VAR 0 1
64913: PUSH
64914: LD_INT 8
64916: GREATER
64917: OR
64918: IFFALSE 64922
// exit ;
64920: GO 65109
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64922: LD_ADDR_VAR 0 4
64926: PUSH
64927: LD_INT 22
64929: PUSH
64930: LD_VAR 0 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 21
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PPUSH
64953: CALL_OW 69
64957: ST_TO_ADDR
// if not tmp then
64958: LD_VAR 0 4
64962: NOT
64963: IFFALSE 64967
// exit ;
64965: GO 65109
// enable_addtolog := true ;
64967: LD_ADDR_OWVAR 81
64971: PUSH
64972: LD_INT 1
64974: ST_TO_ADDR
// AddToLog ( [ ) ;
64975: LD_STRING [
64977: PPUSH
64978: CALL_OW 561
// for i in tmp do
64982: LD_ADDR_VAR 0 3
64986: PUSH
64987: LD_VAR 0 4
64991: PUSH
64992: FOR_IN
64993: IFFALSE 65100
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64995: LD_STRING [
64997: PUSH
64998: LD_VAR 0 3
65002: PPUSH
65003: CALL_OW 266
65007: STR
65008: PUSH
65009: LD_STRING , 
65011: STR
65012: PUSH
65013: LD_VAR 0 3
65017: PPUSH
65018: CALL_OW 250
65022: STR
65023: PUSH
65024: LD_STRING , 
65026: STR
65027: PUSH
65028: LD_VAR 0 3
65032: PPUSH
65033: CALL_OW 251
65037: STR
65038: PUSH
65039: LD_STRING , 
65041: STR
65042: PUSH
65043: LD_VAR 0 3
65047: PPUSH
65048: CALL_OW 254
65052: STR
65053: PUSH
65054: LD_STRING , 
65056: STR
65057: PUSH
65058: LD_VAR 0 3
65062: PPUSH
65063: LD_INT 1
65065: PPUSH
65066: CALL_OW 268
65070: STR
65071: PUSH
65072: LD_STRING , 
65074: STR
65075: PUSH
65076: LD_VAR 0 3
65080: PPUSH
65081: LD_INT 2
65083: PPUSH
65084: CALL_OW 268
65088: STR
65089: PUSH
65090: LD_STRING ],
65092: STR
65093: PPUSH
65094: CALL_OW 561
// end ;
65098: GO 64992
65100: POP
65101: POP
// AddToLog ( ]; ) ;
65102: LD_STRING ];
65104: PPUSH
65105: CALL_OW 561
// end ;
65109: LD_VAR 0 2
65113: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65114: LD_INT 0
65116: PPUSH
65117: PPUSH
65118: PPUSH
65119: PPUSH
65120: PPUSH
// if not area or not rate or not max then
65121: LD_VAR 0 1
65125: NOT
65126: PUSH
65127: LD_VAR 0 2
65131: NOT
65132: OR
65133: PUSH
65134: LD_VAR 0 4
65138: NOT
65139: OR
65140: IFFALSE 65144
// exit ;
65142: GO 65336
// while 1 do
65144: LD_INT 1
65146: IFFALSE 65336
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65148: LD_ADDR_VAR 0 9
65152: PUSH
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_INT 1
65160: PPUSH
65161: CALL_OW 287
65165: PUSH
65166: LD_INT 10
65168: MUL
65169: ST_TO_ADDR
// r := rate / 10 ;
65170: LD_ADDR_VAR 0 7
65174: PUSH
65175: LD_VAR 0 2
65179: PUSH
65180: LD_INT 10
65182: DIVREAL
65183: ST_TO_ADDR
// time := 1 1$00 ;
65184: LD_ADDR_VAR 0 8
65188: PUSH
65189: LD_INT 2100
65191: ST_TO_ADDR
// if amount < min then
65192: LD_VAR 0 9
65196: PUSH
65197: LD_VAR 0 3
65201: LESS
65202: IFFALSE 65220
// r := r * 2 else
65204: LD_ADDR_VAR 0 7
65208: PUSH
65209: LD_VAR 0 7
65213: PUSH
65214: LD_INT 2
65216: MUL
65217: ST_TO_ADDR
65218: GO 65246
// if amount > max then
65220: LD_VAR 0 9
65224: PUSH
65225: LD_VAR 0 4
65229: GREATER
65230: IFFALSE 65246
// r := r / 2 ;
65232: LD_ADDR_VAR 0 7
65236: PUSH
65237: LD_VAR 0 7
65241: PUSH
65242: LD_INT 2
65244: DIVREAL
65245: ST_TO_ADDR
// time := time / r ;
65246: LD_ADDR_VAR 0 8
65250: PUSH
65251: LD_VAR 0 8
65255: PUSH
65256: LD_VAR 0 7
65260: DIVREAL
65261: ST_TO_ADDR
// if time < 0 then
65262: LD_VAR 0 8
65266: PUSH
65267: LD_INT 0
65269: LESS
65270: IFFALSE 65287
// time := time * - 1 ;
65272: LD_ADDR_VAR 0 8
65276: PUSH
65277: LD_VAR 0 8
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: MUL
65286: ST_TO_ADDR
// wait ( time ) ;
65287: LD_VAR 0 8
65291: PPUSH
65292: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65296: LD_INT 35
65298: PPUSH
65299: LD_INT 875
65301: PPUSH
65302: CALL_OW 12
65306: PPUSH
65307: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65311: LD_INT 1
65313: PPUSH
65314: LD_INT 5
65316: PPUSH
65317: CALL_OW 12
65321: PPUSH
65322: LD_VAR 0 1
65326: PPUSH
65327: LD_INT 1
65329: PPUSH
65330: CALL_OW 55
// end ;
65334: GO 65144
// end ;
65336: LD_VAR 0 5
65340: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65341: LD_INT 0
65343: PPUSH
65344: PPUSH
65345: PPUSH
65346: PPUSH
65347: PPUSH
65348: PPUSH
65349: PPUSH
65350: PPUSH
// if not turrets or not factories then
65351: LD_VAR 0 1
65355: NOT
65356: PUSH
65357: LD_VAR 0 2
65361: NOT
65362: OR
65363: IFFALSE 65367
// exit ;
65365: GO 65674
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65367: LD_ADDR_VAR 0 10
65371: PUSH
65372: LD_INT 5
65374: PUSH
65375: LD_INT 6
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: LD_INT 5
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 24
65409: PUSH
65410: LD_INT 25
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 23
65419: PUSH
65420: LD_INT 27
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 42
65433: PUSH
65434: LD_INT 43
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 44
65443: PUSH
65444: LD_INT 46
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 45
65453: PUSH
65454: LD_INT 47
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: ST_TO_ADDR
// result := [ ] ;
65471: LD_ADDR_VAR 0 3
65475: PUSH
65476: EMPTY
65477: ST_TO_ADDR
// for i in turrets do
65478: LD_ADDR_VAR 0 4
65482: PUSH
65483: LD_VAR 0 1
65487: PUSH
65488: FOR_IN
65489: IFFALSE 65672
// begin nat := GetNation ( i ) ;
65491: LD_ADDR_VAR 0 7
65495: PUSH
65496: LD_VAR 0 4
65500: PPUSH
65501: CALL_OW 248
65505: ST_TO_ADDR
// weapon := 0 ;
65506: LD_ADDR_VAR 0 8
65510: PUSH
65511: LD_INT 0
65513: ST_TO_ADDR
// if not nat then
65514: LD_VAR 0 7
65518: NOT
65519: IFFALSE 65523
// continue ;
65521: GO 65488
// for j in list [ nat ] do
65523: LD_ADDR_VAR 0 5
65527: PUSH
65528: LD_VAR 0 10
65532: PUSH
65533: LD_VAR 0 7
65537: ARRAY
65538: PUSH
65539: FOR_IN
65540: IFFALSE 65581
// if GetBWeapon ( i ) = j [ 1 ] then
65542: LD_VAR 0 4
65546: PPUSH
65547: CALL_OW 269
65551: PUSH
65552: LD_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: EQUAL
65561: IFFALSE 65579
// begin weapon := j [ 2 ] ;
65563: LD_ADDR_VAR 0 8
65567: PUSH
65568: LD_VAR 0 5
65572: PUSH
65573: LD_INT 2
65575: ARRAY
65576: ST_TO_ADDR
// break ;
65577: GO 65581
// end ;
65579: GO 65539
65581: POP
65582: POP
// if not weapon then
65583: LD_VAR 0 8
65587: NOT
65588: IFFALSE 65592
// continue ;
65590: GO 65488
// for k in factories do
65592: LD_ADDR_VAR 0 6
65596: PUSH
65597: LD_VAR 0 2
65601: PUSH
65602: FOR_IN
65603: IFFALSE 65668
// begin weapons := AvailableWeaponList ( k ) ;
65605: LD_ADDR_VAR 0 9
65609: PUSH
65610: LD_VAR 0 6
65614: PPUSH
65615: CALL_OW 478
65619: ST_TO_ADDR
// if not weapons then
65620: LD_VAR 0 9
65624: NOT
65625: IFFALSE 65629
// continue ;
65627: GO 65602
// if weapon in weapons then
65629: LD_VAR 0 8
65633: PUSH
65634: LD_VAR 0 9
65638: IN
65639: IFFALSE 65666
// begin result := [ i , weapon ] ;
65641: LD_ADDR_VAR 0 3
65645: PUSH
65646: LD_VAR 0 4
65650: PUSH
65651: LD_VAR 0 8
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// exit ;
65660: POP
65661: POP
65662: POP
65663: POP
65664: GO 65674
// end ; end ;
65666: GO 65602
65668: POP
65669: POP
// end ;
65670: GO 65488
65672: POP
65673: POP
// end ;
65674: LD_VAR 0 3
65678: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65679: LD_INT 0
65681: PPUSH
// if not side or side > 8 then
65682: LD_VAR 0 3
65686: NOT
65687: PUSH
65688: LD_VAR 0 3
65692: PUSH
65693: LD_INT 8
65695: GREATER
65696: OR
65697: IFFALSE 65701
// exit ;
65699: GO 65760
// if not range then
65701: LD_VAR 0 4
65705: NOT
65706: IFFALSE 65717
// range := - 12 ;
65708: LD_ADDR_VAR 0 4
65712: PUSH
65713: LD_INT 12
65715: NEG
65716: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_VAR 0 2
65726: PPUSH
65727: LD_VAR 0 3
65731: PPUSH
65732: LD_VAR 0 4
65736: PPUSH
65737: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65741: LD_VAR 0 1
65745: PPUSH
65746: LD_VAR 0 2
65750: PPUSH
65751: LD_VAR 0 3
65755: PPUSH
65756: CALL_OW 331
// end ;
65760: LD_VAR 0 5
65764: RET
// export function Video ( mode ) ; begin
65765: LD_INT 0
65767: PPUSH
// ingame_video = mode ;
65768: LD_ADDR_OWVAR 52
65772: PUSH
65773: LD_VAR 0 1
65777: ST_TO_ADDR
// interface_hidden = mode ;
65778: LD_ADDR_OWVAR 54
65782: PUSH
65783: LD_VAR 0 1
65787: ST_TO_ADDR
// end ;
65788: LD_VAR 0 2
65792: RET
// export function Join ( array , element ) ; begin
65793: LD_INT 0
65795: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65796: LD_ADDR_VAR 0 3
65800: PUSH
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 1
65813: PLUS
65814: PPUSH
65815: LD_VAR 0 2
65819: PPUSH
65820: CALL_OW 1
65824: ST_TO_ADDR
// end ;
65825: LD_VAR 0 3
65829: RET
// export function JoinUnion ( array , element ) ; begin
65830: LD_INT 0
65832: PPUSH
// result := array union element ;
65833: LD_ADDR_VAR 0 3
65837: PUSH
65838: LD_VAR 0 1
65842: PUSH
65843: LD_VAR 0 2
65847: UNION
65848: ST_TO_ADDR
// end ;
65849: LD_VAR 0 3
65853: RET
// export function GetBehemoths ( side ) ; begin
65854: LD_INT 0
65856: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65857: LD_ADDR_VAR 0 2
65861: PUSH
65862: LD_INT 22
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 31
65876: PUSH
65877: LD_INT 25
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PPUSH
65888: CALL_OW 69
65892: ST_TO_ADDR
// end ;
65893: LD_VAR 0 2
65897: RET
// export function Shuffle ( array ) ; var i , index ; begin
65898: LD_INT 0
65900: PPUSH
65901: PPUSH
65902: PPUSH
// result := [ ] ;
65903: LD_ADDR_VAR 0 2
65907: PUSH
65908: EMPTY
65909: ST_TO_ADDR
// if not array then
65910: LD_VAR 0 1
65914: NOT
65915: IFFALSE 65919
// exit ;
65917: GO 66018
// Randomize ;
65919: CALL_OW 10
// for i = array downto 1 do
65923: LD_ADDR_VAR 0 3
65927: PUSH
65928: DOUBLE
65929: LD_VAR 0 1
65933: INC
65934: ST_TO_ADDR
65935: LD_INT 1
65937: PUSH
65938: FOR_DOWNTO
65939: IFFALSE 66016
// begin index := rand ( 1 , array ) ;
65941: LD_ADDR_VAR 0 4
65945: PUSH
65946: LD_INT 1
65948: PPUSH
65949: LD_VAR 0 1
65953: PPUSH
65954: CALL_OW 12
65958: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65959: LD_ADDR_VAR 0 2
65963: PUSH
65964: LD_VAR 0 2
65968: PPUSH
65969: LD_VAR 0 2
65973: PUSH
65974: LD_INT 1
65976: PLUS
65977: PPUSH
65978: LD_VAR 0 1
65982: PUSH
65983: LD_VAR 0 4
65987: ARRAY
65988: PPUSH
65989: CALL_OW 2
65993: ST_TO_ADDR
// array := Delete ( array , index ) ;
65994: LD_ADDR_VAR 0 1
65998: PUSH
65999: LD_VAR 0 1
66003: PPUSH
66004: LD_VAR 0 4
66008: PPUSH
66009: CALL_OW 3
66013: ST_TO_ADDR
// end ;
66014: GO 65938
66016: POP
66017: POP
// end ;
66018: LD_VAR 0 2
66022: RET
// export function GetBaseMaterials ( base ) ; begin
66023: LD_INT 0
66025: PPUSH
// result := [ 0 , 0 , 0 ] ;
66026: LD_ADDR_VAR 0 2
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// if not base then
66045: LD_VAR 0 1
66049: NOT
66050: IFFALSE 66054
// exit ;
66052: GO 66103
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66054: LD_ADDR_VAR 0 2
66058: PUSH
66059: LD_VAR 0 1
66063: PPUSH
66064: LD_INT 1
66066: PPUSH
66067: CALL_OW 275
66071: PUSH
66072: LD_VAR 0 1
66076: PPUSH
66077: LD_INT 2
66079: PPUSH
66080: CALL_OW 275
66084: PUSH
66085: LD_VAR 0 1
66089: PPUSH
66090: LD_INT 3
66092: PPUSH
66093: CALL_OW 275
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// end ;
66103: LD_VAR 0 2
66107: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66108: LD_INT 0
66110: PPUSH
66111: PPUSH
// result := array ;
66112: LD_ADDR_VAR 0 3
66116: PUSH
66117: LD_VAR 0 1
66121: ST_TO_ADDR
// if size > 0 then
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 0
66129: GREATER
66130: IFFALSE 66176
// for i := array downto size do
66132: LD_ADDR_VAR 0 4
66136: PUSH
66137: DOUBLE
66138: LD_VAR 0 1
66142: INC
66143: ST_TO_ADDR
66144: LD_VAR 0 2
66148: PUSH
66149: FOR_DOWNTO
66150: IFFALSE 66174
// result := Delete ( result , result ) ;
66152: LD_ADDR_VAR 0 3
66156: PUSH
66157: LD_VAR 0 3
66161: PPUSH
66162: LD_VAR 0 3
66166: PPUSH
66167: CALL_OW 3
66171: ST_TO_ADDR
66172: GO 66149
66174: POP
66175: POP
// end ;
66176: LD_VAR 0 3
66180: RET
// export function ComExit ( unit ) ; var tmp ; begin
66181: LD_INT 0
66183: PPUSH
66184: PPUSH
// if not IsInUnit ( unit ) then
66185: LD_VAR 0 1
66189: PPUSH
66190: CALL_OW 310
66194: NOT
66195: IFFALSE 66199
// exit ;
66197: GO 66259
// tmp := IsInUnit ( unit ) ;
66199: LD_ADDR_VAR 0 3
66203: PUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: CALL_OW 310
66213: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66214: LD_VAR 0 3
66218: PPUSH
66219: CALL_OW 247
66223: PUSH
66224: LD_INT 2
66226: EQUAL
66227: IFFALSE 66240
// ComExitVehicle ( unit ) else
66229: LD_VAR 0 1
66233: PPUSH
66234: CALL_OW 121
66238: GO 66249
// ComExitBuilding ( unit ) ;
66240: LD_VAR 0 1
66244: PPUSH
66245: CALL_OW 122
// result := tmp ;
66249: LD_ADDR_VAR 0 2
66253: PUSH
66254: LD_VAR 0 3
66258: ST_TO_ADDR
// end ;
66259: LD_VAR 0 2
66263: RET
// export function ComExitAll ( units ) ; var i ; begin
66264: LD_INT 0
66266: PPUSH
66267: PPUSH
// if not units then
66268: LD_VAR 0 1
66272: NOT
66273: IFFALSE 66277
// exit ;
66275: GO 66303
// for i in units do
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: FOR_IN
66288: IFFALSE 66301
// ComExit ( i ) ;
66290: LD_VAR 0 3
66294: PPUSH
66295: CALL 66181 0 1
66299: GO 66287
66301: POP
66302: POP
// end ;
66303: LD_VAR 0 2
66307: RET
// export function ResetHc ; begin
66308: LD_INT 0
66310: PPUSH
// InitHc ;
66311: CALL_OW 19
// hc_importance := 0 ;
66315: LD_ADDR_OWVAR 32
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// end ;
66323: LD_VAR 0 1
66327: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66328: LD_INT 0
66330: PPUSH
66331: PPUSH
66332: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66333: LD_ADDR_VAR 0 6
66337: PUSH
66338: LD_VAR 0 1
66342: PUSH
66343: LD_VAR 0 3
66347: PLUS
66348: PUSH
66349: LD_INT 2
66351: DIV
66352: ST_TO_ADDR
// if _x < 0 then
66353: LD_VAR 0 6
66357: PUSH
66358: LD_INT 0
66360: LESS
66361: IFFALSE 66378
// _x := _x * - 1 ;
66363: LD_ADDR_VAR 0 6
66367: PUSH
66368: LD_VAR 0 6
66372: PUSH
66373: LD_INT 1
66375: NEG
66376: MUL
66377: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66378: LD_ADDR_VAR 0 7
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: LD_VAR 0 4
66392: PLUS
66393: PUSH
66394: LD_INT 2
66396: DIV
66397: ST_TO_ADDR
// if _y < 0 then
66398: LD_VAR 0 7
66402: PUSH
66403: LD_INT 0
66405: LESS
66406: IFFALSE 66423
// _y := _y * - 1 ;
66408: LD_ADDR_VAR 0 7
66412: PUSH
66413: LD_VAR 0 7
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: MUL
66422: ST_TO_ADDR
// result := [ _x , _y ] ;
66423: LD_ADDR_VAR 0 5
66427: PUSH
66428: LD_VAR 0 6
66432: PUSH
66433: LD_VAR 0 7
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// end ;
66442: LD_VAR 0 5
66446: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66447: LD_INT 0
66449: PPUSH
66450: PPUSH
66451: PPUSH
66452: PPUSH
// task := GetTaskList ( unit ) ;
66453: LD_ADDR_VAR 0 7
66457: PUSH
66458: LD_VAR 0 1
66462: PPUSH
66463: CALL_OW 437
66467: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66468: LD_VAR 0 7
66472: NOT
66473: PUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: LD_VAR 0 2
66483: PPUSH
66484: CALL_OW 308
66488: NOT
66489: AND
66490: IFFALSE 66494
// exit ;
66492: GO 66612
// if IsInArea ( unit , area ) then
66494: LD_VAR 0 1
66498: PPUSH
66499: LD_VAR 0 2
66503: PPUSH
66504: CALL_OW 308
66508: IFFALSE 66526
// begin ComMoveToArea ( unit , goAway ) ;
66510: LD_VAR 0 1
66514: PPUSH
66515: LD_VAR 0 3
66519: PPUSH
66520: CALL_OW 113
// exit ;
66524: GO 66612
// end ; if task [ 1 ] [ 1 ] <> M then
66526: LD_VAR 0 7
66530: PUSH
66531: LD_INT 1
66533: ARRAY
66534: PUSH
66535: LD_INT 1
66537: ARRAY
66538: PUSH
66539: LD_STRING M
66541: NONEQUAL
66542: IFFALSE 66546
// exit ;
66544: GO 66612
// x := task [ 1 ] [ 2 ] ;
66546: LD_ADDR_VAR 0 5
66550: PUSH
66551: LD_VAR 0 7
66555: PUSH
66556: LD_INT 1
66558: ARRAY
66559: PUSH
66560: LD_INT 2
66562: ARRAY
66563: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66564: LD_ADDR_VAR 0 6
66568: PUSH
66569: LD_VAR 0 7
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PUSH
66578: LD_INT 3
66580: ARRAY
66581: ST_TO_ADDR
// if InArea ( x , y , area ) then
66582: LD_VAR 0 5
66586: PPUSH
66587: LD_VAR 0 6
66591: PPUSH
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 309
66601: IFFALSE 66612
// ComStop ( unit ) ;
66603: LD_VAR 0 1
66607: PPUSH
66608: CALL_OW 141
// end ;
66612: LD_VAR 0 4
66616: RET
// export function Abs ( value ) ; begin
66617: LD_INT 0
66619: PPUSH
// result := value ;
66620: LD_ADDR_VAR 0 2
66624: PUSH
66625: LD_VAR 0 1
66629: ST_TO_ADDR
// if value < 0 then
66630: LD_VAR 0 1
66634: PUSH
66635: LD_INT 0
66637: LESS
66638: IFFALSE 66655
// result := value * - 1 ;
66640: LD_ADDR_VAR 0 2
66644: PUSH
66645: LD_VAR 0 1
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: MUL
66654: ST_TO_ADDR
// end ;
66655: LD_VAR 0 2
66659: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66660: LD_INT 0
66662: PPUSH
66663: PPUSH
66664: PPUSH
66665: PPUSH
66666: PPUSH
66667: PPUSH
66668: PPUSH
66669: PPUSH
// if not unit or not building then
66670: LD_VAR 0 1
66674: NOT
66675: PUSH
66676: LD_VAR 0 2
66680: NOT
66681: OR
66682: IFFALSE 66686
// exit ;
66684: GO 66912
// x := GetX ( building ) ;
66686: LD_ADDR_VAR 0 4
66690: PUSH
66691: LD_VAR 0 2
66695: PPUSH
66696: CALL_OW 250
66700: ST_TO_ADDR
// y := GetY ( building ) ;
66701: LD_ADDR_VAR 0 6
66705: PUSH
66706: LD_VAR 0 2
66710: PPUSH
66711: CALL_OW 251
66715: ST_TO_ADDR
// d := GetDir ( building ) ;
66716: LD_ADDR_VAR 0 8
66720: PUSH
66721: LD_VAR 0 2
66725: PPUSH
66726: CALL_OW 254
66730: ST_TO_ADDR
// r := 4 ;
66731: LD_ADDR_VAR 0 9
66735: PUSH
66736: LD_INT 4
66738: ST_TO_ADDR
// for i := 1 to 5 do
66739: LD_ADDR_VAR 0 10
66743: PUSH
66744: DOUBLE
66745: LD_INT 1
66747: DEC
66748: ST_TO_ADDR
66749: LD_INT 5
66751: PUSH
66752: FOR_TO
66753: IFFALSE 66910
// begin _x := ShiftX ( x , d , r + i ) ;
66755: LD_ADDR_VAR 0 5
66759: PUSH
66760: LD_VAR 0 4
66764: PPUSH
66765: LD_VAR 0 8
66769: PPUSH
66770: LD_VAR 0 9
66774: PUSH
66775: LD_VAR 0 10
66779: PLUS
66780: PPUSH
66781: CALL_OW 272
66785: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66786: LD_ADDR_VAR 0 7
66790: PUSH
66791: LD_VAR 0 6
66795: PPUSH
66796: LD_VAR 0 8
66800: PPUSH
66801: LD_VAR 0 9
66805: PUSH
66806: LD_VAR 0 10
66810: PLUS
66811: PPUSH
66812: CALL_OW 273
66816: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66817: LD_VAR 0 5
66821: PPUSH
66822: LD_VAR 0 7
66826: PPUSH
66827: CALL_OW 488
66831: PUSH
66832: LD_VAR 0 5
66836: PPUSH
66837: LD_VAR 0 7
66841: PPUSH
66842: CALL_OW 428
66846: PPUSH
66847: CALL_OW 247
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: IN
66862: NOT
66863: AND
66864: IFFALSE 66908
// begin ComMoveXY ( unit , _x , _y ) ;
66866: LD_VAR 0 1
66870: PPUSH
66871: LD_VAR 0 5
66875: PPUSH
66876: LD_VAR 0 7
66880: PPUSH
66881: CALL_OW 111
// result := [ _x , _y ] ;
66885: LD_ADDR_VAR 0 3
66889: PUSH
66890: LD_VAR 0 5
66894: PUSH
66895: LD_VAR 0 7
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: ST_TO_ADDR
// exit ;
66904: POP
66905: POP
66906: GO 66912
// end ; end ;
66908: GO 66752
66910: POP
66911: POP
// end ;
66912: LD_VAR 0 3
66916: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66917: LD_INT 0
66919: PPUSH
66920: PPUSH
66921: PPUSH
// result := 0 ;
66922: LD_ADDR_VAR 0 3
66926: PUSH
66927: LD_INT 0
66929: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66930: LD_VAR 0 1
66934: PUSH
66935: LD_INT 0
66937: LESS
66938: PUSH
66939: LD_VAR 0 1
66943: PUSH
66944: LD_INT 8
66946: GREATER
66947: OR
66948: PUSH
66949: LD_VAR 0 2
66953: PUSH
66954: LD_INT 0
66956: LESS
66957: OR
66958: PUSH
66959: LD_VAR 0 2
66963: PUSH
66964: LD_INT 8
66966: GREATER
66967: OR
66968: IFFALSE 66972
// exit ;
66970: GO 67047
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66972: LD_ADDR_VAR 0 4
66976: PUSH
66977: LD_INT 22
66979: PUSH
66980: LD_VAR 0 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PPUSH
66989: CALL_OW 69
66993: PUSH
66994: FOR_IN
66995: IFFALSE 67045
// begin un := UnitShoot ( i ) ;
66997: LD_ADDR_VAR 0 5
67001: PUSH
67002: LD_VAR 0 4
67006: PPUSH
67007: CALL_OW 504
67011: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67012: LD_VAR 0 5
67016: PPUSH
67017: CALL_OW 255
67021: PUSH
67022: LD_VAR 0 1
67026: EQUAL
67027: IFFALSE 67043
// begin result := un ;
67029: LD_ADDR_VAR 0 3
67033: PUSH
67034: LD_VAR 0 5
67038: ST_TO_ADDR
// exit ;
67039: POP
67040: POP
67041: GO 67047
// end ; end ;
67043: GO 66994
67045: POP
67046: POP
// end ;
67047: LD_VAR 0 3
67051: RET
// export function GetCargoBay ( units ) ; begin
67052: LD_INT 0
67054: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67055: LD_ADDR_VAR 0 2
67059: PUSH
67060: LD_VAR 0 1
67064: PPUSH
67065: LD_INT 2
67067: PUSH
67068: LD_INT 34
67070: PUSH
67071: LD_INT 12
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 34
67080: PUSH
67081: LD_INT 51
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 34
67090: PUSH
67091: LD_INT 32
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 34
67100: PUSH
67101: LD_EXP 27
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: PPUSH
67117: CALL_OW 72
67121: ST_TO_ADDR
// end ;
67122: LD_VAR 0 2
67126: RET
// export function Negate ( value ) ; begin
67127: LD_INT 0
67129: PPUSH
// result := not value ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: LD_VAR 0 1
67139: NOT
67140: ST_TO_ADDR
// end ;
67141: LD_VAR 0 2
67145: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67146: LD_INT 0
67148: PPUSH
// if x1 = x2 then
67149: LD_VAR 0 1
67153: PUSH
67154: LD_VAR 0 3
67158: EQUAL
67159: IFFALSE 67193
// begin if y1 > y2 then
67161: LD_VAR 0 2
67165: PUSH
67166: LD_VAR 0 4
67170: GREATER
67171: IFFALSE 67183
// result := 0 else
67173: LD_ADDR_VAR 0 5
67177: PUSH
67178: LD_INT 0
67180: ST_TO_ADDR
67181: GO 67191
// result := 3 ;
67183: LD_ADDR_VAR 0 5
67187: PUSH
67188: LD_INT 3
67190: ST_TO_ADDR
// exit ;
67191: GO 67279
// end ; if y1 = y2 then
67193: LD_VAR 0 2
67197: PUSH
67198: LD_VAR 0 4
67202: EQUAL
67203: IFFALSE 67237
// begin if x1 > x2 then
67205: LD_VAR 0 1
67209: PUSH
67210: LD_VAR 0 3
67214: GREATER
67215: IFFALSE 67227
// result := 1 else
67217: LD_ADDR_VAR 0 5
67221: PUSH
67222: LD_INT 1
67224: ST_TO_ADDR
67225: GO 67235
// result := 4 ;
67227: LD_ADDR_VAR 0 5
67231: PUSH
67232: LD_INT 4
67234: ST_TO_ADDR
// exit ;
67235: GO 67279
// end ; if x1 > x2 and y1 > y2 then
67237: LD_VAR 0 1
67241: PUSH
67242: LD_VAR 0 3
67246: GREATER
67247: PUSH
67248: LD_VAR 0 2
67252: PUSH
67253: LD_VAR 0 4
67257: GREATER
67258: AND
67259: IFFALSE 67271
// result := 2 else
67261: LD_ADDR_VAR 0 5
67265: PUSH
67266: LD_INT 2
67268: ST_TO_ADDR
67269: GO 67279
// result := 5 ;
67271: LD_ADDR_VAR 0 5
67275: PUSH
67276: LD_INT 5
67278: ST_TO_ADDR
// end ;
67279: LD_VAR 0 5
67283: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67284: LD_INT 0
67286: PPUSH
67287: PPUSH
// if not driver or not IsInUnit ( driver ) then
67288: LD_VAR 0 1
67292: NOT
67293: PUSH
67294: LD_VAR 0 1
67298: PPUSH
67299: CALL_OW 310
67303: NOT
67304: OR
67305: IFFALSE 67309
// exit ;
67307: GO 67399
// vehicle := IsInUnit ( driver ) ;
67309: LD_ADDR_VAR 0 3
67313: PUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 310
67323: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67324: LD_VAR 0 1
67328: PPUSH
67329: LD_STRING \
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: PUSH
67359: LD_STRING E
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_VAR 0 3
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PPUSH
67395: CALL_OW 446
// end ;
67399: LD_VAR 0 2
67403: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67404: LD_INT 0
67406: PPUSH
67407: PPUSH
// if not driver or not IsInUnit ( driver ) then
67408: LD_VAR 0 1
67412: NOT
67413: PUSH
67414: LD_VAR 0 1
67418: PPUSH
67419: CALL_OW 310
67423: NOT
67424: OR
67425: IFFALSE 67429
// exit ;
67427: GO 67519
// vehicle := IsInUnit ( driver ) ;
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: LD_VAR 0 1
67438: PPUSH
67439: CALL_OW 310
67443: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_STRING \
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_STRING E
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_VAR 0 3
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PPUSH
67515: CALL_OW 447
// end ;
67519: LD_VAR 0 2
67523: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
// tmp := [ ] ;
67529: LD_ADDR_VAR 0 5
67533: PUSH
67534: EMPTY
67535: ST_TO_ADDR
// for i in units do
67536: LD_ADDR_VAR 0 4
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: FOR_IN
67547: IFFALSE 67585
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67549: LD_ADDR_VAR 0 5
67553: PUSH
67554: LD_VAR 0 5
67558: PPUSH
67559: LD_VAR 0 5
67563: PUSH
67564: LD_INT 1
67566: PLUS
67567: PPUSH
67568: LD_VAR 0 4
67572: PPUSH
67573: CALL_OW 256
67577: PPUSH
67578: CALL_OW 2
67582: ST_TO_ADDR
67583: GO 67546
67585: POP
67586: POP
// if not tmp then
67587: LD_VAR 0 5
67591: NOT
67592: IFFALSE 67596
// exit ;
67594: GO 67644
// if asc then
67596: LD_VAR 0 2
67600: IFFALSE 67624
// result := SortListByListAsc ( units , tmp ) else
67602: LD_ADDR_VAR 0 3
67606: PUSH
67607: LD_VAR 0 1
67611: PPUSH
67612: LD_VAR 0 5
67616: PPUSH
67617: CALL_OW 76
67621: ST_TO_ADDR
67622: GO 67644
// result := SortListByListDesc ( units , tmp ) ;
67624: LD_ADDR_VAR 0 3
67628: PUSH
67629: LD_VAR 0 1
67633: PPUSH
67634: LD_VAR 0 5
67638: PPUSH
67639: CALL_OW 77
67643: ST_TO_ADDR
// end ;
67644: LD_VAR 0 3
67648: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67649: LD_INT 0
67651: PPUSH
67652: PPUSH
// task := GetTaskList ( mech ) ;
67653: LD_ADDR_VAR 0 4
67657: PUSH
67658: LD_VAR 0 1
67662: PPUSH
67663: CALL_OW 437
67667: ST_TO_ADDR
// if not task then
67668: LD_VAR 0 4
67672: NOT
67673: IFFALSE 67677
// exit ;
67675: GO 67719
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67677: LD_ADDR_VAR 0 3
67681: PUSH
67682: LD_VAR 0 4
67686: PUSH
67687: LD_INT 1
67689: ARRAY
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PUSH
67695: LD_STRING r
67697: EQUAL
67698: PUSH
67699: LD_VAR 0 4
67703: PUSH
67704: LD_INT 1
67706: ARRAY
67707: PUSH
67708: LD_INT 4
67710: ARRAY
67711: PUSH
67712: LD_VAR 0 2
67716: EQUAL
67717: AND
67718: ST_TO_ADDR
// end ;
67719: LD_VAR 0 3
67723: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67724: LD_INT 0
67726: PPUSH
// SetDir ( unit , d ) ;
67727: LD_VAR 0 1
67731: PPUSH
67732: LD_VAR 0 4
67736: PPUSH
67737: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67741: LD_VAR 0 1
67745: PPUSH
67746: LD_VAR 0 2
67750: PPUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: LD_VAR 0 5
67760: PPUSH
67761: CALL_OW 48
// end ;
67765: LD_VAR 0 6
67769: RET
// export function ToNaturalNumber ( number ) ; begin
67770: LD_INT 0
67772: PPUSH
// result := number div 1 ;
67773: LD_ADDR_VAR 0 2
67777: PUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 1
67785: DIV
67786: ST_TO_ADDR
// if number < 0 then
67787: LD_VAR 0 1
67791: PUSH
67792: LD_INT 0
67794: LESS
67795: IFFALSE 67805
// result := 0 ;
67797: LD_ADDR_VAR 0 2
67801: PUSH
67802: LD_INT 0
67804: ST_TO_ADDR
// end ;
67805: LD_VAR 0 2
67809: RET
// export function SortByClass ( units , class ) ; var un ; begin
67810: LD_INT 0
67812: PPUSH
67813: PPUSH
// if not units or not class then
67814: LD_VAR 0 1
67818: NOT
67819: PUSH
67820: LD_VAR 0 2
67824: NOT
67825: OR
67826: IFFALSE 67830
// exit ;
67828: GO 67925
// result := [ ] ;
67830: LD_ADDR_VAR 0 3
67834: PUSH
67835: EMPTY
67836: ST_TO_ADDR
// for un in units do
67837: LD_ADDR_VAR 0 4
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: FOR_IN
67848: IFFALSE 67923
// if GetClass ( un ) = class then
67850: LD_VAR 0 4
67854: PPUSH
67855: CALL_OW 257
67859: PUSH
67860: LD_VAR 0 2
67864: EQUAL
67865: IFFALSE 67892
// result := Insert ( result , 1 , un ) else
67867: LD_ADDR_VAR 0 3
67871: PUSH
67872: LD_VAR 0 3
67876: PPUSH
67877: LD_INT 1
67879: PPUSH
67880: LD_VAR 0 4
67884: PPUSH
67885: CALL_OW 2
67889: ST_TO_ADDR
67890: GO 67921
// result := Replace ( result , result + 1 , un ) ;
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: LD_VAR 0 3
67901: PPUSH
67902: LD_VAR 0 3
67906: PUSH
67907: LD_INT 1
67909: PLUS
67910: PPUSH
67911: LD_VAR 0 4
67915: PPUSH
67916: CALL_OW 1
67920: ST_TO_ADDR
67921: GO 67847
67923: POP
67924: POP
// end ;
67925: LD_VAR 0 3
67929: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67930: LD_INT 0
67932: PPUSH
67933: PPUSH
67934: PPUSH
67935: PPUSH
67936: PPUSH
67937: PPUSH
67938: PPUSH
// result := [ ] ;
67939: LD_ADDR_VAR 0 4
67943: PUSH
67944: EMPTY
67945: ST_TO_ADDR
// if x - r < 0 then
67946: LD_VAR 0 1
67950: PUSH
67951: LD_VAR 0 3
67955: MINUS
67956: PUSH
67957: LD_INT 0
67959: LESS
67960: IFFALSE 67972
// min_x := 0 else
67962: LD_ADDR_VAR 0 8
67966: PUSH
67967: LD_INT 0
67969: ST_TO_ADDR
67970: GO 67988
// min_x := x - r ;
67972: LD_ADDR_VAR 0 8
67976: PUSH
67977: LD_VAR 0 1
67981: PUSH
67982: LD_VAR 0 3
67986: MINUS
67987: ST_TO_ADDR
// if y - r < 0 then
67988: LD_VAR 0 2
67992: PUSH
67993: LD_VAR 0 3
67997: MINUS
67998: PUSH
67999: LD_INT 0
68001: LESS
68002: IFFALSE 68014
// min_y := 0 else
68004: LD_ADDR_VAR 0 7
68008: PUSH
68009: LD_INT 0
68011: ST_TO_ADDR
68012: GO 68030
// min_y := y - r ;
68014: LD_ADDR_VAR 0 7
68018: PUSH
68019: LD_VAR 0 2
68023: PUSH
68024: LD_VAR 0 3
68028: MINUS
68029: ST_TO_ADDR
// max_x := x + r ;
68030: LD_ADDR_VAR 0 9
68034: PUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_VAR 0 3
68044: PLUS
68045: ST_TO_ADDR
// max_y := y + r ;
68046: LD_ADDR_VAR 0 10
68050: PUSH
68051: LD_VAR 0 2
68055: PUSH
68056: LD_VAR 0 3
68060: PLUS
68061: ST_TO_ADDR
// for _x = min_x to max_x do
68062: LD_ADDR_VAR 0 5
68066: PUSH
68067: DOUBLE
68068: LD_VAR 0 8
68072: DEC
68073: ST_TO_ADDR
68074: LD_VAR 0 9
68078: PUSH
68079: FOR_TO
68080: IFFALSE 68181
// for _y = min_y to max_y do
68082: LD_ADDR_VAR 0 6
68086: PUSH
68087: DOUBLE
68088: LD_VAR 0 7
68092: DEC
68093: ST_TO_ADDR
68094: LD_VAR 0 10
68098: PUSH
68099: FOR_TO
68100: IFFALSE 68177
// begin if not ValidHex ( _x , _y ) then
68102: LD_VAR 0 5
68106: PPUSH
68107: LD_VAR 0 6
68111: PPUSH
68112: CALL_OW 488
68116: NOT
68117: IFFALSE 68121
// continue ;
68119: GO 68099
// if GetResourceTypeXY ( _x , _y ) then
68121: LD_VAR 0 5
68125: PPUSH
68126: LD_VAR 0 6
68130: PPUSH
68131: CALL_OW 283
68135: IFFALSE 68175
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68137: LD_ADDR_VAR 0 4
68141: PUSH
68142: LD_VAR 0 4
68146: PPUSH
68147: LD_VAR 0 4
68151: PUSH
68152: LD_INT 1
68154: PLUS
68155: PPUSH
68156: LD_VAR 0 5
68160: PUSH
68161: LD_VAR 0 6
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PPUSH
68170: CALL_OW 1
68174: ST_TO_ADDR
// end ;
68175: GO 68099
68177: POP
68178: POP
68179: GO 68079
68181: POP
68182: POP
// end ;
68183: LD_VAR 0 4
68187: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
68188: LD_INT 0
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
// if not units then
68196: LD_VAR 0 1
68200: NOT
68201: IFFALSE 68205
// exit ;
68203: GO 68606
// result := UnitFilter ( units , [ f_ok ] ) ;
68205: LD_ADDR_VAR 0 3
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_INT 50
68217: PUSH
68218: EMPTY
68219: LIST
68220: PPUSH
68221: CALL_OW 72
68225: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68226: LD_ADDR_VAR 0 7
68230: PUSH
68231: LD_VAR 0 1
68235: PUSH
68236: LD_INT 1
68238: ARRAY
68239: PPUSH
68240: CALL_OW 255
68244: ST_TO_ADDR
// if not result then
68245: LD_VAR 0 3
68249: NOT
68250: IFFALSE 68254
// exit ;
68252: GO 68606
// for i in result do
68254: LD_ADDR_VAR 0 4
68258: PUSH
68259: LD_VAR 0 3
68263: PUSH
68264: FOR_IN
68265: IFFALSE 68604
// begin tag := GetTag ( i ) + 1 ;
68267: LD_ADDR_VAR 0 8
68271: PUSH
68272: LD_VAR 0 4
68276: PPUSH
68277: CALL_OW 110
68281: PUSH
68282: LD_INT 1
68284: PLUS
68285: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68286: LD_ADDR_VAR 0 6
68290: PUSH
68291: LD_VAR 0 4
68295: PPUSH
68296: CALL_OW 250
68300: PPUSH
68301: LD_VAR 0 4
68305: PPUSH
68306: CALL_OW 251
68310: PPUSH
68311: LD_INT 6
68313: PPUSH
68314: CALL 67930 0 3
68318: ST_TO_ADDR
// if cr then
68319: LD_VAR 0 6
68323: IFFALSE 68362
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68325: LD_VAR 0 4
68329: PPUSH
68330: LD_VAR 0 6
68334: PUSH
68335: LD_INT 1
68337: ARRAY
68338: PUSH
68339: LD_INT 1
68341: ARRAY
68342: PPUSH
68343: LD_VAR 0 6
68347: PUSH
68348: LD_INT 1
68350: ARRAY
68351: PUSH
68352: LD_INT 2
68354: ARRAY
68355: PPUSH
68356: CALL_OW 116
68360: GO 68602
// if path > tag then
68362: LD_VAR 0 2
68366: PUSH
68367: LD_VAR 0 8
68371: GREATER
68372: IFFALSE 68550
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
68374: LD_ADDR_VAR 0 5
68378: PUSH
68379: LD_INT 81
68381: PUSH
68382: LD_VAR 0 7
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 91
68393: PUSH
68394: LD_VAR 0 4
68398: PUSH
68399: LD_INT 12
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: LIST
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PPUSH
68411: CALL_OW 69
68415: ST_TO_ADDR
// if enemy then
68416: LD_VAR 0 5
68420: IFFALSE 68448
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68422: LD_VAR 0 4
68426: PPUSH
68427: LD_VAR 0 5
68431: PPUSH
68432: LD_VAR 0 4
68436: PPUSH
68437: CALL_OW 74
68441: PPUSH
68442: CALL_OW 115
68446: GO 68548
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68448: LD_VAR 0 4
68452: PPUSH
68453: LD_VAR 0 2
68457: PUSH
68458: LD_VAR 0 8
68462: ARRAY
68463: PUSH
68464: LD_INT 1
68466: ARRAY
68467: PPUSH
68468: LD_VAR 0 2
68472: PUSH
68473: LD_VAR 0 8
68477: ARRAY
68478: PUSH
68479: LD_INT 2
68481: ARRAY
68482: PPUSH
68483: CALL_OW 297
68487: PUSH
68488: LD_INT 6
68490: GREATER
68491: IFFALSE 68534
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68493: LD_VAR 0 4
68497: PPUSH
68498: LD_VAR 0 2
68502: PUSH
68503: LD_VAR 0 8
68507: ARRAY
68508: PUSH
68509: LD_INT 1
68511: ARRAY
68512: PPUSH
68513: LD_VAR 0 2
68517: PUSH
68518: LD_VAR 0 8
68522: ARRAY
68523: PUSH
68524: LD_INT 2
68526: ARRAY
68527: PPUSH
68528: CALL_OW 114
68532: GO 68548
// SetTag ( i , tag ) ;
68534: LD_VAR 0 4
68538: PPUSH
68539: LD_VAR 0 8
68543: PPUSH
68544: CALL_OW 109
// end else
68548: GO 68602
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68550: LD_ADDR_VAR 0 5
68554: PUSH
68555: LD_INT 81
68557: PUSH
68558: LD_VAR 0 7
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PPUSH
68567: CALL_OW 69
68571: ST_TO_ADDR
// if enemy then
68572: LD_VAR 0 5
68576: IFFALSE 68602
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68578: LD_VAR 0 4
68582: PPUSH
68583: LD_VAR 0 5
68587: PPUSH
68588: LD_VAR 0 4
68592: PPUSH
68593: CALL_OW 74
68597: PPUSH
68598: CALL_OW 115
// end ; end ;
68602: GO 68264
68604: POP
68605: POP
// end ; end_of_file
68606: LD_VAR 0 3
68610: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68611: LD_VAR 0 1
68615: PUSH
68616: LD_INT 200
68618: DOUBLE
68619: GREATEREQUAL
68620: IFFALSE 68628
68622: LD_INT 299
68624: DOUBLE
68625: LESSEQUAL
68626: IFTRUE 68630
68628: GO 68662
68630: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68631: LD_VAR 0 1
68635: PPUSH
68636: LD_VAR 0 2
68640: PPUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: LD_VAR 0 4
68650: PPUSH
68651: LD_VAR 0 5
68655: PPUSH
68656: CALL 25173 0 5
68660: GO 68739
68662: LD_INT 300
68664: DOUBLE
68665: GREATEREQUAL
68666: IFFALSE 68674
68668: LD_INT 399
68670: DOUBLE
68671: LESSEQUAL
68672: IFTRUE 68676
68674: GO 68738
68676: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68677: LD_VAR 0 1
68681: PPUSH
68682: LD_VAR 0 2
68686: PPUSH
68687: LD_VAR 0 3
68691: PPUSH
68692: LD_VAR 0 4
68696: PPUSH
68697: LD_VAR 0 5
68701: PPUSH
68702: LD_VAR 0 6
68706: PPUSH
68707: LD_VAR 0 7
68711: PPUSH
68712: LD_VAR 0 8
68716: PPUSH
68717: LD_VAR 0 9
68721: PPUSH
68722: LD_VAR 0 10
68726: PPUSH
68727: LD_VAR 0 11
68731: PPUSH
68732: CALL 23071 0 11
68736: GO 68739
68738: POP
// end ;
68739: PPOPN 11
68741: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_VAR 0 2
68751: PPUSH
68752: LD_VAR 0 3
68756: PPUSH
68757: LD_VAR 0 4
68761: PPUSH
68762: LD_VAR 0 5
68766: PPUSH
68767: CALL 25165 0 5
// end ; end_of_file
68771: PPOPN 5
68773: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68774: LD_VAR 0 1
68778: PPUSH
68779: LD_VAR 0 2
68783: PPUSH
68784: LD_VAR 0 3
68788: PPUSH
68789: LD_VAR 0 4
68793: PPUSH
68794: LD_VAR 0 5
68798: PPUSH
68799: LD_VAR 0 6
68803: PPUSH
68804: CALL 11266 0 6
// end ;
68808: PPOPN 6
68810: END
