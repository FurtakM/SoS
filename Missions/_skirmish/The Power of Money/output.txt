// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10853 0 4
// PrepareAmerican ;
  31: CALL 4032 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8541 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: IFFALSE 3153
3137: PUSH
3138: LD_INT 22
3140: PUSH
3141: LD_INT 6
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: AND
3153: IFFALSE 3936
3155: GO 3157
3157: DISABLE
3158: LD_INT 0
3160: PPUSH
3161: PPUSH
// begin enable ;
3162: ENABLE
// if conv_squad then
3163: LD_EXP 1
3167: IFFALSE 3438
// for i = conv_squad downto 1 do
3169: LD_ADDR_VAR 0 1
3173: PUSH
3174: DOUBLE
3175: LD_EXP 1
3179: INC
3180: ST_TO_ADDR
3181: LD_INT 1
3183: PUSH
3184: FOR_DOWNTO
3185: IFFALSE 3436
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3187: LD_EXP 1
3191: PUSH
3192: LD_VAR 0 1
3196: ARRAY
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_INT 9
3204: PPUSH
3205: CALL_OW 308
3209: IFFALSE 3286
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3211: LD_ADDR_VAR 0 2
3215: PUSH
3216: LD_INT 9
3218: PPUSH
3219: LD_INT 22
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 70
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3262
// begin safeCounter := safeCounter + 1 ;
3237: LD_ADDR_EXP 15
3241: PUSH
3242: LD_EXP 15
3246: PUSH
3247: LD_INT 1
3249: PLUS
3250: ST_TO_ADDR
// RemoveUnit ( j ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 64
// end ;
3260: GO 3234
3262: POP
3263: POP
// conv_squad := Delete ( conv_squad , i ) ;
3264: LD_ADDR_EXP 1
3268: PUSH
3269: LD_EXP 1
3273: PPUSH
3274: LD_VAR 0 1
3278: PPUSH
3279: CALL_OW 3
3283: ST_TO_ADDR
// break ;
3284: GO 3436
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3286: LD_EXP 1
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 6
3305: PUSH
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: ARRAY
3321: PPUSH
3322: CALL_OW 308
3326: IFFALSE 3372
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3328: LD_ADDR_EXP 1
3332: PUSH
3333: LD_EXP 1
3337: PPUSH
3338: LD_VAR 0 1
3342: PPUSH
3343: LD_INT 2
3345: PPUSH
3346: LD_EXP 1
3350: PUSH
3351: LD_VAR 0 1
3355: ARRAY
3356: PUSH
3357: LD_INT 2
3359: ARRAY
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: PPUSH
3365: CALL 10472 0 4
3369: ST_TO_ADDR
3370: GO 3434
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3372: LD_EXP 1
3376: PUSH
3377: LD_VAR 0 1
3381: ARRAY
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: PPUSH
3387: CALL_OW 314
3391: NOT
3392: IFFALSE 3434
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3394: LD_EXP 1
3398: PUSH
3399: LD_VAR 0 1
3403: ARRAY
3404: PUSH
3405: LD_INT 1
3407: ARRAY
3408: PPUSH
3409: LD_EXP 6
3413: PUSH
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 2
3427: ARRAY
3428: ARRAY
3429: PPUSH
3430: CALL_OW 113
// end ;
3434: GO 3184
3436: POP
3437: POP
// if escort then
3438: LD_EXP 2
3442: IFFALSE 3787
// for i = escort downto 1 do
3444: LD_ADDR_VAR 0 1
3448: PUSH
3449: DOUBLE
3450: LD_EXP 2
3454: INC
3455: ST_TO_ADDR
3456: LD_INT 1
3458: PUSH
3459: FOR_DOWNTO
3460: IFFALSE 3785
// begin if IsInArea ( escort [ i ] , conv_end ) then
3462: LD_EXP 2
3466: PUSH
3467: LD_VAR 0 1
3471: ARRAY
3472: PPUSH
3473: LD_INT 9
3475: PPUSH
3476: CALL_OW 308
3480: IFFALSE 3557
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 9
3489: PPUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 6
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 70
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3533
// begin safeCounter := safeCounter + 1 ;
3508: LD_ADDR_EXP 15
3512: PUSH
3513: LD_EXP 15
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// RemoveUnit ( j ) ;
3522: LD_VAR 0 2
3526: PPUSH
3527: CALL_OW 64
// end ;
3531: GO 3505
3533: POP
3534: POP
// escort := Delete ( escort , i ) ;
3535: LD_ADDR_EXP 2
3539: PUSH
3540: LD_EXP 2
3544: PPUSH
3545: LD_VAR 0 1
3549: PPUSH
3550: CALL_OW 3
3554: ST_TO_ADDR
// break ;
3555: GO 3785
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3557: LD_EXP 2
3561: PUSH
3562: LD_VAR 0 1
3566: ARRAY
3567: PPUSH
3568: CALL 10729 0 1
3572: IFFALSE 3611
3574: PUSH
3575: LD_EXP 2
3579: PUSH
3580: LD_VAR 0 1
3584: ARRAY
3585: PPUSH
3586: LD_EXP 2
3590: PUSH
3591: LD_VAR 0 1
3595: ARRAY
3596: PPUSH
3597: CALL 10729 0 1
3601: PPUSH
3602: CALL_OW 296
3606: PUSH
3607: LD_INT 13
3609: LESS
3610: AND
3611: IFFALSE 3646
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3613: LD_EXP 2
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_EXP 2
3628: PUSH
3629: LD_VAR 0 1
3633: ARRAY
3634: PPUSH
3635: CALL 10729 0 1
3639: PPUSH
3640: CALL_OW 115
3644: GO 3783
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3646: LD_EXP 1
3650: IFFALSE 3679
3652: PUSH
3653: LD_EXP 2
3657: PUSH
3658: LD_VAR 0 1
3662: ARRAY
3663: PPUSH
3664: LD_INT 64
3666: PPUSH
3667: LD_INT 117
3669: PPUSH
3670: CALL_OW 297
3674: PUSH
3675: LD_INT 35
3677: GREATER
3678: AND
3679: IFFALSE 3699
3681: PUSH
3682: LD_EXP 2
3686: PUSH
3687: LD_VAR 0 1
3691: ARRAY
3692: PPUSH
3693: CALL_OW 314
3697: NOT
3698: AND
3699: IFFALSE 3765
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3701: LD_EXP 2
3705: PUSH
3706: LD_VAR 0 1
3710: ARRAY
3711: PPUSH
3712: LD_EXP 1
3716: PUSH
3717: LD_INT 1
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: PPUSH
3725: CALL_OW 296
3729: PUSH
3730: LD_INT 6
3732: GREATER
3733: IFFALSE 3763
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3735: LD_EXP 2
3739: PUSH
3740: LD_VAR 0 1
3744: ARRAY
3745: PPUSH
3746: LD_EXP 1
3750: PUSH
3751: LD_INT 1
3753: ARRAY
3754: PUSH
3755: LD_INT 1
3757: ARRAY
3758: PPUSH
3759: CALL_OW 112
3763: GO 3783
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3765: LD_EXP 2
3769: PUSH
3770: LD_VAR 0 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 9
3778: PPUSH
3779: CALL_OW 113
// end ;
3783: GO 3459
3785: POP
3786: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3787: LD_INT 22
3789: PUSH
3790: LD_INT 6
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 21
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: IFFALSE 3936
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3817: LD_ADDR_VAR 0 2
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 6
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 21
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: FOR_IN
3852: IFFALSE 3934
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3854: LD_VAR 0 2
3858: PPUSH
3859: CALL_OW 314
3863: NOT
3864: IFFALSE 3881
3866: PUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 308
3879: NOT
3880: AND
3881: IFFALSE 3895
// ComMoveToArea ( j , conv_end ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 308
3907: IFFALSE 3932
// begin safeCounter := safeCounter + 1 ;
3909: LD_ADDR_EXP 15
3913: PUSH
3914: LD_EXP 15
3918: PUSH
3919: LD_INT 1
3921: PLUS
3922: ST_TO_ADDR
// RemoveUnit ( j ) ;
3923: LD_VAR 0 2
3927: PPUSH
3928: CALL_OW 64
// end ; end ;
3932: GO 3851
3934: POP
3935: POP
// end ;
3936: PPOPN 2
3938: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3939: LD_EXP 2
3943: PUSH
3944: LD_EXP 1
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 3
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 72
3967: IFFALSE 4029
3969: GO 3971
3971: DISABLE
3972: LD_INT 0
3974: PPUSH
// begin enable ;
3975: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3976: LD_ADDR_VAR 0 1
3980: PUSH
3981: LD_EXP 2
3985: PUSH
3986: LD_EXP 1
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: LD_INT 22
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 72
4009: PUSH
4010: FOR_IN
4011: IFFALSE 4027
// SetSide ( i , 6 ) ;
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 235
4025: GO 4010
4027: POP
4028: POP
// end ; end_of_file
4029: PPOPN 1
4031: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
// uc_side := 1 ;
4039: LD_ADDR_OWVAR 20
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// uc_nation := 1 ;
4047: LD_ADDR_OWVAR 21
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// us_alert := false ;
4055: LD_ADDR_EXP 21
4059: PUSH
4060: LD_INT 0
4062: ST_TO_ADDR
// us_retreat := false ;
4063: LD_ADDR_EXP 22
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// us_patrol := false ;
4071: LD_ADDR_EXP 23
4075: PUSH
4076: LD_INT 0
4078: ST_TO_ADDR
// us_count := 0 ;
4079: LD_ADDR_EXP 24
4083: PUSH
4084: LD_INT 0
4086: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: LD_INT 5
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: LD_INT 7
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_OWVAR 67
4110: ARRAY
4111: ST_TO_ADDR
// hc_class := 1 ;
4112: LD_ADDR_OWVAR 28
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// hc_sex := sex_male ;
4120: LD_ADDR_OWVAR 27
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4128: LD_ADDR_OWVAR 31
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 3
4138: PUSH
4139: LD_INT 4
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: ST_TO_ADDR
// hc_name := Jack Collins ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING Jack Collins
4158: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4159: LD_ADDR_OWVAR 29
4163: PUSH
4164: LD_INT 11
4166: PUSH
4167: LD_INT 11
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: ST_TO_ADDR
// hc_gallery :=  ;
4174: LD_ADDR_OWVAR 33
4178: PUSH
4179: LD_STRING 
4181: ST_TO_ADDR
// Collins := CreateHuman ;
4182: LD_ADDR_EXP 20
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4192: LD_EXP 20
4196: PPUSH
4197: LD_INT 50
4199: PPUSH
4200: CALL_OW 52
// hc_name :=  ;
4204: LD_ADDR_OWVAR 26
4208: PUSH
4209: LD_STRING 
4211: ST_TO_ADDR
// if Difficulty > 1 then
4212: LD_OWVAR 67
4216: PUSH
4217: LD_INT 1
4219: GREATER
4220: IFFALSE 4274
// begin bc_type := b_bunker ;
4222: LD_ADDR_OWVAR 42
4226: PUSH
4227: LD_INT 32
4229: ST_TO_ADDR
// bc_level := 5 ;
4230: LD_ADDR_OWVAR 43
4234: PUSH
4235: LD_INT 5
4237: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4238: LD_INT 40
4240: PPUSH
4241: LD_INT 33
4243: PPUSH
4244: LD_INT 2
4246: PPUSH
4247: CALL_OW 47
// if Difficulty > 2 then
4251: LD_OWVAR 67
4255: PUSH
4256: LD_INT 2
4258: GREATER
4259: IFFALSE 4274
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4261: LD_INT 41
4263: PPUSH
4264: LD_INT 42
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 2
4279: PPUSH
4280: LD_VAR 0 4
4284: PPUSH
4285: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4289: CALL_OW 44
4293: PPUSH
4294: LD_INT 50
4296: PPUSH
4297: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4301: LD_INT 0
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PPUSH
4312: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4316: CALL_OW 44
4320: PPUSH
4321: LD_INT 56
4323: PPUSH
4324: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4340: LD_INT 0
4342: PPUSH
4343: LD_INT 4
4345: PPUSH
4346: LD_VAR 0 4
4350: PPUSH
4351: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4355: CALL_OW 44
4359: PPUSH
4360: LD_INT 63
4362: PPUSH
4363: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4367: LD_INT 0
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_VAR 0 4
4377: PPUSH
4378: CALL_OW 380
// un := CreateHuman ;
4382: LD_ADDR_VAR 0 3
4386: PUSH
4387: CALL_OW 44
4391: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4392: LD_VAR 0 3
4396: PPUSH
4397: LD_INT 4
4399: PPUSH
4400: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 30
4421: PUSH
4422: LD_INT 31
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: PUSH
4438: LD_INT 1
4440: ARRAY
4441: PPUSH
4442: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 30
4463: PUSH
4464: LD_INT 32
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 69
4479: ST_TO_ADDR
// for i in towers do
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_VAR 0 5
4489: PUSH
4490: FOR_IN
4491: IFFALSE 4559
// begin PrepareHuman ( false , 1 , skill ) ;
4493: LD_INT 0
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_VAR 0 4
4503: PPUSH
4504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4508: CALL_OW 44
4512: PPUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4522: LD_VAR 0 2
4526: PPUSH
4527: LD_INT 4
4529: PUSH
4530: LD_INT 3
4532: PUSH
4533: LD_INT 5
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_INT 3
4546: PPUSH
4547: CALL_OW 12
4551: ARRAY
4552: PPUSH
4553: CALL_OW 431
// end ;
4557: GO 4490
4559: POP
4560: POP
// PrepareHuman ( false , 1 , skill ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: CALL_OW 380
// us_patrol := CreateHuman ;
4576: LD_ADDR_EXP 23
4580: PUSH
4581: CALL_OW 44
4585: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4586: LD_EXP 23
4590: PPUSH
4591: LD_INT 12
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: LD_INT 0
4599: PPUSH
4600: CALL_OW 48
// end ;
4604: LD_VAR 0 1
4608: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4609: LD_EXP 24
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 5
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_OWVAR 67
4632: ARRAY
4633: GREATEREQUAL
4634: IFFALSE 4659
4636: GO 4638
4638: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4639: LD_EXP 20
4643: PPUSH
4644: LD_STRING DPM_C2
4646: PPUSH
4647: CALL_OW 88
// us_retreat := true ;
4651: LD_ADDR_EXP 22
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// end ;
4659: END
// every 10 10$00 trigger not us_alert do var R ;
4660: LD_EXP 21
4664: NOT
4665: IFFALSE 4739
4667: GO 4669
4669: DISABLE
4670: LD_INT 0
4672: PPUSH
// begin uc_side := 1 ;
4673: LD_ADDR_OWVAR 20
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// uc_nation := 1 ;
4681: LD_ADDR_OWVAR 21
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4689: LD_INT 0
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL_OW 380
// R := CreateHuman ;
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: CALL_OW 44
4711: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_STRING DPM_R1
4719: PPUSH
4720: CALL_OW 94
// Wait ( 0 0$03 ) ;
4724: LD_INT 105
4726: PPUSH
4727: CALL_OW 67
// us_retreat := true ;
4731: LD_ADDR_EXP 22
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// end ;
4739: PPOPN 1
4741: END
// every 0 0$01 trigger us_alert do var i ;
4742: LD_EXP 21
4746: IFFALSE 5006
4748: GO 4750
4750: DISABLE
4751: LD_INT 0
4753: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4754: LD_EXP 20
4758: PPUSH
4759: LD_STRING DPM_C1
4761: PPUSH
4762: CALL_OW 88
// if UnitsInside ( us_fac ) then
4766: LD_INT 56
4768: PPUSH
4769: CALL_OW 313
4773: IFFALSE 4828
// for i in UnitsInside ( us_fac ) do
4775: LD_ADDR_VAR 0 1
4779: PUSH
4780: LD_INT 56
4782: PPUSH
4783: CALL_OW 313
4787: PUSH
4788: FOR_IN
4789: IFFALSE 4826
// begin ComExitBuilding ( i ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 69
4807: PPUSH
4808: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 183
// end ;
4824: GO 4788
4826: POP
4827: POP
// ComExitBuilding ( Collins ) ;
4828: LD_EXP 20
4832: PPUSH
4833: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4837: LD_EXP 20
4841: PPUSH
4842: LD_INT 69
4844: PPUSH
4845: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4849: LD_INT 22
4851: PUSH
4852: LD_INT 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 25
4861: PUSH
4862: LD_INT 2
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4886: LD_INT 22
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 25
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: PUSH
4915: LD_INT 1
4917: ARRAY
4918: PPUSH
4919: LD_INT 67
4921: PPUSH
4922: LD_INT 52
4924: PPUSH
4925: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4929: LD_INT 22
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 25
4941: PUSH
4942: LD_INT 4
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: PPUSH
4962: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4966: LD_INT 22
4968: PUSH
4969: LD_INT 1
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 25
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: PUSH
4995: LD_INT 1
4997: ARRAY
4998: PPUSH
4999: LD_INT 69
5001: PPUSH
5002: CALL_OW 180
// end ;
5006: PPOPN 1
5008: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5009: LD_EXP 21
5013: NOT
5014: IFFALSE 5029
5016: PUSH
5017: LD_INT 56
5019: PPUSH
5020: CALL_OW 255
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: AND
5029: IFFALSE 5072
5031: GO 5033
5033: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5034: LD_INT 56
5036: PPUSH
5037: LD_INT 2
5039: PPUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_INT 1
5045: PPUSH
5046: LD_INT 4
5048: PPUSH
5049: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5053: LD_INT 56
5055: PPUSH
5056: LD_INT 3
5058: PPUSH
5059: LD_INT 2
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: LD_INT 5
5067: PPUSH
5068: CALL_OW 185
// end ;
5072: END
// every 0 0$01 trigger us_patrol do
5073: LD_EXP 23
5077: IFFALSE 5125
5079: GO 5081
5081: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5082: LD_EXP 23
5086: PPUSH
5087: LD_INT 12
5089: PUSH
5090: LD_INT 5
5092: PUSH
5093: LD_INT 56
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 94
5101: PUSH
5102: LD_INT 34
5104: PUSH
5105: LD_INT 92
5107: PUSH
5108: LD_INT 108
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL 5126 0 2
5125: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
5130: PPUSH
5131: PPUSH
// s = 1 ;
5132: LD_ADDR_VAR 0 4
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// turn := true ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// while ( un and not us_alert ) do
5148: LD_VAR 0 1
5152: IFFALSE 5161
5154: PUSH
5155: LD_EXP 21
5159: NOT
5160: AND
5161: IFFALSE 5342
// begin wait ( 35 ) ;
5163: LD_INT 35
5165: PPUSH
5166: CALL_OW 67
// if not HasTask ( un ) then
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL_OW 314
5179: NOT
5180: IFFALSE 5299
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 2
5191: PUSH
5192: LD_VAR 0 4
5196: ARRAY
5197: PPUSH
5198: LD_VAR 0 2
5202: PUSH
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 1
5210: PLUS
5211: ARRAY
5212: PPUSH
5213: CALL_OW 111
// if s + 2 > points then
5217: LD_VAR 0 4
5221: PUSH
5222: LD_INT 2
5224: PLUS
5225: PUSH
5226: LD_VAR 0 2
5230: GREATER
5231: IFFALSE 5241
// turn := false ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_INT 0
5240: ST_TO_ADDR
// if s - 2 < 1 then
5241: LD_VAR 0 4
5245: PUSH
5246: LD_INT 2
5248: MINUS
5249: PUSH
5250: LD_INT 1
5252: LESS
5253: IFFALSE 5263
// turn := true ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if turn then
5263: LD_VAR 0 6
5267: IFFALSE 5285
// s := s + 2 else
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: LD_VAR 0 4
5278: PUSH
5279: LD_INT 2
5281: PLUS
5282: ST_TO_ADDR
5283: GO 5299
// s := s - 2 ;
5285: LD_ADDR_VAR 0 4
5289: PUSH
5290: LD_VAR 0 4
5294: PUSH
5295: LD_INT 2
5297: MINUS
5298: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5299: LD_VAR 0 1
5303: PPUSH
5304: CALL_OW 256
5308: PUSH
5309: LD_INT 1000
5311: LESS
5312: IFTRUE 5328
5314: PUSH
5315: LD_INT 3
5317: PPUSH
5318: LD_VAR 0 1
5322: PPUSH
5323: CALL_OW 292
5327: OR
5328: IFFALSE 5340
// begin us_alert := true ;
5330: LD_ADDR_EXP 21
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// break ;
5338: GO 5342
// end ; end ;
5340: GO 5148
// ComEnterUnit ( un , us_arm ) ;
5342: LD_VAR 0 1
5346: PPUSH
5347: LD_INT 69
5349: PPUSH
5350: CALL_OW 120
// end ;
5354: LD_VAR 0 3
5358: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5359: LD_EXP 22
5363: IFFALSE 5538
5365: GO 5367
5367: DISABLE
5368: LD_INT 0
5370: PPUSH
5371: PPUSH
// begin point := false ;
5372: LD_ADDR_VAR 0 2
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5380: LD_INT 5
5382: PPUSH
5383: LD_INT 22
5385: PUSH
5386: LD_INT 3
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: EQUAL
5401: IFFALSE 5413
// point := us_ret1 else
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 3
5410: ST_TO_ADDR
5411: GO 5454
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5413: LD_INT 5
5415: PPUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 3
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: PUSH
5431: LD_INT 0
5433: EQUAL
5434: IFFALSE 5446
// point := us_ret2 else
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_INT 2
5443: ST_TO_ADDR
5444: GO 5454
// point := us_ret3 ;
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: LD_INT 4
5453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5454: LD_ADDR_VAR 0 1
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_INT 1
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 21
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 69
5487: PUSH
5488: FOR_IN
5489: IFFALSE 5536
// begin if IsInUnit ( i ) then
5491: LD_VAR 0 1
5495: PPUSH
5496: CALL_OW 310
5500: IFFALSE 5520
// begin ComExitBuilding ( i ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 122
// ComExitVehicle ( i ) ;
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5520: LD_VAR 0 1
5524: PPUSH
5525: LD_VAR 0 2
5529: PPUSH
5530: CALL_OW 173
// end ;
5534: GO 5488
5536: POP
5537: POP
// end ;
5538: PPOPN 2
5540: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5541: LD_EXP 22
5545: IFFALSE 5566
5547: PUSH
5548: LD_INT 3
5550: PPUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 1
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 70
5565: AND
5566: IFFALSE 5612
5568: GO 5570
5570: DISABLE
// begin enable ;
5571: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5572: LD_INT 3
5574: PPUSH
5575: LD_INT 22
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PPUSH
5585: CALL_OW 70
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: PPUSH
5594: CALL_OW 64
// if medal1 then
5598: LD_EXP 3
5602: IFFALSE 5612
// medal1 := false ;
5604: LD_ADDR_EXP 3
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// end ;
5612: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5613: LD_EXP 22
5617: IFFALSE 5638
5619: PUSH
5620: LD_INT 2
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PPUSH
5633: CALL_OW 70
5637: AND
5638: IFFALSE 5684
5640: GO 5642
5642: DISABLE
// begin enable ;
5643: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 64
// if medal1 then
5670: LD_EXP 3
5674: IFFALSE 5684
// medal1 := false ;
5676: LD_ADDR_EXP 3
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// end ;
5684: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5685: LD_EXP 22
5689: IFFALSE 5710
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6084
// begin uc_side := 1 ;
5870: LD_ADDR_OWVAR 20
5874: PUSH
5875: LD_INT 1
5877: ST_TO_ADDR
// uc_nation := 1 ;
5878: LD_ADDR_OWVAR 21
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5886: LD_ADDR_OWVAR 37
5890: PUSH
5891: LD_INT 2
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 1
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: CALL_OW 12
5915: ARRAY
5916: ST_TO_ADDR
// vc_engine := engine_combustion ;
5917: LD_ADDR_OWVAR 39
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_control := control_manual ;
5925: LD_ADDR_OWVAR 38
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5933: LD_ADDR_OWVAR 40
5937: PUSH
5938: LD_INT 4
5940: PUSH
5941: LD_INT 5
5943: PUSH
5944: LD_INT 3
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 12
5962: ARRAY
5963: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5964: LD_ADDR_OWVAR 41
5968: PUSH
5969: LD_INT 88
5971: PPUSH
5972: LD_INT 99
5974: PPUSH
5975: CALL_OW 12
5979: ST_TO_ADDR
// un := CreateVehicle ;
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: CALL_OW 45
5989: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5990: LD_VAR 0 4
5994: PPUSH
5995: LD_INT 64
5997: PPUSH
5998: LD_INT 117
6000: PPUSH
6001: LD_INT 0
6003: PPUSH
6004: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
6008: LD_INT 0
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_VAR 0 5
6018: PPUSH
6019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6023: CALL_OW 44
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6037: LD_ADDR_EXP 12
6041: PUSH
6042: LD_EXP 12
6046: PPUSH
6047: LD_INT 1
6049: PPUSH
6050: LD_VAR 0 4
6054: PPUSH
6055: CALL_OW 2
6059: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6060: LD_VAR 0 4
6064: PPUSH
6065: LD_INT 60
6067: PPUSH
6068: LD_INT 109
6070: PPUSH
6071: CALL_OW 111
// Wait ( 0 0$02 ) ;
6075: LD_INT 70
6077: PPUSH
6078: CALL_OW 67
// end ;
6082: GO 5867
6084: POP
6085: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6086: LD_INT 62
6088: PPUSH
6089: LD_INT 113
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 69
6113: IFFALSE 6314
// begin Wait ( 0 0$01 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i = 1 to us_force do
6122: LD_ADDR_VAR 0 2
6126: PUSH
6127: DOUBLE
6128: LD_INT 1
6130: DEC
6131: ST_TO_ADDR
6132: LD_EXP 12
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6173
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6140: LD_EXP 12
6144: PUSH
6145: LD_VAR 0 2
6149: ARRAY
6150: PPUSH
6151: LD_EXP 12
6155: PUSH
6156: LD_VAR 0 2
6160: ARRAY
6161: PPUSH
6162: CALL 10729 0 1
6166: PPUSH
6167: CALL_OW 115
6171: GO 6137
6173: POP
6174: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6175: LD_INT 22
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 25
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 55
6200: PUSH
6201: EMPTY
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: IFFALSE 6312
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 3
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 55
6249: PUSH
6250: EMPTY
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6310
// if not IsInArea ( j , conv_end ) then
6270: LD_VAR 0 3
6274: PPUSH
6275: LD_INT 9
6277: PPUSH
6278: CALL_OW 308
6282: NOT
6283: IFFALSE 6299
// ComMoveToArea ( j , conv_end ) else
6285: LD_VAR 0 3
6289: PPUSH
6290: LD_INT 9
6292: PPUSH
6293: CALL_OW 113
6297: GO 6308
// RemoveUnit ( j ) ;
6299: LD_VAR 0 3
6303: PPUSH
6304: CALL_OW 64
6308: GO 6267
6310: POP
6311: POP
// end ;
6312: GO 6099
// end ; end_of_file
6314: LD_VAR 0 1
6318: RET
// export function PrepareArabian ; begin
6319: LD_INT 0
6321: PPUSH
// RobertFarmer ;
6322: CALL 6343 0 0
// PrepareHovercrafts ;
6326: CALL 7340 0 0
// ar_attacks := true ;
6330: LD_ADDR_EXP 10
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// end ;
6338: LD_VAR 0 1
6342: RET
// export Farmer ; export function RobertFarmer ; begin
6343: LD_INT 0
6345: PPUSH
// uc_side := 2 ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_INT 2
6353: ST_TO_ADDR
// uc_nation := 2 ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 2
6361: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6362: LD_ADDR_EXP 25
6366: PUSH
6367: LD_STRING Farmer
6369: PPUSH
6370: CALL_OW 25
6374: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6375: LD_EXP 25
6379: PPUSH
6380: LD_STRING DPM_F1
6382: PPUSH
6383: CALL_OW 94
// end ;
6387: LD_VAR 0 1
6391: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
// uc_side := 2 ;
6399: LD_ADDR_OWVAR 20
6403: PUSH
6404: LD_INT 2
6406: ST_TO_ADDR
// uc_nation := 2 ;
6407: LD_ADDR_OWVAR 21
6411: PUSH
6412: LD_INT 2
6414: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 6
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: LD_OWVAR 67
6438: ARRAY
6439: ST_TO_ADDR
// Randomize ;
6440: CALL_OW 10
// case type of 1 :
6444: LD_VAR 0 1
6448: PUSH
6449: LD_INT 1
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6595
6457: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_OWVAR 67
6486: ARRAY
6487: PUSH
6488: FOR_TO
6489: IFFALSE 6591
// begin uc_side := 2 ;
6491: LD_ADDR_OWVAR 20
6495: PUSH
6496: LD_INT 2
6498: ST_TO_ADDR
// uc_nation := 2 ;
6499: LD_ADDR_OWVAR 21
6503: PUSH
6504: LD_INT 2
6506: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_INT 1
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 8
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: LD_VAR 0 6
6540: PPUSH
6541: CALL_OW 380
// un := CreateHuman ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: CALL_OW 44
6554: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6555: LD_VAR 0 4
6559: PPUSH
6560: LD_INT 18
6562: PPUSH
6563: LD_INT 0
6565: PPUSH
6566: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_INT 20
6577: PPUSH
6578: CALL_OW 113
// Wait ( 0 0$01 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// end ;
6589: GO 6488
6591: POP
6592: POP
// end ; 2 :
6593: GO 7335
6595: LD_INT 2
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6929
6603: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6604: LD_ADDR_VAR 0 3
6608: PUSH
6609: DOUBLE
6610: LD_INT 1
6612: DEC
6613: ST_TO_ADDR
6614: LD_INT 4
6616: PUSH
6617: LD_INT 5
6619: PUSH
6620: LD_INT 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: PUSH
6628: LD_OWVAR 67
6632: ARRAY
6633: PUSH
6634: FOR_TO
6635: IFFALSE 6714
// begin uc_side := 2 ;
6637: LD_ADDR_OWVAR 20
6641: PUSH
6642: LD_INT 2
6644: ST_TO_ADDR
// uc_nation := 2 ;
6645: LD_ADDR_OWVAR 21
6649: PUSH
6650: LD_INT 2
6652: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6653: LD_INT 0
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_VAR 0 6
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6678: LD_VAR 0 4
6682: PPUSH
6683: LD_INT 17
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6693: LD_VAR 0 4
6697: PPUSH
6698: LD_INT 19
6700: PPUSH
6701: CALL_OW 113
// Wait ( 0 0$01 ) ;
6705: LD_INT 35
6707: PPUSH
6708: CALL_OW 67
// end ;
6712: GO 6634
6714: POP
6715: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_INT 2
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: LD_OWVAR 67
6744: ARRAY
6745: PUSH
6746: FOR_TO
6747: IFFALSE 6925
// begin uc_side := 2 ;
6749: LD_ADDR_OWVAR 20
6753: PUSH
6754: LD_INT 2
6756: ST_TO_ADDR
// uc_nation := 2 ;
6757: LD_ADDR_OWVAR 21
6761: PUSH
6762: LD_INT 2
6764: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6765: LD_ADDR_OWVAR 37
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 2
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// vc_engine := engine_combustion ;
6792: LD_ADDR_OWVAR 39
6796: PUSH
6797: LD_INT 1
6799: ST_TO_ADDR
// vc_control := control_manual ;
6800: LD_ADDR_OWVAR 38
6804: PUSH
6805: LD_INT 1
6807: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6808: LD_ADDR_OWVAR 40
6812: PUSH
6813: LD_INT 24
6815: PUSH
6816: LD_INT 23
6818: PUSH
6819: LD_INT 27
6821: PUSH
6822: LD_INT 28
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 5
6840: PPUSH
6841: CALL_OW 12
6845: ARRAY
6846: ST_TO_ADDR
// veh := CreateVehicle ;
6847: LD_ADDR_VAR 0 5
6851: PUSH
6852: CALL_OW 45
6856: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6857: LD_VAR 0 5
6861: PPUSH
6862: LD_INT 17
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6872: LD_INT 0
6874: PPUSH
6875: LD_INT 1
6877: PPUSH
6878: LD_VAR 0 6
6882: PPUSH
6883: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6887: CALL_OW 44
6891: PPUSH
6892: LD_VAR 0 5
6896: PPUSH
6897: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6901: LD_VAR 0 5
6905: PPUSH
6906: LD_INT 89
6908: PPUSH
6909: LD_INT 40
6911: PPUSH
6912: CALL_OW 111
// Wait ( 0 0$02 ) ;
6916: LD_INT 70
6918: PPUSH
6919: CALL_OW 67
// end ;
6923: GO 6746
6925: POP
6926: POP
// end ; 3 :
6927: GO 7335
6929: LD_INT 3
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 7334
6937: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: DOUBLE
6944: LD_INT 1
6946: DEC
6947: ST_TO_ADDR
6948: LD_INT 3
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: LD_INT 5
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_OWVAR 67
6966: ARRAY
6967: PUSH
6968: LD_OWVAR 1
6972: PUSH
6973: LD_INT 31500
6975: DIV
6976: PLUS
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7109
// begin uc_side := 2 ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// uc_nation := 2 ;
6989: LD_ADDR_OWVAR 21
6993: PUSH
6994: LD_INT 2
6996: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 1
7002: PUSH
7003: LD_INT 8
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 1
7012: PPUSH
7013: LD_INT 2
7015: PPUSH
7016: CALL_OW 12
7020: ARRAY
7021: PPUSH
7022: LD_VAR 0 6
7026: PPUSH
7027: CALL_OW 380
// un := CreateHuman ;
7031: LD_ADDR_VAR 0 4
7035: PUSH
7036: CALL_OW 44
7040: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7041: LD_VAR 0 4
7045: PPUSH
7046: LD_INT 17
7048: PPUSH
7049: LD_INT 0
7051: PPUSH
7052: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7056: LD_ADDR_EXP 11
7060: PUSH
7061: LD_EXP 11
7065: PPUSH
7066: LD_EXP 11
7070: PUSH
7071: LD_INT 1
7073: PLUS
7074: PPUSH
7075: LD_VAR 0 5
7079: PPUSH
7080: CALL_OW 1
7084: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7085: LD_VAR 0 4
7089: PPUSH
7090: LD_INT 17
7092: PPUSH
7093: LD_INT 9
7095: PPUSH
7096: CALL_OW 111
// Wait ( 0 0$01 ) ;
7100: LD_INT 35
7102: PPUSH
7103: CALL_OW 67
// end ;
7107: GO 6978
7109: POP
7110: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_INT 4
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: PUSH
7135: LD_OWVAR 67
7139: ARRAY
7140: PUSH
7141: FOR_TO
7142: IFFALSE 7330
// begin uc_side := 2 ;
7144: LD_ADDR_OWVAR 20
7148: PUSH
7149: LD_INT 2
7151: ST_TO_ADDR
// uc_nation := 2 ;
7152: LD_ADDR_OWVAR 21
7156: PUSH
7157: LD_INT 2
7159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7160: LD_ADDR_OWVAR 37
7164: PUSH
7165: LD_INT 14
7167: ST_TO_ADDR
// vc_engine := engine_combustion ;
7168: LD_ADDR_OWVAR 39
7172: PUSH
7173: LD_INT 1
7175: ST_TO_ADDR
// vc_control := control_manual ;
7176: LD_ADDR_OWVAR 38
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7184: LD_ADDR_OWVAR 40
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 27
7194: PUSH
7195: LD_INT 28
7197: PUSH
7198: LD_INT 26
7200: PUSH
7201: LD_INT 92
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 1
7213: PPUSH
7214: LD_INT 5
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// veh := CreateVehicle ;
7223: LD_ADDR_VAR 0 5
7227: PUSH
7228: CALL_OW 45
7232: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7233: LD_VAR 0 5
7237: PPUSH
7238: LD_INT 16
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7248: LD_INT 0
7250: PPUSH
7251: LD_INT 3
7253: PPUSH
7254: LD_VAR 0 6
7258: PPUSH
7259: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7263: CALL_OW 44
7267: PPUSH
7268: LD_VAR 0 5
7272: PPUSH
7273: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7277: LD_ADDR_EXP 11
7281: PUSH
7282: LD_EXP 11
7286: PPUSH
7287: LD_EXP 11
7291: PUSH
7292: LD_INT 1
7294: PLUS
7295: PPUSH
7296: LD_VAR 0 5
7300: PPUSH
7301: CALL_OW 1
7305: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7306: LD_VAR 0 5
7310: PPUSH
7311: LD_INT 125
7313: PPUSH
7314: LD_INT 31
7316: PPUSH
7317: CALL_OW 111
// Wait ( 0 0$02 ) ;
7321: LD_INT 70
7323: PPUSH
7324: CALL_OW 67
// end ;
7328: GO 7141
7330: POP
7331: POP
// end ; end ;
7332: GO 7335
7334: POP
// end ;
7335: LD_VAR 0 2
7339: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7340: LD_INT 0
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
// areas := [ river1 , river2 ] ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_INT 14
7354: PUSH
7355: LD_INT 15
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7362: LD_ADDR_VAR 0 5
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: LD_INT 6
7372: PUSH
7373: LD_INT 7
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_OWVAR 67
7385: ARRAY
7386: ST_TO_ADDR
// uc_side := 2 ;
7387: LD_ADDR_OWVAR 20
7391: PUSH
7392: LD_INT 2
7394: ST_TO_ADDR
// uc_nation := 2 ;
7395: LD_ADDR_OWVAR 21
7399: PUSH
7400: LD_INT 2
7402: ST_TO_ADDR
// hc_name :=  ;
7403: LD_ADDR_OWVAR 26
7407: PUSH
7408: LD_STRING 
7410: ST_TO_ADDR
// hc_gallery :=  ;
7411: LD_ADDR_OWVAR 33
7415: PUSH
7416: LD_STRING 
7418: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7419: LD_ADDR_VAR 0 2
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 1
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PUSH
7443: LD_OWVAR 67
7447: ARRAY
7448: PUSH
7449: FOR_TO
7450: IFFALSE 7602
// begin uc_side := 2 ;
7452: LD_ADDR_OWVAR 20
7456: PUSH
7457: LD_INT 2
7459: ST_TO_ADDR
// uc_nation := 2 ;
7460: LD_ADDR_OWVAR 21
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7468: LD_ADDR_OWVAR 37
7472: PUSH
7473: LD_INT 11
7475: ST_TO_ADDR
// vc_engine := engine_solar ;
7476: LD_ADDR_OWVAR 39
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// vc_control := control_manual ;
7484: LD_ADDR_OWVAR 38
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7492: LD_ADDR_OWVAR 40
7496: PUSH
7497: LD_INT 24
7499: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7500: LD_ADDR_OWVAR 41
7504: PUSH
7505: LD_INT 100
7507: ST_TO_ADDR
// un := CreateVehicle ;
7508: LD_ADDR_VAR 0 3
7512: PUSH
7513: CALL_OW 45
7517: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 121
7525: PPUSH
7526: LD_INT 69
7528: PPUSH
7529: LD_INT 4
7531: PPUSH
7532: LD_INT 0
7534: PPUSH
7535: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7539: LD_INT 0
7541: PPUSH
7542: LD_INT 3
7544: PPUSH
7545: LD_VAR 0 5
7549: PPUSH
7550: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7554: CALL_OW 44
7558: PPUSH
7559: LD_VAR 0 3
7563: PPUSH
7564: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7568: LD_ADDR_EXP 9
7572: PUSH
7573: LD_EXP 9
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: LD_VAR 0 3
7585: PUSH
7586: LD_VAR 0 2
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 2
7599: ST_TO_ADDR
// end ;
7600: GO 7449
7602: POP
7603: POP
// end ;
7604: LD_VAR 0 1
7608: RET
// every 0 0$01 trigger riv do var i , c ;
7609: LD_EXP 9
7613: IFFALSE 8048
7615: GO 7617
7617: DISABLE
7618: LD_INT 0
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// for i = riv downto 1 do
7623: LD_ADDR_VAR 0 1
7627: PUSH
7628: DOUBLE
7629: LD_EXP 9
7633: INC
7634: ST_TO_ADDR
7635: LD_INT 1
7637: PUSH
7638: FOR_DOWNTO
7639: IFFALSE 8046
// begin if not riv [ i ] [ 1 ] then
7641: LD_EXP 9
7645: PUSH
7646: LD_VAR 0 1
7650: ARRAY
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: NOT
7656: IFFALSE 7678
// begin riv := Delete ( riv , 1 ) ;
7658: LD_ADDR_EXP 9
7662: PUSH
7663: LD_EXP 9
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 3
7675: ST_TO_ADDR
// break ;
7676: GO 8046
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 1
7691: ARRAY
7692: PPUSH
7693: CALL_OW 314
7697: NOT
7698: IFFALSE 7766
// begin if riv [ i ] [ 2 ] = 1 then
7700: LD_EXP 9
7704: PUSH
7705: LD_VAR 0 1
7709: ARRAY
7710: PUSH
7711: LD_INT 2
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: EQUAL
7718: IFFALSE 7730
// c := 2 else
7720: LD_ADDR_VAR 0 2
7724: PUSH
7725: LD_INT 2
7727: ST_TO_ADDR
7728: GO 7738
// c := 1 ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7738: LD_ADDR_EXP 9
7742: PUSH
7743: LD_EXP 9
7747: PPUSH
7748: LD_VAR 0 1
7752: PPUSH
7753: LD_INT 2
7755: PPUSH
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL 10472 0 4
7765: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7766: LD_EXP 9
7770: PUSH
7771: LD_VAR 0 1
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_INT 14
7783: PUSH
7784: LD_INT 15
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_EXP 9
7795: PUSH
7796: LD_VAR 0 1
7800: ARRAY
7801: PUSH
7802: LD_INT 2
7804: ARRAY
7805: ARRAY
7806: PPUSH
7807: CALL_OW 308
7811: NOT
7812: IFFALSE 8044
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7814: LD_EXP 9
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PPUSH
7829: CALL_OW 261
7833: PUSH
7834: LD_INT 50
7836: LESS
7837: IFFALSE 7861
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 67
7856: PPUSH
7857: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7861: LD_EXP 9
7865: PUSH
7866: LD_VAR 0 1
7870: ARRAY
7871: PUSH
7872: LD_INT 1
7874: ARRAY
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PPUSH
7891: LD_EXP 9
7895: PUSH
7896: LD_VAR 0 1
7900: ARRAY
7901: PUSH
7902: LD_INT 1
7904: ARRAY
7905: PPUSH
7906: CALL_OW 74
7910: PPUSH
7911: CALL_OW 296
7915: PUSH
7916: LD_INT 9
7918: LESS
7919: IFFALSE 7977
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7921: LD_EXP 9
7925: PUSH
7926: LD_VAR 0 1
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PPUSH
7936: LD_INT 22
7938: PUSH
7939: LD_INT 3
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PPUSH
7951: LD_EXP 9
7955: PUSH
7956: LD_VAR 0 1
7960: ARRAY
7961: PUSH
7962: LD_INT 1
7964: ARRAY
7965: PPUSH
7966: CALL_OW 74
7970: PPUSH
7971: CALL_OW 115
7975: GO 8044
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7977: LD_EXP 9
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_INT 14
7994: PUSH
7995: LD_INT 15
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_EXP 9
8006: PUSH
8007: LD_VAR 0 1
8011: ARRAY
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: ARRAY
8017: PPUSH
8018: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8022: LD_EXP 9
8026: PUSH
8027: LD_VAR 0 1
8031: ARRAY
8032: PUSH
8033: LD_INT 1
8035: ARRAY
8036: PPUSH
8037: LD_INT 350
8039: PPUSH
8040: CALL_OW 202
// end ; end ; end ;
8044: GO 7638
8046: POP
8047: POP
// end ;
8048: PPOPN 2
8050: END
// every 10 10$00 trigger convoy_start do var i , un ;
8051: LD_EXP 7
8055: IFFALSE 8176
8057: GO 8059
8059: DISABLE
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// begin enable ;
8064: ENABLE
// for i = 1 to 2 do
8065: LD_ADDR_VAR 0 1
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_INT 2
8077: PUSH
8078: FOR_TO
8079: IFFALSE 8174
// begin uc_side := 2 ;
8081: LD_ADDR_OWVAR 20
8085: PUSH
8086: LD_INT 2
8088: ST_TO_ADDR
// uc_nation := 2 ;
8089: LD_ADDR_OWVAR 21
8093: PUSH
8094: LD_INT 2
8096: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8097: LD_INT 0
8099: PPUSH
8100: LD_INT 1
8102: PPUSH
8103: LD_INT 4
8105: PPUSH
8106: CALL_OW 380
// un := CreateHuman ;
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: CALL_OW 44
8119: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_INT 10
8127: PPUSH
8128: LD_INT 2
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8138: LD_VAR 0 2
8142: PPUSH
8143: LD_INT 24
8145: PPUSH
8146: LD_INT 36
8148: PPUSH
8149: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8153: LD_VAR 0 2
8157: PPUSH
8158: LD_INT 9
8160: PPUSH
8161: CALL_OW 173
// Wait ( 0 0$02 ) ;
8165: LD_INT 70
8167: PPUSH
8168: CALL_OW 67
// end ;
8172: GO 8078
8174: POP
8175: POP
// end ;
8176: PPOPN 2
8178: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8179: LD_INT 22
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: IFFALSE 8507
8195: GO 8197
8197: DISABLE
8198: LD_INT 0
8200: PPUSH
8201: PPUSH
// begin enable ;
8202: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8203: LD_ADDR_VAR 0 2
8207: PUSH
8208: LD_INT 22
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 69
8222: PUSH
8223: LD_EXP 11
8227: DIFF
8228: ST_TO_ADDR
// if rest then
8229: LD_VAR 0 2
8233: IFFALSE 8305
// for i in rest do
8235: LD_ADDR_VAR 0 1
8239: PUSH
8240: LD_VAR 0 2
8244: PUSH
8245: FOR_IN
8246: IFFALSE 8303
// if GetClass ( i ) = 3 then
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 257
8257: PUSH
8258: LD_INT 3
8260: EQUAL
8261: IFFALSE 8301
// begin if not IsInArea ( i , ar2 ) then
8263: LD_VAR 0 1
8267: PPUSH
8268: LD_INT 17
8270: PPUSH
8271: CALL_OW 308
8275: NOT
8276: IFFALSE 8292
// ComMoveToArea ( i , ar2 ) else
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_INT 17
8285: PPUSH
8286: CALL_OW 113
8290: GO 8301
// RemoveUnit ( i ) ;
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 64
// end ;
8301: GO 8245
8303: POP
8304: POP
// if ar_force then
8305: LD_EXP 11
8309: IFFALSE 8507
// begin if ar_force > 15 then
8311: LD_EXP 11
8315: PUSH
8316: LD_INT 15
8318: GREATER
8319: IFFALSE 8336
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8321: LD_EXP 11
8325: PPUSH
8326: LD_INT 58
8328: PPUSH
8329: LD_INT 51
8331: PPUSH
8332: CALL_OW 114
// for i in ar_force do
8336: LD_ADDR_VAR 0 1
8340: PUSH
8341: LD_EXP 11
8345: PUSH
8346: FOR_IN
8347: IFFALSE 8505
// begin if GetClass ( i ) = class_soldier then
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL_OW 257
8358: PUSH
8359: LD_INT 1
8361: EQUAL
8362: IFFALSE 8454
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL 10729 0 1
8373: PUSH
8374: LD_INT 21
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: IN
8389: IFFALSE 8435
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL 10729 0 1
8405: PPUSH
8406: CALL_OW 250
8410: PPUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: CALL 10729 0 1
8420: PPUSH
8421: CALL_OW 251
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 132
8433: GO 8454
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: CALL 10729 0 1
8449: PPUSH
8450: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8454: LD_VAR 0 1
8458: PPUSH
8459: CALL_OW 257
8463: PUSH
8464: LD_INT 1
8466: EQUAL
8467: NOT
8468: IFFALSE 8482
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 314
8480: NOT
8481: AND
8482: IFFALSE 8503
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8484: LD_VAR 0 1
8488: PPUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL 10729 0 1
8498: PPUSH
8499: CALL_OW 115
// end ;
8503: GO 8346
8505: POP
8506: POP
// end ; end ;
8507: PPOPN 2
8509: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8510: LD_INT 9
8512: PPUSH
8513: LD_INT 22
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: IFFALSE 8540
8529: GO 8531
8531: DISABLE
// medal2 := false ; end_of_file
8532: LD_ADDR_EXP 4
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
8540: END
// export function Action ; begin
8541: LD_INT 0
8543: PPUSH
// case Query ( info ) of 1 :
8544: LD_STRING info
8546: PPUSH
8547: CALL_OW 97
8551: PUSH
8552: LD_INT 1
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8563
8560: POP
// ; end ;
8561: GO 8564
8563: POP
// ChangeMissionObjectives ( PM_1 ) ;
8564: LD_STRING PM_1
8566: PPUSH
8567: CALL_OW 337
// SaveForQuickRestart ;
8571: CALL_OW 22
// end ;
8575: LD_VAR 0 1
8579: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8580: LD_INT 50
8582: PPUSH
8583: CALL_OW 255
8587: PUSH
8588: LD_INT 3
8590: EQUAL
8591: IFFALSE 8872
8593: GO 8595
8595: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S1
8603: PPUSH
8604: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8608: LD_EXP 17
8612: PPUSH
8613: LD_STRING DPM_P1
8615: PPUSH
8616: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8620: LD_EXP 16
8624: PPUSH
8625: LD_STRING DPM_S2
8627: PPUSH
8628: CALL_OW 88
// SaveForQuickRestart ;
8632: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8636: LD_STRING PM_2
8638: PPUSH
8639: CALL_OW 337
// Wait ( 2 2$30 ) ;
8643: LD_INT 5250
8645: PPUSH
8646: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8650: LD_INT 117
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 84
// Convoy ( 1 ) ;
8660: LD_INT 1
8662: PPUSH
8663: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8667: LD_INT 1050
8669: PPUSH
8670: CALL_OW 67
// Convoy ( 2 ) ;
8674: LD_INT 2
8676: PPUSH
8677: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8681: LD_INT 3150
8683: PPUSH
8684: CALL_OW 67
// Convoy ( 3 ) ;
8688: LD_INT 3
8690: PPUSH
8691: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8695: LD_INT 8400
8697: PPUSH
8698: CALL_OW 67
// convoy_start := true ;
8702: LD_ADDR_EXP 7
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// PrepareArabian ;
8710: CALL 6319 0 0
// PrepareAttack ( 1 ) ;
8714: LD_INT 1
8716: PPUSH
8717: CALL 6392 0 1
// while ( convoy_start ) do
8721: LD_EXP 7
8725: IFFALSE 8872
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8727: LD_INT 4200
8729: PPUSH
8730: LD_INT 7350
8732: PPUSH
8733: CALL_OW 12
8737: PPUSH
8738: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8742: LD_INT 22
8744: PUSH
8745: LD_INT 2
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: PUSH
8757: LD_INT 20
8759: LESS
8760: IFFALSE 8777
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 2
8767: PPUSH
8768: CALL_OW 12
8772: PPUSH
8773: CALL 6392 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8777: LD_INT 1
8779: PPUSH
8780: LD_INT 5
8782: PPUSH
8783: CALL_OW 12
8787: PPUSH
8788: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8792: LD_ADDR_EXP 13
8796: PUSH
8797: LD_EXP 13
8801: PUSH
8802: LD_INT 1
8804: PLUS
8805: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8806: LD_EXP 13
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 3
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: LD_OWVAR 67
8829: ARRAY
8830: MOD
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: IFFALSE 8870
// begin Wait ( 1 1$20 ) ;
8837: LD_INT 2800
8839: PPUSH
8840: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8844: LD_EXP 25
8848: PPUSH
8849: LD_STRING DPM_F2
8851: PPUSH
8852: CALL_OW 94
// PrepareAttack ( 3 ) ;
8856: LD_INT 3
8858: PPUSH
8859: CALL 6392 0 1
// Wait ( 3 3$00 ) ;
8863: LD_INT 6300
8865: PPUSH
8866: CALL_OW 67
// end ; end ;
8870: GO 8721
// end ;
8872: END
// every 0 0$1 trigger safeCounter > 30 do
8873: LD_EXP 15
8877: PUSH
8878: LD_INT 30
8880: GREATER
8881: IFFALSE 8893
8883: GO 8885
8885: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8886: LD_STRING ACH_SAFE
8888: PPUSH
8889: CALL_OW 543
8893: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8894: LD_EXP 13
8898: PUSH
8899: LD_INT 3
8901: MOD
8902: PUSH
8903: LD_INT 0
8905: EQUAL
8906: IFFALSE 8928
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_INT 2
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: PUSH
8924: LD_INT 0
8926: EQUAL
8927: AND
8928: IFFALSE 8945
8930: GO 8932
8932: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8933: LD_EXP 25
8937: PPUSH
8938: LD_STRING DPM_F3
8940: PPUSH
8941: CALL_OW 94
8945: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8946: LD_EXP 13
8950: PUSH
8951: LD_INT 5
8953: MOD
8954: PUSH
8955: LD_INT 0
8957: EQUAL
8958: IFFALSE 8980
8960: PUSH
8961: LD_INT 22
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: PUSH
8976: LD_INT 0
8978: EQUAL
8979: AND
8980: IFFALSE 8997
8982: GO 8984
8984: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8985: LD_EXP 25
8989: PPUSH
8990: LD_STRING DPM_F4
8992: PPUSH
8993: CALL_OW 94
8997: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8998: LD_EXP 7
9002: IFFALSE 9031
9004: PUSH
9005: LD_EXP 13
9009: PUSH
9010: LD_INT 8
9012: PUSH
9013: LD_INT 9
9015: PUSH
9016: LD_INT 10
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_OWVAR 67
9028: ARRAY
9029: GREATEREQUAL
9030: AND
9031: IFFALSE 9053
9033: PUSH
9034: LD_INT 22
9036: PUSH
9037: LD_INT 6
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: LD_INT 0
9051: EQUAL
9052: AND
9053: IFFALSE 9152
9055: GO 9057
9057: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9058: LD_EXP 17
9062: PPUSH
9063: LD_STRING DPM_PEnd
9065: PPUSH
9066: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9070: LD_STRING med1
9072: PPUSH
9073: LD_EXP 3
9077: PPUSH
9078: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9082: LD_STRING med2
9084: PPUSH
9085: LD_EXP 4
9089: PPUSH
9090: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9094: LD_EXP 8
9098: PUSH
9099: LD_INT 15
9101: PUSH
9102: LD_INT 10
9104: PUSH
9105: LD_INT 7
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_OWVAR 67
9117: ARRAY
9118: GREATEREQUAL
9119: IFFALSE 9129
// medal3 := false ;
9121: LD_ADDR_EXP 5
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9129: LD_STRING med3
9131: PPUSH
9132: LD_EXP 5
9136: PPUSH
9137: CALL_OW 101
// GiveMedals ( MAIN ) ;
9141: LD_STRING MAIN
9143: PPUSH
9144: CALL_OW 102
// YouWin ;
9148: CALL_OW 103
// end ;
9152: END
// every 4 4$10 trigger convoy_start do var i ;
9153: LD_EXP 7
9157: IFFALSE 9523
9159: GO 9161
9161: DISABLE
9162: LD_INT 0
9164: PPUSH
// begin DialogueOn ;
9165: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9169: LD_EXP 17
9173: PPUSH
9174: LD_STRING DPM_PHelp
9176: PPUSH
9177: CALL_OW 94
// DialogueOff ;
9181: CALL_OW 7
// Wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// Randomize ;
9192: CALL_OW 10
// uc_side := 3 ;
9196: LD_ADDR_OWVAR 20
9200: PUSH
9201: LD_INT 3
9203: ST_TO_ADDR
// uc_nation := 3 ;
9204: LD_ADDR_OWVAR 21
9208: PUSH
9209: LD_INT 3
9211: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9212: LD_ADDR_VAR 0 1
9216: PUSH
9217: DOUBLE
9218: LD_INT 1
9220: DEC
9221: ST_TO_ADDR
9222: LD_INT 5
9224: PUSH
9225: LD_INT 4
9227: PUSH
9228: LD_INT 3
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: LD_OWVAR 67
9240: ARRAY
9241: PUSH
9242: FOR_TO
9243: IFFALSE 9283
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9245: LD_INT 0
9247: PPUSH
9248: LD_INT 1
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: CALL_OW 12
9258: PPUSH
9259: LD_INT 5
9261: PPUSH
9262: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9266: CALL_OW 44
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 0
9276: PPUSH
9277: CALL_OW 49
// end ;
9281: GO 9242
9283: POP
9284: POP
// vc_chassis := ru_heavy_wheeled ;
9285: LD_ADDR_OWVAR 37
9289: PUSH
9290: LD_INT 23
9292: ST_TO_ADDR
// vc_engine := engine_combustion ;
9293: LD_ADDR_OWVAR 39
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// vc_control := control_manual ;
9301: LD_ADDR_OWVAR 38
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// vc_weapon := 89 ;
9309: LD_ADDR_OWVAR 40
9313: PUSH
9314: LD_INT 89
9316: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9317: LD_ADDR_OWVAR 41
9321: PUSH
9322: LD_INT 88
9324: ST_TO_ADDR
// i := CreateVehicle ;
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: CALL_OW 45
9334: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9335: LD_VAR 0 1
9339: PPUSH
9340: LD_INT 5
9342: PPUSH
9343: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_INT 63
9354: PPUSH
9355: LD_INT 115
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: LD_INT 200
9375: PPUSH
9376: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9380: LD_INT 0
9382: PPUSH
9383: LD_INT 3
9385: PPUSH
9386: LD_INT 5
9388: PPUSH
9389: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9393: CALL_OW 44
9397: PPUSH
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 52
// DialogueOn ;
9407: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9411: LD_INT 169
9413: PPUSH
9414: LD_INT 115
9416: PPUSH
9417: CALL_OW 86
// DWait ( 0 0$01 ) ;
9421: LD_INT 35
9423: PPUSH
9424: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9428: LD_INT 63
9430: PPUSH
9431: LD_INT 115
9433: PPUSH
9434: CALL_OW 86
// DWait ( 0 0$01 ) ;
9438: LD_INT 35
9440: PPUSH
9441: CALL_OW 68
// DialogueOff ;
9445: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9449: LD_VAR 0 1
9453: PPUSH
9454: LD_INT 57
9456: PPUSH
9457: LD_INT 53
9459: PPUSH
9460: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9464: LD_INT 6300
9466: PPUSH
9467: LD_INT 14700
9469: PPUSH
9470: CALL_OW 12
9474: PPUSH
9475: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_INT 86
9486: PPUSH
9487: LD_INT 112
9489: PPUSH
9490: LD_INT 0
9492: PPUSH
9493: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9497: LD_INT 10
9499: PPUSH
9500: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9504: LD_EXP 18
9508: PPUSH
9509: LD_STRING DPM_Sa1
9511: PPUSH
9512: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9516: LD_STRING PM_3
9518: PPUSH
9519: CALL_OW 337
// end ;
9523: PPOPN 1
9525: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9526: LD_INT 3
9528: PPUSH
9529: LD_EXP 18
9533: PPUSH
9534: CALL_OW 292
9538: IFFALSE 9587
9540: GO 9542
9542: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_STRING DPM_Sa2
9550: PPUSH
9551: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9555: LD_STRING PM_4
9557: PPUSH
9558: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9562: LD_INT 40
9564: PPUSH
9565: LD_INT 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9575: LD_EXP 18
9579: PPUSH
9580: LD_INT 3
9582: PPUSH
9583: CALL_OW 235
// end ;
9587: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9588: LD_EXP 3
9592: NOT
9593: IFFALSE 9615
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_INT 6
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: PUSH
9611: LD_INT 0
9613: EQUAL
9614: AND
9615: IFFALSE 9677
9617: GO 9619
9619: DISABLE
// begin DialogueOn ;
9620: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9624: LD_EXP 16
9628: PPUSH
9629: LD_STRING DPM_S3
9631: PPUSH
9632: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9636: LD_INT 62
9638: PPUSH
9639: LD_INT 113
9641: PPUSH
9642: LD_INT 3
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9652: LD_INT 62
9654: PPUSH
9655: LD_INT 113
9657: PPUSH
9658: CALL_OW 84
// dwait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 68
// DialogueOff ;
9669: CALL_OW 7
// CounterAttack ;
9673: CALL 5789 0 0
// end ; end_of_file
9677: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9678: LD_VAR 0 1
9682: PPUSH
9683: CALL_OW 255
9687: PUSH
9688: LD_INT 1
9690: EQUAL
9691: IFFALSE 9727
// if not us_retreat then
9693: LD_EXP 22
9697: NOT
9698: IFFALSE 9727
// if GetClass ( h ) = 1 then
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 257
9709: PUSH
9710: LD_INT 1
9712: EQUAL
9713: IFFALSE 9727
// ComEnterUnit ( h , us_arm ) ;
9715: LD_VAR 0 2
9719: PPUSH
9720: LD_INT 69
9722: PPUSH
9723: CALL_OW 120
// end ;
9727: PPOPN 2
9729: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9730: LD_VAR 0 1
9734: PPUSH
9735: CALL 27329 0 1
// if GetSide ( un ) = 1 then
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 255
9748: PUSH
9749: LD_INT 1
9751: EQUAL
9752: IFFALSE 9768
// us_count := us_count + 1 ;
9754: LD_ADDR_EXP 24
9758: PUSH
9759: LD_EXP 24
9763: PUSH
9764: LD_INT 1
9766: PLUS
9767: ST_TO_ADDR
// if un in us_force then
9768: LD_VAR 0 1
9772: PUSH
9773: LD_EXP 12
9777: IN
9778: IFFALSE 9796
// us_force := us_force diff un ;
9780: LD_ADDR_EXP 12
9784: PUSH
9785: LD_EXP 12
9789: PUSH
9790: LD_VAR 0 1
9794: DIFF
9795: ST_TO_ADDR
// if un in ar_force then
9796: LD_VAR 0 1
9800: PUSH
9801: LD_EXP 11
9805: IN
9806: IFFALSE 9824
// ar_force := ar_force diff un ;
9808: LD_ADDR_EXP 11
9812: PUSH
9813: LD_EXP 11
9817: PUSH
9818: LD_VAR 0 1
9822: DIFF
9823: ST_TO_ADDR
// if un = Stolypin then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_EXP 16
9833: EQUAL
9834: IFFALSE 9843
// YouLost ( dead ) ;
9836: LD_STRING dead
9838: PPUSH
9839: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 22
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 30
9860: PUSH
9861: LD_INT 0
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: IN
9877: IFFALSE 9886
// YouLost ( depot ) ;
9879: LD_STRING depot
9881: PPUSH
9882: CALL_OW 104
// if GetSide ( un ) = 6 then
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 255
9895: PUSH
9896: LD_INT 6
9898: EQUAL
9899: IFFALSE 9915
// dest_counter := dest_counter + 1 ;
9901: LD_ADDR_EXP 8
9905: PUSH
9906: LD_EXP 8
9910: PUSH
9911: LD_INT 1
9913: PLUS
9914: ST_TO_ADDR
// end ;
9915: PPOPN 1
9917: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9918: LD_VAR 0 1
9922: PPUSH
9923: LD_VAR 0 2
9927: PPUSH
9928: CALL 27387 0 2
// if GetSide ( un ) = 1 then
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 255
9941: PUSH
9942: LD_INT 1
9944: EQUAL
9945: IFFALSE 9962
// ComMoveXY ( un , 57 , 52 ) ;
9947: LD_VAR 0 1
9951: PPUSH
9952: LD_INT 57
9954: PPUSH
9955: LD_INT 52
9957: PPUSH
9958: CALL_OW 111
// end ;
9962: PPOPN 2
9964: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9965: LD_EXP 21
9969: NOT
9970: IFFALSE 10026
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9972: LD_VAR 0 1
9976: PUSH
9977: LD_INT 3
9979: EQUAL
9980: IFFALSE 9992
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: AND
9992: IFTRUE 10016
9994: PUSH
9995: LD_VAR 0 1
9999: PUSH
10000: LD_INT 1
10002: EQUAL
10003: IFFALSE 10015
10005: PUSH
10006: LD_VAR 0 2
10010: PUSH
10011: LD_INT 3
10013: EQUAL
10014: AND
10015: OR
10016: IFFALSE 10026
// us_alert := true ;
10018: LD_ADDR_EXP 21
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
10026: LD_VAR 0 1
10030: PUSH
10031: LD_INT 6
10033: EQUAL
10034: IFFALSE 10046
10036: PUSH
10037: LD_VAR 0 2
10041: PUSH
10042: LD_INT 3
10044: EQUAL
10045: AND
10046: IFTRUE 10070
10048: PUSH
10049: LD_VAR 0 1
10053: PUSH
10054: LD_INT 3
10056: EQUAL
10057: IFFALSE 10069
10059: PUSH
10060: LD_VAR 0 2
10064: PUSH
10065: LD_INT 6
10067: EQUAL
10068: AND
10069: OR
10070: IFFALSE 10079
// YouLost ( alat ) ;
10072: LD_STRING alat
10074: PPUSH
10075: CALL_OW 104
// end ;
10079: PPOPN 2
10081: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 255
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: IFFALSE 10129
10097: PUSH
10098: LD_VAR 0 1
10102: PUSH
10103: LD_INT 58
10105: PUSH
10106: EMPTY
10107: LIST
10108: PUSH
10109: LD_INT 21
10111: PUSH
10112: LD_INT 2
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: IN
10128: AND
10129: IFFALSE 10250
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10131: LD_OWVAR 3
10135: PUSH
10136: LD_VAR 0 1
10140: DIFF
10141: PPUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 74
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 2
10159: NONEQUAL
10160: IFFALSE 10250
// begin Wait ( 0 0$1.3 ) ;
10162: LD_INT 46
10164: PPUSH
10165: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 250
10178: PPUSH
10179: LD_VAR 0 1
10183: PPUSH
10184: CALL_OW 251
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10196: LD_VAR 0 1
10200: PPUSH
10201: CALL_OW 250
10205: PPUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 251
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10223: LD_VAR 0 1
10227: PPUSH
10228: CALL_OW 250
10232: PPUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 251
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 453
// end ; end ;
10250: PPOPN 1
10252: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: IN
10287: IFFALSE 10310
10289: PUSH
10290: LD_VAR 0 2
10294: PPUSH
10295: CALL 10774 0 1
10299: PPUSH
10300: CALL_OW 255
10304: PUSH
10305: LD_INT 2
10307: EQUAL
10308: NOT
10309: AND
10310: IFFALSE 10435
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10312: LD_INT 105
10314: PPUSH
10315: LD_INT 210
10317: PPUSH
10318: CALL_OW 12
10322: PPUSH
10323: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10327: LD_VAR 0 2
10331: PPUSH
10332: CALL_OW 250
10336: PPUSH
10337: LD_VAR 0 2
10341: PPUSH
10342: CALL_OW 251
10346: PPUSH
10347: LD_INT 3
10349: PPUSH
10350: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: CALL_OW 250
10363: PPUSH
10364: LD_VAR 0 2
10368: PPUSH
10369: CALL_OW 251
10373: PPUSH
10374: LD_INT 3
10376: PPUSH
10377: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10381: LD_VAR 0 2
10385: PPUSH
10386: CALL_OW 250
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL_OW 251
10400: PPUSH
10401: LD_INT 3
10403: PPUSH
10404: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 250
10417: PPUSH
10418: LD_VAR 0 2
10422: PPUSH
10423: CALL_OW 251
10427: PPUSH
10428: LD_INT 3
10430: PPUSH
10431: CALL_OW 453
// end ; end ;
10435: PPOPN 4
10437: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10438: LD_VAR 0 1
10442: PPUSH
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: CALL 27363 0 3
// end ;
10457: PPOPN 3
10459: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: CALL 27371 0 1
// end ; end_of_file
10469: PPOPN 1
10471: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10472: LD_INT 0
10474: PPUSH
10475: PPUSH
10476: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10477: LD_ADDR_VAR 0 7
10481: PUSH
10482: LD_VAR 0 1
10486: PUSH
10487: LD_VAR 0 2
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_VAR 0 4
10502: PPUSH
10503: CALL_OW 1
10507: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10508: LD_ADDR_VAR 0 1
10512: PUSH
10513: LD_VAR 0 1
10517: PPUSH
10518: LD_VAR 0 2
10522: PPUSH
10523: LD_VAR 0 7
10527: PPUSH
10528: CALL_OW 1
10532: ST_TO_ADDR
// result := tab ;
10533: LD_ADDR_VAR 0 5
10537: PUSH
10538: LD_VAR 0 1
10542: ST_TO_ADDR
// end ;
10543: LD_VAR 0 5
10547: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10548: LD_INT 0
10550: PPUSH
10551: PPUSH
10552: PPUSH
// if not GetControl ( veh ) = control_manual then
10553: LD_VAR 0 1
10557: PPUSH
10558: CALL_OW 263
10562: PUSH
10563: LD_INT 1
10565: EQUAL
10566: NOT
10567: IFFALSE 10579
// result := false else
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_INT 0
10576: ST_TO_ADDR
10577: GO 10724
// if veh in FilterAllUnits ( [ f_empty ] ) then
10579: LD_VAR 0 1
10583: PUSH
10584: LD_INT 58
10586: PUSH
10587: EMPTY
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: IN
10595: IFFALSE 10607
// result := false else
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_INT 0
10604: ST_TO_ADDR
10605: GO 10724
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 255
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 55
10631: PUSH
10632: EMPTY
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PPUSH
10639: CALL_OW 69
10643: ST_TO_ADDR
// if not filter then
10644: LD_VAR 0 4
10648: NOT
10649: IFFALSE 10661
// result := false else
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_INT 0
10658: ST_TO_ADDR
10659: GO 10724
// for i = 1 to filter do
10661: LD_ADDR_VAR 0 3
10665: PUSH
10666: DOUBLE
10667: LD_INT 1
10669: DEC
10670: ST_TO_ADDR
10671: LD_VAR 0 4
10675: PUSH
10676: FOR_TO
10677: IFFALSE 10722
// if IsDriver ( filter [ i ] ) = veh then
10679: LD_VAR 0 4
10683: PUSH
10684: LD_VAR 0 3
10688: ARRAY
10689: PPUSH
10690: CALL 69268 0 1
10694: PUSH
10695: LD_VAR 0 1
10699: EQUAL
10700: IFFALSE 10720
// begin result := filter [ i ] ;
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_VAR 0 4
10711: PUSH
10712: LD_VAR 0 3
10716: ARRAY
10717: ST_TO_ADDR
// break ;
10718: GO 10722
// end ;
10720: GO 10676
10722: POP
10723: POP
// end ; end ;
10724: LD_VAR 0 2
10728: RET
// export function FindTarget ( unit ) ; begin
10729: LD_INT 0
10731: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 81
10739: PUSH
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL_OW 255
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: PPUSH
10759: LD_VAR 0 1
10763: PPUSH
10764: CALL_OW 74
10768: ST_TO_ADDR
// end ;
10769: LD_VAR 0 2
10773: RET
// export function NearestUnit ( unit ) ; begin
10774: LD_INT 0
10776: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10777: LD_ADDR_VAR 0 2
10781: PUSH
10782: LD_OWVAR 3
10786: PUSH
10787: LD_VAR 0 1
10791: DIFF
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 74
10802: ST_TO_ADDR
// end ; end_of_file
10803: LD_VAR 0 2
10807: RET
// every 12 12$00 do
10808: GO 10810
10810: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10811: LD_INT 1
10813: PPUSH
10814: LD_INT 570
10816: PPUSH
10817: LD_INT 350
10819: PPUSH
10820: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10824: LD_INT 10500
10826: PPUSH
10827: LD_INT 21000
10829: PPUSH
10830: CALL_OW 12
10834: PPUSH
10835: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 570
10844: PPUSH
10845: LD_INT 350
10847: PPUSH
10848: CALL_OW 550
// end ;
10852: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10853: LD_INT 0
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
// uc_nation = nation_nature ;
10860: LD_ADDR_OWVAR 21
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// uc_side = 0 ;
10868: LD_ADDR_OWVAR 20
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// l = 0 ;
10876: LD_ADDR_VAR 0 6
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10884: LD_ADDR_OWVAR 24
10888: PUSH
10889: LD_INT 0
10891: PPUSH
10892: LD_INT 5
10894: PPUSH
10895: CALL_OW 12
10899: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 5
10907: NEG
10908: PPUSH
10909: LD_INT 5
10911: PPUSH
10912: CALL_OW 12
10916: ST_TO_ADDR
// hc_gallery =  ;
10917: LD_ADDR_OWVAR 33
10921: PUSH
10922: LD_STRING 
10924: ST_TO_ADDR
// hc_class = class_apeman ;
10925: LD_ADDR_OWVAR 28
10929: PUSH
10930: LD_INT 12
10932: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10933: LD_ADDR_OWVAR 29
10937: PUSH
10938: LD_INT 11
10940: PPUSH
10941: LD_INT 13
10943: PPUSH
10944: CALL_OW 12
10948: PUSH
10949: LD_INT 10
10951: PPUSH
10952: LD_INT 11
10954: PPUSH
10955: CALL_OW 12
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// hc_sex = sex_male ;
10964: LD_ADDR_OWVAR 27
10968: PUSH
10969: LD_INT 1
10971: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10972: LD_ADDR_OWVAR 31
10976: PUSH
10977: LD_INT 0
10979: PPUSH
10980: LD_INT 2
10982: PPUSH
10983: CALL_OW 12
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: ST_TO_ADDR
// apeman = CreateHuman ;
11003: LD_ADDR_VAR 0 7
11007: PUSH
11008: CALL_OW 44
11012: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
11013: LD_VAR 0 7
11017: PPUSH
11018: LD_VAR 0 4
11022: PPUSH
11023: LD_INT 0
11025: PPUSH
11026: CALL_OW 49
// l = l + 1 ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_VAR 0 6
11039: PUSH
11040: LD_INT 1
11042: PLUS
11043: ST_TO_ADDR
// end until l = num1 ;
11044: LD_VAR 0 6
11048: PUSH
11049: LD_VAR 0 1
11053: EQUAL
11054: IFFALSE 10884
// l = 0 ;
11056: LD_ADDR_VAR 0 6
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11064: LD_ADDR_OWVAR 35
11068: PUSH
11069: LD_INT 0
11071: PPUSH
11072: LD_INT 25
11074: PPUSH
11075: CALL_OW 12
11079: ST_TO_ADDR
// hc_class = class_tiger ;
11080: LD_ADDR_OWVAR 28
11084: PUSH
11085: LD_INT 14
11087: ST_TO_ADDR
// hc_sex = sex_male ;
11088: LD_ADDR_OWVAR 27
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// hc_gallery = sandnature ;
11096: LD_ADDR_OWVAR 33
11100: PUSH
11101: LD_STRING sandnature
11103: ST_TO_ADDR
// hc_face_number = 3 ;
11104: LD_ADDR_OWVAR 34
11108: PUSH
11109: LD_INT 3
11111: ST_TO_ADDR
// tiger = CreateHuman ;
11112: LD_ADDR_VAR 0 8
11116: PUSH
11117: CALL_OW 44
11121: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11122: LD_VAR 0 8
11126: PPUSH
11127: LD_VAR 0 4
11131: PPUSH
11132: LD_INT 0
11134: PPUSH
11135: CALL_OW 49
// l = l + 1 ;
11139: LD_ADDR_VAR 0 6
11143: PUSH
11144: LD_VAR 0 6
11148: PUSH
11149: LD_INT 1
11151: PLUS
11152: ST_TO_ADDR
// end until l = num2 ;
11153: LD_VAR 0 6
11157: PUSH
11158: LD_VAR 0 2
11162: EQUAL
11163: IFFALSE 11064
// l = 0 ;
11165: LD_ADDR_VAR 0 6
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11173: LD_ADDR_OWVAR 28
11177: PUSH
11178: LD_INT 18
11180: ST_TO_ADDR
// hc_gallery = sandnature ;
11181: LD_ADDR_OWVAR 33
11185: PUSH
11186: LD_STRING sandnature
11188: ST_TO_ADDR
// hc_face_number = 1 ;
11189: LD_ADDR_OWVAR 34
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// bird = CreateHuman ;
11197: LD_ADDR_VAR 0 9
11201: PUSH
11202: CALL_OW 44
11206: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11207: LD_VAR 0 9
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL_OW 51
// l = l + 1 ;
11219: LD_ADDR_VAR 0 6
11223: PUSH
11224: LD_VAR 0 6
11228: PUSH
11229: LD_INT 1
11231: PLUS
11232: ST_TO_ADDR
// end until l = num3 ;
11233: LD_VAR 0 6
11237: PUSH
11238: LD_VAR 0 3
11242: EQUAL
11243: IFFALSE 11173
// end ; end_of_file end_of_file
11245: LD_VAR 0 5
11249: RET
// export globalGameSaveCounter ; every 0 0$1 do
11250: GO 11252
11252: DISABLE
// begin enable ;
11253: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11254: LD_STRING updateTimer(
11256: PUSH
11257: LD_OWVAR 1
11261: STR
11262: PUSH
11263: LD_STRING );
11265: STR
11266: PPUSH
11267: CALL_OW 559
// end ;
11271: END
// every 0 0$1 do
11272: GO 11274
11274: DISABLE
// begin globalGameSaveCounter := 0 ;
11275: LD_ADDR_EXP 26
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11283: LD_STRING setGameSaveCounter(0)
11285: PPUSH
11286: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11290: LD_STRING initStreamRollete();
11292: PPUSH
11293: CALL_OW 559
// InitStreamMode ;
11297: CALL 12642 0 0
// DefineStreamItems ( false ) ;
11301: LD_INT 0
11303: PPUSH
11304: CALL 13106 0 1
// end ;
11308: END
// export function SOS_MapStart ( ) ; begin
11309: LD_INT 0
11311: PPUSH
// if streamModeActive then
11312: LD_EXP 27
11316: IFFALSE 11325
// DefineStreamItems ( true ) ;
11318: LD_INT 1
11320: PPUSH
11321: CALL 13106 0 1
// UpdateLuaVariables ( ) ;
11325: CALL 11342 0 0
// UpdateFactoryWaypoints ( ) ;
11329: CALL 26228 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11333: CALL 26480 0 0
// end ;
11337: LD_VAR 0 1
11341: RET
// function UpdateLuaVariables ( ) ; begin
11342: LD_INT 0
11344: PPUSH
// if globalGameSaveCounter then
11345: LD_EXP 26
11349: IFFALSE 11383
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11351: LD_ADDR_EXP 26
11355: PUSH
11356: LD_EXP 26
11360: PPUSH
11361: CALL 73061 0 1
11365: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11366: LD_STRING setGameSaveCounter(
11368: PUSH
11369: LD_EXP 26
11373: STR
11374: PUSH
11375: LD_STRING )
11377: STR
11378: PPUSH
11379: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11383: LD_STRING setGameDifficulty(
11385: PUSH
11386: LD_OWVAR 67
11390: STR
11391: PUSH
11392: LD_STRING )
11394: STR
11395: PPUSH
11396: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11400: LD_STRING displayDifficulty(
11402: PUSH
11403: LD_OWVAR 67
11407: STR
11408: PUSH
11409: LD_STRING )
11411: STR
11412: PPUSH
11413: CALL_OW 559
// end ;
11417: LD_VAR 0 1
11421: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11422: LD_INT 0
11424: PPUSH
// if p2 = stream_mode then
11425: LD_VAR 0 2
11429: PUSH
11430: LD_INT 100
11432: EQUAL
11433: IFFALSE 12436
// begin if not StreamModeActive then
11435: LD_EXP 27
11439: NOT
11440: IFFALSE 11450
// StreamModeActive := true ;
11442: LD_ADDR_EXP 27
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 0 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11464
// InitStreamMode ;
11460: CALL 12642 0 0
// if p3 = 1 then
11464: LD_VAR 0 3
11468: PUSH
11469: LD_INT 1
11471: EQUAL
11472: IFFALSE 11482
// sRocket := true ;
11474: LD_ADDR_EXP 32
11478: PUSH
11479: LD_INT 1
11481: ST_TO_ADDR
// if p3 = 2 then
11482: LD_VAR 0 3
11486: PUSH
11487: LD_INT 2
11489: EQUAL
11490: IFFALSE 11500
// sSpeed := true ;
11492: LD_ADDR_EXP 31
11496: PUSH
11497: LD_INT 1
11499: ST_TO_ADDR
// if p3 = 3 then
11500: LD_VAR 0 3
11504: PUSH
11505: LD_INT 3
11507: EQUAL
11508: IFFALSE 11518
// sEngine := true ;
11510: LD_ADDR_EXP 33
11514: PUSH
11515: LD_INT 1
11517: ST_TO_ADDR
// if p3 = 4 then
11518: LD_VAR 0 3
11522: PUSH
11523: LD_INT 4
11525: EQUAL
11526: IFFALSE 11536
// sSpec := true ;
11528: LD_ADDR_EXP 30
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// if p3 = 5 then
11536: LD_VAR 0 3
11540: PUSH
11541: LD_INT 5
11543: EQUAL
11544: IFFALSE 11554
// sLevel := true ;
11546: LD_ADDR_EXP 34
11550: PUSH
11551: LD_INT 1
11553: ST_TO_ADDR
// if p3 = 6 then
11554: LD_VAR 0 3
11558: PUSH
11559: LD_INT 6
11561: EQUAL
11562: IFFALSE 11572
// sArmoury := true ;
11564: LD_ADDR_EXP 35
11568: PUSH
11569: LD_INT 1
11571: ST_TO_ADDR
// if p3 = 7 then
11572: LD_VAR 0 3
11576: PUSH
11577: LD_INT 7
11579: EQUAL
11580: IFFALSE 11590
// sRadar := true ;
11582: LD_ADDR_EXP 36
11586: PUSH
11587: LD_INT 1
11589: ST_TO_ADDR
// if p3 = 8 then
11590: LD_VAR 0 3
11594: PUSH
11595: LD_INT 8
11597: EQUAL
11598: IFFALSE 11608
// sBunker := true ;
11600: LD_ADDR_EXP 37
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// if p3 = 9 then
11608: LD_VAR 0 3
11612: PUSH
11613: LD_INT 9
11615: EQUAL
11616: IFFALSE 11626
// sHack := true ;
11618: LD_ADDR_EXP 38
11622: PUSH
11623: LD_INT 1
11625: ST_TO_ADDR
// if p3 = 10 then
11626: LD_VAR 0 3
11630: PUSH
11631: LD_INT 10
11633: EQUAL
11634: IFFALSE 11644
// sFire := true ;
11636: LD_ADDR_EXP 39
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// if p3 = 11 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 11
11651: EQUAL
11652: IFFALSE 11662
// sRefresh := true ;
11654: LD_ADDR_EXP 40
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// if p3 = 12 then
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 12
11669: EQUAL
11670: IFFALSE 11680
// sExp := true ;
11672: LD_ADDR_EXP 41
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 13 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 13
11687: EQUAL
11688: IFFALSE 11698
// sDepot := true ;
11690: LD_ADDR_EXP 42
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// if p3 = 14 then
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 14
11705: EQUAL
11706: IFFALSE 11716
// sFlag := true ;
11708: LD_ADDR_EXP 43
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// if p3 = 15 then
11716: LD_VAR 0 3
11720: PUSH
11721: LD_INT 15
11723: EQUAL
11724: IFFALSE 11734
// sKamikadze := true ;
11726: LD_ADDR_EXP 51
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// if p3 = 16 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 16
11741: EQUAL
11742: IFFALSE 11752
// sTroll := true ;
11744: LD_ADDR_EXP 52
11748: PUSH
11749: LD_INT 1
11751: ST_TO_ADDR
// if p3 = 17 then
11752: LD_VAR 0 3
11756: PUSH
11757: LD_INT 17
11759: EQUAL
11760: IFFALSE 11770
// sSlow := true ;
11762: LD_ADDR_EXP 53
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// if p3 = 18 then
11770: LD_VAR 0 3
11774: PUSH
11775: LD_INT 18
11777: EQUAL
11778: IFFALSE 11788
// sLack := true ;
11780: LD_ADDR_EXP 54
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// if p3 = 19 then
11788: LD_VAR 0 3
11792: PUSH
11793: LD_INT 19
11795: EQUAL
11796: IFFALSE 11806
// sTank := true ;
11798: LD_ADDR_EXP 56
11802: PUSH
11803: LD_INT 1
11805: ST_TO_ADDR
// if p3 = 20 then
11806: LD_VAR 0 3
11810: PUSH
11811: LD_INT 20
11813: EQUAL
11814: IFFALSE 11824
// sRemote := true ;
11816: LD_ADDR_EXP 57
11820: PUSH
11821: LD_INT 1
11823: ST_TO_ADDR
// if p3 = 21 then
11824: LD_VAR 0 3
11828: PUSH
11829: LD_INT 21
11831: EQUAL
11832: IFFALSE 11842
// sPowell := true ;
11834: LD_ADDR_EXP 58
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// if p3 = 22 then
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 22
11849: EQUAL
11850: IFFALSE 11860
// sTeleport := true ;
11852: LD_ADDR_EXP 61
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// if p3 = 23 then
11860: LD_VAR 0 3
11864: PUSH
11865: LD_INT 23
11867: EQUAL
11868: IFFALSE 11878
// sOilTower := true ;
11870: LD_ADDR_EXP 63
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// if p3 = 24 then
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 24
11885: EQUAL
11886: IFFALSE 11896
// sShovel := true ;
11888: LD_ADDR_EXP 64
11892: PUSH
11893: LD_INT 1
11895: ST_TO_ADDR
// if p3 = 25 then
11896: LD_VAR 0 3
11900: PUSH
11901: LD_INT 25
11903: EQUAL
11904: IFFALSE 11914
// sSheik := true ;
11906: LD_ADDR_EXP 65
11910: PUSH
11911: LD_INT 1
11913: ST_TO_ADDR
// if p3 = 26 then
11914: LD_VAR 0 3
11918: PUSH
11919: LD_INT 26
11921: EQUAL
11922: IFFALSE 11932
// sEarthquake := true ;
11924: LD_ADDR_EXP 67
11928: PUSH
11929: LD_INT 1
11931: ST_TO_ADDR
// if p3 = 27 then
11932: LD_VAR 0 3
11936: PUSH
11937: LD_INT 27
11939: EQUAL
11940: IFFALSE 11950
// sAI := true ;
11942: LD_ADDR_EXP 68
11946: PUSH
11947: LD_INT 1
11949: ST_TO_ADDR
// if p3 = 28 then
11950: LD_VAR 0 3
11954: PUSH
11955: LD_INT 28
11957: EQUAL
11958: IFFALSE 11968
// sCargo := true ;
11960: LD_ADDR_EXP 71
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// if p3 = 29 then
11968: LD_VAR 0 3
11972: PUSH
11973: LD_INT 29
11975: EQUAL
11976: IFFALSE 11986
// sDLaser := true ;
11978: LD_ADDR_EXP 72
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// if p3 = 30 then
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 30
11993: EQUAL
11994: IFFALSE 12004
// sExchange := true ;
11996: LD_ADDR_EXP 73
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// if p3 = 31 then
12004: LD_VAR 0 3
12008: PUSH
12009: LD_INT 31
12011: EQUAL
12012: IFFALSE 12022
// sFac := true ;
12014: LD_ADDR_EXP 74
12018: PUSH
12019: LD_INT 1
12021: ST_TO_ADDR
// if p3 = 32 then
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 32
12029: EQUAL
12030: IFFALSE 12040
// sPower := true ;
12032: LD_ADDR_EXP 75
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// if p3 = 33 then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 33
12047: EQUAL
12048: IFFALSE 12058
// sRandom := true ;
12050: LD_ADDR_EXP 76
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// if p3 = 34 then
12058: LD_VAR 0 3
12062: PUSH
12063: LD_INT 34
12065: EQUAL
12066: IFFALSE 12076
// sShield := true ;
12068: LD_ADDR_EXP 77
12072: PUSH
12073: LD_INT 1
12075: ST_TO_ADDR
// if p3 = 35 then
12076: LD_VAR 0 3
12080: PUSH
12081: LD_INT 35
12083: EQUAL
12084: IFFALSE 12094
// sTime := true ;
12086: LD_ADDR_EXP 78
12090: PUSH
12091: LD_INT 1
12093: ST_TO_ADDR
// if p3 = 36 then
12094: LD_VAR 0 3
12098: PUSH
12099: LD_INT 36
12101: EQUAL
12102: IFFALSE 12112
// sTools := true ;
12104: LD_ADDR_EXP 79
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// if p3 = 101 then
12112: LD_VAR 0 3
12116: PUSH
12117: LD_INT 101
12119: EQUAL
12120: IFFALSE 12130
// sSold := true ;
12122: LD_ADDR_EXP 44
12126: PUSH
12127: LD_INT 1
12129: ST_TO_ADDR
// if p3 = 102 then
12130: LD_VAR 0 3
12134: PUSH
12135: LD_INT 102
12137: EQUAL
12138: IFFALSE 12148
// sDiff := true ;
12140: LD_ADDR_EXP 45
12144: PUSH
12145: LD_INT 1
12147: ST_TO_ADDR
// if p3 = 103 then
12148: LD_VAR 0 3
12152: PUSH
12153: LD_INT 103
12155: EQUAL
12156: IFFALSE 12166
// sFog := true ;
12158: LD_ADDR_EXP 48
12162: PUSH
12163: LD_INT 1
12165: ST_TO_ADDR
// if p3 = 104 then
12166: LD_VAR 0 3
12170: PUSH
12171: LD_INT 104
12173: EQUAL
12174: IFFALSE 12184
// sReset := true ;
12176: LD_ADDR_EXP 49
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// if p3 = 105 then
12184: LD_VAR 0 3
12188: PUSH
12189: LD_INT 105
12191: EQUAL
12192: IFFALSE 12202
// sSun := true ;
12194: LD_ADDR_EXP 50
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// if p3 = 106 then
12202: LD_VAR 0 3
12206: PUSH
12207: LD_INT 106
12209: EQUAL
12210: IFFALSE 12220
// sTiger := true ;
12212: LD_ADDR_EXP 46
12216: PUSH
12217: LD_INT 1
12219: ST_TO_ADDR
// if p3 = 107 then
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 107
12227: EQUAL
12228: IFFALSE 12238
// sBomb := true ;
12230: LD_ADDR_EXP 47
12234: PUSH
12235: LD_INT 1
12237: ST_TO_ADDR
// if p3 = 108 then
12238: LD_VAR 0 3
12242: PUSH
12243: LD_INT 108
12245: EQUAL
12246: IFFALSE 12256
// sWound := true ;
12248: LD_ADDR_EXP 55
12252: PUSH
12253: LD_INT 1
12255: ST_TO_ADDR
// if p3 = 109 then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 109
12263: EQUAL
12264: IFFALSE 12274
// sBetray := true ;
12266: LD_ADDR_EXP 59
12270: PUSH
12271: LD_INT 1
12273: ST_TO_ADDR
// if p3 = 110 then
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 110
12281: EQUAL
12282: IFFALSE 12292
// sContamin := true ;
12284: LD_ADDR_EXP 60
12288: PUSH
12289: LD_INT 1
12291: ST_TO_ADDR
// if p3 = 111 then
12292: LD_VAR 0 3
12296: PUSH
12297: LD_INT 111
12299: EQUAL
12300: IFFALSE 12310
// sOil := true ;
12302: LD_ADDR_EXP 62
12306: PUSH
12307: LD_INT 1
12309: ST_TO_ADDR
// if p3 = 112 then
12310: LD_VAR 0 3
12314: PUSH
12315: LD_INT 112
12317: EQUAL
12318: IFFALSE 12328
// sStu := true ;
12320: LD_ADDR_EXP 66
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// if p3 = 113 then
12328: LD_VAR 0 3
12332: PUSH
12333: LD_INT 113
12335: EQUAL
12336: IFFALSE 12346
// sBazooka := true ;
12338: LD_ADDR_EXP 69
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// if p3 = 114 then
12346: LD_VAR 0 3
12350: PUSH
12351: LD_INT 114
12353: EQUAL
12354: IFFALSE 12364
// sMortar := true ;
12356: LD_ADDR_EXP 70
12360: PUSH
12361: LD_INT 1
12363: ST_TO_ADDR
// if p3 = 115 then
12364: LD_VAR 0 3
12368: PUSH
12369: LD_INT 115
12371: EQUAL
12372: IFFALSE 12382
// sRanger := true ;
12374: LD_ADDR_EXP 80
12378: PUSH
12379: LD_INT 1
12381: ST_TO_ADDR
// if p3 = 116 then
12382: LD_VAR 0 3
12386: PUSH
12387: LD_INT 116
12389: EQUAL
12390: IFFALSE 12400
// sComputer := true ;
12392: LD_ADDR_EXP 81
12396: PUSH
12397: LD_INT 1
12399: ST_TO_ADDR
// if p3 = 117 then
12400: LD_VAR 0 3
12404: PUSH
12405: LD_INT 117
12407: EQUAL
12408: IFFALSE 12418
// s30 := true ;
12410: LD_ADDR_EXP 82
12414: PUSH
12415: LD_INT 1
12417: ST_TO_ADDR
// if p3 = 118 then
12418: LD_VAR 0 3
12422: PUSH
12423: LD_INT 118
12425: EQUAL
12426: IFFALSE 12436
// s60 := true ;
12428: LD_ADDR_EXP 83
12432: PUSH
12433: LD_INT 1
12435: ST_TO_ADDR
// end ; if p2 = hack_mode then
12436: LD_VAR 0 2
12440: PUSH
12441: LD_INT 101
12443: EQUAL
12444: IFFALSE 12572
// begin case p3 of 1 :
12446: LD_VAR 0 3
12450: PUSH
12451: LD_INT 1
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12466
12459: POP
// hHackUnlimitedResources ; 2 :
12460: CALL 24835 0 0
12464: GO 12572
12466: LD_INT 2
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12481
12474: POP
// hHackSetLevel10 ; 3 :
12475: CALL 24968 0 0
12479: GO 12572
12481: LD_INT 3
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12496
12489: POP
// hHackSetLevel10YourUnits ; 4 :
12490: CALL 25053 0 0
12494: GO 12572
12496: LD_INT 4
12498: DOUBLE
12499: EQUAL
12500: IFTRUE 12504
12502: GO 12511
12504: POP
// hHackInvincible ; 5 :
12505: CALL 25501 0 0
12509: GO 12572
12511: LD_INT 5
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 12526
12519: POP
// hHackInvisible ; 6 :
12520: CALL 25612 0 0
12524: GO 12572
12526: LD_INT 6
12528: DOUBLE
12529: EQUAL
12530: IFTRUE 12534
12532: GO 12541
12534: POP
// hHackChangeYourSide ; 7 :
12535: CALL 25669 0 0
12539: GO 12572
12541: LD_INT 7
12543: DOUBLE
12544: EQUAL
12545: IFTRUE 12549
12547: GO 12556
12549: POP
// hHackChangeUnitSide ; 8 :
12550: CALL 25711 0 0
12554: GO 12572
12556: LD_INT 8
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12571
12564: POP
// hHackFog ; end ;
12565: CALL 25812 0 0
12569: GO 12572
12571: POP
// end ; if p2 = game_save_mode then
12572: LD_VAR 0 2
12576: PUSH
12577: LD_INT 102
12579: EQUAL
12580: IFFALSE 12637
// begin if p3 = 1 then
12582: LD_VAR 0 3
12586: PUSH
12587: LD_INT 1
12589: EQUAL
12590: IFFALSE 12602
// globalGameSaveCounter := p4 ;
12592: LD_ADDR_EXP 26
12596: PUSH
12597: LD_VAR 0 4
12601: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 2
12609: EQUAL
12610: IFFALSE 12618
12612: PUSH
12613: LD_EXP 26
12617: AND
12618: IFFALSE 12637
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12620: LD_STRING setGameSaveCounter(
12622: PUSH
12623: LD_EXP 26
12627: STR
12628: PUSH
12629: LD_STRING )
12631: STR
12632: PPUSH
12633: CALL_OW 559
// end ; end ;
12637: LD_VAR 0 7
12641: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12642: LD_INT 0
12644: PPUSH
// streamModeActive := false ;
12645: LD_ADDR_EXP 27
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// normalCounter := 36 ;
12653: LD_ADDR_EXP 28
12657: PUSH
12658: LD_INT 36
12660: ST_TO_ADDR
// hardcoreCounter := 18 ;
12661: LD_ADDR_EXP 29
12665: PUSH
12666: LD_INT 18
12668: ST_TO_ADDR
// sRocket := false ;
12669: LD_ADDR_EXP 32
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sSpeed := false ;
12677: LD_ADDR_EXP 31
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sEngine := false ;
12685: LD_ADDR_EXP 33
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sSpec := false ;
12693: LD_ADDR_EXP 30
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sLevel := false ;
12701: LD_ADDR_EXP 34
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sArmoury := false ;
12709: LD_ADDR_EXP 35
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sRadar := false ;
12717: LD_ADDR_EXP 36
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sBunker := false ;
12725: LD_ADDR_EXP 37
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sHack := false ;
12733: LD_ADDR_EXP 38
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sFire := false ;
12741: LD_ADDR_EXP 39
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sRefresh := false ;
12749: LD_ADDR_EXP 40
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sExp := false ;
12757: LD_ADDR_EXP 41
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sDepot := false ;
12765: LD_ADDR_EXP 42
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sFlag := false ;
12773: LD_ADDR_EXP 43
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sKamikadze := false ;
12781: LD_ADDR_EXP 51
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sTroll := false ;
12789: LD_ADDR_EXP 52
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sSlow := false ;
12797: LD_ADDR_EXP 53
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sLack := false ;
12805: LD_ADDR_EXP 54
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sTank := false ;
12813: LD_ADDR_EXP 56
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// sRemote := false ;
12821: LD_ADDR_EXP 57
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// sPowell := false ;
12829: LD_ADDR_EXP 58
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// sTeleport := false ;
12837: LD_ADDR_EXP 61
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// sOilTower := false ;
12845: LD_ADDR_EXP 63
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// sShovel := false ;
12853: LD_ADDR_EXP 64
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// sSheik := false ;
12861: LD_ADDR_EXP 65
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// sEarthquake := false ;
12869: LD_ADDR_EXP 67
12873: PUSH
12874: LD_INT 0
12876: ST_TO_ADDR
// sAI := false ;
12877: LD_ADDR_EXP 68
12881: PUSH
12882: LD_INT 0
12884: ST_TO_ADDR
// sCargo := false ;
12885: LD_ADDR_EXP 71
12889: PUSH
12890: LD_INT 0
12892: ST_TO_ADDR
// sDLaser := false ;
12893: LD_ADDR_EXP 72
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// sExchange := false ;
12901: LD_ADDR_EXP 73
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// sFac := false ;
12909: LD_ADDR_EXP 74
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// sPower := false ;
12917: LD_ADDR_EXP 75
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// sRandom := false ;
12925: LD_ADDR_EXP 76
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// sShield := false ;
12933: LD_ADDR_EXP 77
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// sTime := false ;
12941: LD_ADDR_EXP 78
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// sTools := false ;
12949: LD_ADDR_EXP 79
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// sSold := false ;
12957: LD_ADDR_EXP 44
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// sDiff := false ;
12965: LD_ADDR_EXP 45
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// sFog := false ;
12973: LD_ADDR_EXP 48
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sReset := false ;
12981: LD_ADDR_EXP 49
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sSun := false ;
12989: LD_ADDR_EXP 50
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sTiger := false ;
12997: LD_ADDR_EXP 46
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sBomb := false ;
13005: LD_ADDR_EXP 47
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// sWound := false ;
13013: LD_ADDR_EXP 55
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// sBetray := false ;
13021: LD_ADDR_EXP 59
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// sContamin := false ;
13029: LD_ADDR_EXP 60
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// sOil := false ;
13037: LD_ADDR_EXP 62
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// sStu := false ;
13045: LD_ADDR_EXP 66
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// sBazooka := false ;
13053: LD_ADDR_EXP 69
13057: PUSH
13058: LD_INT 0
13060: ST_TO_ADDR
// sMortar := false ;
13061: LD_ADDR_EXP 70
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// sRanger := false ;
13069: LD_ADDR_EXP 80
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// sComputer := false ;
13077: LD_ADDR_EXP 81
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
// s30 := false ;
13085: LD_ADDR_EXP 82
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// s60 := false ;
13093: LD_ADDR_EXP 83
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// end ;
13101: LD_VAR 0 1
13105: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13106: LD_INT 0
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
13113: PPUSH
13114: PPUSH
// result := [ ] ;
13115: LD_ADDR_VAR 0 2
13119: PUSH
13120: EMPTY
13121: ST_TO_ADDR
// if campaign_id = 1 then
13122: LD_OWVAR 69
13126: PUSH
13127: LD_INT 1
13129: EQUAL
13130: IFFALSE 16296
// begin case mission_number of 1 :
13132: LD_OWVAR 70
13136: PUSH
13137: LD_INT 1
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13221
13145: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: LD_INT 4
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: LD_INT 12
13162: PUSH
13163: LD_INT 15
13165: PUSH
13166: LD_INT 16
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: LD_INT 23
13174: PUSH
13175: LD_INT 26
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 101
13191: PUSH
13192: LD_INT 102
13194: PUSH
13195: LD_INT 106
13197: PUSH
13198: LD_INT 116
13200: PUSH
13201: LD_INT 117
13203: PUSH
13204: LD_INT 118
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: ST_TO_ADDR
13219: GO 16294
13221: LD_INT 2
13223: DOUBLE
13224: EQUAL
13225: IFTRUE 13229
13227: GO 13313
13229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13230: LD_ADDR_VAR 0 2
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: LD_INT 4
13240: PUSH
13241: LD_INT 11
13243: PUSH
13244: LD_INT 12
13246: PUSH
13247: LD_INT 15
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 22
13255: PUSH
13256: LD_INT 23
13258: PUSH
13259: LD_INT 26
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 101
13275: PUSH
13276: LD_INT 102
13278: PUSH
13279: LD_INT 105
13281: PUSH
13282: LD_INT 106
13284: PUSH
13285: LD_INT 108
13287: PUSH
13288: LD_INT 116
13290: PUSH
13291: LD_INT 117
13293: PUSH
13294: LD_INT 118
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: ST_TO_ADDR
13311: GO 16294
13313: LD_INT 3
13315: DOUBLE
13316: EQUAL
13317: IFTRUE 13321
13319: GO 13409
13321: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: LD_INT 4
13332: PUSH
13333: LD_INT 5
13335: PUSH
13336: LD_INT 11
13338: PUSH
13339: LD_INT 12
13341: PUSH
13342: LD_INT 15
13344: PUSH
13345: LD_INT 16
13347: PUSH
13348: LD_INT 22
13350: PUSH
13351: LD_INT 26
13353: PUSH
13354: LD_INT 36
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 101
13371: PUSH
13372: LD_INT 102
13374: PUSH
13375: LD_INT 105
13377: PUSH
13378: LD_INT 106
13380: PUSH
13381: LD_INT 108
13383: PUSH
13384: LD_INT 116
13386: PUSH
13387: LD_INT 117
13389: PUSH
13390: LD_INT 118
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: ST_TO_ADDR
13407: GO 16294
13409: LD_INT 4
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13513
13417: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13418: LD_ADDR_VAR 0 2
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: LD_INT 5
13431: PUSH
13432: LD_INT 8
13434: PUSH
13435: LD_INT 11
13437: PUSH
13438: LD_INT 12
13440: PUSH
13441: LD_INT 15
13443: PUSH
13444: LD_INT 16
13446: PUSH
13447: LD_INT 22
13449: PUSH
13450: LD_INT 23
13452: PUSH
13453: LD_INT 26
13455: PUSH
13456: LD_INT 36
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 101
13475: PUSH
13476: LD_INT 102
13478: PUSH
13479: LD_INT 105
13481: PUSH
13482: LD_INT 106
13484: PUSH
13485: LD_INT 108
13487: PUSH
13488: LD_INT 116
13490: PUSH
13491: LD_INT 117
13493: PUSH
13494: LD_INT 118
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 16294
13513: LD_INT 5
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13633
13521: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: LD_INT 6
13538: PUSH
13539: LD_INT 8
13541: PUSH
13542: LD_INT 11
13544: PUSH
13545: LD_INT 12
13547: PUSH
13548: LD_INT 15
13550: PUSH
13551: LD_INT 16
13553: PUSH
13554: LD_INT 22
13556: PUSH
13557: LD_INT 23
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 26
13565: PUSH
13566: LD_INT 36
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 101
13587: PUSH
13588: LD_INT 102
13590: PUSH
13591: LD_INT 105
13593: PUSH
13594: LD_INT 106
13596: PUSH
13597: LD_INT 108
13599: PUSH
13600: LD_INT 109
13602: PUSH
13603: LD_INT 112
13605: PUSH
13606: LD_INT 116
13608: PUSH
13609: LD_INT 117
13611: PUSH
13612: LD_INT 118
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 16294
13633: LD_INT 6
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13773
13641: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13642: LD_ADDR_VAR 0 2
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: LD_INT 5
13655: PUSH
13656: LD_INT 6
13658: PUSH
13659: LD_INT 8
13661: PUSH
13662: LD_INT 11
13664: PUSH
13665: LD_INT 12
13667: PUSH
13668: LD_INT 15
13670: PUSH
13671: LD_INT 16
13673: PUSH
13674: LD_INT 20
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_INT 23
13685: PUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 26
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: LD_INT 31
13697: PUSH
13698: LD_INT 32
13700: PUSH
13701: LD_INT 36
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 101
13727: PUSH
13728: LD_INT 102
13730: PUSH
13731: LD_INT 105
13733: PUSH
13734: LD_INT 106
13736: PUSH
13737: LD_INT 108
13739: PUSH
13740: LD_INT 109
13742: PUSH
13743: LD_INT 112
13745: PUSH
13746: LD_INT 116
13748: PUSH
13749: LD_INT 117
13751: PUSH
13752: LD_INT 118
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 16294
13773: LD_INT 7
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13893
13781: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13782: LD_ADDR_VAR 0 2
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: LD_INT 7
13798: PUSH
13799: LD_INT 11
13801: PUSH
13802: LD_INT 12
13804: PUSH
13805: LD_INT 15
13807: PUSH
13808: LD_INT 16
13810: PUSH
13811: LD_INT 20
13813: PUSH
13814: LD_INT 21
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_INT 23
13822: PUSH
13823: LD_INT 25
13825: PUSH
13826: LD_INT 26
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 101
13847: PUSH
13848: LD_INT 102
13850: PUSH
13851: LD_INT 103
13853: PUSH
13854: LD_INT 105
13856: PUSH
13857: LD_INT 106
13859: PUSH
13860: LD_INT 108
13862: PUSH
13863: LD_INT 112
13865: PUSH
13866: LD_INT 116
13868: PUSH
13869: LD_INT 117
13871: PUSH
13872: LD_INT 118
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: ST_TO_ADDR
13891: GO 16294
13893: LD_INT 8
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 14041
13901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13902: LD_ADDR_VAR 0 2
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 4
13912: PUSH
13913: LD_INT 5
13915: PUSH
13916: LD_INT 6
13918: PUSH
13919: LD_INT 7
13921: PUSH
13922: LD_INT 8
13924: PUSH
13925: LD_INT 11
13927: PUSH
13928: LD_INT 12
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 16
13936: PUSH
13937: LD_INT 20
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_INT 23
13948: PUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 26
13954: PUSH
13955: LD_INT 30
13957: PUSH
13958: LD_INT 31
13960: PUSH
13961: LD_INT 32
13963: PUSH
13964: LD_INT 36
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 101
13991: PUSH
13992: LD_INT 102
13994: PUSH
13995: LD_INT 103
13997: PUSH
13998: LD_INT 105
14000: PUSH
14001: LD_INT 106
14003: PUSH
14004: LD_INT 108
14006: PUSH
14007: LD_INT 109
14009: PUSH
14010: LD_INT 112
14012: PUSH
14013: LD_INT 116
14015: PUSH
14016: LD_INT 117
14018: PUSH
14019: LD_INT 118
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: ST_TO_ADDR
14039: GO 16294
14041: LD_INT 9
14043: DOUBLE
14044: EQUAL
14045: IFTRUE 14049
14047: GO 14197
14049: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14050: LD_ADDR_VAR 0 2
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: LD_INT 4
14060: PUSH
14061: LD_INT 5
14063: PUSH
14064: LD_INT 6
14066: PUSH
14067: LD_INT 7
14069: PUSH
14070: LD_INT 8
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 16
14084: PUSH
14085: LD_INT 20
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 22
14093: PUSH
14094: LD_INT 23
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 26
14102: PUSH
14103: LD_INT 28
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 31
14111: PUSH
14112: LD_INT 32
14114: PUSH
14115: LD_INT 36
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 101
14143: PUSH
14144: LD_INT 102
14146: PUSH
14147: LD_INT 103
14149: PUSH
14150: LD_INT 105
14152: PUSH
14153: LD_INT 106
14155: PUSH
14156: LD_INT 108
14158: PUSH
14159: LD_INT 109
14161: PUSH
14162: LD_INT 112
14164: PUSH
14165: LD_INT 114
14167: PUSH
14168: LD_INT 116
14170: PUSH
14171: LD_INT 117
14173: PUSH
14174: LD_INT 118
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16294
14197: LD_INT 10
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14401
14205: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 9
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 12
14240: PUSH
14241: LD_INT 13
14243: PUSH
14244: LD_INT 14
14246: PUSH
14247: LD_INT 15
14249: PUSH
14250: LD_INT 16
14252: PUSH
14253: LD_INT 17
14255: PUSH
14256: LD_INT 18
14258: PUSH
14259: LD_INT 19
14261: PUSH
14262: LD_INT 20
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 24
14276: PUSH
14277: LD_INT 25
14279: PUSH
14280: LD_INT 26
14282: PUSH
14283: LD_INT 28
14285: PUSH
14286: LD_INT 30
14288: PUSH
14289: LD_INT 31
14291: PUSH
14292: LD_INT 32
14294: PUSH
14295: LD_INT 36
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 101
14331: PUSH
14332: LD_INT 102
14334: PUSH
14335: LD_INT 103
14337: PUSH
14338: LD_INT 104
14340: PUSH
14341: LD_INT 105
14343: PUSH
14344: LD_INT 106
14346: PUSH
14347: LD_INT 107
14349: PUSH
14350: LD_INT 108
14352: PUSH
14353: LD_INT 109
14355: PUSH
14356: LD_INT 110
14358: PUSH
14359: LD_INT 111
14361: PUSH
14362: LD_INT 112
14364: PUSH
14365: LD_INT 114
14367: PUSH
14368: LD_INT 116
14370: PUSH
14371: LD_INT 117
14373: PUSH
14374: LD_INT 118
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: ST_TO_ADDR
14399: GO 16294
14401: LD_INT 11
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14613
14409: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: LD_INT 5
14426: PUSH
14427: LD_INT 6
14429: PUSH
14430: LD_INT 7
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: LD_INT 9
14438: PUSH
14439: LD_INT 10
14441: PUSH
14442: LD_INT 11
14444: PUSH
14445: LD_INT 12
14447: PUSH
14448: LD_INT 13
14450: PUSH
14451: LD_INT 14
14453: PUSH
14454: LD_INT 15
14456: PUSH
14457: LD_INT 16
14459: PUSH
14460: LD_INT 17
14462: PUSH
14463: LD_INT 18
14465: PUSH
14466: LD_INT 19
14468: PUSH
14469: LD_INT 20
14471: PUSH
14472: LD_INT 21
14474: PUSH
14475: LD_INT 22
14477: PUSH
14478: LD_INT 23
14480: PUSH
14481: LD_INT 24
14483: PUSH
14484: LD_INT 25
14486: PUSH
14487: LD_INT 26
14489: PUSH
14490: LD_INT 28
14492: PUSH
14493: LD_INT 30
14495: PUSH
14496: LD_INT 31
14498: PUSH
14499: LD_INT 32
14501: PUSH
14502: LD_INT 34
14504: PUSH
14505: LD_INT 36
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 101
14543: PUSH
14544: LD_INT 102
14546: PUSH
14547: LD_INT 103
14549: PUSH
14550: LD_INT 104
14552: PUSH
14553: LD_INT 105
14555: PUSH
14556: LD_INT 106
14558: PUSH
14559: LD_INT 107
14561: PUSH
14562: LD_INT 108
14564: PUSH
14565: LD_INT 109
14567: PUSH
14568: LD_INT 110
14570: PUSH
14571: LD_INT 111
14573: PUSH
14574: LD_INT 112
14576: PUSH
14577: LD_INT 114
14579: PUSH
14580: LD_INT 116
14582: PUSH
14583: LD_INT 117
14585: PUSH
14586: LD_INT 118
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 16294
14613: LD_INT 12
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14841
14621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: LD_INT 2
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: LD_INT 4
14638: PUSH
14639: LD_INT 5
14641: PUSH
14642: LD_INT 6
14644: PUSH
14645: LD_INT 7
14647: PUSH
14648: LD_INT 8
14650: PUSH
14651: LD_INT 9
14653: PUSH
14654: LD_INT 10
14656: PUSH
14657: LD_INT 11
14659: PUSH
14660: LD_INT 12
14662: PUSH
14663: LD_INT 13
14665: PUSH
14666: LD_INT 14
14668: PUSH
14669: LD_INT 15
14671: PUSH
14672: LD_INT 16
14674: PUSH
14675: LD_INT 17
14677: PUSH
14678: LD_INT 18
14680: PUSH
14681: LD_INT 19
14683: PUSH
14684: LD_INT 20
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_INT 23
14695: PUSH
14696: LD_INT 24
14698: PUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 26
14704: PUSH
14705: LD_INT 27
14707: PUSH
14708: LD_INT 28
14710: PUSH
14711: LD_INT 30
14713: PUSH
14714: LD_INT 31
14716: PUSH
14717: LD_INT 32
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: LD_INT 34
14725: PUSH
14726: LD_INT 36
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 101
14767: PUSH
14768: LD_INT 102
14770: PUSH
14771: LD_INT 103
14773: PUSH
14774: LD_INT 104
14776: PUSH
14777: LD_INT 105
14779: PUSH
14780: LD_INT 106
14782: PUSH
14783: LD_INT 107
14785: PUSH
14786: LD_INT 108
14788: PUSH
14789: LD_INT 109
14791: PUSH
14792: LD_INT 110
14794: PUSH
14795: LD_INT 111
14797: PUSH
14798: LD_INT 112
14800: PUSH
14801: LD_INT 113
14803: PUSH
14804: LD_INT 114
14806: PUSH
14807: LD_INT 116
14809: PUSH
14810: LD_INT 117
14812: PUSH
14813: LD_INT 118
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: ST_TO_ADDR
14839: GO 16294
14841: LD_INT 13
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14849
14847: GO 15057
14849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: LD_INT 1
14857: PUSH
14858: LD_INT 2
14860: PUSH
14861: LD_INT 3
14863: PUSH
14864: LD_INT 4
14866: PUSH
14867: LD_INT 5
14869: PUSH
14870: LD_INT 8
14872: PUSH
14873: LD_INT 9
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 11
14881: PUSH
14882: LD_INT 12
14884: PUSH
14885: LD_INT 14
14887: PUSH
14888: LD_INT 15
14890: PUSH
14891: LD_INT 16
14893: PUSH
14894: LD_INT 17
14896: PUSH
14897: LD_INT 18
14899: PUSH
14900: LD_INT 19
14902: PUSH
14903: LD_INT 20
14905: PUSH
14906: LD_INT 21
14908: PUSH
14909: LD_INT 22
14911: PUSH
14912: LD_INT 23
14914: PUSH
14915: LD_INT 24
14917: PUSH
14918: LD_INT 25
14920: PUSH
14921: LD_INT 26
14923: PUSH
14924: LD_INT 27
14926: PUSH
14927: LD_INT 28
14929: PUSH
14930: LD_INT 30
14932: PUSH
14933: LD_INT 31
14935: PUSH
14936: LD_INT 32
14938: PUSH
14939: LD_INT 33
14941: PUSH
14942: LD_INT 34
14944: PUSH
14945: LD_INT 36
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 101
14983: PUSH
14984: LD_INT 102
14986: PUSH
14987: LD_INT 103
14989: PUSH
14990: LD_INT 104
14992: PUSH
14993: LD_INT 105
14995: PUSH
14996: LD_INT 106
14998: PUSH
14999: LD_INT 107
15001: PUSH
15002: LD_INT 108
15004: PUSH
15005: LD_INT 109
15007: PUSH
15008: LD_INT 110
15010: PUSH
15011: LD_INT 111
15013: PUSH
15014: LD_INT 112
15016: PUSH
15017: LD_INT 113
15019: PUSH
15020: LD_INT 114
15022: PUSH
15023: LD_INT 116
15025: PUSH
15026: LD_INT 117
15028: PUSH
15029: LD_INT 118
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
15055: GO 16294
15057: LD_INT 14
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15289
15065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15066: LD_ADDR_VAR 0 2
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 3
15079: PUSH
15080: LD_INT 4
15082: PUSH
15083: LD_INT 5
15085: PUSH
15086: LD_INT 6
15088: PUSH
15089: LD_INT 7
15091: PUSH
15092: LD_INT 8
15094: PUSH
15095: LD_INT 9
15097: PUSH
15098: LD_INT 10
15100: PUSH
15101: LD_INT 11
15103: PUSH
15104: LD_INT 12
15106: PUSH
15107: LD_INT 13
15109: PUSH
15110: LD_INT 14
15112: PUSH
15113: LD_INT 15
15115: PUSH
15116: LD_INT 16
15118: PUSH
15119: LD_INT 17
15121: PUSH
15122: LD_INT 18
15124: PUSH
15125: LD_INT 19
15127: PUSH
15128: LD_INT 20
15130: PUSH
15131: LD_INT 21
15133: PUSH
15134: LD_INT 22
15136: PUSH
15137: LD_INT 23
15139: PUSH
15140: LD_INT 24
15142: PUSH
15143: LD_INT 25
15145: PUSH
15146: LD_INT 26
15148: PUSH
15149: LD_INT 27
15151: PUSH
15152: LD_INT 28
15154: PUSH
15155: LD_INT 29
15157: PUSH
15158: LD_INT 30
15160: PUSH
15161: LD_INT 31
15163: PUSH
15164: LD_INT 32
15166: PUSH
15167: LD_INT 33
15169: PUSH
15170: LD_INT 34
15172: PUSH
15173: LD_INT 36
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 101
15215: PUSH
15216: LD_INT 102
15218: PUSH
15219: LD_INT 103
15221: PUSH
15222: LD_INT 104
15224: PUSH
15225: LD_INT 105
15227: PUSH
15228: LD_INT 106
15230: PUSH
15231: LD_INT 107
15233: PUSH
15234: LD_INT 108
15236: PUSH
15237: LD_INT 109
15239: PUSH
15240: LD_INT 110
15242: PUSH
15243: LD_INT 111
15245: PUSH
15246: LD_INT 112
15248: PUSH
15249: LD_INT 113
15251: PUSH
15252: LD_INT 114
15254: PUSH
15255: LD_INT 116
15257: PUSH
15258: LD_INT 117
15260: PUSH
15261: LD_INT 118
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: ST_TO_ADDR
15287: GO 16294
15289: LD_INT 15
15291: DOUBLE
15292: EQUAL
15293: IFTRUE 15297
15295: GO 15521
15297: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15298: LD_ADDR_VAR 0 2
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 4
15314: PUSH
15315: LD_INT 5
15317: PUSH
15318: LD_INT 6
15320: PUSH
15321: LD_INT 7
15323: PUSH
15324: LD_INT 8
15326: PUSH
15327: LD_INT 9
15329: PUSH
15330: LD_INT 10
15332: PUSH
15333: LD_INT 11
15335: PUSH
15336: LD_INT 12
15338: PUSH
15339: LD_INT 13
15341: PUSH
15342: LD_INT 14
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: LD_INT 16
15350: PUSH
15351: LD_INT 17
15353: PUSH
15354: LD_INT 18
15356: PUSH
15357: LD_INT 19
15359: PUSH
15360: LD_INT 20
15362: PUSH
15363: LD_INT 21
15365: PUSH
15366: LD_INT 22
15368: PUSH
15369: LD_INT 23
15371: PUSH
15372: LD_INT 24
15374: PUSH
15375: LD_INT 25
15377: PUSH
15378: LD_INT 26
15380: PUSH
15381: LD_INT 27
15383: PUSH
15384: LD_INT 28
15386: PUSH
15387: LD_INT 29
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 31
15395: PUSH
15396: LD_INT 32
15398: PUSH
15399: LD_INT 33
15401: PUSH
15402: LD_INT 34
15404: PUSH
15405: LD_INT 36
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 101
15447: PUSH
15448: LD_INT 102
15450: PUSH
15451: LD_INT 103
15453: PUSH
15454: LD_INT 104
15456: PUSH
15457: LD_INT 105
15459: PUSH
15460: LD_INT 106
15462: PUSH
15463: LD_INT 107
15465: PUSH
15466: LD_INT 108
15468: PUSH
15469: LD_INT 109
15471: PUSH
15472: LD_INT 110
15474: PUSH
15475: LD_INT 111
15477: PUSH
15478: LD_INT 112
15480: PUSH
15481: LD_INT 113
15483: PUSH
15484: LD_INT 114
15486: PUSH
15487: LD_INT 116
15489: PUSH
15490: LD_INT 117
15492: PUSH
15493: LD_INT 118
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: ST_TO_ADDR
15519: GO 16294
15521: LD_INT 16
15523: DOUBLE
15524: EQUAL
15525: IFTRUE 15529
15527: GO 15665
15529: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15530: LD_ADDR_VAR 0 2
15534: PUSH
15535: LD_INT 2
15537: PUSH
15538: LD_INT 4
15540: PUSH
15541: LD_INT 5
15543: PUSH
15544: LD_INT 7
15546: PUSH
15547: LD_INT 11
15549: PUSH
15550: LD_INT 12
15552: PUSH
15553: LD_INT 15
15555: PUSH
15556: LD_INT 16
15558: PUSH
15559: LD_INT 20
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 23
15570: PUSH
15571: LD_INT 25
15573: PUSH
15574: LD_INT 26
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 31
15582: PUSH
15583: LD_INT 32
15585: PUSH
15586: LD_INT 33
15588: PUSH
15589: LD_INT 34
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 101
15615: PUSH
15616: LD_INT 102
15618: PUSH
15619: LD_INT 103
15621: PUSH
15622: LD_INT 106
15624: PUSH
15625: LD_INT 108
15627: PUSH
15628: LD_INT 112
15630: PUSH
15631: LD_INT 113
15633: PUSH
15634: LD_INT 114
15636: PUSH
15637: LD_INT 116
15639: PUSH
15640: LD_INT 117
15642: PUSH
15643: LD_INT 118
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: ST_TO_ADDR
15663: GO 16294
15665: LD_INT 17
15667: DOUBLE
15668: EQUAL
15669: IFTRUE 15673
15671: GO 15897
15673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 6
15696: PUSH
15697: LD_INT 7
15699: PUSH
15700: LD_INT 8
15702: PUSH
15703: LD_INT 9
15705: PUSH
15706: LD_INT 10
15708: PUSH
15709: LD_INT 11
15711: PUSH
15712: LD_INT 12
15714: PUSH
15715: LD_INT 13
15717: PUSH
15718: LD_INT 14
15720: PUSH
15721: LD_INT 15
15723: PUSH
15724: LD_INT 16
15726: PUSH
15727: LD_INT 17
15729: PUSH
15730: LD_INT 18
15732: PUSH
15733: LD_INT 19
15735: PUSH
15736: LD_INT 20
15738: PUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 22
15744: PUSH
15745: LD_INT 23
15747: PUSH
15748: LD_INT 24
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 26
15756: PUSH
15757: LD_INT 27
15759: PUSH
15760: LD_INT 28
15762: PUSH
15763: LD_INT 29
15765: PUSH
15766: LD_INT 30
15768: PUSH
15769: LD_INT 31
15771: PUSH
15772: LD_INT 32
15774: PUSH
15775: LD_INT 33
15777: PUSH
15778: LD_INT 34
15780: PUSH
15781: LD_INT 36
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 101
15823: PUSH
15824: LD_INT 102
15826: PUSH
15827: LD_INT 103
15829: PUSH
15830: LD_INT 104
15832: PUSH
15833: LD_INT 105
15835: PUSH
15836: LD_INT 106
15838: PUSH
15839: LD_INT 107
15841: PUSH
15842: LD_INT 108
15844: PUSH
15845: LD_INT 109
15847: PUSH
15848: LD_INT 110
15850: PUSH
15851: LD_INT 111
15853: PUSH
15854: LD_INT 112
15856: PUSH
15857: LD_INT 113
15859: PUSH
15860: LD_INT 114
15862: PUSH
15863: LD_INT 116
15865: PUSH
15866: LD_INT 117
15868: PUSH
15869: LD_INT 118
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 16294
15897: LD_INT 18
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16053
15905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: LD_INT 4
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: LD_INT 7
15922: PUSH
15923: LD_INT 11
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: LD_INT 15
15931: PUSH
15932: LD_INT 16
15934: PUSH
15935: LD_INT 20
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 22
15943: PUSH
15944: LD_INT 23
15946: PUSH
15947: LD_INT 25
15949: PUSH
15950: LD_INT 26
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 31
15958: PUSH
15959: LD_INT 32
15961: PUSH
15962: LD_INT 33
15964: PUSH
15965: LD_INT 34
15967: PUSH
15968: LD_INT 35
15970: PUSH
15971: LD_INT 36
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 101
15999: PUSH
16000: LD_INT 102
16002: PUSH
16003: LD_INT 103
16005: PUSH
16006: LD_INT 106
16008: PUSH
16009: LD_INT 108
16011: PUSH
16012: LD_INT 112
16014: PUSH
16015: LD_INT 113
16017: PUSH
16018: LD_INT 114
16020: PUSH
16021: LD_INT 115
16023: PUSH
16024: LD_INT 116
16026: PUSH
16027: LD_INT 117
16029: PUSH
16030: LD_INT 118
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 16294
16053: LD_INT 19
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16293
16061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16062: LD_ADDR_VAR 0 2
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: LD_INT 2
16072: PUSH
16073: LD_INT 3
16075: PUSH
16076: LD_INT 4
16078: PUSH
16079: LD_INT 5
16081: PUSH
16082: LD_INT 6
16084: PUSH
16085: LD_INT 7
16087: PUSH
16088: LD_INT 8
16090: PUSH
16091: LD_INT 9
16093: PUSH
16094: LD_INT 10
16096: PUSH
16097: LD_INT 11
16099: PUSH
16100: LD_INT 12
16102: PUSH
16103: LD_INT 13
16105: PUSH
16106: LD_INT 14
16108: PUSH
16109: LD_INT 15
16111: PUSH
16112: LD_INT 16
16114: PUSH
16115: LD_INT 17
16117: PUSH
16118: LD_INT 18
16120: PUSH
16121: LD_INT 19
16123: PUSH
16124: LD_INT 20
16126: PUSH
16127: LD_INT 21
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 23
16135: PUSH
16136: LD_INT 24
16138: PUSH
16139: LD_INT 25
16141: PUSH
16142: LD_INT 26
16144: PUSH
16145: LD_INT 27
16147: PUSH
16148: LD_INT 28
16150: PUSH
16151: LD_INT 29
16153: PUSH
16154: LD_INT 30
16156: PUSH
16157: LD_INT 31
16159: PUSH
16160: LD_INT 32
16162: PUSH
16163: LD_INT 33
16165: PUSH
16166: LD_INT 34
16168: PUSH
16169: LD_INT 35
16171: PUSH
16172: LD_INT 36
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 101
16215: PUSH
16216: LD_INT 102
16218: PUSH
16219: LD_INT 103
16221: PUSH
16222: LD_INT 104
16224: PUSH
16225: LD_INT 105
16227: PUSH
16228: LD_INT 106
16230: PUSH
16231: LD_INT 107
16233: PUSH
16234: LD_INT 108
16236: PUSH
16237: LD_INT 109
16239: PUSH
16240: LD_INT 110
16242: PUSH
16243: LD_INT 111
16245: PUSH
16246: LD_INT 112
16248: PUSH
16249: LD_INT 113
16251: PUSH
16252: LD_INT 114
16254: PUSH
16255: LD_INT 115
16257: PUSH
16258: LD_INT 116
16260: PUSH
16261: LD_INT 117
16263: PUSH
16264: LD_INT 118
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: ST_TO_ADDR
16291: GO 16294
16293: POP
// end else
16294: GO 16525
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16296: LD_ADDR_VAR 0 2
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: LD_INT 4
16312: PUSH
16313: LD_INT 5
16315: PUSH
16316: LD_INT 6
16318: PUSH
16319: LD_INT 7
16321: PUSH
16322: LD_INT 8
16324: PUSH
16325: LD_INT 9
16327: PUSH
16328: LD_INT 10
16330: PUSH
16331: LD_INT 11
16333: PUSH
16334: LD_INT 12
16336: PUSH
16337: LD_INT 13
16339: PUSH
16340: LD_INT 14
16342: PUSH
16343: LD_INT 15
16345: PUSH
16346: LD_INT 16
16348: PUSH
16349: LD_INT 17
16351: PUSH
16352: LD_INT 18
16354: PUSH
16355: LD_INT 19
16357: PUSH
16358: LD_INT 20
16360: PUSH
16361: LD_INT 21
16363: PUSH
16364: LD_INT 22
16366: PUSH
16367: LD_INT 23
16369: PUSH
16370: LD_INT 24
16372: PUSH
16373: LD_INT 25
16375: PUSH
16376: LD_INT 26
16378: PUSH
16379: LD_INT 27
16381: PUSH
16382: LD_INT 28
16384: PUSH
16385: LD_INT 29
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 31
16393: PUSH
16394: LD_INT 32
16396: PUSH
16397: LD_INT 33
16399: PUSH
16400: LD_INT 34
16402: PUSH
16403: LD_INT 35
16405: PUSH
16406: LD_INT 36
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 101
16449: PUSH
16450: LD_INT 102
16452: PUSH
16453: LD_INT 103
16455: PUSH
16456: LD_INT 104
16458: PUSH
16459: LD_INT 105
16461: PUSH
16462: LD_INT 106
16464: PUSH
16465: LD_INT 107
16467: PUSH
16468: LD_INT 108
16470: PUSH
16471: LD_INT 109
16473: PUSH
16474: LD_INT 110
16476: PUSH
16477: LD_INT 111
16479: PUSH
16480: LD_INT 112
16482: PUSH
16483: LD_INT 113
16485: PUSH
16486: LD_INT 114
16488: PUSH
16489: LD_INT 115
16491: PUSH
16492: LD_INT 116
16494: PUSH
16495: LD_INT 117
16497: PUSH
16498: LD_INT 118
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// if result then
16525: LD_VAR 0 2
16529: IFFALSE 17315
// begin normal :=  ;
16531: LD_ADDR_VAR 0 5
16535: PUSH
16536: LD_STRING 
16538: ST_TO_ADDR
// hardcore :=  ;
16539: LD_ADDR_VAR 0 6
16543: PUSH
16544: LD_STRING 
16546: ST_TO_ADDR
// active :=  ;
16547: LD_ADDR_VAR 0 7
16551: PUSH
16552: LD_STRING 
16554: ST_TO_ADDR
// for i = 1 to normalCounter do
16555: LD_ADDR_VAR 0 8
16559: PUSH
16560: DOUBLE
16561: LD_INT 1
16563: DEC
16564: ST_TO_ADDR
16565: LD_EXP 28
16569: PUSH
16570: FOR_TO
16571: IFFALSE 16672
// begin tmp := 0 ;
16573: LD_ADDR_VAR 0 3
16577: PUSH
16578: LD_STRING 0
16580: ST_TO_ADDR
// if result [ 1 ] then
16581: LD_VAR 0 2
16585: PUSH
16586: LD_INT 1
16588: ARRAY
16589: IFFALSE 16654
// if result [ 1 ] [ 1 ] = i then
16591: LD_VAR 0 2
16595: PUSH
16596: LD_INT 1
16598: ARRAY
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PUSH
16604: LD_VAR 0 8
16608: EQUAL
16609: IFFALSE 16654
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_VAR 0 2
16620: PPUSH
16621: LD_INT 1
16623: PPUSH
16624: LD_VAR 0 2
16628: PUSH
16629: LD_INT 1
16631: ARRAY
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 3
16640: PPUSH
16641: CALL_OW 1
16645: ST_TO_ADDR
// tmp := 1 ;
16646: LD_ADDR_VAR 0 3
16650: PUSH
16651: LD_STRING 1
16653: ST_TO_ADDR
// end ; normal := normal & tmp ;
16654: LD_ADDR_VAR 0 5
16658: PUSH
16659: LD_VAR 0 5
16663: PUSH
16664: LD_VAR 0 3
16668: STR
16669: ST_TO_ADDR
// end ;
16670: GO 16570
16672: POP
16673: POP
// for i = 1 to hardcoreCounter do
16674: LD_ADDR_VAR 0 8
16678: PUSH
16679: DOUBLE
16680: LD_INT 1
16682: DEC
16683: ST_TO_ADDR
16684: LD_EXP 29
16688: PUSH
16689: FOR_TO
16690: IFFALSE 16795
// begin tmp := 0 ;
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_STRING 0
16699: ST_TO_ADDR
// if result [ 2 ] then
16700: LD_VAR 0 2
16704: PUSH
16705: LD_INT 2
16707: ARRAY
16708: IFFALSE 16777
// if result [ 2 ] [ 1 ] = 100 + i then
16710: LD_VAR 0 2
16714: PUSH
16715: LD_INT 2
16717: ARRAY
16718: PUSH
16719: LD_INT 1
16721: ARRAY
16722: PUSH
16723: LD_INT 100
16725: PUSH
16726: LD_VAR 0 8
16730: PLUS
16731: EQUAL
16732: IFFALSE 16777
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_INT 2
16746: PPUSH
16747: LD_VAR 0 2
16751: PUSH
16752: LD_INT 2
16754: ARRAY
16755: PPUSH
16756: LD_INT 1
16758: PPUSH
16759: CALL_OW 3
16763: PPUSH
16764: CALL_OW 1
16768: ST_TO_ADDR
// tmp := 1 ;
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_STRING 1
16776: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16777: LD_ADDR_VAR 0 6
16781: PUSH
16782: LD_VAR 0 6
16786: PUSH
16787: LD_VAR 0 3
16791: STR
16792: ST_TO_ADDR
// end ;
16793: GO 16689
16795: POP
16796: POP
// if isGameLoad then
16797: LD_VAR 0 1
16801: IFFALSE 17276
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16803: LD_ADDR_VAR 0 4
16807: PUSH
16808: LD_EXP 32
16812: PUSH
16813: LD_EXP 31
16817: PUSH
16818: LD_EXP 33
16822: PUSH
16823: LD_EXP 30
16827: PUSH
16828: LD_EXP 34
16832: PUSH
16833: LD_EXP 35
16837: PUSH
16838: LD_EXP 36
16842: PUSH
16843: LD_EXP 37
16847: PUSH
16848: LD_EXP 38
16852: PUSH
16853: LD_EXP 39
16857: PUSH
16858: LD_EXP 40
16862: PUSH
16863: LD_EXP 41
16867: PUSH
16868: LD_EXP 42
16872: PUSH
16873: LD_EXP 43
16877: PUSH
16878: LD_EXP 51
16882: PUSH
16883: LD_EXP 52
16887: PUSH
16888: LD_EXP 53
16892: PUSH
16893: LD_EXP 54
16897: PUSH
16898: LD_EXP 56
16902: PUSH
16903: LD_EXP 57
16907: PUSH
16908: LD_EXP 58
16912: PUSH
16913: LD_EXP 61
16917: PUSH
16918: LD_EXP 63
16922: PUSH
16923: LD_EXP 64
16927: PUSH
16928: LD_EXP 65
16932: PUSH
16933: LD_EXP 67
16937: PUSH
16938: LD_EXP 68
16942: PUSH
16943: LD_EXP 71
16947: PUSH
16948: LD_EXP 72
16952: PUSH
16953: LD_EXP 73
16957: PUSH
16958: LD_EXP 74
16962: PUSH
16963: LD_EXP 75
16967: PUSH
16968: LD_EXP 76
16972: PUSH
16973: LD_EXP 77
16977: PUSH
16978: LD_EXP 78
16982: PUSH
16983: LD_EXP 79
16987: PUSH
16988: LD_EXP 44
16992: PUSH
16993: LD_EXP 45
16997: PUSH
16998: LD_EXP 48
17002: PUSH
17003: LD_EXP 49
17007: PUSH
17008: LD_EXP 50
17012: PUSH
17013: LD_EXP 46
17017: PUSH
17018: LD_EXP 47
17022: PUSH
17023: LD_EXP 55
17027: PUSH
17028: LD_EXP 59
17032: PUSH
17033: LD_EXP 60
17037: PUSH
17038: LD_EXP 62
17042: PUSH
17043: LD_EXP 66
17047: PUSH
17048: LD_EXP 69
17052: PUSH
17053: LD_EXP 70
17057: PUSH
17058: LD_EXP 80
17062: PUSH
17063: LD_EXP 81
17067: PUSH
17068: LD_EXP 82
17072: PUSH
17073: LD_EXP 83
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: ST_TO_ADDR
// tmp :=  ;
17134: LD_ADDR_VAR 0 3
17138: PUSH
17139: LD_STRING 
17141: ST_TO_ADDR
// for i = 1 to normalCounter do
17142: LD_ADDR_VAR 0 8
17146: PUSH
17147: DOUBLE
17148: LD_INT 1
17150: DEC
17151: ST_TO_ADDR
17152: LD_EXP 28
17156: PUSH
17157: FOR_TO
17158: IFFALSE 17194
// begin if flags [ i ] then
17160: LD_VAR 0 4
17164: PUSH
17165: LD_VAR 0 8
17169: ARRAY
17170: IFFALSE 17192
// tmp := tmp & i & ; ;
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_VAR 0 3
17181: PUSH
17182: LD_VAR 0 8
17186: STR
17187: PUSH
17188: LD_STRING ;
17190: STR
17191: ST_TO_ADDR
// end ;
17192: GO 17157
17194: POP
17195: POP
// for i = 1 to hardcoreCounter do
17196: LD_ADDR_VAR 0 8
17200: PUSH
17201: DOUBLE
17202: LD_INT 1
17204: DEC
17205: ST_TO_ADDR
17206: LD_EXP 29
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17258
// begin if flags [ normalCounter + i ] then
17214: LD_VAR 0 4
17218: PUSH
17219: LD_EXP 28
17223: PUSH
17224: LD_VAR 0 8
17228: PLUS
17229: ARRAY
17230: IFFALSE 17256
// tmp := tmp & ( 100 + i ) & ; ;
17232: LD_ADDR_VAR 0 3
17236: PUSH
17237: LD_VAR 0 3
17241: PUSH
17242: LD_INT 100
17244: PUSH
17245: LD_VAR 0 8
17249: PLUS
17250: STR
17251: PUSH
17252: LD_STRING ;
17254: STR
17255: ST_TO_ADDR
// end ;
17256: GO 17211
17258: POP
17259: POP
// if tmp then
17260: LD_VAR 0 3
17264: IFFALSE 17276
// active := tmp ;
17266: LD_ADDR_VAR 0 7
17270: PUSH
17271: LD_VAR 0 3
17275: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17276: LD_STRING getStreamItemsFromMission("
17278: PUSH
17279: LD_VAR 0 5
17283: STR
17284: PUSH
17285: LD_STRING ","
17287: STR
17288: PUSH
17289: LD_VAR 0 6
17293: STR
17294: PUSH
17295: LD_STRING ","
17297: STR
17298: PUSH
17299: LD_VAR 0 7
17303: STR
17304: PUSH
17305: LD_STRING ")
17307: STR
17308: PPUSH
17309: CALL_OW 559
// end else
17313: GO 17322
// ToLua ( getStreamItemsFromMission("","","") ) ;
17315: LD_STRING getStreamItemsFromMission("","","")
17317: PPUSH
17318: CALL_OW 559
// end ;
17322: LD_VAR 0 2
17326: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17327: LD_EXP 27
17331: IFFALSE 17339
17333: PUSH
17334: LD_EXP 32
17338: AND
17339: IFFALSE 17463
17341: GO 17343
17343: DISABLE
17344: LD_INT 0
17346: PPUSH
17347: PPUSH
// begin enable ;
17348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_OWVAR 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 34
17371: PUSH
17372: LD_INT 7
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 34
17381: PUSH
17382: LD_INT 45
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 34
17391: PUSH
17392: LD_INT 28
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 34
17401: PUSH
17402: LD_INT 47
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not tmp then
17425: LD_VAR 0 2
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17463
// for i in tmp do
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: FOR_IN
17445: IFFALSE 17461
// begin SetLives ( i , 0 ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 0
17454: PPUSH
17455: CALL_OW 234
// end ;
17459: GO 17444
17461: POP
17462: POP
// end ;
17463: PPOPN 2
17465: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17466: LD_EXP 27
17470: IFFALSE 17478
17472: PUSH
17473: LD_EXP 33
17477: AND
17478: IFFALSE 17562
17480: GO 17482
17482: DISABLE
17483: LD_INT 0
17485: PPUSH
17486: PPUSH
// begin enable ;
17487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 22
17495: PUSH
17496: LD_OWVAR 2
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 32
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PPUSH
17519: CALL_OW 69
17523: ST_TO_ADDR
// if not tmp then
17524: LD_VAR 0 2
17528: NOT
17529: IFFALSE 17533
// exit ;
17531: GO 17562
// for i in tmp do
17533: LD_ADDR_VAR 0 1
17537: PUSH
17538: LD_VAR 0 2
17542: PUSH
17543: FOR_IN
17544: IFFALSE 17560
// begin SetLives ( i , 0 ) ;
17546: LD_VAR 0 1
17550: PPUSH
17551: LD_INT 0
17553: PPUSH
17554: CALL_OW 234
// end ;
17558: GO 17543
17560: POP
17561: POP
// end ;
17562: PPOPN 2
17564: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17565: LD_EXP 27
17569: IFFALSE 17577
17571: PUSH
17572: LD_EXP 30
17576: AND
17577: IFFALSE 17670
17579: GO 17581
17581: DISABLE
17582: LD_INT 0
17584: PPUSH
// begin enable ;
17585: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17586: LD_ADDR_VAR 0 1
17590: PUSH
17591: LD_INT 22
17593: PUSH
17594: LD_OWVAR 2
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: LD_INT 25
17608: PUSH
17609: LD_INT 5
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 25
17618: PUSH
17619: LD_INT 9
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 25
17628: PUSH
17629: LD_INT 8
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: PUSH
17651: FOR_IN
17652: IFFALSE 17668
// begin SetClass ( i , 1 ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: LD_INT 1
17661: PPUSH
17662: CALL_OW 336
// end ;
17666: GO 17651
17668: POP
17669: POP
// end ;
17670: PPOPN 1
17672: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17673: LD_EXP 27
17677: IFFALSE 17685
17679: PUSH
17680: LD_EXP 31
17684: AND
17685: IFFALSE 17697
17687: PUSH
17688: LD_OWVAR 65
17692: PUSH
17693: LD_INT 7
17695: LESS
17696: AND
17697: IFFALSE 17711
17699: GO 17701
17701: DISABLE
// begin enable ;
17702: ENABLE
// game_speed := 7 ;
17703: LD_ADDR_OWVAR 65
17707: PUSH
17708: LD_INT 7
17710: ST_TO_ADDR
// end ;
17711: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17712: LD_EXP 27
17716: IFFALSE 17724
17718: PUSH
17719: LD_EXP 34
17723: AND
17724: IFFALSE 17926
17726: GO 17728
17728: DISABLE
17729: LD_INT 0
17731: PPUSH
17732: PPUSH
17733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17734: LD_ADDR_VAR 0 3
17738: PUSH
17739: LD_INT 81
17741: PUSH
17742: LD_OWVAR 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 21
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL_OW 69
17769: ST_TO_ADDR
// if not tmp then
17770: LD_VAR 0 3
17774: NOT
17775: IFFALSE 17779
// exit ;
17777: GO 17926
// if tmp > 5 then
17779: LD_VAR 0 3
17783: PUSH
17784: LD_INT 5
17786: GREATER
17787: IFFALSE 17799
// k := 5 else
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_INT 5
17796: ST_TO_ADDR
17797: GO 17809
// k := tmp ;
17799: LD_ADDR_VAR 0 2
17803: PUSH
17804: LD_VAR 0 3
17808: ST_TO_ADDR
// for i := 1 to k do
17809: LD_ADDR_VAR 0 1
17813: PUSH
17814: DOUBLE
17815: LD_INT 1
17817: DEC
17818: ST_TO_ADDR
17819: LD_VAR 0 2
17823: PUSH
17824: FOR_TO
17825: IFFALSE 17924
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17827: LD_VAR 0 3
17831: PUSH
17832: LD_VAR 0 1
17836: ARRAY
17837: PPUSH
17838: LD_VAR 0 1
17842: PUSH
17843: LD_INT 4
17845: MOD
17846: PUSH
17847: LD_INT 1
17849: PLUS
17850: PPUSH
17851: CALL_OW 259
17855: PUSH
17856: LD_INT 10
17858: LESS
17859: IFFALSE 17922
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17861: LD_VAR 0 3
17865: PUSH
17866: LD_VAR 0 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 1
17876: PUSH
17877: LD_INT 4
17879: MOD
17880: PUSH
17881: LD_INT 1
17883: PLUS
17884: PPUSH
17885: LD_VAR 0 3
17889: PUSH
17890: LD_VAR 0 1
17894: ARRAY
17895: PPUSH
17896: LD_VAR 0 1
17900: PUSH
17901: LD_INT 4
17903: MOD
17904: PUSH
17905: LD_INT 1
17907: PLUS
17908: PPUSH
17909: CALL_OW 259
17913: PUSH
17914: LD_INT 1
17916: PLUS
17917: PPUSH
17918: CALL_OW 237
17922: GO 17824
17924: POP
17925: POP
// end ;
17926: PPOPN 3
17928: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17929: LD_EXP 27
17933: IFFALSE 17941
17935: PUSH
17936: LD_EXP 35
17940: AND
17941: IFFALSE 17961
17943: GO 17945
17945: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17946: LD_INT 4
17948: PPUSH
17949: LD_OWVAR 2
17953: PPUSH
17954: LD_INT 0
17956: PPUSH
17957: CALL_OW 324
17961: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17962: LD_EXP 27
17966: IFFALSE 17974
17968: PUSH
17969: LD_EXP 64
17973: AND
17974: IFFALSE 17994
17976: GO 17978
17978: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17979: LD_INT 19
17981: PPUSH
17982: LD_OWVAR 2
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 324
17994: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17995: LD_EXP 27
17999: IFFALSE 18007
18001: PUSH
18002: LD_EXP 36
18006: AND
18007: IFFALSE 18109
18009: GO 18011
18011: DISABLE
18012: LD_INT 0
18014: PPUSH
18015: PPUSH
// begin enable ;
18016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_INT 22
18024: PUSH
18025: LD_OWVAR 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 34
18039: PUSH
18040: LD_INT 11
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 34
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 2
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18109
// for i in tmp do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18107
// begin SetLives ( i , 0 ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 0
18100: PPUSH
18101: CALL_OW 234
// end ;
18105: GO 18090
18107: POP
18108: POP
// end ;
18109: PPOPN 2
18111: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18112: LD_EXP 27
18116: IFFALSE 18124
18118: PUSH
18119: LD_EXP 37
18123: AND
18124: IFFALSE 18144
18126: GO 18128
18128: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18129: LD_INT 32
18131: PPUSH
18132: LD_OWVAR 2
18136: PPUSH
18137: LD_INT 0
18139: PPUSH
18140: CALL_OW 324
18144: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18145: LD_EXP 27
18149: IFFALSE 18157
18151: PUSH
18152: LD_EXP 38
18156: AND
18157: IFFALSE 18340
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
18165: PPUSH
18166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_OWVAR 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 33
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: ST_TO_ADDR
// if not tmp then
18203: LD_VAR 0 2
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18340
// side := 0 ;
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// for i := 1 to 8 do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_INT 8
18232: PUSH
18233: FOR_TO
18234: IFFALSE 18284
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18236: LD_OWVAR 2
18240: PUSH
18241: LD_VAR 0 1
18245: NONEQUAL
18246: IFFALSE 18268
18248: PUSH
18249: LD_OWVAR 2
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 81
18263: PUSH
18264: LD_INT 2
18266: EQUAL
18267: AND
18268: IFFALSE 18282
// begin side := i ;
18270: LD_ADDR_VAR 0 3
18274: PUSH
18275: LD_VAR 0 1
18279: ST_TO_ADDR
// break ;
18280: GO 18284
// end ;
18282: GO 18233
18284: POP
18285: POP
// if not side then
18286: LD_VAR 0 3
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18340
// for i := 1 to tmp do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: DOUBLE
18301: LD_INT 1
18303: DEC
18304: ST_TO_ADDR
18305: LD_VAR 0 2
18309: PUSH
18310: FOR_TO
18311: IFFALSE 18338
// if Prob ( 60 ) then
18313: LD_INT 60
18315: PPUSH
18316: CALL_OW 13
18320: IFFALSE 18336
// SetSide ( i , side ) ;
18322: LD_VAR 0 1
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: CALL_OW 235
18336: GO 18310
18338: POP
18339: POP
// end ;
18340: PPOPN 3
18342: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18343: LD_EXP 27
18347: IFFALSE 18355
18349: PUSH
18350: LD_EXP 40
18354: AND
18355: IFFALSE 18474
18357: GO 18359
18359: DISABLE
18360: LD_INT 0
18362: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18363: LD_ADDR_VAR 0 1
18367: PUSH
18368: LD_INT 22
18370: PUSH
18371: LD_OWVAR 2
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 21
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: LD_INT 23
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 69
18416: PUSH
18417: FOR_IN
18418: IFFALSE 18472
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 257
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: LD_INT 3
18438: PUSH
18439: LD_INT 4
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: IN
18448: IFFALSE 18470
// SetClass ( un , rand ( 1 , 4 ) ) ;
18450: LD_VAR 0 1
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: LD_INT 4
18460: PPUSH
18461: CALL_OW 12
18465: PPUSH
18466: CALL_OW 336
18470: GO 18417
18472: POP
18473: POP
// end ;
18474: PPOPN 1
18476: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18477: LD_EXP 27
18481: IFFALSE 18489
18483: PUSH
18484: LD_EXP 39
18488: AND
18489: IFFALSE 18568
18491: GO 18493
18493: DISABLE
18494: LD_INT 0
18496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18497: LD_ADDR_VAR 0 1
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_OWVAR 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 3
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 69
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 1
18537: NOT
18538: IFFALSE 18542
// exit ;
18540: GO 18568
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 1
18549: PPUSH
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 12
18559: ARRAY
18560: PPUSH
18561: LD_INT 100
18563: PPUSH
18564: CALL_OW 234
// end ;
18568: PPOPN 1
18570: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18571: LD_EXP 27
18575: IFFALSE 18583
18577: PUSH
18578: LD_EXP 41
18582: AND
18583: IFFALSE 18681
18585: GO 18587
18587: DISABLE
18588: LD_INT 0
18590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18591: LD_ADDR_VAR 0 1
18595: PUSH
18596: LD_INT 22
18598: PUSH
18599: LD_OWVAR 2
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 21
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: ST_TO_ADDR
// if not tmp then
18627: LD_VAR 0 1
18631: NOT
18632: IFFALSE 18636
// exit ;
18634: GO 18681
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18636: LD_VAR 0 1
18640: PUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 12
18653: ARRAY
18654: PPUSH
18655: LD_INT 1
18657: PPUSH
18658: LD_INT 4
18660: PPUSH
18661: CALL_OW 12
18665: PPUSH
18666: LD_INT 3000
18668: PPUSH
18669: LD_INT 9000
18671: PPUSH
18672: CALL_OW 12
18676: PPUSH
18677: CALL_OW 492
// end ;
18681: PPOPN 1
18683: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18684: LD_EXP 27
18688: IFFALSE 18696
18690: PUSH
18691: LD_EXP 42
18695: AND
18696: IFFALSE 18716
18698: GO 18700
18700: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18701: LD_INT 1
18703: PPUSH
18704: LD_OWVAR 2
18708: PPUSH
18709: LD_INT 0
18711: PPUSH
18712: CALL_OW 324
18716: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18717: LD_EXP 27
18721: IFFALSE 18729
18723: PUSH
18724: LD_EXP 43
18728: AND
18729: IFFALSE 18812
18731: GO 18733
18733: DISABLE
18734: LD_INT 0
18736: PPUSH
18737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18738: LD_ADDR_VAR 0 2
18742: PUSH
18743: LD_INT 22
18745: PUSH
18746: LD_OWVAR 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 3
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PPUSH
18769: CALL_OW 69
18773: ST_TO_ADDR
// if not tmp then
18774: LD_VAR 0 2
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18812
// for i in tmp do
18783: LD_ADDR_VAR 0 1
18787: PUSH
18788: LD_VAR 0 2
18792: PUSH
18793: FOR_IN
18794: IFFALSE 18810
// SetBLevel ( i , 10 ) ;
18796: LD_VAR 0 1
18800: PPUSH
18801: LD_INT 10
18803: PPUSH
18804: CALL_OW 241
18808: GO 18793
18810: POP
18811: POP
// end ;
18812: PPOPN 2
18814: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18815: LD_EXP 27
18819: IFFALSE 18827
18821: PUSH
18822: LD_EXP 44
18826: AND
18827: IFFALSE 18938
18829: GO 18831
18831: DISABLE
18832: LD_INT 0
18834: PPUSH
18835: PPUSH
18836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18837: LD_ADDR_VAR 0 3
18841: PUSH
18842: LD_INT 22
18844: PUSH
18845: LD_OWVAR 2
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 25
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PPUSH
18868: CALL_OW 69
18872: ST_TO_ADDR
// if not tmp then
18873: LD_VAR 0 3
18877: NOT
18878: IFFALSE 18882
// exit ;
18880: GO 18938
// un := tmp [ rand ( 1 , tmp ) ] ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: LD_VAR 0 3
18891: PUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 12
18904: ARRAY
18905: ST_TO_ADDR
// if Crawls ( un ) then
18906: LD_VAR 0 2
18910: PPUSH
18911: CALL_OW 318
18915: IFFALSE 18926
// ComWalk ( un ) ;
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18926: LD_VAR 0 2
18930: PPUSH
18931: LD_INT 5
18933: PPUSH
18934: CALL_OW 336
// end ;
18938: PPOPN 3
18940: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18941: LD_EXP 27
18945: IFFALSE 18953
18947: PUSH
18948: LD_EXP 45
18952: AND
18953: IFFALSE 18965
18955: PUSH
18956: LD_OWVAR 67
18960: PUSH
18961: LD_INT 4
18963: LESS
18964: AND
18965: IFFALSE 18984
18967: GO 18969
18969: DISABLE
// begin Difficulty := Difficulty + 1 ;
18970: LD_ADDR_OWVAR 67
18974: PUSH
18975: LD_OWVAR 67
18979: PUSH
18980: LD_INT 1
18982: PLUS
18983: ST_TO_ADDR
// end ;
18984: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18985: LD_EXP 27
18989: IFFALSE 18997
18991: PUSH
18992: LD_EXP 46
18996: AND
18997: IFFALSE 19100
18999: GO 19001
19001: DISABLE
19002: LD_INT 0
19004: PPUSH
// begin for i := 1 to 5 do
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: DOUBLE
19011: LD_INT 1
19013: DEC
19014: ST_TO_ADDR
19015: LD_INT 5
19017: PUSH
19018: FOR_TO
19019: IFFALSE 19098
// begin uc_nation := nation_nature ;
19021: LD_ADDR_OWVAR 21
19025: PUSH
19026: LD_INT 0
19028: ST_TO_ADDR
// uc_side := 0 ;
19029: LD_ADDR_OWVAR 20
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19037: LD_ADDR_OWVAR 29
19041: PUSH
19042: LD_INT 12
19044: PUSH
19045: LD_INT 12
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: ST_TO_ADDR
// hc_agressivity := 20 ;
19052: LD_ADDR_OWVAR 35
19056: PUSH
19057: LD_INT 20
19059: ST_TO_ADDR
// hc_class := class_tiger ;
19060: LD_ADDR_OWVAR 28
19064: PUSH
19065: LD_INT 14
19067: ST_TO_ADDR
// hc_gallery :=  ;
19068: LD_ADDR_OWVAR 33
19072: PUSH
19073: LD_STRING 
19075: ST_TO_ADDR
// hc_name :=  ;
19076: LD_ADDR_OWVAR 26
19080: PUSH
19081: LD_STRING 
19083: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19084: CALL_OW 44
19088: PPUSH
19089: LD_INT 0
19091: PPUSH
19092: CALL_OW 51
// end ;
19096: GO 19018
19098: POP
19099: POP
// end ;
19100: PPOPN 1
19102: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19103: LD_EXP 27
19107: IFFALSE 19115
19109: PUSH
19110: LD_EXP 47
19114: AND
19115: IFFALSE 19124
19117: GO 19119
19119: DISABLE
// StreamSibBomb ;
19120: CALL 19125 0 0
19124: END
// export function StreamSibBomb ; var i , x , y ; begin
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
19130: PPUSH
// result := false ;
19131: LD_ADDR_VAR 0 1
19135: PUSH
19136: LD_INT 0
19138: ST_TO_ADDR
// for i := 1 to 16 do
19139: LD_ADDR_VAR 0 2
19143: PUSH
19144: DOUBLE
19145: LD_INT 1
19147: DEC
19148: ST_TO_ADDR
19149: LD_INT 16
19151: PUSH
19152: FOR_TO
19153: IFFALSE 19352
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_INT 10
19162: PUSH
19163: LD_INT 20
19165: PUSH
19166: LD_INT 30
19168: PUSH
19169: LD_INT 40
19171: PUSH
19172: LD_INT 50
19174: PUSH
19175: LD_INT 60
19177: PUSH
19178: LD_INT 70
19180: PUSH
19181: LD_INT 80
19183: PUSH
19184: LD_INT 90
19186: PUSH
19187: LD_INT 100
19189: PUSH
19190: LD_INT 110
19192: PUSH
19193: LD_INT 120
19195: PUSH
19196: LD_INT 130
19198: PUSH
19199: LD_INT 140
19201: PUSH
19202: LD_INT 150
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: PPUSH
19225: LD_INT 15
19227: PPUSH
19228: CALL_OW 12
19232: ARRAY
19233: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19234: LD_ADDR_VAR 0 4
19238: PUSH
19239: LD_INT 10
19241: PUSH
19242: LD_INT 20
19244: PUSH
19245: LD_INT 30
19247: PUSH
19248: LD_INT 40
19250: PUSH
19251: LD_INT 50
19253: PUSH
19254: LD_INT 60
19256: PUSH
19257: LD_INT 70
19259: PUSH
19260: LD_INT 80
19262: PUSH
19263: LD_INT 90
19265: PUSH
19266: LD_INT 100
19268: PUSH
19269: LD_INT 110
19271: PUSH
19272: LD_INT 120
19274: PUSH
19275: LD_INT 130
19277: PUSH
19278: LD_INT 140
19280: PUSH
19281: LD_INT 150
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 1
19303: PPUSH
19304: LD_INT 15
19306: PPUSH
19307: CALL_OW 12
19311: ARRAY
19312: ST_TO_ADDR
// if ValidHex ( x , y ) then
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_VAR 0 4
19322: PPUSH
19323: CALL_OW 488
19327: IFFALSE 19350
// begin result := [ x , y ] ;
19329: LD_ADDR_VAR 0 1
19333: PUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_VAR 0 4
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: ST_TO_ADDR
// break ;
19348: GO 19352
// end ; end ;
19350: GO 19152
19352: POP
19353: POP
// if result then
19354: LD_VAR 0 1
19358: IFFALSE 19418
// begin ToLua ( playSibBomb() ) ;
19360: LD_STRING playSibBomb()
19362: PPUSH
19363: CALL_OW 559
// wait ( 0 0$14 ) ;
19367: LD_INT 490
19369: PPUSH
19370: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19374: LD_VAR 0 1
19378: PUSH
19379: LD_INT 1
19381: ARRAY
19382: PPUSH
19383: LD_VAR 0 1
19387: PUSH
19388: LD_INT 2
19390: ARRAY
19391: PPUSH
19392: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19396: LD_VAR 0 1
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PPUSH
19405: LD_VAR 0 1
19409: PUSH
19410: LD_INT 2
19412: ARRAY
19413: PPUSH
19414: CALL_OW 429
// end ; end ;
19418: LD_VAR 0 1
19422: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19423: LD_EXP 27
19427: IFFALSE 19435
19429: PUSH
19430: LD_EXP 49
19434: AND
19435: IFFALSE 19447
19437: GO 19439
19439: DISABLE
// YouLost (  ) ;
19440: LD_STRING 
19442: PPUSH
19443: CALL_OW 104
19447: END
// every 0 0$1 trigger StreamModeActive and sFog do
19448: LD_EXP 27
19452: IFFALSE 19460
19454: PUSH
19455: LD_EXP 48
19459: AND
19460: IFFALSE 19474
19462: GO 19464
19464: DISABLE
// FogOff ( your_side ) ;
19465: LD_OWVAR 2
19469: PPUSH
19470: CALL_OW 344
19474: END
// every 0 0$1 trigger StreamModeActive and sSun do
19475: LD_EXP 27
19479: IFFALSE 19487
19481: PUSH
19482: LD_EXP 50
19486: AND
19487: IFFALSE 19515
19489: GO 19491
19491: DISABLE
// begin solar_recharge_percent := 0 ;
19492: LD_ADDR_OWVAR 79
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19500: LD_INT 10500
19502: PPUSH
19503: CALL_OW 67
// solar_recharge_percent := 100 ;
19507: LD_ADDR_OWVAR 79
19511: PUSH
19512: LD_INT 100
19514: ST_TO_ADDR
// end ;
19515: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19516: LD_EXP 27
19520: IFFALSE 19528
19522: PUSH
19523: LD_EXP 51
19527: AND
19528: IFFALSE 19767
19530: GO 19532
19532: DISABLE
19533: LD_INT 0
19535: PPUSH
19536: PPUSH
19537: PPUSH
// begin tmp := [ ] ;
19538: LD_ADDR_VAR 0 3
19542: PUSH
19543: EMPTY
19544: ST_TO_ADDR
// for i := 1 to 6 do
19545: LD_ADDR_VAR 0 1
19549: PUSH
19550: DOUBLE
19551: LD_INT 1
19553: DEC
19554: ST_TO_ADDR
19555: LD_INT 6
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19664
// begin uc_nation := nation_nature ;
19561: LD_ADDR_OWVAR 21
19565: PUSH
19566: LD_INT 0
19568: ST_TO_ADDR
// uc_side := 0 ;
19569: LD_ADDR_OWVAR 20
19573: PUSH
19574: LD_INT 0
19576: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19577: LD_ADDR_OWVAR 29
19581: PUSH
19582: LD_INT 12
19584: PUSH
19585: LD_INT 12
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: ST_TO_ADDR
// hc_agressivity := 20 ;
19592: LD_ADDR_OWVAR 35
19596: PUSH
19597: LD_INT 20
19599: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19600: LD_ADDR_OWVAR 28
19604: PUSH
19605: LD_INT 17
19607: ST_TO_ADDR
// hc_gallery :=  ;
19608: LD_ADDR_OWVAR 33
19612: PUSH
19613: LD_STRING 
19615: ST_TO_ADDR
// hc_name :=  ;
19616: LD_ADDR_OWVAR 26
19620: PUSH
19621: LD_STRING 
19623: ST_TO_ADDR
// un := CreateHuman ;
19624: LD_ADDR_VAR 0 2
19628: PUSH
19629: CALL_OW 44
19633: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19634: LD_VAR 0 2
19638: PPUSH
19639: LD_INT 1
19641: PPUSH
19642: CALL_OW 51
// tmp := tmp ^ un ;
19646: LD_ADDR_VAR 0 3
19650: PUSH
19651: LD_VAR 0 3
19655: PUSH
19656: LD_VAR 0 2
19660: ADD
19661: ST_TO_ADDR
// end ;
19662: GO 19558
19664: POP
19665: POP
// repeat wait ( 0 0$1 ) ;
19666: LD_INT 35
19668: PPUSH
19669: CALL_OW 67
// for un in tmp do
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 3
19682: PUSH
19683: FOR_IN
19684: IFFALSE 19758
// begin if IsDead ( un ) then
19686: LD_VAR 0 2
19690: PPUSH
19691: CALL_OW 301
19695: IFFALSE 19715
// begin tmp := tmp diff un ;
19697: LD_ADDR_VAR 0 3
19701: PUSH
19702: LD_VAR 0 3
19706: PUSH
19707: LD_VAR 0 2
19711: DIFF
19712: ST_TO_ADDR
// continue ;
19713: GO 19683
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_INT 3
19722: PUSH
19723: LD_INT 22
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PPUSH
19737: CALL_OW 69
19741: PPUSH
19742: LD_VAR 0 2
19746: PPUSH
19747: CALL_OW 74
19751: PPUSH
19752: CALL_OW 115
// end ;
19756: GO 19683
19758: POP
19759: POP
// until not tmp ;
19760: LD_VAR 0 3
19764: NOT
19765: IFFALSE 19666
// end ;
19767: PPOPN 3
19769: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19770: LD_EXP 27
19774: IFFALSE 19782
19776: PUSH
19777: LD_EXP 52
19781: AND
19782: IFFALSE 19836
19784: GO 19786
19786: DISABLE
// begin ToLua ( displayTroll(); ) ;
19787: LD_STRING displayTroll();
19789: PPUSH
19790: CALL_OW 559
// wait ( 3 3$00 ) ;
19794: LD_INT 6300
19796: PPUSH
19797: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19801: LD_STRING hideTroll();
19803: PPUSH
19804: CALL_OW 559
// wait ( 1 1$00 ) ;
19808: LD_INT 2100
19810: PPUSH
19811: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19815: LD_STRING displayTroll();
19817: PPUSH
19818: CALL_OW 559
// wait ( 1 1$00 ) ;
19822: LD_INT 2100
19824: PPUSH
19825: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19829: LD_STRING hideTroll();
19831: PPUSH
19832: CALL_OW 559
// end ;
19836: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19837: LD_EXP 27
19841: IFFALSE 19849
19843: PUSH
19844: LD_EXP 53
19848: AND
19849: IFFALSE 19912
19851: GO 19853
19853: DISABLE
19854: LD_INT 0
19856: PPUSH
// begin p := 0 ;
19857: LD_ADDR_VAR 0 1
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// repeat game_speed := 1 ;
19865: LD_ADDR_OWVAR 65
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19873: LD_INT 35
19875: PPUSH
19876: CALL_OW 67
// p := p + 1 ;
19880: LD_ADDR_VAR 0 1
19884: PUSH
19885: LD_VAR 0 1
19889: PUSH
19890: LD_INT 1
19892: PLUS
19893: ST_TO_ADDR
// until p >= 60 ;
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 60
19901: GREATEREQUAL
19902: IFFALSE 19865
// game_speed := 4 ;
19904: LD_ADDR_OWVAR 65
19908: PUSH
19909: LD_INT 4
19911: ST_TO_ADDR
// end ;
19912: PPOPN 1
19914: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19915: LD_EXP 27
19919: IFFALSE 19927
19921: PUSH
19922: LD_EXP 54
19926: AND
19927: IFFALSE 20073
19929: GO 19931
19931: DISABLE
19932: LD_INT 0
19934: PPUSH
19935: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19936: LD_ADDR_VAR 0 1
19940: PUSH
19941: LD_INT 22
19943: PUSH
19944: LD_OWVAR 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 30
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 69
19989: ST_TO_ADDR
// if not depot then
19990: LD_VAR 0 1
19994: NOT
19995: IFFALSE 19999
// exit ;
19997: GO 20073
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19999: LD_ADDR_VAR 0 2
20003: PUSH
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 1
20011: PPUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 12
20021: ARRAY
20022: PPUSH
20023: CALL_OW 274
20027: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20028: LD_VAR 0 2
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: LD_INT 0
20038: PPUSH
20039: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_INT 2
20050: PPUSH
20051: LD_INT 0
20053: PPUSH
20054: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20058: LD_VAR 0 2
20062: PPUSH
20063: LD_INT 3
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 277
// end ;
20073: PPOPN 2
20075: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20076: LD_EXP 27
20080: IFFALSE 20088
20082: PUSH
20083: LD_EXP 55
20087: AND
20088: IFFALSE 20185
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20096: LD_ADDR_VAR 0 1
20100: PUSH
20101: LD_INT 22
20103: PUSH
20104: LD_OWVAR 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 21
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 23
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: PPUSH
20145: CALL_OW 69
20149: ST_TO_ADDR
// if not tmp then
20150: LD_VAR 0 1
20154: NOT
20155: IFFALSE 20159
// exit ;
20157: GO 20185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20159: LD_VAR 0 1
20163: PUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 12
20176: ARRAY
20177: PPUSH
20178: LD_INT 200
20180: PPUSH
20181: CALL_OW 234
// end ;
20185: PPOPN 1
20187: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20188: LD_EXP 27
20192: IFFALSE 20200
20194: PUSH
20195: LD_EXP 56
20199: AND
20200: IFFALSE 20279
20202: GO 20204
20204: DISABLE
20205: LD_INT 0
20207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20208: LD_ADDR_VAR 0 1
20212: PUSH
20213: LD_INT 22
20215: PUSH
20216: LD_OWVAR 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 21
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: ST_TO_ADDR
// if not tmp then
20244: LD_VAR 0 1
20248: NOT
20249: IFFALSE 20253
// exit ;
20251: GO 20279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20253: LD_VAR 0 1
20257: PUSH
20258: LD_INT 1
20260: PPUSH
20261: LD_VAR 0 1
20265: PPUSH
20266: CALL_OW 12
20270: ARRAY
20271: PPUSH
20272: LD_INT 60
20274: PPUSH
20275: CALL_OW 234
// end ;
20279: PPOPN 1
20281: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20282: LD_EXP 27
20286: IFFALSE 20294
20288: PUSH
20289: LD_EXP 57
20293: AND
20294: IFFALSE 20393
20296: GO 20298
20298: DISABLE
20299: LD_INT 0
20301: PPUSH
20302: PPUSH
// begin enable ;
20303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20304: LD_ADDR_VAR 0 1
20308: PUSH
20309: LD_INT 22
20311: PUSH
20312: LD_OWVAR 2
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 61
20323: PUSH
20324: EMPTY
20325: LIST
20326: PUSH
20327: LD_INT 33
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: PPUSH
20342: CALL_OW 69
20346: ST_TO_ADDR
// if not tmp then
20347: LD_VAR 0 1
20351: NOT
20352: IFFALSE 20356
// exit ;
20354: GO 20393
// for i in tmp do
20356: LD_ADDR_VAR 0 2
20360: PUSH
20361: LD_VAR 0 1
20365: PUSH
20366: FOR_IN
20367: IFFALSE 20391
// if IsControledBy ( i ) then
20369: LD_VAR 0 2
20373: PPUSH
20374: CALL_OW 312
20378: IFFALSE 20389
// ComUnlink ( i ) ;
20380: LD_VAR 0 2
20384: PPUSH
20385: CALL_OW 136
20389: GO 20366
20391: POP
20392: POP
// end ;
20393: PPOPN 2
20395: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20396: LD_EXP 27
20400: IFFALSE 20408
20402: PUSH
20403: LD_EXP 58
20407: AND
20408: IFFALSE 20548
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
// begin ToLua ( displayPowell(); ) ;
20417: LD_STRING displayPowell();
20419: PPUSH
20420: CALL_OW 559
// uc_side := 0 ;
20424: LD_ADDR_OWVAR 20
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// uc_nation := 2 ;
20432: LD_ADDR_OWVAR 21
20436: PUSH
20437: LD_INT 2
20439: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20440: LD_ADDR_OWVAR 37
20444: PUSH
20445: LD_INT 14
20447: ST_TO_ADDR
// vc_engine := engine_siberite ;
20448: LD_ADDR_OWVAR 39
20452: PUSH
20453: LD_INT 3
20455: ST_TO_ADDR
// vc_control := control_apeman ;
20456: LD_ADDR_OWVAR 38
20460: PUSH
20461: LD_INT 5
20463: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20464: LD_ADDR_OWVAR 40
20468: PUSH
20469: LD_INT 29
20471: ST_TO_ADDR
// un := CreateVehicle ;
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: CALL_OW 45
20481: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20482: LD_VAR 0 2
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20494: LD_INT 35
20496: PPUSH
20497: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20501: LD_VAR 0 2
20505: PPUSH
20506: LD_INT 22
20508: PUSH
20509: LD_OWVAR 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PPUSH
20518: CALL_OW 69
20522: PPUSH
20523: LD_VAR 0 2
20527: PPUSH
20528: CALL_OW 74
20532: PPUSH
20533: CALL_OW 115
// until IsDead ( un ) ;
20537: LD_VAR 0 2
20541: PPUSH
20542: CALL_OW 301
20546: IFFALSE 20494
// end ;
20548: PPOPN 2
20550: END
// every 0 0$1 trigger StreamModeActive and sStu do
20551: LD_EXP 27
20555: IFFALSE 20563
20557: PUSH
20558: LD_EXP 66
20562: AND
20563: IFFALSE 20579
20565: GO 20567
20567: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20568: LD_STRING displayStucuk();
20570: PPUSH
20571: CALL_OW 559
// ResetFog ;
20575: CALL_OW 335
// end ;
20579: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20580: LD_EXP 27
20584: IFFALSE 20592
20586: PUSH
20587: LD_EXP 59
20591: AND
20592: IFFALSE 20733
20594: GO 20596
20596: DISABLE
20597: LD_INT 0
20599: PPUSH
20600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_INT 22
20608: PUSH
20609: LD_OWVAR 2
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 21
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PPUSH
20632: CALL_OW 69
20636: ST_TO_ADDR
// if not tmp then
20637: LD_VAR 0 2
20641: NOT
20642: IFFALSE 20646
// exit ;
20644: GO 20733
// un := tmp [ rand ( 1 , tmp ) ] ;
20646: LD_ADDR_VAR 0 1
20650: PUSH
20651: LD_VAR 0 2
20655: PUSH
20656: LD_INT 1
20658: PPUSH
20659: LD_VAR 0 2
20663: PPUSH
20664: CALL_OW 12
20668: ARRAY
20669: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20670: LD_VAR 0 1
20674: PPUSH
20675: LD_INT 0
20677: PPUSH
20678: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20682: LD_VAR 0 1
20686: PPUSH
20687: LD_OWVAR 3
20691: PUSH
20692: LD_VAR 0 1
20696: DIFF
20697: PPUSH
20698: LD_VAR 0 1
20702: PPUSH
20703: CALL_OW 74
20707: PPUSH
20708: CALL_OW 115
// wait ( 0 0$20 ) ;
20712: LD_INT 700
20714: PPUSH
20715: CALL_OW 67
// SetSide ( un , your_side ) ;
20719: LD_VAR 0 1
20723: PPUSH
20724: LD_OWVAR 2
20728: PPUSH
20729: CALL_OW 235
// end ;
20733: PPOPN 2
20735: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20736: LD_EXP 27
20740: IFFALSE 20748
20742: PUSH
20743: LD_EXP 60
20747: AND
20748: IFFALSE 20854
20750: GO 20752
20752: DISABLE
20753: LD_INT 0
20755: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20756: LD_ADDR_VAR 0 1
20760: PUSH
20761: LD_INT 22
20763: PUSH
20764: LD_OWVAR 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 30
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 30
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 69
20809: ST_TO_ADDR
// if not depot then
20810: LD_VAR 0 1
20814: NOT
20815: IFFALSE 20819
// exit ;
20817: GO 20854
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20819: LD_VAR 0 1
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PPUSH
20828: CALL_OW 250
20832: PPUSH
20833: LD_VAR 0 1
20837: PUSH
20838: LD_INT 1
20840: ARRAY
20841: PPUSH
20842: CALL_OW 251
20846: PPUSH
20847: LD_INT 70
20849: PPUSH
20850: CALL_OW 495
// end ;
20854: PPOPN 1
20856: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20857: LD_EXP 27
20861: IFFALSE 20869
20863: PUSH
20864: LD_EXP 61
20868: AND
20869: IFFALSE 21080
20871: GO 20873
20873: DISABLE
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20881: LD_ADDR_VAR 0 5
20885: PUSH
20886: LD_INT 22
20888: PUSH
20889: LD_OWVAR 2
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not tmp then
20917: LD_VAR 0 5
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21080
// for i in tmp do
20926: LD_ADDR_VAR 0 1
20930: PUSH
20931: LD_VAR 0 5
20935: PUSH
20936: FOR_IN
20937: IFFALSE 21078
// begin d := rand ( 0 , 5 ) ;
20939: LD_ADDR_VAR 0 4
20943: PUSH
20944: LD_INT 0
20946: PPUSH
20947: LD_INT 5
20949: PPUSH
20950: CALL_OW 12
20954: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20955: LD_ADDR_VAR 0 2
20959: PUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 250
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: LD_INT 3
20977: PPUSH
20978: LD_INT 12
20980: PPUSH
20981: CALL_OW 12
20985: PPUSH
20986: CALL_OW 272
20990: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20991: LD_ADDR_VAR 0 3
20995: PUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: CALL_OW 251
21005: PPUSH
21006: LD_VAR 0 4
21010: PPUSH
21011: LD_INT 3
21013: PPUSH
21014: LD_INT 12
21016: PPUSH
21017: CALL_OW 12
21021: PPUSH
21022: CALL_OW 273
21026: ST_TO_ADDR
// if ValidHex ( x , y ) then
21027: LD_VAR 0 2
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: CALL_OW 488
21041: IFFALSE 21076
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21043: LD_VAR 0 1
21047: PPUSH
21048: LD_VAR 0 2
21052: PPUSH
21053: LD_VAR 0 3
21057: PPUSH
21058: LD_INT 3
21060: PPUSH
21061: LD_INT 6
21063: PPUSH
21064: CALL_OW 12
21068: PPUSH
21069: LD_INT 1
21071: PPUSH
21072: CALL_OW 483
// end ;
21076: GO 20936
21078: POP
21079: POP
// end ;
21080: PPOPN 5
21082: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21083: LD_EXP 27
21087: IFFALSE 21095
21089: PUSH
21090: LD_EXP 62
21094: AND
21095: IFFALSE 21189
21097: GO 21099
21099: DISABLE
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_INT 22
21111: PUSH
21112: LD_OWVAR 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 32
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: PPUSH
21146: CALL_OW 69
21150: ST_TO_ADDR
// if not tmp then
21151: LD_VAR 0 2
21155: NOT
21156: IFFALSE 21160
// exit ;
21158: GO 21189
// for i in tmp do
21160: LD_ADDR_VAR 0 1
21164: PUSH
21165: LD_VAR 0 2
21169: PUSH
21170: FOR_IN
21171: IFFALSE 21187
// SetFuel ( i , 0 ) ;
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 0
21180: PPUSH
21181: CALL_OW 240
21185: GO 21170
21187: POP
21188: POP
// end ;
21189: PPOPN 2
21191: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21192: LD_EXP 27
21196: IFFALSE 21204
21198: PUSH
21199: LD_EXP 63
21203: AND
21204: IFFALSE 21270
21206: GO 21208
21208: DISABLE
21209: LD_INT 0
21211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21212: LD_ADDR_VAR 0 1
21216: PUSH
21217: LD_INT 22
21219: PUSH
21220: LD_OWVAR 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 30
21231: PUSH
21232: LD_INT 29
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PPUSH
21243: CALL_OW 69
21247: ST_TO_ADDR
// if not tmp then
21248: LD_VAR 0 1
21252: NOT
21253: IFFALSE 21257
// exit ;
21255: GO 21270
// DestroyUnit ( tmp [ 1 ] ) ;
21257: LD_VAR 0 1
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: CALL_OW 65
// end ;
21270: PPOPN 1
21272: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21273: LD_EXP 27
21277: IFFALSE 21285
21279: PUSH
21280: LD_EXP 65
21284: AND
21285: IFFALSE 21414
21287: GO 21289
21289: DISABLE
21290: LD_INT 0
21292: PPUSH
// begin uc_side := 0 ;
21293: LD_ADDR_OWVAR 20
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// uc_nation := nation_arabian ;
21301: LD_ADDR_OWVAR 21
21305: PUSH
21306: LD_INT 2
21308: ST_TO_ADDR
// hc_gallery :=  ;
21309: LD_ADDR_OWVAR 33
21313: PUSH
21314: LD_STRING 
21316: ST_TO_ADDR
// hc_name :=  ;
21317: LD_ADDR_OWVAR 26
21321: PUSH
21322: LD_STRING 
21324: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21325: LD_INT 1
21327: PPUSH
21328: LD_INT 11
21330: PPUSH
21331: LD_INT 10
21333: PPUSH
21334: CALL_OW 380
// un := CreateHuman ;
21338: LD_ADDR_VAR 0 1
21342: PUSH
21343: CALL_OW 44
21347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21348: LD_VAR 0 1
21352: PPUSH
21353: LD_INT 1
21355: PPUSH
21356: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21360: LD_INT 35
21362: PPUSH
21363: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21367: LD_VAR 0 1
21371: PPUSH
21372: LD_INT 22
21374: PUSH
21375: LD_OWVAR 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: CALL_OW 69
21388: PPUSH
21389: LD_VAR 0 1
21393: PPUSH
21394: CALL_OW 74
21398: PPUSH
21399: CALL_OW 115
// until IsDead ( un ) ;
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 301
21412: IFFALSE 21360
// end ;
21414: PPOPN 1
21416: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21417: LD_EXP 27
21421: IFFALSE 21429
21423: PUSH
21424: LD_EXP 67
21428: AND
21429: IFFALSE 21441
21431: GO 21433
21433: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21434: LD_STRING earthquake(getX(game), 0, 32)
21436: PPUSH
21437: CALL_OW 559
21441: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21442: LD_EXP 27
21446: IFFALSE 21454
21448: PUSH
21449: LD_EXP 68
21453: AND
21454: IFFALSE 21545
21456: GO 21458
21458: DISABLE
21459: LD_INT 0
21461: PPUSH
// begin enable ;
21462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21463: LD_ADDR_VAR 0 1
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_OWVAR 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 21
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 33
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: PPUSH
21505: CALL_OW 69
21509: ST_TO_ADDR
// if not tmp then
21510: LD_VAR 0 1
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21519: LD_VAR 0 1
21523: PUSH
21524: LD_INT 1
21526: PPUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 12
21536: ARRAY
21537: PPUSH
21538: LD_INT 1
21540: PPUSH
21541: CALL_OW 234
// end ;
21545: PPOPN 1
21547: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21548: LD_EXP 27
21552: IFFALSE 21560
21554: PUSH
21555: LD_EXP 69
21559: AND
21560: IFFALSE 21701
21562: GO 21564
21564: DISABLE
21565: LD_INT 0
21567: PPUSH
21568: PPUSH
21569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: LD_INT 22
21577: PUSH
21578: LD_OWVAR 2
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 25
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: ST_TO_ADDR
// if not tmp then
21606: LD_VAR 0 3
21610: NOT
21611: IFFALSE 21615
// exit ;
21613: GO 21701
// un := tmp [ rand ( 1 , tmp ) ] ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_VAR 0 3
21624: PUSH
21625: LD_INT 1
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: CALL_OW 12
21637: ARRAY
21638: ST_TO_ADDR
// if Crawls ( un ) then
21639: LD_VAR 0 2
21643: PPUSH
21644: CALL_OW 318
21648: IFFALSE 21659
// ComWalk ( un ) ;
21650: LD_VAR 0 2
21654: PPUSH
21655: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21659: LD_VAR 0 2
21663: PPUSH
21664: LD_INT 9
21666: PPUSH
21667: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21671: LD_INT 28
21673: PPUSH
21674: LD_OWVAR 2
21678: PPUSH
21679: LD_INT 2
21681: PPUSH
21682: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21686: LD_INT 29
21688: PPUSH
21689: LD_OWVAR 2
21693: PPUSH
21694: LD_INT 2
21696: PPUSH
21697: CALL_OW 322
// end ;
21701: PPOPN 3
21703: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21704: LD_EXP 27
21708: IFFALSE 21716
21710: PUSH
21711: LD_EXP 70
21715: AND
21716: IFFALSE 21827
21718: GO 21720
21720: DISABLE
21721: LD_INT 0
21723: PPUSH
21724: PPUSH
21725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21726: LD_ADDR_VAR 0 3
21730: PUSH
21731: LD_INT 22
21733: PUSH
21734: LD_OWVAR 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 25
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 69
21761: ST_TO_ADDR
// if not tmp then
21762: LD_VAR 0 3
21766: NOT
21767: IFFALSE 21771
// exit ;
21769: GO 21827
// un := tmp [ rand ( 1 , tmp ) ] ;
21771: LD_ADDR_VAR 0 2
21775: PUSH
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 1
21783: PPUSH
21784: LD_VAR 0 3
21788: PPUSH
21789: CALL_OW 12
21793: ARRAY
21794: ST_TO_ADDR
// if Crawls ( un ) then
21795: LD_VAR 0 2
21799: PPUSH
21800: CALL_OW 318
21804: IFFALSE 21815
// ComWalk ( un ) ;
21806: LD_VAR 0 2
21810: PPUSH
21811: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_INT 8
21822: PPUSH
21823: CALL_OW 336
// end ;
21827: PPOPN 3
21829: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21830: LD_EXP 27
21834: IFFALSE 21842
21836: PUSH
21837: LD_EXP 71
21841: AND
21842: IFFALSE 21986
21844: GO 21846
21846: DISABLE
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_OWVAR 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 21
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: LD_INT 34
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 34
21893: PUSH
21894: LD_INT 51
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 34
21903: PUSH
21904: LD_INT 32
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: ST_TO_ADDR
// if not tmp then
21927: LD_VAR 0 2
21931: NOT
21932: IFFALSE 21936
// exit ;
21934: GO 21986
// for i in tmp do
21936: LD_ADDR_VAR 0 1
21940: PUSH
21941: LD_VAR 0 2
21945: PUSH
21946: FOR_IN
21947: IFFALSE 21984
// if GetCargo ( i , mat_artifact ) = 0 then
21949: LD_VAR 0 1
21953: PPUSH
21954: LD_INT 4
21956: PPUSH
21957: CALL_OW 289
21961: PUSH
21962: LD_INT 0
21964: EQUAL
21965: IFFALSE 21982
// SetCargo ( i , mat_siberit , 100 ) ;
21967: LD_VAR 0 1
21971: PPUSH
21972: LD_INT 3
21974: PPUSH
21975: LD_INT 100
21977: PPUSH
21978: CALL_OW 290
21982: GO 21946
21984: POP
21985: POP
// end ;
21986: PPOPN 2
21988: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21989: LD_EXP 27
21993: IFFALSE 22001
21995: PUSH
21996: LD_EXP 72
22000: AND
22001: IFFALSE 22184
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
22009: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22010: LD_ADDR_VAR 0 2
22014: PUSH
22015: LD_INT 22
22017: PUSH
22018: LD_OWVAR 2
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PPUSH
22027: CALL_OW 69
22031: ST_TO_ADDR
// if not tmp then
22032: LD_VAR 0 2
22036: NOT
22037: IFFALSE 22041
// exit ;
22039: GO 22184
// for i := 1 to 2 do
22041: LD_ADDR_VAR 0 1
22045: PUSH
22046: DOUBLE
22047: LD_INT 1
22049: DEC
22050: ST_TO_ADDR
22051: LD_INT 2
22053: PUSH
22054: FOR_TO
22055: IFFALSE 22182
// begin uc_side := your_side ;
22057: LD_ADDR_OWVAR 20
22061: PUSH
22062: LD_OWVAR 2
22066: ST_TO_ADDR
// uc_nation := nation_american ;
22067: LD_ADDR_OWVAR 21
22071: PUSH
22072: LD_INT 1
22074: ST_TO_ADDR
// vc_chassis := us_morphling ;
22075: LD_ADDR_OWVAR 37
22079: PUSH
22080: LD_INT 5
22082: ST_TO_ADDR
// vc_engine := engine_siberite ;
22083: LD_ADDR_OWVAR 39
22087: PUSH
22088: LD_INT 3
22090: ST_TO_ADDR
// vc_control := control_computer ;
22091: LD_ADDR_OWVAR 38
22095: PUSH
22096: LD_INT 3
22098: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22099: LD_ADDR_OWVAR 40
22103: PUSH
22104: LD_INT 10
22106: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22107: LD_VAR 0 2
22111: PUSH
22112: LD_INT 1
22114: ARRAY
22115: PPUSH
22116: CALL_OW 310
22120: NOT
22121: IFFALSE 22168
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22123: CALL_OW 45
22127: PPUSH
22128: LD_VAR 0 2
22132: PUSH
22133: LD_INT 1
22135: ARRAY
22136: PPUSH
22137: CALL_OW 250
22141: PPUSH
22142: LD_VAR 0 2
22146: PUSH
22147: LD_INT 1
22149: ARRAY
22150: PPUSH
22151: CALL_OW 251
22155: PPUSH
22156: LD_INT 12
22158: PPUSH
22159: LD_INT 1
22161: PPUSH
22162: CALL_OW 50
22166: GO 22180
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22168: CALL_OW 45
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 51
// end ;
22180: GO 22054
22182: POP
22183: POP
// end ;
22184: PPOPN 2
22186: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22187: LD_EXP 27
22191: IFFALSE 22199
22193: PUSH
22194: LD_EXP 73
22198: AND
22199: IFFALSE 22421
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
22210: PPUSH
22211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22212: LD_ADDR_VAR 0 6
22216: PUSH
22217: LD_INT 22
22219: PUSH
22220: LD_OWVAR 2
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 21
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 3
22241: PUSH
22242: LD_INT 23
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: PPUSH
22261: CALL_OW 69
22265: ST_TO_ADDR
// if not tmp then
22266: LD_VAR 0 6
22270: NOT
22271: IFFALSE 22275
// exit ;
22273: GO 22421
// s1 := rand ( 1 , 4 ) ;
22275: LD_ADDR_VAR 0 2
22279: PUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_INT 4
22285: PPUSH
22286: CALL_OW 12
22290: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_VAR 0 6
22300: PUSH
22301: LD_INT 1
22303: ARRAY
22304: PPUSH
22305: LD_VAR 0 2
22309: PPUSH
22310: CALL_OW 259
22314: ST_TO_ADDR
// if s1 = 1 then
22315: LD_VAR 0 2
22319: PUSH
22320: LD_INT 1
22322: EQUAL
22323: IFFALSE 22343
// s2 := rand ( 2 , 4 ) else
22325: LD_ADDR_VAR 0 3
22329: PUSH
22330: LD_INT 2
22332: PPUSH
22333: LD_INT 4
22335: PPUSH
22336: CALL_OW 12
22340: ST_TO_ADDR
22341: GO 22351
// s2 := 1 ;
22343: LD_ADDR_VAR 0 3
22347: PUSH
22348: LD_INT 1
22350: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22351: LD_ADDR_VAR 0 5
22355: PUSH
22356: LD_VAR 0 6
22360: PUSH
22361: LD_INT 1
22363: ARRAY
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: CALL_OW 259
22374: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22375: LD_VAR 0 6
22379: PUSH
22380: LD_INT 1
22382: ARRAY
22383: PPUSH
22384: LD_VAR 0 2
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22398: LD_VAR 0 6
22402: PUSH
22403: LD_INT 1
22405: ARRAY
22406: PPUSH
22407: LD_VAR 0 3
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: CALL_OW 237
// end ;
22421: PPOPN 6
22423: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22424: LD_EXP 27
22428: IFFALSE 22436
22430: PUSH
22431: LD_EXP 74
22435: AND
22436: IFFALSE 22515
22438: GO 22440
22440: DISABLE
22441: LD_INT 0
22443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22444: LD_ADDR_VAR 0 1
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_OWVAR 2
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 3
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PPUSH
22475: CALL_OW 69
22479: ST_TO_ADDR
// if not tmp then
22480: LD_VAR 0 1
22484: NOT
22485: IFFALSE 22489
// exit ;
22487: GO 22515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22489: LD_VAR 0 1
22493: PUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL_OW 12
22506: ARRAY
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL_OW 234
// end ;
22515: PPOPN 1
22517: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22518: LD_EXP 27
22522: IFFALSE 22530
22524: PUSH
22525: LD_EXP 75
22529: AND
22530: IFFALSE 22642
22532: GO 22534
22534: DISABLE
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22539: LD_ADDR_VAR 0 2
22543: PUSH
22544: LD_INT 22
22546: PUSH
22547: LD_OWVAR 2
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 30
22561: PUSH
22562: LD_INT 27
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 30
22571: PUSH
22572: LD_INT 26
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 28
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 2
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22642
// for i in tmp do
22613: LD_ADDR_VAR 0 1
22617: PUSH
22618: LD_VAR 0 2
22622: PUSH
22623: FOR_IN
22624: IFFALSE 22640
// SetLives ( i , 1 ) ;
22626: LD_VAR 0 1
22630: PPUSH
22631: LD_INT 1
22633: PPUSH
22634: CALL_OW 234
22638: GO 22623
22640: POP
22641: POP
// end ;
22642: PPOPN 2
22644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22645: LD_EXP 27
22649: IFFALSE 22657
22651: PUSH
22652: LD_EXP 76
22656: AND
22657: IFFALSE 22944
22659: GO 22661
22661: DISABLE
22662: LD_INT 0
22664: PPUSH
22665: PPUSH
22666: PPUSH
// begin i := rand ( 1 , 7 ) ;
22667: LD_ADDR_VAR 0 1
22671: PUSH
22672: LD_INT 1
22674: PPUSH
22675: LD_INT 7
22677: PPUSH
22678: CALL_OW 12
22682: ST_TO_ADDR
// case i of 1 :
22683: LD_VAR 0 1
22687: PUSH
22688: LD_INT 1
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22706
22696: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22697: LD_STRING earthquake(getX(game), 0, 32)
22699: PPUSH
22700: CALL_OW 559
22704: GO 22944
22706: LD_INT 2
22708: DOUBLE
22709: EQUAL
22710: IFTRUE 22714
22712: GO 22728
22714: POP
// begin ToLua ( displayStucuk(); ) ;
22715: LD_STRING displayStucuk();
22717: PPUSH
22718: CALL_OW 559
// ResetFog ;
22722: CALL_OW 335
// end ; 3 :
22726: GO 22944
22728: LD_INT 3
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22736
22734: GO 22840
22736: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22737: LD_ADDR_VAR 0 2
22741: PUSH
22742: LD_INT 22
22744: PUSH
22745: LD_OWVAR 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 25
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: ST_TO_ADDR
// if not tmp then
22773: LD_VAR 0 2
22777: NOT
22778: IFFALSE 22782
// exit ;
22780: GO 22944
// un := tmp [ rand ( 1 , tmp ) ] ;
22782: LD_ADDR_VAR 0 3
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_VAR 0 2
22799: PPUSH
22800: CALL_OW 12
22804: ARRAY
22805: ST_TO_ADDR
// if Crawls ( un ) then
22806: LD_VAR 0 3
22810: PPUSH
22811: CALL_OW 318
22815: IFFALSE 22826
// ComWalk ( un ) ;
22817: LD_VAR 0 3
22821: PPUSH
22822: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22826: LD_VAR 0 3
22830: PPUSH
22831: LD_INT 8
22833: PPUSH
22834: CALL_OW 336
// end ; 4 :
22838: GO 22944
22840: LD_INT 4
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22922
22848: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22849: LD_ADDR_VAR 0 2
22853: PUSH
22854: LD_INT 22
22856: PUSH
22857: LD_OWVAR 2
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 29
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PPUSH
22880: CALL_OW 69
22884: ST_TO_ADDR
// if not tmp then
22885: LD_VAR 0 2
22889: NOT
22890: IFFALSE 22894
// exit ;
22892: GO 22944
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22894: LD_VAR 0 2
22898: PUSH
22899: LD_INT 1
22901: ARRAY
22902: PPUSH
22903: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22907: LD_VAR 0 2
22911: PUSH
22912: LD_INT 1
22914: ARRAY
22915: PPUSH
22916: CALL_OW 65
// end ; 5 .. 7 :
22920: GO 22944
22922: LD_INT 5
22924: DOUBLE
22925: GREATEREQUAL
22926: IFFALSE 22934
22928: LD_INT 7
22930: DOUBLE
22931: LESSEQUAL
22932: IFTRUE 22936
22934: GO 22943
22936: POP
// StreamSibBomb ; end ;
22937: CALL 19125 0 0
22941: GO 22944
22943: POP
// end ;
22944: PPOPN 3
22946: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22947: LD_EXP 27
22951: IFFALSE 22959
22953: PUSH
22954: LD_EXP 77
22958: AND
22959: IFFALSE 23115
22961: GO 22963
22963: DISABLE
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
22968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22969: LD_ADDR_VAR 0 2
22973: PUSH
22974: LD_INT 81
22976: PUSH
22977: LD_OWVAR 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 21
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PPUSH
23018: CALL_OW 69
23022: ST_TO_ADDR
// if not tmp then
23023: LD_VAR 0 2
23027: NOT
23028: IFFALSE 23032
// exit ;
23030: GO 23115
// p := 0 ;
23032: LD_ADDR_VAR 0 3
23036: PUSH
23037: LD_INT 0
23039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23040: LD_INT 35
23042: PPUSH
23043: CALL_OW 67
// p := p + 1 ;
23047: LD_ADDR_VAR 0 3
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: ST_TO_ADDR
// for i in tmp do
23061: LD_ADDR_VAR 0 1
23065: PUSH
23066: LD_VAR 0 2
23070: PUSH
23071: FOR_IN
23072: IFFALSE 23103
// if GetLives ( i ) < 1000 then
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 256
23083: PUSH
23084: LD_INT 1000
23086: LESS
23087: IFFALSE 23101
// SetLives ( i , 1000 ) ;
23089: LD_VAR 0 1
23093: PPUSH
23094: LD_INT 1000
23096: PPUSH
23097: CALL_OW 234
23101: GO 23071
23103: POP
23104: POP
// until p > 20 ;
23105: LD_VAR 0 3
23109: PUSH
23110: LD_INT 20
23112: GREATER
23113: IFFALSE 23040
// end ;
23115: PPOPN 3
23117: END
// every 0 0$1 trigger StreamModeActive and sTime do
23118: LD_EXP 27
23122: IFFALSE 23130
23124: PUSH
23125: LD_EXP 78
23129: AND
23130: IFFALSE 23165
23132: GO 23134
23134: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23135: LD_INT 28
23137: PPUSH
23138: LD_OWVAR 2
23142: PPUSH
23143: LD_INT 2
23145: PPUSH
23146: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23150: LD_INT 30
23152: PPUSH
23153: LD_OWVAR 2
23157: PPUSH
23158: LD_INT 2
23160: PPUSH
23161: CALL_OW 322
// end ;
23165: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23166: LD_EXP 27
23170: IFFALSE 23178
23172: PUSH
23173: LD_EXP 79
23177: AND
23178: IFFALSE 23299
23180: GO 23182
23182: DISABLE
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_INT 22
23194: PUSH
23195: LD_OWVAR 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 21
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 23
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 69
23240: ST_TO_ADDR
// if not tmp then
23241: LD_VAR 0 2
23245: NOT
23246: IFFALSE 23250
// exit ;
23248: GO 23299
// for i in tmp do
23250: LD_ADDR_VAR 0 1
23254: PUSH
23255: LD_VAR 0 2
23259: PUSH
23260: FOR_IN
23261: IFFALSE 23297
// begin if Crawls ( i ) then
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 318
23272: IFFALSE 23283
// ComWalk ( i ) ;
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 138
// SetClass ( i , 2 ) ;
23283: LD_VAR 0 1
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 336
// end ;
23295: GO 23260
23297: POP
23298: POP
// end ;
23299: PPOPN 2
23301: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23302: LD_EXP 27
23306: IFFALSE 23314
23308: PUSH
23309: LD_EXP 80
23313: AND
23314: IFFALSE 23604
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23324: LD_OWVAR 2
23328: PPUSH
23329: LD_INT 9
23331: PPUSH
23332: LD_INT 1
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23342: LD_INT 9
23344: PPUSH
23345: LD_OWVAR 2
23349: PPUSH
23350: CALL_OW 343
// uc_side := 9 ;
23354: LD_ADDR_OWVAR 20
23358: PUSH
23359: LD_INT 9
23361: ST_TO_ADDR
// uc_nation := 2 ;
23362: LD_ADDR_OWVAR 21
23366: PUSH
23367: LD_INT 2
23369: ST_TO_ADDR
// hc_name := Dark Warrior ;
23370: LD_ADDR_OWVAR 26
23374: PUSH
23375: LD_STRING Dark Warrior
23377: ST_TO_ADDR
// hc_gallery :=  ;
23378: LD_ADDR_OWVAR 33
23382: PUSH
23383: LD_STRING 
23385: ST_TO_ADDR
// hc_noskilllimit := true ;
23386: LD_ADDR_OWVAR 76
23390: PUSH
23391: LD_INT 1
23393: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23394: LD_ADDR_OWVAR 31
23398: PUSH
23399: LD_INT 30
23401: PUSH
23402: LD_INT 30
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 30
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: ST_TO_ADDR
// un := CreateHuman ;
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: CALL_OW 44
23426: ST_TO_ADDR
// hc_noskilllimit := false ;
23427: LD_ADDR_OWVAR 76
23431: PUSH
23432: LD_INT 0
23434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23435: LD_VAR 0 3
23439: PPUSH
23440: LD_INT 1
23442: PPUSH
23443: CALL_OW 51
// ToLua ( playRanger() ) ;
23447: LD_STRING playRanger()
23449: PPUSH
23450: CALL_OW 559
// p := 0 ;
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_INT 0
23461: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23462: LD_INT 35
23464: PPUSH
23465: CALL_OW 67
// p := p + 1 ;
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_VAR 0 2
23478: PUSH
23479: LD_INT 1
23481: PLUS
23482: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23483: LD_VAR 0 3
23487: PPUSH
23488: CALL_OW 256
23492: PUSH
23493: LD_INT 1000
23495: LESS
23496: IFFALSE 23510
// SetLives ( un , 1000 ) ;
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 1000
23505: PPUSH
23506: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23510: LD_VAR 0 3
23514: PPUSH
23515: LD_INT 81
23517: PUSH
23518: LD_OWVAR 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 91
23529: PUSH
23530: LD_VAR 0 3
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PPUSH
23547: CALL_OW 69
23551: PPUSH
23552: LD_VAR 0 3
23556: PPUSH
23557: CALL_OW 74
23561: PPUSH
23562: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23566: LD_VAR 0 2
23570: PUSH
23571: LD_INT 80
23573: GREATER
23574: IFTRUE 23587
23576: PUSH
23577: LD_VAR 0 3
23581: PPUSH
23582: CALL_OW 301
23586: OR
23587: IFFALSE 23462
// if un then
23589: LD_VAR 0 3
23593: IFFALSE 23604
// RemoveUnit ( un ) ;
23595: LD_VAR 0 3
23599: PPUSH
23600: CALL_OW 64
// end ;
23604: PPOPN 3
23606: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23607: LD_EXP 81
23611: IFFALSE 23727
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_INT 81
23628: PUSH
23629: LD_OWVAR 2
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 69
23656: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23657: LD_STRING playComputer()
23659: PPUSH
23660: CALL_OW 559
// if not tmp then
23664: LD_VAR 0 2
23668: NOT
23669: IFFALSE 23673
// exit ;
23671: GO 23727
// for i in tmp do
23673: LD_ADDR_VAR 0 1
23677: PUSH
23678: LD_VAR 0 2
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23725
// for j := 1 to 4 do
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_INT 4
23698: PUSH
23699: FOR_TO
23700: IFFALSE 23721
// SetSkill ( i , j , 10 ) ;
23702: LD_VAR 0 1
23706: PPUSH
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_INT 10
23714: PPUSH
23715: CALL_OW 237
23719: GO 23699
23721: POP
23722: POP
23723: GO 23683
23725: POP
23726: POP
// end ;
23727: PPOPN 3
23729: END
// every 0 0$1 trigger s30 do var i , tmp ;
23730: LD_EXP 82
23734: IFFALSE 23803
23736: GO 23738
23738: DISABLE
23739: LD_INT 0
23741: PPUSH
23742: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23743: LD_ADDR_VAR 0 2
23747: PUSH
23748: LD_INT 22
23750: PUSH
23751: LD_OWVAR 2
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PPUSH
23760: CALL_OW 69
23764: ST_TO_ADDR
// if not tmp then
23765: LD_VAR 0 2
23769: NOT
23770: IFFALSE 23774
// exit ;
23772: GO 23803
// for i in tmp do
23774: LD_ADDR_VAR 0 1
23778: PUSH
23779: LD_VAR 0 2
23783: PUSH
23784: FOR_IN
23785: IFFALSE 23801
// SetLives ( i , 300 ) ;
23787: LD_VAR 0 1
23791: PPUSH
23792: LD_INT 300
23794: PPUSH
23795: CALL_OW 234
23799: GO 23784
23801: POP
23802: POP
// end ;
23803: PPOPN 2
23805: END
// every 0 0$1 trigger s60 do var i , tmp ;
23806: LD_EXP 83
23810: IFFALSE 23879
23812: GO 23814
23814: DISABLE
23815: LD_INT 0
23817: PPUSH
23818: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23819: LD_ADDR_VAR 0 2
23823: PUSH
23824: LD_INT 22
23826: PUSH
23827: LD_OWVAR 2
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not tmp then
23841: LD_VAR 0 2
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23879
// for i in tmp do
23850: LD_ADDR_VAR 0 1
23854: PUSH
23855: LD_VAR 0 2
23859: PUSH
23860: FOR_IN
23861: IFFALSE 23877
// SetLives ( i , 600 ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_INT 600
23870: PPUSH
23871: CALL_OW 234
23875: GO 23860
23877: POP
23878: POP
// end ;
23879: PPOPN 2
23881: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23882: LD_INT 0
23884: PPUSH
// case cmd of 301 :
23885: LD_VAR 0 1
23889: PUSH
23890: LD_INT 301
23892: DOUBLE
23893: EQUAL
23894: IFTRUE 23898
23896: GO 23930
23898: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23899: LD_VAR 0 6
23903: PPUSH
23904: LD_VAR 0 7
23908: PPUSH
23909: LD_VAR 0 8
23913: PPUSH
23914: LD_VAR 0 4
23918: PPUSH
23919: LD_VAR 0 5
23923: PPUSH
23924: CALL 25143 0 5
23928: GO 24051
23930: LD_INT 302
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23975
23938: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23939: LD_VAR 0 6
23943: PPUSH
23944: LD_VAR 0 7
23948: PPUSH
23949: LD_VAR 0 8
23953: PPUSH
23954: LD_VAR 0 9
23958: PPUSH
23959: LD_VAR 0 4
23963: PPUSH
23964: LD_VAR 0 5
23968: PPUSH
23969: CALL 25234 0 6
23973: GO 24051
23975: LD_INT 303
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 24020
23983: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23984: LD_VAR 0 6
23988: PPUSH
23989: LD_VAR 0 7
23993: PPUSH
23994: LD_VAR 0 8
23998: PPUSH
23999: LD_VAR 0 9
24003: PPUSH
24004: LD_VAR 0 4
24008: PPUSH
24009: LD_VAR 0 5
24013: PPUSH
24014: CALL 24056 0 6
24018: GO 24051
24020: LD_INT 304
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24050
24028: POP
// hHackTeleport ( unit , x , y ) ; end ;
24029: LD_VAR 0 2
24033: PPUSH
24034: LD_VAR 0 4
24038: PPUSH
24039: LD_VAR 0 5
24043: PPUSH
24044: CALL 25827 0 3
24048: GO 24051
24050: POP
// end ;
24051: LD_VAR 0 12
24055: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24056: LD_INT 0
24058: PPUSH
24059: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24060: LD_VAR 0 1
24064: PUSH
24065: LD_INT 1
24067: LESS
24068: IFTRUE 24080
24070: PUSH
24071: LD_VAR 0 1
24075: PUSH
24076: LD_INT 3
24078: GREATER
24079: OR
24080: IFTRUE 24098
24082: PUSH
24083: LD_VAR 0 5
24087: PPUSH
24088: LD_VAR 0 6
24092: PPUSH
24093: CALL_OW 428
24097: OR
24098: IFFALSE 24102
// exit ;
24100: GO 24830
// uc_side := your_side ;
24102: LD_ADDR_OWVAR 20
24106: PUSH
24107: LD_OWVAR 2
24111: ST_TO_ADDR
// uc_nation := nation ;
24112: LD_ADDR_OWVAR 21
24116: PUSH
24117: LD_VAR 0 1
24121: ST_TO_ADDR
// bc_level = 1 ;
24122: LD_ADDR_OWVAR 43
24126: PUSH
24127: LD_INT 1
24129: ST_TO_ADDR
// case btype of 1 :
24130: LD_VAR 0 2
24134: PUSH
24135: LD_INT 1
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24154
24143: POP
// bc_type := b_depot ; 2 :
24144: LD_ADDR_OWVAR 42
24148: PUSH
24149: LD_INT 0
24151: ST_TO_ADDR
24152: GO 24774
24154: LD_INT 2
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24173
24162: POP
// bc_type := b_warehouse ; 3 :
24163: LD_ADDR_OWVAR 42
24167: PUSH
24168: LD_INT 1
24170: ST_TO_ADDR
24171: GO 24774
24173: LD_INT 3
24175: DOUBLE
24176: EQUAL
24177: IFTRUE 24181
24179: GO 24192
24181: POP
// bc_type := b_lab ; 4 .. 9 :
24182: LD_ADDR_OWVAR 42
24186: PUSH
24187: LD_INT 6
24189: ST_TO_ADDR
24190: GO 24774
24192: LD_INT 4
24194: DOUBLE
24195: GREATEREQUAL
24196: IFFALSE 24204
24198: LD_INT 9
24200: DOUBLE
24201: LESSEQUAL
24202: IFTRUE 24206
24204: GO 24266
24206: POP
// begin bc_type := b_lab_half ;
24207: LD_ADDR_OWVAR 42
24211: PUSH
24212: LD_INT 7
24214: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24215: LD_ADDR_OWVAR 44
24219: PUSH
24220: LD_INT 10
24222: PUSH
24223: LD_INT 11
24225: PUSH
24226: LD_INT 12
24228: PUSH
24229: LD_INT 15
24231: PUSH
24232: LD_INT 14
24234: PUSH
24235: LD_INT 13
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: PUSH
24246: LD_VAR 0 2
24250: PUSH
24251: LD_INT 3
24253: MINUS
24254: ARRAY
24255: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24256: LD_ADDR_OWVAR 45
24260: PUSH
24261: LD_INT 9
24263: ST_TO_ADDR
// end ; 10 .. 13 :
24264: GO 24774
24266: LD_INT 10
24268: DOUBLE
24269: GREATEREQUAL
24270: IFFALSE 24278
24272: LD_INT 13
24274: DOUBLE
24275: LESSEQUAL
24276: IFTRUE 24280
24278: GO 24357
24280: POP
// begin bc_type := b_lab_full ;
24281: LD_ADDR_OWVAR 42
24285: PUSH
24286: LD_INT 8
24288: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24289: LD_ADDR_OWVAR 44
24293: PUSH
24294: LD_INT 10
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 14
24302: PUSH
24303: LD_INT 13
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: PUSH
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 9
24319: MINUS
24320: ARRAY
24321: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24322: LD_ADDR_OWVAR 45
24326: PUSH
24327: LD_INT 11
24329: PUSH
24330: LD_INT 15
24332: PUSH
24333: LD_INT 12
24335: PUSH
24336: LD_INT 15
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: PUSH
24345: LD_VAR 0 2
24349: PUSH
24350: LD_INT 9
24352: MINUS
24353: ARRAY
24354: ST_TO_ADDR
// end ; 14 :
24355: GO 24774
24357: LD_INT 14
24359: DOUBLE
24360: EQUAL
24361: IFTRUE 24365
24363: GO 24376
24365: POP
// bc_type := b_workshop ; 15 :
24366: LD_ADDR_OWVAR 42
24370: PUSH
24371: LD_INT 2
24373: ST_TO_ADDR
24374: GO 24774
24376: LD_INT 15
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24395
24384: POP
// bc_type := b_factory ; 16 :
24385: LD_ADDR_OWVAR 42
24389: PUSH
24390: LD_INT 3
24392: ST_TO_ADDR
24393: GO 24774
24395: LD_INT 16
24397: DOUBLE
24398: EQUAL
24399: IFTRUE 24403
24401: GO 24414
24403: POP
// bc_type := b_ext_gun ; 17 :
24404: LD_ADDR_OWVAR 42
24408: PUSH
24409: LD_INT 17
24411: ST_TO_ADDR
24412: GO 24774
24414: LD_INT 17
24416: DOUBLE
24417: EQUAL
24418: IFTRUE 24422
24420: GO 24450
24422: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24423: LD_ADDR_OWVAR 42
24427: PUSH
24428: LD_INT 19
24430: PUSH
24431: LD_INT 23
24433: PUSH
24434: LD_INT 19
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_VAR 0 1
24446: ARRAY
24447: ST_TO_ADDR
24448: GO 24774
24450: LD_INT 18
24452: DOUBLE
24453: EQUAL
24454: IFTRUE 24458
24456: GO 24469
24458: POP
// bc_type := b_ext_radar ; 19 :
24459: LD_ADDR_OWVAR 42
24463: PUSH
24464: LD_INT 20
24466: ST_TO_ADDR
24467: GO 24774
24469: LD_INT 19
24471: DOUBLE
24472: EQUAL
24473: IFTRUE 24477
24475: GO 24488
24477: POP
// bc_type := b_ext_radio ; 20 :
24478: LD_ADDR_OWVAR 42
24482: PUSH
24483: LD_INT 22
24485: ST_TO_ADDR
24486: GO 24774
24488: LD_INT 20
24490: DOUBLE
24491: EQUAL
24492: IFTRUE 24496
24494: GO 24507
24496: POP
// bc_type := b_ext_siberium ; 21 :
24497: LD_ADDR_OWVAR 42
24501: PUSH
24502: LD_INT 21
24504: ST_TO_ADDR
24505: GO 24774
24507: LD_INT 21
24509: DOUBLE
24510: EQUAL
24511: IFTRUE 24515
24513: GO 24526
24515: POP
// bc_type := b_ext_computer ; 22 :
24516: LD_ADDR_OWVAR 42
24520: PUSH
24521: LD_INT 24
24523: ST_TO_ADDR
24524: GO 24774
24526: LD_INT 22
24528: DOUBLE
24529: EQUAL
24530: IFTRUE 24534
24532: GO 24545
24534: POP
// bc_type := b_ext_track ; 23 :
24535: LD_ADDR_OWVAR 42
24539: PUSH
24540: LD_INT 16
24542: ST_TO_ADDR
24543: GO 24774
24545: LD_INT 23
24547: DOUBLE
24548: EQUAL
24549: IFTRUE 24553
24551: GO 24564
24553: POP
// bc_type := b_ext_laser ; 24 :
24554: LD_ADDR_OWVAR 42
24558: PUSH
24559: LD_INT 25
24561: ST_TO_ADDR
24562: GO 24774
24564: LD_INT 24
24566: DOUBLE
24567: EQUAL
24568: IFTRUE 24572
24570: GO 24583
24572: POP
// bc_type := b_control_tower ; 25 :
24573: LD_ADDR_OWVAR 42
24577: PUSH
24578: LD_INT 36
24580: ST_TO_ADDR
24581: GO 24774
24583: LD_INT 25
24585: DOUBLE
24586: EQUAL
24587: IFTRUE 24591
24589: GO 24602
24591: POP
// bc_type := b_breastwork ; 26 :
24592: LD_ADDR_OWVAR 42
24596: PUSH
24597: LD_INT 31
24599: ST_TO_ADDR
24600: GO 24774
24602: LD_INT 26
24604: DOUBLE
24605: EQUAL
24606: IFTRUE 24610
24608: GO 24621
24610: POP
// bc_type := b_bunker ; 27 :
24611: LD_ADDR_OWVAR 42
24615: PUSH
24616: LD_INT 32
24618: ST_TO_ADDR
24619: GO 24774
24621: LD_INT 27
24623: DOUBLE
24624: EQUAL
24625: IFTRUE 24629
24627: GO 24640
24629: POP
// bc_type := b_turret ; 28 :
24630: LD_ADDR_OWVAR 42
24634: PUSH
24635: LD_INT 33
24637: ST_TO_ADDR
24638: GO 24774
24640: LD_INT 28
24642: DOUBLE
24643: EQUAL
24644: IFTRUE 24648
24646: GO 24659
24648: POP
// bc_type := b_armoury ; 29 :
24649: LD_ADDR_OWVAR 42
24653: PUSH
24654: LD_INT 4
24656: ST_TO_ADDR
24657: GO 24774
24659: LD_INT 29
24661: DOUBLE
24662: EQUAL
24663: IFTRUE 24667
24665: GO 24678
24667: POP
// bc_type := b_barracks ; 30 :
24668: LD_ADDR_OWVAR 42
24672: PUSH
24673: LD_INT 5
24675: ST_TO_ADDR
24676: GO 24774
24678: LD_INT 30
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24686
24684: GO 24697
24686: POP
// bc_type := b_solar_power ; 31 :
24687: LD_ADDR_OWVAR 42
24691: PUSH
24692: LD_INT 27
24694: ST_TO_ADDR
24695: GO 24774
24697: LD_INT 31
24699: DOUBLE
24700: EQUAL
24701: IFTRUE 24705
24703: GO 24716
24705: POP
// bc_type := b_oil_power ; 32 :
24706: LD_ADDR_OWVAR 42
24710: PUSH
24711: LD_INT 26
24713: ST_TO_ADDR
24714: GO 24774
24716: LD_INT 32
24718: DOUBLE
24719: EQUAL
24720: IFTRUE 24724
24722: GO 24735
24724: POP
// bc_type := b_siberite_power ; 33 :
24725: LD_ADDR_OWVAR 42
24729: PUSH
24730: LD_INT 28
24732: ST_TO_ADDR
24733: GO 24774
24735: LD_INT 33
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24754
24743: POP
// bc_type := b_oil_mine ; 34 :
24744: LD_ADDR_OWVAR 42
24748: PUSH
24749: LD_INT 29
24751: ST_TO_ADDR
24752: GO 24774
24754: LD_INT 34
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24773
24762: POP
// bc_type := b_siberite_mine ; end ;
24763: LD_ADDR_OWVAR 42
24767: PUSH
24768: LD_INT 30
24770: ST_TO_ADDR
24771: GO 24774
24773: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24774: LD_ADDR_VAR 0 8
24778: PUSH
24779: LD_VAR 0 5
24783: PPUSH
24784: LD_VAR 0 6
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: CALL_OW 47
24798: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24799: LD_OWVAR 42
24803: PUSH
24804: LD_INT 32
24806: PUSH
24807: LD_INT 33
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: IN
24814: IFFALSE 24830
// PlaceWeaponTurret ( b , weapon ) ;
24816: LD_VAR 0 8
24820: PPUSH
24821: LD_VAR 0 4
24825: PPUSH
24826: CALL_OW 431
// end ;
24830: LD_VAR 0 7
24834: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24835: LD_INT 0
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24841: LD_ADDR_VAR 0 4
24845: PUSH
24846: LD_INT 22
24848: PUSH
24849: LD_OWVAR 2
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 30
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 30
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: ST_TO_ADDR
// if not tmp then
24895: LD_VAR 0 4
24899: NOT
24900: IFFALSE 24904
// exit ;
24902: GO 24963
// for i in tmp do
24904: LD_ADDR_VAR 0 2
24908: PUSH
24909: LD_VAR 0 4
24913: PUSH
24914: FOR_IN
24915: IFFALSE 24961
// for j = 1 to 3 do
24917: LD_ADDR_VAR 0 3
24921: PUSH
24922: DOUBLE
24923: LD_INT 1
24925: DEC
24926: ST_TO_ADDR
24927: LD_INT 3
24929: PUSH
24930: FOR_TO
24931: IFFALSE 24957
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24933: LD_VAR 0 2
24937: PPUSH
24938: CALL_OW 274
24942: PPUSH
24943: LD_VAR 0 3
24947: PPUSH
24948: LD_INT 99999
24950: PPUSH
24951: CALL_OW 277
24955: GO 24930
24957: POP
24958: POP
24959: GO 24914
24961: POP
24962: POP
// end ;
24963: LD_VAR 0 1
24967: RET
// export function hHackSetLevel10 ; var i , j ; begin
24968: LD_INT 0
24970: PPUSH
24971: PPUSH
24972: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 21
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PPUSH
24988: CALL_OW 69
24992: PUSH
24993: FOR_IN
24994: IFFALSE 25046
// if IsSelected ( i ) then
24996: LD_VAR 0 2
25000: PPUSH
25001: CALL_OW 306
25005: IFFALSE 25044
// begin for j := 1 to 4 do
25007: LD_ADDR_VAR 0 3
25011: PUSH
25012: DOUBLE
25013: LD_INT 1
25015: DEC
25016: ST_TO_ADDR
25017: LD_INT 4
25019: PUSH
25020: FOR_TO
25021: IFFALSE 25042
// SetSkill ( i , j , 10 ) ;
25023: LD_VAR 0 2
25027: PPUSH
25028: LD_VAR 0 3
25032: PPUSH
25033: LD_INT 10
25035: PPUSH
25036: CALL_OW 237
25040: GO 25020
25042: POP
25043: POP
// end ;
25044: GO 24993
25046: POP
25047: POP
// end ;
25048: LD_VAR 0 1
25052: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25053: LD_INT 0
25055: PPUSH
25056: PPUSH
25057: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25058: LD_ADDR_VAR 0 2
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: LD_OWVAR 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 21
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PPUSH
25089: CALL_OW 69
25093: PUSH
25094: FOR_IN
25095: IFFALSE 25136
// begin for j := 1 to 4 do
25097: LD_ADDR_VAR 0 3
25101: PUSH
25102: DOUBLE
25103: LD_INT 1
25105: DEC
25106: ST_TO_ADDR
25107: LD_INT 4
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25132
// SetSkill ( i , j , 10 ) ;
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_VAR 0 3
25122: PPUSH
25123: LD_INT 10
25125: PPUSH
25126: CALL_OW 237
25130: GO 25110
25132: POP
25133: POP
// end ;
25134: GO 25094
25136: POP
25137: POP
// end ;
25138: LD_VAR 0 1
25142: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25143: LD_INT 0
25145: PPUSH
// uc_side := your_side ;
25146: LD_ADDR_OWVAR 20
25150: PUSH
25151: LD_OWVAR 2
25155: ST_TO_ADDR
// uc_nation := nation ;
25156: LD_ADDR_OWVAR 21
25160: PUSH
25161: LD_VAR 0 1
25165: ST_TO_ADDR
// InitHc ;
25166: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25170: LD_INT 0
25172: PPUSH
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_VAR 0 3
25182: PPUSH
25183: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25187: LD_VAR 0 4
25191: PPUSH
25192: LD_VAR 0 5
25196: PPUSH
25197: CALL_OW 428
25201: PUSH
25202: LD_INT 0
25204: EQUAL
25205: IFFALSE 25229
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25207: CALL_OW 44
25211: PPUSH
25212: LD_VAR 0 4
25216: PPUSH
25217: LD_VAR 0 5
25221: PPUSH
25222: LD_INT 1
25224: PPUSH
25225: CALL_OW 48
// end ;
25229: LD_VAR 0 6
25233: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25234: LD_INT 0
25236: PPUSH
25237: PPUSH
// uc_side := your_side ;
25238: LD_ADDR_OWVAR 20
25242: PUSH
25243: LD_OWVAR 2
25247: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25248: LD_VAR 0 1
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 3
25261: PUSH
25262: LD_INT 4
25264: PUSH
25265: LD_INT 5
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: IN
25275: IFFALSE 25287
// uc_nation := nation_american else
25277: LD_ADDR_OWVAR 21
25281: PUSH
25282: LD_INT 1
25284: ST_TO_ADDR
25285: GO 25330
// if chassis in [ 11 , 12 , 13 , 14 ] then
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 11
25294: PUSH
25295: LD_INT 12
25297: PUSH
25298: LD_INT 13
25300: PUSH
25301: LD_INT 14
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: IN
25310: IFFALSE 25322
// uc_nation := nation_arabian else
25312: LD_ADDR_OWVAR 21
25316: PUSH
25317: LD_INT 2
25319: ST_TO_ADDR
25320: GO 25330
// uc_nation := nation_russian ;
25322: LD_ADDR_OWVAR 21
25326: PUSH
25327: LD_INT 3
25329: ST_TO_ADDR
// vc_chassis := chassis ;
25330: LD_ADDR_OWVAR 37
25334: PUSH
25335: LD_VAR 0 1
25339: ST_TO_ADDR
// vc_engine := engine ;
25340: LD_ADDR_OWVAR 39
25344: PUSH
25345: LD_VAR 0 2
25349: ST_TO_ADDR
// vc_control := control ;
25350: LD_ADDR_OWVAR 38
25354: PUSH
25355: LD_VAR 0 3
25359: ST_TO_ADDR
// vc_weapon := weapon ;
25360: LD_ADDR_OWVAR 40
25364: PUSH
25365: LD_VAR 0 4
25369: ST_TO_ADDR
// un := CreateVehicle ;
25370: LD_ADDR_VAR 0 8
25374: PUSH
25375: CALL_OW 45
25379: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25380: LD_VAR 0 8
25384: PPUSH
25385: LD_INT 0
25387: PPUSH
25388: LD_INT 5
25390: PPUSH
25391: CALL_OW 12
25395: PPUSH
25396: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25400: LD_VAR 0 8
25404: PPUSH
25405: LD_VAR 0 5
25409: PPUSH
25410: LD_VAR 0 6
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: CALL_OW 48
// end ;
25422: LD_VAR 0 7
25426: RET
// export hInvincible ; every 1 do
25427: GO 25429
25429: DISABLE
// hInvincible := [ ] ;
25430: LD_ADDR_EXP 84
25434: PUSH
25435: EMPTY
25436: ST_TO_ADDR
25437: END
// every 10 do var i ;
25438: GO 25440
25440: DISABLE
25441: LD_INT 0
25443: PPUSH
// begin enable ;
25444: ENABLE
// if not hInvincible then
25445: LD_EXP 84
25449: NOT
25450: IFFALSE 25454
// exit ;
25452: GO 25498
// for i in hInvincible do
25454: LD_ADDR_VAR 0 1
25458: PUSH
25459: LD_EXP 84
25463: PUSH
25464: FOR_IN
25465: IFFALSE 25496
// if GetLives ( i ) < 1000 then
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 256
25476: PUSH
25477: LD_INT 1000
25479: LESS
25480: IFFALSE 25494
// SetLives ( i , 1000 ) ;
25482: LD_VAR 0 1
25486: PPUSH
25487: LD_INT 1000
25489: PPUSH
25490: CALL_OW 234
25494: GO 25464
25496: POP
25497: POP
// end ;
25498: PPOPN 1
25500: END
// export function hHackInvincible ; var i ; begin
25501: LD_INT 0
25503: PPUSH
25504: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25505: LD_ADDR_VAR 0 2
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 21
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PPUSH
25538: CALL_OW 69
25542: PUSH
25543: FOR_IN
25544: IFFALSE 25605
// if IsSelected ( i ) then
25546: LD_VAR 0 2
25550: PPUSH
25551: CALL_OW 306
25555: IFFALSE 25603
// begin if i in hInvincible then
25557: LD_VAR 0 2
25561: PUSH
25562: LD_EXP 84
25566: IN
25567: IFFALSE 25587
// hInvincible := hInvincible diff i else
25569: LD_ADDR_EXP 84
25573: PUSH
25574: LD_EXP 84
25578: PUSH
25579: LD_VAR 0 2
25583: DIFF
25584: ST_TO_ADDR
25585: GO 25603
// hInvincible := hInvincible union i ;
25587: LD_ADDR_EXP 84
25591: PUSH
25592: LD_EXP 84
25596: PUSH
25597: LD_VAR 0 2
25601: UNION
25602: ST_TO_ADDR
// end ;
25603: GO 25543
25605: POP
25606: POP
// end ;
25607: LD_VAR 0 1
25611: RET
// export function hHackInvisible ; var i , j ; begin
25612: LD_INT 0
25614: PPUSH
25615: PPUSH
25616: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25617: LD_ADDR_VAR 0 2
25621: PUSH
25622: LD_INT 21
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 69
25636: PUSH
25637: FOR_IN
25638: IFFALSE 25662
// if IsSelected ( i ) then
25640: LD_VAR 0 2
25644: PPUSH
25645: CALL_OW 306
25649: IFFALSE 25660
// ComForceInvisible ( i ) ;
25651: LD_VAR 0 2
25655: PPUSH
25656: CALL_OW 496
25660: GO 25637
25662: POP
25663: POP
// end ;
25664: LD_VAR 0 1
25668: RET
// export function hHackChangeYourSide ; begin
25669: LD_INT 0
25671: PPUSH
// if your_side = 8 then
25672: LD_OWVAR 2
25676: PUSH
25677: LD_INT 8
25679: EQUAL
25680: IFFALSE 25692
// your_side := 0 else
25682: LD_ADDR_OWVAR 2
25686: PUSH
25687: LD_INT 0
25689: ST_TO_ADDR
25690: GO 25706
// your_side := your_side + 1 ;
25692: LD_ADDR_OWVAR 2
25696: PUSH
25697: LD_OWVAR 2
25701: PUSH
25702: LD_INT 1
25704: PLUS
25705: ST_TO_ADDR
// end ;
25706: LD_VAR 0 1
25710: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
// for i in all_units do
25716: LD_ADDR_VAR 0 2
25720: PUSH
25721: LD_OWVAR 3
25725: PUSH
25726: FOR_IN
25727: IFFALSE 25805
// if IsSelected ( i ) then
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 306
25738: IFFALSE 25803
// begin j := GetSide ( i ) ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_VAR 0 2
25749: PPUSH
25750: CALL_OW 255
25754: ST_TO_ADDR
// if j = 8 then
25755: LD_VAR 0 3
25759: PUSH
25760: LD_INT 8
25762: EQUAL
25763: IFFALSE 25775
// j := 0 else
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 0
25772: ST_TO_ADDR
25773: GO 25789
// j := j + 1 ;
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_VAR 0 3
25784: PUSH
25785: LD_INT 1
25787: PLUS
25788: ST_TO_ADDR
// SetSide ( i , j ) ;
25789: LD_VAR 0 2
25793: PPUSH
25794: LD_VAR 0 3
25798: PPUSH
25799: CALL_OW 235
// end ;
25803: GO 25726
25805: POP
25806: POP
// end ;
25807: LD_VAR 0 1
25811: RET
// export function hHackFog ; begin
25812: LD_INT 0
25814: PPUSH
// FogOff ( true ) ;
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 344
// end ;
25822: LD_VAR 0 1
25826: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25827: LD_INT 0
25829: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: LD_INT 1
25850: PPUSH
25851: CALL_OW 483
// CenterOnXY ( x , y ) ;
25855: LD_VAR 0 2
25859: PPUSH
25860: LD_VAR 0 3
25864: PPUSH
25865: CALL_OW 84
// end ;
25869: LD_VAR 0 4
25873: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25874: LD_INT 0
25876: PPUSH
25877: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25878: LD_VAR 0 1
25882: NOT
25883: IFTRUE 25902
25885: PUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 3
25895: PPUSH
25896: CALL_OW 488
25900: NOT
25901: OR
25902: IFTRUE 25937
25904: PUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 266
25914: PUSH
25915: LD_INT 3
25917: NONEQUAL
25918: IFFALSE 25936
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 247
25930: PUSH
25931: LD_INT 1
25933: EQUAL
25934: NOT
25935: AND
25936: OR
25937: IFFALSE 25941
// exit ;
25939: GO 26223
// if GetType ( factory ) = unit_human then
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 247
25950: PUSH
25951: LD_INT 1
25953: EQUAL
25954: IFFALSE 25971
// factory := IsInUnit ( factory ) ;
25956: LD_ADDR_VAR 0 1
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 310
25970: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 266
25980: PUSH
25981: LD_INT 3
25983: NONEQUAL
25984: IFFALSE 25988
// exit ;
25986: GO 26223
// for i := 1 to Count ( factoryWaypoints ) do
25988: LD_ADDR_VAR 0 5
25992: PUSH
25993: DOUBLE
25994: LD_INT 1
25996: DEC
25997: ST_TO_ADDR
25998: LD_EXP 85
26002: PPUSH
26003: CALL 35756 0 1
26007: PUSH
26008: FOR_TO
26009: IFFALSE 26171
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26011: LD_VAR 0 2
26015: PPUSH
26016: LD_VAR 0 3
26020: PPUSH
26021: CALL_OW 428
26025: PUSH
26026: LD_EXP 85
26030: PUSH
26031: LD_VAR 0 5
26035: ARRAY
26036: PUSH
26037: LD_INT 2
26039: ARRAY
26040: EQUAL
26041: IFFALSE 26073
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26043: LD_ADDR_EXP 85
26047: PUSH
26048: LD_EXP 85
26052: PPUSH
26053: LD_VAR 0 5
26057: PPUSH
26058: CALL_OW 3
26062: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26063: CALL 26228 0 0
// exit ;
26067: POP
26068: POP
26069: GO 26223
// end else
26071: GO 26169
// if factory = factoryWaypoints [ i ] [ 2 ] then
26073: LD_VAR 0 1
26077: PUSH
26078: LD_EXP 85
26082: PUSH
26083: LD_VAR 0 5
26087: ARRAY
26088: PUSH
26089: LD_INT 2
26091: ARRAY
26092: EQUAL
26093: IFFALSE 26169
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26095: LD_ADDR_EXP 85
26099: PUSH
26100: LD_EXP 85
26104: PPUSH
26105: LD_VAR 0 5
26109: PPUSH
26110: CALL_OW 3
26114: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26115: LD_ADDR_EXP 85
26119: PUSH
26120: LD_EXP 85
26124: PPUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 255
26134: PUSH
26135: LD_VAR 0 1
26139: PUSH
26140: LD_VAR 0 2
26144: PUSH
26145: LD_VAR 0 3
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: PPUSH
26156: CALL 71688 0 2
26160: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26161: CALL 26228 0 0
// exit ;
26165: POP
26166: POP
26167: GO 26223
// end ; end ;
26169: GO 26008
26171: POP
26172: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26173: LD_ADDR_EXP 85
26177: PUSH
26178: LD_EXP 85
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 255
26192: PUSH
26193: LD_VAR 0 1
26197: PUSH
26198: LD_VAR 0 2
26202: PUSH
26203: LD_VAR 0 3
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL 71688 0 2
26218: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26219: CALL 26228 0 0
// end ;
26223: LD_VAR 0 4
26227: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26228: LD_INT 0
26230: PPUSH
26231: PPUSH
26232: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26233: LD_STRING resetFactoryWaypoint();
26235: PPUSH
26236: CALL_OW 559
// if factoryWaypoints then
26240: LD_EXP 85
26244: IFFALSE 26365
// begin list := factoryWaypoints ;
26246: LD_ADDR_VAR 0 3
26250: PUSH
26251: LD_EXP 85
26255: ST_TO_ADDR
// for i := 1 to list do
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: DOUBLE
26262: LD_INT 1
26264: DEC
26265: ST_TO_ADDR
26266: LD_VAR 0 3
26270: PUSH
26271: FOR_TO
26272: IFFALSE 26363
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26274: LD_STRING setFactoryWaypointXY(
26276: PUSH
26277: LD_VAR 0 3
26281: PUSH
26282: LD_VAR 0 2
26286: ARRAY
26287: PUSH
26288: LD_INT 1
26290: ARRAY
26291: STR
26292: PUSH
26293: LD_STRING ,
26295: STR
26296: PUSH
26297: LD_VAR 0 3
26301: PUSH
26302: LD_VAR 0 2
26306: ARRAY
26307: PUSH
26308: LD_INT 2
26310: ARRAY
26311: STR
26312: PUSH
26313: LD_STRING ,
26315: STR
26316: PUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_VAR 0 2
26326: ARRAY
26327: PUSH
26328: LD_INT 3
26330: ARRAY
26331: STR
26332: PUSH
26333: LD_STRING ,
26335: STR
26336: PUSH
26337: LD_VAR 0 3
26341: PUSH
26342: LD_VAR 0 2
26346: ARRAY
26347: PUSH
26348: LD_INT 4
26350: ARRAY
26351: STR
26352: PUSH
26353: LD_STRING )
26355: STR
26356: PPUSH
26357: CALL_OW 559
26361: GO 26271
26363: POP
26364: POP
// end ; end ;
26365: LD_VAR 0 1
26369: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26370: LD_INT 0
26372: PPUSH
// if HexInfo ( x , y ) = warehouse then
26373: LD_VAR 0 2
26377: PPUSH
26378: LD_VAR 0 3
26382: PPUSH
26383: CALL_OW 428
26387: PUSH
26388: LD_VAR 0 1
26392: EQUAL
26393: IFFALSE 26420
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26395: LD_ADDR_EXP 87
26399: PUSH
26400: LD_EXP 87
26404: PPUSH
26405: LD_VAR 0 1
26409: PPUSH
26410: LD_INT 0
26412: PPUSH
26413: CALL_OW 1
26417: ST_TO_ADDR
26418: GO 26471
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26420: LD_ADDR_EXP 87
26424: PUSH
26425: LD_EXP 87
26429: PPUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_VAR 0 1
26439: PPUSH
26440: CALL_OW 255
26444: PUSH
26445: LD_VAR 0 1
26449: PUSH
26450: LD_VAR 0 2
26454: PUSH
26455: LD_VAR 0 3
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26471: CALL 26480 0 0
// end ;
26475: LD_VAR 0 4
26479: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26480: LD_INT 0
26482: PPUSH
26483: PPUSH
26484: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26485: LD_STRING resetWarehouseGatheringPoints();
26487: PPUSH
26488: CALL_OW 559
// if warehouseGatheringPoints then
26492: LD_EXP 87
26496: IFFALSE 26622
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_EXP 87
26507: PPUSH
26508: CALL 75622 0 1
26512: ST_TO_ADDR
// for i := 1 to list do
26513: LD_ADDR_VAR 0 2
26517: PUSH
26518: DOUBLE
26519: LD_INT 1
26521: DEC
26522: ST_TO_ADDR
26523: LD_VAR 0 3
26527: PUSH
26528: FOR_TO
26529: IFFALSE 26620
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26531: LD_STRING setWarehouseGatheringPointXY(
26533: PUSH
26534: LD_VAR 0 3
26538: PUSH
26539: LD_VAR 0 2
26543: ARRAY
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: STR
26549: PUSH
26550: LD_STRING ,
26552: STR
26553: PUSH
26554: LD_VAR 0 3
26558: PUSH
26559: LD_VAR 0 2
26563: ARRAY
26564: PUSH
26565: LD_INT 2
26567: ARRAY
26568: STR
26569: PUSH
26570: LD_STRING ,
26572: STR
26573: PUSH
26574: LD_VAR 0 3
26578: PUSH
26579: LD_VAR 0 2
26583: ARRAY
26584: PUSH
26585: LD_INT 3
26587: ARRAY
26588: STR
26589: PUSH
26590: LD_STRING ,
26592: STR
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 2
26603: ARRAY
26604: PUSH
26605: LD_INT 4
26607: ARRAY
26608: STR
26609: PUSH
26610: LD_STRING )
26612: STR
26613: PPUSH
26614: CALL_OW 559
26618: GO 26528
26620: POP
26621: POP
// end ; end ;
26622: LD_VAR 0 1
26626: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26627: LD_EXP 87
26631: IFFALSE 27326
26633: GO 26635
26635: DISABLE
26636: LD_INT 0
26638: PPUSH
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
// begin enable ;
26647: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_EXP 87
26657: PPUSH
26658: CALL 75622 0 1
26662: ST_TO_ADDR
// if not list then
26663: LD_VAR 0 3
26667: NOT
26668: IFFALSE 26672
// exit ;
26670: GO 27326
// for i := 1 to list do
26672: LD_ADDR_VAR 0 1
26676: PUSH
26677: DOUBLE
26678: LD_INT 1
26680: DEC
26681: ST_TO_ADDR
26682: LD_VAR 0 3
26686: PUSH
26687: FOR_TO
26688: IFFALSE 27324
// begin depot := list [ i ] [ 2 ] ;
26690: LD_ADDR_VAR 0 8
26694: PUSH
26695: LD_VAR 0 3
26699: PUSH
26700: LD_VAR 0 1
26704: ARRAY
26705: PUSH
26706: LD_INT 2
26708: ARRAY
26709: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26710: LD_ADDR_VAR 0 5
26714: PUSH
26715: LD_VAR 0 3
26719: PUSH
26720: LD_VAR 0 1
26724: ARRAY
26725: PUSH
26726: LD_INT 1
26728: ARRAY
26729: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26730: LD_VAR 0 8
26734: PPUSH
26735: CALL_OW 301
26739: IFTRUE 26758
26741: PUSH
26742: LD_VAR 0 5
26746: PUSH
26747: LD_VAR 0 8
26751: PPUSH
26752: CALL_OW 255
26756: NONEQUAL
26757: OR
26758: IFFALSE 26787
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26760: LD_ADDR_EXP 87
26764: PUSH
26765: LD_EXP 87
26769: PPUSH
26770: LD_VAR 0 8
26774: PPUSH
26775: LD_INT 0
26777: PPUSH
26778: CALL_OW 1
26782: ST_TO_ADDR
// exit ;
26783: POP
26784: POP
26785: GO 27326
// end ; x := list [ i ] [ 3 ] ;
26787: LD_ADDR_VAR 0 6
26791: PUSH
26792: LD_VAR 0 3
26796: PUSH
26797: LD_VAR 0 1
26801: ARRAY
26802: PUSH
26803: LD_INT 3
26805: ARRAY
26806: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: LD_VAR 0 3
26816: PUSH
26817: LD_VAR 0 1
26821: ARRAY
26822: PUSH
26823: LD_INT 4
26825: ARRAY
26826: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26827: LD_ADDR_VAR 0 9
26831: PUSH
26832: LD_VAR 0 6
26836: PPUSH
26837: LD_VAR 0 7
26841: PPUSH
26842: LD_INT 16
26844: PPUSH
26845: CALL 74196 0 3
26849: ST_TO_ADDR
// if not cratesNearbyPoint then
26850: LD_VAR 0 9
26854: NOT
26855: IFFALSE 26861
// exit ;
26857: POP
26858: POP
26859: GO 27326
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26861: LD_ADDR_VAR 0 4
26865: PUSH
26866: LD_INT 22
26868: PUSH
26869: LD_VAR 0 5
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: LD_INT 60
26883: PUSH
26884: EMPTY
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 91
26893: PUSH
26894: LD_VAR 0 8
26898: PUSH
26899: LD_INT 6
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 25
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 25
26922: PUSH
26923: LD_INT 16
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: PPUSH
26941: CALL_OW 69
26945: PUSH
26946: LD_VAR 0 8
26950: PPUSH
26951: CALL_OW 313
26955: PPUSH
26956: LD_INT 3
26958: PUSH
26959: LD_INT 60
26961: PUSH
26962: EMPTY
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 25
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 25
26984: PUSH
26985: LD_INT 16
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 72
27005: UNION
27006: ST_TO_ADDR
// if tmp then
27007: LD_VAR 0 4
27011: IFFALSE 27091
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27013: LD_ADDR_VAR 0 4
27017: PUSH
27018: LD_VAR 0 4
27022: PPUSH
27023: LD_INT 3
27025: PPUSH
27026: CALL 72003 0 2
27030: ST_TO_ADDR
// for j in tmp do
27031: LD_ADDR_VAR 0 2
27035: PUSH
27036: LD_VAR 0 4
27040: PUSH
27041: FOR_IN
27042: IFFALSE 27085
// begin if IsInUnit ( j ) then
27044: LD_VAR 0 2
27048: PPUSH
27049: CALL_OW 310
27053: IFFALSE 27064
// ComExit ( j ) ;
27055: LD_VAR 0 2
27059: PPUSH
27060: CALL 72086 0 1
// AddComCollect ( j , x , y ) ;
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_VAR 0 6
27073: PPUSH
27074: LD_VAR 0 7
27078: PPUSH
27079: CALL_OW 177
// end ;
27083: GO 27041
27085: POP
27086: POP
// exit ;
27087: POP
27088: POP
27089: GO 27326
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27091: LD_ADDR_VAR 0 4
27095: PUSH
27096: LD_INT 22
27098: PUSH
27099: LD_VAR 0 5
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 91
27110: PUSH
27111: LD_VAR 0 8
27115: PUSH
27116: LD_INT 8
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 34
27129: PUSH
27130: LD_INT 12
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 34
27139: PUSH
27140: LD_INT 51
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 34
27149: PUSH
27150: LD_INT 32
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 34
27159: PUSH
27160: LD_INT 89
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if tmp then
27184: LD_VAR 0 4
27188: IFFALSE 27322
// begin for j in tmp do
27190: LD_ADDR_VAR 0 2
27194: PUSH
27195: LD_VAR 0 4
27199: PUSH
27200: FOR_IN
27201: IFFALSE 27320
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27203: LD_VAR 0 2
27207: PPUSH
27208: CALL_OW 262
27212: PUSH
27213: LD_INT 3
27215: EQUAL
27216: IFTRUE 27233
27218: PUSH
27219: LD_VAR 0 2
27223: PPUSH
27224: CALL_OW 261
27228: PUSH
27229: LD_INT 20
27231: GREATER
27232: OR
27233: IFFALSE 27247
27235: PUSH
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 314
27245: NOT
27246: AND
27247: IFFALSE 27277
27249: PUSH
27250: LD_VAR 0 2
27254: PPUSH
27255: CALL_OW 263
27259: PUSH
27260: LD_INT 1
27262: NONEQUAL
27263: IFTRUE 27276
27265: PUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL_OW 311
27275: OR
27276: AND
27277: IFFALSE 27318
// begin ComCollect ( j , x , y ) ;
27279: LD_VAR 0 2
27283: PPUSH
27284: LD_VAR 0 6
27288: PPUSH
27289: LD_VAR 0 7
27293: PPUSH
27294: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 8
27307: PPUSH
27308: CALL_OW 172
// exit ;
27312: POP
27313: POP
27314: POP
27315: POP
27316: GO 27326
// end ;
27318: GO 27200
27320: POP
27321: POP
// end ; end ;
27322: GO 26687
27324: POP
27325: POP
// end ; end_of_file
27326: PPOPN 9
27328: END
// export function SOS_UnitDestroyed ( un ) ; begin
27329: LD_INT 0
27331: PPUSH
// ComRadiation ( un ) ;
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL 28418 0 1
// end ;
27341: LD_VAR 0 2
27345: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27346: LD_INT 0
27348: PPUSH
// ComRadiation ( un ) ;
27349: LD_VAR 0 1
27353: PPUSH
27354: CALL 28418 0 1
// end ;
27358: LD_VAR 0 2
27362: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27363: LD_INT 0
27365: PPUSH
// end ;
27366: LD_VAR 0 4
27370: RET
// export function SOS_Command ( cmd ) ; begin
27371: LD_INT 0
27373: PPUSH
// end ;
27374: LD_VAR 0 2
27378: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27379: LD_INT 0
27381: PPUSH
// end ;
27382: LD_VAR 0 6
27386: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
// if not vehicle or not factory then
27393: LD_VAR 0 1
27397: NOT
27398: IFTRUE 27407
27400: PUSH
27401: LD_VAR 0 2
27405: NOT
27406: OR
27407: IFFALSE 27411
// exit ;
27409: GO 27993
// if not factoryWaypoints then
27411: LD_EXP 85
27415: NOT
27416: IFFALSE 27420
// exit ;
27418: GO 27993
// for i := 1 to Count ( factoryWaypoints ) do
27420: LD_ADDR_VAR 0 4
27424: PUSH
27425: DOUBLE
27426: LD_INT 1
27428: DEC
27429: ST_TO_ADDR
27430: LD_EXP 85
27434: PPUSH
27435: CALL 35756 0 1
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27991
// if factoryWaypoints [ i ] [ 2 ] = factory then
27443: LD_EXP 85
27447: PUSH
27448: LD_VAR 0 4
27452: ARRAY
27453: PUSH
27454: LD_INT 2
27456: ARRAY
27457: PUSH
27458: LD_VAR 0 2
27462: EQUAL
27463: IFFALSE 27989
// begin if GetControl ( vehicle ) = control_manual then
27465: LD_VAR 0 1
27469: PPUSH
27470: CALL_OW 263
27474: PUSH
27475: LD_INT 1
27477: EQUAL
27478: IFFALSE 27842
// begin driver := IsDrivenBy ( vehicle ) ;
27480: LD_ADDR_VAR 0 5
27484: PUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL_OW 311
27494: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27495: LD_VAR 0 5
27499: PUSH
27500: LD_EXP 86
27504: IN
27505: IFTRUE 27519
27507: PUSH
27508: LD_VAR 0 1
27512: PUSH
27513: LD_EXP 86
27517: IN
27518: OR
27519: IFFALSE 27525
// exit ;
27521: POP
27522: POP
27523: GO 27993
// if not HasTask ( driver ) then
27525: LD_VAR 0 5
27529: PPUSH
27530: CALL_OW 314
27534: NOT
27535: IFFALSE 27840
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27537: LD_ADDR_EXP 86
27541: PUSH
27542: LD_EXP 86
27546: PPUSH
27547: LD_VAR 0 5
27551: PPUSH
27552: CALL 71688 0 2
27556: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27557: LD_ADDR_EXP 86
27561: PUSH
27562: LD_EXP 86
27566: PPUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL 71688 0 2
27576: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27577: LD_ADDR_VAR 0 6
27581: PUSH
27582: LD_EXP 85
27586: PUSH
27587: LD_VAR 0 4
27591: ARRAY
27592: PUSH
27593: LD_INT 3
27595: ARRAY
27596: PPUSH
27597: LD_EXP 85
27601: PUSH
27602: LD_VAR 0 4
27606: ARRAY
27607: PUSH
27608: LD_INT 4
27610: ARRAY
27611: PPUSH
27612: CALL_OW 428
27616: ST_TO_ADDR
// if hex then
27617: LD_VAR 0 6
27621: IFFALSE 27639
// ComMoveUnit ( driver , hex ) else
27623: LD_VAR 0 5
27627: PPUSH
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 112
27637: GO 27723
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27639: LD_VAR 0 1
27643: PPUSH
27644: LD_EXP 85
27648: PUSH
27649: LD_VAR 0 4
27653: ARRAY
27654: PUSH
27655: LD_INT 3
27657: ARRAY
27658: PPUSH
27659: LD_EXP 85
27663: PUSH
27664: LD_VAR 0 4
27668: ARRAY
27669: PUSH
27670: LD_INT 4
27672: ARRAY
27673: PPUSH
27674: CALL_OW 297
27678: PUSH
27679: LD_INT 0
27681: GREATER
27682: IFFALSE 27723
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27684: LD_VAR 0 5
27688: PPUSH
27689: LD_EXP 85
27693: PUSH
27694: LD_VAR 0 4
27698: ARRAY
27699: PUSH
27700: LD_INT 3
27702: ARRAY
27703: PPUSH
27704: LD_EXP 85
27708: PUSH
27709: LD_VAR 0 4
27713: ARRAY
27714: PUSH
27715: LD_INT 4
27717: ARRAY
27718: PPUSH
27719: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27723: LD_VAR 0 5
27727: PPUSH
27728: CALL_OW 181
// if Multiplayer then
27732: LD_OWVAR 4
27736: IFFALSE 27785
// begin repeat wait ( 10 ) ;
27738: LD_INT 10
27740: PPUSH
27741: CALL_OW 67
// until not IsInUnit ( driver ) ;
27745: LD_VAR 0 5
27749: PPUSH
27750: CALL_OW 310
27754: NOT
27755: IFFALSE 27738
// if not HasTask ( driver ) then
27757: LD_VAR 0 5
27761: PPUSH
27762: CALL_OW 314
27766: NOT
27767: IFFALSE 27783
// ComEnterUnit ( driver , factory ) ;
27769: LD_VAR 0 5
27773: PPUSH
27774: LD_VAR 0 2
27778: PPUSH
27779: CALL_OW 120
// end else
27783: GO 27799
// AddComEnterUnit ( driver , factory ) ;
27785: LD_VAR 0 5
27789: PPUSH
27790: LD_VAR 0 2
27794: PPUSH
27795: CALL_OW 180
// wait ( 0 0$1 ) ;
27799: LD_INT 35
27801: PPUSH
27802: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27806: LD_ADDR_EXP 86
27810: PUSH
27811: LD_EXP 86
27815: PUSH
27816: LD_VAR 0 5
27820: DIFF
27821: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27822: LD_ADDR_EXP 86
27826: PUSH
27827: LD_EXP 86
27831: PUSH
27832: LD_VAR 0 1
27836: DIFF
27837: ST_TO_ADDR
// break ;
27838: GO 27991
// end ; end else
27840: GO 27989
// if GetControl ( vehicle ) = control_remote then
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 263
27851: PUSH
27852: LD_INT 2
27854: EQUAL
27855: IFFALSE 27941
// begin wait ( 0 0$2 ) ;
27857: LD_INT 70
27859: PPUSH
27860: CALL_OW 67
// repeat wait ( 10 ) ;
27864: LD_INT 10
27866: PPUSH
27867: CALL_OW 67
// Connect ( vehicle ) ;
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL 42000 0 1
// until IsControledBy ( vehicle ) ;
27880: LD_VAR 0 1
27884: PPUSH
27885: CALL_OW 312
27889: IFFALSE 27864
// wait ( 10 ) ;
27891: LD_INT 10
27893: PPUSH
27894: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27898: LD_VAR 0 1
27902: PPUSH
27903: LD_EXP 85
27907: PUSH
27908: LD_VAR 0 4
27912: ARRAY
27913: PUSH
27914: LD_INT 3
27916: ARRAY
27917: PPUSH
27918: LD_EXP 85
27922: PUSH
27923: LD_VAR 0 4
27927: ARRAY
27928: PUSH
27929: LD_INT 4
27931: ARRAY
27932: PPUSH
27933: CALL_OW 111
// break ;
27937: GO 27991
// end else
27939: GO 27989
// begin wait ( 0 0$3 ) ;
27941: LD_INT 105
27943: PPUSH
27944: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27948: LD_VAR 0 1
27952: PPUSH
27953: LD_EXP 85
27957: PUSH
27958: LD_VAR 0 4
27962: ARRAY
27963: PUSH
27964: LD_INT 3
27966: ARRAY
27967: PPUSH
27968: LD_EXP 85
27972: PUSH
27973: LD_VAR 0 4
27977: ARRAY
27978: PUSH
27979: LD_INT 4
27981: ARRAY
27982: PPUSH
27983: CALL_OW 111
// break ;
27987: GO 27991
// end ; end ;
27989: GO 27440
27991: POP
27992: POP
// end ;
27993: LD_VAR 0 3
27997: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27998: LD_INT 0
28000: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28001: LD_VAR 0 1
28005: PUSH
28006: LD_INT 250
28008: EQUAL
28009: IFFALSE 28026
28011: PUSH
28012: LD_VAR 0 2
28016: PPUSH
28017: CALL_OW 264
28021: PUSH
28022: LD_INT 81
28024: EQUAL
28025: AND
28026: IFFALSE 28047
// MinerPlaceMine ( unit , x , y ) ;
28028: LD_VAR 0 2
28032: PPUSH
28033: LD_VAR 0 4
28037: PPUSH
28038: LD_VAR 0 5
28042: PPUSH
28043: CALL 31179 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28047: LD_VAR 0 1
28051: PUSH
28052: LD_INT 251
28054: EQUAL
28055: IFFALSE 28072
28057: PUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: CALL_OW 264
28067: PUSH
28068: LD_INT 81
28070: EQUAL
28071: AND
28072: IFFALSE 28093
// MinerDetonateMine ( unit , x , y ) ;
28074: LD_VAR 0 2
28078: PPUSH
28079: LD_VAR 0 4
28083: PPUSH
28084: LD_VAR 0 5
28088: PPUSH
28089: CALL 31458 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 252
28100: EQUAL
28101: IFFALSE 28118
28103: PUSH
28104: LD_VAR 0 2
28108: PPUSH
28109: CALL_OW 264
28113: PUSH
28114: LD_INT 81
28116: EQUAL
28117: AND
28118: IFFALSE 28139
// MinerCreateMinefield ( unit , x , y ) ;
28120: LD_VAR 0 2
28124: PPUSH
28125: LD_VAR 0 4
28129: PPUSH
28130: LD_VAR 0 5
28134: PPUSH
28135: CALL 31877 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28139: LD_VAR 0 1
28143: PUSH
28144: LD_INT 253
28146: EQUAL
28147: IFFALSE 28164
28149: PUSH
28150: LD_VAR 0 2
28154: PPUSH
28155: CALL_OW 257
28159: PUSH
28160: LD_INT 5
28162: EQUAL
28163: AND
28164: IFFALSE 28185
// ComBinocular ( unit , x , y ) ;
28166: LD_VAR 0 2
28170: PPUSH
28171: LD_VAR 0 4
28175: PPUSH
28176: LD_VAR 0 5
28180: PPUSH
28181: CALL 32252 0 3
// if selectedUnit then
28185: LD_VAR 0 3
28189: IFFALSE 28249
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28191: LD_VAR 0 1
28195: PUSH
28196: LD_INT 254
28198: EQUAL
28199: IFFALSE 28216
28201: PUSH
28202: LD_VAR 0 2
28206: PPUSH
28207: CALL_OW 264
28211: PUSH
28212: LD_INT 99
28214: EQUAL
28215: AND
28216: IFFALSE 28233
28218: PUSH
28219: LD_VAR 0 3
28223: PPUSH
28224: CALL_OW 263
28228: PUSH
28229: LD_INT 3
28231: EQUAL
28232: AND
28233: IFFALSE 28249
// HackDestroyVehicle ( unit , selectedUnit ) ;
28235: LD_VAR 0 2
28239: PPUSH
28240: LD_VAR 0 3
28244: PPUSH
28245: CALL 30539 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 255
28256: EQUAL
28257: IFFALSE 28281
28259: PUSH
28260: LD_VAR 0 2
28264: PPUSH
28265: CALL_OW 264
28269: PUSH
28270: LD_INT 14
28272: PUSH
28273: LD_INT 53
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: IN
28280: AND
28281: IFFALSE 28299
28283: PUSH
28284: LD_VAR 0 4
28288: PPUSH
28289: LD_VAR 0 5
28293: PPUSH
28294: CALL_OW 488
28298: AND
28299: IFFALSE 28323
// CutTreeXYR ( unit , x , y , 12 ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_VAR 0 4
28310: PPUSH
28311: LD_VAR 0 5
28315: PPUSH
28316: LD_INT 12
28318: PPUSH
28319: CALL 28514 0 4
// if cmd = 256 then
28323: LD_VAR 0 1
28327: PUSH
28328: LD_INT 256
28330: EQUAL
28331: IFFALSE 28352
// SetFactoryWaypoint ( unit , x , y ) ;
28333: LD_VAR 0 2
28337: PPUSH
28338: LD_VAR 0 4
28342: PPUSH
28343: LD_VAR 0 5
28347: PPUSH
28348: CALL 25874 0 3
// if cmd = 257 then
28352: LD_VAR 0 1
28356: PUSH
28357: LD_INT 257
28359: EQUAL
28360: IFFALSE 28381
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28362: LD_VAR 0 2
28366: PPUSH
28367: LD_VAR 0 4
28371: PPUSH
28372: LD_VAR 0 5
28376: PPUSH
28377: CALL 26370 0 3
// if cmd = 258 then
28381: LD_VAR 0 1
28385: PUSH
28386: LD_INT 258
28388: EQUAL
28389: IFFALSE 28413
// BurnTreeXYR ( unit , x , y , 8 ) ;
28391: LD_VAR 0 2
28395: PPUSH
28396: LD_VAR 0 4
28400: PPUSH
28401: LD_VAR 0 5
28405: PPUSH
28406: LD_INT 8
28408: PPUSH
28409: CALL 28914 0 4
// end ;
28413: LD_VAR 0 6
28417: RET
// export function ComRadiation ( un ) ; var eff ; begin
28418: LD_INT 0
28420: PPUSH
28421: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28422: LD_VAR 0 1
28426: PPUSH
28427: CALL_OW 264
28431: PUSH
28432: LD_INT 91
28434: NONEQUAL
28435: IFFALSE 28439
// exit ;
28437: GO 28509
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28439: LD_INT 68
28441: PPUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 255
28451: PPUSH
28452: CALL_OW 321
28456: PUSH
28457: LD_INT 2
28459: EQUAL
28460: IFFALSE 28472
// eff := 50 else
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_INT 50
28469: ST_TO_ADDR
28470: GO 28480
// eff := 25 ;
28472: LD_ADDR_VAR 0 3
28476: PUSH
28477: LD_INT 25
28479: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28480: LD_VAR 0 1
28484: PPUSH
28485: CALL_OW 250
28489: PPUSH
28490: LD_VAR 0 1
28494: PPUSH
28495: CALL_OW 251
28499: PPUSH
28500: LD_VAR 0 3
28504: PPUSH
28505: CALL_OW 495
// end ;
28509: LD_VAR 0 2
28513: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
28524: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 302
28534: NOT
28535: IFTRUE 28554
28537: PUSH
28538: LD_VAR 0 2
28542: PPUSH
28543: LD_VAR 0 3
28547: PPUSH
28548: CALL_OW 488
28552: NOT
28553: OR
28554: IFTRUE 28563
28556: PUSH
28557: LD_VAR 0 4
28561: NOT
28562: OR
28563: IFFALSE 28567
// exit ;
28565: GO 28909
// list := [ ] ;
28567: LD_ADDR_VAR 0 13
28571: PUSH
28572: EMPTY
28573: ST_TO_ADDR
// if x - r < 0 then
28574: LD_VAR 0 2
28578: PUSH
28579: LD_VAR 0 4
28583: MINUS
28584: PUSH
28585: LD_INT 0
28587: LESS
28588: IFFALSE 28600
// min_x := 0 else
28590: LD_ADDR_VAR 0 7
28594: PUSH
28595: LD_INT 0
28597: ST_TO_ADDR
28598: GO 28616
// min_x := x - r ;
28600: LD_ADDR_VAR 0 7
28604: PUSH
28605: LD_VAR 0 2
28609: PUSH
28610: LD_VAR 0 4
28614: MINUS
28615: ST_TO_ADDR
// if y - r < 0 then
28616: LD_VAR 0 3
28620: PUSH
28621: LD_VAR 0 4
28625: MINUS
28626: PUSH
28627: LD_INT 0
28629: LESS
28630: IFFALSE 28642
// min_y := 0 else
28632: LD_ADDR_VAR 0 8
28636: PUSH
28637: LD_INT 0
28639: ST_TO_ADDR
28640: GO 28658
// min_y := y - r ;
28642: LD_ADDR_VAR 0 8
28646: PUSH
28647: LD_VAR 0 3
28651: PUSH
28652: LD_VAR 0 4
28656: MINUS
28657: ST_TO_ADDR
// max_x := x + r ;
28658: LD_ADDR_VAR 0 9
28662: PUSH
28663: LD_VAR 0 2
28667: PUSH
28668: LD_VAR 0 4
28672: PLUS
28673: ST_TO_ADDR
// max_y := y + r ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 3
28683: PUSH
28684: LD_VAR 0 4
28688: PLUS
28689: ST_TO_ADDR
// for _x = min_x to max_x do
28690: LD_ADDR_VAR 0 11
28694: PUSH
28695: DOUBLE
28696: LD_VAR 0 7
28700: DEC
28701: ST_TO_ADDR
28702: LD_VAR 0 9
28706: PUSH
28707: FOR_TO
28708: IFFALSE 28827
// for _y = min_y to max_y do
28710: LD_ADDR_VAR 0 12
28714: PUSH
28715: DOUBLE
28716: LD_VAR 0 8
28720: DEC
28721: ST_TO_ADDR
28722: LD_VAR 0 10
28726: PUSH
28727: FOR_TO
28728: IFFALSE 28823
// begin if not ValidHex ( _x , _y ) then
28730: LD_VAR 0 11
28734: PPUSH
28735: LD_VAR 0 12
28739: PPUSH
28740: CALL_OW 488
28744: NOT
28745: IFFALSE 28749
// continue ;
28747: GO 28727
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28749: LD_VAR 0 11
28753: PPUSH
28754: LD_VAR 0 12
28758: PPUSH
28759: CALL_OW 351
28763: IFFALSE 28781
28765: PUSH
28766: LD_VAR 0 11
28770: PPUSH
28771: LD_VAR 0 12
28775: PPUSH
28776: CALL_OW 554
28780: AND
28781: IFFALSE 28821
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28783: LD_ADDR_VAR 0 13
28787: PUSH
28788: LD_VAR 0 13
28792: PPUSH
28793: LD_VAR 0 13
28797: PUSH
28798: LD_INT 1
28800: PLUS
28801: PPUSH
28802: LD_VAR 0 11
28806: PUSH
28807: LD_VAR 0 12
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 2
28820: ST_TO_ADDR
// end ;
28821: GO 28727
28823: POP
28824: POP
28825: GO 28707
28827: POP
28828: POP
// if not list then
28829: LD_VAR 0 13
28833: NOT
28834: IFFALSE 28838
// exit ;
28836: GO 28909
// for i in list do
28838: LD_ADDR_VAR 0 6
28842: PUSH
28843: LD_VAR 0 13
28847: PUSH
28848: FOR_IN
28849: IFFALSE 28907
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28851: LD_VAR 0 1
28855: PPUSH
28856: LD_STRING M
28858: PUSH
28859: LD_VAR 0 6
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PUSH
28868: LD_VAR 0 6
28872: PUSH
28873: LD_INT 2
28875: ARRAY
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: PPUSH
28901: CALL_OW 447
28905: GO 28848
28907: POP
28908: POP
// end ;
28909: LD_VAR 0 5
28913: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28914: LD_INT 0
28916: PPUSH
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL_OW 302
28935: NOT
28936: IFTRUE 28955
28938: PUSH
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 488
28953: NOT
28954: OR
28955: IFTRUE 28964
28957: PUSH
28958: LD_VAR 0 4
28962: NOT
28963: OR
28964: IFFALSE 28968
// exit ;
28966: GO 29485
// list := [ ] ;
28968: LD_ADDR_VAR 0 13
28972: PUSH
28973: EMPTY
28974: ST_TO_ADDR
// if x - r < 0 then
28975: LD_VAR 0 2
28979: PUSH
28980: LD_VAR 0 4
28984: MINUS
28985: PUSH
28986: LD_INT 0
28988: LESS
28989: IFFALSE 29001
// min_x := 0 else
28991: LD_ADDR_VAR 0 7
28995: PUSH
28996: LD_INT 0
28998: ST_TO_ADDR
28999: GO 29017
// min_x := x - r ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: LD_VAR 0 2
29010: PUSH
29011: LD_VAR 0 4
29015: MINUS
29016: ST_TO_ADDR
// if y - r < 0 then
29017: LD_VAR 0 3
29021: PUSH
29022: LD_VAR 0 4
29026: MINUS
29027: PUSH
29028: LD_INT 0
29030: LESS
29031: IFFALSE 29043
// min_y := 0 else
29033: LD_ADDR_VAR 0 8
29037: PUSH
29038: LD_INT 0
29040: ST_TO_ADDR
29041: GO 29059
// min_y := y - r ;
29043: LD_ADDR_VAR 0 8
29047: PUSH
29048: LD_VAR 0 3
29052: PUSH
29053: LD_VAR 0 4
29057: MINUS
29058: ST_TO_ADDR
// max_x := x + r ;
29059: LD_ADDR_VAR 0 9
29063: PUSH
29064: LD_VAR 0 2
29068: PUSH
29069: LD_VAR 0 4
29073: PLUS
29074: ST_TO_ADDR
// max_y := y + r ;
29075: LD_ADDR_VAR 0 10
29079: PUSH
29080: LD_VAR 0 3
29084: PUSH
29085: LD_VAR 0 4
29089: PLUS
29090: ST_TO_ADDR
// for _x = min_x to max_x do
29091: LD_ADDR_VAR 0 11
29095: PUSH
29096: DOUBLE
29097: LD_VAR 0 7
29101: DEC
29102: ST_TO_ADDR
29103: LD_VAR 0 9
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29228
// for _y = min_y to max_y do
29111: LD_ADDR_VAR 0 12
29115: PUSH
29116: DOUBLE
29117: LD_VAR 0 8
29121: DEC
29122: ST_TO_ADDR
29123: LD_VAR 0 10
29127: PUSH
29128: FOR_TO
29129: IFFALSE 29224
// begin if not ValidHex ( _x , _y ) then
29131: LD_VAR 0 11
29135: PPUSH
29136: LD_VAR 0 12
29140: PPUSH
29141: CALL_OW 488
29145: NOT
29146: IFFALSE 29150
// continue ;
29148: GO 29128
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29150: LD_VAR 0 11
29154: PPUSH
29155: LD_VAR 0 12
29159: PPUSH
29160: CALL_OW 351
29164: IFFALSE 29182
29166: PUSH
29167: LD_VAR 0 11
29171: PPUSH
29172: LD_VAR 0 12
29176: PPUSH
29177: CALL_OW 554
29181: AND
29182: IFFALSE 29222
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29184: LD_ADDR_VAR 0 13
29188: PUSH
29189: LD_VAR 0 13
29193: PPUSH
29194: LD_VAR 0 13
29198: PUSH
29199: LD_INT 1
29201: PLUS
29202: PPUSH
29203: LD_VAR 0 11
29207: PUSH
29208: LD_VAR 0 12
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 2
29221: ST_TO_ADDR
// end ;
29222: GO 29128
29224: POP
29225: POP
29226: GO 29108
29228: POP
29229: POP
// if not list then
29230: LD_VAR 0 13
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29485
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29239: LD_ADDR_VAR 0 13
29243: PUSH
29244: LD_VAR 0 1
29248: PPUSH
29249: LD_VAR 0 13
29253: PPUSH
29254: LD_INT 1
29256: PPUSH
29257: LD_INT 1
29259: PPUSH
29260: CALL 39128 0 4
29264: ST_TO_ADDR
// ComStop ( flame ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 141
// for i in list do
29274: LD_ADDR_VAR 0 6
29278: PUSH
29279: LD_VAR 0 13
29283: PUSH
29284: FOR_IN
29285: IFFALSE 29316
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29287: LD_VAR 0 1
29291: PPUSH
29292: LD_VAR 0 6
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PPUSH
29301: LD_VAR 0 6
29305: PUSH
29306: LD_INT 2
29308: ARRAY
29309: PPUSH
29310: CALL_OW 176
29314: GO 29284
29316: POP
29317: POP
// repeat wait ( 0 0$1 ) ;
29318: LD_INT 35
29320: PPUSH
29321: CALL_OW 67
// task := GetTaskList ( flame ) ;
29325: LD_ADDR_VAR 0 14
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 437
29339: ST_TO_ADDR
// if not task then
29340: LD_VAR 0 14
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29485
// if task [ 1 ] [ 1 ] <> | then
29349: LD_VAR 0 14
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PUSH
29362: LD_STRING |
29364: NONEQUAL
29365: IFFALSE 29369
// exit ;
29367: GO 29485
// _x := task [ 1 ] [ 2 ] ;
29369: LD_ADDR_VAR 0 11
29373: PUSH
29374: LD_VAR 0 14
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PUSH
29383: LD_INT 2
29385: ARRAY
29386: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29387: LD_ADDR_VAR 0 12
29391: PUSH
29392: LD_VAR 0 14
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PUSH
29401: LD_INT 3
29403: ARRAY
29404: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29405: LD_VAR 0 11
29409: PPUSH
29410: LD_VAR 0 12
29414: PPUSH
29415: CALL_OW 351
29419: NOT
29420: IFTRUE 29439
29422: PUSH
29423: LD_VAR 0 11
29427: PPUSH
29428: LD_VAR 0 12
29432: PPUSH
29433: CALL_OW 554
29437: NOT
29438: OR
29439: IFFALSE 29473
// begin task := Delete ( task , 1 ) ;
29441: LD_ADDR_VAR 0 14
29445: PUSH
29446: LD_VAR 0 14
29450: PPUSH
29451: LD_INT 1
29453: PPUSH
29454: CALL_OW 3
29458: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29459: LD_VAR 0 1
29463: PPUSH
29464: LD_VAR 0 14
29468: PPUSH
29469: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 314
29482: NOT
29483: IFFALSE 29318
// end ;
29485: LD_VAR 0 5
29489: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29490: LD_EXP 89
29494: NOT
29495: IFFALSE 29545
29497: GO 29499
29499: DISABLE
// begin initHack := true ;
29500: LD_ADDR_EXP 89
29504: PUSH
29505: LD_INT 1
29507: ST_TO_ADDR
// hackTanks := [ ] ;
29508: LD_ADDR_EXP 90
29512: PUSH
29513: EMPTY
29514: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29515: LD_ADDR_EXP 91
29519: PUSH
29520: EMPTY
29521: ST_TO_ADDR
// hackLimit := 3 ;
29522: LD_ADDR_EXP 92
29526: PUSH
29527: LD_INT 3
29529: ST_TO_ADDR
// hackDist := 12 ;
29530: LD_ADDR_EXP 93
29534: PUSH
29535: LD_INT 12
29537: ST_TO_ADDR
// hackCounter := [ ] ;
29538: LD_ADDR_EXP 94
29542: PUSH
29543: EMPTY
29544: ST_TO_ADDR
// end ;
29545: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29546: LD_EXP 89
29550: IFFALSE 29568
29552: PUSH
29553: LD_INT 34
29555: PUSH
29556: LD_INT 99
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PPUSH
29563: CALL_OW 69
29567: AND
29568: IFFALSE 29821
29570: GO 29572
29572: DISABLE
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
// begin enable ;
29577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_INT 34
29585: PUSH
29586: LD_INT 99
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 69
29597: PUSH
29598: FOR_IN
29599: IFFALSE 29819
// begin if not i in hackTanks then
29601: LD_VAR 0 1
29605: PUSH
29606: LD_EXP 90
29610: IN
29611: NOT
29612: IFFALSE 29695
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29614: LD_ADDR_EXP 90
29618: PUSH
29619: LD_EXP 90
29623: PPUSH
29624: LD_EXP 90
29628: PUSH
29629: LD_INT 1
29631: PLUS
29632: PPUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 1
29642: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29643: LD_ADDR_EXP 91
29647: PUSH
29648: LD_EXP 91
29652: PPUSH
29653: LD_EXP 91
29657: PUSH
29658: LD_INT 1
29660: PLUS
29661: PPUSH
29662: EMPTY
29663: PPUSH
29664: CALL_OW 1
29668: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29669: LD_ADDR_EXP 94
29673: PUSH
29674: LD_EXP 94
29678: PPUSH
29679: LD_EXP 94
29683: PUSH
29684: LD_INT 1
29686: PLUS
29687: PPUSH
29688: EMPTY
29689: PPUSH
29690: CALL_OW 1
29694: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 302
29704: NOT
29705: IFFALSE 29718
// begin HackUnlinkAll ( i ) ;
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL 29824 0 1
// continue ;
29716: GO 29598
// end ; HackCheckCapturedStatus ( i ) ;
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL 30269 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29727: LD_ADDR_VAR 0 2
29731: PUSH
29732: LD_INT 81
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 255
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 33
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 91
29761: PUSH
29762: LD_VAR 0 1
29766: PUSH
29767: LD_EXP 93
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 50
29779: PUSH
29780: EMPTY
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PPUSH
29789: CALL_OW 69
29793: ST_TO_ADDR
// if not tmp then
29794: LD_VAR 0 2
29798: NOT
29799: IFFALSE 29803
// continue ;
29801: GO 29598
// HackLink ( i , tmp ) ;
29803: LD_VAR 0 1
29807: PPUSH
29808: LD_VAR 0 2
29812: PPUSH
29813: CALL 29960 0 2
// end ;
29817: GO 29598
29819: POP
29820: POP
// end ;
29821: PPOPN 2
29823: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29824: LD_INT 0
29826: PPUSH
29827: PPUSH
29828: PPUSH
// if not hack in hackTanks then
29829: LD_VAR 0 1
29833: PUSH
29834: LD_EXP 90
29838: IN
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 29955
// index := GetElementIndex ( hackTanks , hack ) ;
29844: LD_ADDR_VAR 0 4
29848: PUSH
29849: LD_EXP 90
29853: PPUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL 38423 0 2
29863: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29864: LD_EXP 91
29868: PUSH
29869: LD_VAR 0 4
29873: ARRAY
29874: IFFALSE 29955
// begin for i in hackTanksCaptured [ index ] do
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_EXP 91
29885: PUSH
29886: LD_VAR 0 4
29890: ARRAY
29891: PUSH
29892: FOR_IN
29893: IFFALSE 29919
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29895: LD_VAR 0 3
29899: PUSH
29900: LD_INT 1
29902: ARRAY
29903: PPUSH
29904: LD_VAR 0 3
29908: PUSH
29909: LD_INT 2
29911: ARRAY
29912: PPUSH
29913: CALL_OW 235
29917: GO 29892
29919: POP
29920: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29921: LD_ADDR_EXP 91
29925: PUSH
29926: LD_EXP 91
29930: PPUSH
29931: LD_VAR 0 4
29935: PPUSH
29936: EMPTY
29937: PPUSH
29938: CALL_OW 1
29942: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29943: LD_VAR 0 1
29947: PPUSH
29948: LD_INT 0
29950: PPUSH
29951: CALL_OW 505
// end ; end ;
29955: LD_VAR 0 2
29959: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29960: LD_INT 0
29962: PPUSH
29963: PPUSH
29964: PPUSH
// if not hack in hackTanks or not vehicles then
29965: LD_VAR 0 1
29969: PUSH
29970: LD_EXP 90
29974: IN
29975: NOT
29976: IFTRUE 29985
29978: PUSH
29979: LD_VAR 0 2
29983: NOT
29984: OR
29985: IFFALSE 29989
// exit ;
29987: GO 30264
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29989: LD_ADDR_VAR 0 2
29993: PUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_INT 1
30006: PPUSH
30007: LD_INT 1
30009: PPUSH
30010: CALL 39075 0 4
30014: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30015: LD_ADDR_VAR 0 5
30019: PUSH
30020: LD_EXP 90
30024: PPUSH
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL 38423 0 2
30034: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30035: LD_EXP 91
30039: PUSH
30040: LD_VAR 0 5
30044: ARRAY
30045: PUSH
30046: LD_EXP 92
30050: LESS
30051: IFFALSE 30240
// begin for i := 1 to vehicles do
30053: LD_ADDR_VAR 0 4
30057: PUSH
30058: DOUBLE
30059: LD_INT 1
30061: DEC
30062: ST_TO_ADDR
30063: LD_VAR 0 2
30067: PUSH
30068: FOR_TO
30069: IFFALSE 30238
// begin if hackTanksCaptured [ index ] = hackLimit then
30071: LD_EXP 91
30075: PUSH
30076: LD_VAR 0 5
30080: ARRAY
30081: PUSH
30082: LD_EXP 92
30086: EQUAL
30087: IFFALSE 30091
// break ;
30089: GO 30238
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30091: LD_ADDR_EXP 94
30095: PUSH
30096: LD_EXP 94
30100: PPUSH
30101: LD_VAR 0 5
30105: PPUSH
30106: LD_EXP 94
30110: PUSH
30111: LD_VAR 0 5
30115: ARRAY
30116: PUSH
30117: LD_INT 1
30119: PLUS
30120: PPUSH
30121: CALL_OW 1
30125: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30126: LD_ADDR_EXP 91
30130: PUSH
30131: LD_EXP 91
30135: PPUSH
30136: LD_VAR 0 5
30140: PUSH
30141: LD_EXP 91
30145: PUSH
30146: LD_VAR 0 5
30150: ARRAY
30151: PUSH
30152: LD_INT 1
30154: PLUS
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PPUSH
30160: LD_VAR 0 2
30164: PUSH
30165: LD_VAR 0 4
30169: ARRAY
30170: PUSH
30171: LD_VAR 0 2
30175: PUSH
30176: LD_VAR 0 4
30180: ARRAY
30181: PPUSH
30182: CALL_OW 255
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL 38640 0 3
30195: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30196: LD_VAR 0 2
30200: PUSH
30201: LD_VAR 0 4
30205: ARRAY
30206: PPUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: CALL_OW 255
30216: PPUSH
30217: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30221: LD_VAR 0 2
30225: PUSH
30226: LD_VAR 0 4
30230: ARRAY
30231: PPUSH
30232: CALL_OW 141
// end ;
30236: GO 30068
30238: POP
30239: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30240: LD_VAR 0 1
30244: PPUSH
30245: LD_EXP 91
30249: PUSH
30250: LD_VAR 0 5
30254: ARRAY
30255: PUSH
30256: LD_INT 0
30258: PLUS
30259: PPUSH
30260: CALL_OW 505
// end ;
30264: LD_VAR 0 3
30268: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
// if not hack in hackTanks then
30275: LD_VAR 0 1
30279: PUSH
30280: LD_EXP 90
30284: IN
30285: NOT
30286: IFFALSE 30290
// exit ;
30288: GO 30534
// index := GetElementIndex ( hackTanks , hack ) ;
30290: LD_ADDR_VAR 0 4
30294: PUSH
30295: LD_EXP 90
30299: PPUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL 38423 0 2
30309: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: DOUBLE
30316: LD_EXP 91
30320: PUSH
30321: LD_VAR 0 4
30325: ARRAY
30326: INC
30327: ST_TO_ADDR
30328: LD_INT 1
30330: PUSH
30331: FOR_DOWNTO
30332: IFFALSE 30508
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30334: LD_ADDR_VAR 0 5
30338: PUSH
30339: LD_EXP 91
30343: PUSH
30344: LD_VAR 0 4
30348: ARRAY
30349: PUSH
30350: LD_VAR 0 3
30354: ARRAY
30355: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30356: LD_VAR 0 5
30360: PUSH
30361: LD_INT 1
30363: ARRAY
30364: PPUSH
30365: CALL_OW 302
30369: NOT
30370: IFTRUE 30398
30372: PUSH
30373: LD_VAR 0 5
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PPUSH
30382: CALL_OW 255
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 255
30396: NONEQUAL
30397: OR
30398: IFFALSE 30506
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30400: LD_VAR 0 5
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: CALL_OW 305
30413: IFFALSE 30441
30415: PUSH
30416: LD_VAR 0 5
30420: PUSH
30421: LD_INT 1
30423: ARRAY
30424: PPUSH
30425: CALL_OW 255
30429: PUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 255
30439: EQUAL
30440: AND
30441: IFFALSE 30465
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30443: LD_VAR 0 5
30447: PUSH
30448: LD_INT 1
30450: ARRAY
30451: PPUSH
30452: LD_VAR 0 5
30456: PUSH
30457: LD_INT 2
30459: ARRAY
30460: PPUSH
30461: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30465: LD_ADDR_EXP 91
30469: PUSH
30470: LD_EXP 91
30474: PPUSH
30475: LD_VAR 0 4
30479: PPUSH
30480: LD_EXP 91
30484: PUSH
30485: LD_VAR 0 4
30489: ARRAY
30490: PPUSH
30491: LD_VAR 0 3
30495: PPUSH
30496: CALL_OW 3
30500: PPUSH
30501: CALL_OW 1
30505: ST_TO_ADDR
// end ; end ;
30506: GO 30331
30508: POP
30509: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30510: LD_VAR 0 1
30514: PPUSH
30515: LD_EXP 91
30519: PUSH
30520: LD_VAR 0 4
30524: ARRAY
30525: PUSH
30526: LD_INT 0
30528: PLUS
30529: PPUSH
30530: CALL_OW 505
// end ;
30534: LD_VAR 0 2
30538: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30539: LD_INT 0
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
// if not hack in hackTanks then
30545: LD_VAR 0 1
30549: PUSH
30550: LD_EXP 90
30554: IN
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30645
// index := GetElementIndex ( hackTanks , hack ) ;
30560: LD_ADDR_VAR 0 5
30564: PUSH
30565: LD_EXP 90
30569: PPUSH
30570: LD_VAR 0 1
30574: PPUSH
30575: CALL 38423 0 2
30579: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30580: LD_ADDR_VAR 0 4
30584: PUSH
30585: DOUBLE
30586: LD_INT 1
30588: DEC
30589: ST_TO_ADDR
30590: LD_EXP 91
30594: PUSH
30595: LD_VAR 0 5
30599: ARRAY
30600: PUSH
30601: FOR_TO
30602: IFFALSE 30643
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30604: LD_EXP 91
30608: PUSH
30609: LD_VAR 0 5
30613: ARRAY
30614: PUSH
30615: LD_VAR 0 4
30619: ARRAY
30620: PUSH
30621: LD_INT 1
30623: ARRAY
30624: PUSH
30625: LD_VAR 0 2
30629: EQUAL
30630: IFFALSE 30641
// KillUnit ( vehicle ) ;
30632: LD_VAR 0 2
30636: PPUSH
30637: CALL_OW 66
30641: GO 30601
30643: POP
30644: POP
// end ;
30645: LD_VAR 0 3
30649: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30650: LD_EXP 95
30654: NOT
30655: IFFALSE 30690
30657: GO 30659
30659: DISABLE
// begin initMiner := true ;
30660: LD_ADDR_EXP 95
30664: PUSH
30665: LD_INT 1
30667: ST_TO_ADDR
// minersList := [ ] ;
30668: LD_ADDR_EXP 96
30672: PUSH
30673: EMPTY
30674: ST_TO_ADDR
// minerMinesList := [ ] ;
30675: LD_ADDR_EXP 97
30679: PUSH
30680: EMPTY
30681: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30682: LD_ADDR_EXP 98
30686: PUSH
30687: LD_INT 5
30689: ST_TO_ADDR
// end ;
30690: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30691: LD_EXP 95
30695: IFFALSE 30713
30697: PUSH
30698: LD_INT 34
30700: PUSH
30701: LD_INT 81
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PPUSH
30708: CALL_OW 69
30712: AND
30713: IFFALSE 31176
30715: GO 30717
30717: DISABLE
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
// begin enable ;
30724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30725: LD_ADDR_VAR 0 1
30729: PUSH
30730: LD_INT 34
30732: PUSH
30733: LD_INT 81
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PPUSH
30740: CALL_OW 69
30744: PUSH
30745: FOR_IN
30746: IFFALSE 30818
// begin if not i in minersList then
30748: LD_VAR 0 1
30752: PUSH
30753: LD_EXP 96
30757: IN
30758: NOT
30759: IFFALSE 30816
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30761: LD_ADDR_EXP 96
30765: PUSH
30766: LD_EXP 96
30770: PPUSH
30771: LD_EXP 96
30775: PUSH
30776: LD_INT 1
30778: PLUS
30779: PPUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 1
30789: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30790: LD_ADDR_EXP 97
30794: PUSH
30795: LD_EXP 97
30799: PPUSH
30800: LD_EXP 97
30804: PUSH
30805: LD_INT 1
30807: PLUS
30808: PPUSH
30809: EMPTY
30810: PPUSH
30811: CALL_OW 1
30815: ST_TO_ADDR
// end end ;
30816: GO 30745
30818: POP
30819: POP
// for i := minerMinesList downto 1 do
30820: LD_ADDR_VAR 0 1
30824: PUSH
30825: DOUBLE
30826: LD_EXP 97
30830: INC
30831: ST_TO_ADDR
30832: LD_INT 1
30834: PUSH
30835: FOR_DOWNTO
30836: IFFALSE 31174
// begin if IsLive ( minersList [ i ] ) then
30838: LD_EXP 96
30842: PUSH
30843: LD_VAR 0 1
30847: ARRAY
30848: PPUSH
30849: CALL_OW 300
30853: IFFALSE 30881
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30855: LD_EXP 96
30859: PUSH
30860: LD_VAR 0 1
30864: ARRAY
30865: PPUSH
30866: LD_EXP 97
30870: PUSH
30871: LD_VAR 0 1
30875: ARRAY
30876: PPUSH
30877: CALL_OW 505
// if not minerMinesList [ i ] then
30881: LD_EXP 97
30885: PUSH
30886: LD_VAR 0 1
30890: ARRAY
30891: NOT
30892: IFFALSE 30896
// continue ;
30894: GO 30835
// for j := minerMinesList [ i ] downto 1 do
30896: LD_ADDR_VAR 0 2
30900: PUSH
30901: DOUBLE
30902: LD_EXP 97
30906: PUSH
30907: LD_VAR 0 1
30911: ARRAY
30912: INC
30913: ST_TO_ADDR
30914: LD_INT 1
30916: PUSH
30917: FOR_DOWNTO
30918: IFFALSE 31170
// begin side := GetSide ( minersList [ i ] ) ;
30920: LD_ADDR_VAR 0 3
30924: PUSH
30925: LD_EXP 96
30929: PUSH
30930: LD_VAR 0 1
30934: ARRAY
30935: PPUSH
30936: CALL_OW 255
30940: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30941: LD_ADDR_VAR 0 4
30945: PUSH
30946: LD_EXP 97
30950: PUSH
30951: LD_VAR 0 1
30955: ARRAY
30956: PUSH
30957: LD_VAR 0 2
30961: ARRAY
30962: PUSH
30963: LD_INT 1
30965: ARRAY
30966: PPUSH
30967: LD_EXP 97
30971: PUSH
30972: LD_VAR 0 1
30976: ARRAY
30977: PUSH
30978: LD_VAR 0 2
30982: ARRAY
30983: PUSH
30984: LD_INT 2
30986: ARRAY
30987: PPUSH
30988: CALL_OW 428
30992: ST_TO_ADDR
// if not tmp then
30993: LD_VAR 0 4
30997: NOT
30998: IFFALSE 31002
// continue ;
31000: GO 30917
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31002: LD_VAR 0 4
31006: PUSH
31007: LD_INT 81
31009: PUSH
31010: LD_VAR 0 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PPUSH
31019: CALL_OW 69
31023: IN
31024: IFFALSE 31074
31026: PUSH
31027: LD_EXP 97
31031: PUSH
31032: LD_VAR 0 1
31036: ARRAY
31037: PUSH
31038: LD_VAR 0 2
31042: ARRAY
31043: PUSH
31044: LD_INT 1
31046: ARRAY
31047: PPUSH
31048: LD_EXP 97
31052: PUSH
31053: LD_VAR 0 1
31057: ARRAY
31058: PUSH
31059: LD_VAR 0 2
31063: ARRAY
31064: PUSH
31065: LD_INT 2
31067: ARRAY
31068: PPUSH
31069: CALL_OW 458
31073: AND
31074: IFFALSE 31168
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31076: LD_EXP 97
31080: PUSH
31081: LD_VAR 0 1
31085: ARRAY
31086: PUSH
31087: LD_VAR 0 2
31091: ARRAY
31092: PUSH
31093: LD_INT 1
31095: ARRAY
31096: PPUSH
31097: LD_EXP 97
31101: PUSH
31102: LD_VAR 0 1
31106: ARRAY
31107: PUSH
31108: LD_VAR 0 2
31112: ARRAY
31113: PUSH
31114: LD_INT 2
31116: ARRAY
31117: PPUSH
31118: LD_VAR 0 3
31122: PPUSH
31123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31127: LD_ADDR_EXP 97
31131: PUSH
31132: LD_EXP 97
31136: PPUSH
31137: LD_VAR 0 1
31141: PPUSH
31142: LD_EXP 97
31146: PUSH
31147: LD_VAR 0 1
31151: ARRAY
31152: PPUSH
31153: LD_VAR 0 2
31157: PPUSH
31158: CALL_OW 3
31162: PPUSH
31163: CALL_OW 1
31167: ST_TO_ADDR
// end ; end ;
31168: GO 30917
31170: POP
31171: POP
// end ;
31172: GO 30835
31174: POP
31175: POP
// end ;
31176: PPOPN 4
31178: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// result := false ;
31183: LD_ADDR_VAR 0 4
31187: PUSH
31188: LD_INT 0
31190: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 264
31200: PUSH
31201: LD_INT 81
31203: EQUAL
31204: NOT
31205: IFFALSE 31209
// exit ;
31207: GO 31453
// index := GetElementIndex ( minersList , unit ) ;
31209: LD_ADDR_VAR 0 5
31213: PUSH
31214: LD_EXP 96
31218: PPUSH
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL 38423 0 2
31228: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31229: LD_EXP 97
31233: PUSH
31234: LD_VAR 0 5
31238: ARRAY
31239: PUSH
31240: LD_EXP 98
31244: GREATEREQUAL
31245: IFFALSE 31249
// exit ;
31247: GO 31453
// ComMoveXY ( unit , x , y ) ;
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 3
31263: PPUSH
31264: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31268: LD_INT 35
31270: PPUSH
31271: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31275: LD_VAR 0 1
31279: PPUSH
31280: LD_VAR 0 2
31284: PPUSH
31285: LD_VAR 0 3
31289: PPUSH
31290: CALL 70469 0 3
31294: NOT
31295: IFFALSE 31308
31297: PUSH
31298: LD_VAR 0 1
31302: PPUSH
31303: CALL_OW 314
31307: AND
31308: IFFALSE 31312
// exit ;
31310: GO 31453
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31312: LD_VAR 0 2
31316: PPUSH
31317: LD_VAR 0 3
31321: PPUSH
31322: CALL_OW 428
31326: PUSH
31327: LD_VAR 0 1
31331: EQUAL
31332: IFFALSE 31346
31334: PUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 314
31344: NOT
31345: AND
31346: IFFALSE 31268
// PlaySoundXY ( x , y , PlantMine ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 3
31357: PPUSH
31358: LD_STRING PlantMine
31360: PPUSH
31361: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31365: LD_VAR 0 2
31369: PPUSH
31370: LD_VAR 0 3
31374: PPUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 255
31384: PPUSH
31385: LD_INT 0
31387: PPUSH
31388: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31392: LD_ADDR_EXP 97
31396: PUSH
31397: LD_EXP 97
31401: PPUSH
31402: LD_VAR 0 5
31406: PUSH
31407: LD_EXP 97
31411: PUSH
31412: LD_VAR 0 5
31416: ARRAY
31417: PUSH
31418: LD_INT 1
31420: PLUS
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PPUSH
31426: LD_VAR 0 2
31430: PUSH
31431: LD_VAR 0 3
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PPUSH
31440: CALL 38640 0 3
31444: ST_TO_ADDR
// result := true ;
31445: LD_ADDR_VAR 0 4
31449: PUSH
31450: LD_INT 1
31452: ST_TO_ADDR
// end ;
31453: LD_VAR 0 4
31457: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31458: LD_INT 0
31460: PPUSH
31461: PPUSH
31462: PPUSH
// if not unit in minersList then
31463: LD_VAR 0 1
31467: PUSH
31468: LD_EXP 96
31472: IN
31473: NOT
31474: IFFALSE 31478
// exit ;
31476: GO 31872
// index := GetElementIndex ( minersList , unit ) ;
31478: LD_ADDR_VAR 0 6
31482: PUSH
31483: LD_EXP 96
31487: PPUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL 38423 0 2
31497: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31498: LD_ADDR_VAR 0 5
31502: PUSH
31503: DOUBLE
31504: LD_EXP 97
31508: PUSH
31509: LD_VAR 0 6
31513: ARRAY
31514: INC
31515: ST_TO_ADDR
31516: LD_INT 1
31518: PUSH
31519: FOR_DOWNTO
31520: IFFALSE 31683
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31522: LD_EXP 97
31526: PUSH
31527: LD_VAR 0 6
31531: ARRAY
31532: PUSH
31533: LD_VAR 0 5
31537: ARRAY
31538: PUSH
31539: LD_INT 1
31541: ARRAY
31542: PUSH
31543: LD_VAR 0 2
31547: EQUAL
31548: IFFALSE 31578
31550: PUSH
31551: LD_EXP 97
31555: PUSH
31556: LD_VAR 0 6
31560: ARRAY
31561: PUSH
31562: LD_VAR 0 5
31566: ARRAY
31567: PUSH
31568: LD_INT 2
31570: ARRAY
31571: PUSH
31572: LD_VAR 0 3
31576: EQUAL
31577: AND
31578: IFFALSE 31681
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31580: LD_EXP 97
31584: PUSH
31585: LD_VAR 0 6
31589: ARRAY
31590: PUSH
31591: LD_VAR 0 5
31595: ARRAY
31596: PUSH
31597: LD_INT 1
31599: ARRAY
31600: PPUSH
31601: LD_EXP 97
31605: PUSH
31606: LD_VAR 0 6
31610: ARRAY
31611: PUSH
31612: LD_VAR 0 5
31616: ARRAY
31617: PUSH
31618: LD_INT 2
31620: ARRAY
31621: PPUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 255
31631: PPUSH
31632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31636: LD_ADDR_EXP 97
31640: PUSH
31641: LD_EXP 97
31645: PPUSH
31646: LD_VAR 0 6
31650: PPUSH
31651: LD_EXP 97
31655: PUSH
31656: LD_VAR 0 6
31660: ARRAY
31661: PPUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: CALL_OW 3
31671: PPUSH
31672: CALL_OW 1
31676: ST_TO_ADDR
// exit ;
31677: POP
31678: POP
31679: GO 31872
// end ; end ;
31681: GO 31519
31683: POP
31684: POP
// for i := minerMinesList [ index ] downto 1 do
31685: LD_ADDR_VAR 0 5
31689: PUSH
31690: DOUBLE
31691: LD_EXP 97
31695: PUSH
31696: LD_VAR 0 6
31700: ARRAY
31701: INC
31702: ST_TO_ADDR
31703: LD_INT 1
31705: PUSH
31706: FOR_DOWNTO
31707: IFFALSE 31870
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31709: LD_EXP 97
31713: PUSH
31714: LD_VAR 0 6
31718: ARRAY
31719: PUSH
31720: LD_VAR 0 5
31724: ARRAY
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: LD_EXP 97
31734: PUSH
31735: LD_VAR 0 6
31739: ARRAY
31740: PUSH
31741: LD_VAR 0 5
31745: ARRAY
31746: PUSH
31747: LD_INT 2
31749: ARRAY
31750: PPUSH
31751: LD_VAR 0 2
31755: PPUSH
31756: LD_VAR 0 3
31760: PPUSH
31761: CALL_OW 298
31765: PUSH
31766: LD_INT 6
31768: LESS
31769: IFFALSE 31868
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31771: LD_EXP 97
31775: PUSH
31776: LD_VAR 0 6
31780: ARRAY
31781: PUSH
31782: LD_VAR 0 5
31786: ARRAY
31787: PUSH
31788: LD_INT 1
31790: ARRAY
31791: PPUSH
31792: LD_EXP 97
31796: PUSH
31797: LD_VAR 0 6
31801: ARRAY
31802: PUSH
31803: LD_VAR 0 5
31807: ARRAY
31808: PUSH
31809: LD_INT 2
31811: ARRAY
31812: PPUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 255
31822: PPUSH
31823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31827: LD_ADDR_EXP 97
31831: PUSH
31832: LD_EXP 97
31836: PPUSH
31837: LD_VAR 0 6
31841: PPUSH
31842: LD_EXP 97
31846: PUSH
31847: LD_VAR 0 6
31851: ARRAY
31852: PPUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: CALL_OW 3
31862: PPUSH
31863: CALL_OW 1
31867: ST_TO_ADDR
// end ; end ;
31868: GO 31706
31870: POP
31871: POP
// end ;
31872: LD_VAR 0 4
31876: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 264
31897: PUSH
31898: LD_INT 81
31900: EQUAL
31901: NOT
31902: IFTRUE 31917
31904: PUSH
31905: LD_VAR 0 1
31909: PUSH
31910: LD_EXP 96
31914: IN
31915: NOT
31916: OR
31917: IFFALSE 31921
// exit ;
31919: GO 32247
// index := GetElementIndex ( minersList , unit ) ;
31921: LD_ADDR_VAR 0 6
31925: PUSH
31926: LD_EXP 96
31930: PPUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL 38423 0 2
31940: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31941: LD_ADDR_VAR 0 8
31945: PUSH
31946: LD_EXP 98
31950: PUSH
31951: LD_EXP 97
31955: PUSH
31956: LD_VAR 0 6
31960: ARRAY
31961: MINUS
31962: ST_TO_ADDR
// if not minesFreeAmount then
31963: LD_VAR 0 8
31967: NOT
31968: IFFALSE 31972
// exit ;
31970: GO 32247
// tmp := [ ] ;
31972: LD_ADDR_VAR 0 7
31976: PUSH
31977: EMPTY
31978: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31979: LD_ADDR_VAR 0 5
31983: PUSH
31984: DOUBLE
31985: LD_INT 1
31987: DEC
31988: ST_TO_ADDR
31989: LD_VAR 0 8
31993: PUSH
31994: FOR_TO
31995: IFFALSE 32194
// begin _d := rand ( 0 , 5 ) ;
31997: LD_ADDR_VAR 0 11
32001: PUSH
32002: LD_INT 0
32004: PPUSH
32005: LD_INT 5
32007: PPUSH
32008: CALL_OW 12
32012: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32013: LD_ADDR_VAR 0 12
32017: PUSH
32018: LD_INT 2
32020: PPUSH
32021: LD_INT 6
32023: PPUSH
32024: CALL_OW 12
32028: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32029: LD_ADDR_VAR 0 9
32033: PUSH
32034: LD_VAR 0 2
32038: PPUSH
32039: LD_VAR 0 11
32043: PPUSH
32044: LD_VAR 0 12
32048: PPUSH
32049: CALL_OW 272
32053: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32054: LD_ADDR_VAR 0 10
32058: PUSH
32059: LD_VAR 0 3
32063: PPUSH
32064: LD_VAR 0 11
32068: PPUSH
32069: LD_VAR 0 12
32073: PPUSH
32074: CALL_OW 273
32078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32079: LD_VAR 0 9
32083: PPUSH
32084: LD_VAR 0 10
32088: PPUSH
32089: CALL_OW 488
32093: IFFALSE 32117
32095: PUSH
32096: LD_VAR 0 9
32100: PUSH
32101: LD_VAR 0 10
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_VAR 0 7
32114: IN
32115: NOT
32116: AND
32117: IFFALSE 32136
32119: PUSH
32120: LD_VAR 0 9
32124: PPUSH
32125: LD_VAR 0 10
32129: PPUSH
32130: CALL_OW 458
32134: NOT
32135: AND
32136: IFFALSE 32178
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32138: LD_ADDR_VAR 0 7
32142: PUSH
32143: LD_VAR 0 7
32147: PPUSH
32148: LD_VAR 0 7
32152: PUSH
32153: LD_INT 1
32155: PLUS
32156: PPUSH
32157: LD_VAR 0 9
32161: PUSH
32162: LD_VAR 0 10
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 1
32175: ST_TO_ADDR
32176: GO 32192
// i := i - 1 ;
32178: LD_ADDR_VAR 0 5
32182: PUSH
32183: LD_VAR 0 5
32187: PUSH
32188: LD_INT 1
32190: MINUS
32191: ST_TO_ADDR
// end ;
32192: GO 31994
32194: POP
32195: POP
// for i in tmp do
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_VAR 0 7
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32245
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32209: LD_VAR 0 1
32213: PPUSH
32214: LD_VAR 0 5
32218: PUSH
32219: LD_INT 1
32221: ARRAY
32222: PPUSH
32223: LD_VAR 0 5
32227: PUSH
32228: LD_INT 2
32230: ARRAY
32231: PPUSH
32232: CALL 31179 0 3
32236: NOT
32237: IFFALSE 32243
// exit ;
32239: POP
32240: POP
32241: GO 32247
32243: GO 32206
32245: POP
32246: POP
// end ;
32247: LD_VAR 0 4
32251: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32252: LD_INT 0
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
// if GetClass ( unit ) <> class_sniper then
32263: LD_VAR 0 1
32267: PPUSH
32268: CALL_OW 257
32272: PUSH
32273: LD_INT 5
32275: NONEQUAL
32276: IFFALSE 32280
// exit ;
32278: GO 32750
// dist := 8 ;
32280: LD_ADDR_VAR 0 5
32284: PUSH
32285: LD_INT 8
32287: ST_TO_ADDR
// viewRange := 12 ;
32288: LD_ADDR_VAR 0 8
32292: PUSH
32293: LD_INT 12
32295: ST_TO_ADDR
// side := GetSide ( unit ) ;
32296: LD_ADDR_VAR 0 6
32300: PUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 255
32310: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32311: LD_INT 61
32313: PPUSH
32314: LD_VAR 0 6
32318: PPUSH
32319: CALL_OW 321
32323: PUSH
32324: LD_INT 2
32326: EQUAL
32327: IFFALSE 32337
// viewRange := 16 ;
32329: LD_ADDR_VAR 0 8
32333: PUSH
32334: LD_INT 16
32336: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32337: LD_VAR 0 1
32341: PPUSH
32342: LD_VAR 0 2
32346: PPUSH
32347: LD_VAR 0 3
32351: PPUSH
32352: CALL_OW 297
32356: PUSH
32357: LD_VAR 0 5
32361: GREATER
32362: IFFALSE 32441
// begin ComMoveXY ( unit , x , y ) ;
32364: LD_VAR 0 1
32368: PPUSH
32369: LD_VAR 0 2
32373: PPUSH
32374: LD_VAR 0 3
32378: PPUSH
32379: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32383: LD_INT 35
32385: PPUSH
32386: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_VAR 0 2
32399: PPUSH
32400: LD_VAR 0 3
32404: PPUSH
32405: CALL 70469 0 3
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 32750
// until GetDistUnitXY ( unit , x , y ) < dist ;
32414: LD_VAR 0 1
32418: PPUSH
32419: LD_VAR 0 2
32423: PPUSH
32424: LD_VAR 0 3
32428: PPUSH
32429: CALL_OW 297
32433: PUSH
32434: LD_VAR 0 5
32438: LESS
32439: IFFALSE 32383
// end ; ComTurnXY ( unit , x , y ) ;
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: CALL_OW 118
// repeat if Multiplayer then
32460: LD_OWVAR 4
32464: IFFALSE 32475
// wait ( 35 ) else
32466: LD_INT 35
32468: PPUSH
32469: CALL_OW 67
32473: GO 32482
// wait ( 5 ) ;
32475: LD_INT 5
32477: PPUSH
32478: CALL_OW 67
// _d := GetDir ( unit ) ;
32482: LD_ADDR_VAR 0 11
32486: PUSH
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 254
32496: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32497: LD_ADDR_VAR 0 7
32501: PUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL_OW 250
32511: PPUSH
32512: LD_VAR 0 1
32516: PPUSH
32517: CALL_OW 251
32521: PPUSH
32522: LD_VAR 0 2
32526: PPUSH
32527: LD_VAR 0 3
32531: PPUSH
32532: CALL 73105 0 4
32536: ST_TO_ADDR
// until dir = _d ;
32537: LD_VAR 0 7
32541: PUSH
32542: LD_VAR 0 11
32546: EQUAL
32547: IFFALSE 32460
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32549: LD_ADDR_VAR 0 9
32553: PUSH
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 250
32563: PPUSH
32564: LD_VAR 0 7
32568: PPUSH
32569: LD_VAR 0 5
32573: PPUSH
32574: CALL_OW 272
32578: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32579: LD_ADDR_VAR 0 10
32583: PUSH
32584: LD_VAR 0 1
32588: PPUSH
32589: CALL_OW 251
32593: PPUSH
32594: LD_VAR 0 7
32598: PPUSH
32599: LD_VAR 0 5
32603: PPUSH
32604: CALL_OW 273
32608: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32609: LD_VAR 0 9
32613: PPUSH
32614: LD_VAR 0 10
32618: PPUSH
32619: CALL_OW 488
32623: NOT
32624: IFFALSE 32628
// exit ;
32626: GO 32750
// ComAnimCustom ( unit , 1 ) ;
32628: LD_VAR 0 1
32632: PPUSH
32633: LD_INT 1
32635: PPUSH
32636: CALL_OW 592
// p := 0 ;
32640: LD_ADDR_VAR 0 12
32644: PUSH
32645: LD_INT 0
32647: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32648: LD_VAR 0 9
32652: PPUSH
32653: LD_VAR 0 10
32657: PPUSH
32658: LD_VAR 0 6
32662: PPUSH
32663: LD_VAR 0 8
32667: PPUSH
32668: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32672: LD_INT 35
32674: PPUSH
32675: CALL_OW 67
// p := Inc ( p ) ;
32679: LD_ADDR_VAR 0 12
32683: PUSH
32684: LD_VAR 0 12
32688: PPUSH
32689: CALL 73061 0 1
32693: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32694: LD_VAR 0 12
32698: PUSH
32699: LD_INT 3
32701: EQUAL
32702: IFTRUE 32716
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 302
32714: NOT
32715: OR
32716: IFTRUE 32729
32718: PUSH
32719: LD_VAR 0 1
32723: PPUSH
32724: CALL_OW 301
32728: OR
32729: IFFALSE 32672
// RemoveSeeing ( _x , _y , side ) ;
32731: LD_VAR 0 9
32735: PPUSH
32736: LD_VAR 0 10
32740: PPUSH
32741: LD_VAR 0 6
32745: PPUSH
32746: CALL_OW 331
// end ;
32750: LD_VAR 0 4
32754: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32755: LD_INT 0
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
// if not unit then
32768: LD_VAR 0 1
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 33048
// side := GetSide ( unit ) ;
32777: LD_ADDR_VAR 0 3
32781: PUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 255
32791: ST_TO_ADDR
// x := GetX ( unit ) ;
32792: LD_ADDR_VAR 0 5
32796: PUSH
32797: LD_VAR 0 1
32801: PPUSH
32802: CALL_OW 250
32806: ST_TO_ADDR
// y := GetY ( unit ) ;
32807: LD_ADDR_VAR 0 6
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 251
32821: ST_TO_ADDR
// r := 8 ;
32822: LD_ADDR_VAR 0 4
32826: PUSH
32827: LD_INT 8
32829: ST_TO_ADDR
// if x - r < 0 then
32830: LD_VAR 0 5
32834: PUSH
32835: LD_VAR 0 4
32839: MINUS
32840: PUSH
32841: LD_INT 0
32843: LESS
32844: IFFALSE 32856
// min_x := 0 else
32846: LD_ADDR_VAR 0 7
32850: PUSH
32851: LD_INT 0
32853: ST_TO_ADDR
32854: GO 32872
// min_x := x - r ;
32856: LD_ADDR_VAR 0 7
32860: PUSH
32861: LD_VAR 0 5
32865: PUSH
32866: LD_VAR 0 4
32870: MINUS
32871: ST_TO_ADDR
// if y - r < 0 then
32872: LD_VAR 0 6
32876: PUSH
32877: LD_VAR 0 4
32881: MINUS
32882: PUSH
32883: LD_INT 0
32885: LESS
32886: IFFALSE 32898
// min_y := 0 else
32888: LD_ADDR_VAR 0 8
32892: PUSH
32893: LD_INT 0
32895: ST_TO_ADDR
32896: GO 32914
// min_y := y - r ;
32898: LD_ADDR_VAR 0 8
32902: PUSH
32903: LD_VAR 0 6
32907: PUSH
32908: LD_VAR 0 4
32912: MINUS
32913: ST_TO_ADDR
// max_x := x + r ;
32914: LD_ADDR_VAR 0 9
32918: PUSH
32919: LD_VAR 0 5
32923: PUSH
32924: LD_VAR 0 4
32928: PLUS
32929: ST_TO_ADDR
// max_y := y + r ;
32930: LD_ADDR_VAR 0 10
32934: PUSH
32935: LD_VAR 0 6
32939: PUSH
32940: LD_VAR 0 4
32944: PLUS
32945: ST_TO_ADDR
// for _x = min_x to max_x do
32946: LD_ADDR_VAR 0 11
32950: PUSH
32951: DOUBLE
32952: LD_VAR 0 7
32956: DEC
32957: ST_TO_ADDR
32958: LD_VAR 0 9
32962: PUSH
32963: FOR_TO
32964: IFFALSE 33046
// for _y = min_y to max_y do
32966: LD_ADDR_VAR 0 12
32970: PUSH
32971: DOUBLE
32972: LD_VAR 0 8
32976: DEC
32977: ST_TO_ADDR
32978: LD_VAR 0 10
32982: PUSH
32983: FOR_TO
32984: IFFALSE 33042
// begin if not ValidHex ( _x , _y ) then
32986: LD_VAR 0 11
32990: PPUSH
32991: LD_VAR 0 12
32995: PPUSH
32996: CALL_OW 488
33000: NOT
33001: IFFALSE 33005
// continue ;
33003: GO 32983
// if MineAtPos ( _x , _y ) then
33005: LD_VAR 0 11
33009: PPUSH
33010: LD_VAR 0 12
33014: PPUSH
33015: CALL_OW 458
33019: IFFALSE 33040
// ViewMineAtPos ( _x , _y , side ) ;
33021: LD_VAR 0 11
33025: PPUSH
33026: LD_VAR 0 12
33030: PPUSH
33031: LD_VAR 0 3
33035: PPUSH
33036: CALL_OW 457
// end ;
33040: GO 32983
33042: POP
33043: POP
33044: GO 32963
33046: POP
33047: POP
// end ;
33048: LD_VAR 0 2
33052: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
// if not units then
33061: LD_VAR 0 1
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33500
// scaners := [ ] ;
33070: LD_ADDR_VAR 0 6
33074: PUSH
33075: EMPTY
33076: ST_TO_ADDR
// for i in units do
33077: LD_ADDR_VAR 0 3
33081: PUSH
33082: LD_VAR 0 1
33086: PUSH
33087: FOR_IN
33088: IFFALSE 33245
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33090: LD_VAR 0 3
33094: PPUSH
33095: CALL_OW 264
33099: PUSH
33100: LD_INT 11
33102: NONEQUAL
33103: IFTRUE 33117
33105: PUSH
33106: LD_VAR 0 3
33110: PPUSH
33111: CALL_OW 302
33115: NOT
33116: OR
33117: IFTRUE 33134
33119: PUSH
33120: LD_VAR 0 3
33124: PPUSH
33125: CALL_OW 110
33129: PUSH
33130: LD_INT 502
33132: EQUAL
33133: OR
33134: IFFALSE 33138
// continue ;
33136: GO 33087
// ComStop ( i ) ;
33138: LD_VAR 0 3
33142: PPUSH
33143: CALL_OW 141
// x := GetX ( i ) ;
33147: LD_ADDR_VAR 0 4
33151: PUSH
33152: LD_VAR 0 3
33156: PPUSH
33157: CALL_OW 250
33161: ST_TO_ADDR
// y := GetY ( i ) ;
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: LD_VAR 0 3
33171: PPUSH
33172: CALL_OW 251
33176: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33177: LD_VAR 0 3
33181: PPUSH
33182: CALL_OW 255
33186: PUSH
33187: LD_OWVAR 2
33191: EQUAL
33192: IFFALSE 33211
// PlaySoundXY ( x , y , mineDetector ) ;
33194: LD_VAR 0 4
33198: PPUSH
33199: LD_VAR 0 5
33203: PPUSH
33204: LD_STRING mineDetector
33206: PPUSH
33207: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33211: LD_ADDR_VAR 0 6
33215: PUSH
33216: LD_VAR 0 6
33220: PPUSH
33221: LD_VAR 0 3
33225: PPUSH
33226: CALL 71688 0 2
33230: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33231: LD_VAR 0 3
33235: PPUSH
33236: LD_INT 502
33238: PPUSH
33239: CALL_OW 109
// end ;
33243: GO 33087
33245: POP
33246: POP
// if not scaners then
33247: LD_VAR 0 6
33251: NOT
33252: IFFALSE 33256
// exit ;
33254: GO 33500
// wait ( 3 ) ;
33256: LD_INT 3
33258: PPUSH
33259: CALL_OW 67
// timer := 6 ;
33263: LD_ADDR_VAR 0 7
33267: PUSH
33268: LD_INT 6
33270: ST_TO_ADDR
// repeat for i in scaners do
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_VAR 0 6
33280: PUSH
33281: FOR_IN
33282: IFFALSE 33398
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33284: LD_VAR 0 3
33288: PPUSH
33289: CALL_OW 302
33293: NOT
33294: IFTRUE 33307
33296: PUSH
33297: LD_VAR 0 3
33301: PPUSH
33302: CALL_OW 314
33306: OR
33307: IFTRUE 33338
33309: PUSH
33310: LD_VAR 0 3
33314: PPUSH
33315: CALL_OW 263
33319: PUSH
33320: LD_INT 1
33322: EQUAL
33323: IFFALSE 33337
33325: PUSH
33326: LD_VAR 0 3
33330: PPUSH
33331: CALL_OW 311
33335: NOT
33336: AND
33337: OR
33338: IFFALSE 33382
// begin SetUnitDisplayNumber ( i , 0 ) ;
33340: LD_VAR 0 3
33344: PPUSH
33345: LD_INT 0
33347: PPUSH
33348: CALL_OW 505
// SetTag ( i , 0 ) ;
33352: LD_VAR 0 3
33356: PPUSH
33357: LD_INT 0
33359: PPUSH
33360: CALL_OW 109
// scaners := scaners diff i ;
33364: LD_ADDR_VAR 0 6
33368: PUSH
33369: LD_VAR 0 6
33373: PUSH
33374: LD_VAR 0 3
33378: DIFF
33379: ST_TO_ADDR
// continue ;
33380: GO 33281
// end ; SetUnitDisplayNumber ( i , timer ) ;
33382: LD_VAR 0 3
33386: PPUSH
33387: LD_VAR 0 7
33391: PPUSH
33392: CALL_OW 505
// end ;
33396: GO 33281
33398: POP
33399: POP
// if not scaners then
33400: LD_VAR 0 6
33404: NOT
33405: IFFALSE 33409
// exit ;
33407: GO 33500
// timer := Dec ( timer ) ;
33409: LD_ADDR_VAR 0 7
33413: PUSH
33414: LD_VAR 0 7
33418: PPUSH
33419: CALL 73083 0 1
33423: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33424: LD_INT 35
33426: PPUSH
33427: CALL_OW 67
// until timer = 0 ;
33431: LD_VAR 0 7
33435: PUSH
33436: LD_INT 0
33438: EQUAL
33439: IFFALSE 33271
// if not scaners then
33441: LD_VAR 0 6
33445: NOT
33446: IFFALSE 33450
// exit ;
33448: GO 33500
// for i in scaners do
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_VAR 0 6
33459: PUSH
33460: FOR_IN
33461: IFFALSE 33498
// begin SetUnitDisplayNumber ( i , 0 ) ;
33463: LD_VAR 0 3
33467: PPUSH
33468: LD_INT 0
33470: PPUSH
33471: CALL_OW 505
// SetTag ( i , 0 ) ;
33475: LD_VAR 0 3
33479: PPUSH
33480: LD_INT 0
33482: PPUSH
33483: CALL_OW 109
// RevealDetectorMine ( i ) ;
33487: LD_VAR 0 3
33491: PPUSH
33492: CALL 32755 0 1
// end ;
33496: GO 33460
33498: POP
33499: POP
// end ;
33500: LD_VAR 0 2
33504: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33505: LD_INT 0
33507: PPUSH
// if p1 = mine_detector_mode then
33508: LD_VAR 0 2
33512: PUSH
33513: LD_INT 103
33515: EQUAL
33516: IFFALSE 33527
// DetectMine ( units ) ;
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL 33053 0 1
// end ; end_of_file
33527: LD_VAR 0 7
33531: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33532: LD_INT 0
33534: PPUSH
33535: PPUSH
// if exist_mode then
33536: LD_VAR 0 2
33540: IFFALSE 33586
// begin unit := CreateCharacter ( prefix & ident ) ;
33542: LD_ADDR_VAR 0 5
33546: PUSH
33547: LD_VAR 0 3
33551: PUSH
33552: LD_VAR 0 1
33556: STR
33557: PPUSH
33558: CALL_OW 34
33562: ST_TO_ADDR
// if unit then
33563: LD_VAR 0 5
33567: IFFALSE 33584
// DeleteCharacters ( prefix & ident ) ;
33569: LD_VAR 0 3
33573: PUSH
33574: LD_VAR 0 1
33578: STR
33579: PPUSH
33580: CALL_OW 40
// end else
33584: GO 33601
// unit := NewCharacter ( ident ) ;
33586: LD_ADDR_VAR 0 5
33590: PUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL_OW 25
33600: ST_TO_ADDR
// result := unit ;
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: LD_VAR 0 5
33610: ST_TO_ADDR
// end ;
33611: LD_VAR 0 4
33615: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33616: LD_INT 0
33618: PPUSH
33619: PPUSH
// if exist_mode then
33620: LD_VAR 0 2
33624: IFFALSE 33649
// unit := CreateCharacter ( prefix & ident ) else
33626: LD_ADDR_VAR 0 5
33630: PUSH
33631: LD_VAR 0 3
33635: PUSH
33636: LD_VAR 0 1
33640: STR
33641: PPUSH
33642: CALL_OW 34
33646: ST_TO_ADDR
33647: GO 33664
// unit := NewCharacter ( ident ) ;
33649: LD_ADDR_VAR 0 5
33653: PUSH
33654: LD_VAR 0 1
33658: PPUSH
33659: CALL_OW 25
33663: ST_TO_ADDR
// result := unit ;
33664: LD_ADDR_VAR 0 4
33668: PUSH
33669: LD_VAR 0 5
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 4
33678: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
// if not side or not nation then
33683: LD_VAR 0 1
33687: NOT
33688: IFTRUE 33697
33690: PUSH
33691: LD_VAR 0 2
33695: NOT
33696: OR
33697: IFFALSE 33701
// exit ;
33699: GO 34495
// case nation of nation_american :
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 1
33708: DOUBLE
33709: EQUAL
33710: IFTRUE 33714
33712: GO 33936
33714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33715: LD_ADDR_VAR 0 4
33719: PUSH
33720: LD_INT 35
33722: PUSH
33723: LD_INT 45
33725: PUSH
33726: LD_INT 46
33728: PUSH
33729: LD_INT 47
33731: PUSH
33732: LD_INT 82
33734: PUSH
33735: LD_INT 83
33737: PUSH
33738: LD_INT 84
33740: PUSH
33741: LD_INT 85
33743: PUSH
33744: LD_INT 86
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 6
33755: PUSH
33756: LD_INT 15
33758: PUSH
33759: LD_INT 16
33761: PUSH
33762: LD_INT 7
33764: PUSH
33765: LD_INT 12
33767: PUSH
33768: LD_INT 13
33770: PUSH
33771: LD_INT 10
33773: PUSH
33774: LD_INT 14
33776: PUSH
33777: LD_INT 20
33779: PUSH
33780: LD_INT 21
33782: PUSH
33783: LD_INT 22
33785: PUSH
33786: LD_INT 25
33788: PUSH
33789: LD_INT 32
33791: PUSH
33792: LD_INT 27
33794: PUSH
33795: LD_INT 36
33797: PUSH
33798: LD_INT 69
33800: PUSH
33801: LD_INT 39
33803: PUSH
33804: LD_INT 34
33806: PUSH
33807: LD_INT 40
33809: PUSH
33810: LD_INT 48
33812: PUSH
33813: LD_INT 49
33815: PUSH
33816: LD_INT 50
33818: PUSH
33819: LD_INT 51
33821: PUSH
33822: LD_INT 52
33824: PUSH
33825: LD_INT 53
33827: PUSH
33828: LD_INT 54
33830: PUSH
33831: LD_INT 55
33833: PUSH
33834: LD_INT 56
33836: PUSH
33837: LD_INT 57
33839: PUSH
33840: LD_INT 58
33842: PUSH
33843: LD_INT 59
33845: PUSH
33846: LD_INT 60
33848: PUSH
33849: LD_INT 61
33851: PUSH
33852: LD_INT 62
33854: PUSH
33855: LD_INT 80
33857: PUSH
33858: LD_INT 82
33860: PUSH
33861: LD_INT 83
33863: PUSH
33864: LD_INT 84
33866: PUSH
33867: LD_INT 85
33869: PUSH
33870: LD_INT 86
33872: PUSH
33873: LD_INT 90
33875: PUSH
33876: LD_INT 93
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
33934: GO 34417
33936: LD_INT 2
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 34178
33944: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33945: LD_ADDR_VAR 0 4
33949: PUSH
33950: LD_INT 35
33952: PUSH
33953: LD_INT 45
33955: PUSH
33956: LD_INT 46
33958: PUSH
33959: LD_INT 47
33961: PUSH
33962: LD_INT 82
33964: PUSH
33965: LD_INT 83
33967: PUSH
33968: LD_INT 84
33970: PUSH
33971: LD_INT 85
33973: PUSH
33974: LD_INT 87
33976: PUSH
33977: LD_INT 70
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 11
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: LD_INT 6
33997: PUSH
33998: LD_INT 15
34000: PUSH
34001: LD_INT 18
34003: PUSH
34004: LD_INT 7
34006: PUSH
34007: LD_INT 17
34009: PUSH
34010: LD_INT 8
34012: PUSH
34013: LD_INT 20
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 22
34021: PUSH
34022: LD_INT 72
34024: PUSH
34025: LD_INT 26
34027: PUSH
34028: LD_INT 69
34030: PUSH
34031: LD_INT 39
34033: PUSH
34034: LD_INT 40
34036: PUSH
34037: LD_INT 41
34039: PUSH
34040: LD_INT 42
34042: PUSH
34043: LD_INT 43
34045: PUSH
34046: LD_INT 48
34048: PUSH
34049: LD_INT 49
34051: PUSH
34052: LD_INT 50
34054: PUSH
34055: LD_INT 51
34057: PUSH
34058: LD_INT 52
34060: PUSH
34061: LD_INT 53
34063: PUSH
34064: LD_INT 54
34066: PUSH
34067: LD_INT 55
34069: PUSH
34070: LD_INT 56
34072: PUSH
34073: LD_INT 60
34075: PUSH
34076: LD_INT 61
34078: PUSH
34079: LD_INT 62
34081: PUSH
34082: LD_INT 66
34084: PUSH
34085: LD_INT 67
34087: PUSH
34088: LD_INT 68
34090: PUSH
34091: LD_INT 81
34093: PUSH
34094: LD_INT 82
34096: PUSH
34097: LD_INT 83
34099: PUSH
34100: LD_INT 84
34102: PUSH
34103: LD_INT 85
34105: PUSH
34106: LD_INT 87
34108: PUSH
34109: LD_INT 88
34111: PUSH
34112: LD_INT 92
34114: PUSH
34115: LD_INT 94
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
34176: GO 34417
34178: LD_INT 3
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34416
34186: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34187: LD_ADDR_VAR 0 4
34191: PUSH
34192: LD_INT 46
34194: PUSH
34195: LD_INT 47
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 82
34206: PUSH
34207: LD_INT 83
34209: PUSH
34210: LD_INT 84
34212: PUSH
34213: LD_INT 85
34215: PUSH
34216: LD_INT 86
34218: PUSH
34219: LD_INT 11
34221: PUSH
34222: LD_INT 9
34224: PUSH
34225: LD_INT 20
34227: PUSH
34228: LD_INT 19
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 24
34236: PUSH
34237: LD_INT 22
34239: PUSH
34240: LD_INT 25
34242: PUSH
34243: LD_INT 28
34245: PUSH
34246: LD_INT 29
34248: PUSH
34249: LD_INT 30
34251: PUSH
34252: LD_INT 31
34254: PUSH
34255: LD_INT 37
34257: PUSH
34258: LD_INT 38
34260: PUSH
34261: LD_INT 32
34263: PUSH
34264: LD_INT 27
34266: PUSH
34267: LD_INT 33
34269: PUSH
34270: LD_INT 69
34272: PUSH
34273: LD_INT 39
34275: PUSH
34276: LD_INT 34
34278: PUSH
34279: LD_INT 40
34281: PUSH
34282: LD_INT 71
34284: PUSH
34285: LD_INT 23
34287: PUSH
34288: LD_INT 44
34290: PUSH
34291: LD_INT 48
34293: PUSH
34294: LD_INT 49
34296: PUSH
34297: LD_INT 50
34299: PUSH
34300: LD_INT 51
34302: PUSH
34303: LD_INT 52
34305: PUSH
34306: LD_INT 53
34308: PUSH
34309: LD_INT 54
34311: PUSH
34312: LD_INT 55
34314: PUSH
34315: LD_INT 56
34317: PUSH
34318: LD_INT 57
34320: PUSH
34321: LD_INT 58
34323: PUSH
34324: LD_INT 59
34326: PUSH
34327: LD_INT 63
34329: PUSH
34330: LD_INT 64
34332: PUSH
34333: LD_INT 65
34335: PUSH
34336: LD_INT 82
34338: PUSH
34339: LD_INT 83
34341: PUSH
34342: LD_INT 84
34344: PUSH
34345: LD_INT 85
34347: PUSH
34348: LD_INT 86
34350: PUSH
34351: LD_INT 89
34353: PUSH
34354: LD_INT 91
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
34414: GO 34417
34416: POP
// if state > - 1 and state < 3 then
34417: LD_VAR 0 3
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: GREATER
34426: IFFALSE 34438
34428: PUSH
34429: LD_VAR 0 3
34433: PUSH
34434: LD_INT 3
34436: LESS
34437: AND
34438: IFFALSE 34495
// for i in result do
34440: LD_ADDR_VAR 0 5
34444: PUSH
34445: LD_VAR 0 4
34449: PUSH
34450: FOR_IN
34451: IFFALSE 34493
// if GetTech ( i , side ) <> state then
34453: LD_VAR 0 5
34457: PPUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 321
34467: PUSH
34468: LD_VAR 0 3
34472: NONEQUAL
34473: IFFALSE 34491
// result := result diff i ;
34475: LD_ADDR_VAR 0 4
34479: PUSH
34480: LD_VAR 0 4
34484: PUSH
34485: LD_VAR 0 5
34489: DIFF
34490: ST_TO_ADDR
34491: GO 34450
34493: POP
34494: POP
// end ;
34495: LD_VAR 0 4
34499: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34500: LD_INT 0
34502: PPUSH
34503: PPUSH
34504: PPUSH
// result := true ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_INT 1
34512: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34513: LD_ADDR_VAR 0 5
34517: PUSH
34518: LD_VAR 0 2
34522: PPUSH
34523: CALL_OW 480
34527: ST_TO_ADDR
// if not tmp then
34528: LD_VAR 0 5
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34586
// for i in tmp do
34537: LD_ADDR_VAR 0 4
34541: PUSH
34542: LD_VAR 0 5
34546: PUSH
34547: FOR_IN
34548: IFFALSE 34584
// if GetTech ( i , side ) <> state_researched then
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 321
34564: PUSH
34565: LD_INT 2
34567: NONEQUAL
34568: IFFALSE 34582
// begin result := false ;
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: LD_INT 0
34577: ST_TO_ADDR
// exit ;
34578: POP
34579: POP
34580: GO 34586
// end ;
34582: GO 34547
34584: POP
34585: POP
// end ;
34586: LD_VAR 0 3
34590: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34591: LD_INT 0
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
34604: PPUSH
34605: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34606: LD_VAR 0 1
34610: NOT
34611: IFTRUE 34628
34613: PUSH
34614: LD_VAR 0 1
34618: PPUSH
34619: CALL_OW 257
34623: PUSH
34624: LD_INT 9
34626: NONEQUAL
34627: OR
34628: IFFALSE 34632
// exit ;
34630: GO 35211
// side := GetSide ( unit ) ;
34632: LD_ADDR_VAR 0 9
34636: PUSH
34637: LD_VAR 0 1
34641: PPUSH
34642: CALL_OW 255
34646: ST_TO_ADDR
// tech_space := tech_spacanom ;
34647: LD_ADDR_VAR 0 12
34651: PUSH
34652: LD_INT 29
34654: ST_TO_ADDR
// tech_time := tech_taurad ;
34655: LD_ADDR_VAR 0 13
34659: PUSH
34660: LD_INT 28
34662: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34663: LD_ADDR_VAR 0 11
34667: PUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 310
34677: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34678: LD_VAR 0 11
34682: PPUSH
34683: CALL_OW 247
34687: PUSH
34688: LD_INT 2
34690: EQUAL
34691: IFFALSE 34695
// exit ;
34693: GO 35211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34695: LD_ADDR_VAR 0 8
34699: PUSH
34700: LD_INT 81
34702: PUSH
34703: LD_VAR 0 9
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 3
34714: PUSH
34715: LD_INT 21
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PPUSH
34733: CALL_OW 69
34737: ST_TO_ADDR
// if not tmp then
34738: LD_VAR 0 8
34742: NOT
34743: IFFALSE 34747
// exit ;
34745: GO 35211
// if in_unit then
34747: LD_VAR 0 11
34751: IFFALSE 34775
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34753: LD_ADDR_VAR 0 10
34757: PUSH
34758: LD_VAR 0 8
34762: PPUSH
34763: LD_VAR 0 11
34767: PPUSH
34768: CALL_OW 74
34772: ST_TO_ADDR
34773: GO 34795
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34775: LD_ADDR_VAR 0 10
34779: PUSH
34780: LD_VAR 0 8
34784: PPUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 74
34794: ST_TO_ADDR
// if not enemy then
34795: LD_VAR 0 10
34799: NOT
34800: IFFALSE 34804
// exit ;
34802: GO 35211
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34804: LD_VAR 0 11
34808: IFFALSE 34830
34810: PUSH
34811: LD_VAR 0 11
34815: PPUSH
34816: LD_VAR 0 10
34820: PPUSH
34821: CALL_OW 296
34825: PUSH
34826: LD_INT 13
34828: GREATER
34829: AND
34830: IFTRUE 34852
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_VAR 0 10
34842: PPUSH
34843: CALL_OW 296
34847: PUSH
34848: LD_INT 12
34850: GREATER
34851: OR
34852: IFFALSE 34856
// exit ;
34854: GO 35211
// missile := [ 1 ] ;
34856: LD_ADDR_VAR 0 14
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34867: LD_VAR 0 9
34871: PPUSH
34872: LD_VAR 0 12
34876: PPUSH
34877: CALL_OW 325
34881: IFFALSE 34910
// missile := Replace ( missile , missile + 1 , 2 ) ;
34883: LD_ADDR_VAR 0 14
34887: PUSH
34888: LD_VAR 0 14
34892: PPUSH
34893: LD_VAR 0 14
34897: PUSH
34898: LD_INT 1
34900: PLUS
34901: PPUSH
34902: LD_INT 2
34904: PPUSH
34905: CALL_OW 1
34909: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34910: LD_VAR 0 9
34914: PPUSH
34915: LD_VAR 0 13
34919: PPUSH
34920: CALL_OW 325
34924: IFFALSE 34948
34926: PUSH
34927: LD_VAR 0 10
34931: PPUSH
34932: CALL_OW 255
34936: PPUSH
34937: LD_VAR 0 13
34941: PPUSH
34942: CALL_OW 325
34946: NOT
34947: AND
34948: IFFALSE 34977
// missile := Replace ( missile , missile + 1 , 3 ) ;
34950: LD_ADDR_VAR 0 14
34954: PUSH
34955: LD_VAR 0 14
34959: PPUSH
34960: LD_VAR 0 14
34964: PUSH
34965: LD_INT 1
34967: PLUS
34968: PPUSH
34969: LD_INT 3
34971: PPUSH
34972: CALL_OW 1
34976: ST_TO_ADDR
// if missile < 2 then
34977: LD_VAR 0 14
34981: PUSH
34982: LD_INT 2
34984: LESS
34985: IFFALSE 34989
// exit ;
34987: GO 35211
// x := GetX ( enemy ) ;
34989: LD_ADDR_VAR 0 4
34993: PUSH
34994: LD_VAR 0 10
34998: PPUSH
34999: CALL_OW 250
35003: ST_TO_ADDR
// y := GetY ( enemy ) ;
35004: LD_ADDR_VAR 0 5
35008: PUSH
35009: LD_VAR 0 10
35013: PPUSH
35014: CALL_OW 251
35018: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35019: LD_ADDR_VAR 0 6
35023: PUSH
35024: LD_VAR 0 4
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PPUSH
35033: LD_INT 1
35035: PPUSH
35036: CALL_OW 12
35040: PLUS
35041: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35042: LD_ADDR_VAR 0 7
35046: PUSH
35047: LD_VAR 0 5
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PPUSH
35056: LD_INT 1
35058: PPUSH
35059: CALL_OW 12
35063: PLUS
35064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35065: LD_VAR 0 6
35069: PPUSH
35070: LD_VAR 0 7
35074: PPUSH
35075: CALL_OW 488
35079: NOT
35080: IFFALSE 35102
// begin _x := x ;
35082: LD_ADDR_VAR 0 6
35086: PUSH
35087: LD_VAR 0 4
35091: ST_TO_ADDR
// _y := y ;
35092: LD_ADDR_VAR 0 7
35096: PUSH
35097: LD_VAR 0 5
35101: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35102: LD_ADDR_VAR 0 3
35106: PUSH
35107: LD_INT 1
35109: PPUSH
35110: LD_VAR 0 14
35114: PPUSH
35115: CALL_OW 12
35119: ST_TO_ADDR
// case i of 1 :
35120: LD_VAR 0 3
35124: PUSH
35125: LD_INT 1
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35150
35133: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_VAR 0 10
35143: PPUSH
35144: CALL_OW 115
35148: GO 35211
35150: LD_INT 2
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35180
35158: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35159: LD_VAR 0 1
35163: PPUSH
35164: LD_VAR 0 6
35168: PPUSH
35169: LD_VAR 0 7
35173: PPUSH
35174: CALL_OW 153
35178: GO 35211
35180: LD_INT 3
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35210
35188: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35189: LD_VAR 0 1
35193: PPUSH
35194: LD_VAR 0 6
35198: PPUSH
35199: LD_VAR 0 7
35203: PPUSH
35204: CALL_OW 154
35208: GO 35211
35210: POP
// end ;
35211: LD_VAR 0 2
35215: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35216: LD_INT 0
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
// if not unit or not building then
35224: LD_VAR 0 1
35228: NOT
35229: IFTRUE 35238
35231: PUSH
35232: LD_VAR 0 2
35236: NOT
35237: OR
35238: IFFALSE 35242
// exit ;
35240: GO 35400
// x := GetX ( building ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_VAR 0 2
35251: PPUSH
35252: CALL_OW 250
35256: ST_TO_ADDR
// y := GetY ( building ) ;
35257: LD_ADDR_VAR 0 6
35261: PUSH
35262: LD_VAR 0 2
35266: PPUSH
35267: CALL_OW 251
35271: ST_TO_ADDR
// for i := 0 to 5 do
35272: LD_ADDR_VAR 0 4
35276: PUSH
35277: DOUBLE
35278: LD_INT 0
35280: DEC
35281: ST_TO_ADDR
35282: LD_INT 5
35284: PUSH
35285: FOR_TO
35286: IFFALSE 35398
// begin _x := ShiftX ( x , i , 3 ) ;
35288: LD_ADDR_VAR 0 7
35292: PUSH
35293: LD_VAR 0 5
35297: PPUSH
35298: LD_VAR 0 4
35302: PPUSH
35303: LD_INT 3
35305: PPUSH
35306: CALL_OW 272
35310: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35311: LD_ADDR_VAR 0 8
35315: PUSH
35316: LD_VAR 0 6
35320: PPUSH
35321: LD_VAR 0 4
35325: PPUSH
35326: LD_INT 3
35328: PPUSH
35329: CALL_OW 273
35333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35334: LD_VAR 0 7
35338: PPUSH
35339: LD_VAR 0 8
35343: PPUSH
35344: CALL_OW 488
35348: NOT
35349: IFFALSE 35353
// continue ;
35351: GO 35285
// if HexInfo ( _x , _y ) = 0 then
35353: LD_VAR 0 7
35357: PPUSH
35358: LD_VAR 0 8
35362: PPUSH
35363: CALL_OW 428
35367: PUSH
35368: LD_INT 0
35370: EQUAL
35371: IFFALSE 35396
// begin ComMoveXY ( unit , _x , _y ) ;
35373: LD_VAR 0 1
35377: PPUSH
35378: LD_VAR 0 7
35382: PPUSH
35383: LD_VAR 0 8
35387: PPUSH
35388: CALL_OW 111
// exit ;
35392: POP
35393: POP
35394: GO 35400
// end ; end ;
35396: GO 35285
35398: POP
35399: POP
// end ;
35400: LD_VAR 0 3
35404: RET
// export function ScanBase ( side , base_area ) ; begin
35405: LD_INT 0
35407: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_VAR 0 2
35417: PPUSH
35418: LD_INT 81
35420: PUSH
35421: LD_VAR 0 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PPUSH
35430: CALL_OW 70
35434: ST_TO_ADDR
// end ;
35435: LD_VAR 0 3
35439: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
// result := false ;
35446: LD_ADDR_VAR 0 2
35450: PUSH
35451: LD_INT 0
35453: ST_TO_ADDR
// side := GetSide ( unit ) ;
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: CALL_OW 255
35468: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35469: LD_ADDR_VAR 0 4
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: CALL_OW 248
35483: ST_TO_ADDR
// case nat of 1 :
35484: LD_VAR 0 4
35488: PUSH
35489: LD_INT 1
35491: DOUBLE
35492: EQUAL
35493: IFTRUE 35497
35495: GO 35508
35497: POP
// tech := tech_lassight ; 2 :
35498: LD_ADDR_VAR 0 5
35502: PUSH
35503: LD_INT 12
35505: ST_TO_ADDR
35506: GO 35547
35508: LD_INT 2
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35516
35514: GO 35527
35516: POP
// tech := tech_mortar ; 3 :
35517: LD_ADDR_VAR 0 5
35521: PUSH
35522: LD_INT 41
35524: ST_TO_ADDR
35525: GO 35547
35527: LD_INT 3
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35546
35535: POP
// tech := tech_bazooka ; end ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_INT 44
35543: ST_TO_ADDR
35544: GO 35547
35546: POP
// if Researched ( side , tech ) then
35547: LD_VAR 0 3
35551: PPUSH
35552: LD_VAR 0 5
35556: PPUSH
35557: CALL_OW 325
35561: IFFALSE 35588
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35563: LD_ADDR_VAR 0 2
35567: PUSH
35568: LD_INT 5
35570: PUSH
35571: LD_INT 8
35573: PUSH
35574: LD_INT 9
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: PUSH
35582: LD_VAR 0 4
35586: ARRAY
35587: ST_TO_ADDR
// end ;
35588: LD_VAR 0 2
35592: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35593: LD_INT 0
35595: PPUSH
35596: PPUSH
35597: PPUSH
// if not mines then
35598: LD_VAR 0 2
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 35751
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35607: LD_ADDR_VAR 0 5
35611: PUSH
35612: LD_INT 81
35614: PUSH
35615: LD_VAR 0 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: LD_INT 21
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PPUSH
35645: CALL_OW 69
35649: ST_TO_ADDR
// for i in mines do
35650: LD_ADDR_VAR 0 4
35654: PUSH
35655: LD_VAR 0 2
35659: PUSH
35660: FOR_IN
35661: IFFALSE 35749
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35663: LD_VAR 0 4
35667: PUSH
35668: LD_INT 1
35670: ARRAY
35671: PPUSH
35672: LD_VAR 0 4
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: PPUSH
35681: CALL_OW 458
35685: NOT
35686: IFFALSE 35690
// continue ;
35688: GO 35660
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35690: LD_VAR 0 4
35694: PUSH
35695: LD_INT 1
35697: ARRAY
35698: PPUSH
35699: LD_VAR 0 4
35703: PUSH
35704: LD_INT 2
35706: ARRAY
35707: PPUSH
35708: CALL_OW 428
35712: PUSH
35713: LD_VAR 0 5
35717: IN
35718: IFFALSE 35747
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35720: LD_VAR 0 4
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: PPUSH
35729: LD_VAR 0 4
35733: PUSH
35734: LD_INT 2
35736: ARRAY
35737: PPUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 456
// end ;
35747: GO 35660
35749: POP
35750: POP
// end ;
35751: LD_VAR 0 3
35755: RET
// export function Count ( array ) ; begin
35756: LD_INT 0
35758: PPUSH
// result := array + 0 ;
35759: LD_ADDR_VAR 0 2
35763: PUSH
35764: LD_VAR 0 1
35768: PUSH
35769: LD_INT 0
35771: PLUS
35772: ST_TO_ADDR
// end ;
35773: LD_VAR 0 2
35777: RET
// export function IsEmpty ( building ) ; begin
35778: LD_INT 0
35780: PPUSH
// if not building then
35781: LD_VAR 0 1
35785: NOT
35786: IFFALSE 35790
// exit ;
35788: GO 35833
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35790: LD_ADDR_VAR 0 2
35794: PUSH
35795: LD_VAR 0 1
35799: PUSH
35800: LD_INT 22
35802: PUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 255
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 58
35819: PUSH
35820: EMPTY
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PPUSH
35827: CALL_OW 69
35831: IN
35832: ST_TO_ADDR
// end ;
35833: LD_VAR 0 2
35837: RET
// export function IsNotFull ( building ) ; var places ; begin
35838: LD_INT 0
35840: PPUSH
35841: PPUSH
// if not building then
35842: LD_VAR 0 1
35846: NOT
35847: IFFALSE 35851
// exit ;
35849: GO 35879
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35851: LD_ADDR_VAR 0 2
35855: PUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: LD_INT 3
35863: PUSH
35864: LD_INT 62
35866: PUSH
35867: EMPTY
35868: LIST
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PPUSH
35874: CALL_OW 72
35878: ST_TO_ADDR
// end ;
35879: LD_VAR 0 2
35883: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35884: LD_INT 0
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
// tmp := [ ] ;
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: EMPTY
35896: ST_TO_ADDR
// list := [ ] ;
35897: LD_ADDR_VAR 0 5
35901: PUSH
35902: EMPTY
35903: ST_TO_ADDR
// for i = 16 to 25 do
35904: LD_ADDR_VAR 0 4
35908: PUSH
35909: DOUBLE
35910: LD_INT 16
35912: DEC
35913: ST_TO_ADDR
35914: LD_INT 25
35916: PUSH
35917: FOR_TO
35918: IFFALSE 35991
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_INT 22
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 91
35949: PUSH
35950: LD_VAR 0 1
35954: PUSH
35955: LD_INT 6
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 30
35965: PUSH
35966: LD_VAR 0 4
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: PUSH
35980: EMPTY
35981: LIST
35982: PPUSH
35983: CALL_OW 69
35987: ADD
35988: ST_TO_ADDR
35989: GO 35917
35991: POP
35992: POP
// for i = 1 to tmp do
35993: LD_ADDR_VAR 0 4
35997: PUSH
35998: DOUBLE
35999: LD_INT 1
36001: DEC
36002: ST_TO_ADDR
36003: LD_VAR 0 3
36007: PUSH
36008: FOR_TO
36009: IFFALSE 36097
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36011: LD_ADDR_VAR 0 5
36015: PUSH
36016: LD_VAR 0 5
36020: PUSH
36021: LD_VAR 0 3
36025: PUSH
36026: LD_VAR 0 4
36030: ARRAY
36031: PPUSH
36032: CALL_OW 266
36036: PUSH
36037: LD_VAR 0 3
36041: PUSH
36042: LD_VAR 0 4
36046: ARRAY
36047: PPUSH
36048: CALL_OW 250
36052: PUSH
36053: LD_VAR 0 3
36057: PUSH
36058: LD_VAR 0 4
36062: ARRAY
36063: PPUSH
36064: CALL_OW 251
36068: PUSH
36069: LD_VAR 0 3
36073: PUSH
36074: LD_VAR 0 4
36078: ARRAY
36079: PPUSH
36080: CALL_OW 254
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: ADD
36094: ST_TO_ADDR
36095: GO 36008
36097: POP
36098: POP
// result := list ;
36099: LD_ADDR_VAR 0 2
36103: PUSH
36104: LD_VAR 0 5
36108: ST_TO_ADDR
// end ;
36109: LD_VAR 0 2
36113: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36114: LD_INT 0
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
// if not factory then
36123: LD_VAR 0 1
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36735
// if control = control_apeman then
36132: LD_VAR 0 4
36136: PUSH
36137: LD_INT 5
36139: EQUAL
36140: IFFALSE 36249
// begin tmp := UnitsInside ( factory ) ;
36142: LD_ADDR_VAR 0 8
36146: PUSH
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 313
36156: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36157: LD_VAR 0 8
36161: PPUSH
36162: LD_INT 25
36164: PUSH
36165: LD_INT 12
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PPUSH
36172: CALL_OW 72
36176: NOT
36177: IFFALSE 36187
// control := control_manual ;
36179: LD_ADDR_VAR 0 4
36183: PUSH
36184: LD_INT 1
36186: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36187: LD_ADDR_VAR 0 8
36191: PUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL 35884 0 1
36201: ST_TO_ADDR
// if tmp then
36202: LD_VAR 0 8
36206: IFFALSE 36249
// begin for i in tmp do
36208: LD_ADDR_VAR 0 7
36212: PUSH
36213: LD_VAR 0 8
36217: PUSH
36218: FOR_IN
36219: IFFALSE 36247
// if i [ 1 ] = b_ext_radio then
36221: LD_VAR 0 7
36225: PUSH
36226: LD_INT 1
36228: ARRAY
36229: PUSH
36230: LD_INT 22
36232: EQUAL
36233: IFFALSE 36245
// begin control := control_remote ;
36235: LD_ADDR_VAR 0 4
36239: PUSH
36240: LD_INT 2
36242: ST_TO_ADDR
// break ;
36243: GO 36247
// end ;
36245: GO 36218
36247: POP
36248: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36249: LD_VAR 0 1
36253: PPUSH
36254: LD_VAR 0 2
36258: PPUSH
36259: LD_VAR 0 3
36263: PPUSH
36264: LD_VAR 0 4
36268: PPUSH
36269: LD_VAR 0 5
36273: PPUSH
36274: CALL_OW 448
36278: IFFALSE 36313
// begin result := [ chassis , engine , control , weapon ] ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_VAR 0 2
36289: PUSH
36290: LD_VAR 0 3
36294: PUSH
36295: LD_VAR 0 4
36299: PUSH
36300: LD_VAR 0 5
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
// exit ;
36311: GO 36735
// end ; _chassis := AvailableChassisList ( factory ) ;
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 475
36327: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36328: LD_ADDR_VAR 0 11
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL_OW 476
36342: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36343: LD_ADDR_VAR 0 12
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 477
36357: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36358: LD_ADDR_VAR 0 10
36362: PUSH
36363: LD_VAR 0 1
36367: PPUSH
36368: CALL_OW 478
36372: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36373: LD_VAR 0 9
36377: NOT
36378: IFTRUE 36387
36380: PUSH
36381: LD_VAR 0 11
36385: NOT
36386: OR
36387: IFTRUE 36396
36389: PUSH
36390: LD_VAR 0 12
36394: NOT
36395: OR
36396: IFTRUE 36405
36398: PUSH
36399: LD_VAR 0 10
36403: NOT
36404: OR
36405: IFFALSE 36440
// begin result := [ chassis , engine , control , weapon ] ;
36407: LD_ADDR_VAR 0 6
36411: PUSH
36412: LD_VAR 0 2
36416: PUSH
36417: LD_VAR 0 3
36421: PUSH
36422: LD_VAR 0 4
36426: PUSH
36427: LD_VAR 0 5
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// exit ;
36438: GO 36735
// end ; if not chassis in _chassis then
36440: LD_VAR 0 2
36444: PUSH
36445: LD_VAR 0 9
36449: IN
36450: NOT
36451: IFFALSE 36477
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36453: LD_ADDR_VAR 0 2
36457: PUSH
36458: LD_VAR 0 9
36462: PUSH
36463: LD_INT 1
36465: PPUSH
36466: LD_VAR 0 9
36470: PPUSH
36471: CALL_OW 12
36475: ARRAY
36476: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 3
36486: PPUSH
36487: CALL 36740 0 2
36491: NOT
36492: IFFALSE 36553
// repeat engine := _engine [ 1 ] ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_VAR 0 11
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36508: LD_ADDR_VAR 0 11
36512: PUSH
36513: LD_VAR 0 11
36517: PPUSH
36518: LD_INT 1
36520: PPUSH
36521: CALL_OW 3
36525: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36526: LD_VAR 0 2
36530: PPUSH
36531: LD_VAR 0 3
36535: PPUSH
36536: CALL 36740 0 2
36540: IFTRUE 36551
36542: PUSH
36543: LD_VAR 0 11
36547: PUSH
36548: EMPTY
36549: EQUAL
36550: OR
36551: IFFALSE 36494
// if not control in _control then
36553: LD_VAR 0 4
36557: PUSH
36558: LD_VAR 0 12
36562: IN
36563: NOT
36564: IFFALSE 36590
// control := _control [ rand ( 1 , _control ) ] ;
36566: LD_ADDR_VAR 0 4
36570: PUSH
36571: LD_VAR 0 12
36575: PUSH
36576: LD_INT 1
36578: PPUSH
36579: LD_VAR 0 12
36583: PPUSH
36584: CALL_OW 12
36588: ARRAY
36589: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36590: LD_VAR 0 2
36594: PPUSH
36595: LD_VAR 0 5
36599: PPUSH
36600: CALL 36962 0 2
36604: NOT
36605: IFFALSE 36666
// repeat weapon := _weapon [ 1 ] ;
36607: LD_ADDR_VAR 0 5
36611: PUSH
36612: LD_VAR 0 10
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36621: LD_ADDR_VAR 0 10
36625: PUSH
36626: LD_VAR 0 10
36630: PPUSH
36631: LD_INT 1
36633: PPUSH
36634: CALL_OW 3
36638: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36639: LD_VAR 0 2
36643: PPUSH
36644: LD_VAR 0 5
36648: PPUSH
36649: CALL 36962 0 2
36653: IFTRUE 36664
36655: PUSH
36656: LD_VAR 0 10
36660: PUSH
36661: EMPTY
36662: EQUAL
36663: OR
36664: IFFALSE 36607
// result := [ ] ;
36666: LD_ADDR_VAR 0 6
36670: PUSH
36671: EMPTY
36672: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36673: LD_VAR 0 1
36677: PPUSH
36678: LD_VAR 0 2
36682: PPUSH
36683: LD_VAR 0 3
36687: PPUSH
36688: LD_VAR 0 4
36692: PPUSH
36693: LD_VAR 0 5
36697: PPUSH
36698: CALL_OW 448
36702: IFFALSE 36735
// result := [ chassis , engine , control , weapon ] ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_VAR 0 2
36713: PUSH
36714: LD_VAR 0 3
36718: PUSH
36719: LD_VAR 0 4
36723: PUSH
36724: LD_VAR 0 5
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// end ;
36735: LD_VAR 0 6
36739: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36740: LD_INT 0
36742: PPUSH
// if not chassis or not engine then
36743: LD_VAR 0 1
36747: NOT
36748: IFTRUE 36757
36750: PUSH
36751: LD_VAR 0 2
36755: NOT
36756: OR
36757: IFFALSE 36761
// exit ;
36759: GO 36957
// case engine of engine_solar :
36761: LD_VAR 0 2
36765: PUSH
36766: LD_INT 2
36768: DOUBLE
36769: EQUAL
36770: IFTRUE 36774
36772: GO 36812
36774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36775: LD_ADDR_VAR 0 3
36779: PUSH
36780: LD_INT 11
36782: PUSH
36783: LD_INT 12
36785: PUSH
36786: LD_INT 13
36788: PUSH
36789: LD_INT 14
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
36810: GO 36941
36812: LD_INT 1
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36882
36820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36821: LD_ADDR_VAR 0 3
36825: PUSH
36826: LD_INT 11
36828: PUSH
36829: LD_INT 12
36831: PUSH
36832: LD_INT 13
36834: PUSH
36835: LD_INT 14
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: LD_INT 3
36846: PUSH
36847: LD_INT 4
36849: PUSH
36850: LD_INT 5
36852: PUSH
36853: LD_INT 21
36855: PUSH
36856: LD_INT 23
36858: PUSH
36859: LD_INT 22
36861: PUSH
36862: LD_INT 24
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
36880: GO 36941
36882: LD_INT 3
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36890
36888: GO 36940
36890: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36891: LD_ADDR_VAR 0 3
36895: PUSH
36896: LD_INT 13
36898: PUSH
36899: LD_INT 14
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: LD_INT 4
36910: PUSH
36911: LD_INT 5
36913: PUSH
36914: LD_INT 21
36916: PUSH
36917: LD_INT 22
36919: PUSH
36920: LD_INT 23
36922: PUSH
36923: LD_INT 24
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
36938: GO 36941
36940: POP
// result := ( chassis in result ) ;
36941: LD_ADDR_VAR 0 3
36945: PUSH
36946: LD_VAR 0 1
36950: PUSH
36951: LD_VAR 0 3
36955: IN
36956: ST_TO_ADDR
// end ;
36957: LD_VAR 0 3
36961: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36962: LD_INT 0
36964: PPUSH
// if not chassis or not weapon then
36965: LD_VAR 0 1
36969: NOT
36970: IFTRUE 36979
36972: PUSH
36973: LD_VAR 0 2
36977: NOT
36978: OR
36979: IFFALSE 36983
// exit ;
36981: GO 38043
// case weapon of us_machine_gun :
36983: LD_VAR 0 2
36987: PUSH
36988: LD_INT 2
36990: DOUBLE
36991: EQUAL
36992: IFTRUE 36996
36994: GO 37026
36996: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 3
37010: PUSH
37011: LD_INT 4
37013: PUSH
37014: LD_INT 5
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
37024: GO 38027
37026: LD_INT 3
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37064
37034: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37035: LD_ADDR_VAR 0 3
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 4
37051: PUSH
37052: LD_INT 5
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
37062: GO 38027
37064: LD_INT 11
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37102
37072: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37073: LD_ADDR_VAR 0 3
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: LD_INT 4
37089: PUSH
37090: LD_INT 5
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
37100: GO 38027
37102: LD_INT 4
37104: DOUBLE
37105: EQUAL
37106: IFTRUE 37110
37108: GO 37136
37110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37111: LD_ADDR_VAR 0 3
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: LD_INT 4
37124: PUSH
37125: LD_INT 5
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: ST_TO_ADDR
37134: GO 38027
37136: LD_INT 5
37138: DOUBLE
37139: EQUAL
37140: IFTRUE 37144
37142: GO 37170
37144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37145: LD_ADDR_VAR 0 3
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: LD_INT 4
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
37168: GO 38027
37170: LD_INT 9
37172: DOUBLE
37173: EQUAL
37174: IFTRUE 37178
37176: GO 37204
37178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 4
37192: PUSH
37193: LD_INT 5
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
37202: GO 38027
37204: LD_INT 7
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37212
37210: GO 37238
37212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 4
37226: PUSH
37227: LD_INT 5
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
37236: GO 38027
37238: LD_INT 12
37240: DOUBLE
37241: EQUAL
37242: IFTRUE 37246
37244: GO 37272
37246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: LD_INT 4
37260: PUSH
37261: LD_INT 5
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: ST_TO_ADDR
37270: GO 38027
37272: LD_INT 13
37274: DOUBLE
37275: EQUAL
37276: IFTRUE 37280
37278: GO 37306
37280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37281: LD_ADDR_VAR 0 3
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: LD_INT 4
37294: PUSH
37295: LD_INT 5
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
37304: GO 38027
37306: LD_INT 14
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37332
37314: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_INT 4
37322: PUSH
37323: LD_INT 5
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: ST_TO_ADDR
37330: GO 38027
37332: LD_INT 6
37334: DOUBLE
37335: EQUAL
37336: IFTRUE 37340
37338: GO 37358
37340: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37341: LD_ADDR_VAR 0 3
37345: PUSH
37346: LD_INT 4
37348: PUSH
37349: LD_INT 5
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: ST_TO_ADDR
37356: GO 38027
37358: LD_INT 10
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37384
37366: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37367: LD_ADDR_VAR 0 3
37371: PUSH
37372: LD_INT 4
37374: PUSH
37375: LD_INT 5
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: ST_TO_ADDR
37382: GO 38027
37384: LD_INT 22
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37392
37390: GO 37418
37392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37393: LD_ADDR_VAR 0 3
37397: PUSH
37398: LD_INT 11
37400: PUSH
37401: LD_INT 12
37403: PUSH
37404: LD_INT 13
37406: PUSH
37407: LD_INT 14
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: ST_TO_ADDR
37416: GO 38027
37418: LD_INT 23
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 37452
37426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37427: LD_ADDR_VAR 0 3
37431: PUSH
37432: LD_INT 11
37434: PUSH
37435: LD_INT 12
37437: PUSH
37438: LD_INT 13
37440: PUSH
37441: LD_INT 14
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
37450: GO 38027
37452: LD_INT 24
37454: DOUBLE
37455: EQUAL
37456: IFTRUE 37460
37458: GO 37486
37460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 11
37468: PUSH
37469: LD_INT 12
37471: PUSH
37472: LD_INT 13
37474: PUSH
37475: LD_INT 14
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
37484: GO 38027
37486: LD_INT 30
37488: DOUBLE
37489: EQUAL
37490: IFTRUE 37494
37492: GO 37520
37494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37495: LD_ADDR_VAR 0 3
37499: PUSH
37500: LD_INT 11
37502: PUSH
37503: LD_INT 12
37505: PUSH
37506: LD_INT 13
37508: PUSH
37509: LD_INT 14
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
37518: GO 38027
37520: LD_INT 25
37522: DOUBLE
37523: EQUAL
37524: IFTRUE 37528
37526: GO 37546
37528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37529: LD_ADDR_VAR 0 3
37533: PUSH
37534: LD_INT 13
37536: PUSH
37537: LD_INT 14
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: ST_TO_ADDR
37544: GO 38027
37546: LD_INT 27
37548: DOUBLE
37549: EQUAL
37550: IFTRUE 37554
37552: GO 37572
37554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37555: LD_ADDR_VAR 0 3
37559: PUSH
37560: LD_INT 13
37562: PUSH
37563: LD_INT 14
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: ST_TO_ADDR
37570: GO 38027
37572: LD_INT 92
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37606
37580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_INT 11
37588: PUSH
37589: LD_INT 12
37591: PUSH
37592: LD_INT 13
37594: PUSH
37595: LD_INT 14
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: ST_TO_ADDR
37604: GO 38027
37606: LD_INT 28
37608: DOUBLE
37609: EQUAL
37610: IFTRUE 37614
37612: GO 37632
37614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: LD_INT 13
37622: PUSH
37623: LD_INT 14
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: ST_TO_ADDR
37630: GO 38027
37632: LD_INT 29
37634: DOUBLE
37635: EQUAL
37636: IFTRUE 37640
37638: GO 37658
37640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37641: LD_ADDR_VAR 0 3
37645: PUSH
37646: LD_INT 13
37648: PUSH
37649: LD_INT 14
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: ST_TO_ADDR
37656: GO 38027
37658: LD_INT 31
37660: DOUBLE
37661: EQUAL
37662: IFTRUE 37666
37664: GO 37684
37666: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37667: LD_ADDR_VAR 0 3
37671: PUSH
37672: LD_INT 13
37674: PUSH
37675: LD_INT 14
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: ST_TO_ADDR
37682: GO 38027
37684: LD_INT 26
37686: DOUBLE
37687: EQUAL
37688: IFTRUE 37692
37690: GO 37710
37692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37693: LD_ADDR_VAR 0 3
37697: PUSH
37698: LD_INT 13
37700: PUSH
37701: LD_INT 14
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: ST_TO_ADDR
37708: GO 38027
37710: LD_INT 42
37712: DOUBLE
37713: EQUAL
37714: IFTRUE 37718
37716: GO 37744
37718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_INT 21
37726: PUSH
37727: LD_INT 22
37729: PUSH
37730: LD_INT 23
37732: PUSH
37733: LD_INT 24
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
37742: GO 38027
37744: LD_INT 43
37746: DOUBLE
37747: EQUAL
37748: IFTRUE 37752
37750: GO 37778
37752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37753: LD_ADDR_VAR 0 3
37757: PUSH
37758: LD_INT 21
37760: PUSH
37761: LD_INT 22
37763: PUSH
37764: LD_INT 23
37766: PUSH
37767: LD_INT 24
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: ST_TO_ADDR
37776: GO 38027
37778: LD_INT 44
37780: DOUBLE
37781: EQUAL
37782: IFTRUE 37786
37784: GO 37812
37786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: LD_INT 21
37794: PUSH
37795: LD_INT 22
37797: PUSH
37798: LD_INT 23
37800: PUSH
37801: LD_INT 24
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: ST_TO_ADDR
37810: GO 38027
37812: LD_INT 45
37814: DOUBLE
37815: EQUAL
37816: IFTRUE 37820
37818: GO 37846
37820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_INT 21
37828: PUSH
37829: LD_INT 22
37831: PUSH
37832: LD_INT 23
37834: PUSH
37835: LD_INT 24
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: ST_TO_ADDR
37844: GO 38027
37846: LD_INT 49
37848: DOUBLE
37849: EQUAL
37850: IFTRUE 37854
37852: GO 37880
37854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37855: LD_ADDR_VAR 0 3
37859: PUSH
37860: LD_INT 21
37862: PUSH
37863: LD_INT 22
37865: PUSH
37866: LD_INT 23
37868: PUSH
37869: LD_INT 24
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: ST_TO_ADDR
37878: GO 38027
37880: LD_INT 51
37882: DOUBLE
37883: EQUAL
37884: IFTRUE 37888
37886: GO 37914
37888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37889: LD_ADDR_VAR 0 3
37893: PUSH
37894: LD_INT 21
37896: PUSH
37897: LD_INT 22
37899: PUSH
37900: LD_INT 23
37902: PUSH
37903: LD_INT 24
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: ST_TO_ADDR
37912: GO 38027
37914: LD_INT 52
37916: DOUBLE
37917: EQUAL
37918: IFTRUE 37922
37920: GO 37948
37922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37923: LD_ADDR_VAR 0 3
37927: PUSH
37928: LD_INT 21
37930: PUSH
37931: LD_INT 22
37933: PUSH
37934: LD_INT 23
37936: PUSH
37937: LD_INT 24
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
37946: GO 38027
37948: LD_INT 53
37950: DOUBLE
37951: EQUAL
37952: IFTRUE 37956
37954: GO 37974
37956: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37957: LD_ADDR_VAR 0 3
37961: PUSH
37962: LD_INT 23
37964: PUSH
37965: LD_INT 24
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: ST_TO_ADDR
37972: GO 38027
37974: LD_INT 46
37976: DOUBLE
37977: EQUAL
37978: IFTRUE 37982
37980: GO 38000
37982: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_INT 23
37990: PUSH
37991: LD_INT 24
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: ST_TO_ADDR
37998: GO 38027
38000: LD_INT 47
38002: DOUBLE
38003: EQUAL
38004: IFTRUE 38008
38006: GO 38026
38008: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38009: LD_ADDR_VAR 0 3
38013: PUSH
38014: LD_INT 23
38016: PUSH
38017: LD_INT 24
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: ST_TO_ADDR
38024: GO 38027
38026: POP
// result := ( chassis in result ) ;
38027: LD_ADDR_VAR 0 3
38031: PUSH
38032: LD_VAR 0 1
38036: PUSH
38037: LD_VAR 0 3
38041: IN
38042: ST_TO_ADDR
// end ;
38043: LD_VAR 0 3
38047: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38048: LD_INT 0
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
// result := array ;
38057: LD_ADDR_VAR 0 5
38061: PUSH
38062: LD_VAR 0 1
38066: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38067: LD_VAR 0 1
38071: NOT
38072: IFTRUE 38081
38074: PUSH
38075: LD_VAR 0 2
38079: NOT
38080: OR
38081: IFTRUE 38090
38083: PUSH
38084: LD_VAR 0 3
38088: NOT
38089: OR
38090: IFTRUE 38104
38092: PUSH
38093: LD_VAR 0 2
38097: PUSH
38098: LD_VAR 0 1
38102: GREATER
38103: OR
38104: IFTRUE 38118
38106: PUSH
38107: LD_VAR 0 3
38111: PUSH
38112: LD_VAR 0 1
38116: GREATER
38117: OR
38118: IFFALSE 38122
// exit ;
38120: GO 38418
// if direction then
38122: LD_VAR 0 4
38126: IFFALSE 38190
// begin d := 1 ;
38128: LD_ADDR_VAR 0 9
38132: PUSH
38133: LD_INT 1
38135: ST_TO_ADDR
// if i_from > i_to then
38136: LD_VAR 0 2
38140: PUSH
38141: LD_VAR 0 3
38145: GREATER
38146: IFFALSE 38172
// length := ( array - i_from ) + i_to else
38148: LD_ADDR_VAR 0 11
38152: PUSH
38153: LD_VAR 0 1
38157: PUSH
38158: LD_VAR 0 2
38162: MINUS
38163: PUSH
38164: LD_VAR 0 3
38168: PLUS
38169: ST_TO_ADDR
38170: GO 38188
// length := i_to - i_from ;
38172: LD_ADDR_VAR 0 11
38176: PUSH
38177: LD_VAR 0 3
38181: PUSH
38182: LD_VAR 0 2
38186: MINUS
38187: ST_TO_ADDR
// end else
38188: GO 38251
// begin d := - 1 ;
38190: LD_ADDR_VAR 0 9
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: ST_TO_ADDR
// if i_from > i_to then
38199: LD_VAR 0 2
38203: PUSH
38204: LD_VAR 0 3
38208: GREATER
38209: IFFALSE 38229
// length := i_from - i_to else
38211: LD_ADDR_VAR 0 11
38215: PUSH
38216: LD_VAR 0 2
38220: PUSH
38221: LD_VAR 0 3
38225: MINUS
38226: ST_TO_ADDR
38227: GO 38251
// length := ( array - i_to ) + i_from ;
38229: LD_ADDR_VAR 0 11
38233: PUSH
38234: LD_VAR 0 1
38238: PUSH
38239: LD_VAR 0 3
38243: MINUS
38244: PUSH
38245: LD_VAR 0 2
38249: PLUS
38250: ST_TO_ADDR
// end ; if not length then
38251: LD_VAR 0 11
38255: NOT
38256: IFFALSE 38260
// exit ;
38258: GO 38418
// tmp := array ;
38260: LD_ADDR_VAR 0 10
38264: PUSH
38265: LD_VAR 0 1
38269: ST_TO_ADDR
// for i = 1 to length do
38270: LD_ADDR_VAR 0 6
38274: PUSH
38275: DOUBLE
38276: LD_INT 1
38278: DEC
38279: ST_TO_ADDR
38280: LD_VAR 0 11
38284: PUSH
38285: FOR_TO
38286: IFFALSE 38406
// begin for j = 1 to array do
38288: LD_ADDR_VAR 0 7
38292: PUSH
38293: DOUBLE
38294: LD_INT 1
38296: DEC
38297: ST_TO_ADDR
38298: LD_VAR 0 1
38302: PUSH
38303: FOR_TO
38304: IFFALSE 38392
// begin k := j + d ;
38306: LD_ADDR_VAR 0 8
38310: PUSH
38311: LD_VAR 0 7
38315: PUSH
38316: LD_VAR 0 9
38320: PLUS
38321: ST_TO_ADDR
// if k > array then
38322: LD_VAR 0 8
38326: PUSH
38327: LD_VAR 0 1
38331: GREATER
38332: IFFALSE 38342
// k := 1 ;
38334: LD_ADDR_VAR 0 8
38338: PUSH
38339: LD_INT 1
38341: ST_TO_ADDR
// if not k then
38342: LD_VAR 0 8
38346: NOT
38347: IFFALSE 38359
// k := array ;
38349: LD_ADDR_VAR 0 8
38353: PUSH
38354: LD_VAR 0 1
38358: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38359: LD_ADDR_VAR 0 10
38363: PUSH
38364: LD_VAR 0 10
38368: PPUSH
38369: LD_VAR 0 8
38373: PPUSH
38374: LD_VAR 0 1
38378: PUSH
38379: LD_VAR 0 7
38383: ARRAY
38384: PPUSH
38385: CALL_OW 1
38389: ST_TO_ADDR
// end ;
38390: GO 38303
38392: POP
38393: POP
// array := tmp ;
38394: LD_ADDR_VAR 0 1
38398: PUSH
38399: LD_VAR 0 10
38403: ST_TO_ADDR
// end ;
38404: GO 38285
38406: POP
38407: POP
// result := array ;
38408: LD_ADDR_VAR 0 5
38412: PUSH
38413: LD_VAR 0 1
38417: ST_TO_ADDR
// end ;
38418: LD_VAR 0 5
38422: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
// result := 0 ;
38427: LD_ADDR_VAR 0 3
38431: PUSH
38432: LD_INT 0
38434: ST_TO_ADDR
// if not array or not value in array then
38435: LD_VAR 0 1
38439: NOT
38440: IFTRUE 38455
38442: PUSH
38443: LD_VAR 0 2
38447: PUSH
38448: LD_VAR 0 1
38452: IN
38453: NOT
38454: OR
38455: IFFALSE 38459
// exit ;
38457: GO 38513
// for i = 1 to array do
38459: LD_ADDR_VAR 0 4
38463: PUSH
38464: DOUBLE
38465: LD_INT 1
38467: DEC
38468: ST_TO_ADDR
38469: LD_VAR 0 1
38473: PUSH
38474: FOR_TO
38475: IFFALSE 38511
// if value = array [ i ] then
38477: LD_VAR 0 2
38481: PUSH
38482: LD_VAR 0 1
38486: PUSH
38487: LD_VAR 0 4
38491: ARRAY
38492: EQUAL
38493: IFFALSE 38509
// begin result := i ;
38495: LD_ADDR_VAR 0 3
38499: PUSH
38500: LD_VAR 0 4
38504: ST_TO_ADDR
// exit ;
38505: POP
38506: POP
38507: GO 38513
// end ;
38509: GO 38474
38511: POP
38512: POP
// end ;
38513: LD_VAR 0 3
38517: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38518: LD_INT 0
38520: PPUSH
// vc_chassis := chassis ;
38521: LD_ADDR_OWVAR 37
38525: PUSH
38526: LD_VAR 0 1
38530: ST_TO_ADDR
// vc_engine := engine ;
38531: LD_ADDR_OWVAR 39
38535: PUSH
38536: LD_VAR 0 2
38540: ST_TO_ADDR
// vc_control := control ;
38541: LD_ADDR_OWVAR 38
38545: PUSH
38546: LD_VAR 0 3
38550: ST_TO_ADDR
// vc_weapon := weapon ;
38551: LD_ADDR_OWVAR 40
38555: PUSH
38556: LD_VAR 0 4
38560: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38561: LD_ADDR_OWVAR 41
38565: PUSH
38566: LD_VAR 0 5
38570: ST_TO_ADDR
// end ;
38571: LD_VAR 0 6
38575: RET
// export function WantPlant ( unit ) ; var task ; begin
38576: LD_INT 0
38578: PPUSH
38579: PPUSH
// result := false ;
38580: LD_ADDR_VAR 0 2
38584: PUSH
38585: LD_INT 0
38587: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 437
38602: ST_TO_ADDR
// if task then
38603: LD_VAR 0 3
38607: IFFALSE 38635
// if task [ 1 ] [ 1 ] = p then
38609: LD_VAR 0 3
38613: PUSH
38614: LD_INT 1
38616: ARRAY
38617: PUSH
38618: LD_INT 1
38620: ARRAY
38621: PUSH
38622: LD_STRING p
38624: EQUAL
38625: IFFALSE 38635
// result := true ;
38627: LD_ADDR_VAR 0 2
38631: PUSH
38632: LD_INT 1
38634: ST_TO_ADDR
// end ;
38635: LD_VAR 0 2
38639: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
// if pos < 1 then
38646: LD_VAR 0 2
38650: PUSH
38651: LD_INT 1
38653: LESS
38654: IFFALSE 38658
// exit ;
38656: GO 38961
// if pos = 1 then
38658: LD_VAR 0 2
38662: PUSH
38663: LD_INT 1
38665: EQUAL
38666: IFFALSE 38699
// result := Replace ( arr , pos [ 1 ] , value ) else
38668: LD_ADDR_VAR 0 4
38672: PUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 1
38685: ARRAY
38686: PPUSH
38687: LD_VAR 0 3
38691: PPUSH
38692: CALL_OW 1
38696: ST_TO_ADDR
38697: GO 38961
// begin tmp := arr ;
38699: LD_ADDR_VAR 0 6
38703: PUSH
38704: LD_VAR 0 1
38708: ST_TO_ADDR
// s_arr := [ tmp ] ;
38709: LD_ADDR_VAR 0 7
38713: PUSH
38714: LD_VAR 0 6
38718: PUSH
38719: EMPTY
38720: LIST
38721: ST_TO_ADDR
// for i = 1 to pos - 1 do
38722: LD_ADDR_VAR 0 5
38726: PUSH
38727: DOUBLE
38728: LD_INT 1
38730: DEC
38731: ST_TO_ADDR
38732: LD_VAR 0 2
38736: PUSH
38737: LD_INT 1
38739: MINUS
38740: PUSH
38741: FOR_TO
38742: IFFALSE 38787
// begin tmp := tmp [ pos [ i ] ] ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_VAR 0 6
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_VAR 0 5
38763: ARRAY
38764: ARRAY
38765: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38766: LD_ADDR_VAR 0 7
38770: PUSH
38771: LD_VAR 0 7
38775: PUSH
38776: LD_VAR 0 6
38780: PUSH
38781: EMPTY
38782: LIST
38783: ADD
38784: ST_TO_ADDR
// end ;
38785: GO 38741
38787: POP
38788: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38789: LD_ADDR_VAR 0 6
38793: PUSH
38794: LD_VAR 0 6
38798: PPUSH
38799: LD_VAR 0 2
38803: PUSH
38804: LD_VAR 0 2
38808: ARRAY
38809: PPUSH
38810: LD_VAR 0 3
38814: PPUSH
38815: CALL_OW 1
38819: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38820: LD_ADDR_VAR 0 7
38824: PUSH
38825: LD_VAR 0 7
38829: PPUSH
38830: LD_VAR 0 7
38834: PPUSH
38835: LD_VAR 0 6
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// for i = s_arr downto 2 do
38845: LD_ADDR_VAR 0 5
38849: PUSH
38850: DOUBLE
38851: LD_VAR 0 7
38855: INC
38856: ST_TO_ADDR
38857: LD_INT 2
38859: PUSH
38860: FOR_DOWNTO
38861: IFFALSE 38945
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38863: LD_ADDR_VAR 0 6
38867: PUSH
38868: LD_VAR 0 7
38872: PUSH
38873: LD_VAR 0 5
38877: PUSH
38878: LD_INT 1
38880: MINUS
38881: ARRAY
38882: PPUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_VAR 0 5
38892: PUSH
38893: LD_INT 1
38895: MINUS
38896: ARRAY
38897: PPUSH
38898: LD_VAR 0 7
38902: PUSH
38903: LD_VAR 0 5
38907: ARRAY
38908: PPUSH
38909: CALL_OW 1
38913: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38914: LD_ADDR_VAR 0 7
38918: PUSH
38919: LD_VAR 0 7
38923: PPUSH
38924: LD_VAR 0 5
38928: PUSH
38929: LD_INT 1
38931: MINUS
38932: PPUSH
38933: LD_VAR 0 6
38937: PPUSH
38938: CALL_OW 1
38942: ST_TO_ADDR
// end ;
38943: GO 38860
38945: POP
38946: POP
// result := s_arr [ 1 ] ;
38947: LD_ADDR_VAR 0 4
38951: PUSH
38952: LD_VAR 0 7
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: ST_TO_ADDR
// end ; end ;
38961: LD_VAR 0 4
38965: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38966: LD_INT 0
38968: PPUSH
38969: PPUSH
// if not list then
38970: LD_VAR 0 1
38974: NOT
38975: IFFALSE 38979
// exit ;
38977: GO 39070
// i := list [ pos1 ] ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 1
38988: PUSH
38989: LD_VAR 0 2
38993: ARRAY
38994: ST_TO_ADDR
// if not i then
38995: LD_VAR 0 5
38999: NOT
39000: IFFALSE 39004
// exit ;
39002: GO 39070
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39004: LD_ADDR_VAR 0 1
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: LD_VAR 0 2
39018: PPUSH
39019: LD_VAR 0 1
39023: PUSH
39024: LD_VAR 0 3
39028: ARRAY
39029: PPUSH
39030: CALL_OW 1
39034: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39035: LD_ADDR_VAR 0 1
39039: PUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: LD_VAR 0 3
39049: PPUSH
39050: LD_VAR 0 5
39054: PPUSH
39055: CALL_OW 1
39059: ST_TO_ADDR
// result := list ;
39060: LD_ADDR_VAR 0 4
39064: PUSH
39065: LD_VAR 0 1
39069: ST_TO_ADDR
// end ;
39070: LD_VAR 0 4
39074: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39075: LD_INT 0
39077: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39078: LD_ADDR_VAR 0 5
39082: PUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: CALL_OW 250
39092: PPUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 251
39102: PPUSH
39103: LD_VAR 0 2
39107: PPUSH
39108: LD_VAR 0 3
39112: PPUSH
39113: LD_VAR 0 4
39117: PPUSH
39118: CALL 39500 0 5
39122: ST_TO_ADDR
// end ;
39123: LD_VAR 0 5
39127: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39128: LD_INT 0
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
// if not list or not unit then
39134: LD_VAR 0 2
39138: NOT
39139: IFTRUE 39148
39141: PUSH
39142: LD_VAR 0 1
39146: NOT
39147: OR
39148: IFFALSE 39152
// exit ;
39150: GO 39495
// result := [ ] ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: EMPTY
39158: ST_TO_ADDR
// for i in list do
39159: LD_ADDR_VAR 0 6
39163: PUSH
39164: LD_VAR 0 2
39168: PUSH
39169: FOR_IN
39170: IFFALSE 39388
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39172: LD_ADDR_VAR 0 8
39176: PUSH
39177: LD_VAR 0 1
39181: PPUSH
39182: LD_VAR 0 6
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PPUSH
39191: LD_VAR 0 6
39195: PUSH
39196: LD_INT 2
39198: ARRAY
39199: PPUSH
39200: CALL_OW 297
39204: ST_TO_ADDR
// if not Count ( result ) then
39205: LD_VAR 0 5
39209: PPUSH
39210: CALL 35756 0 1
39214: NOT
39215: IFFALSE 39248
// begin result := Join ( result , [ i , tmp ] ) ;
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 5
39226: PPUSH
39227: LD_VAR 0 6
39231: PUSH
39232: LD_VAR 0 8
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PPUSH
39241: CALL 71688 0 2
39245: ST_TO_ADDR
// continue ;
39246: GO 39169
// end ; if result [ result ] [ 2 ] <= tmp then
39248: LD_VAR 0 5
39252: PUSH
39253: LD_VAR 0 5
39257: ARRAY
39258: PUSH
39259: LD_INT 2
39261: ARRAY
39262: PUSH
39263: LD_VAR 0 8
39267: LESSEQUAL
39268: IFFALSE 39301
// result := Join ( result , [ i , tmp ] ) else
39270: LD_ADDR_VAR 0 5
39274: PUSH
39275: LD_VAR 0 5
39279: PPUSH
39280: LD_VAR 0 6
39284: PUSH
39285: LD_VAR 0 8
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PPUSH
39294: CALL 71688 0 2
39298: ST_TO_ADDR
39299: GO 39386
// begin for j := 1 to Count ( result ) do
39301: LD_ADDR_VAR 0 7
39305: PUSH
39306: DOUBLE
39307: LD_INT 1
39309: DEC
39310: ST_TO_ADDR
39311: LD_VAR 0 5
39315: PPUSH
39316: CALL 35756 0 1
39320: PUSH
39321: FOR_TO
39322: IFFALSE 39384
// begin if tmp < result [ j ] [ 2 ] then
39324: LD_VAR 0 8
39328: PUSH
39329: LD_VAR 0 5
39333: PUSH
39334: LD_VAR 0 7
39338: ARRAY
39339: PUSH
39340: LD_INT 2
39342: ARRAY
39343: LESS
39344: IFFALSE 39382
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 5
39355: PPUSH
39356: LD_VAR 0 7
39360: PPUSH
39361: LD_VAR 0 6
39365: PUSH
39366: LD_VAR 0 8
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PPUSH
39375: CALL_OW 2
39379: ST_TO_ADDR
// break ;
39380: GO 39384
// end ; end ;
39382: GO 39321
39384: POP
39385: POP
// end ; end ;
39386: GO 39169
39388: POP
39389: POP
// if result and not asc then
39390: LD_VAR 0 5
39394: IFFALSE 39403
39396: PUSH
39397: LD_VAR 0 3
39401: NOT
39402: AND
39403: IFFALSE 39420
// result := ReverseArray ( result ) ;
39405: LD_ADDR_VAR 0 5
39409: PUSH
39410: LD_VAR 0 5
39414: PPUSH
39415: CALL 66778 0 1
39419: ST_TO_ADDR
// tmp := [ ] ;
39420: LD_ADDR_VAR 0 8
39424: PUSH
39425: EMPTY
39426: ST_TO_ADDR
// if mode then
39427: LD_VAR 0 4
39431: IFFALSE 39495
// begin for i := 1 to result do
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: DOUBLE
39439: LD_INT 1
39441: DEC
39442: ST_TO_ADDR
39443: LD_VAR 0 5
39447: PUSH
39448: FOR_TO
39449: IFFALSE 39483
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39451: LD_ADDR_VAR 0 8
39455: PUSH
39456: LD_VAR 0 8
39460: PPUSH
39461: LD_VAR 0 5
39465: PUSH
39466: LD_VAR 0 6
39470: ARRAY
39471: PUSH
39472: LD_INT 1
39474: ARRAY
39475: PPUSH
39476: CALL 71688 0 2
39480: ST_TO_ADDR
39481: GO 39448
39483: POP
39484: POP
// result := tmp ;
39485: LD_ADDR_VAR 0 5
39489: PUSH
39490: LD_VAR 0 8
39494: ST_TO_ADDR
// end ; end ;
39495: LD_VAR 0 5
39499: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39500: LD_INT 0
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
// if not list then
39506: LD_VAR 0 3
39510: NOT
39511: IFFALSE 39515
// exit ;
39513: GO 39905
// result := [ ] ;
39515: LD_ADDR_VAR 0 6
39519: PUSH
39520: EMPTY
39521: ST_TO_ADDR
// for i in list do
39522: LD_ADDR_VAR 0 7
39526: PUSH
39527: LD_VAR 0 3
39531: PUSH
39532: FOR_IN
39533: IFFALSE 39735
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39535: LD_ADDR_VAR 0 9
39539: PUSH
39540: LD_VAR 0 7
39544: PPUSH
39545: LD_VAR 0 1
39549: PPUSH
39550: LD_VAR 0 2
39554: PPUSH
39555: CALL_OW 297
39559: ST_TO_ADDR
// if not result then
39560: LD_VAR 0 6
39564: NOT
39565: IFFALSE 39591
// result := [ [ i , tmp ] ] else
39567: LD_ADDR_VAR 0 6
39571: PUSH
39572: LD_VAR 0 7
39576: PUSH
39577: LD_VAR 0 9
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: ST_TO_ADDR
39589: GO 39733
// begin if result [ result ] [ 2 ] <= tmp then
39591: LD_VAR 0 6
39595: PUSH
39596: LD_VAR 0 6
39600: ARRAY
39601: PUSH
39602: LD_INT 2
39604: ARRAY
39605: PUSH
39606: LD_VAR 0 9
39610: LESSEQUAL
39611: IFFALSE 39653
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39613: LD_ADDR_VAR 0 6
39617: PUSH
39618: LD_VAR 0 6
39622: PPUSH
39623: LD_VAR 0 6
39627: PUSH
39628: LD_INT 1
39630: PLUS
39631: PPUSH
39632: LD_VAR 0 7
39636: PUSH
39637: LD_VAR 0 9
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PPUSH
39646: CALL_OW 2
39650: ST_TO_ADDR
39651: GO 39733
// for j := 1 to result do
39653: LD_ADDR_VAR 0 8
39657: PUSH
39658: DOUBLE
39659: LD_INT 1
39661: DEC
39662: ST_TO_ADDR
39663: LD_VAR 0 6
39667: PUSH
39668: FOR_TO
39669: IFFALSE 39731
// begin if tmp < result [ j ] [ 2 ] then
39671: LD_VAR 0 9
39675: PUSH
39676: LD_VAR 0 6
39680: PUSH
39681: LD_VAR 0 8
39685: ARRAY
39686: PUSH
39687: LD_INT 2
39689: ARRAY
39690: LESS
39691: IFFALSE 39729
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39693: LD_ADDR_VAR 0 6
39697: PUSH
39698: LD_VAR 0 6
39702: PPUSH
39703: LD_VAR 0 8
39707: PPUSH
39708: LD_VAR 0 7
39712: PUSH
39713: LD_VAR 0 9
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PPUSH
39722: CALL_OW 2
39726: ST_TO_ADDR
// break ;
39727: GO 39731
// end ; end ;
39729: GO 39668
39731: POP
39732: POP
// end ; end ;
39733: GO 39532
39735: POP
39736: POP
// if result and not asc then
39737: LD_VAR 0 6
39741: IFFALSE 39750
39743: PUSH
39744: LD_VAR 0 4
39748: NOT
39749: AND
39750: IFFALSE 39825
// begin tmp := result ;
39752: LD_ADDR_VAR 0 9
39756: PUSH
39757: LD_VAR 0 6
39761: ST_TO_ADDR
// for i = tmp downto 1 do
39762: LD_ADDR_VAR 0 7
39766: PUSH
39767: DOUBLE
39768: LD_VAR 0 9
39772: INC
39773: ST_TO_ADDR
39774: LD_INT 1
39776: PUSH
39777: FOR_DOWNTO
39778: IFFALSE 39823
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39780: LD_ADDR_VAR 0 6
39784: PUSH
39785: LD_VAR 0 6
39789: PPUSH
39790: LD_VAR 0 9
39794: PUSH
39795: LD_VAR 0 7
39799: MINUS
39800: PUSH
39801: LD_INT 1
39803: PLUS
39804: PPUSH
39805: LD_VAR 0 9
39809: PUSH
39810: LD_VAR 0 7
39814: ARRAY
39815: PPUSH
39816: CALL_OW 1
39820: ST_TO_ADDR
39821: GO 39777
39823: POP
39824: POP
// end ; tmp := [ ] ;
39825: LD_ADDR_VAR 0 9
39829: PUSH
39830: EMPTY
39831: ST_TO_ADDR
// if mode then
39832: LD_VAR 0 5
39836: IFFALSE 39905
// begin for i = 1 to result do
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: DOUBLE
39844: LD_INT 1
39846: DEC
39847: ST_TO_ADDR
39848: LD_VAR 0 6
39852: PUSH
39853: FOR_TO
39854: IFFALSE 39893
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39856: LD_ADDR_VAR 0 9
39860: PUSH
39861: LD_VAR 0 9
39865: PPUSH
39866: LD_VAR 0 7
39870: PPUSH
39871: LD_VAR 0 6
39875: PUSH
39876: LD_VAR 0 7
39880: ARRAY
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: CALL_OW 1
39890: ST_TO_ADDR
39891: GO 39853
39893: POP
39894: POP
// result := tmp ;
39895: LD_ADDR_VAR 0 6
39899: PUSH
39900: LD_VAR 0 9
39904: ST_TO_ADDR
// end ; end ;
39905: LD_VAR 0 6
39909: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39910: LD_INT 0
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39918: LD_ADDR_VAR 0 5
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: ST_TO_ADDR
// if not x or not y then
39940: LD_VAR 0 2
39944: NOT
39945: IFTRUE 39954
39947: PUSH
39948: LD_VAR 0 3
39952: NOT
39953: OR
39954: IFFALSE 39958
// exit ;
39956: GO 41614
// if not range then
39958: LD_VAR 0 4
39962: NOT
39963: IFFALSE 39973
// range := 10 ;
39965: LD_ADDR_VAR 0 4
39969: PUSH
39970: LD_INT 10
39972: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39973: LD_ADDR_VAR 0 8
39977: PUSH
39978: LD_INT 81
39980: PUSH
39981: LD_VAR 0 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 92
39992: PUSH
39993: LD_VAR 0 2
39997: PUSH
39998: LD_VAR 0 3
40002: PUSH
40003: LD_VAR 0 4
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 3
40016: PUSH
40017: LD_INT 21
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: PPUSH
40036: CALL_OW 69
40040: ST_TO_ADDR
// if not tmp then
40041: LD_VAR 0 8
40045: NOT
40046: IFFALSE 40050
// exit ;
40048: GO 41614
// for i in tmp do
40050: LD_ADDR_VAR 0 6
40054: PUSH
40055: LD_VAR 0 8
40059: PUSH
40060: FOR_IN
40061: IFFALSE 41589
// begin points := [ 0 , 0 , 0 ] ;
40063: LD_ADDR_VAR 0 9
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
// bpoints := 1 ;
40082: LD_ADDR_VAR 0 10
40086: PUSH
40087: LD_INT 1
40089: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40090: LD_VAR 0 6
40094: PPUSH
40095: CALL_OW 247
40099: PUSH
40100: LD_INT 1
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40690
40108: POP
// begin if GetClass ( i ) = 1 then
40109: LD_VAR 0 6
40113: PPUSH
40114: CALL_OW 257
40118: PUSH
40119: LD_INT 1
40121: EQUAL
40122: IFFALSE 40143
// points := [ 10 , 5 , 3 ] ;
40124: LD_ADDR_VAR 0 9
40128: PUSH
40129: LD_INT 10
40131: PUSH
40132: LD_INT 5
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40143: LD_VAR 0 6
40147: PPUSH
40148: CALL_OW 257
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 4
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: IN
40167: IFFALSE 40188
// points := [ 3 , 2 , 1 ] ;
40169: LD_ADDR_VAR 0 9
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40188: LD_VAR 0 6
40192: PPUSH
40193: CALL_OW 257
40197: PUSH
40198: LD_INT 5
40200: EQUAL
40201: IFFALSE 40222
// points := [ 130 , 5 , 2 ] ;
40203: LD_ADDR_VAR 0 9
40207: PUSH
40208: LD_INT 130
40210: PUSH
40211: LD_INT 5
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40222: LD_VAR 0 6
40226: PPUSH
40227: CALL_OW 257
40231: PUSH
40232: LD_INT 8
40234: EQUAL
40235: IFFALSE 40256
// points := [ 35 , 35 , 30 ] ;
40237: LD_ADDR_VAR 0 9
40241: PUSH
40242: LD_INT 35
40244: PUSH
40245: LD_INT 35
40247: PUSH
40248: LD_INT 30
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40256: LD_VAR 0 6
40260: PPUSH
40261: CALL_OW 257
40265: PUSH
40266: LD_INT 9
40268: EQUAL
40269: IFFALSE 40290
// points := [ 20 , 55 , 40 ] ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_INT 20
40278: PUSH
40279: LD_INT 55
40281: PUSH
40282: LD_INT 40
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 257
40299: PUSH
40300: LD_INT 12
40302: PUSH
40303: LD_INT 16
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: IN
40310: IFFALSE 40331
// points := [ 5 , 3 , 2 ] ;
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40331: LD_VAR 0 6
40335: PPUSH
40336: CALL_OW 257
40340: PUSH
40341: LD_INT 17
40343: EQUAL
40344: IFFALSE 40365
// points := [ 100 , 50 , 75 ] ;
40346: LD_ADDR_VAR 0 9
40350: PUSH
40351: LD_INT 100
40353: PUSH
40354: LD_INT 50
40356: PUSH
40357: LD_INT 75
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40365: LD_VAR 0 6
40369: PPUSH
40370: CALL_OW 257
40374: PUSH
40375: LD_INT 15
40377: EQUAL
40378: IFFALSE 40399
// points := [ 10 , 5 , 3 ] ;
40380: LD_ADDR_VAR 0 9
40384: PUSH
40385: LD_INT 10
40387: PUSH
40388: LD_INT 5
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40399: LD_VAR 0 6
40403: PPUSH
40404: CALL_OW 257
40408: PUSH
40409: LD_INT 14
40411: EQUAL
40412: IFFALSE 40433
// points := [ 10 , 0 , 0 ] ;
40414: LD_ADDR_VAR 0 9
40418: PUSH
40419: LD_INT 10
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40433: LD_VAR 0 6
40437: PPUSH
40438: CALL_OW 257
40442: PUSH
40443: LD_INT 11
40445: EQUAL
40446: IFFALSE 40467
// points := [ 30 , 10 , 5 ] ;
40448: LD_ADDR_VAR 0 9
40452: PUSH
40453: LD_INT 30
40455: PUSH
40456: LD_INT 10
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40467: LD_VAR 0 1
40471: PPUSH
40472: LD_INT 5
40474: PPUSH
40475: CALL_OW 321
40479: PUSH
40480: LD_INT 2
40482: EQUAL
40483: IFFALSE 40500
// bpoints := bpoints * 1.8 ;
40485: LD_ADDR_VAR 0 10
40489: PUSH
40490: LD_VAR 0 10
40494: PUSH
40495: LD_REAL  1.80000000000000E+0000
40498: MUL
40499: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40500: LD_VAR 0 6
40504: PPUSH
40505: CALL_OW 257
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: IN
40528: IFFALSE 40548
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: LD_INT 51
40538: PPUSH
40539: CALL_OW 321
40543: PUSH
40544: LD_INT 2
40546: EQUAL
40547: AND
40548: IFFALSE 40565
// bpoints := bpoints * 1.2 ;
40550: LD_ADDR_VAR 0 10
40554: PUSH
40555: LD_VAR 0 10
40559: PUSH
40560: LD_REAL  1.20000000000000E+0000
40563: MUL
40564: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40565: LD_VAR 0 6
40569: PPUSH
40570: CALL_OW 257
40574: PUSH
40575: LD_INT 5
40577: PUSH
40578: LD_INT 7
40580: PUSH
40581: LD_INT 9
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: IN
40589: IFFALSE 40609
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: LD_INT 52
40599: PPUSH
40600: CALL_OW 321
40604: PUSH
40605: LD_INT 2
40607: EQUAL
40608: AND
40609: IFFALSE 40626
// bpoints := bpoints * 1.5 ;
40611: LD_ADDR_VAR 0 10
40615: PUSH
40616: LD_VAR 0 10
40620: PUSH
40621: LD_REAL  1.50000000000000E+0000
40624: MUL
40625: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40626: LD_VAR 0 1
40630: PPUSH
40631: LD_INT 66
40633: PPUSH
40634: CALL_OW 321
40638: PUSH
40639: LD_INT 2
40641: EQUAL
40642: IFFALSE 40659
// bpoints := bpoints * 1.1 ;
40644: LD_ADDR_VAR 0 10
40648: PUSH
40649: LD_VAR 0 10
40653: PUSH
40654: LD_REAL  1.10000000000000E+0000
40657: MUL
40658: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40659: LD_ADDR_VAR 0 10
40663: PUSH
40664: LD_VAR 0 10
40668: PUSH
40669: LD_VAR 0 6
40673: PPUSH
40674: LD_INT 1
40676: PPUSH
40677: CALL_OW 259
40681: PUSH
40682: LD_REAL  1.15000000000000E+0000
40685: MUL
40686: MUL
40687: ST_TO_ADDR
// end ; unit_vehicle :
40688: GO 41518
40690: LD_INT 2
40692: DOUBLE
40693: EQUAL
40694: IFTRUE 40698
40696: GO 41506
40698: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40699: LD_VAR 0 6
40703: PPUSH
40704: CALL_OW 264
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 42
40714: PUSH
40715: LD_INT 24
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: IN
40723: IFFALSE 40744
// points := [ 25 , 5 , 3 ] ;
40725: LD_ADDR_VAR 0 9
40729: PUSH
40730: LD_INT 25
40732: PUSH
40733: LD_INT 5
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40744: LD_VAR 0 6
40748: PPUSH
40749: CALL_OW 264
40753: PUSH
40754: LD_INT 4
40756: PUSH
40757: LD_INT 43
40759: PUSH
40760: LD_INT 25
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: IN
40768: IFFALSE 40789
// points := [ 40 , 15 , 5 ] ;
40770: LD_ADDR_VAR 0 9
40774: PUSH
40775: LD_INT 40
40777: PUSH
40778: LD_INT 15
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40789: LD_VAR 0 6
40793: PPUSH
40794: CALL_OW 264
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: LD_INT 23
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: IN
40809: IFFALSE 40830
// points := [ 7 , 25 , 8 ] ;
40811: LD_ADDR_VAR 0 9
40815: PUSH
40816: LD_INT 7
40818: PUSH
40819: LD_INT 25
40821: PUSH
40822: LD_INT 8
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40830: LD_VAR 0 6
40834: PPUSH
40835: CALL_OW 264
40839: PUSH
40840: LD_INT 5
40842: PUSH
40843: LD_INT 27
40845: PUSH
40846: LD_INT 44
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: IN
40854: IFFALSE 40875
// points := [ 14 , 50 , 16 ] ;
40856: LD_ADDR_VAR 0 9
40860: PUSH
40861: LD_INT 14
40863: PUSH
40864: LD_INT 50
40866: PUSH
40867: LD_INT 16
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40875: LD_VAR 0 6
40879: PPUSH
40880: CALL_OW 264
40884: PUSH
40885: LD_INT 6
40887: PUSH
40888: LD_INT 46
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: IN
40895: IFFALSE 40916
// points := [ 32 , 120 , 70 ] ;
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_INT 32
40904: PUSH
40905: LD_INT 120
40907: PUSH
40908: LD_INT 70
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40916: LD_VAR 0 6
40920: PPUSH
40921: CALL_OW 264
40925: PUSH
40926: LD_INT 7
40928: PUSH
40929: LD_INT 28
40931: PUSH
40932: LD_INT 45
40934: PUSH
40935: LD_INT 92
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: IN
40944: IFFALSE 40965
// points := [ 35 , 20 , 45 ] ;
40946: LD_ADDR_VAR 0 9
40950: PUSH
40951: LD_INT 35
40953: PUSH
40954: LD_INT 20
40956: PUSH
40957: LD_INT 45
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40965: LD_VAR 0 6
40969: PPUSH
40970: CALL_OW 264
40974: PUSH
40975: LD_INT 47
40977: PUSH
40978: EMPTY
40979: LIST
40980: IN
40981: IFFALSE 41002
// points := [ 67 , 45 , 75 ] ;
40983: LD_ADDR_VAR 0 9
40987: PUSH
40988: LD_INT 67
40990: PUSH
40991: LD_INT 45
40993: PUSH
40994: LD_INT 75
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41002: LD_VAR 0 6
41006: PPUSH
41007: CALL_OW 264
41011: PUSH
41012: LD_INT 26
41014: PUSH
41015: EMPTY
41016: LIST
41017: IN
41018: IFFALSE 41039
// points := [ 120 , 30 , 80 ] ;
41020: LD_ADDR_VAR 0 9
41024: PUSH
41025: LD_INT 120
41027: PUSH
41028: LD_INT 30
41030: PUSH
41031: LD_INT 80
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41039: LD_VAR 0 6
41043: PPUSH
41044: CALL_OW 264
41048: PUSH
41049: LD_INT 22
41051: PUSH
41052: EMPTY
41053: LIST
41054: IN
41055: IFFALSE 41076
// points := [ 40 , 1 , 1 ] ;
41057: LD_ADDR_VAR 0 9
41061: PUSH
41062: LD_INT 40
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41076: LD_VAR 0 6
41080: PPUSH
41081: CALL_OW 264
41085: PUSH
41086: LD_INT 29
41088: PUSH
41089: EMPTY
41090: LIST
41091: IN
41092: IFFALSE 41113
// points := [ 70 , 200 , 400 ] ;
41094: LD_ADDR_VAR 0 9
41098: PUSH
41099: LD_INT 70
41101: PUSH
41102: LD_INT 200
41104: PUSH
41105: LD_INT 400
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41113: LD_VAR 0 6
41117: PPUSH
41118: CALL_OW 264
41122: PUSH
41123: LD_INT 14
41125: PUSH
41126: LD_INT 53
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: IN
41133: IFFALSE 41154
// points := [ 40 , 10 , 20 ] ;
41135: LD_ADDR_VAR 0 9
41139: PUSH
41140: LD_INT 40
41142: PUSH
41143: LD_INT 10
41145: PUSH
41146: LD_INT 20
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41154: LD_VAR 0 6
41158: PPUSH
41159: CALL_OW 264
41163: PUSH
41164: LD_INT 9
41166: PUSH
41167: EMPTY
41168: LIST
41169: IN
41170: IFFALSE 41191
// points := [ 5 , 70 , 20 ] ;
41172: LD_ADDR_VAR 0 9
41176: PUSH
41177: LD_INT 5
41179: PUSH
41180: LD_INT 70
41182: PUSH
41183: LD_INT 20
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41191: LD_VAR 0 6
41195: PPUSH
41196: CALL_OW 264
41200: PUSH
41201: LD_INT 10
41203: PUSH
41204: EMPTY
41205: LIST
41206: IN
41207: IFFALSE 41228
// points := [ 35 , 110 , 70 ] ;
41209: LD_ADDR_VAR 0 9
41213: PUSH
41214: LD_INT 35
41216: PUSH
41217: LD_INT 110
41219: PUSH
41220: LD_INT 70
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41228: LD_VAR 0 6
41232: PPUSH
41233: CALL_OW 265
41237: PUSH
41238: LD_INT 25
41240: EQUAL
41241: IFFALSE 41262
// points := [ 80 , 65 , 100 ] ;
41243: LD_ADDR_VAR 0 9
41247: PUSH
41248: LD_INT 80
41250: PUSH
41251: LD_INT 65
41253: PUSH
41254: LD_INT 100
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41262: LD_VAR 0 6
41266: PPUSH
41267: CALL_OW 263
41271: PUSH
41272: LD_INT 1
41274: EQUAL
41275: IFFALSE 41310
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41277: LD_ADDR_VAR 0 10
41281: PUSH
41282: LD_VAR 0 10
41286: PUSH
41287: LD_VAR 0 6
41291: PPUSH
41292: CALL_OW 311
41296: PPUSH
41297: LD_INT 3
41299: PPUSH
41300: CALL_OW 259
41304: PUSH
41305: LD_INT 4
41307: MUL
41308: MUL
41309: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41310: LD_VAR 0 6
41314: PPUSH
41315: CALL_OW 263
41319: PUSH
41320: LD_INT 2
41322: EQUAL
41323: IFFALSE 41374
// begin j := IsControledBy ( i ) ;
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: LD_VAR 0 6
41334: PPUSH
41335: CALL_OW 312
41339: ST_TO_ADDR
// if j then
41340: LD_VAR 0 7
41344: IFFALSE 41374
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41346: LD_ADDR_VAR 0 10
41350: PUSH
41351: LD_VAR 0 10
41355: PUSH
41356: LD_VAR 0 7
41360: PPUSH
41361: LD_INT 3
41363: PPUSH
41364: CALL_OW 259
41368: PUSH
41369: LD_INT 3
41371: MUL
41372: MUL
41373: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41374: LD_VAR 0 6
41378: PPUSH
41379: CALL_OW 264
41383: PUSH
41384: LD_INT 5
41386: PUSH
41387: LD_INT 6
41389: PUSH
41390: LD_INT 46
41392: PUSH
41393: LD_INT 44
41395: PUSH
41396: LD_INT 47
41398: PUSH
41399: LD_INT 45
41401: PUSH
41402: LD_INT 28
41404: PUSH
41405: LD_INT 7
41407: PUSH
41408: LD_INT 27
41410: PUSH
41411: LD_INT 29
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: IN
41426: IFFALSE 41446
41428: PUSH
41429: LD_VAR 0 1
41433: PPUSH
41434: LD_INT 52
41436: PPUSH
41437: CALL_OW 321
41441: PUSH
41442: LD_INT 2
41444: EQUAL
41445: AND
41446: IFFALSE 41463
// bpoints := bpoints * 1.2 ;
41448: LD_ADDR_VAR 0 10
41452: PUSH
41453: LD_VAR 0 10
41457: PUSH
41458: LD_REAL  1.20000000000000E+0000
41461: MUL
41462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41463: LD_VAR 0 6
41467: PPUSH
41468: CALL_OW 264
41472: PUSH
41473: LD_INT 6
41475: PUSH
41476: LD_INT 46
41478: PUSH
41479: LD_INT 47
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: IN
41487: IFFALSE 41504
// bpoints := bpoints * 1.2 ;
41489: LD_ADDR_VAR 0 10
41493: PUSH
41494: LD_VAR 0 10
41498: PUSH
41499: LD_REAL  1.20000000000000E+0000
41502: MUL
41503: ST_TO_ADDR
// end ; unit_building :
41504: GO 41518
41506: LD_INT 3
41508: DOUBLE
41509: EQUAL
41510: IFTRUE 41514
41512: GO 41517
41514: POP
// ; end ;
41515: GO 41518
41517: POP
// for j = 1 to 3 do
41518: LD_ADDR_VAR 0 7
41522: PUSH
41523: DOUBLE
41524: LD_INT 1
41526: DEC
41527: ST_TO_ADDR
41528: LD_INT 3
41530: PUSH
41531: FOR_TO
41532: IFFALSE 41585
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41534: LD_ADDR_VAR 0 5
41538: PUSH
41539: LD_VAR 0 5
41543: PPUSH
41544: LD_VAR 0 7
41548: PPUSH
41549: LD_VAR 0 5
41553: PUSH
41554: LD_VAR 0 7
41558: ARRAY
41559: PUSH
41560: LD_VAR 0 9
41564: PUSH
41565: LD_VAR 0 7
41569: ARRAY
41570: PUSH
41571: LD_VAR 0 10
41575: MUL
41576: PLUS
41577: PPUSH
41578: CALL_OW 1
41582: ST_TO_ADDR
41583: GO 41531
41585: POP
41586: POP
// end ;
41587: GO 40060
41589: POP
41590: POP
// result := Replace ( result , 4 , tmp ) ;
41591: LD_ADDR_VAR 0 5
41595: PUSH
41596: LD_VAR 0 5
41600: PPUSH
41601: LD_INT 4
41603: PPUSH
41604: LD_VAR 0 8
41608: PPUSH
41609: CALL_OW 1
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 5
41618: RET
// export function DangerAtRange ( unit , range ) ; begin
41619: LD_INT 0
41621: PPUSH
// if not unit then
41622: LD_VAR 0 1
41626: NOT
41627: IFFALSE 41631
// exit ;
41629: GO 41676
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41631: LD_ADDR_VAR 0 3
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 255
41645: PPUSH
41646: LD_VAR 0 1
41650: PPUSH
41651: CALL_OW 250
41655: PPUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 251
41665: PPUSH
41666: LD_VAR 0 2
41670: PPUSH
41671: CALL 39910 0 4
41675: ST_TO_ADDR
// end ;
41676: LD_VAR 0 3
41680: RET
// export function DangerInArea ( side , area ) ; begin
41681: LD_INT 0
41683: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_VAR 0 2
41693: PPUSH
41694: LD_INT 81
41696: PUSH
41697: LD_VAR 0 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 70
41710: ST_TO_ADDR
// end ;
41711: LD_VAR 0 3
41715: RET
// export function IsExtension ( b ) ; begin
41716: LD_INT 0
41718: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41719: LD_ADDR_VAR 0 2
41723: PUSH
41724: LD_VAR 0 1
41728: PUSH
41729: LD_INT 23
41731: PUSH
41732: LD_INT 20
41734: PUSH
41735: LD_INT 22
41737: PUSH
41738: LD_INT 17
41740: PUSH
41741: LD_INT 24
41743: PUSH
41744: LD_INT 21
41746: PUSH
41747: LD_INT 19
41749: PUSH
41750: LD_INT 16
41752: PUSH
41753: LD_INT 25
41755: PUSH
41756: LD_INT 18
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: IN
41771: ST_TO_ADDR
// end ;
41772: LD_VAR 0 2
41776: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41777: LD_INT 0
41779: PPUSH
41780: PPUSH
41781: PPUSH
// result := [ ] ;
41782: LD_ADDR_VAR 0 4
41786: PUSH
41787: EMPTY
41788: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41789: LD_ADDR_VAR 0 5
41793: PUSH
41794: LD_VAR 0 2
41798: PPUSH
41799: LD_INT 21
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PPUSH
41809: CALL_OW 70
41813: ST_TO_ADDR
// if not tmp then
41814: LD_VAR 0 5
41818: NOT
41819: IFFALSE 41823
// exit ;
41821: GO 41887
// if checkLink then
41823: LD_VAR 0 3
41827: IFFALSE 41877
// begin for i in tmp do
41829: LD_ADDR_VAR 0 6
41833: PUSH
41834: LD_VAR 0 5
41838: PUSH
41839: FOR_IN
41840: IFFALSE 41875
// if GetBase ( i ) <> base then
41842: LD_VAR 0 6
41846: PPUSH
41847: CALL_OW 274
41851: PUSH
41852: LD_VAR 0 1
41856: NONEQUAL
41857: IFFALSE 41873
// ComLinkToBase ( base , i ) ;
41859: LD_VAR 0 1
41863: PPUSH
41864: LD_VAR 0 6
41868: PPUSH
41869: CALL_OW 169
41873: GO 41839
41875: POP
41876: POP
// end ; result := tmp ;
41877: LD_ADDR_VAR 0 4
41881: PUSH
41882: LD_VAR 0 5
41886: ST_TO_ADDR
// end ;
41887: LD_VAR 0 4
41891: RET
// export function ComComplete ( units , b ) ; var i ; begin
41892: LD_INT 0
41894: PPUSH
41895: PPUSH
// if not units then
41896: LD_VAR 0 1
41900: NOT
41901: IFFALSE 41905
// exit ;
41903: GO 41995
// for i in units do
41905: LD_ADDR_VAR 0 4
41909: PUSH
41910: LD_VAR 0 1
41914: PUSH
41915: FOR_IN
41916: IFFALSE 41993
// if BuildingStatus ( b ) = bs_build then
41918: LD_VAR 0 2
41922: PPUSH
41923: CALL_OW 461
41927: PUSH
41928: LD_INT 1
41930: EQUAL
41931: IFFALSE 41991
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41933: LD_VAR 0 4
41937: PPUSH
41938: LD_STRING h
41940: PUSH
41941: LD_VAR 0 2
41945: PPUSH
41946: CALL_OW 250
41950: PUSH
41951: LD_VAR 0 2
41955: PPUSH
41956: CALL_OW 251
41960: PUSH
41961: LD_VAR 0 2
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: PPUSH
41987: CALL_OW 446
41991: GO 41915
41993: POP
41994: POP
// end ;
41995: LD_VAR 0 3
41999: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42000: LD_INT 0
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42008: LD_VAR 0 1
42012: NOT
42013: IFTRUE 42030
42015: PUSH
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 263
42025: PUSH
42026: LD_INT 2
42028: NONEQUAL
42029: OR
42030: IFFALSE 42034
// exit ;
42032: GO 42350
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42034: LD_ADDR_VAR 0 6
42038: PUSH
42039: LD_INT 22
42041: PUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 255
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 30
42061: PUSH
42062: LD_INT 36
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 34
42071: PUSH
42072: LD_INT 31
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PPUSH
42088: CALL_OW 69
42092: ST_TO_ADDR
// if not tmp then
42093: LD_VAR 0 6
42097: NOT
42098: IFFALSE 42102
// exit ;
42100: GO 42350
// result := [ ] ;
42102: LD_ADDR_VAR 0 2
42106: PUSH
42107: EMPTY
42108: ST_TO_ADDR
// for i in tmp do
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_VAR 0 6
42118: PUSH
42119: FOR_IN
42120: IFFALSE 42191
// begin t := UnitsInside ( i ) ;
42122: LD_ADDR_VAR 0 4
42126: PUSH
42127: LD_VAR 0 3
42131: PPUSH
42132: CALL_OW 313
42136: ST_TO_ADDR
// if t then
42137: LD_VAR 0 4
42141: IFFALSE 42189
// for j in t do
42143: LD_ADDR_VAR 0 7
42147: PUSH
42148: LD_VAR 0 4
42152: PUSH
42153: FOR_IN
42154: IFFALSE 42187
// result := Replace ( result , result + 1 , j ) ;
42156: LD_ADDR_VAR 0 2
42160: PUSH
42161: LD_VAR 0 2
42165: PPUSH
42166: LD_VAR 0 2
42170: PUSH
42171: LD_INT 1
42173: PLUS
42174: PPUSH
42175: LD_VAR 0 7
42179: PPUSH
42180: CALL_OW 1
42184: ST_TO_ADDR
42185: GO 42153
42187: POP
42188: POP
// end ;
42189: GO 42119
42191: POP
42192: POP
// if not result then
42193: LD_VAR 0 2
42197: NOT
42198: IFFALSE 42202
// exit ;
42200: GO 42350
// mech := result [ 1 ] ;
42202: LD_ADDR_VAR 0 5
42206: PUSH
42207: LD_VAR 0 2
42211: PUSH
42212: LD_INT 1
42214: ARRAY
42215: ST_TO_ADDR
// if result > 1 then
42216: LD_VAR 0 2
42220: PUSH
42221: LD_INT 1
42223: GREATER
42224: IFFALSE 42336
// begin for i = 2 to result do
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: DOUBLE
42232: LD_INT 2
42234: DEC
42235: ST_TO_ADDR
42236: LD_VAR 0 2
42240: PUSH
42241: FOR_TO
42242: IFFALSE 42334
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42244: LD_ADDR_VAR 0 4
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_VAR 0 3
42258: ARRAY
42259: PPUSH
42260: LD_INT 3
42262: PPUSH
42263: CALL_OW 259
42267: PUSH
42268: LD_VAR 0 2
42272: PUSH
42273: LD_VAR 0 3
42277: ARRAY
42278: PPUSH
42279: CALL_OW 432
42283: MINUS
42284: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42285: LD_VAR 0 4
42289: PUSH
42290: LD_VAR 0 5
42294: PPUSH
42295: LD_INT 3
42297: PPUSH
42298: CALL_OW 259
42302: PUSH
42303: LD_VAR 0 5
42307: PPUSH
42308: CALL_OW 432
42312: MINUS
42313: GREATEREQUAL
42314: IFFALSE 42332
// mech := result [ i ] ;
42316: LD_ADDR_VAR 0 5
42320: PUSH
42321: LD_VAR 0 2
42325: PUSH
42326: LD_VAR 0 3
42330: ARRAY
42331: ST_TO_ADDR
// end ;
42332: GO 42241
42334: POP
42335: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42336: LD_VAR 0 1
42340: PPUSH
42341: LD_VAR 0 5
42345: PPUSH
42346: CALL_OW 135
// end ;
42350: LD_VAR 0 2
42354: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42355: LD_INT 0
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
// result := [ ] ;
42370: LD_ADDR_VAR 0 7
42374: PUSH
42375: EMPTY
42376: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 266
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: IN
42397: NOT
42398: IFFALSE 42402
// exit ;
42400: GO 44042
// if name then
42402: LD_VAR 0 3
42406: IFFALSE 42422
// SetBName ( base_dep , name ) ;
42408: LD_VAR 0 1
42412: PPUSH
42413: LD_VAR 0 3
42417: PPUSH
42418: CALL_OW 500
// base := GetBase ( base_dep ) ;
42422: LD_ADDR_VAR 0 15
42426: PUSH
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 274
42436: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42437: LD_ADDR_VAR 0 16
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 255
42451: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42452: LD_ADDR_VAR 0 17
42456: PUSH
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 248
42466: ST_TO_ADDR
// if sources then
42467: LD_VAR 0 5
42471: IFFALSE 42518
// for i = 1 to 3 do
42473: LD_ADDR_VAR 0 8
42477: PUSH
42478: DOUBLE
42479: LD_INT 1
42481: DEC
42482: ST_TO_ADDR
42483: LD_INT 3
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42516
// AddResourceType ( base , i , sources [ i ] ) ;
42489: LD_VAR 0 15
42493: PPUSH
42494: LD_VAR 0 8
42498: PPUSH
42499: LD_VAR 0 5
42503: PUSH
42504: LD_VAR 0 8
42508: ARRAY
42509: PPUSH
42510: CALL_OW 276
42514: GO 42486
42516: POP
42517: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42518: LD_ADDR_VAR 0 18
42522: PUSH
42523: LD_VAR 0 15
42527: PPUSH
42528: LD_VAR 0 2
42532: PPUSH
42533: LD_INT 1
42535: PPUSH
42536: CALL 41777 0 3
42540: ST_TO_ADDR
// InitHc ;
42541: CALL_OW 19
// InitUc ;
42545: CALL_OW 18
// uc_side := side ;
42549: LD_ADDR_OWVAR 20
42553: PUSH
42554: LD_VAR 0 16
42558: ST_TO_ADDR
// uc_nation := nation ;
42559: LD_ADDR_OWVAR 21
42563: PUSH
42564: LD_VAR 0 17
42568: ST_TO_ADDR
// if buildings then
42569: LD_VAR 0 18
42573: IFFALSE 43901
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42575: LD_ADDR_VAR 0 19
42579: PUSH
42580: LD_VAR 0 18
42584: PPUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 30
42590: PUSH
42591: LD_INT 29
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 30
42600: PUSH
42601: LD_INT 30
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: PPUSH
42613: CALL_OW 72
42617: ST_TO_ADDR
// if tmp then
42618: LD_VAR 0 19
42622: IFFALSE 42670
// for i in tmp do
42624: LD_ADDR_VAR 0 8
42628: PUSH
42629: LD_VAR 0 19
42633: PUSH
42634: FOR_IN
42635: IFFALSE 42668
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42637: LD_VAR 0 8
42641: PPUSH
42642: CALL_OW 250
42646: PPUSH
42647: LD_VAR 0 8
42651: PPUSH
42652: CALL_OW 251
42656: PPUSH
42657: LD_VAR 0 16
42661: PPUSH
42662: CALL_OW 441
42666: GO 42634
42668: POP
42669: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42670: LD_VAR 0 18
42674: PPUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 30
42680: PUSH
42681: LD_INT 32
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 30
42690: PUSH
42691: LD_INT 33
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: PPUSH
42703: CALL_OW 72
42707: IFFALSE 42795
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42709: LD_ADDR_VAR 0 8
42713: PUSH
42714: LD_VAR 0 18
42718: PPUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 30
42724: PUSH
42725: LD_INT 32
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 30
42734: PUSH
42735: LD_INT 33
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: PPUSH
42747: CALL_OW 72
42751: PUSH
42752: FOR_IN
42753: IFFALSE 42793
// begin if not GetBWeapon ( i ) then
42755: LD_VAR 0 8
42759: PPUSH
42760: CALL_OW 269
42764: NOT
42765: IFFALSE 42791
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42767: LD_VAR 0 8
42771: PPUSH
42772: LD_VAR 0 8
42776: PPUSH
42777: LD_VAR 0 2
42781: PPUSH
42782: CALL 44047 0 2
42786: PPUSH
42787: CALL_OW 431
// end ;
42791: GO 42752
42793: POP
42794: POP
// end ; for i = 1 to personel do
42795: LD_ADDR_VAR 0 8
42799: PUSH
42800: DOUBLE
42801: LD_INT 1
42803: DEC
42804: ST_TO_ADDR
42805: LD_VAR 0 6
42809: PUSH
42810: FOR_TO
42811: IFFALSE 43881
// begin if i > 4 then
42813: LD_VAR 0 8
42817: PUSH
42818: LD_INT 4
42820: GREATER
42821: IFFALSE 42825
// break ;
42823: GO 43881
// case i of 1 :
42825: LD_VAR 0 8
42829: PUSH
42830: LD_INT 1
42832: DOUBLE
42833: EQUAL
42834: IFTRUE 42838
42836: GO 42918
42838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42839: LD_ADDR_VAR 0 12
42843: PUSH
42844: LD_VAR 0 18
42848: PPUSH
42849: LD_INT 22
42851: PUSH
42852: LD_VAR 0 16
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 58
42863: PUSH
42864: EMPTY
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 30
42872: PUSH
42873: LD_INT 32
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 30
42882: PUSH
42883: LD_INT 4
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 30
42892: PUSH
42893: LD_INT 5
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: PPUSH
42911: CALL_OW 72
42915: ST_TO_ADDR
42916: GO 43140
42918: LD_INT 2
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42988
42926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42927: LD_ADDR_VAR 0 12
42931: PUSH
42932: LD_VAR 0 18
42936: PPUSH
42937: LD_INT 22
42939: PUSH
42940: LD_VAR 0 16
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 30
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 30
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PPUSH
42981: CALL_OW 72
42985: ST_TO_ADDR
42986: GO 43140
42988: LD_INT 3
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 42996
42994: GO 43058
42996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42997: LD_ADDR_VAR 0 12
43001: PUSH
43002: LD_VAR 0 18
43006: PPUSH
43007: LD_INT 22
43009: PUSH
43010: LD_VAR 0 16
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 30
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 30
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 72
43055: ST_TO_ADDR
43056: GO 43140
43058: LD_INT 4
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43066
43064: GO 43139
43066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43067: LD_ADDR_VAR 0 12
43071: PUSH
43072: LD_VAR 0 18
43076: PPUSH
43077: LD_INT 22
43079: PUSH
43080: LD_VAR 0 16
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 30
43094: PUSH
43095: LD_INT 6
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 30
43104: PUSH
43105: LD_INT 7
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 30
43114: PUSH
43115: LD_INT 8
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PPUSH
43132: CALL_OW 72
43136: ST_TO_ADDR
43137: GO 43140
43139: POP
// if i = 1 then
43140: LD_VAR 0 8
43144: PUSH
43145: LD_INT 1
43147: EQUAL
43148: IFFALSE 43259
// begin tmp := [ ] ;
43150: LD_ADDR_VAR 0 19
43154: PUSH
43155: EMPTY
43156: ST_TO_ADDR
// for j in f do
43157: LD_ADDR_VAR 0 9
43161: PUSH
43162: LD_VAR 0 12
43166: PUSH
43167: FOR_IN
43168: IFFALSE 43241
// if GetBType ( j ) = b_bunker then
43170: LD_VAR 0 9
43174: PPUSH
43175: CALL_OW 266
43179: PUSH
43180: LD_INT 32
43182: EQUAL
43183: IFFALSE 43210
// tmp := Insert ( tmp , 1 , j ) else
43185: LD_ADDR_VAR 0 19
43189: PUSH
43190: LD_VAR 0 19
43194: PPUSH
43195: LD_INT 1
43197: PPUSH
43198: LD_VAR 0 9
43202: PPUSH
43203: CALL_OW 2
43207: ST_TO_ADDR
43208: GO 43239
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43210: LD_ADDR_VAR 0 19
43214: PUSH
43215: LD_VAR 0 19
43219: PPUSH
43220: LD_VAR 0 19
43224: PUSH
43225: LD_INT 1
43227: PLUS
43228: PPUSH
43229: LD_VAR 0 9
43233: PPUSH
43234: CALL_OW 2
43238: ST_TO_ADDR
43239: GO 43167
43241: POP
43242: POP
// if tmp then
43243: LD_VAR 0 19
43247: IFFALSE 43259
// f := tmp ;
43249: LD_ADDR_VAR 0 12
43253: PUSH
43254: LD_VAR 0 19
43258: ST_TO_ADDR
// end ; x := personel [ i ] ;
43259: LD_ADDR_VAR 0 13
43263: PUSH
43264: LD_VAR 0 6
43268: PUSH
43269: LD_VAR 0 8
43273: ARRAY
43274: ST_TO_ADDR
// if x = - 1 then
43275: LD_VAR 0 13
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: EQUAL
43284: IFFALSE 43495
// begin for j in f do
43286: LD_ADDR_VAR 0 9
43290: PUSH
43291: LD_VAR 0 12
43295: PUSH
43296: FOR_IN
43297: IFFALSE 43491
// repeat InitHc ;
43299: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43303: LD_VAR 0 9
43307: PPUSH
43308: CALL_OW 266
43312: PUSH
43313: LD_INT 5
43315: EQUAL
43316: IFFALSE 43386
// begin if UnitsInside ( j ) < 3 then
43318: LD_VAR 0 9
43322: PPUSH
43323: CALL_OW 313
43327: PUSH
43328: LD_INT 3
43330: LESS
43331: IFFALSE 43367
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43333: LD_INT 0
43335: PPUSH
43336: LD_INT 5
43338: PUSH
43339: LD_INT 8
43341: PUSH
43342: LD_INT 9
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: PUSH
43350: LD_VAR 0 17
43354: ARRAY
43355: PPUSH
43356: LD_VAR 0 4
43360: PPUSH
43361: CALL_OW 380
43365: GO 43384
// PrepareHuman ( false , i , skill ) ;
43367: LD_INT 0
43369: PPUSH
43370: LD_VAR 0 8
43374: PPUSH
43375: LD_VAR 0 4
43379: PPUSH
43380: CALL_OW 380
// end else
43384: GO 43403
// PrepareHuman ( false , i , skill ) ;
43386: LD_INT 0
43388: PPUSH
43389: LD_VAR 0 8
43393: PPUSH
43394: LD_VAR 0 4
43398: PPUSH
43399: CALL_OW 380
// un := CreateHuman ;
43403: LD_ADDR_VAR 0 14
43407: PUSH
43408: CALL_OW 44
43412: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43413: LD_ADDR_VAR 0 7
43417: PUSH
43418: LD_VAR 0 7
43422: PPUSH
43423: LD_INT 1
43425: PPUSH
43426: LD_VAR 0 14
43430: PPUSH
43431: CALL_OW 2
43435: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43436: LD_VAR 0 14
43440: PPUSH
43441: LD_VAR 0 9
43445: PPUSH
43446: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43450: LD_VAR 0 9
43454: PPUSH
43455: CALL_OW 313
43459: PUSH
43460: LD_INT 6
43462: EQUAL
43463: IFTRUE 43487
43465: PUSH
43466: LD_VAR 0 9
43470: PPUSH
43471: CALL_OW 266
43475: PUSH
43476: LD_INT 32
43478: PUSH
43479: LD_INT 31
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: IN
43486: OR
43487: IFFALSE 43299
43489: GO 43296
43491: POP
43492: POP
// end else
43493: GO 43879
// for j = 1 to x do
43495: LD_ADDR_VAR 0 9
43499: PUSH
43500: DOUBLE
43501: LD_INT 1
43503: DEC
43504: ST_TO_ADDR
43505: LD_VAR 0 13
43509: PUSH
43510: FOR_TO
43511: IFFALSE 43877
// begin InitHc ;
43513: CALL_OW 19
// if not f then
43517: LD_VAR 0 12
43521: NOT
43522: IFFALSE 43611
// begin PrepareHuman ( false , i , skill ) ;
43524: LD_INT 0
43526: PPUSH
43527: LD_VAR 0 8
43531: PPUSH
43532: LD_VAR 0 4
43536: PPUSH
43537: CALL_OW 380
// un := CreateHuman ;
43541: LD_ADDR_VAR 0 14
43545: PUSH
43546: CALL_OW 44
43550: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43551: LD_ADDR_VAR 0 7
43555: PUSH
43556: LD_VAR 0 7
43560: PPUSH
43561: LD_INT 1
43563: PPUSH
43564: LD_VAR 0 14
43568: PPUSH
43569: CALL_OW 2
43573: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43574: LD_VAR 0 14
43578: PPUSH
43579: LD_VAR 0 1
43583: PPUSH
43584: CALL_OW 250
43588: PPUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: CALL_OW 251
43598: PPUSH
43599: LD_INT 10
43601: PPUSH
43602: LD_INT 0
43604: PPUSH
43605: CALL_OW 50
// continue ;
43609: GO 43510
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43611: LD_VAR 0 12
43615: PUSH
43616: LD_INT 1
43618: ARRAY
43619: PPUSH
43620: CALL_OW 313
43624: IFFALSE 43652
43626: PUSH
43627: LD_VAR 0 12
43631: PUSH
43632: LD_INT 1
43634: ARRAY
43635: PPUSH
43636: CALL_OW 266
43640: PUSH
43641: LD_INT 32
43643: PUSH
43644: LD_INT 31
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: IN
43651: AND
43652: IFTRUE 43673
43654: PUSH
43655: LD_VAR 0 12
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PPUSH
43664: CALL_OW 313
43668: PUSH
43669: LD_INT 6
43671: EQUAL
43672: OR
43673: IFFALSE 43693
// f := Delete ( f , 1 ) ;
43675: LD_ADDR_VAR 0 12
43679: PUSH
43680: LD_VAR 0 12
43684: PPUSH
43685: LD_INT 1
43687: PPUSH
43688: CALL_OW 3
43692: ST_TO_ADDR
// if not f then
43693: LD_VAR 0 12
43697: NOT
43698: IFFALSE 43716
// begin x := x + 2 ;
43700: LD_ADDR_VAR 0 13
43704: PUSH
43705: LD_VAR 0 13
43709: PUSH
43710: LD_INT 2
43712: PLUS
43713: ST_TO_ADDR
// continue ;
43714: GO 43510
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43716: LD_VAR 0 12
43720: PUSH
43721: LD_INT 1
43723: ARRAY
43724: PPUSH
43725: CALL_OW 266
43729: PUSH
43730: LD_INT 5
43732: EQUAL
43733: IFFALSE 43807
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43735: LD_VAR 0 12
43739: PUSH
43740: LD_INT 1
43742: ARRAY
43743: PPUSH
43744: CALL_OW 313
43748: PUSH
43749: LD_INT 3
43751: LESS
43752: IFFALSE 43788
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43754: LD_INT 0
43756: PPUSH
43757: LD_INT 5
43759: PUSH
43760: LD_INT 8
43762: PUSH
43763: LD_INT 9
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: LD_VAR 0 17
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 4
43781: PPUSH
43782: CALL_OW 380
43786: GO 43805
// PrepareHuman ( false , i , skill ) ;
43788: LD_INT 0
43790: PPUSH
43791: LD_VAR 0 8
43795: PPUSH
43796: LD_VAR 0 4
43800: PPUSH
43801: CALL_OW 380
// end else
43805: GO 43824
// PrepareHuman ( false , i , skill ) ;
43807: LD_INT 0
43809: PPUSH
43810: LD_VAR 0 8
43814: PPUSH
43815: LD_VAR 0 4
43819: PPUSH
43820: CALL_OW 380
// un := CreateHuman ;
43824: LD_ADDR_VAR 0 14
43828: PUSH
43829: CALL_OW 44
43833: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43834: LD_ADDR_VAR 0 7
43838: PUSH
43839: LD_VAR 0 7
43843: PPUSH
43844: LD_INT 1
43846: PPUSH
43847: LD_VAR 0 14
43851: PPUSH
43852: CALL_OW 2
43856: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43857: LD_VAR 0 14
43861: PPUSH
43862: LD_VAR 0 12
43866: PUSH
43867: LD_INT 1
43869: ARRAY
43870: PPUSH
43871: CALL_OW 52
// end ;
43875: GO 43510
43877: POP
43878: POP
// end ;
43879: GO 42810
43881: POP
43882: POP
// result := result ^ buildings ;
43883: LD_ADDR_VAR 0 7
43887: PUSH
43888: LD_VAR 0 7
43892: PUSH
43893: LD_VAR 0 18
43897: ADD
43898: ST_TO_ADDR
// end else
43899: GO 44042
// begin for i = 1 to personel do
43901: LD_ADDR_VAR 0 8
43905: PUSH
43906: DOUBLE
43907: LD_INT 1
43909: DEC
43910: ST_TO_ADDR
43911: LD_VAR 0 6
43915: PUSH
43916: FOR_TO
43917: IFFALSE 44040
// begin if i > 4 then
43919: LD_VAR 0 8
43923: PUSH
43924: LD_INT 4
43926: GREATER
43927: IFFALSE 43931
// break ;
43929: GO 44040
// x := personel [ i ] ;
43931: LD_ADDR_VAR 0 13
43935: PUSH
43936: LD_VAR 0 6
43940: PUSH
43941: LD_VAR 0 8
43945: ARRAY
43946: ST_TO_ADDR
// if x = - 1 then
43947: LD_VAR 0 13
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: EQUAL
43956: IFFALSE 43960
// continue ;
43958: GO 43916
// PrepareHuman ( false , i , skill ) ;
43960: LD_INT 0
43962: PPUSH
43963: LD_VAR 0 8
43967: PPUSH
43968: LD_VAR 0 4
43972: PPUSH
43973: CALL_OW 380
// un := CreateHuman ;
43977: LD_ADDR_VAR 0 14
43981: PUSH
43982: CALL_OW 44
43986: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43987: LD_VAR 0 14
43991: PPUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: CALL_OW 250
44001: PPUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 251
44011: PPUSH
44012: LD_INT 10
44014: PPUSH
44015: LD_INT 0
44017: PPUSH
44018: CALL_OW 50
// result := result ^ un ;
44022: LD_ADDR_VAR 0 7
44026: PUSH
44027: LD_VAR 0 7
44031: PUSH
44032: LD_VAR 0 14
44036: ADD
44037: ST_TO_ADDR
// end ;
44038: GO 43916
44040: POP
44041: POP
// end ; end ;
44042: LD_VAR 0 7
44046: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44047: LD_INT 0
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
// result := false ;
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_INT 0
44072: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44073: LD_VAR 0 1
44077: NOT
44078: IFTRUE 44103
44080: PUSH
44081: LD_VAR 0 1
44085: PPUSH
44086: CALL_OW 266
44090: PUSH
44091: LD_INT 32
44093: PUSH
44094: LD_INT 33
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: IN
44101: NOT
44102: OR
44103: IFFALSE 44107
// exit ;
44105: GO 45242
// nat := GetNation ( tower ) ;
44107: LD_ADDR_VAR 0 12
44111: PUSH
44112: LD_VAR 0 1
44116: PPUSH
44117: CALL_OW 248
44121: ST_TO_ADDR
// side := GetSide ( tower ) ;
44122: LD_ADDR_VAR 0 16
44126: PUSH
44127: LD_VAR 0 1
44131: PPUSH
44132: CALL_OW 255
44136: ST_TO_ADDR
// x := GetX ( tower ) ;
44137: LD_ADDR_VAR 0 10
44141: PUSH
44142: LD_VAR 0 1
44146: PPUSH
44147: CALL_OW 250
44151: ST_TO_ADDR
// y := GetY ( tower ) ;
44152: LD_ADDR_VAR 0 11
44156: PUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 251
44166: ST_TO_ADDR
// if not x or not y then
44167: LD_VAR 0 10
44171: NOT
44172: IFTRUE 44181
44174: PUSH
44175: LD_VAR 0 11
44179: NOT
44180: OR
44181: IFFALSE 44185
// exit ;
44183: GO 45242
// weapon := 0 ;
44185: LD_ADDR_VAR 0 18
44189: PUSH
44190: LD_INT 0
44192: ST_TO_ADDR
// fac_list := [ ] ;
44193: LD_ADDR_VAR 0 17
44197: PUSH
44198: EMPTY
44199: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44200: LD_ADDR_VAR 0 6
44204: PUSH
44205: LD_VAR 0 1
44209: PPUSH
44210: CALL_OW 274
44214: PPUSH
44215: LD_VAR 0 2
44219: PPUSH
44220: LD_INT 0
44222: PPUSH
44223: CALL 41777 0 3
44227: PPUSH
44228: LD_INT 30
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PPUSH
44238: CALL_OW 72
44242: ST_TO_ADDR
// if not factories then
44243: LD_VAR 0 6
44247: NOT
44248: IFFALSE 44252
// exit ;
44250: GO 45242
// for i in factories do
44252: LD_ADDR_VAR 0 8
44256: PUSH
44257: LD_VAR 0 6
44261: PUSH
44262: FOR_IN
44263: IFFALSE 44288
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44265: LD_ADDR_VAR 0 17
44269: PUSH
44270: LD_VAR 0 17
44274: PUSH
44275: LD_VAR 0 8
44279: PPUSH
44280: CALL_OW 478
44284: UNION
44285: ST_TO_ADDR
44286: GO 44262
44288: POP
44289: POP
// if not fac_list then
44290: LD_VAR 0 17
44294: NOT
44295: IFFALSE 44299
// exit ;
44297: GO 45242
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44299: LD_ADDR_VAR 0 5
44303: PUSH
44304: LD_INT 4
44306: PUSH
44307: LD_INT 5
44309: PUSH
44310: LD_INT 9
44312: PUSH
44313: LD_INT 10
44315: PUSH
44316: LD_INT 6
44318: PUSH
44319: LD_INT 7
44321: PUSH
44322: LD_INT 11
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 27
44336: PUSH
44337: LD_INT 28
44339: PUSH
44340: LD_INT 26
44342: PUSH
44343: LD_INT 30
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 43
44354: PUSH
44355: LD_INT 44
44357: PUSH
44358: LD_INT 46
44360: PUSH
44361: LD_INT 45
44363: PUSH
44364: LD_INT 47
44366: PUSH
44367: LD_INT 49
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: PUSH
44383: LD_VAR 0 12
44387: ARRAY
44388: ST_TO_ADDR
// list := list isect fac_list ;
44389: LD_ADDR_VAR 0 5
44393: PUSH
44394: LD_VAR 0 5
44398: PUSH
44399: LD_VAR 0 17
44403: ISECT
44404: ST_TO_ADDR
// if not list then
44405: LD_VAR 0 5
44409: NOT
44410: IFFALSE 44414
// exit ;
44412: GO 45242
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44414: LD_VAR 0 12
44418: PUSH
44419: LD_INT 3
44421: EQUAL
44422: IFFALSE 44434
44424: PUSH
44425: LD_INT 49
44427: PUSH
44428: LD_VAR 0 5
44432: IN
44433: AND
44434: IFFALSE 44454
44436: PUSH
44437: LD_INT 31
44439: PPUSH
44440: LD_VAR 0 16
44444: PPUSH
44445: CALL_OW 321
44449: PUSH
44450: LD_INT 2
44452: EQUAL
44453: AND
44454: IFFALSE 44514
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44456: LD_INT 22
44458: PUSH
44459: LD_VAR 0 16
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 35
44470: PUSH
44471: LD_INT 49
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 91
44480: PUSH
44481: LD_VAR 0 1
44485: PUSH
44486: LD_INT 10
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: PPUSH
44499: CALL_OW 69
44503: NOT
44504: IFFALSE 44514
// weapon := ru_time_lapser ;
44506: LD_ADDR_VAR 0 18
44510: PUSH
44511: LD_INT 49
44513: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44514: LD_VAR 0 12
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: IN
44529: IFFALSE 44553
44531: PUSH
44532: LD_INT 11
44534: PUSH
44535: LD_VAR 0 5
44539: IN
44540: IFTRUE 44552
44542: PUSH
44543: LD_INT 30
44545: PUSH
44546: LD_VAR 0 5
44550: IN
44551: OR
44552: AND
44553: IFFALSE 44573
44555: PUSH
44556: LD_INT 6
44558: PPUSH
44559: LD_VAR 0 16
44563: PPUSH
44564: CALL_OW 321
44568: PUSH
44569: LD_INT 2
44571: EQUAL
44572: AND
44573: IFFALSE 44740
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44575: LD_INT 22
44577: PUSH
44578: LD_VAR 0 16
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 35
44592: PUSH
44593: LD_INT 11
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 35
44602: PUSH
44603: LD_INT 30
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 91
44617: PUSH
44618: LD_VAR 0 1
44622: PUSH
44623: LD_INT 18
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: PPUSH
44636: CALL_OW 69
44640: NOT
44641: IFFALSE 44717
44643: PUSH
44644: LD_INT 22
44646: PUSH
44647: LD_VAR 0 16
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 30
44661: PUSH
44662: LD_INT 32
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 30
44671: PUSH
44672: LD_INT 33
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 91
44686: PUSH
44687: LD_VAR 0 1
44691: PUSH
44692: LD_INT 12
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: PPUSH
44708: CALL_OW 69
44712: PUSH
44713: LD_INT 2
44715: GREATER
44716: AND
44717: IFFALSE 44740
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44719: LD_ADDR_VAR 0 18
44723: PUSH
44724: LD_INT 11
44726: PUSH
44727: LD_INT 30
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_VAR 0 12
44738: ARRAY
44739: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44740: LD_VAR 0 18
44744: NOT
44745: IFFALSE 44765
44747: PUSH
44748: LD_INT 40
44750: PPUSH
44751: LD_VAR 0 16
44755: PPUSH
44756: CALL_OW 321
44760: PUSH
44761: LD_INT 2
44763: EQUAL
44764: AND
44765: IFFALSE 44801
44767: PUSH
44768: LD_INT 7
44770: PUSH
44771: LD_VAR 0 5
44775: IN
44776: IFTRUE 44788
44778: PUSH
44779: LD_INT 28
44781: PUSH
44782: LD_VAR 0 5
44786: IN
44787: OR
44788: IFTRUE 44800
44790: PUSH
44791: LD_INT 45
44793: PUSH
44794: LD_VAR 0 5
44798: IN
44799: OR
44800: AND
44801: IFFALSE 45055
// begin hex := GetHexInfo ( x , y ) ;
44803: LD_ADDR_VAR 0 4
44807: PUSH
44808: LD_VAR 0 10
44812: PPUSH
44813: LD_VAR 0 11
44817: PPUSH
44818: CALL_OW 546
44822: ST_TO_ADDR
// if hex [ 1 ] then
44823: LD_VAR 0 4
44827: PUSH
44828: LD_INT 1
44830: ARRAY
44831: IFFALSE 44835
// exit ;
44833: GO 45242
// height := hex [ 2 ] ;
44835: LD_ADDR_VAR 0 15
44839: PUSH
44840: LD_VAR 0 4
44844: PUSH
44845: LD_INT 2
44847: ARRAY
44848: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44849: LD_ADDR_VAR 0 14
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 5
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: ST_TO_ADDR
// for i in tmp do
44872: LD_ADDR_VAR 0 8
44876: PUSH
44877: LD_VAR 0 14
44881: PUSH
44882: FOR_IN
44883: IFFALSE 45053
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44885: LD_ADDR_VAR 0 9
44889: PUSH
44890: LD_VAR 0 10
44894: PPUSH
44895: LD_VAR 0 8
44899: PPUSH
44900: LD_INT 5
44902: PPUSH
44903: CALL_OW 272
44907: PUSH
44908: LD_VAR 0 11
44912: PPUSH
44913: LD_VAR 0 8
44917: PPUSH
44918: LD_INT 5
44920: PPUSH
44921: CALL_OW 273
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44930: LD_VAR 0 9
44934: PUSH
44935: LD_INT 1
44937: ARRAY
44938: PPUSH
44939: LD_VAR 0 9
44943: PUSH
44944: LD_INT 2
44946: ARRAY
44947: PPUSH
44948: CALL_OW 488
44952: IFFALSE 45051
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44954: LD_ADDR_VAR 0 4
44958: PUSH
44959: LD_VAR 0 9
44963: PUSH
44964: LD_INT 1
44966: ARRAY
44967: PPUSH
44968: LD_VAR 0 9
44972: PUSH
44973: LD_INT 2
44975: ARRAY
44976: PPUSH
44977: CALL_OW 546
44981: ST_TO_ADDR
// if hex [ 1 ] then
44982: LD_VAR 0 4
44986: PUSH
44987: LD_INT 1
44989: ARRAY
44990: IFFALSE 44994
// continue ;
44992: GO 44882
// h := hex [ 2 ] ;
44994: LD_ADDR_VAR 0 13
44998: PUSH
44999: LD_VAR 0 4
45003: PUSH
45004: LD_INT 2
45006: ARRAY
45007: ST_TO_ADDR
// if h + 7 < height then
45008: LD_VAR 0 13
45012: PUSH
45013: LD_INT 7
45015: PLUS
45016: PUSH
45017: LD_VAR 0 15
45021: LESS
45022: IFFALSE 45051
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45024: LD_ADDR_VAR 0 18
45028: PUSH
45029: LD_INT 7
45031: PUSH
45032: LD_INT 28
45034: PUSH
45035: LD_INT 45
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: PUSH
45043: LD_VAR 0 12
45047: ARRAY
45048: ST_TO_ADDR
// break ;
45049: GO 45053
// end ; end ; end ;
45051: GO 44882
45053: POP
45054: POP
// end ; if not weapon then
45055: LD_VAR 0 18
45059: NOT
45060: IFFALSE 45120
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45062: LD_ADDR_VAR 0 5
45066: PUSH
45067: LD_VAR 0 5
45071: PUSH
45072: LD_INT 11
45074: PUSH
45075: LD_INT 30
45077: PUSH
45078: LD_INT 49
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: DIFF
45086: ST_TO_ADDR
// if not list then
45087: LD_VAR 0 5
45091: NOT
45092: IFFALSE 45096
// exit ;
45094: GO 45242
// weapon := list [ rand ( 1 , list ) ] ;
45096: LD_ADDR_VAR 0 18
45100: PUSH
45101: LD_VAR 0 5
45105: PUSH
45106: LD_INT 1
45108: PPUSH
45109: LD_VAR 0 5
45113: PPUSH
45114: CALL_OW 12
45118: ARRAY
45119: ST_TO_ADDR
// end ; if weapon then
45120: LD_VAR 0 18
45124: IFFALSE 45242
// begin tmp := CostOfWeapon ( weapon ) ;
45126: LD_ADDR_VAR 0 14
45130: PUSH
45131: LD_VAR 0 18
45135: PPUSH
45136: CALL_OW 451
45140: ST_TO_ADDR
// j := GetBase ( tower ) ;
45141: LD_ADDR_VAR 0 9
45145: PUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 274
45155: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45156: LD_VAR 0 9
45160: PPUSH
45161: LD_INT 1
45163: PPUSH
45164: CALL_OW 275
45168: PUSH
45169: LD_VAR 0 14
45173: PUSH
45174: LD_INT 1
45176: ARRAY
45177: GREATEREQUAL
45178: IFFALSE 45204
45180: PUSH
45181: LD_VAR 0 9
45185: PPUSH
45186: LD_INT 2
45188: PPUSH
45189: CALL_OW 275
45193: PUSH
45194: LD_VAR 0 14
45198: PUSH
45199: LD_INT 2
45201: ARRAY
45202: GREATEREQUAL
45203: AND
45204: IFFALSE 45230
45206: PUSH
45207: LD_VAR 0 9
45211: PPUSH
45212: LD_INT 3
45214: PPUSH
45215: CALL_OW 275
45219: PUSH
45220: LD_VAR 0 14
45224: PUSH
45225: LD_INT 3
45227: ARRAY
45228: GREATEREQUAL
45229: AND
45230: IFFALSE 45242
// result := weapon ;
45232: LD_ADDR_VAR 0 3
45236: PUSH
45237: LD_VAR 0 18
45241: ST_TO_ADDR
// end ; end ;
45242: LD_VAR 0 3
45246: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45247: LD_INT 0
45249: PPUSH
45250: PPUSH
// result := true ;
45251: LD_ADDR_VAR 0 3
45255: PUSH
45256: LD_INT 1
45258: ST_TO_ADDR
// if array1 = array2 then
45259: LD_VAR 0 1
45263: PUSH
45264: LD_VAR 0 2
45268: EQUAL
45269: IFFALSE 45329
// begin for i = 1 to array1 do
45271: LD_ADDR_VAR 0 4
45275: PUSH
45276: DOUBLE
45277: LD_INT 1
45279: DEC
45280: ST_TO_ADDR
45281: LD_VAR 0 1
45285: PUSH
45286: FOR_TO
45287: IFFALSE 45325
// if array1 [ i ] <> array2 [ i ] then
45289: LD_VAR 0 1
45293: PUSH
45294: LD_VAR 0 4
45298: ARRAY
45299: PUSH
45300: LD_VAR 0 2
45304: PUSH
45305: LD_VAR 0 4
45309: ARRAY
45310: NONEQUAL
45311: IFFALSE 45323
// begin result := false ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_INT 0
45320: ST_TO_ADDR
// break ;
45321: GO 45325
// end ;
45323: GO 45286
45325: POP
45326: POP
// end else
45327: GO 45337
// result := false ;
45329: LD_ADDR_VAR 0 3
45333: PUSH
45334: LD_INT 0
45336: ST_TO_ADDR
// end ;
45337: LD_VAR 0 3
45341: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45342: LD_INT 0
45344: PPUSH
45345: PPUSH
// if not array1 or not array2 then
45346: LD_VAR 0 1
45350: NOT
45351: IFTRUE 45360
45353: PUSH
45354: LD_VAR 0 2
45358: NOT
45359: OR
45360: IFFALSE 45364
// exit ;
45362: GO 45428
// result := true ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 1
45371: ST_TO_ADDR
// for i = 1 to array1 do
45372: LD_ADDR_VAR 0 4
45376: PUSH
45377: DOUBLE
45378: LD_INT 1
45380: DEC
45381: ST_TO_ADDR
45382: LD_VAR 0 1
45386: PUSH
45387: FOR_TO
45388: IFFALSE 45426
// if array1 [ i ] <> array2 [ i ] then
45390: LD_VAR 0 1
45394: PUSH
45395: LD_VAR 0 4
45399: ARRAY
45400: PUSH
45401: LD_VAR 0 2
45405: PUSH
45406: LD_VAR 0 4
45410: ARRAY
45411: NONEQUAL
45412: IFFALSE 45424
// begin result := false ;
45414: LD_ADDR_VAR 0 3
45418: PUSH
45419: LD_INT 0
45421: ST_TO_ADDR
// break ;
45422: GO 45426
// end ;
45424: GO 45387
45426: POP
45427: POP
// end ;
45428: LD_VAR 0 3
45432: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
45437: PPUSH
// pom := GetBase ( fac ) ;
45438: LD_ADDR_VAR 0 5
45442: PUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 274
45452: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_VAR 0 2
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PPUSH
45467: LD_VAR 0 2
45471: PUSH
45472: LD_INT 2
45474: ARRAY
45475: PPUSH
45476: LD_VAR 0 2
45480: PUSH
45481: LD_INT 3
45483: ARRAY
45484: PPUSH
45485: LD_VAR 0 2
45489: PUSH
45490: LD_INT 4
45492: ARRAY
45493: PPUSH
45494: CALL_OW 449
45498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45499: LD_ADDR_VAR 0 3
45503: PUSH
45504: LD_VAR 0 5
45508: PPUSH
45509: LD_INT 1
45511: PPUSH
45512: CALL_OW 275
45516: PUSH
45517: LD_VAR 0 4
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: GREATEREQUAL
45526: IFFALSE 45552
45528: PUSH
45529: LD_VAR 0 5
45533: PPUSH
45534: LD_INT 2
45536: PPUSH
45537: CALL_OW 275
45541: PUSH
45542: LD_VAR 0 4
45546: PUSH
45547: LD_INT 2
45549: ARRAY
45550: GREATEREQUAL
45551: AND
45552: IFFALSE 45578
45554: PUSH
45555: LD_VAR 0 5
45559: PPUSH
45560: LD_INT 3
45562: PPUSH
45563: CALL_OW 275
45567: PUSH
45568: LD_VAR 0 4
45572: PUSH
45573: LD_INT 3
45575: ARRAY
45576: GREATEREQUAL
45577: AND
45578: ST_TO_ADDR
// end ;
45579: LD_VAR 0 3
45583: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45584: LD_INT 0
45586: PPUSH
45587: PPUSH
45588: PPUSH
45589: PPUSH
// pom := GetBase ( building ) ;
45590: LD_ADDR_VAR 0 3
45594: PUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: CALL_OW 274
45604: ST_TO_ADDR
// if not pom then
45605: LD_VAR 0 3
45609: NOT
45610: IFFALSE 45614
// exit ;
45612: GO 45788
// btype := GetBType ( building ) ;
45614: LD_ADDR_VAR 0 5
45618: PUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: CALL_OW 266
45628: ST_TO_ADDR
// if btype = b_armoury then
45629: LD_VAR 0 5
45633: PUSH
45634: LD_INT 4
45636: EQUAL
45637: IFFALSE 45647
// btype := b_barracks ;
45639: LD_ADDR_VAR 0 5
45643: PUSH
45644: LD_INT 5
45646: ST_TO_ADDR
// if btype = b_depot then
45647: LD_VAR 0 5
45651: PUSH
45652: LD_INT 0
45654: EQUAL
45655: IFFALSE 45665
// btype := b_warehouse ;
45657: LD_ADDR_VAR 0 5
45661: PUSH
45662: LD_INT 1
45664: ST_TO_ADDR
// if btype = b_workshop then
45665: LD_VAR 0 5
45669: PUSH
45670: LD_INT 2
45672: EQUAL
45673: IFFALSE 45683
// btype := b_factory ;
45675: LD_ADDR_VAR 0 5
45679: PUSH
45680: LD_INT 3
45682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45683: LD_ADDR_VAR 0 4
45687: PUSH
45688: LD_VAR 0 5
45692: PPUSH
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 248
45702: PPUSH
45703: CALL_OW 450
45707: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45708: LD_ADDR_VAR 0 2
45712: PUSH
45713: LD_VAR 0 3
45717: PPUSH
45718: LD_INT 1
45720: PPUSH
45721: CALL_OW 275
45725: PUSH
45726: LD_VAR 0 4
45730: PUSH
45731: LD_INT 1
45733: ARRAY
45734: GREATEREQUAL
45735: IFFALSE 45761
45737: PUSH
45738: LD_VAR 0 3
45742: PPUSH
45743: LD_INT 2
45745: PPUSH
45746: CALL_OW 275
45750: PUSH
45751: LD_VAR 0 4
45755: PUSH
45756: LD_INT 2
45758: ARRAY
45759: GREATEREQUAL
45760: AND
45761: IFFALSE 45787
45763: PUSH
45764: LD_VAR 0 3
45768: PPUSH
45769: LD_INT 3
45771: PPUSH
45772: CALL_OW 275
45776: PUSH
45777: LD_VAR 0 4
45781: PUSH
45782: LD_INT 3
45784: ARRAY
45785: GREATEREQUAL
45786: AND
45787: ST_TO_ADDR
// end ;
45788: LD_VAR 0 2
45792: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45793: LD_INT 0
45795: PPUSH
45796: PPUSH
45797: PPUSH
// pom := GetBase ( building ) ;
45798: LD_ADDR_VAR 0 4
45802: PUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 274
45812: ST_TO_ADDR
// if not pom then
45813: LD_VAR 0 4
45817: NOT
45818: IFFALSE 45822
// exit ;
45820: GO 45927
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45822: LD_ADDR_VAR 0 5
45826: PUSH
45827: LD_VAR 0 2
45831: PPUSH
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 248
45841: PPUSH
45842: CALL_OW 450
45846: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_VAR 0 4
45856: PPUSH
45857: LD_INT 1
45859: PPUSH
45860: CALL_OW 275
45864: PUSH
45865: LD_VAR 0 5
45869: PUSH
45870: LD_INT 1
45872: ARRAY
45873: GREATEREQUAL
45874: IFFALSE 45900
45876: PUSH
45877: LD_VAR 0 4
45881: PPUSH
45882: LD_INT 2
45884: PPUSH
45885: CALL_OW 275
45889: PUSH
45890: LD_VAR 0 5
45894: PUSH
45895: LD_INT 2
45897: ARRAY
45898: GREATEREQUAL
45899: AND
45900: IFFALSE 45926
45902: PUSH
45903: LD_VAR 0 4
45907: PPUSH
45908: LD_INT 3
45910: PPUSH
45911: CALL_OW 275
45915: PUSH
45916: LD_VAR 0 5
45920: PUSH
45921: LD_INT 3
45923: ARRAY
45924: GREATEREQUAL
45925: AND
45926: ST_TO_ADDR
// end ;
45927: LD_VAR 0 3
45931: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45932: LD_INT 0
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
// result := false ;
45945: LD_ADDR_VAR 0 8
45949: PUSH
45950: LD_INT 0
45952: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45953: LD_VAR 0 5
45957: NOT
45958: IFTRUE 45967
45960: PUSH
45961: LD_VAR 0 1
45965: NOT
45966: OR
45967: IFTRUE 45976
45969: PUSH
45970: LD_VAR 0 2
45974: NOT
45975: OR
45976: IFTRUE 45985
45978: PUSH
45979: LD_VAR 0 3
45983: NOT
45984: OR
45985: IFFALSE 45989
// exit ;
45987: GO 46815
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45989: LD_ADDR_VAR 0 14
45993: PUSH
45994: LD_VAR 0 1
45998: PPUSH
45999: LD_VAR 0 2
46003: PPUSH
46004: LD_VAR 0 3
46008: PPUSH
46009: LD_VAR 0 4
46013: PPUSH
46014: LD_VAR 0 5
46018: PUSH
46019: LD_INT 1
46021: ARRAY
46022: PPUSH
46023: CALL_OW 248
46027: PPUSH
46028: LD_INT 0
46030: PPUSH
46031: CALL 48096 0 6
46035: ST_TO_ADDR
// if not hexes then
46036: LD_VAR 0 14
46040: NOT
46041: IFFALSE 46045
// exit ;
46043: GO 46815
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46045: LD_ADDR_VAR 0 17
46049: PUSH
46050: LD_VAR 0 5
46054: PPUSH
46055: LD_INT 22
46057: PUSH
46058: LD_VAR 0 13
46062: PPUSH
46063: CALL_OW 255
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 30
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 30
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PPUSH
46104: CALL_OW 72
46108: ST_TO_ADDR
// for i = 1 to hexes do
46109: LD_ADDR_VAR 0 9
46113: PUSH
46114: DOUBLE
46115: LD_INT 1
46117: DEC
46118: ST_TO_ADDR
46119: LD_VAR 0 14
46123: PUSH
46124: FOR_TO
46125: IFFALSE 46813
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46127: LD_ADDR_VAR 0 13
46131: PUSH
46132: LD_VAR 0 14
46136: PUSH
46137: LD_VAR 0 9
46141: ARRAY
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PPUSH
46147: LD_VAR 0 14
46151: PUSH
46152: LD_VAR 0 9
46156: ARRAY
46157: PUSH
46158: LD_INT 2
46160: ARRAY
46161: PPUSH
46162: CALL_OW 428
46166: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46167: LD_VAR 0 14
46171: PUSH
46172: LD_VAR 0 9
46176: ARRAY
46177: PUSH
46178: LD_INT 1
46180: ARRAY
46181: PPUSH
46182: LD_VAR 0 14
46186: PUSH
46187: LD_VAR 0 9
46191: ARRAY
46192: PUSH
46193: LD_INT 2
46195: ARRAY
46196: PPUSH
46197: CALL_OW 351
46201: IFTRUE 46240
46203: PUSH
46204: LD_VAR 0 14
46208: PUSH
46209: LD_VAR 0 9
46213: ARRAY
46214: PUSH
46215: LD_INT 1
46217: ARRAY
46218: PPUSH
46219: LD_VAR 0 14
46223: PUSH
46224: LD_VAR 0 9
46228: ARRAY
46229: PUSH
46230: LD_INT 2
46232: ARRAY
46233: PPUSH
46234: CALL_OW 488
46238: NOT
46239: OR
46240: IFTRUE 46257
46242: PUSH
46243: LD_VAR 0 13
46247: PPUSH
46248: CALL_OW 247
46252: PUSH
46253: LD_INT 3
46255: EQUAL
46256: OR
46257: IFFALSE 46263
// exit ;
46259: POP
46260: POP
46261: GO 46815
// if not tmp then
46263: LD_VAR 0 13
46267: NOT
46268: IFFALSE 46272
// continue ;
46270: GO 46124
// result := true ;
46272: LD_ADDR_VAR 0 8
46276: PUSH
46277: LD_INT 1
46279: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46280: LD_VAR 0 6
46284: IFFALSE 46301
46286: PUSH
46287: LD_VAR 0 13
46291: PPUSH
46292: CALL_OW 247
46296: PUSH
46297: LD_INT 2
46299: EQUAL
46300: AND
46301: IFFALSE 46318
46303: PUSH
46304: LD_VAR 0 13
46308: PPUSH
46309: CALL_OW 263
46313: PUSH
46314: LD_INT 1
46316: EQUAL
46317: AND
46318: IFFALSE 46482
// begin if IsDrivenBy ( tmp ) then
46320: LD_VAR 0 13
46324: PPUSH
46325: CALL_OW 311
46329: IFFALSE 46333
// continue ;
46331: GO 46124
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46333: LD_VAR 0 6
46337: PPUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 60
46343: PUSH
46344: EMPTY
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 55
46356: PUSH
46357: EMPTY
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PPUSH
46368: CALL_OW 72
46372: IFFALSE 46480
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46374: LD_ADDR_VAR 0 18
46378: PUSH
46379: LD_VAR 0 6
46383: PPUSH
46384: LD_INT 3
46386: PUSH
46387: LD_INT 60
46389: PUSH
46390: EMPTY
46391: LIST
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 55
46402: PUSH
46403: EMPTY
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PPUSH
46414: CALL_OW 72
46418: PUSH
46419: LD_INT 1
46421: ARRAY
46422: ST_TO_ADDR
// if IsInUnit ( driver ) then
46423: LD_VAR 0 18
46427: PPUSH
46428: CALL_OW 310
46432: IFFALSE 46443
// ComExit ( driver ) ;
46434: LD_VAR 0 18
46438: PPUSH
46439: CALL 72086 0 1
// AddComEnterUnit ( driver , tmp ) ;
46443: LD_VAR 0 18
46447: PPUSH
46448: LD_VAR 0 13
46452: PPUSH
46453: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46457: LD_VAR 0 18
46461: PPUSH
46462: LD_VAR 0 7
46466: PPUSH
46467: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46471: LD_VAR 0 18
46475: PPUSH
46476: CALL_OW 181
// end ; continue ;
46480: GO 46124
// end ; if not cleaners or not tmp in cleaners then
46482: LD_VAR 0 6
46486: NOT
46487: IFTRUE 46502
46489: PUSH
46490: LD_VAR 0 13
46494: PUSH
46495: LD_VAR 0 6
46499: IN
46500: NOT
46501: OR
46502: IFFALSE 46811
// begin if dep then
46504: LD_VAR 0 17
46508: IFFALSE 46644
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46510: LD_ADDR_VAR 0 16
46514: PUSH
46515: LD_VAR 0 17
46519: PUSH
46520: LD_INT 1
46522: ARRAY
46523: PPUSH
46524: CALL_OW 250
46528: PPUSH
46529: LD_VAR 0 17
46533: PUSH
46534: LD_INT 1
46536: ARRAY
46537: PPUSH
46538: CALL_OW 254
46542: PPUSH
46543: LD_INT 5
46545: PPUSH
46546: CALL_OW 272
46550: PUSH
46551: LD_VAR 0 17
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PPUSH
46560: CALL_OW 251
46564: PPUSH
46565: LD_VAR 0 17
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PPUSH
46574: CALL_OW 254
46578: PPUSH
46579: LD_INT 5
46581: PPUSH
46582: CALL_OW 273
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46591: LD_VAR 0 16
46595: PUSH
46596: LD_INT 1
46598: ARRAY
46599: PPUSH
46600: LD_VAR 0 16
46604: PUSH
46605: LD_INT 2
46607: ARRAY
46608: PPUSH
46609: CALL_OW 488
46613: IFFALSE 46644
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46615: LD_VAR 0 13
46619: PPUSH
46620: LD_VAR 0 16
46624: PUSH
46625: LD_INT 1
46627: ARRAY
46628: PPUSH
46629: LD_VAR 0 16
46633: PUSH
46634: LD_INT 2
46636: ARRAY
46637: PPUSH
46638: CALL_OW 111
// continue ;
46642: GO 46124
// end ; end ; r := GetDir ( tmp ) ;
46644: LD_ADDR_VAR 0 15
46648: PUSH
46649: LD_VAR 0 13
46653: PPUSH
46654: CALL_OW 254
46658: ST_TO_ADDR
// if r = 5 then
46659: LD_VAR 0 15
46663: PUSH
46664: LD_INT 5
46666: EQUAL
46667: IFFALSE 46677
// r := 0 ;
46669: LD_ADDR_VAR 0 15
46673: PUSH
46674: LD_INT 0
46676: ST_TO_ADDR
// for j = r to 5 do
46677: LD_ADDR_VAR 0 10
46681: PUSH
46682: DOUBLE
46683: LD_VAR 0 15
46687: DEC
46688: ST_TO_ADDR
46689: LD_INT 5
46691: PUSH
46692: FOR_TO
46693: IFFALSE 46809
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46695: LD_ADDR_VAR 0 11
46699: PUSH
46700: LD_VAR 0 13
46704: PPUSH
46705: CALL_OW 250
46709: PPUSH
46710: LD_VAR 0 10
46714: PPUSH
46715: LD_INT 2
46717: PPUSH
46718: CALL_OW 272
46722: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46723: LD_ADDR_VAR 0 12
46727: PUSH
46728: LD_VAR 0 13
46732: PPUSH
46733: CALL_OW 251
46737: PPUSH
46738: LD_VAR 0 10
46742: PPUSH
46743: LD_INT 2
46745: PPUSH
46746: CALL_OW 273
46750: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46751: LD_VAR 0 11
46755: PPUSH
46756: LD_VAR 0 12
46760: PPUSH
46761: CALL_OW 488
46765: IFFALSE 46784
46767: PUSH
46768: LD_VAR 0 11
46772: PPUSH
46773: LD_VAR 0 12
46777: PPUSH
46778: CALL_OW 428
46782: NOT
46783: AND
46784: IFFALSE 46807
// begin ComMoveXY ( tmp , _x , _y ) ;
46786: LD_VAR 0 13
46790: PPUSH
46791: LD_VAR 0 11
46795: PPUSH
46796: LD_VAR 0 12
46800: PPUSH
46801: CALL_OW 111
// break ;
46805: GO 46809
// end ; end ;
46807: GO 46692
46809: POP
46810: POP
// end ; end ;
46811: GO 46124
46813: POP
46814: POP
// end ;
46815: LD_VAR 0 8
46819: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46820: LD_INT 0
46822: PPUSH
// result := true ;
46823: LD_ADDR_VAR 0 3
46827: PUSH
46828: LD_INT 1
46830: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46831: LD_VAR 0 2
46835: PUSH
46836: LD_INT 24
46838: DOUBLE
46839: EQUAL
46840: IFTRUE 46850
46842: LD_INT 33
46844: DOUBLE
46845: EQUAL
46846: IFTRUE 46850
46848: GO 46875
46850: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46851: LD_ADDR_VAR 0 3
46855: PUSH
46856: LD_INT 32
46858: PPUSH
46859: LD_VAR 0 1
46863: PPUSH
46864: CALL_OW 321
46868: PUSH
46869: LD_INT 2
46871: EQUAL
46872: ST_TO_ADDR
46873: GO 47191
46875: LD_INT 20
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46908
46883: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46884: LD_ADDR_VAR 0 3
46888: PUSH
46889: LD_INT 6
46891: PPUSH
46892: LD_VAR 0 1
46896: PPUSH
46897: CALL_OW 321
46901: PUSH
46902: LD_INT 2
46904: EQUAL
46905: ST_TO_ADDR
46906: GO 47191
46908: LD_INT 22
46910: DOUBLE
46911: EQUAL
46912: IFTRUE 46922
46914: LD_INT 36
46916: DOUBLE
46917: EQUAL
46918: IFTRUE 46922
46920: GO 46947
46922: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46923: LD_ADDR_VAR 0 3
46927: PUSH
46928: LD_INT 15
46930: PPUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: CALL_OW 321
46940: PUSH
46941: LD_INT 2
46943: EQUAL
46944: ST_TO_ADDR
46945: GO 47191
46947: LD_INT 30
46949: DOUBLE
46950: EQUAL
46951: IFTRUE 46955
46953: GO 46980
46955: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_INT 20
46963: PPUSH
46964: LD_VAR 0 1
46968: PPUSH
46969: CALL_OW 321
46973: PUSH
46974: LD_INT 2
46976: EQUAL
46977: ST_TO_ADDR
46978: GO 47191
46980: LD_INT 28
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46994
46986: LD_INT 21
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47019
46994: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46995: LD_ADDR_VAR 0 3
46999: PUSH
47000: LD_INT 21
47002: PPUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 321
47012: PUSH
47013: LD_INT 2
47015: EQUAL
47016: ST_TO_ADDR
47017: GO 47191
47019: LD_INT 16
47021: DOUBLE
47022: EQUAL
47023: IFTRUE 47027
47025: GO 47052
47027: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47028: LD_ADDR_VAR 0 3
47032: PUSH
47033: LD_INT 84
47035: PPUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 321
47045: PUSH
47046: LD_INT 2
47048: EQUAL
47049: ST_TO_ADDR
47050: GO 47191
47052: LD_INT 19
47054: DOUBLE
47055: EQUAL
47056: IFTRUE 47066
47058: LD_INT 23
47060: DOUBLE
47061: EQUAL
47062: IFTRUE 47066
47064: GO 47091
47066: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47067: LD_ADDR_VAR 0 3
47071: PUSH
47072: LD_INT 83
47074: PPUSH
47075: LD_VAR 0 1
47079: PPUSH
47080: CALL_OW 321
47084: PUSH
47085: LD_INT 2
47087: EQUAL
47088: ST_TO_ADDR
47089: GO 47191
47091: LD_INT 17
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47124
47099: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47100: LD_ADDR_VAR 0 3
47104: PUSH
47105: LD_INT 39
47107: PPUSH
47108: LD_VAR 0 1
47112: PPUSH
47113: CALL_OW 321
47117: PUSH
47118: LD_INT 2
47120: EQUAL
47121: ST_TO_ADDR
47122: GO 47191
47124: LD_INT 18
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47132
47130: GO 47157
47132: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47133: LD_ADDR_VAR 0 3
47137: PUSH
47138: LD_INT 40
47140: PPUSH
47141: LD_VAR 0 1
47145: PPUSH
47146: CALL_OW 321
47150: PUSH
47151: LD_INT 2
47153: EQUAL
47154: ST_TO_ADDR
47155: GO 47191
47157: LD_INT 27
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47190
47165: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_INT 35
47173: PPUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL_OW 321
47183: PUSH
47184: LD_INT 2
47186: EQUAL
47187: ST_TO_ADDR
47188: GO 47191
47190: POP
// end ;
47191: LD_VAR 0 3
47195: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47196: LD_INT 0
47198: PPUSH
47199: PPUSH
47200: PPUSH
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
47205: PPUSH
47206: PPUSH
47207: PPUSH
47208: PPUSH
// result := false ;
47209: LD_ADDR_VAR 0 6
47213: PUSH
47214: LD_INT 0
47216: ST_TO_ADDR
// if btype = b_depot then
47217: LD_VAR 0 2
47221: PUSH
47222: LD_INT 0
47224: EQUAL
47225: IFFALSE 47237
// begin result := true ;
47227: LD_ADDR_VAR 0 6
47231: PUSH
47232: LD_INT 1
47234: ST_TO_ADDR
// exit ;
47235: GO 48091
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47237: LD_VAR 0 1
47241: NOT
47242: IFTRUE 47267
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: CALL_OW 266
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: IN
47265: NOT
47266: OR
47267: IFTRUE 47276
47269: PUSH
47270: LD_VAR 0 2
47274: NOT
47275: OR
47276: IFTRUE 47312
47278: PUSH
47279: LD_VAR 0 5
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 4
47298: PUSH
47299: LD_INT 5
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: IN
47310: NOT
47311: OR
47312: IFTRUE 47331
47314: PUSH
47315: LD_VAR 0 3
47319: PPUSH
47320: LD_VAR 0 4
47324: PPUSH
47325: CALL_OW 488
47329: NOT
47330: OR
47331: IFFALSE 47335
// exit ;
47333: GO 48091
// side := GetSide ( depot ) ;
47335: LD_ADDR_VAR 0 9
47339: PUSH
47340: LD_VAR 0 1
47344: PPUSH
47345: CALL_OW 255
47349: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47350: LD_VAR 0 9
47354: PPUSH
47355: LD_VAR 0 2
47359: PPUSH
47360: CALL 46820 0 2
47364: NOT
47365: IFFALSE 47369
// exit ;
47367: GO 48091
// pom := GetBase ( depot ) ;
47369: LD_ADDR_VAR 0 10
47373: PUSH
47374: LD_VAR 0 1
47378: PPUSH
47379: CALL_OW 274
47383: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47384: LD_ADDR_VAR 0 11
47388: PUSH
47389: LD_VAR 0 2
47393: PPUSH
47394: LD_VAR 0 1
47398: PPUSH
47399: CALL_OW 248
47403: PPUSH
47404: CALL_OW 450
47408: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47409: LD_VAR 0 10
47413: PPUSH
47414: LD_INT 1
47416: PPUSH
47417: CALL_OW 275
47421: PUSH
47422: LD_VAR 0 11
47426: PUSH
47427: LD_INT 1
47429: ARRAY
47430: GREATEREQUAL
47431: IFFALSE 47457
47433: PUSH
47434: LD_VAR 0 10
47438: PPUSH
47439: LD_INT 2
47441: PPUSH
47442: CALL_OW 275
47446: PUSH
47447: LD_VAR 0 11
47451: PUSH
47452: LD_INT 2
47454: ARRAY
47455: GREATEREQUAL
47456: AND
47457: IFFALSE 47483
47459: PUSH
47460: LD_VAR 0 10
47464: PPUSH
47465: LD_INT 3
47467: PPUSH
47468: CALL_OW 275
47472: PUSH
47473: LD_VAR 0 11
47477: PUSH
47478: LD_INT 3
47480: ARRAY
47481: GREATEREQUAL
47482: AND
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 48091
// if GetBType ( depot ) = b_depot then
47488: LD_VAR 0 1
47492: PPUSH
47493: CALL_OW 266
47497: PUSH
47498: LD_INT 0
47500: EQUAL
47501: IFFALSE 47513
// dist := 28 else
47503: LD_ADDR_VAR 0 14
47507: PUSH
47508: LD_INT 28
47510: ST_TO_ADDR
47511: GO 47521
// dist := 36 ;
47513: LD_ADDR_VAR 0 14
47517: PUSH
47518: LD_INT 36
47520: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_VAR 0 3
47530: PPUSH
47531: LD_VAR 0 4
47535: PPUSH
47536: CALL_OW 297
47540: PUSH
47541: LD_VAR 0 14
47545: GREATER
47546: IFFALSE 47550
// exit ;
47548: GO 48091
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47550: LD_ADDR_VAR 0 12
47554: PUSH
47555: LD_VAR 0 2
47559: PPUSH
47560: LD_VAR 0 3
47564: PPUSH
47565: LD_VAR 0 4
47569: PPUSH
47570: LD_VAR 0 5
47574: PPUSH
47575: LD_VAR 0 1
47579: PPUSH
47580: CALL_OW 248
47584: PPUSH
47585: LD_INT 0
47587: PPUSH
47588: CALL 48096 0 6
47592: ST_TO_ADDR
// if not hexes then
47593: LD_VAR 0 12
47597: NOT
47598: IFFALSE 47602
// exit ;
47600: GO 48091
// hex := GetHexInfo ( x , y ) ;
47602: LD_ADDR_VAR 0 15
47606: PUSH
47607: LD_VAR 0 3
47611: PPUSH
47612: LD_VAR 0 4
47616: PPUSH
47617: CALL_OW 546
47621: ST_TO_ADDR
// if hex [ 1 ] then
47622: LD_VAR 0 15
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: IFFALSE 47634
// exit ;
47632: GO 48091
// height := hex [ 2 ] ;
47634: LD_ADDR_VAR 0 13
47638: PUSH
47639: LD_VAR 0 15
47643: PUSH
47644: LD_INT 2
47646: ARRAY
47647: ST_TO_ADDR
// for i = 1 to hexes do
47648: LD_ADDR_VAR 0 7
47652: PUSH
47653: DOUBLE
47654: LD_INT 1
47656: DEC
47657: ST_TO_ADDR
47658: LD_VAR 0 12
47662: PUSH
47663: FOR_TO
47664: IFFALSE 48008
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47666: LD_VAR 0 12
47670: PUSH
47671: LD_VAR 0 7
47675: ARRAY
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PPUSH
47681: LD_VAR 0 12
47685: PUSH
47686: LD_VAR 0 7
47690: ARRAY
47691: PUSH
47692: LD_INT 2
47694: ARRAY
47695: PPUSH
47696: CALL_OW 488
47700: NOT
47701: IFTRUE 47743
47703: PUSH
47704: LD_VAR 0 12
47708: PUSH
47709: LD_VAR 0 7
47713: ARRAY
47714: PUSH
47715: LD_INT 1
47717: ARRAY
47718: PPUSH
47719: LD_VAR 0 12
47723: PUSH
47724: LD_VAR 0 7
47728: ARRAY
47729: PUSH
47730: LD_INT 2
47732: ARRAY
47733: PPUSH
47734: CALL_OW 428
47738: PUSH
47739: LD_INT 0
47741: GREATER
47742: OR
47743: IFTRUE 47781
47745: PUSH
47746: LD_VAR 0 12
47750: PUSH
47751: LD_VAR 0 7
47755: ARRAY
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: PPUSH
47761: LD_VAR 0 12
47765: PUSH
47766: LD_VAR 0 7
47770: ARRAY
47771: PUSH
47772: LD_INT 2
47774: ARRAY
47775: PPUSH
47776: CALL_OW 351
47780: OR
47781: IFFALSE 47787
// exit ;
47783: POP
47784: POP
47785: GO 48091
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47787: LD_ADDR_VAR 0 8
47791: PUSH
47792: LD_VAR 0 12
47796: PUSH
47797: LD_VAR 0 7
47801: ARRAY
47802: PUSH
47803: LD_INT 1
47805: ARRAY
47806: PPUSH
47807: LD_VAR 0 12
47811: PUSH
47812: LD_VAR 0 7
47816: ARRAY
47817: PUSH
47818: LD_INT 2
47820: ARRAY
47821: PPUSH
47822: CALL_OW 546
47826: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47827: LD_VAR 0 8
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: IFTRUE 47857
47837: PUSH
47838: LD_VAR 0 8
47842: PUSH
47843: LD_INT 2
47845: ARRAY
47846: PUSH
47847: LD_VAR 0 13
47851: PUSH
47852: LD_INT 2
47854: PLUS
47855: GREATER
47856: OR
47857: IFTRUE 47879
47859: PUSH
47860: LD_VAR 0 8
47864: PUSH
47865: LD_INT 2
47867: ARRAY
47868: PUSH
47869: LD_VAR 0 13
47873: PUSH
47874: LD_INT 2
47876: MINUS
47877: LESS
47878: OR
47879: IFTRUE 47947
47881: PUSH
47882: LD_VAR 0 8
47886: PUSH
47887: LD_INT 3
47889: ARRAY
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 8
47896: PUSH
47897: LD_INT 9
47899: PUSH
47900: LD_INT 10
47902: PUSH
47903: LD_INT 11
47905: PUSH
47906: LD_INT 12
47908: PUSH
47909: LD_INT 13
47911: PUSH
47912: LD_INT 16
47914: PUSH
47915: LD_INT 17
47917: PUSH
47918: LD_INT 18
47920: PUSH
47921: LD_INT 19
47923: PUSH
47924: LD_INT 20
47926: PUSH
47927: LD_INT 21
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: IN
47945: NOT
47946: OR
47947: IFTRUE 47960
47949: PUSH
47950: LD_VAR 0 8
47954: PUSH
47955: LD_INT 5
47957: ARRAY
47958: NOT
47959: OR
47960: IFTRUE 48000
47962: PUSH
47963: LD_VAR 0 8
47967: PUSH
47968: LD_INT 6
47970: ARRAY
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 7
47980: PUSH
47981: LD_INT 9
47983: PUSH
47984: LD_INT 10
47986: PUSH
47987: LD_INT 11
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: IN
47998: NOT
47999: OR
48000: IFFALSE 48006
// exit ;
48002: POP
48003: POP
48004: GO 48091
// end ;
48006: GO 47663
48008: POP
48009: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48010: LD_VAR 0 9
48014: PPUSH
48015: LD_VAR 0 3
48019: PPUSH
48020: LD_VAR 0 4
48024: PPUSH
48025: LD_INT 20
48027: PPUSH
48028: CALL 39910 0 4
48032: PUSH
48033: LD_INT 4
48035: ARRAY
48036: IFFALSE 48040
// exit ;
48038: GO 48091
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48040: LD_VAR 0 2
48044: PUSH
48045: LD_INT 29
48047: PUSH
48048: LD_INT 30
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: IN
48055: IFFALSE 48079
48057: PUSH
48058: LD_VAR 0 3
48062: PPUSH
48063: LD_VAR 0 4
48067: PPUSH
48068: LD_VAR 0 9
48072: PPUSH
48073: CALL_OW 440
48077: NOT
48078: AND
48079: IFFALSE 48083
// exit ;
48081: GO 48091
// result := true ;
48083: LD_ADDR_VAR 0 6
48087: PUSH
48088: LD_INT 1
48090: ST_TO_ADDR
// end ;
48091: LD_VAR 0 6
48095: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48096: LD_INT 0
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
48153: PPUSH
48154: PPUSH
48155: PPUSH
// result = [ ] ;
48156: LD_ADDR_VAR 0 7
48160: PUSH
48161: EMPTY
48162: ST_TO_ADDR
// temp_list = [ ] ;
48163: LD_ADDR_VAR 0 9
48167: PUSH
48168: EMPTY
48169: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48170: LD_VAR 0 4
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: LD_INT 4
48189: PUSH
48190: LD_INT 5
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: IN
48201: NOT
48202: IFTRUE 48245
48204: PUSH
48205: LD_VAR 0 1
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: IN
48220: IFFALSE 48244
48222: PUSH
48223: LD_VAR 0 5
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: IN
48242: NOT
48243: AND
48244: OR
48245: IFFALSE 48249
// exit ;
48247: GO 66648
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48249: LD_VAR 0 1
48253: PUSH
48254: LD_INT 6
48256: PUSH
48257: LD_INT 7
48259: PUSH
48260: LD_INT 8
48262: PUSH
48263: LD_INT 13
48265: PUSH
48266: LD_INT 12
48268: PUSH
48269: LD_INT 15
48271: PUSH
48272: LD_INT 11
48274: PUSH
48275: LD_INT 14
48277: PUSH
48278: LD_INT 10
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: IN
48292: IFFALSE 48302
// btype = b_lab ;
48294: LD_ADDR_VAR 0 1
48298: PUSH
48299: LD_INT 6
48301: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48302: LD_VAR 0 6
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: IN
48321: NOT
48322: IFTRUE 48390
48324: PUSH
48325: LD_VAR 0 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: LD_INT 6
48344: PUSH
48345: LD_INT 36
48347: PUSH
48348: LD_INT 4
48350: PUSH
48351: LD_INT 5
48353: PUSH
48354: LD_INT 31
48356: PUSH
48357: LD_INT 32
48359: PUSH
48360: LD_INT 33
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: IN
48376: NOT
48377: IFFALSE 48389
48379: PUSH
48380: LD_VAR 0 6
48384: PUSH
48385: LD_INT 1
48387: EQUAL
48388: AND
48389: OR
48390: IFTRUE 48422
48392: PUSH
48393: LD_VAR 0 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: IN
48408: NOT
48409: IFFALSE 48421
48411: PUSH
48412: LD_VAR 0 6
48416: PUSH
48417: LD_INT 2
48419: EQUAL
48420: AND
48421: OR
48422: IFFALSE 48432
// mode = 0 ;
48424: LD_ADDR_VAR 0 6
48428: PUSH
48429: LD_INT 0
48431: ST_TO_ADDR
// case mode of 0 :
48432: LD_VAR 0 6
48436: PUSH
48437: LD_INT 0
48439: DOUBLE
48440: EQUAL
48441: IFTRUE 48445
48443: GO 59898
48445: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48446: LD_ADDR_VAR 0 11
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48639: LD_ADDR_VAR 0 12
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48835: LD_ADDR_VAR 0 13
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49034: LD_ADDR_VAR 0 14
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49230: LD_ADDR_VAR 0 15
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49423: LD_ADDR_VAR 0 16
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49616: LD_ADDR_VAR 0 17
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49846: LD_ADDR_VAR 0 18
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50076: LD_ADDR_VAR 0 19
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50306: LD_ADDR_VAR 0 20
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50536: LD_ADDR_VAR 0 21
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50766: LD_ADDR_VAR 0 22
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50996: LD_ADDR_VAR 0 23
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51276: LD_ADDR_VAR 0 24
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51552: LD_ADDR_VAR 0 25
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51826: LD_ADDR_VAR 0 26
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52102: LD_ADDR_VAR 0 27
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52382: LD_ADDR_VAR 0 28
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52664: LD_ADDR_VAR 0 29
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52943: LD_ADDR_VAR 0 30
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53221: LD_ADDR_VAR 0 31
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53499: LD_ADDR_VAR 0 32
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53777: LD_ADDR_VAR 0 33
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54056: LD_ADDR_VAR 0 34
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54336: LD_ADDR_VAR 0 35
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54448: LD_ADDR_VAR 0 36
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54560: LD_ADDR_VAR 0 37
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54672: LD_ADDR_VAR 0 38
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54784: LD_ADDR_VAR 0 39
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54896: LD_ADDR_VAR 0 40
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55008: LD_ADDR_VAR 0 41
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55358: LD_ADDR_VAR 0 42
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55708: LD_ADDR_VAR 0 43
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56056: LD_ADDR_VAR 0 44
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: NEG
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56406: LD_ADDR_VAR 0 45
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: NEG
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56756: LD_ADDR_VAR 0 46
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 3
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57104: LD_ADDR_VAR 0 47
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57255: LD_ADDR_VAR 0 48
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57402: LD_ADDR_VAR 0 49
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57546: LD_ADDR_VAR 0 50
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57690: LD_ADDR_VAR 0 51
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57837: LD_ADDR_VAR 0 52
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57988: LD_ADDR_VAR 0 53
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58218: LD_ADDR_VAR 0 54
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58448: LD_ADDR_VAR 0 55
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58678: LD_ADDR_VAR 0 56
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58908: LD_ADDR_VAR 0 57
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59138: LD_ADDR_VAR 0 58
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59368: LD_ADDR_VAR 0 59
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59456: LD_ADDR_VAR 0 60
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59544: LD_ADDR_VAR 0 61
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59632: LD_ADDR_VAR 0 62
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59720: LD_ADDR_VAR 0 63
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59808: LD_ADDR_VAR 0 64
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// end ; 1 :
59896: GO 65793
59898: LD_INT 1
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59906
59904: GO 62529
59906: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59907: LD_ADDR_VAR 0 11
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59951: LD_ADDR_VAR 0 12
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59992: LD_ADDR_VAR 0 13
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60032: LD_ADDR_VAR 0 14
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60073: LD_ADDR_VAR 0 15
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60117: LD_ADDR_VAR 0 16
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60163: LD_ADDR_VAR 0 17
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60207: LD_ADDR_VAR 0 18
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60248: LD_ADDR_VAR 0 19
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60288: LD_ADDR_VAR 0 20
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60329: LD_ADDR_VAR 0 21
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60373: LD_ADDR_VAR 0 22
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60419: LD_ADDR_VAR 0 23
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 3
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60463: LD_ADDR_VAR 0 24
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60504: LD_ADDR_VAR 0 25
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60544: LD_ADDR_VAR 0 26
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60585: LD_ADDR_VAR 0 27
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60629: LD_ADDR_VAR 0 28
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60675: LD_ADDR_VAR 0 29
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 4
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 6
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 6
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 5
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60830: LD_ADDR_VAR 0 30
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 4
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 5
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 5
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 6
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 6
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60973: LD_ADDR_VAR 0 31
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: LD_INT 4
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 5
61040: PUSH
61041: LD_INT 4
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: LD_INT 5
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: LD_INT 5
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 6
61070: PUSH
61071: LD_INT 5
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 6
61080: PUSH
61081: LD_INT 6
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: LD_INT 6
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61112: LD_ADDR_VAR 0 32
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 4
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 5
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 5
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 6
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 6
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 5
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61255: LD_ADDR_VAR 0 33
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: NEG
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 4
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 5
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 5
61364: NEG
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 6
61375: NEG
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 6
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61410: LD_ADDR_VAR 0 34
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: LD_INT 4
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: LD_INT 5
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 5
61501: NEG
61502: PUSH
61503: LD_INT 4
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 5
61513: NEG
61514: PUSH
61515: LD_INT 5
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 5
61525: NEG
61526: PUSH
61527: LD_INT 6
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 6
61537: NEG
61538: PUSH
61539: LD_INT 5
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 6
61549: NEG
61550: PUSH
61551: LD_INT 6
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61573: LD_ADDR_VAR 0 41
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61617: LD_ADDR_VAR 0 42
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 3
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61658: LD_ADDR_VAR 0 43
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: LD_INT 3
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61698: LD_ADDR_VAR 0 44
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 3
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61739: LD_ADDR_VAR 0 45
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61783: LD_ADDR_VAR 0 46
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61829: LD_ADDR_VAR 0 47
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61862: LD_ADDR_VAR 0 48
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61893: LD_ADDR_VAR 0 49
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61922: LD_ADDR_VAR 0 50
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61951: LD_ADDR_VAR 0 51
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61982: LD_ADDR_VAR 0 52
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62015: LD_ADDR_VAR 0 53
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62059: LD_ADDR_VAR 0 54
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62100: LD_ADDR_VAR 0 55
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62140: LD_ADDR_VAR 0 56
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62181: LD_ADDR_VAR 0 57
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62225: LD_ADDR_VAR 0 58
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: NEG
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62271: LD_ADDR_VAR 0 59
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62315: LD_ADDR_VAR 0 60
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62356: LD_ADDR_VAR 0 61
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 2
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62396: LD_ADDR_VAR 0 62
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62437: LD_ADDR_VAR 0 63
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62481: LD_ADDR_VAR 0 64
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: LIST
62526: ST_TO_ADDR
// end ; 2 :
62527: GO 65793
62529: LD_INT 2
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62537
62535: GO 65792
62537: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62538: LD_ADDR_VAR 0 29
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 5
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 5
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 5
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 4
62658: PUSH
62659: LD_INT 3
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: LD_INT 4
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 4
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 4
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 4
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 5
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 5
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 4
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: NEG
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 5
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: NEG
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: NEG
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 4
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 4
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 4
62900: NEG
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: LD_INT 4
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 5
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: NEG
62960: PUSH
62961: LD_INT 3
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 4
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: LD_INT 4
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 5
62995: NEG
62996: PUSH
62997: LD_INT 5
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: LD_INT 5
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 5
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63076: LD_ADDR_VAR 0 30
63080: PUSH
63081: LD_INT 4
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 4
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 5
63103: PUSH
63104: LD_INT 4
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 5
63113: PUSH
63114: LD_INT 5
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 4
63123: PUSH
63124: LD_INT 5
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: LD_INT 4
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 5
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: LD_INT 4
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: NEG
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 4
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 5
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 5
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 5
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 3
63357: NEG
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: LD_INT 4
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 4
63440: NEG
63441: PUSH
63442: LD_INT 4
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: NEG
63453: PUSH
63454: LD_INT 4
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 4
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 5
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 3
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 3
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 5
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 3
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 5
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63623: LD_ADDR_VAR 0 31
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 5
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 5
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: LD_INT 4
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: PUSH
63703: LD_INT 5
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 4
63779: NEG
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 4
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: NEG
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: LD_INT 5
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: LD_INT 4
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 3
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 4
63873: NEG
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 5
63885: NEG
63886: PUSH
63887: LD_INT 4
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 5
63897: NEG
63898: PUSH
63899: LD_INT 5
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 3
63909: NEG
63910: PUSH
63911: LD_INT 5
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 5
63921: NEG
63922: PUSH
63923: LD_INT 3
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 4
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 3
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 4
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: NEG
64024: PUSH
64025: LD_INT 4
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 4
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 5
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 5
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 4
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 5
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64173: LD_ADDR_VAR 0 32
64177: PUSH
64178: LD_INT 4
64180: NEG
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 4
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 5
64236: NEG
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 5
64247: NEG
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 5
64259: NEG
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 3
64271: NEG
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: LD_INT 4
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 4
64354: NEG
64355: PUSH
64356: LD_INT 4
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 4
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 4
64378: NEG
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 4
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 5
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 4
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 3
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 5
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 4
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 4
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 4
64575: PUSH
64576: LD_INT 2
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 4
64585: PUSH
64586: LD_INT 4
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 4
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 5
64605: PUSH
64606: LD_INT 4
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 5
64615: PUSH
64616: LD_INT 5
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: LD_INT 5
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: LD_INT 4
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: LD_INT 3
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: LD_INT 5
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64720: LD_ADDR_VAR 0 33
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: LD_INT 4
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 4
64739: NEG
64740: PUSH
64741: LD_INT 5
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 4
64775: NEG
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 5
64787: NEG
64788: PUSH
64789: LD_INT 4
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: LD_INT 5
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: NEG
64812: PUSH
64813: LD_INT 5
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 5
64823: NEG
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: LD_INT 4
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: LD_INT 4
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 2
64914: PUSH
64915: LD_INT 2
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: NEG
64926: PUSH
64927: LD_INT 4
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 4
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 5
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 5
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 4
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 3
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 5
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 3
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 4
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: LD_INT 4
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: LD_INT 4
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: LD_INT 2
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 4
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 4
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 4
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: LD_INT 5
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 5
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: LD_INT 5
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65258: LD_ADDR_VAR 0 34
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 5
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 4
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 4
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 5
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: LD_INT 3
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 2
65355: NEG
65356: PUSH
65357: LD_INT 5
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 4
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 4
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 4
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 4
65470: PUSH
65471: LD_INT 3
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 5
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 5
65490: PUSH
65491: LD_INT 5
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: LD_INT 5
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 3
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 4
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 3
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 4
65643: NEG
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 4
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 5
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 5
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 3
65734: NEG
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: ST_TO_ADDR
// end ; end ;
65790: GO 65793
65792: POP
// case btype of b_depot , b_warehouse :
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 0
65800: DOUBLE
65801: EQUAL
65802: IFTRUE 65812
65804: LD_INT 1
65806: DOUBLE
65807: EQUAL
65808: IFTRUE 65812
65810: GO 66013
65812: POP
// case nation of nation_american :
65813: LD_VAR 0 5
65817: PUSH
65818: LD_INT 1
65820: DOUBLE
65821: EQUAL
65822: IFTRUE 65826
65824: GO 65882
65826: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65827: LD_ADDR_VAR 0 9
65831: PUSH
65832: LD_VAR 0 11
65836: PUSH
65837: LD_VAR 0 12
65841: PUSH
65842: LD_VAR 0 13
65846: PUSH
65847: LD_VAR 0 14
65851: PUSH
65852: LD_VAR 0 15
65856: PUSH
65857: LD_VAR 0 16
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: PUSH
65870: LD_VAR 0 4
65874: PUSH
65875: LD_INT 1
65877: PLUS
65878: ARRAY
65879: ST_TO_ADDR
65880: GO 66011
65882: LD_INT 2
65884: DOUBLE
65885: EQUAL
65886: IFTRUE 65890
65888: GO 65946
65890: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65891: LD_ADDR_VAR 0 9
65895: PUSH
65896: LD_VAR 0 17
65900: PUSH
65901: LD_VAR 0 18
65905: PUSH
65906: LD_VAR 0 19
65910: PUSH
65911: LD_VAR 0 20
65915: PUSH
65916: LD_VAR 0 21
65920: PUSH
65921: LD_VAR 0 22
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: PUSH
65934: LD_VAR 0 4
65938: PUSH
65939: LD_INT 1
65941: PLUS
65942: ARRAY
65943: ST_TO_ADDR
65944: GO 66011
65946: LD_INT 3
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65954
65952: GO 66010
65954: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65955: LD_ADDR_VAR 0 9
65959: PUSH
65960: LD_VAR 0 23
65964: PUSH
65965: LD_VAR 0 24
65969: PUSH
65970: LD_VAR 0 25
65974: PUSH
65975: LD_VAR 0 26
65979: PUSH
65980: LD_VAR 0 27
65984: PUSH
65985: LD_VAR 0 28
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_VAR 0 4
66002: PUSH
66003: LD_INT 1
66005: PLUS
66006: ARRAY
66007: ST_TO_ADDR
66008: GO 66011
66010: POP
66011: GO 66566
66013: LD_INT 2
66015: DOUBLE
66016: EQUAL
66017: IFTRUE 66027
66019: LD_INT 3
66021: DOUBLE
66022: EQUAL
66023: IFTRUE 66027
66025: GO 66083
66027: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66028: LD_ADDR_VAR 0 9
66032: PUSH
66033: LD_VAR 0 29
66037: PUSH
66038: LD_VAR 0 30
66042: PUSH
66043: LD_VAR 0 31
66047: PUSH
66048: LD_VAR 0 32
66052: PUSH
66053: LD_VAR 0 33
66057: PUSH
66058: LD_VAR 0 34
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: PUSH
66071: LD_VAR 0 4
66075: PUSH
66076: LD_INT 1
66078: PLUS
66079: ARRAY
66080: ST_TO_ADDR
66081: GO 66566
66083: LD_INT 16
66085: DOUBLE
66086: EQUAL
66087: IFTRUE 66145
66089: LD_INT 17
66091: DOUBLE
66092: EQUAL
66093: IFTRUE 66145
66095: LD_INT 18
66097: DOUBLE
66098: EQUAL
66099: IFTRUE 66145
66101: LD_INT 19
66103: DOUBLE
66104: EQUAL
66105: IFTRUE 66145
66107: LD_INT 22
66109: DOUBLE
66110: EQUAL
66111: IFTRUE 66145
66113: LD_INT 20
66115: DOUBLE
66116: EQUAL
66117: IFTRUE 66145
66119: LD_INT 21
66121: DOUBLE
66122: EQUAL
66123: IFTRUE 66145
66125: LD_INT 23
66127: DOUBLE
66128: EQUAL
66129: IFTRUE 66145
66131: LD_INT 24
66133: DOUBLE
66134: EQUAL
66135: IFTRUE 66145
66137: LD_INT 25
66139: DOUBLE
66140: EQUAL
66141: IFTRUE 66145
66143: GO 66201
66145: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66146: LD_ADDR_VAR 0 9
66150: PUSH
66151: LD_VAR 0 35
66155: PUSH
66156: LD_VAR 0 36
66160: PUSH
66161: LD_VAR 0 37
66165: PUSH
66166: LD_VAR 0 38
66170: PUSH
66171: LD_VAR 0 39
66175: PUSH
66176: LD_VAR 0 40
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: LD_VAR 0 4
66193: PUSH
66194: LD_INT 1
66196: PLUS
66197: ARRAY
66198: ST_TO_ADDR
66199: GO 66566
66201: LD_INT 6
66203: DOUBLE
66204: EQUAL
66205: IFTRUE 66257
66207: LD_INT 7
66209: DOUBLE
66210: EQUAL
66211: IFTRUE 66257
66213: LD_INT 8
66215: DOUBLE
66216: EQUAL
66217: IFTRUE 66257
66219: LD_INT 13
66221: DOUBLE
66222: EQUAL
66223: IFTRUE 66257
66225: LD_INT 12
66227: DOUBLE
66228: EQUAL
66229: IFTRUE 66257
66231: LD_INT 15
66233: DOUBLE
66234: EQUAL
66235: IFTRUE 66257
66237: LD_INT 11
66239: DOUBLE
66240: EQUAL
66241: IFTRUE 66257
66243: LD_INT 14
66245: DOUBLE
66246: EQUAL
66247: IFTRUE 66257
66249: LD_INT 10
66251: DOUBLE
66252: EQUAL
66253: IFTRUE 66257
66255: GO 66313
66257: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66258: LD_ADDR_VAR 0 9
66262: PUSH
66263: LD_VAR 0 41
66267: PUSH
66268: LD_VAR 0 42
66272: PUSH
66273: LD_VAR 0 43
66277: PUSH
66278: LD_VAR 0 44
66282: PUSH
66283: LD_VAR 0 45
66287: PUSH
66288: LD_VAR 0 46
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: LD_VAR 0 4
66305: PUSH
66306: LD_INT 1
66308: PLUS
66309: ARRAY
66310: ST_TO_ADDR
66311: GO 66566
66313: LD_INT 36
66315: DOUBLE
66316: EQUAL
66317: IFTRUE 66321
66319: GO 66377
66321: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66322: LD_ADDR_VAR 0 9
66326: PUSH
66327: LD_VAR 0 47
66331: PUSH
66332: LD_VAR 0 48
66336: PUSH
66337: LD_VAR 0 49
66341: PUSH
66342: LD_VAR 0 50
66346: PUSH
66347: LD_VAR 0 51
66351: PUSH
66352: LD_VAR 0 52
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_VAR 0 4
66369: PUSH
66370: LD_INT 1
66372: PLUS
66373: ARRAY
66374: ST_TO_ADDR
66375: GO 66566
66377: LD_INT 4
66379: DOUBLE
66380: EQUAL
66381: IFTRUE 66403
66383: LD_INT 5
66385: DOUBLE
66386: EQUAL
66387: IFTRUE 66403
66389: LD_INT 34
66391: DOUBLE
66392: EQUAL
66393: IFTRUE 66403
66395: LD_INT 37
66397: DOUBLE
66398: EQUAL
66399: IFTRUE 66403
66401: GO 66459
66403: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66404: LD_ADDR_VAR 0 9
66408: PUSH
66409: LD_VAR 0 53
66413: PUSH
66414: LD_VAR 0 54
66418: PUSH
66419: LD_VAR 0 55
66423: PUSH
66424: LD_VAR 0 56
66428: PUSH
66429: LD_VAR 0 57
66433: PUSH
66434: LD_VAR 0 58
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: PUSH
66447: LD_VAR 0 4
66451: PUSH
66452: LD_INT 1
66454: PLUS
66455: ARRAY
66456: ST_TO_ADDR
66457: GO 66566
66459: LD_INT 31
66461: DOUBLE
66462: EQUAL
66463: IFTRUE 66509
66465: LD_INT 32
66467: DOUBLE
66468: EQUAL
66469: IFTRUE 66509
66471: LD_INT 33
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66509
66477: LD_INT 27
66479: DOUBLE
66480: EQUAL
66481: IFTRUE 66509
66483: LD_INT 26
66485: DOUBLE
66486: EQUAL
66487: IFTRUE 66509
66489: LD_INT 28
66491: DOUBLE
66492: EQUAL
66493: IFTRUE 66509
66495: LD_INT 29
66497: DOUBLE
66498: EQUAL
66499: IFTRUE 66509
66501: LD_INT 30
66503: DOUBLE
66504: EQUAL
66505: IFTRUE 66509
66507: GO 66565
66509: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66510: LD_ADDR_VAR 0 9
66514: PUSH
66515: LD_VAR 0 59
66519: PUSH
66520: LD_VAR 0 60
66524: PUSH
66525: LD_VAR 0 61
66529: PUSH
66530: LD_VAR 0 62
66534: PUSH
66535: LD_VAR 0 63
66539: PUSH
66540: LD_VAR 0 64
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: PUSH
66553: LD_VAR 0 4
66557: PUSH
66558: LD_INT 1
66560: PLUS
66561: ARRAY
66562: ST_TO_ADDR
66563: GO 66566
66565: POP
// temp_list2 = [ ] ;
66566: LD_ADDR_VAR 0 10
66570: PUSH
66571: EMPTY
66572: ST_TO_ADDR
// for i in temp_list do
66573: LD_ADDR_VAR 0 8
66577: PUSH
66578: LD_VAR 0 9
66582: PUSH
66583: FOR_IN
66584: IFFALSE 66636
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66586: LD_ADDR_VAR 0 10
66590: PUSH
66591: LD_VAR 0 10
66595: PUSH
66596: LD_VAR 0 8
66600: PUSH
66601: LD_INT 1
66603: ARRAY
66604: PUSH
66605: LD_VAR 0 2
66609: PLUS
66610: PUSH
66611: LD_VAR 0 8
66615: PUSH
66616: LD_INT 2
66618: ARRAY
66619: PUSH
66620: LD_VAR 0 3
66624: PLUS
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: ADD
66633: ST_TO_ADDR
66634: GO 66583
66636: POP
66637: POP
// result = temp_list2 ;
66638: LD_ADDR_VAR 0 7
66642: PUSH
66643: LD_VAR 0 10
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 7
66652: RET
// export function EnemyInRange ( unit , dist ) ; begin
66653: LD_INT 0
66655: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66656: LD_ADDR_VAR 0 3
66660: PUSH
66661: LD_VAR 0 1
66665: PPUSH
66666: CALL_OW 255
66670: PPUSH
66671: LD_VAR 0 1
66675: PPUSH
66676: CALL_OW 250
66680: PPUSH
66681: LD_VAR 0 1
66685: PPUSH
66686: CALL_OW 251
66690: PPUSH
66691: LD_VAR 0 2
66695: PPUSH
66696: CALL 39910 0 4
66700: PUSH
66701: LD_INT 4
66703: ARRAY
66704: ST_TO_ADDR
// end ;
66705: LD_VAR 0 3
66709: RET
// export function PlayerSeeMe ( unit ) ; begin
66710: LD_INT 0
66712: PPUSH
// result := See ( your_side , unit ) ;
66713: LD_ADDR_VAR 0 2
66717: PUSH
66718: LD_OWVAR 2
66722: PPUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: CALL_OW 292
66732: ST_TO_ADDR
// end ;
66733: LD_VAR 0 2
66737: RET
// export function ReverseDir ( unit ) ; begin
66738: LD_INT 0
66740: PPUSH
// if not unit then
66741: LD_VAR 0 1
66745: NOT
66746: IFFALSE 66750
// exit ;
66748: GO 66773
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66750: LD_ADDR_VAR 0 2
66754: PUSH
66755: LD_VAR 0 1
66759: PPUSH
66760: CALL_OW 254
66764: PUSH
66765: LD_INT 3
66767: PLUS
66768: PUSH
66769: LD_INT 6
66771: MOD
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 2
66777: RET
// export function ReverseArray ( array ) ; var i ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
// if not array then
66782: LD_VAR 0 1
66786: NOT
66787: IFFALSE 66791
// exit ;
66789: GO 66846
// result := [ ] ;
66791: LD_ADDR_VAR 0 2
66795: PUSH
66796: EMPTY
66797: ST_TO_ADDR
// for i := array downto 1 do
66798: LD_ADDR_VAR 0 3
66802: PUSH
66803: DOUBLE
66804: LD_VAR 0 1
66808: INC
66809: ST_TO_ADDR
66810: LD_INT 1
66812: PUSH
66813: FOR_DOWNTO
66814: IFFALSE 66844
// result := Join ( result , array [ i ] ) ;
66816: LD_ADDR_VAR 0 2
66820: PUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: LD_VAR 0 1
66830: PUSH
66831: LD_VAR 0 3
66835: ARRAY
66836: PPUSH
66837: CALL 71688 0 2
66841: ST_TO_ADDR
66842: GO 66813
66844: POP
66845: POP
// end ;
66846: LD_VAR 0 2
66850: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66851: LD_INT 0
66853: PPUSH
66854: PPUSH
66855: PPUSH
66856: PPUSH
66857: PPUSH
66858: PPUSH
// if not unit or not hexes then
66859: LD_VAR 0 1
66863: NOT
66864: IFTRUE 66873
66866: PUSH
66867: LD_VAR 0 2
66871: NOT
66872: OR
66873: IFFALSE 66877
// exit ;
66875: GO 67000
// dist := 9999 ;
66877: LD_ADDR_VAR 0 5
66881: PUSH
66882: LD_INT 9999
66884: ST_TO_ADDR
// for i = 1 to hexes do
66885: LD_ADDR_VAR 0 4
66889: PUSH
66890: DOUBLE
66891: LD_INT 1
66893: DEC
66894: ST_TO_ADDR
66895: LD_VAR 0 2
66899: PUSH
66900: FOR_TO
66901: IFFALSE 66988
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66903: LD_ADDR_VAR 0 6
66907: PUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: LD_VAR 0 2
66917: PUSH
66918: LD_VAR 0 4
66922: ARRAY
66923: PUSH
66924: LD_INT 1
66926: ARRAY
66927: PPUSH
66928: LD_VAR 0 2
66932: PUSH
66933: LD_VAR 0 4
66937: ARRAY
66938: PUSH
66939: LD_INT 2
66941: ARRAY
66942: PPUSH
66943: CALL_OW 297
66947: ST_TO_ADDR
// if tdist < dist then
66948: LD_VAR 0 6
66952: PUSH
66953: LD_VAR 0 5
66957: LESS
66958: IFFALSE 66986
// begin hex := hexes [ i ] ;
66960: LD_ADDR_VAR 0 8
66964: PUSH
66965: LD_VAR 0 2
66969: PUSH
66970: LD_VAR 0 4
66974: ARRAY
66975: ST_TO_ADDR
// dist := tdist ;
66976: LD_ADDR_VAR 0 5
66980: PUSH
66981: LD_VAR 0 6
66985: ST_TO_ADDR
// end ; end ;
66986: GO 66900
66988: POP
66989: POP
// result := hex ;
66990: LD_ADDR_VAR 0 3
66994: PUSH
66995: LD_VAR 0 8
66999: ST_TO_ADDR
// end ;
67000: LD_VAR 0 3
67004: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67005: LD_INT 0
67007: PPUSH
67008: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67009: LD_VAR 0 1
67013: NOT
67014: IFTRUE 67053
67016: PUSH
67017: LD_VAR 0 1
67021: PUSH
67022: LD_INT 21
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 23
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PPUSH
67046: CALL_OW 69
67050: IN
67051: NOT
67052: OR
67053: IFFALSE 67057
// exit ;
67055: GO 67104
// for i = 1 to 3 do
67057: LD_ADDR_VAR 0 3
67061: PUSH
67062: DOUBLE
67063: LD_INT 1
67065: DEC
67066: ST_TO_ADDR
67067: LD_INT 3
67069: PUSH
67070: FOR_TO
67071: IFFALSE 67102
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 250
67082: PPUSH
67083: LD_VAR 0 1
67087: PPUSH
67088: CALL_OW 251
67092: PPUSH
67093: LD_INT 1
67095: PPUSH
67096: CALL_OW 453
67100: GO 67070
67102: POP
67103: POP
// end ;
67104: LD_VAR 0 2
67108: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
// if not unit or not enemy_unit then
67117: LD_VAR 0 1
67121: NOT
67122: IFTRUE 67131
67124: PUSH
67125: LD_VAR 0 2
67129: NOT
67130: OR
67131: IFFALSE 67135
// exit ;
67133: GO 67606
// if GetLives ( i ) < 250 then
67135: LD_VAR 0 4
67139: PPUSH
67140: CALL_OW 256
67144: PUSH
67145: LD_INT 250
67147: LESS
67148: IFFALSE 67161
// begin ComAutodestruct ( i ) ;
67150: LD_VAR 0 4
67154: PPUSH
67155: CALL 67005 0 1
// exit ;
67159: GO 67606
// end ; x := GetX ( enemy_unit ) ;
67161: LD_ADDR_VAR 0 7
67165: PUSH
67166: LD_VAR 0 2
67170: PPUSH
67171: CALL_OW 250
67175: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67176: LD_ADDR_VAR 0 8
67180: PUSH
67181: LD_VAR 0 2
67185: PPUSH
67186: CALL_OW 251
67190: ST_TO_ADDR
// if not x or not y then
67191: LD_VAR 0 7
67195: NOT
67196: IFTRUE 67205
67198: PUSH
67199: LD_VAR 0 8
67203: NOT
67204: OR
67205: IFFALSE 67209
// exit ;
67207: GO 67606
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67209: LD_ADDR_VAR 0 6
67213: PUSH
67214: LD_VAR 0 7
67218: PPUSH
67219: LD_INT 0
67221: PPUSH
67222: LD_INT 4
67224: PPUSH
67225: CALL_OW 272
67229: PUSH
67230: LD_VAR 0 8
67234: PPUSH
67235: LD_INT 0
67237: PPUSH
67238: LD_INT 4
67240: PPUSH
67241: CALL_OW 273
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_VAR 0 7
67254: PPUSH
67255: LD_INT 1
67257: PPUSH
67258: LD_INT 4
67260: PPUSH
67261: CALL_OW 272
67265: PUSH
67266: LD_VAR 0 8
67270: PPUSH
67271: LD_INT 1
67273: PPUSH
67274: LD_INT 4
67276: PPUSH
67277: CALL_OW 273
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_VAR 0 7
67290: PPUSH
67291: LD_INT 2
67293: PPUSH
67294: LD_INT 4
67296: PPUSH
67297: CALL_OW 272
67301: PUSH
67302: LD_VAR 0 8
67306: PPUSH
67307: LD_INT 2
67309: PPUSH
67310: LD_INT 4
67312: PPUSH
67313: CALL_OW 273
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_VAR 0 7
67326: PPUSH
67327: LD_INT 3
67329: PPUSH
67330: LD_INT 4
67332: PPUSH
67333: CALL_OW 272
67337: PUSH
67338: LD_VAR 0 8
67342: PPUSH
67343: LD_INT 3
67345: PPUSH
67346: LD_INT 4
67348: PPUSH
67349: CALL_OW 273
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_VAR 0 7
67362: PPUSH
67363: LD_INT 4
67365: PPUSH
67366: LD_INT 4
67368: PPUSH
67369: CALL_OW 272
67373: PUSH
67374: LD_VAR 0 8
67378: PPUSH
67379: LD_INT 4
67381: PPUSH
67382: LD_INT 4
67384: PPUSH
67385: CALL_OW 273
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_VAR 0 7
67398: PPUSH
67399: LD_INT 5
67401: PPUSH
67402: LD_INT 4
67404: PPUSH
67405: CALL_OW 272
67409: PUSH
67410: LD_VAR 0 8
67414: PPUSH
67415: LD_INT 5
67417: PPUSH
67418: LD_INT 4
67420: PPUSH
67421: CALL_OW 273
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: ST_TO_ADDR
// for i = tmp downto 1 do
67438: LD_ADDR_VAR 0 4
67442: PUSH
67443: DOUBLE
67444: LD_VAR 0 6
67448: INC
67449: ST_TO_ADDR
67450: LD_INT 1
67452: PUSH
67453: FOR_DOWNTO
67454: IFFALSE 67557
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67456: LD_VAR 0 6
67460: PUSH
67461: LD_VAR 0 4
67465: ARRAY
67466: PUSH
67467: LD_INT 1
67469: ARRAY
67470: PPUSH
67471: LD_VAR 0 6
67475: PUSH
67476: LD_VAR 0 4
67480: ARRAY
67481: PUSH
67482: LD_INT 2
67484: ARRAY
67485: PPUSH
67486: CALL_OW 488
67490: NOT
67491: IFTRUE 67533
67493: PUSH
67494: LD_VAR 0 6
67498: PUSH
67499: LD_VAR 0 4
67503: ARRAY
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PPUSH
67509: LD_VAR 0 6
67513: PUSH
67514: LD_VAR 0 4
67518: ARRAY
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: PPUSH
67524: CALL_OW 428
67528: PUSH
67529: LD_INT 0
67531: NONEQUAL
67532: OR
67533: IFFALSE 67555
// tmp := Delete ( tmp , i ) ;
67535: LD_ADDR_VAR 0 6
67539: PUSH
67540: LD_VAR 0 6
67544: PPUSH
67545: LD_VAR 0 4
67549: PPUSH
67550: CALL_OW 3
67554: ST_TO_ADDR
67555: GO 67453
67557: POP
67558: POP
// j := GetClosestHex ( unit , tmp ) ;
67559: LD_ADDR_VAR 0 5
67563: PUSH
67564: LD_VAR 0 1
67568: PPUSH
67569: LD_VAR 0 6
67573: PPUSH
67574: CALL 66851 0 2
67578: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67579: LD_VAR 0 1
67583: PPUSH
67584: LD_VAR 0 5
67588: PUSH
67589: LD_INT 1
67591: ARRAY
67592: PPUSH
67593: LD_VAR 0 5
67597: PUSH
67598: LD_INT 2
67600: ARRAY
67601: PPUSH
67602: CALL_OW 111
// end ;
67606: LD_VAR 0 3
67610: RET
// export function PrepareApemanSoldier ( ) ; begin
67611: LD_INT 0
67613: PPUSH
// uc_nation := 0 ;
67614: LD_ADDR_OWVAR 21
67618: PUSH
67619: LD_INT 0
67621: ST_TO_ADDR
// hc_sex := sex_male ;
67622: LD_ADDR_OWVAR 27
67626: PUSH
67627: LD_INT 1
67629: ST_TO_ADDR
// hc_name :=  ;
67630: LD_ADDR_OWVAR 26
67634: PUSH
67635: LD_STRING 
67637: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67638: LD_ADDR_OWVAR 28
67642: PUSH
67643: LD_INT 15
67645: ST_TO_ADDR
// hc_gallery :=  ;
67646: LD_ADDR_OWVAR 33
67650: PUSH
67651: LD_STRING 
67653: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67654: LD_ADDR_OWVAR 31
67658: PUSH
67659: LD_INT 0
67661: PPUSH
67662: LD_INT 3
67664: PPUSH
67665: CALL_OW 12
67669: PUSH
67670: LD_INT 0
67672: PPUSH
67673: LD_INT 3
67675: PPUSH
67676: CALL_OW 12
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67693: LD_ADDR_OWVAR 29
67697: PUSH
67698: LD_INT 12
67700: PUSH
67701: LD_INT 12
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: ST_TO_ADDR
// end ;
67708: LD_VAR 0 1
67712: RET
// export function PrepareApemanEngineer ( ) ; begin
67713: LD_INT 0
67715: PPUSH
// uc_nation := 0 ;
67716: LD_ADDR_OWVAR 21
67720: PUSH
67721: LD_INT 0
67723: ST_TO_ADDR
// hc_sex := sex_male ;
67724: LD_ADDR_OWVAR 27
67728: PUSH
67729: LD_INT 1
67731: ST_TO_ADDR
// hc_name :=  ;
67732: LD_ADDR_OWVAR 26
67736: PUSH
67737: LD_STRING 
67739: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67740: LD_ADDR_OWVAR 28
67744: PUSH
67745: LD_INT 16
67747: ST_TO_ADDR
// hc_gallery :=  ;
67748: LD_ADDR_OWVAR 33
67752: PUSH
67753: LD_STRING 
67755: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67756: LD_ADDR_OWVAR 31
67760: PUSH
67761: LD_INT 0
67763: PPUSH
67764: LD_INT 3
67766: PPUSH
67767: CALL_OW 12
67771: PUSH
67772: LD_INT 0
67774: PPUSH
67775: LD_INT 3
67777: PPUSH
67778: CALL_OW 12
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67795: LD_ADDR_OWVAR 29
67799: PUSH
67800: LD_INT 12
67802: PUSH
67803: LD_INT 12
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// end ;
67810: LD_VAR 0 1
67814: RET
// export function PrepareApeman ( agressivity ) ; begin
67815: LD_INT 0
67817: PPUSH
// uc_side := 0 ;
67818: LD_ADDR_OWVAR 20
67822: PUSH
67823: LD_INT 0
67825: ST_TO_ADDR
// uc_nation := 0 ;
67826: LD_ADDR_OWVAR 21
67830: PUSH
67831: LD_INT 0
67833: ST_TO_ADDR
// hc_sex := sex_male ;
67834: LD_ADDR_OWVAR 27
67838: PUSH
67839: LD_INT 1
67841: ST_TO_ADDR
// hc_class := class_apeman ;
67842: LD_ADDR_OWVAR 28
67846: PUSH
67847: LD_INT 12
67849: ST_TO_ADDR
// hc_gallery :=  ;
67850: LD_ADDR_OWVAR 33
67854: PUSH
67855: LD_STRING 
67857: ST_TO_ADDR
// hc_name :=  ;
67858: LD_ADDR_OWVAR 26
67862: PUSH
67863: LD_STRING 
67865: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67866: LD_ADDR_OWVAR 29
67870: PUSH
67871: LD_INT 12
67873: PUSH
67874: LD_INT 12
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: ST_TO_ADDR
// if agressivity = 0 then
67881: LD_VAR 0 1
67885: PUSH
67886: LD_INT 0
67888: EQUAL
67889: IFFALSE 67901
// hc_agressivity := 0 else
67891: LD_ADDR_OWVAR 35
67895: PUSH
67896: LD_INT 0
67898: ST_TO_ADDR
67899: GO 67922
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67901: LD_ADDR_OWVAR 35
67905: PUSH
67906: LD_VAR 0 1
67910: NEG
67911: PPUSH
67912: LD_VAR 0 1
67916: PPUSH
67917: CALL_OW 12
67921: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67922: LD_ADDR_OWVAR 31
67926: PUSH
67927: LD_INT 0
67929: PPUSH
67930: LD_INT 3
67932: PPUSH
67933: CALL_OW 12
67937: PUSH
67938: LD_INT 0
67940: PPUSH
67941: LD_INT 3
67943: PPUSH
67944: CALL_OW 12
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// end ;
67961: LD_VAR 0 2
67965: RET
// export function PrepareTiger ( agressivity ) ; begin
67966: LD_INT 0
67968: PPUSH
// uc_side := 0 ;
67969: LD_ADDR_OWVAR 20
67973: PUSH
67974: LD_INT 0
67976: ST_TO_ADDR
// uc_nation := 0 ;
67977: LD_ADDR_OWVAR 21
67981: PUSH
67982: LD_INT 0
67984: ST_TO_ADDR
// InitHc ;
67985: CALL_OW 19
// hc_class := class_tiger ;
67989: LD_ADDR_OWVAR 28
67993: PUSH
67994: LD_INT 14
67996: ST_TO_ADDR
// hc_gallery :=  ;
67997: LD_ADDR_OWVAR 33
68001: PUSH
68002: LD_STRING 
68004: ST_TO_ADDR
// hc_name :=  ;
68005: LD_ADDR_OWVAR 26
68009: PUSH
68010: LD_STRING 
68012: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68013: LD_ADDR_OWVAR 35
68017: PUSH
68018: LD_VAR 0 1
68022: NEG
68023: PPUSH
68024: LD_VAR 0 1
68028: PPUSH
68029: CALL_OW 12
68033: ST_TO_ADDR
// end ;
68034: LD_VAR 0 2
68038: RET
// export function PrepareEnchidna ( ) ; begin
68039: LD_INT 0
68041: PPUSH
// uc_side := 0 ;
68042: LD_ADDR_OWVAR 20
68046: PUSH
68047: LD_INT 0
68049: ST_TO_ADDR
// uc_nation := 0 ;
68050: LD_ADDR_OWVAR 21
68054: PUSH
68055: LD_INT 0
68057: ST_TO_ADDR
// InitHc ;
68058: CALL_OW 19
// hc_class := class_baggie ;
68062: LD_ADDR_OWVAR 28
68066: PUSH
68067: LD_INT 13
68069: ST_TO_ADDR
// hc_gallery :=  ;
68070: LD_ADDR_OWVAR 33
68074: PUSH
68075: LD_STRING 
68077: ST_TO_ADDR
// hc_name :=  ;
68078: LD_ADDR_OWVAR 26
68082: PUSH
68083: LD_STRING 
68085: ST_TO_ADDR
// end ;
68086: LD_VAR 0 1
68090: RET
// export function PrepareFrog ( ) ; begin
68091: LD_INT 0
68093: PPUSH
// uc_side := 0 ;
68094: LD_ADDR_OWVAR 20
68098: PUSH
68099: LD_INT 0
68101: ST_TO_ADDR
// uc_nation := 0 ;
68102: LD_ADDR_OWVAR 21
68106: PUSH
68107: LD_INT 0
68109: ST_TO_ADDR
// InitHc ;
68110: CALL_OW 19
// hc_class := class_frog ;
68114: LD_ADDR_OWVAR 28
68118: PUSH
68119: LD_INT 19
68121: ST_TO_ADDR
// hc_gallery :=  ;
68122: LD_ADDR_OWVAR 33
68126: PUSH
68127: LD_STRING 
68129: ST_TO_ADDR
// hc_name :=  ;
68130: LD_ADDR_OWVAR 26
68134: PUSH
68135: LD_STRING 
68137: ST_TO_ADDR
// end ;
68138: LD_VAR 0 1
68142: RET
// export function PrepareFish ( ) ; begin
68143: LD_INT 0
68145: PPUSH
// uc_side := 0 ;
68146: LD_ADDR_OWVAR 20
68150: PUSH
68151: LD_INT 0
68153: ST_TO_ADDR
// uc_nation := 0 ;
68154: LD_ADDR_OWVAR 21
68158: PUSH
68159: LD_INT 0
68161: ST_TO_ADDR
// InitHc ;
68162: CALL_OW 19
// hc_class := class_fish ;
68166: LD_ADDR_OWVAR 28
68170: PUSH
68171: LD_INT 20
68173: ST_TO_ADDR
// hc_gallery :=  ;
68174: LD_ADDR_OWVAR 33
68178: PUSH
68179: LD_STRING 
68181: ST_TO_ADDR
// hc_name :=  ;
68182: LD_ADDR_OWVAR 26
68186: PUSH
68187: LD_STRING 
68189: ST_TO_ADDR
// end ;
68190: LD_VAR 0 1
68194: RET
// export function PrepareBird ( ) ; begin
68195: LD_INT 0
68197: PPUSH
// uc_side := 0 ;
68198: LD_ADDR_OWVAR 20
68202: PUSH
68203: LD_INT 0
68205: ST_TO_ADDR
// uc_nation := 0 ;
68206: LD_ADDR_OWVAR 21
68210: PUSH
68211: LD_INT 0
68213: ST_TO_ADDR
// InitHc ;
68214: CALL_OW 19
// hc_class := class_phororhacos ;
68218: LD_ADDR_OWVAR 28
68222: PUSH
68223: LD_INT 18
68225: ST_TO_ADDR
// hc_gallery :=  ;
68226: LD_ADDR_OWVAR 33
68230: PUSH
68231: LD_STRING 
68233: ST_TO_ADDR
// hc_name :=  ;
68234: LD_ADDR_OWVAR 26
68238: PUSH
68239: LD_STRING 
68241: ST_TO_ADDR
// end ;
68242: LD_VAR 0 1
68246: RET
// export function PrepareHorse ( ) ; begin
68247: LD_INT 0
68249: PPUSH
// uc_side := 0 ;
68250: LD_ADDR_OWVAR 20
68254: PUSH
68255: LD_INT 0
68257: ST_TO_ADDR
// uc_nation := 0 ;
68258: LD_ADDR_OWVAR 21
68262: PUSH
68263: LD_INT 0
68265: ST_TO_ADDR
// InitHc ;
68266: CALL_OW 19
// hc_class := class_horse ;
68270: LD_ADDR_OWVAR 28
68274: PUSH
68275: LD_INT 21
68277: ST_TO_ADDR
// hc_gallery :=  ;
68278: LD_ADDR_OWVAR 33
68282: PUSH
68283: LD_STRING 
68285: ST_TO_ADDR
// hc_name :=  ;
68286: LD_ADDR_OWVAR 26
68290: PUSH
68291: LD_STRING 
68293: ST_TO_ADDR
// end ;
68294: LD_VAR 0 1
68298: RET
// export function PrepareMastodont ( ) ; begin
68299: LD_INT 0
68301: PPUSH
// uc_side := 0 ;
68302: LD_ADDR_OWVAR 20
68306: PUSH
68307: LD_INT 0
68309: ST_TO_ADDR
// uc_nation := 0 ;
68310: LD_ADDR_OWVAR 21
68314: PUSH
68315: LD_INT 0
68317: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68318: LD_ADDR_OWVAR 37
68322: PUSH
68323: LD_INT 31
68325: ST_TO_ADDR
// vc_control := control_rider ;
68326: LD_ADDR_OWVAR 38
68330: PUSH
68331: LD_INT 4
68333: ST_TO_ADDR
// end ;
68334: LD_VAR 0 1
68338: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68339: LD_INT 0
68341: PPUSH
68342: PPUSH
68343: PPUSH
// uc_side = 0 ;
68344: LD_ADDR_OWVAR 20
68348: PUSH
68349: LD_INT 0
68351: ST_TO_ADDR
// uc_nation = 0 ;
68352: LD_ADDR_OWVAR 21
68356: PUSH
68357: LD_INT 0
68359: ST_TO_ADDR
// InitHc_All ( ) ;
68360: CALL_OW 584
// InitVc ;
68364: CALL_OW 20
// if mastodonts then
68368: LD_VAR 0 6
68372: IFFALSE 68439
// for i = 1 to mastodonts do
68374: LD_ADDR_VAR 0 11
68378: PUSH
68379: DOUBLE
68380: LD_INT 1
68382: DEC
68383: ST_TO_ADDR
68384: LD_VAR 0 6
68388: PUSH
68389: FOR_TO
68390: IFFALSE 68437
// begin vc_chassis := 31 ;
68392: LD_ADDR_OWVAR 37
68396: PUSH
68397: LD_INT 31
68399: ST_TO_ADDR
// vc_control := control_rider ;
68400: LD_ADDR_OWVAR 38
68404: PUSH
68405: LD_INT 4
68407: ST_TO_ADDR
// animal := CreateVehicle ;
68408: LD_ADDR_VAR 0 12
68412: PUSH
68413: CALL_OW 45
68417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68418: LD_VAR 0 12
68422: PPUSH
68423: LD_VAR 0 8
68427: PPUSH
68428: LD_INT 0
68430: PPUSH
68431: CALL 70581 0 3
// end ;
68435: GO 68389
68437: POP
68438: POP
// if horses then
68439: LD_VAR 0 5
68443: IFFALSE 68510
// for i = 1 to horses do
68445: LD_ADDR_VAR 0 11
68449: PUSH
68450: DOUBLE
68451: LD_INT 1
68453: DEC
68454: ST_TO_ADDR
68455: LD_VAR 0 5
68459: PUSH
68460: FOR_TO
68461: IFFALSE 68508
// begin hc_class := 21 ;
68463: LD_ADDR_OWVAR 28
68467: PUSH
68468: LD_INT 21
68470: ST_TO_ADDR
// hc_gallery :=  ;
68471: LD_ADDR_OWVAR 33
68475: PUSH
68476: LD_STRING 
68478: ST_TO_ADDR
// animal := CreateHuman ;
68479: LD_ADDR_VAR 0 12
68483: PUSH
68484: CALL_OW 44
68488: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68489: LD_VAR 0 12
68493: PPUSH
68494: LD_VAR 0 8
68498: PPUSH
68499: LD_INT 0
68501: PPUSH
68502: CALL 70581 0 3
// end ;
68506: GO 68460
68508: POP
68509: POP
// if birds then
68510: LD_VAR 0 1
68514: IFFALSE 68581
// for i = 1 to birds do
68516: LD_ADDR_VAR 0 11
68520: PUSH
68521: DOUBLE
68522: LD_INT 1
68524: DEC
68525: ST_TO_ADDR
68526: LD_VAR 0 1
68530: PUSH
68531: FOR_TO
68532: IFFALSE 68579
// begin hc_class := 18 ;
68534: LD_ADDR_OWVAR 28
68538: PUSH
68539: LD_INT 18
68541: ST_TO_ADDR
// hc_gallery =  ;
68542: LD_ADDR_OWVAR 33
68546: PUSH
68547: LD_STRING 
68549: ST_TO_ADDR
// animal := CreateHuman ;
68550: LD_ADDR_VAR 0 12
68554: PUSH
68555: CALL_OW 44
68559: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68560: LD_VAR 0 12
68564: PPUSH
68565: LD_VAR 0 8
68569: PPUSH
68570: LD_INT 0
68572: PPUSH
68573: CALL 70581 0 3
// end ;
68577: GO 68531
68579: POP
68580: POP
// if tigers then
68581: LD_VAR 0 2
68585: IFFALSE 68669
// for i = 1 to tigers do
68587: LD_ADDR_VAR 0 11
68591: PUSH
68592: DOUBLE
68593: LD_INT 1
68595: DEC
68596: ST_TO_ADDR
68597: LD_VAR 0 2
68601: PUSH
68602: FOR_TO
68603: IFFALSE 68667
// begin hc_class = class_tiger ;
68605: LD_ADDR_OWVAR 28
68609: PUSH
68610: LD_INT 14
68612: ST_TO_ADDR
// hc_gallery =  ;
68613: LD_ADDR_OWVAR 33
68617: PUSH
68618: LD_STRING 
68620: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68621: LD_ADDR_OWVAR 35
68625: PUSH
68626: LD_INT 7
68628: NEG
68629: PPUSH
68630: LD_INT 7
68632: PPUSH
68633: CALL_OW 12
68637: ST_TO_ADDR
// animal := CreateHuman ;
68638: LD_ADDR_VAR 0 12
68642: PUSH
68643: CALL_OW 44
68647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68648: LD_VAR 0 12
68652: PPUSH
68653: LD_VAR 0 8
68657: PPUSH
68658: LD_INT 0
68660: PPUSH
68661: CALL 70581 0 3
// end ;
68665: GO 68602
68667: POP
68668: POP
// if apemans then
68669: LD_VAR 0 3
68673: IFFALSE 68796
// for i = 1 to apemans do
68675: LD_ADDR_VAR 0 11
68679: PUSH
68680: DOUBLE
68681: LD_INT 1
68683: DEC
68684: ST_TO_ADDR
68685: LD_VAR 0 3
68689: PUSH
68690: FOR_TO
68691: IFFALSE 68794
// begin hc_class = class_apeman ;
68693: LD_ADDR_OWVAR 28
68697: PUSH
68698: LD_INT 12
68700: ST_TO_ADDR
// hc_gallery =  ;
68701: LD_ADDR_OWVAR 33
68705: PUSH
68706: LD_STRING 
68708: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68709: LD_ADDR_OWVAR 35
68713: PUSH
68714: LD_INT 2
68716: NEG
68717: PPUSH
68718: LD_INT 2
68720: PPUSH
68721: CALL_OW 12
68725: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68726: LD_ADDR_OWVAR 31
68730: PUSH
68731: LD_INT 1
68733: PPUSH
68734: LD_INT 3
68736: PPUSH
68737: CALL_OW 12
68741: PUSH
68742: LD_INT 1
68744: PPUSH
68745: LD_INT 3
68747: PPUSH
68748: CALL_OW 12
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: ST_TO_ADDR
// animal := CreateHuman ;
68765: LD_ADDR_VAR 0 12
68769: PUSH
68770: CALL_OW 44
68774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68775: LD_VAR 0 12
68779: PPUSH
68780: LD_VAR 0 8
68784: PPUSH
68785: LD_INT 0
68787: PPUSH
68788: CALL 70581 0 3
// end ;
68792: GO 68690
68794: POP
68795: POP
// if enchidnas then
68796: LD_VAR 0 4
68800: IFFALSE 68867
// for i = 1 to enchidnas do
68802: LD_ADDR_VAR 0 11
68806: PUSH
68807: DOUBLE
68808: LD_INT 1
68810: DEC
68811: ST_TO_ADDR
68812: LD_VAR 0 4
68816: PUSH
68817: FOR_TO
68818: IFFALSE 68865
// begin hc_class = 13 ;
68820: LD_ADDR_OWVAR 28
68824: PUSH
68825: LD_INT 13
68827: ST_TO_ADDR
// hc_gallery =  ;
68828: LD_ADDR_OWVAR 33
68832: PUSH
68833: LD_STRING 
68835: ST_TO_ADDR
// animal := CreateHuman ;
68836: LD_ADDR_VAR 0 12
68840: PUSH
68841: CALL_OW 44
68845: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68846: LD_VAR 0 12
68850: PPUSH
68851: LD_VAR 0 8
68855: PPUSH
68856: LD_INT 0
68858: PPUSH
68859: CALL 70581 0 3
// end ;
68863: GO 68817
68865: POP
68866: POP
// if fishes then
68867: LD_VAR 0 7
68871: IFFALSE 68938
// for i = 1 to fishes do
68873: LD_ADDR_VAR 0 11
68877: PUSH
68878: DOUBLE
68879: LD_INT 1
68881: DEC
68882: ST_TO_ADDR
68883: LD_VAR 0 7
68887: PUSH
68888: FOR_TO
68889: IFFALSE 68936
// begin hc_class = 20 ;
68891: LD_ADDR_OWVAR 28
68895: PUSH
68896: LD_INT 20
68898: ST_TO_ADDR
// hc_gallery =  ;
68899: LD_ADDR_OWVAR 33
68903: PUSH
68904: LD_STRING 
68906: ST_TO_ADDR
// animal := CreateHuman ;
68907: LD_ADDR_VAR 0 12
68911: PUSH
68912: CALL_OW 44
68916: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68917: LD_VAR 0 12
68921: PPUSH
68922: LD_VAR 0 9
68926: PPUSH
68927: LD_INT 0
68929: PPUSH
68930: CALL 70581 0 3
// end ;
68934: GO 68888
68936: POP
68937: POP
// end ;
68938: LD_VAR 0 10
68942: RET
// export function WantHeal ( sci , unit ) ; begin
68943: LD_INT 0
68945: PPUSH
// if GetTaskList ( sci ) > 0 then
68946: LD_VAR 0 1
68950: PPUSH
68951: CALL_OW 437
68955: PUSH
68956: LD_INT 0
68958: GREATER
68959: IFFALSE 69031
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68961: LD_VAR 0 1
68965: PPUSH
68966: CALL_OW 437
68970: PUSH
68971: LD_INT 1
68973: ARRAY
68974: PUSH
68975: LD_INT 1
68977: ARRAY
68978: PUSH
68979: LD_STRING l
68981: EQUAL
68982: IFFALSE 69009
68984: PUSH
68985: LD_VAR 0 1
68989: PPUSH
68990: CALL_OW 437
68994: PUSH
68995: LD_INT 1
68997: ARRAY
68998: PUSH
68999: LD_INT 4
69001: ARRAY
69002: PUSH
69003: LD_VAR 0 2
69007: EQUAL
69008: AND
69009: IFFALSE 69021
// result := true else
69011: LD_ADDR_VAR 0 3
69015: PUSH
69016: LD_INT 1
69018: ST_TO_ADDR
69019: GO 69029
// result := false ;
69021: LD_ADDR_VAR 0 3
69025: PUSH
69026: LD_INT 0
69028: ST_TO_ADDR
// end else
69029: GO 69039
// result := false ;
69031: LD_ADDR_VAR 0 3
69035: PUSH
69036: LD_INT 0
69038: ST_TO_ADDR
// end ;
69039: LD_VAR 0 3
69043: RET
// export function HealTarget ( sci ) ; begin
69044: LD_INT 0
69046: PPUSH
// if not sci then
69047: LD_VAR 0 1
69051: NOT
69052: IFFALSE 69056
// exit ;
69054: GO 69121
// result := 0 ;
69056: LD_ADDR_VAR 0 2
69060: PUSH
69061: LD_INT 0
69063: ST_TO_ADDR
// if GetTaskList ( sci ) then
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 437
69073: IFFALSE 69121
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69075: LD_VAR 0 1
69079: PPUSH
69080: CALL_OW 437
69084: PUSH
69085: LD_INT 1
69087: ARRAY
69088: PUSH
69089: LD_INT 1
69091: ARRAY
69092: PUSH
69093: LD_STRING l
69095: EQUAL
69096: IFFALSE 69121
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69098: LD_ADDR_VAR 0 2
69102: PUSH
69103: LD_VAR 0 1
69107: PPUSH
69108: CALL_OW 437
69112: PUSH
69113: LD_INT 1
69115: ARRAY
69116: PUSH
69117: LD_INT 4
69119: ARRAY
69120: ST_TO_ADDR
// end ;
69121: LD_VAR 0 2
69125: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69126: LD_INT 0
69128: PPUSH
69129: PPUSH
69130: PPUSH
69131: PPUSH
// if not base_units then
69132: LD_VAR 0 1
69136: NOT
69137: IFFALSE 69141
// exit ;
69139: GO 69228
// result := false ;
69141: LD_ADDR_VAR 0 2
69145: PUSH
69146: LD_INT 0
69148: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69149: LD_ADDR_VAR 0 5
69153: PUSH
69154: LD_VAR 0 1
69158: PPUSH
69159: LD_INT 21
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PPUSH
69169: CALL_OW 72
69173: ST_TO_ADDR
// if not tmp then
69174: LD_VAR 0 5
69178: NOT
69179: IFFALSE 69183
// exit ;
69181: GO 69228
// for i in tmp do
69183: LD_ADDR_VAR 0 3
69187: PUSH
69188: LD_VAR 0 5
69192: PUSH
69193: FOR_IN
69194: IFFALSE 69226
// begin result := EnemyInRange ( i , 22 ) ;
69196: LD_ADDR_VAR 0 2
69200: PUSH
69201: LD_VAR 0 3
69205: PPUSH
69206: LD_INT 22
69208: PPUSH
69209: CALL 66653 0 2
69213: ST_TO_ADDR
// if result then
69214: LD_VAR 0 2
69218: IFFALSE 69224
// exit ;
69220: POP
69221: POP
69222: GO 69228
// end ;
69224: GO 69193
69226: POP
69227: POP
// end ;
69228: LD_VAR 0 2
69232: RET
// export function FilterByTag ( units , tag ) ; begin
69233: LD_INT 0
69235: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69236: LD_ADDR_VAR 0 3
69240: PUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: LD_INT 120
69248: PUSH
69249: LD_VAR 0 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PPUSH
69258: CALL_OW 72
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 3
69267: RET
// export function IsDriver ( un ) ; begin
69268: LD_INT 0
69270: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69271: LD_ADDR_VAR 0 2
69275: PUSH
69276: LD_VAR 0 1
69280: PUSH
69281: LD_INT 55
69283: PUSH
69284: EMPTY
69285: LIST
69286: PPUSH
69287: CALL_OW 69
69291: IN
69292: ST_TO_ADDR
// end ;
69293: LD_VAR 0 2
69297: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69298: LD_INT 0
69300: PPUSH
69301: PPUSH
// list := [ ] ;
69302: LD_ADDR_VAR 0 5
69306: PUSH
69307: EMPTY
69308: ST_TO_ADDR
// case d of 0 :
69309: LD_VAR 0 3
69313: PUSH
69314: LD_INT 0
69316: DOUBLE
69317: EQUAL
69318: IFTRUE 69322
69320: GO 69455
69322: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69323: LD_ADDR_VAR 0 5
69327: PUSH
69328: LD_VAR 0 1
69332: PUSH
69333: LD_INT 4
69335: MINUS
69336: PUSH
69337: LD_VAR 0 2
69341: PUSH
69342: LD_INT 4
69344: MINUS
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: PUSH
69354: LD_VAR 0 1
69358: PUSH
69359: LD_INT 3
69361: MINUS
69362: PUSH
69363: LD_VAR 0 2
69367: PUSH
69368: LD_INT 1
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: PUSH
69376: LD_VAR 0 1
69380: PUSH
69381: LD_INT 4
69383: PLUS
69384: PUSH
69385: LD_VAR 0 2
69389: PUSH
69390: LD_INT 4
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: PUSH
69398: LD_VAR 0 1
69402: PUSH
69403: LD_INT 3
69405: PLUS
69406: PUSH
69407: LD_VAR 0 2
69411: PUSH
69412: LD_INT 3
69414: PLUS
69415: PUSH
69416: LD_INT 5
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: PUSH
69424: LD_VAR 0 1
69428: PUSH
69429: LD_VAR 0 2
69433: PUSH
69434: LD_INT 4
69436: PLUS
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: ST_TO_ADDR
// end ; 1 :
69453: GO 70153
69455: LD_INT 1
69457: DOUBLE
69458: EQUAL
69459: IFTRUE 69463
69461: GO 69596
69463: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69464: LD_ADDR_VAR 0 5
69468: PUSH
69469: LD_VAR 0 1
69473: PUSH
69474: LD_VAR 0 2
69478: PUSH
69479: LD_INT 4
69481: MINUS
69482: PUSH
69483: LD_INT 3
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: PUSH
69491: LD_VAR 0 1
69495: PUSH
69496: LD_INT 3
69498: MINUS
69499: PUSH
69500: LD_VAR 0 2
69504: PUSH
69505: LD_INT 3
69507: MINUS
69508: PUSH
69509: LD_INT 2
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: PUSH
69517: LD_VAR 0 1
69521: PUSH
69522: LD_INT 4
69524: MINUS
69525: PUSH
69526: LD_VAR 0 2
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: LD_VAR 0 2
69548: PUSH
69549: LD_INT 3
69551: PLUS
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: PUSH
69561: LD_VAR 0 1
69565: PUSH
69566: LD_INT 4
69568: PLUS
69569: PUSH
69570: LD_VAR 0 2
69574: PUSH
69575: LD_INT 4
69577: PLUS
69578: PUSH
69579: LD_INT 5
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: LIST
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: ST_TO_ADDR
// end ; 2 :
69594: GO 70153
69596: LD_INT 2
69598: DOUBLE
69599: EQUAL
69600: IFTRUE 69604
69602: GO 69733
69604: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69605: LD_ADDR_VAR 0 5
69609: PUSH
69610: LD_VAR 0 1
69614: PUSH
69615: LD_VAR 0 2
69619: PUSH
69620: LD_INT 3
69622: MINUS
69623: PUSH
69624: LD_INT 3
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: PUSH
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 4
69639: PLUS
69640: PUSH
69641: LD_VAR 0 2
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_VAR 0 2
69663: PUSH
69664: LD_INT 4
69666: PLUS
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: PUSH
69676: LD_VAR 0 1
69680: PUSH
69681: LD_INT 3
69683: MINUS
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: PUSH
69698: LD_VAR 0 1
69702: PUSH
69703: LD_INT 4
69705: MINUS
69706: PUSH
69707: LD_VAR 0 2
69711: PUSH
69712: LD_INT 4
69714: MINUS
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: ST_TO_ADDR
// end ; 3 :
69731: GO 70153
69733: LD_INT 3
69735: DOUBLE
69736: EQUAL
69737: IFTRUE 69741
69739: GO 69874
69741: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69742: LD_ADDR_VAR 0 5
69746: PUSH
69747: LD_VAR 0 1
69751: PUSH
69752: LD_INT 3
69754: PLUS
69755: PUSH
69756: LD_VAR 0 2
69760: PUSH
69761: LD_INT 4
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: PUSH
69769: LD_VAR 0 1
69773: PUSH
69774: LD_INT 4
69776: PLUS
69777: PUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_INT 4
69785: PLUS
69786: PUSH
69787: LD_INT 5
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: PUSH
69795: LD_VAR 0 1
69799: PUSH
69800: LD_INT 4
69802: MINUS
69803: PUSH
69804: LD_VAR 0 2
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 1
69821: PUSH
69822: LD_VAR 0 2
69826: PUSH
69827: LD_INT 4
69829: MINUS
69830: PUSH
69831: LD_INT 3
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: PUSH
69839: LD_VAR 0 1
69843: PUSH
69844: LD_INT 3
69846: MINUS
69847: PUSH
69848: LD_VAR 0 2
69852: PUSH
69853: LD_INT 3
69855: MINUS
69856: PUSH
69857: LD_INT 2
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: ST_TO_ADDR
// end ; 4 :
69872: GO 70153
69874: LD_INT 4
69876: DOUBLE
69877: EQUAL
69878: IFTRUE 69882
69880: GO 70015
69882: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69883: LD_ADDR_VAR 0 5
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 4
69900: PLUS
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: PUSH
69910: LD_VAR 0 1
69914: PUSH
69915: LD_INT 3
69917: PLUS
69918: PUSH
69919: LD_VAR 0 2
69923: PUSH
69924: LD_INT 3
69926: PLUS
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: LIST
69935: PUSH
69936: LD_VAR 0 1
69940: PUSH
69941: LD_INT 4
69943: PLUS
69944: PUSH
69945: LD_VAR 0 2
69949: PUSH
69950: LD_INT 4
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: PUSH
69958: LD_VAR 0 1
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_INT 3
69970: MINUS
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: LIST
69979: PUSH
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 4
69987: MINUS
69988: PUSH
69989: LD_VAR 0 2
69993: PUSH
69994: LD_INT 4
69996: MINUS
69997: PUSH
69998: LD_INT 2
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: ST_TO_ADDR
// end ; 5 :
70013: GO 70153
70015: LD_INT 5
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70023
70021: GO 70152
70023: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70024: LD_ADDR_VAR 0 5
70028: PUSH
70029: LD_VAR 0 1
70033: PUSH
70034: LD_INT 4
70036: MINUS
70037: PUSH
70038: LD_VAR 0 2
70042: PUSH
70043: LD_INT 1
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: PUSH
70051: LD_VAR 0 1
70055: PUSH
70056: LD_VAR 0 2
70060: PUSH
70061: LD_INT 4
70063: MINUS
70064: PUSH
70065: LD_INT 3
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: LD_VAR 0 1
70077: PUSH
70078: LD_INT 4
70080: PLUS
70081: PUSH
70082: LD_VAR 0 2
70086: PUSH
70087: LD_INT 4
70089: PLUS
70090: PUSH
70091: LD_INT 5
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: LD_VAR 0 1
70103: PUSH
70104: LD_INT 3
70106: PLUS
70107: PUSH
70108: LD_VAR 0 2
70112: PUSH
70113: LD_INT 4
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: LIST
70120: PUSH
70121: LD_VAR 0 1
70125: PUSH
70126: LD_VAR 0 2
70130: PUSH
70131: LD_INT 3
70133: PLUS
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: ST_TO_ADDR
// end ; end ;
70150: GO 70153
70152: POP
// result := list ;
70153: LD_ADDR_VAR 0 4
70157: PUSH
70158: LD_VAR 0 5
70162: ST_TO_ADDR
// end ;
70163: LD_VAR 0 4
70167: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70168: LD_INT 0
70170: PPUSH
70171: PPUSH
70172: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70173: LD_VAR 0 1
70177: NOT
70178: IFTRUE 70206
70180: PUSH
70181: LD_VAR 0 2
70185: PUSH
70186: LD_INT 1
70188: PUSH
70189: LD_INT 2
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: LD_INT 4
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: IN
70204: NOT
70205: OR
70206: IFFALSE 70210
// exit ;
70208: GO 70293
// tmp := [ ] ;
70210: LD_ADDR_VAR 0 5
70214: PUSH
70215: EMPTY
70216: ST_TO_ADDR
// for i in units do
70217: LD_ADDR_VAR 0 4
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: FOR_IN
70228: IFFALSE 70262
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70230: LD_ADDR_VAR 0 5
70234: PUSH
70235: LD_VAR 0 5
70239: PPUSH
70240: LD_VAR 0 4
70244: PPUSH
70245: LD_VAR 0 2
70249: PPUSH
70250: CALL_OW 259
70254: PPUSH
70255: CALL 71688 0 2
70259: ST_TO_ADDR
70260: GO 70227
70262: POP
70263: POP
// if not tmp then
70264: LD_VAR 0 5
70268: NOT
70269: IFFALSE 70273
// exit ;
70271: GO 70293
// result := SortListByListDesc ( units , tmp ) ;
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_VAR 0 1
70282: PPUSH
70283: LD_VAR 0 5
70287: PPUSH
70288: CALL_OW 77
70292: ST_TO_ADDR
// end ;
70293: LD_VAR 0 3
70297: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70298: LD_INT 0
70300: PPUSH
70301: PPUSH
70302: PPUSH
// result := false ;
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: LD_INT 0
70310: ST_TO_ADDR
// if not building then
70311: LD_VAR 0 2
70315: NOT
70316: IFFALSE 70320
// exit ;
70318: GO 70464
// x := GetX ( building ) ;
70320: LD_ADDR_VAR 0 4
70324: PUSH
70325: LD_VAR 0 2
70329: PPUSH
70330: CALL_OW 250
70334: ST_TO_ADDR
// y := GetY ( building ) ;
70335: LD_ADDR_VAR 0 5
70339: PUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: CALL_OW 251
70349: ST_TO_ADDR
// if not x or not y then
70350: LD_VAR 0 4
70354: NOT
70355: IFTRUE 70364
70357: PUSH
70358: LD_VAR 0 5
70362: NOT
70363: OR
70364: IFFALSE 70368
// exit ;
70366: GO 70464
// if GetTaskList ( unit ) then
70368: LD_VAR 0 1
70372: PPUSH
70373: CALL_OW 437
70377: IFFALSE 70464
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70379: LD_STRING e
70381: PUSH
70382: LD_VAR 0 1
70386: PPUSH
70387: CALL_OW 437
70391: PUSH
70392: LD_INT 1
70394: ARRAY
70395: PUSH
70396: LD_INT 1
70398: ARRAY
70399: EQUAL
70400: IFFALSE 70427
70402: PUSH
70403: LD_VAR 0 4
70407: PUSH
70408: LD_VAR 0 1
70412: PPUSH
70413: CALL_OW 437
70417: PUSH
70418: LD_INT 1
70420: ARRAY
70421: PUSH
70422: LD_INT 2
70424: ARRAY
70425: EQUAL
70426: AND
70427: IFFALSE 70454
70429: PUSH
70430: LD_VAR 0 5
70434: PUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 437
70444: PUSH
70445: LD_INT 1
70447: ARRAY
70448: PUSH
70449: LD_INT 3
70451: ARRAY
70452: EQUAL
70453: AND
70454: IFFALSE 70464
// result := true end ;
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: LD_INT 1
70463: ST_TO_ADDR
// end ;
70464: LD_VAR 0 3
70468: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70469: LD_INT 0
70471: PPUSH
// result := false ;
70472: LD_ADDR_VAR 0 4
70476: PUSH
70477: LD_INT 0
70479: ST_TO_ADDR
// if GetTaskList ( unit ) then
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL_OW 437
70489: IFFALSE 70576
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70491: LD_STRING M
70493: PUSH
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 437
70503: PUSH
70504: LD_INT 1
70506: ARRAY
70507: PUSH
70508: LD_INT 1
70510: ARRAY
70511: EQUAL
70512: IFFALSE 70539
70514: PUSH
70515: LD_VAR 0 2
70519: PUSH
70520: LD_VAR 0 1
70524: PPUSH
70525: CALL_OW 437
70529: PUSH
70530: LD_INT 1
70532: ARRAY
70533: PUSH
70534: LD_INT 2
70536: ARRAY
70537: EQUAL
70538: AND
70539: IFFALSE 70566
70541: PUSH
70542: LD_VAR 0 3
70546: PUSH
70547: LD_VAR 0 1
70551: PPUSH
70552: CALL_OW 437
70556: PUSH
70557: LD_INT 1
70559: ARRAY
70560: PUSH
70561: LD_INT 3
70563: ARRAY
70564: EQUAL
70565: AND
70566: IFFALSE 70576
// result := true ;
70568: LD_ADDR_VAR 0 4
70572: PUSH
70573: LD_INT 1
70575: ST_TO_ADDR
// end ; end ;
70576: LD_VAR 0 4
70580: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70581: LD_INT 0
70583: PPUSH
70584: PPUSH
70585: PPUSH
70586: PPUSH
// if not unit or not area then
70587: LD_VAR 0 1
70591: NOT
70592: IFTRUE 70601
70594: PUSH
70595: LD_VAR 0 2
70599: NOT
70600: OR
70601: IFFALSE 70605
// exit ;
70603: GO 70781
// tmp := AreaToList ( area , i ) ;
70605: LD_ADDR_VAR 0 6
70609: PUSH
70610: LD_VAR 0 2
70614: PPUSH
70615: LD_VAR 0 5
70619: PPUSH
70620: CALL_OW 517
70624: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70625: LD_ADDR_VAR 0 5
70629: PUSH
70630: DOUBLE
70631: LD_INT 1
70633: DEC
70634: ST_TO_ADDR
70635: LD_VAR 0 6
70639: PUSH
70640: LD_INT 1
70642: ARRAY
70643: PUSH
70644: FOR_TO
70645: IFFALSE 70779
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70647: LD_ADDR_VAR 0 7
70651: PUSH
70652: LD_VAR 0 6
70656: PUSH
70657: LD_INT 1
70659: ARRAY
70660: PUSH
70661: LD_VAR 0 5
70665: ARRAY
70666: PUSH
70667: LD_VAR 0 6
70671: PUSH
70672: LD_INT 2
70674: ARRAY
70675: PUSH
70676: LD_VAR 0 5
70680: ARRAY
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70686: LD_INT 92
70688: PUSH
70689: LD_VAR 0 7
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PUSH
70698: LD_VAR 0 7
70702: PUSH
70703: LD_INT 2
70705: ARRAY
70706: PUSH
70707: LD_INT 2
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: PPUSH
70716: CALL_OW 69
70720: PUSH
70721: LD_INT 0
70723: EQUAL
70724: IFFALSE 70777
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70726: LD_VAR 0 1
70730: PPUSH
70731: LD_VAR 0 7
70735: PUSH
70736: LD_INT 1
70738: ARRAY
70739: PPUSH
70740: LD_VAR 0 7
70744: PUSH
70745: LD_INT 2
70747: ARRAY
70748: PPUSH
70749: LD_VAR 0 3
70753: PPUSH
70754: CALL_OW 48
// result := IsPlaced ( unit ) ;
70758: LD_ADDR_VAR 0 4
70762: PUSH
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 305
70772: ST_TO_ADDR
// exit ;
70773: POP
70774: POP
70775: GO 70781
// end ; end ;
70777: GO 70644
70779: POP
70780: POP
// end ;
70781: LD_VAR 0 4
70785: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70786: LD_INT 0
70788: PPUSH
70789: PPUSH
70790: PPUSH
// if not side or side > 8 then
70791: LD_VAR 0 1
70795: NOT
70796: IFTRUE 70808
70798: PUSH
70799: LD_VAR 0 1
70803: PUSH
70804: LD_INT 8
70806: GREATER
70807: OR
70808: IFFALSE 70812
// exit ;
70810: GO 70999
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70812: LD_ADDR_VAR 0 4
70816: PUSH
70817: LD_INT 22
70819: PUSH
70820: LD_VAR 0 1
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 21
70831: PUSH
70832: LD_INT 3
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PPUSH
70843: CALL_OW 69
70847: ST_TO_ADDR
// if not tmp then
70848: LD_VAR 0 4
70852: NOT
70853: IFFALSE 70857
// exit ;
70855: GO 70999
// enable_addtolog := true ;
70857: LD_ADDR_OWVAR 81
70861: PUSH
70862: LD_INT 1
70864: ST_TO_ADDR
// AddToLog ( [ ) ;
70865: LD_STRING [
70867: PPUSH
70868: CALL_OW 561
// for i in tmp do
70872: LD_ADDR_VAR 0 3
70876: PUSH
70877: LD_VAR 0 4
70881: PUSH
70882: FOR_IN
70883: IFFALSE 70990
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70885: LD_STRING [
70887: PUSH
70888: LD_VAR 0 3
70892: PPUSH
70893: CALL_OW 266
70897: STR
70898: PUSH
70899: LD_STRING , 
70901: STR
70902: PUSH
70903: LD_VAR 0 3
70907: PPUSH
70908: CALL_OW 250
70912: STR
70913: PUSH
70914: LD_STRING , 
70916: STR
70917: PUSH
70918: LD_VAR 0 3
70922: PPUSH
70923: CALL_OW 251
70927: STR
70928: PUSH
70929: LD_STRING , 
70931: STR
70932: PUSH
70933: LD_VAR 0 3
70937: PPUSH
70938: CALL_OW 254
70942: STR
70943: PUSH
70944: LD_STRING , 
70946: STR
70947: PUSH
70948: LD_VAR 0 3
70952: PPUSH
70953: LD_INT 1
70955: PPUSH
70956: CALL_OW 268
70960: STR
70961: PUSH
70962: LD_STRING , 
70964: STR
70965: PUSH
70966: LD_VAR 0 3
70970: PPUSH
70971: LD_INT 2
70973: PPUSH
70974: CALL_OW 268
70978: STR
70979: PUSH
70980: LD_STRING ],
70982: STR
70983: PPUSH
70984: CALL_OW 561
// end ;
70988: GO 70882
70990: POP
70991: POP
// AddToLog ( ]; ) ;
70992: LD_STRING ];
70994: PPUSH
70995: CALL_OW 561
// end ;
70999: LD_VAR 0 2
71003: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71004: LD_INT 0
71006: PPUSH
71007: PPUSH
71008: PPUSH
71009: PPUSH
71010: PPUSH
// if not area or not rate or not max then
71011: LD_VAR 0 1
71015: NOT
71016: IFTRUE 71025
71018: PUSH
71019: LD_VAR 0 2
71023: NOT
71024: OR
71025: IFTRUE 71034
71027: PUSH
71028: LD_VAR 0 4
71032: NOT
71033: OR
71034: IFFALSE 71038
// exit ;
71036: GO 71227
// while 1 do
71038: LD_INT 1
71040: IFFALSE 71227
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71042: LD_ADDR_VAR 0 9
71046: PUSH
71047: LD_VAR 0 1
71051: PPUSH
71052: LD_INT 1
71054: PPUSH
71055: CALL_OW 287
71059: PUSH
71060: LD_INT 10
71062: MUL
71063: ST_TO_ADDR
// r := rate / 10 ;
71064: LD_ADDR_VAR 0 7
71068: PUSH
71069: LD_VAR 0 2
71073: PUSH
71074: LD_INT 10
71076: DIVREAL
71077: ST_TO_ADDR
// time := 1 1$00 ;
71078: LD_ADDR_VAR 0 8
71082: PUSH
71083: LD_INT 2100
71085: ST_TO_ADDR
// if amount < min then
71086: LD_VAR 0 9
71090: PUSH
71091: LD_VAR 0 3
71095: LESS
71096: IFFALSE 71114
// r := r * 2 else
71098: LD_ADDR_VAR 0 7
71102: PUSH
71103: LD_VAR 0 7
71107: PUSH
71108: LD_INT 2
71110: MUL
71111: ST_TO_ADDR
71112: GO 71140
// if amount > max then
71114: LD_VAR 0 9
71118: PUSH
71119: LD_VAR 0 4
71123: GREATER
71124: IFFALSE 71140
// r := r / 2 ;
71126: LD_ADDR_VAR 0 7
71130: PUSH
71131: LD_VAR 0 7
71135: PUSH
71136: LD_INT 2
71138: DIVREAL
71139: ST_TO_ADDR
// time := time / r ;
71140: LD_ADDR_VAR 0 8
71144: PUSH
71145: LD_VAR 0 8
71149: PUSH
71150: LD_VAR 0 7
71154: DIVREAL
71155: ST_TO_ADDR
// if time < 0 then
71156: LD_VAR 0 8
71160: PUSH
71161: LD_INT 0
71163: LESS
71164: IFFALSE 71181
// time := time * - 1 ;
71166: LD_ADDR_VAR 0 8
71170: PUSH
71171: LD_VAR 0 8
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: MUL
71180: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71181: LD_VAR 0 8
71185: PUSH
71186: LD_INT 35
71188: PPUSH
71189: LD_INT 875
71191: PPUSH
71192: CALL_OW 12
71196: PLUS
71197: PPUSH
71198: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71202: LD_INT 1
71204: PPUSH
71205: LD_INT 5
71207: PPUSH
71208: CALL_OW 12
71212: PPUSH
71213: LD_VAR 0 1
71217: PPUSH
71218: LD_INT 1
71220: PPUSH
71221: CALL_OW 55
// end ;
71225: GO 71038
// end ;
71227: LD_VAR 0 5
71231: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71232: LD_INT 0
71234: PPUSH
71235: PPUSH
71236: PPUSH
71237: PPUSH
71238: PPUSH
71239: PPUSH
71240: PPUSH
71241: PPUSH
// if not turrets or not factories then
71242: LD_VAR 0 1
71246: NOT
71247: IFTRUE 71256
71249: PUSH
71250: LD_VAR 0 2
71254: NOT
71255: OR
71256: IFFALSE 71260
// exit ;
71258: GO 71567
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71260: LD_ADDR_VAR 0 10
71264: PUSH
71265: LD_INT 5
71267: PUSH
71268: LD_INT 6
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 3
71287: PUSH
71288: LD_INT 5
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 24
71302: PUSH
71303: LD_INT 25
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 23
71312: PUSH
71313: LD_INT 27
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 42
71326: PUSH
71327: LD_INT 43
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 44
71336: PUSH
71337: LD_INT 46
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 45
71346: PUSH
71347: LD_INT 47
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: LIST
71363: ST_TO_ADDR
// result := [ ] ;
71364: LD_ADDR_VAR 0 3
71368: PUSH
71369: EMPTY
71370: ST_TO_ADDR
// for i in turrets do
71371: LD_ADDR_VAR 0 4
71375: PUSH
71376: LD_VAR 0 1
71380: PUSH
71381: FOR_IN
71382: IFFALSE 71565
// begin nat := GetNation ( i ) ;
71384: LD_ADDR_VAR 0 7
71388: PUSH
71389: LD_VAR 0 4
71393: PPUSH
71394: CALL_OW 248
71398: ST_TO_ADDR
// weapon := 0 ;
71399: LD_ADDR_VAR 0 8
71403: PUSH
71404: LD_INT 0
71406: ST_TO_ADDR
// if not nat then
71407: LD_VAR 0 7
71411: NOT
71412: IFFALSE 71416
// continue ;
71414: GO 71381
// for j in list [ nat ] do
71416: LD_ADDR_VAR 0 5
71420: PUSH
71421: LD_VAR 0 10
71425: PUSH
71426: LD_VAR 0 7
71430: ARRAY
71431: PUSH
71432: FOR_IN
71433: IFFALSE 71474
// if GetBWeapon ( i ) = j [ 1 ] then
71435: LD_VAR 0 4
71439: PPUSH
71440: CALL_OW 269
71444: PUSH
71445: LD_VAR 0 5
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: EQUAL
71454: IFFALSE 71472
// begin weapon := j [ 2 ] ;
71456: LD_ADDR_VAR 0 8
71460: PUSH
71461: LD_VAR 0 5
71465: PUSH
71466: LD_INT 2
71468: ARRAY
71469: ST_TO_ADDR
// break ;
71470: GO 71474
// end ;
71472: GO 71432
71474: POP
71475: POP
// if not weapon then
71476: LD_VAR 0 8
71480: NOT
71481: IFFALSE 71485
// continue ;
71483: GO 71381
// for k in factories do
71485: LD_ADDR_VAR 0 6
71489: PUSH
71490: LD_VAR 0 2
71494: PUSH
71495: FOR_IN
71496: IFFALSE 71561
// begin weapons := AvailableWeaponList ( k ) ;
71498: LD_ADDR_VAR 0 9
71502: PUSH
71503: LD_VAR 0 6
71507: PPUSH
71508: CALL_OW 478
71512: ST_TO_ADDR
// if not weapons then
71513: LD_VAR 0 9
71517: NOT
71518: IFFALSE 71522
// continue ;
71520: GO 71495
// if weapon in weapons then
71522: LD_VAR 0 8
71526: PUSH
71527: LD_VAR 0 9
71531: IN
71532: IFFALSE 71559
// begin result := [ i , weapon ] ;
71534: LD_ADDR_VAR 0 3
71538: PUSH
71539: LD_VAR 0 4
71543: PUSH
71544: LD_VAR 0 8
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: ST_TO_ADDR
// exit ;
71553: POP
71554: POP
71555: POP
71556: POP
71557: GO 71567
// end ; end ;
71559: GO 71495
71561: POP
71562: POP
// end ;
71563: GO 71381
71565: POP
71566: POP
// end ;
71567: LD_VAR 0 3
71571: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71572: LD_INT 0
71574: PPUSH
// if not side or side > 8 then
71575: LD_VAR 0 3
71579: NOT
71580: IFTRUE 71592
71582: PUSH
71583: LD_VAR 0 3
71587: PUSH
71588: LD_INT 8
71590: GREATER
71591: OR
71592: IFFALSE 71596
// exit ;
71594: GO 71655
// if not range then
71596: LD_VAR 0 4
71600: NOT
71601: IFFALSE 71612
// range := - 12 ;
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_INT 12
71610: NEG
71611: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71612: LD_VAR 0 1
71616: PPUSH
71617: LD_VAR 0 2
71621: PPUSH
71622: LD_VAR 0 3
71626: PPUSH
71627: LD_VAR 0 4
71631: PPUSH
71632: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71636: LD_VAR 0 1
71640: PPUSH
71641: LD_VAR 0 2
71645: PPUSH
71646: LD_VAR 0 3
71650: PPUSH
71651: CALL_OW 331
// end ;
71655: LD_VAR 0 5
71659: RET
// export function Video ( mode ) ; begin
71660: LD_INT 0
71662: PPUSH
// ingame_video = mode ;
71663: LD_ADDR_OWVAR 52
71667: PUSH
71668: LD_VAR 0 1
71672: ST_TO_ADDR
// interface_hidden = mode ;
71673: LD_ADDR_OWVAR 54
71677: PUSH
71678: LD_VAR 0 1
71682: ST_TO_ADDR
// end ;
71683: LD_VAR 0 2
71687: RET
// export function Join ( array , element ) ; begin
71688: LD_INT 0
71690: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71691: LD_ADDR_VAR 0 3
71695: PUSH
71696: LD_VAR 0 1
71700: PPUSH
71701: LD_VAR 0 1
71705: PUSH
71706: LD_INT 1
71708: PLUS
71709: PPUSH
71710: LD_VAR 0 2
71714: PPUSH
71715: CALL_OW 1
71719: ST_TO_ADDR
// end ;
71720: LD_VAR 0 3
71724: RET
// export function JoinUnion ( array , element ) ; begin
71725: LD_INT 0
71727: PPUSH
// result := array union element ;
71728: LD_ADDR_VAR 0 3
71732: PUSH
71733: LD_VAR 0 1
71737: PUSH
71738: LD_VAR 0 2
71742: UNION
71743: ST_TO_ADDR
// end ;
71744: LD_VAR 0 3
71748: RET
// export function GetBehemoths ( side ) ; begin
71749: LD_INT 0
71751: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: LD_INT 22
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 31
71771: PUSH
71772: LD_INT 25
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PPUSH
71783: CALL_OW 69
71787: ST_TO_ADDR
// end ;
71788: LD_VAR 0 2
71792: RET
// export function Shuffle ( array ) ; var i , index ; begin
71793: LD_INT 0
71795: PPUSH
71796: PPUSH
71797: PPUSH
// result := [ ] ;
71798: LD_ADDR_VAR 0 2
71802: PUSH
71803: EMPTY
71804: ST_TO_ADDR
// if not array then
71805: LD_VAR 0 1
71809: NOT
71810: IFFALSE 71814
// exit ;
71812: GO 71913
// Randomize ;
71814: CALL_OW 10
// for i = array downto 1 do
71818: LD_ADDR_VAR 0 3
71822: PUSH
71823: DOUBLE
71824: LD_VAR 0 1
71828: INC
71829: ST_TO_ADDR
71830: LD_INT 1
71832: PUSH
71833: FOR_DOWNTO
71834: IFFALSE 71911
// begin index := rand ( 1 , array ) ;
71836: LD_ADDR_VAR 0 4
71840: PUSH
71841: LD_INT 1
71843: PPUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 12
71853: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71854: LD_ADDR_VAR 0 2
71858: PUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: LD_VAR 0 2
71868: PUSH
71869: LD_INT 1
71871: PLUS
71872: PPUSH
71873: LD_VAR 0 1
71877: PUSH
71878: LD_VAR 0 4
71882: ARRAY
71883: PPUSH
71884: CALL_OW 2
71888: ST_TO_ADDR
// array := Delete ( array , index ) ;
71889: LD_ADDR_VAR 0 1
71893: PUSH
71894: LD_VAR 0 1
71898: PPUSH
71899: LD_VAR 0 4
71903: PPUSH
71904: CALL_OW 3
71908: ST_TO_ADDR
// end ;
71909: GO 71833
71911: POP
71912: POP
// end ;
71913: LD_VAR 0 2
71917: RET
// export function GetBaseMaterials ( base ) ; begin
71918: LD_INT 0
71920: PPUSH
// result := [ 0 , 0 , 0 ] ;
71921: LD_ADDR_VAR 0 2
71925: PUSH
71926: LD_INT 0
71928: PUSH
71929: LD_INT 0
71931: PUSH
71932: LD_INT 0
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: LIST
71939: ST_TO_ADDR
// if not base then
71940: LD_VAR 0 1
71944: NOT
71945: IFFALSE 71949
// exit ;
71947: GO 71998
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71949: LD_ADDR_VAR 0 2
71953: PUSH
71954: LD_VAR 0 1
71958: PPUSH
71959: LD_INT 1
71961: PPUSH
71962: CALL_OW 275
71966: PUSH
71967: LD_VAR 0 1
71971: PPUSH
71972: LD_INT 2
71974: PPUSH
71975: CALL_OW 275
71979: PUSH
71980: LD_VAR 0 1
71984: PPUSH
71985: LD_INT 3
71987: PPUSH
71988: CALL_OW 275
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: ST_TO_ADDR
// end ;
71998: LD_VAR 0 2
72002: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72003: LD_INT 0
72005: PPUSH
72006: PPUSH
// result := array ;
72007: LD_ADDR_VAR 0 3
72011: PUSH
72012: LD_VAR 0 1
72016: ST_TO_ADDR
// if size >= result then
72017: LD_VAR 0 2
72021: PUSH
72022: LD_VAR 0 3
72026: GREATEREQUAL
72027: IFFALSE 72031
// exit ;
72029: GO 72081
// if size then
72031: LD_VAR 0 2
72035: IFFALSE 72081
// for i := array downto size do
72037: LD_ADDR_VAR 0 4
72041: PUSH
72042: DOUBLE
72043: LD_VAR 0 1
72047: INC
72048: ST_TO_ADDR
72049: LD_VAR 0 2
72053: PUSH
72054: FOR_DOWNTO
72055: IFFALSE 72079
// result := Delete ( result , result ) ;
72057: LD_ADDR_VAR 0 3
72061: PUSH
72062: LD_VAR 0 3
72066: PPUSH
72067: LD_VAR 0 3
72071: PPUSH
72072: CALL_OW 3
72076: ST_TO_ADDR
72077: GO 72054
72079: POP
72080: POP
// end ;
72081: LD_VAR 0 3
72085: RET
// export function ComExit ( unit ) ; var tmp ; begin
72086: LD_INT 0
72088: PPUSH
72089: PPUSH
// if not IsInUnit ( unit ) then
72090: LD_VAR 0 1
72094: PPUSH
72095: CALL_OW 310
72099: NOT
72100: IFFALSE 72104
// exit ;
72102: GO 72164
// tmp := IsInUnit ( unit ) ;
72104: LD_ADDR_VAR 0 3
72108: PUSH
72109: LD_VAR 0 1
72113: PPUSH
72114: CALL_OW 310
72118: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72119: LD_VAR 0 3
72123: PPUSH
72124: CALL_OW 247
72128: PUSH
72129: LD_INT 2
72131: EQUAL
72132: IFFALSE 72145
// ComExitVehicle ( unit ) else
72134: LD_VAR 0 1
72138: PPUSH
72139: CALL_OW 121
72143: GO 72154
// ComExitBuilding ( unit ) ;
72145: LD_VAR 0 1
72149: PPUSH
72150: CALL_OW 122
// result := tmp ;
72154: LD_ADDR_VAR 0 2
72158: PUSH
72159: LD_VAR 0 3
72163: ST_TO_ADDR
// end ;
72164: LD_VAR 0 2
72168: RET
// export function ComExitAll ( units ) ; var i ; begin
72169: LD_INT 0
72171: PPUSH
72172: PPUSH
// if not units then
72173: LD_VAR 0 1
72177: NOT
72178: IFFALSE 72182
// exit ;
72180: GO 72208
// for i in units do
72182: LD_ADDR_VAR 0 3
72186: PUSH
72187: LD_VAR 0 1
72191: PUSH
72192: FOR_IN
72193: IFFALSE 72206
// ComExit ( i ) ;
72195: LD_VAR 0 3
72199: PPUSH
72200: CALL 72086 0 1
72204: GO 72192
72206: POP
72207: POP
// end ;
72208: LD_VAR 0 2
72212: RET
// export function ResetHc ; begin
72213: LD_INT 0
72215: PPUSH
// InitHc ;
72216: CALL_OW 19
// hc_importance := 0 ;
72220: LD_ADDR_OWVAR 32
72224: PUSH
72225: LD_INT 0
72227: ST_TO_ADDR
// end ;
72228: LD_VAR 0 1
72232: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72233: LD_INT 0
72235: PPUSH
72236: PPUSH
72237: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72238: LD_ADDR_VAR 0 6
72242: PUSH
72243: LD_VAR 0 1
72247: PUSH
72248: LD_VAR 0 3
72252: PLUS
72253: PUSH
72254: LD_INT 2
72256: DIV
72257: ST_TO_ADDR
// if _x < 0 then
72258: LD_VAR 0 6
72262: PUSH
72263: LD_INT 0
72265: LESS
72266: IFFALSE 72283
// _x := _x * - 1 ;
72268: LD_ADDR_VAR 0 6
72272: PUSH
72273: LD_VAR 0 6
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: MUL
72282: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72283: LD_ADDR_VAR 0 7
72287: PUSH
72288: LD_VAR 0 2
72292: PUSH
72293: LD_VAR 0 4
72297: PLUS
72298: PUSH
72299: LD_INT 2
72301: DIV
72302: ST_TO_ADDR
// if _y < 0 then
72303: LD_VAR 0 7
72307: PUSH
72308: LD_INT 0
72310: LESS
72311: IFFALSE 72328
// _y := _y * - 1 ;
72313: LD_ADDR_VAR 0 7
72317: PUSH
72318: LD_VAR 0 7
72322: PUSH
72323: LD_INT 1
72325: NEG
72326: MUL
72327: ST_TO_ADDR
// result := [ _x , _y ] ;
72328: LD_ADDR_VAR 0 5
72332: PUSH
72333: LD_VAR 0 6
72337: PUSH
72338: LD_VAR 0 7
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 5
72351: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72352: LD_INT 0
72354: PPUSH
72355: PPUSH
72356: PPUSH
72357: PPUSH
// task := GetTaskList ( unit ) ;
72358: LD_ADDR_VAR 0 7
72362: PUSH
72363: LD_VAR 0 1
72367: PPUSH
72368: CALL_OW 437
72372: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72373: LD_VAR 0 7
72377: NOT
72378: IFFALSE 72397
72380: PUSH
72381: LD_VAR 0 1
72385: PPUSH
72386: LD_VAR 0 2
72390: PPUSH
72391: CALL_OW 308
72395: NOT
72396: AND
72397: IFFALSE 72401
// exit ;
72399: GO 72519
// if IsInArea ( unit , area ) then
72401: LD_VAR 0 1
72405: PPUSH
72406: LD_VAR 0 2
72410: PPUSH
72411: CALL_OW 308
72415: IFFALSE 72433
// begin ComMoveToArea ( unit , goAway ) ;
72417: LD_VAR 0 1
72421: PPUSH
72422: LD_VAR 0 3
72426: PPUSH
72427: CALL_OW 113
// exit ;
72431: GO 72519
// end ; if task [ 1 ] [ 1 ] <> M then
72433: LD_VAR 0 7
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PUSH
72446: LD_STRING M
72448: NONEQUAL
72449: IFFALSE 72453
// exit ;
72451: GO 72519
// x := task [ 1 ] [ 2 ] ;
72453: LD_ADDR_VAR 0 5
72457: PUSH
72458: LD_VAR 0 7
72462: PUSH
72463: LD_INT 1
72465: ARRAY
72466: PUSH
72467: LD_INT 2
72469: ARRAY
72470: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72471: LD_ADDR_VAR 0 6
72475: PUSH
72476: LD_VAR 0 7
72480: PUSH
72481: LD_INT 1
72483: ARRAY
72484: PUSH
72485: LD_INT 3
72487: ARRAY
72488: ST_TO_ADDR
// if InArea ( x , y , area ) then
72489: LD_VAR 0 5
72493: PPUSH
72494: LD_VAR 0 6
72498: PPUSH
72499: LD_VAR 0 2
72503: PPUSH
72504: CALL_OW 309
72508: IFFALSE 72519
// ComStop ( unit ) ;
72510: LD_VAR 0 1
72514: PPUSH
72515: CALL_OW 141
// end ;
72519: LD_VAR 0 4
72523: RET
// export function Abs ( value ) ; begin
72524: LD_INT 0
72526: PPUSH
// result := value ;
72527: LD_ADDR_VAR 0 2
72531: PUSH
72532: LD_VAR 0 1
72536: ST_TO_ADDR
// if value < 0 then
72537: LD_VAR 0 1
72541: PUSH
72542: LD_INT 0
72544: LESS
72545: IFFALSE 72562
// result := value * - 1 ;
72547: LD_ADDR_VAR 0 2
72551: PUSH
72552: LD_VAR 0 1
72556: PUSH
72557: LD_INT 1
72559: NEG
72560: MUL
72561: ST_TO_ADDR
// end ;
72562: LD_VAR 0 2
72566: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72567: LD_INT 0
72569: PPUSH
72570: PPUSH
72571: PPUSH
72572: PPUSH
72573: PPUSH
72574: PPUSH
72575: PPUSH
72576: PPUSH
// if not unit or not building then
72577: LD_VAR 0 1
72581: NOT
72582: IFTRUE 72591
72584: PUSH
72585: LD_VAR 0 2
72589: NOT
72590: OR
72591: IFFALSE 72595
// exit ;
72593: GO 72823
// x := GetX ( building ) ;
72595: LD_ADDR_VAR 0 4
72599: PUSH
72600: LD_VAR 0 2
72604: PPUSH
72605: CALL_OW 250
72609: ST_TO_ADDR
// y := GetY ( building ) ;
72610: LD_ADDR_VAR 0 6
72614: PUSH
72615: LD_VAR 0 2
72619: PPUSH
72620: CALL_OW 251
72624: ST_TO_ADDR
// d := GetDir ( building ) ;
72625: LD_ADDR_VAR 0 8
72629: PUSH
72630: LD_VAR 0 2
72634: PPUSH
72635: CALL_OW 254
72639: ST_TO_ADDR
// r := 4 ;
72640: LD_ADDR_VAR 0 9
72644: PUSH
72645: LD_INT 4
72647: ST_TO_ADDR
// for i := 1 to 5 do
72648: LD_ADDR_VAR 0 10
72652: PUSH
72653: DOUBLE
72654: LD_INT 1
72656: DEC
72657: ST_TO_ADDR
72658: LD_INT 5
72660: PUSH
72661: FOR_TO
72662: IFFALSE 72821
// begin _x := ShiftX ( x , d , r + i ) ;
72664: LD_ADDR_VAR 0 5
72668: PUSH
72669: LD_VAR 0 4
72673: PPUSH
72674: LD_VAR 0 8
72678: PPUSH
72679: LD_VAR 0 9
72683: PUSH
72684: LD_VAR 0 10
72688: PLUS
72689: PPUSH
72690: CALL_OW 272
72694: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72695: LD_ADDR_VAR 0 7
72699: PUSH
72700: LD_VAR 0 6
72704: PPUSH
72705: LD_VAR 0 8
72709: PPUSH
72710: LD_VAR 0 9
72714: PUSH
72715: LD_VAR 0 10
72719: PLUS
72720: PPUSH
72721: CALL_OW 273
72725: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72726: LD_VAR 0 5
72730: PPUSH
72731: LD_VAR 0 7
72735: PPUSH
72736: CALL_OW 488
72740: IFFALSE 72775
72742: PUSH
72743: LD_VAR 0 5
72747: PPUSH
72748: LD_VAR 0 7
72752: PPUSH
72753: CALL_OW 428
72757: PPUSH
72758: CALL_OW 247
72762: PUSH
72763: LD_INT 3
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: IN
72773: NOT
72774: AND
72775: IFFALSE 72819
// begin ComMoveXY ( unit , _x , _y ) ;
72777: LD_VAR 0 1
72781: PPUSH
72782: LD_VAR 0 5
72786: PPUSH
72787: LD_VAR 0 7
72791: PPUSH
72792: CALL_OW 111
// result := [ _x , _y ] ;
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: LD_VAR 0 5
72805: PUSH
72806: LD_VAR 0 7
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: ST_TO_ADDR
// exit ;
72815: POP
72816: POP
72817: GO 72823
// end ; end ;
72819: GO 72661
72821: POP
72822: POP
// end ;
72823: LD_VAR 0 3
72827: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
72832: PPUSH
// result := 0 ;
72833: LD_ADDR_VAR 0 3
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72841: LD_VAR 0 1
72845: PUSH
72846: LD_INT 0
72848: LESS
72849: IFTRUE 72861
72851: PUSH
72852: LD_VAR 0 1
72856: PUSH
72857: LD_INT 8
72859: GREATER
72860: OR
72861: IFTRUE 72873
72863: PUSH
72864: LD_VAR 0 2
72868: PUSH
72869: LD_INT 0
72871: LESS
72872: OR
72873: IFTRUE 72885
72875: PUSH
72876: LD_VAR 0 2
72880: PUSH
72881: LD_INT 8
72883: GREATER
72884: OR
72885: IFFALSE 72889
// exit ;
72887: GO 72964
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72889: LD_ADDR_VAR 0 4
72893: PUSH
72894: LD_INT 22
72896: PUSH
72897: LD_VAR 0 2
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PPUSH
72906: CALL_OW 69
72910: PUSH
72911: FOR_IN
72912: IFFALSE 72962
// begin un := UnitShoot ( i ) ;
72914: LD_ADDR_VAR 0 5
72918: PUSH
72919: LD_VAR 0 4
72923: PPUSH
72924: CALL_OW 504
72928: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72929: LD_VAR 0 5
72933: PPUSH
72934: CALL_OW 255
72938: PUSH
72939: LD_VAR 0 1
72943: EQUAL
72944: IFFALSE 72960
// begin result := un ;
72946: LD_ADDR_VAR 0 3
72950: PUSH
72951: LD_VAR 0 5
72955: ST_TO_ADDR
// exit ;
72956: POP
72957: POP
72958: GO 72964
// end ; end ;
72960: GO 72911
72962: POP
72963: POP
// end ;
72964: LD_VAR 0 3
72968: RET
// export function GetCargoBay ( units ) ; begin
72969: LD_INT 0
72971: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72972: LD_ADDR_VAR 0 2
72976: PUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: LD_INT 2
72984: PUSH
72985: LD_INT 34
72987: PUSH
72988: LD_INT 12
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 34
72997: PUSH
72998: LD_INT 51
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 34
73007: PUSH
73008: LD_INT 32
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 34
73017: PUSH
73018: LD_INT 89
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: PPUSH
73032: CALL_OW 72
73036: ST_TO_ADDR
// end ;
73037: LD_VAR 0 2
73041: RET
// export function Negate ( value ) ; begin
73042: LD_INT 0
73044: PPUSH
// result := not value ;
73045: LD_ADDR_VAR 0 2
73049: PUSH
73050: LD_VAR 0 1
73054: NOT
73055: ST_TO_ADDR
// end ;
73056: LD_VAR 0 2
73060: RET
// export function Inc ( value ) ; begin
73061: LD_INT 0
73063: PPUSH
// result := value + 1 ;
73064: LD_ADDR_VAR 0 2
73068: PUSH
73069: LD_VAR 0 1
73073: PUSH
73074: LD_INT 1
73076: PLUS
73077: ST_TO_ADDR
// end ;
73078: LD_VAR 0 2
73082: RET
// export function Dec ( value ) ; begin
73083: LD_INT 0
73085: PPUSH
// result := value - 1 ;
73086: LD_ADDR_VAR 0 2
73090: PUSH
73091: LD_VAR 0 1
73095: PUSH
73096: LD_INT 1
73098: MINUS
73099: ST_TO_ADDR
// end ;
73100: LD_VAR 0 2
73104: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73105: LD_INT 0
73107: PPUSH
73108: PPUSH
73109: PPUSH
73110: PPUSH
73111: PPUSH
73112: PPUSH
73113: PPUSH
73114: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73115: LD_VAR 0 1
73119: PPUSH
73120: LD_VAR 0 2
73124: PPUSH
73125: CALL_OW 488
73129: NOT
73130: IFTRUE 73149
73132: PUSH
73133: LD_VAR 0 3
73137: PPUSH
73138: LD_VAR 0 4
73142: PPUSH
73143: CALL_OW 488
73147: NOT
73148: OR
73149: IFFALSE 73162
// begin result := - 1 ;
73151: LD_ADDR_VAR 0 5
73155: PUSH
73156: LD_INT 1
73158: NEG
73159: ST_TO_ADDR
// exit ;
73160: GO 73397
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73162: LD_ADDR_VAR 0 12
73166: PUSH
73167: LD_VAR 0 1
73171: PPUSH
73172: LD_VAR 0 2
73176: PPUSH
73177: LD_VAR 0 3
73181: PPUSH
73182: LD_VAR 0 4
73186: PPUSH
73187: CALL 72233 0 4
73191: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73192: LD_ADDR_VAR 0 11
73196: PUSH
73197: LD_VAR 0 1
73201: PPUSH
73202: LD_VAR 0 2
73206: PPUSH
73207: LD_VAR 0 12
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: LD_VAR 0 12
73220: PUSH
73221: LD_INT 2
73223: ARRAY
73224: PPUSH
73225: CALL_OW 298
73229: ST_TO_ADDR
// distance := 9999 ;
73230: LD_ADDR_VAR 0 10
73234: PUSH
73235: LD_INT 9999
73237: ST_TO_ADDR
// for i := 0 to 5 do
73238: LD_ADDR_VAR 0 6
73242: PUSH
73243: DOUBLE
73244: LD_INT 0
73246: DEC
73247: ST_TO_ADDR
73248: LD_INT 5
73250: PUSH
73251: FOR_TO
73252: IFFALSE 73395
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73254: LD_ADDR_VAR 0 7
73258: PUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: LD_VAR 0 6
73268: PPUSH
73269: LD_VAR 0 11
73273: PPUSH
73274: CALL_OW 272
73278: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73279: LD_ADDR_VAR 0 8
73283: PUSH
73284: LD_VAR 0 2
73288: PPUSH
73289: LD_VAR 0 6
73293: PPUSH
73294: LD_VAR 0 11
73298: PPUSH
73299: CALL_OW 273
73303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73304: LD_VAR 0 7
73308: PPUSH
73309: LD_VAR 0 8
73313: PPUSH
73314: CALL_OW 488
73318: NOT
73319: IFFALSE 73323
// continue ;
73321: GO 73251
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73323: LD_ADDR_VAR 0 9
73327: PUSH
73328: LD_VAR 0 12
73332: PUSH
73333: LD_INT 1
73335: ARRAY
73336: PPUSH
73337: LD_VAR 0 12
73341: PUSH
73342: LD_INT 2
73344: ARRAY
73345: PPUSH
73346: LD_VAR 0 7
73350: PPUSH
73351: LD_VAR 0 8
73355: PPUSH
73356: CALL_OW 298
73360: ST_TO_ADDR
// if tmp < distance then
73361: LD_VAR 0 9
73365: PUSH
73366: LD_VAR 0 10
73370: LESS
73371: IFFALSE 73393
// begin result := i ;
73373: LD_ADDR_VAR 0 5
73377: PUSH
73378: LD_VAR 0 6
73382: ST_TO_ADDR
// distance := tmp ;
73383: LD_ADDR_VAR 0 10
73387: PUSH
73388: LD_VAR 0 9
73392: ST_TO_ADDR
// end ; end ;
73393: GO 73251
73395: POP
73396: POP
// end ;
73397: LD_VAR 0 5
73401: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73402: LD_INT 0
73404: PPUSH
73405: PPUSH
// if not driver or not IsInUnit ( driver ) then
73406: LD_VAR 0 1
73410: NOT
73411: IFTRUE 73425
73413: PUSH
73414: LD_VAR 0 1
73418: PPUSH
73419: CALL_OW 310
73423: NOT
73424: OR
73425: IFFALSE 73429
// exit ;
73427: GO 73519
// vehicle := IsInUnit ( driver ) ;
73429: LD_ADDR_VAR 0 3
73433: PUSH
73434: LD_VAR 0 1
73438: PPUSH
73439: CALL_OW 310
73443: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73444: LD_VAR 0 1
73448: PPUSH
73449: LD_STRING \
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: LD_INT 0
73460: PUSH
73461: LD_INT 0
73463: PUSH
73464: LD_INT 0
73466: PUSH
73467: LD_INT 0
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: PUSH
73479: LD_STRING E
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: LD_VAR 0 3
73492: PUSH
73493: LD_INT 0
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PPUSH
73515: CALL_OW 446
// end ;
73519: LD_VAR 0 2
73523: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73524: LD_INT 0
73526: PPUSH
73527: PPUSH
// if not driver or not IsInUnit ( driver ) then
73528: LD_VAR 0 1
73532: NOT
73533: IFTRUE 73547
73535: PUSH
73536: LD_VAR 0 1
73540: PPUSH
73541: CALL_OW 310
73545: NOT
73546: OR
73547: IFFALSE 73551
// exit ;
73549: GO 73641
// vehicle := IsInUnit ( driver ) ;
73551: LD_ADDR_VAR 0 3
73555: PUSH
73556: LD_VAR 0 1
73560: PPUSH
73561: CALL_OW 310
73565: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73566: LD_VAR 0 1
73570: PPUSH
73571: LD_STRING \
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: LD_INT 0
73582: PUSH
73583: LD_INT 0
73585: PUSH
73586: LD_INT 0
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: PUSH
73601: LD_STRING E
73603: PUSH
73604: LD_INT 0
73606: PUSH
73607: LD_INT 0
73609: PUSH
73610: LD_VAR 0 3
73614: PUSH
73615: LD_INT 0
73617: PUSH
73618: LD_INT 0
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PPUSH
73637: CALL_OW 447
// end ;
73641: LD_VAR 0 2
73645: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73646: LD_INT 0
73648: PPUSH
73649: PPUSH
73650: PPUSH
// tmp := [ ] ;
73651: LD_ADDR_VAR 0 5
73655: PUSH
73656: EMPTY
73657: ST_TO_ADDR
// for i in units do
73658: LD_ADDR_VAR 0 4
73662: PUSH
73663: LD_VAR 0 1
73667: PUSH
73668: FOR_IN
73669: IFFALSE 73707
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73671: LD_ADDR_VAR 0 5
73675: PUSH
73676: LD_VAR 0 5
73680: PPUSH
73681: LD_VAR 0 5
73685: PUSH
73686: LD_INT 1
73688: PLUS
73689: PPUSH
73690: LD_VAR 0 4
73694: PPUSH
73695: CALL_OW 256
73699: PPUSH
73700: CALL_OW 2
73704: ST_TO_ADDR
73705: GO 73668
73707: POP
73708: POP
// if not tmp then
73709: LD_VAR 0 5
73713: NOT
73714: IFFALSE 73718
// exit ;
73716: GO 73766
// if asc then
73718: LD_VAR 0 2
73722: IFFALSE 73746
// result := SortListByListAsc ( units , tmp ) else
73724: LD_ADDR_VAR 0 3
73728: PUSH
73729: LD_VAR 0 1
73733: PPUSH
73734: LD_VAR 0 5
73738: PPUSH
73739: CALL_OW 76
73743: ST_TO_ADDR
73744: GO 73766
// result := SortListByListDesc ( units , tmp ) ;
73746: LD_ADDR_VAR 0 3
73750: PUSH
73751: LD_VAR 0 1
73755: PPUSH
73756: LD_VAR 0 5
73760: PPUSH
73761: CALL_OW 77
73765: ST_TO_ADDR
// end ;
73766: LD_VAR 0 3
73770: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73771: LD_INT 0
73773: PPUSH
73774: PPUSH
// task := GetTaskList ( mech ) ;
73775: LD_ADDR_VAR 0 4
73779: PUSH
73780: LD_VAR 0 1
73784: PPUSH
73785: CALL_OW 437
73789: ST_TO_ADDR
// if not task then
73790: LD_VAR 0 4
73794: NOT
73795: IFFALSE 73799
// exit ;
73797: GO 73843
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73799: LD_ADDR_VAR 0 3
73803: PUSH
73804: LD_VAR 0 4
73808: PUSH
73809: LD_INT 1
73811: ARRAY
73812: PUSH
73813: LD_INT 1
73815: ARRAY
73816: PUSH
73817: LD_STRING r
73819: EQUAL
73820: IFFALSE 73842
73822: PUSH
73823: LD_VAR 0 4
73827: PUSH
73828: LD_INT 1
73830: ARRAY
73831: PUSH
73832: LD_INT 4
73834: ARRAY
73835: PUSH
73836: LD_VAR 0 2
73840: EQUAL
73841: AND
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 3
73847: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73848: LD_INT 0
73850: PPUSH
// SetDir ( unit , d ) ;
73851: LD_VAR 0 1
73855: PPUSH
73856: LD_VAR 0 4
73860: PPUSH
73861: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73865: LD_ADDR_VAR 0 6
73869: PUSH
73870: LD_VAR 0 1
73874: PPUSH
73875: LD_VAR 0 2
73879: PPUSH
73880: LD_VAR 0 3
73884: PPUSH
73885: LD_VAR 0 5
73889: PPUSH
73890: CALL_OW 48
73894: ST_TO_ADDR
// end ;
73895: LD_VAR 0 6
73899: RET
// export function ToNaturalNumber ( number ) ; begin
73900: LD_INT 0
73902: PPUSH
// result := number div 1 ;
73903: LD_ADDR_VAR 0 2
73907: PUSH
73908: LD_VAR 0 1
73912: PUSH
73913: LD_INT 1
73915: DIV
73916: ST_TO_ADDR
// if number < 0 then
73917: LD_VAR 0 1
73921: PUSH
73922: LD_INT 0
73924: LESS
73925: IFFALSE 73935
// result := 0 ;
73927: LD_ADDR_VAR 0 2
73931: PUSH
73932: LD_INT 0
73934: ST_TO_ADDR
// end ;
73935: LD_VAR 0 2
73939: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73940: LD_INT 0
73942: PPUSH
73943: PPUSH
73944: PPUSH
// if not buildings then
73945: LD_VAR 0 1
73949: NOT
73950: IFFALSE 73954
// exit ;
73952: GO 74069
// tmp := [ ] ;
73954: LD_ADDR_VAR 0 5
73958: PUSH
73959: EMPTY
73960: ST_TO_ADDR
// for b in buildings do
73961: LD_ADDR_VAR 0 4
73965: PUSH
73966: LD_VAR 0 1
73970: PUSH
73971: FOR_IN
73972: IFFALSE 74010
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73974: LD_ADDR_VAR 0 5
73978: PUSH
73979: LD_VAR 0 5
73983: PPUSH
73984: LD_VAR 0 5
73988: PUSH
73989: LD_INT 1
73991: PLUS
73992: PPUSH
73993: LD_VAR 0 4
73997: PPUSH
73998: CALL_OW 266
74002: PPUSH
74003: CALL_OW 1
74007: ST_TO_ADDR
74008: GO 73971
74010: POP
74011: POP
// if not tmp then
74012: LD_VAR 0 5
74016: NOT
74017: IFFALSE 74021
// exit ;
74019: GO 74069
// if asc then
74021: LD_VAR 0 2
74025: IFFALSE 74049
// result := SortListByListAsc ( buildings , tmp ) else
74027: LD_ADDR_VAR 0 3
74031: PUSH
74032: LD_VAR 0 1
74036: PPUSH
74037: LD_VAR 0 5
74041: PPUSH
74042: CALL_OW 76
74046: ST_TO_ADDR
74047: GO 74069
// result := SortListByListDesc ( buildings , tmp ) ;
74049: LD_ADDR_VAR 0 3
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: LD_VAR 0 5
74063: PPUSH
74064: CALL_OW 77
74068: ST_TO_ADDR
// end ;
74069: LD_VAR 0 3
74073: RET
// export function SortByClass ( units , class ) ; var un ; begin
74074: LD_INT 0
74076: PPUSH
74077: PPUSH
// if not units or not class then
74078: LD_VAR 0 1
74082: NOT
74083: IFTRUE 74092
74085: PUSH
74086: LD_VAR 0 2
74090: NOT
74091: OR
74092: IFFALSE 74096
// exit ;
74094: GO 74191
// result := [ ] ;
74096: LD_ADDR_VAR 0 3
74100: PUSH
74101: EMPTY
74102: ST_TO_ADDR
// for un in units do
74103: LD_ADDR_VAR 0 4
74107: PUSH
74108: LD_VAR 0 1
74112: PUSH
74113: FOR_IN
74114: IFFALSE 74189
// if GetClass ( un ) = class then
74116: LD_VAR 0 4
74120: PPUSH
74121: CALL_OW 257
74125: PUSH
74126: LD_VAR 0 2
74130: EQUAL
74131: IFFALSE 74158
// result := Insert ( result , 1 , un ) else
74133: LD_ADDR_VAR 0 3
74137: PUSH
74138: LD_VAR 0 3
74142: PPUSH
74143: LD_INT 1
74145: PPUSH
74146: LD_VAR 0 4
74150: PPUSH
74151: CALL_OW 2
74155: ST_TO_ADDR
74156: GO 74187
// result := Replace ( result , result + 1 , un ) ;
74158: LD_ADDR_VAR 0 3
74162: PUSH
74163: LD_VAR 0 3
74167: PPUSH
74168: LD_VAR 0 3
74172: PUSH
74173: LD_INT 1
74175: PLUS
74176: PPUSH
74177: LD_VAR 0 4
74181: PPUSH
74182: CALL_OW 1
74186: ST_TO_ADDR
74187: GO 74113
74189: POP
74190: POP
// end ;
74191: LD_VAR 0 3
74195: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74196: LD_INT 0
74198: PPUSH
74199: PPUSH
74200: PPUSH
74201: PPUSH
74202: PPUSH
74203: PPUSH
74204: PPUSH
// result := [ ] ;
74205: LD_ADDR_VAR 0 4
74209: PUSH
74210: EMPTY
74211: ST_TO_ADDR
// if x - r < 0 then
74212: LD_VAR 0 1
74216: PUSH
74217: LD_VAR 0 3
74221: MINUS
74222: PUSH
74223: LD_INT 0
74225: LESS
74226: IFFALSE 74238
// min_x := 0 else
74228: LD_ADDR_VAR 0 8
74232: PUSH
74233: LD_INT 0
74235: ST_TO_ADDR
74236: GO 74254
// min_x := x - r ;
74238: LD_ADDR_VAR 0 8
74242: PUSH
74243: LD_VAR 0 1
74247: PUSH
74248: LD_VAR 0 3
74252: MINUS
74253: ST_TO_ADDR
// if y - r < 0 then
74254: LD_VAR 0 2
74258: PUSH
74259: LD_VAR 0 3
74263: MINUS
74264: PUSH
74265: LD_INT 0
74267: LESS
74268: IFFALSE 74280
// min_y := 0 else
74270: LD_ADDR_VAR 0 7
74274: PUSH
74275: LD_INT 0
74277: ST_TO_ADDR
74278: GO 74296
// min_y := y - r ;
74280: LD_ADDR_VAR 0 7
74284: PUSH
74285: LD_VAR 0 2
74289: PUSH
74290: LD_VAR 0 3
74294: MINUS
74295: ST_TO_ADDR
// max_x := x + r ;
74296: LD_ADDR_VAR 0 9
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_VAR 0 3
74310: PLUS
74311: ST_TO_ADDR
// max_y := y + r ;
74312: LD_ADDR_VAR 0 10
74316: PUSH
74317: LD_VAR 0 2
74321: PUSH
74322: LD_VAR 0 3
74326: PLUS
74327: ST_TO_ADDR
// for _x = min_x to max_x do
74328: LD_ADDR_VAR 0 5
74332: PUSH
74333: DOUBLE
74334: LD_VAR 0 8
74338: DEC
74339: ST_TO_ADDR
74340: LD_VAR 0 9
74344: PUSH
74345: FOR_TO
74346: IFFALSE 74447
// for _y = min_y to max_y do
74348: LD_ADDR_VAR 0 6
74352: PUSH
74353: DOUBLE
74354: LD_VAR 0 7
74358: DEC
74359: ST_TO_ADDR
74360: LD_VAR 0 10
74364: PUSH
74365: FOR_TO
74366: IFFALSE 74443
// begin if not ValidHex ( _x , _y ) then
74368: LD_VAR 0 5
74372: PPUSH
74373: LD_VAR 0 6
74377: PPUSH
74378: CALL_OW 488
74382: NOT
74383: IFFALSE 74387
// continue ;
74385: GO 74365
// if GetResourceTypeXY ( _x , _y ) then
74387: LD_VAR 0 5
74391: PPUSH
74392: LD_VAR 0 6
74396: PPUSH
74397: CALL_OW 283
74401: IFFALSE 74441
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74403: LD_ADDR_VAR 0 4
74407: PUSH
74408: LD_VAR 0 4
74412: PPUSH
74413: LD_VAR 0 4
74417: PUSH
74418: LD_INT 1
74420: PLUS
74421: PPUSH
74422: LD_VAR 0 5
74426: PUSH
74427: LD_VAR 0 6
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PPUSH
74436: CALL_OW 1
74440: ST_TO_ADDR
// end ;
74441: GO 74365
74443: POP
74444: POP
74445: GO 74345
74447: POP
74448: POP
// end ;
74449: LD_VAR 0 4
74453: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74454: LD_INT 0
74456: PPUSH
74457: PPUSH
74458: PPUSH
74459: PPUSH
74460: PPUSH
74461: PPUSH
74462: PPUSH
74463: PPUSH
// if not units then
74464: LD_VAR 0 1
74468: NOT
74469: IFFALSE 74473
// exit ;
74471: GO 75005
// result := UnitFilter ( units , [ f_ok ] ) ;
74473: LD_ADDR_VAR 0 3
74477: PUSH
74478: LD_VAR 0 1
74482: PPUSH
74483: LD_INT 50
74485: PUSH
74486: EMPTY
74487: LIST
74488: PPUSH
74489: CALL_OW 72
74493: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74494: LD_ADDR_VAR 0 8
74498: PUSH
74499: LD_VAR 0 1
74503: PUSH
74504: LD_INT 1
74506: ARRAY
74507: PPUSH
74508: CALL_OW 255
74512: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74513: LD_ADDR_VAR 0 10
74517: PUSH
74518: LD_INT 29
74520: PUSH
74521: LD_INT 91
74523: PUSH
74524: LD_INT 49
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: LIST
74531: ST_TO_ADDR
// if not result then
74532: LD_VAR 0 3
74536: NOT
74537: IFFALSE 74541
// exit ;
74539: GO 75005
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74541: LD_ADDR_VAR 0 5
74545: PUSH
74546: LD_INT 81
74548: PUSH
74549: LD_VAR 0 8
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PPUSH
74558: CALL_OW 69
74562: ST_TO_ADDR
// for i in result do
74563: LD_ADDR_VAR 0 4
74567: PUSH
74568: LD_VAR 0 3
74572: PUSH
74573: FOR_IN
74574: IFFALSE 75003
// begin tag := GetTag ( i ) + 1 ;
74576: LD_ADDR_VAR 0 9
74580: PUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: CALL_OW 110
74590: PUSH
74591: LD_INT 1
74593: PLUS
74594: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74595: LD_ADDR_VAR 0 7
74599: PUSH
74600: LD_VAR 0 4
74604: PPUSH
74605: CALL_OW 250
74609: PPUSH
74610: LD_VAR 0 4
74614: PPUSH
74615: CALL_OW 251
74619: PPUSH
74620: LD_INT 4
74622: PPUSH
74623: CALL 74196 0 3
74627: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74628: LD_VAR 0 4
74632: PPUSH
74633: CALL_OW 247
74637: PUSH
74638: LD_INT 2
74640: EQUAL
74641: IFFALSE 74653
74643: PUSH
74644: LD_VAR 0 7
74648: PUSH
74649: LD_INT 2
74651: GREATER
74652: AND
74653: IFFALSE 74673
74655: PUSH
74656: LD_VAR 0 4
74660: PPUSH
74661: CALL_OW 264
74665: PUSH
74666: LD_VAR 0 10
74670: IN
74671: NOT
74672: AND
74673: IFFALSE 74712
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74675: LD_VAR 0 4
74679: PPUSH
74680: LD_VAR 0 7
74684: PUSH
74685: LD_INT 1
74687: ARRAY
74688: PUSH
74689: LD_INT 1
74691: ARRAY
74692: PPUSH
74693: LD_VAR 0 7
74697: PUSH
74698: LD_INT 1
74700: ARRAY
74701: PUSH
74702: LD_INT 2
74704: ARRAY
74705: PPUSH
74706: CALL_OW 116
74710: GO 75001
// if path > tag then
74712: LD_VAR 0 2
74716: PUSH
74717: LD_VAR 0 9
74721: GREATER
74722: IFFALSE 74930
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74724: LD_ADDR_VAR 0 6
74728: PUSH
74729: LD_VAR 0 5
74733: PPUSH
74734: LD_INT 91
74736: PUSH
74737: LD_VAR 0 4
74741: PUSH
74742: LD_INT 8
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: LIST
74749: PPUSH
74750: CALL_OW 72
74754: ST_TO_ADDR
// if nearEnemy then
74755: LD_VAR 0 6
74759: IFFALSE 74828
// begin if GetWeapon ( i ) = ru_time_lapser then
74761: LD_VAR 0 4
74765: PPUSH
74766: CALL_OW 264
74770: PUSH
74771: LD_INT 49
74773: EQUAL
74774: IFFALSE 74802
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74776: LD_VAR 0 4
74780: PPUSH
74781: LD_VAR 0 6
74785: PPUSH
74786: LD_VAR 0 4
74790: PPUSH
74791: CALL_OW 74
74795: PPUSH
74796: CALL_OW 112
74800: GO 74826
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74802: LD_VAR 0 4
74806: PPUSH
74807: LD_VAR 0 6
74811: PPUSH
74812: LD_VAR 0 4
74816: PPUSH
74817: CALL_OW 74
74821: PPUSH
74822: CALL 76086 0 2
// end else
74826: GO 74928
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74828: LD_VAR 0 4
74832: PPUSH
74833: LD_VAR 0 2
74837: PUSH
74838: LD_VAR 0 9
74842: ARRAY
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PPUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_VAR 0 9
74857: ARRAY
74858: PUSH
74859: LD_INT 2
74861: ARRAY
74862: PPUSH
74863: CALL_OW 297
74867: PUSH
74868: LD_INT 6
74870: GREATER
74871: IFFALSE 74914
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74873: LD_VAR 0 4
74877: PPUSH
74878: LD_VAR 0 2
74882: PUSH
74883: LD_VAR 0 9
74887: ARRAY
74888: PUSH
74889: LD_INT 1
74891: ARRAY
74892: PPUSH
74893: LD_VAR 0 2
74897: PUSH
74898: LD_VAR 0 9
74902: ARRAY
74903: PUSH
74904: LD_INT 2
74906: ARRAY
74907: PPUSH
74908: CALL_OW 114
74912: GO 74928
// SetTag ( i , tag ) ;
74914: LD_VAR 0 4
74918: PPUSH
74919: LD_VAR 0 9
74923: PPUSH
74924: CALL_OW 109
// end else
74928: GO 75001
// if enemy then
74930: LD_VAR 0 5
74934: IFFALSE 75001
// begin if GetWeapon ( i ) = ru_time_lapser then
74936: LD_VAR 0 4
74940: PPUSH
74941: CALL_OW 264
74945: PUSH
74946: LD_INT 49
74948: EQUAL
74949: IFFALSE 74977
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74951: LD_VAR 0 4
74955: PPUSH
74956: LD_VAR 0 5
74960: PPUSH
74961: LD_VAR 0 4
74965: PPUSH
74966: CALL_OW 74
74970: PPUSH
74971: CALL_OW 112
74975: GO 75001
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74977: LD_VAR 0 4
74981: PPUSH
74982: LD_VAR 0 5
74986: PPUSH
74987: LD_VAR 0 4
74991: PPUSH
74992: CALL_OW 74
74996: PPUSH
74997: CALL 76086 0 2
// end ; end ;
75001: GO 74573
75003: POP
75004: POP
// end ;
75005: LD_VAR 0 3
75009: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75010: LD_INT 0
75012: PPUSH
75013: PPUSH
75014: PPUSH
// if not unit or IsInUnit ( unit ) then
75015: LD_VAR 0 1
75019: NOT
75020: IFTRUE 75033
75022: PUSH
75023: LD_VAR 0 1
75027: PPUSH
75028: CALL_OW 310
75032: OR
75033: IFFALSE 75037
// exit ;
75035: GO 75128
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75037: LD_ADDR_VAR 0 4
75041: PUSH
75042: LD_VAR 0 1
75046: PPUSH
75047: CALL_OW 250
75051: PPUSH
75052: LD_VAR 0 2
75056: PPUSH
75057: LD_INT 1
75059: PPUSH
75060: CALL_OW 272
75064: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75065: LD_ADDR_VAR 0 5
75069: PUSH
75070: LD_VAR 0 1
75074: PPUSH
75075: CALL_OW 251
75079: PPUSH
75080: LD_VAR 0 2
75084: PPUSH
75085: LD_INT 1
75087: PPUSH
75088: CALL_OW 273
75092: ST_TO_ADDR
// if ValidHex ( x , y ) then
75093: LD_VAR 0 4
75097: PPUSH
75098: LD_VAR 0 5
75102: PPUSH
75103: CALL_OW 488
75107: IFFALSE 75128
// ComTurnXY ( unit , x , y ) ;
75109: LD_VAR 0 1
75113: PPUSH
75114: LD_VAR 0 4
75118: PPUSH
75119: LD_VAR 0 5
75123: PPUSH
75124: CALL_OW 118
// end ;
75128: LD_VAR 0 3
75132: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75133: LD_INT 0
75135: PPUSH
75136: PPUSH
// result := false ;
75137: LD_ADDR_VAR 0 3
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// if not units then
75145: LD_VAR 0 2
75149: NOT
75150: IFFALSE 75154
// exit ;
75152: GO 75199
// for i in units do
75154: LD_ADDR_VAR 0 4
75158: PUSH
75159: LD_VAR 0 2
75163: PUSH
75164: FOR_IN
75165: IFFALSE 75197
// if See ( side , i ) then
75167: LD_VAR 0 1
75171: PPUSH
75172: LD_VAR 0 4
75176: PPUSH
75177: CALL_OW 292
75181: IFFALSE 75195
// begin result := true ;
75183: LD_ADDR_VAR 0 3
75187: PUSH
75188: LD_INT 1
75190: ST_TO_ADDR
// exit ;
75191: POP
75192: POP
75193: GO 75199
// end ;
75195: GO 75164
75197: POP
75198: POP
// end ;
75199: LD_VAR 0 3
75203: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75204: LD_INT 0
75206: PPUSH
75207: PPUSH
75208: PPUSH
75209: PPUSH
// if not unit or not points then
75210: LD_VAR 0 1
75214: NOT
75215: IFTRUE 75224
75217: PUSH
75218: LD_VAR 0 2
75222: NOT
75223: OR
75224: IFFALSE 75228
// exit ;
75226: GO 75318
// dist := 99999 ;
75228: LD_ADDR_VAR 0 5
75232: PUSH
75233: LD_INT 99999
75235: ST_TO_ADDR
// for i in points do
75236: LD_ADDR_VAR 0 4
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: FOR_IN
75247: IFFALSE 75316
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75249: LD_ADDR_VAR 0 6
75253: PUSH
75254: LD_VAR 0 1
75258: PPUSH
75259: LD_VAR 0 4
75263: PUSH
75264: LD_INT 1
75266: ARRAY
75267: PPUSH
75268: LD_VAR 0 4
75272: PUSH
75273: LD_INT 2
75275: ARRAY
75276: PPUSH
75277: CALL_OW 297
75281: ST_TO_ADDR
// if tmpDist < dist then
75282: LD_VAR 0 6
75286: PUSH
75287: LD_VAR 0 5
75291: LESS
75292: IFFALSE 75314
// begin result := i ;
75294: LD_ADDR_VAR 0 3
75298: PUSH
75299: LD_VAR 0 4
75303: ST_TO_ADDR
// dist := tmpDist ;
75304: LD_ADDR_VAR 0 5
75308: PUSH
75309: LD_VAR 0 6
75313: ST_TO_ADDR
// end ; end ;
75314: GO 75246
75316: POP
75317: POP
// end ;
75318: LD_VAR 0 3
75322: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75323: LD_INT 0
75325: PPUSH
// uc_side := side ;
75326: LD_ADDR_OWVAR 20
75330: PUSH
75331: LD_VAR 0 1
75335: ST_TO_ADDR
// uc_nation := 3 ;
75336: LD_ADDR_OWVAR 21
75340: PUSH
75341: LD_INT 3
75343: ST_TO_ADDR
// vc_chassis := 25 ;
75344: LD_ADDR_OWVAR 37
75348: PUSH
75349: LD_INT 25
75351: ST_TO_ADDR
// vc_engine := engine_siberite ;
75352: LD_ADDR_OWVAR 39
75356: PUSH
75357: LD_INT 3
75359: ST_TO_ADDR
// vc_control := control_computer ;
75360: LD_ADDR_OWVAR 38
75364: PUSH
75365: LD_INT 3
75367: ST_TO_ADDR
// vc_weapon := 59 ;
75368: LD_ADDR_OWVAR 40
75372: PUSH
75373: LD_INT 59
75375: ST_TO_ADDR
// result := CreateVehicle ;
75376: LD_ADDR_VAR 0 5
75380: PUSH
75381: CALL_OW 45
75385: ST_TO_ADDR
// SetDir ( result , d ) ;
75386: LD_VAR 0 5
75390: PPUSH
75391: LD_VAR 0 4
75395: PPUSH
75396: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75400: LD_VAR 0 5
75404: PPUSH
75405: LD_VAR 0 2
75409: PPUSH
75410: LD_VAR 0 3
75414: PPUSH
75415: LD_INT 0
75417: PPUSH
75418: CALL_OW 48
// end ;
75422: LD_VAR 0 5
75426: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75427: LD_INT 0
75429: PPUSH
75430: PPUSH
75431: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75432: LD_ADDR_VAR 0 2
75436: PUSH
75437: LD_INT 0
75439: PUSH
75440: LD_INT 0
75442: PUSH
75443: LD_INT 0
75445: PUSH
75446: LD_INT 0
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75455: LD_VAR 0 1
75459: NOT
75460: IFTRUE 75493
75462: PUSH
75463: LD_VAR 0 1
75467: PPUSH
75468: CALL_OW 264
75472: PUSH
75473: LD_INT 12
75475: PUSH
75476: LD_INT 51
75478: PUSH
75479: LD_INT 32
75481: PUSH
75482: LD_INT 89
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: IN
75491: NOT
75492: OR
75493: IFFALSE 75497
// exit ;
75495: GO 75595
// for i := 1 to 3 do
75497: LD_ADDR_VAR 0 3
75501: PUSH
75502: DOUBLE
75503: LD_INT 1
75505: DEC
75506: ST_TO_ADDR
75507: LD_INT 3
75509: PUSH
75510: FOR_TO
75511: IFFALSE 75593
// begin tmp := GetCargo ( cargo , i ) ;
75513: LD_ADDR_VAR 0 4
75517: PUSH
75518: LD_VAR 0 1
75522: PPUSH
75523: LD_VAR 0 3
75527: PPUSH
75528: CALL_OW 289
75532: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75533: LD_ADDR_VAR 0 2
75537: PUSH
75538: LD_VAR 0 2
75542: PPUSH
75543: LD_VAR 0 3
75547: PPUSH
75548: LD_VAR 0 4
75552: PPUSH
75553: CALL_OW 1
75557: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75558: LD_ADDR_VAR 0 2
75562: PUSH
75563: LD_VAR 0 2
75567: PPUSH
75568: LD_INT 4
75570: PPUSH
75571: LD_VAR 0 2
75575: PUSH
75576: LD_INT 4
75578: ARRAY
75579: PUSH
75580: LD_VAR 0 4
75584: PLUS
75585: PPUSH
75586: CALL_OW 1
75590: ST_TO_ADDR
// end ;
75591: GO 75510
75593: POP
75594: POP
// end ;
75595: LD_VAR 0 2
75599: RET
// export function Length ( array ) ; begin
75600: LD_INT 0
75602: PPUSH
// result := array + 0 ;
75603: LD_ADDR_VAR 0 2
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: LD_INT 0
75615: PLUS
75616: ST_TO_ADDR
// end ;
75617: LD_VAR 0 2
75621: RET
// export function PrepareArray ( array ) ; begin
75622: LD_INT 0
75624: PPUSH
// result := array diff 0 ;
75625: LD_ADDR_VAR 0 2
75629: PUSH
75630: LD_VAR 0 1
75634: PUSH
75635: LD_INT 0
75637: DIFF
75638: ST_TO_ADDR
// if not result [ 1 ] then
75639: LD_VAR 0 2
75643: PUSH
75644: LD_INT 1
75646: ARRAY
75647: NOT
75648: IFFALSE 75668
// result := Delete ( result , 1 ) ;
75650: LD_ADDR_VAR 0 2
75654: PUSH
75655: LD_VAR 0 2
75659: PPUSH
75660: LD_INT 1
75662: PPUSH
75663: CALL_OW 3
75667: ST_TO_ADDR
// end ;
75668: LD_VAR 0 2
75672: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75673: LD_INT 0
75675: PPUSH
75676: PPUSH
75677: PPUSH
75678: PPUSH
// sibRocketRange := 25 ;
75679: LD_ADDR_VAR 0 6
75683: PUSH
75684: LD_INT 25
75686: ST_TO_ADDR
// result := false ;
75687: LD_ADDR_VAR 0 4
75691: PUSH
75692: LD_INT 0
75694: ST_TO_ADDR
// for i := 0 to 5 do
75695: LD_ADDR_VAR 0 5
75699: PUSH
75700: DOUBLE
75701: LD_INT 0
75703: DEC
75704: ST_TO_ADDR
75705: LD_INT 5
75707: PUSH
75708: FOR_TO
75709: IFFALSE 75776
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75711: LD_VAR 0 1
75715: PPUSH
75716: LD_VAR 0 5
75720: PPUSH
75721: LD_VAR 0 6
75725: PPUSH
75726: CALL_OW 272
75730: PPUSH
75731: LD_VAR 0 2
75735: PPUSH
75736: LD_VAR 0 5
75740: PPUSH
75741: LD_VAR 0 6
75745: PPUSH
75746: CALL_OW 273
75750: PPUSH
75751: LD_VAR 0 3
75755: PPUSH
75756: CALL_OW 309
75760: IFFALSE 75774
// begin result := true ;
75762: LD_ADDR_VAR 0 4
75766: PUSH
75767: LD_INT 1
75769: ST_TO_ADDR
// exit ;
75770: POP
75771: POP
75772: GO 75778
// end ;
75774: GO 75708
75776: POP
75777: POP
// end ;
75778: LD_VAR 0 4
75782: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75783: LD_INT 0
75785: PPUSH
75786: PPUSH
75787: PPUSH
// if btype = b_depot then
75788: LD_VAR 0 2
75792: PUSH
75793: LD_INT 0
75795: EQUAL
75796: IFFALSE 75808
// begin result := true ;
75798: LD_ADDR_VAR 0 3
75802: PUSH
75803: LD_INT 1
75805: ST_TO_ADDR
// exit ;
75806: GO 75928
// end ; pom := GetBase ( depot ) ;
75808: LD_ADDR_VAR 0 4
75812: PUSH
75813: LD_VAR 0 1
75817: PPUSH
75818: CALL_OW 274
75822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75823: LD_ADDR_VAR 0 5
75827: PUSH
75828: LD_VAR 0 2
75832: PPUSH
75833: LD_VAR 0 1
75837: PPUSH
75838: CALL_OW 248
75842: PPUSH
75843: CALL_OW 450
75847: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75848: LD_ADDR_VAR 0 3
75852: PUSH
75853: LD_VAR 0 4
75857: PPUSH
75858: LD_INT 1
75860: PPUSH
75861: CALL_OW 275
75865: PUSH
75866: LD_VAR 0 5
75870: PUSH
75871: LD_INT 1
75873: ARRAY
75874: GREATEREQUAL
75875: IFFALSE 75901
75877: PUSH
75878: LD_VAR 0 4
75882: PPUSH
75883: LD_INT 2
75885: PPUSH
75886: CALL_OW 275
75890: PUSH
75891: LD_VAR 0 5
75895: PUSH
75896: LD_INT 2
75898: ARRAY
75899: GREATEREQUAL
75900: AND
75901: IFFALSE 75927
75903: PUSH
75904: LD_VAR 0 4
75908: PPUSH
75909: LD_INT 3
75911: PPUSH
75912: CALL_OW 275
75916: PUSH
75917: LD_VAR 0 5
75921: PUSH
75922: LD_INT 3
75924: ARRAY
75925: GREATEREQUAL
75926: AND
75927: ST_TO_ADDR
// end ;
75928: LD_VAR 0 3
75932: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75933: LD_INT 0
75935: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75936: LD_VAR 0 1
75940: PPUSH
75941: LD_VAR 0 2
75945: PPUSH
75946: LD_INT 0
75948: PPUSH
75949: LD_INT 0
75951: PPUSH
75952: LD_INT 1
75954: PPUSH
75955: LD_INT 0
75957: PPUSH
75958: CALL_OW 587
// end ;
75962: LD_VAR 0 3
75966: RET
// export function CenterOnNow ( unit ) ; begin
75967: LD_INT 0
75969: PPUSH
// result := IsInUnit ( unit ) ;
75970: LD_ADDR_VAR 0 2
75974: PUSH
75975: LD_VAR 0 1
75979: PPUSH
75980: CALL_OW 310
75984: ST_TO_ADDR
// if not result then
75985: LD_VAR 0 2
75989: NOT
75990: IFFALSE 76002
// result := unit ;
75992: LD_ADDR_VAR 0 2
75996: PUSH
75997: LD_VAR 0 1
76001: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76002: LD_VAR 0 1
76006: PPUSH
76007: CALL_OW 87
// end ;
76011: LD_VAR 0 2
76015: RET
// export function ComMoveHex ( unit , hex ) ; begin
76016: LD_INT 0
76018: PPUSH
// if not hex then
76019: LD_VAR 0 2
76023: NOT
76024: IFFALSE 76028
// exit ;
76026: GO 76081
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76028: LD_VAR 0 2
76032: PUSH
76033: LD_INT 1
76035: ARRAY
76036: PPUSH
76037: LD_VAR 0 2
76041: PUSH
76042: LD_INT 2
76044: ARRAY
76045: PPUSH
76046: CALL_OW 428
76050: IFFALSE 76054
// exit ;
76052: GO 76081
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76054: LD_VAR 0 1
76058: PPUSH
76059: LD_VAR 0 2
76063: PUSH
76064: LD_INT 1
76066: ARRAY
76067: PPUSH
76068: LD_VAR 0 2
76072: PUSH
76073: LD_INT 2
76075: ARRAY
76076: PPUSH
76077: CALL_OW 111
// end ;
76081: LD_VAR 0 3
76085: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76086: LD_INT 0
76088: PPUSH
76089: PPUSH
76090: PPUSH
// if not unit or not enemy then
76091: LD_VAR 0 1
76095: NOT
76096: IFTRUE 76105
76098: PUSH
76099: LD_VAR 0 2
76103: NOT
76104: OR
76105: IFFALSE 76109
// exit ;
76107: GO 76235
// x := GetX ( enemy ) ;
76109: LD_ADDR_VAR 0 4
76113: PUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: CALL_OW 250
76123: ST_TO_ADDR
// y := GetY ( enemy ) ;
76124: LD_ADDR_VAR 0 5
76128: PUSH
76129: LD_VAR 0 2
76133: PPUSH
76134: CALL_OW 251
76138: ST_TO_ADDR
// if ValidHex ( x , y ) then
76139: LD_VAR 0 4
76143: PPUSH
76144: LD_VAR 0 5
76148: PPUSH
76149: CALL_OW 488
76153: IFFALSE 76235
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76155: LD_VAR 0 2
76159: PPUSH
76160: CALL_OW 247
76164: PUSH
76165: LD_INT 3
76167: PUSH
76168: LD_INT 2
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: IN
76175: IFTRUE 76198
76177: PUSH
76178: LD_VAR 0 1
76182: PPUSH
76183: CALL_OW 255
76187: PPUSH
76188: LD_VAR 0 2
76192: PPUSH
76193: CALL_OW 292
76197: OR
76198: IFFALSE 76216
// ComAttackUnit ( unit , enemy ) else
76200: LD_VAR 0 1
76204: PPUSH
76205: LD_VAR 0 2
76209: PPUSH
76210: CALL_OW 115
76214: GO 76235
// ComAgressiveMove ( unit , x , y ) ;
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 4
76225: PPUSH
76226: LD_VAR 0 5
76230: PPUSH
76231: CALL_OW 114
// end ;
76235: LD_VAR 0 3
76239: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76240: LD_INT 0
76242: PPUSH
76243: PPUSH
76244: PPUSH
// list := AreaToList ( area , 0 ) ;
76245: LD_ADDR_VAR 0 5
76249: PUSH
76250: LD_VAR 0 1
76254: PPUSH
76255: LD_INT 0
76257: PPUSH
76258: CALL_OW 517
76262: ST_TO_ADDR
// if not list then
76263: LD_VAR 0 5
76267: NOT
76268: IFFALSE 76272
// exit ;
76270: GO 76402
// if all then
76272: LD_VAR 0 2
76276: IFFALSE 76364
// begin for i := 1 to list [ 1 ] do
76278: LD_ADDR_VAR 0 4
76282: PUSH
76283: DOUBLE
76284: LD_INT 1
76286: DEC
76287: ST_TO_ADDR
76288: LD_VAR 0 5
76292: PUSH
76293: LD_INT 1
76295: ARRAY
76296: PUSH
76297: FOR_TO
76298: IFFALSE 76360
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76300: LD_ADDR_VAR 0 3
76304: PUSH
76305: LD_VAR 0 3
76309: PPUSH
76310: LD_VAR 0 3
76314: PUSH
76315: LD_INT 1
76317: PLUS
76318: PPUSH
76319: LD_VAR 0 5
76323: PUSH
76324: LD_INT 1
76326: ARRAY
76327: PUSH
76328: LD_VAR 0 4
76332: ARRAY
76333: PUSH
76334: LD_VAR 0 5
76338: PUSH
76339: LD_INT 2
76341: ARRAY
76342: PUSH
76343: LD_VAR 0 4
76347: ARRAY
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PPUSH
76353: CALL_OW 1
76357: ST_TO_ADDR
76358: GO 76297
76360: POP
76361: POP
// exit ;
76362: GO 76402
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76364: LD_ADDR_VAR 0 3
76368: PUSH
76369: LD_VAR 0 5
76373: PUSH
76374: LD_INT 1
76376: ARRAY
76377: PUSH
76378: LD_INT 1
76380: ARRAY
76381: PUSH
76382: LD_VAR 0 5
76386: PUSH
76387: LD_INT 2
76389: ARRAY
76390: PUSH
76391: LD_INT 1
76393: ARRAY
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: EMPTY
76400: LIST
76401: ST_TO_ADDR
// end ;
76402: LD_VAR 0 3
76406: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76407: LD_INT 0
76409: PPUSH
76410: PPUSH
// list := AreaToList ( area , 0 ) ;
76411: LD_ADDR_VAR 0 4
76415: PUSH
76416: LD_VAR 0 1
76420: PPUSH
76421: LD_INT 0
76423: PPUSH
76424: CALL_OW 517
76428: ST_TO_ADDR
// if not list then
76429: LD_VAR 0 4
76433: NOT
76434: IFFALSE 76438
// exit ;
76436: GO 76479
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76438: LD_ADDR_VAR 0 3
76442: PUSH
76443: LD_VAR 0 4
76447: PUSH
76448: LD_INT 1
76450: ARRAY
76451: PUSH
76452: LD_INT 1
76454: ARRAY
76455: PUSH
76456: LD_VAR 0 4
76460: PUSH
76461: LD_INT 2
76463: ARRAY
76464: PUSH
76465: LD_INT 1
76467: ARRAY
76468: PUSH
76469: LD_VAR 0 2
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: LIST
76478: ST_TO_ADDR
// end ;
76479: LD_VAR 0 3
76483: RET
// export function First ( array ) ; begin
76484: LD_INT 0
76486: PPUSH
// if not array then
76487: LD_VAR 0 1
76491: NOT
76492: IFFALSE 76496
// exit ;
76494: GO 76510
// result := array [ 1 ] ;
76496: LD_ADDR_VAR 0 2
76500: PUSH
76501: LD_VAR 0 1
76505: PUSH
76506: LD_INT 1
76508: ARRAY
76509: ST_TO_ADDR
// end ;
76510: LD_VAR 0 2
76514: RET
// export function Last ( array ) ; begin
76515: LD_INT 0
76517: PPUSH
// if not array then
76518: LD_VAR 0 1
76522: NOT
76523: IFFALSE 76527
// exit ;
76525: GO 76543
// result := array [ array ] ;
76527: LD_ADDR_VAR 0 2
76531: PUSH
76532: LD_VAR 0 1
76536: PUSH
76537: LD_VAR 0 1
76541: ARRAY
76542: ST_TO_ADDR
// end ;
76543: LD_VAR 0 2
76547: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76548: LD_INT 0
76550: PPUSH
76551: PPUSH
// result := [ ] ;
76552: LD_ADDR_VAR 0 5
76556: PUSH
76557: EMPTY
76558: ST_TO_ADDR
// if not array then
76559: LD_VAR 0 1
76563: NOT
76564: IFFALSE 76568
// exit ;
76566: GO 76680
// for i := 1 to array do
76568: LD_ADDR_VAR 0 6
76572: PUSH
76573: DOUBLE
76574: LD_INT 1
76576: DEC
76577: ST_TO_ADDR
76578: LD_VAR 0 1
76582: PUSH
76583: FOR_TO
76584: IFFALSE 76678
// if array [ i ] [ index ] = value then
76586: LD_VAR 0 1
76590: PUSH
76591: LD_VAR 0 6
76595: ARRAY
76596: PUSH
76597: LD_VAR 0 2
76601: ARRAY
76602: PUSH
76603: LD_VAR 0 3
76607: EQUAL
76608: IFFALSE 76676
// begin if indexColumn then
76610: LD_VAR 0 4
76614: IFFALSE 76650
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76616: LD_ADDR_VAR 0 5
76620: PUSH
76621: LD_VAR 0 5
76625: PPUSH
76626: LD_VAR 0 1
76630: PUSH
76631: LD_VAR 0 6
76635: ARRAY
76636: PUSH
76637: LD_VAR 0 4
76641: ARRAY
76642: PPUSH
76643: CALL 71688 0 2
76647: ST_TO_ADDR
76648: GO 76676
// result := Join ( result , array [ i ] ) ;
76650: LD_ADDR_VAR 0 5
76654: PUSH
76655: LD_VAR 0 5
76659: PPUSH
76660: LD_VAR 0 1
76664: PUSH
76665: LD_VAR 0 6
76669: ARRAY
76670: PPUSH
76671: CALL 71688 0 2
76675: ST_TO_ADDR
// end ;
76676: GO 76583
76678: POP
76679: POP
// end ;
76680: LD_VAR 0 5
76684: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76685: LD_INT 0
76687: PPUSH
// if not vehicles or not parkingPoint then
76688: LD_VAR 0 1
76692: NOT
76693: IFTRUE 76702
76695: PUSH
76696: LD_VAR 0 2
76700: NOT
76701: OR
76702: IFFALSE 76706
// exit ;
76704: GO 76804
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76706: LD_ADDR_VAR 0 1
76710: PUSH
76711: LD_VAR 0 1
76715: PPUSH
76716: LD_INT 50
76718: PUSH
76719: EMPTY
76720: LIST
76721: PUSH
76722: LD_INT 3
76724: PUSH
76725: LD_INT 92
76727: PUSH
76728: LD_VAR 0 2
76732: PUSH
76733: LD_INT 1
76735: ARRAY
76736: PUSH
76737: LD_VAR 0 2
76741: PUSH
76742: LD_INT 2
76744: ARRAY
76745: PUSH
76746: LD_INT 8
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PPUSH
76763: CALL_OW 72
76767: ST_TO_ADDR
// if not vehicles then
76768: LD_VAR 0 1
76772: NOT
76773: IFFALSE 76777
// exit ;
76775: GO 76804
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76777: LD_VAR 0 1
76781: PPUSH
76782: LD_VAR 0 2
76786: PUSH
76787: LD_INT 1
76789: ARRAY
76790: PPUSH
76791: LD_VAR 0 2
76795: PUSH
76796: LD_INT 2
76798: ARRAY
76799: PPUSH
76800: CALL_OW 111
// end ;
76804: LD_VAR 0 3
76808: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76809: LD_INT 0
76811: PPUSH
76812: PPUSH
76813: PPUSH
// if not side or not area then
76814: LD_VAR 0 1
76818: NOT
76819: IFTRUE 76828
76821: PUSH
76822: LD_VAR 0 2
76826: NOT
76827: OR
76828: IFFALSE 76832
// exit ;
76830: GO 76951
// tmp := AreaToList ( area , 0 ) ;
76832: LD_ADDR_VAR 0 5
76836: PUSH
76837: LD_VAR 0 2
76841: PPUSH
76842: LD_INT 0
76844: PPUSH
76845: CALL_OW 517
76849: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76850: LD_ADDR_VAR 0 4
76854: PUSH
76855: DOUBLE
76856: LD_INT 1
76858: DEC
76859: ST_TO_ADDR
76860: LD_VAR 0 5
76864: PUSH
76865: LD_INT 1
76867: ARRAY
76868: PUSH
76869: FOR_TO
76870: IFFALSE 76949
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76872: LD_VAR 0 5
76876: PUSH
76877: LD_INT 1
76879: ARRAY
76880: PUSH
76881: LD_VAR 0 4
76885: ARRAY
76886: PPUSH
76887: LD_VAR 0 5
76891: PUSH
76892: LD_INT 2
76894: ARRAY
76895: PUSH
76896: LD_VAR 0 4
76900: ARRAY
76901: PPUSH
76902: CALL_OW 351
76906: IFFALSE 76947
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76908: LD_VAR 0 5
76912: PUSH
76913: LD_INT 1
76915: ARRAY
76916: PUSH
76917: LD_VAR 0 4
76921: ARRAY
76922: PPUSH
76923: LD_VAR 0 5
76927: PUSH
76928: LD_INT 2
76930: ARRAY
76931: PUSH
76932: LD_VAR 0 4
76936: ARRAY
76937: PPUSH
76938: LD_VAR 0 1
76942: PPUSH
76943: CALL_OW 244
// end ;
76947: GO 76869
76949: POP
76950: POP
// end ;
76951: LD_VAR 0 3
76955: RET
// export function UniqueArray ( array ) ; var i ; begin
76956: LD_INT 0
76958: PPUSH
76959: PPUSH
// result := [ ] ;
76960: LD_ADDR_VAR 0 2
76964: PUSH
76965: EMPTY
76966: ST_TO_ADDR
// if not array then
76967: LD_VAR 0 1
76971: NOT
76972: IFFALSE 76976
// exit ;
76974: GO 77037
// for i := 1 to array do
76976: LD_ADDR_VAR 0 3
76980: PUSH
76981: DOUBLE
76982: LD_INT 1
76984: DEC
76985: ST_TO_ADDR
76986: LD_VAR 0 1
76990: PUSH
76991: FOR_TO
76992: IFFALSE 77035
// if not array [ i ] in result then
76994: LD_VAR 0 1
76998: PUSH
76999: LD_VAR 0 3
77003: ARRAY
77004: PUSH
77005: LD_VAR 0 2
77009: IN
77010: NOT
77011: IFFALSE 77033
// result := Join ( result , i ) ;
77013: LD_ADDR_VAR 0 2
77017: PUSH
77018: LD_VAR 0 2
77022: PPUSH
77023: LD_VAR 0 3
77027: PPUSH
77028: CALL 71688 0 2
77032: ST_TO_ADDR
77033: GO 76991
77035: POP
77036: POP
// end ; end_of_file
77037: LD_VAR 0 2
77041: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77042: LD_VAR 0 1
77046: PUSH
77047: LD_INT 200
77049: DOUBLE
77050: GREATEREQUAL
77051: IFFALSE 77059
77053: LD_INT 299
77055: DOUBLE
77056: LESSEQUAL
77057: IFTRUE 77061
77059: GO 77093
77061: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77062: LD_VAR 0 1
77066: PPUSH
77067: LD_VAR 0 2
77071: PPUSH
77072: LD_VAR 0 3
77076: PPUSH
77077: LD_VAR 0 4
77081: PPUSH
77082: LD_VAR 0 5
77086: PPUSH
77087: CALL 27998 0 5
77091: GO 77170
77093: LD_INT 300
77095: DOUBLE
77096: GREATEREQUAL
77097: IFFALSE 77105
77099: LD_INT 399
77101: DOUBLE
77102: LESSEQUAL
77103: IFTRUE 77107
77105: GO 77169
77107: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77108: LD_VAR 0 1
77112: PPUSH
77113: LD_VAR 0 2
77117: PPUSH
77118: LD_VAR 0 3
77122: PPUSH
77123: LD_VAR 0 4
77127: PPUSH
77128: LD_VAR 0 5
77132: PPUSH
77133: LD_VAR 0 6
77137: PPUSH
77138: LD_VAR 0 7
77142: PPUSH
77143: LD_VAR 0 8
77147: PPUSH
77148: LD_VAR 0 9
77152: PPUSH
77153: LD_VAR 0 10
77157: PPUSH
77158: LD_VAR 0 11
77162: PPUSH
77163: CALL 23882 0 11
77167: GO 77170
77169: POP
// end ;
77170: PPOPN 11
77172: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77173: LD_VAR 0 1
77177: PPUSH
77178: LD_VAR 0 2
77182: PPUSH
77183: LD_VAR 0 3
77187: PPUSH
77188: LD_VAR 0 4
77192: PPUSH
77193: LD_VAR 0 5
77197: PPUSH
77198: CALL 27379 0 5
// end ; end_of_file
77202: PPOPN 5
77204: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77205: LD_VAR 0 1
77209: PPUSH
77210: LD_VAR 0 2
77214: PPUSH
77215: LD_VAR 0 3
77219: PPUSH
77220: LD_VAR 0 4
77224: PPUSH
77225: LD_VAR 0 5
77229: PPUSH
77230: LD_VAR 0 6
77234: PPUSH
77235: CALL 11422 0 6
// end ;
77239: PPOPN 6
77241: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77242: LD_INT 0
77244: PPUSH
// begin if not units then
77245: LD_VAR 0 1
77249: NOT
77250: IFFALSE 77254
// exit ;
77252: GO 77288
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77254: LD_VAR 0 1
77258: PPUSH
77259: LD_VAR 0 2
77263: PPUSH
77264: LD_VAR 0 3
77268: PPUSH
77269: LD_VAR 0 4
77273: PPUSH
77274: LD_VAR 0 5
77278: PPUSH
77279: LD_VAR 0 6
77283: PPUSH
77284: CALL 33505 0 6
// end ;
77288: PPOPN 7
77290: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77291: CALL 11309 0 0
// end ;
77295: PPOPN 1
77297: END
