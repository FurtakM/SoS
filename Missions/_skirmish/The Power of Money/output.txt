// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10701 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10320 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10577 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10577 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10577 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10577 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10320 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10577 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10577 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10577 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10577 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10577 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 25073 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 255
9805: PUSH
9806: LD_INT 1
9808: EQUAL
9809: IFFALSE 9826
// ComMoveXY ( un , 57 , 52 ) ;
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 57
9818: PPUSH
9819: LD_INT 52
9821: PPUSH
9822: CALL_OW 111
// end ;
9826: PPOPN 2
9828: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9829: LD_EXP 21
9833: NOT
9834: IFFALSE 9884
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 3
9843: EQUAL
9844: PUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: PUSH
9855: LD_VAR 0 1
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: PUSH
9864: LD_VAR 0 2
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: AND
9873: OR
9874: IFFALSE 9884
// us_alert := true ;
9876: LD_ADDR_EXP 21
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 6
9891: EQUAL
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_INT 3
9900: EQUAL
9901: AND
9902: PUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 3
9910: EQUAL
9911: PUSH
9912: LD_VAR 0 2
9916: PUSH
9917: LD_INT 6
9919: EQUAL
9920: AND
9921: OR
9922: IFFALSE 9931
// YouLost ( alat ) ;
9924: LD_STRING alat
9926: PPUSH
9927: CALL_OW 104
// end ;
9931: PPOPN 2
9933: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 2
9946: EQUAL
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: LD_INT 58
9955: PUSH
9956: EMPTY
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: IN
9978: AND
9979: IFFALSE 10100
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9981: LD_OWVAR 3
9985: PUSH
9986: LD_VAR 0 1
9990: DIFF
9991: PPUSH
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 74
10001: PPUSH
10002: CALL_OW 255
10006: PUSH
10007: LD_INT 2
10009: NONEQUAL
10010: IFFALSE 10100
// begin Wait ( 0 0$1.3 ) ;
10012: LD_INT 46
10014: PPUSH
10015: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 250
10028: PPUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 251
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 250
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 251
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 250
10082: PPUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 251
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 453
// end ; end ;
10100: PPOPN 1
10102: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10103: LD_VAR 0 2
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: IN
10137: PUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: CALL 10622 0 1
10147: PPUSH
10148: CALL_OW 255
10152: PUSH
10153: LD_INT 2
10155: EQUAL
10156: NOT
10157: AND
10158: IFFALSE 10283
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10160: LD_INT 105
10162: PPUSH
10163: LD_INT 210
10165: PPUSH
10166: CALL_OW 12
10170: PPUSH
10171: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 250
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 251
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10229: LD_VAR 0 2
10233: PPUSH
10234: CALL_OW 250
10238: PPUSH
10239: LD_VAR 0 2
10243: PPUSH
10244: CALL_OW 251
10248: PPUSH
10249: LD_INT 3
10251: PPUSH
10252: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: CALL_OW 250
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: CALL_OW 251
10275: PPUSH
10276: LD_INT 3
10278: PPUSH
10279: CALL_OW 453
// end ; end ;
10283: PPOPN 4
10285: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: CALL 25171 0 3
// end ;
10305: PPOPN 3
10307: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL 25179 0 1
// end ; end_of_file
10317: PPOPN 1
10319: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 1
10334: PUSH
10335: LD_VAR 0 2
10339: ARRAY
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_VAR 0 4
10350: PPUSH
10351: CALL_OW 1
10355: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_VAR 0 7
10375: PPUSH
10376: CALL_OW 1
10380: ST_TO_ADDR
// result := tab ;
10381: LD_ADDR_VAR 0 5
10385: PUSH
10386: LD_VAR 0 1
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 5
10395: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
// if not GetControl ( veh ) = control_manual then
10401: LD_VAR 0 1
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: NOT
10415: IFFALSE 10427
// result := false else
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10572
// if veh in FilterAllUnits ( [ f_empty ] ) then
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 58
10434: PUSH
10435: EMPTY
10436: LIST
10437: PPUSH
10438: CALL_OW 69
10442: IN
10443: IFFALSE 10455
// result := false else
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
10453: GO 10572
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 255
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 55
10479: PUSH
10480: EMPTY
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// if not filter then
10492: LD_VAR 0 4
10496: NOT
10497: IFFALSE 10509
// result := false else
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
10507: GO 10572
// for i = 1 to filter do
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: DOUBLE
10515: LD_INT 1
10517: DEC
10518: ST_TO_ADDR
10519: LD_VAR 0 4
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10570
// if IsDriver ( filter [ i ] ) = veh then
10527: LD_VAR 0 4
10531: PUSH
10532: LD_VAR 0 3
10536: ARRAY
10537: PPUSH
10538: CALL 63421 0 1
10542: PUSH
10543: LD_VAR 0 1
10547: EQUAL
10548: IFFALSE 10568
// begin result := filter [ i ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 4
10559: PUSH
10560: LD_VAR 0 3
10564: ARRAY
10565: ST_TO_ADDR
// break ;
10566: GO 10570
// end ;
10568: GO 10524
10570: POP
10571: POP
// end ; end ;
10572: LD_VAR 0 2
10576: RET
// export function FindTarget ( unit ) ; begin
10577: LD_INT 0
10579: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 81
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 255
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 74
10616: ST_TO_ADDR
// end ;
10617: LD_VAR 0 2
10621: RET
// export function NearestUnit ( unit ) ; begin
10622: LD_INT 0
10624: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_OWVAR 3
10634: PUSH
10635: LD_VAR 0 1
10639: DIFF
10640: PPUSH
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 74
10650: ST_TO_ADDR
// end ; end_of_file
10651: LD_VAR 0 2
10655: RET
// every 12 12$00 do
10656: GO 10658
10658: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 570
10664: PPUSH
10665: LD_INT 350
10667: PPUSH
10668: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10672: LD_INT 10500
10674: PPUSH
10675: LD_INT 21000
10677: PPUSH
10678: CALL_OW 12
10682: PPUSH
10683: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10687: LD_INT 0
10689: PPUSH
10690: LD_INT 570
10692: PPUSH
10693: LD_INT 350
10695: PPUSH
10696: CALL_OW 550
// end ;
10700: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// uc_nation = nation_nature ;
10708: LD_ADDR_OWVAR 21
10712: PUSH
10713: LD_INT 0
10715: ST_TO_ADDR
// uc_side = 0 ;
10716: LD_ADDR_OWVAR 20
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// l = 0 ;
10724: LD_ADDR_VAR 0 6
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10732: LD_ADDR_OWVAR 24
10736: PUSH
10737: LD_INT 0
10739: PPUSH
10740: LD_INT 5
10742: PPUSH
10743: CALL_OW 12
10747: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10748: LD_ADDR_OWVAR 35
10752: PUSH
10753: LD_INT 5
10755: NEG
10756: PPUSH
10757: LD_INT 5
10759: PPUSH
10760: CALL_OW 12
10764: ST_TO_ADDR
// hc_gallery =  ;
10765: LD_ADDR_OWVAR 33
10769: PUSH
10770: LD_STRING 
10772: ST_TO_ADDR
// hc_class = class_apeman ;
10773: LD_ADDR_OWVAR 28
10777: PUSH
10778: LD_INT 12
10780: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10781: LD_ADDR_OWVAR 29
10785: PUSH
10786: LD_INT 11
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: CALL_OW 12
10796: PUSH
10797: LD_INT 10
10799: PPUSH
10800: LD_INT 11
10802: PPUSH
10803: CALL_OW 12
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// hc_sex = sex_male ;
10812: LD_ADDR_OWVAR 27
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10820: LD_ADDR_OWVAR 31
10824: PUSH
10825: LD_INT 0
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 12
10835: PUSH
10836: LD_INT 0
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// apeman = CreateHuman ;
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: CALL_OW 44
10860: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_INT 0
10873: PPUSH
10874: CALL_OW 49
// l = l + 1 ;
10878: LD_ADDR_VAR 0 6
10882: PUSH
10883: LD_VAR 0 6
10887: PUSH
10888: LD_INT 1
10890: PLUS
10891: ST_TO_ADDR
// end until l = num1 ;
10892: LD_VAR 0 6
10896: PUSH
10897: LD_VAR 0 1
10901: EQUAL
10902: IFFALSE 10732
// l = 0 ;
10904: LD_ADDR_VAR 0 6
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10912: LD_ADDR_OWVAR 35
10916: PUSH
10917: LD_INT 0
10919: PPUSH
10920: LD_INT 25
10922: PPUSH
10923: CALL_OW 12
10927: ST_TO_ADDR
// hc_class = class_tiger ;
10928: LD_ADDR_OWVAR 28
10932: PUSH
10933: LD_INT 14
10935: ST_TO_ADDR
// hc_sex = sex_male ;
10936: LD_ADDR_OWVAR 27
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// hc_gallery = sandnature ;
10944: LD_ADDR_OWVAR 33
10948: PUSH
10949: LD_STRING sandnature
10951: ST_TO_ADDR
// hc_face_number = 3 ;
10952: LD_ADDR_OWVAR 34
10956: PUSH
10957: LD_INT 3
10959: ST_TO_ADDR
// tiger = CreateHuman ;
10960: LD_ADDR_VAR 0 8
10964: PUSH
10965: CALL_OW 44
10969: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10970: LD_VAR 0 8
10974: PPUSH
10975: LD_VAR 0 4
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 49
// l = l + 1 ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_VAR 0 6
10996: PUSH
10997: LD_INT 1
10999: PLUS
11000: ST_TO_ADDR
// end until l = num2 ;
11001: LD_VAR 0 6
11005: PUSH
11006: LD_VAR 0 2
11010: EQUAL
11011: IFFALSE 10912
// l = 0 ;
11013: LD_ADDR_VAR 0 6
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11021: LD_ADDR_OWVAR 28
11025: PUSH
11026: LD_INT 18
11028: ST_TO_ADDR
// hc_gallery = sandnature ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING sandnature
11036: ST_TO_ADDR
// hc_face_number = 1 ;
11037: LD_ADDR_OWVAR 34
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// bird = CreateHuman ;
11045: LD_ADDR_VAR 0 9
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11055: LD_VAR 0 9
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 51
// l = l + 1 ;
11067: LD_ADDR_VAR 0 6
11071: PUSH
11072: LD_VAR 0 6
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: ST_TO_ADDR
// end until l = num3 ;
11081: LD_VAR 0 6
11085: PUSH
11086: LD_VAR 0 3
11090: EQUAL
11091: IFFALSE 11021
// end ; end_of_file
11093: LD_VAR 0 5
11097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11098: LD_INT 0
11100: PPUSH
// ar_miner := 81 ;
11101: LD_ADDR_EXP 33
11105: PUSH
11106: LD_INT 81
11108: ST_TO_ADDR
// ar_crane := 88 ;
11109: LD_ADDR_EXP 32
11113: PUSH
11114: LD_INT 88
11116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11117: LD_ADDR_EXP 27
11121: PUSH
11122: LD_INT 89
11124: ST_TO_ADDR
// us_hack := 99 ;
11125: LD_ADDR_EXP 28
11129: PUSH
11130: LD_INT 99
11132: ST_TO_ADDR
// us_artillery := 97 ;
11133: LD_ADDR_EXP 29
11137: PUSH
11138: LD_INT 97
11140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11141: LD_ADDR_EXP 30
11145: PUSH
11146: LD_INT 91
11148: ST_TO_ADDR
// ar_mortar := 92 ;
11149: LD_ADDR_EXP 31
11153: PUSH
11154: LD_INT 92
11156: ST_TO_ADDR
// ru_radar := 98 ;
11157: LD_ADDR_EXP 26
11161: PUSH
11162: LD_INT 98
11164: ST_TO_ADDR
// tech_Artillery := 80 ;
11165: LD_ADDR_EXP 34
11169: PUSH
11170: LD_INT 80
11172: ST_TO_ADDR
// tech_RadMat := 81 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 81
11180: ST_TO_ADDR
// tech_BasicTools := 82 ;
11181: LD_ADDR_EXP 36
11185: PUSH
11186: LD_INT 82
11188: ST_TO_ADDR
// tech_Cargo := 83 ;
11189: LD_ADDR_EXP 37
11193: PUSH
11194: LD_INT 83
11196: ST_TO_ADDR
// tech_Track := 84 ;
11197: LD_ADDR_EXP 38
11201: PUSH
11202: LD_INT 84
11204: ST_TO_ADDR
// tech_Crane := 85 ;
11205: LD_ADDR_EXP 39
11209: PUSH
11210: LD_INT 85
11212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11213: LD_ADDR_EXP 40
11217: PUSH
11218: LD_INT 86
11220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11221: LD_ADDR_EXP 41
11225: PUSH
11226: LD_INT 87
11228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11229: LD_ADDR_EXP 42
11233: PUSH
11234: LD_INT 88
11236: ST_TO_ADDR
// class_mastodont := 31 ;
11237: LD_ADDR_EXP 43
11241: PUSH
11242: LD_INT 31
11244: ST_TO_ADDR
// class_horse := 21 ;
11245: LD_ADDR_EXP 44
11249: PUSH
11250: LD_INT 21
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 1
11257: RET
// every 1 do
11258: GO 11260
11260: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11261: CALL 11098 0 0
11265: END
// every 0 0$1 do
11266: GO 11268
11268: DISABLE
// begin enable ;
11269: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11270: LD_STRING updateTimer(
11272: PUSH
11273: LD_OWVAR 1
11277: STR
11278: PUSH
11279: LD_STRING );
11281: STR
11282: PPUSH
11283: CALL_OW 559
// end ;
11287: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11288: LD_INT 0
11290: PPUSH
// if p2 = 100 then
11291: LD_VAR 0 2
11295: PUSH
11296: LD_INT 100
11298: EQUAL
11299: IFFALSE 12302
// begin if not StreamModeActive then
11301: LD_EXP 45
11305: NOT
11306: IFFALSE 11316
// StreamModeActive := true ;
11308: LD_ADDR_EXP 45
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 0 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 0
11323: EQUAL
11324: IFFALSE 11330
// InitStreamMode ;
11326: CALL 12462 0 0
// if p3 = 1 then
11330: LD_VAR 0 3
11334: PUSH
11335: LD_INT 1
11337: EQUAL
11338: IFFALSE 11348
// sRocket := true ;
11340: LD_ADDR_EXP 50
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// if p3 = 2 then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 2
11355: EQUAL
11356: IFFALSE 11366
// sSpeed := true ;
11358: LD_ADDR_EXP 49
11362: PUSH
11363: LD_INT 1
11365: ST_TO_ADDR
// if p3 = 3 then
11366: LD_VAR 0 3
11370: PUSH
11371: LD_INT 3
11373: EQUAL
11374: IFFALSE 11384
// sEngine := true ;
11376: LD_ADDR_EXP 51
11380: PUSH
11381: LD_INT 1
11383: ST_TO_ADDR
// if p3 = 4 then
11384: LD_VAR 0 3
11388: PUSH
11389: LD_INT 4
11391: EQUAL
11392: IFFALSE 11402
// sSpec := true ;
11394: LD_ADDR_EXP 48
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// if p3 = 5 then
11402: LD_VAR 0 3
11406: PUSH
11407: LD_INT 5
11409: EQUAL
11410: IFFALSE 11420
// sLevel := true ;
11412: LD_ADDR_EXP 52
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// if p3 = 6 then
11420: LD_VAR 0 3
11424: PUSH
11425: LD_INT 6
11427: EQUAL
11428: IFFALSE 11438
// sArmoury := true ;
11430: LD_ADDR_EXP 53
11434: PUSH
11435: LD_INT 1
11437: ST_TO_ADDR
// if p3 = 7 then
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 7
11445: EQUAL
11446: IFFALSE 11456
// sRadar := true ;
11448: LD_ADDR_EXP 54
11452: PUSH
11453: LD_INT 1
11455: ST_TO_ADDR
// if p3 = 8 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 8
11463: EQUAL
11464: IFFALSE 11474
// sBunker := true ;
11466: LD_ADDR_EXP 55
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 9 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 9
11481: EQUAL
11482: IFFALSE 11492
// sHack := true ;
11484: LD_ADDR_EXP 56
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 10 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 10
11499: EQUAL
11500: IFFALSE 11510
// sFire := true ;
11502: LD_ADDR_EXP 57
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 11 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 11
11517: EQUAL
11518: IFFALSE 11528
// sRefresh := true ;
11520: LD_ADDR_EXP 58
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 12 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 12
11535: EQUAL
11536: IFFALSE 11546
// sExp := true ;
11538: LD_ADDR_EXP 59
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 13 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 13
11553: EQUAL
11554: IFFALSE 11564
// sDepot := true ;
11556: LD_ADDR_EXP 60
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 14 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 14
11571: EQUAL
11572: IFFALSE 11582
// sFlag := true ;
11574: LD_ADDR_EXP 61
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 15 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 15
11589: EQUAL
11590: IFFALSE 11600
// sKamikadze := true ;
11592: LD_ADDR_EXP 69
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 16 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 16
11607: EQUAL
11608: IFFALSE 11618
// sTroll := true ;
11610: LD_ADDR_EXP 70
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 17 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 17
11625: EQUAL
11626: IFFALSE 11636
// sSlow := true ;
11628: LD_ADDR_EXP 71
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 18 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 18
11643: EQUAL
11644: IFFALSE 11654
// sLack := true ;
11646: LD_ADDR_EXP 72
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 19 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 19
11661: EQUAL
11662: IFFALSE 11672
// sTank := true ;
11664: LD_ADDR_EXP 74
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 20 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 20
11679: EQUAL
11680: IFFALSE 11690
// sRemote := true ;
11682: LD_ADDR_EXP 75
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 21 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 21
11697: EQUAL
11698: IFFALSE 11708
// sPowell := true ;
11700: LD_ADDR_EXP 76
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 22 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 22
11715: EQUAL
11716: IFFALSE 11726
// sTeleport := true ;
11718: LD_ADDR_EXP 79
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 23 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 23
11733: EQUAL
11734: IFFALSE 11744
// sOilTower := true ;
11736: LD_ADDR_EXP 81
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 24 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 24
11751: EQUAL
11752: IFFALSE 11762
// sShovel := true ;
11754: LD_ADDR_EXP 82
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 25 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 25
11769: EQUAL
11770: IFFALSE 11780
// sSheik := true ;
11772: LD_ADDR_EXP 83
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 26 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 26
11787: EQUAL
11788: IFFALSE 11798
// sEarthquake := true ;
11790: LD_ADDR_EXP 85
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 27 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 27
11805: EQUAL
11806: IFFALSE 11816
// sAI := true ;
11808: LD_ADDR_EXP 86
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 28 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 28
11823: EQUAL
11824: IFFALSE 11834
// sCargo := true ;
11826: LD_ADDR_EXP 89
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 29 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 29
11841: EQUAL
11842: IFFALSE 11852
// sDLaser := true ;
11844: LD_ADDR_EXP 90
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 30 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 30
11859: EQUAL
11860: IFFALSE 11870
// sExchange := true ;
11862: LD_ADDR_EXP 91
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 31 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 31
11877: EQUAL
11878: IFFALSE 11888
// sFac := true ;
11880: LD_ADDR_EXP 92
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 32 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 32
11895: EQUAL
11896: IFFALSE 11906
// sPower := true ;
11898: LD_ADDR_EXP 93
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 33 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 33
11913: EQUAL
11914: IFFALSE 11924
// sRandom := true ;
11916: LD_ADDR_EXP 94
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 34 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 34
11931: EQUAL
11932: IFFALSE 11942
// sShield := true ;
11934: LD_ADDR_EXP 95
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 35 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 35
11949: EQUAL
11950: IFFALSE 11960
// sTime := true ;
11952: LD_ADDR_EXP 96
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 36 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 36
11967: EQUAL
11968: IFFALSE 11978
// sTools := true ;
11970: LD_ADDR_EXP 97
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 101 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 101
11985: EQUAL
11986: IFFALSE 11996
// sSold := true ;
11988: LD_ADDR_EXP 62
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 102 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 102
12003: EQUAL
12004: IFFALSE 12014
// sDiff := true ;
12006: LD_ADDR_EXP 63
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 103 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 103
12021: EQUAL
12022: IFFALSE 12032
// sFog := true ;
12024: LD_ADDR_EXP 66
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 104 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 104
12039: EQUAL
12040: IFFALSE 12050
// sReset := true ;
12042: LD_ADDR_EXP 67
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 105 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 105
12057: EQUAL
12058: IFFALSE 12068
// sSun := true ;
12060: LD_ADDR_EXP 68
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 106 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 106
12075: EQUAL
12076: IFFALSE 12086
// sTiger := true ;
12078: LD_ADDR_EXP 64
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 107 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 107
12093: EQUAL
12094: IFFALSE 12104
// sBomb := true ;
12096: LD_ADDR_EXP 65
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 108 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 108
12111: EQUAL
12112: IFFALSE 12122
// sWound := true ;
12114: LD_ADDR_EXP 73
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 109 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 109
12129: EQUAL
12130: IFFALSE 12140
// sBetray := true ;
12132: LD_ADDR_EXP 77
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 110 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 110
12147: EQUAL
12148: IFFALSE 12158
// sContamin := true ;
12150: LD_ADDR_EXP 78
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 111 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 111
12165: EQUAL
12166: IFFALSE 12176
// sOil := true ;
12168: LD_ADDR_EXP 80
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if p3 = 112 then
12176: LD_VAR 0 3
12180: PUSH
12181: LD_INT 112
12183: EQUAL
12184: IFFALSE 12194
// sStu := true ;
12186: LD_ADDR_EXP 84
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// if p3 = 113 then
12194: LD_VAR 0 3
12198: PUSH
12199: LD_INT 113
12201: EQUAL
12202: IFFALSE 12212
// sBazooka := true ;
12204: LD_ADDR_EXP 87
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// if p3 = 114 then
12212: LD_VAR 0 3
12216: PUSH
12217: LD_INT 114
12219: EQUAL
12220: IFFALSE 12230
// sMortar := true ;
12222: LD_ADDR_EXP 88
12226: PUSH
12227: LD_INT 1
12229: ST_TO_ADDR
// if p3 = 115 then
12230: LD_VAR 0 3
12234: PUSH
12235: LD_INT 115
12237: EQUAL
12238: IFFALSE 12248
// sRanger := true ;
12240: LD_ADDR_EXP 98
12244: PUSH
12245: LD_INT 1
12247: ST_TO_ADDR
// if p3 = 116 then
12248: LD_VAR 0 3
12252: PUSH
12253: LD_INT 116
12255: EQUAL
12256: IFFALSE 12266
// sComputer := true ;
12258: LD_ADDR_EXP 99
12262: PUSH
12263: LD_INT 1
12265: ST_TO_ADDR
// if p3 = 117 then
12266: LD_VAR 0 3
12270: PUSH
12271: LD_INT 117
12273: EQUAL
12274: IFFALSE 12284
// s30 := true ;
12276: LD_ADDR_EXP 100
12280: PUSH
12281: LD_INT 1
12283: ST_TO_ADDR
// if p3 = 118 then
12284: LD_VAR 0 3
12288: PUSH
12289: LD_INT 118
12291: EQUAL
12292: IFFALSE 12302
// s60 := true ;
12294: LD_ADDR_EXP 101
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// end ; if p2 = 101 then
12302: LD_VAR 0 2
12306: PUSH
12307: LD_INT 101
12309: EQUAL
12310: IFFALSE 12438
// begin case p3 of 1 :
12312: LD_VAR 0 3
12316: PUSH
12317: LD_INT 1
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12332
12325: POP
// hHackUnlimitedResources ; 2 :
12326: CALL 24034 0 0
12330: GO 12438
12332: LD_INT 2
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12347
12340: POP
// hHackSetLevel10 ; 3 :
12341: CALL 24167 0 0
12345: GO 12438
12347: LD_INT 3
12349: DOUBLE
12350: EQUAL
12351: IFTRUE 12355
12353: GO 12362
12355: POP
// hHackSetLevel10YourUnits ; 4 :
12356: CALL 24252 0 0
12360: GO 12438
12362: LD_INT 4
12364: DOUBLE
12365: EQUAL
12366: IFTRUE 12370
12368: GO 12377
12370: POP
// hHackInvincible ; 5 :
12371: CALL 24700 0 0
12375: GO 12438
12377: LD_INT 5
12379: DOUBLE
12380: EQUAL
12381: IFTRUE 12385
12383: GO 12392
12385: POP
// hHackInvisible ; 6 :
12386: CALL 24811 0 0
12390: GO 12438
12392: LD_INT 6
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12407
12400: POP
// hHackChangeYourSide ; 7 :
12401: CALL 24868 0 0
12405: GO 12438
12407: LD_INT 7
12409: DOUBLE
12410: EQUAL
12411: IFTRUE 12415
12413: GO 12422
12415: POP
// hHackChangeUnitSide ; 8 :
12416: CALL 24910 0 0
12420: GO 12438
12422: LD_INT 8
12424: DOUBLE
12425: EQUAL
12426: IFTRUE 12430
12428: GO 12437
12430: POP
// hHackFog ; end ;
12431: CALL 25011 0 0
12435: GO 12438
12437: POP
// end ; end ;
12438: LD_VAR 0 7
12442: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12443: GO 12445
12445: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12446: LD_STRING initStreamRollete();
12448: PPUSH
12449: CALL_OW 559
// InitStreamMode ;
12453: CALL 12462 0 0
// DefineStreamItems ( ) ;
12457: CALL 12926 0 0
// end ;
12461: END
// function InitStreamMode ; begin
12462: LD_INT 0
12464: PPUSH
// streamModeActive := false ;
12465: LD_ADDR_EXP 45
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// normalCounter := 36 ;
12473: LD_ADDR_EXP 46
12477: PUSH
12478: LD_INT 36
12480: ST_TO_ADDR
// hardcoreCounter := 16 ;
12481: LD_ADDR_EXP 47
12485: PUSH
12486: LD_INT 16
12488: ST_TO_ADDR
// sRocket := false ;
12489: LD_ADDR_EXP 50
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sSpeed := false ;
12497: LD_ADDR_EXP 49
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// sEngine := false ;
12505: LD_ADDR_EXP 51
12509: PUSH
12510: LD_INT 0
12512: ST_TO_ADDR
// sSpec := false ;
12513: LD_ADDR_EXP 48
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// sLevel := false ;
12521: LD_ADDR_EXP 52
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// sArmoury := false ;
12529: LD_ADDR_EXP 53
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// sRadar := false ;
12537: LD_ADDR_EXP 54
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// sBunker := false ;
12545: LD_ADDR_EXP 55
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// sHack := false ;
12553: LD_ADDR_EXP 56
12557: PUSH
12558: LD_INT 0
12560: ST_TO_ADDR
// sFire := false ;
12561: LD_ADDR_EXP 57
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// sRefresh := false ;
12569: LD_ADDR_EXP 58
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// sExp := false ;
12577: LD_ADDR_EXP 59
12581: PUSH
12582: LD_INT 0
12584: ST_TO_ADDR
// sDepot := false ;
12585: LD_ADDR_EXP 60
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// sFlag := false ;
12593: LD_ADDR_EXP 61
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// sKamikadze := false ;
12601: LD_ADDR_EXP 69
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// sTroll := false ;
12609: LD_ADDR_EXP 70
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// sSlow := false ;
12617: LD_ADDR_EXP 71
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sLack := false ;
12625: LD_ADDR_EXP 72
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sTank := false ;
12633: LD_ADDR_EXP 74
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sRemote := false ;
12641: LD_ADDR_EXP 75
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sPowell := false ;
12649: LD_ADDR_EXP 76
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sTeleport := false ;
12657: LD_ADDR_EXP 79
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sOilTower := false ;
12665: LD_ADDR_EXP 81
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sShovel := false ;
12673: LD_ADDR_EXP 82
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sSheik := false ;
12681: LD_ADDR_EXP 83
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sEarthquake := false ;
12689: LD_ADDR_EXP 85
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sAI := false ;
12697: LD_ADDR_EXP 86
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sCargo := false ;
12705: LD_ADDR_EXP 89
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sDLaser := false ;
12713: LD_ADDR_EXP 90
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sExchange := false ;
12721: LD_ADDR_EXP 91
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sFac := false ;
12729: LD_ADDR_EXP 92
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sPower := false ;
12737: LD_ADDR_EXP 93
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sRandom := false ;
12745: LD_ADDR_EXP 94
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sShield := false ;
12753: LD_ADDR_EXP 95
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sTime := false ;
12761: LD_ADDR_EXP 96
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sTools := false ;
12769: LD_ADDR_EXP 97
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sSold := false ;
12777: LD_ADDR_EXP 62
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sDiff := false ;
12785: LD_ADDR_EXP 63
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sFog := false ;
12793: LD_ADDR_EXP 66
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sReset := false ;
12801: LD_ADDR_EXP 67
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sSun := false ;
12809: LD_ADDR_EXP 68
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sTiger := false ;
12817: LD_ADDR_EXP 64
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// sBomb := false ;
12825: LD_ADDR_EXP 65
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// sWound := false ;
12833: LD_ADDR_EXP 73
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// sBetray := false ;
12841: LD_ADDR_EXP 77
12845: PUSH
12846: LD_INT 0
12848: ST_TO_ADDR
// sContamin := false ;
12849: LD_ADDR_EXP 78
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// sOil := false ;
12857: LD_ADDR_EXP 80
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// sStu := false ;
12865: LD_ADDR_EXP 84
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// sBazooka := false ;
12873: LD_ADDR_EXP 87
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// sMortar := false ;
12881: LD_ADDR_EXP 88
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// sRanger := false ;
12889: LD_ADDR_EXP 98
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// sComputer := false ;
12897: LD_ADDR_EXP 99
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// s30 := false ;
12905: LD_ADDR_EXP 100
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// s60 := false ;
12913: LD_ADDR_EXP 101
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// end ;
12921: LD_VAR 0 1
12925: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12926: LD_INT 0
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
// result := [ ] ;
12933: LD_ADDR_VAR 0 1
12937: PUSH
12938: EMPTY
12939: ST_TO_ADDR
// if campaign_id = 1 then
12940: LD_OWVAR 69
12944: PUSH
12945: LD_INT 1
12947: EQUAL
12948: IFFALSE 16114
// begin case mission_number of 1 :
12950: LD_OWVAR 70
12954: PUSH
12955: LD_INT 1
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13039
12963: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12964: LD_ADDR_VAR 0 1
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: LD_INT 11
12977: PUSH
12978: LD_INT 12
12980: PUSH
12981: LD_INT 15
12983: PUSH
12984: LD_INT 16
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 23
12992: PUSH
12993: LD_INT 26
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 101
13009: PUSH
13010: LD_INT 102
13012: PUSH
13013: LD_INT 106
13015: PUSH
13016: LD_INT 116
13018: PUSH
13019: LD_INT 117
13021: PUSH
13022: LD_INT 118
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: ST_TO_ADDR
13037: GO 16112
13039: LD_INT 2
13041: DOUBLE
13042: EQUAL
13043: IFTRUE 13047
13045: GO 13131
13047: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13048: LD_ADDR_VAR 0 1
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 4
13058: PUSH
13059: LD_INT 11
13061: PUSH
13062: LD_INT 12
13064: PUSH
13065: LD_INT 15
13067: PUSH
13068: LD_INT 16
13070: PUSH
13071: LD_INT 22
13073: PUSH
13074: LD_INT 23
13076: PUSH
13077: LD_INT 26
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 101
13093: PUSH
13094: LD_INT 102
13096: PUSH
13097: LD_INT 105
13099: PUSH
13100: LD_INT 106
13102: PUSH
13103: LD_INT 108
13105: PUSH
13106: LD_INT 116
13108: PUSH
13109: LD_INT 117
13111: PUSH
13112: LD_INT 118
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: ST_TO_ADDR
13129: GO 16112
13131: LD_INT 3
13133: DOUBLE
13134: EQUAL
13135: IFTRUE 13139
13137: GO 13227
13139: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13140: LD_ADDR_VAR 0 1
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 4
13150: PUSH
13151: LD_INT 5
13153: PUSH
13154: LD_INT 11
13156: PUSH
13157: LD_INT 12
13159: PUSH
13160: LD_INT 15
13162: PUSH
13163: LD_INT 16
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 26
13171: PUSH
13172: LD_INT 36
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 101
13189: PUSH
13190: LD_INT 102
13192: PUSH
13193: LD_INT 105
13195: PUSH
13196: LD_INT 106
13198: PUSH
13199: LD_INT 108
13201: PUSH
13202: LD_INT 116
13204: PUSH
13205: LD_INT 117
13207: PUSH
13208: LD_INT 118
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: ST_TO_ADDR
13225: GO 16112
13227: LD_INT 4
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 13331
13235: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: LD_INT 4
13246: PUSH
13247: LD_INT 5
13249: PUSH
13250: LD_INT 8
13252: PUSH
13253: LD_INT 11
13255: PUSH
13256: LD_INT 12
13258: PUSH
13259: LD_INT 15
13261: PUSH
13262: LD_INT 16
13264: PUSH
13265: LD_INT 22
13267: PUSH
13268: LD_INT 23
13270: PUSH
13271: LD_INT 26
13273: PUSH
13274: LD_INT 36
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 101
13293: PUSH
13294: LD_INT 102
13296: PUSH
13297: LD_INT 105
13299: PUSH
13300: LD_INT 106
13302: PUSH
13303: LD_INT 108
13305: PUSH
13306: LD_INT 116
13308: PUSH
13309: LD_INT 117
13311: PUSH
13312: LD_INT 118
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 16112
13331: LD_INT 5
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13451
13339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 4
13350: PUSH
13351: LD_INT 5
13353: PUSH
13354: LD_INT 6
13356: PUSH
13357: LD_INT 8
13359: PUSH
13360: LD_INT 11
13362: PUSH
13363: LD_INT 12
13365: PUSH
13366: LD_INT 15
13368: PUSH
13369: LD_INT 16
13371: PUSH
13372: LD_INT 22
13374: PUSH
13375: LD_INT 23
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 26
13383: PUSH
13384: LD_INT 36
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 101
13405: PUSH
13406: LD_INT 102
13408: PUSH
13409: LD_INT 105
13411: PUSH
13412: LD_INT 106
13414: PUSH
13415: LD_INT 108
13417: PUSH
13418: LD_INT 109
13420: PUSH
13421: LD_INT 112
13423: PUSH
13424: LD_INT 116
13426: PUSH
13427: LD_INT 117
13429: PUSH
13430: LD_INT 118
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
13449: GO 16112
13451: LD_INT 6
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13591
13459: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13460: LD_ADDR_VAR 0 1
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 4
13470: PUSH
13471: LD_INT 5
13473: PUSH
13474: LD_INT 6
13476: PUSH
13477: LD_INT 8
13479: PUSH
13480: LD_INT 11
13482: PUSH
13483: LD_INT 12
13485: PUSH
13486: LD_INT 15
13488: PUSH
13489: LD_INT 16
13491: PUSH
13492: LD_INT 20
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 23
13503: PUSH
13504: LD_INT 25
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: LD_INT 30
13512: PUSH
13513: LD_INT 31
13515: PUSH
13516: LD_INT 32
13518: PUSH
13519: LD_INT 36
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 101
13545: PUSH
13546: LD_INT 102
13548: PUSH
13549: LD_INT 105
13551: PUSH
13552: LD_INT 106
13554: PUSH
13555: LD_INT 108
13557: PUSH
13558: LD_INT 109
13560: PUSH
13561: LD_INT 112
13563: PUSH
13564: LD_INT 116
13566: PUSH
13567: LD_INT 117
13569: PUSH
13570: LD_INT 118
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 16112
13591: LD_INT 7
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13711
13599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 4
13610: PUSH
13611: LD_INT 5
13613: PUSH
13614: LD_INT 7
13616: PUSH
13617: LD_INT 11
13619: PUSH
13620: LD_INT 12
13622: PUSH
13623: LD_INT 15
13625: PUSH
13626: LD_INT 16
13628: PUSH
13629: LD_INT 20
13631: PUSH
13632: LD_INT 21
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_INT 23
13640: PUSH
13641: LD_INT 25
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 101
13665: PUSH
13666: LD_INT 102
13668: PUSH
13669: LD_INT 103
13671: PUSH
13672: LD_INT 105
13674: PUSH
13675: LD_INT 106
13677: PUSH
13678: LD_INT 108
13680: PUSH
13681: LD_INT 112
13683: PUSH
13684: LD_INT 116
13686: PUSH
13687: LD_INT 117
13689: PUSH
13690: LD_INT 118
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: ST_TO_ADDR
13709: GO 16112
13711: LD_INT 8
13713: DOUBLE
13714: EQUAL
13715: IFTRUE 13719
13717: GO 13859
13719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13720: LD_ADDR_VAR 0 1
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: LD_INT 4
13730: PUSH
13731: LD_INT 5
13733: PUSH
13734: LD_INT 6
13736: PUSH
13737: LD_INT 7
13739: PUSH
13740: LD_INT 8
13742: PUSH
13743: LD_INT 11
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: LD_INT 15
13751: PUSH
13752: LD_INT 16
13754: PUSH
13755: LD_INT 20
13757: PUSH
13758: LD_INT 21
13760: PUSH
13761: LD_INT 22
13763: PUSH
13764: LD_INT 23
13766: PUSH
13767: LD_INT 25
13769: PUSH
13770: LD_INT 26
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 31
13778: PUSH
13779: LD_INT 32
13781: PUSH
13782: LD_INT 36
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 101
13809: PUSH
13810: LD_INT 102
13812: PUSH
13813: LD_INT 103
13815: PUSH
13816: LD_INT 105
13818: PUSH
13819: LD_INT 106
13821: PUSH
13822: LD_INT 108
13824: PUSH
13825: LD_INT 109
13827: PUSH
13828: LD_INT 112
13830: PUSH
13831: LD_INT 116
13833: PUSH
13834: LD_INT 117
13836: PUSH
13837: LD_INT 118
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: ST_TO_ADDR
13857: GO 16112
13859: LD_INT 9
13861: DOUBLE
13862: EQUAL
13863: IFTRUE 13867
13865: GO 14015
13867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13868: LD_ADDR_VAR 0 1
13872: PUSH
13873: LD_INT 2
13875: PUSH
13876: LD_INT 4
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: LD_INT 6
13884: PUSH
13885: LD_INT 7
13887: PUSH
13888: LD_INT 8
13890: PUSH
13891: LD_INT 11
13893: PUSH
13894: LD_INT 12
13896: PUSH
13897: LD_INT 15
13899: PUSH
13900: LD_INT 16
13902: PUSH
13903: LD_INT 20
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 22
13911: PUSH
13912: LD_INT 23
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 26
13920: PUSH
13921: LD_INT 28
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 31
13929: PUSH
13930: LD_INT 32
13932: PUSH
13933: LD_INT 36
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 101
13961: PUSH
13962: LD_INT 102
13964: PUSH
13965: LD_INT 103
13967: PUSH
13968: LD_INT 105
13970: PUSH
13971: LD_INT 106
13973: PUSH
13974: LD_INT 108
13976: PUSH
13977: LD_INT 109
13979: PUSH
13980: LD_INT 112
13982: PUSH
13983: LD_INT 114
13985: PUSH
13986: LD_INT 116
13988: PUSH
13989: LD_INT 117
13991: PUSH
13992: LD_INT 118
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: ST_TO_ADDR
14013: GO 16112
14015: LD_INT 10
14017: DOUBLE
14018: EQUAL
14019: IFTRUE 14023
14021: GO 14219
14023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 4
14034: PUSH
14035: LD_INT 5
14037: PUSH
14038: LD_INT 6
14040: PUSH
14041: LD_INT 7
14043: PUSH
14044: LD_INT 8
14046: PUSH
14047: LD_INT 9
14049: PUSH
14050: LD_INT 10
14052: PUSH
14053: LD_INT 11
14055: PUSH
14056: LD_INT 12
14058: PUSH
14059: LD_INT 13
14061: PUSH
14062: LD_INT 14
14064: PUSH
14065: LD_INT 15
14067: PUSH
14068: LD_INT 16
14070: PUSH
14071: LD_INT 17
14073: PUSH
14074: LD_INT 18
14076: PUSH
14077: LD_INT 19
14079: PUSH
14080: LD_INT 20
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_INT 23
14091: PUSH
14092: LD_INT 24
14094: PUSH
14095: LD_INT 25
14097: PUSH
14098: LD_INT 26
14100: PUSH
14101: LD_INT 28
14103: PUSH
14104: LD_INT 30
14106: PUSH
14107: LD_INT 31
14109: PUSH
14110: LD_INT 32
14112: PUSH
14113: LD_INT 36
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 103
14155: PUSH
14156: LD_INT 104
14158: PUSH
14159: LD_INT 105
14161: PUSH
14162: LD_INT 106
14164: PUSH
14165: LD_INT 107
14167: PUSH
14168: LD_INT 108
14170: PUSH
14171: LD_INT 109
14173: PUSH
14174: LD_INT 110
14176: PUSH
14177: LD_INT 111
14179: PUSH
14180: LD_INT 112
14182: PUSH
14183: LD_INT 114
14185: PUSH
14186: LD_INT 116
14188: PUSH
14189: LD_INT 117
14191: PUSH
14192: LD_INT 118
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: ST_TO_ADDR
14217: GO 16112
14219: LD_INT 11
14221: DOUBLE
14222: EQUAL
14223: IFTRUE 14227
14225: GO 14431
14227: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 4
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: LD_INT 6
14247: PUSH
14248: LD_INT 7
14250: PUSH
14251: LD_INT 8
14253: PUSH
14254: LD_INT 9
14256: PUSH
14257: LD_INT 10
14259: PUSH
14260: LD_INT 11
14262: PUSH
14263: LD_INT 12
14265: PUSH
14266: LD_INT 13
14268: PUSH
14269: LD_INT 14
14271: PUSH
14272: LD_INT 15
14274: PUSH
14275: LD_INT 16
14277: PUSH
14278: LD_INT 17
14280: PUSH
14281: LD_INT 18
14283: PUSH
14284: LD_INT 19
14286: PUSH
14287: LD_INT 20
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 22
14295: PUSH
14296: LD_INT 23
14298: PUSH
14299: LD_INT 24
14301: PUSH
14302: LD_INT 25
14304: PUSH
14305: LD_INT 26
14307: PUSH
14308: LD_INT 28
14310: PUSH
14311: LD_INT 30
14313: PUSH
14314: LD_INT 31
14316: PUSH
14317: LD_INT 32
14319: PUSH
14320: LD_INT 34
14322: PUSH
14323: LD_INT 36
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 101
14361: PUSH
14362: LD_INT 102
14364: PUSH
14365: LD_INT 103
14367: PUSH
14368: LD_INT 104
14370: PUSH
14371: LD_INT 105
14373: PUSH
14374: LD_INT 106
14376: PUSH
14377: LD_INT 107
14379: PUSH
14380: LD_INT 108
14382: PUSH
14383: LD_INT 109
14385: PUSH
14386: LD_INT 110
14388: PUSH
14389: LD_INT 111
14391: PUSH
14392: LD_INT 112
14394: PUSH
14395: LD_INT 114
14397: PUSH
14398: LD_INT 116
14400: PUSH
14401: LD_INT 117
14403: PUSH
14404: LD_INT 118
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: ST_TO_ADDR
14429: GO 16112
14431: LD_INT 12
14433: DOUBLE
14434: EQUAL
14435: IFTRUE 14439
14437: GO 14659
14439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14440: LD_ADDR_VAR 0 1
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 4
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: LD_INT 6
14462: PUSH
14463: LD_INT 7
14465: PUSH
14466: LD_INT 8
14468: PUSH
14469: LD_INT 9
14471: PUSH
14472: LD_INT 10
14474: PUSH
14475: LD_INT 11
14477: PUSH
14478: LD_INT 12
14480: PUSH
14481: LD_INT 13
14483: PUSH
14484: LD_INT 14
14486: PUSH
14487: LD_INT 15
14489: PUSH
14490: LD_INT 16
14492: PUSH
14493: LD_INT 17
14495: PUSH
14496: LD_INT 18
14498: PUSH
14499: LD_INT 19
14501: PUSH
14502: LD_INT 20
14504: PUSH
14505: LD_INT 21
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 23
14513: PUSH
14514: LD_INT 24
14516: PUSH
14517: LD_INT 25
14519: PUSH
14520: LD_INT 26
14522: PUSH
14523: LD_INT 27
14525: PUSH
14526: LD_INT 28
14528: PUSH
14529: LD_INT 30
14531: PUSH
14532: LD_INT 31
14534: PUSH
14535: LD_INT 32
14537: PUSH
14538: LD_INT 33
14540: PUSH
14541: LD_INT 34
14543: PUSH
14544: LD_INT 36
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 101
14585: PUSH
14586: LD_INT 102
14588: PUSH
14589: LD_INT 103
14591: PUSH
14592: LD_INT 104
14594: PUSH
14595: LD_INT 105
14597: PUSH
14598: LD_INT 106
14600: PUSH
14601: LD_INT 107
14603: PUSH
14604: LD_INT 108
14606: PUSH
14607: LD_INT 109
14609: PUSH
14610: LD_INT 110
14612: PUSH
14613: LD_INT 111
14615: PUSH
14616: LD_INT 112
14618: PUSH
14619: LD_INT 113
14621: PUSH
14622: LD_INT 114
14624: PUSH
14625: LD_INT 116
14627: PUSH
14628: LD_INT 117
14630: PUSH
14631: LD_INT 118
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: ST_TO_ADDR
14657: GO 16112
14659: LD_INT 13
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14875
14667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14668: LD_ADDR_VAR 0 1
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: LD_INT 2
14678: PUSH
14679: LD_INT 3
14681: PUSH
14682: LD_INT 4
14684: PUSH
14685: LD_INT 5
14687: PUSH
14688: LD_INT 8
14690: PUSH
14691: LD_INT 9
14693: PUSH
14694: LD_INT 10
14696: PUSH
14697: LD_INT 11
14699: PUSH
14700: LD_INT 12
14702: PUSH
14703: LD_INT 14
14705: PUSH
14706: LD_INT 15
14708: PUSH
14709: LD_INT 16
14711: PUSH
14712: LD_INT 17
14714: PUSH
14715: LD_INT 18
14717: PUSH
14718: LD_INT 19
14720: PUSH
14721: LD_INT 20
14723: PUSH
14724: LD_INT 21
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_INT 23
14732: PUSH
14733: LD_INT 24
14735: PUSH
14736: LD_INT 25
14738: PUSH
14739: LD_INT 26
14741: PUSH
14742: LD_INT 27
14744: PUSH
14745: LD_INT 28
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 31
14753: PUSH
14754: LD_INT 32
14756: PUSH
14757: LD_INT 33
14759: PUSH
14760: LD_INT 34
14762: PUSH
14763: LD_INT 36
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 101
14801: PUSH
14802: LD_INT 102
14804: PUSH
14805: LD_INT 103
14807: PUSH
14808: LD_INT 104
14810: PUSH
14811: LD_INT 105
14813: PUSH
14814: LD_INT 106
14816: PUSH
14817: LD_INT 107
14819: PUSH
14820: LD_INT 108
14822: PUSH
14823: LD_INT 109
14825: PUSH
14826: LD_INT 110
14828: PUSH
14829: LD_INT 111
14831: PUSH
14832: LD_INT 112
14834: PUSH
14835: LD_INT 113
14837: PUSH
14838: LD_INT 114
14840: PUSH
14841: LD_INT 116
14843: PUSH
14844: LD_INT 117
14846: PUSH
14847: LD_INT 118
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: ST_TO_ADDR
14873: GO 16112
14875: LD_INT 14
14877: DOUBLE
14878: EQUAL
14879: IFTRUE 14883
14881: GO 15107
14883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14884: LD_ADDR_VAR 0 1
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 4
14900: PUSH
14901: LD_INT 5
14903: PUSH
14904: LD_INT 6
14906: PUSH
14907: LD_INT 7
14909: PUSH
14910: LD_INT 8
14912: PUSH
14913: LD_INT 9
14915: PUSH
14916: LD_INT 10
14918: PUSH
14919: LD_INT 11
14921: PUSH
14922: LD_INT 12
14924: PUSH
14925: LD_INT 13
14927: PUSH
14928: LD_INT 14
14930: PUSH
14931: LD_INT 15
14933: PUSH
14934: LD_INT 16
14936: PUSH
14937: LD_INT 17
14939: PUSH
14940: LD_INT 18
14942: PUSH
14943: LD_INT 19
14945: PUSH
14946: LD_INT 20
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_INT 23
14957: PUSH
14958: LD_INT 24
14960: PUSH
14961: LD_INT 25
14963: PUSH
14964: LD_INT 26
14966: PUSH
14967: LD_INT 27
14969: PUSH
14970: LD_INT 28
14972: PUSH
14973: LD_INT 29
14975: PUSH
14976: LD_INT 30
14978: PUSH
14979: LD_INT 31
14981: PUSH
14982: LD_INT 32
14984: PUSH
14985: LD_INT 33
14987: PUSH
14988: LD_INT 34
14990: PUSH
14991: LD_INT 36
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 101
15033: PUSH
15034: LD_INT 102
15036: PUSH
15037: LD_INT 103
15039: PUSH
15040: LD_INT 104
15042: PUSH
15043: LD_INT 105
15045: PUSH
15046: LD_INT 106
15048: PUSH
15049: LD_INT 107
15051: PUSH
15052: LD_INT 108
15054: PUSH
15055: LD_INT 109
15057: PUSH
15058: LD_INT 110
15060: PUSH
15061: LD_INT 111
15063: PUSH
15064: LD_INT 112
15066: PUSH
15067: LD_INT 113
15069: PUSH
15070: LD_INT 114
15072: PUSH
15073: LD_INT 116
15075: PUSH
15076: LD_INT 117
15078: PUSH
15079: LD_INT 118
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: ST_TO_ADDR
15105: GO 16112
15107: LD_INT 15
15109: DOUBLE
15110: EQUAL
15111: IFTRUE 15115
15113: GO 15339
15115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: LD_INT 2
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: LD_INT 4
15132: PUSH
15133: LD_INT 5
15135: PUSH
15136: LD_INT 6
15138: PUSH
15139: LD_INT 7
15141: PUSH
15142: LD_INT 8
15144: PUSH
15145: LD_INT 9
15147: PUSH
15148: LD_INT 10
15150: PUSH
15151: LD_INT 11
15153: PUSH
15154: LD_INT 12
15156: PUSH
15157: LD_INT 13
15159: PUSH
15160: LD_INT 14
15162: PUSH
15163: LD_INT 15
15165: PUSH
15166: LD_INT 16
15168: PUSH
15169: LD_INT 17
15171: PUSH
15172: LD_INT 18
15174: PUSH
15175: LD_INT 19
15177: PUSH
15178: LD_INT 20
15180: PUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_INT 23
15189: PUSH
15190: LD_INT 24
15192: PUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 26
15198: PUSH
15199: LD_INT 27
15201: PUSH
15202: LD_INT 28
15204: PUSH
15205: LD_INT 29
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 31
15213: PUSH
15214: LD_INT 32
15216: PUSH
15217: LD_INT 33
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 36
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 113
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: LD_INT 116
15307: PUSH
15308: LD_INT 117
15310: PUSH
15311: LD_INT 118
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: ST_TO_ADDR
15337: GO 16112
15339: LD_INT 16
15341: DOUBLE
15342: EQUAL
15343: IFTRUE 15347
15345: GO 15483
15347: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15348: LD_ADDR_VAR 0 1
15352: PUSH
15353: LD_INT 2
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: LD_INT 7
15364: PUSH
15365: LD_INT 11
15367: PUSH
15368: LD_INT 12
15370: PUSH
15371: LD_INT 15
15373: PUSH
15374: LD_INT 16
15376: PUSH
15377: LD_INT 20
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 23
15388: PUSH
15389: LD_INT 25
15391: PUSH
15392: LD_INT 26
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: LD_INT 32
15403: PUSH
15404: LD_INT 33
15406: PUSH
15407: LD_INT 34
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 101
15433: PUSH
15434: LD_INT 102
15436: PUSH
15437: LD_INT 103
15439: PUSH
15440: LD_INT 106
15442: PUSH
15443: LD_INT 108
15445: PUSH
15446: LD_INT 112
15448: PUSH
15449: LD_INT 113
15451: PUSH
15452: LD_INT 114
15454: PUSH
15455: LD_INT 116
15457: PUSH
15458: LD_INT 117
15460: PUSH
15461: LD_INT 118
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: ST_TO_ADDR
15481: GO 16112
15483: LD_INT 17
15485: DOUBLE
15486: EQUAL
15487: IFTRUE 15491
15489: GO 15715
15491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15492: LD_ADDR_VAR 0 1
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: LD_INT 3
15505: PUSH
15506: LD_INT 4
15508: PUSH
15509: LD_INT 5
15511: PUSH
15512: LD_INT 6
15514: PUSH
15515: LD_INT 7
15517: PUSH
15518: LD_INT 8
15520: PUSH
15521: LD_INT 9
15523: PUSH
15524: LD_INT 10
15526: PUSH
15527: LD_INT 11
15529: PUSH
15530: LD_INT 12
15532: PUSH
15533: LD_INT 13
15535: PUSH
15536: LD_INT 14
15538: PUSH
15539: LD_INT 15
15541: PUSH
15542: LD_INT 16
15544: PUSH
15545: LD_INT 17
15547: PUSH
15548: LD_INT 18
15550: PUSH
15551: LD_INT 19
15553: PUSH
15554: LD_INT 20
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 22
15562: PUSH
15563: LD_INT 23
15565: PUSH
15566: LD_INT 24
15568: PUSH
15569: LD_INT 25
15571: PUSH
15572: LD_INT 26
15574: PUSH
15575: LD_INT 27
15577: PUSH
15578: LD_INT 28
15580: PUSH
15581: LD_INT 29
15583: PUSH
15584: LD_INT 30
15586: PUSH
15587: LD_INT 31
15589: PUSH
15590: LD_INT 32
15592: PUSH
15593: LD_INT 33
15595: PUSH
15596: LD_INT 34
15598: PUSH
15599: LD_INT 36
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 101
15641: PUSH
15642: LD_INT 102
15644: PUSH
15645: LD_INT 103
15647: PUSH
15648: LD_INT 104
15650: PUSH
15651: LD_INT 105
15653: PUSH
15654: LD_INT 106
15656: PUSH
15657: LD_INT 107
15659: PUSH
15660: LD_INT 108
15662: PUSH
15663: LD_INT 109
15665: PUSH
15666: LD_INT 110
15668: PUSH
15669: LD_INT 111
15671: PUSH
15672: LD_INT 112
15674: PUSH
15675: LD_INT 113
15677: PUSH
15678: LD_INT 114
15680: PUSH
15681: LD_INT 116
15683: PUSH
15684: LD_INT 117
15686: PUSH
15687: LD_INT 118
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: ST_TO_ADDR
15713: GO 16112
15715: LD_INT 18
15717: DOUBLE
15718: EQUAL
15719: IFTRUE 15723
15721: GO 15871
15723: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15724: LD_ADDR_VAR 0 1
15728: PUSH
15729: LD_INT 2
15731: PUSH
15732: LD_INT 4
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: LD_INT 11
15743: PUSH
15744: LD_INT 12
15746: PUSH
15747: LD_INT 15
15749: PUSH
15750: LD_INT 16
15752: PUSH
15753: LD_INT 20
15755: PUSH
15756: LD_INT 21
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 23
15764: PUSH
15765: LD_INT 25
15767: PUSH
15768: LD_INT 26
15770: PUSH
15771: LD_INT 30
15773: PUSH
15774: LD_INT 31
15776: PUSH
15777: LD_INT 32
15779: PUSH
15780: LD_INT 33
15782: PUSH
15783: LD_INT 34
15785: PUSH
15786: LD_INT 35
15788: PUSH
15789: LD_INT 36
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 101
15817: PUSH
15818: LD_INT 102
15820: PUSH
15821: LD_INT 103
15823: PUSH
15824: LD_INT 106
15826: PUSH
15827: LD_INT 108
15829: PUSH
15830: LD_INT 112
15832: PUSH
15833: LD_INT 113
15835: PUSH
15836: LD_INT 114
15838: PUSH
15839: LD_INT 115
15841: PUSH
15842: LD_INT 116
15844: PUSH
15845: LD_INT 117
15847: PUSH
15848: LD_INT 118
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: ST_TO_ADDR
15869: GO 16112
15871: LD_INT 19
15873: DOUBLE
15874: EQUAL
15875: IFTRUE 15879
15877: GO 16111
15879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15880: LD_ADDR_VAR 0 1
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 4
15896: PUSH
15897: LD_INT 5
15899: PUSH
15900: LD_INT 6
15902: PUSH
15903: LD_INT 7
15905: PUSH
15906: LD_INT 8
15908: PUSH
15909: LD_INT 9
15911: PUSH
15912: LD_INT 10
15914: PUSH
15915: LD_INT 11
15917: PUSH
15918: LD_INT 12
15920: PUSH
15921: LD_INT 13
15923: PUSH
15924: LD_INT 14
15926: PUSH
15927: LD_INT 15
15929: PUSH
15930: LD_INT 16
15932: PUSH
15933: LD_INT 17
15935: PUSH
15936: LD_INT 18
15938: PUSH
15939: LD_INT 19
15941: PUSH
15942: LD_INT 20
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 22
15950: PUSH
15951: LD_INT 23
15953: PUSH
15954: LD_INT 24
15956: PUSH
15957: LD_INT 25
15959: PUSH
15960: LD_INT 26
15962: PUSH
15963: LD_INT 27
15965: PUSH
15966: LD_INT 28
15968: PUSH
15969: LD_INT 29
15971: PUSH
15972: LD_INT 30
15974: PUSH
15975: LD_INT 31
15977: PUSH
15978: LD_INT 32
15980: PUSH
15981: LD_INT 33
15983: PUSH
15984: LD_INT 34
15986: PUSH
15987: LD_INT 35
15989: PUSH
15990: LD_INT 36
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 101
16033: PUSH
16034: LD_INT 102
16036: PUSH
16037: LD_INT 103
16039: PUSH
16040: LD_INT 104
16042: PUSH
16043: LD_INT 105
16045: PUSH
16046: LD_INT 106
16048: PUSH
16049: LD_INT 107
16051: PUSH
16052: LD_INT 108
16054: PUSH
16055: LD_INT 109
16057: PUSH
16058: LD_INT 110
16060: PUSH
16061: LD_INT 111
16063: PUSH
16064: LD_INT 112
16066: PUSH
16067: LD_INT 113
16069: PUSH
16070: LD_INT 114
16072: PUSH
16073: LD_INT 115
16075: PUSH
16076: LD_INT 116
16078: PUSH
16079: LD_INT 117
16081: PUSH
16082: LD_INT 118
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: ST_TO_ADDR
16109: GO 16112
16111: POP
// end else
16112: GO 16343
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16114: LD_ADDR_VAR 0 1
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: LD_INT 3
16127: PUSH
16128: LD_INT 4
16130: PUSH
16131: LD_INT 5
16133: PUSH
16134: LD_INT 6
16136: PUSH
16137: LD_INT 7
16139: PUSH
16140: LD_INT 8
16142: PUSH
16143: LD_INT 9
16145: PUSH
16146: LD_INT 10
16148: PUSH
16149: LD_INT 11
16151: PUSH
16152: LD_INT 12
16154: PUSH
16155: LD_INT 13
16157: PUSH
16158: LD_INT 14
16160: PUSH
16161: LD_INT 15
16163: PUSH
16164: LD_INT 16
16166: PUSH
16167: LD_INT 17
16169: PUSH
16170: LD_INT 18
16172: PUSH
16173: LD_INT 19
16175: PUSH
16176: LD_INT 20
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_INT 23
16187: PUSH
16188: LD_INT 24
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 26
16196: PUSH
16197: LD_INT 27
16199: PUSH
16200: LD_INT 28
16202: PUSH
16203: LD_INT 29
16205: PUSH
16206: LD_INT 30
16208: PUSH
16209: LD_INT 31
16211: PUSH
16212: LD_INT 32
16214: PUSH
16215: LD_INT 33
16217: PUSH
16218: LD_INT 34
16220: PUSH
16221: LD_INT 35
16223: PUSH
16224: LD_INT 36
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 101
16267: PUSH
16268: LD_INT 102
16270: PUSH
16271: LD_INT 103
16273: PUSH
16274: LD_INT 104
16276: PUSH
16277: LD_INT 105
16279: PUSH
16280: LD_INT 106
16282: PUSH
16283: LD_INT 107
16285: PUSH
16286: LD_INT 108
16288: PUSH
16289: LD_INT 109
16291: PUSH
16292: LD_INT 110
16294: PUSH
16295: LD_INT 111
16297: PUSH
16298: LD_INT 112
16300: PUSH
16301: LD_INT 113
16303: PUSH
16304: LD_INT 114
16306: PUSH
16307: LD_INT 115
16309: PUSH
16310: LD_INT 116
16312: PUSH
16313: LD_INT 117
16315: PUSH
16316: LD_INT 118
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: ST_TO_ADDR
// if result then
16343: LD_VAR 0 1
16347: IFFALSE 16636
// begin normal :=  ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_STRING 
16356: ST_TO_ADDR
// hardcore :=  ;
16357: LD_ADDR_VAR 0 4
16361: PUSH
16362: LD_STRING 
16364: ST_TO_ADDR
// for i = 1 to normalCounter do
16365: LD_ADDR_VAR 0 5
16369: PUSH
16370: DOUBLE
16371: LD_INT 1
16373: DEC
16374: ST_TO_ADDR
16375: LD_EXP 46
16379: PUSH
16380: FOR_TO
16381: IFFALSE 16482
// begin tmp := 0 ;
16383: LD_ADDR_VAR 0 2
16387: PUSH
16388: LD_STRING 0
16390: ST_TO_ADDR
// if result [ 1 ] then
16391: LD_VAR 0 1
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: IFFALSE 16464
// if result [ 1 ] [ 1 ] = i then
16401: LD_VAR 0 1
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PUSH
16410: LD_INT 1
16412: ARRAY
16413: PUSH
16414: LD_VAR 0 5
16418: EQUAL
16419: IFFALSE 16464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16421: LD_ADDR_VAR 0 1
16425: PUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_VAR 0 1
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 3
16450: PPUSH
16451: CALL_OW 1
16455: ST_TO_ADDR
// tmp := 1 ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_STRING 1
16463: ST_TO_ADDR
// end ; normal := normal & tmp ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_VAR 0 2
16478: STR
16479: ST_TO_ADDR
// end ;
16480: GO 16380
16482: POP
16483: POP
// for i = 1 to hardcoreCounter do
16484: LD_ADDR_VAR 0 5
16488: PUSH
16489: DOUBLE
16490: LD_INT 1
16492: DEC
16493: ST_TO_ADDR
16494: LD_EXP 47
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16605
// begin tmp := 0 ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_STRING 0
16509: ST_TO_ADDR
// if result [ 2 ] then
16510: LD_VAR 0 1
16514: PUSH
16515: LD_INT 2
16517: ARRAY
16518: IFFALSE 16587
// if result [ 2 ] [ 1 ] = 100 + i then
16520: LD_VAR 0 1
16524: PUSH
16525: LD_INT 2
16527: ARRAY
16528: PUSH
16529: LD_INT 1
16531: ARRAY
16532: PUSH
16533: LD_INT 100
16535: PUSH
16536: LD_VAR 0 5
16540: PLUS
16541: EQUAL
16542: IFFALSE 16587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16544: LD_ADDR_VAR 0 1
16548: PUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: LD_INT 2
16556: PPUSH
16557: LD_VAR 0 1
16561: PUSH
16562: LD_INT 2
16564: ARRAY
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: CALL_OW 3
16573: PPUSH
16574: CALL_OW 1
16578: ST_TO_ADDR
// tmp := 1 ;
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_STRING 1
16586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16587: LD_ADDR_VAR 0 4
16591: PUSH
16592: LD_VAR 0 4
16596: PUSH
16597: LD_VAR 0 2
16601: STR
16602: ST_TO_ADDR
// end ;
16603: GO 16499
16605: POP
16606: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16607: LD_STRING getStreamItemsFromMission("
16609: PUSH
16610: LD_VAR 0 3
16614: STR
16615: PUSH
16616: LD_STRING ","
16618: STR
16619: PUSH
16620: LD_VAR 0 4
16624: STR
16625: PUSH
16626: LD_STRING ")
16628: STR
16629: PPUSH
16630: CALL_OW 559
// end else
16634: GO 16643
// ToLua ( getStreamItemsFromMission("","") ) ;
16636: LD_STRING getStreamItemsFromMission("","")
16638: PPUSH
16639: CALL_OW 559
// end ;
16643: LD_VAR 0 1
16647: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16648: LD_EXP 45
16652: PUSH
16653: LD_EXP 50
16657: AND
16658: IFFALSE 16782
16660: GO 16662
16662: DISABLE
16663: LD_INT 0
16665: PPUSH
16666: PPUSH
// begin enable ;
16667: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_OWVAR 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 34
16690: PUSH
16691: LD_INT 7
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 34
16700: PUSH
16701: LD_INT 45
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 34
16710: PUSH
16711: LD_INT 28
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 34
16720: PUSH
16721: LD_INT 47
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 69
16743: ST_TO_ADDR
// if not tmp then
16744: LD_VAR 0 2
16748: NOT
16749: IFFALSE 16753
// exit ;
16751: GO 16782
// for i in tmp do
16753: LD_ADDR_VAR 0 1
16757: PUSH
16758: LD_VAR 0 2
16762: PUSH
16763: FOR_IN
16764: IFFALSE 16780
// begin SetLives ( i , 0 ) ;
16766: LD_VAR 0 1
16770: PPUSH
16771: LD_INT 0
16773: PPUSH
16774: CALL_OW 234
// end ;
16778: GO 16763
16780: POP
16781: POP
// end ;
16782: PPOPN 2
16784: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16785: LD_EXP 45
16789: PUSH
16790: LD_EXP 51
16794: AND
16795: IFFALSE 16879
16797: GO 16799
16799: DISABLE
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// begin enable ;
16804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: LD_INT 22
16812: PUSH
16813: LD_OWVAR 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 32
16824: PUSH
16825: LD_INT 3
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: ST_TO_ADDR
// if not tmp then
16841: LD_VAR 0 2
16845: NOT
16846: IFFALSE 16850
// exit ;
16848: GO 16879
// for i in tmp do
16850: LD_ADDR_VAR 0 1
16854: PUSH
16855: LD_VAR 0 2
16859: PUSH
16860: FOR_IN
16861: IFFALSE 16877
// begin SetLives ( i , 0 ) ;
16863: LD_VAR 0 1
16867: PPUSH
16868: LD_INT 0
16870: PPUSH
16871: CALL_OW 234
// end ;
16875: GO 16860
16877: POP
16878: POP
// end ;
16879: PPOPN 2
16881: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16882: LD_EXP 45
16886: PUSH
16887: LD_EXP 48
16891: AND
16892: IFFALSE 16985
16894: GO 16896
16896: DISABLE
16897: LD_INT 0
16899: PPUSH
// begin enable ;
16900: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16901: LD_ADDR_VAR 0 1
16905: PUSH
16906: LD_INT 22
16908: PUSH
16909: LD_OWVAR 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 5
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 25
16933: PUSH
16934: LD_INT 9
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 25
16943: PUSH
16944: LD_INT 8
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: PUSH
16966: FOR_IN
16967: IFFALSE 16983
// begin SetClass ( i , 1 ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: CALL_OW 336
// end ;
16981: GO 16966
16983: POP
16984: POP
// end ;
16985: PPOPN 1
16987: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16988: LD_EXP 45
16992: PUSH
16993: LD_EXP 49
16997: AND
16998: PUSH
16999: LD_OWVAR 65
17003: PUSH
17004: LD_INT 7
17006: LESS
17007: AND
17008: IFFALSE 17022
17010: GO 17012
17012: DISABLE
// begin enable ;
17013: ENABLE
// game_speed := 7 ;
17014: LD_ADDR_OWVAR 65
17018: PUSH
17019: LD_INT 7
17021: ST_TO_ADDR
// end ;
17022: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17023: LD_EXP 45
17027: PUSH
17028: LD_EXP 52
17032: AND
17033: IFFALSE 17235
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: LD_INT 81
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 21
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 69
17078: ST_TO_ADDR
// if not tmp then
17079: LD_VAR 0 3
17083: NOT
17084: IFFALSE 17088
// exit ;
17086: GO 17235
// if tmp > 5 then
17088: LD_VAR 0 3
17092: PUSH
17093: LD_INT 5
17095: GREATER
17096: IFFALSE 17108
// k := 5 else
17098: LD_ADDR_VAR 0 2
17102: PUSH
17103: LD_INT 5
17105: ST_TO_ADDR
17106: GO 17118
// k := tmp ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_VAR 0 3
17117: ST_TO_ADDR
// for i := 1 to k do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: DOUBLE
17124: LD_INT 1
17126: DEC
17127: ST_TO_ADDR
17128: LD_VAR 0 2
17132: PUSH
17133: FOR_TO
17134: IFFALSE 17233
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17136: LD_VAR 0 3
17140: PUSH
17141: LD_VAR 0 1
17145: ARRAY
17146: PPUSH
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 4
17154: MOD
17155: PUSH
17156: LD_INT 1
17158: PLUS
17159: PPUSH
17160: CALL_OW 259
17164: PUSH
17165: LD_INT 10
17167: LESS
17168: IFFALSE 17231
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17170: LD_VAR 0 3
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: PPUSH
17181: LD_VAR 0 1
17185: PUSH
17186: LD_INT 4
17188: MOD
17189: PUSH
17190: LD_INT 1
17192: PLUS
17193: PPUSH
17194: LD_VAR 0 3
17198: PUSH
17199: LD_VAR 0 1
17203: ARRAY
17204: PPUSH
17205: LD_VAR 0 1
17209: PUSH
17210: LD_INT 4
17212: MOD
17213: PUSH
17214: LD_INT 1
17216: PLUS
17217: PPUSH
17218: CALL_OW 259
17222: PUSH
17223: LD_INT 1
17225: PLUS
17226: PPUSH
17227: CALL_OW 237
17231: GO 17133
17233: POP
17234: POP
// end ;
17235: PPOPN 3
17237: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17238: LD_EXP 45
17242: PUSH
17243: LD_EXP 53
17247: AND
17248: IFFALSE 17268
17250: GO 17252
17252: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17253: LD_INT 4
17255: PPUSH
17256: LD_OWVAR 2
17260: PPUSH
17261: LD_INT 0
17263: PPUSH
17264: CALL_OW 324
17268: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17269: LD_EXP 45
17273: PUSH
17274: LD_EXP 82
17278: AND
17279: IFFALSE 17299
17281: GO 17283
17283: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17284: LD_INT 19
17286: PPUSH
17287: LD_OWVAR 2
17291: PPUSH
17292: LD_INT 0
17294: PPUSH
17295: CALL_OW 324
17299: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17300: LD_EXP 45
17304: PUSH
17305: LD_EXP 54
17309: AND
17310: IFFALSE 17412
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
// begin enable ;
17319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 34
17342: PUSH
17343: LD_INT 11
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 34
17352: PUSH
17353: LD_INT 30
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: ST_TO_ADDR
// if not tmp then
17374: LD_VAR 0 2
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17412
// for i in tmp do
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_VAR 0 2
17392: PUSH
17393: FOR_IN
17394: IFFALSE 17410
// begin SetLives ( i , 0 ) ;
17396: LD_VAR 0 1
17400: PPUSH
17401: LD_INT 0
17403: PPUSH
17404: CALL_OW 234
// end ;
17408: GO 17393
17410: POP
17411: POP
// end ;
17412: PPOPN 2
17414: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17415: LD_EXP 45
17419: PUSH
17420: LD_EXP 55
17424: AND
17425: IFFALSE 17445
17427: GO 17429
17429: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17430: LD_INT 32
17432: PPUSH
17433: LD_OWVAR 2
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: CALL_OW 324
17445: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17446: LD_EXP 45
17450: PUSH
17451: LD_EXP 56
17455: AND
17456: IFFALSE 17637
17458: GO 17460
17460: DISABLE
17461: LD_INT 0
17463: PPUSH
17464: PPUSH
17465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 22
17473: PUSH
17474: LD_OWVAR 2
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 33
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: ST_TO_ADDR
// if not tmp then
17502: LD_VAR 0 2
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17637
// side := 0 ;
17511: LD_ADDR_VAR 0 3
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// for i := 1 to 8 do
17519: LD_ADDR_VAR 0 1
17523: PUSH
17524: DOUBLE
17525: LD_INT 1
17527: DEC
17528: ST_TO_ADDR
17529: LD_INT 8
17531: PUSH
17532: FOR_TO
17533: IFFALSE 17581
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17535: LD_OWVAR 2
17539: PUSH
17540: LD_VAR 0 1
17544: NONEQUAL
17545: PUSH
17546: LD_OWVAR 2
17550: PPUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 81
17560: PUSH
17561: LD_INT 2
17563: EQUAL
17564: AND
17565: IFFALSE 17579
// begin side := i ;
17567: LD_ADDR_VAR 0 3
17571: PUSH
17572: LD_VAR 0 1
17576: ST_TO_ADDR
// break ;
17577: GO 17581
// end ;
17579: GO 17532
17581: POP
17582: POP
// if not side then
17583: LD_VAR 0 3
17587: NOT
17588: IFFALSE 17592
// exit ;
17590: GO 17637
// for i := 1 to tmp do
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_VAR 0 2
17606: PUSH
17607: FOR_TO
17608: IFFALSE 17635
// if Prob ( 60 ) then
17610: LD_INT 60
17612: PPUSH
17613: CALL_OW 13
17617: IFFALSE 17633
// SetSide ( i , side ) ;
17619: LD_VAR 0 1
17623: PPUSH
17624: LD_VAR 0 3
17628: PPUSH
17629: CALL_OW 235
17633: GO 17607
17635: POP
17636: POP
// end ;
17637: PPOPN 3
17639: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17640: LD_EXP 45
17644: PUSH
17645: LD_EXP 58
17649: AND
17650: IFFALSE 17769
17652: GO 17654
17654: DISABLE
17655: LD_INT 0
17657: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17658: LD_ADDR_VAR 0 1
17662: PUSH
17663: LD_INT 22
17665: PUSH
17666: LD_OWVAR 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 21
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: LD_INT 23
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: PPUSH
17707: CALL_OW 69
17711: PUSH
17712: FOR_IN
17713: IFFALSE 17767
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 257
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 3
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: IN
17743: IFFALSE 17765
// SetClass ( un , rand ( 1 , 4 ) ) ;
17745: LD_VAR 0 1
17749: PPUSH
17750: LD_INT 1
17752: PPUSH
17753: LD_INT 4
17755: PPUSH
17756: CALL_OW 12
17760: PPUSH
17761: CALL_OW 336
17765: GO 17712
17767: POP
17768: POP
// end ;
17769: PPOPN 1
17771: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17772: LD_EXP 45
17776: PUSH
17777: LD_EXP 57
17781: AND
17782: IFFALSE 17861
17784: GO 17786
17786: DISABLE
17787: LD_INT 0
17789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17790: LD_ADDR_VAR 0 1
17794: PUSH
17795: LD_INT 22
17797: PUSH
17798: LD_OWVAR 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 21
17809: PUSH
17810: LD_INT 3
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PPUSH
17821: CALL_OW 69
17825: ST_TO_ADDR
// if not tmp then
17826: LD_VAR 0 1
17830: NOT
17831: IFFALSE 17835
// exit ;
17833: GO 17861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17835: LD_VAR 0 1
17839: PUSH
17840: LD_INT 1
17842: PPUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 12
17852: ARRAY
17853: PPUSH
17854: LD_INT 100
17856: PPUSH
17857: CALL_OW 234
// end ;
17861: PPOPN 1
17863: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17864: LD_EXP 45
17868: PUSH
17869: LD_EXP 59
17873: AND
17874: IFFALSE 17972
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: LD_INT 22
17889: PUSH
17890: LD_OWVAR 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 21
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: ST_TO_ADDR
// if not tmp then
17918: LD_VAR 0 1
17922: NOT
17923: IFFALSE 17927
// exit ;
17925: GO 17972
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17927: LD_VAR 0 1
17931: PUSH
17932: LD_INT 1
17934: PPUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 12
17944: ARRAY
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: LD_INT 4
17951: PPUSH
17952: CALL_OW 12
17956: PPUSH
17957: LD_INT 3000
17959: PPUSH
17960: LD_INT 9000
17962: PPUSH
17963: CALL_OW 12
17967: PPUSH
17968: CALL_OW 492
// end ;
17972: PPOPN 1
17974: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17975: LD_EXP 45
17979: PUSH
17980: LD_EXP 60
17984: AND
17985: IFFALSE 18005
17987: GO 17989
17989: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17990: LD_INT 1
17992: PPUSH
17993: LD_OWVAR 2
17997: PPUSH
17998: LD_INT 0
18000: PPUSH
18001: CALL_OW 324
18005: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18006: LD_EXP 45
18010: PUSH
18011: LD_EXP 61
18015: AND
18016: IFFALSE 18099
18018: GO 18020
18020: DISABLE
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18025: LD_ADDR_VAR 0 2
18029: PUSH
18030: LD_INT 22
18032: PUSH
18033: LD_OWVAR 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 21
18044: PUSH
18045: LD_INT 3
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 69
18060: ST_TO_ADDR
// if not tmp then
18061: LD_VAR 0 2
18065: NOT
18066: IFFALSE 18070
// exit ;
18068: GO 18099
// for i in tmp do
18070: LD_ADDR_VAR 0 1
18074: PUSH
18075: LD_VAR 0 2
18079: PUSH
18080: FOR_IN
18081: IFFALSE 18097
// SetBLevel ( i , 10 ) ;
18083: LD_VAR 0 1
18087: PPUSH
18088: LD_INT 10
18090: PPUSH
18091: CALL_OW 241
18095: GO 18080
18097: POP
18098: POP
// end ;
18099: PPOPN 2
18101: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18102: LD_EXP 45
18106: PUSH
18107: LD_EXP 62
18111: AND
18112: IFFALSE 18223
18114: GO 18116
18116: DISABLE
18117: LD_INT 0
18119: PPUSH
18120: PPUSH
18121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18122: LD_ADDR_VAR 0 3
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_OWVAR 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 25
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: ST_TO_ADDR
// if not tmp then
18158: LD_VAR 0 3
18162: NOT
18163: IFFALSE 18167
// exit ;
18165: GO 18223
// un := tmp [ rand ( 1 , tmp ) ] ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_VAR 0 3
18176: PUSH
18177: LD_INT 1
18179: PPUSH
18180: LD_VAR 0 3
18184: PPUSH
18185: CALL_OW 12
18189: ARRAY
18190: ST_TO_ADDR
// if Crawls ( un ) then
18191: LD_VAR 0 2
18195: PPUSH
18196: CALL_OW 318
18200: IFFALSE 18211
// ComWalk ( un ) ;
18202: LD_VAR 0 2
18206: PPUSH
18207: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18211: LD_VAR 0 2
18215: PPUSH
18216: LD_INT 5
18218: PPUSH
18219: CALL_OW 336
// end ;
18223: PPOPN 3
18225: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18226: LD_EXP 45
18230: PUSH
18231: LD_EXP 63
18235: AND
18236: PUSH
18237: LD_OWVAR 67
18241: PUSH
18242: LD_INT 4
18244: LESS
18245: AND
18246: IFFALSE 18265
18248: GO 18250
18250: DISABLE
// begin Difficulty := Difficulty + 1 ;
18251: LD_ADDR_OWVAR 67
18255: PUSH
18256: LD_OWVAR 67
18260: PUSH
18261: LD_INT 1
18263: PLUS
18264: ST_TO_ADDR
// end ;
18265: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18266: LD_EXP 45
18270: PUSH
18271: LD_EXP 64
18275: AND
18276: IFFALSE 18379
18278: GO 18280
18280: DISABLE
18281: LD_INT 0
18283: PPUSH
// begin for i := 1 to 5 do
18284: LD_ADDR_VAR 0 1
18288: PUSH
18289: DOUBLE
18290: LD_INT 1
18292: DEC
18293: ST_TO_ADDR
18294: LD_INT 5
18296: PUSH
18297: FOR_TO
18298: IFFALSE 18377
// begin uc_nation := nation_nature ;
18300: LD_ADDR_OWVAR 21
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// uc_side := 0 ;
18308: LD_ADDR_OWVAR 20
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18316: LD_ADDR_OWVAR 29
18320: PUSH
18321: LD_INT 12
18323: PUSH
18324: LD_INT 12
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: ST_TO_ADDR
// hc_agressivity := 20 ;
18331: LD_ADDR_OWVAR 35
18335: PUSH
18336: LD_INT 20
18338: ST_TO_ADDR
// hc_class := class_tiger ;
18339: LD_ADDR_OWVAR 28
18343: PUSH
18344: LD_INT 14
18346: ST_TO_ADDR
// hc_gallery :=  ;
18347: LD_ADDR_OWVAR 33
18351: PUSH
18352: LD_STRING 
18354: ST_TO_ADDR
// hc_name :=  ;
18355: LD_ADDR_OWVAR 26
18359: PUSH
18360: LD_STRING 
18362: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18363: CALL_OW 44
18367: PPUSH
18368: LD_INT 0
18370: PPUSH
18371: CALL_OW 51
// end ;
18375: GO 18297
18377: POP
18378: POP
// end ;
18379: PPOPN 1
18381: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18382: LD_EXP 45
18386: PUSH
18387: LD_EXP 65
18391: AND
18392: IFFALSE 18401
18394: GO 18396
18396: DISABLE
// StreamSibBomb ;
18397: CALL 18402 0 0
18401: END
// export function StreamSibBomb ; var i , x , y ; begin
18402: LD_INT 0
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
// result := false ;
18408: LD_ADDR_VAR 0 1
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// for i := 1 to 16 do
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: DOUBLE
18422: LD_INT 1
18424: DEC
18425: ST_TO_ADDR
18426: LD_INT 16
18428: PUSH
18429: FOR_TO
18430: IFFALSE 18629
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18432: LD_ADDR_VAR 0 3
18436: PUSH
18437: LD_INT 10
18439: PUSH
18440: LD_INT 20
18442: PUSH
18443: LD_INT 30
18445: PUSH
18446: LD_INT 40
18448: PUSH
18449: LD_INT 50
18451: PUSH
18452: LD_INT 60
18454: PUSH
18455: LD_INT 70
18457: PUSH
18458: LD_INT 80
18460: PUSH
18461: LD_INT 90
18463: PUSH
18464: LD_INT 100
18466: PUSH
18467: LD_INT 110
18469: PUSH
18470: LD_INT 120
18472: PUSH
18473: LD_INT 130
18475: PUSH
18476: LD_INT 140
18478: PUSH
18479: LD_INT 150
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 15
18504: PPUSH
18505: CALL_OW 12
18509: ARRAY
18510: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18511: LD_ADDR_VAR 0 4
18515: PUSH
18516: LD_INT 10
18518: PUSH
18519: LD_INT 20
18521: PUSH
18522: LD_INT 30
18524: PUSH
18525: LD_INT 40
18527: PUSH
18528: LD_INT 50
18530: PUSH
18531: LD_INT 60
18533: PUSH
18534: LD_INT 70
18536: PUSH
18537: LD_INT 80
18539: PUSH
18540: LD_INT 90
18542: PUSH
18543: LD_INT 100
18545: PUSH
18546: LD_INT 110
18548: PUSH
18549: LD_INT 120
18551: PUSH
18552: LD_INT 130
18554: PUSH
18555: LD_INT 140
18557: PUSH
18558: LD_INT 150
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PPUSH
18581: LD_INT 15
18583: PPUSH
18584: CALL_OW 12
18588: ARRAY
18589: ST_TO_ADDR
// if ValidHex ( x , y ) then
18590: LD_VAR 0 3
18594: PPUSH
18595: LD_VAR 0 4
18599: PPUSH
18600: CALL_OW 488
18604: IFFALSE 18627
// begin result := [ x , y ] ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 4
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: ST_TO_ADDR
// break ;
18625: GO 18629
// end ; end ;
18627: GO 18429
18629: POP
18630: POP
// if result then
18631: LD_VAR 0 1
18635: IFFALSE 18695
// begin ToLua ( playSibBomb() ) ;
18637: LD_STRING playSibBomb()
18639: PPUSH
18640: CALL_OW 559
// wait ( 0 0$14 ) ;
18644: LD_INT 490
18646: PPUSH
18647: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: LD_VAR 0 1
18664: PUSH
18665: LD_INT 2
18667: ARRAY
18668: PPUSH
18669: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18673: LD_VAR 0 1
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: PPUSH
18682: LD_VAR 0 1
18686: PUSH
18687: LD_INT 2
18689: ARRAY
18690: PPUSH
18691: CALL_OW 429
// end ; end ;
18695: LD_VAR 0 1
18699: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18700: LD_EXP 45
18704: PUSH
18705: LD_EXP 67
18709: AND
18710: IFFALSE 18722
18712: GO 18714
18714: DISABLE
// YouLost (  ) ;
18715: LD_STRING 
18717: PPUSH
18718: CALL_OW 104
18722: END
// every 0 0$1 trigger StreamModeActive and sFog do
18723: LD_EXP 45
18727: PUSH
18728: LD_EXP 66
18732: AND
18733: IFFALSE 18747
18735: GO 18737
18737: DISABLE
// FogOff ( your_side ) ;
18738: LD_OWVAR 2
18742: PPUSH
18743: CALL_OW 344
18747: END
// every 0 0$1 trigger StreamModeActive and sSun do
18748: LD_EXP 45
18752: PUSH
18753: LD_EXP 68
18757: AND
18758: IFFALSE 18786
18760: GO 18762
18762: DISABLE
// begin solar_recharge_percent := 0 ;
18763: LD_ADDR_OWVAR 79
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18771: LD_INT 10500
18773: PPUSH
18774: CALL_OW 67
// solar_recharge_percent := 100 ;
18778: LD_ADDR_OWVAR 79
18782: PUSH
18783: LD_INT 100
18785: ST_TO_ADDR
// end ;
18786: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18787: LD_EXP 45
18791: PUSH
18792: LD_EXP 69
18796: AND
18797: IFFALSE 19036
18799: GO 18801
18801: DISABLE
18802: LD_INT 0
18804: PPUSH
18805: PPUSH
18806: PPUSH
// begin tmp := [ ] ;
18807: LD_ADDR_VAR 0 3
18811: PUSH
18812: EMPTY
18813: ST_TO_ADDR
// for i := 1 to 6 do
18814: LD_ADDR_VAR 0 1
18818: PUSH
18819: DOUBLE
18820: LD_INT 1
18822: DEC
18823: ST_TO_ADDR
18824: LD_INT 6
18826: PUSH
18827: FOR_TO
18828: IFFALSE 18933
// begin uc_nation := nation_nature ;
18830: LD_ADDR_OWVAR 21
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// uc_side := 0 ;
18838: LD_ADDR_OWVAR 20
18842: PUSH
18843: LD_INT 0
18845: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18846: LD_ADDR_OWVAR 29
18850: PUSH
18851: LD_INT 12
18853: PUSH
18854: LD_INT 12
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: ST_TO_ADDR
// hc_agressivity := 20 ;
18861: LD_ADDR_OWVAR 35
18865: PUSH
18866: LD_INT 20
18868: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18869: LD_ADDR_OWVAR 28
18873: PUSH
18874: LD_INT 17
18876: ST_TO_ADDR
// hc_gallery :=  ;
18877: LD_ADDR_OWVAR 33
18881: PUSH
18882: LD_STRING 
18884: ST_TO_ADDR
// hc_name :=  ;
18885: LD_ADDR_OWVAR 26
18889: PUSH
18890: LD_STRING 
18892: ST_TO_ADDR
// un := CreateHuman ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: CALL_OW 44
18902: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18903: LD_VAR 0 2
18907: PPUSH
18908: LD_INT 1
18910: PPUSH
18911: CALL_OW 51
// tmp := tmp ^ un ;
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_VAR 0 3
18924: PUSH
18925: LD_VAR 0 2
18929: ADD
18930: ST_TO_ADDR
// end ;
18931: GO 18827
18933: POP
18934: POP
// repeat wait ( 0 0$1 ) ;
18935: LD_INT 35
18937: PPUSH
18938: CALL_OW 67
// for un in tmp do
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_VAR 0 3
18951: PUSH
18952: FOR_IN
18953: IFFALSE 19027
// begin if IsDead ( un ) then
18955: LD_VAR 0 2
18959: PPUSH
18960: CALL_OW 301
18964: IFFALSE 18984
// begin tmp := tmp diff un ;
18966: LD_ADDR_VAR 0 3
18970: PUSH
18971: LD_VAR 0 3
18975: PUSH
18976: LD_VAR 0 2
18980: DIFF
18981: ST_TO_ADDR
// continue ;
18982: GO 18952
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18984: LD_VAR 0 2
18988: PPUSH
18989: LD_INT 3
18991: PUSH
18992: LD_INT 22
18994: PUSH
18995: LD_INT 0
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: PPUSH
19011: LD_VAR 0 2
19015: PPUSH
19016: CALL_OW 74
19020: PPUSH
19021: CALL_OW 115
// end ;
19025: GO 18952
19027: POP
19028: POP
// until not tmp ;
19029: LD_VAR 0 3
19033: NOT
19034: IFFALSE 18935
// end ;
19036: PPOPN 3
19038: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19039: LD_EXP 45
19043: PUSH
19044: LD_EXP 70
19048: AND
19049: IFFALSE 19103
19051: GO 19053
19053: DISABLE
// begin ToLua ( displayTroll(); ) ;
19054: LD_STRING displayTroll();
19056: PPUSH
19057: CALL_OW 559
// wait ( 3 3$00 ) ;
19061: LD_INT 6300
19063: PPUSH
19064: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19068: LD_STRING hideTroll();
19070: PPUSH
19071: CALL_OW 559
// wait ( 1 1$00 ) ;
19075: LD_INT 2100
19077: PPUSH
19078: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19082: LD_STRING displayTroll();
19084: PPUSH
19085: CALL_OW 559
// wait ( 1 1$00 ) ;
19089: LD_INT 2100
19091: PPUSH
19092: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19096: LD_STRING hideTroll();
19098: PPUSH
19099: CALL_OW 559
// end ;
19103: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19104: LD_EXP 45
19108: PUSH
19109: LD_EXP 71
19113: AND
19114: IFFALSE 19177
19116: GO 19118
19118: DISABLE
19119: LD_INT 0
19121: PPUSH
// begin p := 0 ;
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_INT 0
19129: ST_TO_ADDR
// repeat game_speed := 1 ;
19130: LD_ADDR_OWVAR 65
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19138: LD_INT 35
19140: PPUSH
19141: CALL_OW 67
// p := p + 1 ;
19145: LD_ADDR_VAR 0 1
19149: PUSH
19150: LD_VAR 0 1
19154: PUSH
19155: LD_INT 1
19157: PLUS
19158: ST_TO_ADDR
// until p >= 60 ;
19159: LD_VAR 0 1
19163: PUSH
19164: LD_INT 60
19166: GREATEREQUAL
19167: IFFALSE 19130
// game_speed := 4 ;
19169: LD_ADDR_OWVAR 65
19173: PUSH
19174: LD_INT 4
19176: ST_TO_ADDR
// end ;
19177: PPOPN 1
19179: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19180: LD_EXP 45
19184: PUSH
19185: LD_EXP 72
19189: AND
19190: IFFALSE 19336
19192: GO 19194
19194: DISABLE
19195: LD_INT 0
19197: PPUSH
19198: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19199: LD_ADDR_VAR 0 1
19203: PUSH
19204: LD_INT 22
19206: PUSH
19207: LD_OWVAR 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 30
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 30
19231: PUSH
19232: LD_INT 1
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 69
19252: ST_TO_ADDR
// if not depot then
19253: LD_VAR 0 1
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19336
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19262: LD_ADDR_VAR 0 2
19266: PUSH
19267: LD_VAR 0 1
19271: PUSH
19272: LD_INT 1
19274: PPUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 12
19284: ARRAY
19285: PPUSH
19286: CALL_OW 274
19290: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19291: LD_VAR 0 2
19295: PPUSH
19296: LD_INT 1
19298: PPUSH
19299: LD_INT 0
19301: PPUSH
19302: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19306: LD_VAR 0 2
19310: PPUSH
19311: LD_INT 2
19313: PPUSH
19314: LD_INT 0
19316: PPUSH
19317: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19321: LD_VAR 0 2
19325: PPUSH
19326: LD_INT 3
19328: PPUSH
19329: LD_INT 0
19331: PPUSH
19332: CALL_OW 277
// end ;
19336: PPOPN 2
19338: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19339: LD_EXP 45
19343: PUSH
19344: LD_EXP 73
19348: AND
19349: IFFALSE 19446
19351: GO 19353
19353: DISABLE
19354: LD_INT 0
19356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19357: LD_ADDR_VAR 0 1
19361: PUSH
19362: LD_INT 22
19364: PUSH
19365: LD_OWVAR 2
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 21
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 3
19386: PUSH
19387: LD_INT 23
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 69
19410: ST_TO_ADDR
// if not tmp then
19411: LD_VAR 0 1
19415: NOT
19416: IFFALSE 19420
// exit ;
19418: GO 19446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19420: LD_VAR 0 1
19424: PUSH
19425: LD_INT 1
19427: PPUSH
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 12
19437: ARRAY
19438: PPUSH
19439: LD_INT 200
19441: PPUSH
19442: CALL_OW 234
// end ;
19446: PPOPN 1
19448: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19449: LD_EXP 45
19453: PUSH
19454: LD_EXP 74
19458: AND
19459: IFFALSE 19538
19461: GO 19463
19463: DISABLE
19464: LD_INT 0
19466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_OWVAR 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 21
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: ST_TO_ADDR
// if not tmp then
19503: LD_VAR 0 1
19507: NOT
19508: IFFALSE 19512
// exit ;
19510: GO 19538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19512: LD_VAR 0 1
19516: PUSH
19517: LD_INT 1
19519: PPUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 12
19529: ARRAY
19530: PPUSH
19531: LD_INT 60
19533: PPUSH
19534: CALL_OW 234
// end ;
19538: PPOPN 1
19540: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19541: LD_EXP 45
19545: PUSH
19546: LD_EXP 75
19550: AND
19551: IFFALSE 19650
19553: GO 19555
19555: DISABLE
19556: LD_INT 0
19558: PPUSH
19559: PPUSH
// begin enable ;
19560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19561: LD_ADDR_VAR 0 1
19565: PUSH
19566: LD_INT 22
19568: PUSH
19569: LD_OWVAR 2
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 61
19580: PUSH
19581: EMPTY
19582: LIST
19583: PUSH
19584: LD_INT 33
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: ST_TO_ADDR
// if not tmp then
19604: LD_VAR 0 1
19608: NOT
19609: IFFALSE 19613
// exit ;
19611: GO 19650
// for i in tmp do
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_VAR 0 1
19622: PUSH
19623: FOR_IN
19624: IFFALSE 19648
// if IsControledBy ( i ) then
19626: LD_VAR 0 2
19630: PPUSH
19631: CALL_OW 312
19635: IFFALSE 19646
// ComUnlink ( i ) ;
19637: LD_VAR 0 2
19641: PPUSH
19642: CALL_OW 136
19646: GO 19623
19648: POP
19649: POP
// end ;
19650: PPOPN 2
19652: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19653: LD_EXP 45
19657: PUSH
19658: LD_EXP 76
19662: AND
19663: IFFALSE 19803
19665: GO 19667
19667: DISABLE
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
// begin ToLua ( displayPowell(); ) ;
19672: LD_STRING displayPowell();
19674: PPUSH
19675: CALL_OW 559
// uc_side := 0 ;
19679: LD_ADDR_OWVAR 20
19683: PUSH
19684: LD_INT 0
19686: ST_TO_ADDR
// uc_nation := 2 ;
19687: LD_ADDR_OWVAR 21
19691: PUSH
19692: LD_INT 2
19694: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19695: LD_ADDR_OWVAR 37
19699: PUSH
19700: LD_INT 14
19702: ST_TO_ADDR
// vc_engine := engine_siberite ;
19703: LD_ADDR_OWVAR 39
19707: PUSH
19708: LD_INT 3
19710: ST_TO_ADDR
// vc_control := control_apeman ;
19711: LD_ADDR_OWVAR 38
19715: PUSH
19716: LD_INT 5
19718: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19719: LD_ADDR_OWVAR 40
19723: PUSH
19724: LD_INT 29
19726: ST_TO_ADDR
// un := CreateVehicle ;
19727: LD_ADDR_VAR 0 2
19731: PUSH
19732: CALL_OW 45
19736: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19737: LD_VAR 0 2
19741: PPUSH
19742: LD_INT 1
19744: PPUSH
19745: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19749: LD_INT 35
19751: PPUSH
19752: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19756: LD_VAR 0 2
19760: PPUSH
19761: LD_INT 22
19763: PUSH
19764: LD_OWVAR 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PPUSH
19773: CALL_OW 69
19777: PPUSH
19778: LD_VAR 0 2
19782: PPUSH
19783: CALL_OW 74
19787: PPUSH
19788: CALL_OW 115
// until IsDead ( un ) ;
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL_OW 301
19801: IFFALSE 19749
// end ;
19803: PPOPN 2
19805: END
// every 0 0$1 trigger StreamModeActive and sStu do
19806: LD_EXP 45
19810: PUSH
19811: LD_EXP 84
19815: AND
19816: IFFALSE 19832
19818: GO 19820
19820: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19821: LD_STRING displayStucuk();
19823: PPUSH
19824: CALL_OW 559
// ResetFog ;
19828: CALL_OW 335
// end ;
19832: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19833: LD_EXP 45
19837: PUSH
19838: LD_EXP 77
19842: AND
19843: IFFALSE 19984
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_INT 22
19859: PUSH
19860: LD_OWVAR 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 21
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 69
19887: ST_TO_ADDR
// if not tmp then
19888: LD_VAR 0 2
19892: NOT
19893: IFFALSE 19897
// exit ;
19895: GO 19984
// un := tmp [ rand ( 1 , tmp ) ] ;
19897: LD_ADDR_VAR 0 1
19901: PUSH
19902: LD_VAR 0 2
19906: PUSH
19907: LD_INT 1
19909: PPUSH
19910: LD_VAR 0 2
19914: PPUSH
19915: CALL_OW 12
19919: ARRAY
19920: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19933: LD_VAR 0 1
19937: PPUSH
19938: LD_OWVAR 3
19942: PUSH
19943: LD_VAR 0 1
19947: DIFF
19948: PPUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 74
19958: PPUSH
19959: CALL_OW 115
// wait ( 0 0$20 ) ;
19963: LD_INT 700
19965: PPUSH
19966: CALL_OW 67
// SetSide ( un , your_side ) ;
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_OWVAR 2
19979: PPUSH
19980: CALL_OW 235
// end ;
19984: PPOPN 2
19986: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19987: LD_EXP 45
19991: PUSH
19992: LD_EXP 78
19996: AND
19997: IFFALSE 20103
19999: GO 20001
20001: DISABLE
20002: LD_INT 0
20004: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20005: LD_ADDR_VAR 0 1
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_OWVAR 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 30
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 30
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 69
20058: ST_TO_ADDR
// if not depot then
20059: LD_VAR 0 1
20063: NOT
20064: IFFALSE 20068
// exit ;
20066: GO 20103
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20068: LD_VAR 0 1
20072: PUSH
20073: LD_INT 1
20075: ARRAY
20076: PPUSH
20077: CALL_OW 250
20081: PPUSH
20082: LD_VAR 0 1
20086: PUSH
20087: LD_INT 1
20089: ARRAY
20090: PPUSH
20091: CALL_OW 251
20095: PPUSH
20096: LD_INT 70
20098: PPUSH
20099: CALL_OW 495
// end ;
20103: PPOPN 1
20105: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20106: LD_EXP 45
20110: PUSH
20111: LD_EXP 79
20115: AND
20116: IFFALSE 20327
20118: GO 20120
20120: DISABLE
20121: LD_INT 0
20123: PPUSH
20124: PPUSH
20125: PPUSH
20126: PPUSH
20127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20128: LD_ADDR_VAR 0 5
20132: PUSH
20133: LD_INT 22
20135: PUSH
20136: LD_OWVAR 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 21
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: ST_TO_ADDR
// if not tmp then
20164: LD_VAR 0 5
20168: NOT
20169: IFFALSE 20173
// exit ;
20171: GO 20327
// for i in tmp do
20173: LD_ADDR_VAR 0 1
20177: PUSH
20178: LD_VAR 0 5
20182: PUSH
20183: FOR_IN
20184: IFFALSE 20325
// begin d := rand ( 0 , 5 ) ;
20186: LD_ADDR_VAR 0 4
20190: PUSH
20191: LD_INT 0
20193: PPUSH
20194: LD_INT 5
20196: PPUSH
20197: CALL_OW 12
20201: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20202: LD_ADDR_VAR 0 2
20206: PUSH
20207: LD_VAR 0 1
20211: PPUSH
20212: CALL_OW 250
20216: PPUSH
20217: LD_VAR 0 4
20221: PPUSH
20222: LD_INT 3
20224: PPUSH
20225: LD_INT 12
20227: PPUSH
20228: CALL_OW 12
20232: PPUSH
20233: CALL_OW 272
20237: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_VAR 0 1
20247: PPUSH
20248: CALL_OW 251
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: LD_INT 3
20260: PPUSH
20261: LD_INT 12
20263: PPUSH
20264: CALL_OW 12
20268: PPUSH
20269: CALL_OW 273
20273: ST_TO_ADDR
// if ValidHex ( x , y ) then
20274: LD_VAR 0 2
20278: PPUSH
20279: LD_VAR 0 3
20283: PPUSH
20284: CALL_OW 488
20288: IFFALSE 20323
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20290: LD_VAR 0 1
20294: PPUSH
20295: LD_VAR 0 2
20299: PPUSH
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 3
20307: PPUSH
20308: LD_INT 6
20310: PPUSH
20311: CALL_OW 12
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 483
// end ;
20323: GO 20183
20325: POP
20326: POP
// end ;
20327: PPOPN 5
20329: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20330: LD_EXP 45
20334: PUSH
20335: LD_EXP 80
20339: AND
20340: IFFALSE 20434
20342: GO 20344
20344: DISABLE
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_INT 22
20356: PUSH
20357: LD_OWVAR 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 32
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 21
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: PPUSH
20391: CALL_OW 69
20395: ST_TO_ADDR
// if not tmp then
20396: LD_VAR 0 2
20400: NOT
20401: IFFALSE 20405
// exit ;
20403: GO 20434
// for i in tmp do
20405: LD_ADDR_VAR 0 1
20409: PUSH
20410: LD_VAR 0 2
20414: PUSH
20415: FOR_IN
20416: IFFALSE 20432
// SetFuel ( i , 0 ) ;
20418: LD_VAR 0 1
20422: PPUSH
20423: LD_INT 0
20425: PPUSH
20426: CALL_OW 240
20430: GO 20415
20432: POP
20433: POP
// end ;
20434: PPOPN 2
20436: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20437: LD_EXP 45
20441: PUSH
20442: LD_EXP 81
20446: AND
20447: IFFALSE 20513
20449: GO 20451
20451: DISABLE
20452: LD_INT 0
20454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20455: LD_ADDR_VAR 0 1
20459: PUSH
20460: LD_INT 22
20462: PUSH
20463: LD_OWVAR 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 30
20474: PUSH
20475: LD_INT 29
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PPUSH
20486: CALL_OW 69
20490: ST_TO_ADDR
// if not tmp then
20491: LD_VAR 0 1
20495: NOT
20496: IFFALSE 20500
// exit ;
20498: GO 20513
// DestroyUnit ( tmp [ 1 ] ) ;
20500: LD_VAR 0 1
20504: PUSH
20505: LD_INT 1
20507: ARRAY
20508: PPUSH
20509: CALL_OW 65
// end ;
20513: PPOPN 1
20515: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20516: LD_EXP 45
20520: PUSH
20521: LD_EXP 83
20525: AND
20526: IFFALSE 20655
20528: GO 20530
20530: DISABLE
20531: LD_INT 0
20533: PPUSH
// begin uc_side := 0 ;
20534: LD_ADDR_OWVAR 20
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// uc_nation := nation_arabian ;
20542: LD_ADDR_OWVAR 21
20546: PUSH
20547: LD_INT 2
20549: ST_TO_ADDR
// hc_gallery :=  ;
20550: LD_ADDR_OWVAR 33
20554: PUSH
20555: LD_STRING 
20557: ST_TO_ADDR
// hc_name :=  ;
20558: LD_ADDR_OWVAR 26
20562: PUSH
20563: LD_STRING 
20565: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20566: LD_INT 1
20568: PPUSH
20569: LD_INT 11
20571: PPUSH
20572: LD_INT 10
20574: PPUSH
20575: CALL_OW 380
// un := CreateHuman ;
20579: LD_ADDR_VAR 0 1
20583: PUSH
20584: CALL_OW 44
20588: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20589: LD_VAR 0 1
20593: PPUSH
20594: LD_INT 1
20596: PPUSH
20597: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20601: LD_INT 35
20603: PPUSH
20604: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20608: LD_VAR 0 1
20612: PPUSH
20613: LD_INT 22
20615: PUSH
20616: LD_OWVAR 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PPUSH
20625: CALL_OW 69
20629: PPUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: CALL_OW 74
20639: PPUSH
20640: CALL_OW 115
// until IsDead ( un ) ;
20644: LD_VAR 0 1
20648: PPUSH
20649: CALL_OW 301
20653: IFFALSE 20601
// end ;
20655: PPOPN 1
20657: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20658: LD_EXP 45
20662: PUSH
20663: LD_EXP 85
20667: AND
20668: IFFALSE 20680
20670: GO 20672
20672: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20673: LD_STRING earthquake(getX(game), 0, 32)
20675: PPUSH
20676: CALL_OW 559
20680: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20681: LD_EXP 45
20685: PUSH
20686: LD_EXP 86
20690: AND
20691: IFFALSE 20782
20693: GO 20695
20695: DISABLE
20696: LD_INT 0
20698: PPUSH
// begin enable ;
20699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20700: LD_ADDR_VAR 0 1
20704: PUSH
20705: LD_INT 22
20707: PUSH
20708: LD_OWVAR 2
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 21
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 33
20729: PUSH
20730: LD_INT 3
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not tmp then
20747: LD_VAR 0 1
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20782
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20756: LD_VAR 0 1
20760: PUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_VAR 0 1
20768: PPUSH
20769: CALL_OW 12
20773: ARRAY
20774: PPUSH
20775: LD_INT 1
20777: PPUSH
20778: CALL_OW 234
// end ;
20782: PPOPN 1
20784: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20785: LD_EXP 45
20789: PUSH
20790: LD_EXP 87
20794: AND
20795: IFFALSE 20936
20797: GO 20799
20799: DISABLE
20800: LD_INT 0
20802: PPUSH
20803: PPUSH
20804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: LD_INT 22
20812: PUSH
20813: LD_OWVAR 2
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 25
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PPUSH
20836: CALL_OW 69
20840: ST_TO_ADDR
// if not tmp then
20841: LD_VAR 0 3
20845: NOT
20846: IFFALSE 20850
// exit ;
20848: GO 20936
// un := tmp [ rand ( 1 , tmp ) ] ;
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_VAR 0 3
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// if Crawls ( un ) then
20874: LD_VAR 0 2
20878: PPUSH
20879: CALL_OW 318
20883: IFFALSE 20894
// ComWalk ( un ) ;
20885: LD_VAR 0 2
20889: PPUSH
20890: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20894: LD_VAR 0 2
20898: PPUSH
20899: LD_INT 9
20901: PPUSH
20902: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20906: LD_INT 28
20908: PPUSH
20909: LD_OWVAR 2
20913: PPUSH
20914: LD_INT 2
20916: PPUSH
20917: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20921: LD_INT 29
20923: PPUSH
20924: LD_OWVAR 2
20928: PPUSH
20929: LD_INT 2
20931: PPUSH
20932: CALL_OW 322
// end ;
20936: PPOPN 3
20938: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20939: LD_EXP 45
20943: PUSH
20944: LD_EXP 88
20948: AND
20949: IFFALSE 21060
20951: GO 20953
20953: DISABLE
20954: LD_INT 0
20956: PPUSH
20957: PPUSH
20958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: LD_INT 22
20966: PUSH
20967: LD_OWVAR 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 25
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 69
20994: ST_TO_ADDR
// if not tmp then
20995: LD_VAR 0 3
20999: NOT
21000: IFFALSE 21004
// exit ;
21002: GO 21060
// un := tmp [ rand ( 1 , tmp ) ] ;
21004: LD_ADDR_VAR 0 2
21008: PUSH
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 1
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: CALL_OW 12
21026: ARRAY
21027: ST_TO_ADDR
// if Crawls ( un ) then
21028: LD_VAR 0 2
21032: PPUSH
21033: CALL_OW 318
21037: IFFALSE 21048
// ComWalk ( un ) ;
21039: LD_VAR 0 2
21043: PPUSH
21044: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21048: LD_VAR 0 2
21052: PPUSH
21053: LD_INT 8
21055: PPUSH
21056: CALL_OW 336
// end ;
21060: PPOPN 3
21062: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21063: LD_EXP 45
21067: PUSH
21068: LD_EXP 89
21072: AND
21073: IFFALSE 21217
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
21081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 21
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 34
21114: PUSH
21115: LD_INT 12
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 34
21124: PUSH
21125: LD_INT 51
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 32
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 2
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21217
// for i in tmp do
21167: LD_ADDR_VAR 0 1
21171: PUSH
21172: LD_VAR 0 2
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21215
// if GetCargo ( i , mat_artifact ) = 0 then
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_INT 4
21187: PPUSH
21188: CALL_OW 289
21192: PUSH
21193: LD_INT 0
21195: EQUAL
21196: IFFALSE 21213
// SetCargo ( i , mat_siberit , 100 ) ;
21198: LD_VAR 0 1
21202: PPUSH
21203: LD_INT 3
21205: PPUSH
21206: LD_INT 100
21208: PPUSH
21209: CALL_OW 290
21213: GO 21177
21215: POP
21216: POP
// end ;
21217: PPOPN 2
21219: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21220: LD_EXP 45
21224: PUSH
21225: LD_EXP 90
21229: AND
21230: IFFALSE 21413
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
21238: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PPUSH
21256: CALL_OW 69
21260: ST_TO_ADDR
// if not tmp then
21261: LD_VAR 0 2
21265: NOT
21266: IFFALSE 21270
// exit ;
21268: GO 21413
// for i := 1 to 2 do
21270: LD_ADDR_VAR 0 1
21274: PUSH
21275: DOUBLE
21276: LD_INT 1
21278: DEC
21279: ST_TO_ADDR
21280: LD_INT 2
21282: PUSH
21283: FOR_TO
21284: IFFALSE 21411
// begin uc_side := your_side ;
21286: LD_ADDR_OWVAR 20
21290: PUSH
21291: LD_OWVAR 2
21295: ST_TO_ADDR
// uc_nation := nation_american ;
21296: LD_ADDR_OWVAR 21
21300: PUSH
21301: LD_INT 1
21303: ST_TO_ADDR
// vc_chassis := us_morphling ;
21304: LD_ADDR_OWVAR 37
21308: PUSH
21309: LD_INT 5
21311: ST_TO_ADDR
// vc_engine := engine_siberite ;
21312: LD_ADDR_OWVAR 39
21316: PUSH
21317: LD_INT 3
21319: ST_TO_ADDR
// vc_control := control_computer ;
21320: LD_ADDR_OWVAR 38
21324: PUSH
21325: LD_INT 3
21327: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21328: LD_ADDR_OWVAR 40
21332: PUSH
21333: LD_INT 10
21335: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21336: LD_VAR 0 2
21340: PUSH
21341: LD_INT 1
21343: ARRAY
21344: PPUSH
21345: CALL_OW 310
21349: NOT
21350: IFFALSE 21397
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21352: CALL_OW 45
21356: PPUSH
21357: LD_VAR 0 2
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: PPUSH
21366: CALL_OW 250
21370: PPUSH
21371: LD_VAR 0 2
21375: PUSH
21376: LD_INT 1
21378: ARRAY
21379: PPUSH
21380: CALL_OW 251
21384: PPUSH
21385: LD_INT 12
21387: PPUSH
21388: LD_INT 1
21390: PPUSH
21391: CALL_OW 50
21395: GO 21409
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21397: CALL_OW 45
21401: PPUSH
21402: LD_INT 1
21404: PPUSH
21405: CALL_OW 51
// end ;
21409: GO 21283
21411: POP
21412: POP
// end ;
21413: PPOPN 2
21415: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21416: LD_EXP 45
21420: PUSH
21421: LD_EXP 91
21425: AND
21426: IFFALSE 21648
21428: GO 21430
21430: DISABLE
21431: LD_INT 0
21433: PPUSH
21434: PPUSH
21435: PPUSH
21436: PPUSH
21437: PPUSH
21438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21439: LD_ADDR_VAR 0 6
21443: PUSH
21444: LD_INT 22
21446: PUSH
21447: LD_OWVAR 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 21
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: LD_INT 23
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: ST_TO_ADDR
// if not tmp then
21493: LD_VAR 0 6
21497: NOT
21498: IFFALSE 21502
// exit ;
21500: GO 21648
// s1 := rand ( 1 , 4 ) ;
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_INT 1
21509: PPUSH
21510: LD_INT 4
21512: PPUSH
21513: CALL_OW 12
21517: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21518: LD_ADDR_VAR 0 4
21522: PUSH
21523: LD_VAR 0 6
21527: PUSH
21528: LD_INT 1
21530: ARRAY
21531: PPUSH
21532: LD_VAR 0 2
21536: PPUSH
21537: CALL_OW 259
21541: ST_TO_ADDR
// if s1 = 1 then
21542: LD_VAR 0 2
21546: PUSH
21547: LD_INT 1
21549: EQUAL
21550: IFFALSE 21570
// s2 := rand ( 2 , 4 ) else
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_INT 2
21559: PPUSH
21560: LD_INT 4
21562: PPUSH
21563: CALL_OW 12
21567: ST_TO_ADDR
21568: GO 21578
// s2 := 1 ;
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: LD_INT 1
21577: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21578: LD_ADDR_VAR 0 5
21582: PUSH
21583: LD_VAR 0 6
21587: PUSH
21588: LD_INT 1
21590: ARRAY
21591: PPUSH
21592: LD_VAR 0 3
21596: PPUSH
21597: CALL_OW 259
21601: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21602: LD_VAR 0 6
21606: PUSH
21607: LD_INT 1
21609: ARRAY
21610: PPUSH
21611: LD_VAR 0 2
21615: PPUSH
21616: LD_VAR 0 5
21620: PPUSH
21621: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21625: LD_VAR 0 6
21629: PUSH
21630: LD_INT 1
21632: ARRAY
21633: PPUSH
21634: LD_VAR 0 3
21638: PPUSH
21639: LD_VAR 0 4
21643: PPUSH
21644: CALL_OW 237
// end ;
21648: PPOPN 6
21650: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21651: LD_EXP 45
21655: PUSH
21656: LD_EXP 92
21660: AND
21661: IFFALSE 21740
21663: GO 21665
21665: DISABLE
21666: LD_INT 0
21668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 30
21688: PUSH
21689: LD_INT 3
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not tmp then
21705: LD_VAR 0 1
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21714: LD_VAR 0 1
21718: PUSH
21719: LD_INT 1
21721: PPUSH
21722: LD_VAR 0 1
21726: PPUSH
21727: CALL_OW 12
21731: ARRAY
21732: PPUSH
21733: LD_INT 1
21735: PPUSH
21736: CALL_OW 234
// end ;
21740: PPOPN 1
21742: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21743: LD_EXP 45
21747: PUSH
21748: LD_EXP 93
21752: AND
21753: IFFALSE 21865
21755: GO 21757
21757: DISABLE
21758: LD_INT 0
21760: PPUSH
21761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21762: LD_ADDR_VAR 0 2
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_OWVAR 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 27
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 30
21794: PUSH
21795: LD_INT 26
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: LD_INT 28
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PPUSH
21822: CALL_OW 69
21826: ST_TO_ADDR
// if not tmp then
21827: LD_VAR 0 2
21831: NOT
21832: IFFALSE 21836
// exit ;
21834: GO 21865
// for i in tmp do
21836: LD_ADDR_VAR 0 1
21840: PUSH
21841: LD_VAR 0 2
21845: PUSH
21846: FOR_IN
21847: IFFALSE 21863
// SetLives ( i , 1 ) ;
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_INT 1
21856: PPUSH
21857: CALL_OW 234
21861: GO 21846
21863: POP
21864: POP
// end ;
21865: PPOPN 2
21867: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21868: LD_EXP 45
21872: PUSH
21873: LD_EXP 94
21877: AND
21878: IFFALSE 22165
21880: GO 21882
21882: DISABLE
21883: LD_INT 0
21885: PPUSH
21886: PPUSH
21887: PPUSH
// begin i := rand ( 1 , 7 ) ;
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: LD_INT 1
21895: PPUSH
21896: LD_INT 7
21898: PPUSH
21899: CALL_OW 12
21903: ST_TO_ADDR
// case i of 1 :
21904: LD_VAR 0 1
21908: PUSH
21909: LD_INT 1
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 21927
21917: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21918: LD_STRING earthquake(getX(game), 0, 32)
21920: PPUSH
21921: CALL_OW 559
21925: GO 22165
21927: LD_INT 2
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21949
21935: POP
// begin ToLua ( displayStucuk(); ) ;
21936: LD_STRING displayStucuk();
21938: PPUSH
21939: CALL_OW 559
// ResetFog ;
21943: CALL_OW 335
// end ; 3 :
21947: GO 22165
21949: LD_INT 3
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 22061
21957: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_INT 22
21965: PUSH
21966: LD_OWVAR 2
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 25
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PPUSH
21989: CALL_OW 69
21993: ST_TO_ADDR
// if not tmp then
21994: LD_VAR 0 2
21998: NOT
21999: IFFALSE 22003
// exit ;
22001: GO 22165
// un := tmp [ rand ( 1 , tmp ) ] ;
22003: LD_ADDR_VAR 0 3
22007: PUSH
22008: LD_VAR 0 2
22012: PUSH
22013: LD_INT 1
22015: PPUSH
22016: LD_VAR 0 2
22020: PPUSH
22021: CALL_OW 12
22025: ARRAY
22026: ST_TO_ADDR
// if Crawls ( un ) then
22027: LD_VAR 0 3
22031: PPUSH
22032: CALL_OW 318
22036: IFFALSE 22047
// ComWalk ( un ) ;
22038: LD_VAR 0 3
22042: PPUSH
22043: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22047: LD_VAR 0 3
22051: PPUSH
22052: LD_INT 8
22054: PPUSH
22055: CALL_OW 336
// end ; 4 :
22059: GO 22165
22061: LD_INT 4
22063: DOUBLE
22064: EQUAL
22065: IFTRUE 22069
22067: GO 22143
22069: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_INT 22
22077: PUSH
22078: LD_OWVAR 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 30
22089: PUSH
22090: LD_INT 29
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: ST_TO_ADDR
// if not tmp then
22106: LD_VAR 0 2
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22165
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22115: LD_VAR 0 2
22119: PUSH
22120: LD_INT 1
22122: ARRAY
22123: PPUSH
22124: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22128: LD_VAR 0 2
22132: PUSH
22133: LD_INT 1
22135: ARRAY
22136: PPUSH
22137: CALL_OW 65
// end ; 5 .. 7 :
22141: GO 22165
22143: LD_INT 5
22145: DOUBLE
22146: GREATEREQUAL
22147: IFFALSE 22155
22149: LD_INT 7
22151: DOUBLE
22152: LESSEQUAL
22153: IFTRUE 22157
22155: GO 22164
22157: POP
// StreamSibBomb ; end ;
22158: CALL 18402 0 0
22162: GO 22165
22164: POP
// end ;
22165: PPOPN 3
22167: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22168: LD_EXP 45
22172: PUSH
22173: LD_EXP 95
22177: AND
22178: IFFALSE 22334
22180: GO 22182
22182: DISABLE
22183: LD_INT 0
22185: PPUSH
22186: PPUSH
22187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22188: LD_ADDR_VAR 0 2
22192: PUSH
22193: LD_INT 81
22195: PUSH
22196: LD_OWVAR 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 21
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 21
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ST_TO_ADDR
// if not tmp then
22242: LD_VAR 0 2
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22334
// p := 0 ;
22251: LD_ADDR_VAR 0 3
22255: PUSH
22256: LD_INT 0
22258: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22259: LD_INT 35
22261: PPUSH
22262: CALL_OW 67
// p := p + 1 ;
22266: LD_ADDR_VAR 0 3
22270: PUSH
22271: LD_VAR 0 3
22275: PUSH
22276: LD_INT 1
22278: PLUS
22279: ST_TO_ADDR
// for i in tmp do
22280: LD_ADDR_VAR 0 1
22284: PUSH
22285: LD_VAR 0 2
22289: PUSH
22290: FOR_IN
22291: IFFALSE 22322
// if GetLives ( i ) < 1000 then
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 256
22302: PUSH
22303: LD_INT 1000
22305: LESS
22306: IFFALSE 22320
// SetLives ( i , 1000 ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: LD_INT 1000
22315: PPUSH
22316: CALL_OW 234
22320: GO 22290
22322: POP
22323: POP
// until p > 20 ;
22324: LD_VAR 0 3
22328: PUSH
22329: LD_INT 20
22331: GREATER
22332: IFFALSE 22259
// end ;
22334: PPOPN 3
22336: END
// every 0 0$1 trigger StreamModeActive and sTime do
22337: LD_EXP 45
22341: PUSH
22342: LD_EXP 96
22346: AND
22347: IFFALSE 22382
22349: GO 22351
22351: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22352: LD_INT 28
22354: PPUSH
22355: LD_OWVAR 2
22359: PPUSH
22360: LD_INT 2
22362: PPUSH
22363: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22367: LD_INT 30
22369: PPUSH
22370: LD_OWVAR 2
22374: PPUSH
22375: LD_INT 2
22377: PPUSH
22378: CALL_OW 322
// end ;
22382: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22383: LD_EXP 45
22387: PUSH
22388: LD_EXP 97
22392: AND
22393: IFFALSE 22514
22395: GO 22397
22397: DISABLE
22398: LD_INT 0
22400: PPUSH
22401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22402: LD_ADDR_VAR 0 2
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_OWVAR 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 21
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 3
22431: PUSH
22432: LD_INT 23
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: PPUSH
22451: CALL_OW 69
22455: ST_TO_ADDR
// if not tmp then
22456: LD_VAR 0 2
22460: NOT
22461: IFFALSE 22465
// exit ;
22463: GO 22514
// for i in tmp do
22465: LD_ADDR_VAR 0 1
22469: PUSH
22470: LD_VAR 0 2
22474: PUSH
22475: FOR_IN
22476: IFFALSE 22512
// begin if Crawls ( i ) then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 318
22487: IFFALSE 22498
// ComWalk ( i ) ;
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 138
// SetClass ( i , 2 ) ;
22498: LD_VAR 0 1
22502: PPUSH
22503: LD_INT 2
22505: PPUSH
22506: CALL_OW 336
// end ;
22510: GO 22475
22512: POP
22513: POP
// end ;
22514: PPOPN 2
22516: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22517: LD_EXP 45
22521: PUSH
22522: LD_EXP 98
22526: AND
22527: IFFALSE 22815
22529: GO 22531
22531: DISABLE
22532: LD_INT 0
22534: PPUSH
22535: PPUSH
22536: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22537: LD_OWVAR 2
22541: PPUSH
22542: LD_INT 9
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22555: LD_INT 9
22557: PPUSH
22558: LD_OWVAR 2
22562: PPUSH
22563: CALL_OW 343
// uc_side := 9 ;
22567: LD_ADDR_OWVAR 20
22571: PUSH
22572: LD_INT 9
22574: ST_TO_ADDR
// uc_nation := 2 ;
22575: LD_ADDR_OWVAR 21
22579: PUSH
22580: LD_INT 2
22582: ST_TO_ADDR
// hc_name := Dark Warrior ;
22583: LD_ADDR_OWVAR 26
22587: PUSH
22588: LD_STRING Dark Warrior
22590: ST_TO_ADDR
// hc_gallery :=  ;
22591: LD_ADDR_OWVAR 33
22595: PUSH
22596: LD_STRING 
22598: ST_TO_ADDR
// hc_noskilllimit := true ;
22599: LD_ADDR_OWVAR 76
22603: PUSH
22604: LD_INT 1
22606: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22607: LD_ADDR_OWVAR 31
22611: PUSH
22612: LD_INT 30
22614: PUSH
22615: LD_INT 30
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: ST_TO_ADDR
// un := CreateHuman ;
22630: LD_ADDR_VAR 0 3
22634: PUSH
22635: CALL_OW 44
22639: ST_TO_ADDR
// hc_noskilllimit := false ;
22640: LD_ADDR_OWVAR 76
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 51
// ToLua ( playRanger() ) ;
22660: LD_STRING playRanger()
22662: PPUSH
22663: CALL_OW 559
// p := 0 ;
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22675: LD_INT 35
22677: PPUSH
22678: CALL_OW 67
// p := p + 1 ;
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_VAR 0 2
22691: PUSH
22692: LD_INT 1
22694: PLUS
22695: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22696: LD_VAR 0 3
22700: PPUSH
22701: CALL_OW 256
22705: PUSH
22706: LD_INT 1000
22708: LESS
22709: IFFALSE 22723
// SetLives ( un , 1000 ) ;
22711: LD_VAR 0 3
22715: PPUSH
22716: LD_INT 1000
22718: PPUSH
22719: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22723: LD_VAR 0 3
22727: PPUSH
22728: LD_INT 81
22730: PUSH
22731: LD_OWVAR 2
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 91
22742: PUSH
22743: LD_VAR 0 3
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: LIST
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PPUSH
22760: CALL_OW 69
22764: PPUSH
22765: LD_VAR 0 3
22769: PPUSH
22770: CALL_OW 74
22774: PPUSH
22775: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22779: LD_VAR 0 2
22783: PUSH
22784: LD_INT 80
22786: GREATER
22787: PUSH
22788: LD_VAR 0 3
22792: PPUSH
22793: CALL_OW 301
22797: OR
22798: IFFALSE 22675
// if un then
22800: LD_VAR 0 3
22804: IFFALSE 22815
// RemoveUnit ( un ) ;
22806: LD_VAR 0 3
22810: PPUSH
22811: CALL_OW 64
// end ;
22815: PPOPN 3
22817: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22818: LD_EXP 99
22822: IFFALSE 22938
22824: GO 22826
22826: DISABLE
22827: LD_INT 0
22829: PPUSH
22830: PPUSH
22831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22832: LD_ADDR_VAR 0 2
22836: PUSH
22837: LD_INT 81
22839: PUSH
22840: LD_OWVAR 2
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 21
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22868: LD_STRING playComputer()
22870: PPUSH
22871: CALL_OW 559
// if not tmp then
22875: LD_VAR 0 2
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22938
// for i in tmp do
22884: LD_ADDR_VAR 0 1
22888: PUSH
22889: LD_VAR 0 2
22893: PUSH
22894: FOR_IN
22895: IFFALSE 22936
// for j := 1 to 4 do
22897: LD_ADDR_VAR 0 3
22901: PUSH
22902: DOUBLE
22903: LD_INT 1
22905: DEC
22906: ST_TO_ADDR
22907: LD_INT 4
22909: PUSH
22910: FOR_TO
22911: IFFALSE 22932
// SetSkill ( i , j , 10 ) ;
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 10
22925: PPUSH
22926: CALL_OW 237
22930: GO 22910
22932: POP
22933: POP
22934: GO 22894
22936: POP
22937: POP
// end ;
22938: PPOPN 3
22940: END
// every 0 0$1 trigger s30 do var i , tmp ;
22941: LD_EXP 100
22945: IFFALSE 23014
22947: GO 22949
22949: DISABLE
22950: LD_INT 0
22952: PPUSH
22953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22954: LD_ADDR_VAR 0 2
22958: PUSH
22959: LD_INT 22
22961: PUSH
22962: LD_OWVAR 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PPUSH
22971: CALL_OW 69
22975: ST_TO_ADDR
// if not tmp then
22976: LD_VAR 0 2
22980: NOT
22981: IFFALSE 22985
// exit ;
22983: GO 23014
// for i in tmp do
22985: LD_ADDR_VAR 0 1
22989: PUSH
22990: LD_VAR 0 2
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23012
// SetLives ( i , 300 ) ;
22998: LD_VAR 0 1
23002: PPUSH
23003: LD_INT 300
23005: PPUSH
23006: CALL_OW 234
23010: GO 22995
23012: POP
23013: POP
// end ;
23014: PPOPN 2
23016: END
// every 0 0$1 trigger s60 do var i , tmp ;
23017: LD_EXP 101
23021: IFFALSE 23090
23023: GO 23025
23025: DISABLE
23026: LD_INT 0
23028: PPUSH
23029: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23030: LD_ADDR_VAR 0 2
23034: PUSH
23035: LD_INT 22
23037: PUSH
23038: LD_OWVAR 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 69
23051: ST_TO_ADDR
// if not tmp then
23052: LD_VAR 0 2
23056: NOT
23057: IFFALSE 23061
// exit ;
23059: GO 23090
// for i in tmp do
23061: LD_ADDR_VAR 0 1
23065: PUSH
23066: LD_VAR 0 2
23070: PUSH
23071: FOR_IN
23072: IFFALSE 23088
// SetLives ( i , 600 ) ;
23074: LD_VAR 0 1
23078: PPUSH
23079: LD_INT 600
23081: PPUSH
23082: CALL_OW 234
23086: GO 23071
23088: POP
23089: POP
// end ;
23090: PPOPN 2
23092: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23093: LD_INT 0
23095: PPUSH
// case cmd of 301 :
23096: LD_VAR 0 1
23100: PUSH
23101: LD_INT 301
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23141
23109: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23110: LD_VAR 0 6
23114: PPUSH
23115: LD_VAR 0 7
23119: PPUSH
23120: LD_VAR 0 8
23124: PPUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_VAR 0 5
23134: PPUSH
23135: CALL 24342 0 5
23139: GO 23262
23141: LD_INT 302
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23186
23149: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23150: LD_VAR 0 6
23154: PPUSH
23155: LD_VAR 0 7
23159: PPUSH
23160: LD_VAR 0 8
23164: PPUSH
23165: LD_VAR 0 9
23169: PPUSH
23170: LD_VAR 0 4
23174: PPUSH
23175: LD_VAR 0 5
23179: PPUSH
23180: CALL 24433 0 6
23184: GO 23262
23186: LD_INT 303
23188: DOUBLE
23189: EQUAL
23190: IFTRUE 23194
23192: GO 23231
23194: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23195: LD_VAR 0 6
23199: PPUSH
23200: LD_VAR 0 7
23204: PPUSH
23205: LD_VAR 0 8
23209: PPUSH
23210: LD_VAR 0 9
23214: PPUSH
23215: LD_VAR 0 4
23219: PPUSH
23220: LD_VAR 0 5
23224: PPUSH
23225: CALL 23267 0 6
23229: GO 23262
23231: LD_INT 304
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23261
23239: POP
// hHackTeleport ( unit , x , y ) ; end ;
23240: LD_VAR 0 2
23244: PPUSH
23245: LD_VAR 0 4
23249: PPUSH
23250: LD_VAR 0 5
23254: PPUSH
23255: CALL 25026 0 3
23259: GO 23262
23261: POP
// end ;
23262: LD_VAR 0 12
23266: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23267: LD_INT 0
23269: PPUSH
23270: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23271: LD_VAR 0 1
23275: PUSH
23276: LD_INT 1
23278: LESS
23279: PUSH
23280: LD_VAR 0 1
23284: PUSH
23285: LD_INT 3
23287: GREATER
23288: OR
23289: PUSH
23290: LD_VAR 0 5
23294: PPUSH
23295: LD_VAR 0 6
23299: PPUSH
23300: CALL_OW 428
23304: OR
23305: IFFALSE 23309
// exit ;
23307: GO 24029
// uc_side := your_side ;
23309: LD_ADDR_OWVAR 20
23313: PUSH
23314: LD_OWVAR 2
23318: ST_TO_ADDR
// uc_nation := nation ;
23319: LD_ADDR_OWVAR 21
23323: PUSH
23324: LD_VAR 0 1
23328: ST_TO_ADDR
// bc_level = 1 ;
23329: LD_ADDR_OWVAR 43
23333: PUSH
23334: LD_INT 1
23336: ST_TO_ADDR
// case btype of 1 :
23337: LD_VAR 0 2
23341: PUSH
23342: LD_INT 1
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23361
23350: POP
// bc_type := b_depot ; 2 :
23351: LD_ADDR_OWVAR 42
23355: PUSH
23356: LD_INT 0
23358: ST_TO_ADDR
23359: GO 23973
23361: LD_INT 2
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23380
23369: POP
// bc_type := b_warehouse ; 3 :
23370: LD_ADDR_OWVAR 42
23374: PUSH
23375: LD_INT 1
23377: ST_TO_ADDR
23378: GO 23973
23380: LD_INT 3
23382: DOUBLE
23383: EQUAL
23384: IFTRUE 23388
23386: GO 23399
23388: POP
// bc_type := b_lab ; 4 .. 9 :
23389: LD_ADDR_OWVAR 42
23393: PUSH
23394: LD_INT 6
23396: ST_TO_ADDR
23397: GO 23973
23399: LD_INT 4
23401: DOUBLE
23402: GREATEREQUAL
23403: IFFALSE 23411
23405: LD_INT 9
23407: DOUBLE
23408: LESSEQUAL
23409: IFTRUE 23413
23411: GO 23465
23413: POP
// begin bc_type := b_lab_half ;
23414: LD_ADDR_OWVAR 42
23418: PUSH
23419: LD_INT 7
23421: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23422: LD_ADDR_OWVAR 44
23426: PUSH
23427: LD_INT 10
23429: PUSH
23430: LD_INT 11
23432: PUSH
23433: LD_INT 12
23435: PUSH
23436: LD_INT 15
23438: PUSH
23439: LD_INT 14
23441: PUSH
23442: LD_INT 13
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: PUSH
23453: LD_VAR 0 2
23457: PUSH
23458: LD_INT 3
23460: MINUS
23461: ARRAY
23462: ST_TO_ADDR
// end ; 10 .. 13 :
23463: GO 23973
23465: LD_INT 10
23467: DOUBLE
23468: GREATEREQUAL
23469: IFFALSE 23477
23471: LD_INT 13
23473: DOUBLE
23474: LESSEQUAL
23475: IFTRUE 23479
23477: GO 23556
23479: POP
// begin bc_type := b_lab_full ;
23480: LD_ADDR_OWVAR 42
23484: PUSH
23485: LD_INT 8
23487: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23488: LD_ADDR_OWVAR 44
23492: PUSH
23493: LD_INT 10
23495: PUSH
23496: LD_INT 12
23498: PUSH
23499: LD_INT 14
23501: PUSH
23502: LD_INT 13
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: LD_VAR 0 2
23515: PUSH
23516: LD_INT 9
23518: MINUS
23519: ARRAY
23520: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23521: LD_ADDR_OWVAR 45
23525: PUSH
23526: LD_INT 11
23528: PUSH
23529: LD_INT 15
23531: PUSH
23532: LD_INT 12
23534: PUSH
23535: LD_INT 15
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: LD_VAR 0 2
23548: PUSH
23549: LD_INT 9
23551: MINUS
23552: ARRAY
23553: ST_TO_ADDR
// end ; 14 :
23554: GO 23973
23556: LD_INT 14
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 23575
23564: POP
// bc_type := b_workshop ; 15 :
23565: LD_ADDR_OWVAR 42
23569: PUSH
23570: LD_INT 2
23572: ST_TO_ADDR
23573: GO 23973
23575: LD_INT 15
23577: DOUBLE
23578: EQUAL
23579: IFTRUE 23583
23581: GO 23594
23583: POP
// bc_type := b_factory ; 16 :
23584: LD_ADDR_OWVAR 42
23588: PUSH
23589: LD_INT 3
23591: ST_TO_ADDR
23592: GO 23973
23594: LD_INT 16
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23613
23602: POP
// bc_type := b_ext_gun ; 17 :
23603: LD_ADDR_OWVAR 42
23607: PUSH
23608: LD_INT 17
23610: ST_TO_ADDR
23611: GO 23973
23613: LD_INT 17
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23649
23621: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23622: LD_ADDR_OWVAR 42
23626: PUSH
23627: LD_INT 19
23629: PUSH
23630: LD_INT 23
23632: PUSH
23633: LD_INT 19
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: LD_VAR 0 1
23645: ARRAY
23646: ST_TO_ADDR
23647: GO 23973
23649: LD_INT 18
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23657
23655: GO 23668
23657: POP
// bc_type := b_ext_radar ; 19 :
23658: LD_ADDR_OWVAR 42
23662: PUSH
23663: LD_INT 20
23665: ST_TO_ADDR
23666: GO 23973
23668: LD_INT 19
23670: DOUBLE
23671: EQUAL
23672: IFTRUE 23676
23674: GO 23687
23676: POP
// bc_type := b_ext_radio ; 20 :
23677: LD_ADDR_OWVAR 42
23681: PUSH
23682: LD_INT 22
23684: ST_TO_ADDR
23685: GO 23973
23687: LD_INT 20
23689: DOUBLE
23690: EQUAL
23691: IFTRUE 23695
23693: GO 23706
23695: POP
// bc_type := b_ext_siberium ; 21 :
23696: LD_ADDR_OWVAR 42
23700: PUSH
23701: LD_INT 21
23703: ST_TO_ADDR
23704: GO 23973
23706: LD_INT 21
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23725
23714: POP
// bc_type := b_ext_computer ; 22 :
23715: LD_ADDR_OWVAR 42
23719: PUSH
23720: LD_INT 24
23722: ST_TO_ADDR
23723: GO 23973
23725: LD_INT 22
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23744
23733: POP
// bc_type := b_ext_track ; 23 :
23734: LD_ADDR_OWVAR 42
23738: PUSH
23739: LD_INT 16
23741: ST_TO_ADDR
23742: GO 23973
23744: LD_INT 23
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23763
23752: POP
// bc_type := b_ext_laser ; 24 :
23753: LD_ADDR_OWVAR 42
23757: PUSH
23758: LD_INT 25
23760: ST_TO_ADDR
23761: GO 23973
23763: LD_INT 24
23765: DOUBLE
23766: EQUAL
23767: IFTRUE 23771
23769: GO 23782
23771: POP
// bc_type := b_control_tower ; 25 :
23772: LD_ADDR_OWVAR 42
23776: PUSH
23777: LD_INT 36
23779: ST_TO_ADDR
23780: GO 23973
23782: LD_INT 25
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23801
23790: POP
// bc_type := b_breastwork ; 26 :
23791: LD_ADDR_OWVAR 42
23795: PUSH
23796: LD_INT 31
23798: ST_TO_ADDR
23799: GO 23973
23801: LD_INT 26
23803: DOUBLE
23804: EQUAL
23805: IFTRUE 23809
23807: GO 23820
23809: POP
// bc_type := b_bunker ; 27 :
23810: LD_ADDR_OWVAR 42
23814: PUSH
23815: LD_INT 32
23817: ST_TO_ADDR
23818: GO 23973
23820: LD_INT 27
23822: DOUBLE
23823: EQUAL
23824: IFTRUE 23828
23826: GO 23839
23828: POP
// bc_type := b_turret ; 28 :
23829: LD_ADDR_OWVAR 42
23833: PUSH
23834: LD_INT 33
23836: ST_TO_ADDR
23837: GO 23973
23839: LD_INT 28
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 23858
23847: POP
// bc_type := b_armoury ; 29 :
23848: LD_ADDR_OWVAR 42
23852: PUSH
23853: LD_INT 4
23855: ST_TO_ADDR
23856: GO 23973
23858: LD_INT 29
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23877
23866: POP
// bc_type := b_barracks ; 30 :
23867: LD_ADDR_OWVAR 42
23871: PUSH
23872: LD_INT 5
23874: ST_TO_ADDR
23875: GO 23973
23877: LD_INT 30
23879: DOUBLE
23880: EQUAL
23881: IFTRUE 23885
23883: GO 23896
23885: POP
// bc_type := b_solar_power ; 31 :
23886: LD_ADDR_OWVAR 42
23890: PUSH
23891: LD_INT 27
23893: ST_TO_ADDR
23894: GO 23973
23896: LD_INT 31
23898: DOUBLE
23899: EQUAL
23900: IFTRUE 23904
23902: GO 23915
23904: POP
// bc_type := b_oil_power ; 32 :
23905: LD_ADDR_OWVAR 42
23909: PUSH
23910: LD_INT 26
23912: ST_TO_ADDR
23913: GO 23973
23915: LD_INT 32
23917: DOUBLE
23918: EQUAL
23919: IFTRUE 23923
23921: GO 23934
23923: POP
// bc_type := b_siberite_power ; 33 :
23924: LD_ADDR_OWVAR 42
23928: PUSH
23929: LD_INT 28
23931: ST_TO_ADDR
23932: GO 23973
23934: LD_INT 33
23936: DOUBLE
23937: EQUAL
23938: IFTRUE 23942
23940: GO 23953
23942: POP
// bc_type := b_oil_mine ; 34 :
23943: LD_ADDR_OWVAR 42
23947: PUSH
23948: LD_INT 29
23950: ST_TO_ADDR
23951: GO 23973
23953: LD_INT 34
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23972
23961: POP
// bc_type := b_siberite_mine ; end ;
23962: LD_ADDR_OWVAR 42
23966: PUSH
23967: LD_INT 30
23969: ST_TO_ADDR
23970: GO 23973
23972: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23973: LD_ADDR_VAR 0 8
23977: PUSH
23978: LD_VAR 0 5
23982: PPUSH
23983: LD_VAR 0 6
23987: PPUSH
23988: LD_VAR 0 3
23992: PPUSH
23993: CALL_OW 47
23997: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23998: LD_OWVAR 42
24002: PUSH
24003: LD_INT 32
24005: PUSH
24006: LD_INT 33
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: IN
24013: IFFALSE 24029
// PlaceWeaponTurret ( b , weapon ) ;
24015: LD_VAR 0 8
24019: PPUSH
24020: LD_VAR 0 4
24024: PPUSH
24025: CALL_OW 431
// end ;
24029: LD_VAR 0 7
24033: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24034: LD_INT 0
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24040: LD_ADDR_VAR 0 4
24044: PUSH
24045: LD_INT 22
24047: PUSH
24048: LD_OWVAR 2
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: LD_INT 30
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: ST_TO_ADDR
// if not tmp then
24094: LD_VAR 0 4
24098: NOT
24099: IFFALSE 24103
// exit ;
24101: GO 24162
// for i in tmp do
24103: LD_ADDR_VAR 0 2
24107: PUSH
24108: LD_VAR 0 4
24112: PUSH
24113: FOR_IN
24114: IFFALSE 24160
// for j = 1 to 3 do
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: DOUBLE
24122: LD_INT 1
24124: DEC
24125: ST_TO_ADDR
24126: LD_INT 3
24128: PUSH
24129: FOR_TO
24130: IFFALSE 24156
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24132: LD_VAR 0 2
24136: PPUSH
24137: CALL_OW 274
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 99999
24149: PPUSH
24150: CALL_OW 277
24154: GO 24129
24156: POP
24157: POP
24158: GO 24113
24160: POP
24161: POP
// end ;
24162: LD_VAR 0 1
24166: RET
// export function hHackSetLevel10 ; var i , j ; begin
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
24171: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24172: LD_ADDR_VAR 0 2
24176: PUSH
24177: LD_INT 21
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PPUSH
24187: CALL_OW 69
24191: PUSH
24192: FOR_IN
24193: IFFALSE 24245
// if IsSelected ( i ) then
24195: LD_VAR 0 2
24199: PPUSH
24200: CALL_OW 306
24204: IFFALSE 24243
// begin for j := 1 to 4 do
24206: LD_ADDR_VAR 0 3
24210: PUSH
24211: DOUBLE
24212: LD_INT 1
24214: DEC
24215: ST_TO_ADDR
24216: LD_INT 4
24218: PUSH
24219: FOR_TO
24220: IFFALSE 24241
// SetSkill ( i , j , 10 ) ;
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_INT 10
24234: PPUSH
24235: CALL_OW 237
24239: GO 24219
24241: POP
24242: POP
// end ;
24243: GO 24192
24245: POP
24246: POP
// end ;
24247: LD_VAR 0 1
24251: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24252: LD_INT 0
24254: PPUSH
24255: PPUSH
24256: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24257: LD_ADDR_VAR 0 2
24261: PUSH
24262: LD_INT 22
24264: PUSH
24265: LD_OWVAR 2
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: PUSH
24293: FOR_IN
24294: IFFALSE 24335
// begin for j := 1 to 4 do
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: DOUBLE
24302: LD_INT 1
24304: DEC
24305: ST_TO_ADDR
24306: LD_INT 4
24308: PUSH
24309: FOR_TO
24310: IFFALSE 24331
// SetSkill ( i , j , 10 ) ;
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: LD_INT 10
24324: PPUSH
24325: CALL_OW 237
24329: GO 24309
24331: POP
24332: POP
// end ;
24333: GO 24293
24335: POP
24336: POP
// end ;
24337: LD_VAR 0 1
24341: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24342: LD_INT 0
24344: PPUSH
// uc_side := your_side ;
24345: LD_ADDR_OWVAR 20
24349: PUSH
24350: LD_OWVAR 2
24354: ST_TO_ADDR
// uc_nation := nation ;
24355: LD_ADDR_OWVAR 21
24359: PUSH
24360: LD_VAR 0 1
24364: ST_TO_ADDR
// InitHc ;
24365: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24369: LD_INT 0
24371: PPUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: LD_VAR 0 3
24381: PPUSH
24382: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24386: LD_VAR 0 4
24390: PPUSH
24391: LD_VAR 0 5
24395: PPUSH
24396: CALL_OW 428
24400: PUSH
24401: LD_INT 0
24403: EQUAL
24404: IFFALSE 24428
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24406: CALL_OW 44
24410: PPUSH
24411: LD_VAR 0 4
24415: PPUSH
24416: LD_VAR 0 5
24420: PPUSH
24421: LD_INT 1
24423: PPUSH
24424: CALL_OW 48
// end ;
24428: LD_VAR 0 6
24432: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
// uc_side := your_side ;
24437: LD_ADDR_OWVAR 20
24441: PUSH
24442: LD_OWVAR 2
24446: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24447: LD_VAR 0 1
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: LD_INT 3
24460: PUSH
24461: LD_INT 4
24463: PUSH
24464: LD_INT 5
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: IN
24474: IFFALSE 24486
// uc_nation := nation_american else
24476: LD_ADDR_OWVAR 21
24480: PUSH
24481: LD_INT 1
24483: ST_TO_ADDR
24484: GO 24529
// if chassis in [ 11 , 12 , 13 , 14 ] then
24486: LD_VAR 0 1
24490: PUSH
24491: LD_INT 11
24493: PUSH
24494: LD_INT 12
24496: PUSH
24497: LD_INT 13
24499: PUSH
24500: LD_INT 14
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: IN
24509: IFFALSE 24521
// uc_nation := nation_arabian else
24511: LD_ADDR_OWVAR 21
24515: PUSH
24516: LD_INT 2
24518: ST_TO_ADDR
24519: GO 24529
// uc_nation := nation_russian ;
24521: LD_ADDR_OWVAR 21
24525: PUSH
24526: LD_INT 3
24528: ST_TO_ADDR
// vc_chassis := chassis ;
24529: LD_ADDR_OWVAR 37
24533: PUSH
24534: LD_VAR 0 1
24538: ST_TO_ADDR
// vc_engine := engine ;
24539: LD_ADDR_OWVAR 39
24543: PUSH
24544: LD_VAR 0 2
24548: ST_TO_ADDR
// vc_control := control ;
24549: LD_ADDR_OWVAR 38
24553: PUSH
24554: LD_VAR 0 3
24558: ST_TO_ADDR
// vc_weapon := weapon ;
24559: LD_ADDR_OWVAR 40
24563: PUSH
24564: LD_VAR 0 4
24568: ST_TO_ADDR
// un := CreateVehicle ;
24569: LD_ADDR_VAR 0 8
24573: PUSH
24574: CALL_OW 45
24578: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24579: LD_VAR 0 8
24583: PPUSH
24584: LD_INT 0
24586: PPUSH
24587: LD_INT 5
24589: PPUSH
24590: CALL_OW 12
24594: PPUSH
24595: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24599: LD_VAR 0 8
24603: PPUSH
24604: LD_VAR 0 5
24608: PPUSH
24609: LD_VAR 0 6
24613: PPUSH
24614: LD_INT 1
24616: PPUSH
24617: CALL_OW 48
// end ;
24621: LD_VAR 0 7
24625: RET
// export hInvincible ; every 1 do
24626: GO 24628
24628: DISABLE
// hInvincible := [ ] ;
24629: LD_ADDR_EXP 102
24633: PUSH
24634: EMPTY
24635: ST_TO_ADDR
24636: END
// every 10 do var i ;
24637: GO 24639
24639: DISABLE
24640: LD_INT 0
24642: PPUSH
// begin enable ;
24643: ENABLE
// if not hInvincible then
24644: LD_EXP 102
24648: NOT
24649: IFFALSE 24653
// exit ;
24651: GO 24697
// for i in hInvincible do
24653: LD_ADDR_VAR 0 1
24657: PUSH
24658: LD_EXP 102
24662: PUSH
24663: FOR_IN
24664: IFFALSE 24695
// if GetLives ( i ) < 1000 then
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 256
24675: PUSH
24676: LD_INT 1000
24678: LESS
24679: IFFALSE 24693
// SetLives ( i , 1000 ) ;
24681: LD_VAR 0 1
24685: PPUSH
24686: LD_INT 1000
24688: PPUSH
24689: CALL_OW 234
24693: GO 24663
24695: POP
24696: POP
// end ;
24697: PPOPN 1
24699: END
// export function hHackInvincible ; var i ; begin
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24704: LD_ADDR_VAR 0 2
24708: PUSH
24709: LD_INT 2
24711: PUSH
24712: LD_INT 21
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 21
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 69
24741: PUSH
24742: FOR_IN
24743: IFFALSE 24804
// if IsSelected ( i ) then
24745: LD_VAR 0 2
24749: PPUSH
24750: CALL_OW 306
24754: IFFALSE 24802
// begin if i in hInvincible then
24756: LD_VAR 0 2
24760: PUSH
24761: LD_EXP 102
24765: IN
24766: IFFALSE 24786
// hInvincible := hInvincible diff i else
24768: LD_ADDR_EXP 102
24772: PUSH
24773: LD_EXP 102
24777: PUSH
24778: LD_VAR 0 2
24782: DIFF
24783: ST_TO_ADDR
24784: GO 24802
// hInvincible := hInvincible union i ;
24786: LD_ADDR_EXP 102
24790: PUSH
24791: LD_EXP 102
24795: PUSH
24796: LD_VAR 0 2
24800: UNION
24801: ST_TO_ADDR
// end ;
24802: GO 24742
24804: POP
24805: POP
// end ;
24806: LD_VAR 0 1
24810: RET
// export function hHackInvisible ; var i , j ; begin
24811: LD_INT 0
24813: PPUSH
24814: PPUSH
24815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24816: LD_ADDR_VAR 0 2
24820: PUSH
24821: LD_INT 21
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 69
24835: PUSH
24836: FOR_IN
24837: IFFALSE 24861
// if IsSelected ( i ) then
24839: LD_VAR 0 2
24843: PPUSH
24844: CALL_OW 306
24848: IFFALSE 24859
// ComForceInvisible ( i ) ;
24850: LD_VAR 0 2
24854: PPUSH
24855: CALL_OW 496
24859: GO 24836
24861: POP
24862: POP
// end ;
24863: LD_VAR 0 1
24867: RET
// export function hHackChangeYourSide ; begin
24868: LD_INT 0
24870: PPUSH
// if your_side = 8 then
24871: LD_OWVAR 2
24875: PUSH
24876: LD_INT 8
24878: EQUAL
24879: IFFALSE 24891
// your_side := 0 else
24881: LD_ADDR_OWVAR 2
24885: PUSH
24886: LD_INT 0
24888: ST_TO_ADDR
24889: GO 24905
// your_side := your_side + 1 ;
24891: LD_ADDR_OWVAR 2
24895: PUSH
24896: LD_OWVAR 2
24900: PUSH
24901: LD_INT 1
24903: PLUS
24904: ST_TO_ADDR
// end ;
24905: LD_VAR 0 1
24909: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24910: LD_INT 0
24912: PPUSH
24913: PPUSH
24914: PPUSH
// for i in all_units do
24915: LD_ADDR_VAR 0 2
24919: PUSH
24920: LD_OWVAR 3
24924: PUSH
24925: FOR_IN
24926: IFFALSE 25004
// if IsSelected ( i ) then
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 306
24937: IFFALSE 25002
// begin j := GetSide ( i ) ;
24939: LD_ADDR_VAR 0 3
24943: PUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: CALL_OW 255
24953: ST_TO_ADDR
// if j = 8 then
24954: LD_VAR 0 3
24958: PUSH
24959: LD_INT 8
24961: EQUAL
24962: IFFALSE 24974
// j := 0 else
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_INT 0
24971: ST_TO_ADDR
24972: GO 24988
// j := j + 1 ;
24974: LD_ADDR_VAR 0 3
24978: PUSH
24979: LD_VAR 0 3
24983: PUSH
24984: LD_INT 1
24986: PLUS
24987: ST_TO_ADDR
// SetSide ( i , j ) ;
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: CALL_OW 235
// end ;
25002: GO 24925
25004: POP
25005: POP
// end ;
25006: LD_VAR 0 1
25010: RET
// export function hHackFog ; begin
25011: LD_INT 0
25013: PPUSH
// FogOff ( true ) ;
25014: LD_INT 1
25016: PPUSH
25017: CALL_OW 344
// end ;
25021: LD_VAR 0 1
25025: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25026: LD_INT 0
25028: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_VAR 0 2
25038: PPUSH
25039: LD_VAR 0 3
25043: PPUSH
25044: LD_INT 1
25046: PPUSH
25047: LD_INT 1
25049: PPUSH
25050: CALL_OW 483
// CenterOnXY ( x , y ) ;
25054: LD_VAR 0 2
25058: PPUSH
25059: LD_VAR 0 3
25063: PPUSH
25064: CALL_OW 84
// end ; end_of_file
25068: LD_VAR 0 4
25072: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 264
25088: PUSH
25089: LD_EXP 30
25093: EQUAL
25094: IFFALSE 25166
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25096: LD_INT 68
25098: PPUSH
25099: LD_VAR 0 1
25103: PPUSH
25104: CALL_OW 255
25108: PPUSH
25109: CALL_OW 321
25113: PUSH
25114: LD_INT 2
25116: EQUAL
25117: IFFALSE 25129
// eff := 70 else
25119: LD_ADDR_VAR 0 4
25123: PUSH
25124: LD_INT 70
25126: ST_TO_ADDR
25127: GO 25137
// eff := 30 ;
25129: LD_ADDR_VAR 0 4
25133: PUSH
25134: LD_INT 30
25136: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 250
25146: PPUSH
25147: LD_VAR 0 1
25151: PPUSH
25152: CALL_OW 251
25156: PPUSH
25157: LD_VAR 0 4
25161: PPUSH
25162: CALL_OW 495
// end ; end ;
25166: LD_VAR 0 2
25170: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25171: LD_INT 0
25173: PPUSH
// end ;
25174: LD_VAR 0 4
25178: RET
// export function SOS_Command ( cmd ) ; begin
25179: LD_INT 0
25181: PPUSH
// end ;
25182: LD_VAR 0 2
25186: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25187: LD_INT 0
25189: PPUSH
// end ;
25190: LD_VAR 0 6
25194: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25195: LD_INT 0
25197: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25198: LD_VAR 0 1
25202: PUSH
25203: LD_INT 250
25205: EQUAL
25206: PUSH
25207: LD_VAR 0 2
25211: PPUSH
25212: CALL_OW 264
25216: PUSH
25217: LD_EXP 33
25221: EQUAL
25222: AND
25223: IFFALSE 25244
// MinerPlaceMine ( unit , x , y ) ;
25225: LD_VAR 0 2
25229: PPUSH
25230: LD_VAR 0 4
25234: PPUSH
25235: LD_VAR 0 5
25239: PPUSH
25240: CALL 27593 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25244: LD_VAR 0 1
25248: PUSH
25249: LD_INT 251
25251: EQUAL
25252: PUSH
25253: LD_VAR 0 2
25257: PPUSH
25258: CALL_OW 264
25262: PUSH
25263: LD_EXP 33
25267: EQUAL
25268: AND
25269: IFFALSE 25290
// MinerDetonateMine ( unit , x , y ) ;
25271: LD_VAR 0 2
25275: PPUSH
25276: LD_VAR 0 4
25280: PPUSH
25281: LD_VAR 0 5
25285: PPUSH
25286: CALL 27870 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25290: LD_VAR 0 1
25294: PUSH
25295: LD_INT 252
25297: EQUAL
25298: PUSH
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL_OW 264
25308: PUSH
25309: LD_EXP 33
25313: EQUAL
25314: AND
25315: IFFALSE 25336
// MinerCreateMinefield ( unit , x , y ) ;
25317: LD_VAR 0 2
25321: PPUSH
25322: LD_VAR 0 4
25326: PPUSH
25327: LD_VAR 0 5
25331: PPUSH
25332: CALL 28287 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 253
25343: EQUAL
25344: PUSH
25345: LD_VAR 0 2
25349: PPUSH
25350: CALL_OW 257
25354: PUSH
25355: LD_INT 5
25357: EQUAL
25358: AND
25359: IFFALSE 25380
// ComBinocular ( unit , x , y ) ;
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_VAR 0 4
25370: PPUSH
25371: LD_VAR 0 5
25375: PPUSH
25376: CALL 28658 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25380: LD_VAR 0 1
25384: PUSH
25385: LD_INT 254
25387: EQUAL
25388: PUSH
25389: LD_VAR 0 2
25393: PPUSH
25394: CALL_OW 264
25398: PUSH
25399: LD_EXP 28
25403: EQUAL
25404: AND
25405: PUSH
25406: LD_VAR 0 3
25410: PPUSH
25411: CALL_OW 263
25415: PUSH
25416: LD_INT 3
25418: EQUAL
25419: AND
25420: IFFALSE 25436
// HackDestroyVehicle ( unit , selectedUnit ) ;
25422: LD_VAR 0 2
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: CALL 26953 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25436: LD_VAR 0 1
25440: PUSH
25441: LD_INT 255
25443: EQUAL
25444: PUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 264
25454: PUSH
25455: LD_INT 14
25457: PUSH
25458: LD_INT 53
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: IN
25465: AND
25466: PUSH
25467: LD_VAR 0 4
25471: PPUSH
25472: LD_VAR 0 5
25476: PPUSH
25477: CALL_OW 488
25481: AND
25482: IFFALSE 25506
// CutTreeXYR ( unit , x , y , 12 ) ;
25484: LD_VAR 0 2
25488: PPUSH
25489: LD_VAR 0 4
25493: PPUSH
25494: LD_VAR 0 5
25498: PPUSH
25499: LD_INT 12
25501: PPUSH
25502: CALL 25519 0 4
// end ;
25506: LD_VAR 0 6
25510: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25511: LD_INT 0
25513: PPUSH
// end ;
25514: LD_VAR 0 4
25518: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25519: LD_INT 0
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
25528: PPUSH
25529: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25530: LD_VAR 0 1
25534: NOT
25535: PUSH
25536: LD_VAR 0 2
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: CALL_OW 488
25550: NOT
25551: OR
25552: PUSH
25553: LD_VAR 0 4
25557: NOT
25558: OR
25559: IFFALSE 25563
// exit ;
25561: GO 25903
// list := [ ] ;
25563: LD_ADDR_VAR 0 13
25567: PUSH
25568: EMPTY
25569: ST_TO_ADDR
// if x - r < 0 then
25570: LD_VAR 0 2
25574: PUSH
25575: LD_VAR 0 4
25579: MINUS
25580: PUSH
25581: LD_INT 0
25583: LESS
25584: IFFALSE 25596
// min_x := 0 else
25586: LD_ADDR_VAR 0 7
25590: PUSH
25591: LD_INT 0
25593: ST_TO_ADDR
25594: GO 25612
// min_x := x - r ;
25596: LD_ADDR_VAR 0 7
25600: PUSH
25601: LD_VAR 0 2
25605: PUSH
25606: LD_VAR 0 4
25610: MINUS
25611: ST_TO_ADDR
// if y - r < 0 then
25612: LD_VAR 0 3
25616: PUSH
25617: LD_VAR 0 4
25621: MINUS
25622: PUSH
25623: LD_INT 0
25625: LESS
25626: IFFALSE 25638
// min_y := 0 else
25628: LD_ADDR_VAR 0 8
25632: PUSH
25633: LD_INT 0
25635: ST_TO_ADDR
25636: GO 25654
// min_y := y - r ;
25638: LD_ADDR_VAR 0 8
25642: PUSH
25643: LD_VAR 0 3
25647: PUSH
25648: LD_VAR 0 4
25652: MINUS
25653: ST_TO_ADDR
// max_x := x + r ;
25654: LD_ADDR_VAR 0 9
25658: PUSH
25659: LD_VAR 0 2
25663: PUSH
25664: LD_VAR 0 4
25668: PLUS
25669: ST_TO_ADDR
// max_y := y + r ;
25670: LD_ADDR_VAR 0 10
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: LD_VAR 0 4
25684: PLUS
25685: ST_TO_ADDR
// for _x = min_x to max_x do
25686: LD_ADDR_VAR 0 11
25690: PUSH
25691: DOUBLE
25692: LD_VAR 0 7
25696: DEC
25697: ST_TO_ADDR
25698: LD_VAR 0 9
25702: PUSH
25703: FOR_TO
25704: IFFALSE 25821
// for _y = min_y to max_y do
25706: LD_ADDR_VAR 0 12
25710: PUSH
25711: DOUBLE
25712: LD_VAR 0 8
25716: DEC
25717: ST_TO_ADDR
25718: LD_VAR 0 10
25722: PUSH
25723: FOR_TO
25724: IFFALSE 25817
// begin if not ValidHex ( _x , _y ) then
25726: LD_VAR 0 11
25730: PPUSH
25731: LD_VAR 0 12
25735: PPUSH
25736: CALL_OW 488
25740: NOT
25741: IFFALSE 25745
// continue ;
25743: GO 25723
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25745: LD_VAR 0 11
25749: PPUSH
25750: LD_VAR 0 12
25754: PPUSH
25755: CALL_OW 351
25759: PUSH
25760: LD_VAR 0 11
25764: PPUSH
25765: LD_VAR 0 12
25769: PPUSH
25770: CALL_OW 554
25774: AND
25775: IFFALSE 25815
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25777: LD_ADDR_VAR 0 13
25781: PUSH
25782: LD_VAR 0 13
25786: PPUSH
25787: LD_VAR 0 13
25791: PUSH
25792: LD_INT 1
25794: PLUS
25795: PPUSH
25796: LD_VAR 0 11
25800: PUSH
25801: LD_VAR 0 12
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 2
25814: ST_TO_ADDR
// end ;
25815: GO 25723
25817: POP
25818: POP
25819: GO 25703
25821: POP
25822: POP
// if not list then
25823: LD_VAR 0 13
25827: NOT
25828: IFFALSE 25832
// exit ;
25830: GO 25903
// for i in list do
25832: LD_ADDR_VAR 0 6
25836: PUSH
25837: LD_VAR 0 13
25841: PUSH
25842: FOR_IN
25843: IFFALSE 25901
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25845: LD_VAR 0 1
25849: PPUSH
25850: LD_STRING M
25852: PUSH
25853: LD_VAR 0 6
25857: PUSH
25858: LD_INT 1
25860: ARRAY
25861: PUSH
25862: LD_VAR 0 6
25866: PUSH
25867: LD_INT 2
25869: ARRAY
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: PPUSH
25895: CALL_OW 447
25899: GO 25842
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 5
25907: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25908: LD_EXP 105
25912: NOT
25913: IFFALSE 25963
25915: GO 25917
25917: DISABLE
// begin initHack := true ;
25918: LD_ADDR_EXP 105
25922: PUSH
25923: LD_INT 1
25925: ST_TO_ADDR
// hackTanks := [ ] ;
25926: LD_ADDR_EXP 106
25930: PUSH
25931: EMPTY
25932: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25933: LD_ADDR_EXP 107
25937: PUSH
25938: EMPTY
25939: ST_TO_ADDR
// hackLimit := 3 ;
25940: LD_ADDR_EXP 108
25944: PUSH
25945: LD_INT 3
25947: ST_TO_ADDR
// hackDist := 12 ;
25948: LD_ADDR_EXP 109
25952: PUSH
25953: LD_INT 12
25955: ST_TO_ADDR
// hackCounter := [ ] ;
25956: LD_ADDR_EXP 110
25960: PUSH
25961: EMPTY
25962: ST_TO_ADDR
// end ;
25963: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25964: LD_EXP 105
25968: PUSH
25969: LD_INT 34
25971: PUSH
25972: LD_EXP 28
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PPUSH
25981: CALL_OW 69
25985: AND
25986: IFFALSE 26241
25988: GO 25990
25990: DISABLE
25991: LD_INT 0
25993: PPUSH
25994: PPUSH
// begin enable ;
25995: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25996: LD_ADDR_VAR 0 1
26000: PUSH
26001: LD_INT 34
26003: PUSH
26004: LD_EXP 28
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PPUSH
26013: CALL_OW 69
26017: PUSH
26018: FOR_IN
26019: IFFALSE 26239
// begin if not i in hackTanks then
26021: LD_VAR 0 1
26025: PUSH
26026: LD_EXP 106
26030: IN
26031: NOT
26032: IFFALSE 26115
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26034: LD_ADDR_EXP 106
26038: PUSH
26039: LD_EXP 106
26043: PPUSH
26044: LD_EXP 106
26048: PUSH
26049: LD_INT 1
26051: PLUS
26052: PPUSH
26053: LD_VAR 0 1
26057: PPUSH
26058: CALL_OW 1
26062: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26063: LD_ADDR_EXP 107
26067: PUSH
26068: LD_EXP 107
26072: PPUSH
26073: LD_EXP 107
26077: PUSH
26078: LD_INT 1
26080: PLUS
26081: PPUSH
26082: EMPTY
26083: PPUSH
26084: CALL_OW 1
26088: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26089: LD_ADDR_EXP 110
26093: PUSH
26094: LD_EXP 110
26098: PPUSH
26099: LD_EXP 110
26103: PUSH
26104: LD_INT 1
26106: PLUS
26107: PPUSH
26108: EMPTY
26109: PPUSH
26110: CALL_OW 1
26114: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 302
26124: NOT
26125: IFFALSE 26138
// begin HackUnlinkAll ( i ) ;
26127: LD_VAR 0 1
26131: PPUSH
26132: CALL 26244 0 1
// continue ;
26136: GO 26018
// end ; HackCheckCapturedStatus ( i ) ;
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL 26687 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26147: LD_ADDR_VAR 0 2
26151: PUSH
26152: LD_INT 81
26154: PUSH
26155: LD_VAR 0 1
26159: PPUSH
26160: CALL_OW 255
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 33
26171: PUSH
26172: LD_INT 3
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 91
26181: PUSH
26182: LD_VAR 0 1
26186: PUSH
26187: LD_EXP 109
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 50
26199: PUSH
26200: EMPTY
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: PPUSH
26209: CALL_OW 69
26213: ST_TO_ADDR
// if not tmp then
26214: LD_VAR 0 2
26218: NOT
26219: IFFALSE 26223
// continue ;
26221: GO 26018
// HackLink ( i , tmp ) ;
26223: LD_VAR 0 1
26227: PPUSH
26228: LD_VAR 0 2
26232: PPUSH
26233: CALL 26380 0 2
// end ;
26237: GO 26018
26239: POP
26240: POP
// end ;
26241: PPOPN 2
26243: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26244: LD_INT 0
26246: PPUSH
26247: PPUSH
26248: PPUSH
// if not hack in hackTanks then
26249: LD_VAR 0 1
26253: PUSH
26254: LD_EXP 106
26258: IN
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 26375
// index := GetElementIndex ( hackTanks , hack ) ;
26264: LD_ADDR_VAR 0 4
26268: PUSH
26269: LD_EXP 106
26273: PPUSH
26274: LD_VAR 0 1
26278: PPUSH
26279: CALL 33849 0 2
26283: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26284: LD_EXP 107
26288: PUSH
26289: LD_VAR 0 4
26293: ARRAY
26294: IFFALSE 26375
// begin for i in hackTanksCaptured [ index ] do
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_EXP 107
26305: PUSH
26306: LD_VAR 0 4
26310: ARRAY
26311: PUSH
26312: FOR_IN
26313: IFFALSE 26339
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26315: LD_VAR 0 3
26319: PUSH
26320: LD_INT 1
26322: ARRAY
26323: PPUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_INT 2
26331: ARRAY
26332: PPUSH
26333: CALL_OW 235
26337: GO 26312
26339: POP
26340: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26341: LD_ADDR_EXP 107
26345: PUSH
26346: LD_EXP 107
26350: PPUSH
26351: LD_VAR 0 4
26355: PPUSH
26356: EMPTY
26357: PPUSH
26358: CALL_OW 1
26362: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26363: LD_VAR 0 1
26367: PPUSH
26368: LD_INT 0
26370: PPUSH
26371: CALL_OW 505
// end ; end ;
26375: LD_VAR 0 2
26379: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26380: LD_INT 0
26382: PPUSH
26383: PPUSH
26384: PPUSH
// if not hack in hackTanks or not vehicles then
26385: LD_VAR 0 1
26389: PUSH
26390: LD_EXP 106
26394: IN
26395: NOT
26396: PUSH
26397: LD_VAR 0 2
26401: NOT
26402: OR
26403: IFFALSE 26407
// exit ;
26405: GO 26682
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26407: LD_ADDR_VAR 0 2
26411: PUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: LD_INT 1
26427: PPUSH
26428: CALL 34499 0 4
26432: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26433: LD_ADDR_VAR 0 5
26437: PUSH
26438: LD_EXP 106
26442: PPUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL 33849 0 2
26452: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26453: LD_EXP 107
26457: PUSH
26458: LD_VAR 0 5
26462: ARRAY
26463: PUSH
26464: LD_EXP 108
26468: LESS
26469: IFFALSE 26658
// begin for i := 1 to vehicles do
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: DOUBLE
26477: LD_INT 1
26479: DEC
26480: ST_TO_ADDR
26481: LD_VAR 0 2
26485: PUSH
26486: FOR_TO
26487: IFFALSE 26656
// begin if hackTanksCaptured [ index ] = hackLimit then
26489: LD_EXP 107
26493: PUSH
26494: LD_VAR 0 5
26498: ARRAY
26499: PUSH
26500: LD_EXP 108
26504: EQUAL
26505: IFFALSE 26509
// break ;
26507: GO 26656
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26509: LD_ADDR_EXP 110
26513: PUSH
26514: LD_EXP 110
26518: PPUSH
26519: LD_VAR 0 5
26523: PPUSH
26524: LD_EXP 110
26528: PUSH
26529: LD_VAR 0 5
26533: ARRAY
26534: PUSH
26535: LD_INT 1
26537: PLUS
26538: PPUSH
26539: CALL_OW 1
26543: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26544: LD_ADDR_EXP 107
26548: PUSH
26549: LD_EXP 107
26553: PPUSH
26554: LD_VAR 0 5
26558: PUSH
26559: LD_EXP 107
26563: PUSH
26564: LD_VAR 0 5
26568: ARRAY
26569: PUSH
26570: LD_INT 1
26572: PLUS
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PPUSH
26578: LD_VAR 0 2
26582: PUSH
26583: LD_VAR 0 4
26587: ARRAY
26588: PUSH
26589: LD_VAR 0 2
26593: PUSH
26594: LD_VAR 0 4
26598: ARRAY
26599: PPUSH
26600: CALL_OW 255
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL 34064 0 3
26613: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26614: LD_VAR 0 2
26618: PUSH
26619: LD_VAR 0 4
26623: ARRAY
26624: PPUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 255
26634: PPUSH
26635: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26639: LD_VAR 0 2
26643: PUSH
26644: LD_VAR 0 4
26648: ARRAY
26649: PPUSH
26650: CALL_OW 141
// end ;
26654: GO 26486
26656: POP
26657: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26658: LD_VAR 0 1
26662: PPUSH
26663: LD_EXP 107
26667: PUSH
26668: LD_VAR 0 5
26672: ARRAY
26673: PUSH
26674: LD_INT 0
26676: PLUS
26677: PPUSH
26678: CALL_OW 505
// end ;
26682: LD_VAR 0 3
26686: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26687: LD_INT 0
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
// if not hack in hackTanks then
26693: LD_VAR 0 1
26697: PUSH
26698: LD_EXP 106
26702: IN
26703: NOT
26704: IFFALSE 26708
// exit ;
26706: GO 26948
// index := GetElementIndex ( hackTanks , hack ) ;
26708: LD_ADDR_VAR 0 4
26712: PUSH
26713: LD_EXP 106
26717: PPUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL 33849 0 2
26727: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26728: LD_ADDR_VAR 0 3
26732: PUSH
26733: DOUBLE
26734: LD_EXP 107
26738: PUSH
26739: LD_VAR 0 4
26743: ARRAY
26744: INC
26745: ST_TO_ADDR
26746: LD_INT 1
26748: PUSH
26749: FOR_DOWNTO
26750: IFFALSE 26922
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26752: LD_ADDR_VAR 0 5
26756: PUSH
26757: LD_EXP 107
26761: PUSH
26762: LD_VAR 0 4
26766: ARRAY
26767: PUSH
26768: LD_VAR 0 3
26772: ARRAY
26773: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26774: LD_VAR 0 5
26778: PUSH
26779: LD_INT 1
26781: ARRAY
26782: PPUSH
26783: CALL_OW 302
26787: NOT
26788: PUSH
26789: LD_VAR 0 5
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: PPUSH
26798: CALL_OW 255
26802: PUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 255
26812: NONEQUAL
26813: OR
26814: IFFALSE 26920
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26816: LD_VAR 0 5
26820: PUSH
26821: LD_INT 1
26823: ARRAY
26824: PPUSH
26825: CALL_OW 305
26829: PUSH
26830: LD_VAR 0 5
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: PPUSH
26839: CALL_OW 255
26843: PUSH
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 255
26853: EQUAL
26854: AND
26855: IFFALSE 26879
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26857: LD_VAR 0 5
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: LD_VAR 0 5
26870: PUSH
26871: LD_INT 2
26873: ARRAY
26874: PPUSH
26875: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26879: LD_ADDR_EXP 107
26883: PUSH
26884: LD_EXP 107
26888: PPUSH
26889: LD_VAR 0 4
26893: PPUSH
26894: LD_EXP 107
26898: PUSH
26899: LD_VAR 0 4
26903: ARRAY
26904: PPUSH
26905: LD_VAR 0 3
26909: PPUSH
26910: CALL_OW 3
26914: PPUSH
26915: CALL_OW 1
26919: ST_TO_ADDR
// end ; end ;
26920: GO 26749
26922: POP
26923: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26924: LD_VAR 0 1
26928: PPUSH
26929: LD_EXP 107
26933: PUSH
26934: LD_VAR 0 4
26938: ARRAY
26939: PUSH
26940: LD_INT 0
26942: PLUS
26943: PPUSH
26944: CALL_OW 505
// end ;
26948: LD_VAR 0 2
26952: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26953: LD_INT 0
26955: PPUSH
26956: PPUSH
26957: PPUSH
26958: PPUSH
// if not hack in hackTanks then
26959: LD_VAR 0 1
26963: PUSH
26964: LD_EXP 106
26968: IN
26969: NOT
26970: IFFALSE 26974
// exit ;
26972: GO 27059
// index := GetElementIndex ( hackTanks , hack ) ;
26974: LD_ADDR_VAR 0 5
26978: PUSH
26979: LD_EXP 106
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL 33849 0 2
26993: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26994: LD_ADDR_VAR 0 4
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_EXP 107
27008: PUSH
27009: LD_VAR 0 5
27013: ARRAY
27014: PUSH
27015: FOR_TO
27016: IFFALSE 27057
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27018: LD_EXP 107
27022: PUSH
27023: LD_VAR 0 5
27027: ARRAY
27028: PUSH
27029: LD_VAR 0 4
27033: ARRAY
27034: PUSH
27035: LD_INT 1
27037: ARRAY
27038: PUSH
27039: LD_VAR 0 2
27043: EQUAL
27044: IFFALSE 27055
// KillUnit ( vehicle ) ;
27046: LD_VAR 0 2
27050: PPUSH
27051: CALL_OW 66
27055: GO 27015
27057: POP
27058: POP
// end ;
27059: LD_VAR 0 3
27063: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27064: LD_EXP 111
27068: NOT
27069: IFFALSE 27104
27071: GO 27073
27073: DISABLE
// begin initMiner := true ;
27074: LD_ADDR_EXP 111
27078: PUSH
27079: LD_INT 1
27081: ST_TO_ADDR
// minersList := [ ] ;
27082: LD_ADDR_EXP 112
27086: PUSH
27087: EMPTY
27088: ST_TO_ADDR
// minerMinesList := [ ] ;
27089: LD_ADDR_EXP 113
27093: PUSH
27094: EMPTY
27095: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27096: LD_ADDR_EXP 114
27100: PUSH
27101: LD_INT 5
27103: ST_TO_ADDR
// end ;
27104: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27105: LD_EXP 111
27109: PUSH
27110: LD_INT 34
27112: PUSH
27113: LD_EXP 33
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PPUSH
27122: CALL_OW 69
27126: AND
27127: IFFALSE 27590
27129: GO 27131
27131: DISABLE
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
27136: PPUSH
27137: PPUSH
// begin enable ;
27138: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27139: LD_ADDR_VAR 0 1
27143: PUSH
27144: LD_INT 34
27146: PUSH
27147: LD_EXP 33
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PPUSH
27156: CALL_OW 69
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27234
// begin if not i in minersList then
27164: LD_VAR 0 1
27168: PUSH
27169: LD_EXP 112
27173: IN
27174: NOT
27175: IFFALSE 27232
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27177: LD_ADDR_EXP 112
27181: PUSH
27182: LD_EXP 112
27186: PPUSH
27187: LD_EXP 112
27191: PUSH
27192: LD_INT 1
27194: PLUS
27195: PPUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL_OW 1
27205: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27206: LD_ADDR_EXP 113
27210: PUSH
27211: LD_EXP 113
27215: PPUSH
27216: LD_EXP 113
27220: PUSH
27221: LD_INT 1
27223: PLUS
27224: PPUSH
27225: EMPTY
27226: PPUSH
27227: CALL_OW 1
27231: ST_TO_ADDR
// end end ;
27232: GO 27161
27234: POP
27235: POP
// for i := minerMinesList downto 1 do
27236: LD_ADDR_VAR 0 1
27240: PUSH
27241: DOUBLE
27242: LD_EXP 113
27246: INC
27247: ST_TO_ADDR
27248: LD_INT 1
27250: PUSH
27251: FOR_DOWNTO
27252: IFFALSE 27588
// begin if IsLive ( minersList [ i ] ) then
27254: LD_EXP 112
27258: PUSH
27259: LD_VAR 0 1
27263: ARRAY
27264: PPUSH
27265: CALL_OW 300
27269: IFFALSE 27297
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27271: LD_EXP 112
27275: PUSH
27276: LD_VAR 0 1
27280: ARRAY
27281: PPUSH
27282: LD_EXP 113
27286: PUSH
27287: LD_VAR 0 1
27291: ARRAY
27292: PPUSH
27293: CALL_OW 505
// if not minerMinesList [ i ] then
27297: LD_EXP 113
27301: PUSH
27302: LD_VAR 0 1
27306: ARRAY
27307: NOT
27308: IFFALSE 27312
// continue ;
27310: GO 27251
// for j := minerMinesList [ i ] downto 1 do
27312: LD_ADDR_VAR 0 2
27316: PUSH
27317: DOUBLE
27318: LD_EXP 113
27322: PUSH
27323: LD_VAR 0 1
27327: ARRAY
27328: INC
27329: ST_TO_ADDR
27330: LD_INT 1
27332: PUSH
27333: FOR_DOWNTO
27334: IFFALSE 27584
// begin side := GetSide ( minersList [ i ] ) ;
27336: LD_ADDR_VAR 0 3
27340: PUSH
27341: LD_EXP 112
27345: PUSH
27346: LD_VAR 0 1
27350: ARRAY
27351: PPUSH
27352: CALL_OW 255
27356: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27357: LD_ADDR_VAR 0 4
27361: PUSH
27362: LD_EXP 113
27366: PUSH
27367: LD_VAR 0 1
27371: ARRAY
27372: PUSH
27373: LD_VAR 0 2
27377: ARRAY
27378: PUSH
27379: LD_INT 1
27381: ARRAY
27382: PPUSH
27383: LD_EXP 113
27387: PUSH
27388: LD_VAR 0 1
27392: ARRAY
27393: PUSH
27394: LD_VAR 0 2
27398: ARRAY
27399: PUSH
27400: LD_INT 2
27402: ARRAY
27403: PPUSH
27404: CALL_OW 428
27408: ST_TO_ADDR
// if not tmp then
27409: LD_VAR 0 4
27413: NOT
27414: IFFALSE 27418
// continue ;
27416: GO 27333
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27418: LD_VAR 0 4
27422: PUSH
27423: LD_INT 81
27425: PUSH
27426: LD_VAR 0 3
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PPUSH
27435: CALL_OW 69
27439: IN
27440: PUSH
27441: LD_EXP 113
27445: PUSH
27446: LD_VAR 0 1
27450: ARRAY
27451: PUSH
27452: LD_VAR 0 2
27456: ARRAY
27457: PUSH
27458: LD_INT 1
27460: ARRAY
27461: PPUSH
27462: LD_EXP 113
27466: PUSH
27467: LD_VAR 0 1
27471: ARRAY
27472: PUSH
27473: LD_VAR 0 2
27477: ARRAY
27478: PUSH
27479: LD_INT 2
27481: ARRAY
27482: PPUSH
27483: CALL_OW 458
27487: AND
27488: IFFALSE 27582
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27490: LD_EXP 113
27494: PUSH
27495: LD_VAR 0 1
27499: ARRAY
27500: PUSH
27501: LD_VAR 0 2
27505: ARRAY
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PPUSH
27511: LD_EXP 113
27515: PUSH
27516: LD_VAR 0 1
27520: ARRAY
27521: PUSH
27522: LD_VAR 0 2
27526: ARRAY
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27541: LD_ADDR_EXP 113
27545: PUSH
27546: LD_EXP 113
27550: PPUSH
27551: LD_VAR 0 1
27555: PPUSH
27556: LD_EXP 113
27560: PUSH
27561: LD_VAR 0 1
27565: ARRAY
27566: PPUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: CALL_OW 3
27576: PPUSH
27577: CALL_OW 1
27581: ST_TO_ADDR
// end ; end ;
27582: GO 27333
27584: POP
27585: POP
// end ;
27586: GO 27251
27588: POP
27589: POP
// end ;
27590: PPOPN 4
27592: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27593: LD_INT 0
27595: PPUSH
27596: PPUSH
// result := false ;
27597: LD_ADDR_VAR 0 4
27601: PUSH
27602: LD_INT 0
27604: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27605: LD_VAR 0 1
27609: PPUSH
27610: CALL_OW 264
27614: PUSH
27615: LD_EXP 33
27619: EQUAL
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 27865
// index := GetElementIndex ( minersList , unit ) ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_EXP 112
27634: PPUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL 33849 0 2
27644: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27645: LD_EXP 113
27649: PUSH
27650: LD_VAR 0 5
27654: ARRAY
27655: PUSH
27656: LD_EXP 114
27660: GREATEREQUAL
27661: IFFALSE 27665
// exit ;
27663: GO 27865
// ComMoveXY ( unit , x , y ) ;
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_VAR 0 2
27674: PPUSH
27675: LD_VAR 0 3
27679: PPUSH
27680: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27684: LD_INT 35
27686: PPUSH
27687: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27691: LD_VAR 0 1
27695: PPUSH
27696: LD_VAR 0 2
27700: PPUSH
27701: LD_VAR 0 3
27705: PPUSH
27706: CALL 64621 0 3
27710: NOT
27711: PUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 314
27721: AND
27722: IFFALSE 27726
// exit ;
27724: GO 27865
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27726: LD_VAR 0 2
27730: PPUSH
27731: LD_VAR 0 3
27735: PPUSH
27736: CALL_OW 428
27740: PUSH
27741: LD_VAR 0 1
27745: EQUAL
27746: PUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 314
27756: NOT
27757: AND
27758: IFFALSE 27684
// PlaySoundXY ( x , y , PlantMine ) ;
27760: LD_VAR 0 2
27764: PPUSH
27765: LD_VAR 0 3
27769: PPUSH
27770: LD_STRING PlantMine
27772: PPUSH
27773: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27777: LD_VAR 0 2
27781: PPUSH
27782: LD_VAR 0 3
27786: PPUSH
27787: LD_VAR 0 1
27791: PPUSH
27792: CALL_OW 255
27796: PPUSH
27797: LD_INT 0
27799: PPUSH
27800: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27804: LD_ADDR_EXP 113
27808: PUSH
27809: LD_EXP 113
27813: PPUSH
27814: LD_VAR 0 5
27818: PUSH
27819: LD_EXP 113
27823: PUSH
27824: LD_VAR 0 5
27828: ARRAY
27829: PUSH
27830: LD_INT 1
27832: PLUS
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: LD_VAR 0 2
27842: PUSH
27843: LD_VAR 0 3
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL 34064 0 3
27856: ST_TO_ADDR
// result := true ;
27857: LD_ADDR_VAR 0 4
27861: PUSH
27862: LD_INT 1
27864: ST_TO_ADDR
// end ;
27865: LD_VAR 0 4
27869: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27870: LD_INT 0
27872: PPUSH
27873: PPUSH
27874: PPUSH
// if not unit in minersList then
27875: LD_VAR 0 1
27879: PUSH
27880: LD_EXP 112
27884: IN
27885: NOT
27886: IFFALSE 27890
// exit ;
27888: GO 28282
// index := GetElementIndex ( minersList , unit ) ;
27890: LD_ADDR_VAR 0 6
27894: PUSH
27895: LD_EXP 112
27899: PPUSH
27900: LD_VAR 0 1
27904: PPUSH
27905: CALL 33849 0 2
27909: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27910: LD_ADDR_VAR 0 5
27914: PUSH
27915: DOUBLE
27916: LD_EXP 113
27920: PUSH
27921: LD_VAR 0 6
27925: ARRAY
27926: INC
27927: ST_TO_ADDR
27928: LD_INT 1
27930: PUSH
27931: FOR_DOWNTO
27932: IFFALSE 28093
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27934: LD_EXP 113
27938: PUSH
27939: LD_VAR 0 6
27943: ARRAY
27944: PUSH
27945: LD_VAR 0 5
27949: ARRAY
27950: PUSH
27951: LD_INT 1
27953: ARRAY
27954: PUSH
27955: LD_VAR 0 2
27959: EQUAL
27960: PUSH
27961: LD_EXP 113
27965: PUSH
27966: LD_VAR 0 6
27970: ARRAY
27971: PUSH
27972: LD_VAR 0 5
27976: ARRAY
27977: PUSH
27978: LD_INT 2
27980: ARRAY
27981: PUSH
27982: LD_VAR 0 3
27986: EQUAL
27987: AND
27988: IFFALSE 28091
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27990: LD_EXP 113
27994: PUSH
27995: LD_VAR 0 6
27999: ARRAY
28000: PUSH
28001: LD_VAR 0 5
28005: ARRAY
28006: PUSH
28007: LD_INT 1
28009: ARRAY
28010: PPUSH
28011: LD_EXP 113
28015: PUSH
28016: LD_VAR 0 6
28020: ARRAY
28021: PUSH
28022: LD_VAR 0 5
28026: ARRAY
28027: PUSH
28028: LD_INT 2
28030: ARRAY
28031: PPUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 255
28041: PPUSH
28042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28046: LD_ADDR_EXP 113
28050: PUSH
28051: LD_EXP 113
28055: PPUSH
28056: LD_VAR 0 6
28060: PPUSH
28061: LD_EXP 113
28065: PUSH
28066: LD_VAR 0 6
28070: ARRAY
28071: PPUSH
28072: LD_VAR 0 5
28076: PPUSH
28077: CALL_OW 3
28081: PPUSH
28082: CALL_OW 1
28086: ST_TO_ADDR
// exit ;
28087: POP
28088: POP
28089: GO 28282
// end ; end ;
28091: GO 27931
28093: POP
28094: POP
// for i := minerMinesList [ index ] downto 1 do
28095: LD_ADDR_VAR 0 5
28099: PUSH
28100: DOUBLE
28101: LD_EXP 113
28105: PUSH
28106: LD_VAR 0 6
28110: ARRAY
28111: INC
28112: ST_TO_ADDR
28113: LD_INT 1
28115: PUSH
28116: FOR_DOWNTO
28117: IFFALSE 28280
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28119: LD_EXP 113
28123: PUSH
28124: LD_VAR 0 6
28128: ARRAY
28129: PUSH
28130: LD_VAR 0 5
28134: ARRAY
28135: PUSH
28136: LD_INT 1
28138: ARRAY
28139: PPUSH
28140: LD_EXP 113
28144: PUSH
28145: LD_VAR 0 6
28149: ARRAY
28150: PUSH
28151: LD_VAR 0 5
28155: ARRAY
28156: PUSH
28157: LD_INT 2
28159: ARRAY
28160: PPUSH
28161: LD_VAR 0 2
28165: PPUSH
28166: LD_VAR 0 3
28170: PPUSH
28171: CALL_OW 298
28175: PUSH
28176: LD_INT 6
28178: LESS
28179: IFFALSE 28278
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28181: LD_EXP 113
28185: PUSH
28186: LD_VAR 0 6
28190: ARRAY
28191: PUSH
28192: LD_VAR 0 5
28196: ARRAY
28197: PUSH
28198: LD_INT 1
28200: ARRAY
28201: PPUSH
28202: LD_EXP 113
28206: PUSH
28207: LD_VAR 0 6
28211: ARRAY
28212: PUSH
28213: LD_VAR 0 5
28217: ARRAY
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 255
28232: PPUSH
28233: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28237: LD_ADDR_EXP 113
28241: PUSH
28242: LD_EXP 113
28246: PPUSH
28247: LD_VAR 0 6
28251: PPUSH
28252: LD_EXP 113
28256: PUSH
28257: LD_VAR 0 6
28261: ARRAY
28262: PPUSH
28263: LD_VAR 0 5
28267: PPUSH
28268: CALL_OW 3
28272: PPUSH
28273: CALL_OW 1
28277: ST_TO_ADDR
// end ; end ;
28278: GO 28116
28280: POP
28281: POP
// end ;
28282: LD_VAR 0 4
28286: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28287: LD_INT 0
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
28293: PPUSH
28294: PPUSH
28295: PPUSH
28296: PPUSH
28297: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 264
28307: PUSH
28308: LD_EXP 33
28312: EQUAL
28313: NOT
28314: PUSH
28315: LD_VAR 0 1
28319: PUSH
28320: LD_EXP 112
28324: IN
28325: NOT
28326: OR
28327: IFFALSE 28331
// exit ;
28329: GO 28653
// index := GetElementIndex ( minersList , unit ) ;
28331: LD_ADDR_VAR 0 6
28335: PUSH
28336: LD_EXP 112
28340: PPUSH
28341: LD_VAR 0 1
28345: PPUSH
28346: CALL 33849 0 2
28350: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28351: LD_ADDR_VAR 0 8
28355: PUSH
28356: LD_EXP 114
28360: PUSH
28361: LD_EXP 113
28365: PUSH
28366: LD_VAR 0 6
28370: ARRAY
28371: MINUS
28372: ST_TO_ADDR
// if not minesFreeAmount then
28373: LD_VAR 0 8
28377: NOT
28378: IFFALSE 28382
// exit ;
28380: GO 28653
// tmp := [ ] ;
28382: LD_ADDR_VAR 0 7
28386: PUSH
28387: EMPTY
28388: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28389: LD_ADDR_VAR 0 5
28393: PUSH
28394: DOUBLE
28395: LD_INT 1
28397: DEC
28398: ST_TO_ADDR
28399: LD_VAR 0 8
28403: PUSH
28404: FOR_TO
28405: IFFALSE 28600
// begin _d := rand ( 0 , 5 ) ;
28407: LD_ADDR_VAR 0 11
28411: PUSH
28412: LD_INT 0
28414: PPUSH
28415: LD_INT 5
28417: PPUSH
28418: CALL_OW 12
28422: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28423: LD_ADDR_VAR 0 12
28427: PUSH
28428: LD_INT 2
28430: PPUSH
28431: LD_INT 6
28433: PPUSH
28434: CALL_OW 12
28438: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28439: LD_ADDR_VAR 0 9
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_VAR 0 11
28453: PPUSH
28454: LD_VAR 0 12
28458: PPUSH
28459: CALL_OW 272
28463: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28464: LD_ADDR_VAR 0 10
28468: PUSH
28469: LD_VAR 0 3
28473: PPUSH
28474: LD_VAR 0 11
28478: PPUSH
28479: LD_VAR 0 12
28483: PPUSH
28484: CALL_OW 273
28488: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28489: LD_VAR 0 9
28493: PPUSH
28494: LD_VAR 0 10
28498: PPUSH
28499: CALL_OW 488
28503: PUSH
28504: LD_VAR 0 9
28508: PUSH
28509: LD_VAR 0 10
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_VAR 0 7
28522: IN
28523: NOT
28524: AND
28525: PUSH
28526: LD_VAR 0 9
28530: PPUSH
28531: LD_VAR 0 10
28535: PPUSH
28536: CALL_OW 458
28540: NOT
28541: AND
28542: IFFALSE 28584
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28544: LD_ADDR_VAR 0 7
28548: PUSH
28549: LD_VAR 0 7
28553: PPUSH
28554: LD_VAR 0 7
28558: PUSH
28559: LD_INT 1
28561: PLUS
28562: PPUSH
28563: LD_VAR 0 9
28567: PUSH
28568: LD_VAR 0 10
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 1
28581: ST_TO_ADDR
28582: GO 28598
// i := i - 1 ;
28584: LD_ADDR_VAR 0 5
28588: PUSH
28589: LD_VAR 0 5
28593: PUSH
28594: LD_INT 1
28596: MINUS
28597: ST_TO_ADDR
// end ;
28598: GO 28404
28600: POP
28601: POP
// for i in tmp do
28602: LD_ADDR_VAR 0 5
28606: PUSH
28607: LD_VAR 0 7
28611: PUSH
28612: FOR_IN
28613: IFFALSE 28651
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_VAR 0 5
28624: PUSH
28625: LD_INT 1
28627: ARRAY
28628: PPUSH
28629: LD_VAR 0 5
28633: PUSH
28634: LD_INT 2
28636: ARRAY
28637: PPUSH
28638: CALL 27593 0 3
28642: NOT
28643: IFFALSE 28649
// exit ;
28645: POP
28646: POP
28647: GO 28653
28649: GO 28612
28651: POP
28652: POP
// end ;
28653: LD_VAR 0 4
28657: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28658: LD_INT 0
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
28664: PPUSH
28665: PPUSH
28666: PPUSH
// if not GetClass ( unit ) = class_sniper then
28667: LD_VAR 0 1
28671: PPUSH
28672: CALL_OW 257
28676: PUSH
28677: LD_INT 5
28679: EQUAL
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 29073
// dist := 8 ;
28685: LD_ADDR_VAR 0 5
28689: PUSH
28690: LD_INT 8
28692: ST_TO_ADDR
// viewRange := 12 ;
28693: LD_ADDR_VAR 0 7
28697: PUSH
28698: LD_INT 12
28700: ST_TO_ADDR
// side := GetSide ( unit ) ;
28701: LD_ADDR_VAR 0 6
28705: PUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: CALL_OW 255
28715: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28716: LD_INT 61
28718: PPUSH
28719: LD_VAR 0 6
28723: PPUSH
28724: CALL_OW 321
28728: PUSH
28729: LD_INT 2
28731: EQUAL
28732: IFFALSE 28742
// viewRange := 16 ;
28734: LD_ADDR_VAR 0 7
28738: PUSH
28739: LD_INT 16
28741: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28742: LD_VAR 0 1
28746: PPUSH
28747: LD_VAR 0 2
28751: PPUSH
28752: LD_VAR 0 3
28756: PPUSH
28757: CALL_OW 297
28761: PUSH
28762: LD_VAR 0 5
28766: GREATER
28767: IFFALSE 28846
// begin ComMoveXY ( unit , x , y ) ;
28769: LD_VAR 0 1
28773: PPUSH
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_VAR 0 3
28783: PPUSH
28784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28788: LD_INT 35
28790: PPUSH
28791: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_VAR 0 3
28809: PPUSH
28810: CALL 64621 0 3
28814: NOT
28815: IFFALSE 28819
// exit ;
28817: GO 29073
// until GetDistUnitXY ( unit , x , y ) < dist ;
28819: LD_VAR 0 1
28823: PPUSH
28824: LD_VAR 0 2
28828: PPUSH
28829: LD_VAR 0 3
28833: PPUSH
28834: CALL_OW 297
28838: PUSH
28839: LD_VAR 0 5
28843: LESS
28844: IFFALSE 28788
// end ; ComTurnXY ( unit , x , y ) ;
28846: LD_VAR 0 1
28850: PPUSH
28851: LD_VAR 0 2
28855: PPUSH
28856: LD_VAR 0 3
28860: PPUSH
28861: CALL_OW 118
// wait ( 5 ) ;
28865: LD_INT 5
28867: PPUSH
28868: CALL_OW 67
// _d := GetDir ( unit ) ;
28872: LD_ADDR_VAR 0 10
28876: PUSH
28877: LD_VAR 0 1
28881: PPUSH
28882: CALL_OW 254
28886: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28887: LD_ADDR_VAR 0 8
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: CALL_OW 250
28901: PPUSH
28902: LD_VAR 0 10
28906: PPUSH
28907: LD_VAR 0 5
28911: PPUSH
28912: CALL_OW 272
28916: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28917: LD_ADDR_VAR 0 9
28921: PUSH
28922: LD_VAR 0 1
28926: PPUSH
28927: CALL_OW 251
28931: PPUSH
28932: LD_VAR 0 10
28936: PPUSH
28937: LD_VAR 0 5
28941: PPUSH
28942: CALL_OW 273
28946: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28947: LD_VAR 0 8
28951: PPUSH
28952: LD_VAR 0 9
28956: PPUSH
28957: CALL_OW 488
28961: NOT
28962: IFFALSE 28966
// exit ;
28964: GO 29073
// ComAnimCustom ( unit , 1 ) ;
28966: LD_VAR 0 1
28970: PPUSH
28971: LD_INT 1
28973: PPUSH
28974: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28978: LD_VAR 0 8
28982: PPUSH
28983: LD_VAR 0 9
28987: PPUSH
28988: LD_VAR 0 6
28992: PPUSH
28993: LD_VAR 0 7
28997: PPUSH
28998: CALL_OW 330
// repeat wait ( 1 ) ;
29002: LD_INT 1
29004: PPUSH
29005: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 316
29018: PUSH
29019: LD_VAR 0 1
29023: PPUSH
29024: CALL_OW 314
29028: OR
29029: PUSH
29030: LD_VAR 0 1
29034: PPUSH
29035: CALL_OW 302
29039: NOT
29040: OR
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 301
29051: OR
29052: IFFALSE 29002
// RemoveSeeing ( _x , _y , side ) ;
29054: LD_VAR 0 8
29058: PPUSH
29059: LD_VAR 0 9
29063: PPUSH
29064: LD_VAR 0 6
29068: PPUSH
29069: CALL_OW 331
// end ; end_of_file
29073: LD_VAR 0 4
29077: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29078: LD_INT 0
29080: PPUSH
29081: PPUSH
// if exist_mode then
29082: LD_VAR 0 2
29086: IFFALSE 29111
// unit := CreateCharacter ( prefix & ident ) else
29088: LD_ADDR_VAR 0 5
29092: PUSH
29093: LD_VAR 0 3
29097: PUSH
29098: LD_VAR 0 1
29102: STR
29103: PPUSH
29104: CALL_OW 34
29108: ST_TO_ADDR
29109: GO 29126
// unit := NewCharacter ( ident ) ;
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: LD_VAR 0 1
29120: PPUSH
29121: CALL_OW 25
29125: ST_TO_ADDR
// result := unit ;
29126: LD_ADDR_VAR 0 4
29130: PUSH
29131: LD_VAR 0 5
29135: ST_TO_ADDR
// end ;
29136: LD_VAR 0 4
29140: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
// if not side or not nation then
29145: LD_VAR 0 1
29149: NOT
29150: PUSH
29151: LD_VAR 0 2
29155: NOT
29156: OR
29157: IFFALSE 29161
// exit ;
29159: GO 29929
// case nation of nation_american :
29161: LD_VAR 0 2
29165: PUSH
29166: LD_INT 1
29168: DOUBLE
29169: EQUAL
29170: IFTRUE 29174
29172: GO 29388
29174: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29175: LD_ADDR_VAR 0 4
29179: PUSH
29180: LD_INT 35
29182: PUSH
29183: LD_INT 45
29185: PUSH
29186: LD_INT 46
29188: PUSH
29189: LD_INT 47
29191: PUSH
29192: LD_INT 82
29194: PUSH
29195: LD_INT 83
29197: PUSH
29198: LD_INT 84
29200: PUSH
29201: LD_INT 85
29203: PUSH
29204: LD_INT 86
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 6
29215: PUSH
29216: LD_INT 15
29218: PUSH
29219: LD_INT 16
29221: PUSH
29222: LD_INT 7
29224: PUSH
29225: LD_INT 12
29227: PUSH
29228: LD_INT 13
29230: PUSH
29231: LD_INT 10
29233: PUSH
29234: LD_INT 14
29236: PUSH
29237: LD_INT 20
29239: PUSH
29240: LD_INT 21
29242: PUSH
29243: LD_INT 22
29245: PUSH
29246: LD_INT 25
29248: PUSH
29249: LD_INT 32
29251: PUSH
29252: LD_INT 27
29254: PUSH
29255: LD_INT 36
29257: PUSH
29258: LD_INT 69
29260: PUSH
29261: LD_INT 39
29263: PUSH
29264: LD_INT 34
29266: PUSH
29267: LD_INT 40
29269: PUSH
29270: LD_INT 48
29272: PUSH
29273: LD_INT 49
29275: PUSH
29276: LD_INT 50
29278: PUSH
29279: LD_INT 51
29281: PUSH
29282: LD_INT 52
29284: PUSH
29285: LD_INT 53
29287: PUSH
29288: LD_INT 54
29290: PUSH
29291: LD_INT 55
29293: PUSH
29294: LD_INT 56
29296: PUSH
29297: LD_INT 57
29299: PUSH
29300: LD_INT 58
29302: PUSH
29303: LD_INT 59
29305: PUSH
29306: LD_INT 60
29308: PUSH
29309: LD_INT 61
29311: PUSH
29312: LD_INT 62
29314: PUSH
29315: LD_INT 80
29317: PUSH
29318: LD_INT 82
29320: PUSH
29321: LD_INT 83
29323: PUSH
29324: LD_INT 84
29326: PUSH
29327: LD_INT 85
29329: PUSH
29330: LD_INT 86
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
29386: GO 29853
29388: LD_INT 2
29390: DOUBLE
29391: EQUAL
29392: IFTRUE 29396
29394: GO 29622
29396: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29397: LD_ADDR_VAR 0 4
29401: PUSH
29402: LD_INT 35
29404: PUSH
29405: LD_INT 45
29407: PUSH
29408: LD_INT 46
29410: PUSH
29411: LD_INT 47
29413: PUSH
29414: LD_INT 82
29416: PUSH
29417: LD_INT 83
29419: PUSH
29420: LD_INT 84
29422: PUSH
29423: LD_INT 85
29425: PUSH
29426: LD_INT 87
29428: PUSH
29429: LD_INT 70
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 11
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 4
29443: PUSH
29444: LD_INT 5
29446: PUSH
29447: LD_INT 6
29449: PUSH
29450: LD_INT 15
29452: PUSH
29453: LD_INT 18
29455: PUSH
29456: LD_INT 7
29458: PUSH
29459: LD_INT 17
29461: PUSH
29462: LD_INT 8
29464: PUSH
29465: LD_INT 20
29467: PUSH
29468: LD_INT 21
29470: PUSH
29471: LD_INT 22
29473: PUSH
29474: LD_INT 72
29476: PUSH
29477: LD_INT 26
29479: PUSH
29480: LD_INT 69
29482: PUSH
29483: LD_INT 39
29485: PUSH
29486: LD_INT 40
29488: PUSH
29489: LD_INT 41
29491: PUSH
29492: LD_INT 42
29494: PUSH
29495: LD_INT 43
29497: PUSH
29498: LD_INT 48
29500: PUSH
29501: LD_INT 49
29503: PUSH
29504: LD_INT 50
29506: PUSH
29507: LD_INT 51
29509: PUSH
29510: LD_INT 52
29512: PUSH
29513: LD_INT 53
29515: PUSH
29516: LD_INT 54
29518: PUSH
29519: LD_INT 55
29521: PUSH
29522: LD_INT 56
29524: PUSH
29525: LD_INT 60
29527: PUSH
29528: LD_INT 61
29530: PUSH
29531: LD_INT 62
29533: PUSH
29534: LD_INT 66
29536: PUSH
29537: LD_INT 67
29539: PUSH
29540: LD_INT 68
29542: PUSH
29543: LD_INT 81
29545: PUSH
29546: LD_INT 82
29548: PUSH
29549: LD_INT 83
29551: PUSH
29552: LD_INT 84
29554: PUSH
29555: LD_INT 85
29557: PUSH
29558: LD_INT 87
29560: PUSH
29561: LD_INT 88
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
29620: GO 29853
29622: LD_INT 3
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29852
29630: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29631: LD_ADDR_VAR 0 4
29635: PUSH
29636: LD_INT 46
29638: PUSH
29639: LD_INT 47
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 82
29650: PUSH
29651: LD_INT 83
29653: PUSH
29654: LD_INT 84
29656: PUSH
29657: LD_INT 85
29659: PUSH
29660: LD_INT 86
29662: PUSH
29663: LD_INT 11
29665: PUSH
29666: LD_INT 9
29668: PUSH
29669: LD_INT 20
29671: PUSH
29672: LD_INT 19
29674: PUSH
29675: LD_INT 21
29677: PUSH
29678: LD_INT 24
29680: PUSH
29681: LD_INT 22
29683: PUSH
29684: LD_INT 25
29686: PUSH
29687: LD_INT 28
29689: PUSH
29690: LD_INT 29
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: LD_INT 31
29698: PUSH
29699: LD_INT 37
29701: PUSH
29702: LD_INT 38
29704: PUSH
29705: LD_INT 32
29707: PUSH
29708: LD_INT 27
29710: PUSH
29711: LD_INT 33
29713: PUSH
29714: LD_INT 69
29716: PUSH
29717: LD_INT 39
29719: PUSH
29720: LD_INT 34
29722: PUSH
29723: LD_INT 40
29725: PUSH
29726: LD_INT 71
29728: PUSH
29729: LD_INT 23
29731: PUSH
29732: LD_INT 44
29734: PUSH
29735: LD_INT 48
29737: PUSH
29738: LD_INT 49
29740: PUSH
29741: LD_INT 50
29743: PUSH
29744: LD_INT 51
29746: PUSH
29747: LD_INT 52
29749: PUSH
29750: LD_INT 53
29752: PUSH
29753: LD_INT 54
29755: PUSH
29756: LD_INT 55
29758: PUSH
29759: LD_INT 56
29761: PUSH
29762: LD_INT 57
29764: PUSH
29765: LD_INT 58
29767: PUSH
29768: LD_INT 59
29770: PUSH
29771: LD_INT 63
29773: PUSH
29774: LD_INT 64
29776: PUSH
29777: LD_INT 65
29779: PUSH
29780: LD_INT 82
29782: PUSH
29783: LD_INT 83
29785: PUSH
29786: LD_INT 84
29788: PUSH
29789: LD_INT 85
29791: PUSH
29792: LD_INT 86
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: ST_TO_ADDR
29850: GO 29853
29852: POP
// if state > - 1 and state < 3 then
29853: LD_VAR 0 3
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: GREATER
29862: PUSH
29863: LD_VAR 0 3
29867: PUSH
29868: LD_INT 3
29870: LESS
29871: AND
29872: IFFALSE 29929
// for i in result do
29874: LD_ADDR_VAR 0 5
29878: PUSH
29879: LD_VAR 0 4
29883: PUSH
29884: FOR_IN
29885: IFFALSE 29927
// if GetTech ( i , side ) <> state then
29887: LD_VAR 0 5
29891: PPUSH
29892: LD_VAR 0 1
29896: PPUSH
29897: CALL_OW 321
29901: PUSH
29902: LD_VAR 0 3
29906: NONEQUAL
29907: IFFALSE 29925
// result := result diff i ;
29909: LD_ADDR_VAR 0 4
29913: PUSH
29914: LD_VAR 0 4
29918: PUSH
29919: LD_VAR 0 5
29923: DIFF
29924: ST_TO_ADDR
29925: GO 29884
29927: POP
29928: POP
// end ;
29929: LD_VAR 0 4
29933: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
29938: PPUSH
// result := true ;
29939: LD_ADDR_VAR 0 3
29943: PUSH
29944: LD_INT 1
29946: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29947: LD_ADDR_VAR 0 5
29951: PUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: CALL_OW 480
29961: ST_TO_ADDR
// if not tmp then
29962: LD_VAR 0 5
29966: NOT
29967: IFFALSE 29971
// exit ;
29969: GO 30020
// for i in tmp do
29971: LD_ADDR_VAR 0 4
29975: PUSH
29976: LD_VAR 0 5
29980: PUSH
29981: FOR_IN
29982: IFFALSE 30018
// if GetTech ( i , side ) <> state_researched then
29984: LD_VAR 0 4
29988: PPUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 321
29998: PUSH
29999: LD_INT 2
30001: NONEQUAL
30002: IFFALSE 30016
// begin result := false ;
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 0
30011: ST_TO_ADDR
// exit ;
30012: POP
30013: POP
30014: GO 30020
// end ;
30016: GO 29981
30018: POP
30019: POP
// end ;
30020: LD_VAR 0 3
30024: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30025: LD_INT 0
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30040: LD_VAR 0 1
30044: NOT
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 257
30055: PUSH
30056: LD_INT 9
30058: NONEQUAL
30059: OR
30060: IFFALSE 30064
// exit ;
30062: GO 30637
// side := GetSide ( unit ) ;
30064: LD_ADDR_VAR 0 9
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 255
30078: ST_TO_ADDR
// tech_space := tech_spacanom ;
30079: LD_ADDR_VAR 0 12
30083: PUSH
30084: LD_INT 29
30086: ST_TO_ADDR
// tech_time := tech_taurad ;
30087: LD_ADDR_VAR 0 13
30091: PUSH
30092: LD_INT 28
30094: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30095: LD_ADDR_VAR 0 11
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 310
30109: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30110: LD_VAR 0 11
30114: PPUSH
30115: CALL_OW 247
30119: PUSH
30120: LD_INT 2
30122: EQUAL
30123: IFFALSE 30127
// exit ;
30125: GO 30637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30127: LD_ADDR_VAR 0 8
30131: PUSH
30132: LD_INT 81
30134: PUSH
30135: LD_VAR 0 9
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: LD_INT 21
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PPUSH
30165: CALL_OW 69
30169: ST_TO_ADDR
// if not tmp then
30170: LD_VAR 0 8
30174: NOT
30175: IFFALSE 30179
// exit ;
30177: GO 30637
// if in_unit then
30179: LD_VAR 0 11
30183: IFFALSE 30207
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30185: LD_ADDR_VAR 0 10
30189: PUSH
30190: LD_VAR 0 8
30194: PPUSH
30195: LD_VAR 0 11
30199: PPUSH
30200: CALL_OW 74
30204: ST_TO_ADDR
30205: GO 30227
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30207: LD_ADDR_VAR 0 10
30211: PUSH
30212: LD_VAR 0 8
30216: PPUSH
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 74
30226: ST_TO_ADDR
// if not enemy then
30227: LD_VAR 0 10
30231: NOT
30232: IFFALSE 30236
// exit ;
30234: GO 30637
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30236: LD_VAR 0 11
30240: PUSH
30241: LD_VAR 0 11
30245: PPUSH
30246: LD_VAR 0 10
30250: PPUSH
30251: CALL_OW 296
30255: PUSH
30256: LD_INT 13
30258: GREATER
30259: AND
30260: PUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_VAR 0 10
30270: PPUSH
30271: CALL_OW 296
30275: PUSH
30276: LD_INT 12
30278: GREATER
30279: OR
30280: IFFALSE 30284
// exit ;
30282: GO 30637
// missile := [ 1 ] ;
30284: LD_ADDR_VAR 0 14
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30295: LD_VAR 0 9
30299: PPUSH
30300: LD_VAR 0 12
30304: PPUSH
30305: CALL_OW 325
30309: IFFALSE 30338
// missile := Insert ( missile , missile + 1 , 2 ) ;
30311: LD_ADDR_VAR 0 14
30315: PUSH
30316: LD_VAR 0 14
30320: PPUSH
30321: LD_VAR 0 14
30325: PUSH
30326: LD_INT 1
30328: PLUS
30329: PPUSH
30330: LD_INT 2
30332: PPUSH
30333: CALL_OW 2
30337: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30338: LD_VAR 0 9
30342: PPUSH
30343: LD_VAR 0 13
30347: PPUSH
30348: CALL_OW 325
30352: PUSH
30353: LD_VAR 0 10
30357: PPUSH
30358: CALL_OW 255
30362: PPUSH
30363: LD_VAR 0 13
30367: PPUSH
30368: CALL_OW 325
30372: NOT
30373: AND
30374: IFFALSE 30403
// missile := Insert ( missile , missile + 1 , 3 ) ;
30376: LD_ADDR_VAR 0 14
30380: PUSH
30381: LD_VAR 0 14
30385: PPUSH
30386: LD_VAR 0 14
30390: PUSH
30391: LD_INT 1
30393: PLUS
30394: PPUSH
30395: LD_INT 3
30397: PPUSH
30398: CALL_OW 2
30402: ST_TO_ADDR
// if missile < 2 then
30403: LD_VAR 0 14
30407: PUSH
30408: LD_INT 2
30410: LESS
30411: IFFALSE 30415
// exit ;
30413: GO 30637
// x := GetX ( enemy ) ;
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_VAR 0 10
30424: PPUSH
30425: CALL_OW 250
30429: ST_TO_ADDR
// y := GetY ( enemy ) ;
30430: LD_ADDR_VAR 0 5
30434: PUSH
30435: LD_VAR 0 10
30439: PPUSH
30440: CALL_OW 251
30444: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30445: LD_ADDR_VAR 0 6
30449: PUSH
30450: LD_VAR 0 4
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PPUSH
30459: LD_INT 1
30461: PPUSH
30462: CALL_OW 12
30466: PLUS
30467: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30468: LD_ADDR_VAR 0 7
30472: PUSH
30473: LD_VAR 0 5
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PPUSH
30482: LD_INT 1
30484: PPUSH
30485: CALL_OW 12
30489: PLUS
30490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30491: LD_VAR 0 6
30495: PPUSH
30496: LD_VAR 0 7
30500: PPUSH
30501: CALL_OW 488
30505: NOT
30506: IFFALSE 30528
// begin _x := x ;
30508: LD_ADDR_VAR 0 6
30512: PUSH
30513: LD_VAR 0 4
30517: ST_TO_ADDR
// _y := y ;
30518: LD_ADDR_VAR 0 7
30522: PUSH
30523: LD_VAR 0 5
30527: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_INT 1
30535: PPUSH
30536: LD_VAR 0 14
30540: PPUSH
30541: CALL_OW 12
30545: ST_TO_ADDR
// case i of 1 :
30546: LD_VAR 0 3
30550: PUSH
30551: LD_INT 1
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30576
30559: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30560: LD_VAR 0 1
30564: PPUSH
30565: LD_VAR 0 10
30569: PPUSH
30570: CALL_OW 115
30574: GO 30637
30576: LD_INT 2
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30606
30584: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30585: LD_VAR 0 1
30589: PPUSH
30590: LD_VAR 0 6
30594: PPUSH
30595: LD_VAR 0 7
30599: PPUSH
30600: CALL_OW 153
30604: GO 30637
30606: LD_INT 3
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30636
30614: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30615: LD_VAR 0 1
30619: PPUSH
30620: LD_VAR 0 6
30624: PPUSH
30625: LD_VAR 0 7
30629: PPUSH
30630: CALL_OW 154
30634: GO 30637
30636: POP
// end ;
30637: LD_VAR 0 2
30641: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30642: LD_INT 0
30644: PPUSH
30645: PPUSH
30646: PPUSH
30647: PPUSH
30648: PPUSH
30649: PPUSH
// if not unit or not building then
30650: LD_VAR 0 1
30654: NOT
30655: PUSH
30656: LD_VAR 0 2
30660: NOT
30661: OR
30662: IFFALSE 30666
// exit ;
30664: GO 30824
// x := GetX ( building ) ;
30666: LD_ADDR_VAR 0 5
30670: PUSH
30671: LD_VAR 0 2
30675: PPUSH
30676: CALL_OW 250
30680: ST_TO_ADDR
// y := GetY ( building ) ;
30681: LD_ADDR_VAR 0 6
30685: PUSH
30686: LD_VAR 0 2
30690: PPUSH
30691: CALL_OW 251
30695: ST_TO_ADDR
// for i = 0 to 5 do
30696: LD_ADDR_VAR 0 4
30700: PUSH
30701: DOUBLE
30702: LD_INT 0
30704: DEC
30705: ST_TO_ADDR
30706: LD_INT 5
30708: PUSH
30709: FOR_TO
30710: IFFALSE 30822
// begin _x := ShiftX ( x , i , 3 ) ;
30712: LD_ADDR_VAR 0 7
30716: PUSH
30717: LD_VAR 0 5
30721: PPUSH
30722: LD_VAR 0 4
30726: PPUSH
30727: LD_INT 3
30729: PPUSH
30730: CALL_OW 272
30734: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30735: LD_ADDR_VAR 0 8
30739: PUSH
30740: LD_VAR 0 6
30744: PPUSH
30745: LD_VAR 0 4
30749: PPUSH
30750: LD_INT 3
30752: PPUSH
30753: CALL_OW 273
30757: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30758: LD_VAR 0 7
30762: PPUSH
30763: LD_VAR 0 8
30767: PPUSH
30768: CALL_OW 488
30772: NOT
30773: IFFALSE 30777
// continue ;
30775: GO 30709
// if HexInfo ( _x , _y ) = 0 then
30777: LD_VAR 0 7
30781: PPUSH
30782: LD_VAR 0 8
30786: PPUSH
30787: CALL_OW 428
30791: PUSH
30792: LD_INT 0
30794: EQUAL
30795: IFFALSE 30820
// begin ComMoveXY ( unit , _x , _y ) ;
30797: LD_VAR 0 1
30801: PPUSH
30802: LD_VAR 0 7
30806: PPUSH
30807: LD_VAR 0 8
30811: PPUSH
30812: CALL_OW 111
// exit ;
30816: POP
30817: POP
30818: GO 30824
// end ; end ;
30820: GO 30709
30822: POP
30823: POP
// end ;
30824: LD_VAR 0 3
30828: RET
// export function ScanBase ( side , base_area ) ; begin
30829: LD_INT 0
30831: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: LD_VAR 0 2
30841: PPUSH
30842: LD_INT 81
30844: PUSH
30845: LD_VAR 0 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PPUSH
30854: CALL_OW 70
30858: ST_TO_ADDR
// end ;
30859: LD_VAR 0 3
30863: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
// result := false ;
30870: LD_ADDR_VAR 0 2
30874: PUSH
30875: LD_INT 0
30877: ST_TO_ADDR
// side := GetSide ( unit ) ;
30878: LD_ADDR_VAR 0 3
30882: PUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 255
30892: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30893: LD_ADDR_VAR 0 4
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 248
30907: ST_TO_ADDR
// case nat of 1 :
30908: LD_VAR 0 4
30912: PUSH
30913: LD_INT 1
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 30932
30921: POP
// tech := tech_lassight ; 2 :
30922: LD_ADDR_VAR 0 5
30926: PUSH
30927: LD_INT 12
30929: ST_TO_ADDR
30930: GO 30971
30932: LD_INT 2
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30951
30940: POP
// tech := tech_mortar ; 3 :
30941: LD_ADDR_VAR 0 5
30945: PUSH
30946: LD_INT 41
30948: ST_TO_ADDR
30949: GO 30971
30951: LD_INT 3
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// tech := tech_bazooka ; end ;
30960: LD_ADDR_VAR 0 5
30964: PUSH
30965: LD_INT 44
30967: ST_TO_ADDR
30968: GO 30971
30970: POP
// if Researched ( side , tech ) then
30971: LD_VAR 0 3
30975: PPUSH
30976: LD_VAR 0 5
30980: PPUSH
30981: CALL_OW 325
30985: IFFALSE 31012
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: LD_INT 8
30997: PUSH
30998: LD_INT 9
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: LD_VAR 0 4
31010: ARRAY
31011: ST_TO_ADDR
// end ;
31012: LD_VAR 0 2
31016: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31017: LD_INT 0
31019: PPUSH
31020: PPUSH
31021: PPUSH
// if not mines then
31022: LD_VAR 0 2
31026: NOT
31027: IFFALSE 31031
// exit ;
31029: GO 31175
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_INT 81
31038: PUSH
31039: LD_VAR 0 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: LD_INT 21
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL_OW 69
31073: ST_TO_ADDR
// for i in mines do
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: LD_VAR 0 2
31083: PUSH
31084: FOR_IN
31085: IFFALSE 31173
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31087: LD_VAR 0 4
31091: PUSH
31092: LD_INT 1
31094: ARRAY
31095: PPUSH
31096: LD_VAR 0 4
31100: PUSH
31101: LD_INT 2
31103: ARRAY
31104: PPUSH
31105: CALL_OW 458
31109: NOT
31110: IFFALSE 31114
// continue ;
31112: GO 31084
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31114: LD_VAR 0 4
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 4
31127: PUSH
31128: LD_INT 2
31130: ARRAY
31131: PPUSH
31132: CALL_OW 428
31136: PUSH
31137: LD_VAR 0 5
31141: IN
31142: IFFALSE 31171
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31144: LD_VAR 0 4
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: PPUSH
31153: LD_VAR 0 4
31157: PUSH
31158: LD_INT 2
31160: ARRAY
31161: PPUSH
31162: LD_VAR 0 1
31166: PPUSH
31167: CALL_OW 456
// end ;
31171: GO 31084
31173: POP
31174: POP
// end ;
31175: LD_VAR 0 3
31179: RET
// export function Count ( array ) ; var i ; begin
31180: LD_INT 0
31182: PPUSH
31183: PPUSH
// result := 0 ;
31184: LD_ADDR_VAR 0 2
31188: PUSH
31189: LD_INT 0
31191: ST_TO_ADDR
// for i in array do
31192: LD_ADDR_VAR 0 3
31196: PUSH
31197: LD_VAR 0 1
31201: PUSH
31202: FOR_IN
31203: IFFALSE 31227
// if i then
31205: LD_VAR 0 3
31209: IFFALSE 31225
// result := result + 1 ;
31211: LD_ADDR_VAR 0 2
31215: PUSH
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 1
31223: PLUS
31224: ST_TO_ADDR
31225: GO 31202
31227: POP
31228: POP
// end ;
31229: LD_VAR 0 2
31233: RET
// export function IsEmpty ( building ) ; begin
31234: LD_INT 0
31236: PPUSH
// if not building then
31237: LD_VAR 0 1
31241: NOT
31242: IFFALSE 31246
// exit ;
31244: GO 31289
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31246: LD_ADDR_VAR 0 2
31250: PUSH
31251: LD_VAR 0 1
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 255
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 58
31275: PUSH
31276: EMPTY
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PPUSH
31283: CALL_OW 69
31287: IN
31288: ST_TO_ADDR
// end ;
31289: LD_VAR 0 2
31293: RET
// export function IsNotFull ( building ) ; begin
31294: LD_INT 0
31296: PPUSH
// if not building then
31297: LD_VAR 0 1
31301: NOT
31302: IFFALSE 31306
// exit ;
31304: GO 31325
// result := UnitsInside ( building ) < 6 ;
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_VAR 0 1
31315: PPUSH
31316: CALL_OW 313
31320: PUSH
31321: LD_INT 6
31323: LESS
31324: ST_TO_ADDR
// end ;
31325: LD_VAR 0 2
31329: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31330: LD_INT 0
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// tmp := [ ] ;
31336: LD_ADDR_VAR 0 3
31340: PUSH
31341: EMPTY
31342: ST_TO_ADDR
// list := [ ] ;
31343: LD_ADDR_VAR 0 5
31347: PUSH
31348: EMPTY
31349: ST_TO_ADDR
// for i = 16 to 25 do
31350: LD_ADDR_VAR 0 4
31354: PUSH
31355: DOUBLE
31356: LD_INT 16
31358: DEC
31359: ST_TO_ADDR
31360: LD_INT 25
31362: PUSH
31363: FOR_TO
31364: IFFALSE 31437
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_VAR 0 3
31375: PUSH
31376: LD_INT 22
31378: PUSH
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 255
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 91
31395: PUSH
31396: LD_VAR 0 1
31400: PUSH
31401: LD_INT 6
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 30
31411: PUSH
31412: LD_VAR 0 4
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: PPUSH
31429: CALL_OW 69
31433: ADD
31434: ST_TO_ADDR
31435: GO 31363
31437: POP
31438: POP
// for i = 1 to tmp do
31439: LD_ADDR_VAR 0 4
31443: PUSH
31444: DOUBLE
31445: LD_INT 1
31447: DEC
31448: ST_TO_ADDR
31449: LD_VAR 0 3
31453: PUSH
31454: FOR_TO
31455: IFFALSE 31543
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31457: LD_ADDR_VAR 0 5
31461: PUSH
31462: LD_VAR 0 5
31466: PUSH
31467: LD_VAR 0 3
31471: PUSH
31472: LD_VAR 0 4
31476: ARRAY
31477: PPUSH
31478: CALL_OW 266
31482: PUSH
31483: LD_VAR 0 3
31487: PUSH
31488: LD_VAR 0 4
31492: ARRAY
31493: PPUSH
31494: CALL_OW 250
31498: PUSH
31499: LD_VAR 0 3
31503: PUSH
31504: LD_VAR 0 4
31508: ARRAY
31509: PPUSH
31510: CALL_OW 251
31514: PUSH
31515: LD_VAR 0 3
31519: PUSH
31520: LD_VAR 0 4
31524: ARRAY
31525: PPUSH
31526: CALL_OW 254
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: ADD
31540: ST_TO_ADDR
31541: GO 31454
31543: POP
31544: POP
// result := list ;
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: LD_VAR 0 5
31554: ST_TO_ADDR
// end ;
31555: LD_VAR 0 2
31559: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31560: LD_INT 0
31562: PPUSH
31563: PPUSH
31564: PPUSH
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
// if not factory then
31569: LD_VAR 0 1
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 32171
// if control = control_apeman then
31578: LD_VAR 0 4
31582: PUSH
31583: LD_INT 5
31585: EQUAL
31586: IFFALSE 31695
// begin tmp := UnitsInside ( factory ) ;
31588: LD_ADDR_VAR 0 8
31592: PUSH
31593: LD_VAR 0 1
31597: PPUSH
31598: CALL_OW 313
31602: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31603: LD_VAR 0 8
31607: PPUSH
31608: LD_INT 25
31610: PUSH
31611: LD_INT 12
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PPUSH
31618: CALL_OW 72
31622: NOT
31623: IFFALSE 31633
// control := control_manual ;
31625: LD_ADDR_VAR 0 4
31629: PUSH
31630: LD_INT 1
31632: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31633: LD_ADDR_VAR 0 8
31637: PUSH
31638: LD_VAR 0 1
31642: PPUSH
31643: CALL 31330 0 1
31647: ST_TO_ADDR
// if tmp then
31648: LD_VAR 0 8
31652: IFFALSE 31695
// begin for i in tmp do
31654: LD_ADDR_VAR 0 7
31658: PUSH
31659: LD_VAR 0 8
31663: PUSH
31664: FOR_IN
31665: IFFALSE 31693
// if i [ 1 ] = b_ext_radio then
31667: LD_VAR 0 7
31671: PUSH
31672: LD_INT 1
31674: ARRAY
31675: PUSH
31676: LD_INT 22
31678: EQUAL
31679: IFFALSE 31691
// begin control := control_remote ;
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_INT 2
31688: ST_TO_ADDR
// break ;
31689: GO 31693
// end ;
31691: GO 31664
31693: POP
31694: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31695: LD_VAR 0 1
31699: PPUSH
31700: LD_VAR 0 2
31704: PPUSH
31705: LD_VAR 0 3
31709: PPUSH
31710: LD_VAR 0 4
31714: PPUSH
31715: LD_VAR 0 5
31719: PPUSH
31720: CALL_OW 448
31724: IFFALSE 31759
// begin result := [ chassis , engine , control , weapon ] ;
31726: LD_ADDR_VAR 0 6
31730: PUSH
31731: LD_VAR 0 2
31735: PUSH
31736: LD_VAR 0 3
31740: PUSH
31741: LD_VAR 0 4
31745: PUSH
31746: LD_VAR 0 5
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
// exit ;
31757: GO 32171
// end ; _chassis := AvailableChassisList ( factory ) ;
31759: LD_ADDR_VAR 0 9
31763: PUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 475
31773: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31774: LD_ADDR_VAR 0 11
31778: PUSH
31779: LD_VAR 0 1
31783: PPUSH
31784: CALL_OW 476
31788: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31789: LD_ADDR_VAR 0 12
31793: PUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: CALL_OW 477
31803: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31804: LD_ADDR_VAR 0 10
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 478
31818: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31819: LD_VAR 0 9
31823: NOT
31824: PUSH
31825: LD_VAR 0 11
31829: NOT
31830: OR
31831: PUSH
31832: LD_VAR 0 12
31836: NOT
31837: OR
31838: PUSH
31839: LD_VAR 0 10
31843: NOT
31844: OR
31845: IFFALSE 31880
// begin result := [ chassis , engine , control , weapon ] ;
31847: LD_ADDR_VAR 0 6
31851: PUSH
31852: LD_VAR 0 2
31856: PUSH
31857: LD_VAR 0 3
31861: PUSH
31862: LD_VAR 0 4
31866: PUSH
31867: LD_VAR 0 5
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: ST_TO_ADDR
// exit ;
31878: GO 32171
// end ; if not chassis in _chassis then
31880: LD_VAR 0 2
31884: PUSH
31885: LD_VAR 0 9
31889: IN
31890: NOT
31891: IFFALSE 31917
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31893: LD_ADDR_VAR 0 2
31897: PUSH
31898: LD_VAR 0 9
31902: PUSH
31903: LD_INT 1
31905: PPUSH
31906: LD_VAR 0 9
31910: PPUSH
31911: CALL_OW 12
31915: ARRAY
31916: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31917: LD_VAR 0 2
31921: PPUSH
31922: LD_VAR 0 3
31926: PPUSH
31927: CALL 32176 0 2
31931: NOT
31932: IFFALSE 31991
// repeat engine := _engine [ 1 ] ;
31934: LD_ADDR_VAR 0 3
31938: PUSH
31939: LD_VAR 0 11
31943: PUSH
31944: LD_INT 1
31946: ARRAY
31947: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31948: LD_ADDR_VAR 0 11
31952: PUSH
31953: LD_VAR 0 11
31957: PPUSH
31958: LD_INT 1
31960: PPUSH
31961: CALL_OW 3
31965: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31966: LD_VAR 0 2
31970: PPUSH
31971: LD_VAR 0 3
31975: PPUSH
31976: CALL 32176 0 2
31980: PUSH
31981: LD_VAR 0 11
31985: PUSH
31986: EMPTY
31987: EQUAL
31988: OR
31989: IFFALSE 31934
// if not control in _control then
31991: LD_VAR 0 4
31995: PUSH
31996: LD_VAR 0 12
32000: IN
32001: NOT
32002: IFFALSE 32028
// control := _control [ rand ( 1 , _control ) ] ;
32004: LD_ADDR_VAR 0 4
32008: PUSH
32009: LD_VAR 0 12
32013: PUSH
32014: LD_INT 1
32016: PPUSH
32017: LD_VAR 0 12
32021: PPUSH
32022: CALL_OW 12
32026: ARRAY
32027: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32028: LD_VAR 0 2
32032: PPUSH
32033: LD_VAR 0 5
32037: PPUSH
32038: CALL 32396 0 2
32042: NOT
32043: IFFALSE 32102
// repeat weapon := _weapon [ 1 ] ;
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_VAR 0 10
32054: PUSH
32055: LD_INT 1
32057: ARRAY
32058: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32059: LD_ADDR_VAR 0 10
32063: PUSH
32064: LD_VAR 0 10
32068: PPUSH
32069: LD_INT 1
32071: PPUSH
32072: CALL_OW 3
32076: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_VAR 0 5
32086: PPUSH
32087: CALL 32396 0 2
32091: PUSH
32092: LD_VAR 0 10
32096: PUSH
32097: EMPTY
32098: EQUAL
32099: OR
32100: IFFALSE 32045
// result := [ ] ;
32102: LD_ADDR_VAR 0 6
32106: PUSH
32107: EMPTY
32108: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32109: LD_VAR 0 1
32113: PPUSH
32114: LD_VAR 0 2
32118: PPUSH
32119: LD_VAR 0 3
32123: PPUSH
32124: LD_VAR 0 4
32128: PPUSH
32129: LD_VAR 0 5
32133: PPUSH
32134: CALL_OW 448
32138: IFFALSE 32171
// result := [ chassis , engine , control , weapon ] ;
32140: LD_ADDR_VAR 0 6
32144: PUSH
32145: LD_VAR 0 2
32149: PUSH
32150: LD_VAR 0 3
32154: PUSH
32155: LD_VAR 0 4
32159: PUSH
32160: LD_VAR 0 5
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: ST_TO_ADDR
// end ;
32171: LD_VAR 0 6
32175: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32176: LD_INT 0
32178: PPUSH
// if not chassis or not engine then
32179: LD_VAR 0 1
32183: NOT
32184: PUSH
32185: LD_VAR 0 2
32189: NOT
32190: OR
32191: IFFALSE 32195
// exit ;
32193: GO 32391
// case engine of engine_solar :
32195: LD_VAR 0 2
32199: PUSH
32200: LD_INT 2
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32246
32208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32209: LD_ADDR_VAR 0 3
32213: PUSH
32214: LD_INT 11
32216: PUSH
32217: LD_INT 12
32219: PUSH
32220: LD_INT 13
32222: PUSH
32223: LD_INT 14
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 3
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
32244: GO 32375
32246: LD_INT 1
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32316
32254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_INT 11
32262: PUSH
32263: LD_INT 12
32265: PUSH
32266: LD_INT 13
32268: PUSH
32269: LD_INT 14
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 4
32283: PUSH
32284: LD_INT 5
32286: PUSH
32287: LD_INT 21
32289: PUSH
32290: LD_INT 23
32292: PUSH
32293: LD_INT 22
32295: PUSH
32296: LD_INT 24
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
32314: GO 32375
32316: LD_INT 3
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32374
32324: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32325: LD_ADDR_VAR 0 3
32329: PUSH
32330: LD_INT 13
32332: PUSH
32333: LD_INT 14
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: LD_INT 4
32344: PUSH
32345: LD_INT 5
32347: PUSH
32348: LD_INT 21
32350: PUSH
32351: LD_INT 22
32353: PUSH
32354: LD_INT 23
32356: PUSH
32357: LD_INT 24
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
32372: GO 32375
32374: POP
// result := ( chassis in result ) ;
32375: LD_ADDR_VAR 0 3
32379: PUSH
32380: LD_VAR 0 1
32384: PUSH
32385: LD_VAR 0 3
32389: IN
32390: ST_TO_ADDR
// end ;
32391: LD_VAR 0 3
32395: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32396: LD_INT 0
32398: PPUSH
// if not chassis or not weapon then
32399: LD_VAR 0 1
32403: NOT
32404: PUSH
32405: LD_VAR 0 2
32409: NOT
32410: OR
32411: IFFALSE 32415
// exit ;
32413: GO 33477
// case weapon of us_machine_gun :
32415: LD_VAR 0 2
32419: PUSH
32420: LD_INT 2
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32428
32426: GO 32458
32428: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32429: LD_ADDR_VAR 0 3
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: LD_INT 5
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
32456: GO 33461
32458: LD_INT 3
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32496
32466: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32467: LD_ADDR_VAR 0 3
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: LD_INT 5
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: ST_TO_ADDR
32494: GO 33461
32496: LD_INT 11
32498: DOUBLE
32499: EQUAL
32500: IFTRUE 32504
32502: GO 32534
32504: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 33461
32534: LD_INT 4
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32568
32542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: LD_INT 4
32556: PUSH
32557: LD_INT 5
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 33461
32568: LD_INT 5
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32602
32576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 3
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: LD_INT 5
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 33461
32602: LD_INT 9
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32636
32610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: LD_INT 4
32624: PUSH
32625: LD_INT 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
32634: GO 33461
32636: LD_INT 7
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32670
32644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 4
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
32668: GO 33461
32670: LD_INT 12
32672: DOUBLE
32673: EQUAL
32674: IFTRUE 32678
32676: GO 32704
32678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32679: LD_ADDR_VAR 0 3
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
32702: GO 33461
32704: LD_INT 13
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32738
32712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: LD_INT 4
32726: PUSH
32727: LD_INT 5
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
32736: GO 33461
32738: LD_INT 14
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32764
32746: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32747: LD_ADDR_VAR 0 3
32751: PUSH
32752: LD_INT 4
32754: PUSH
32755: LD_INT 5
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: ST_TO_ADDR
32762: GO 33461
32764: LD_INT 6
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32790
32772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32773: LD_ADDR_VAR 0 3
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: ST_TO_ADDR
32788: GO 33461
32790: LD_INT 10
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32816
32798: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32799: LD_ADDR_VAR 0 3
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: ST_TO_ADDR
32814: GO 33461
32816: LD_INT 22
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32850
32824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: LD_INT 11
32832: PUSH
32833: LD_INT 12
32835: PUSH
32836: LD_INT 13
32838: PUSH
32839: LD_INT 14
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
32848: GO 33461
32850: LD_INT 23
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32884
32858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32859: LD_ADDR_VAR 0 3
32863: PUSH
32864: LD_INT 11
32866: PUSH
32867: LD_INT 12
32869: PUSH
32870: LD_INT 13
32872: PUSH
32873: LD_INT 14
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
32882: GO 33461
32884: LD_INT 24
32886: DOUBLE
32887: EQUAL
32888: IFTRUE 32892
32890: GO 32918
32892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32893: LD_ADDR_VAR 0 3
32897: PUSH
32898: LD_INT 11
32900: PUSH
32901: LD_INT 12
32903: PUSH
32904: LD_INT 13
32906: PUSH
32907: LD_INT 14
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: ST_TO_ADDR
32916: GO 33461
32918: LD_INT 30
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32952
32926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32927: LD_ADDR_VAR 0 3
32931: PUSH
32932: LD_INT 11
32934: PUSH
32935: LD_INT 12
32937: PUSH
32938: LD_INT 13
32940: PUSH
32941: LD_INT 14
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: ST_TO_ADDR
32950: GO 33461
32952: LD_INT 25
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32978
32960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: LD_INT 13
32968: PUSH
32969: LD_INT 14
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: ST_TO_ADDR
32976: GO 33461
32978: LD_INT 27
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33004
32986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_INT 13
32994: PUSH
32995: LD_INT 14
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: ST_TO_ADDR
33002: GO 33461
33004: LD_EXP 31
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33040
33014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33015: LD_ADDR_VAR 0 3
33019: PUSH
33020: LD_INT 11
33022: PUSH
33023: LD_INT 12
33025: PUSH
33026: LD_INT 13
33028: PUSH
33029: LD_INT 14
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
33038: GO 33461
33040: LD_INT 28
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33048
33046: GO 33066
33048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33049: LD_ADDR_VAR 0 3
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: LD_INT 14
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: ST_TO_ADDR
33064: GO 33461
33066: LD_INT 29
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33092
33074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_INT 13
33082: PUSH
33083: LD_INT 14
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: ST_TO_ADDR
33090: GO 33461
33092: LD_INT 31
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33118
33100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33101: LD_ADDR_VAR 0 3
33105: PUSH
33106: LD_INT 13
33108: PUSH
33109: LD_INT 14
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33461
33118: LD_INT 26
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33144
33126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 13
33134: PUSH
33135: LD_INT 14
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: ST_TO_ADDR
33142: GO 33461
33144: LD_INT 42
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33178
33152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33153: LD_ADDR_VAR 0 3
33157: PUSH
33158: LD_INT 21
33160: PUSH
33161: LD_INT 22
33163: PUSH
33164: LD_INT 23
33166: PUSH
33167: LD_INT 24
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
33176: GO 33461
33178: LD_INT 43
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33186
33184: GO 33212
33186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 21
33194: PUSH
33195: LD_INT 22
33197: PUSH
33198: LD_INT 23
33200: PUSH
33201: LD_INT 24
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
33210: GO 33461
33212: LD_INT 44
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33246
33220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 21
33228: PUSH
33229: LD_INT 22
33231: PUSH
33232: LD_INT 23
33234: PUSH
33235: LD_INT 24
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
33244: GO 33461
33246: LD_INT 45
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33280
33254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33255: LD_ADDR_VAR 0 3
33259: PUSH
33260: LD_INT 21
33262: PUSH
33263: LD_INT 22
33265: PUSH
33266: LD_INT 23
33268: PUSH
33269: LD_INT 24
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
33278: GO 33461
33280: LD_INT 49
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33314
33288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_INT 21
33296: PUSH
33297: LD_INT 22
33299: PUSH
33300: LD_INT 23
33302: PUSH
33303: LD_INT 24
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: ST_TO_ADDR
33312: GO 33461
33314: LD_INT 51
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33348
33322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 21
33330: PUSH
33331: LD_INT 22
33333: PUSH
33334: LD_INT 23
33336: PUSH
33337: LD_INT 24
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
33346: GO 33461
33348: LD_INT 52
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33382
33356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_INT 21
33364: PUSH
33365: LD_INT 22
33367: PUSH
33368: LD_INT 23
33370: PUSH
33371: LD_INT 24
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
33380: GO 33461
33382: LD_INT 53
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33408
33390: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 23
33398: PUSH
33399: LD_INT 24
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: ST_TO_ADDR
33406: GO 33461
33408: LD_INT 46
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33434
33416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_INT 23
33424: PUSH
33425: LD_INT 24
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: ST_TO_ADDR
33432: GO 33461
33434: LD_INT 47
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33460
33442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_INT 23
33450: PUSH
33451: LD_INT 24
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 33461
33460: POP
// result := ( chassis in result ) ;
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_VAR 0 1
33470: PUSH
33471: LD_VAR 0 3
33475: IN
33476: ST_TO_ADDR
// end ;
33477: LD_VAR 0 3
33481: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33482: LD_INT 0
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
// result := array ;
33491: LD_ADDR_VAR 0 5
33495: PUSH
33496: LD_VAR 0 1
33500: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33501: LD_VAR 0 1
33505: NOT
33506: PUSH
33507: LD_VAR 0 2
33511: NOT
33512: OR
33513: PUSH
33514: LD_VAR 0 3
33518: NOT
33519: OR
33520: PUSH
33521: LD_VAR 0 2
33525: PUSH
33526: LD_VAR 0 1
33530: GREATER
33531: OR
33532: PUSH
33533: LD_VAR 0 3
33537: PUSH
33538: LD_VAR 0 1
33542: GREATER
33543: OR
33544: IFFALSE 33548
// exit ;
33546: GO 33844
// if direction then
33548: LD_VAR 0 4
33552: IFFALSE 33616
// begin d := 1 ;
33554: LD_ADDR_VAR 0 9
33558: PUSH
33559: LD_INT 1
33561: ST_TO_ADDR
// if i_from > i_to then
33562: LD_VAR 0 2
33566: PUSH
33567: LD_VAR 0 3
33571: GREATER
33572: IFFALSE 33598
// length := ( array - i_from ) + i_to else
33574: LD_ADDR_VAR 0 11
33578: PUSH
33579: LD_VAR 0 1
33583: PUSH
33584: LD_VAR 0 2
33588: MINUS
33589: PUSH
33590: LD_VAR 0 3
33594: PLUS
33595: ST_TO_ADDR
33596: GO 33614
// length := i_to - i_from ;
33598: LD_ADDR_VAR 0 11
33602: PUSH
33603: LD_VAR 0 3
33607: PUSH
33608: LD_VAR 0 2
33612: MINUS
33613: ST_TO_ADDR
// end else
33614: GO 33677
// begin d := - 1 ;
33616: LD_ADDR_VAR 0 9
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: ST_TO_ADDR
// if i_from > i_to then
33625: LD_VAR 0 2
33629: PUSH
33630: LD_VAR 0 3
33634: GREATER
33635: IFFALSE 33655
// length := i_from - i_to else
33637: LD_ADDR_VAR 0 11
33641: PUSH
33642: LD_VAR 0 2
33646: PUSH
33647: LD_VAR 0 3
33651: MINUS
33652: ST_TO_ADDR
33653: GO 33677
// length := ( array - i_to ) + i_from ;
33655: LD_ADDR_VAR 0 11
33659: PUSH
33660: LD_VAR 0 1
33664: PUSH
33665: LD_VAR 0 3
33669: MINUS
33670: PUSH
33671: LD_VAR 0 2
33675: PLUS
33676: ST_TO_ADDR
// end ; if not length then
33677: LD_VAR 0 11
33681: NOT
33682: IFFALSE 33686
// exit ;
33684: GO 33844
// tmp := array ;
33686: LD_ADDR_VAR 0 10
33690: PUSH
33691: LD_VAR 0 1
33695: ST_TO_ADDR
// for i = 1 to length do
33696: LD_ADDR_VAR 0 6
33700: PUSH
33701: DOUBLE
33702: LD_INT 1
33704: DEC
33705: ST_TO_ADDR
33706: LD_VAR 0 11
33710: PUSH
33711: FOR_TO
33712: IFFALSE 33832
// begin for j = 1 to array do
33714: LD_ADDR_VAR 0 7
33718: PUSH
33719: DOUBLE
33720: LD_INT 1
33722: DEC
33723: ST_TO_ADDR
33724: LD_VAR 0 1
33728: PUSH
33729: FOR_TO
33730: IFFALSE 33818
// begin k := j + d ;
33732: LD_ADDR_VAR 0 8
33736: PUSH
33737: LD_VAR 0 7
33741: PUSH
33742: LD_VAR 0 9
33746: PLUS
33747: ST_TO_ADDR
// if k > array then
33748: LD_VAR 0 8
33752: PUSH
33753: LD_VAR 0 1
33757: GREATER
33758: IFFALSE 33768
// k := 1 ;
33760: LD_ADDR_VAR 0 8
33764: PUSH
33765: LD_INT 1
33767: ST_TO_ADDR
// if not k then
33768: LD_VAR 0 8
33772: NOT
33773: IFFALSE 33785
// k := array ;
33775: LD_ADDR_VAR 0 8
33779: PUSH
33780: LD_VAR 0 1
33784: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33785: LD_ADDR_VAR 0 10
33789: PUSH
33790: LD_VAR 0 10
33794: PPUSH
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_VAR 0 1
33804: PUSH
33805: LD_VAR 0 7
33809: ARRAY
33810: PPUSH
33811: CALL_OW 1
33815: ST_TO_ADDR
// end ;
33816: GO 33729
33818: POP
33819: POP
// array := tmp ;
33820: LD_ADDR_VAR 0 1
33824: PUSH
33825: LD_VAR 0 10
33829: ST_TO_ADDR
// end ;
33830: GO 33711
33832: POP
33833: POP
// result := array ;
33834: LD_ADDR_VAR 0 5
33838: PUSH
33839: LD_VAR 0 1
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 5
33848: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
// result := 0 ;
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 0
33860: ST_TO_ADDR
// if not array or not value in array then
33861: LD_VAR 0 1
33865: NOT
33866: PUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_VAR 0 1
33876: IN
33877: NOT
33878: OR
33879: IFFALSE 33883
// exit ;
33881: GO 33937
// for i = 1 to array do
33883: LD_ADDR_VAR 0 4
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 1
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33935
// if value = array [ i ] then
33901: LD_VAR 0 2
33905: PUSH
33906: LD_VAR 0 1
33910: PUSH
33911: LD_VAR 0 4
33915: ARRAY
33916: EQUAL
33917: IFFALSE 33933
// begin result := i ;
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_VAR 0 4
33928: ST_TO_ADDR
// exit ;
33929: POP
33930: POP
33931: GO 33937
// end ;
33933: GO 33898
33935: POP
33936: POP
// end ;
33937: LD_VAR 0 3
33941: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33942: LD_INT 0
33944: PPUSH
// vc_chassis := chassis ;
33945: LD_ADDR_OWVAR 37
33949: PUSH
33950: LD_VAR 0 1
33954: ST_TO_ADDR
// vc_engine := engine ;
33955: LD_ADDR_OWVAR 39
33959: PUSH
33960: LD_VAR 0 2
33964: ST_TO_ADDR
// vc_control := control ;
33965: LD_ADDR_OWVAR 38
33969: PUSH
33970: LD_VAR 0 3
33974: ST_TO_ADDR
// vc_weapon := weapon ;
33975: LD_ADDR_OWVAR 40
33979: PUSH
33980: LD_VAR 0 4
33984: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33985: LD_ADDR_OWVAR 41
33989: PUSH
33990: LD_VAR 0 5
33994: ST_TO_ADDR
// end ;
33995: LD_VAR 0 6
33999: RET
// export function WantPlant ( unit ) ; var task ; begin
34000: LD_INT 0
34002: PPUSH
34003: PPUSH
// result := false ;
34004: LD_ADDR_VAR 0 2
34008: PUSH
34009: LD_INT 0
34011: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34012: LD_ADDR_VAR 0 3
34016: PUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 437
34026: ST_TO_ADDR
// if task then
34027: LD_VAR 0 3
34031: IFFALSE 34059
// if task [ 1 ] [ 1 ] = p then
34033: LD_VAR 0 3
34037: PUSH
34038: LD_INT 1
34040: ARRAY
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PUSH
34046: LD_STRING p
34048: EQUAL
34049: IFFALSE 34059
// result := true ;
34051: LD_ADDR_VAR 0 2
34055: PUSH
34056: LD_INT 1
34058: ST_TO_ADDR
// end ;
34059: LD_VAR 0 2
34063: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34064: LD_INT 0
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
// if pos < 1 then
34070: LD_VAR 0 2
34074: PUSH
34075: LD_INT 1
34077: LESS
34078: IFFALSE 34082
// exit ;
34080: GO 34385
// if pos = 1 then
34082: LD_VAR 0 2
34086: PUSH
34087: LD_INT 1
34089: EQUAL
34090: IFFALSE 34123
// result := Replace ( arr , pos [ 1 ] , value ) else
34092: LD_ADDR_VAR 0 4
34096: PUSH
34097: LD_VAR 0 1
34101: PPUSH
34102: LD_VAR 0 2
34106: PUSH
34107: LD_INT 1
34109: ARRAY
34110: PPUSH
34111: LD_VAR 0 3
34115: PPUSH
34116: CALL_OW 1
34120: ST_TO_ADDR
34121: GO 34385
// begin tmp := arr ;
34123: LD_ADDR_VAR 0 6
34127: PUSH
34128: LD_VAR 0 1
34132: ST_TO_ADDR
// s_arr := [ tmp ] ;
34133: LD_ADDR_VAR 0 7
34137: PUSH
34138: LD_VAR 0 6
34142: PUSH
34143: EMPTY
34144: LIST
34145: ST_TO_ADDR
// for i = 1 to pos - 1 do
34146: LD_ADDR_VAR 0 5
34150: PUSH
34151: DOUBLE
34152: LD_INT 1
34154: DEC
34155: ST_TO_ADDR
34156: LD_VAR 0 2
34160: PUSH
34161: LD_INT 1
34163: MINUS
34164: PUSH
34165: FOR_TO
34166: IFFALSE 34211
// begin tmp := tmp [ pos [ i ] ] ;
34168: LD_ADDR_VAR 0 6
34172: PUSH
34173: LD_VAR 0 6
34177: PUSH
34178: LD_VAR 0 2
34182: PUSH
34183: LD_VAR 0 5
34187: ARRAY
34188: ARRAY
34189: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34190: LD_ADDR_VAR 0 7
34194: PUSH
34195: LD_VAR 0 7
34199: PUSH
34200: LD_VAR 0 6
34204: PUSH
34205: EMPTY
34206: LIST
34207: ADD
34208: ST_TO_ADDR
// end ;
34209: GO 34165
34211: POP
34212: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34213: LD_ADDR_VAR 0 6
34217: PUSH
34218: LD_VAR 0 6
34222: PPUSH
34223: LD_VAR 0 2
34227: PUSH
34228: LD_VAR 0 2
34232: ARRAY
34233: PPUSH
34234: LD_VAR 0 3
34238: PPUSH
34239: CALL_OW 1
34243: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34244: LD_ADDR_VAR 0 7
34248: PUSH
34249: LD_VAR 0 7
34253: PPUSH
34254: LD_VAR 0 7
34258: PPUSH
34259: LD_VAR 0 6
34263: PPUSH
34264: CALL_OW 1
34268: ST_TO_ADDR
// for i = s_arr downto 2 do
34269: LD_ADDR_VAR 0 5
34273: PUSH
34274: DOUBLE
34275: LD_VAR 0 7
34279: INC
34280: ST_TO_ADDR
34281: LD_INT 2
34283: PUSH
34284: FOR_DOWNTO
34285: IFFALSE 34369
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34287: LD_ADDR_VAR 0 6
34291: PUSH
34292: LD_VAR 0 7
34296: PUSH
34297: LD_VAR 0 5
34301: PUSH
34302: LD_INT 1
34304: MINUS
34305: ARRAY
34306: PPUSH
34307: LD_VAR 0 2
34311: PUSH
34312: LD_VAR 0 5
34316: PUSH
34317: LD_INT 1
34319: MINUS
34320: ARRAY
34321: PPUSH
34322: LD_VAR 0 7
34326: PUSH
34327: LD_VAR 0 5
34331: ARRAY
34332: PPUSH
34333: CALL_OW 1
34337: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34338: LD_ADDR_VAR 0 7
34342: PUSH
34343: LD_VAR 0 7
34347: PPUSH
34348: LD_VAR 0 5
34352: PUSH
34353: LD_INT 1
34355: MINUS
34356: PPUSH
34357: LD_VAR 0 6
34361: PPUSH
34362: CALL_OW 1
34366: ST_TO_ADDR
// end ;
34367: GO 34284
34369: POP
34370: POP
// result := s_arr [ 1 ] ;
34371: LD_ADDR_VAR 0 4
34375: PUSH
34376: LD_VAR 0 7
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: ST_TO_ADDR
// end ; end ;
34385: LD_VAR 0 4
34389: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34390: LD_INT 0
34392: PPUSH
34393: PPUSH
// if not list then
34394: LD_VAR 0 1
34398: NOT
34399: IFFALSE 34403
// exit ;
34401: GO 34494
// i := list [ pos1 ] ;
34403: LD_ADDR_VAR 0 5
34407: PUSH
34408: LD_VAR 0 1
34412: PUSH
34413: LD_VAR 0 2
34417: ARRAY
34418: ST_TO_ADDR
// if not i then
34419: LD_VAR 0 5
34423: NOT
34424: IFFALSE 34428
// exit ;
34426: GO 34494
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34428: LD_ADDR_VAR 0 1
34432: PUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: LD_VAR 0 2
34442: PPUSH
34443: LD_VAR 0 1
34447: PUSH
34448: LD_VAR 0 3
34452: ARRAY
34453: PPUSH
34454: CALL_OW 1
34458: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34459: LD_ADDR_VAR 0 1
34463: PUSH
34464: LD_VAR 0 1
34468: PPUSH
34469: LD_VAR 0 3
34473: PPUSH
34474: LD_VAR 0 5
34478: PPUSH
34479: CALL_OW 1
34483: ST_TO_ADDR
// result := list ;
34484: LD_ADDR_VAR 0 4
34488: PUSH
34489: LD_VAR 0 1
34493: ST_TO_ADDR
// end ;
34494: LD_VAR 0 4
34498: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34499: LD_INT 0
34501: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34502: LD_ADDR_VAR 0 5
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 250
34516: PPUSH
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 251
34526: PPUSH
34527: LD_VAR 0 2
34531: PPUSH
34532: LD_VAR 0 3
34536: PPUSH
34537: LD_VAR 0 4
34541: PPUSH
34542: CALL 34552 0 5
34546: ST_TO_ADDR
// end ;
34547: LD_VAR 0 5
34551: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34552: LD_INT 0
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
// if not list then
34558: LD_VAR 0 3
34562: NOT
34563: IFFALSE 34567
// exit ;
34565: GO 34955
// result := [ ] ;
34567: LD_ADDR_VAR 0 6
34571: PUSH
34572: EMPTY
34573: ST_TO_ADDR
// for i in list do
34574: LD_ADDR_VAR 0 7
34578: PUSH
34579: LD_VAR 0 3
34583: PUSH
34584: FOR_IN
34585: IFFALSE 34787
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34587: LD_ADDR_VAR 0 9
34591: PUSH
34592: LD_VAR 0 7
34596: PPUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: LD_VAR 0 2
34606: PPUSH
34607: CALL_OW 297
34611: ST_TO_ADDR
// if not result then
34612: LD_VAR 0 6
34616: NOT
34617: IFFALSE 34643
// result := [ [ i , tmp ] ] else
34619: LD_ADDR_VAR 0 6
34623: PUSH
34624: LD_VAR 0 7
34628: PUSH
34629: LD_VAR 0 9
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: ST_TO_ADDR
34641: GO 34785
// begin if result [ result ] [ 2 ] < tmp then
34643: LD_VAR 0 6
34647: PUSH
34648: LD_VAR 0 6
34652: ARRAY
34653: PUSH
34654: LD_INT 2
34656: ARRAY
34657: PUSH
34658: LD_VAR 0 9
34662: LESS
34663: IFFALSE 34705
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34665: LD_ADDR_VAR 0 6
34669: PUSH
34670: LD_VAR 0 6
34674: PPUSH
34675: LD_VAR 0 6
34679: PUSH
34680: LD_INT 1
34682: PLUS
34683: PPUSH
34684: LD_VAR 0 7
34688: PUSH
34689: LD_VAR 0 9
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 2
34702: ST_TO_ADDR
34703: GO 34785
// for j = 1 to result do
34705: LD_ADDR_VAR 0 8
34709: PUSH
34710: DOUBLE
34711: LD_INT 1
34713: DEC
34714: ST_TO_ADDR
34715: LD_VAR 0 6
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34783
// begin if tmp < result [ j ] [ 2 ] then
34723: LD_VAR 0 9
34727: PUSH
34728: LD_VAR 0 6
34732: PUSH
34733: LD_VAR 0 8
34737: ARRAY
34738: PUSH
34739: LD_INT 2
34741: ARRAY
34742: LESS
34743: IFFALSE 34781
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34745: LD_ADDR_VAR 0 6
34749: PUSH
34750: LD_VAR 0 6
34754: PPUSH
34755: LD_VAR 0 8
34759: PPUSH
34760: LD_VAR 0 7
34764: PUSH
34765: LD_VAR 0 9
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PPUSH
34774: CALL_OW 2
34778: ST_TO_ADDR
// break ;
34779: GO 34783
// end ; end ;
34781: GO 34720
34783: POP
34784: POP
// end ; end ;
34785: GO 34584
34787: POP
34788: POP
// if result and not asc then
34789: LD_VAR 0 6
34793: PUSH
34794: LD_VAR 0 4
34798: NOT
34799: AND
34800: IFFALSE 34875
// begin tmp := result ;
34802: LD_ADDR_VAR 0 9
34806: PUSH
34807: LD_VAR 0 6
34811: ST_TO_ADDR
// for i = tmp downto 1 do
34812: LD_ADDR_VAR 0 7
34816: PUSH
34817: DOUBLE
34818: LD_VAR 0 9
34822: INC
34823: ST_TO_ADDR
34824: LD_INT 1
34826: PUSH
34827: FOR_DOWNTO
34828: IFFALSE 34873
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34830: LD_ADDR_VAR 0 6
34834: PUSH
34835: LD_VAR 0 6
34839: PPUSH
34840: LD_VAR 0 9
34844: PUSH
34845: LD_VAR 0 7
34849: MINUS
34850: PUSH
34851: LD_INT 1
34853: PLUS
34854: PPUSH
34855: LD_VAR 0 9
34859: PUSH
34860: LD_VAR 0 7
34864: ARRAY
34865: PPUSH
34866: CALL_OW 1
34870: ST_TO_ADDR
34871: GO 34827
34873: POP
34874: POP
// end ; tmp := [ ] ;
34875: LD_ADDR_VAR 0 9
34879: PUSH
34880: EMPTY
34881: ST_TO_ADDR
// if mode then
34882: LD_VAR 0 5
34886: IFFALSE 34955
// begin for i = 1 to result do
34888: LD_ADDR_VAR 0 7
34892: PUSH
34893: DOUBLE
34894: LD_INT 1
34896: DEC
34897: ST_TO_ADDR
34898: LD_VAR 0 6
34902: PUSH
34903: FOR_TO
34904: IFFALSE 34943
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34906: LD_ADDR_VAR 0 9
34910: PUSH
34911: LD_VAR 0 9
34915: PPUSH
34916: LD_VAR 0 7
34920: PPUSH
34921: LD_VAR 0 6
34925: PUSH
34926: LD_VAR 0 7
34930: ARRAY
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: PPUSH
34936: CALL_OW 1
34940: ST_TO_ADDR
34941: GO 34903
34943: POP
34944: POP
// result := tmp ;
34945: LD_ADDR_VAR 0 6
34949: PUSH
34950: LD_VAR 0 9
34954: ST_TO_ADDR
// end ; end ;
34955: LD_VAR 0 6
34959: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34968: LD_ADDR_VAR 0 5
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// if not x or not y then
34990: LD_VAR 0 2
34994: NOT
34995: PUSH
34996: LD_VAR 0 3
35000: NOT
35001: OR
35002: IFFALSE 35006
// exit ;
35004: GO 36658
// if not range then
35006: LD_VAR 0 4
35010: NOT
35011: IFFALSE 35021
// range := 10 ;
35013: LD_ADDR_VAR 0 4
35017: PUSH
35018: LD_INT 10
35020: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35021: LD_ADDR_VAR 0 8
35025: PUSH
35026: LD_INT 81
35028: PUSH
35029: LD_VAR 0 1
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 92
35040: PUSH
35041: LD_VAR 0 2
35045: PUSH
35046: LD_VAR 0 3
35050: PUSH
35051: LD_VAR 0 4
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 21
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: PPUSH
35084: CALL_OW 69
35088: ST_TO_ADDR
// if not tmp then
35089: LD_VAR 0 8
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 36658
// for i in tmp do
35098: LD_ADDR_VAR 0 6
35102: PUSH
35103: LD_VAR 0 8
35107: PUSH
35108: FOR_IN
35109: IFFALSE 36633
// begin points := [ 0 , 0 , 0 ] ;
35111: LD_ADDR_VAR 0 9
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
// bpoints := 1 ;
35130: LD_ADDR_VAR 0 10
35134: PUSH
35135: LD_INT 1
35137: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35138: LD_VAR 0 6
35142: PPUSH
35143: CALL_OW 247
35147: PUSH
35148: LD_INT 1
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35734
35156: POP
// begin if GetClass ( i ) = 1 then
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 257
35166: PUSH
35167: LD_INT 1
35169: EQUAL
35170: IFFALSE 35191
// points := [ 10 , 5 , 3 ] ;
35172: LD_ADDR_VAR 0 9
35176: PUSH
35177: LD_INT 10
35179: PUSH
35180: LD_INT 5
35182: PUSH
35183: LD_INT 3
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35191: LD_VAR 0 6
35195: PPUSH
35196: CALL_OW 257
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 3
35206: PUSH
35207: LD_INT 4
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: IN
35215: IFFALSE 35236
// points := [ 3 , 2 , 1 ] ;
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35236: LD_VAR 0 6
35240: PPUSH
35241: CALL_OW 257
35245: PUSH
35246: LD_INT 5
35248: EQUAL
35249: IFFALSE 35270
// points := [ 130 , 5 , 2 ] ;
35251: LD_ADDR_VAR 0 9
35255: PUSH
35256: LD_INT 130
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35270: LD_VAR 0 6
35274: PPUSH
35275: CALL_OW 257
35279: PUSH
35280: LD_INT 8
35282: EQUAL
35283: IFFALSE 35304
// points := [ 35 , 35 , 30 ] ;
35285: LD_ADDR_VAR 0 9
35289: PUSH
35290: LD_INT 35
35292: PUSH
35293: LD_INT 35
35295: PUSH
35296: LD_INT 30
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35304: LD_VAR 0 6
35308: PPUSH
35309: CALL_OW 257
35313: PUSH
35314: LD_INT 9
35316: EQUAL
35317: IFFALSE 35338
// points := [ 20 , 55 , 40 ] ;
35319: LD_ADDR_VAR 0 9
35323: PUSH
35324: LD_INT 20
35326: PUSH
35327: LD_INT 55
35329: PUSH
35330: LD_INT 40
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35338: LD_VAR 0 6
35342: PPUSH
35343: CALL_OW 257
35347: PUSH
35348: LD_INT 12
35350: PUSH
35351: LD_INT 16
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: IN
35358: IFFALSE 35379
// points := [ 5 , 3 , 2 ] ;
35360: LD_ADDR_VAR 0 9
35364: PUSH
35365: LD_INT 5
35367: PUSH
35368: LD_INT 3
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35379: LD_VAR 0 6
35383: PPUSH
35384: CALL_OW 257
35388: PUSH
35389: LD_INT 17
35391: EQUAL
35392: IFFALSE 35413
// points := [ 100 , 50 , 75 ] ;
35394: LD_ADDR_VAR 0 9
35398: PUSH
35399: LD_INT 100
35401: PUSH
35402: LD_INT 50
35404: PUSH
35405: LD_INT 75
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35413: LD_VAR 0 6
35417: PPUSH
35418: CALL_OW 257
35422: PUSH
35423: LD_INT 15
35425: EQUAL
35426: IFFALSE 35447
// points := [ 10 , 5 , 3 ] ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 10
35435: PUSH
35436: LD_INT 5
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35447: LD_VAR 0 6
35451: PPUSH
35452: CALL_OW 257
35456: PUSH
35457: LD_INT 14
35459: EQUAL
35460: IFFALSE 35481
// points := [ 10 , 0 , 0 ] ;
35462: LD_ADDR_VAR 0 9
35466: PUSH
35467: LD_INT 10
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35481: LD_VAR 0 6
35485: PPUSH
35486: CALL_OW 257
35490: PUSH
35491: LD_INT 11
35493: EQUAL
35494: IFFALSE 35515
// points := [ 30 , 10 , 5 ] ;
35496: LD_ADDR_VAR 0 9
35500: PUSH
35501: LD_INT 30
35503: PUSH
35504: LD_INT 10
35506: PUSH
35507: LD_INT 5
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35515: LD_VAR 0 1
35519: PPUSH
35520: LD_INT 5
35522: PPUSH
35523: CALL_OW 321
35527: PUSH
35528: LD_INT 2
35530: EQUAL
35531: IFFALSE 35548
// bpoints := bpoints * 1.8 ;
35533: LD_ADDR_VAR 0 10
35537: PUSH
35538: LD_VAR 0 10
35542: PUSH
35543: LD_REAL  1.80000000000000E+0000
35546: MUL
35547: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35548: LD_VAR 0 6
35552: PPUSH
35553: CALL_OW 257
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: LD_INT 4
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: IN
35576: PUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_INT 51
35584: PPUSH
35585: CALL_OW 321
35589: PUSH
35590: LD_INT 2
35592: EQUAL
35593: AND
35594: IFFALSE 35611
// bpoints := bpoints * 1.2 ;
35596: LD_ADDR_VAR 0 10
35600: PUSH
35601: LD_VAR 0 10
35605: PUSH
35606: LD_REAL  1.20000000000000E+0000
35609: MUL
35610: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35611: LD_VAR 0 6
35615: PPUSH
35616: CALL_OW 257
35620: PUSH
35621: LD_INT 5
35623: PUSH
35624: LD_INT 7
35626: PUSH
35627: LD_INT 9
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: IN
35635: PUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: LD_INT 52
35643: PPUSH
35644: CALL_OW 321
35648: PUSH
35649: LD_INT 2
35651: EQUAL
35652: AND
35653: IFFALSE 35670
// bpoints := bpoints * 1.5 ;
35655: LD_ADDR_VAR 0 10
35659: PUSH
35660: LD_VAR 0 10
35664: PUSH
35665: LD_REAL  1.50000000000000E+0000
35668: MUL
35669: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35670: LD_VAR 0 1
35674: PPUSH
35675: LD_INT 66
35677: PPUSH
35678: CALL_OW 321
35682: PUSH
35683: LD_INT 2
35685: EQUAL
35686: IFFALSE 35703
// bpoints := bpoints * 1.1 ;
35688: LD_ADDR_VAR 0 10
35692: PUSH
35693: LD_VAR 0 10
35697: PUSH
35698: LD_REAL  1.10000000000000E+0000
35701: MUL
35702: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35703: LD_ADDR_VAR 0 10
35707: PUSH
35708: LD_VAR 0 10
35712: PUSH
35713: LD_VAR 0 6
35717: PPUSH
35718: LD_INT 1
35720: PPUSH
35721: CALL_OW 259
35725: PUSH
35726: LD_REAL  1.15000000000000E+0000
35729: MUL
35730: MUL
35731: ST_TO_ADDR
// end ; unit_vehicle :
35732: GO 36562
35734: LD_INT 2
35736: DOUBLE
35737: EQUAL
35738: IFTRUE 35742
35740: GO 36550
35742: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35743: LD_VAR 0 6
35747: PPUSH
35748: CALL_OW 264
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 42
35758: PUSH
35759: LD_INT 24
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: IN
35767: IFFALSE 35788
// points := [ 25 , 5 , 3 ] ;
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_INT 25
35776: PUSH
35777: LD_INT 5
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35788: LD_VAR 0 6
35792: PPUSH
35793: CALL_OW 264
35797: PUSH
35798: LD_INT 4
35800: PUSH
35801: LD_INT 43
35803: PUSH
35804: LD_INT 25
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: IN
35812: IFFALSE 35833
// points := [ 40 , 15 , 5 ] ;
35814: LD_ADDR_VAR 0 9
35818: PUSH
35819: LD_INT 40
35821: PUSH
35822: LD_INT 15
35824: PUSH
35825: LD_INT 5
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35833: LD_VAR 0 6
35837: PPUSH
35838: CALL_OW 264
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: LD_INT 23
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: IN
35853: IFFALSE 35874
// points := [ 7 , 25 , 8 ] ;
35855: LD_ADDR_VAR 0 9
35859: PUSH
35860: LD_INT 7
35862: PUSH
35863: LD_INT 25
35865: PUSH
35866: LD_INT 8
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35874: LD_VAR 0 6
35878: PPUSH
35879: CALL_OW 264
35883: PUSH
35884: LD_INT 5
35886: PUSH
35887: LD_INT 27
35889: PUSH
35890: LD_INT 44
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: IN
35898: IFFALSE 35919
// points := [ 14 , 50 , 16 ] ;
35900: LD_ADDR_VAR 0 9
35904: PUSH
35905: LD_INT 14
35907: PUSH
35908: LD_INT 50
35910: PUSH
35911: LD_INT 16
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35919: LD_VAR 0 6
35923: PPUSH
35924: CALL_OW 264
35928: PUSH
35929: LD_INT 6
35931: PUSH
35932: LD_INT 46
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: IN
35939: IFFALSE 35960
// points := [ 32 , 120 , 70 ] ;
35941: LD_ADDR_VAR 0 9
35945: PUSH
35946: LD_INT 32
35948: PUSH
35949: LD_INT 120
35951: PUSH
35952: LD_INT 70
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35960: LD_VAR 0 6
35964: PPUSH
35965: CALL_OW 264
35969: PUSH
35970: LD_INT 7
35972: PUSH
35973: LD_INT 28
35975: PUSH
35976: LD_INT 45
35978: PUSH
35979: LD_EXP 31
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: IN
35990: IFFALSE 36011
// points := [ 35 , 20 , 45 ] ;
35992: LD_ADDR_VAR 0 9
35996: PUSH
35997: LD_INT 35
35999: PUSH
36000: LD_INT 20
36002: PUSH
36003: LD_INT 45
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36011: LD_VAR 0 6
36015: PPUSH
36016: CALL_OW 264
36020: PUSH
36021: LD_INT 47
36023: PUSH
36024: EMPTY
36025: LIST
36026: IN
36027: IFFALSE 36048
// points := [ 67 , 45 , 75 ] ;
36029: LD_ADDR_VAR 0 9
36033: PUSH
36034: LD_INT 67
36036: PUSH
36037: LD_INT 45
36039: PUSH
36040: LD_INT 75
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36048: LD_VAR 0 6
36052: PPUSH
36053: CALL_OW 264
36057: PUSH
36058: LD_INT 26
36060: PUSH
36061: EMPTY
36062: LIST
36063: IN
36064: IFFALSE 36085
// points := [ 120 , 30 , 80 ] ;
36066: LD_ADDR_VAR 0 9
36070: PUSH
36071: LD_INT 120
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_INT 80
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36085: LD_VAR 0 6
36089: PPUSH
36090: CALL_OW 264
36094: PUSH
36095: LD_INT 22
36097: PUSH
36098: EMPTY
36099: LIST
36100: IN
36101: IFFALSE 36122
// points := [ 40 , 1 , 1 ] ;
36103: LD_ADDR_VAR 0 9
36107: PUSH
36108: LD_INT 40
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36122: LD_VAR 0 6
36126: PPUSH
36127: CALL_OW 264
36131: PUSH
36132: LD_INT 29
36134: PUSH
36135: EMPTY
36136: LIST
36137: IN
36138: IFFALSE 36159
// points := [ 70 , 200 , 400 ] ;
36140: LD_ADDR_VAR 0 9
36144: PUSH
36145: LD_INT 70
36147: PUSH
36148: LD_INT 200
36150: PUSH
36151: LD_INT 400
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36159: LD_VAR 0 6
36163: PPUSH
36164: CALL_OW 264
36168: PUSH
36169: LD_INT 14
36171: PUSH
36172: LD_INT 53
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: IN
36179: IFFALSE 36200
// points := [ 40 , 10 , 20 ] ;
36181: LD_ADDR_VAR 0 9
36185: PUSH
36186: LD_INT 40
36188: PUSH
36189: LD_INT 10
36191: PUSH
36192: LD_INT 20
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36200: LD_VAR 0 6
36204: PPUSH
36205: CALL_OW 264
36209: PUSH
36210: LD_INT 9
36212: PUSH
36213: EMPTY
36214: LIST
36215: IN
36216: IFFALSE 36237
// points := [ 5 , 70 , 20 ] ;
36218: LD_ADDR_VAR 0 9
36222: PUSH
36223: LD_INT 5
36225: PUSH
36226: LD_INT 70
36228: PUSH
36229: LD_INT 20
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 264
36246: PUSH
36247: LD_INT 10
36249: PUSH
36250: EMPTY
36251: LIST
36252: IN
36253: IFFALSE 36274
// points := [ 35 , 110 , 70 ] ;
36255: LD_ADDR_VAR 0 9
36259: PUSH
36260: LD_INT 35
36262: PUSH
36263: LD_INT 110
36265: PUSH
36266: LD_INT 70
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36274: LD_VAR 0 6
36278: PPUSH
36279: CALL_OW 265
36283: PUSH
36284: LD_INT 25
36286: EQUAL
36287: IFFALSE 36308
// points := [ 80 , 65 , 100 ] ;
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: LD_INT 80
36296: PUSH
36297: LD_INT 65
36299: PUSH
36300: LD_INT 100
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36308: LD_VAR 0 6
36312: PPUSH
36313: CALL_OW 263
36317: PUSH
36318: LD_INT 1
36320: EQUAL
36321: IFFALSE 36356
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36323: LD_ADDR_VAR 0 10
36327: PUSH
36328: LD_VAR 0 10
36332: PUSH
36333: LD_VAR 0 6
36337: PPUSH
36338: CALL_OW 311
36342: PPUSH
36343: LD_INT 3
36345: PPUSH
36346: CALL_OW 259
36350: PUSH
36351: LD_INT 4
36353: MUL
36354: MUL
36355: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36356: LD_VAR 0 6
36360: PPUSH
36361: CALL_OW 263
36365: PUSH
36366: LD_INT 2
36368: EQUAL
36369: IFFALSE 36420
// begin j := IsControledBy ( i ) ;
36371: LD_ADDR_VAR 0 7
36375: PUSH
36376: LD_VAR 0 6
36380: PPUSH
36381: CALL_OW 312
36385: ST_TO_ADDR
// if j then
36386: LD_VAR 0 7
36390: IFFALSE 36420
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36392: LD_ADDR_VAR 0 10
36396: PUSH
36397: LD_VAR 0 10
36401: PUSH
36402: LD_VAR 0 7
36406: PPUSH
36407: LD_INT 3
36409: PPUSH
36410: CALL_OW 259
36414: PUSH
36415: LD_INT 3
36417: MUL
36418: MUL
36419: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36420: LD_VAR 0 6
36424: PPUSH
36425: CALL_OW 264
36429: PUSH
36430: LD_INT 5
36432: PUSH
36433: LD_INT 6
36435: PUSH
36436: LD_INT 46
36438: PUSH
36439: LD_INT 44
36441: PUSH
36442: LD_INT 47
36444: PUSH
36445: LD_INT 45
36447: PUSH
36448: LD_INT 28
36450: PUSH
36451: LD_INT 7
36453: PUSH
36454: LD_INT 27
36456: PUSH
36457: LD_INT 29
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: IN
36472: PUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: LD_INT 52
36480: PPUSH
36481: CALL_OW 321
36485: PUSH
36486: LD_INT 2
36488: EQUAL
36489: AND
36490: IFFALSE 36507
// bpoints := bpoints * 1.2 ;
36492: LD_ADDR_VAR 0 10
36496: PUSH
36497: LD_VAR 0 10
36501: PUSH
36502: LD_REAL  1.20000000000000E+0000
36505: MUL
36506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36507: LD_VAR 0 6
36511: PPUSH
36512: CALL_OW 264
36516: PUSH
36517: LD_INT 6
36519: PUSH
36520: LD_INT 46
36522: PUSH
36523: LD_INT 47
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: IN
36531: IFFALSE 36548
// bpoints := bpoints * 1.2 ;
36533: LD_ADDR_VAR 0 10
36537: PUSH
36538: LD_VAR 0 10
36542: PUSH
36543: LD_REAL  1.20000000000000E+0000
36546: MUL
36547: ST_TO_ADDR
// end ; unit_building :
36548: GO 36562
36550: LD_INT 3
36552: DOUBLE
36553: EQUAL
36554: IFTRUE 36558
36556: GO 36561
36558: POP
// ; end ;
36559: GO 36562
36561: POP
// for j = 1 to 3 do
36562: LD_ADDR_VAR 0 7
36566: PUSH
36567: DOUBLE
36568: LD_INT 1
36570: DEC
36571: ST_TO_ADDR
36572: LD_INT 3
36574: PUSH
36575: FOR_TO
36576: IFFALSE 36629
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36578: LD_ADDR_VAR 0 5
36582: PUSH
36583: LD_VAR 0 5
36587: PPUSH
36588: LD_VAR 0 7
36592: PPUSH
36593: LD_VAR 0 5
36597: PUSH
36598: LD_VAR 0 7
36602: ARRAY
36603: PUSH
36604: LD_VAR 0 9
36608: PUSH
36609: LD_VAR 0 7
36613: ARRAY
36614: PUSH
36615: LD_VAR 0 10
36619: MUL
36620: PLUS
36621: PPUSH
36622: CALL_OW 1
36626: ST_TO_ADDR
36627: GO 36575
36629: POP
36630: POP
// end ;
36631: GO 35108
36633: POP
36634: POP
// result := Replace ( result , 4 , tmp ) ;
36635: LD_ADDR_VAR 0 5
36639: PUSH
36640: LD_VAR 0 5
36644: PPUSH
36645: LD_INT 4
36647: PPUSH
36648: LD_VAR 0 8
36652: PPUSH
36653: CALL_OW 1
36657: ST_TO_ADDR
// end ;
36658: LD_VAR 0 5
36662: RET
// export function DangerAtRange ( unit , range ) ; begin
36663: LD_INT 0
36665: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 255
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 250
36690: PPUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 251
36700: PPUSH
36701: LD_VAR 0 2
36705: PPUSH
36706: CALL 34960 0 4
36710: ST_TO_ADDR
// end ;
36711: LD_VAR 0 3
36715: RET
// export function DangerInArea ( side , area ) ; begin
36716: LD_INT 0
36718: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_VAR 0 2
36728: PPUSH
36729: LD_INT 81
36731: PUSH
36732: LD_VAR 0 1
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PPUSH
36741: CALL_OW 70
36745: ST_TO_ADDR
// end ;
36746: LD_VAR 0 3
36750: RET
// export function IsExtension ( b ) ; begin
36751: LD_INT 0
36753: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36754: LD_ADDR_VAR 0 2
36758: PUSH
36759: LD_VAR 0 1
36763: PUSH
36764: LD_INT 23
36766: PUSH
36767: LD_INT 20
36769: PUSH
36770: LD_INT 22
36772: PUSH
36773: LD_INT 17
36775: PUSH
36776: LD_INT 24
36778: PUSH
36779: LD_INT 21
36781: PUSH
36782: LD_INT 19
36784: PUSH
36785: LD_INT 16
36787: PUSH
36788: LD_INT 25
36790: PUSH
36791: LD_INT 18
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: IN
36806: ST_TO_ADDR
// end ;
36807: LD_VAR 0 2
36811: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36812: LD_INT 0
36814: PPUSH
36815: PPUSH
36816: PPUSH
// result := [ ] ;
36817: LD_ADDR_VAR 0 4
36821: PUSH
36822: EMPTY
36823: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36824: LD_ADDR_VAR 0 5
36828: PUSH
36829: LD_VAR 0 2
36833: PPUSH
36834: LD_INT 21
36836: PUSH
36837: LD_INT 3
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PPUSH
36844: CALL_OW 70
36848: ST_TO_ADDR
// if not tmp then
36849: LD_VAR 0 5
36853: NOT
36854: IFFALSE 36858
// exit ;
36856: GO 36922
// if checkLink then
36858: LD_VAR 0 3
36862: IFFALSE 36912
// begin for i in tmp do
36864: LD_ADDR_VAR 0 6
36868: PUSH
36869: LD_VAR 0 5
36873: PUSH
36874: FOR_IN
36875: IFFALSE 36910
// if GetBase ( i ) <> base then
36877: LD_VAR 0 6
36881: PPUSH
36882: CALL_OW 274
36886: PUSH
36887: LD_VAR 0 1
36891: NONEQUAL
36892: IFFALSE 36908
// ComLinkToBase ( base , i ) ;
36894: LD_VAR 0 1
36898: PPUSH
36899: LD_VAR 0 6
36903: PPUSH
36904: CALL_OW 169
36908: GO 36874
36910: POP
36911: POP
// end ; result := tmp ;
36912: LD_ADDR_VAR 0 4
36916: PUSH
36917: LD_VAR 0 5
36921: ST_TO_ADDR
// end ;
36922: LD_VAR 0 4
36926: RET
// export function ComComplete ( units , b ) ; var i ; begin
36927: LD_INT 0
36929: PPUSH
36930: PPUSH
// if not units then
36931: LD_VAR 0 1
36935: NOT
36936: IFFALSE 36940
// exit ;
36938: GO 37030
// for i in units do
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: LD_VAR 0 1
36949: PUSH
36950: FOR_IN
36951: IFFALSE 37028
// if BuildingStatus ( b ) = bs_build then
36953: LD_VAR 0 2
36957: PPUSH
36958: CALL_OW 461
36962: PUSH
36963: LD_INT 1
36965: EQUAL
36966: IFFALSE 37026
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36968: LD_VAR 0 4
36972: PPUSH
36973: LD_STRING h
36975: PUSH
36976: LD_VAR 0 2
36980: PPUSH
36981: CALL_OW 250
36985: PUSH
36986: LD_VAR 0 2
36990: PPUSH
36991: CALL_OW 251
36995: PUSH
36996: LD_VAR 0 2
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: PPUSH
37022: CALL_OW 446
37026: GO 36950
37028: POP
37029: POP
// end ;
37030: LD_VAR 0 3
37034: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37035: LD_INT 0
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37043: LD_VAR 0 1
37047: NOT
37048: PUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 263
37058: PUSH
37059: LD_INT 2
37061: NONEQUAL
37062: OR
37063: IFFALSE 37067
// exit ;
37065: GO 37383
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37067: LD_ADDR_VAR 0 6
37071: PUSH
37072: LD_INT 22
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 255
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: LD_INT 30
37094: PUSH
37095: LD_INT 36
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 34
37104: PUSH
37105: LD_INT 31
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PPUSH
37121: CALL_OW 69
37125: ST_TO_ADDR
// if not tmp then
37126: LD_VAR 0 6
37130: NOT
37131: IFFALSE 37135
// exit ;
37133: GO 37383
// result := [ ] ;
37135: LD_ADDR_VAR 0 2
37139: PUSH
37140: EMPTY
37141: ST_TO_ADDR
// for i in tmp do
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_VAR 0 6
37151: PUSH
37152: FOR_IN
37153: IFFALSE 37224
// begin t := UnitsInside ( i ) ;
37155: LD_ADDR_VAR 0 4
37159: PUSH
37160: LD_VAR 0 3
37164: PPUSH
37165: CALL_OW 313
37169: ST_TO_ADDR
// if t then
37170: LD_VAR 0 4
37174: IFFALSE 37222
// for j in t do
37176: LD_ADDR_VAR 0 7
37180: PUSH
37181: LD_VAR 0 4
37185: PUSH
37186: FOR_IN
37187: IFFALSE 37220
// result := Replace ( result , result + 1 , j ) ;
37189: LD_ADDR_VAR 0 2
37193: PUSH
37194: LD_VAR 0 2
37198: PPUSH
37199: LD_VAR 0 2
37203: PUSH
37204: LD_INT 1
37206: PLUS
37207: PPUSH
37208: LD_VAR 0 7
37212: PPUSH
37213: CALL_OW 1
37217: ST_TO_ADDR
37218: GO 37186
37220: POP
37221: POP
// end ;
37222: GO 37152
37224: POP
37225: POP
// if not result then
37226: LD_VAR 0 2
37230: NOT
37231: IFFALSE 37235
// exit ;
37233: GO 37383
// mech := result [ 1 ] ;
37235: LD_ADDR_VAR 0 5
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: ST_TO_ADDR
// if result > 1 then
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 1
37256: GREATER
37257: IFFALSE 37369
// begin for i = 2 to result do
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: DOUBLE
37265: LD_INT 2
37267: DEC
37268: ST_TO_ADDR
37269: LD_VAR 0 2
37273: PUSH
37274: FOR_TO
37275: IFFALSE 37367
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37277: LD_ADDR_VAR 0 4
37281: PUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_VAR 0 3
37291: ARRAY
37292: PPUSH
37293: LD_INT 3
37295: PPUSH
37296: CALL_OW 259
37300: PUSH
37301: LD_VAR 0 2
37305: PUSH
37306: LD_VAR 0 3
37310: ARRAY
37311: PPUSH
37312: CALL_OW 432
37316: MINUS
37317: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37318: LD_VAR 0 4
37322: PUSH
37323: LD_VAR 0 5
37327: PPUSH
37328: LD_INT 3
37330: PPUSH
37331: CALL_OW 259
37335: PUSH
37336: LD_VAR 0 5
37340: PPUSH
37341: CALL_OW 432
37345: MINUS
37346: GREATEREQUAL
37347: IFFALSE 37365
// mech := result [ i ] ;
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_VAR 0 3
37363: ARRAY
37364: ST_TO_ADDR
// end ;
37365: GO 37274
37367: POP
37368: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37369: LD_VAR 0 1
37373: PPUSH
37374: LD_VAR 0 5
37378: PPUSH
37379: CALL_OW 135
// end ;
37383: LD_VAR 0 2
37387: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37388: LD_INT 0
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
// result := [ ] ;
37403: LD_ADDR_VAR 0 7
37407: PUSH
37408: EMPTY
37409: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 266
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: IN
37430: NOT
37431: IFFALSE 37435
// exit ;
37433: GO 39069
// if name then
37435: LD_VAR 0 3
37439: IFFALSE 37455
// SetBName ( base_dep , name ) ;
37441: LD_VAR 0 1
37445: PPUSH
37446: LD_VAR 0 3
37450: PPUSH
37451: CALL_OW 500
// base := GetBase ( base_dep ) ;
37455: LD_ADDR_VAR 0 15
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 274
37469: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37470: LD_ADDR_VAR 0 16
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: CALL_OW 255
37484: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37485: LD_ADDR_VAR 0 17
37489: PUSH
37490: LD_VAR 0 1
37494: PPUSH
37495: CALL_OW 248
37499: ST_TO_ADDR
// if sources then
37500: LD_VAR 0 5
37504: IFFALSE 37551
// for i = 1 to 3 do
37506: LD_ADDR_VAR 0 8
37510: PUSH
37511: DOUBLE
37512: LD_INT 1
37514: DEC
37515: ST_TO_ADDR
37516: LD_INT 3
37518: PUSH
37519: FOR_TO
37520: IFFALSE 37549
// AddResourceType ( base , i , sources [ i ] ) ;
37522: LD_VAR 0 15
37526: PPUSH
37527: LD_VAR 0 8
37531: PPUSH
37532: LD_VAR 0 5
37536: PUSH
37537: LD_VAR 0 8
37541: ARRAY
37542: PPUSH
37543: CALL_OW 276
37547: GO 37519
37549: POP
37550: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37551: LD_ADDR_VAR 0 18
37555: PUSH
37556: LD_VAR 0 15
37560: PPUSH
37561: LD_VAR 0 2
37565: PPUSH
37566: LD_INT 1
37568: PPUSH
37569: CALL 36812 0 3
37573: ST_TO_ADDR
// InitHc ;
37574: CALL_OW 19
// InitUc ;
37578: CALL_OW 18
// uc_side := side ;
37582: LD_ADDR_OWVAR 20
37586: PUSH
37587: LD_VAR 0 16
37591: ST_TO_ADDR
// uc_nation := nation ;
37592: LD_ADDR_OWVAR 21
37596: PUSH
37597: LD_VAR 0 17
37601: ST_TO_ADDR
// if buildings then
37602: LD_VAR 0 18
37606: IFFALSE 38928
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37608: LD_ADDR_VAR 0 19
37612: PUSH
37613: LD_VAR 0 18
37617: PPUSH
37618: LD_INT 2
37620: PUSH
37621: LD_INT 30
37623: PUSH
37624: LD_INT 29
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 30
37633: PUSH
37634: LD_INT 30
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: PPUSH
37646: CALL_OW 72
37650: ST_TO_ADDR
// if tmp then
37651: LD_VAR 0 19
37655: IFFALSE 37703
// for i in tmp do
37657: LD_ADDR_VAR 0 8
37661: PUSH
37662: LD_VAR 0 19
37666: PUSH
37667: FOR_IN
37668: IFFALSE 37701
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37670: LD_VAR 0 8
37674: PPUSH
37675: CALL_OW 250
37679: PPUSH
37680: LD_VAR 0 8
37684: PPUSH
37685: CALL_OW 251
37689: PPUSH
37690: LD_VAR 0 16
37694: PPUSH
37695: CALL_OW 441
37699: GO 37667
37701: POP
37702: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37703: LD_VAR 0 18
37707: PPUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 30
37713: PUSH
37714: LD_INT 32
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 33
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PPUSH
37736: CALL_OW 72
37740: IFFALSE 37828
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37742: LD_ADDR_VAR 0 8
37746: PUSH
37747: LD_VAR 0 18
37751: PPUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 30
37757: PUSH
37758: LD_INT 32
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 30
37767: PUSH
37768: LD_INT 33
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: PPUSH
37780: CALL_OW 72
37784: PUSH
37785: FOR_IN
37786: IFFALSE 37826
// begin if not GetBWeapon ( i ) then
37788: LD_VAR 0 8
37792: PPUSH
37793: CALL_OW 269
37797: NOT
37798: IFFALSE 37824
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37800: LD_VAR 0 8
37804: PPUSH
37805: LD_VAR 0 8
37809: PPUSH
37810: LD_VAR 0 2
37814: PPUSH
37815: CALL 39074 0 2
37819: PPUSH
37820: CALL_OW 431
// end ;
37824: GO 37785
37826: POP
37827: POP
// end ; for i = 1 to personel do
37828: LD_ADDR_VAR 0 8
37832: PUSH
37833: DOUBLE
37834: LD_INT 1
37836: DEC
37837: ST_TO_ADDR
37838: LD_VAR 0 6
37842: PUSH
37843: FOR_TO
37844: IFFALSE 38908
// begin if i > 4 then
37846: LD_VAR 0 8
37850: PUSH
37851: LD_INT 4
37853: GREATER
37854: IFFALSE 37858
// break ;
37856: GO 38908
// case i of 1 :
37858: LD_VAR 0 8
37862: PUSH
37863: LD_INT 1
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37871
37869: GO 37951
37871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37872: LD_ADDR_VAR 0 12
37876: PUSH
37877: LD_VAR 0 18
37881: PPUSH
37882: LD_INT 22
37884: PUSH
37885: LD_VAR 0 16
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 58
37896: PUSH
37897: EMPTY
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 30
37905: PUSH
37906: LD_INT 32
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: LD_INT 4
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 30
37925: PUSH
37926: LD_INT 5
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: PPUSH
37944: CALL_OW 72
37948: ST_TO_ADDR
37949: GO 38173
37951: LD_INT 2
37953: DOUBLE
37954: EQUAL
37955: IFTRUE 37959
37957: GO 38021
37959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37960: LD_ADDR_VAR 0 12
37964: PUSH
37965: LD_VAR 0 18
37969: PPUSH
37970: LD_INT 22
37972: PUSH
37973: LD_VAR 0 16
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 30
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 30
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PPUSH
38014: CALL_OW 72
38018: ST_TO_ADDR
38019: GO 38173
38021: LD_INT 3
38023: DOUBLE
38024: EQUAL
38025: IFTRUE 38029
38027: GO 38091
38029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38030: LD_ADDR_VAR 0 12
38034: PUSH
38035: LD_VAR 0 18
38039: PPUSH
38040: LD_INT 22
38042: PUSH
38043: LD_VAR 0 16
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 30
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 30
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL_OW 72
38088: ST_TO_ADDR
38089: GO 38173
38091: LD_INT 4
38093: DOUBLE
38094: EQUAL
38095: IFTRUE 38099
38097: GO 38172
38099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38100: LD_ADDR_VAR 0 12
38104: PUSH
38105: LD_VAR 0 18
38109: PPUSH
38110: LD_INT 22
38112: PUSH
38113: LD_VAR 0 16
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: LD_INT 30
38127: PUSH
38128: LD_INT 6
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 30
38137: PUSH
38138: LD_INT 7
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 30
38147: PUSH
38148: LD_INT 8
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PPUSH
38165: CALL_OW 72
38169: ST_TO_ADDR
38170: GO 38173
38172: POP
// if i = 1 then
38173: LD_VAR 0 8
38177: PUSH
38178: LD_INT 1
38180: EQUAL
38181: IFFALSE 38292
// begin tmp := [ ] ;
38183: LD_ADDR_VAR 0 19
38187: PUSH
38188: EMPTY
38189: ST_TO_ADDR
// for j in f do
38190: LD_ADDR_VAR 0 9
38194: PUSH
38195: LD_VAR 0 12
38199: PUSH
38200: FOR_IN
38201: IFFALSE 38274
// if GetBType ( j ) = b_bunker then
38203: LD_VAR 0 9
38207: PPUSH
38208: CALL_OW 266
38212: PUSH
38213: LD_INT 32
38215: EQUAL
38216: IFFALSE 38243
// tmp := Insert ( tmp , 1 , j ) else
38218: LD_ADDR_VAR 0 19
38222: PUSH
38223: LD_VAR 0 19
38227: PPUSH
38228: LD_INT 1
38230: PPUSH
38231: LD_VAR 0 9
38235: PPUSH
38236: CALL_OW 2
38240: ST_TO_ADDR
38241: GO 38272
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38243: LD_ADDR_VAR 0 19
38247: PUSH
38248: LD_VAR 0 19
38252: PPUSH
38253: LD_VAR 0 19
38257: PUSH
38258: LD_INT 1
38260: PLUS
38261: PPUSH
38262: LD_VAR 0 9
38266: PPUSH
38267: CALL_OW 2
38271: ST_TO_ADDR
38272: GO 38200
38274: POP
38275: POP
// if tmp then
38276: LD_VAR 0 19
38280: IFFALSE 38292
// f := tmp ;
38282: LD_ADDR_VAR 0 12
38286: PUSH
38287: LD_VAR 0 19
38291: ST_TO_ADDR
// end ; x := personel [ i ] ;
38292: LD_ADDR_VAR 0 13
38296: PUSH
38297: LD_VAR 0 6
38301: PUSH
38302: LD_VAR 0 8
38306: ARRAY
38307: ST_TO_ADDR
// if x = - 1 then
38308: LD_VAR 0 13
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: EQUAL
38317: IFFALSE 38526
// begin for j in f do
38319: LD_ADDR_VAR 0 9
38323: PUSH
38324: LD_VAR 0 12
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38522
// repeat InitHc ;
38332: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38336: LD_VAR 0 9
38340: PPUSH
38341: CALL_OW 266
38345: PUSH
38346: LD_INT 5
38348: EQUAL
38349: IFFALSE 38419
// begin if UnitsInside ( j ) < 3 then
38351: LD_VAR 0 9
38355: PPUSH
38356: CALL_OW 313
38360: PUSH
38361: LD_INT 3
38363: LESS
38364: IFFALSE 38400
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38366: LD_INT 0
38368: PPUSH
38369: LD_INT 5
38371: PUSH
38372: LD_INT 8
38374: PUSH
38375: LD_INT 9
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: PUSH
38383: LD_VAR 0 17
38387: ARRAY
38388: PPUSH
38389: LD_VAR 0 4
38393: PPUSH
38394: CALL_OW 380
38398: GO 38417
// PrepareHuman ( false , i , skill ) ;
38400: LD_INT 0
38402: PPUSH
38403: LD_VAR 0 8
38407: PPUSH
38408: LD_VAR 0 4
38412: PPUSH
38413: CALL_OW 380
// end else
38417: GO 38436
// PrepareHuman ( false , i , skill ) ;
38419: LD_INT 0
38421: PPUSH
38422: LD_VAR 0 8
38426: PPUSH
38427: LD_VAR 0 4
38431: PPUSH
38432: CALL_OW 380
// un := CreateHuman ;
38436: LD_ADDR_VAR 0 14
38440: PUSH
38441: CALL_OW 44
38445: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38446: LD_ADDR_VAR 0 7
38450: PUSH
38451: LD_VAR 0 7
38455: PPUSH
38456: LD_INT 1
38458: PPUSH
38459: LD_VAR 0 14
38463: PPUSH
38464: CALL_OW 2
38468: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38469: LD_VAR 0 14
38473: PPUSH
38474: LD_VAR 0 9
38478: PPUSH
38479: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38483: LD_VAR 0 9
38487: PPUSH
38488: CALL_OW 313
38492: PUSH
38493: LD_INT 6
38495: EQUAL
38496: PUSH
38497: LD_VAR 0 9
38501: PPUSH
38502: CALL_OW 266
38506: PUSH
38507: LD_INT 32
38509: PUSH
38510: LD_INT 31
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: IN
38517: OR
38518: IFFALSE 38332
38520: GO 38329
38522: POP
38523: POP
// end else
38524: GO 38906
// for j = 1 to x do
38526: LD_ADDR_VAR 0 9
38530: PUSH
38531: DOUBLE
38532: LD_INT 1
38534: DEC
38535: ST_TO_ADDR
38536: LD_VAR 0 13
38540: PUSH
38541: FOR_TO
38542: IFFALSE 38904
// begin InitHc ;
38544: CALL_OW 19
// if not f then
38548: LD_VAR 0 12
38552: NOT
38553: IFFALSE 38642
// begin PrepareHuman ( false , i , skill ) ;
38555: LD_INT 0
38557: PPUSH
38558: LD_VAR 0 8
38562: PPUSH
38563: LD_VAR 0 4
38567: PPUSH
38568: CALL_OW 380
// un := CreateHuman ;
38572: LD_ADDR_VAR 0 14
38576: PUSH
38577: CALL_OW 44
38581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38582: LD_ADDR_VAR 0 7
38586: PUSH
38587: LD_VAR 0 7
38591: PPUSH
38592: LD_INT 1
38594: PPUSH
38595: LD_VAR 0 14
38599: PPUSH
38600: CALL_OW 2
38604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38605: LD_VAR 0 14
38609: PPUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 250
38619: PPUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 251
38629: PPUSH
38630: LD_INT 10
38632: PPUSH
38633: LD_INT 0
38635: PPUSH
38636: CALL_OW 50
// continue ;
38640: GO 38541
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38642: LD_VAR 0 12
38646: PUSH
38647: LD_INT 1
38649: ARRAY
38650: PPUSH
38651: CALL_OW 313
38655: PUSH
38656: LD_VAR 0 12
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PPUSH
38665: CALL_OW 266
38669: PUSH
38670: LD_INT 32
38672: PUSH
38673: LD_INT 31
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: IN
38680: AND
38681: PUSH
38682: LD_VAR 0 12
38686: PUSH
38687: LD_INT 1
38689: ARRAY
38690: PPUSH
38691: CALL_OW 313
38695: PUSH
38696: LD_INT 6
38698: EQUAL
38699: OR
38700: IFFALSE 38720
// f := Delete ( f , 1 ) ;
38702: LD_ADDR_VAR 0 12
38706: PUSH
38707: LD_VAR 0 12
38711: PPUSH
38712: LD_INT 1
38714: PPUSH
38715: CALL_OW 3
38719: ST_TO_ADDR
// if not f then
38720: LD_VAR 0 12
38724: NOT
38725: IFFALSE 38743
// begin x := x + 2 ;
38727: LD_ADDR_VAR 0 13
38731: PUSH
38732: LD_VAR 0 13
38736: PUSH
38737: LD_INT 2
38739: PLUS
38740: ST_TO_ADDR
// continue ;
38741: GO 38541
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38743: LD_VAR 0 12
38747: PUSH
38748: LD_INT 1
38750: ARRAY
38751: PPUSH
38752: CALL_OW 266
38756: PUSH
38757: LD_INT 5
38759: EQUAL
38760: IFFALSE 38834
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38762: LD_VAR 0 12
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: PPUSH
38771: CALL_OW 313
38775: PUSH
38776: LD_INT 3
38778: LESS
38779: IFFALSE 38815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38781: LD_INT 0
38783: PPUSH
38784: LD_INT 5
38786: PUSH
38787: LD_INT 8
38789: PUSH
38790: LD_INT 9
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PUSH
38798: LD_VAR 0 17
38802: ARRAY
38803: PPUSH
38804: LD_VAR 0 4
38808: PPUSH
38809: CALL_OW 380
38813: GO 38832
// PrepareHuman ( false , i , skill ) ;
38815: LD_INT 0
38817: PPUSH
38818: LD_VAR 0 8
38822: PPUSH
38823: LD_VAR 0 4
38827: PPUSH
38828: CALL_OW 380
// end else
38832: GO 38851
// PrepareHuman ( false , i , skill ) ;
38834: LD_INT 0
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: LD_VAR 0 4
38846: PPUSH
38847: CALL_OW 380
// un := CreateHuman ;
38851: LD_ADDR_VAR 0 14
38855: PUSH
38856: CALL_OW 44
38860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: LD_VAR 0 7
38870: PPUSH
38871: LD_INT 1
38873: PPUSH
38874: LD_VAR 0 14
38878: PPUSH
38879: CALL_OW 2
38883: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38884: LD_VAR 0 14
38888: PPUSH
38889: LD_VAR 0 12
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: CALL_OW 52
// end ;
38902: GO 38541
38904: POP
38905: POP
// end ;
38906: GO 37843
38908: POP
38909: POP
// result := result ^ buildings ;
38910: LD_ADDR_VAR 0 7
38914: PUSH
38915: LD_VAR 0 7
38919: PUSH
38920: LD_VAR 0 18
38924: ADD
38925: ST_TO_ADDR
// end else
38926: GO 39069
// begin for i = 1 to personel do
38928: LD_ADDR_VAR 0 8
38932: PUSH
38933: DOUBLE
38934: LD_INT 1
38936: DEC
38937: ST_TO_ADDR
38938: LD_VAR 0 6
38942: PUSH
38943: FOR_TO
38944: IFFALSE 39067
// begin if i > 4 then
38946: LD_VAR 0 8
38950: PUSH
38951: LD_INT 4
38953: GREATER
38954: IFFALSE 38958
// break ;
38956: GO 39067
// x := personel [ i ] ;
38958: LD_ADDR_VAR 0 13
38962: PUSH
38963: LD_VAR 0 6
38967: PUSH
38968: LD_VAR 0 8
38972: ARRAY
38973: ST_TO_ADDR
// if x = - 1 then
38974: LD_VAR 0 13
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: EQUAL
38983: IFFALSE 38987
// continue ;
38985: GO 38943
// PrepareHuman ( false , i , skill ) ;
38987: LD_INT 0
38989: PPUSH
38990: LD_VAR 0 8
38994: PPUSH
38995: LD_VAR 0 4
38999: PPUSH
39000: CALL_OW 380
// un := CreateHuman ;
39004: LD_ADDR_VAR 0 14
39008: PUSH
39009: CALL_OW 44
39013: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39014: LD_VAR 0 14
39018: PPUSH
39019: LD_VAR 0 1
39023: PPUSH
39024: CALL_OW 250
39028: PPUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: CALL_OW 251
39038: PPUSH
39039: LD_INT 10
39041: PPUSH
39042: LD_INT 0
39044: PPUSH
39045: CALL_OW 50
// result := result ^ un ;
39049: LD_ADDR_VAR 0 7
39053: PUSH
39054: LD_VAR 0 7
39058: PUSH
39059: LD_VAR 0 14
39063: ADD
39064: ST_TO_ADDR
// end ;
39065: GO 38943
39067: POP
39068: POP
// end ; end ;
39069: LD_VAR 0 7
39073: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39074: LD_INT 0
39076: PPUSH
39077: PPUSH
39078: PPUSH
39079: PPUSH
39080: PPUSH
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
39086: PPUSH
39087: PPUSH
39088: PPUSH
39089: PPUSH
39090: PPUSH
39091: PPUSH
// result := false ;
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 0
39099: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39100: LD_VAR 0 1
39104: NOT
39105: PUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 266
39115: PUSH
39116: LD_INT 32
39118: PUSH
39119: LD_INT 33
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: IN
39126: NOT
39127: OR
39128: IFFALSE 39132
// exit ;
39130: GO 40241
// nat := GetNation ( tower ) ;
39132: LD_ADDR_VAR 0 12
39136: PUSH
39137: LD_VAR 0 1
39141: PPUSH
39142: CALL_OW 248
39146: ST_TO_ADDR
// side := GetSide ( tower ) ;
39147: LD_ADDR_VAR 0 16
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 255
39161: ST_TO_ADDR
// x := GetX ( tower ) ;
39162: LD_ADDR_VAR 0 10
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: CALL_OW 250
39176: ST_TO_ADDR
// y := GetY ( tower ) ;
39177: LD_ADDR_VAR 0 11
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: CALL_OW 251
39191: ST_TO_ADDR
// if not x or not y then
39192: LD_VAR 0 10
39196: NOT
39197: PUSH
39198: LD_VAR 0 11
39202: NOT
39203: OR
39204: IFFALSE 39208
// exit ;
39206: GO 40241
// weapon := 0 ;
39208: LD_ADDR_VAR 0 18
39212: PUSH
39213: LD_INT 0
39215: ST_TO_ADDR
// fac_list := [ ] ;
39216: LD_ADDR_VAR 0 17
39220: PUSH
39221: EMPTY
39222: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39223: LD_ADDR_VAR 0 6
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 274
39237: PPUSH
39238: LD_VAR 0 2
39242: PPUSH
39243: LD_INT 0
39245: PPUSH
39246: CALL 36812 0 3
39250: PPUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PPUSH
39261: CALL_OW 72
39265: ST_TO_ADDR
// if not factories then
39266: LD_VAR 0 6
39270: NOT
39271: IFFALSE 39275
// exit ;
39273: GO 40241
// for i in factories do
39275: LD_ADDR_VAR 0 8
39279: PUSH
39280: LD_VAR 0 6
39284: PUSH
39285: FOR_IN
39286: IFFALSE 39311
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39288: LD_ADDR_VAR 0 17
39292: PUSH
39293: LD_VAR 0 17
39297: PUSH
39298: LD_VAR 0 8
39302: PPUSH
39303: CALL_OW 478
39307: UNION
39308: ST_TO_ADDR
39309: GO 39285
39311: POP
39312: POP
// if not fac_list then
39313: LD_VAR 0 17
39317: NOT
39318: IFFALSE 39322
// exit ;
39320: GO 40241
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_INT 4
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 9
39335: PUSH
39336: LD_INT 10
39338: PUSH
39339: LD_INT 6
39341: PUSH
39342: LD_INT 7
39344: PUSH
39345: LD_INT 11
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 27
39359: PUSH
39360: LD_INT 28
39362: PUSH
39363: LD_INT 26
39365: PUSH
39366: LD_INT 30
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 43
39377: PUSH
39378: LD_INT 44
39380: PUSH
39381: LD_INT 46
39383: PUSH
39384: LD_INT 45
39386: PUSH
39387: LD_INT 47
39389: PUSH
39390: LD_INT 49
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: PUSH
39406: LD_VAR 0 12
39410: ARRAY
39411: ST_TO_ADDR
// list := list isect fac_list ;
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: LD_VAR 0 5
39421: PUSH
39422: LD_VAR 0 17
39426: ISECT
39427: ST_TO_ADDR
// if not list then
39428: LD_VAR 0 5
39432: NOT
39433: IFFALSE 39437
// exit ;
39435: GO 40241
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39437: LD_VAR 0 12
39441: PUSH
39442: LD_INT 3
39444: EQUAL
39445: PUSH
39446: LD_INT 49
39448: PUSH
39449: LD_VAR 0 5
39453: IN
39454: AND
39455: PUSH
39456: LD_INT 31
39458: PPUSH
39459: LD_VAR 0 16
39463: PPUSH
39464: CALL_OW 321
39468: PUSH
39469: LD_INT 2
39471: EQUAL
39472: AND
39473: IFFALSE 39533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39475: LD_INT 22
39477: PUSH
39478: LD_VAR 0 16
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 35
39489: PUSH
39490: LD_INT 49
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 91
39499: PUSH
39500: LD_VAR 0 1
39504: PUSH
39505: LD_INT 10
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: PPUSH
39518: CALL_OW 69
39522: NOT
39523: IFFALSE 39533
// weapon := ru_time_lapser ;
39525: LD_ADDR_VAR 0 18
39529: PUSH
39530: LD_INT 49
39532: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39533: LD_VAR 0 12
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: IN
39548: PUSH
39549: LD_INT 11
39551: PUSH
39552: LD_VAR 0 5
39556: IN
39557: PUSH
39558: LD_INT 30
39560: PUSH
39561: LD_VAR 0 5
39565: IN
39566: OR
39567: AND
39568: PUSH
39569: LD_INT 6
39571: PPUSH
39572: LD_VAR 0 16
39576: PPUSH
39577: CALL_OW 321
39581: PUSH
39582: LD_INT 2
39584: EQUAL
39585: AND
39586: IFFALSE 39751
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39588: LD_INT 22
39590: PUSH
39591: LD_VAR 0 16
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 35
39605: PUSH
39606: LD_INT 11
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 35
39615: PUSH
39616: LD_INT 30
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 91
39630: PUSH
39631: LD_VAR 0 1
39635: PUSH
39636: LD_INT 18
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: PPUSH
39649: CALL_OW 69
39653: NOT
39654: PUSH
39655: LD_INT 22
39657: PUSH
39658: LD_VAR 0 16
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 30
39672: PUSH
39673: LD_INT 32
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 30
39682: PUSH
39683: LD_INT 33
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 91
39697: PUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_INT 12
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: PPUSH
39719: CALL_OW 69
39723: PUSH
39724: LD_INT 2
39726: GREATER
39727: AND
39728: IFFALSE 39751
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39730: LD_ADDR_VAR 0 18
39734: PUSH
39735: LD_INT 11
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_VAR 0 12
39749: ARRAY
39750: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39751: LD_VAR 0 18
39755: NOT
39756: PUSH
39757: LD_INT 40
39759: PPUSH
39760: LD_VAR 0 16
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: EQUAL
39773: AND
39774: PUSH
39775: LD_INT 7
39777: PUSH
39778: LD_VAR 0 5
39782: IN
39783: PUSH
39784: LD_INT 28
39786: PUSH
39787: LD_VAR 0 5
39791: IN
39792: OR
39793: PUSH
39794: LD_INT 45
39796: PUSH
39797: LD_VAR 0 5
39801: IN
39802: OR
39803: AND
39804: IFFALSE 40058
// begin hex := GetHexInfo ( x , y ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_VAR 0 10
39815: PPUSH
39816: LD_VAR 0 11
39820: PPUSH
39821: CALL_OW 546
39825: ST_TO_ADDR
// if hex [ 1 ] then
39826: LD_VAR 0 4
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: IFFALSE 39838
// exit ;
39836: GO 40241
// height := hex [ 2 ] ;
39838: LD_ADDR_VAR 0 15
39842: PUSH
39843: LD_VAR 0 4
39847: PUSH
39848: LD_INT 2
39850: ARRAY
39851: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39852: LD_ADDR_VAR 0 14
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: LD_INT 5
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: ST_TO_ADDR
// for i in tmp do
39875: LD_ADDR_VAR 0 8
39879: PUSH
39880: LD_VAR 0 14
39884: PUSH
39885: FOR_IN
39886: IFFALSE 40056
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_VAR 0 10
39897: PPUSH
39898: LD_VAR 0 8
39902: PPUSH
39903: LD_INT 5
39905: PPUSH
39906: CALL_OW 272
39910: PUSH
39911: LD_VAR 0 11
39915: PPUSH
39916: LD_VAR 0 8
39920: PPUSH
39921: LD_INT 5
39923: PPUSH
39924: CALL_OW 273
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39933: LD_VAR 0 9
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PPUSH
39942: LD_VAR 0 9
39946: PUSH
39947: LD_INT 2
39949: ARRAY
39950: PPUSH
39951: CALL_OW 488
39955: IFFALSE 40054
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39957: LD_ADDR_VAR 0 4
39961: PUSH
39962: LD_VAR 0 9
39966: PUSH
39967: LD_INT 1
39969: ARRAY
39970: PPUSH
39971: LD_VAR 0 9
39975: PUSH
39976: LD_INT 2
39978: ARRAY
39979: PPUSH
39980: CALL_OW 546
39984: ST_TO_ADDR
// if hex [ 1 ] then
39985: LD_VAR 0 4
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: IFFALSE 39997
// continue ;
39995: GO 39885
// h := hex [ 2 ] ;
39997: LD_ADDR_VAR 0 13
40001: PUSH
40002: LD_VAR 0 4
40006: PUSH
40007: LD_INT 2
40009: ARRAY
40010: ST_TO_ADDR
// if h + 7 < height then
40011: LD_VAR 0 13
40015: PUSH
40016: LD_INT 7
40018: PLUS
40019: PUSH
40020: LD_VAR 0 15
40024: LESS
40025: IFFALSE 40054
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40027: LD_ADDR_VAR 0 18
40031: PUSH
40032: LD_INT 7
40034: PUSH
40035: LD_INT 28
40037: PUSH
40038: LD_INT 45
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: LD_VAR 0 12
40050: ARRAY
40051: ST_TO_ADDR
// break ;
40052: GO 40056
// end ; end ; end ;
40054: GO 39885
40056: POP
40057: POP
// end ; if not weapon then
40058: LD_VAR 0 18
40062: NOT
40063: IFFALSE 40123
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40065: LD_ADDR_VAR 0 5
40069: PUSH
40070: LD_VAR 0 5
40074: PUSH
40075: LD_INT 11
40077: PUSH
40078: LD_INT 30
40080: PUSH
40081: LD_INT 49
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: DIFF
40089: ST_TO_ADDR
// if not list then
40090: LD_VAR 0 5
40094: NOT
40095: IFFALSE 40099
// exit ;
40097: GO 40241
// weapon := list [ rand ( 1 , list ) ] ;
40099: LD_ADDR_VAR 0 18
40103: PUSH
40104: LD_VAR 0 5
40108: PUSH
40109: LD_INT 1
40111: PPUSH
40112: LD_VAR 0 5
40116: PPUSH
40117: CALL_OW 12
40121: ARRAY
40122: ST_TO_ADDR
// end ; if weapon then
40123: LD_VAR 0 18
40127: IFFALSE 40241
// begin tmp := CostOfWeapon ( weapon ) ;
40129: LD_ADDR_VAR 0 14
40133: PUSH
40134: LD_VAR 0 18
40138: PPUSH
40139: CALL_OW 451
40143: ST_TO_ADDR
// j := GetBase ( tower ) ;
40144: LD_ADDR_VAR 0 9
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 274
40158: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40159: LD_VAR 0 9
40163: PPUSH
40164: LD_INT 1
40166: PPUSH
40167: CALL_OW 275
40171: PUSH
40172: LD_VAR 0 14
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: GREATEREQUAL
40181: PUSH
40182: LD_VAR 0 9
40186: PPUSH
40187: LD_INT 2
40189: PPUSH
40190: CALL_OW 275
40194: PUSH
40195: LD_VAR 0 14
40199: PUSH
40200: LD_INT 2
40202: ARRAY
40203: GREATEREQUAL
40204: AND
40205: PUSH
40206: LD_VAR 0 9
40210: PPUSH
40211: LD_INT 3
40213: PPUSH
40214: CALL_OW 275
40218: PUSH
40219: LD_VAR 0 14
40223: PUSH
40224: LD_INT 3
40226: ARRAY
40227: GREATEREQUAL
40228: AND
40229: IFFALSE 40241
// result := weapon ;
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_VAR 0 18
40240: ST_TO_ADDR
// end ; end ;
40241: LD_VAR 0 3
40245: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40246: LD_INT 0
40248: PPUSH
40249: PPUSH
// result := true ;
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: LD_INT 1
40257: ST_TO_ADDR
// if array1 = array2 then
40258: LD_VAR 0 1
40262: PUSH
40263: LD_VAR 0 2
40267: EQUAL
40268: IFFALSE 40328
// begin for i = 1 to array1 do
40270: LD_ADDR_VAR 0 4
40274: PUSH
40275: DOUBLE
40276: LD_INT 1
40278: DEC
40279: ST_TO_ADDR
40280: LD_VAR 0 1
40284: PUSH
40285: FOR_TO
40286: IFFALSE 40324
// if array1 [ i ] <> array2 [ i ] then
40288: LD_VAR 0 1
40292: PUSH
40293: LD_VAR 0 4
40297: ARRAY
40298: PUSH
40299: LD_VAR 0 2
40303: PUSH
40304: LD_VAR 0 4
40308: ARRAY
40309: NONEQUAL
40310: IFFALSE 40322
// begin result := false ;
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 0
40319: ST_TO_ADDR
// break ;
40320: GO 40324
// end ;
40322: GO 40285
40324: POP
40325: POP
// end else
40326: GO 40336
// result := false ;
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_INT 0
40335: ST_TO_ADDR
// end ;
40336: LD_VAR 0 3
40340: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40341: LD_INT 0
40343: PPUSH
40344: PPUSH
// if not array1 or not array2 then
40345: LD_VAR 0 1
40349: NOT
40350: PUSH
40351: LD_VAR 0 2
40355: NOT
40356: OR
40357: IFFALSE 40361
// exit ;
40359: GO 40425
// result := true ;
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_INT 1
40368: ST_TO_ADDR
// for i = 1 to array1 do
40369: LD_ADDR_VAR 0 4
40373: PUSH
40374: DOUBLE
40375: LD_INT 1
40377: DEC
40378: ST_TO_ADDR
40379: LD_VAR 0 1
40383: PUSH
40384: FOR_TO
40385: IFFALSE 40423
// if array1 [ i ] <> array2 [ i ] then
40387: LD_VAR 0 1
40391: PUSH
40392: LD_VAR 0 4
40396: ARRAY
40397: PUSH
40398: LD_VAR 0 2
40402: PUSH
40403: LD_VAR 0 4
40407: ARRAY
40408: NONEQUAL
40409: IFFALSE 40421
// begin result := false ;
40411: LD_ADDR_VAR 0 3
40415: PUSH
40416: LD_INT 0
40418: ST_TO_ADDR
// break ;
40419: GO 40423
// end ;
40421: GO 40384
40423: POP
40424: POP
// end ;
40425: LD_VAR 0 3
40429: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40430: LD_INT 0
40432: PPUSH
40433: PPUSH
40434: PPUSH
// pom := GetBase ( fac ) ;
40435: LD_ADDR_VAR 0 5
40439: PUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 274
40449: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40450: LD_ADDR_VAR 0 4
40454: PUSH
40455: LD_VAR 0 2
40459: PUSH
40460: LD_INT 1
40462: ARRAY
40463: PPUSH
40464: LD_VAR 0 2
40468: PUSH
40469: LD_INT 2
40471: ARRAY
40472: PPUSH
40473: LD_VAR 0 2
40477: PUSH
40478: LD_INT 3
40480: ARRAY
40481: PPUSH
40482: LD_VAR 0 2
40486: PUSH
40487: LD_INT 4
40489: ARRAY
40490: PPUSH
40491: CALL_OW 449
40495: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40496: LD_ADDR_VAR 0 3
40500: PUSH
40501: LD_VAR 0 5
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 275
40513: PUSH
40514: LD_VAR 0 4
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: GREATEREQUAL
40523: PUSH
40524: LD_VAR 0 5
40528: PPUSH
40529: LD_INT 2
40531: PPUSH
40532: CALL_OW 275
40536: PUSH
40537: LD_VAR 0 4
40541: PUSH
40542: LD_INT 2
40544: ARRAY
40545: GREATEREQUAL
40546: AND
40547: PUSH
40548: LD_VAR 0 5
40552: PPUSH
40553: LD_INT 3
40555: PPUSH
40556: CALL_OW 275
40560: PUSH
40561: LD_VAR 0 4
40565: PUSH
40566: LD_INT 3
40568: ARRAY
40569: GREATEREQUAL
40570: AND
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
// pom := GetBase ( building ) ;
40583: LD_ADDR_VAR 0 3
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 274
40597: ST_TO_ADDR
// if not pom then
40598: LD_VAR 0 3
40602: NOT
40603: IFFALSE 40607
// exit ;
40605: GO 40777
// btype := GetBType ( building ) ;
40607: LD_ADDR_VAR 0 5
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: CALL_OW 266
40621: ST_TO_ADDR
// if btype = b_armoury then
40622: LD_VAR 0 5
40626: PUSH
40627: LD_INT 4
40629: EQUAL
40630: IFFALSE 40640
// btype := b_barracks ;
40632: LD_ADDR_VAR 0 5
40636: PUSH
40637: LD_INT 5
40639: ST_TO_ADDR
// if btype = b_depot then
40640: LD_VAR 0 5
40644: PUSH
40645: LD_INT 0
40647: EQUAL
40648: IFFALSE 40658
// btype := b_warehouse ;
40650: LD_ADDR_VAR 0 5
40654: PUSH
40655: LD_INT 1
40657: ST_TO_ADDR
// if btype = b_workshop then
40658: LD_VAR 0 5
40662: PUSH
40663: LD_INT 2
40665: EQUAL
40666: IFFALSE 40676
// btype := b_factory ;
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_INT 3
40675: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40676: LD_ADDR_VAR 0 4
40680: PUSH
40681: LD_VAR 0 5
40685: PPUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 248
40695: PPUSH
40696: CALL_OW 450
40700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40701: LD_ADDR_VAR 0 2
40705: PUSH
40706: LD_VAR 0 3
40710: PPUSH
40711: LD_INT 1
40713: PPUSH
40714: CALL_OW 275
40718: PUSH
40719: LD_VAR 0 4
40723: PUSH
40724: LD_INT 1
40726: ARRAY
40727: GREATEREQUAL
40728: PUSH
40729: LD_VAR 0 3
40733: PPUSH
40734: LD_INT 2
40736: PPUSH
40737: CALL_OW 275
40741: PUSH
40742: LD_VAR 0 4
40746: PUSH
40747: LD_INT 2
40749: ARRAY
40750: GREATEREQUAL
40751: AND
40752: PUSH
40753: LD_VAR 0 3
40757: PPUSH
40758: LD_INT 3
40760: PPUSH
40761: CALL_OW 275
40765: PUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_INT 3
40773: ARRAY
40774: GREATEREQUAL
40775: AND
40776: ST_TO_ADDR
// end ;
40777: LD_VAR 0 2
40781: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
40786: PPUSH
// pom := GetBase ( building ) ;
40787: LD_ADDR_VAR 0 4
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: CALL_OW 274
40801: ST_TO_ADDR
// if not pom then
40802: LD_VAR 0 4
40806: NOT
40807: IFFALSE 40811
// exit ;
40809: GO 40912
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40811: LD_ADDR_VAR 0 5
40815: PUSH
40816: LD_VAR 0 2
40820: PPUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 248
40830: PPUSH
40831: CALL_OW 450
40835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40836: LD_ADDR_VAR 0 3
40840: PUSH
40841: LD_VAR 0 4
40845: PPUSH
40846: LD_INT 1
40848: PPUSH
40849: CALL_OW 275
40853: PUSH
40854: LD_VAR 0 5
40858: PUSH
40859: LD_INT 1
40861: ARRAY
40862: GREATEREQUAL
40863: PUSH
40864: LD_VAR 0 4
40868: PPUSH
40869: LD_INT 2
40871: PPUSH
40872: CALL_OW 275
40876: PUSH
40877: LD_VAR 0 5
40881: PUSH
40882: LD_INT 2
40884: ARRAY
40885: GREATEREQUAL
40886: AND
40887: PUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: LD_INT 3
40895: PPUSH
40896: CALL_OW 275
40900: PUSH
40901: LD_VAR 0 5
40905: PUSH
40906: LD_INT 3
40908: ARRAY
40909: GREATEREQUAL
40910: AND
40911: ST_TO_ADDR
// end ;
40912: LD_VAR 0 3
40916: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40917: LD_INT 0
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
// result := false ;
40930: LD_ADDR_VAR 0 8
40934: PUSH
40935: LD_INT 0
40937: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40938: LD_VAR 0 5
40942: NOT
40943: PUSH
40944: LD_VAR 0 1
40948: NOT
40949: OR
40950: PUSH
40951: LD_VAR 0 2
40955: NOT
40956: OR
40957: PUSH
40958: LD_VAR 0 3
40962: NOT
40963: OR
40964: IFFALSE 40968
// exit ;
40966: GO 41782
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40968: LD_ADDR_VAR 0 14
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: LD_VAR 0 2
40982: PPUSH
40983: LD_VAR 0 3
40987: PPUSH
40988: LD_VAR 0 4
40992: PPUSH
40993: LD_VAR 0 5
40997: PUSH
40998: LD_INT 1
41000: ARRAY
41001: PPUSH
41002: CALL_OW 248
41006: PPUSH
41007: LD_INT 0
41009: PPUSH
41010: CALL 43019 0 6
41014: ST_TO_ADDR
// if not hexes then
41015: LD_VAR 0 14
41019: NOT
41020: IFFALSE 41024
// exit ;
41022: GO 41782
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41024: LD_ADDR_VAR 0 17
41028: PUSH
41029: LD_VAR 0 5
41033: PPUSH
41034: LD_INT 22
41036: PUSH
41037: LD_VAR 0 13
41041: PPUSH
41042: CALL_OW 255
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 30
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 30
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PPUSH
41083: CALL_OW 72
41087: ST_TO_ADDR
// for i = 1 to hexes do
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: DOUBLE
41094: LD_INT 1
41096: DEC
41097: ST_TO_ADDR
41098: LD_VAR 0 14
41102: PUSH
41103: FOR_TO
41104: IFFALSE 41780
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41106: LD_ADDR_VAR 0 13
41110: PUSH
41111: LD_VAR 0 14
41115: PUSH
41116: LD_VAR 0 9
41120: ARRAY
41121: PUSH
41122: LD_INT 1
41124: ARRAY
41125: PPUSH
41126: LD_VAR 0 14
41130: PUSH
41131: LD_VAR 0 9
41135: ARRAY
41136: PUSH
41137: LD_INT 2
41139: ARRAY
41140: PPUSH
41141: CALL_OW 428
41145: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41146: LD_VAR 0 14
41150: PUSH
41151: LD_VAR 0 9
41155: ARRAY
41156: PUSH
41157: LD_INT 1
41159: ARRAY
41160: PPUSH
41161: LD_VAR 0 14
41165: PUSH
41166: LD_VAR 0 9
41170: ARRAY
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: PPUSH
41176: CALL_OW 351
41180: PUSH
41181: LD_VAR 0 14
41185: PUSH
41186: LD_VAR 0 9
41190: ARRAY
41191: PUSH
41192: LD_INT 1
41194: ARRAY
41195: PPUSH
41196: LD_VAR 0 14
41200: PUSH
41201: LD_VAR 0 9
41205: ARRAY
41206: PUSH
41207: LD_INT 2
41209: ARRAY
41210: PPUSH
41211: CALL_OW 488
41215: NOT
41216: OR
41217: PUSH
41218: LD_VAR 0 13
41222: PPUSH
41223: CALL_OW 247
41227: PUSH
41228: LD_INT 3
41230: EQUAL
41231: OR
41232: IFFALSE 41238
// exit ;
41234: POP
41235: POP
41236: GO 41782
// if not tmp then
41238: LD_VAR 0 13
41242: NOT
41243: IFFALSE 41247
// continue ;
41245: GO 41103
// result := true ;
41247: LD_ADDR_VAR 0 8
41251: PUSH
41252: LD_INT 1
41254: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41255: LD_VAR 0 6
41259: PUSH
41260: LD_VAR 0 13
41264: PPUSH
41265: CALL_OW 247
41269: PUSH
41270: LD_INT 2
41272: EQUAL
41273: AND
41274: PUSH
41275: LD_VAR 0 13
41279: PPUSH
41280: CALL_OW 263
41284: PUSH
41285: LD_INT 1
41287: EQUAL
41288: AND
41289: IFFALSE 41453
// begin if IsDrivenBy ( tmp ) then
41291: LD_VAR 0 13
41295: PPUSH
41296: CALL_OW 311
41300: IFFALSE 41304
// continue ;
41302: GO 41103
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41304: LD_VAR 0 6
41308: PPUSH
41309: LD_INT 3
41311: PUSH
41312: LD_INT 60
41314: PUSH
41315: EMPTY
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: LD_INT 55
41327: PUSH
41328: EMPTY
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PPUSH
41339: CALL_OW 72
41343: IFFALSE 41451
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41345: LD_ADDR_VAR 0 18
41349: PUSH
41350: LD_VAR 0 6
41354: PPUSH
41355: LD_INT 3
41357: PUSH
41358: LD_INT 60
41360: PUSH
41361: EMPTY
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 3
41370: PUSH
41371: LD_INT 55
41373: PUSH
41374: EMPTY
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PPUSH
41385: CALL_OW 72
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: ST_TO_ADDR
// if IsInUnit ( driver ) then
41394: LD_VAR 0 18
41398: PPUSH
41399: CALL_OW 310
41403: IFFALSE 41414
// ComExit ( driver ) ;
41405: LD_VAR 0 18
41409: PPUSH
41410: CALL 66203 0 1
// AddComEnterUnit ( driver , tmp ) ;
41414: LD_VAR 0 18
41418: PPUSH
41419: LD_VAR 0 13
41423: PPUSH
41424: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41428: LD_VAR 0 18
41432: PPUSH
41433: LD_VAR 0 7
41437: PPUSH
41438: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41442: LD_VAR 0 18
41446: PPUSH
41447: CALL_OW 181
// end ; continue ;
41451: GO 41103
// end ; if not cleaners or not tmp in cleaners then
41453: LD_VAR 0 6
41457: NOT
41458: PUSH
41459: LD_VAR 0 13
41463: PUSH
41464: LD_VAR 0 6
41468: IN
41469: NOT
41470: OR
41471: IFFALSE 41778
// begin if dep then
41473: LD_VAR 0 17
41477: IFFALSE 41613
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41479: LD_ADDR_VAR 0 16
41483: PUSH
41484: LD_VAR 0 17
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: CALL_OW 250
41497: PPUSH
41498: LD_VAR 0 17
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: PPUSH
41507: CALL_OW 254
41511: PPUSH
41512: LD_INT 5
41514: PPUSH
41515: CALL_OW 272
41519: PUSH
41520: LD_VAR 0 17
41524: PUSH
41525: LD_INT 1
41527: ARRAY
41528: PPUSH
41529: CALL_OW 251
41533: PPUSH
41534: LD_VAR 0 17
41538: PUSH
41539: LD_INT 1
41541: ARRAY
41542: PPUSH
41543: CALL_OW 254
41547: PPUSH
41548: LD_INT 5
41550: PPUSH
41551: CALL_OW 273
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41560: LD_VAR 0 16
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PPUSH
41569: LD_VAR 0 16
41573: PUSH
41574: LD_INT 2
41576: ARRAY
41577: PPUSH
41578: CALL_OW 488
41582: IFFALSE 41613
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41584: LD_VAR 0 13
41588: PPUSH
41589: LD_VAR 0 16
41593: PUSH
41594: LD_INT 1
41596: ARRAY
41597: PPUSH
41598: LD_VAR 0 16
41602: PUSH
41603: LD_INT 2
41605: ARRAY
41606: PPUSH
41607: CALL_OW 111
// continue ;
41611: GO 41103
// end ; end ; r := GetDir ( tmp ) ;
41613: LD_ADDR_VAR 0 15
41617: PUSH
41618: LD_VAR 0 13
41622: PPUSH
41623: CALL_OW 254
41627: ST_TO_ADDR
// if r = 5 then
41628: LD_VAR 0 15
41632: PUSH
41633: LD_INT 5
41635: EQUAL
41636: IFFALSE 41646
// r := 0 ;
41638: LD_ADDR_VAR 0 15
41642: PUSH
41643: LD_INT 0
41645: ST_TO_ADDR
// for j = r to 5 do
41646: LD_ADDR_VAR 0 10
41650: PUSH
41651: DOUBLE
41652: LD_VAR 0 15
41656: DEC
41657: ST_TO_ADDR
41658: LD_INT 5
41660: PUSH
41661: FOR_TO
41662: IFFALSE 41776
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41664: LD_ADDR_VAR 0 11
41668: PUSH
41669: LD_VAR 0 13
41673: PPUSH
41674: CALL_OW 250
41678: PPUSH
41679: LD_VAR 0 10
41683: PPUSH
41684: LD_INT 2
41686: PPUSH
41687: CALL_OW 272
41691: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41692: LD_ADDR_VAR 0 12
41696: PUSH
41697: LD_VAR 0 13
41701: PPUSH
41702: CALL_OW 251
41706: PPUSH
41707: LD_VAR 0 10
41711: PPUSH
41712: LD_INT 2
41714: PPUSH
41715: CALL_OW 273
41719: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41720: LD_VAR 0 11
41724: PPUSH
41725: LD_VAR 0 12
41729: PPUSH
41730: CALL_OW 488
41734: PUSH
41735: LD_VAR 0 11
41739: PPUSH
41740: LD_VAR 0 12
41744: PPUSH
41745: CALL_OW 428
41749: NOT
41750: AND
41751: IFFALSE 41774
// begin ComMoveXY ( tmp , _x , _y ) ;
41753: LD_VAR 0 13
41757: PPUSH
41758: LD_VAR 0 11
41762: PPUSH
41763: LD_VAR 0 12
41767: PPUSH
41768: CALL_OW 111
// break ;
41772: GO 41776
// end ; end ;
41774: GO 41661
41776: POP
41777: POP
// end ; end ;
41778: GO 41103
41780: POP
41781: POP
// end ;
41782: LD_VAR 0 8
41786: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41787: LD_INT 0
41789: PPUSH
// result := true ;
41790: LD_ADDR_VAR 0 3
41794: PUSH
41795: LD_INT 1
41797: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41798: LD_VAR 0 2
41802: PUSH
41803: LD_INT 24
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41817
41809: LD_INT 33
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41842
41817: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41818: LD_ADDR_VAR 0 3
41822: PUSH
41823: LD_INT 32
41825: PPUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: CALL_OW 321
41835: PUSH
41836: LD_INT 2
41838: EQUAL
41839: ST_TO_ADDR
41840: GO 42162
41842: LD_INT 20
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 41875
41850: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41851: LD_ADDR_VAR 0 3
41855: PUSH
41856: LD_INT 6
41858: PPUSH
41859: LD_VAR 0 1
41863: PPUSH
41864: CALL_OW 321
41868: PUSH
41869: LD_INT 2
41871: EQUAL
41872: ST_TO_ADDR
41873: GO 42162
41875: LD_INT 22
41877: DOUBLE
41878: EQUAL
41879: IFTRUE 41889
41881: LD_INT 36
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 41914
41889: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 15
41897: PPUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 321
41907: PUSH
41908: LD_INT 2
41910: EQUAL
41911: ST_TO_ADDR
41912: GO 42162
41914: LD_INT 30
41916: DOUBLE
41917: EQUAL
41918: IFTRUE 41922
41920: GO 41947
41922: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41923: LD_ADDR_VAR 0 3
41927: PUSH
41928: LD_INT 20
41930: PPUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 321
41940: PUSH
41941: LD_INT 2
41943: EQUAL
41944: ST_TO_ADDR
41945: GO 42162
41947: LD_INT 28
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41961
41953: LD_INT 21
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41986
41961: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 21
41969: PPUSH
41970: LD_VAR 0 1
41974: PPUSH
41975: CALL_OW 321
41979: PUSH
41980: LD_INT 2
41982: EQUAL
41983: ST_TO_ADDR
41984: GO 42162
41986: LD_INT 16
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42021
41994: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_EXP 38
42004: PPUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 321
42014: PUSH
42015: LD_INT 2
42017: EQUAL
42018: ST_TO_ADDR
42019: GO 42162
42021: LD_INT 19
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42035
42027: LD_INT 23
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42035
42033: GO 42062
42035: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42036: LD_ADDR_VAR 0 3
42040: PUSH
42041: LD_EXP 37
42045: PPUSH
42046: LD_VAR 0 1
42050: PPUSH
42051: CALL_OW 321
42055: PUSH
42056: LD_INT 2
42058: EQUAL
42059: ST_TO_ADDR
42060: GO 42162
42062: LD_INT 17
42064: DOUBLE
42065: EQUAL
42066: IFTRUE 42070
42068: GO 42095
42070: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_INT 39
42078: PPUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: CALL_OW 321
42088: PUSH
42089: LD_INT 2
42091: EQUAL
42092: ST_TO_ADDR
42093: GO 42162
42095: LD_INT 18
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42103
42101: GO 42128
42103: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: LD_INT 40
42111: PPUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL_OW 321
42121: PUSH
42122: LD_INT 2
42124: EQUAL
42125: ST_TO_ADDR
42126: GO 42162
42128: LD_INT 27
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42161
42136: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_INT 35
42144: PPUSH
42145: LD_VAR 0 1
42149: PPUSH
42150: CALL_OW 321
42154: PUSH
42155: LD_INT 2
42157: EQUAL
42158: ST_TO_ADDR
42159: GO 42162
42161: POP
// end ;
42162: LD_VAR 0 3
42166: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42167: LD_INT 0
42169: PPUSH
42170: PPUSH
42171: PPUSH
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
// result := false ;
42180: LD_ADDR_VAR 0 6
42184: PUSH
42185: LD_INT 0
42187: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42188: LD_VAR 0 1
42192: NOT
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: CALL_OW 266
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: IN
42214: NOT
42215: OR
42216: PUSH
42217: LD_VAR 0 2
42221: NOT
42222: OR
42223: PUSH
42224: LD_VAR 0 5
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: LD_INT 5
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: IN
42255: NOT
42256: OR
42257: PUSH
42258: LD_VAR 0 3
42262: PPUSH
42263: LD_VAR 0 4
42267: PPUSH
42268: CALL_OW 488
42272: NOT
42273: OR
42274: IFFALSE 42278
// exit ;
42276: GO 43014
// side := GetSide ( depot ) ;
42278: LD_ADDR_VAR 0 9
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: CALL_OW 255
42292: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42293: LD_VAR 0 9
42297: PPUSH
42298: LD_VAR 0 2
42302: PPUSH
42303: CALL 41787 0 2
42307: NOT
42308: IFFALSE 42312
// exit ;
42310: GO 43014
// pom := GetBase ( depot ) ;
42312: LD_ADDR_VAR 0 10
42316: PUSH
42317: LD_VAR 0 1
42321: PPUSH
42322: CALL_OW 274
42326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42327: LD_ADDR_VAR 0 11
42331: PUSH
42332: LD_VAR 0 2
42336: PPUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 248
42346: PPUSH
42347: CALL_OW 450
42351: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42352: LD_VAR 0 10
42356: PPUSH
42357: LD_INT 1
42359: PPUSH
42360: CALL_OW 275
42364: PUSH
42365: LD_VAR 0 11
42369: PUSH
42370: LD_INT 1
42372: ARRAY
42373: GREATEREQUAL
42374: PUSH
42375: LD_VAR 0 10
42379: PPUSH
42380: LD_INT 2
42382: PPUSH
42383: CALL_OW 275
42387: PUSH
42388: LD_VAR 0 11
42392: PUSH
42393: LD_INT 2
42395: ARRAY
42396: GREATEREQUAL
42397: AND
42398: PUSH
42399: LD_VAR 0 10
42403: PPUSH
42404: LD_INT 3
42406: PPUSH
42407: CALL_OW 275
42411: PUSH
42412: LD_VAR 0 11
42416: PUSH
42417: LD_INT 3
42419: ARRAY
42420: GREATEREQUAL
42421: AND
42422: NOT
42423: IFFALSE 42427
// exit ;
42425: GO 43014
// if GetBType ( depot ) = b_depot then
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 266
42436: PUSH
42437: LD_INT 0
42439: EQUAL
42440: IFFALSE 42452
// dist := 28 else
42442: LD_ADDR_VAR 0 14
42446: PUSH
42447: LD_INT 28
42449: ST_TO_ADDR
42450: GO 42460
// dist := 36 ;
42452: LD_ADDR_VAR 0 14
42456: PUSH
42457: LD_INT 36
42459: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42460: LD_VAR 0 1
42464: PPUSH
42465: LD_VAR 0 3
42469: PPUSH
42470: LD_VAR 0 4
42474: PPUSH
42475: CALL_OW 297
42479: PUSH
42480: LD_VAR 0 14
42484: GREATER
42485: IFFALSE 42489
// exit ;
42487: GO 43014
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42489: LD_ADDR_VAR 0 12
42493: PUSH
42494: LD_VAR 0 2
42498: PPUSH
42499: LD_VAR 0 3
42503: PPUSH
42504: LD_VAR 0 4
42508: PPUSH
42509: LD_VAR 0 5
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 248
42523: PPUSH
42524: LD_INT 0
42526: PPUSH
42527: CALL 43019 0 6
42531: ST_TO_ADDR
// if not hexes then
42532: LD_VAR 0 12
42536: NOT
42537: IFFALSE 42541
// exit ;
42539: GO 43014
// hex := GetHexInfo ( x , y ) ;
42541: LD_ADDR_VAR 0 15
42545: PUSH
42546: LD_VAR 0 3
42550: PPUSH
42551: LD_VAR 0 4
42555: PPUSH
42556: CALL_OW 546
42560: ST_TO_ADDR
// if hex [ 1 ] then
42561: LD_VAR 0 15
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: IFFALSE 42573
// exit ;
42571: GO 43014
// height := hex [ 2 ] ;
42573: LD_ADDR_VAR 0 13
42577: PUSH
42578: LD_VAR 0 15
42582: PUSH
42583: LD_INT 2
42585: ARRAY
42586: ST_TO_ADDR
// for i = 1 to hexes do
42587: LD_ADDR_VAR 0 7
42591: PUSH
42592: DOUBLE
42593: LD_INT 1
42595: DEC
42596: ST_TO_ADDR
42597: LD_VAR 0 12
42601: PUSH
42602: FOR_TO
42603: IFFALSE 42933
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42605: LD_VAR 0 12
42609: PUSH
42610: LD_VAR 0 7
42614: ARRAY
42615: PUSH
42616: LD_INT 1
42618: ARRAY
42619: PPUSH
42620: LD_VAR 0 12
42624: PUSH
42625: LD_VAR 0 7
42629: ARRAY
42630: PUSH
42631: LD_INT 2
42633: ARRAY
42634: PPUSH
42635: CALL_OW 488
42639: NOT
42640: PUSH
42641: LD_VAR 0 12
42645: PUSH
42646: LD_VAR 0 7
42650: ARRAY
42651: PUSH
42652: LD_INT 1
42654: ARRAY
42655: PPUSH
42656: LD_VAR 0 12
42660: PUSH
42661: LD_VAR 0 7
42665: ARRAY
42666: PUSH
42667: LD_INT 2
42669: ARRAY
42670: PPUSH
42671: CALL_OW 428
42675: PUSH
42676: LD_INT 0
42678: GREATER
42679: OR
42680: PUSH
42681: LD_VAR 0 12
42685: PUSH
42686: LD_VAR 0 7
42690: ARRAY
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 12
42700: PUSH
42701: LD_VAR 0 7
42705: ARRAY
42706: PUSH
42707: LD_INT 2
42709: ARRAY
42710: PPUSH
42711: CALL_OW 351
42715: OR
42716: IFFALSE 42722
// exit ;
42718: POP
42719: POP
42720: GO 43014
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42722: LD_ADDR_VAR 0 8
42726: PUSH
42727: LD_VAR 0 12
42731: PUSH
42732: LD_VAR 0 7
42736: ARRAY
42737: PUSH
42738: LD_INT 1
42740: ARRAY
42741: PPUSH
42742: LD_VAR 0 12
42746: PUSH
42747: LD_VAR 0 7
42751: ARRAY
42752: PUSH
42753: LD_INT 2
42755: ARRAY
42756: PPUSH
42757: CALL_OW 546
42761: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42762: LD_VAR 0 8
42766: PUSH
42767: LD_INT 1
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 8
42775: PUSH
42776: LD_INT 2
42778: ARRAY
42779: PUSH
42780: LD_VAR 0 13
42784: PUSH
42785: LD_INT 2
42787: PLUS
42788: GREATER
42789: OR
42790: PUSH
42791: LD_VAR 0 8
42795: PUSH
42796: LD_INT 2
42798: ARRAY
42799: PUSH
42800: LD_VAR 0 13
42804: PUSH
42805: LD_INT 2
42807: MINUS
42808: LESS
42809: OR
42810: PUSH
42811: LD_VAR 0 8
42815: PUSH
42816: LD_INT 3
42818: ARRAY
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 8
42825: PUSH
42826: LD_INT 9
42828: PUSH
42829: LD_INT 10
42831: PUSH
42832: LD_INT 11
42834: PUSH
42835: LD_INT 12
42837: PUSH
42838: LD_INT 13
42840: PUSH
42841: LD_INT 16
42843: PUSH
42844: LD_INT 17
42846: PUSH
42847: LD_INT 18
42849: PUSH
42850: LD_INT 19
42852: PUSH
42853: LD_INT 20
42855: PUSH
42856: LD_INT 21
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: IN
42874: NOT
42875: OR
42876: PUSH
42877: LD_VAR 0 8
42881: PUSH
42882: LD_INT 5
42884: ARRAY
42885: NOT
42886: OR
42887: PUSH
42888: LD_VAR 0 8
42892: PUSH
42893: LD_INT 6
42895: ARRAY
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 7
42905: PUSH
42906: LD_INT 9
42908: PUSH
42909: LD_INT 10
42911: PUSH
42912: LD_INT 11
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: IN
42923: NOT
42924: OR
42925: IFFALSE 42931
// exit ;
42927: POP
42928: POP
42929: GO 43014
// end ;
42931: GO 42602
42933: POP
42934: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42935: LD_VAR 0 9
42939: PPUSH
42940: LD_VAR 0 3
42944: PPUSH
42945: LD_VAR 0 4
42949: PPUSH
42950: LD_INT 20
42952: PPUSH
42953: CALL 34960 0 4
42957: PUSH
42958: LD_INT 4
42960: ARRAY
42961: IFFALSE 42965
// exit ;
42963: GO 43014
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42965: LD_VAR 0 2
42969: PUSH
42970: LD_INT 29
42972: PUSH
42973: LD_INT 30
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: IN
42980: PUSH
42981: LD_VAR 0 3
42985: PPUSH
42986: LD_VAR 0 4
42990: PPUSH
42991: LD_VAR 0 9
42995: PPUSH
42996: CALL_OW 440
43000: NOT
43001: AND
43002: IFFALSE 43006
// exit ;
43004: GO 43014
// result := true ;
43006: LD_ADDR_VAR 0 6
43010: PUSH
43011: LD_INT 1
43013: ST_TO_ADDR
// end ;
43014: LD_VAR 0 6
43018: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43019: LD_INT 0
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
43078: PPUSH
// result = [ ] ;
43079: LD_ADDR_VAR 0 7
43083: PUSH
43084: EMPTY
43085: ST_TO_ADDR
// temp_list = [ ] ;
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: EMPTY
43092: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: LD_INT 4
43112: PUSH
43113: LD_INT 5
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: IN
43124: NOT
43125: PUSH
43126: LD_VAR 0 1
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: IN
43141: PUSH
43142: LD_VAR 0 5
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: IN
43161: NOT
43162: AND
43163: OR
43164: IFFALSE 43168
// exit ;
43166: GO 61559
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43168: LD_VAR 0 1
43172: PUSH
43173: LD_INT 6
43175: PUSH
43176: LD_INT 7
43178: PUSH
43179: LD_INT 8
43181: PUSH
43182: LD_INT 13
43184: PUSH
43185: LD_INT 12
43187: PUSH
43188: LD_INT 15
43190: PUSH
43191: LD_INT 11
43193: PUSH
43194: LD_INT 14
43196: PUSH
43197: LD_INT 10
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: IN
43211: IFFALSE 43221
// btype = b_lab ;
43213: LD_ADDR_VAR 0 1
43217: PUSH
43218: LD_INT 6
43220: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43221: LD_VAR 0 6
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: IN
43240: NOT
43241: PUSH
43242: LD_VAR 0 1
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 6
43261: PUSH
43262: LD_INT 36
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: LD_INT 5
43270: PUSH
43271: LD_INT 31
43273: PUSH
43274: LD_INT 32
43276: PUSH
43277: LD_INT 33
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: IN
43293: NOT
43294: PUSH
43295: LD_VAR 0 6
43299: PUSH
43300: LD_INT 1
43302: EQUAL
43303: AND
43304: OR
43305: PUSH
43306: LD_VAR 0 1
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: IN
43321: NOT
43322: PUSH
43323: LD_VAR 0 6
43327: PUSH
43328: LD_INT 2
43330: EQUAL
43331: AND
43332: OR
43333: IFFALSE 43343
// mode = 0 ;
43335: LD_ADDR_VAR 0 6
43339: PUSH
43340: LD_INT 0
43342: ST_TO_ADDR
// case mode of 0 :
43343: LD_VAR 0 6
43347: PUSH
43348: LD_INT 0
43350: DOUBLE
43351: EQUAL
43352: IFTRUE 43356
43354: GO 54809
43356: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43357: LD_ADDR_VAR 0 11
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43550: LD_ADDR_VAR 0 12
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 3
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43746: LD_ADDR_VAR 0 13
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43945: LD_ADDR_VAR 0 14
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44141: LD_ADDR_VAR 0 15
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44334: LD_ADDR_VAR 0 16
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 3
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44527: LD_ADDR_VAR 0 17
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44757: LD_ADDR_VAR 0 18
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44987: LD_ADDR_VAR 0 19
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45217: LD_ADDR_VAR 0 20
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45447: LD_ADDR_VAR 0 21
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45677: LD_ADDR_VAR 0 22
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45907: LD_ADDR_VAR 0 23
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 3
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46187: LD_ADDR_VAR 0 24
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46463: LD_ADDR_VAR 0 25
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46737: LD_ADDR_VAR 0 26
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47013: LD_ADDR_VAR 0 27
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47293: LD_ADDR_VAR 0 28
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 3
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47575: LD_ADDR_VAR 0 29
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: LD_INT 3
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47854: LD_ADDR_VAR 0 30
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48132: LD_ADDR_VAR 0 31
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48410: LD_ADDR_VAR 0 32
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 3
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48688: LD_ADDR_VAR 0 33
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48967: LD_ADDR_VAR 0 34
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 3
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49247: LD_ADDR_VAR 0 35
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49359: LD_ADDR_VAR 0 36
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49471: LD_ADDR_VAR 0 37
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49583: LD_ADDR_VAR 0 38
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49695: LD_ADDR_VAR 0 39
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49807: LD_ADDR_VAR 0 40
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49919: LD_ADDR_VAR 0 41
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50269: LD_ADDR_VAR 0 42
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: LD_INT 3
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50619: LD_ADDR_VAR 0 43
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50967: LD_ADDR_VAR 0 44
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51317: LD_ADDR_VAR 0 45
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51667: LD_ADDR_VAR 0 46
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52015: LD_ADDR_VAR 0 47
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52166: LD_ADDR_VAR 0 48
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52313: LD_ADDR_VAR 0 49
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52457: LD_ADDR_VAR 0 50
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52601: LD_ADDR_VAR 0 51
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52748: LD_ADDR_VAR 0 52
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52899: LD_ADDR_VAR 0 53
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53129: LD_ADDR_VAR 0 54
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53359: LD_ADDR_VAR 0 55
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53589: LD_ADDR_VAR 0 56
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53819: LD_ADDR_VAR 0 57
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54049: LD_ADDR_VAR 0 58
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54279: LD_ADDR_VAR 0 59
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54367: LD_ADDR_VAR 0 60
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54455: LD_ADDR_VAR 0 61
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54543: LD_ADDR_VAR 0 62
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54631: LD_ADDR_VAR 0 63
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54719: LD_ADDR_VAR 0 64
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// end ; 1 :
54807: GO 60704
54809: LD_INT 1
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54817
54815: GO 57440
54817: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54818: LD_ADDR_VAR 0 11
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54862: LD_ADDR_VAR 0 12
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54903: LD_ADDR_VAR 0 13
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54943: LD_ADDR_VAR 0 14
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54984: LD_ADDR_VAR 0 15
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55028: LD_ADDR_VAR 0 16
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55074: LD_ADDR_VAR 0 17
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55118: LD_ADDR_VAR 0 18
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55159: LD_ADDR_VAR 0 19
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55199: LD_ADDR_VAR 0 20
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55240: LD_ADDR_VAR 0 21
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55284: LD_ADDR_VAR 0 22
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: LD_INT 3
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 3
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55330: LD_ADDR_VAR 0 23
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 4
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: LIST
55373: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55374: LD_ADDR_VAR 0 24
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55415: LD_ADDR_VAR 0 25
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: LD_INT 4
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55455: LD_ADDR_VAR 0 26
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 4
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55496: LD_ADDR_VAR 0 27
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 4
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55540: LD_ADDR_VAR 0 28
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55586: LD_ADDR_VAR 0 29
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 4
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 5
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 5
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 4
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 6
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 6
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 5
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55741: LD_ADDR_VAR 0 30
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 4
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 4
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 5
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 5
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 5
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 6
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 6
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55884: LD_ADDR_VAR 0 31
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 4
55931: PUSH
55932: LD_INT 4
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 4
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 5
55951: PUSH
55952: LD_INT 4
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 5
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 6
55981: PUSH
55982: LD_INT 5
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 6
55991: PUSH
55992: LD_INT 6
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 5
56001: PUSH
56002: LD_INT 6
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56023: LD_ADDR_VAR 0 32
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 4
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 5
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 4
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 6
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 6
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 5
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56166: LD_ADDR_VAR 0 33
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 4
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 5
56252: NEG
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 6
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 6
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56321: LD_ADDR_VAR 0 34
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 4
56376: NEG
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 4
56388: NEG
56389: PUSH
56390: LD_INT 4
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: LD_INT 5
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 5
56412: NEG
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 5
56424: NEG
56425: PUSH
56426: LD_INT 5
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 5
56436: NEG
56437: PUSH
56438: LD_INT 6
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 6
56448: NEG
56449: PUSH
56450: LD_INT 5
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 6
56460: NEG
56461: PUSH
56462: LD_INT 6
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56484: LD_ADDR_VAR 0 41
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56528: LD_ADDR_VAR 0 42
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56569: LD_ADDR_VAR 0 43
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56609: LD_ADDR_VAR 0 44
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56650: LD_ADDR_VAR 0 45
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56694: LD_ADDR_VAR 0 46
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56740: LD_ADDR_VAR 0 47
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56773: LD_ADDR_VAR 0 48
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56804: LD_ADDR_VAR 0 49
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56833: LD_ADDR_VAR 0 50
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56862: LD_ADDR_VAR 0 51
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56893: LD_ADDR_VAR 0 52
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56926: LD_ADDR_VAR 0 53
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56970: LD_ADDR_VAR 0 54
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57011: LD_ADDR_VAR 0 55
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57051: LD_ADDR_VAR 0 56
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57092: LD_ADDR_VAR 0 57
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: LIST
57135: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57136: LD_ADDR_VAR 0 58
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57182: LD_ADDR_VAR 0 59
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57226: LD_ADDR_VAR 0 60
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57267: LD_ADDR_VAR 0 61
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57307: LD_ADDR_VAR 0 62
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: LIST
57347: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57348: LD_ADDR_VAR 0 63
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57392: LD_ADDR_VAR 0 64
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: ST_TO_ADDR
// end ; 2 :
57438: GO 60704
57440: LD_INT 2
57442: DOUBLE
57443: EQUAL
57444: IFTRUE 57448
57446: GO 60703
57448: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57449: LD_ADDR_VAR 0 29
57453: PUSH
57454: LD_INT 4
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 4
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 5
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 5
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 4
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 5
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 3
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 4
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 4
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 5
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 5
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 4
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 5
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: NEG
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: NEG
57847: PUSH
57848: LD_INT 5
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: LD_INT 4
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: NEG
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 5
57894: NEG
57895: PUSH
57896: LD_INT 4
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 5
57906: NEG
57907: PUSH
57908: LD_INT 5
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 5
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 5
57930: NEG
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57987: LD_ADDR_VAR 0 30
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: LD_INT 4
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 5
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: LD_INT 5
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 4
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 5
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: LD_INT 5
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 4
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: NEG
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 5
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 5
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: LD_INT 4
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 4
58339: NEG
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 4
58351: NEG
58352: PUSH
58353: LD_INT 4
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 4
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 4
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 4
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 5
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 5
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 5
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58534: LD_ADDR_VAR 0 31
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 4
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 4
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 5
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 5
58796: NEG
58797: PUSH
58798: LD_INT 4
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 5
58808: NEG
58809: PUSH
58810: LD_INT 5
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: LD_INT 5
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 5
58832: NEG
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 4
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 5
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 4
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 5
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59084: LD_ADDR_VAR 0 32
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 4
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 5
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 5
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 4
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 3
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 4
59253: NEG
59254: PUSH
59255: LD_INT 3
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: NEG
59266: PUSH
59267: LD_INT 4
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 4
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 5
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 4
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 4
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: LD_INT 4
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: LD_INT 4
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 4
59536: PUSH
59537: LD_INT 5
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 5
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: PUSH
59577: LD_INT 5
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59631: LD_ADDR_VAR 0 33
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 4
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 4
59686: NEG
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 5
59698: NEG
59699: PUSH
59700: LD_INT 4
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 5
59710: NEG
59711: PUSH
59712: LD_INT 5
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 5
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 5
59734: NEG
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 4
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: NEG
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 5
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 4
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 5
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 5
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60169: LD_ADDR_VAR 0 34
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 4
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 5
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 5
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 3
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 4
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 4
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 4
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 4
60371: PUSH
60372: LD_INT 4
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 5
60391: PUSH
60392: LD_INT 4
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 5
60401: PUSH
60402: LD_INT 5
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: LD_INT 5
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 5
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 5
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 4
60554: NEG
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 4
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 5
60610: NEG
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 5
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 5
60633: NEG
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: ST_TO_ADDR
// end ; end ;
60701: GO 60704
60703: POP
// case btype of b_depot , b_warehouse :
60704: LD_VAR 0 1
60708: PUSH
60709: LD_INT 0
60711: DOUBLE
60712: EQUAL
60713: IFTRUE 60723
60715: LD_INT 1
60717: DOUBLE
60718: EQUAL
60719: IFTRUE 60723
60721: GO 60924
60723: POP
// case nation of nation_american :
60724: LD_VAR 0 5
60728: PUSH
60729: LD_INT 1
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60737
60735: GO 60793
60737: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60738: LD_ADDR_VAR 0 9
60742: PUSH
60743: LD_VAR 0 11
60747: PUSH
60748: LD_VAR 0 12
60752: PUSH
60753: LD_VAR 0 13
60757: PUSH
60758: LD_VAR 0 14
60762: PUSH
60763: LD_VAR 0 15
60767: PUSH
60768: LD_VAR 0 16
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: LD_VAR 0 4
60785: PUSH
60786: LD_INT 1
60788: PLUS
60789: ARRAY
60790: ST_TO_ADDR
60791: GO 60922
60793: LD_INT 2
60795: DOUBLE
60796: EQUAL
60797: IFTRUE 60801
60799: GO 60857
60801: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60802: LD_ADDR_VAR 0 9
60806: PUSH
60807: LD_VAR 0 17
60811: PUSH
60812: LD_VAR 0 18
60816: PUSH
60817: LD_VAR 0 19
60821: PUSH
60822: LD_VAR 0 20
60826: PUSH
60827: LD_VAR 0 21
60831: PUSH
60832: LD_VAR 0 22
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: PUSH
60845: LD_VAR 0 4
60849: PUSH
60850: LD_INT 1
60852: PLUS
60853: ARRAY
60854: ST_TO_ADDR
60855: GO 60922
60857: LD_INT 3
60859: DOUBLE
60860: EQUAL
60861: IFTRUE 60865
60863: GO 60921
60865: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60866: LD_ADDR_VAR 0 9
60870: PUSH
60871: LD_VAR 0 23
60875: PUSH
60876: LD_VAR 0 24
60880: PUSH
60881: LD_VAR 0 25
60885: PUSH
60886: LD_VAR 0 26
60890: PUSH
60891: LD_VAR 0 27
60895: PUSH
60896: LD_VAR 0 28
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: PUSH
60909: LD_VAR 0 4
60913: PUSH
60914: LD_INT 1
60916: PLUS
60917: ARRAY
60918: ST_TO_ADDR
60919: GO 60922
60921: POP
60922: GO 61477
60924: LD_INT 2
60926: DOUBLE
60927: EQUAL
60928: IFTRUE 60938
60930: LD_INT 3
60932: DOUBLE
60933: EQUAL
60934: IFTRUE 60938
60936: GO 60994
60938: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60939: LD_ADDR_VAR 0 9
60943: PUSH
60944: LD_VAR 0 29
60948: PUSH
60949: LD_VAR 0 30
60953: PUSH
60954: LD_VAR 0 31
60958: PUSH
60959: LD_VAR 0 32
60963: PUSH
60964: LD_VAR 0 33
60968: PUSH
60969: LD_VAR 0 34
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: PUSH
60982: LD_VAR 0 4
60986: PUSH
60987: LD_INT 1
60989: PLUS
60990: ARRAY
60991: ST_TO_ADDR
60992: GO 61477
60994: LD_INT 16
60996: DOUBLE
60997: EQUAL
60998: IFTRUE 61056
61000: LD_INT 17
61002: DOUBLE
61003: EQUAL
61004: IFTRUE 61056
61006: LD_INT 18
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61056
61012: LD_INT 19
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61056
61018: LD_INT 22
61020: DOUBLE
61021: EQUAL
61022: IFTRUE 61056
61024: LD_INT 20
61026: DOUBLE
61027: EQUAL
61028: IFTRUE 61056
61030: LD_INT 21
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61056
61036: LD_INT 23
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61056
61042: LD_INT 24
61044: DOUBLE
61045: EQUAL
61046: IFTRUE 61056
61048: LD_INT 25
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61056
61054: GO 61112
61056: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61057: LD_ADDR_VAR 0 9
61061: PUSH
61062: LD_VAR 0 35
61066: PUSH
61067: LD_VAR 0 36
61071: PUSH
61072: LD_VAR 0 37
61076: PUSH
61077: LD_VAR 0 38
61081: PUSH
61082: LD_VAR 0 39
61086: PUSH
61087: LD_VAR 0 40
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: LD_VAR 0 4
61104: PUSH
61105: LD_INT 1
61107: PLUS
61108: ARRAY
61109: ST_TO_ADDR
61110: GO 61477
61112: LD_INT 6
61114: DOUBLE
61115: EQUAL
61116: IFTRUE 61168
61118: LD_INT 7
61120: DOUBLE
61121: EQUAL
61122: IFTRUE 61168
61124: LD_INT 8
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61168
61130: LD_INT 13
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61168
61136: LD_INT 12
61138: DOUBLE
61139: EQUAL
61140: IFTRUE 61168
61142: LD_INT 15
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61168
61148: LD_INT 11
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61168
61154: LD_INT 14
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61168
61160: LD_INT 10
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61224
61168: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61169: LD_ADDR_VAR 0 9
61173: PUSH
61174: LD_VAR 0 41
61178: PUSH
61179: LD_VAR 0 42
61183: PUSH
61184: LD_VAR 0 43
61188: PUSH
61189: LD_VAR 0 44
61193: PUSH
61194: LD_VAR 0 45
61198: PUSH
61199: LD_VAR 0 46
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: PUSH
61212: LD_VAR 0 4
61216: PUSH
61217: LD_INT 1
61219: PLUS
61220: ARRAY
61221: ST_TO_ADDR
61222: GO 61477
61224: LD_INT 36
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61232
61230: GO 61288
61232: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61233: LD_ADDR_VAR 0 9
61237: PUSH
61238: LD_VAR 0 47
61242: PUSH
61243: LD_VAR 0 48
61247: PUSH
61248: LD_VAR 0 49
61252: PUSH
61253: LD_VAR 0 50
61257: PUSH
61258: LD_VAR 0 51
61262: PUSH
61263: LD_VAR 0 52
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: PUSH
61276: LD_VAR 0 4
61280: PUSH
61281: LD_INT 1
61283: PLUS
61284: ARRAY
61285: ST_TO_ADDR
61286: GO 61477
61288: LD_INT 4
61290: DOUBLE
61291: EQUAL
61292: IFTRUE 61314
61294: LD_INT 5
61296: DOUBLE
61297: EQUAL
61298: IFTRUE 61314
61300: LD_INT 34
61302: DOUBLE
61303: EQUAL
61304: IFTRUE 61314
61306: LD_INT 37
61308: DOUBLE
61309: EQUAL
61310: IFTRUE 61314
61312: GO 61370
61314: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61315: LD_ADDR_VAR 0 9
61319: PUSH
61320: LD_VAR 0 53
61324: PUSH
61325: LD_VAR 0 54
61329: PUSH
61330: LD_VAR 0 55
61334: PUSH
61335: LD_VAR 0 56
61339: PUSH
61340: LD_VAR 0 57
61344: PUSH
61345: LD_VAR 0 58
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: PUSH
61358: LD_VAR 0 4
61362: PUSH
61363: LD_INT 1
61365: PLUS
61366: ARRAY
61367: ST_TO_ADDR
61368: GO 61477
61370: LD_INT 31
61372: DOUBLE
61373: EQUAL
61374: IFTRUE 61420
61376: LD_INT 32
61378: DOUBLE
61379: EQUAL
61380: IFTRUE 61420
61382: LD_INT 33
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61420
61388: LD_INT 27
61390: DOUBLE
61391: EQUAL
61392: IFTRUE 61420
61394: LD_INT 26
61396: DOUBLE
61397: EQUAL
61398: IFTRUE 61420
61400: LD_INT 28
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61420
61406: LD_INT 29
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61420
61412: LD_INT 30
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61420
61418: GO 61476
61420: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 59
61430: PUSH
61431: LD_VAR 0 60
61435: PUSH
61436: LD_VAR 0 61
61440: PUSH
61441: LD_VAR 0 62
61445: PUSH
61446: LD_VAR 0 63
61450: PUSH
61451: LD_VAR 0 64
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: LD_VAR 0 4
61468: PUSH
61469: LD_INT 1
61471: PLUS
61472: ARRAY
61473: ST_TO_ADDR
61474: GO 61477
61476: POP
// temp_list2 = [ ] ;
61477: LD_ADDR_VAR 0 10
61481: PUSH
61482: EMPTY
61483: ST_TO_ADDR
// for i in temp_list do
61484: LD_ADDR_VAR 0 8
61488: PUSH
61489: LD_VAR 0 9
61493: PUSH
61494: FOR_IN
61495: IFFALSE 61547
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61497: LD_ADDR_VAR 0 10
61501: PUSH
61502: LD_VAR 0 10
61506: PUSH
61507: LD_VAR 0 8
61511: PUSH
61512: LD_INT 1
61514: ARRAY
61515: PUSH
61516: LD_VAR 0 2
61520: PLUS
61521: PUSH
61522: LD_VAR 0 8
61526: PUSH
61527: LD_INT 2
61529: ARRAY
61530: PUSH
61531: LD_VAR 0 3
61535: PLUS
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: ADD
61544: ST_TO_ADDR
61545: GO 61494
61547: POP
61548: POP
// result = temp_list2 ;
61549: LD_ADDR_VAR 0 7
61553: PUSH
61554: LD_VAR 0 10
61558: ST_TO_ADDR
// end ;
61559: LD_VAR 0 7
61563: RET
// export function EnemyInRange ( unit , dist ) ; begin
61564: LD_INT 0
61566: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61567: LD_ADDR_VAR 0 3
61571: PUSH
61572: LD_VAR 0 1
61576: PPUSH
61577: CALL_OW 255
61581: PPUSH
61582: LD_VAR 0 1
61586: PPUSH
61587: CALL_OW 250
61591: PPUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: CALL_OW 251
61601: PPUSH
61602: LD_VAR 0 2
61606: PPUSH
61607: CALL 34960 0 4
61611: PUSH
61612: LD_INT 4
61614: ARRAY
61615: ST_TO_ADDR
// end ;
61616: LD_VAR 0 3
61620: RET
// export function PlayerSeeMe ( unit ) ; begin
61621: LD_INT 0
61623: PPUSH
// result := See ( your_side , unit ) ;
61624: LD_ADDR_VAR 0 2
61628: PUSH
61629: LD_OWVAR 2
61633: PPUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: CALL_OW 292
61643: ST_TO_ADDR
// end ;
61644: LD_VAR 0 2
61648: RET
// export function ReverseDir ( unit ) ; begin
61649: LD_INT 0
61651: PPUSH
// if not unit then
61652: LD_VAR 0 1
61656: NOT
61657: IFFALSE 61661
// exit ;
61659: GO 61684
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61661: LD_ADDR_VAR 0 2
61665: PUSH
61666: LD_VAR 0 1
61670: PPUSH
61671: CALL_OW 254
61675: PUSH
61676: LD_INT 3
61678: PLUS
61679: PUSH
61680: LD_INT 6
61682: MOD
61683: ST_TO_ADDR
// end ;
61684: LD_VAR 0 2
61688: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61689: LD_INT 0
61691: PPUSH
61692: PPUSH
61693: PPUSH
61694: PPUSH
61695: PPUSH
// if not hexes then
61696: LD_VAR 0 2
61700: NOT
61701: IFFALSE 61705
// exit ;
61703: GO 61853
// dist := 9999 ;
61705: LD_ADDR_VAR 0 5
61709: PUSH
61710: LD_INT 9999
61712: ST_TO_ADDR
// for i = 1 to hexes do
61713: LD_ADDR_VAR 0 4
61717: PUSH
61718: DOUBLE
61719: LD_INT 1
61721: DEC
61722: ST_TO_ADDR
61723: LD_VAR 0 2
61727: PUSH
61728: FOR_TO
61729: IFFALSE 61841
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61731: LD_VAR 0 1
61735: PPUSH
61736: LD_VAR 0 2
61740: PUSH
61741: LD_VAR 0 4
61745: ARRAY
61746: PUSH
61747: LD_INT 1
61749: ARRAY
61750: PPUSH
61751: LD_VAR 0 2
61755: PUSH
61756: LD_VAR 0 4
61760: ARRAY
61761: PUSH
61762: LD_INT 2
61764: ARRAY
61765: PPUSH
61766: CALL_OW 297
61770: PUSH
61771: LD_VAR 0 5
61775: LESS
61776: IFFALSE 61839
// begin hex := hexes [ i ] ;
61778: LD_ADDR_VAR 0 7
61782: PUSH
61783: LD_VAR 0 2
61787: PUSH
61788: LD_VAR 0 4
61792: ARRAY
61793: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61794: LD_ADDR_VAR 0 5
61798: PUSH
61799: LD_VAR 0 1
61803: PPUSH
61804: LD_VAR 0 2
61808: PUSH
61809: LD_VAR 0 4
61813: ARRAY
61814: PUSH
61815: LD_INT 1
61817: ARRAY
61818: PPUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_VAR 0 4
61828: ARRAY
61829: PUSH
61830: LD_INT 2
61832: ARRAY
61833: PPUSH
61834: CALL_OW 297
61838: ST_TO_ADDR
// end ; end ;
61839: GO 61728
61841: POP
61842: POP
// result := hex ;
61843: LD_ADDR_VAR 0 3
61847: PUSH
61848: LD_VAR 0 7
61852: ST_TO_ADDR
// end ;
61853: LD_VAR 0 3
61857: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61858: LD_INT 0
61860: PPUSH
61861: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61862: LD_VAR 0 1
61866: NOT
61867: PUSH
61868: LD_VAR 0 1
61872: PUSH
61873: LD_INT 21
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 23
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PPUSH
61897: CALL_OW 69
61901: IN
61902: NOT
61903: OR
61904: IFFALSE 61908
// exit ;
61906: GO 61955
// for i = 1 to 3 do
61908: LD_ADDR_VAR 0 3
61912: PUSH
61913: DOUBLE
61914: LD_INT 1
61916: DEC
61917: ST_TO_ADDR
61918: LD_INT 3
61920: PUSH
61921: FOR_TO
61922: IFFALSE 61953
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61924: LD_VAR 0 1
61928: PPUSH
61929: CALL_OW 250
61933: PPUSH
61934: LD_VAR 0 1
61938: PPUSH
61939: CALL_OW 251
61943: PPUSH
61944: LD_INT 1
61946: PPUSH
61947: CALL_OW 453
61951: GO 61921
61953: POP
61954: POP
// end ;
61955: LD_VAR 0 2
61959: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61960: LD_INT 0
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
61967: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61968: LD_VAR 0 1
61972: NOT
61973: PUSH
61974: LD_VAR 0 2
61978: NOT
61979: OR
61980: PUSH
61981: LD_VAR 0 1
61985: PPUSH
61986: CALL_OW 314
61990: OR
61991: IFFALSE 61995
// exit ;
61993: GO 62436
// x := GetX ( enemy_unit ) ;
61995: LD_ADDR_VAR 0 7
61999: PUSH
62000: LD_VAR 0 2
62004: PPUSH
62005: CALL_OW 250
62009: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62010: LD_ADDR_VAR 0 8
62014: PUSH
62015: LD_VAR 0 2
62019: PPUSH
62020: CALL_OW 251
62024: ST_TO_ADDR
// if not x or not y then
62025: LD_VAR 0 7
62029: NOT
62030: PUSH
62031: LD_VAR 0 8
62035: NOT
62036: OR
62037: IFFALSE 62041
// exit ;
62039: GO 62436
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62041: LD_ADDR_VAR 0 6
62045: PUSH
62046: LD_VAR 0 7
62050: PPUSH
62051: LD_INT 0
62053: PPUSH
62054: LD_INT 4
62056: PPUSH
62057: CALL_OW 272
62061: PUSH
62062: LD_VAR 0 8
62066: PPUSH
62067: LD_INT 0
62069: PPUSH
62070: LD_INT 4
62072: PPUSH
62073: CALL_OW 273
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 7
62086: PPUSH
62087: LD_INT 1
62089: PPUSH
62090: LD_INT 4
62092: PPUSH
62093: CALL_OW 272
62097: PUSH
62098: LD_VAR 0 8
62102: PPUSH
62103: LD_INT 1
62105: PPUSH
62106: LD_INT 4
62108: PPUSH
62109: CALL_OW 273
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 7
62122: PPUSH
62123: LD_INT 2
62125: PPUSH
62126: LD_INT 4
62128: PPUSH
62129: CALL_OW 272
62133: PUSH
62134: LD_VAR 0 8
62138: PPUSH
62139: LD_INT 2
62141: PPUSH
62142: LD_INT 4
62144: PPUSH
62145: CALL_OW 273
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_VAR 0 7
62158: PPUSH
62159: LD_INT 3
62161: PPUSH
62162: LD_INT 4
62164: PPUSH
62165: CALL_OW 272
62169: PUSH
62170: LD_VAR 0 8
62174: PPUSH
62175: LD_INT 3
62177: PPUSH
62178: LD_INT 4
62180: PPUSH
62181: CALL_OW 273
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_VAR 0 7
62194: PPUSH
62195: LD_INT 4
62197: PPUSH
62198: LD_INT 4
62200: PPUSH
62201: CALL_OW 272
62205: PUSH
62206: LD_VAR 0 8
62210: PPUSH
62211: LD_INT 4
62213: PPUSH
62214: LD_INT 4
62216: PPUSH
62217: CALL_OW 273
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_VAR 0 7
62230: PPUSH
62231: LD_INT 5
62233: PPUSH
62234: LD_INT 4
62236: PPUSH
62237: CALL_OW 272
62241: PUSH
62242: LD_VAR 0 8
62246: PPUSH
62247: LD_INT 5
62249: PPUSH
62250: LD_INT 4
62252: PPUSH
62253: CALL_OW 273
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// for i = tmp downto 1 do
62270: LD_ADDR_VAR 0 4
62274: PUSH
62275: DOUBLE
62276: LD_VAR 0 6
62280: INC
62281: ST_TO_ADDR
62282: LD_INT 1
62284: PUSH
62285: FOR_DOWNTO
62286: IFFALSE 62387
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62288: LD_VAR 0 6
62292: PUSH
62293: LD_VAR 0 4
62297: ARRAY
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 6
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: PUSH
62314: LD_INT 2
62316: ARRAY
62317: PPUSH
62318: CALL_OW 488
62322: NOT
62323: PUSH
62324: LD_VAR 0 6
62328: PUSH
62329: LD_VAR 0 4
62333: ARRAY
62334: PUSH
62335: LD_INT 1
62337: ARRAY
62338: PPUSH
62339: LD_VAR 0 6
62343: PUSH
62344: LD_VAR 0 4
62348: ARRAY
62349: PUSH
62350: LD_INT 2
62352: ARRAY
62353: PPUSH
62354: CALL_OW 428
62358: PUSH
62359: LD_INT 0
62361: NONEQUAL
62362: OR
62363: IFFALSE 62385
// tmp := Delete ( tmp , i ) ;
62365: LD_ADDR_VAR 0 6
62369: PUSH
62370: LD_VAR 0 6
62374: PPUSH
62375: LD_VAR 0 4
62379: PPUSH
62380: CALL_OW 3
62384: ST_TO_ADDR
62385: GO 62285
62387: POP
62388: POP
// j := GetClosestHex ( unit , tmp ) ;
62389: LD_ADDR_VAR 0 5
62393: PUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_VAR 0 6
62403: PPUSH
62404: CALL 61689 0 2
62408: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_VAR 0 5
62418: PUSH
62419: LD_INT 1
62421: ARRAY
62422: PPUSH
62423: LD_VAR 0 5
62427: PUSH
62428: LD_INT 2
62430: ARRAY
62431: PPUSH
62432: CALL_OW 111
// end ;
62436: LD_VAR 0 3
62440: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62441: LD_INT 0
62443: PPUSH
62444: PPUSH
62445: PPUSH
// uc_side = 0 ;
62446: LD_ADDR_OWVAR 20
62450: PUSH
62451: LD_INT 0
62453: ST_TO_ADDR
// uc_nation = 0 ;
62454: LD_ADDR_OWVAR 21
62458: PUSH
62459: LD_INT 0
62461: ST_TO_ADDR
// InitHc_All ( ) ;
62462: CALL_OW 584
// InitVc ;
62466: CALL_OW 20
// if mastodonts then
62470: LD_VAR 0 6
62474: IFFALSE 62541
// for i = 1 to mastodonts do
62476: LD_ADDR_VAR 0 11
62480: PUSH
62481: DOUBLE
62482: LD_INT 1
62484: DEC
62485: ST_TO_ADDR
62486: LD_VAR 0 6
62490: PUSH
62491: FOR_TO
62492: IFFALSE 62539
// begin vc_chassis := 31 ;
62494: LD_ADDR_OWVAR 37
62498: PUSH
62499: LD_INT 31
62501: ST_TO_ADDR
// vc_control := control_rider ;
62502: LD_ADDR_OWVAR 38
62506: PUSH
62507: LD_INT 4
62509: ST_TO_ADDR
// animal := CreateVehicle ;
62510: LD_ADDR_VAR 0 12
62514: PUSH
62515: CALL_OW 45
62519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62520: LD_VAR 0 12
62524: PPUSH
62525: LD_VAR 0 8
62529: PPUSH
62530: LD_INT 0
62532: PPUSH
62533: CALL 64729 0 3
// end ;
62537: GO 62491
62539: POP
62540: POP
// if horses then
62541: LD_VAR 0 5
62545: IFFALSE 62612
// for i = 1 to horses do
62547: LD_ADDR_VAR 0 11
62551: PUSH
62552: DOUBLE
62553: LD_INT 1
62555: DEC
62556: ST_TO_ADDR
62557: LD_VAR 0 5
62561: PUSH
62562: FOR_TO
62563: IFFALSE 62610
// begin hc_class := 21 ;
62565: LD_ADDR_OWVAR 28
62569: PUSH
62570: LD_INT 21
62572: ST_TO_ADDR
// hc_gallery :=  ;
62573: LD_ADDR_OWVAR 33
62577: PUSH
62578: LD_STRING 
62580: ST_TO_ADDR
// animal := CreateHuman ;
62581: LD_ADDR_VAR 0 12
62585: PUSH
62586: CALL_OW 44
62590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62591: LD_VAR 0 12
62595: PPUSH
62596: LD_VAR 0 8
62600: PPUSH
62601: LD_INT 0
62603: PPUSH
62604: CALL 64729 0 3
// end ;
62608: GO 62562
62610: POP
62611: POP
// if birds then
62612: LD_VAR 0 1
62616: IFFALSE 62683
// for i = 1 to birds do
62618: LD_ADDR_VAR 0 11
62622: PUSH
62623: DOUBLE
62624: LD_INT 1
62626: DEC
62627: ST_TO_ADDR
62628: LD_VAR 0 1
62632: PUSH
62633: FOR_TO
62634: IFFALSE 62681
// begin hc_class = 18 ;
62636: LD_ADDR_OWVAR 28
62640: PUSH
62641: LD_INT 18
62643: ST_TO_ADDR
// hc_gallery =  ;
62644: LD_ADDR_OWVAR 33
62648: PUSH
62649: LD_STRING 
62651: ST_TO_ADDR
// animal := CreateHuman ;
62652: LD_ADDR_VAR 0 12
62656: PUSH
62657: CALL_OW 44
62661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62662: LD_VAR 0 12
62666: PPUSH
62667: LD_VAR 0 8
62671: PPUSH
62672: LD_INT 0
62674: PPUSH
62675: CALL 64729 0 3
// end ;
62679: GO 62633
62681: POP
62682: POP
// if tigers then
62683: LD_VAR 0 2
62687: IFFALSE 62771
// for i = 1 to tigers do
62689: LD_ADDR_VAR 0 11
62693: PUSH
62694: DOUBLE
62695: LD_INT 1
62697: DEC
62698: ST_TO_ADDR
62699: LD_VAR 0 2
62703: PUSH
62704: FOR_TO
62705: IFFALSE 62769
// begin hc_class = class_tiger ;
62707: LD_ADDR_OWVAR 28
62711: PUSH
62712: LD_INT 14
62714: ST_TO_ADDR
// hc_gallery =  ;
62715: LD_ADDR_OWVAR 33
62719: PUSH
62720: LD_STRING 
62722: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62723: LD_ADDR_OWVAR 35
62727: PUSH
62728: LD_INT 7
62730: NEG
62731: PPUSH
62732: LD_INT 7
62734: PPUSH
62735: CALL_OW 12
62739: ST_TO_ADDR
// animal := CreateHuman ;
62740: LD_ADDR_VAR 0 12
62744: PUSH
62745: CALL_OW 44
62749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62750: LD_VAR 0 12
62754: PPUSH
62755: LD_VAR 0 8
62759: PPUSH
62760: LD_INT 0
62762: PPUSH
62763: CALL 64729 0 3
// end ;
62767: GO 62704
62769: POP
62770: POP
// if apemans then
62771: LD_VAR 0 3
62775: IFFALSE 62898
// for i = 1 to apemans do
62777: LD_ADDR_VAR 0 11
62781: PUSH
62782: DOUBLE
62783: LD_INT 1
62785: DEC
62786: ST_TO_ADDR
62787: LD_VAR 0 3
62791: PUSH
62792: FOR_TO
62793: IFFALSE 62896
// begin hc_class = class_apeman ;
62795: LD_ADDR_OWVAR 28
62799: PUSH
62800: LD_INT 12
62802: ST_TO_ADDR
// hc_gallery =  ;
62803: LD_ADDR_OWVAR 33
62807: PUSH
62808: LD_STRING 
62810: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62811: LD_ADDR_OWVAR 35
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PPUSH
62820: LD_INT 2
62822: PPUSH
62823: CALL_OW 12
62827: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62828: LD_ADDR_OWVAR 31
62832: PUSH
62833: LD_INT 1
62835: PPUSH
62836: LD_INT 3
62838: PPUSH
62839: CALL_OW 12
62843: PUSH
62844: LD_INT 1
62846: PPUSH
62847: LD_INT 3
62849: PPUSH
62850: CALL_OW 12
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: ST_TO_ADDR
// animal := CreateHuman ;
62867: LD_ADDR_VAR 0 12
62871: PUSH
62872: CALL_OW 44
62876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62877: LD_VAR 0 12
62881: PPUSH
62882: LD_VAR 0 8
62886: PPUSH
62887: LD_INT 0
62889: PPUSH
62890: CALL 64729 0 3
// end ;
62894: GO 62792
62896: POP
62897: POP
// if enchidnas then
62898: LD_VAR 0 4
62902: IFFALSE 62969
// for i = 1 to enchidnas do
62904: LD_ADDR_VAR 0 11
62908: PUSH
62909: DOUBLE
62910: LD_INT 1
62912: DEC
62913: ST_TO_ADDR
62914: LD_VAR 0 4
62918: PUSH
62919: FOR_TO
62920: IFFALSE 62967
// begin hc_class = 13 ;
62922: LD_ADDR_OWVAR 28
62926: PUSH
62927: LD_INT 13
62929: ST_TO_ADDR
// hc_gallery =  ;
62930: LD_ADDR_OWVAR 33
62934: PUSH
62935: LD_STRING 
62937: ST_TO_ADDR
// animal := CreateHuman ;
62938: LD_ADDR_VAR 0 12
62942: PUSH
62943: CALL_OW 44
62947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62948: LD_VAR 0 12
62952: PPUSH
62953: LD_VAR 0 8
62957: PPUSH
62958: LD_INT 0
62960: PPUSH
62961: CALL 64729 0 3
// end ;
62965: GO 62919
62967: POP
62968: POP
// if fishes then
62969: LD_VAR 0 7
62973: IFFALSE 63040
// for i = 1 to fishes do
62975: LD_ADDR_VAR 0 11
62979: PUSH
62980: DOUBLE
62981: LD_INT 1
62983: DEC
62984: ST_TO_ADDR
62985: LD_VAR 0 7
62989: PUSH
62990: FOR_TO
62991: IFFALSE 63038
// begin hc_class = 20 ;
62993: LD_ADDR_OWVAR 28
62997: PUSH
62998: LD_INT 20
63000: ST_TO_ADDR
// hc_gallery =  ;
63001: LD_ADDR_OWVAR 33
63005: PUSH
63006: LD_STRING 
63008: ST_TO_ADDR
// animal := CreateHuman ;
63009: LD_ADDR_VAR 0 12
63013: PUSH
63014: CALL_OW 44
63018: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63019: LD_VAR 0 12
63023: PPUSH
63024: LD_VAR 0 9
63028: PPUSH
63029: LD_INT 0
63031: PPUSH
63032: CALL 64729 0 3
// end ;
63036: GO 62990
63038: POP
63039: POP
// end ;
63040: LD_VAR 0 10
63044: RET
// export function WantHeal ( sci , unit ) ; begin
63045: LD_INT 0
63047: PPUSH
// if GetTaskList ( sci ) > 0 then
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 437
63057: PUSH
63058: LD_INT 0
63060: GREATER
63061: IFFALSE 63131
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 437
63072: PUSH
63073: LD_INT 1
63075: ARRAY
63076: PUSH
63077: LD_INT 1
63079: ARRAY
63080: PUSH
63081: LD_STRING l
63083: EQUAL
63084: PUSH
63085: LD_VAR 0 1
63089: PPUSH
63090: CALL_OW 437
63094: PUSH
63095: LD_INT 1
63097: ARRAY
63098: PUSH
63099: LD_INT 4
63101: ARRAY
63102: PUSH
63103: LD_VAR 0 2
63107: EQUAL
63108: AND
63109: IFFALSE 63121
// result := true else
63111: LD_ADDR_VAR 0 3
63115: PUSH
63116: LD_INT 1
63118: ST_TO_ADDR
63119: GO 63129
// result := false ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_INT 0
63128: ST_TO_ADDR
// end else
63129: GO 63139
// result := false ;
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: LD_INT 0
63138: ST_TO_ADDR
// end ;
63139: LD_VAR 0 3
63143: RET
// export function HealTarget ( sci ) ; begin
63144: LD_INT 0
63146: PPUSH
// if not sci then
63147: LD_VAR 0 1
63151: NOT
63152: IFFALSE 63156
// exit ;
63154: GO 63221
// result := 0 ;
63156: LD_ADDR_VAR 0 2
63160: PUSH
63161: LD_INT 0
63163: ST_TO_ADDR
// if GetTaskList ( sci ) then
63164: LD_VAR 0 1
63168: PPUSH
63169: CALL_OW 437
63173: IFFALSE 63221
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63175: LD_VAR 0 1
63179: PPUSH
63180: CALL_OW 437
63184: PUSH
63185: LD_INT 1
63187: ARRAY
63188: PUSH
63189: LD_INT 1
63191: ARRAY
63192: PUSH
63193: LD_STRING l
63195: EQUAL
63196: IFFALSE 63221
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63198: LD_ADDR_VAR 0 2
63202: PUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 437
63212: PUSH
63213: LD_INT 1
63215: ARRAY
63216: PUSH
63217: LD_INT 4
63219: ARRAY
63220: ST_TO_ADDR
// end ;
63221: LD_VAR 0 2
63225: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63226: LD_INT 0
63228: PPUSH
63229: PPUSH
63230: PPUSH
63231: PPUSH
// if not base_units then
63232: LD_VAR 0 1
63236: NOT
63237: IFFALSE 63241
// exit ;
63239: GO 63328
// result := false ;
63241: LD_ADDR_VAR 0 2
63245: PUSH
63246: LD_INT 0
63248: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63249: LD_ADDR_VAR 0 5
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: LD_INT 21
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PPUSH
63269: CALL_OW 72
63273: ST_TO_ADDR
// if not tmp then
63274: LD_VAR 0 5
63278: NOT
63279: IFFALSE 63283
// exit ;
63281: GO 63328
// for i in tmp do
63283: LD_ADDR_VAR 0 3
63287: PUSH
63288: LD_VAR 0 5
63292: PUSH
63293: FOR_IN
63294: IFFALSE 63326
// begin result := EnemyInRange ( i , 22 ) ;
63296: LD_ADDR_VAR 0 2
63300: PUSH
63301: LD_VAR 0 3
63305: PPUSH
63306: LD_INT 22
63308: PPUSH
63309: CALL 61564 0 2
63313: ST_TO_ADDR
// if result then
63314: LD_VAR 0 2
63318: IFFALSE 63324
// exit ;
63320: POP
63321: POP
63322: GO 63328
// end ;
63324: GO 63293
63326: POP
63327: POP
// end ;
63328: LD_VAR 0 2
63332: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63333: LD_INT 0
63335: PPUSH
63336: PPUSH
// if not units then
63337: LD_VAR 0 1
63341: NOT
63342: IFFALSE 63346
// exit ;
63344: GO 63416
// result := [ ] ;
63346: LD_ADDR_VAR 0 3
63350: PUSH
63351: EMPTY
63352: ST_TO_ADDR
// for i in units do
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_VAR 0 1
63362: PUSH
63363: FOR_IN
63364: IFFALSE 63414
// if GetTag ( i ) = tag then
63366: LD_VAR 0 4
63370: PPUSH
63371: CALL_OW 110
63375: PUSH
63376: LD_VAR 0 2
63380: EQUAL
63381: IFFALSE 63412
// result := Replace ( result , result + 1 , i ) ;
63383: LD_ADDR_VAR 0 3
63387: PUSH
63388: LD_VAR 0 3
63392: PPUSH
63393: LD_VAR 0 3
63397: PUSH
63398: LD_INT 1
63400: PLUS
63401: PPUSH
63402: LD_VAR 0 4
63406: PPUSH
63407: CALL_OW 1
63411: ST_TO_ADDR
63412: GO 63363
63414: POP
63415: POP
// end ;
63416: LD_VAR 0 3
63420: RET
// export function IsDriver ( un ) ; begin
63421: LD_INT 0
63423: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_VAR 0 1
63433: PUSH
63434: LD_INT 55
63436: PUSH
63437: EMPTY
63438: LIST
63439: PPUSH
63440: CALL_OW 69
63444: IN
63445: ST_TO_ADDR
// end ;
63446: LD_VAR 0 2
63450: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63451: LD_INT 0
63453: PPUSH
63454: PPUSH
// list := [ ] ;
63455: LD_ADDR_VAR 0 5
63459: PUSH
63460: EMPTY
63461: ST_TO_ADDR
// case d of 0 :
63462: LD_VAR 0 3
63466: PUSH
63467: LD_INT 0
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63475
63473: GO 63608
63475: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63476: LD_ADDR_VAR 0 5
63480: PUSH
63481: LD_VAR 0 1
63485: PUSH
63486: LD_INT 4
63488: MINUS
63489: PUSH
63490: LD_VAR 0 2
63494: PUSH
63495: LD_INT 4
63497: MINUS
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: PUSH
63507: LD_VAR 0 1
63511: PUSH
63512: LD_INT 3
63514: MINUS
63515: PUSH
63516: LD_VAR 0 2
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: LD_VAR 0 1
63533: PUSH
63534: LD_INT 4
63536: PLUS
63537: PUSH
63538: LD_VAR 0 2
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: PUSH
63551: LD_VAR 0 1
63555: PUSH
63556: LD_INT 3
63558: PLUS
63559: PUSH
63560: LD_VAR 0 2
63564: PUSH
63565: LD_INT 3
63567: PLUS
63568: PUSH
63569: LD_INT 5
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: PUSH
63577: LD_VAR 0 1
63581: PUSH
63582: LD_VAR 0 2
63586: PUSH
63587: LD_INT 4
63589: PLUS
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: ST_TO_ADDR
// end ; 1 :
63606: GO 64306
63608: LD_INT 1
63610: DOUBLE
63611: EQUAL
63612: IFTRUE 63616
63614: GO 63749
63616: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63617: LD_ADDR_VAR 0 5
63621: PUSH
63622: LD_VAR 0 1
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: LD_INT 4
63634: MINUS
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: PUSH
63644: LD_VAR 0 1
63648: PUSH
63649: LD_INT 3
63651: MINUS
63652: PUSH
63653: LD_VAR 0 2
63657: PUSH
63658: LD_INT 3
63660: MINUS
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: PUSH
63670: LD_VAR 0 1
63674: PUSH
63675: LD_INT 4
63677: MINUS
63678: PUSH
63679: LD_VAR 0 2
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_INT 3
63704: PLUS
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: PUSH
63714: LD_VAR 0 1
63718: PUSH
63719: LD_INT 4
63721: PLUS
63722: PUSH
63723: LD_VAR 0 2
63727: PUSH
63728: LD_INT 4
63730: PLUS
63731: PUSH
63732: LD_INT 5
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// end ; 2 :
63747: GO 64306
63749: LD_INT 2
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63757
63755: GO 63886
63757: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63758: LD_ADDR_VAR 0 5
63762: PUSH
63763: LD_VAR 0 1
63767: PUSH
63768: LD_VAR 0 2
63772: PUSH
63773: LD_INT 3
63775: MINUS
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: LIST
63784: PUSH
63785: LD_VAR 0 1
63789: PUSH
63790: LD_INT 4
63792: PLUS
63793: PUSH
63794: LD_VAR 0 2
63798: PUSH
63799: LD_INT 4
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: PUSH
63807: LD_VAR 0 1
63811: PUSH
63812: LD_VAR 0 2
63816: PUSH
63817: LD_INT 4
63819: PLUS
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: PUSH
63829: LD_VAR 0 1
63833: PUSH
63834: LD_INT 3
63836: MINUS
63837: PUSH
63838: LD_VAR 0 2
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 4
63858: MINUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 4
63867: MINUS
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: ST_TO_ADDR
// end ; 3 :
63884: GO 64306
63886: LD_INT 3
63888: DOUBLE
63889: EQUAL
63890: IFTRUE 63894
63892: GO 64027
63894: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63895: LD_ADDR_VAR 0 5
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_INT 3
63907: PLUS
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 4
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: PUSH
63922: LD_VAR 0 1
63926: PUSH
63927: LD_INT 4
63929: PLUS
63930: PUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_INT 4
63938: PLUS
63939: PUSH
63940: LD_INT 5
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: LD_VAR 0 1
63952: PUSH
63953: LD_INT 4
63955: MINUS
63956: PUSH
63957: LD_VAR 0 2
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_VAR 0 2
63979: PUSH
63980: LD_INT 4
63982: MINUS
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: PUSH
63992: LD_VAR 0 1
63996: PUSH
63997: LD_INT 3
63999: MINUS
64000: PUSH
64001: LD_VAR 0 2
64005: PUSH
64006: LD_INT 3
64008: MINUS
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// end ; 4 :
64025: GO 64306
64027: LD_INT 4
64029: DOUBLE
64030: EQUAL
64031: IFTRUE 64035
64033: GO 64168
64035: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64036: LD_ADDR_VAR 0 5
64040: PUSH
64041: LD_VAR 0 1
64045: PUSH
64046: LD_VAR 0 2
64050: PUSH
64051: LD_INT 4
64053: PLUS
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: PUSH
64063: LD_VAR 0 1
64067: PUSH
64068: LD_INT 3
64070: PLUS
64071: PUSH
64072: LD_VAR 0 2
64076: PUSH
64077: LD_INT 3
64079: PLUS
64080: PUSH
64081: LD_INT 5
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: LIST
64088: PUSH
64089: LD_VAR 0 1
64093: PUSH
64094: LD_INT 4
64096: PLUS
64097: PUSH
64098: LD_VAR 0 2
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 1
64115: PUSH
64116: LD_VAR 0 2
64120: PUSH
64121: LD_INT 3
64123: MINUS
64124: PUSH
64125: LD_INT 3
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: LD_VAR 0 1
64137: PUSH
64138: LD_INT 4
64140: MINUS
64141: PUSH
64142: LD_VAR 0 2
64146: PUSH
64147: LD_INT 4
64149: MINUS
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: ST_TO_ADDR
// end ; 5 :
64166: GO 64306
64168: LD_INT 5
64170: DOUBLE
64171: EQUAL
64172: IFTRUE 64176
64174: GO 64305
64176: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64177: LD_ADDR_VAR 0 5
64181: PUSH
64182: LD_VAR 0 1
64186: PUSH
64187: LD_INT 4
64189: MINUS
64190: PUSH
64191: LD_VAR 0 2
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: PUSH
64204: LD_VAR 0 1
64208: PUSH
64209: LD_VAR 0 2
64213: PUSH
64214: LD_INT 4
64216: MINUS
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: PUSH
64226: LD_VAR 0 1
64230: PUSH
64231: LD_INT 4
64233: PLUS
64234: PUSH
64235: LD_VAR 0 2
64239: PUSH
64240: LD_INT 4
64242: PLUS
64243: PUSH
64244: LD_INT 5
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: PUSH
64252: LD_VAR 0 1
64256: PUSH
64257: LD_INT 3
64259: PLUS
64260: PUSH
64261: LD_VAR 0 2
64265: PUSH
64266: LD_INT 4
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: PUSH
64274: LD_VAR 0 1
64278: PUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_INT 3
64286: PLUS
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: ST_TO_ADDR
// end ; end ;
64303: GO 64306
64305: POP
// result := list ;
64306: LD_ADDR_VAR 0 4
64310: PUSH
64311: LD_VAR 0 5
64315: ST_TO_ADDR
// end ;
64316: LD_VAR 0 4
64320: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64321: LD_INT 0
64323: PPUSH
64324: PPUSH
64325: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64326: LD_VAR 0 1
64330: NOT
64331: PUSH
64332: LD_VAR 0 2
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: LD_INT 4
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: IN
64355: NOT
64356: OR
64357: IFFALSE 64361
// exit ;
64359: GO 64453
// tmp := [ ] ;
64361: LD_ADDR_VAR 0 5
64365: PUSH
64366: EMPTY
64367: ST_TO_ADDR
// for i in units do
64368: LD_ADDR_VAR 0 4
64372: PUSH
64373: LD_VAR 0 1
64377: PUSH
64378: FOR_IN
64379: IFFALSE 64422
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64381: LD_ADDR_VAR 0 5
64385: PUSH
64386: LD_VAR 0 5
64390: PPUSH
64391: LD_VAR 0 5
64395: PUSH
64396: LD_INT 1
64398: PLUS
64399: PPUSH
64400: LD_VAR 0 4
64404: PPUSH
64405: LD_VAR 0 2
64409: PPUSH
64410: CALL_OW 259
64414: PPUSH
64415: CALL_OW 2
64419: ST_TO_ADDR
64420: GO 64378
64422: POP
64423: POP
// if not tmp then
64424: LD_VAR 0 5
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64453
// result := SortListByListDesc ( units , tmp ) ;
64433: LD_ADDR_VAR 0 3
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_VAR 0 5
64447: PPUSH
64448: CALL_OW 77
64452: ST_TO_ADDR
// end ;
64453: LD_VAR 0 3
64457: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64458: LD_INT 0
64460: PPUSH
64461: PPUSH
64462: PPUSH
// result := false ;
64463: LD_ADDR_VAR 0 3
64467: PUSH
64468: LD_INT 0
64470: ST_TO_ADDR
// x := GetX ( building ) ;
64471: LD_ADDR_VAR 0 4
64475: PUSH
64476: LD_VAR 0 2
64480: PPUSH
64481: CALL_OW 250
64485: ST_TO_ADDR
// y := GetY ( building ) ;
64486: LD_ADDR_VAR 0 5
64490: PUSH
64491: LD_VAR 0 2
64495: PPUSH
64496: CALL_OW 251
64500: ST_TO_ADDR
// if not building or not x or not y then
64501: LD_VAR 0 2
64505: NOT
64506: PUSH
64507: LD_VAR 0 4
64511: NOT
64512: OR
64513: PUSH
64514: LD_VAR 0 5
64518: NOT
64519: OR
64520: IFFALSE 64524
// exit ;
64522: GO 64616
// if GetTaskList ( unit ) then
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 437
64533: IFFALSE 64616
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64535: LD_STRING e
64537: PUSH
64538: LD_VAR 0 1
64542: PPUSH
64543: CALL_OW 437
64547: PUSH
64548: LD_INT 1
64550: ARRAY
64551: PUSH
64552: LD_INT 1
64554: ARRAY
64555: EQUAL
64556: PUSH
64557: LD_VAR 0 4
64561: PUSH
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 437
64571: PUSH
64572: LD_INT 1
64574: ARRAY
64575: PUSH
64576: LD_INT 2
64578: ARRAY
64579: EQUAL
64580: AND
64581: PUSH
64582: LD_VAR 0 5
64586: PUSH
64587: LD_VAR 0 1
64591: PPUSH
64592: CALL_OW 437
64596: PUSH
64597: LD_INT 1
64599: ARRAY
64600: PUSH
64601: LD_INT 3
64603: ARRAY
64604: EQUAL
64605: AND
64606: IFFALSE 64616
// result := true end ;
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_INT 1
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 3
64620: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64621: LD_INT 0
64623: PPUSH
// result := false ;
64624: LD_ADDR_VAR 0 4
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// if GetTaskList ( unit ) then
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 437
64641: IFFALSE 64724
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64643: LD_STRING M
64645: PUSH
64646: LD_VAR 0 1
64650: PPUSH
64651: CALL_OW 437
64655: PUSH
64656: LD_INT 1
64658: ARRAY
64659: PUSH
64660: LD_INT 1
64662: ARRAY
64663: EQUAL
64664: PUSH
64665: LD_VAR 0 2
64669: PUSH
64670: LD_VAR 0 1
64674: PPUSH
64675: CALL_OW 437
64679: PUSH
64680: LD_INT 1
64682: ARRAY
64683: PUSH
64684: LD_INT 2
64686: ARRAY
64687: EQUAL
64688: AND
64689: PUSH
64690: LD_VAR 0 3
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 437
64704: PUSH
64705: LD_INT 1
64707: ARRAY
64708: PUSH
64709: LD_INT 3
64711: ARRAY
64712: EQUAL
64713: AND
64714: IFFALSE 64724
// result := true ;
64716: LD_ADDR_VAR 0 4
64720: PUSH
64721: LD_INT 1
64723: ST_TO_ADDR
// end ; end ;
64724: LD_VAR 0 4
64728: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64729: LD_INT 0
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
// if not unit or not area then
64735: LD_VAR 0 1
64739: NOT
64740: PUSH
64741: LD_VAR 0 2
64745: NOT
64746: OR
64747: IFFALSE 64751
// exit ;
64749: GO 64915
// tmp := AreaToList ( area , i ) ;
64751: LD_ADDR_VAR 0 6
64755: PUSH
64756: LD_VAR 0 2
64760: PPUSH
64761: LD_VAR 0 5
64765: PPUSH
64766: CALL_OW 517
64770: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64771: LD_ADDR_VAR 0 5
64775: PUSH
64776: DOUBLE
64777: LD_INT 1
64779: DEC
64780: ST_TO_ADDR
64781: LD_VAR 0 6
64785: PUSH
64786: LD_INT 1
64788: ARRAY
64789: PUSH
64790: FOR_TO
64791: IFFALSE 64913
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64793: LD_ADDR_VAR 0 7
64797: PUSH
64798: LD_VAR 0 6
64802: PUSH
64803: LD_INT 1
64805: ARRAY
64806: PUSH
64807: LD_VAR 0 5
64811: ARRAY
64812: PUSH
64813: LD_VAR 0 6
64817: PUSH
64818: LD_INT 2
64820: ARRAY
64821: PUSH
64822: LD_VAR 0 5
64826: ARRAY
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64832: LD_VAR 0 7
64836: PUSH
64837: LD_INT 1
64839: ARRAY
64840: PPUSH
64841: LD_VAR 0 7
64845: PUSH
64846: LD_INT 2
64848: ARRAY
64849: PPUSH
64850: CALL_OW 428
64854: PUSH
64855: LD_INT 0
64857: EQUAL
64858: IFFALSE 64911
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64860: LD_VAR 0 1
64864: PPUSH
64865: LD_VAR 0 7
64869: PUSH
64870: LD_INT 1
64872: ARRAY
64873: PPUSH
64874: LD_VAR 0 7
64878: PUSH
64879: LD_INT 2
64881: ARRAY
64882: PPUSH
64883: LD_VAR 0 3
64887: PPUSH
64888: CALL_OW 48
// result := IsPlaced ( unit ) ;
64892: LD_ADDR_VAR 0 4
64896: PUSH
64897: LD_VAR 0 1
64901: PPUSH
64902: CALL_OW 305
64906: ST_TO_ADDR
// exit ;
64907: POP
64908: POP
64909: GO 64915
// end ; end ;
64911: GO 64790
64913: POP
64914: POP
// end ;
64915: LD_VAR 0 4
64919: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64920: LD_INT 0
64922: PPUSH
64923: PPUSH
64924: PPUSH
// if not side or side > 8 then
64925: LD_VAR 0 1
64929: NOT
64930: PUSH
64931: LD_VAR 0 1
64935: PUSH
64936: LD_INT 8
64938: GREATER
64939: OR
64940: IFFALSE 64944
// exit ;
64942: GO 65131
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64944: LD_ADDR_VAR 0 4
64948: PUSH
64949: LD_INT 22
64951: PUSH
64952: LD_VAR 0 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 21
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PPUSH
64975: CALL_OW 69
64979: ST_TO_ADDR
// if not tmp then
64980: LD_VAR 0 4
64984: NOT
64985: IFFALSE 64989
// exit ;
64987: GO 65131
// enable_addtolog := true ;
64989: LD_ADDR_OWVAR 81
64993: PUSH
64994: LD_INT 1
64996: ST_TO_ADDR
// AddToLog ( [ ) ;
64997: LD_STRING [
64999: PPUSH
65000: CALL_OW 561
// for i in tmp do
65004: LD_ADDR_VAR 0 3
65008: PUSH
65009: LD_VAR 0 4
65013: PUSH
65014: FOR_IN
65015: IFFALSE 65122
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65017: LD_STRING [
65019: PUSH
65020: LD_VAR 0 3
65024: PPUSH
65025: CALL_OW 266
65029: STR
65030: PUSH
65031: LD_STRING , 
65033: STR
65034: PUSH
65035: LD_VAR 0 3
65039: PPUSH
65040: CALL_OW 250
65044: STR
65045: PUSH
65046: LD_STRING , 
65048: STR
65049: PUSH
65050: LD_VAR 0 3
65054: PPUSH
65055: CALL_OW 251
65059: STR
65060: PUSH
65061: LD_STRING , 
65063: STR
65064: PUSH
65065: LD_VAR 0 3
65069: PPUSH
65070: CALL_OW 254
65074: STR
65075: PUSH
65076: LD_STRING , 
65078: STR
65079: PUSH
65080: LD_VAR 0 3
65084: PPUSH
65085: LD_INT 1
65087: PPUSH
65088: CALL_OW 268
65092: STR
65093: PUSH
65094: LD_STRING , 
65096: STR
65097: PUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: LD_INT 2
65105: PPUSH
65106: CALL_OW 268
65110: STR
65111: PUSH
65112: LD_STRING ],
65114: STR
65115: PPUSH
65116: CALL_OW 561
// end ;
65120: GO 65014
65122: POP
65123: POP
// AddToLog ( ]; ) ;
65124: LD_STRING ];
65126: PPUSH
65127: CALL_OW 561
// end ;
65131: LD_VAR 0 2
65135: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65136: LD_INT 0
65138: PPUSH
65139: PPUSH
65140: PPUSH
65141: PPUSH
65142: PPUSH
// if not area or not rate or not max then
65143: LD_VAR 0 1
65147: NOT
65148: PUSH
65149: LD_VAR 0 2
65153: NOT
65154: OR
65155: PUSH
65156: LD_VAR 0 4
65160: NOT
65161: OR
65162: IFFALSE 65166
// exit ;
65164: GO 65358
// while 1 do
65166: LD_INT 1
65168: IFFALSE 65358
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65170: LD_ADDR_VAR 0 9
65174: PUSH
65175: LD_VAR 0 1
65179: PPUSH
65180: LD_INT 1
65182: PPUSH
65183: CALL_OW 287
65187: PUSH
65188: LD_INT 10
65190: MUL
65191: ST_TO_ADDR
// r := rate / 10 ;
65192: LD_ADDR_VAR 0 7
65196: PUSH
65197: LD_VAR 0 2
65201: PUSH
65202: LD_INT 10
65204: DIVREAL
65205: ST_TO_ADDR
// time := 1 1$00 ;
65206: LD_ADDR_VAR 0 8
65210: PUSH
65211: LD_INT 2100
65213: ST_TO_ADDR
// if amount < min then
65214: LD_VAR 0 9
65218: PUSH
65219: LD_VAR 0 3
65223: LESS
65224: IFFALSE 65242
// r := r * 2 else
65226: LD_ADDR_VAR 0 7
65230: PUSH
65231: LD_VAR 0 7
65235: PUSH
65236: LD_INT 2
65238: MUL
65239: ST_TO_ADDR
65240: GO 65268
// if amount > max then
65242: LD_VAR 0 9
65246: PUSH
65247: LD_VAR 0 4
65251: GREATER
65252: IFFALSE 65268
// r := r / 2 ;
65254: LD_ADDR_VAR 0 7
65258: PUSH
65259: LD_VAR 0 7
65263: PUSH
65264: LD_INT 2
65266: DIVREAL
65267: ST_TO_ADDR
// time := time / r ;
65268: LD_ADDR_VAR 0 8
65272: PUSH
65273: LD_VAR 0 8
65277: PUSH
65278: LD_VAR 0 7
65282: DIVREAL
65283: ST_TO_ADDR
// if time < 0 then
65284: LD_VAR 0 8
65288: PUSH
65289: LD_INT 0
65291: LESS
65292: IFFALSE 65309
// time := time * - 1 ;
65294: LD_ADDR_VAR 0 8
65298: PUSH
65299: LD_VAR 0 8
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: MUL
65308: ST_TO_ADDR
// wait ( time ) ;
65309: LD_VAR 0 8
65313: PPUSH
65314: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65318: LD_INT 35
65320: PPUSH
65321: LD_INT 875
65323: PPUSH
65324: CALL_OW 12
65328: PPUSH
65329: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65333: LD_INT 1
65335: PPUSH
65336: LD_INT 5
65338: PPUSH
65339: CALL_OW 12
65343: PPUSH
65344: LD_VAR 0 1
65348: PPUSH
65349: LD_INT 1
65351: PPUSH
65352: CALL_OW 55
// end ;
65356: GO 65166
// end ;
65358: LD_VAR 0 5
65362: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65363: LD_INT 0
65365: PPUSH
65366: PPUSH
65367: PPUSH
65368: PPUSH
65369: PPUSH
65370: PPUSH
65371: PPUSH
65372: PPUSH
// if not turrets or not factories then
65373: LD_VAR 0 1
65377: NOT
65378: PUSH
65379: LD_VAR 0 2
65383: NOT
65384: OR
65385: IFFALSE 65389
// exit ;
65387: GO 65696
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65389: LD_ADDR_VAR 0 10
65393: PUSH
65394: LD_INT 5
65396: PUSH
65397: LD_INT 6
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: LD_INT 4
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: LD_INT 5
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 24
65431: PUSH
65432: LD_INT 25
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 23
65441: PUSH
65442: LD_INT 27
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 42
65455: PUSH
65456: LD_INT 43
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 44
65465: PUSH
65466: LD_INT 46
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 45
65475: PUSH
65476: LD_INT 47
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: ST_TO_ADDR
// result := [ ] ;
65493: LD_ADDR_VAR 0 3
65497: PUSH
65498: EMPTY
65499: ST_TO_ADDR
// for i in turrets do
65500: LD_ADDR_VAR 0 4
65504: PUSH
65505: LD_VAR 0 1
65509: PUSH
65510: FOR_IN
65511: IFFALSE 65694
// begin nat := GetNation ( i ) ;
65513: LD_ADDR_VAR 0 7
65517: PUSH
65518: LD_VAR 0 4
65522: PPUSH
65523: CALL_OW 248
65527: ST_TO_ADDR
// weapon := 0 ;
65528: LD_ADDR_VAR 0 8
65532: PUSH
65533: LD_INT 0
65535: ST_TO_ADDR
// if not nat then
65536: LD_VAR 0 7
65540: NOT
65541: IFFALSE 65545
// continue ;
65543: GO 65510
// for j in list [ nat ] do
65545: LD_ADDR_VAR 0 5
65549: PUSH
65550: LD_VAR 0 10
65554: PUSH
65555: LD_VAR 0 7
65559: ARRAY
65560: PUSH
65561: FOR_IN
65562: IFFALSE 65603
// if GetBWeapon ( i ) = j [ 1 ] then
65564: LD_VAR 0 4
65568: PPUSH
65569: CALL_OW 269
65573: PUSH
65574: LD_VAR 0 5
65578: PUSH
65579: LD_INT 1
65581: ARRAY
65582: EQUAL
65583: IFFALSE 65601
// begin weapon := j [ 2 ] ;
65585: LD_ADDR_VAR 0 8
65589: PUSH
65590: LD_VAR 0 5
65594: PUSH
65595: LD_INT 2
65597: ARRAY
65598: ST_TO_ADDR
// break ;
65599: GO 65603
// end ;
65601: GO 65561
65603: POP
65604: POP
// if not weapon then
65605: LD_VAR 0 8
65609: NOT
65610: IFFALSE 65614
// continue ;
65612: GO 65510
// for k in factories do
65614: LD_ADDR_VAR 0 6
65618: PUSH
65619: LD_VAR 0 2
65623: PUSH
65624: FOR_IN
65625: IFFALSE 65690
// begin weapons := AvailableWeaponList ( k ) ;
65627: LD_ADDR_VAR 0 9
65631: PUSH
65632: LD_VAR 0 6
65636: PPUSH
65637: CALL_OW 478
65641: ST_TO_ADDR
// if not weapons then
65642: LD_VAR 0 9
65646: NOT
65647: IFFALSE 65651
// continue ;
65649: GO 65624
// if weapon in weapons then
65651: LD_VAR 0 8
65655: PUSH
65656: LD_VAR 0 9
65660: IN
65661: IFFALSE 65688
// begin result := [ i , weapon ] ;
65663: LD_ADDR_VAR 0 3
65667: PUSH
65668: LD_VAR 0 4
65672: PUSH
65673: LD_VAR 0 8
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: ST_TO_ADDR
// exit ;
65682: POP
65683: POP
65684: POP
65685: POP
65686: GO 65696
// end ; end ;
65688: GO 65624
65690: POP
65691: POP
// end ;
65692: GO 65510
65694: POP
65695: POP
// end ;
65696: LD_VAR 0 3
65700: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65701: LD_INT 0
65703: PPUSH
// if not side or side > 8 then
65704: LD_VAR 0 3
65708: NOT
65709: PUSH
65710: LD_VAR 0 3
65714: PUSH
65715: LD_INT 8
65717: GREATER
65718: OR
65719: IFFALSE 65723
// exit ;
65721: GO 65782
// if not range then
65723: LD_VAR 0 4
65727: NOT
65728: IFFALSE 65739
// range := - 12 ;
65730: LD_ADDR_VAR 0 4
65734: PUSH
65735: LD_INT 12
65737: NEG
65738: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65739: LD_VAR 0 1
65743: PPUSH
65744: LD_VAR 0 2
65748: PPUSH
65749: LD_VAR 0 3
65753: PPUSH
65754: LD_VAR 0 4
65758: PPUSH
65759: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65763: LD_VAR 0 1
65767: PPUSH
65768: LD_VAR 0 2
65772: PPUSH
65773: LD_VAR 0 3
65777: PPUSH
65778: CALL_OW 331
// end ;
65782: LD_VAR 0 5
65786: RET
// export function Video ( mode ) ; begin
65787: LD_INT 0
65789: PPUSH
// ingame_video = mode ;
65790: LD_ADDR_OWVAR 52
65794: PUSH
65795: LD_VAR 0 1
65799: ST_TO_ADDR
// interface_hidden = mode ;
65800: LD_ADDR_OWVAR 54
65804: PUSH
65805: LD_VAR 0 1
65809: ST_TO_ADDR
// end ;
65810: LD_VAR 0 2
65814: RET
// export function Join ( array , element ) ; begin
65815: LD_INT 0
65817: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65818: LD_ADDR_VAR 0 3
65822: PUSH
65823: LD_VAR 0 1
65827: PPUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 1
65835: PLUS
65836: PPUSH
65837: LD_VAR 0 2
65841: PPUSH
65842: CALL_OW 1
65846: ST_TO_ADDR
// end ;
65847: LD_VAR 0 3
65851: RET
// export function JoinUnion ( array , element ) ; begin
65852: LD_INT 0
65854: PPUSH
// result := array union element ;
65855: LD_ADDR_VAR 0 3
65859: PUSH
65860: LD_VAR 0 1
65864: PUSH
65865: LD_VAR 0 2
65869: UNION
65870: ST_TO_ADDR
// end ;
65871: LD_VAR 0 3
65875: RET
// export function GetBehemoths ( side ) ; begin
65876: LD_INT 0
65878: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65879: LD_ADDR_VAR 0 2
65883: PUSH
65884: LD_INT 22
65886: PUSH
65887: LD_VAR 0 1
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 31
65898: PUSH
65899: LD_INT 25
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PPUSH
65910: CALL_OW 69
65914: ST_TO_ADDR
// end ;
65915: LD_VAR 0 2
65919: RET
// export function Shuffle ( array ) ; var i , index ; begin
65920: LD_INT 0
65922: PPUSH
65923: PPUSH
65924: PPUSH
// result := [ ] ;
65925: LD_ADDR_VAR 0 2
65929: PUSH
65930: EMPTY
65931: ST_TO_ADDR
// if not array then
65932: LD_VAR 0 1
65936: NOT
65937: IFFALSE 65941
// exit ;
65939: GO 66040
// Randomize ;
65941: CALL_OW 10
// for i = array downto 1 do
65945: LD_ADDR_VAR 0 3
65949: PUSH
65950: DOUBLE
65951: LD_VAR 0 1
65955: INC
65956: ST_TO_ADDR
65957: LD_INT 1
65959: PUSH
65960: FOR_DOWNTO
65961: IFFALSE 66038
// begin index := rand ( 1 , array ) ;
65963: LD_ADDR_VAR 0 4
65967: PUSH
65968: LD_INT 1
65970: PPUSH
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 12
65980: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65981: LD_ADDR_VAR 0 2
65985: PUSH
65986: LD_VAR 0 2
65990: PPUSH
65991: LD_VAR 0 2
65995: PUSH
65996: LD_INT 1
65998: PLUS
65999: PPUSH
66000: LD_VAR 0 1
66004: PUSH
66005: LD_VAR 0 4
66009: ARRAY
66010: PPUSH
66011: CALL_OW 2
66015: ST_TO_ADDR
// array := Delete ( array , index ) ;
66016: LD_ADDR_VAR 0 1
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 4
66030: PPUSH
66031: CALL_OW 3
66035: ST_TO_ADDR
// end ;
66036: GO 65960
66038: POP
66039: POP
// end ;
66040: LD_VAR 0 2
66044: RET
// export function GetBaseMaterials ( base ) ; begin
66045: LD_INT 0
66047: PPUSH
// result := [ 0 , 0 , 0 ] ;
66048: LD_ADDR_VAR 0 2
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: LIST
66066: ST_TO_ADDR
// if not base then
66067: LD_VAR 0 1
66071: NOT
66072: IFFALSE 66076
// exit ;
66074: GO 66125
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66076: LD_ADDR_VAR 0 2
66080: PUSH
66081: LD_VAR 0 1
66085: PPUSH
66086: LD_INT 1
66088: PPUSH
66089: CALL_OW 275
66093: PUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: LD_INT 2
66101: PPUSH
66102: CALL_OW 275
66106: PUSH
66107: LD_VAR 0 1
66111: PPUSH
66112: LD_INT 3
66114: PPUSH
66115: CALL_OW 275
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: ST_TO_ADDR
// end ;
66125: LD_VAR 0 2
66129: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66130: LD_INT 0
66132: PPUSH
66133: PPUSH
// result := array ;
66134: LD_ADDR_VAR 0 3
66138: PUSH
66139: LD_VAR 0 1
66143: ST_TO_ADDR
// if size > 0 then
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 0
66151: GREATER
66152: IFFALSE 66198
// for i := array downto size do
66154: LD_ADDR_VAR 0 4
66158: PUSH
66159: DOUBLE
66160: LD_VAR 0 1
66164: INC
66165: ST_TO_ADDR
66166: LD_VAR 0 2
66170: PUSH
66171: FOR_DOWNTO
66172: IFFALSE 66196
// result := Delete ( result , result ) ;
66174: LD_ADDR_VAR 0 3
66178: PUSH
66179: LD_VAR 0 3
66183: PPUSH
66184: LD_VAR 0 3
66188: PPUSH
66189: CALL_OW 3
66193: ST_TO_ADDR
66194: GO 66171
66196: POP
66197: POP
// end ;
66198: LD_VAR 0 3
66202: RET
// export function ComExit ( unit ) ; var tmp ; begin
66203: LD_INT 0
66205: PPUSH
66206: PPUSH
// if not IsInUnit ( unit ) then
66207: LD_VAR 0 1
66211: PPUSH
66212: CALL_OW 310
66216: NOT
66217: IFFALSE 66221
// exit ;
66219: GO 66281
// tmp := IsInUnit ( unit ) ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 310
66235: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66236: LD_VAR 0 3
66240: PPUSH
66241: CALL_OW 247
66245: PUSH
66246: LD_INT 2
66248: EQUAL
66249: IFFALSE 66262
// ComExitVehicle ( unit ) else
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 121
66260: GO 66271
// ComExitBuilding ( unit ) ;
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 122
// result := tmp ;
66271: LD_ADDR_VAR 0 2
66275: PUSH
66276: LD_VAR 0 3
66280: ST_TO_ADDR
// end ;
66281: LD_VAR 0 2
66285: RET
// export function ComExitAll ( units ) ; var i ; begin
66286: LD_INT 0
66288: PPUSH
66289: PPUSH
// if not units then
66290: LD_VAR 0 1
66294: NOT
66295: IFFALSE 66299
// exit ;
66297: GO 66325
// for i in units do
66299: LD_ADDR_VAR 0 3
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: FOR_IN
66310: IFFALSE 66323
// ComExit ( i ) ;
66312: LD_VAR 0 3
66316: PPUSH
66317: CALL 66203 0 1
66321: GO 66309
66323: POP
66324: POP
// end ;
66325: LD_VAR 0 2
66329: RET
// export function ResetHc ; begin
66330: LD_INT 0
66332: PPUSH
// InitHc ;
66333: CALL_OW 19
// hc_importance := 0 ;
66337: LD_ADDR_OWVAR 32
66341: PUSH
66342: LD_INT 0
66344: ST_TO_ADDR
// end ;
66345: LD_VAR 0 1
66349: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66350: LD_INT 0
66352: PPUSH
66353: PPUSH
66354: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66355: LD_ADDR_VAR 0 6
66359: PUSH
66360: LD_VAR 0 1
66364: PUSH
66365: LD_VAR 0 3
66369: PLUS
66370: PUSH
66371: LD_INT 2
66373: DIV
66374: ST_TO_ADDR
// if _x < 0 then
66375: LD_VAR 0 6
66379: PUSH
66380: LD_INT 0
66382: LESS
66383: IFFALSE 66400
// _x := _x * - 1 ;
66385: LD_ADDR_VAR 0 6
66389: PUSH
66390: LD_VAR 0 6
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: MUL
66399: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66400: LD_ADDR_VAR 0 7
66404: PUSH
66405: LD_VAR 0 2
66409: PUSH
66410: LD_VAR 0 4
66414: PLUS
66415: PUSH
66416: LD_INT 2
66418: DIV
66419: ST_TO_ADDR
// if _y < 0 then
66420: LD_VAR 0 7
66424: PUSH
66425: LD_INT 0
66427: LESS
66428: IFFALSE 66445
// _y := _y * - 1 ;
66430: LD_ADDR_VAR 0 7
66434: PUSH
66435: LD_VAR 0 7
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: MUL
66444: ST_TO_ADDR
// result := [ _x , _y ] ;
66445: LD_ADDR_VAR 0 5
66449: PUSH
66450: LD_VAR 0 6
66454: PUSH
66455: LD_VAR 0 7
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// end ;
66464: LD_VAR 0 5
66468: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66469: LD_INT 0
66471: PPUSH
66472: PPUSH
66473: PPUSH
66474: PPUSH
// task := GetTaskList ( unit ) ;
66475: LD_ADDR_VAR 0 7
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL_OW 437
66489: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66490: LD_VAR 0 7
66494: NOT
66495: PUSH
66496: LD_VAR 0 1
66500: PPUSH
66501: LD_VAR 0 2
66505: PPUSH
66506: CALL_OW 308
66510: NOT
66511: AND
66512: IFFALSE 66516
// exit ;
66514: GO 66634
// if IsInArea ( unit , area ) then
66516: LD_VAR 0 1
66520: PPUSH
66521: LD_VAR 0 2
66525: PPUSH
66526: CALL_OW 308
66530: IFFALSE 66548
// begin ComMoveToArea ( unit , goAway ) ;
66532: LD_VAR 0 1
66536: PPUSH
66537: LD_VAR 0 3
66541: PPUSH
66542: CALL_OW 113
// exit ;
66546: GO 66634
// end ; if task [ 1 ] [ 1 ] <> M then
66548: LD_VAR 0 7
66552: PUSH
66553: LD_INT 1
66555: ARRAY
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PUSH
66561: LD_STRING M
66563: NONEQUAL
66564: IFFALSE 66568
// exit ;
66566: GO 66634
// x := task [ 1 ] [ 2 ] ;
66568: LD_ADDR_VAR 0 5
66572: PUSH
66573: LD_VAR 0 7
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PUSH
66582: LD_INT 2
66584: ARRAY
66585: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66586: LD_ADDR_VAR 0 6
66590: PUSH
66591: LD_VAR 0 7
66595: PUSH
66596: LD_INT 1
66598: ARRAY
66599: PUSH
66600: LD_INT 3
66602: ARRAY
66603: ST_TO_ADDR
// if InArea ( x , y , area ) then
66604: LD_VAR 0 5
66608: PPUSH
66609: LD_VAR 0 6
66613: PPUSH
66614: LD_VAR 0 2
66618: PPUSH
66619: CALL_OW 309
66623: IFFALSE 66634
// ComStop ( unit ) ;
66625: LD_VAR 0 1
66629: PPUSH
66630: CALL_OW 141
// end ;
66634: LD_VAR 0 4
66638: RET
// export function Abs ( value ) ; begin
66639: LD_INT 0
66641: PPUSH
// result := value ;
66642: LD_ADDR_VAR 0 2
66646: PUSH
66647: LD_VAR 0 1
66651: ST_TO_ADDR
// if value < 0 then
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 0
66659: LESS
66660: IFFALSE 66677
// result := value * - 1 ;
66662: LD_ADDR_VAR 0 2
66666: PUSH
66667: LD_VAR 0 1
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: MUL
66676: ST_TO_ADDR
// end ;
66677: LD_VAR 0 2
66681: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66682: LD_INT 0
66684: PPUSH
66685: PPUSH
66686: PPUSH
66687: PPUSH
66688: PPUSH
66689: PPUSH
66690: PPUSH
66691: PPUSH
// if not unit or not building then
66692: LD_VAR 0 1
66696: NOT
66697: PUSH
66698: LD_VAR 0 2
66702: NOT
66703: OR
66704: IFFALSE 66708
// exit ;
66706: GO 66934
// x := GetX ( building ) ;
66708: LD_ADDR_VAR 0 4
66712: PUSH
66713: LD_VAR 0 2
66717: PPUSH
66718: CALL_OW 250
66722: ST_TO_ADDR
// y := GetY ( building ) ;
66723: LD_ADDR_VAR 0 6
66727: PUSH
66728: LD_VAR 0 2
66732: PPUSH
66733: CALL_OW 251
66737: ST_TO_ADDR
// d := GetDir ( building ) ;
66738: LD_ADDR_VAR 0 8
66742: PUSH
66743: LD_VAR 0 2
66747: PPUSH
66748: CALL_OW 254
66752: ST_TO_ADDR
// r := 4 ;
66753: LD_ADDR_VAR 0 9
66757: PUSH
66758: LD_INT 4
66760: ST_TO_ADDR
// for i := 1 to 5 do
66761: LD_ADDR_VAR 0 10
66765: PUSH
66766: DOUBLE
66767: LD_INT 1
66769: DEC
66770: ST_TO_ADDR
66771: LD_INT 5
66773: PUSH
66774: FOR_TO
66775: IFFALSE 66932
// begin _x := ShiftX ( x , d , r + i ) ;
66777: LD_ADDR_VAR 0 5
66781: PUSH
66782: LD_VAR 0 4
66786: PPUSH
66787: LD_VAR 0 8
66791: PPUSH
66792: LD_VAR 0 9
66796: PUSH
66797: LD_VAR 0 10
66801: PLUS
66802: PPUSH
66803: CALL_OW 272
66807: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66808: LD_ADDR_VAR 0 7
66812: PUSH
66813: LD_VAR 0 6
66817: PPUSH
66818: LD_VAR 0 8
66822: PPUSH
66823: LD_VAR 0 9
66827: PUSH
66828: LD_VAR 0 10
66832: PLUS
66833: PPUSH
66834: CALL_OW 273
66838: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66839: LD_VAR 0 5
66843: PPUSH
66844: LD_VAR 0 7
66848: PPUSH
66849: CALL_OW 488
66853: PUSH
66854: LD_VAR 0 5
66858: PPUSH
66859: LD_VAR 0 7
66863: PPUSH
66864: CALL_OW 428
66868: PPUSH
66869: CALL_OW 247
66873: PUSH
66874: LD_INT 3
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: IN
66884: NOT
66885: AND
66886: IFFALSE 66930
// begin ComMoveXY ( unit , _x , _y ) ;
66888: LD_VAR 0 1
66892: PPUSH
66893: LD_VAR 0 5
66897: PPUSH
66898: LD_VAR 0 7
66902: PPUSH
66903: CALL_OW 111
// result := [ _x , _y ] ;
66907: LD_ADDR_VAR 0 3
66911: PUSH
66912: LD_VAR 0 5
66916: PUSH
66917: LD_VAR 0 7
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// exit ;
66926: POP
66927: POP
66928: GO 66934
// end ; end ;
66930: GO 66774
66932: POP
66933: POP
// end ;
66934: LD_VAR 0 3
66938: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66939: LD_INT 0
66941: PPUSH
66942: PPUSH
66943: PPUSH
// result := 0 ;
66944: LD_ADDR_VAR 0 3
66948: PUSH
66949: LD_INT 0
66951: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66952: LD_VAR 0 1
66956: PUSH
66957: LD_INT 0
66959: LESS
66960: PUSH
66961: LD_VAR 0 1
66965: PUSH
66966: LD_INT 8
66968: GREATER
66969: OR
66970: PUSH
66971: LD_VAR 0 2
66975: PUSH
66976: LD_INT 0
66978: LESS
66979: OR
66980: PUSH
66981: LD_VAR 0 2
66985: PUSH
66986: LD_INT 8
66988: GREATER
66989: OR
66990: IFFALSE 66994
// exit ;
66992: GO 67069
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66994: LD_ADDR_VAR 0 4
66998: PUSH
66999: LD_INT 22
67001: PUSH
67002: LD_VAR 0 2
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 69
67015: PUSH
67016: FOR_IN
67017: IFFALSE 67067
// begin un := UnitShoot ( i ) ;
67019: LD_ADDR_VAR 0 5
67023: PUSH
67024: LD_VAR 0 4
67028: PPUSH
67029: CALL_OW 504
67033: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67034: LD_VAR 0 5
67038: PPUSH
67039: CALL_OW 255
67043: PUSH
67044: LD_VAR 0 1
67048: EQUAL
67049: IFFALSE 67065
// begin result := un ;
67051: LD_ADDR_VAR 0 3
67055: PUSH
67056: LD_VAR 0 5
67060: ST_TO_ADDR
// exit ;
67061: POP
67062: POP
67063: GO 67069
// end ; end ;
67065: GO 67016
67067: POP
67068: POP
// end ;
67069: LD_VAR 0 3
67073: RET
// export function GetCargoBay ( units ) ; begin
67074: LD_INT 0
67076: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67077: LD_ADDR_VAR 0 2
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: LD_INT 2
67089: PUSH
67090: LD_INT 34
67092: PUSH
67093: LD_INT 12
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 34
67102: PUSH
67103: LD_INT 51
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 34
67112: PUSH
67113: LD_INT 32
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 34
67122: PUSH
67123: LD_EXP 27
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: PPUSH
67139: CALL_OW 72
67143: ST_TO_ADDR
// end ;
67144: LD_VAR 0 2
67148: RET
// export function Negate ( value ) ; begin
67149: LD_INT 0
67151: PPUSH
// result := not value ;
67152: LD_ADDR_VAR 0 2
67156: PUSH
67157: LD_VAR 0 1
67161: NOT
67162: ST_TO_ADDR
// end ;
67163: LD_VAR 0 2
67167: RET
// export function Inc ( value ) ; begin
67168: LD_INT 0
67170: PPUSH
// result := value + 1 ;
67171: LD_ADDR_VAR 0 2
67175: PUSH
67176: LD_VAR 0 1
67180: PUSH
67181: LD_INT 1
67183: PLUS
67184: ST_TO_ADDR
// end ;
67185: LD_VAR 0 2
67189: RET
// export function Dec ( value ) ; begin
67190: LD_INT 0
67192: PPUSH
// result := value - 1 ;
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: LD_VAR 0 1
67202: PUSH
67203: LD_INT 1
67205: MINUS
67206: ST_TO_ADDR
// end ;
67207: LD_VAR 0 2
67211: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67212: LD_INT 0
67214: PPUSH
67215: PPUSH
67216: PPUSH
67217: PPUSH
67218: PPUSH
67219: PPUSH
67220: PPUSH
67221: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67222: LD_VAR 0 1
67226: PPUSH
67227: LD_VAR 0 2
67231: PPUSH
67232: CALL_OW 488
67236: NOT
67237: PUSH
67238: LD_VAR 0 3
67242: PPUSH
67243: LD_VAR 0 4
67247: PPUSH
67248: CALL_OW 488
67252: NOT
67253: OR
67254: IFFALSE 67267
// begin result := - 1 ;
67256: LD_ADDR_VAR 0 5
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: ST_TO_ADDR
// exit ;
67265: GO 67502
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67267: LD_ADDR_VAR 0 12
67271: PUSH
67272: LD_VAR 0 1
67276: PPUSH
67277: LD_VAR 0 2
67281: PPUSH
67282: LD_VAR 0 3
67286: PPUSH
67287: LD_VAR 0 4
67291: PPUSH
67292: CALL 66350 0 4
67296: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67297: LD_ADDR_VAR 0 11
67301: PUSH
67302: LD_VAR 0 1
67306: PPUSH
67307: LD_VAR 0 2
67311: PPUSH
67312: LD_VAR 0 12
67316: PUSH
67317: LD_INT 1
67319: ARRAY
67320: PPUSH
67321: LD_VAR 0 12
67325: PUSH
67326: LD_INT 2
67328: ARRAY
67329: PPUSH
67330: CALL_OW 298
67334: ST_TO_ADDR
// distance := 9999 ;
67335: LD_ADDR_VAR 0 10
67339: PUSH
67340: LD_INT 9999
67342: ST_TO_ADDR
// for i := 0 to 5 do
67343: LD_ADDR_VAR 0 6
67347: PUSH
67348: DOUBLE
67349: LD_INT 0
67351: DEC
67352: ST_TO_ADDR
67353: LD_INT 5
67355: PUSH
67356: FOR_TO
67357: IFFALSE 67500
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67359: LD_ADDR_VAR 0 7
67363: PUSH
67364: LD_VAR 0 1
67368: PPUSH
67369: LD_VAR 0 6
67373: PPUSH
67374: LD_VAR 0 11
67378: PPUSH
67379: CALL_OW 272
67383: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67384: LD_ADDR_VAR 0 8
67388: PUSH
67389: LD_VAR 0 2
67393: PPUSH
67394: LD_VAR 0 6
67398: PPUSH
67399: LD_VAR 0 11
67403: PPUSH
67404: CALL_OW 273
67408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67409: LD_VAR 0 7
67413: PPUSH
67414: LD_VAR 0 8
67418: PPUSH
67419: CALL_OW 488
67423: NOT
67424: IFFALSE 67428
// continue ;
67426: GO 67356
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67428: LD_ADDR_VAR 0 9
67432: PUSH
67433: LD_VAR 0 12
67437: PUSH
67438: LD_INT 1
67440: ARRAY
67441: PPUSH
67442: LD_VAR 0 12
67446: PUSH
67447: LD_INT 2
67449: ARRAY
67450: PPUSH
67451: LD_VAR 0 7
67455: PPUSH
67456: LD_VAR 0 8
67460: PPUSH
67461: CALL_OW 298
67465: ST_TO_ADDR
// if tmp < distance then
67466: LD_VAR 0 9
67470: PUSH
67471: LD_VAR 0 10
67475: LESS
67476: IFFALSE 67498
// begin result := i ;
67478: LD_ADDR_VAR 0 5
67482: PUSH
67483: LD_VAR 0 6
67487: ST_TO_ADDR
// distance := tmp ;
67488: LD_ADDR_VAR 0 10
67492: PUSH
67493: LD_VAR 0 9
67497: ST_TO_ADDR
// end ; end ;
67498: GO 67356
67500: POP
67501: POP
// end ;
67502: LD_VAR 0 5
67506: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
// if not driver or not IsInUnit ( driver ) then
67511: LD_VAR 0 1
67515: NOT
67516: PUSH
67517: LD_VAR 0 1
67521: PPUSH
67522: CALL_OW 310
67526: NOT
67527: OR
67528: IFFALSE 67532
// exit ;
67530: GO 67622
// vehicle := IsInUnit ( driver ) ;
67532: LD_ADDR_VAR 0 3
67536: PUSH
67537: LD_VAR 0 1
67541: PPUSH
67542: CALL_OW 310
67546: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_STRING \
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: PUSH
67582: LD_STRING E
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: LD_VAR 0 3
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PPUSH
67618: CALL_OW 446
// end ;
67622: LD_VAR 0 2
67626: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67627: LD_INT 0
67629: PPUSH
67630: PPUSH
// if not driver or not IsInUnit ( driver ) then
67631: LD_VAR 0 1
67635: NOT
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 310
67646: NOT
67647: OR
67648: IFFALSE 67652
// exit ;
67650: GO 67742
// vehicle := IsInUnit ( driver ) ;
67652: LD_ADDR_VAR 0 3
67656: PUSH
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 310
67666: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67667: LD_VAR 0 1
67671: PPUSH
67672: LD_STRING \
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: PUSH
67702: LD_STRING E
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_VAR 0 3
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PPUSH
67738: CALL_OW 447
// end ;
67742: LD_VAR 0 2
67746: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67747: LD_INT 0
67749: PPUSH
67750: PPUSH
67751: PPUSH
// tmp := [ ] ;
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: EMPTY
67758: ST_TO_ADDR
// for i in units do
67759: LD_ADDR_VAR 0 4
67763: PUSH
67764: LD_VAR 0 1
67768: PUSH
67769: FOR_IN
67770: IFFALSE 67808
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67772: LD_ADDR_VAR 0 5
67776: PUSH
67777: LD_VAR 0 5
67781: PPUSH
67782: LD_VAR 0 5
67786: PUSH
67787: LD_INT 1
67789: PLUS
67790: PPUSH
67791: LD_VAR 0 4
67795: PPUSH
67796: CALL_OW 256
67800: PPUSH
67801: CALL_OW 2
67805: ST_TO_ADDR
67806: GO 67769
67808: POP
67809: POP
// if not tmp then
67810: LD_VAR 0 5
67814: NOT
67815: IFFALSE 67819
// exit ;
67817: GO 67867
// if asc then
67819: LD_VAR 0 2
67823: IFFALSE 67847
// result := SortListByListAsc ( units , tmp ) else
67825: LD_ADDR_VAR 0 3
67829: PUSH
67830: LD_VAR 0 1
67834: PPUSH
67835: LD_VAR 0 5
67839: PPUSH
67840: CALL_OW 76
67844: ST_TO_ADDR
67845: GO 67867
// result := SortListByListDesc ( units , tmp ) ;
67847: LD_ADDR_VAR 0 3
67851: PUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: LD_VAR 0 5
67861: PPUSH
67862: CALL_OW 77
67866: ST_TO_ADDR
// end ;
67867: LD_VAR 0 3
67871: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
// task := GetTaskList ( mech ) ;
67876: LD_ADDR_VAR 0 4
67880: PUSH
67881: LD_VAR 0 1
67885: PPUSH
67886: CALL_OW 437
67890: ST_TO_ADDR
// if not task then
67891: LD_VAR 0 4
67895: NOT
67896: IFFALSE 67900
// exit ;
67898: GO 67942
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67900: LD_ADDR_VAR 0 3
67904: PUSH
67905: LD_VAR 0 4
67909: PUSH
67910: LD_INT 1
67912: ARRAY
67913: PUSH
67914: LD_INT 1
67916: ARRAY
67917: PUSH
67918: LD_STRING r
67920: EQUAL
67921: PUSH
67922: LD_VAR 0 4
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PUSH
67931: LD_INT 4
67933: ARRAY
67934: PUSH
67935: LD_VAR 0 2
67939: EQUAL
67940: AND
67941: ST_TO_ADDR
// end ;
67942: LD_VAR 0 3
67946: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67947: LD_INT 0
67949: PPUSH
// SetDir ( unit , d ) ;
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_VAR 0 4
67959: PPUSH
67960: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67964: LD_VAR 0 1
67968: PPUSH
67969: LD_VAR 0 2
67973: PPUSH
67974: LD_VAR 0 3
67978: PPUSH
67979: LD_VAR 0 5
67983: PPUSH
67984: CALL_OW 48
// end ;
67988: LD_VAR 0 6
67992: RET
// export function ToNaturalNumber ( number ) ; begin
67993: LD_INT 0
67995: PPUSH
// result := number div 1 ;
67996: LD_ADDR_VAR 0 2
68000: PUSH
68001: LD_VAR 0 1
68005: PUSH
68006: LD_INT 1
68008: DIV
68009: ST_TO_ADDR
// if number < 0 then
68010: LD_VAR 0 1
68014: PUSH
68015: LD_INT 0
68017: LESS
68018: IFFALSE 68028
// result := 0 ;
68020: LD_ADDR_VAR 0 2
68024: PUSH
68025: LD_INT 0
68027: ST_TO_ADDR
// end ;
68028: LD_VAR 0 2
68032: RET
// export function SortByClass ( units , class ) ; var un ; begin
68033: LD_INT 0
68035: PPUSH
68036: PPUSH
// if not units or not class then
68037: LD_VAR 0 1
68041: NOT
68042: PUSH
68043: LD_VAR 0 2
68047: NOT
68048: OR
68049: IFFALSE 68053
// exit ;
68051: GO 68148
// result := [ ] ;
68053: LD_ADDR_VAR 0 3
68057: PUSH
68058: EMPTY
68059: ST_TO_ADDR
// for un in units do
68060: LD_ADDR_VAR 0 4
68064: PUSH
68065: LD_VAR 0 1
68069: PUSH
68070: FOR_IN
68071: IFFALSE 68146
// if GetClass ( un ) = class then
68073: LD_VAR 0 4
68077: PPUSH
68078: CALL_OW 257
68082: PUSH
68083: LD_VAR 0 2
68087: EQUAL
68088: IFFALSE 68115
// result := Insert ( result , 1 , un ) else
68090: LD_ADDR_VAR 0 3
68094: PUSH
68095: LD_VAR 0 3
68099: PPUSH
68100: LD_INT 1
68102: PPUSH
68103: LD_VAR 0 4
68107: PPUSH
68108: CALL_OW 2
68112: ST_TO_ADDR
68113: GO 68144
// result := Replace ( result , result + 1 , un ) ;
68115: LD_ADDR_VAR 0 3
68119: PUSH
68120: LD_VAR 0 3
68124: PPUSH
68125: LD_VAR 0 3
68129: PUSH
68130: LD_INT 1
68132: PLUS
68133: PPUSH
68134: LD_VAR 0 4
68138: PPUSH
68139: CALL_OW 1
68143: ST_TO_ADDR
68144: GO 68070
68146: POP
68147: POP
// end ;
68148: LD_VAR 0 3
68152: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68153: LD_INT 0
68155: PPUSH
68156: PPUSH
68157: PPUSH
68158: PPUSH
68159: PPUSH
68160: PPUSH
68161: PPUSH
// result := [ ] ;
68162: LD_ADDR_VAR 0 4
68166: PUSH
68167: EMPTY
68168: ST_TO_ADDR
// if x - r < 0 then
68169: LD_VAR 0 1
68173: PUSH
68174: LD_VAR 0 3
68178: MINUS
68179: PUSH
68180: LD_INT 0
68182: LESS
68183: IFFALSE 68195
// min_x := 0 else
68185: LD_ADDR_VAR 0 8
68189: PUSH
68190: LD_INT 0
68192: ST_TO_ADDR
68193: GO 68211
// min_x := x - r ;
68195: LD_ADDR_VAR 0 8
68199: PUSH
68200: LD_VAR 0 1
68204: PUSH
68205: LD_VAR 0 3
68209: MINUS
68210: ST_TO_ADDR
// if y - r < 0 then
68211: LD_VAR 0 2
68215: PUSH
68216: LD_VAR 0 3
68220: MINUS
68221: PUSH
68222: LD_INT 0
68224: LESS
68225: IFFALSE 68237
// min_y := 0 else
68227: LD_ADDR_VAR 0 7
68231: PUSH
68232: LD_INT 0
68234: ST_TO_ADDR
68235: GO 68253
// min_y := y - r ;
68237: LD_ADDR_VAR 0 7
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: LD_VAR 0 3
68251: MINUS
68252: ST_TO_ADDR
// max_x := x + r ;
68253: LD_ADDR_VAR 0 9
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_VAR 0 3
68267: PLUS
68268: ST_TO_ADDR
// max_y := y + r ;
68269: LD_ADDR_VAR 0 10
68273: PUSH
68274: LD_VAR 0 2
68278: PUSH
68279: LD_VAR 0 3
68283: PLUS
68284: ST_TO_ADDR
// for _x = min_x to max_x do
68285: LD_ADDR_VAR 0 5
68289: PUSH
68290: DOUBLE
68291: LD_VAR 0 8
68295: DEC
68296: ST_TO_ADDR
68297: LD_VAR 0 9
68301: PUSH
68302: FOR_TO
68303: IFFALSE 68404
// for _y = min_y to max_y do
68305: LD_ADDR_VAR 0 6
68309: PUSH
68310: DOUBLE
68311: LD_VAR 0 7
68315: DEC
68316: ST_TO_ADDR
68317: LD_VAR 0 10
68321: PUSH
68322: FOR_TO
68323: IFFALSE 68400
// begin if not ValidHex ( _x , _y ) then
68325: LD_VAR 0 5
68329: PPUSH
68330: LD_VAR 0 6
68334: PPUSH
68335: CALL_OW 488
68339: NOT
68340: IFFALSE 68344
// continue ;
68342: GO 68322
// if GetResourceTypeXY ( _x , _y ) then
68344: LD_VAR 0 5
68348: PPUSH
68349: LD_VAR 0 6
68353: PPUSH
68354: CALL_OW 283
68358: IFFALSE 68398
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68360: LD_ADDR_VAR 0 4
68364: PUSH
68365: LD_VAR 0 4
68369: PPUSH
68370: LD_VAR 0 4
68374: PUSH
68375: LD_INT 1
68377: PLUS
68378: PPUSH
68379: LD_VAR 0 5
68383: PUSH
68384: LD_VAR 0 6
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PPUSH
68393: CALL_OW 1
68397: ST_TO_ADDR
// end ;
68398: GO 68322
68400: POP
68401: POP
68402: GO 68302
68404: POP
68405: POP
// end ;
68406: LD_VAR 0 4
68410: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68411: LD_INT 0
68413: PPUSH
68414: PPUSH
68415: PPUSH
68416: PPUSH
68417: PPUSH
68418: PPUSH
68419: PPUSH
68420: PPUSH
// if not units then
68421: LD_VAR 0 1
68425: NOT
68426: IFFALSE 68430
// exit ;
68428: GO 68855
// result := UnitFilter ( units , [ f_ok ] ) ;
68430: LD_ADDR_VAR 0 3
68434: PUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_INT 50
68442: PUSH
68443: EMPTY
68444: LIST
68445: PPUSH
68446: CALL_OW 72
68450: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68451: LD_ADDR_VAR 0 8
68455: PUSH
68456: LD_VAR 0 1
68460: PUSH
68461: LD_INT 1
68463: ARRAY
68464: PPUSH
68465: CALL_OW 255
68469: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68470: LD_ADDR_VAR 0 10
68474: PUSH
68475: LD_INT 29
68477: PUSH
68478: LD_EXP 30
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: ST_TO_ADDR
// if not result then
68487: LD_VAR 0 3
68491: NOT
68492: IFFALSE 68496
// exit ;
68494: GO 68855
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68496: LD_ADDR_VAR 0 5
68500: PUSH
68501: LD_INT 81
68503: PUSH
68504: LD_VAR 0 8
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PPUSH
68513: CALL_OW 69
68517: ST_TO_ADDR
// for i in result do
68518: LD_ADDR_VAR 0 4
68522: PUSH
68523: LD_VAR 0 3
68527: PUSH
68528: FOR_IN
68529: IFFALSE 68853
// begin tag := GetTag ( i ) + 1 ;
68531: LD_ADDR_VAR 0 9
68535: PUSH
68536: LD_VAR 0 4
68540: PPUSH
68541: CALL_OW 110
68545: PUSH
68546: LD_INT 1
68548: PLUS
68549: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68550: LD_ADDR_VAR 0 7
68554: PUSH
68555: LD_VAR 0 4
68559: PPUSH
68560: CALL_OW 250
68564: PPUSH
68565: LD_VAR 0 4
68569: PPUSH
68570: CALL_OW 251
68574: PPUSH
68575: LD_INT 6
68577: PPUSH
68578: CALL 68153 0 3
68582: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68583: LD_VAR 0 7
68587: PUSH
68588: LD_VAR 0 4
68592: PPUSH
68593: CALL_OW 264
68597: PUSH
68598: LD_VAR 0 10
68602: IN
68603: NOT
68604: AND
68605: IFFALSE 68644
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68607: LD_VAR 0 4
68611: PPUSH
68612: LD_VAR 0 7
68616: PUSH
68617: LD_INT 1
68619: ARRAY
68620: PUSH
68621: LD_INT 1
68623: ARRAY
68624: PPUSH
68625: LD_VAR 0 7
68629: PUSH
68630: LD_INT 1
68632: ARRAY
68633: PUSH
68634: LD_INT 2
68636: ARRAY
68637: PPUSH
68638: CALL_OW 116
68642: GO 68851
// if path > tag then
68644: LD_VAR 0 2
68648: PUSH
68649: LD_VAR 0 9
68653: GREATER
68654: IFFALSE 68821
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68656: LD_ADDR_VAR 0 6
68660: PUSH
68661: LD_VAR 0 5
68665: PPUSH
68666: LD_INT 91
68668: PUSH
68669: LD_VAR 0 4
68673: PUSH
68674: LD_INT 12
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: PPUSH
68682: CALL_OW 72
68686: ST_TO_ADDR
// if nearEnemy then
68687: LD_VAR 0 6
68691: IFFALSE 68719
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68693: LD_VAR 0 4
68697: PPUSH
68698: LD_VAR 0 6
68702: PPUSH
68703: LD_VAR 0 4
68707: PPUSH
68708: CALL_OW 74
68712: PPUSH
68713: CALL_OW 115
68717: GO 68819
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68719: LD_VAR 0 4
68723: PPUSH
68724: LD_VAR 0 2
68728: PUSH
68729: LD_VAR 0 9
68733: ARRAY
68734: PUSH
68735: LD_INT 1
68737: ARRAY
68738: PPUSH
68739: LD_VAR 0 2
68743: PUSH
68744: LD_VAR 0 9
68748: ARRAY
68749: PUSH
68750: LD_INT 2
68752: ARRAY
68753: PPUSH
68754: CALL_OW 297
68758: PUSH
68759: LD_INT 6
68761: GREATER
68762: IFFALSE 68805
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68764: LD_VAR 0 4
68768: PPUSH
68769: LD_VAR 0 2
68773: PUSH
68774: LD_VAR 0 9
68778: ARRAY
68779: PUSH
68780: LD_INT 1
68782: ARRAY
68783: PPUSH
68784: LD_VAR 0 2
68788: PUSH
68789: LD_VAR 0 9
68793: ARRAY
68794: PUSH
68795: LD_INT 2
68797: ARRAY
68798: PPUSH
68799: CALL_OW 114
68803: GO 68819
// SetTag ( i , tag ) ;
68805: LD_VAR 0 4
68809: PPUSH
68810: LD_VAR 0 9
68814: PPUSH
68815: CALL_OW 109
// end else
68819: GO 68851
// if enemy then
68821: LD_VAR 0 5
68825: IFFALSE 68851
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68827: LD_VAR 0 4
68831: PPUSH
68832: LD_VAR 0 5
68836: PPUSH
68837: LD_VAR 0 4
68841: PPUSH
68842: CALL_OW 74
68846: PPUSH
68847: CALL_OW 115
// end ;
68851: GO 68528
68853: POP
68854: POP
// end ;
68855: LD_VAR 0 3
68859: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68860: LD_INT 0
68862: PPUSH
68863: PPUSH
68864: PPUSH
// if not unit or IsInUnit ( unit ) then
68865: LD_VAR 0 1
68869: NOT
68870: PUSH
68871: LD_VAR 0 1
68875: PPUSH
68876: CALL_OW 310
68880: OR
68881: IFFALSE 68885
// exit ;
68883: GO 68976
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68885: LD_ADDR_VAR 0 4
68889: PUSH
68890: LD_VAR 0 1
68894: PPUSH
68895: CALL_OW 250
68899: PPUSH
68900: LD_VAR 0 2
68904: PPUSH
68905: LD_INT 1
68907: PPUSH
68908: CALL_OW 272
68912: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68913: LD_ADDR_VAR 0 5
68917: PUSH
68918: LD_VAR 0 1
68922: PPUSH
68923: CALL_OW 251
68927: PPUSH
68928: LD_VAR 0 2
68932: PPUSH
68933: LD_INT 1
68935: PPUSH
68936: CALL_OW 273
68940: ST_TO_ADDR
// if ValidHex ( x , y ) then
68941: LD_VAR 0 4
68945: PPUSH
68946: LD_VAR 0 5
68950: PPUSH
68951: CALL_OW 488
68955: IFFALSE 68976
// ComTurnXY ( unit , x , y ) ;
68957: LD_VAR 0 1
68961: PPUSH
68962: LD_VAR 0 4
68966: PPUSH
68967: LD_VAR 0 5
68971: PPUSH
68972: CALL_OW 118
// end ;
68976: LD_VAR 0 3
68980: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68981: LD_INT 0
68983: PPUSH
68984: PPUSH
// result := false ;
68985: LD_ADDR_VAR 0 3
68989: PUSH
68990: LD_INT 0
68992: ST_TO_ADDR
// if not units then
68993: LD_VAR 0 2
68997: NOT
68998: IFFALSE 69002
// exit ;
69000: GO 69047
// for i in units do
69002: LD_ADDR_VAR 0 4
69006: PUSH
69007: LD_VAR 0 2
69011: PUSH
69012: FOR_IN
69013: IFFALSE 69045
// if See ( side , i ) then
69015: LD_VAR 0 1
69019: PPUSH
69020: LD_VAR 0 4
69024: PPUSH
69025: CALL_OW 292
69029: IFFALSE 69043
// begin result := true ;
69031: LD_ADDR_VAR 0 3
69035: PUSH
69036: LD_INT 1
69038: ST_TO_ADDR
// exit ;
69039: POP
69040: POP
69041: GO 69047
// end ;
69043: GO 69012
69045: POP
69046: POP
// end ;
69047: LD_VAR 0 3
69051: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69052: LD_INT 0
69054: PPUSH
69055: PPUSH
69056: PPUSH
69057: PPUSH
// if not unit or not points then
69058: LD_VAR 0 1
69062: NOT
69063: PUSH
69064: LD_VAR 0 2
69068: NOT
69069: OR
69070: IFFALSE 69074
// exit ;
69072: GO 69164
// dist := 99999 ;
69074: LD_ADDR_VAR 0 5
69078: PUSH
69079: LD_INT 99999
69081: ST_TO_ADDR
// for i in points do
69082: LD_ADDR_VAR 0 4
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: FOR_IN
69093: IFFALSE 69162
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69095: LD_ADDR_VAR 0 6
69099: PUSH
69100: LD_VAR 0 1
69104: PPUSH
69105: LD_VAR 0 4
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PPUSH
69114: LD_VAR 0 4
69118: PUSH
69119: LD_INT 2
69121: ARRAY
69122: PPUSH
69123: CALL_OW 297
69127: ST_TO_ADDR
// if tmpDist < dist then
69128: LD_VAR 0 6
69132: PUSH
69133: LD_VAR 0 5
69137: LESS
69138: IFFALSE 69160
// begin result := i ;
69140: LD_ADDR_VAR 0 3
69144: PUSH
69145: LD_VAR 0 4
69149: ST_TO_ADDR
// dist := tmpDist ;
69150: LD_ADDR_VAR 0 5
69154: PUSH
69155: LD_VAR 0 6
69159: ST_TO_ADDR
// end ; end ;
69160: GO 69092
69162: POP
69163: POP
// end ; end_of_file
69164: LD_VAR 0 3
69168: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69169: LD_VAR 0 1
69173: PUSH
69174: LD_INT 200
69176: DOUBLE
69177: GREATEREQUAL
69178: IFFALSE 69186
69180: LD_INT 299
69182: DOUBLE
69183: LESSEQUAL
69184: IFTRUE 69188
69186: GO 69220
69188: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69189: LD_VAR 0 1
69193: PPUSH
69194: LD_VAR 0 2
69198: PPUSH
69199: LD_VAR 0 3
69203: PPUSH
69204: LD_VAR 0 4
69208: PPUSH
69209: LD_VAR 0 5
69213: PPUSH
69214: CALL 25195 0 5
69218: GO 69297
69220: LD_INT 300
69222: DOUBLE
69223: GREATEREQUAL
69224: IFFALSE 69232
69226: LD_INT 399
69228: DOUBLE
69229: LESSEQUAL
69230: IFTRUE 69234
69232: GO 69296
69234: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69235: LD_VAR 0 1
69239: PPUSH
69240: LD_VAR 0 2
69244: PPUSH
69245: LD_VAR 0 3
69249: PPUSH
69250: LD_VAR 0 4
69254: PPUSH
69255: LD_VAR 0 5
69259: PPUSH
69260: LD_VAR 0 6
69264: PPUSH
69265: LD_VAR 0 7
69269: PPUSH
69270: LD_VAR 0 8
69274: PPUSH
69275: LD_VAR 0 9
69279: PPUSH
69280: LD_VAR 0 10
69284: PPUSH
69285: LD_VAR 0 11
69289: PPUSH
69290: CALL 23093 0 11
69294: GO 69297
69296: POP
// end ;
69297: PPOPN 11
69299: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69300: LD_VAR 0 1
69304: PPUSH
69305: LD_VAR 0 2
69309: PPUSH
69310: LD_VAR 0 3
69314: PPUSH
69315: LD_VAR 0 4
69319: PPUSH
69320: LD_VAR 0 5
69324: PPUSH
69325: CALL 25187 0 5
// end ; end_of_file
69329: PPOPN 5
69331: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: LD_VAR 0 3
69346: PPUSH
69347: LD_VAR 0 4
69351: PPUSH
69352: LD_VAR 0 5
69356: PPUSH
69357: LD_VAR 0 6
69361: PPUSH
69362: CALL 11288 0 6
// end ;
69366: PPOPN 6
69368: END
