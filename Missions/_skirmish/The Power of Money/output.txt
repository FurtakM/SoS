// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 26999 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 27119 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 27095 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 27103 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 66372 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// export function SOS_MapStart ( ) ; begin
11222: LD_INT 0
11224: PPUSH
// if streamModeActive then
11225: LD_EXP 27
11229: IFFALSE 11238
// DefineStreamItems ( true ) ;
11231: LD_INT 1
11233: PPUSH
11234: CALL 13042 0 1
// UpdateLuaVariables ( ) ;
11238: CALL 11255 0 0
// UpdateFactoryWaypoints ( ) ;
11242: CALL 25903 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11246: CALL 26160 0 0
// end ;
11250: LD_VAR 0 1
11254: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
11255: LD_INT 0
11257: PPUSH
// if not globalGameSaveCounter then
11258: LD_EXP 26
11262: NOT
11263: IFFALSE 11274
// ToLua ( setGameSaveCounter(0) ) else
11265: LD_STRING setGameSaveCounter(0)
11267: PPUSH
11268: CALL_OW 559
11272: GO 11306
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11274: LD_ADDR_EXP 26
11278: PUSH
11279: LD_EXP 26
11283: PPUSH
11284: CALL 70117 0 1
11288: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11289: LD_STRING setGameSaveCounter(
11291: PUSH
11292: LD_EXP 26
11296: STR
11297: PUSH
11298: LD_STRING )
11300: STR
11301: PPUSH
11302: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11306: LD_STRING setGameDifficulty(
11308: PUSH
11309: LD_OWVAR 67
11313: STR
11314: PUSH
11315: LD_STRING )
11317: STR
11318: PPUSH
11319: CALL_OW 559
// end ;
11323: LD_VAR 0 1
11327: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11328: LD_INT 0
11330: PPUSH
// if p2 = stream_mode then
11331: LD_VAR 0 2
11335: PUSH
11336: LD_INT 100
11338: EQUAL
11339: IFFALSE 12342
// begin if not StreamModeActive then
11341: LD_EXP 27
11345: NOT
11346: IFFALSE 11356
// StreamModeActive := true ;
11348: LD_ADDR_EXP 27
11352: PUSH
11353: LD_INT 1
11355: ST_TO_ADDR
// if p3 = 0 then
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 0
11363: EQUAL
11364: IFFALSE 11370
// InitStreamMode ;
11366: CALL 12578 0 0
// if p3 = 1 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 1
11377: EQUAL
11378: IFFALSE 11388
// sRocket := true ;
11380: LD_ADDR_EXP 32
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 2 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 2
11395: EQUAL
11396: IFFALSE 11406
// sSpeed := true ;
11398: LD_ADDR_EXP 31
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 3 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 3
11413: EQUAL
11414: IFFALSE 11424
// sEngine := true ;
11416: LD_ADDR_EXP 33
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 4 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 4
11431: EQUAL
11432: IFFALSE 11442
// sSpec := true ;
11434: LD_ADDR_EXP 30
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 5 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 5
11449: EQUAL
11450: IFFALSE 11460
// sLevel := true ;
11452: LD_ADDR_EXP 34
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 6 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 6
11467: EQUAL
11468: IFFALSE 11478
// sArmoury := true ;
11470: LD_ADDR_EXP 35
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 7 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 7
11485: EQUAL
11486: IFFALSE 11496
// sRadar := true ;
11488: LD_ADDR_EXP 36
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 8 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 8
11503: EQUAL
11504: IFFALSE 11514
// sBunker := true ;
11506: LD_ADDR_EXP 37
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 9 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 9
11521: EQUAL
11522: IFFALSE 11532
// sHack := true ;
11524: LD_ADDR_EXP 38
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 10 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 10
11539: EQUAL
11540: IFFALSE 11550
// sFire := true ;
11542: LD_ADDR_EXP 39
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 11 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 11
11557: EQUAL
11558: IFFALSE 11568
// sRefresh := true ;
11560: LD_ADDR_EXP 40
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 12 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 12
11575: EQUAL
11576: IFFALSE 11586
// sExp := true ;
11578: LD_ADDR_EXP 41
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 13 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 13
11593: EQUAL
11594: IFFALSE 11604
// sDepot := true ;
11596: LD_ADDR_EXP 42
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 14 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 14
11611: EQUAL
11612: IFFALSE 11622
// sFlag := true ;
11614: LD_ADDR_EXP 43
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 15 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 15
11629: EQUAL
11630: IFFALSE 11640
// sKamikadze := true ;
11632: LD_ADDR_EXP 51
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 16 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 16
11647: EQUAL
11648: IFFALSE 11658
// sTroll := true ;
11650: LD_ADDR_EXP 52
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 17 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 17
11665: EQUAL
11666: IFFALSE 11676
// sSlow := true ;
11668: LD_ADDR_EXP 53
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 18 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 18
11683: EQUAL
11684: IFFALSE 11694
// sLack := true ;
11686: LD_ADDR_EXP 54
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 19 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 19
11701: EQUAL
11702: IFFALSE 11712
// sTank := true ;
11704: LD_ADDR_EXP 56
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 20 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 20
11719: EQUAL
11720: IFFALSE 11730
// sRemote := true ;
11722: LD_ADDR_EXP 57
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 21 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 21
11737: EQUAL
11738: IFFALSE 11748
// sPowell := true ;
11740: LD_ADDR_EXP 58
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 22 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 22
11755: EQUAL
11756: IFFALSE 11766
// sTeleport := true ;
11758: LD_ADDR_EXP 61
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 23 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 23
11773: EQUAL
11774: IFFALSE 11784
// sOilTower := true ;
11776: LD_ADDR_EXP 63
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 24 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 24
11791: EQUAL
11792: IFFALSE 11802
// sShovel := true ;
11794: LD_ADDR_EXP 64
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 25 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 25
11809: EQUAL
11810: IFFALSE 11820
// sSheik := true ;
11812: LD_ADDR_EXP 65
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 26 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 26
11827: EQUAL
11828: IFFALSE 11838
// sEarthquake := true ;
11830: LD_ADDR_EXP 67
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 27 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 27
11845: EQUAL
11846: IFFALSE 11856
// sAI := true ;
11848: LD_ADDR_EXP 68
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 28 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 28
11863: EQUAL
11864: IFFALSE 11874
// sCargo := true ;
11866: LD_ADDR_EXP 71
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 29 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 29
11881: EQUAL
11882: IFFALSE 11892
// sDLaser := true ;
11884: LD_ADDR_EXP 72
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 30 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 30
11899: EQUAL
11900: IFFALSE 11910
// sExchange := true ;
11902: LD_ADDR_EXP 73
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 31 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 31
11917: EQUAL
11918: IFFALSE 11928
// sFac := true ;
11920: LD_ADDR_EXP 74
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 32 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 32
11935: EQUAL
11936: IFFALSE 11946
// sPower := true ;
11938: LD_ADDR_EXP 75
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 33 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 33
11953: EQUAL
11954: IFFALSE 11964
// sRandom := true ;
11956: LD_ADDR_EXP 76
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 34 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 34
11971: EQUAL
11972: IFFALSE 11982
// sShield := true ;
11974: LD_ADDR_EXP 77
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 35 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 35
11989: EQUAL
11990: IFFALSE 12000
// sTime := true ;
11992: LD_ADDR_EXP 78
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 36 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 36
12007: EQUAL
12008: IFFALSE 12018
// sTools := true ;
12010: LD_ADDR_EXP 79
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 101 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 101
12025: EQUAL
12026: IFFALSE 12036
// sSold := true ;
12028: LD_ADDR_EXP 44
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 102 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 102
12043: EQUAL
12044: IFFALSE 12054
// sDiff := true ;
12046: LD_ADDR_EXP 45
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 103 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 103
12061: EQUAL
12062: IFFALSE 12072
// sFog := true ;
12064: LD_ADDR_EXP 48
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 104 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 104
12079: EQUAL
12080: IFFALSE 12090
// sReset := true ;
12082: LD_ADDR_EXP 49
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// if p3 = 105 then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 105
12097: EQUAL
12098: IFFALSE 12108
// sSun := true ;
12100: LD_ADDR_EXP 50
12104: PUSH
12105: LD_INT 1
12107: ST_TO_ADDR
// if p3 = 106 then
12108: LD_VAR 0 3
12112: PUSH
12113: LD_INT 106
12115: EQUAL
12116: IFFALSE 12126
// sTiger := true ;
12118: LD_ADDR_EXP 46
12122: PUSH
12123: LD_INT 1
12125: ST_TO_ADDR
// if p3 = 107 then
12126: LD_VAR 0 3
12130: PUSH
12131: LD_INT 107
12133: EQUAL
12134: IFFALSE 12144
// sBomb := true ;
12136: LD_ADDR_EXP 47
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if p3 = 108 then
12144: LD_VAR 0 3
12148: PUSH
12149: LD_INT 108
12151: EQUAL
12152: IFFALSE 12162
// sWound := true ;
12154: LD_ADDR_EXP 55
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// if p3 = 109 then
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 109
12169: EQUAL
12170: IFFALSE 12180
// sBetray := true ;
12172: LD_ADDR_EXP 59
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// if p3 = 110 then
12180: LD_VAR 0 3
12184: PUSH
12185: LD_INT 110
12187: EQUAL
12188: IFFALSE 12198
// sContamin := true ;
12190: LD_ADDR_EXP 60
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// if p3 = 111 then
12198: LD_VAR 0 3
12202: PUSH
12203: LD_INT 111
12205: EQUAL
12206: IFFALSE 12216
// sOil := true ;
12208: LD_ADDR_EXP 62
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// if p3 = 112 then
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 112
12223: EQUAL
12224: IFFALSE 12234
// sStu := true ;
12226: LD_ADDR_EXP 66
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// if p3 = 113 then
12234: LD_VAR 0 3
12238: PUSH
12239: LD_INT 113
12241: EQUAL
12242: IFFALSE 12252
// sBazooka := true ;
12244: LD_ADDR_EXP 69
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// if p3 = 114 then
12252: LD_VAR 0 3
12256: PUSH
12257: LD_INT 114
12259: EQUAL
12260: IFFALSE 12270
// sMortar := true ;
12262: LD_ADDR_EXP 70
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// if p3 = 115 then
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 115
12277: EQUAL
12278: IFFALSE 12288
// sRanger := true ;
12280: LD_ADDR_EXP 80
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// if p3 = 116 then
12288: LD_VAR 0 3
12292: PUSH
12293: LD_INT 116
12295: EQUAL
12296: IFFALSE 12306
// sComputer := true ;
12298: LD_ADDR_EXP 81
12302: PUSH
12303: LD_INT 1
12305: ST_TO_ADDR
// if p3 = 117 then
12306: LD_VAR 0 3
12310: PUSH
12311: LD_INT 117
12313: EQUAL
12314: IFFALSE 12324
// s30 := true ;
12316: LD_ADDR_EXP 82
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
// if p3 = 118 then
12324: LD_VAR 0 3
12328: PUSH
12329: LD_INT 118
12331: EQUAL
12332: IFFALSE 12342
// s60 := true ;
12334: LD_ADDR_EXP 83
12338: PUSH
12339: LD_INT 1
12341: ST_TO_ADDR
// end ; if p2 = hack_mode then
12342: LD_VAR 0 2
12346: PUSH
12347: LD_INT 101
12349: EQUAL
12350: IFFALSE 12478
// begin case p3 of 1 :
12352: LD_VAR 0 3
12356: PUSH
12357: LD_INT 1
12359: DOUBLE
12360: EQUAL
12361: IFTRUE 12365
12363: GO 12372
12365: POP
// hHackUnlimitedResources ; 2 :
12366: CALL 24649 0 0
12370: GO 12478
12372: LD_INT 2
12374: DOUBLE
12375: EQUAL
12376: IFTRUE 12380
12378: GO 12387
12380: POP
// hHackSetLevel10 ; 3 :
12381: CALL 24782 0 0
12385: GO 12478
12387: LD_INT 3
12389: DOUBLE
12390: EQUAL
12391: IFTRUE 12395
12393: GO 12402
12395: POP
// hHackSetLevel10YourUnits ; 4 :
12396: CALL 24867 0 0
12400: GO 12478
12402: LD_INT 4
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12417
12410: POP
// hHackInvincible ; 5 :
12411: CALL 25315 0 0
12415: GO 12478
12417: LD_INT 5
12419: DOUBLE
12420: EQUAL
12421: IFTRUE 12425
12423: GO 12432
12425: POP
// hHackInvisible ; 6 :
12426: CALL 25426 0 0
12430: GO 12478
12432: LD_INT 6
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12447
12440: POP
// hHackChangeYourSide ; 7 :
12441: CALL 25483 0 0
12445: GO 12478
12447: LD_INT 7
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12462
12455: POP
// hHackChangeUnitSide ; 8 :
12456: CALL 25525 0 0
12460: GO 12478
12462: LD_INT 8
12464: DOUBLE
12465: EQUAL
12466: IFTRUE 12470
12468: GO 12477
12470: POP
// hHackFog ; end ;
12471: CALL 25626 0 0
12475: GO 12478
12477: POP
// end ; if p2 = game_save_mode then
12478: LD_VAR 0 2
12482: PUSH
12483: LD_INT 102
12485: EQUAL
12486: IFFALSE 12551
// begin if p3 = 1 then
12488: LD_VAR 0 3
12492: PUSH
12493: LD_INT 1
12495: EQUAL
12496: IFFALSE 12508
// globalGameSaveCounter := p4 ;
12498: LD_ADDR_EXP 26
12502: PUSH
12503: LD_VAR 0 4
12507: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12508: LD_VAR 0 3
12512: PUSH
12513: LD_INT 2
12515: EQUAL
12516: PUSH
12517: LD_EXP 26
12521: AND
12522: IFFALSE 12541
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12524: LD_STRING setGameSaveCounter(
12526: PUSH
12527: LD_EXP 26
12531: STR
12532: PUSH
12533: LD_STRING )
12535: STR
12536: PPUSH
12537: CALL_OW 559
// display_strings := globalGameSaveCounter ;
12541: LD_ADDR_OWVAR 47
12545: PUSH
12546: LD_EXP 26
12550: ST_TO_ADDR
// end ; end ;
12551: LD_VAR 0 7
12555: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12556: GO 12558
12558: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12559: LD_STRING initStreamRollete();
12561: PPUSH
12562: CALL_OW 559
// InitStreamMode ;
12566: CALL 12578 0 0
// DefineStreamItems ( false ) ;
12570: LD_INT 0
12572: PPUSH
12573: CALL 13042 0 1
// end ;
12577: END
// function InitStreamMode ; begin
12578: LD_INT 0
12580: PPUSH
// streamModeActive := false ;
12581: LD_ADDR_EXP 27
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// normalCounter := 36 ;
12589: LD_ADDR_EXP 28
12593: PUSH
12594: LD_INT 36
12596: ST_TO_ADDR
// hardcoreCounter := 18 ;
12597: LD_ADDR_EXP 29
12601: PUSH
12602: LD_INT 18
12604: ST_TO_ADDR
// sRocket := false ;
12605: LD_ADDR_EXP 32
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sSpeed := false ;
12613: LD_ADDR_EXP 31
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sEngine := false ;
12621: LD_ADDR_EXP 33
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sSpec := false ;
12629: LD_ADDR_EXP 30
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sLevel := false ;
12637: LD_ADDR_EXP 34
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sArmoury := false ;
12645: LD_ADDR_EXP 35
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sRadar := false ;
12653: LD_ADDR_EXP 36
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sBunker := false ;
12661: LD_ADDR_EXP 37
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sHack := false ;
12669: LD_ADDR_EXP 38
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sFire := false ;
12677: LD_ADDR_EXP 39
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sRefresh := false ;
12685: LD_ADDR_EXP 40
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sExp := false ;
12693: LD_ADDR_EXP 41
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sDepot := false ;
12701: LD_ADDR_EXP 42
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sFlag := false ;
12709: LD_ADDR_EXP 43
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sKamikadze := false ;
12717: LD_ADDR_EXP 51
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sTroll := false ;
12725: LD_ADDR_EXP 52
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sSlow := false ;
12733: LD_ADDR_EXP 53
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sLack := false ;
12741: LD_ADDR_EXP 54
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sTank := false ;
12749: LD_ADDR_EXP 56
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sRemote := false ;
12757: LD_ADDR_EXP 57
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sPowell := false ;
12765: LD_ADDR_EXP 58
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sTeleport := false ;
12773: LD_ADDR_EXP 61
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sOilTower := false ;
12781: LD_ADDR_EXP 63
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sShovel := false ;
12789: LD_ADDR_EXP 64
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sSheik := false ;
12797: LD_ADDR_EXP 65
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sEarthquake := false ;
12805: LD_ADDR_EXP 67
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sAI := false ;
12813: LD_ADDR_EXP 68
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// sCargo := false ;
12821: LD_ADDR_EXP 71
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// sDLaser := false ;
12829: LD_ADDR_EXP 72
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// sExchange := false ;
12837: LD_ADDR_EXP 73
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// sFac := false ;
12845: LD_ADDR_EXP 74
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// sPower := false ;
12853: LD_ADDR_EXP 75
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// sRandom := false ;
12861: LD_ADDR_EXP 76
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// sShield := false ;
12869: LD_ADDR_EXP 77
12873: PUSH
12874: LD_INT 0
12876: ST_TO_ADDR
// sTime := false ;
12877: LD_ADDR_EXP 78
12881: PUSH
12882: LD_INT 0
12884: ST_TO_ADDR
// sTools := false ;
12885: LD_ADDR_EXP 79
12889: PUSH
12890: LD_INT 0
12892: ST_TO_ADDR
// sSold := false ;
12893: LD_ADDR_EXP 44
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// sDiff := false ;
12901: LD_ADDR_EXP 45
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// sFog := false ;
12909: LD_ADDR_EXP 48
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// sReset := false ;
12917: LD_ADDR_EXP 49
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// sSun := false ;
12925: LD_ADDR_EXP 50
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// sTiger := false ;
12933: LD_ADDR_EXP 46
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// sBomb := false ;
12941: LD_ADDR_EXP 47
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// sWound := false ;
12949: LD_ADDR_EXP 55
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// sBetray := false ;
12957: LD_ADDR_EXP 59
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// sContamin := false ;
12965: LD_ADDR_EXP 60
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// sOil := false ;
12973: LD_ADDR_EXP 62
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sStu := false ;
12981: LD_ADDR_EXP 66
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sBazooka := false ;
12989: LD_ADDR_EXP 69
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sMortar := false ;
12997: LD_ADDR_EXP 70
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sRanger := false ;
13005: LD_ADDR_EXP 80
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// sComputer := false ;
13013: LD_ADDR_EXP 81
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// s30 := false ;
13021: LD_ADDR_EXP 82
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// s60 := false ;
13029: LD_ADDR_EXP 83
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// end ;
13037: LD_VAR 0 1
13041: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13042: LD_INT 0
13044: PPUSH
13045: PPUSH
13046: PPUSH
13047: PPUSH
13048: PPUSH
13049: PPUSH
13050: PPUSH
// result := [ ] ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: EMPTY
13057: ST_TO_ADDR
// if campaign_id = 1 then
13058: LD_OWVAR 69
13062: PUSH
13063: LD_INT 1
13065: EQUAL
13066: IFFALSE 16232
// begin case mission_number of 1 :
13068: LD_OWVAR 70
13072: PUSH
13073: LD_INT 1
13075: DOUBLE
13076: EQUAL
13077: IFTRUE 13081
13079: GO 13157
13081: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_INT 2
13089: PUSH
13090: LD_INT 4
13092: PUSH
13093: LD_INT 11
13095: PUSH
13096: LD_INT 12
13098: PUSH
13099: LD_INT 15
13101: PUSH
13102: LD_INT 16
13104: PUSH
13105: LD_INT 22
13107: PUSH
13108: LD_INT 23
13110: PUSH
13111: LD_INT 26
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 101
13127: PUSH
13128: LD_INT 102
13130: PUSH
13131: LD_INT 106
13133: PUSH
13134: LD_INT 116
13136: PUSH
13137: LD_INT 117
13139: PUSH
13140: LD_INT 118
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
13155: GO 16230
13157: LD_INT 2
13159: DOUBLE
13160: EQUAL
13161: IFTRUE 13165
13163: GO 13249
13165: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13166: LD_ADDR_VAR 0 2
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: LD_INT 4
13176: PUSH
13177: LD_INT 11
13179: PUSH
13180: LD_INT 12
13182: PUSH
13183: LD_INT 15
13185: PUSH
13186: LD_INT 16
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_INT 23
13194: PUSH
13195: LD_INT 26
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 101
13211: PUSH
13212: LD_INT 102
13214: PUSH
13215: LD_INT 105
13217: PUSH
13218: LD_INT 106
13220: PUSH
13221: LD_INT 108
13223: PUSH
13224: LD_INT 116
13226: PUSH
13227: LD_INT 117
13229: PUSH
13230: LD_INT 118
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: ST_TO_ADDR
13247: GO 16230
13249: LD_INT 3
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13345
13257: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 4
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: LD_INT 11
13274: PUSH
13275: LD_INT 12
13277: PUSH
13278: LD_INT 15
13280: PUSH
13281: LD_INT 16
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_INT 26
13289: PUSH
13290: LD_INT 36
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 101
13307: PUSH
13308: LD_INT 102
13310: PUSH
13311: LD_INT 105
13313: PUSH
13314: LD_INT 106
13316: PUSH
13317: LD_INT 108
13319: PUSH
13320: LD_INT 116
13322: PUSH
13323: LD_INT 117
13325: PUSH
13326: LD_INT 118
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: ST_TO_ADDR
13343: GO 16230
13345: LD_INT 4
13347: DOUBLE
13348: EQUAL
13349: IFTRUE 13353
13351: GO 13449
13353: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 4
13364: PUSH
13365: LD_INT 5
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: LD_INT 11
13373: PUSH
13374: LD_INT 12
13376: PUSH
13377: LD_INT 15
13379: PUSH
13380: LD_INT 16
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_INT 23
13388: PUSH
13389: LD_INT 26
13391: PUSH
13392: LD_INT 36
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 101
13411: PUSH
13412: LD_INT 102
13414: PUSH
13415: LD_INT 105
13417: PUSH
13418: LD_INT 106
13420: PUSH
13421: LD_INT 108
13423: PUSH
13424: LD_INT 116
13426: PUSH
13427: LD_INT 117
13429: PUSH
13430: LD_INT 118
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: ST_TO_ADDR
13447: GO 16230
13449: LD_INT 5
13451: DOUBLE
13452: EQUAL
13453: IFTRUE 13457
13455: GO 13569
13457: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13458: LD_ADDR_VAR 0 2
13462: PUSH
13463: LD_INT 2
13465: PUSH
13466: LD_INT 4
13468: PUSH
13469: LD_INT 5
13471: PUSH
13472: LD_INT 6
13474: PUSH
13475: LD_INT 8
13477: PUSH
13478: LD_INT 11
13480: PUSH
13481: LD_INT 12
13483: PUSH
13484: LD_INT 15
13486: PUSH
13487: LD_INT 16
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_INT 23
13495: PUSH
13496: LD_INT 25
13498: PUSH
13499: LD_INT 26
13501: PUSH
13502: LD_INT 36
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 101
13523: PUSH
13524: LD_INT 102
13526: PUSH
13527: LD_INT 105
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 108
13535: PUSH
13536: LD_INT 109
13538: PUSH
13539: LD_INT 112
13541: PUSH
13542: LD_INT 116
13544: PUSH
13545: LD_INT 117
13547: PUSH
13548: LD_INT 118
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: ST_TO_ADDR
13567: GO 16230
13569: LD_INT 6
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13709
13577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 2
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: LD_INT 6
13594: PUSH
13595: LD_INT 8
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 12
13603: PUSH
13604: LD_INT 15
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 20
13612: PUSH
13613: LD_INT 21
13615: PUSH
13616: LD_INT 22
13618: PUSH
13619: LD_INT 23
13621: PUSH
13622: LD_INT 25
13624: PUSH
13625: LD_INT 26
13627: PUSH
13628: LD_INT 30
13630: PUSH
13631: LD_INT 31
13633: PUSH
13634: LD_INT 32
13636: PUSH
13637: LD_INT 36
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 101
13663: PUSH
13664: LD_INT 102
13666: PUSH
13667: LD_INT 105
13669: PUSH
13670: LD_INT 106
13672: PUSH
13673: LD_INT 108
13675: PUSH
13676: LD_INT 109
13678: PUSH
13679: LD_INT 112
13681: PUSH
13682: LD_INT 116
13684: PUSH
13685: LD_INT 117
13687: PUSH
13688: LD_INT 118
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: ST_TO_ADDR
13707: GO 16230
13709: LD_INT 7
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13829
13717: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: LD_INT 5
13731: PUSH
13732: LD_INT 7
13734: PUSH
13735: LD_INT 11
13737: PUSH
13738: LD_INT 12
13740: PUSH
13741: LD_INT 15
13743: PUSH
13744: LD_INT 16
13746: PUSH
13747: LD_INT 20
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_INT 23
13758: PUSH
13759: LD_INT 25
13761: PUSH
13762: LD_INT 26
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 101
13783: PUSH
13784: LD_INT 102
13786: PUSH
13787: LD_INT 103
13789: PUSH
13790: LD_INT 105
13792: PUSH
13793: LD_INT 106
13795: PUSH
13796: LD_INT 108
13798: PUSH
13799: LD_INT 112
13801: PUSH
13802: LD_INT 116
13804: PUSH
13805: LD_INT 117
13807: PUSH
13808: LD_INT 118
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: ST_TO_ADDR
13827: GO 16230
13829: LD_INT 8
13831: DOUBLE
13832: EQUAL
13833: IFTRUE 13837
13835: GO 13977
13837: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13838: LD_ADDR_VAR 0 2
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: LD_INT 5
13851: PUSH
13852: LD_INT 6
13854: PUSH
13855: LD_INT 7
13857: PUSH
13858: LD_INT 8
13860: PUSH
13861: LD_INT 11
13863: PUSH
13864: LD_INT 12
13866: PUSH
13867: LD_INT 15
13869: PUSH
13870: LD_INT 16
13872: PUSH
13873: LD_INT 20
13875: PUSH
13876: LD_INT 21
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: LD_INT 23
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 26
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 31
13896: PUSH
13897: LD_INT 32
13899: PUSH
13900: LD_INT 36
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 101
13927: PUSH
13928: LD_INT 102
13930: PUSH
13931: LD_INT 103
13933: PUSH
13934: LD_INT 105
13936: PUSH
13937: LD_INT 106
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 112
13948: PUSH
13949: LD_INT 116
13951: PUSH
13952: LD_INT 117
13954: PUSH
13955: LD_INT 118
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: ST_TO_ADDR
13975: GO 16230
13977: LD_INT 9
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 14133
13985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: LD_INT 4
13996: PUSH
13997: LD_INT 5
13999: PUSH
14000: LD_INT 6
14002: PUSH
14003: LD_INT 7
14005: PUSH
14006: LD_INT 8
14008: PUSH
14009: LD_INT 11
14011: PUSH
14012: LD_INT 12
14014: PUSH
14015: LD_INT 15
14017: PUSH
14018: LD_INT 16
14020: PUSH
14021: LD_INT 20
14023: PUSH
14024: LD_INT 21
14026: PUSH
14027: LD_INT 22
14029: PUSH
14030: LD_INT 23
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 26
14038: PUSH
14039: LD_INT 28
14041: PUSH
14042: LD_INT 30
14044: PUSH
14045: LD_INT 31
14047: PUSH
14048: LD_INT 32
14050: PUSH
14051: LD_INT 36
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 101
14079: PUSH
14080: LD_INT 102
14082: PUSH
14083: LD_INT 103
14085: PUSH
14086: LD_INT 105
14088: PUSH
14089: LD_INT 106
14091: PUSH
14092: LD_INT 108
14094: PUSH
14095: LD_INT 109
14097: PUSH
14098: LD_INT 112
14100: PUSH
14101: LD_INT 114
14103: PUSH
14104: LD_INT 116
14106: PUSH
14107: LD_INT 117
14109: PUSH
14110: LD_INT 118
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 16230
14133: LD_INT 10
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14337
14141: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 4
14152: PUSH
14153: LD_INT 5
14155: PUSH
14156: LD_INT 6
14158: PUSH
14159: LD_INT 7
14161: PUSH
14162: LD_INT 8
14164: PUSH
14165: LD_INT 9
14167: PUSH
14168: LD_INT 10
14170: PUSH
14171: LD_INT 11
14173: PUSH
14174: LD_INT 12
14176: PUSH
14177: LD_INT 13
14179: PUSH
14180: LD_INT 14
14182: PUSH
14183: LD_INT 15
14185: PUSH
14186: LD_INT 16
14188: PUSH
14189: LD_INT 17
14191: PUSH
14192: LD_INT 18
14194: PUSH
14195: LD_INT 19
14197: PUSH
14198: LD_INT 20
14200: PUSH
14201: LD_INT 21
14203: PUSH
14204: LD_INT 22
14206: PUSH
14207: LD_INT 23
14209: PUSH
14210: LD_INT 24
14212: PUSH
14213: LD_INT 25
14215: PUSH
14216: LD_INT 26
14218: PUSH
14219: LD_INT 28
14221: PUSH
14222: LD_INT 30
14224: PUSH
14225: LD_INT 31
14227: PUSH
14228: LD_INT 32
14230: PUSH
14231: LD_INT 36
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 101
14267: PUSH
14268: LD_INT 102
14270: PUSH
14271: LD_INT 103
14273: PUSH
14274: LD_INT 104
14276: PUSH
14277: LD_INT 105
14279: PUSH
14280: LD_INT 106
14282: PUSH
14283: LD_INT 107
14285: PUSH
14286: LD_INT 108
14288: PUSH
14289: LD_INT 109
14291: PUSH
14292: LD_INT 110
14294: PUSH
14295: LD_INT 111
14297: PUSH
14298: LD_INT 112
14300: PUSH
14301: LD_INT 114
14303: PUSH
14304: LD_INT 116
14306: PUSH
14307: LD_INT 117
14309: PUSH
14310: LD_INT 118
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: ST_TO_ADDR
14335: GO 16230
14337: LD_INT 11
14339: DOUBLE
14340: EQUAL
14341: IFTRUE 14345
14343: GO 14549
14345: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14346: LD_ADDR_VAR 0 2
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: LD_INT 3
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: LD_INT 5
14362: PUSH
14363: LD_INT 6
14365: PUSH
14366: LD_INT 7
14368: PUSH
14369: LD_INT 8
14371: PUSH
14372: LD_INT 9
14374: PUSH
14375: LD_INT 10
14377: PUSH
14378: LD_INT 11
14380: PUSH
14381: LD_INT 12
14383: PUSH
14384: LD_INT 13
14386: PUSH
14387: LD_INT 14
14389: PUSH
14390: LD_INT 15
14392: PUSH
14393: LD_INT 16
14395: PUSH
14396: LD_INT 17
14398: PUSH
14399: LD_INT 18
14401: PUSH
14402: LD_INT 19
14404: PUSH
14405: LD_INT 20
14407: PUSH
14408: LD_INT 21
14410: PUSH
14411: LD_INT 22
14413: PUSH
14414: LD_INT 23
14416: PUSH
14417: LD_INT 24
14419: PUSH
14420: LD_INT 25
14422: PUSH
14423: LD_INT 26
14425: PUSH
14426: LD_INT 28
14428: PUSH
14429: LD_INT 30
14431: PUSH
14432: LD_INT 31
14434: PUSH
14435: LD_INT 32
14437: PUSH
14438: LD_INT 34
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 101
14479: PUSH
14480: LD_INT 102
14482: PUSH
14483: LD_INT 103
14485: PUSH
14486: LD_INT 104
14488: PUSH
14489: LD_INT 105
14491: PUSH
14492: LD_INT 106
14494: PUSH
14495: LD_INT 107
14497: PUSH
14498: LD_INT 108
14500: PUSH
14501: LD_INT 109
14503: PUSH
14504: LD_INT 110
14506: PUSH
14507: LD_INT 111
14509: PUSH
14510: LD_INT 112
14512: PUSH
14513: LD_INT 114
14515: PUSH
14516: LD_INT 116
14518: PUSH
14519: LD_INT 117
14521: PUSH
14522: LD_INT 118
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: ST_TO_ADDR
14547: GO 16230
14549: LD_INT 12
14551: DOUBLE
14552: EQUAL
14553: IFTRUE 14557
14555: GO 14777
14557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: LD_INT 4
14574: PUSH
14575: LD_INT 5
14577: PUSH
14578: LD_INT 6
14580: PUSH
14581: LD_INT 7
14583: PUSH
14584: LD_INT 8
14586: PUSH
14587: LD_INT 9
14589: PUSH
14590: LD_INT 10
14592: PUSH
14593: LD_INT 11
14595: PUSH
14596: LD_INT 12
14598: PUSH
14599: LD_INT 13
14601: PUSH
14602: LD_INT 14
14604: PUSH
14605: LD_INT 15
14607: PUSH
14608: LD_INT 16
14610: PUSH
14611: LD_INT 17
14613: PUSH
14614: LD_INT 18
14616: PUSH
14617: LD_INT 19
14619: PUSH
14620: LD_INT 20
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 23
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: LD_INT 25
14637: PUSH
14638: LD_INT 26
14640: PUSH
14641: LD_INT 27
14643: PUSH
14644: LD_INT 28
14646: PUSH
14647: LD_INT 30
14649: PUSH
14650: LD_INT 31
14652: PUSH
14653: LD_INT 32
14655: PUSH
14656: LD_INT 33
14658: PUSH
14659: LD_INT 34
14661: PUSH
14662: LD_INT 36
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 102
14706: PUSH
14707: LD_INT 103
14709: PUSH
14710: LD_INT 104
14712: PUSH
14713: LD_INT 105
14715: PUSH
14716: LD_INT 106
14718: PUSH
14719: LD_INT 107
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 110
14730: PUSH
14731: LD_INT 111
14733: PUSH
14734: LD_INT 112
14736: PUSH
14737: LD_INT 113
14739: PUSH
14740: LD_INT 114
14742: PUSH
14743: LD_INT 116
14745: PUSH
14746: LD_INT 117
14748: PUSH
14749: LD_INT 118
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: ST_TO_ADDR
14775: GO 16230
14777: LD_INT 13
14779: DOUBLE
14780: EQUAL
14781: IFTRUE 14785
14783: GO 14993
14785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: LD_INT 9
14811: PUSH
14812: LD_INT 10
14814: PUSH
14815: LD_INT 11
14817: PUSH
14818: LD_INT 12
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: LD_INT 15
14826: PUSH
14827: LD_INT 16
14829: PUSH
14830: LD_INT 17
14832: PUSH
14833: LD_INT 18
14835: PUSH
14836: LD_INT 19
14838: PUSH
14839: LD_INT 20
14841: PUSH
14842: LD_INT 21
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 23
14850: PUSH
14851: LD_INT 24
14853: PUSH
14854: LD_INT 25
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 27
14862: PUSH
14863: LD_INT 28
14865: PUSH
14866: LD_INT 30
14868: PUSH
14869: LD_INT 31
14871: PUSH
14872: LD_INT 32
14874: PUSH
14875: LD_INT 33
14877: PUSH
14878: LD_INT 34
14880: PUSH
14881: LD_INT 36
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 101
14919: PUSH
14920: LD_INT 102
14922: PUSH
14923: LD_INT 103
14925: PUSH
14926: LD_INT 104
14928: PUSH
14929: LD_INT 105
14931: PUSH
14932: LD_INT 106
14934: PUSH
14935: LD_INT 107
14937: PUSH
14938: LD_INT 108
14940: PUSH
14941: LD_INT 109
14943: PUSH
14944: LD_INT 110
14946: PUSH
14947: LD_INT 111
14949: PUSH
14950: LD_INT 112
14952: PUSH
14953: LD_INT 113
14955: PUSH
14956: LD_INT 114
14958: PUSH
14959: LD_INT 116
14961: PUSH
14962: LD_INT 117
14964: PUSH
14965: LD_INT 118
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: ST_TO_ADDR
14991: GO 16230
14993: LD_INT 14
14995: DOUBLE
14996: EQUAL
14997: IFTRUE 15001
14999: GO 15225
15001: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15002: LD_ADDR_VAR 0 2
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: LD_INT 4
15018: PUSH
15019: LD_INT 5
15021: PUSH
15022: LD_INT 6
15024: PUSH
15025: LD_INT 7
15027: PUSH
15028: LD_INT 8
15030: PUSH
15031: LD_INT 9
15033: PUSH
15034: LD_INT 10
15036: PUSH
15037: LD_INT 11
15039: PUSH
15040: LD_INT 12
15042: PUSH
15043: LD_INT 13
15045: PUSH
15046: LD_INT 14
15048: PUSH
15049: LD_INT 15
15051: PUSH
15052: LD_INT 16
15054: PUSH
15055: LD_INT 17
15057: PUSH
15058: LD_INT 18
15060: PUSH
15061: LD_INT 19
15063: PUSH
15064: LD_INT 20
15066: PUSH
15067: LD_INT 21
15069: PUSH
15070: LD_INT 22
15072: PUSH
15073: LD_INT 23
15075: PUSH
15076: LD_INT 24
15078: PUSH
15079: LD_INT 25
15081: PUSH
15082: LD_INT 26
15084: PUSH
15085: LD_INT 27
15087: PUSH
15088: LD_INT 28
15090: PUSH
15091: LD_INT 29
15093: PUSH
15094: LD_INT 30
15096: PUSH
15097: LD_INT 31
15099: PUSH
15100: LD_INT 32
15102: PUSH
15103: LD_INT 33
15105: PUSH
15106: LD_INT 34
15108: PUSH
15109: LD_INT 36
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 101
15151: PUSH
15152: LD_INT 102
15154: PUSH
15155: LD_INT 103
15157: PUSH
15158: LD_INT 104
15160: PUSH
15161: LD_INT 105
15163: PUSH
15164: LD_INT 106
15166: PUSH
15167: LD_INT 107
15169: PUSH
15170: LD_INT 108
15172: PUSH
15173: LD_INT 109
15175: PUSH
15176: LD_INT 110
15178: PUSH
15179: LD_INT 111
15181: PUSH
15182: LD_INT 112
15184: PUSH
15185: LD_INT 113
15187: PUSH
15188: LD_INT 114
15190: PUSH
15191: LD_INT 116
15193: PUSH
15194: LD_INT 117
15196: PUSH
15197: LD_INT 118
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ST_TO_ADDR
15223: GO 16230
15225: LD_INT 15
15227: DOUBLE
15228: EQUAL
15229: IFTRUE 15233
15231: GO 15457
15233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: LD_INT 1
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: LD_INT 5
15253: PUSH
15254: LD_INT 6
15256: PUSH
15257: LD_INT 7
15259: PUSH
15260: LD_INT 8
15262: PUSH
15263: LD_INT 9
15265: PUSH
15266: LD_INT 10
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: LD_INT 12
15274: PUSH
15275: LD_INT 13
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: LD_INT 15
15283: PUSH
15284: LD_INT 16
15286: PUSH
15287: LD_INT 17
15289: PUSH
15290: LD_INT 18
15292: PUSH
15293: LD_INT 19
15295: PUSH
15296: LD_INT 20
15298: PUSH
15299: LD_INT 21
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 23
15307: PUSH
15308: LD_INT 24
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 27
15319: PUSH
15320: LD_INT 28
15322: PUSH
15323: LD_INT 29
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: LD_INT 32
15334: PUSH
15335: LD_INT 33
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 36
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 101
15383: PUSH
15384: LD_INT 102
15386: PUSH
15387: LD_INT 103
15389: PUSH
15390: LD_INT 104
15392: PUSH
15393: LD_INT 105
15395: PUSH
15396: LD_INT 106
15398: PUSH
15399: LD_INT 107
15401: PUSH
15402: LD_INT 108
15404: PUSH
15405: LD_INT 109
15407: PUSH
15408: LD_INT 110
15410: PUSH
15411: LD_INT 111
15413: PUSH
15414: LD_INT 112
15416: PUSH
15417: LD_INT 113
15419: PUSH
15420: LD_INT 114
15422: PUSH
15423: LD_INT 116
15425: PUSH
15426: LD_INT 117
15428: PUSH
15429: LD_INT 118
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: ST_TO_ADDR
15455: GO 16230
15457: LD_INT 16
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15601
15465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 4
15476: PUSH
15477: LD_INT 5
15479: PUSH
15480: LD_INT 7
15482: PUSH
15483: LD_INT 11
15485: PUSH
15486: LD_INT 12
15488: PUSH
15489: LD_INT 15
15491: PUSH
15492: LD_INT 16
15494: PUSH
15495: LD_INT 20
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_INT 23
15506: PUSH
15507: LD_INT 25
15509: PUSH
15510: LD_INT 26
15512: PUSH
15513: LD_INT 30
15515: PUSH
15516: LD_INT 31
15518: PUSH
15519: LD_INT 32
15521: PUSH
15522: LD_INT 33
15524: PUSH
15525: LD_INT 34
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 101
15551: PUSH
15552: LD_INT 102
15554: PUSH
15555: LD_INT 103
15557: PUSH
15558: LD_INT 106
15560: PUSH
15561: LD_INT 108
15563: PUSH
15564: LD_INT 112
15566: PUSH
15567: LD_INT 113
15569: PUSH
15570: LD_INT 114
15572: PUSH
15573: LD_INT 116
15575: PUSH
15576: LD_INT 117
15578: PUSH
15579: LD_INT 118
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: ST_TO_ADDR
15599: GO 16230
15601: LD_INT 17
15603: DOUBLE
15604: EQUAL
15605: IFTRUE 15609
15607: GO 15833
15609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15610: LD_ADDR_VAR 0 2
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: LD_INT 4
15626: PUSH
15627: LD_INT 5
15629: PUSH
15630: LD_INT 6
15632: PUSH
15633: LD_INT 7
15635: PUSH
15636: LD_INT 8
15638: PUSH
15639: LD_INT 9
15641: PUSH
15642: LD_INT 10
15644: PUSH
15645: LD_INT 11
15647: PUSH
15648: LD_INT 12
15650: PUSH
15651: LD_INT 13
15653: PUSH
15654: LD_INT 14
15656: PUSH
15657: LD_INT 15
15659: PUSH
15660: LD_INT 16
15662: PUSH
15663: LD_INT 17
15665: PUSH
15666: LD_INT 18
15668: PUSH
15669: LD_INT 19
15671: PUSH
15672: LD_INT 20
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 23
15683: PUSH
15684: LD_INT 24
15686: PUSH
15687: LD_INT 25
15689: PUSH
15690: LD_INT 26
15692: PUSH
15693: LD_INT 27
15695: PUSH
15696: LD_INT 28
15698: PUSH
15699: LD_INT 29
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: LD_INT 31
15707: PUSH
15708: LD_INT 32
15710: PUSH
15711: LD_INT 33
15713: PUSH
15714: LD_INT 34
15716: PUSH
15717: LD_INT 36
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 101
15759: PUSH
15760: LD_INT 102
15762: PUSH
15763: LD_INT 103
15765: PUSH
15766: LD_INT 104
15768: PUSH
15769: LD_INT 105
15771: PUSH
15772: LD_INT 106
15774: PUSH
15775: LD_INT 107
15777: PUSH
15778: LD_INT 108
15780: PUSH
15781: LD_INT 109
15783: PUSH
15784: LD_INT 110
15786: PUSH
15787: LD_INT 111
15789: PUSH
15790: LD_INT 112
15792: PUSH
15793: LD_INT 113
15795: PUSH
15796: LD_INT 114
15798: PUSH
15799: LD_INT 116
15801: PUSH
15802: LD_INT 117
15804: PUSH
15805: LD_INT 118
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: ST_TO_ADDR
15831: GO 16230
15833: LD_INT 18
15835: DOUBLE
15836: EQUAL
15837: IFTRUE 15841
15839: GO 15989
15841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15842: LD_ADDR_VAR 0 2
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 4
15852: PUSH
15853: LD_INT 5
15855: PUSH
15856: LD_INT 7
15858: PUSH
15859: LD_INT 11
15861: PUSH
15862: LD_INT 12
15864: PUSH
15865: LD_INT 15
15867: PUSH
15868: LD_INT 16
15870: PUSH
15871: LD_INT 20
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_INT 23
15882: PUSH
15883: LD_INT 25
15885: PUSH
15886: LD_INT 26
15888: PUSH
15889: LD_INT 30
15891: PUSH
15892: LD_INT 31
15894: PUSH
15895: LD_INT 32
15897: PUSH
15898: LD_INT 33
15900: PUSH
15901: LD_INT 34
15903: PUSH
15904: LD_INT 35
15906: PUSH
15907: LD_INT 36
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 101
15935: PUSH
15936: LD_INT 102
15938: PUSH
15939: LD_INT 103
15941: PUSH
15942: LD_INT 106
15944: PUSH
15945: LD_INT 108
15947: PUSH
15948: LD_INT 112
15950: PUSH
15951: LD_INT 113
15953: PUSH
15954: LD_INT 114
15956: PUSH
15957: LD_INT 115
15959: PUSH
15960: LD_INT 116
15962: PUSH
15963: LD_INT 117
15965: PUSH
15966: LD_INT 118
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: ST_TO_ADDR
15987: GO 16230
15989: LD_INT 19
15991: DOUBLE
15992: EQUAL
15993: IFTRUE 15997
15995: GO 16229
15997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: LD_INT 1
16005: PUSH
16006: LD_INT 2
16008: PUSH
16009: LD_INT 3
16011: PUSH
16012: LD_INT 4
16014: PUSH
16015: LD_INT 5
16017: PUSH
16018: LD_INT 6
16020: PUSH
16021: LD_INT 7
16023: PUSH
16024: LD_INT 8
16026: PUSH
16027: LD_INT 9
16029: PUSH
16030: LD_INT 10
16032: PUSH
16033: LD_INT 11
16035: PUSH
16036: LD_INT 12
16038: PUSH
16039: LD_INT 13
16041: PUSH
16042: LD_INT 14
16044: PUSH
16045: LD_INT 15
16047: PUSH
16048: LD_INT 16
16050: PUSH
16051: LD_INT 17
16053: PUSH
16054: LD_INT 18
16056: PUSH
16057: LD_INT 19
16059: PUSH
16060: LD_INT 20
16062: PUSH
16063: LD_INT 21
16065: PUSH
16066: LD_INT 22
16068: PUSH
16069: LD_INT 23
16071: PUSH
16072: LD_INT 24
16074: PUSH
16075: LD_INT 25
16077: PUSH
16078: LD_INT 26
16080: PUSH
16081: LD_INT 27
16083: PUSH
16084: LD_INT 28
16086: PUSH
16087: LD_INT 29
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 31
16095: PUSH
16096: LD_INT 32
16098: PUSH
16099: LD_INT 33
16101: PUSH
16102: LD_INT 34
16104: PUSH
16105: LD_INT 35
16107: PUSH
16108: LD_INT 36
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 101
16151: PUSH
16152: LD_INT 102
16154: PUSH
16155: LD_INT 103
16157: PUSH
16158: LD_INT 104
16160: PUSH
16161: LD_INT 105
16163: PUSH
16164: LD_INT 106
16166: PUSH
16167: LD_INT 107
16169: PUSH
16170: LD_INT 108
16172: PUSH
16173: LD_INT 109
16175: PUSH
16176: LD_INT 110
16178: PUSH
16179: LD_INT 111
16181: PUSH
16182: LD_INT 112
16184: PUSH
16185: LD_INT 113
16187: PUSH
16188: LD_INT 114
16190: PUSH
16191: LD_INT 115
16193: PUSH
16194: LD_INT 116
16196: PUSH
16197: LD_INT 117
16199: PUSH
16200: LD_INT 118
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: ST_TO_ADDR
16227: GO 16230
16229: POP
// end else
16230: GO 16461
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: LD_INT 4
16248: PUSH
16249: LD_INT 5
16251: PUSH
16252: LD_INT 6
16254: PUSH
16255: LD_INT 7
16257: PUSH
16258: LD_INT 8
16260: PUSH
16261: LD_INT 9
16263: PUSH
16264: LD_INT 10
16266: PUSH
16267: LD_INT 11
16269: PUSH
16270: LD_INT 12
16272: PUSH
16273: LD_INT 13
16275: PUSH
16276: LD_INT 14
16278: PUSH
16279: LD_INT 15
16281: PUSH
16282: LD_INT 16
16284: PUSH
16285: LD_INT 17
16287: PUSH
16288: LD_INT 18
16290: PUSH
16291: LD_INT 19
16293: PUSH
16294: LD_INT 20
16296: PUSH
16297: LD_INT 21
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_INT 23
16305: PUSH
16306: LD_INT 24
16308: PUSH
16309: LD_INT 25
16311: PUSH
16312: LD_INT 26
16314: PUSH
16315: LD_INT 27
16317: PUSH
16318: LD_INT 28
16320: PUSH
16321: LD_INT 29
16323: PUSH
16324: LD_INT 30
16326: PUSH
16327: LD_INT 31
16329: PUSH
16330: LD_INT 32
16332: PUSH
16333: LD_INT 33
16335: PUSH
16336: LD_INT 34
16338: PUSH
16339: LD_INT 35
16341: PUSH
16342: LD_INT 36
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 101
16385: PUSH
16386: LD_INT 102
16388: PUSH
16389: LD_INT 103
16391: PUSH
16392: LD_INT 104
16394: PUSH
16395: LD_INT 105
16397: PUSH
16398: LD_INT 106
16400: PUSH
16401: LD_INT 107
16403: PUSH
16404: LD_INT 108
16406: PUSH
16407: LD_INT 109
16409: PUSH
16410: LD_INT 110
16412: PUSH
16413: LD_INT 111
16415: PUSH
16416: LD_INT 112
16418: PUSH
16419: LD_INT 113
16421: PUSH
16422: LD_INT 114
16424: PUSH
16425: LD_INT 115
16427: PUSH
16428: LD_INT 116
16430: PUSH
16431: LD_INT 117
16433: PUSH
16434: LD_INT 118
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: ST_TO_ADDR
// if result then
16461: LD_VAR 0 2
16465: IFFALSE 17251
// begin normal :=  ;
16467: LD_ADDR_VAR 0 5
16471: PUSH
16472: LD_STRING 
16474: ST_TO_ADDR
// hardcore :=  ;
16475: LD_ADDR_VAR 0 6
16479: PUSH
16480: LD_STRING 
16482: ST_TO_ADDR
// active :=  ;
16483: LD_ADDR_VAR 0 7
16487: PUSH
16488: LD_STRING 
16490: ST_TO_ADDR
// for i = 1 to normalCounter do
16491: LD_ADDR_VAR 0 8
16495: PUSH
16496: DOUBLE
16497: LD_INT 1
16499: DEC
16500: ST_TO_ADDR
16501: LD_EXP 28
16505: PUSH
16506: FOR_TO
16507: IFFALSE 16608
// begin tmp := 0 ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_STRING 0
16516: ST_TO_ADDR
// if result [ 1 ] then
16517: LD_VAR 0 2
16521: PUSH
16522: LD_INT 1
16524: ARRAY
16525: IFFALSE 16590
// if result [ 1 ] [ 1 ] = i then
16527: LD_VAR 0 2
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PUSH
16540: LD_VAR 0 8
16544: EQUAL
16545: IFFALSE 16590
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: LD_VAR 0 2
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 1
16567: ARRAY
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 3
16576: PPUSH
16577: CALL_OW 1
16581: ST_TO_ADDR
// tmp := 1 ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_STRING 1
16589: ST_TO_ADDR
// end ; normal := normal & tmp ;
16590: LD_ADDR_VAR 0 5
16594: PUSH
16595: LD_VAR 0 5
16599: PUSH
16600: LD_VAR 0 3
16604: STR
16605: ST_TO_ADDR
// end ;
16606: GO 16506
16608: POP
16609: POP
// for i = 1 to hardcoreCounter do
16610: LD_ADDR_VAR 0 8
16614: PUSH
16615: DOUBLE
16616: LD_INT 1
16618: DEC
16619: ST_TO_ADDR
16620: LD_EXP 29
16624: PUSH
16625: FOR_TO
16626: IFFALSE 16731
// begin tmp := 0 ;
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: LD_STRING 0
16635: ST_TO_ADDR
// if result [ 2 ] then
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: IFFALSE 16713
// if result [ 2 ] [ 1 ] = 100 + i then
16646: LD_VAR 0 2
16650: PUSH
16651: LD_INT 2
16653: ARRAY
16654: PUSH
16655: LD_INT 1
16657: ARRAY
16658: PUSH
16659: LD_INT 100
16661: PUSH
16662: LD_VAR 0 8
16666: PLUS
16667: EQUAL
16668: IFFALSE 16713
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16670: LD_ADDR_VAR 0 2
16674: PUSH
16675: LD_VAR 0 2
16679: PPUSH
16680: LD_INT 2
16682: PPUSH
16683: LD_VAR 0 2
16687: PUSH
16688: LD_INT 2
16690: ARRAY
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 3
16699: PPUSH
16700: CALL_OW 1
16704: ST_TO_ADDR
// tmp := 1 ;
16705: LD_ADDR_VAR 0 3
16709: PUSH
16710: LD_STRING 1
16712: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16713: LD_ADDR_VAR 0 6
16717: PUSH
16718: LD_VAR 0 6
16722: PUSH
16723: LD_VAR 0 3
16727: STR
16728: ST_TO_ADDR
// end ;
16729: GO 16625
16731: POP
16732: POP
// if isGameLoad then
16733: LD_VAR 0 1
16737: IFFALSE 17212
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16739: LD_ADDR_VAR 0 4
16743: PUSH
16744: LD_EXP 32
16748: PUSH
16749: LD_EXP 31
16753: PUSH
16754: LD_EXP 33
16758: PUSH
16759: LD_EXP 30
16763: PUSH
16764: LD_EXP 34
16768: PUSH
16769: LD_EXP 35
16773: PUSH
16774: LD_EXP 36
16778: PUSH
16779: LD_EXP 37
16783: PUSH
16784: LD_EXP 38
16788: PUSH
16789: LD_EXP 39
16793: PUSH
16794: LD_EXP 40
16798: PUSH
16799: LD_EXP 41
16803: PUSH
16804: LD_EXP 42
16808: PUSH
16809: LD_EXP 43
16813: PUSH
16814: LD_EXP 51
16818: PUSH
16819: LD_EXP 52
16823: PUSH
16824: LD_EXP 53
16828: PUSH
16829: LD_EXP 54
16833: PUSH
16834: LD_EXP 56
16838: PUSH
16839: LD_EXP 57
16843: PUSH
16844: LD_EXP 58
16848: PUSH
16849: LD_EXP 61
16853: PUSH
16854: LD_EXP 63
16858: PUSH
16859: LD_EXP 64
16863: PUSH
16864: LD_EXP 65
16868: PUSH
16869: LD_EXP 67
16873: PUSH
16874: LD_EXP 68
16878: PUSH
16879: LD_EXP 71
16883: PUSH
16884: LD_EXP 72
16888: PUSH
16889: LD_EXP 73
16893: PUSH
16894: LD_EXP 74
16898: PUSH
16899: LD_EXP 75
16903: PUSH
16904: LD_EXP 76
16908: PUSH
16909: LD_EXP 77
16913: PUSH
16914: LD_EXP 78
16918: PUSH
16919: LD_EXP 79
16923: PUSH
16924: LD_EXP 44
16928: PUSH
16929: LD_EXP 45
16933: PUSH
16934: LD_EXP 48
16938: PUSH
16939: LD_EXP 49
16943: PUSH
16944: LD_EXP 50
16948: PUSH
16949: LD_EXP 46
16953: PUSH
16954: LD_EXP 47
16958: PUSH
16959: LD_EXP 55
16963: PUSH
16964: LD_EXP 59
16968: PUSH
16969: LD_EXP 60
16973: PUSH
16974: LD_EXP 62
16978: PUSH
16979: LD_EXP 66
16983: PUSH
16984: LD_EXP 69
16988: PUSH
16989: LD_EXP 70
16993: PUSH
16994: LD_EXP 80
16998: PUSH
16999: LD_EXP 81
17003: PUSH
17004: LD_EXP 82
17008: PUSH
17009: LD_EXP 83
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: ST_TO_ADDR
// tmp :=  ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_STRING 
17077: ST_TO_ADDR
// for i = 1 to normalCounter do
17078: LD_ADDR_VAR 0 8
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_EXP 28
17092: PUSH
17093: FOR_TO
17094: IFFALSE 17130
// begin if flags [ i ] then
17096: LD_VAR 0 4
17100: PUSH
17101: LD_VAR 0 8
17105: ARRAY
17106: IFFALSE 17128
// tmp := tmp & i & ; ;
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_VAR 0 3
17117: PUSH
17118: LD_VAR 0 8
17122: STR
17123: PUSH
17124: LD_STRING ;
17126: STR
17127: ST_TO_ADDR
// end ;
17128: GO 17093
17130: POP
17131: POP
// for i = 1 to hardcoreCounter do
17132: LD_ADDR_VAR 0 8
17136: PUSH
17137: DOUBLE
17138: LD_INT 1
17140: DEC
17141: ST_TO_ADDR
17142: LD_EXP 29
17146: PUSH
17147: FOR_TO
17148: IFFALSE 17194
// begin if flags [ normalCounter + i ] then
17150: LD_VAR 0 4
17154: PUSH
17155: LD_EXP 28
17159: PUSH
17160: LD_VAR 0 8
17164: PLUS
17165: ARRAY
17166: IFFALSE 17192
// tmp := tmp & ( 100 + i ) & ; ;
17168: LD_ADDR_VAR 0 3
17172: PUSH
17173: LD_VAR 0 3
17177: PUSH
17178: LD_INT 100
17180: PUSH
17181: LD_VAR 0 8
17185: PLUS
17186: STR
17187: PUSH
17188: LD_STRING ;
17190: STR
17191: ST_TO_ADDR
// end ;
17192: GO 17147
17194: POP
17195: POP
// if tmp then
17196: LD_VAR 0 3
17200: IFFALSE 17212
// active := tmp ;
17202: LD_ADDR_VAR 0 7
17206: PUSH
17207: LD_VAR 0 3
17211: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17212: LD_STRING getStreamItemsFromMission("
17214: PUSH
17215: LD_VAR 0 5
17219: STR
17220: PUSH
17221: LD_STRING ","
17223: STR
17224: PUSH
17225: LD_VAR 0 6
17229: STR
17230: PUSH
17231: LD_STRING ","
17233: STR
17234: PUSH
17235: LD_VAR 0 7
17239: STR
17240: PUSH
17241: LD_STRING ")
17243: STR
17244: PPUSH
17245: CALL_OW 559
// end else
17249: GO 17258
// ToLua ( getStreamItemsFromMission("","","") ) ;
17251: LD_STRING getStreamItemsFromMission("","","")
17253: PPUSH
17254: CALL_OW 559
// end ;
17258: LD_VAR 0 2
17262: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17263: LD_EXP 27
17267: PUSH
17268: LD_EXP 32
17272: AND
17273: IFFALSE 17397
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
// begin enable ;
17282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17283: LD_ADDR_VAR 0 2
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_OWVAR 2
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 2
17302: PUSH
17303: LD_INT 34
17305: PUSH
17306: LD_INT 7
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 45
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 34
17325: PUSH
17326: LD_INT 28
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 34
17335: PUSH
17336: LD_INT 47
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: ST_TO_ADDR
// if not tmp then
17359: LD_VAR 0 2
17363: NOT
17364: IFFALSE 17368
// exit ;
17366: GO 17397
// for i in tmp do
17368: LD_ADDR_VAR 0 1
17372: PUSH
17373: LD_VAR 0 2
17377: PUSH
17378: FOR_IN
17379: IFFALSE 17395
// begin SetLives ( i , 0 ) ;
17381: LD_VAR 0 1
17385: PPUSH
17386: LD_INT 0
17388: PPUSH
17389: CALL_OW 234
// end ;
17393: GO 17378
17395: POP
17396: POP
// end ;
17397: PPOPN 2
17399: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17400: LD_EXP 27
17404: PUSH
17405: LD_EXP 33
17409: AND
17410: IFFALSE 17494
17412: GO 17414
17414: DISABLE
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
// begin enable ;
17419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_INT 22
17427: PUSH
17428: LD_OWVAR 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 32
17439: PUSH
17440: LD_INT 3
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: ST_TO_ADDR
// if not tmp then
17456: LD_VAR 0 2
17460: NOT
17461: IFFALSE 17465
// exit ;
17463: GO 17494
// for i in tmp do
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: LD_VAR 0 2
17474: PUSH
17475: FOR_IN
17476: IFFALSE 17492
// begin SetLives ( i , 0 ) ;
17478: LD_VAR 0 1
17482: PPUSH
17483: LD_INT 0
17485: PPUSH
17486: CALL_OW 234
// end ;
17490: GO 17475
17492: POP
17493: POP
// end ;
17494: PPOPN 2
17496: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17497: LD_EXP 27
17501: PUSH
17502: LD_EXP 30
17506: AND
17507: IFFALSE 17600
17509: GO 17511
17511: DISABLE
17512: LD_INT 0
17514: PPUSH
// begin enable ;
17515: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17516: LD_ADDR_VAR 0 1
17520: PUSH
17521: LD_INT 22
17523: PUSH
17524: LD_OWVAR 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 5
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 9
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 25
17558: PUSH
17559: LD_INT 8
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 69
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17598
// begin SetClass ( i , 1 ) ;
17584: LD_VAR 0 1
17588: PPUSH
17589: LD_INT 1
17591: PPUSH
17592: CALL_OW 336
// end ;
17596: GO 17581
17598: POP
17599: POP
// end ;
17600: PPOPN 1
17602: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17603: LD_EXP 27
17607: PUSH
17608: LD_EXP 31
17612: AND
17613: PUSH
17614: LD_OWVAR 65
17618: PUSH
17619: LD_INT 7
17621: LESS
17622: AND
17623: IFFALSE 17637
17625: GO 17627
17627: DISABLE
// begin enable ;
17628: ENABLE
// game_speed := 7 ;
17629: LD_ADDR_OWVAR 65
17633: PUSH
17634: LD_INT 7
17636: ST_TO_ADDR
// end ;
17637: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17638: LD_EXP 27
17642: PUSH
17643: LD_EXP 34
17647: AND
17648: IFFALSE 17850
17650: GO 17652
17652: DISABLE
17653: LD_INT 0
17655: PPUSH
17656: PPUSH
17657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_INT 81
17665: PUSH
17666: LD_OWVAR 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 21
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PPUSH
17689: CALL_OW 69
17693: ST_TO_ADDR
// if not tmp then
17694: LD_VAR 0 3
17698: NOT
17699: IFFALSE 17703
// exit ;
17701: GO 17850
// if tmp > 5 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 5
17710: GREATER
17711: IFFALSE 17723
// k := 5 else
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_INT 5
17720: ST_TO_ADDR
17721: GO 17733
// k := tmp ;
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_VAR 0 3
17732: ST_TO_ADDR
// for i := 1 to k do
17733: LD_ADDR_VAR 0 1
17737: PUSH
17738: DOUBLE
17739: LD_INT 1
17741: DEC
17742: ST_TO_ADDR
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_TO
17749: IFFALSE 17848
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17751: LD_VAR 0 3
17755: PUSH
17756: LD_VAR 0 1
17760: ARRAY
17761: PPUSH
17762: LD_VAR 0 1
17766: PUSH
17767: LD_INT 4
17769: MOD
17770: PUSH
17771: LD_INT 1
17773: PLUS
17774: PPUSH
17775: CALL_OW 259
17779: PUSH
17780: LD_INT 10
17782: LESS
17783: IFFALSE 17846
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17785: LD_VAR 0 3
17789: PUSH
17790: LD_VAR 0 1
17794: ARRAY
17795: PPUSH
17796: LD_VAR 0 1
17800: PUSH
17801: LD_INT 4
17803: MOD
17804: PUSH
17805: LD_INT 1
17807: PLUS
17808: PPUSH
17809: LD_VAR 0 3
17813: PUSH
17814: LD_VAR 0 1
17818: ARRAY
17819: PPUSH
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 4
17827: MOD
17828: PUSH
17829: LD_INT 1
17831: PLUS
17832: PPUSH
17833: CALL_OW 259
17837: PUSH
17838: LD_INT 1
17840: PLUS
17841: PPUSH
17842: CALL_OW 237
17846: GO 17748
17848: POP
17849: POP
// end ;
17850: PPOPN 3
17852: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17853: LD_EXP 27
17857: PUSH
17858: LD_EXP 35
17862: AND
17863: IFFALSE 17883
17865: GO 17867
17867: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17868: LD_INT 4
17870: PPUSH
17871: LD_OWVAR 2
17875: PPUSH
17876: LD_INT 0
17878: PPUSH
17879: CALL_OW 324
17883: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17884: LD_EXP 27
17888: PUSH
17889: LD_EXP 64
17893: AND
17894: IFFALSE 17914
17896: GO 17898
17898: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17899: LD_INT 19
17901: PPUSH
17902: LD_OWVAR 2
17906: PPUSH
17907: LD_INT 0
17909: PPUSH
17910: CALL_OW 324
17914: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17915: LD_EXP 27
17919: PUSH
17920: LD_EXP 36
17924: AND
17925: IFFALSE 18027
17927: GO 17929
17929: DISABLE
17930: LD_INT 0
17932: PPUSH
17933: PPUSH
// begin enable ;
17934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: LD_INT 22
17942: PUSH
17943: LD_OWVAR 2
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: LD_INT 34
17957: PUSH
17958: LD_INT 11
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 34
17967: PUSH
17968: LD_INT 30
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PPUSH
17984: CALL_OW 69
17988: ST_TO_ADDR
// if not tmp then
17989: LD_VAR 0 2
17993: NOT
17994: IFFALSE 17998
// exit ;
17996: GO 18027
// for i in tmp do
17998: LD_ADDR_VAR 0 1
18002: PUSH
18003: LD_VAR 0 2
18007: PUSH
18008: FOR_IN
18009: IFFALSE 18025
// begin SetLives ( i , 0 ) ;
18011: LD_VAR 0 1
18015: PPUSH
18016: LD_INT 0
18018: PPUSH
18019: CALL_OW 234
// end ;
18023: GO 18008
18025: POP
18026: POP
// end ;
18027: PPOPN 2
18029: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18030: LD_EXP 27
18034: PUSH
18035: LD_EXP 37
18039: AND
18040: IFFALSE 18060
18042: GO 18044
18044: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18045: LD_INT 32
18047: PPUSH
18048: LD_OWVAR 2
18052: PPUSH
18053: LD_INT 0
18055: PPUSH
18056: CALL_OW 324
18060: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18061: LD_EXP 27
18065: PUSH
18066: LD_EXP 38
18070: AND
18071: IFFALSE 18252
18073: GO 18075
18075: DISABLE
18076: LD_INT 0
18078: PPUSH
18079: PPUSH
18080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18081: LD_ADDR_VAR 0 2
18085: PUSH
18086: LD_INT 22
18088: PUSH
18089: LD_OWVAR 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 33
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PPUSH
18112: CALL_OW 69
18116: ST_TO_ADDR
// if not tmp then
18117: LD_VAR 0 2
18121: NOT
18122: IFFALSE 18126
// exit ;
18124: GO 18252
// side := 0 ;
18126: LD_ADDR_VAR 0 3
18130: PUSH
18131: LD_INT 0
18133: ST_TO_ADDR
// for i := 1 to 8 do
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: DOUBLE
18140: LD_INT 1
18142: DEC
18143: ST_TO_ADDR
18144: LD_INT 8
18146: PUSH
18147: FOR_TO
18148: IFFALSE 18196
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18150: LD_OWVAR 2
18154: PUSH
18155: LD_VAR 0 1
18159: NONEQUAL
18160: PUSH
18161: LD_OWVAR 2
18165: PPUSH
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 81
18175: PUSH
18176: LD_INT 2
18178: EQUAL
18179: AND
18180: IFFALSE 18194
// begin side := i ;
18182: LD_ADDR_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: ST_TO_ADDR
// break ;
18192: GO 18196
// end ;
18194: GO 18147
18196: POP
18197: POP
// if not side then
18198: LD_VAR 0 3
18202: NOT
18203: IFFALSE 18207
// exit ;
18205: GO 18252
// for i := 1 to tmp do
18207: LD_ADDR_VAR 0 1
18211: PUSH
18212: DOUBLE
18213: LD_INT 1
18215: DEC
18216: ST_TO_ADDR
18217: LD_VAR 0 2
18221: PUSH
18222: FOR_TO
18223: IFFALSE 18250
// if Prob ( 60 ) then
18225: LD_INT 60
18227: PPUSH
18228: CALL_OW 13
18232: IFFALSE 18248
// SetSide ( i , side ) ;
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_VAR 0 3
18243: PPUSH
18244: CALL_OW 235
18248: GO 18222
18250: POP
18251: POP
// end ;
18252: PPOPN 3
18254: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18255: LD_EXP 27
18259: PUSH
18260: LD_EXP 40
18264: AND
18265: IFFALSE 18384
18267: GO 18269
18269: DISABLE
18270: LD_INT 0
18272: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18273: LD_ADDR_VAR 0 1
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_OWVAR 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 21
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 23
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: PPUSH
18322: CALL_OW 69
18326: PUSH
18327: FOR_IN
18328: IFFALSE 18382
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18330: LD_VAR 0 1
18334: PPUSH
18335: CALL_OW 257
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 4
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: IN
18358: IFFALSE 18380
// SetClass ( un , rand ( 1 , 4 ) ) ;
18360: LD_VAR 0 1
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: LD_INT 4
18370: PPUSH
18371: CALL_OW 12
18375: PPUSH
18376: CALL_OW 336
18380: GO 18327
18382: POP
18383: POP
// end ;
18384: PPOPN 1
18386: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18387: LD_EXP 27
18391: PUSH
18392: LD_EXP 39
18396: AND
18397: IFFALSE 18476
18399: GO 18401
18401: DISABLE
18402: LD_INT 0
18404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18405: LD_ADDR_VAR 0 1
18409: PUSH
18410: LD_INT 22
18412: PUSH
18413: LD_OWVAR 2
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 3
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: ST_TO_ADDR
// if not tmp then
18441: LD_VAR 0 1
18445: NOT
18446: IFFALSE 18450
// exit ;
18448: GO 18476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18450: LD_VAR 0 1
18454: PUSH
18455: LD_INT 1
18457: PPUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 12
18467: ARRAY
18468: PPUSH
18469: LD_INT 100
18471: PPUSH
18472: CALL_OW 234
// end ;
18476: PPOPN 1
18478: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18479: LD_EXP 27
18483: PUSH
18484: LD_EXP 41
18488: AND
18489: IFFALSE 18587
18491: GO 18493
18493: DISABLE
18494: LD_INT 0
18496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18497: LD_ADDR_VAR 0 1
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_OWVAR 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 69
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 1
18537: NOT
18538: IFFALSE 18542
// exit ;
18540: GO 18587
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 1
18549: PPUSH
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 12
18559: ARRAY
18560: PPUSH
18561: LD_INT 1
18563: PPUSH
18564: LD_INT 4
18566: PPUSH
18567: CALL_OW 12
18571: PPUSH
18572: LD_INT 3000
18574: PPUSH
18575: LD_INT 9000
18577: PPUSH
18578: CALL_OW 12
18582: PPUSH
18583: CALL_OW 492
// end ;
18587: PPOPN 1
18589: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18590: LD_EXP 27
18594: PUSH
18595: LD_EXP 42
18599: AND
18600: IFFALSE 18620
18602: GO 18604
18604: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18605: LD_INT 1
18607: PPUSH
18608: LD_OWVAR 2
18612: PPUSH
18613: LD_INT 0
18615: PPUSH
18616: CALL_OW 324
18620: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18621: LD_EXP 27
18625: PUSH
18626: LD_EXP 43
18630: AND
18631: IFFALSE 18714
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 22
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 3
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 2
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18714
// for i in tmp do
18685: LD_ADDR_VAR 0 1
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: FOR_IN
18696: IFFALSE 18712
// SetBLevel ( i , 10 ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_INT 10
18705: PPUSH
18706: CALL_OW 241
18710: GO 18695
18712: POP
18713: POP
// end ;
18714: PPOPN 2
18716: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18717: LD_EXP 27
18721: PUSH
18722: LD_EXP 44
18726: AND
18727: IFFALSE 18838
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18737: LD_ADDR_VAR 0 3
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_OWVAR 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 25
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 3
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18838
// un := tmp [ rand ( 1 , tmp ) ] ;
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 3
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_VAR 0 3
18799: PPUSH
18800: CALL_OW 12
18804: ARRAY
18805: ST_TO_ADDR
// if Crawls ( un ) then
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL_OW 318
18815: IFFALSE 18826
// ComWalk ( un ) ;
18817: LD_VAR 0 2
18821: PPUSH
18822: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18826: LD_VAR 0 2
18830: PPUSH
18831: LD_INT 5
18833: PPUSH
18834: CALL_OW 336
// end ;
18838: PPOPN 3
18840: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18841: LD_EXP 27
18845: PUSH
18846: LD_EXP 45
18850: AND
18851: PUSH
18852: LD_OWVAR 67
18856: PUSH
18857: LD_INT 4
18859: LESS
18860: AND
18861: IFFALSE 18880
18863: GO 18865
18865: DISABLE
// begin Difficulty := Difficulty + 1 ;
18866: LD_ADDR_OWVAR 67
18870: PUSH
18871: LD_OWVAR 67
18875: PUSH
18876: LD_INT 1
18878: PLUS
18879: ST_TO_ADDR
// end ;
18880: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18881: LD_EXP 27
18885: PUSH
18886: LD_EXP 46
18890: AND
18891: IFFALSE 18994
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
// begin for i := 1 to 5 do
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: DOUBLE
18905: LD_INT 1
18907: DEC
18908: ST_TO_ADDR
18909: LD_INT 5
18911: PUSH
18912: FOR_TO
18913: IFFALSE 18992
// begin uc_nation := nation_nature ;
18915: LD_ADDR_OWVAR 21
18919: PUSH
18920: LD_INT 0
18922: ST_TO_ADDR
// uc_side := 0 ;
18923: LD_ADDR_OWVAR 20
18927: PUSH
18928: LD_INT 0
18930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18931: LD_ADDR_OWVAR 29
18935: PUSH
18936: LD_INT 12
18938: PUSH
18939: LD_INT 12
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: ST_TO_ADDR
// hc_agressivity := 20 ;
18946: LD_ADDR_OWVAR 35
18950: PUSH
18951: LD_INT 20
18953: ST_TO_ADDR
// hc_class := class_tiger ;
18954: LD_ADDR_OWVAR 28
18958: PUSH
18959: LD_INT 14
18961: ST_TO_ADDR
// hc_gallery :=  ;
18962: LD_ADDR_OWVAR 33
18966: PUSH
18967: LD_STRING 
18969: ST_TO_ADDR
// hc_name :=  ;
18970: LD_ADDR_OWVAR 26
18974: PUSH
18975: LD_STRING 
18977: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18978: CALL_OW 44
18982: PPUSH
18983: LD_INT 0
18985: PPUSH
18986: CALL_OW 51
// end ;
18990: GO 18912
18992: POP
18993: POP
// end ;
18994: PPOPN 1
18996: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18997: LD_EXP 27
19001: PUSH
19002: LD_EXP 47
19006: AND
19007: IFFALSE 19016
19009: GO 19011
19011: DISABLE
// StreamSibBomb ;
19012: CALL 19017 0 0
19016: END
// export function StreamSibBomb ; var i , x , y ; begin
19017: LD_INT 0
19019: PPUSH
19020: PPUSH
19021: PPUSH
19022: PPUSH
// result := false ;
19023: LD_ADDR_VAR 0 1
19027: PUSH
19028: LD_INT 0
19030: ST_TO_ADDR
// for i := 1 to 16 do
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: DOUBLE
19037: LD_INT 1
19039: DEC
19040: ST_TO_ADDR
19041: LD_INT 16
19043: PUSH
19044: FOR_TO
19045: IFFALSE 19244
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19047: LD_ADDR_VAR 0 3
19051: PUSH
19052: LD_INT 10
19054: PUSH
19055: LD_INT 20
19057: PUSH
19058: LD_INT 30
19060: PUSH
19061: LD_INT 40
19063: PUSH
19064: LD_INT 50
19066: PUSH
19067: LD_INT 60
19069: PUSH
19070: LD_INT 70
19072: PUSH
19073: LD_INT 80
19075: PUSH
19076: LD_INT 90
19078: PUSH
19079: LD_INT 100
19081: PUSH
19082: LD_INT 110
19084: PUSH
19085: LD_INT 120
19087: PUSH
19088: LD_INT 130
19090: PUSH
19091: LD_INT 140
19093: PUSH
19094: LD_INT 150
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PPUSH
19117: LD_INT 15
19119: PPUSH
19120: CALL_OW 12
19124: ARRAY
19125: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19126: LD_ADDR_VAR 0 4
19130: PUSH
19131: LD_INT 10
19133: PUSH
19134: LD_INT 20
19136: PUSH
19137: LD_INT 30
19139: PUSH
19140: LD_INT 40
19142: PUSH
19143: LD_INT 50
19145: PUSH
19146: LD_INT 60
19148: PUSH
19149: LD_INT 70
19151: PUSH
19152: LD_INT 80
19154: PUSH
19155: LD_INT 90
19157: PUSH
19158: LD_INT 100
19160: PUSH
19161: LD_INT 110
19163: PUSH
19164: LD_INT 120
19166: PUSH
19167: LD_INT 130
19169: PUSH
19170: LD_INT 140
19172: PUSH
19173: LD_INT 150
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: PPUSH
19196: LD_INT 15
19198: PPUSH
19199: CALL_OW 12
19203: ARRAY
19204: ST_TO_ADDR
// if ValidHex ( x , y ) then
19205: LD_VAR 0 3
19209: PPUSH
19210: LD_VAR 0 4
19214: PPUSH
19215: CALL_OW 488
19219: IFFALSE 19242
// begin result := [ x , y ] ;
19221: LD_ADDR_VAR 0 1
19225: PUSH
19226: LD_VAR 0 3
19230: PUSH
19231: LD_VAR 0 4
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: ST_TO_ADDR
// break ;
19240: GO 19244
// end ; end ;
19242: GO 19044
19244: POP
19245: POP
// if result then
19246: LD_VAR 0 1
19250: IFFALSE 19310
// begin ToLua ( playSibBomb() ) ;
19252: LD_STRING playSibBomb()
19254: PPUSH
19255: CALL_OW 559
// wait ( 0 0$14 ) ;
19259: LD_INT 490
19261: PPUSH
19262: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19266: LD_VAR 0 1
19270: PUSH
19271: LD_INT 1
19273: ARRAY
19274: PPUSH
19275: LD_VAR 0 1
19279: PUSH
19280: LD_INT 2
19282: ARRAY
19283: PPUSH
19284: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19288: LD_VAR 0 1
19292: PUSH
19293: LD_INT 1
19295: ARRAY
19296: PPUSH
19297: LD_VAR 0 1
19301: PUSH
19302: LD_INT 2
19304: ARRAY
19305: PPUSH
19306: CALL_OW 429
// end ; end ;
19310: LD_VAR 0 1
19314: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19315: LD_EXP 27
19319: PUSH
19320: LD_EXP 49
19324: AND
19325: IFFALSE 19337
19327: GO 19329
19329: DISABLE
// YouLost (  ) ;
19330: LD_STRING 
19332: PPUSH
19333: CALL_OW 104
19337: END
// every 0 0$1 trigger StreamModeActive and sFog do
19338: LD_EXP 27
19342: PUSH
19343: LD_EXP 48
19347: AND
19348: IFFALSE 19362
19350: GO 19352
19352: DISABLE
// FogOff ( your_side ) ;
19353: LD_OWVAR 2
19357: PPUSH
19358: CALL_OW 344
19362: END
// every 0 0$1 trigger StreamModeActive and sSun do
19363: LD_EXP 27
19367: PUSH
19368: LD_EXP 50
19372: AND
19373: IFFALSE 19401
19375: GO 19377
19377: DISABLE
// begin solar_recharge_percent := 0 ;
19378: LD_ADDR_OWVAR 79
19382: PUSH
19383: LD_INT 0
19385: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19386: LD_INT 10500
19388: PPUSH
19389: CALL_OW 67
// solar_recharge_percent := 100 ;
19393: LD_ADDR_OWVAR 79
19397: PUSH
19398: LD_INT 100
19400: ST_TO_ADDR
// end ;
19401: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19402: LD_EXP 27
19406: PUSH
19407: LD_EXP 51
19411: AND
19412: IFFALSE 19651
19414: GO 19416
19416: DISABLE
19417: LD_INT 0
19419: PPUSH
19420: PPUSH
19421: PPUSH
// begin tmp := [ ] ;
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: EMPTY
19428: ST_TO_ADDR
// for i := 1 to 6 do
19429: LD_ADDR_VAR 0 1
19433: PUSH
19434: DOUBLE
19435: LD_INT 1
19437: DEC
19438: ST_TO_ADDR
19439: LD_INT 6
19441: PUSH
19442: FOR_TO
19443: IFFALSE 19548
// begin uc_nation := nation_nature ;
19445: LD_ADDR_OWVAR 21
19449: PUSH
19450: LD_INT 0
19452: ST_TO_ADDR
// uc_side := 0 ;
19453: LD_ADDR_OWVAR 20
19457: PUSH
19458: LD_INT 0
19460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19461: LD_ADDR_OWVAR 29
19465: PUSH
19466: LD_INT 12
19468: PUSH
19469: LD_INT 12
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ST_TO_ADDR
// hc_agressivity := 20 ;
19476: LD_ADDR_OWVAR 35
19480: PUSH
19481: LD_INT 20
19483: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19484: LD_ADDR_OWVAR 28
19488: PUSH
19489: LD_INT 17
19491: ST_TO_ADDR
// hc_gallery :=  ;
19492: LD_ADDR_OWVAR 33
19496: PUSH
19497: LD_STRING 
19499: ST_TO_ADDR
// hc_name :=  ;
19500: LD_ADDR_OWVAR 26
19504: PUSH
19505: LD_STRING 
19507: ST_TO_ADDR
// un := CreateHuman ;
19508: LD_ADDR_VAR 0 2
19512: PUSH
19513: CALL_OW 44
19517: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19518: LD_VAR 0 2
19522: PPUSH
19523: LD_INT 1
19525: PPUSH
19526: CALL_OW 51
// tmp := tmp ^ un ;
19530: LD_ADDR_VAR 0 3
19534: PUSH
19535: LD_VAR 0 3
19539: PUSH
19540: LD_VAR 0 2
19544: ADD
19545: ST_TO_ADDR
// end ;
19546: GO 19442
19548: POP
19549: POP
// repeat wait ( 0 0$1 ) ;
19550: LD_INT 35
19552: PPUSH
19553: CALL_OW 67
// for un in tmp do
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: LD_VAR 0 3
19566: PUSH
19567: FOR_IN
19568: IFFALSE 19642
// begin if IsDead ( un ) then
19570: LD_VAR 0 2
19574: PPUSH
19575: CALL_OW 301
19579: IFFALSE 19599
// begin tmp := tmp diff un ;
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_VAR 0 3
19590: PUSH
19591: LD_VAR 0 2
19595: DIFF
19596: ST_TO_ADDR
// continue ;
19597: GO 19567
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_INT 3
19606: PUSH
19607: LD_INT 22
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 69
19625: PPUSH
19626: LD_VAR 0 2
19630: PPUSH
19631: CALL_OW 74
19635: PPUSH
19636: CALL_OW 115
// end ;
19640: GO 19567
19642: POP
19643: POP
// until not tmp ;
19644: LD_VAR 0 3
19648: NOT
19649: IFFALSE 19550
// end ;
19651: PPOPN 3
19653: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19654: LD_EXP 27
19658: PUSH
19659: LD_EXP 52
19663: AND
19664: IFFALSE 19718
19666: GO 19668
19668: DISABLE
// begin ToLua ( displayTroll(); ) ;
19669: LD_STRING displayTroll();
19671: PPUSH
19672: CALL_OW 559
// wait ( 3 3$00 ) ;
19676: LD_INT 6300
19678: PPUSH
19679: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19683: LD_STRING hideTroll();
19685: PPUSH
19686: CALL_OW 559
// wait ( 1 1$00 ) ;
19690: LD_INT 2100
19692: PPUSH
19693: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19697: LD_STRING displayTroll();
19699: PPUSH
19700: CALL_OW 559
// wait ( 1 1$00 ) ;
19704: LD_INT 2100
19706: PPUSH
19707: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19711: LD_STRING hideTroll();
19713: PPUSH
19714: CALL_OW 559
// end ;
19718: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19719: LD_EXP 27
19723: PUSH
19724: LD_EXP 53
19728: AND
19729: IFFALSE 19792
19731: GO 19733
19733: DISABLE
19734: LD_INT 0
19736: PPUSH
// begin p := 0 ;
19737: LD_ADDR_VAR 0 1
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// repeat game_speed := 1 ;
19745: LD_ADDR_OWVAR 65
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19753: LD_INT 35
19755: PPUSH
19756: CALL_OW 67
// p := p + 1 ;
19760: LD_ADDR_VAR 0 1
19764: PUSH
19765: LD_VAR 0 1
19769: PUSH
19770: LD_INT 1
19772: PLUS
19773: ST_TO_ADDR
// until p >= 60 ;
19774: LD_VAR 0 1
19778: PUSH
19779: LD_INT 60
19781: GREATEREQUAL
19782: IFFALSE 19745
// game_speed := 4 ;
19784: LD_ADDR_OWVAR 65
19788: PUSH
19789: LD_INT 4
19791: ST_TO_ADDR
// end ;
19792: PPOPN 1
19794: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19795: LD_EXP 27
19799: PUSH
19800: LD_EXP 54
19804: AND
19805: IFFALSE 19951
19807: GO 19809
19809: DISABLE
19810: LD_INT 0
19812: PPUSH
19813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19814: LD_ADDR_VAR 0 1
19818: PUSH
19819: LD_INT 22
19821: PUSH
19822: LD_OWVAR 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 30
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 30
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: ST_TO_ADDR
// if not depot then
19868: LD_VAR 0 1
19872: NOT
19873: IFFALSE 19877
// exit ;
19875: GO 19951
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19877: LD_ADDR_VAR 0 2
19881: PUSH
19882: LD_VAR 0 1
19886: PUSH
19887: LD_INT 1
19889: PPUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL_OW 12
19899: ARRAY
19900: PPUSH
19901: CALL_OW 274
19905: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19906: LD_VAR 0 2
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: LD_INT 0
19916: PPUSH
19917: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19921: LD_VAR 0 2
19925: PPUSH
19926: LD_INT 2
19928: PPUSH
19929: LD_INT 0
19931: PPUSH
19932: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19936: LD_VAR 0 2
19940: PPUSH
19941: LD_INT 3
19943: PPUSH
19944: LD_INT 0
19946: PPUSH
19947: CALL_OW 277
// end ;
19951: PPOPN 2
19953: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19954: LD_EXP 27
19958: PUSH
19959: LD_EXP 55
19963: AND
19964: IFFALSE 20061
19966: GO 19968
19968: DISABLE
19969: LD_INT 0
19971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_OWVAR 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 21
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 3
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: PPUSH
20021: CALL_OW 69
20025: ST_TO_ADDR
// if not tmp then
20026: LD_VAR 0 1
20030: NOT
20031: IFFALSE 20035
// exit ;
20033: GO 20061
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20035: LD_VAR 0 1
20039: PUSH
20040: LD_INT 1
20042: PPUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 12
20052: ARRAY
20053: PPUSH
20054: LD_INT 200
20056: PPUSH
20057: CALL_OW 234
// end ;
20061: PPOPN 1
20063: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20064: LD_EXP 27
20068: PUSH
20069: LD_EXP 56
20073: AND
20074: IFFALSE 20153
20076: GO 20078
20078: DISABLE
20079: LD_INT 0
20081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20082: LD_ADDR_VAR 0 1
20086: PUSH
20087: LD_INT 22
20089: PUSH
20090: LD_OWVAR 2
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 21
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PPUSH
20113: CALL_OW 69
20117: ST_TO_ADDR
// if not tmp then
20118: LD_VAR 0 1
20122: NOT
20123: IFFALSE 20127
// exit ;
20125: GO 20153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20127: LD_VAR 0 1
20131: PUSH
20132: LD_INT 1
20134: PPUSH
20135: LD_VAR 0 1
20139: PPUSH
20140: CALL_OW 12
20144: ARRAY
20145: PPUSH
20146: LD_INT 60
20148: PPUSH
20149: CALL_OW 234
// end ;
20153: PPOPN 1
20155: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20156: LD_EXP 27
20160: PUSH
20161: LD_EXP 57
20165: AND
20166: IFFALSE 20265
20168: GO 20170
20170: DISABLE
20171: LD_INT 0
20173: PPUSH
20174: PPUSH
// begin enable ;
20175: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20176: LD_ADDR_VAR 0 1
20180: PUSH
20181: LD_INT 22
20183: PUSH
20184: LD_OWVAR 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 61
20195: PUSH
20196: EMPTY
20197: LIST
20198: PUSH
20199: LD_INT 33
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: PPUSH
20214: CALL_OW 69
20218: ST_TO_ADDR
// if not tmp then
20219: LD_VAR 0 1
20223: NOT
20224: IFFALSE 20228
// exit ;
20226: GO 20265
// for i in tmp do
20228: LD_ADDR_VAR 0 2
20232: PUSH
20233: LD_VAR 0 1
20237: PUSH
20238: FOR_IN
20239: IFFALSE 20263
// if IsControledBy ( i ) then
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 312
20250: IFFALSE 20261
// ComUnlink ( i ) ;
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 136
20261: GO 20238
20263: POP
20264: POP
// end ;
20265: PPOPN 2
20267: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20268: LD_EXP 27
20272: PUSH
20273: LD_EXP 58
20277: AND
20278: IFFALSE 20418
20280: GO 20282
20282: DISABLE
20283: LD_INT 0
20285: PPUSH
20286: PPUSH
// begin ToLua ( displayPowell(); ) ;
20287: LD_STRING displayPowell();
20289: PPUSH
20290: CALL_OW 559
// uc_side := 0 ;
20294: LD_ADDR_OWVAR 20
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// uc_nation := 2 ;
20302: LD_ADDR_OWVAR 21
20306: PUSH
20307: LD_INT 2
20309: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20310: LD_ADDR_OWVAR 37
20314: PUSH
20315: LD_INT 14
20317: ST_TO_ADDR
// vc_engine := engine_siberite ;
20318: LD_ADDR_OWVAR 39
20322: PUSH
20323: LD_INT 3
20325: ST_TO_ADDR
// vc_control := control_apeman ;
20326: LD_ADDR_OWVAR 38
20330: PUSH
20331: LD_INT 5
20333: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20334: LD_ADDR_OWVAR 40
20338: PUSH
20339: LD_INT 29
20341: ST_TO_ADDR
// un := CreateVehicle ;
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: CALL_OW 45
20351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20352: LD_VAR 0 2
20356: PPUSH
20357: LD_INT 1
20359: PPUSH
20360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20364: LD_INT 35
20366: PPUSH
20367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_INT 22
20378: PUSH
20379: LD_OWVAR 2
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: PPUSH
20393: LD_VAR 0 2
20397: PPUSH
20398: CALL_OW 74
20402: PPUSH
20403: CALL_OW 115
// until IsDead ( un ) ;
20407: LD_VAR 0 2
20411: PPUSH
20412: CALL_OW 301
20416: IFFALSE 20364
// end ;
20418: PPOPN 2
20420: END
// every 0 0$1 trigger StreamModeActive and sStu do
20421: LD_EXP 27
20425: PUSH
20426: LD_EXP 66
20430: AND
20431: IFFALSE 20447
20433: GO 20435
20435: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20436: LD_STRING displayStucuk();
20438: PPUSH
20439: CALL_OW 559
// ResetFog ;
20443: CALL_OW 335
// end ;
20447: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20448: LD_EXP 27
20452: PUSH
20453: LD_EXP 59
20457: AND
20458: IFFALSE 20599
20460: GO 20462
20462: DISABLE
20463: LD_INT 0
20465: PPUSH
20466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20467: LD_ADDR_VAR 0 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_OWVAR 2
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 21
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PPUSH
20498: CALL_OW 69
20502: ST_TO_ADDR
// if not tmp then
20503: LD_VAR 0 2
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 20599
// un := tmp [ rand ( 1 , tmp ) ] ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_VAR 0 2
20521: PUSH
20522: LD_INT 1
20524: PPUSH
20525: LD_VAR 0 2
20529: PPUSH
20530: CALL_OW 12
20534: ARRAY
20535: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: LD_INT 0
20543: PPUSH
20544: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_OWVAR 3
20557: PUSH
20558: LD_VAR 0 1
20562: DIFF
20563: PPUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 74
20573: PPUSH
20574: CALL_OW 115
// wait ( 0 0$20 ) ;
20578: LD_INT 700
20580: PPUSH
20581: CALL_OW 67
// SetSide ( un , your_side ) ;
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_OWVAR 2
20594: PPUSH
20595: CALL_OW 235
// end ;
20599: PPOPN 2
20601: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20602: LD_EXP 27
20606: PUSH
20607: LD_EXP 60
20611: AND
20612: IFFALSE 20718
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20620: LD_ADDR_VAR 0 1
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 30
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 69
20673: ST_TO_ADDR
// if not depot then
20674: LD_VAR 0 1
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20718
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20683: LD_VAR 0 1
20687: PUSH
20688: LD_INT 1
20690: ARRAY
20691: PPUSH
20692: CALL_OW 250
20696: PPUSH
20697: LD_VAR 0 1
20701: PUSH
20702: LD_INT 1
20704: ARRAY
20705: PPUSH
20706: CALL_OW 251
20710: PPUSH
20711: LD_INT 70
20713: PPUSH
20714: CALL_OW 495
// end ;
20718: PPOPN 1
20720: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20721: LD_EXP 27
20725: PUSH
20726: LD_EXP 61
20730: AND
20731: IFFALSE 20942
20733: GO 20735
20735: DISABLE
20736: LD_INT 0
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20743: LD_ADDR_VAR 0 5
20747: PUSH
20748: LD_INT 22
20750: PUSH
20751: LD_OWVAR 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 21
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: ST_TO_ADDR
// if not tmp then
20779: LD_VAR 0 5
20783: NOT
20784: IFFALSE 20788
// exit ;
20786: GO 20942
// for i in tmp do
20788: LD_ADDR_VAR 0 1
20792: PUSH
20793: LD_VAR 0 5
20797: PUSH
20798: FOR_IN
20799: IFFALSE 20940
// begin d := rand ( 0 , 5 ) ;
20801: LD_ADDR_VAR 0 4
20805: PUSH
20806: LD_INT 0
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: CALL_OW 12
20816: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20817: LD_ADDR_VAR 0 2
20821: PUSH
20822: LD_VAR 0 1
20826: PPUSH
20827: CALL_OW 250
20831: PPUSH
20832: LD_VAR 0 4
20836: PPUSH
20837: LD_INT 3
20839: PPUSH
20840: LD_INT 12
20842: PPUSH
20843: CALL_OW 12
20847: PPUSH
20848: CALL_OW 272
20852: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20853: LD_ADDR_VAR 0 3
20857: PUSH
20858: LD_VAR 0 1
20862: PPUSH
20863: CALL_OW 251
20867: PPUSH
20868: LD_VAR 0 4
20872: PPUSH
20873: LD_INT 3
20875: PPUSH
20876: LD_INT 12
20878: PPUSH
20879: CALL_OW 12
20883: PPUSH
20884: CALL_OW 273
20888: ST_TO_ADDR
// if ValidHex ( x , y ) then
20889: LD_VAR 0 2
20893: PPUSH
20894: LD_VAR 0 3
20898: PPUSH
20899: CALL_OW 488
20903: IFFALSE 20938
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20905: LD_VAR 0 1
20909: PPUSH
20910: LD_VAR 0 2
20914: PPUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: LD_INT 3
20922: PPUSH
20923: LD_INT 6
20925: PPUSH
20926: CALL_OW 12
20930: PPUSH
20931: LD_INT 1
20933: PPUSH
20934: CALL_OW 483
// end ;
20938: GO 20798
20940: POP
20941: POP
// end ;
20942: PPOPN 5
20944: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20945: LD_EXP 27
20949: PUSH
20950: LD_EXP 62
20954: AND
20955: IFFALSE 21049
20957: GO 20959
20959: DISABLE
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 22
20971: PUSH
20972: LD_OWVAR 2
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 32
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: ST_TO_ADDR
// if not tmp then
21011: LD_VAR 0 2
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21049
// for i in tmp do
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: LD_VAR 0 2
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21047
// SetFuel ( i , 0 ) ;
21033: LD_VAR 0 1
21037: PPUSH
21038: LD_INT 0
21040: PPUSH
21041: CALL_OW 240
21045: GO 21030
21047: POP
21048: POP
// end ;
21049: PPOPN 2
21051: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21052: LD_EXP 27
21056: PUSH
21057: LD_EXP 63
21061: AND
21062: IFFALSE 21128
21064: GO 21066
21066: DISABLE
21067: LD_INT 0
21069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21070: LD_ADDR_VAR 0 1
21074: PUSH
21075: LD_INT 22
21077: PUSH
21078: LD_OWVAR 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 29
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 69
21105: ST_TO_ADDR
// if not tmp then
21106: LD_VAR 0 1
21110: NOT
21111: IFFALSE 21115
// exit ;
21113: GO 21128
// DestroyUnit ( tmp [ 1 ] ) ;
21115: LD_VAR 0 1
21119: PUSH
21120: LD_INT 1
21122: ARRAY
21123: PPUSH
21124: CALL_OW 65
// end ;
21128: PPOPN 1
21130: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21131: LD_EXP 27
21135: PUSH
21136: LD_EXP 65
21140: AND
21141: IFFALSE 21270
21143: GO 21145
21145: DISABLE
21146: LD_INT 0
21148: PPUSH
// begin uc_side := 0 ;
21149: LD_ADDR_OWVAR 20
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// uc_nation := nation_arabian ;
21157: LD_ADDR_OWVAR 21
21161: PUSH
21162: LD_INT 2
21164: ST_TO_ADDR
// hc_gallery :=  ;
21165: LD_ADDR_OWVAR 33
21169: PUSH
21170: LD_STRING 
21172: ST_TO_ADDR
// hc_name :=  ;
21173: LD_ADDR_OWVAR 26
21177: PUSH
21178: LD_STRING 
21180: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21181: LD_INT 1
21183: PPUSH
21184: LD_INT 11
21186: PPUSH
21187: LD_INT 10
21189: PPUSH
21190: CALL_OW 380
// un := CreateHuman ;
21194: LD_ADDR_VAR 0 1
21198: PUSH
21199: CALL_OW 44
21203: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_INT 1
21211: PPUSH
21212: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21216: LD_INT 35
21218: PPUSH
21219: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21223: LD_VAR 0 1
21227: PPUSH
21228: LD_INT 22
21230: PUSH
21231: LD_OWVAR 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: PPUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 74
21254: PPUSH
21255: CALL_OW 115
// until IsDead ( un ) ;
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 301
21268: IFFALSE 21216
// end ;
21270: PPOPN 1
21272: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21273: LD_EXP 27
21277: PUSH
21278: LD_EXP 67
21282: AND
21283: IFFALSE 21295
21285: GO 21287
21287: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21288: LD_STRING earthquake(getX(game), 0, 32)
21290: PPUSH
21291: CALL_OW 559
21295: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21296: LD_EXP 27
21300: PUSH
21301: LD_EXP 68
21305: AND
21306: IFFALSE 21397
21308: GO 21310
21310: DISABLE
21311: LD_INT 0
21313: PPUSH
// begin enable ;
21314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_OWVAR 2
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 33
21344: PUSH
21345: LD_INT 3
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: ST_TO_ADDR
// if not tmp then
21362: LD_VAR 0 1
21366: NOT
21367: IFFALSE 21371
// exit ;
21369: GO 21397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21371: LD_VAR 0 1
21375: PUSH
21376: LD_INT 1
21378: PPUSH
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 12
21388: ARRAY
21389: PPUSH
21390: LD_INT 1
21392: PPUSH
21393: CALL_OW 234
// end ;
21397: PPOPN 1
21399: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21400: LD_EXP 27
21404: PUSH
21405: LD_EXP 69
21409: AND
21410: IFFALSE 21551
21412: GO 21414
21414: DISABLE
21415: LD_INT 0
21417: PPUSH
21418: PPUSH
21419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21420: LD_ADDR_VAR 0 3
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 25
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PPUSH
21451: CALL_OW 69
21455: ST_TO_ADDR
// if not tmp then
21456: LD_VAR 0 3
21460: NOT
21461: IFFALSE 21465
// exit ;
21463: GO 21551
// un := tmp [ rand ( 1 , tmp ) ] ;
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_VAR 0 3
21474: PUSH
21475: LD_INT 1
21477: PPUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: CALL_OW 12
21487: ARRAY
21488: ST_TO_ADDR
// if Crawls ( un ) then
21489: LD_VAR 0 2
21493: PPUSH
21494: CALL_OW 318
21498: IFFALSE 21509
// ComWalk ( un ) ;
21500: LD_VAR 0 2
21504: PPUSH
21505: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21509: LD_VAR 0 2
21513: PPUSH
21514: LD_INT 9
21516: PPUSH
21517: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21521: LD_INT 28
21523: PPUSH
21524: LD_OWVAR 2
21528: PPUSH
21529: LD_INT 2
21531: PPUSH
21532: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21536: LD_INT 29
21538: PPUSH
21539: LD_OWVAR 2
21543: PPUSH
21544: LD_INT 2
21546: PPUSH
21547: CALL_OW 322
// end ;
21551: PPOPN 3
21553: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21554: LD_EXP 27
21558: PUSH
21559: LD_EXP 70
21563: AND
21564: IFFALSE 21675
21566: GO 21568
21568: DISABLE
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
21573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21574: LD_ADDR_VAR 0 3
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_OWVAR 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 25
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 69
21609: ST_TO_ADDR
// if not tmp then
21610: LD_VAR 0 3
21614: NOT
21615: IFFALSE 21619
// exit ;
21617: GO 21675
// un := tmp [ rand ( 1 , tmp ) ] ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_VAR 0 3
21628: PUSH
21629: LD_INT 1
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: CALL_OW 12
21641: ARRAY
21642: ST_TO_ADDR
// if Crawls ( un ) then
21643: LD_VAR 0 2
21647: PPUSH
21648: CALL_OW 318
21652: IFFALSE 21663
// ComWalk ( un ) ;
21654: LD_VAR 0 2
21658: PPUSH
21659: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21663: LD_VAR 0 2
21667: PPUSH
21668: LD_INT 8
21670: PPUSH
21671: CALL_OW 336
// end ;
21675: PPOPN 3
21677: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21678: LD_EXP 27
21682: PUSH
21683: LD_EXP 71
21687: AND
21688: IFFALSE 21832
21690: GO 21692
21692: DISABLE
21693: LD_INT 0
21695: PPUSH
21696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 22
21704: PUSH
21705: LD_OWVAR 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 21
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: LD_INT 34
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 34
21739: PUSH
21740: LD_INT 51
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 34
21749: PUSH
21750: LD_INT 32
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: PPUSH
21768: CALL_OW 69
21772: ST_TO_ADDR
// if not tmp then
21773: LD_VAR 0 2
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21832
// for i in tmp do
21782: LD_ADDR_VAR 0 1
21786: PUSH
21787: LD_VAR 0 2
21791: PUSH
21792: FOR_IN
21793: IFFALSE 21830
// if GetCargo ( i , mat_artifact ) = 0 then
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 4
21802: PPUSH
21803: CALL_OW 289
21807: PUSH
21808: LD_INT 0
21810: EQUAL
21811: IFFALSE 21828
// SetCargo ( i , mat_siberit , 100 ) ;
21813: LD_VAR 0 1
21817: PPUSH
21818: LD_INT 3
21820: PPUSH
21821: LD_INT 100
21823: PPUSH
21824: CALL_OW 290
21828: GO 21792
21830: POP
21831: POP
// end ;
21832: PPOPN 2
21834: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21835: LD_EXP 27
21839: PUSH
21840: LD_EXP 72
21844: AND
21845: IFFALSE 22028
21847: GO 21849
21849: DISABLE
21850: LD_INT 0
21852: PPUSH
21853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21854: LD_ADDR_VAR 0 2
21858: PUSH
21859: LD_INT 22
21861: PUSH
21862: LD_OWVAR 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PPUSH
21871: CALL_OW 69
21875: ST_TO_ADDR
// if not tmp then
21876: LD_VAR 0 2
21880: NOT
21881: IFFALSE 21885
// exit ;
21883: GO 22028
// for i := 1 to 2 do
21885: LD_ADDR_VAR 0 1
21889: PUSH
21890: DOUBLE
21891: LD_INT 1
21893: DEC
21894: ST_TO_ADDR
21895: LD_INT 2
21897: PUSH
21898: FOR_TO
21899: IFFALSE 22026
// begin uc_side := your_side ;
21901: LD_ADDR_OWVAR 20
21905: PUSH
21906: LD_OWVAR 2
21910: ST_TO_ADDR
// uc_nation := nation_american ;
21911: LD_ADDR_OWVAR 21
21915: PUSH
21916: LD_INT 1
21918: ST_TO_ADDR
// vc_chassis := us_morphling ;
21919: LD_ADDR_OWVAR 37
21923: PUSH
21924: LD_INT 5
21926: ST_TO_ADDR
// vc_engine := engine_siberite ;
21927: LD_ADDR_OWVAR 39
21931: PUSH
21932: LD_INT 3
21934: ST_TO_ADDR
// vc_control := control_computer ;
21935: LD_ADDR_OWVAR 38
21939: PUSH
21940: LD_INT 3
21942: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21943: LD_ADDR_OWVAR 40
21947: PUSH
21948: LD_INT 10
21950: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21951: LD_VAR 0 2
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PPUSH
21960: CALL_OW 310
21964: NOT
21965: IFFALSE 22012
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21967: CALL_OW 45
21971: PPUSH
21972: LD_VAR 0 2
21976: PUSH
21977: LD_INT 1
21979: ARRAY
21980: PPUSH
21981: CALL_OW 250
21985: PPUSH
21986: LD_VAR 0 2
21990: PUSH
21991: LD_INT 1
21993: ARRAY
21994: PPUSH
21995: CALL_OW 251
21999: PPUSH
22000: LD_INT 12
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 50
22010: GO 22024
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22012: CALL_OW 45
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: CALL_OW 51
// end ;
22024: GO 21898
22026: POP
22027: POP
// end ;
22028: PPOPN 2
22030: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22031: LD_EXP 27
22035: PUSH
22036: LD_EXP 73
22040: AND
22041: IFFALSE 22263
22043: GO 22045
22045: DISABLE
22046: LD_INT 0
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22054: LD_ADDR_VAR 0 6
22058: PUSH
22059: LD_INT 22
22061: PUSH
22062: LD_OWVAR 2
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 21
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 3
22083: PUSH
22084: LD_INT 23
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: PPUSH
22103: CALL_OW 69
22107: ST_TO_ADDR
// if not tmp then
22108: LD_VAR 0 6
22112: NOT
22113: IFFALSE 22117
// exit ;
22115: GO 22263
// s1 := rand ( 1 , 4 ) ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_INT 1
22124: PPUSH
22125: LD_INT 4
22127: PPUSH
22128: CALL_OW 12
22132: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22133: LD_ADDR_VAR 0 4
22137: PUSH
22138: LD_VAR 0 6
22142: PUSH
22143: LD_INT 1
22145: ARRAY
22146: PPUSH
22147: LD_VAR 0 2
22151: PPUSH
22152: CALL_OW 259
22156: ST_TO_ADDR
// if s1 = 1 then
22157: LD_VAR 0 2
22161: PUSH
22162: LD_INT 1
22164: EQUAL
22165: IFFALSE 22185
// s2 := rand ( 2 , 4 ) else
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: LD_INT 2
22174: PPUSH
22175: LD_INT 4
22177: PPUSH
22178: CALL_OW 12
22182: ST_TO_ADDR
22183: GO 22193
// s2 := 1 ;
22185: LD_ADDR_VAR 0 3
22189: PUSH
22190: LD_INT 1
22192: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22193: LD_ADDR_VAR 0 5
22197: PUSH
22198: LD_VAR 0 6
22202: PUSH
22203: LD_INT 1
22205: ARRAY
22206: PPUSH
22207: LD_VAR 0 3
22211: PPUSH
22212: CALL_OW 259
22216: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22217: LD_VAR 0 6
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 2
22230: PPUSH
22231: LD_VAR 0 5
22235: PPUSH
22236: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22240: LD_VAR 0 6
22244: PUSH
22245: LD_INT 1
22247: ARRAY
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: LD_VAR 0 4
22258: PPUSH
22259: CALL_OW 237
// end ;
22263: PPOPN 6
22265: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22266: LD_EXP 27
22270: PUSH
22271: LD_EXP 74
22275: AND
22276: IFFALSE 22355
22278: GO 22280
22280: DISABLE
22281: LD_INT 0
22283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22284: LD_ADDR_VAR 0 1
22288: PUSH
22289: LD_INT 22
22291: PUSH
22292: LD_OWVAR 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PPUSH
22315: CALL_OW 69
22319: ST_TO_ADDR
// if not tmp then
22320: LD_VAR 0 1
22324: NOT
22325: IFFALSE 22329
// exit ;
22327: GO 22355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 1
22336: PPUSH
22337: LD_VAR 0 1
22341: PPUSH
22342: CALL_OW 12
22346: ARRAY
22347: PPUSH
22348: LD_INT 1
22350: PPUSH
22351: CALL_OW 234
// end ;
22355: PPOPN 1
22357: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22358: LD_EXP 27
22362: PUSH
22363: LD_EXP 75
22367: AND
22368: IFFALSE 22480
22370: GO 22372
22372: DISABLE
22373: LD_INT 0
22375: PPUSH
22376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 22
22384: PUSH
22385: LD_OWVAR 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 30
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 30
22409: PUSH
22410: LD_INT 26
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 30
22419: PUSH
22420: LD_INT 28
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PPUSH
22437: CALL_OW 69
22441: ST_TO_ADDR
// if not tmp then
22442: LD_VAR 0 2
22446: NOT
22447: IFFALSE 22451
// exit ;
22449: GO 22480
// for i in tmp do
22451: LD_ADDR_VAR 0 1
22455: PUSH
22456: LD_VAR 0 2
22460: PUSH
22461: FOR_IN
22462: IFFALSE 22478
// SetLives ( i , 1 ) ;
22464: LD_VAR 0 1
22468: PPUSH
22469: LD_INT 1
22471: PPUSH
22472: CALL_OW 234
22476: GO 22461
22478: POP
22479: POP
// end ;
22480: PPOPN 2
22482: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22483: LD_EXP 27
22487: PUSH
22488: LD_EXP 76
22492: AND
22493: IFFALSE 22780
22495: GO 22497
22497: DISABLE
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
// begin i := rand ( 1 , 7 ) ;
22503: LD_ADDR_VAR 0 1
22507: PUSH
22508: LD_INT 1
22510: PPUSH
22511: LD_INT 7
22513: PPUSH
22514: CALL_OW 12
22518: ST_TO_ADDR
// case i of 1 :
22519: LD_VAR 0 1
22523: PUSH
22524: LD_INT 1
22526: DOUBLE
22527: EQUAL
22528: IFTRUE 22532
22530: GO 22542
22532: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22533: LD_STRING earthquake(getX(game), 0, 32)
22535: PPUSH
22536: CALL_OW 559
22540: GO 22780
22542: LD_INT 2
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22564
22550: POP
// begin ToLua ( displayStucuk(); ) ;
22551: LD_STRING displayStucuk();
22553: PPUSH
22554: CALL_OW 559
// ResetFog ;
22558: CALL_OW 335
// end ; 3 :
22562: GO 22780
22564: LD_INT 3
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22676
22572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_INT 22
22580: PUSH
22581: LD_OWVAR 2
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 25
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: ST_TO_ADDR
// if not tmp then
22609: LD_VAR 0 2
22613: NOT
22614: IFFALSE 22618
// exit ;
22616: GO 22780
// un := tmp [ rand ( 1 , tmp ) ] ;
22618: LD_ADDR_VAR 0 3
22622: PUSH
22623: LD_VAR 0 2
22627: PUSH
22628: LD_INT 1
22630: PPUSH
22631: LD_VAR 0 2
22635: PPUSH
22636: CALL_OW 12
22640: ARRAY
22641: ST_TO_ADDR
// if Crawls ( un ) then
22642: LD_VAR 0 3
22646: PPUSH
22647: CALL_OW 318
22651: IFFALSE 22662
// ComWalk ( un ) ;
22653: LD_VAR 0 3
22657: PPUSH
22658: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22662: LD_VAR 0 3
22666: PPUSH
22667: LD_INT 8
22669: PPUSH
22670: CALL_OW 336
// end ; 4 :
22674: GO 22780
22676: LD_INT 4
22678: DOUBLE
22679: EQUAL
22680: IFTRUE 22684
22682: GO 22758
22684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22685: LD_ADDR_VAR 0 2
22689: PUSH
22690: LD_INT 22
22692: PUSH
22693: LD_OWVAR 2
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 30
22704: PUSH
22705: LD_INT 29
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: ST_TO_ADDR
// if not tmp then
22721: LD_VAR 0 2
22725: NOT
22726: IFFALSE 22730
// exit ;
22728: GO 22780
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22730: LD_VAR 0 2
22734: PUSH
22735: LD_INT 1
22737: ARRAY
22738: PPUSH
22739: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22743: LD_VAR 0 2
22747: PUSH
22748: LD_INT 1
22750: ARRAY
22751: PPUSH
22752: CALL_OW 65
// end ; 5 .. 7 :
22756: GO 22780
22758: LD_INT 5
22760: DOUBLE
22761: GREATEREQUAL
22762: IFFALSE 22770
22764: LD_INT 7
22766: DOUBLE
22767: LESSEQUAL
22768: IFTRUE 22772
22770: GO 22779
22772: POP
// StreamSibBomb ; end ;
22773: CALL 19017 0 0
22777: GO 22780
22779: POP
// end ;
22780: PPOPN 3
22782: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22783: LD_EXP 27
22787: PUSH
22788: LD_EXP 77
22792: AND
22793: IFFALSE 22949
22795: GO 22797
22797: DISABLE
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
22802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_INT 81
22810: PUSH
22811: LD_OWVAR 2
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: LD_INT 21
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 21
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PPUSH
22852: CALL_OW 69
22856: ST_TO_ADDR
// if not tmp then
22857: LD_VAR 0 2
22861: NOT
22862: IFFALSE 22866
// exit ;
22864: GO 22949
// p := 0 ;
22866: LD_ADDR_VAR 0 3
22870: PUSH
22871: LD_INT 0
22873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22874: LD_INT 35
22876: PPUSH
22877: CALL_OW 67
// p := p + 1 ;
22881: LD_ADDR_VAR 0 3
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_INT 1
22893: PLUS
22894: ST_TO_ADDR
// for i in tmp do
22895: LD_ADDR_VAR 0 1
22899: PUSH
22900: LD_VAR 0 2
22904: PUSH
22905: FOR_IN
22906: IFFALSE 22937
// if GetLives ( i ) < 1000 then
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 256
22917: PUSH
22918: LD_INT 1000
22920: LESS
22921: IFFALSE 22935
// SetLives ( i , 1000 ) ;
22923: LD_VAR 0 1
22927: PPUSH
22928: LD_INT 1000
22930: PPUSH
22931: CALL_OW 234
22935: GO 22905
22937: POP
22938: POP
// until p > 20 ;
22939: LD_VAR 0 3
22943: PUSH
22944: LD_INT 20
22946: GREATER
22947: IFFALSE 22874
// end ;
22949: PPOPN 3
22951: END
// every 0 0$1 trigger StreamModeActive and sTime do
22952: LD_EXP 27
22956: PUSH
22957: LD_EXP 78
22961: AND
22962: IFFALSE 22997
22964: GO 22966
22966: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22967: LD_INT 28
22969: PPUSH
22970: LD_OWVAR 2
22974: PPUSH
22975: LD_INT 2
22977: PPUSH
22978: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22982: LD_INT 30
22984: PPUSH
22985: LD_OWVAR 2
22989: PPUSH
22990: LD_INT 2
22992: PPUSH
22993: CALL_OW 322
// end ;
22997: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22998: LD_EXP 27
23002: PUSH
23003: LD_EXP 79
23007: AND
23008: IFFALSE 23129
23010: GO 23012
23012: DISABLE
23013: LD_INT 0
23015: PPUSH
23016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_OWVAR 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 21
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: LD_INT 23
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not tmp then
23071: LD_VAR 0 2
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23129
// for i in tmp do
23080: LD_ADDR_VAR 0 1
23084: PUSH
23085: LD_VAR 0 2
23089: PUSH
23090: FOR_IN
23091: IFFALSE 23127
// begin if Crawls ( i ) then
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 318
23102: IFFALSE 23113
// ComWalk ( i ) ;
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 138
// SetClass ( i , 2 ) ;
23113: LD_VAR 0 1
23117: PPUSH
23118: LD_INT 2
23120: PPUSH
23121: CALL_OW 336
// end ;
23125: GO 23090
23127: POP
23128: POP
// end ;
23129: PPOPN 2
23131: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23132: LD_EXP 27
23136: PUSH
23137: LD_EXP 80
23141: AND
23142: IFFALSE 23430
23144: GO 23146
23146: DISABLE
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23152: LD_OWVAR 2
23156: PPUSH
23157: LD_INT 9
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23170: LD_INT 9
23172: PPUSH
23173: LD_OWVAR 2
23177: PPUSH
23178: CALL_OW 343
// uc_side := 9 ;
23182: LD_ADDR_OWVAR 20
23186: PUSH
23187: LD_INT 9
23189: ST_TO_ADDR
// uc_nation := 2 ;
23190: LD_ADDR_OWVAR 21
23194: PUSH
23195: LD_INT 2
23197: ST_TO_ADDR
// hc_name := Dark Warrior ;
23198: LD_ADDR_OWVAR 26
23202: PUSH
23203: LD_STRING Dark Warrior
23205: ST_TO_ADDR
// hc_gallery :=  ;
23206: LD_ADDR_OWVAR 33
23210: PUSH
23211: LD_STRING 
23213: ST_TO_ADDR
// hc_noskilllimit := true ;
23214: LD_ADDR_OWVAR 76
23218: PUSH
23219: LD_INT 1
23221: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23222: LD_ADDR_OWVAR 31
23226: PUSH
23227: LD_INT 30
23229: PUSH
23230: LD_INT 30
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 30
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: ST_TO_ADDR
// un := CreateHuman ;
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: CALL_OW 44
23254: ST_TO_ADDR
// hc_noskilllimit := false ;
23255: LD_ADDR_OWVAR 76
23259: PUSH
23260: LD_INT 0
23262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23263: LD_VAR 0 3
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL_OW 51
// ToLua ( playRanger() ) ;
23275: LD_STRING playRanger()
23277: PPUSH
23278: CALL_OW 559
// p := 0 ;
23282: LD_ADDR_VAR 0 2
23286: PUSH
23287: LD_INT 0
23289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23290: LD_INT 35
23292: PPUSH
23293: CALL_OW 67
// p := p + 1 ;
23297: LD_ADDR_VAR 0 2
23301: PUSH
23302: LD_VAR 0 2
23306: PUSH
23307: LD_INT 1
23309: PLUS
23310: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23311: LD_VAR 0 3
23315: PPUSH
23316: CALL_OW 256
23320: PUSH
23321: LD_INT 1000
23323: LESS
23324: IFFALSE 23338
// SetLives ( un , 1000 ) ;
23326: LD_VAR 0 3
23330: PPUSH
23331: LD_INT 1000
23333: PPUSH
23334: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23338: LD_VAR 0 3
23342: PPUSH
23343: LD_INT 81
23345: PUSH
23346: LD_OWVAR 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 91
23357: PUSH
23358: LD_VAR 0 3
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PPUSH
23375: CALL_OW 69
23379: PPUSH
23380: LD_VAR 0 3
23384: PPUSH
23385: CALL_OW 74
23389: PPUSH
23390: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23394: LD_VAR 0 2
23398: PUSH
23399: LD_INT 80
23401: GREATER
23402: PUSH
23403: LD_VAR 0 3
23407: PPUSH
23408: CALL_OW 301
23412: OR
23413: IFFALSE 23290
// if un then
23415: LD_VAR 0 3
23419: IFFALSE 23430
// RemoveUnit ( un ) ;
23421: LD_VAR 0 3
23425: PPUSH
23426: CALL_OW 64
// end ;
23430: PPOPN 3
23432: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23433: LD_EXP 81
23437: IFFALSE 23553
23439: GO 23441
23441: DISABLE
23442: LD_INT 0
23444: PPUSH
23445: PPUSH
23446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23447: LD_ADDR_VAR 0 2
23451: PUSH
23452: LD_INT 81
23454: PUSH
23455: LD_OWVAR 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PPUSH
23478: CALL_OW 69
23482: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23483: LD_STRING playComputer()
23485: PPUSH
23486: CALL_OW 559
// if not tmp then
23490: LD_VAR 0 2
23494: NOT
23495: IFFALSE 23499
// exit ;
23497: GO 23553
// for i in tmp do
23499: LD_ADDR_VAR 0 1
23503: PUSH
23504: LD_VAR 0 2
23508: PUSH
23509: FOR_IN
23510: IFFALSE 23551
// for j := 1 to 4 do
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: DOUBLE
23518: LD_INT 1
23520: DEC
23521: ST_TO_ADDR
23522: LD_INT 4
23524: PUSH
23525: FOR_TO
23526: IFFALSE 23547
// SetSkill ( i , j , 10 ) ;
23528: LD_VAR 0 1
23532: PPUSH
23533: LD_VAR 0 3
23537: PPUSH
23538: LD_INT 10
23540: PPUSH
23541: CALL_OW 237
23545: GO 23525
23547: POP
23548: POP
23549: GO 23509
23551: POP
23552: POP
// end ;
23553: PPOPN 3
23555: END
// every 0 0$1 trigger s30 do var i , tmp ;
23556: LD_EXP 82
23560: IFFALSE 23629
23562: GO 23564
23564: DISABLE
23565: LD_INT 0
23567: PPUSH
23568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23569: LD_ADDR_VAR 0 2
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 69
23590: ST_TO_ADDR
// if not tmp then
23591: LD_VAR 0 2
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23629
// for i in tmp do
23600: LD_ADDR_VAR 0 1
23604: PUSH
23605: LD_VAR 0 2
23609: PUSH
23610: FOR_IN
23611: IFFALSE 23627
// SetLives ( i , 300 ) ;
23613: LD_VAR 0 1
23617: PPUSH
23618: LD_INT 300
23620: PPUSH
23621: CALL_OW 234
23625: GO 23610
23627: POP
23628: POP
// end ;
23629: PPOPN 2
23631: END
// every 0 0$1 trigger s60 do var i , tmp ;
23632: LD_EXP 83
23636: IFFALSE 23705
23638: GO 23640
23640: DISABLE
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_OWVAR 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PPUSH
23662: CALL_OW 69
23666: ST_TO_ADDR
// if not tmp then
23667: LD_VAR 0 2
23671: NOT
23672: IFFALSE 23676
// exit ;
23674: GO 23705
// for i in tmp do
23676: LD_ADDR_VAR 0 1
23680: PUSH
23681: LD_VAR 0 2
23685: PUSH
23686: FOR_IN
23687: IFFALSE 23703
// SetLives ( i , 600 ) ;
23689: LD_VAR 0 1
23693: PPUSH
23694: LD_INT 600
23696: PPUSH
23697: CALL_OW 234
23701: GO 23686
23703: POP
23704: POP
// end ;
23705: PPOPN 2
23707: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23708: LD_INT 0
23710: PPUSH
// case cmd of 301 :
23711: LD_VAR 0 1
23715: PUSH
23716: LD_INT 301
23718: DOUBLE
23719: EQUAL
23720: IFTRUE 23724
23722: GO 23756
23724: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23725: LD_VAR 0 6
23729: PPUSH
23730: LD_VAR 0 7
23734: PPUSH
23735: LD_VAR 0 8
23739: PPUSH
23740: LD_VAR 0 4
23744: PPUSH
23745: LD_VAR 0 5
23749: PPUSH
23750: CALL 24957 0 5
23754: GO 23877
23756: LD_INT 302
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23801
23764: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23765: LD_VAR 0 6
23769: PPUSH
23770: LD_VAR 0 7
23774: PPUSH
23775: LD_VAR 0 8
23779: PPUSH
23780: LD_VAR 0 9
23784: PPUSH
23785: LD_VAR 0 4
23789: PPUSH
23790: LD_VAR 0 5
23794: PPUSH
23795: CALL 25048 0 6
23799: GO 23877
23801: LD_INT 303
23803: DOUBLE
23804: EQUAL
23805: IFTRUE 23809
23807: GO 23846
23809: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23810: LD_VAR 0 6
23814: PPUSH
23815: LD_VAR 0 7
23819: PPUSH
23820: LD_VAR 0 8
23824: PPUSH
23825: LD_VAR 0 9
23829: PPUSH
23830: LD_VAR 0 4
23834: PPUSH
23835: LD_VAR 0 5
23839: PPUSH
23840: CALL 23882 0 6
23844: GO 23877
23846: LD_INT 304
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23876
23854: POP
// hHackTeleport ( unit , x , y ) ; end ;
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_VAR 0 4
23864: PPUSH
23865: LD_VAR 0 5
23869: PPUSH
23870: CALL 25641 0 3
23874: GO 23877
23876: POP
// end ;
23877: LD_VAR 0 12
23881: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23882: LD_INT 0
23884: PPUSH
23885: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23886: LD_VAR 0 1
23890: PUSH
23891: LD_INT 1
23893: LESS
23894: PUSH
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 3
23902: GREATER
23903: OR
23904: PUSH
23905: LD_VAR 0 5
23909: PPUSH
23910: LD_VAR 0 6
23914: PPUSH
23915: CALL_OW 428
23919: OR
23920: IFFALSE 23924
// exit ;
23922: GO 24644
// uc_side := your_side ;
23924: LD_ADDR_OWVAR 20
23928: PUSH
23929: LD_OWVAR 2
23933: ST_TO_ADDR
// uc_nation := nation ;
23934: LD_ADDR_OWVAR 21
23938: PUSH
23939: LD_VAR 0 1
23943: ST_TO_ADDR
// bc_level = 1 ;
23944: LD_ADDR_OWVAR 43
23948: PUSH
23949: LD_INT 1
23951: ST_TO_ADDR
// case btype of 1 :
23952: LD_VAR 0 2
23956: PUSH
23957: LD_INT 1
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23976
23965: POP
// bc_type := b_depot ; 2 :
23966: LD_ADDR_OWVAR 42
23970: PUSH
23971: LD_INT 0
23973: ST_TO_ADDR
23974: GO 24588
23976: LD_INT 2
23978: DOUBLE
23979: EQUAL
23980: IFTRUE 23984
23982: GO 23995
23984: POP
// bc_type := b_warehouse ; 3 :
23985: LD_ADDR_OWVAR 42
23989: PUSH
23990: LD_INT 1
23992: ST_TO_ADDR
23993: GO 24588
23995: LD_INT 3
23997: DOUBLE
23998: EQUAL
23999: IFTRUE 24003
24001: GO 24014
24003: POP
// bc_type := b_lab ; 4 .. 9 :
24004: LD_ADDR_OWVAR 42
24008: PUSH
24009: LD_INT 6
24011: ST_TO_ADDR
24012: GO 24588
24014: LD_INT 4
24016: DOUBLE
24017: GREATEREQUAL
24018: IFFALSE 24026
24020: LD_INT 9
24022: DOUBLE
24023: LESSEQUAL
24024: IFTRUE 24028
24026: GO 24080
24028: POP
// begin bc_type := b_lab_half ;
24029: LD_ADDR_OWVAR 42
24033: PUSH
24034: LD_INT 7
24036: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24037: LD_ADDR_OWVAR 44
24041: PUSH
24042: LD_INT 10
24044: PUSH
24045: LD_INT 11
24047: PUSH
24048: LD_INT 12
24050: PUSH
24051: LD_INT 15
24053: PUSH
24054: LD_INT 14
24056: PUSH
24057: LD_INT 13
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: PUSH
24068: LD_VAR 0 2
24072: PUSH
24073: LD_INT 3
24075: MINUS
24076: ARRAY
24077: ST_TO_ADDR
// end ; 10 .. 13 :
24078: GO 24588
24080: LD_INT 10
24082: DOUBLE
24083: GREATEREQUAL
24084: IFFALSE 24092
24086: LD_INT 13
24088: DOUBLE
24089: LESSEQUAL
24090: IFTRUE 24094
24092: GO 24171
24094: POP
// begin bc_type := b_lab_full ;
24095: LD_ADDR_OWVAR 42
24099: PUSH
24100: LD_INT 8
24102: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24103: LD_ADDR_OWVAR 44
24107: PUSH
24108: LD_INT 10
24110: PUSH
24111: LD_INT 12
24113: PUSH
24114: LD_INT 14
24116: PUSH
24117: LD_INT 13
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: PUSH
24126: LD_VAR 0 2
24130: PUSH
24131: LD_INT 9
24133: MINUS
24134: ARRAY
24135: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24136: LD_ADDR_OWVAR 45
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 15
24146: PUSH
24147: LD_INT 12
24149: PUSH
24150: LD_INT 15
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: LD_VAR 0 2
24163: PUSH
24164: LD_INT 9
24166: MINUS
24167: ARRAY
24168: ST_TO_ADDR
// end ; 14 :
24169: GO 24588
24171: LD_INT 14
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_workshop ; 15 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 2
24187: ST_TO_ADDR
24188: GO 24588
24190: LD_INT 15
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_factory ; 16 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 3
24206: ST_TO_ADDR
24207: GO 24588
24209: LD_INT 16
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_gun ; 17 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 17
24225: ST_TO_ADDR
24226: GO 24588
24228: LD_INT 17
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24264
24236: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 19
24244: PUSH
24245: LD_INT 23
24247: PUSH
24248: LD_INT 19
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: PUSH
24256: LD_VAR 0 1
24260: ARRAY
24261: ST_TO_ADDR
24262: GO 24588
24264: LD_INT 18
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24283
24272: POP
// bc_type := b_ext_radar ; 19 :
24273: LD_ADDR_OWVAR 42
24277: PUSH
24278: LD_INT 20
24280: ST_TO_ADDR
24281: GO 24588
24283: LD_INT 19
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24302
24291: POP
// bc_type := b_ext_radio ; 20 :
24292: LD_ADDR_OWVAR 42
24296: PUSH
24297: LD_INT 22
24299: ST_TO_ADDR
24300: GO 24588
24302: LD_INT 20
24304: DOUBLE
24305: EQUAL
24306: IFTRUE 24310
24308: GO 24321
24310: POP
// bc_type := b_ext_siberium ; 21 :
24311: LD_ADDR_OWVAR 42
24315: PUSH
24316: LD_INT 21
24318: ST_TO_ADDR
24319: GO 24588
24321: LD_INT 21
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24340
24329: POP
// bc_type := b_ext_computer ; 22 :
24330: LD_ADDR_OWVAR 42
24334: PUSH
24335: LD_INT 24
24337: ST_TO_ADDR
24338: GO 24588
24340: LD_INT 22
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24359
24348: POP
// bc_type := b_ext_track ; 23 :
24349: LD_ADDR_OWVAR 42
24353: PUSH
24354: LD_INT 16
24356: ST_TO_ADDR
24357: GO 24588
24359: LD_INT 23
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24378
24367: POP
// bc_type := b_ext_laser ; 24 :
24368: LD_ADDR_OWVAR 42
24372: PUSH
24373: LD_INT 25
24375: ST_TO_ADDR
24376: GO 24588
24378: LD_INT 24
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24397
24386: POP
// bc_type := b_control_tower ; 25 :
24387: LD_ADDR_OWVAR 42
24391: PUSH
24392: LD_INT 36
24394: ST_TO_ADDR
24395: GO 24588
24397: LD_INT 25
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24405
24403: GO 24416
24405: POP
// bc_type := b_breastwork ; 26 :
24406: LD_ADDR_OWVAR 42
24410: PUSH
24411: LD_INT 31
24413: ST_TO_ADDR
24414: GO 24588
24416: LD_INT 26
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24435
24424: POP
// bc_type := b_bunker ; 27 :
24425: LD_ADDR_OWVAR 42
24429: PUSH
24430: LD_INT 32
24432: ST_TO_ADDR
24433: GO 24588
24435: LD_INT 27
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24454
24443: POP
// bc_type := b_turret ; 28 :
24444: LD_ADDR_OWVAR 42
24448: PUSH
24449: LD_INT 33
24451: ST_TO_ADDR
24452: GO 24588
24454: LD_INT 28
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24473
24462: POP
// bc_type := b_armoury ; 29 :
24463: LD_ADDR_OWVAR 42
24467: PUSH
24468: LD_INT 4
24470: ST_TO_ADDR
24471: GO 24588
24473: LD_INT 29
24475: DOUBLE
24476: EQUAL
24477: IFTRUE 24481
24479: GO 24492
24481: POP
// bc_type := b_barracks ; 30 :
24482: LD_ADDR_OWVAR 42
24486: PUSH
24487: LD_INT 5
24489: ST_TO_ADDR
24490: GO 24588
24492: LD_INT 30
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24500
24498: GO 24511
24500: POP
// bc_type := b_solar_power ; 31 :
24501: LD_ADDR_OWVAR 42
24505: PUSH
24506: LD_INT 27
24508: ST_TO_ADDR
24509: GO 24588
24511: LD_INT 31
24513: DOUBLE
24514: EQUAL
24515: IFTRUE 24519
24517: GO 24530
24519: POP
// bc_type := b_oil_power ; 32 :
24520: LD_ADDR_OWVAR 42
24524: PUSH
24525: LD_INT 26
24527: ST_TO_ADDR
24528: GO 24588
24530: LD_INT 32
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24549
24538: POP
// bc_type := b_siberite_power ; 33 :
24539: LD_ADDR_OWVAR 42
24543: PUSH
24544: LD_INT 28
24546: ST_TO_ADDR
24547: GO 24588
24549: LD_INT 33
24551: DOUBLE
24552: EQUAL
24553: IFTRUE 24557
24555: GO 24568
24557: POP
// bc_type := b_oil_mine ; 34 :
24558: LD_ADDR_OWVAR 42
24562: PUSH
24563: LD_INT 29
24565: ST_TO_ADDR
24566: GO 24588
24568: LD_INT 34
24570: DOUBLE
24571: EQUAL
24572: IFTRUE 24576
24574: GO 24587
24576: POP
// bc_type := b_siberite_mine ; end ;
24577: LD_ADDR_OWVAR 42
24581: PUSH
24582: LD_INT 30
24584: ST_TO_ADDR
24585: GO 24588
24587: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24588: LD_ADDR_VAR 0 8
24592: PUSH
24593: LD_VAR 0 5
24597: PPUSH
24598: LD_VAR 0 6
24602: PPUSH
24603: LD_VAR 0 3
24607: PPUSH
24608: CALL_OW 47
24612: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24613: LD_OWVAR 42
24617: PUSH
24618: LD_INT 32
24620: PUSH
24621: LD_INT 33
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: IN
24628: IFFALSE 24644
// PlaceWeaponTurret ( b , weapon ) ;
24630: LD_VAR 0 8
24634: PPUSH
24635: LD_VAR 0 4
24639: PPUSH
24640: CALL_OW 431
// end ;
24644: LD_VAR 0 7
24648: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24655: LD_ADDR_VAR 0 4
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_OWVAR 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not tmp then
24709: LD_VAR 0 4
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24777
// for i in tmp do
24718: LD_ADDR_VAR 0 2
24722: PUSH
24723: LD_VAR 0 4
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24775
// for j = 1 to 3 do
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: DOUBLE
24737: LD_INT 1
24739: DEC
24740: ST_TO_ADDR
24741: LD_INT 3
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24771
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24747: LD_VAR 0 2
24751: PPUSH
24752: CALL_OW 274
24756: PPUSH
24757: LD_VAR 0 3
24761: PPUSH
24762: LD_INT 99999
24764: PPUSH
24765: CALL_OW 277
24769: GO 24744
24771: POP
24772: POP
24773: GO 24728
24775: POP
24776: POP
// end ;
24777: LD_VAR 0 1
24781: RET
// export function hHackSetLevel10 ; var i , j ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24787: LD_ADDR_VAR 0 2
24791: PUSH
24792: LD_INT 21
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PPUSH
24802: CALL_OW 69
24806: PUSH
24807: FOR_IN
24808: IFFALSE 24860
// if IsSelected ( i ) then
24810: LD_VAR 0 2
24814: PPUSH
24815: CALL_OW 306
24819: IFFALSE 24858
// begin for j := 1 to 4 do
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_INT 4
24833: PUSH
24834: FOR_TO
24835: IFFALSE 24856
// SetSkill ( i , j , 10 ) ;
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: LD_INT 10
24849: PPUSH
24850: CALL_OW 237
24854: GO 24834
24856: POP
24857: POP
// end ;
24858: GO 24807
24860: POP
24861: POP
// end ;
24862: LD_VAR 0 1
24866: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
24871: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_INT 22
24879: PUSH
24880: LD_OWVAR 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: PUSH
24908: FOR_IN
24909: IFFALSE 24950
// begin for j := 1 to 4 do
24911: LD_ADDR_VAR 0 3
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_INT 4
24923: PUSH
24924: FOR_TO
24925: IFFALSE 24946
// SetSkill ( i , j , 10 ) ;
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_VAR 0 3
24936: PPUSH
24937: LD_INT 10
24939: PPUSH
24940: CALL_OW 237
24944: GO 24924
24946: POP
24947: POP
// end ;
24948: GO 24908
24950: POP
24951: POP
// end ;
24952: LD_VAR 0 1
24956: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24957: LD_INT 0
24959: PPUSH
// uc_side := your_side ;
24960: LD_ADDR_OWVAR 20
24964: PUSH
24965: LD_OWVAR 2
24969: ST_TO_ADDR
// uc_nation := nation ;
24970: LD_ADDR_OWVAR 21
24974: PUSH
24975: LD_VAR 0 1
24979: ST_TO_ADDR
// InitHc ;
24980: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24984: LD_INT 0
24986: PPUSH
24987: LD_VAR 0 2
24991: PPUSH
24992: LD_VAR 0 3
24996: PPUSH
24997: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25001: LD_VAR 0 4
25005: PPUSH
25006: LD_VAR 0 5
25010: PPUSH
25011: CALL_OW 428
25015: PUSH
25016: LD_INT 0
25018: EQUAL
25019: IFFALSE 25043
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25021: CALL_OW 44
25025: PPUSH
25026: LD_VAR 0 4
25030: PPUSH
25031: LD_VAR 0 5
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: CALL_OW 48
// end ;
25043: LD_VAR 0 6
25047: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25048: LD_INT 0
25050: PPUSH
25051: PPUSH
// uc_side := your_side ;
25052: LD_ADDR_OWVAR 20
25056: PUSH
25057: LD_OWVAR 2
25061: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25062: LD_VAR 0 1
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: LD_INT 3
25075: PUSH
25076: LD_INT 4
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: IN
25089: IFFALSE 25101
// uc_nation := nation_american else
25091: LD_ADDR_OWVAR 21
25095: PUSH
25096: LD_INT 1
25098: ST_TO_ADDR
25099: GO 25144
// if chassis in [ 11 , 12 , 13 , 14 ] then
25101: LD_VAR 0 1
25105: PUSH
25106: LD_INT 11
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 13
25114: PUSH
25115: LD_INT 14
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: IN
25124: IFFALSE 25136
// uc_nation := nation_arabian else
25126: LD_ADDR_OWVAR 21
25130: PUSH
25131: LD_INT 2
25133: ST_TO_ADDR
25134: GO 25144
// uc_nation := nation_russian ;
25136: LD_ADDR_OWVAR 21
25140: PUSH
25141: LD_INT 3
25143: ST_TO_ADDR
// vc_chassis := chassis ;
25144: LD_ADDR_OWVAR 37
25148: PUSH
25149: LD_VAR 0 1
25153: ST_TO_ADDR
// vc_engine := engine ;
25154: LD_ADDR_OWVAR 39
25158: PUSH
25159: LD_VAR 0 2
25163: ST_TO_ADDR
// vc_control := control ;
25164: LD_ADDR_OWVAR 38
25168: PUSH
25169: LD_VAR 0 3
25173: ST_TO_ADDR
// vc_weapon := weapon ;
25174: LD_ADDR_OWVAR 40
25178: PUSH
25179: LD_VAR 0 4
25183: ST_TO_ADDR
// un := CreateVehicle ;
25184: LD_ADDR_VAR 0 8
25188: PUSH
25189: CALL_OW 45
25193: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25194: LD_VAR 0 8
25198: PPUSH
25199: LD_INT 0
25201: PPUSH
25202: LD_INT 5
25204: PPUSH
25205: CALL_OW 12
25209: PPUSH
25210: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25214: LD_VAR 0 8
25218: PPUSH
25219: LD_VAR 0 5
25223: PPUSH
25224: LD_VAR 0 6
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL_OW 48
// end ;
25236: LD_VAR 0 7
25240: RET
// export hInvincible ; every 1 do
25241: GO 25243
25243: DISABLE
// hInvincible := [ ] ;
25244: LD_ADDR_EXP 84
25248: PUSH
25249: EMPTY
25250: ST_TO_ADDR
25251: END
// every 10 do var i ;
25252: GO 25254
25254: DISABLE
25255: LD_INT 0
25257: PPUSH
// begin enable ;
25258: ENABLE
// if not hInvincible then
25259: LD_EXP 84
25263: NOT
25264: IFFALSE 25268
// exit ;
25266: GO 25312
// for i in hInvincible do
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: LD_EXP 84
25277: PUSH
25278: FOR_IN
25279: IFFALSE 25310
// if GetLives ( i ) < 1000 then
25281: LD_VAR 0 1
25285: PPUSH
25286: CALL_OW 256
25290: PUSH
25291: LD_INT 1000
25293: LESS
25294: IFFALSE 25308
// SetLives ( i , 1000 ) ;
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_INT 1000
25303: PPUSH
25304: CALL_OW 234
25308: GO 25278
25310: POP
25311: POP
// end ;
25312: PPOPN 1
25314: END
// export function hHackInvincible ; var i ; begin
25315: LD_INT 0
25317: PPUSH
25318: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 21
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 21
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: PUSH
25357: FOR_IN
25358: IFFALSE 25419
// if IsSelected ( i ) then
25360: LD_VAR 0 2
25364: PPUSH
25365: CALL_OW 306
25369: IFFALSE 25417
// begin if i in hInvincible then
25371: LD_VAR 0 2
25375: PUSH
25376: LD_EXP 84
25380: IN
25381: IFFALSE 25401
// hInvincible := hInvincible diff i else
25383: LD_ADDR_EXP 84
25387: PUSH
25388: LD_EXP 84
25392: PUSH
25393: LD_VAR 0 2
25397: DIFF
25398: ST_TO_ADDR
25399: GO 25417
// hInvincible := hInvincible union i ;
25401: LD_ADDR_EXP 84
25405: PUSH
25406: LD_EXP 84
25410: PUSH
25411: LD_VAR 0 2
25415: UNION
25416: ST_TO_ADDR
// end ;
25417: GO 25357
25419: POP
25420: POP
// end ;
25421: LD_VAR 0 1
25425: RET
// export function hHackInvisible ; var i , j ; begin
25426: LD_INT 0
25428: PPUSH
25429: PPUSH
25430: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25431: LD_ADDR_VAR 0 2
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25476
// if IsSelected ( i ) then
25454: LD_VAR 0 2
25458: PPUSH
25459: CALL_OW 306
25463: IFFALSE 25474
// ComForceInvisible ( i ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: CALL_OW 496
25474: GO 25451
25476: POP
25477: POP
// end ;
25478: LD_VAR 0 1
25482: RET
// export function hHackChangeYourSide ; begin
25483: LD_INT 0
25485: PPUSH
// if your_side = 8 then
25486: LD_OWVAR 2
25490: PUSH
25491: LD_INT 8
25493: EQUAL
25494: IFFALSE 25506
// your_side := 0 else
25496: LD_ADDR_OWVAR 2
25500: PUSH
25501: LD_INT 0
25503: ST_TO_ADDR
25504: GO 25520
// your_side := your_side + 1 ;
25506: LD_ADDR_OWVAR 2
25510: PUSH
25511: LD_OWVAR 2
25515: PUSH
25516: LD_INT 1
25518: PLUS
25519: ST_TO_ADDR
// end ;
25520: LD_VAR 0 1
25524: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25525: LD_INT 0
25527: PPUSH
25528: PPUSH
25529: PPUSH
// for i in all_units do
25530: LD_ADDR_VAR 0 2
25534: PUSH
25535: LD_OWVAR 3
25539: PUSH
25540: FOR_IN
25541: IFFALSE 25619
// if IsSelected ( i ) then
25543: LD_VAR 0 2
25547: PPUSH
25548: CALL_OW 306
25552: IFFALSE 25617
// begin j := GetSide ( i ) ;
25554: LD_ADDR_VAR 0 3
25558: PUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: CALL_OW 255
25568: ST_TO_ADDR
// if j = 8 then
25569: LD_VAR 0 3
25573: PUSH
25574: LD_INT 8
25576: EQUAL
25577: IFFALSE 25589
// j := 0 else
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_INT 0
25586: ST_TO_ADDR
25587: GO 25603
// j := j + 1 ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_VAR 0 3
25598: PUSH
25599: LD_INT 1
25601: PLUS
25602: ST_TO_ADDR
// SetSide ( i , j ) ;
25603: LD_VAR 0 2
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: CALL_OW 235
// end ;
25617: GO 25540
25619: POP
25620: POP
// end ;
25621: LD_VAR 0 1
25625: RET
// export function hHackFog ; begin
25626: LD_INT 0
25628: PPUSH
// FogOff ( true ) ;
25629: LD_INT 1
25631: PPUSH
25632: CALL_OW 344
// end ;
25636: LD_VAR 0 1
25640: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25641: LD_INT 0
25643: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25644: LD_VAR 0 1
25648: PPUSH
25649: LD_VAR 0 2
25653: PPUSH
25654: LD_VAR 0 3
25658: PPUSH
25659: LD_INT 1
25661: PPUSH
25662: LD_INT 1
25664: PPUSH
25665: CALL_OW 483
// CenterOnXY ( x , y ) ;
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: CALL_OW 84
// end ;
25683: LD_VAR 0 4
25687: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25692: LD_VAR 0 1
25696: NOT
25697: PUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: CALL_OW 488
25712: NOT
25713: OR
25714: PUSH
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL_OW 266
25724: PUSH
25725: LD_INT 3
25727: NONEQUAL
25728: PUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 247
25738: PUSH
25739: LD_INT 1
25741: EQUAL
25742: NOT
25743: AND
25744: OR
25745: IFFALSE 25749
// exit ;
25747: GO 25898
// if GetType ( factory ) = unit_human then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 247
25758: PUSH
25759: LD_INT 1
25761: EQUAL
25762: IFFALSE 25779
// factory := IsInUnit ( factory ) ;
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 310
25778: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 266
25788: PUSH
25789: LD_INT 3
25791: NONEQUAL
25792: IFFALSE 25796
// exit ;
25794: GO 25898
// if HexInfo ( x , y ) = factory then
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 428
25810: PUSH
25811: LD_VAR 0 1
25815: EQUAL
25816: IFFALSE 25843
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25818: LD_ADDR_EXP 85
25822: PUSH
25823: LD_EXP 85
25827: PPUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: LD_INT 0
25835: PPUSH
25836: CALL_OW 1
25840: ST_TO_ADDR
25841: GO 25894
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25843: LD_ADDR_EXP 85
25847: PUSH
25848: LD_EXP 85
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 255
25867: PUSH
25868: LD_VAR 0 1
25872: PUSH
25873: LD_VAR 0 2
25877: PUSH
25878: LD_VAR 0 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25894: CALL 25903 0 0
// end ;
25898: LD_VAR 0 4
25902: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25908: LD_STRING resetFactoryWaypoint();
25910: PPUSH
25911: CALL_OW 559
// if factoryWaypoints then
25915: LD_EXP 85
25919: IFFALSE 26045
// begin list := PrepareArray ( factoryWaypoints ) ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_EXP 85
25930: PPUSH
25931: CALL 72514 0 1
25935: ST_TO_ADDR
// for i := 1 to list do
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: DOUBLE
25942: LD_INT 1
25944: DEC
25945: ST_TO_ADDR
25946: LD_VAR 0 3
25950: PUSH
25951: FOR_TO
25952: IFFALSE 26043
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25954: LD_STRING setFactoryWaypointXY(
25956: PUSH
25957: LD_VAR 0 3
25961: PUSH
25962: LD_VAR 0 2
25966: ARRAY
25967: PUSH
25968: LD_INT 1
25970: ARRAY
25971: STR
25972: PUSH
25973: LD_STRING ,
25975: STR
25976: PUSH
25977: LD_VAR 0 3
25981: PUSH
25982: LD_VAR 0 2
25986: ARRAY
25987: PUSH
25988: LD_INT 2
25990: ARRAY
25991: STR
25992: PUSH
25993: LD_STRING ,
25995: STR
25996: PUSH
25997: LD_VAR 0 3
26001: PUSH
26002: LD_VAR 0 2
26006: ARRAY
26007: PUSH
26008: LD_INT 3
26010: ARRAY
26011: STR
26012: PUSH
26013: LD_STRING ,
26015: STR
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: ARRAY
26027: PUSH
26028: LD_INT 4
26030: ARRAY
26031: STR
26032: PUSH
26033: LD_STRING )
26035: STR
26036: PPUSH
26037: CALL_OW 559
26041: GO 25951
26043: POP
26044: POP
// end ; end ;
26045: LD_VAR 0 1
26049: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26050: LD_INT 0
26052: PPUSH
// if HexInfo ( x , y ) = warehouse then
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: CALL_OW 428
26067: PUSH
26068: LD_VAR 0 1
26072: EQUAL
26073: IFFALSE 26100
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26075: LD_ADDR_EXP 86
26079: PUSH
26080: LD_EXP 86
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
26098: GO 26151
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26100: LD_ADDR_EXP 86
26104: PUSH
26105: LD_EXP 86
26109: PPUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 255
26124: PUSH
26125: LD_VAR 0 1
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 1
26150: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26151: CALL 26160 0 0
// end ;
26155: LD_VAR 0 4
26159: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
26164: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26165: LD_STRING resetWarehouseGatheringPoints();
26167: PPUSH
26168: CALL_OW 559
// if warehouseGatheringPoints then
26172: LD_EXP 86
26176: IFFALSE 26302
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_EXP 86
26187: PPUSH
26188: CALL 72514 0 1
26192: ST_TO_ADDR
// for i := 1 to list do
26193: LD_ADDR_VAR 0 2
26197: PUSH
26198: DOUBLE
26199: LD_INT 1
26201: DEC
26202: ST_TO_ADDR
26203: LD_VAR 0 3
26207: PUSH
26208: FOR_TO
26209: IFFALSE 26300
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26211: LD_STRING setWarehouseGatheringPointXY(
26213: PUSH
26214: LD_VAR 0 3
26218: PUSH
26219: LD_VAR 0 2
26223: ARRAY
26224: PUSH
26225: LD_INT 1
26227: ARRAY
26228: STR
26229: PUSH
26230: LD_STRING ,
26232: STR
26233: PUSH
26234: LD_VAR 0 3
26238: PUSH
26239: LD_VAR 0 2
26243: ARRAY
26244: PUSH
26245: LD_INT 2
26247: ARRAY
26248: STR
26249: PUSH
26250: LD_STRING ,
26252: STR
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 2
26263: ARRAY
26264: PUSH
26265: LD_INT 3
26267: ARRAY
26268: STR
26269: PUSH
26270: LD_STRING ,
26272: STR
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 2
26283: ARRAY
26284: PUSH
26285: LD_INT 4
26287: ARRAY
26288: STR
26289: PUSH
26290: LD_STRING )
26292: STR
26293: PPUSH
26294: CALL_OW 559
26298: GO 26208
26300: POP
26301: POP
// end ; end ;
26302: LD_VAR 0 1
26306: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26307: LD_EXP 86
26311: IFFALSE 26996
26313: GO 26315
26315: DISABLE
26316: LD_INT 0
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
// begin enable ;
26327: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_EXP 86
26337: PPUSH
26338: CALL 72514 0 1
26342: ST_TO_ADDR
// if not list then
26343: LD_VAR 0 3
26347: NOT
26348: IFFALSE 26352
// exit ;
26350: GO 26996
// for i := 1 to list do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: DOUBLE
26358: LD_INT 1
26360: DEC
26361: ST_TO_ADDR
26362: LD_VAR 0 3
26366: PUSH
26367: FOR_TO
26368: IFFALSE 26994
// begin depot := list [ i ] [ 2 ] ;
26370: LD_ADDR_VAR 0 8
26374: PUSH
26375: LD_VAR 0 3
26379: PUSH
26380: LD_VAR 0 1
26384: ARRAY
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 1
26404: ARRAY
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26410: LD_VAR 0 8
26414: PPUSH
26415: CALL_OW 301
26419: PUSH
26420: LD_VAR 0 5
26424: PUSH
26425: LD_VAR 0 8
26429: PPUSH
26430: CALL_OW 255
26434: NONEQUAL
26435: OR
26436: IFFALSE 26465
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26438: LD_ADDR_EXP 86
26442: PUSH
26443: LD_EXP 86
26447: PPUSH
26448: LD_VAR 0 8
26452: PPUSH
26453: LD_INT 0
26455: PPUSH
26456: CALL_OW 1
26460: ST_TO_ADDR
// exit ;
26461: POP
26462: POP
26463: GO 26996
// end ; x := list [ i ] [ 3 ] ;
26465: LD_ADDR_VAR 0 6
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_VAR 0 1
26479: ARRAY
26480: PUSH
26481: LD_INT 3
26483: ARRAY
26484: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26485: LD_ADDR_VAR 0 7
26489: PUSH
26490: LD_VAR 0 3
26494: PUSH
26495: LD_VAR 0 1
26499: ARRAY
26500: PUSH
26501: LD_INT 4
26503: ARRAY
26504: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26505: LD_ADDR_VAR 0 9
26509: PUSH
26510: LD_VAR 0 6
26514: PPUSH
26515: LD_VAR 0 7
26519: PPUSH
26520: LD_INT 16
26522: PPUSH
26523: CALL 71102 0 3
26527: ST_TO_ADDR
// if not cratesNearbyPoint then
26528: LD_VAR 0 9
26532: NOT
26533: IFFALSE 26539
// exit ;
26535: POP
26536: POP
26537: GO 26996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26539: LD_ADDR_VAR 0 4
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_VAR 0 5
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: LD_INT 60
26561: PUSH
26562: EMPTY
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 91
26571: PUSH
26572: LD_VAR 0 8
26576: PUSH
26577: LD_INT 6
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: LD_INT 25
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 25
26600: PUSH
26601: LD_INT 16
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: PUSH
26624: LD_VAR 0 8
26628: PPUSH
26629: CALL_OW 313
26633: PPUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 60
26639: PUSH
26640: EMPTY
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 25
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 25
26662: PUSH
26663: LD_INT 16
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PPUSH
26679: CALL_OW 72
26683: UNION
26684: ST_TO_ADDR
// if tmp then
26685: LD_VAR 0 4
26689: IFFALSE 26769
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_VAR 0 4
26700: PPUSH
26701: LD_INT 3
26703: PPUSH
26704: CALL 69071 0 2
26708: ST_TO_ADDR
// for j in tmp do
26709: LD_ADDR_VAR 0 2
26713: PUSH
26714: LD_VAR 0 4
26718: PUSH
26719: FOR_IN
26720: IFFALSE 26763
// begin if IsInUnit ( j ) then
26722: LD_VAR 0 2
26726: PPUSH
26727: CALL_OW 310
26731: IFFALSE 26742
// ComExit ( j ) ;
26733: LD_VAR 0 2
26737: PPUSH
26738: CALL 69154 0 1
// AddComCollect ( j , x , y ) ;
26742: LD_VAR 0 2
26746: PPUSH
26747: LD_VAR 0 6
26751: PPUSH
26752: LD_VAR 0 7
26756: PPUSH
26757: CALL_OW 177
// end ;
26761: GO 26719
26763: POP
26764: POP
// exit ;
26765: POP
26766: POP
26767: GO 26996
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26769: LD_ADDR_VAR 0 4
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_VAR 0 5
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 91
26788: PUSH
26789: LD_VAR 0 8
26793: PUSH
26794: LD_INT 8
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 34
26807: PUSH
26808: LD_INT 12
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 34
26817: PUSH
26818: LD_INT 51
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 34
26827: PUSH
26828: LD_INT 32
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 34
26837: PUSH
26838: LD_INT 89
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: PPUSH
26857: CALL_OW 69
26861: ST_TO_ADDR
// if tmp then
26862: LD_VAR 0 4
26866: IFFALSE 26992
// begin for j in tmp do
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: LD_VAR 0 4
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26990
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26881: LD_VAR 0 2
26885: PPUSH
26886: CALL_OW 262
26890: PUSH
26891: LD_INT 3
26893: EQUAL
26894: PUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: CALL_OW 261
26904: PUSH
26905: LD_INT 20
26907: GREATER
26908: OR
26909: PUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: CALL_OW 314
26919: NOT
26920: AND
26921: PUSH
26922: LD_VAR 0 2
26926: PPUSH
26927: CALL_OW 263
26931: PUSH
26932: LD_INT 1
26934: NONEQUAL
26935: PUSH
26936: LD_VAR 0 2
26940: PPUSH
26941: CALL_OW 311
26945: OR
26946: AND
26947: IFFALSE 26988
// begin ComCollect ( j , x , y ) ;
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 6
26958: PPUSH
26959: LD_VAR 0 7
26963: PPUSH
26964: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_VAR 0 8
26977: PPUSH
26978: CALL_OW 172
// exit ;
26982: POP
26983: POP
26984: POP
26985: POP
26986: GO 26996
// end ;
26988: GO 26878
26990: POP
26991: POP
// end ; end ;
26992: GO 26367
26994: POP
26995: POP
// end ; end_of_file
26996: PPOPN 9
26998: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26999: LD_INT 0
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 264
27014: PUSH
27015: LD_INT 91
27017: EQUAL
27018: IFFALSE 27090
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27020: LD_INT 68
27022: PPUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 255
27032: PPUSH
27033: CALL_OW 321
27037: PUSH
27038: LD_INT 2
27040: EQUAL
27041: IFFALSE 27053
// eff := 70 else
27043: LD_ADDR_VAR 0 4
27047: PUSH
27048: LD_INT 70
27050: ST_TO_ADDR
27051: GO 27061
// eff := 30 ;
27053: LD_ADDR_VAR 0 4
27057: PUSH
27058: LD_INT 30
27060: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 250
27070: PPUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL_OW 251
27080: PPUSH
27081: LD_VAR 0 4
27085: PPUSH
27086: CALL_OW 495
// end ; end ;
27090: LD_VAR 0 2
27094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27095: LD_INT 0
27097: PPUSH
// end ;
27098: LD_VAR 0 4
27102: RET
// export function SOS_Command ( cmd ) ; begin
27103: LD_INT 0
27105: PPUSH
// end ;
27106: LD_VAR 0 2
27110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27111: LD_INT 0
27113: PPUSH
// end ;
27114: LD_VAR 0 6
27118: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27119: LD_INT 0
27121: PPUSH
27122: PPUSH
// if not vehicle or not factory then
27123: LD_VAR 0 1
27127: NOT
27128: PUSH
27129: LD_VAR 0 2
27133: NOT
27134: OR
27135: IFFALSE 27139
// exit ;
27137: GO 27370
// if factoryWaypoints >= factory then
27139: LD_EXP 85
27143: PUSH
27144: LD_VAR 0 2
27148: GREATEREQUAL
27149: IFFALSE 27370
// if factoryWaypoints [ factory ] then
27151: LD_EXP 85
27155: PUSH
27156: LD_VAR 0 2
27160: ARRAY
27161: IFFALSE 27370
// begin if GetControl ( vehicle ) = control_manual then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 263
27172: PUSH
27173: LD_INT 1
27175: EQUAL
27176: IFFALSE 27257
// begin driver := IsDrivenBy ( vehicle ) ;
27178: LD_ADDR_VAR 0 4
27182: PUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 311
27192: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_EXP 85
27202: PUSH
27203: LD_VAR 0 2
27207: ARRAY
27208: PUSH
27209: LD_INT 3
27211: ARRAY
27212: PPUSH
27213: LD_EXP 85
27217: PUSH
27218: LD_VAR 0 2
27222: ARRAY
27223: PUSH
27224: LD_INT 4
27226: ARRAY
27227: PPUSH
27228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27232: LD_VAR 0 4
27236: PPUSH
27237: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27241: LD_VAR 0 4
27245: PPUSH
27246: LD_VAR 0 2
27250: PPUSH
27251: CALL_OW 180
// end else
27255: GO 27370
// if GetControl ( vehicle ) = control_remote then
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 263
27266: PUSH
27267: LD_INT 2
27269: EQUAL
27270: IFFALSE 27331
// begin wait ( 0 0$2 ) ;
27272: LD_INT 70
27274: PPUSH
27275: CALL_OW 67
// if Connect ( vehicle ) then
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL 39394 0 1
27288: IFFALSE 27329
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_EXP 85
27299: PUSH
27300: LD_VAR 0 2
27304: ARRAY
27305: PUSH
27306: LD_INT 3
27308: ARRAY
27309: PPUSH
27310: LD_EXP 85
27314: PUSH
27315: LD_VAR 0 2
27319: ARRAY
27320: PUSH
27321: LD_INT 4
27323: ARRAY
27324: PPUSH
27325: CALL_OW 171
// end else
27329: GO 27370
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27331: LD_VAR 0 1
27335: PPUSH
27336: LD_EXP 85
27340: PUSH
27341: LD_VAR 0 2
27345: ARRAY
27346: PUSH
27347: LD_INT 3
27349: ARRAY
27350: PPUSH
27351: LD_EXP 85
27355: PUSH
27356: LD_VAR 0 2
27360: ARRAY
27361: PUSH
27362: LD_INT 4
27364: ARRAY
27365: PPUSH
27366: CALL_OW 171
// end ; end ;
27370: LD_VAR 0 3
27374: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27375: LD_INT 0
27377: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27378: LD_VAR 0 1
27382: PUSH
27383: LD_INT 250
27385: EQUAL
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: CALL_OW 264
27396: PUSH
27397: LD_INT 81
27399: EQUAL
27400: AND
27401: IFFALSE 27422
// MinerPlaceMine ( unit , x , y ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 4
27412: PPUSH
27413: LD_VAR 0 5
27417: PPUSH
27418: CALL 29807 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 251
27429: EQUAL
27430: PUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: CALL_OW 264
27440: PUSH
27441: LD_INT 81
27443: EQUAL
27444: AND
27445: IFFALSE 27466
// MinerDetonateMine ( unit , x , y ) ;
27447: LD_VAR 0 2
27451: PPUSH
27452: LD_VAR 0 4
27456: PPUSH
27457: LD_VAR 0 5
27461: PPUSH
27462: CALL 30082 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27466: LD_VAR 0 1
27470: PUSH
27471: LD_INT 252
27473: EQUAL
27474: PUSH
27475: LD_VAR 0 2
27479: PPUSH
27480: CALL_OW 264
27484: PUSH
27485: LD_INT 81
27487: EQUAL
27488: AND
27489: IFFALSE 27510
// MinerCreateMinefield ( unit , x , y ) ;
27491: LD_VAR 0 2
27495: PPUSH
27496: LD_VAR 0 4
27500: PPUSH
27501: LD_VAR 0 5
27505: PPUSH
27506: CALL 30499 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27510: LD_VAR 0 1
27514: PUSH
27515: LD_INT 253
27517: EQUAL
27518: PUSH
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 5
27531: EQUAL
27532: AND
27533: IFFALSE 27554
// ComBinocular ( unit , x , y ) ;
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_VAR 0 5
27549: PPUSH
27550: CALL 30868 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27554: LD_VAR 0 1
27558: PUSH
27559: LD_INT 254
27561: EQUAL
27562: PUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: CALL_OW 264
27572: PUSH
27573: LD_INT 99
27575: EQUAL
27576: AND
27577: PUSH
27578: LD_VAR 0 3
27582: PPUSH
27583: CALL_OW 263
27587: PUSH
27588: LD_INT 3
27590: EQUAL
27591: AND
27592: IFFALSE 27608
// HackDestroyVehicle ( unit , selectedUnit ) ;
27594: LD_VAR 0 2
27598: PPUSH
27599: LD_VAR 0 3
27603: PPUSH
27604: CALL 29171 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27608: LD_VAR 0 1
27612: PUSH
27613: LD_INT 255
27615: EQUAL
27616: PUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: CALL_OW 264
27626: PUSH
27627: LD_INT 14
27629: PUSH
27630: LD_INT 53
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: IN
27637: AND
27638: PUSH
27639: LD_VAR 0 4
27643: PPUSH
27644: LD_VAR 0 5
27648: PPUSH
27649: CALL_OW 488
27653: AND
27654: IFFALSE 27678
// CutTreeXYR ( unit , x , y , 12 ) ;
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_INT 12
27673: PPUSH
27674: CALL 27741 0 4
// if cmd = 256 then
27678: LD_VAR 0 1
27682: PUSH
27683: LD_INT 256
27685: EQUAL
27686: IFFALSE 27707
// SetFactoryWaypoint ( unit , x , y ) ;
27688: LD_VAR 0 2
27692: PPUSH
27693: LD_VAR 0 4
27697: PPUSH
27698: LD_VAR 0 5
27702: PPUSH
27703: CALL 25688 0 3
// if cmd = 257 then
27707: LD_VAR 0 1
27711: PUSH
27712: LD_INT 257
27714: EQUAL
27715: IFFALSE 27736
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_VAR 0 4
27726: PPUSH
27727: LD_VAR 0 5
27731: PPUSH
27732: CALL 26050 0 3
// end ;
27736: LD_VAR 0 6
27740: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
27745: PPUSH
27746: PPUSH
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
27751: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27752: LD_VAR 0 1
27756: NOT
27757: PUSH
27758: LD_VAR 0 2
27762: PPUSH
27763: LD_VAR 0 3
27767: PPUSH
27768: CALL_OW 488
27772: NOT
27773: OR
27774: PUSH
27775: LD_VAR 0 4
27779: NOT
27780: OR
27781: IFFALSE 27785
// exit ;
27783: GO 28125
// list := [ ] ;
27785: LD_ADDR_VAR 0 13
27789: PUSH
27790: EMPTY
27791: ST_TO_ADDR
// if x - r < 0 then
27792: LD_VAR 0 2
27796: PUSH
27797: LD_VAR 0 4
27801: MINUS
27802: PUSH
27803: LD_INT 0
27805: LESS
27806: IFFALSE 27818
// min_x := 0 else
27808: LD_ADDR_VAR 0 7
27812: PUSH
27813: LD_INT 0
27815: ST_TO_ADDR
27816: GO 27834
// min_x := x - r ;
27818: LD_ADDR_VAR 0 7
27822: PUSH
27823: LD_VAR 0 2
27827: PUSH
27828: LD_VAR 0 4
27832: MINUS
27833: ST_TO_ADDR
// if y - r < 0 then
27834: LD_VAR 0 3
27838: PUSH
27839: LD_VAR 0 4
27843: MINUS
27844: PUSH
27845: LD_INT 0
27847: LESS
27848: IFFALSE 27860
// min_y := 0 else
27850: LD_ADDR_VAR 0 8
27854: PUSH
27855: LD_INT 0
27857: ST_TO_ADDR
27858: GO 27876
// min_y := y - r ;
27860: LD_ADDR_VAR 0 8
27864: PUSH
27865: LD_VAR 0 3
27869: PUSH
27870: LD_VAR 0 4
27874: MINUS
27875: ST_TO_ADDR
// max_x := x + r ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_VAR 0 2
27885: PUSH
27886: LD_VAR 0 4
27890: PLUS
27891: ST_TO_ADDR
// max_y := y + r ;
27892: LD_ADDR_VAR 0 10
27896: PUSH
27897: LD_VAR 0 3
27901: PUSH
27902: LD_VAR 0 4
27906: PLUS
27907: ST_TO_ADDR
// for _x = min_x to max_x do
27908: LD_ADDR_VAR 0 11
27912: PUSH
27913: DOUBLE
27914: LD_VAR 0 7
27918: DEC
27919: ST_TO_ADDR
27920: LD_VAR 0 9
27924: PUSH
27925: FOR_TO
27926: IFFALSE 28043
// for _y = min_y to max_y do
27928: LD_ADDR_VAR 0 12
27932: PUSH
27933: DOUBLE
27934: LD_VAR 0 8
27938: DEC
27939: ST_TO_ADDR
27940: LD_VAR 0 10
27944: PUSH
27945: FOR_TO
27946: IFFALSE 28039
// begin if not ValidHex ( _x , _y ) then
27948: LD_VAR 0 11
27952: PPUSH
27953: LD_VAR 0 12
27957: PPUSH
27958: CALL_OW 488
27962: NOT
27963: IFFALSE 27967
// continue ;
27965: GO 27945
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27967: LD_VAR 0 11
27971: PPUSH
27972: LD_VAR 0 12
27976: PPUSH
27977: CALL_OW 351
27981: PUSH
27982: LD_VAR 0 11
27986: PPUSH
27987: LD_VAR 0 12
27991: PPUSH
27992: CALL_OW 554
27996: AND
27997: IFFALSE 28037
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27999: LD_ADDR_VAR 0 13
28003: PUSH
28004: LD_VAR 0 13
28008: PPUSH
28009: LD_VAR 0 13
28013: PUSH
28014: LD_INT 1
28016: PLUS
28017: PPUSH
28018: LD_VAR 0 11
28022: PUSH
28023: LD_VAR 0 12
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 2
28036: ST_TO_ADDR
// end ;
28037: GO 27945
28039: POP
28040: POP
28041: GO 27925
28043: POP
28044: POP
// if not list then
28045: LD_VAR 0 13
28049: NOT
28050: IFFALSE 28054
// exit ;
28052: GO 28125
// for i in list do
28054: LD_ADDR_VAR 0 6
28058: PUSH
28059: LD_VAR 0 13
28063: PUSH
28064: FOR_IN
28065: IFFALSE 28123
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_STRING M
28074: PUSH
28075: LD_VAR 0 6
28079: PUSH
28080: LD_INT 1
28082: ARRAY
28083: PUSH
28084: LD_VAR 0 6
28088: PUSH
28089: LD_INT 2
28091: ARRAY
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: PPUSH
28117: CALL_OW 447
28121: GO 28064
28123: POP
28124: POP
// end ;
28125: LD_VAR 0 5
28129: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28130: LD_EXP 88
28134: NOT
28135: IFFALSE 28185
28137: GO 28139
28139: DISABLE
// begin initHack := true ;
28140: LD_ADDR_EXP 88
28144: PUSH
28145: LD_INT 1
28147: ST_TO_ADDR
// hackTanks := [ ] ;
28148: LD_ADDR_EXP 89
28152: PUSH
28153: EMPTY
28154: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28155: LD_ADDR_EXP 90
28159: PUSH
28160: EMPTY
28161: ST_TO_ADDR
// hackLimit := 3 ;
28162: LD_ADDR_EXP 91
28166: PUSH
28167: LD_INT 3
28169: ST_TO_ADDR
// hackDist := 12 ;
28170: LD_ADDR_EXP 92
28174: PUSH
28175: LD_INT 12
28177: ST_TO_ADDR
// hackCounter := [ ] ;
28178: LD_ADDR_EXP 93
28182: PUSH
28183: EMPTY
28184: ST_TO_ADDR
// end ;
28185: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28186: LD_EXP 88
28190: PUSH
28191: LD_INT 34
28193: PUSH
28194: LD_INT 99
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PPUSH
28201: CALL_OW 69
28205: AND
28206: IFFALSE 28459
28208: GO 28210
28210: DISABLE
28211: LD_INT 0
28213: PPUSH
28214: PPUSH
// begin enable ;
28215: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28216: LD_ADDR_VAR 0 1
28220: PUSH
28221: LD_INT 34
28223: PUSH
28224: LD_INT 99
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 69
28235: PUSH
28236: FOR_IN
28237: IFFALSE 28457
// begin if not i in hackTanks then
28239: LD_VAR 0 1
28243: PUSH
28244: LD_EXP 89
28248: IN
28249: NOT
28250: IFFALSE 28333
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28252: LD_ADDR_EXP 89
28256: PUSH
28257: LD_EXP 89
28261: PPUSH
28262: LD_EXP 89
28266: PUSH
28267: LD_INT 1
28269: PLUS
28270: PPUSH
28271: LD_VAR 0 1
28275: PPUSH
28276: CALL_OW 1
28280: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28281: LD_ADDR_EXP 90
28285: PUSH
28286: LD_EXP 90
28290: PPUSH
28291: LD_EXP 90
28295: PUSH
28296: LD_INT 1
28298: PLUS
28299: PPUSH
28300: EMPTY
28301: PPUSH
28302: CALL_OW 1
28306: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28307: LD_ADDR_EXP 93
28311: PUSH
28312: LD_EXP 93
28316: PPUSH
28317: LD_EXP 93
28321: PUSH
28322: LD_INT 1
28324: PLUS
28325: PPUSH
28326: EMPTY
28327: PPUSH
28328: CALL_OW 1
28332: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 302
28342: NOT
28343: IFFALSE 28356
// begin HackUnlinkAll ( i ) ;
28345: LD_VAR 0 1
28349: PPUSH
28350: CALL 28462 0 1
// continue ;
28354: GO 28236
// end ; HackCheckCapturedStatus ( i ) ;
28356: LD_VAR 0 1
28360: PPUSH
28361: CALL 28905 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: LD_INT 81
28372: PUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 255
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 33
28389: PUSH
28390: LD_INT 3
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 91
28399: PUSH
28400: LD_VAR 0 1
28404: PUSH
28405: LD_EXP 92
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 50
28417: PUSH
28418: EMPTY
28419: LIST
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 69
28431: ST_TO_ADDR
// if not tmp then
28432: LD_VAR 0 2
28436: NOT
28437: IFFALSE 28441
// continue ;
28439: GO 28236
// HackLink ( i , tmp ) ;
28441: LD_VAR 0 1
28445: PPUSH
28446: LD_VAR 0 2
28450: PPUSH
28451: CALL 28598 0 2
// end ;
28455: GO 28236
28457: POP
28458: POP
// end ;
28459: PPOPN 2
28461: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28462: LD_INT 0
28464: PPUSH
28465: PPUSH
28466: PPUSH
// if not hack in hackTanks then
28467: LD_VAR 0 1
28471: PUSH
28472: LD_EXP 89
28476: IN
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28593
// index := GetElementIndex ( hackTanks , hack ) ;
28482: LD_ADDR_VAR 0 4
28486: PUSH
28487: LD_EXP 89
28491: PPUSH
28492: LD_VAR 0 1
28496: PPUSH
28497: CALL 36210 0 2
28501: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28502: LD_EXP 90
28506: PUSH
28507: LD_VAR 0 4
28511: ARRAY
28512: IFFALSE 28593
// begin for i in hackTanksCaptured [ index ] do
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_EXP 90
28523: PUSH
28524: LD_VAR 0 4
28528: ARRAY
28529: PUSH
28530: FOR_IN
28531: IFFALSE 28557
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28533: LD_VAR 0 3
28537: PUSH
28538: LD_INT 1
28540: ARRAY
28541: PPUSH
28542: LD_VAR 0 3
28546: PUSH
28547: LD_INT 2
28549: ARRAY
28550: PPUSH
28551: CALL_OW 235
28555: GO 28530
28557: POP
28558: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28559: LD_ADDR_EXP 90
28563: PUSH
28564: LD_EXP 90
28568: PPUSH
28569: LD_VAR 0 4
28573: PPUSH
28574: EMPTY
28575: PPUSH
28576: CALL_OW 1
28580: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28581: LD_VAR 0 1
28585: PPUSH
28586: LD_INT 0
28588: PPUSH
28589: CALL_OW 505
// end ; end ;
28593: LD_VAR 0 2
28597: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28598: LD_INT 0
28600: PPUSH
28601: PPUSH
28602: PPUSH
// if not hack in hackTanks or not vehicles then
28603: LD_VAR 0 1
28607: PUSH
28608: LD_EXP 89
28612: IN
28613: NOT
28614: PUSH
28615: LD_VAR 0 2
28619: NOT
28620: OR
28621: IFFALSE 28625
// exit ;
28623: GO 28900
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28625: LD_ADDR_VAR 0 2
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: LD_VAR 0 2
28639: PPUSH
28640: LD_INT 1
28642: PPUSH
28643: LD_INT 1
28645: PPUSH
28646: CALL 36860 0 4
28650: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28651: LD_ADDR_VAR 0 5
28655: PUSH
28656: LD_EXP 89
28660: PPUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL 36210 0 2
28670: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28671: LD_EXP 90
28675: PUSH
28676: LD_VAR 0 5
28680: ARRAY
28681: PUSH
28682: LD_EXP 91
28686: LESS
28687: IFFALSE 28876
// begin for i := 1 to vehicles do
28689: LD_ADDR_VAR 0 4
28693: PUSH
28694: DOUBLE
28695: LD_INT 1
28697: DEC
28698: ST_TO_ADDR
28699: LD_VAR 0 2
28703: PUSH
28704: FOR_TO
28705: IFFALSE 28874
// begin if hackTanksCaptured [ index ] = hackLimit then
28707: LD_EXP 90
28711: PUSH
28712: LD_VAR 0 5
28716: ARRAY
28717: PUSH
28718: LD_EXP 91
28722: EQUAL
28723: IFFALSE 28727
// break ;
28725: GO 28874
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28727: LD_ADDR_EXP 93
28731: PUSH
28732: LD_EXP 93
28736: PPUSH
28737: LD_VAR 0 5
28741: PPUSH
28742: LD_EXP 93
28746: PUSH
28747: LD_VAR 0 5
28751: ARRAY
28752: PUSH
28753: LD_INT 1
28755: PLUS
28756: PPUSH
28757: CALL_OW 1
28761: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28762: LD_ADDR_EXP 90
28766: PUSH
28767: LD_EXP 90
28771: PPUSH
28772: LD_VAR 0 5
28776: PUSH
28777: LD_EXP 90
28781: PUSH
28782: LD_VAR 0 5
28786: ARRAY
28787: PUSH
28788: LD_INT 1
28790: PLUS
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PPUSH
28796: LD_VAR 0 2
28800: PUSH
28801: LD_VAR 0 4
28805: ARRAY
28806: PUSH
28807: LD_VAR 0 2
28811: PUSH
28812: LD_VAR 0 4
28816: ARRAY
28817: PPUSH
28818: CALL_OW 255
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL 36425 0 3
28831: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28832: LD_VAR 0 2
28836: PUSH
28837: LD_VAR 0 4
28841: ARRAY
28842: PPUSH
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL_OW 255
28852: PPUSH
28853: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28857: LD_VAR 0 2
28861: PUSH
28862: LD_VAR 0 4
28866: ARRAY
28867: PPUSH
28868: CALL_OW 141
// end ;
28872: GO 28704
28874: POP
28875: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28876: LD_VAR 0 1
28880: PPUSH
28881: LD_EXP 90
28885: PUSH
28886: LD_VAR 0 5
28890: ARRAY
28891: PUSH
28892: LD_INT 0
28894: PLUS
28895: PPUSH
28896: CALL_OW 505
// end ;
28900: LD_VAR 0 3
28904: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28905: LD_INT 0
28907: PPUSH
28908: PPUSH
28909: PPUSH
28910: PPUSH
// if not hack in hackTanks then
28911: LD_VAR 0 1
28915: PUSH
28916: LD_EXP 89
28920: IN
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 29166
// index := GetElementIndex ( hackTanks , hack ) ;
28926: LD_ADDR_VAR 0 4
28930: PUSH
28931: LD_EXP 89
28935: PPUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL 36210 0 2
28945: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: DOUBLE
28952: LD_EXP 90
28956: PUSH
28957: LD_VAR 0 4
28961: ARRAY
28962: INC
28963: ST_TO_ADDR
28964: LD_INT 1
28966: PUSH
28967: FOR_DOWNTO
28968: IFFALSE 29140
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28970: LD_ADDR_VAR 0 5
28974: PUSH
28975: LD_EXP 90
28979: PUSH
28980: LD_VAR 0 4
28984: ARRAY
28985: PUSH
28986: LD_VAR 0 3
28990: ARRAY
28991: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28992: LD_VAR 0 5
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PPUSH
29001: CALL_OW 302
29005: NOT
29006: PUSH
29007: LD_VAR 0 5
29011: PUSH
29012: LD_INT 1
29014: ARRAY
29015: PPUSH
29016: CALL_OW 255
29020: PUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 255
29030: NONEQUAL
29031: OR
29032: IFFALSE 29138
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29034: LD_VAR 0 5
29038: PUSH
29039: LD_INT 1
29041: ARRAY
29042: PPUSH
29043: CALL_OW 305
29047: PUSH
29048: LD_VAR 0 5
29052: PUSH
29053: LD_INT 1
29055: ARRAY
29056: PPUSH
29057: CALL_OW 255
29061: PUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 255
29071: EQUAL
29072: AND
29073: IFFALSE 29097
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29075: LD_VAR 0 5
29079: PUSH
29080: LD_INT 1
29082: ARRAY
29083: PPUSH
29084: LD_VAR 0 5
29088: PUSH
29089: LD_INT 2
29091: ARRAY
29092: PPUSH
29093: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29097: LD_ADDR_EXP 90
29101: PUSH
29102: LD_EXP 90
29106: PPUSH
29107: LD_VAR 0 4
29111: PPUSH
29112: LD_EXP 90
29116: PUSH
29117: LD_VAR 0 4
29121: ARRAY
29122: PPUSH
29123: LD_VAR 0 3
29127: PPUSH
29128: CALL_OW 3
29132: PPUSH
29133: CALL_OW 1
29137: ST_TO_ADDR
// end ; end ;
29138: GO 28967
29140: POP
29141: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29142: LD_VAR 0 1
29146: PPUSH
29147: LD_EXP 90
29151: PUSH
29152: LD_VAR 0 4
29156: ARRAY
29157: PUSH
29158: LD_INT 0
29160: PLUS
29161: PPUSH
29162: CALL_OW 505
// end ;
29166: LD_VAR 0 2
29170: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29171: LD_INT 0
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
// if not hack in hackTanks then
29177: LD_VAR 0 1
29181: PUSH
29182: LD_EXP 89
29186: IN
29187: NOT
29188: IFFALSE 29192
// exit ;
29190: GO 29277
// index := GetElementIndex ( hackTanks , hack ) ;
29192: LD_ADDR_VAR 0 5
29196: PUSH
29197: LD_EXP 89
29201: PPUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL 36210 0 2
29211: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29212: LD_ADDR_VAR 0 4
29216: PUSH
29217: DOUBLE
29218: LD_INT 1
29220: DEC
29221: ST_TO_ADDR
29222: LD_EXP 90
29226: PUSH
29227: LD_VAR 0 5
29231: ARRAY
29232: PUSH
29233: FOR_TO
29234: IFFALSE 29275
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29236: LD_EXP 90
29240: PUSH
29241: LD_VAR 0 5
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 4
29251: ARRAY
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: PUSH
29257: LD_VAR 0 2
29261: EQUAL
29262: IFFALSE 29273
// KillUnit ( vehicle ) ;
29264: LD_VAR 0 2
29268: PPUSH
29269: CALL_OW 66
29273: GO 29233
29275: POP
29276: POP
// end ;
29277: LD_VAR 0 3
29281: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29282: LD_EXP 94
29286: NOT
29287: IFFALSE 29322
29289: GO 29291
29291: DISABLE
// begin initMiner := true ;
29292: LD_ADDR_EXP 94
29296: PUSH
29297: LD_INT 1
29299: ST_TO_ADDR
// minersList := [ ] ;
29300: LD_ADDR_EXP 95
29304: PUSH
29305: EMPTY
29306: ST_TO_ADDR
// minerMinesList := [ ] ;
29307: LD_ADDR_EXP 96
29311: PUSH
29312: EMPTY
29313: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29314: LD_ADDR_EXP 97
29318: PUSH
29319: LD_INT 5
29321: ST_TO_ADDR
// end ;
29322: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29323: LD_EXP 94
29327: PUSH
29328: LD_INT 34
29330: PUSH
29331: LD_INT 81
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: AND
29343: IFFALSE 29804
29345: GO 29347
29347: DISABLE
29348: LD_INT 0
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
// begin enable ;
29354: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_INT 34
29362: PUSH
29363: LD_INT 81
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PPUSH
29370: CALL_OW 69
29374: PUSH
29375: FOR_IN
29376: IFFALSE 29448
// begin if not i in minersList then
29378: LD_VAR 0 1
29382: PUSH
29383: LD_EXP 95
29387: IN
29388: NOT
29389: IFFALSE 29446
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29391: LD_ADDR_EXP 95
29395: PUSH
29396: LD_EXP 95
29400: PPUSH
29401: LD_EXP 95
29405: PUSH
29406: LD_INT 1
29408: PLUS
29409: PPUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 1
29419: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29420: LD_ADDR_EXP 96
29424: PUSH
29425: LD_EXP 96
29429: PPUSH
29430: LD_EXP 96
29434: PUSH
29435: LD_INT 1
29437: PLUS
29438: PPUSH
29439: EMPTY
29440: PPUSH
29441: CALL_OW 1
29445: ST_TO_ADDR
// end end ;
29446: GO 29375
29448: POP
29449: POP
// for i := minerMinesList downto 1 do
29450: LD_ADDR_VAR 0 1
29454: PUSH
29455: DOUBLE
29456: LD_EXP 96
29460: INC
29461: ST_TO_ADDR
29462: LD_INT 1
29464: PUSH
29465: FOR_DOWNTO
29466: IFFALSE 29802
// begin if IsLive ( minersList [ i ] ) then
29468: LD_EXP 95
29472: PUSH
29473: LD_VAR 0 1
29477: ARRAY
29478: PPUSH
29479: CALL_OW 300
29483: IFFALSE 29511
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29485: LD_EXP 95
29489: PUSH
29490: LD_VAR 0 1
29494: ARRAY
29495: PPUSH
29496: LD_EXP 96
29500: PUSH
29501: LD_VAR 0 1
29505: ARRAY
29506: PPUSH
29507: CALL_OW 505
// if not minerMinesList [ i ] then
29511: LD_EXP 96
29515: PUSH
29516: LD_VAR 0 1
29520: ARRAY
29521: NOT
29522: IFFALSE 29526
// continue ;
29524: GO 29465
// for j := minerMinesList [ i ] downto 1 do
29526: LD_ADDR_VAR 0 2
29530: PUSH
29531: DOUBLE
29532: LD_EXP 96
29536: PUSH
29537: LD_VAR 0 1
29541: ARRAY
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29798
// begin side := GetSide ( minersList [ i ] ) ;
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_EXP 95
29559: PUSH
29560: LD_VAR 0 1
29564: ARRAY
29565: PPUSH
29566: CALL_OW 255
29570: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29571: LD_ADDR_VAR 0 4
29575: PUSH
29576: LD_EXP 96
29580: PUSH
29581: LD_VAR 0 1
29585: ARRAY
29586: PUSH
29587: LD_VAR 0 2
29591: ARRAY
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: PPUSH
29597: LD_EXP 96
29601: PUSH
29602: LD_VAR 0 1
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 2
29612: ARRAY
29613: PUSH
29614: LD_INT 2
29616: ARRAY
29617: PPUSH
29618: CALL_OW 428
29622: ST_TO_ADDR
// if not tmp then
29623: LD_VAR 0 4
29627: NOT
29628: IFFALSE 29632
// continue ;
29630: GO 29547
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29632: LD_VAR 0 4
29636: PUSH
29637: LD_INT 81
29639: PUSH
29640: LD_VAR 0 3
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PPUSH
29649: CALL_OW 69
29653: IN
29654: PUSH
29655: LD_EXP 96
29659: PUSH
29660: LD_VAR 0 1
29664: ARRAY
29665: PUSH
29666: LD_VAR 0 2
29670: ARRAY
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PPUSH
29676: LD_EXP 96
29680: PUSH
29681: LD_VAR 0 1
29685: ARRAY
29686: PUSH
29687: LD_VAR 0 2
29691: ARRAY
29692: PUSH
29693: LD_INT 2
29695: ARRAY
29696: PPUSH
29697: CALL_OW 458
29701: AND
29702: IFFALSE 29796
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29704: LD_EXP 96
29708: PUSH
29709: LD_VAR 0 1
29713: ARRAY
29714: PUSH
29715: LD_VAR 0 2
29719: ARRAY
29720: PUSH
29721: LD_INT 1
29723: ARRAY
29724: PPUSH
29725: LD_EXP 96
29729: PUSH
29730: LD_VAR 0 1
29734: ARRAY
29735: PUSH
29736: LD_VAR 0 2
29740: ARRAY
29741: PUSH
29742: LD_INT 2
29744: ARRAY
29745: PPUSH
29746: LD_VAR 0 3
29750: PPUSH
29751: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29755: LD_ADDR_EXP 96
29759: PUSH
29760: LD_EXP 96
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: LD_EXP 96
29774: PUSH
29775: LD_VAR 0 1
29779: ARRAY
29780: PPUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: CALL_OW 3
29790: PPUSH
29791: CALL_OW 1
29795: ST_TO_ADDR
// end ; end ;
29796: GO 29547
29798: POP
29799: POP
// end ;
29800: GO 29465
29802: POP
29803: POP
// end ;
29804: PPOPN 4
29806: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
// result := false ;
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_INT 0
29818: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 264
29828: PUSH
29829: LD_INT 81
29831: EQUAL
29832: NOT
29833: IFFALSE 29837
// exit ;
29835: GO 30077
// index := GetElementIndex ( minersList , unit ) ;
29837: LD_ADDR_VAR 0 5
29841: PUSH
29842: LD_EXP 95
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL 36210 0 2
29856: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29857: LD_EXP 96
29861: PUSH
29862: LD_VAR 0 5
29866: ARRAY
29867: PUSH
29868: LD_EXP 97
29872: GREATEREQUAL
29873: IFFALSE 29877
// exit ;
29875: GO 30077
// ComMoveXY ( unit , x , y ) ;
29877: LD_VAR 0 1
29881: PPUSH
29882: LD_VAR 0 2
29886: PPUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29896: LD_INT 35
29898: PPUSH
29899: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29903: LD_VAR 0 1
29907: PPUSH
29908: LD_VAR 0 2
29912: PPUSH
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL 67565 0 3
29922: NOT
29923: PUSH
29924: LD_VAR 0 1
29928: PPUSH
29929: CALL_OW 314
29933: AND
29934: IFFALSE 29938
// exit ;
29936: GO 30077
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29938: LD_VAR 0 2
29942: PPUSH
29943: LD_VAR 0 3
29947: PPUSH
29948: CALL_OW 428
29952: PUSH
29953: LD_VAR 0 1
29957: EQUAL
29958: PUSH
29959: LD_VAR 0 1
29963: PPUSH
29964: CALL_OW 314
29968: NOT
29969: AND
29970: IFFALSE 29896
// PlaySoundXY ( x , y , PlantMine ) ;
29972: LD_VAR 0 2
29976: PPUSH
29977: LD_VAR 0 3
29981: PPUSH
29982: LD_STRING PlantMine
29984: PPUSH
29985: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29989: LD_VAR 0 2
29993: PPUSH
29994: LD_VAR 0 3
29998: PPUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 255
30008: PPUSH
30009: LD_INT 0
30011: PPUSH
30012: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30016: LD_ADDR_EXP 96
30020: PUSH
30021: LD_EXP 96
30025: PPUSH
30026: LD_VAR 0 5
30030: PUSH
30031: LD_EXP 96
30035: PUSH
30036: LD_VAR 0 5
30040: ARRAY
30041: PUSH
30042: LD_INT 1
30044: PLUS
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PPUSH
30050: LD_VAR 0 2
30054: PUSH
30055: LD_VAR 0 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PPUSH
30064: CALL 36425 0 3
30068: ST_TO_ADDR
// result := true ;
30069: LD_ADDR_VAR 0 4
30073: PUSH
30074: LD_INT 1
30076: ST_TO_ADDR
// end ;
30077: LD_VAR 0 4
30081: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30082: LD_INT 0
30084: PPUSH
30085: PPUSH
30086: PPUSH
// if not unit in minersList then
30087: LD_VAR 0 1
30091: PUSH
30092: LD_EXP 95
30096: IN
30097: NOT
30098: IFFALSE 30102
// exit ;
30100: GO 30494
// index := GetElementIndex ( minersList , unit ) ;
30102: LD_ADDR_VAR 0 6
30106: PUSH
30107: LD_EXP 95
30111: PPUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL 36210 0 2
30121: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30122: LD_ADDR_VAR 0 5
30126: PUSH
30127: DOUBLE
30128: LD_EXP 96
30132: PUSH
30133: LD_VAR 0 6
30137: ARRAY
30138: INC
30139: ST_TO_ADDR
30140: LD_INT 1
30142: PUSH
30143: FOR_DOWNTO
30144: IFFALSE 30305
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30146: LD_EXP 96
30150: PUSH
30151: LD_VAR 0 6
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 5
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PUSH
30167: LD_VAR 0 2
30171: EQUAL
30172: PUSH
30173: LD_EXP 96
30177: PUSH
30178: LD_VAR 0 6
30182: ARRAY
30183: PUSH
30184: LD_VAR 0 5
30188: ARRAY
30189: PUSH
30190: LD_INT 2
30192: ARRAY
30193: PUSH
30194: LD_VAR 0 3
30198: EQUAL
30199: AND
30200: IFFALSE 30303
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30202: LD_EXP 96
30206: PUSH
30207: LD_VAR 0 6
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 5
30217: ARRAY
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PPUSH
30223: LD_EXP 96
30227: PUSH
30228: LD_VAR 0 6
30232: ARRAY
30233: PUSH
30234: LD_VAR 0 5
30238: ARRAY
30239: PUSH
30240: LD_INT 2
30242: ARRAY
30243: PPUSH
30244: LD_VAR 0 1
30248: PPUSH
30249: CALL_OW 255
30253: PPUSH
30254: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30258: LD_ADDR_EXP 96
30262: PUSH
30263: LD_EXP 96
30267: PPUSH
30268: LD_VAR 0 6
30272: PPUSH
30273: LD_EXP 96
30277: PUSH
30278: LD_VAR 0 6
30282: ARRAY
30283: PPUSH
30284: LD_VAR 0 5
30288: PPUSH
30289: CALL_OW 3
30293: PPUSH
30294: CALL_OW 1
30298: ST_TO_ADDR
// exit ;
30299: POP
30300: POP
30301: GO 30494
// end ; end ;
30303: GO 30143
30305: POP
30306: POP
// for i := minerMinesList [ index ] downto 1 do
30307: LD_ADDR_VAR 0 5
30311: PUSH
30312: DOUBLE
30313: LD_EXP 96
30317: PUSH
30318: LD_VAR 0 6
30322: ARRAY
30323: INC
30324: ST_TO_ADDR
30325: LD_INT 1
30327: PUSH
30328: FOR_DOWNTO
30329: IFFALSE 30492
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30331: LD_EXP 96
30335: PUSH
30336: LD_VAR 0 6
30340: ARRAY
30341: PUSH
30342: LD_VAR 0 5
30346: ARRAY
30347: PUSH
30348: LD_INT 1
30350: ARRAY
30351: PPUSH
30352: LD_EXP 96
30356: PUSH
30357: LD_VAR 0 6
30361: ARRAY
30362: PUSH
30363: LD_VAR 0 5
30367: ARRAY
30368: PUSH
30369: LD_INT 2
30371: ARRAY
30372: PPUSH
30373: LD_VAR 0 2
30377: PPUSH
30378: LD_VAR 0 3
30382: PPUSH
30383: CALL_OW 298
30387: PUSH
30388: LD_INT 6
30390: LESS
30391: IFFALSE 30490
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30393: LD_EXP 96
30397: PUSH
30398: LD_VAR 0 6
30402: ARRAY
30403: PUSH
30404: LD_VAR 0 5
30408: ARRAY
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: LD_EXP 96
30418: PUSH
30419: LD_VAR 0 6
30423: ARRAY
30424: PUSH
30425: LD_VAR 0 5
30429: ARRAY
30430: PUSH
30431: LD_INT 2
30433: ARRAY
30434: PPUSH
30435: LD_VAR 0 1
30439: PPUSH
30440: CALL_OW 255
30444: PPUSH
30445: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30449: LD_ADDR_EXP 96
30453: PUSH
30454: LD_EXP 96
30458: PPUSH
30459: LD_VAR 0 6
30463: PPUSH
30464: LD_EXP 96
30468: PUSH
30469: LD_VAR 0 6
30473: ARRAY
30474: PPUSH
30475: LD_VAR 0 5
30479: PPUSH
30480: CALL_OW 3
30484: PPUSH
30485: CALL_OW 1
30489: ST_TO_ADDR
// end ; end ;
30490: GO 30328
30492: POP
30493: POP
// end ;
30494: LD_VAR 0 4
30498: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30499: LD_INT 0
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 264
30519: PUSH
30520: LD_INT 81
30522: EQUAL
30523: NOT
30524: PUSH
30525: LD_VAR 0 1
30529: PUSH
30530: LD_EXP 95
30534: IN
30535: NOT
30536: OR
30537: IFFALSE 30541
// exit ;
30539: GO 30863
// index := GetElementIndex ( minersList , unit ) ;
30541: LD_ADDR_VAR 0 6
30545: PUSH
30546: LD_EXP 95
30550: PPUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL 36210 0 2
30560: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30561: LD_ADDR_VAR 0 8
30565: PUSH
30566: LD_EXP 97
30570: PUSH
30571: LD_EXP 96
30575: PUSH
30576: LD_VAR 0 6
30580: ARRAY
30581: MINUS
30582: ST_TO_ADDR
// if not minesFreeAmount then
30583: LD_VAR 0 8
30587: NOT
30588: IFFALSE 30592
// exit ;
30590: GO 30863
// tmp := [ ] ;
30592: LD_ADDR_VAR 0 7
30596: PUSH
30597: EMPTY
30598: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30599: LD_ADDR_VAR 0 5
30603: PUSH
30604: DOUBLE
30605: LD_INT 1
30607: DEC
30608: ST_TO_ADDR
30609: LD_VAR 0 8
30613: PUSH
30614: FOR_TO
30615: IFFALSE 30810
// begin _d := rand ( 0 , 5 ) ;
30617: LD_ADDR_VAR 0 11
30621: PUSH
30622: LD_INT 0
30624: PPUSH
30625: LD_INT 5
30627: PPUSH
30628: CALL_OW 12
30632: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30633: LD_ADDR_VAR 0 12
30637: PUSH
30638: LD_INT 2
30640: PPUSH
30641: LD_INT 6
30643: PPUSH
30644: CALL_OW 12
30648: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30649: LD_ADDR_VAR 0 9
30653: PUSH
30654: LD_VAR 0 2
30658: PPUSH
30659: LD_VAR 0 11
30663: PPUSH
30664: LD_VAR 0 12
30668: PPUSH
30669: CALL_OW 272
30673: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30674: LD_ADDR_VAR 0 10
30678: PUSH
30679: LD_VAR 0 3
30683: PPUSH
30684: LD_VAR 0 11
30688: PPUSH
30689: LD_VAR 0 12
30693: PPUSH
30694: CALL_OW 273
30698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30699: LD_VAR 0 9
30703: PPUSH
30704: LD_VAR 0 10
30708: PPUSH
30709: CALL_OW 488
30713: PUSH
30714: LD_VAR 0 9
30718: PUSH
30719: LD_VAR 0 10
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_VAR 0 7
30732: IN
30733: NOT
30734: AND
30735: PUSH
30736: LD_VAR 0 9
30740: PPUSH
30741: LD_VAR 0 10
30745: PPUSH
30746: CALL_OW 458
30750: NOT
30751: AND
30752: IFFALSE 30794
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30754: LD_ADDR_VAR 0 7
30758: PUSH
30759: LD_VAR 0 7
30763: PPUSH
30764: LD_VAR 0 7
30768: PUSH
30769: LD_INT 1
30771: PLUS
30772: PPUSH
30773: LD_VAR 0 9
30777: PUSH
30778: LD_VAR 0 10
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PPUSH
30787: CALL_OW 1
30791: ST_TO_ADDR
30792: GO 30808
// i := i - 1 ;
30794: LD_ADDR_VAR 0 5
30798: PUSH
30799: LD_VAR 0 5
30803: PUSH
30804: LD_INT 1
30806: MINUS
30807: ST_TO_ADDR
// end ;
30808: GO 30614
30810: POP
30811: POP
// for i in tmp do
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: LD_VAR 0 7
30821: PUSH
30822: FOR_IN
30823: IFFALSE 30861
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_VAR 0 5
30834: PUSH
30835: LD_INT 1
30837: ARRAY
30838: PPUSH
30839: LD_VAR 0 5
30843: PUSH
30844: LD_INT 2
30846: ARRAY
30847: PPUSH
30848: CALL 29807 0 3
30852: NOT
30853: IFFALSE 30859
// exit ;
30855: POP
30856: POP
30857: GO 30863
30859: GO 30822
30861: POP
30862: POP
// end ;
30863: LD_VAR 0 4
30867: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30868: LD_INT 0
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
// if not GetClass ( unit ) = class_sniper then
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL_OW 257
30886: PUSH
30887: LD_INT 5
30889: EQUAL
30890: NOT
30891: IFFALSE 30895
// exit ;
30893: GO 31283
// dist := 8 ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_INT 8
30902: ST_TO_ADDR
// viewRange := 12 ;
30903: LD_ADDR_VAR 0 7
30907: PUSH
30908: LD_INT 12
30910: ST_TO_ADDR
// side := GetSide ( unit ) ;
30911: LD_ADDR_VAR 0 6
30915: PUSH
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 255
30925: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30926: LD_INT 61
30928: PPUSH
30929: LD_VAR 0 6
30933: PPUSH
30934: CALL_OW 321
30938: PUSH
30939: LD_INT 2
30941: EQUAL
30942: IFFALSE 30952
// viewRange := 16 ;
30944: LD_ADDR_VAR 0 7
30948: PUSH
30949: LD_INT 16
30951: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30952: LD_VAR 0 1
30956: PPUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: LD_VAR 0 3
30966: PPUSH
30967: CALL_OW 297
30971: PUSH
30972: LD_VAR 0 5
30976: GREATER
30977: IFFALSE 31056
// begin ComMoveXY ( unit , x , y ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_VAR 0 3
30993: PPUSH
30994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30998: LD_INT 35
31000: PPUSH
31001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31005: LD_VAR 0 1
31009: PPUSH
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: CALL 67565 0 3
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31283
// until GetDistUnitXY ( unit , x , y ) < dist ;
31029: LD_VAR 0 1
31033: PPUSH
31034: LD_VAR 0 2
31038: PPUSH
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL_OW 297
31048: PUSH
31049: LD_VAR 0 5
31053: LESS
31054: IFFALSE 30998
// end ; ComTurnXY ( unit , x , y ) ;
31056: LD_VAR 0 1
31060: PPUSH
31061: LD_VAR 0 2
31065: PPUSH
31066: LD_VAR 0 3
31070: PPUSH
31071: CALL_OW 118
// wait ( 5 ) ;
31075: LD_INT 5
31077: PPUSH
31078: CALL_OW 67
// _d := GetDir ( unit ) ;
31082: LD_ADDR_VAR 0 10
31086: PUSH
31087: LD_VAR 0 1
31091: PPUSH
31092: CALL_OW 254
31096: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31097: LD_ADDR_VAR 0 8
31101: PUSH
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL_OW 250
31111: PPUSH
31112: LD_VAR 0 10
31116: PPUSH
31117: LD_VAR 0 5
31121: PPUSH
31122: CALL_OW 272
31126: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31127: LD_ADDR_VAR 0 9
31131: PUSH
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 251
31141: PPUSH
31142: LD_VAR 0 10
31146: PPUSH
31147: LD_VAR 0 5
31151: PPUSH
31152: CALL_OW 273
31156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31157: LD_VAR 0 8
31161: PPUSH
31162: LD_VAR 0 9
31166: PPUSH
31167: CALL_OW 488
31171: NOT
31172: IFFALSE 31176
// exit ;
31174: GO 31283
// ComAnimCustom ( unit , 1 ) ;
31176: LD_VAR 0 1
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31188: LD_VAR 0 8
31192: PPUSH
31193: LD_VAR 0 9
31197: PPUSH
31198: LD_VAR 0 6
31202: PPUSH
31203: LD_VAR 0 7
31207: PPUSH
31208: CALL_OW 330
// repeat wait ( 1 ) ;
31212: LD_INT 1
31214: PPUSH
31215: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL_OW 316
31228: PUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL_OW 314
31238: OR
31239: PUSH
31240: LD_VAR 0 1
31244: PPUSH
31245: CALL_OW 302
31249: NOT
31250: OR
31251: PUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 301
31261: OR
31262: IFFALSE 31212
// RemoveSeeing ( _x , _y , side ) ;
31264: LD_VAR 0 8
31268: PPUSH
31269: LD_VAR 0 9
31273: PPUSH
31274: LD_VAR 0 6
31278: PPUSH
31279: CALL_OW 331
// end ; end_of_file
31283: LD_VAR 0 4
31287: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31288: LD_INT 0
31290: PPUSH
31291: PPUSH
// if exist_mode then
31292: LD_VAR 0 2
31296: IFFALSE 31321
// unit := CreateCharacter ( prefix & ident ) else
31298: LD_ADDR_VAR 0 5
31302: PUSH
31303: LD_VAR 0 3
31307: PUSH
31308: LD_VAR 0 1
31312: STR
31313: PPUSH
31314: CALL_OW 34
31318: ST_TO_ADDR
31319: GO 31336
// unit := NewCharacter ( ident ) ;
31321: LD_ADDR_VAR 0 5
31325: PUSH
31326: LD_VAR 0 1
31330: PPUSH
31331: CALL_OW 25
31335: ST_TO_ADDR
// result := unit ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_VAR 0 5
31345: ST_TO_ADDR
// end ;
31346: LD_VAR 0 4
31350: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
// if not side or not nation then
31355: LD_VAR 0 1
31359: NOT
31360: PUSH
31361: LD_VAR 0 2
31365: NOT
31366: OR
31367: IFFALSE 31371
// exit ;
31369: GO 32139
// case nation of nation_american :
31371: LD_VAR 0 2
31375: PUSH
31376: LD_INT 1
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31598
31384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31385: LD_ADDR_VAR 0 4
31389: PUSH
31390: LD_INT 35
31392: PUSH
31393: LD_INT 45
31395: PUSH
31396: LD_INT 46
31398: PUSH
31399: LD_INT 47
31401: PUSH
31402: LD_INT 82
31404: PUSH
31405: LD_INT 83
31407: PUSH
31408: LD_INT 84
31410: PUSH
31411: LD_INT 85
31413: PUSH
31414: LD_INT 86
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 6
31425: PUSH
31426: LD_INT 15
31428: PUSH
31429: LD_INT 16
31431: PUSH
31432: LD_INT 7
31434: PUSH
31435: LD_INT 12
31437: PUSH
31438: LD_INT 13
31440: PUSH
31441: LD_INT 10
31443: PUSH
31444: LD_INT 14
31446: PUSH
31447: LD_INT 20
31449: PUSH
31450: LD_INT 21
31452: PUSH
31453: LD_INT 22
31455: PUSH
31456: LD_INT 25
31458: PUSH
31459: LD_INT 32
31461: PUSH
31462: LD_INT 27
31464: PUSH
31465: LD_INT 36
31467: PUSH
31468: LD_INT 69
31470: PUSH
31471: LD_INT 39
31473: PUSH
31474: LD_INT 34
31476: PUSH
31477: LD_INT 40
31479: PUSH
31480: LD_INT 48
31482: PUSH
31483: LD_INT 49
31485: PUSH
31486: LD_INT 50
31488: PUSH
31489: LD_INT 51
31491: PUSH
31492: LD_INT 52
31494: PUSH
31495: LD_INT 53
31497: PUSH
31498: LD_INT 54
31500: PUSH
31501: LD_INT 55
31503: PUSH
31504: LD_INT 56
31506: PUSH
31507: LD_INT 57
31509: PUSH
31510: LD_INT 58
31512: PUSH
31513: LD_INT 59
31515: PUSH
31516: LD_INT 60
31518: PUSH
31519: LD_INT 61
31521: PUSH
31522: LD_INT 62
31524: PUSH
31525: LD_INT 80
31527: PUSH
31528: LD_INT 82
31530: PUSH
31531: LD_INT 83
31533: PUSH
31534: LD_INT 84
31536: PUSH
31537: LD_INT 85
31539: PUSH
31540: LD_INT 86
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 32063
31598: LD_INT 2
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31832
31606: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31607: LD_ADDR_VAR 0 4
31611: PUSH
31612: LD_INT 35
31614: PUSH
31615: LD_INT 45
31617: PUSH
31618: LD_INT 46
31620: PUSH
31621: LD_INT 47
31623: PUSH
31624: LD_INT 82
31626: PUSH
31627: LD_INT 83
31629: PUSH
31630: LD_INT 84
31632: PUSH
31633: LD_INT 85
31635: PUSH
31636: LD_INT 87
31638: PUSH
31639: LD_INT 70
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: LD_INT 11
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: LD_INT 5
31656: PUSH
31657: LD_INT 6
31659: PUSH
31660: LD_INT 15
31662: PUSH
31663: LD_INT 18
31665: PUSH
31666: LD_INT 7
31668: PUSH
31669: LD_INT 17
31671: PUSH
31672: LD_INT 8
31674: PUSH
31675: LD_INT 20
31677: PUSH
31678: LD_INT 21
31680: PUSH
31681: LD_INT 22
31683: PUSH
31684: LD_INT 72
31686: PUSH
31687: LD_INT 26
31689: PUSH
31690: LD_INT 69
31692: PUSH
31693: LD_INT 39
31695: PUSH
31696: LD_INT 40
31698: PUSH
31699: LD_INT 41
31701: PUSH
31702: LD_INT 42
31704: PUSH
31705: LD_INT 43
31707: PUSH
31708: LD_INT 48
31710: PUSH
31711: LD_INT 49
31713: PUSH
31714: LD_INT 50
31716: PUSH
31717: LD_INT 51
31719: PUSH
31720: LD_INT 52
31722: PUSH
31723: LD_INT 53
31725: PUSH
31726: LD_INT 54
31728: PUSH
31729: LD_INT 55
31731: PUSH
31732: LD_INT 56
31734: PUSH
31735: LD_INT 60
31737: PUSH
31738: LD_INT 61
31740: PUSH
31741: LD_INT 62
31743: PUSH
31744: LD_INT 66
31746: PUSH
31747: LD_INT 67
31749: PUSH
31750: LD_INT 68
31752: PUSH
31753: LD_INT 81
31755: PUSH
31756: LD_INT 82
31758: PUSH
31759: LD_INT 83
31761: PUSH
31762: LD_INT 84
31764: PUSH
31765: LD_INT 85
31767: PUSH
31768: LD_INT 87
31770: PUSH
31771: LD_INT 88
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
31830: GO 32063
31832: LD_INT 3
31834: DOUBLE
31835: EQUAL
31836: IFTRUE 31840
31838: GO 32062
31840: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31841: LD_ADDR_VAR 0 4
31845: PUSH
31846: LD_INT 46
31848: PUSH
31849: LD_INT 47
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 82
31860: PUSH
31861: LD_INT 83
31863: PUSH
31864: LD_INT 84
31866: PUSH
31867: LD_INT 85
31869: PUSH
31870: LD_INT 86
31872: PUSH
31873: LD_INT 11
31875: PUSH
31876: LD_INT 9
31878: PUSH
31879: LD_INT 20
31881: PUSH
31882: LD_INT 19
31884: PUSH
31885: LD_INT 21
31887: PUSH
31888: LD_INT 24
31890: PUSH
31891: LD_INT 22
31893: PUSH
31894: LD_INT 25
31896: PUSH
31897: LD_INT 28
31899: PUSH
31900: LD_INT 29
31902: PUSH
31903: LD_INT 30
31905: PUSH
31906: LD_INT 31
31908: PUSH
31909: LD_INT 37
31911: PUSH
31912: LD_INT 38
31914: PUSH
31915: LD_INT 32
31917: PUSH
31918: LD_INT 27
31920: PUSH
31921: LD_INT 33
31923: PUSH
31924: LD_INT 69
31926: PUSH
31927: LD_INT 39
31929: PUSH
31930: LD_INT 34
31932: PUSH
31933: LD_INT 40
31935: PUSH
31936: LD_INT 71
31938: PUSH
31939: LD_INT 23
31941: PUSH
31942: LD_INT 44
31944: PUSH
31945: LD_INT 48
31947: PUSH
31948: LD_INT 49
31950: PUSH
31951: LD_INT 50
31953: PUSH
31954: LD_INT 51
31956: PUSH
31957: LD_INT 52
31959: PUSH
31960: LD_INT 53
31962: PUSH
31963: LD_INT 54
31965: PUSH
31966: LD_INT 55
31968: PUSH
31969: LD_INT 56
31971: PUSH
31972: LD_INT 57
31974: PUSH
31975: LD_INT 58
31977: PUSH
31978: LD_INT 59
31980: PUSH
31981: LD_INT 63
31983: PUSH
31984: LD_INT 64
31986: PUSH
31987: LD_INT 65
31989: PUSH
31990: LD_INT 82
31992: PUSH
31993: LD_INT 83
31995: PUSH
31996: LD_INT 84
31998: PUSH
31999: LD_INT 85
32001: PUSH
32002: LD_INT 86
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
32060: GO 32063
32062: POP
// if state > - 1 and state < 3 then
32063: LD_VAR 0 3
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: GREATER
32072: PUSH
32073: LD_VAR 0 3
32077: PUSH
32078: LD_INT 3
32080: LESS
32081: AND
32082: IFFALSE 32139
// for i in result do
32084: LD_ADDR_VAR 0 5
32088: PUSH
32089: LD_VAR 0 4
32093: PUSH
32094: FOR_IN
32095: IFFALSE 32137
// if GetTech ( i , side ) <> state then
32097: LD_VAR 0 5
32101: PPUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 321
32111: PUSH
32112: LD_VAR 0 3
32116: NONEQUAL
32117: IFFALSE 32135
// result := result diff i ;
32119: LD_ADDR_VAR 0 4
32123: PUSH
32124: LD_VAR 0 4
32128: PUSH
32129: LD_VAR 0 5
32133: DIFF
32134: ST_TO_ADDR
32135: GO 32094
32137: POP
32138: POP
// end ;
32139: LD_VAR 0 4
32143: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32144: LD_INT 0
32146: PPUSH
32147: PPUSH
32148: PPUSH
// result := true ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 1
32156: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: LD_VAR 0 2
32166: PPUSH
32167: CALL_OW 480
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 5
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32230
// for i in tmp do
32181: LD_ADDR_VAR 0 4
32185: PUSH
32186: LD_VAR 0 5
32190: PUSH
32191: FOR_IN
32192: IFFALSE 32228
// if GetTech ( i , side ) <> state_researched then
32194: LD_VAR 0 4
32198: PPUSH
32199: LD_VAR 0 1
32203: PPUSH
32204: CALL_OW 321
32208: PUSH
32209: LD_INT 2
32211: NONEQUAL
32212: IFFALSE 32226
// begin result := false ;
32214: LD_ADDR_VAR 0 3
32218: PUSH
32219: LD_INT 0
32221: ST_TO_ADDR
// exit ;
32222: POP
32223: POP
32224: GO 32230
// end ;
32226: GO 32191
32228: POP
32229: POP
// end ;
32230: LD_VAR 0 3
32234: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32235: LD_INT 0
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32250: LD_VAR 0 1
32254: NOT
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: CALL_OW 257
32265: PUSH
32266: LD_INT 9
32268: NONEQUAL
32269: OR
32270: IFFALSE 32274
// exit ;
32272: GO 32847
// side := GetSide ( unit ) ;
32274: LD_ADDR_VAR 0 9
32278: PUSH
32279: LD_VAR 0 1
32283: PPUSH
32284: CALL_OW 255
32288: ST_TO_ADDR
// tech_space := tech_spacanom ;
32289: LD_ADDR_VAR 0 12
32293: PUSH
32294: LD_INT 29
32296: ST_TO_ADDR
// tech_time := tech_taurad ;
32297: LD_ADDR_VAR 0 13
32301: PUSH
32302: LD_INT 28
32304: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32305: LD_ADDR_VAR 0 11
32309: PUSH
32310: LD_VAR 0 1
32314: PPUSH
32315: CALL_OW 310
32319: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32320: LD_VAR 0 11
32324: PPUSH
32325: CALL_OW 247
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: IFFALSE 32337
// exit ;
32335: GO 32847
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32337: LD_ADDR_VAR 0 8
32341: PUSH
32342: LD_INT 81
32344: PUSH
32345: LD_VAR 0 9
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 3
32356: PUSH
32357: LD_INT 21
32359: PUSH
32360: LD_INT 3
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PPUSH
32375: CALL_OW 69
32379: ST_TO_ADDR
// if not tmp then
32380: LD_VAR 0 8
32384: NOT
32385: IFFALSE 32389
// exit ;
32387: GO 32847
// if in_unit then
32389: LD_VAR 0 11
32393: IFFALSE 32417
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32395: LD_ADDR_VAR 0 10
32399: PUSH
32400: LD_VAR 0 8
32404: PPUSH
32405: LD_VAR 0 11
32409: PPUSH
32410: CALL_OW 74
32414: ST_TO_ADDR
32415: GO 32437
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32417: LD_ADDR_VAR 0 10
32421: PUSH
32422: LD_VAR 0 8
32426: PPUSH
32427: LD_VAR 0 1
32431: PPUSH
32432: CALL_OW 74
32436: ST_TO_ADDR
// if not enemy then
32437: LD_VAR 0 10
32441: NOT
32442: IFFALSE 32446
// exit ;
32444: GO 32847
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32446: LD_VAR 0 11
32450: PUSH
32451: LD_VAR 0 11
32455: PPUSH
32456: LD_VAR 0 10
32460: PPUSH
32461: CALL_OW 296
32465: PUSH
32466: LD_INT 13
32468: GREATER
32469: AND
32470: PUSH
32471: LD_VAR 0 1
32475: PPUSH
32476: LD_VAR 0 10
32480: PPUSH
32481: CALL_OW 296
32485: PUSH
32486: LD_INT 12
32488: GREATER
32489: OR
32490: IFFALSE 32494
// exit ;
32492: GO 32847
// missile := [ 1 ] ;
32494: LD_ADDR_VAR 0 14
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32505: LD_VAR 0 9
32509: PPUSH
32510: LD_VAR 0 12
32514: PPUSH
32515: CALL_OW 325
32519: IFFALSE 32548
// missile := Replace ( missile , missile + 1 , 2 ) ;
32521: LD_ADDR_VAR 0 14
32525: PUSH
32526: LD_VAR 0 14
32530: PPUSH
32531: LD_VAR 0 14
32535: PUSH
32536: LD_INT 1
32538: PLUS
32539: PPUSH
32540: LD_INT 2
32542: PPUSH
32543: CALL_OW 1
32547: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32548: LD_VAR 0 9
32552: PPUSH
32553: LD_VAR 0 13
32557: PPUSH
32558: CALL_OW 325
32562: PUSH
32563: LD_VAR 0 10
32567: PPUSH
32568: CALL_OW 255
32572: PPUSH
32573: LD_VAR 0 13
32577: PPUSH
32578: CALL_OW 325
32582: NOT
32583: AND
32584: IFFALSE 32613
// missile := Replace ( missile , missile + 1 , 3 ) ;
32586: LD_ADDR_VAR 0 14
32590: PUSH
32591: LD_VAR 0 14
32595: PPUSH
32596: LD_VAR 0 14
32600: PUSH
32601: LD_INT 1
32603: PLUS
32604: PPUSH
32605: LD_INT 3
32607: PPUSH
32608: CALL_OW 1
32612: ST_TO_ADDR
// if missile < 2 then
32613: LD_VAR 0 14
32617: PUSH
32618: LD_INT 2
32620: LESS
32621: IFFALSE 32625
// exit ;
32623: GO 32847
// x := GetX ( enemy ) ;
32625: LD_ADDR_VAR 0 4
32629: PUSH
32630: LD_VAR 0 10
32634: PPUSH
32635: CALL_OW 250
32639: ST_TO_ADDR
// y := GetY ( enemy ) ;
32640: LD_ADDR_VAR 0 5
32644: PUSH
32645: LD_VAR 0 10
32649: PPUSH
32650: CALL_OW 251
32654: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32655: LD_ADDR_VAR 0 6
32659: PUSH
32660: LD_VAR 0 4
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PPUSH
32669: LD_INT 1
32671: PPUSH
32672: CALL_OW 12
32676: PLUS
32677: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32678: LD_ADDR_VAR 0 7
32682: PUSH
32683: LD_VAR 0 5
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PPUSH
32692: LD_INT 1
32694: PPUSH
32695: CALL_OW 12
32699: PLUS
32700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32701: LD_VAR 0 6
32705: PPUSH
32706: LD_VAR 0 7
32710: PPUSH
32711: CALL_OW 488
32715: NOT
32716: IFFALSE 32738
// begin _x := x ;
32718: LD_ADDR_VAR 0 6
32722: PUSH
32723: LD_VAR 0 4
32727: ST_TO_ADDR
// _y := y ;
32728: LD_ADDR_VAR 0 7
32732: PUSH
32733: LD_VAR 0 5
32737: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32738: LD_ADDR_VAR 0 3
32742: PUSH
32743: LD_INT 1
32745: PPUSH
32746: LD_VAR 0 14
32750: PPUSH
32751: CALL_OW 12
32755: ST_TO_ADDR
// case i of 1 :
32756: LD_VAR 0 3
32760: PUSH
32761: LD_INT 1
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32786
32769: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32770: LD_VAR 0 1
32774: PPUSH
32775: LD_VAR 0 10
32779: PPUSH
32780: CALL_OW 115
32784: GO 32847
32786: LD_INT 2
32788: DOUBLE
32789: EQUAL
32790: IFTRUE 32794
32792: GO 32816
32794: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32795: LD_VAR 0 1
32799: PPUSH
32800: LD_VAR 0 6
32804: PPUSH
32805: LD_VAR 0 7
32809: PPUSH
32810: CALL_OW 153
32814: GO 32847
32816: LD_INT 3
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32846
32824: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32825: LD_VAR 0 1
32829: PPUSH
32830: LD_VAR 0 6
32834: PPUSH
32835: LD_VAR 0 7
32839: PPUSH
32840: CALL_OW 154
32844: GO 32847
32846: POP
// end ;
32847: LD_VAR 0 2
32851: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32852: LD_INT 0
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
// if not unit or not building then
32860: LD_VAR 0 1
32864: NOT
32865: PUSH
32866: LD_VAR 0 2
32870: NOT
32871: OR
32872: IFFALSE 32876
// exit ;
32874: GO 33034
// x := GetX ( building ) ;
32876: LD_ADDR_VAR 0 5
32880: PUSH
32881: LD_VAR 0 2
32885: PPUSH
32886: CALL_OW 250
32890: ST_TO_ADDR
// y := GetY ( building ) ;
32891: LD_ADDR_VAR 0 6
32895: PUSH
32896: LD_VAR 0 2
32900: PPUSH
32901: CALL_OW 251
32905: ST_TO_ADDR
// for i = 0 to 5 do
32906: LD_ADDR_VAR 0 4
32910: PUSH
32911: DOUBLE
32912: LD_INT 0
32914: DEC
32915: ST_TO_ADDR
32916: LD_INT 5
32918: PUSH
32919: FOR_TO
32920: IFFALSE 33032
// begin _x := ShiftX ( x , i , 3 ) ;
32922: LD_ADDR_VAR 0 7
32926: PUSH
32927: LD_VAR 0 5
32931: PPUSH
32932: LD_VAR 0 4
32936: PPUSH
32937: LD_INT 3
32939: PPUSH
32940: CALL_OW 272
32944: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32945: LD_ADDR_VAR 0 8
32949: PUSH
32950: LD_VAR 0 6
32954: PPUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: LD_INT 3
32962: PPUSH
32963: CALL_OW 273
32967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32968: LD_VAR 0 7
32972: PPUSH
32973: LD_VAR 0 8
32977: PPUSH
32978: CALL_OW 488
32982: NOT
32983: IFFALSE 32987
// continue ;
32985: GO 32919
// if HexInfo ( _x , _y ) = 0 then
32987: LD_VAR 0 7
32991: PPUSH
32992: LD_VAR 0 8
32996: PPUSH
32997: CALL_OW 428
33001: PUSH
33002: LD_INT 0
33004: EQUAL
33005: IFFALSE 33030
// begin ComMoveXY ( unit , _x , _y ) ;
33007: LD_VAR 0 1
33011: PPUSH
33012: LD_VAR 0 7
33016: PPUSH
33017: LD_VAR 0 8
33021: PPUSH
33022: CALL_OW 111
// exit ;
33026: POP
33027: POP
33028: GO 33034
// end ; end ;
33030: GO 32919
33032: POP
33033: POP
// end ;
33034: LD_VAR 0 3
33038: RET
// export function ScanBase ( side , base_area ) ; begin
33039: LD_INT 0
33041: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_VAR 0 2
33051: PPUSH
33052: LD_INT 81
33054: PUSH
33055: LD_VAR 0 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 70
33068: ST_TO_ADDR
// end ;
33069: LD_VAR 0 3
33073: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33074: LD_INT 0
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
// result := false ;
33080: LD_ADDR_VAR 0 2
33084: PUSH
33085: LD_INT 0
33087: ST_TO_ADDR
// side := GetSide ( unit ) ;
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL_OW 255
33102: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33103: LD_ADDR_VAR 0 4
33107: PUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 248
33117: ST_TO_ADDR
// case nat of 1 :
33118: LD_VAR 0 4
33122: PUSH
33123: LD_INT 1
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33142
33131: POP
// tech := tech_lassight ; 2 :
33132: LD_ADDR_VAR 0 5
33136: PUSH
33137: LD_INT 12
33139: ST_TO_ADDR
33140: GO 33181
33142: LD_INT 2
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33150
33148: GO 33161
33150: POP
// tech := tech_mortar ; 3 :
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_INT 41
33158: ST_TO_ADDR
33159: GO 33181
33161: LD_INT 3
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33180
33169: POP
// tech := tech_bazooka ; end ;
33170: LD_ADDR_VAR 0 5
33174: PUSH
33175: LD_INT 44
33177: ST_TO_ADDR
33178: GO 33181
33180: POP
// if Researched ( side , tech ) then
33181: LD_VAR 0 3
33185: PPUSH
33186: LD_VAR 0 5
33190: PPUSH
33191: CALL_OW 325
33195: IFFALSE 33222
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33197: LD_ADDR_VAR 0 2
33201: PUSH
33202: LD_INT 5
33204: PUSH
33205: LD_INT 8
33207: PUSH
33208: LD_INT 9
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: PUSH
33216: LD_VAR 0 4
33220: ARRAY
33221: ST_TO_ADDR
// end ;
33222: LD_VAR 0 2
33226: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33227: LD_INT 0
33229: PPUSH
33230: PPUSH
33231: PPUSH
// if not mines then
33232: LD_VAR 0 2
33236: NOT
33237: IFFALSE 33241
// exit ;
33239: GO 33385
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33241: LD_ADDR_VAR 0 5
33245: PUSH
33246: LD_INT 81
33248: PUSH
33249: LD_VAR 0 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 21
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PPUSH
33279: CALL_OW 69
33283: ST_TO_ADDR
// for i in mines do
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: LD_VAR 0 2
33293: PUSH
33294: FOR_IN
33295: IFFALSE 33383
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33297: LD_VAR 0 4
33301: PUSH
33302: LD_INT 1
33304: ARRAY
33305: PPUSH
33306: LD_VAR 0 4
33310: PUSH
33311: LD_INT 2
33313: ARRAY
33314: PPUSH
33315: CALL_OW 458
33319: NOT
33320: IFFALSE 33324
// continue ;
33322: GO 33294
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33324: LD_VAR 0 4
33328: PUSH
33329: LD_INT 1
33331: ARRAY
33332: PPUSH
33333: LD_VAR 0 4
33337: PUSH
33338: LD_INT 2
33340: ARRAY
33341: PPUSH
33342: CALL_OW 428
33346: PUSH
33347: LD_VAR 0 5
33351: IN
33352: IFFALSE 33381
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33354: LD_VAR 0 4
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: PPUSH
33363: LD_VAR 0 4
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: PPUSH
33372: LD_VAR 0 1
33376: PPUSH
33377: CALL_OW 456
// end ;
33381: GO 33294
33383: POP
33384: POP
// end ;
33385: LD_VAR 0 3
33389: RET
// export function Count ( array ) ; var i ; begin
33390: LD_INT 0
33392: PPUSH
33393: PPUSH
// result := 0 ;
33394: LD_ADDR_VAR 0 2
33398: PUSH
33399: LD_INT 0
33401: ST_TO_ADDR
// for i in array do
33402: LD_ADDR_VAR 0 3
33406: PUSH
33407: LD_VAR 0 1
33411: PUSH
33412: FOR_IN
33413: IFFALSE 33437
// if i then
33415: LD_VAR 0 3
33419: IFFALSE 33435
// result := result + 1 ;
33421: LD_ADDR_VAR 0 2
33425: PUSH
33426: LD_VAR 0 2
33430: PUSH
33431: LD_INT 1
33433: PLUS
33434: ST_TO_ADDR
33435: GO 33412
33437: POP
33438: POP
// end ;
33439: LD_VAR 0 2
33443: RET
// export function IsEmpty ( building ) ; begin
33444: LD_INT 0
33446: PPUSH
// if not building then
33447: LD_VAR 0 1
33451: NOT
33452: IFFALSE 33456
// exit ;
33454: GO 33499
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_VAR 0 1
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 255
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 58
33485: PUSH
33486: EMPTY
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PPUSH
33493: CALL_OW 69
33497: IN
33498: ST_TO_ADDR
// end ;
33499: LD_VAR 0 2
33503: RET
// export function IsNotFull ( building ) ; var places ; begin
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
// if not building then
33508: LD_VAR 0 1
33512: NOT
33513: IFFALSE 33517
// exit ;
33515: GO 33688
// result := false ;
33517: LD_ADDR_VAR 0 2
33521: PUSH
33522: LD_INT 0
33524: ST_TO_ADDR
// places := 0 ;
33525: LD_ADDR_VAR 0 3
33529: PUSH
33530: LD_INT 0
33532: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 266
33542: PUSH
33543: LD_INT 0
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33605
33549: LD_INT 1
33551: DOUBLE
33552: EQUAL
33553: IFTRUE 33605
33555: LD_INT 6
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33605
33561: LD_INT 7
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33605
33567: LD_INT 8
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33605
33573: LD_INT 4
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33605
33579: LD_INT 5
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33605
33585: LD_INT 2
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33605
33591: LD_INT 3
33593: DOUBLE
33594: EQUAL
33595: IFTRUE 33605
33597: LD_INT 35
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33616
33605: POP
// places := 6 ; b_bunker , b_breastwork :
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_INT 6
33613: ST_TO_ADDR
33614: GO 33661
33616: LD_INT 32
33618: DOUBLE
33619: EQUAL
33620: IFTRUE 33630
33622: LD_INT 31
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33641
33630: POP
// places := 1 ; b_control_tower :
33631: LD_ADDR_VAR 0 3
33635: PUSH
33636: LD_INT 1
33638: ST_TO_ADDR
33639: GO 33661
33641: LD_INT 36
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33660
33649: POP
// places := 3 ; end ;
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 3
33657: ST_TO_ADDR
33658: GO 33661
33660: POP
// if places then
33661: LD_VAR 0 3
33665: IFFALSE 33688
// result := UnitsInside ( building ) < places ;
33667: LD_ADDR_VAR 0 2
33671: PUSH
33672: LD_VAR 0 1
33676: PPUSH
33677: CALL_OW 313
33681: PUSH
33682: LD_VAR 0 3
33686: LESS
33687: ST_TO_ADDR
// end ;
33688: LD_VAR 0 2
33692: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
33697: PPUSH
33698: PPUSH
// tmp := [ ] ;
33699: LD_ADDR_VAR 0 3
33703: PUSH
33704: EMPTY
33705: ST_TO_ADDR
// list := [ ] ;
33706: LD_ADDR_VAR 0 5
33710: PUSH
33711: EMPTY
33712: ST_TO_ADDR
// for i = 16 to 25 do
33713: LD_ADDR_VAR 0 4
33717: PUSH
33718: DOUBLE
33719: LD_INT 16
33721: DEC
33722: ST_TO_ADDR
33723: LD_INT 25
33725: PUSH
33726: FOR_TO
33727: IFFALSE 33800
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33729: LD_ADDR_VAR 0 3
33733: PUSH
33734: LD_VAR 0 3
33738: PUSH
33739: LD_INT 22
33741: PUSH
33742: LD_VAR 0 1
33746: PPUSH
33747: CALL_OW 255
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 91
33758: PUSH
33759: LD_VAR 0 1
33763: PUSH
33764: LD_INT 6
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 30
33774: PUSH
33775: LD_VAR 0 4
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: EMPTY
33790: LIST
33791: PPUSH
33792: CALL_OW 69
33796: ADD
33797: ST_TO_ADDR
33798: GO 33726
33800: POP
33801: POP
// for i = 1 to tmp do
33802: LD_ADDR_VAR 0 4
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_VAR 0 3
33816: PUSH
33817: FOR_TO
33818: IFFALSE 33906
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33820: LD_ADDR_VAR 0 5
33824: PUSH
33825: LD_VAR 0 5
33829: PUSH
33830: LD_VAR 0 3
33834: PUSH
33835: LD_VAR 0 4
33839: ARRAY
33840: PPUSH
33841: CALL_OW 266
33845: PUSH
33846: LD_VAR 0 3
33850: PUSH
33851: LD_VAR 0 4
33855: ARRAY
33856: PPUSH
33857: CALL_OW 250
33861: PUSH
33862: LD_VAR 0 3
33866: PUSH
33867: LD_VAR 0 4
33871: ARRAY
33872: PPUSH
33873: CALL_OW 251
33877: PUSH
33878: LD_VAR 0 3
33882: PUSH
33883: LD_VAR 0 4
33887: ARRAY
33888: PPUSH
33889: CALL_OW 254
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: ADD
33903: ST_TO_ADDR
33904: GO 33817
33906: POP
33907: POP
// result := list ;
33908: LD_ADDR_VAR 0 2
33912: PUSH
33913: LD_VAR 0 5
33917: ST_TO_ADDR
// end ;
33918: LD_VAR 0 2
33922: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
// if not factory then
33932: LD_VAR 0 1
33936: NOT
33937: IFFALSE 33941
// exit ;
33939: GO 34534
// if control = control_apeman then
33941: LD_VAR 0 4
33945: PUSH
33946: LD_INT 5
33948: EQUAL
33949: IFFALSE 34058
// begin tmp := UnitsInside ( factory ) ;
33951: LD_ADDR_VAR 0 8
33955: PUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 313
33965: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33966: LD_VAR 0 8
33970: PPUSH
33971: LD_INT 25
33973: PUSH
33974: LD_INT 12
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PPUSH
33981: CALL_OW 72
33985: NOT
33986: IFFALSE 33996
// control := control_manual ;
33988: LD_ADDR_VAR 0 4
33992: PUSH
33993: LD_INT 1
33995: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33996: LD_ADDR_VAR 0 8
34000: PUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: CALL 33693 0 1
34010: ST_TO_ADDR
// if tmp then
34011: LD_VAR 0 8
34015: IFFALSE 34058
// begin for i in tmp do
34017: LD_ADDR_VAR 0 7
34021: PUSH
34022: LD_VAR 0 8
34026: PUSH
34027: FOR_IN
34028: IFFALSE 34056
// if i [ 1 ] = b_ext_radio then
34030: LD_VAR 0 7
34034: PUSH
34035: LD_INT 1
34037: ARRAY
34038: PUSH
34039: LD_INT 22
34041: EQUAL
34042: IFFALSE 34054
// begin control := control_remote ;
34044: LD_ADDR_VAR 0 4
34048: PUSH
34049: LD_INT 2
34051: ST_TO_ADDR
// break ;
34052: GO 34056
// end ;
34054: GO 34027
34056: POP
34057: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34058: LD_VAR 0 1
34062: PPUSH
34063: LD_VAR 0 2
34067: PPUSH
34068: LD_VAR 0 3
34072: PPUSH
34073: LD_VAR 0 4
34077: PPUSH
34078: LD_VAR 0 5
34082: PPUSH
34083: CALL_OW 448
34087: IFFALSE 34122
// begin result := [ chassis , engine , control , weapon ] ;
34089: LD_ADDR_VAR 0 6
34093: PUSH
34094: LD_VAR 0 2
34098: PUSH
34099: LD_VAR 0 3
34103: PUSH
34104: LD_VAR 0 4
34108: PUSH
34109: LD_VAR 0 5
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// exit ;
34120: GO 34534
// end ; _chassis := AvailableChassisList ( factory ) ;
34122: LD_ADDR_VAR 0 9
34126: PUSH
34127: LD_VAR 0 1
34131: PPUSH
34132: CALL_OW 475
34136: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34137: LD_ADDR_VAR 0 11
34141: PUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL_OW 476
34151: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34152: LD_ADDR_VAR 0 12
34156: PUSH
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 477
34166: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34167: LD_ADDR_VAR 0 10
34171: PUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 478
34181: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34182: LD_VAR 0 9
34186: NOT
34187: PUSH
34188: LD_VAR 0 11
34192: NOT
34193: OR
34194: PUSH
34195: LD_VAR 0 12
34199: NOT
34200: OR
34201: PUSH
34202: LD_VAR 0 10
34206: NOT
34207: OR
34208: IFFALSE 34243
// begin result := [ chassis , engine , control , weapon ] ;
34210: LD_ADDR_VAR 0 6
34214: PUSH
34215: LD_VAR 0 2
34219: PUSH
34220: LD_VAR 0 3
34224: PUSH
34225: LD_VAR 0 4
34229: PUSH
34230: LD_VAR 0 5
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
// exit ;
34241: GO 34534
// end ; if not chassis in _chassis then
34243: LD_VAR 0 2
34247: PUSH
34248: LD_VAR 0 9
34252: IN
34253: NOT
34254: IFFALSE 34280
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34256: LD_ADDR_VAR 0 2
34260: PUSH
34261: LD_VAR 0 9
34265: PUSH
34266: LD_INT 1
34268: PPUSH
34269: LD_VAR 0 9
34273: PPUSH
34274: CALL_OW 12
34278: ARRAY
34279: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34280: LD_VAR 0 2
34284: PPUSH
34285: LD_VAR 0 3
34289: PPUSH
34290: CALL 34539 0 2
34294: NOT
34295: IFFALSE 34354
// repeat engine := _engine [ 1 ] ;
34297: LD_ADDR_VAR 0 3
34301: PUSH
34302: LD_VAR 0 11
34306: PUSH
34307: LD_INT 1
34309: ARRAY
34310: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34311: LD_ADDR_VAR 0 11
34315: PUSH
34316: LD_VAR 0 11
34320: PPUSH
34321: LD_INT 1
34323: PPUSH
34324: CALL_OW 3
34328: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34329: LD_VAR 0 2
34333: PPUSH
34334: LD_VAR 0 3
34338: PPUSH
34339: CALL 34539 0 2
34343: PUSH
34344: LD_VAR 0 11
34348: PUSH
34349: EMPTY
34350: EQUAL
34351: OR
34352: IFFALSE 34297
// if not control in _control then
34354: LD_VAR 0 4
34358: PUSH
34359: LD_VAR 0 12
34363: IN
34364: NOT
34365: IFFALSE 34391
// control := _control [ rand ( 1 , _control ) ] ;
34367: LD_ADDR_VAR 0 4
34371: PUSH
34372: LD_VAR 0 12
34376: PUSH
34377: LD_INT 1
34379: PPUSH
34380: LD_VAR 0 12
34384: PPUSH
34385: CALL_OW 12
34389: ARRAY
34390: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34391: LD_VAR 0 2
34395: PPUSH
34396: LD_VAR 0 5
34400: PPUSH
34401: CALL 34759 0 2
34405: NOT
34406: IFFALSE 34465
// repeat weapon := _weapon [ 1 ] ;
34408: LD_ADDR_VAR 0 5
34412: PUSH
34413: LD_VAR 0 10
34417: PUSH
34418: LD_INT 1
34420: ARRAY
34421: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34422: LD_ADDR_VAR 0 10
34426: PUSH
34427: LD_VAR 0 10
34431: PPUSH
34432: LD_INT 1
34434: PPUSH
34435: CALL_OW 3
34439: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34440: LD_VAR 0 2
34444: PPUSH
34445: LD_VAR 0 5
34449: PPUSH
34450: CALL 34759 0 2
34454: PUSH
34455: LD_VAR 0 10
34459: PUSH
34460: EMPTY
34461: EQUAL
34462: OR
34463: IFFALSE 34408
// result := [ ] ;
34465: LD_ADDR_VAR 0 6
34469: PUSH
34470: EMPTY
34471: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34472: LD_VAR 0 1
34476: PPUSH
34477: LD_VAR 0 2
34481: PPUSH
34482: LD_VAR 0 3
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: LD_VAR 0 5
34496: PPUSH
34497: CALL_OW 448
34501: IFFALSE 34534
// result := [ chassis , engine , control , weapon ] ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_VAR 0 2
34512: PUSH
34513: LD_VAR 0 3
34517: PUSH
34518: LD_VAR 0 4
34522: PUSH
34523: LD_VAR 0 5
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// end ;
34534: LD_VAR 0 6
34538: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34539: LD_INT 0
34541: PPUSH
// if not chassis or not engine then
34542: LD_VAR 0 1
34546: NOT
34547: PUSH
34548: LD_VAR 0 2
34552: NOT
34553: OR
34554: IFFALSE 34558
// exit ;
34556: GO 34754
// case engine of engine_solar :
34558: LD_VAR 0 2
34562: PUSH
34563: LD_INT 2
34565: DOUBLE
34566: EQUAL
34567: IFTRUE 34571
34569: GO 34609
34571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34572: LD_ADDR_VAR 0 3
34576: PUSH
34577: LD_INT 11
34579: PUSH
34580: LD_INT 12
34582: PUSH
34583: LD_INT 13
34585: PUSH
34586: LD_INT 14
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: ST_TO_ADDR
34607: GO 34738
34609: LD_INT 1
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34617
34615: GO 34679
34617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_INT 11
34625: PUSH
34626: LD_INT 12
34628: PUSH
34629: LD_INT 13
34631: PUSH
34632: LD_INT 14
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 5
34649: PUSH
34650: LD_INT 21
34652: PUSH
34653: LD_INT 23
34655: PUSH
34656: LD_INT 22
34658: PUSH
34659: LD_INT 24
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: ST_TO_ADDR
34677: GO 34738
34679: LD_INT 3
34681: DOUBLE
34682: EQUAL
34683: IFTRUE 34687
34685: GO 34737
34687: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_INT 13
34695: PUSH
34696: LD_INT 14
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: LD_INT 21
34713: PUSH
34714: LD_INT 22
34716: PUSH
34717: LD_INT 23
34719: PUSH
34720: LD_INT 24
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: ST_TO_ADDR
34735: GO 34738
34737: POP
// result := ( chassis in result ) ;
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_VAR 0 3
34752: IN
34753: ST_TO_ADDR
// end ;
34754: LD_VAR 0 3
34758: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34759: LD_INT 0
34761: PPUSH
// if not chassis or not weapon then
34762: LD_VAR 0 1
34766: NOT
34767: PUSH
34768: LD_VAR 0 2
34772: NOT
34773: OR
34774: IFFALSE 34778
// exit ;
34776: GO 35838
// case weapon of us_machine_gun :
34778: LD_VAR 0 2
34782: PUSH
34783: LD_INT 2
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34821
34791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 3
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 5
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35822
34821: LD_INT 3
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34859
34829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
34857: GO 35822
34859: LD_INT 11
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34897
34867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35822
34897: LD_INT 4
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34931
34905: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: LD_INT 4
34919: PUSH
34920: LD_INT 5
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: ST_TO_ADDR
34929: GO 35822
34931: LD_INT 5
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 34965
34939: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34940: LD_ADDR_VAR 0 3
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: ST_TO_ADDR
34963: GO 35822
34965: LD_INT 9
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 34999
34973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34974: LD_ADDR_VAR 0 3
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: ST_TO_ADDR
34997: GO 35822
34999: LD_INT 7
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35033
35007: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
35031: GO 35822
35033: LD_INT 12
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35067
35041: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 3
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: LD_INT 5
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: ST_TO_ADDR
35065: GO 35822
35067: LD_INT 13
35069: DOUBLE
35070: EQUAL
35071: IFTRUE 35075
35073: GO 35101
35075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: LD_INT 4
35089: PUSH
35090: LD_INT 5
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
35099: GO 35822
35101: LD_INT 14
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35127
35109: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35110: LD_ADDR_VAR 0 3
35114: PUSH
35115: LD_INT 4
35117: PUSH
35118: LD_INT 5
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: ST_TO_ADDR
35125: GO 35822
35127: LD_INT 6
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35135
35133: GO 35153
35135: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: LD_INT 4
35143: PUSH
35144: LD_INT 5
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: ST_TO_ADDR
35151: GO 35822
35153: LD_INT 10
35155: DOUBLE
35156: EQUAL
35157: IFTRUE 35161
35159: GO 35179
35161: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: LD_INT 4
35169: PUSH
35170: LD_INT 5
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: ST_TO_ADDR
35177: GO 35822
35179: LD_INT 22
35181: DOUBLE
35182: EQUAL
35183: IFTRUE 35187
35185: GO 35213
35187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_INT 11
35195: PUSH
35196: LD_INT 12
35198: PUSH
35199: LD_INT 13
35201: PUSH
35202: LD_INT 14
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: ST_TO_ADDR
35211: GO 35822
35213: LD_INT 23
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35221
35219: GO 35247
35221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35222: LD_ADDR_VAR 0 3
35226: PUSH
35227: LD_INT 11
35229: PUSH
35230: LD_INT 12
35232: PUSH
35233: LD_INT 13
35235: PUSH
35236: LD_INT 14
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: ST_TO_ADDR
35245: GO 35822
35247: LD_INT 24
35249: DOUBLE
35250: EQUAL
35251: IFTRUE 35255
35253: GO 35281
35255: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_INT 11
35263: PUSH
35264: LD_INT 12
35266: PUSH
35267: LD_INT 13
35269: PUSH
35270: LD_INT 14
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
35279: GO 35822
35281: LD_INT 30
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35315
35289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35290: LD_ADDR_VAR 0 3
35294: PUSH
35295: LD_INT 11
35297: PUSH
35298: LD_INT 12
35300: PUSH
35301: LD_INT 13
35303: PUSH
35304: LD_INT 14
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: ST_TO_ADDR
35313: GO 35822
35315: LD_INT 25
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35341
35323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_INT 13
35331: PUSH
35332: LD_INT 14
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: ST_TO_ADDR
35339: GO 35822
35341: LD_INT 27
35343: DOUBLE
35344: EQUAL
35345: IFTRUE 35349
35347: GO 35367
35349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35350: LD_ADDR_VAR 0 3
35354: PUSH
35355: LD_INT 13
35357: PUSH
35358: LD_INT 14
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: ST_TO_ADDR
35365: GO 35822
35367: LD_INT 92
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35401
35375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35376: LD_ADDR_VAR 0 3
35380: PUSH
35381: LD_INT 11
35383: PUSH
35384: LD_INT 12
35386: PUSH
35387: LD_INT 13
35389: PUSH
35390: LD_INT 14
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
35399: GO 35822
35401: LD_INT 28
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35427
35409: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35410: LD_ADDR_VAR 0 3
35414: PUSH
35415: LD_INT 13
35417: PUSH
35418: LD_INT 14
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: ST_TO_ADDR
35425: GO 35822
35427: LD_INT 29
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35453
35435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35436: LD_ADDR_VAR 0 3
35440: PUSH
35441: LD_INT 13
35443: PUSH
35444: LD_INT 14
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 35822
35453: LD_INT 31
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35479
35461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 13
35469: PUSH
35470: LD_INT 14
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: ST_TO_ADDR
35477: GO 35822
35479: LD_INT 26
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35505
35487: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_INT 13
35495: PUSH
35496: LD_INT 14
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: ST_TO_ADDR
35503: GO 35822
35505: LD_INT 42
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35513
35511: GO 35539
35513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35514: LD_ADDR_VAR 0 3
35518: PUSH
35519: LD_INT 21
35521: PUSH
35522: LD_INT 22
35524: PUSH
35525: LD_INT 23
35527: PUSH
35528: LD_INT 24
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
35537: GO 35822
35539: LD_INT 43
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35573
35547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35548: LD_ADDR_VAR 0 3
35552: PUSH
35553: LD_INT 21
35555: PUSH
35556: LD_INT 22
35558: PUSH
35559: LD_INT 23
35561: PUSH
35562: LD_INT 24
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
35571: GO 35822
35573: LD_INT 44
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35607
35581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 21
35589: PUSH
35590: LD_INT 22
35592: PUSH
35593: LD_INT 23
35595: PUSH
35596: LD_INT 24
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
35605: GO 35822
35607: LD_INT 45
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35615
35613: GO 35641
35615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_INT 21
35623: PUSH
35624: LD_INT 22
35626: PUSH
35627: LD_INT 23
35629: PUSH
35630: LD_INT 24
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
35639: GO 35822
35641: LD_INT 49
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35649
35647: GO 35675
35649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 21
35657: PUSH
35658: LD_INT 22
35660: PUSH
35661: LD_INT 23
35663: PUSH
35664: LD_INT 24
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
35673: GO 35822
35675: LD_INT 51
35677: DOUBLE
35678: EQUAL
35679: IFTRUE 35683
35681: GO 35709
35683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35684: LD_ADDR_VAR 0 3
35688: PUSH
35689: LD_INT 21
35691: PUSH
35692: LD_INT 22
35694: PUSH
35695: LD_INT 23
35697: PUSH
35698: LD_INT 24
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
35707: GO 35822
35709: LD_INT 52
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35717
35715: GO 35743
35717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_INT 21
35725: PUSH
35726: LD_INT 22
35728: PUSH
35729: LD_INT 23
35731: PUSH
35732: LD_INT 24
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
35741: GO 35822
35743: LD_INT 53
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35769
35751: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 23
35759: PUSH
35760: LD_INT 24
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: ST_TO_ADDR
35767: GO 35822
35769: LD_INT 46
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35777
35775: GO 35795
35777: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35778: LD_ADDR_VAR 0 3
35782: PUSH
35783: LD_INT 23
35785: PUSH
35786: LD_INT 24
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: ST_TO_ADDR
35793: GO 35822
35795: LD_INT 47
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35803
35801: GO 35821
35803: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 23
35811: PUSH
35812: LD_INT 24
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: ST_TO_ADDR
35819: GO 35822
35821: POP
// result := ( chassis in result ) ;
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_VAR 0 1
35831: PUSH
35832: LD_VAR 0 3
35836: IN
35837: ST_TO_ADDR
// end ;
35838: LD_VAR 0 3
35842: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
// result := array ;
35852: LD_ADDR_VAR 0 5
35856: PUSH
35857: LD_VAR 0 1
35861: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35862: LD_VAR 0 1
35866: NOT
35867: PUSH
35868: LD_VAR 0 2
35872: NOT
35873: OR
35874: PUSH
35875: LD_VAR 0 3
35879: NOT
35880: OR
35881: PUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_VAR 0 1
35891: GREATER
35892: OR
35893: PUSH
35894: LD_VAR 0 3
35898: PUSH
35899: LD_VAR 0 1
35903: GREATER
35904: OR
35905: IFFALSE 35909
// exit ;
35907: GO 36205
// if direction then
35909: LD_VAR 0 4
35913: IFFALSE 35977
// begin d := 1 ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_INT 1
35922: ST_TO_ADDR
// if i_from > i_to then
35923: LD_VAR 0 2
35927: PUSH
35928: LD_VAR 0 3
35932: GREATER
35933: IFFALSE 35959
// length := ( array - i_from ) + i_to else
35935: LD_ADDR_VAR 0 11
35939: PUSH
35940: LD_VAR 0 1
35944: PUSH
35945: LD_VAR 0 2
35949: MINUS
35950: PUSH
35951: LD_VAR 0 3
35955: PLUS
35956: ST_TO_ADDR
35957: GO 35975
// length := i_to - i_from ;
35959: LD_ADDR_VAR 0 11
35963: PUSH
35964: LD_VAR 0 3
35968: PUSH
35969: LD_VAR 0 2
35973: MINUS
35974: ST_TO_ADDR
// end else
35975: GO 36038
// begin d := - 1 ;
35977: LD_ADDR_VAR 0 9
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: ST_TO_ADDR
// if i_from > i_to then
35986: LD_VAR 0 2
35990: PUSH
35991: LD_VAR 0 3
35995: GREATER
35996: IFFALSE 36016
// length := i_from - i_to else
35998: LD_ADDR_VAR 0 11
36002: PUSH
36003: LD_VAR 0 2
36007: PUSH
36008: LD_VAR 0 3
36012: MINUS
36013: ST_TO_ADDR
36014: GO 36038
// length := ( array - i_to ) + i_from ;
36016: LD_ADDR_VAR 0 11
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_VAR 0 3
36030: MINUS
36031: PUSH
36032: LD_VAR 0 2
36036: PLUS
36037: ST_TO_ADDR
// end ; if not length then
36038: LD_VAR 0 11
36042: NOT
36043: IFFALSE 36047
// exit ;
36045: GO 36205
// tmp := array ;
36047: LD_ADDR_VAR 0 10
36051: PUSH
36052: LD_VAR 0 1
36056: ST_TO_ADDR
// for i = 1 to length do
36057: LD_ADDR_VAR 0 6
36061: PUSH
36062: DOUBLE
36063: LD_INT 1
36065: DEC
36066: ST_TO_ADDR
36067: LD_VAR 0 11
36071: PUSH
36072: FOR_TO
36073: IFFALSE 36193
// begin for j = 1 to array do
36075: LD_ADDR_VAR 0 7
36079: PUSH
36080: DOUBLE
36081: LD_INT 1
36083: DEC
36084: ST_TO_ADDR
36085: LD_VAR 0 1
36089: PUSH
36090: FOR_TO
36091: IFFALSE 36179
// begin k := j + d ;
36093: LD_ADDR_VAR 0 8
36097: PUSH
36098: LD_VAR 0 7
36102: PUSH
36103: LD_VAR 0 9
36107: PLUS
36108: ST_TO_ADDR
// if k > array then
36109: LD_VAR 0 8
36113: PUSH
36114: LD_VAR 0 1
36118: GREATER
36119: IFFALSE 36129
// k := 1 ;
36121: LD_ADDR_VAR 0 8
36125: PUSH
36126: LD_INT 1
36128: ST_TO_ADDR
// if not k then
36129: LD_VAR 0 8
36133: NOT
36134: IFFALSE 36146
// k := array ;
36136: LD_ADDR_VAR 0 8
36140: PUSH
36141: LD_VAR 0 1
36145: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36146: LD_ADDR_VAR 0 10
36150: PUSH
36151: LD_VAR 0 10
36155: PPUSH
36156: LD_VAR 0 8
36160: PPUSH
36161: LD_VAR 0 1
36165: PUSH
36166: LD_VAR 0 7
36170: ARRAY
36171: PPUSH
36172: CALL_OW 1
36176: ST_TO_ADDR
// end ;
36177: GO 36090
36179: POP
36180: POP
// array := tmp ;
36181: LD_ADDR_VAR 0 1
36185: PUSH
36186: LD_VAR 0 10
36190: ST_TO_ADDR
// end ;
36191: GO 36072
36193: POP
36194: POP
// result := array ;
36195: LD_ADDR_VAR 0 5
36199: PUSH
36200: LD_VAR 0 1
36204: ST_TO_ADDR
// end ;
36205: LD_VAR 0 5
36209: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36210: LD_INT 0
36212: PPUSH
36213: PPUSH
// result := 0 ;
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_INT 0
36221: ST_TO_ADDR
// if not array or not value in array then
36222: LD_VAR 0 1
36226: NOT
36227: PUSH
36228: LD_VAR 0 2
36232: PUSH
36233: LD_VAR 0 1
36237: IN
36238: NOT
36239: OR
36240: IFFALSE 36244
// exit ;
36242: GO 36298
// for i = 1 to array do
36244: LD_ADDR_VAR 0 4
36248: PUSH
36249: DOUBLE
36250: LD_INT 1
36252: DEC
36253: ST_TO_ADDR
36254: LD_VAR 0 1
36258: PUSH
36259: FOR_TO
36260: IFFALSE 36296
// if value = array [ i ] then
36262: LD_VAR 0 2
36266: PUSH
36267: LD_VAR 0 1
36271: PUSH
36272: LD_VAR 0 4
36276: ARRAY
36277: EQUAL
36278: IFFALSE 36294
// begin result := i ;
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_VAR 0 4
36289: ST_TO_ADDR
// exit ;
36290: POP
36291: POP
36292: GO 36298
// end ;
36294: GO 36259
36296: POP
36297: POP
// end ;
36298: LD_VAR 0 3
36302: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36303: LD_INT 0
36305: PPUSH
// vc_chassis := chassis ;
36306: LD_ADDR_OWVAR 37
36310: PUSH
36311: LD_VAR 0 1
36315: ST_TO_ADDR
// vc_engine := engine ;
36316: LD_ADDR_OWVAR 39
36320: PUSH
36321: LD_VAR 0 2
36325: ST_TO_ADDR
// vc_control := control ;
36326: LD_ADDR_OWVAR 38
36330: PUSH
36331: LD_VAR 0 3
36335: ST_TO_ADDR
// vc_weapon := weapon ;
36336: LD_ADDR_OWVAR 40
36340: PUSH
36341: LD_VAR 0 4
36345: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36346: LD_ADDR_OWVAR 41
36350: PUSH
36351: LD_VAR 0 5
36355: ST_TO_ADDR
// end ;
36356: LD_VAR 0 6
36360: RET
// export function WantPlant ( unit ) ; var task ; begin
36361: LD_INT 0
36363: PPUSH
36364: PPUSH
// result := false ;
36365: LD_ADDR_VAR 0 2
36369: PUSH
36370: LD_INT 0
36372: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36373: LD_ADDR_VAR 0 3
36377: PUSH
36378: LD_VAR 0 1
36382: PPUSH
36383: CALL_OW 437
36387: ST_TO_ADDR
// if task then
36388: LD_VAR 0 3
36392: IFFALSE 36420
// if task [ 1 ] [ 1 ] = p then
36394: LD_VAR 0 3
36398: PUSH
36399: LD_INT 1
36401: ARRAY
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: PUSH
36407: LD_STRING p
36409: EQUAL
36410: IFFALSE 36420
// result := true ;
36412: LD_ADDR_VAR 0 2
36416: PUSH
36417: LD_INT 1
36419: ST_TO_ADDR
// end ;
36420: LD_VAR 0 2
36424: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
// if pos < 1 then
36431: LD_VAR 0 2
36435: PUSH
36436: LD_INT 1
36438: LESS
36439: IFFALSE 36443
// exit ;
36441: GO 36746
// if pos = 1 then
36443: LD_VAR 0 2
36447: PUSH
36448: LD_INT 1
36450: EQUAL
36451: IFFALSE 36484
// result := Replace ( arr , pos [ 1 ] , value ) else
36453: LD_ADDR_VAR 0 4
36457: PUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: LD_VAR 0 2
36467: PUSH
36468: LD_INT 1
36470: ARRAY
36471: PPUSH
36472: LD_VAR 0 3
36476: PPUSH
36477: CALL_OW 1
36481: ST_TO_ADDR
36482: GO 36746
// begin tmp := arr ;
36484: LD_ADDR_VAR 0 6
36488: PUSH
36489: LD_VAR 0 1
36493: ST_TO_ADDR
// s_arr := [ tmp ] ;
36494: LD_ADDR_VAR 0 7
36498: PUSH
36499: LD_VAR 0 6
36503: PUSH
36504: EMPTY
36505: LIST
36506: ST_TO_ADDR
// for i = 1 to pos - 1 do
36507: LD_ADDR_VAR 0 5
36511: PUSH
36512: DOUBLE
36513: LD_INT 1
36515: DEC
36516: ST_TO_ADDR
36517: LD_VAR 0 2
36521: PUSH
36522: LD_INT 1
36524: MINUS
36525: PUSH
36526: FOR_TO
36527: IFFALSE 36572
// begin tmp := tmp [ pos [ i ] ] ;
36529: LD_ADDR_VAR 0 6
36533: PUSH
36534: LD_VAR 0 6
36538: PUSH
36539: LD_VAR 0 2
36543: PUSH
36544: LD_VAR 0 5
36548: ARRAY
36549: ARRAY
36550: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36551: LD_ADDR_VAR 0 7
36555: PUSH
36556: LD_VAR 0 7
36560: PUSH
36561: LD_VAR 0 6
36565: PUSH
36566: EMPTY
36567: LIST
36568: ADD
36569: ST_TO_ADDR
// end ;
36570: GO 36526
36572: POP
36573: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36574: LD_ADDR_VAR 0 6
36578: PUSH
36579: LD_VAR 0 6
36583: PPUSH
36584: LD_VAR 0 2
36588: PUSH
36589: LD_VAR 0 2
36593: ARRAY
36594: PPUSH
36595: LD_VAR 0 3
36599: PPUSH
36600: CALL_OW 1
36604: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36605: LD_ADDR_VAR 0 7
36609: PUSH
36610: LD_VAR 0 7
36614: PPUSH
36615: LD_VAR 0 7
36619: PPUSH
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 1
36629: ST_TO_ADDR
// for i = s_arr downto 2 do
36630: LD_ADDR_VAR 0 5
36634: PUSH
36635: DOUBLE
36636: LD_VAR 0 7
36640: INC
36641: ST_TO_ADDR
36642: LD_INT 2
36644: PUSH
36645: FOR_DOWNTO
36646: IFFALSE 36730
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36648: LD_ADDR_VAR 0 6
36652: PUSH
36653: LD_VAR 0 7
36657: PUSH
36658: LD_VAR 0 5
36662: PUSH
36663: LD_INT 1
36665: MINUS
36666: ARRAY
36667: PPUSH
36668: LD_VAR 0 2
36672: PUSH
36673: LD_VAR 0 5
36677: PUSH
36678: LD_INT 1
36680: MINUS
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 7
36687: PUSH
36688: LD_VAR 0 5
36692: ARRAY
36693: PPUSH
36694: CALL_OW 1
36698: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36699: LD_ADDR_VAR 0 7
36703: PUSH
36704: LD_VAR 0 7
36708: PPUSH
36709: LD_VAR 0 5
36713: PUSH
36714: LD_INT 1
36716: MINUS
36717: PPUSH
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 1
36727: ST_TO_ADDR
// end ;
36728: GO 36645
36730: POP
36731: POP
// result := s_arr [ 1 ] ;
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: LD_VAR 0 7
36741: PUSH
36742: LD_INT 1
36744: ARRAY
36745: ST_TO_ADDR
// end ; end ;
36746: LD_VAR 0 4
36750: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
// if not list then
36755: LD_VAR 0 1
36759: NOT
36760: IFFALSE 36764
// exit ;
36762: GO 36855
// i := list [ pos1 ] ;
36764: LD_ADDR_VAR 0 5
36768: PUSH
36769: LD_VAR 0 1
36773: PUSH
36774: LD_VAR 0 2
36778: ARRAY
36779: ST_TO_ADDR
// if not i then
36780: LD_VAR 0 5
36784: NOT
36785: IFFALSE 36789
// exit ;
36787: GO 36855
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36789: LD_ADDR_VAR 0 1
36793: PUSH
36794: LD_VAR 0 1
36798: PPUSH
36799: LD_VAR 0 2
36803: PPUSH
36804: LD_VAR 0 1
36808: PUSH
36809: LD_VAR 0 3
36813: ARRAY
36814: PPUSH
36815: CALL_OW 1
36819: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36820: LD_ADDR_VAR 0 1
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 3
36834: PPUSH
36835: LD_VAR 0 5
36839: PPUSH
36840: CALL_OW 1
36844: ST_TO_ADDR
// result := list ;
36845: LD_ADDR_VAR 0 4
36849: PUSH
36850: LD_VAR 0 1
36854: ST_TO_ADDR
// end ;
36855: LD_VAR 0 4
36859: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36860: LD_INT 0
36862: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36863: LD_ADDR_VAR 0 5
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 250
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 251
36887: PPUSH
36888: LD_VAR 0 2
36892: PPUSH
36893: LD_VAR 0 3
36897: PPUSH
36898: LD_VAR 0 4
36902: PPUSH
36903: CALL 36913 0 5
36907: ST_TO_ADDR
// end ;
36908: LD_VAR 0 5
36912: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36913: LD_INT 0
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
// if not list then
36919: LD_VAR 0 3
36923: NOT
36924: IFFALSE 36928
// exit ;
36926: GO 37316
// result := [ ] ;
36928: LD_ADDR_VAR 0 6
36932: PUSH
36933: EMPTY
36934: ST_TO_ADDR
// for i in list do
36935: LD_ADDR_VAR 0 7
36939: PUSH
36940: LD_VAR 0 3
36944: PUSH
36945: FOR_IN
36946: IFFALSE 37148
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36948: LD_ADDR_VAR 0 9
36952: PUSH
36953: LD_VAR 0 7
36957: PPUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: LD_VAR 0 2
36967: PPUSH
36968: CALL_OW 297
36972: ST_TO_ADDR
// if not result then
36973: LD_VAR 0 6
36977: NOT
36978: IFFALSE 37004
// result := [ [ i , tmp ] ] else
36980: LD_ADDR_VAR 0 6
36984: PUSH
36985: LD_VAR 0 7
36989: PUSH
36990: LD_VAR 0 9
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: ST_TO_ADDR
37002: GO 37146
// begin if result [ result ] [ 2 ] < tmp then
37004: LD_VAR 0 6
37008: PUSH
37009: LD_VAR 0 6
37013: ARRAY
37014: PUSH
37015: LD_INT 2
37017: ARRAY
37018: PUSH
37019: LD_VAR 0 9
37023: LESS
37024: IFFALSE 37066
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37026: LD_ADDR_VAR 0 6
37030: PUSH
37031: LD_VAR 0 6
37035: PPUSH
37036: LD_VAR 0 6
37040: PUSH
37041: LD_INT 1
37043: PLUS
37044: PPUSH
37045: LD_VAR 0 7
37049: PUSH
37050: LD_VAR 0 9
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PPUSH
37059: CALL_OW 2
37063: ST_TO_ADDR
37064: GO 37146
// for j = 1 to result do
37066: LD_ADDR_VAR 0 8
37070: PUSH
37071: DOUBLE
37072: LD_INT 1
37074: DEC
37075: ST_TO_ADDR
37076: LD_VAR 0 6
37080: PUSH
37081: FOR_TO
37082: IFFALSE 37144
// begin if tmp < result [ j ] [ 2 ] then
37084: LD_VAR 0 9
37088: PUSH
37089: LD_VAR 0 6
37093: PUSH
37094: LD_VAR 0 8
37098: ARRAY
37099: PUSH
37100: LD_INT 2
37102: ARRAY
37103: LESS
37104: IFFALSE 37142
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37106: LD_ADDR_VAR 0 6
37110: PUSH
37111: LD_VAR 0 6
37115: PPUSH
37116: LD_VAR 0 8
37120: PPUSH
37121: LD_VAR 0 7
37125: PUSH
37126: LD_VAR 0 9
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PPUSH
37135: CALL_OW 2
37139: ST_TO_ADDR
// break ;
37140: GO 37144
// end ; end ;
37142: GO 37081
37144: POP
37145: POP
// end ; end ;
37146: GO 36945
37148: POP
37149: POP
// if result and not asc then
37150: LD_VAR 0 6
37154: PUSH
37155: LD_VAR 0 4
37159: NOT
37160: AND
37161: IFFALSE 37236
// begin tmp := result ;
37163: LD_ADDR_VAR 0 9
37167: PUSH
37168: LD_VAR 0 6
37172: ST_TO_ADDR
// for i = tmp downto 1 do
37173: LD_ADDR_VAR 0 7
37177: PUSH
37178: DOUBLE
37179: LD_VAR 0 9
37183: INC
37184: ST_TO_ADDR
37185: LD_INT 1
37187: PUSH
37188: FOR_DOWNTO
37189: IFFALSE 37234
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37191: LD_ADDR_VAR 0 6
37195: PUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: LD_VAR 0 9
37205: PUSH
37206: LD_VAR 0 7
37210: MINUS
37211: PUSH
37212: LD_INT 1
37214: PLUS
37215: PPUSH
37216: LD_VAR 0 9
37220: PUSH
37221: LD_VAR 0 7
37225: ARRAY
37226: PPUSH
37227: CALL_OW 1
37231: ST_TO_ADDR
37232: GO 37188
37234: POP
37235: POP
// end ; tmp := [ ] ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// if mode then
37243: LD_VAR 0 5
37247: IFFALSE 37316
// begin for i = 1 to result do
37249: LD_ADDR_VAR 0 7
37253: PUSH
37254: DOUBLE
37255: LD_INT 1
37257: DEC
37258: ST_TO_ADDR
37259: LD_VAR 0 6
37263: PUSH
37264: FOR_TO
37265: IFFALSE 37304
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37267: LD_ADDR_VAR 0 9
37271: PUSH
37272: LD_VAR 0 9
37276: PPUSH
37277: LD_VAR 0 7
37281: PPUSH
37282: LD_VAR 0 6
37286: PUSH
37287: LD_VAR 0 7
37291: ARRAY
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PPUSH
37297: CALL_OW 1
37301: ST_TO_ADDR
37302: GO 37264
37304: POP
37305: POP
// result := tmp ;
37306: LD_ADDR_VAR 0 6
37310: PUSH
37311: LD_VAR 0 9
37315: ST_TO_ADDR
// end ; end ;
37316: LD_VAR 0 6
37320: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37321: LD_INT 0
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37329: LD_ADDR_VAR 0 5
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// if not x or not y then
37351: LD_VAR 0 2
37355: NOT
37356: PUSH
37357: LD_VAR 0 3
37361: NOT
37362: OR
37363: IFFALSE 37367
// exit ;
37365: GO 39017
// if not range then
37367: LD_VAR 0 4
37371: NOT
37372: IFFALSE 37382
// range := 10 ;
37374: LD_ADDR_VAR 0 4
37378: PUSH
37379: LD_INT 10
37381: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37382: LD_ADDR_VAR 0 8
37386: PUSH
37387: LD_INT 81
37389: PUSH
37390: LD_VAR 0 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 92
37401: PUSH
37402: LD_VAR 0 2
37406: PUSH
37407: LD_VAR 0 3
37411: PUSH
37412: LD_VAR 0 4
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: LD_INT 21
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PPUSH
37445: CALL_OW 69
37449: ST_TO_ADDR
// if not tmp then
37450: LD_VAR 0 8
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 39017
// for i in tmp do
37459: LD_ADDR_VAR 0 6
37463: PUSH
37464: LD_VAR 0 8
37468: PUSH
37469: FOR_IN
37470: IFFALSE 38992
// begin points := [ 0 , 0 , 0 ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// bpoints := 1 ;
37491: LD_ADDR_VAR 0 10
37495: PUSH
37496: LD_INT 1
37498: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37499: LD_VAR 0 6
37503: PPUSH
37504: CALL_OW 247
37508: PUSH
37509: LD_INT 1
37511: DOUBLE
37512: EQUAL
37513: IFTRUE 37517
37515: GO 38095
37517: POP
// begin if GetClass ( i ) = 1 then
37518: LD_VAR 0 6
37522: PPUSH
37523: CALL_OW 257
37527: PUSH
37528: LD_INT 1
37530: EQUAL
37531: IFFALSE 37552
// points := [ 10 , 5 , 3 ] ;
37533: LD_ADDR_VAR 0 9
37537: PUSH
37538: LD_INT 10
37540: PUSH
37541: LD_INT 5
37543: PUSH
37544: LD_INT 3
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37552: LD_VAR 0 6
37556: PPUSH
37557: CALL_OW 257
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: LD_INT 3
37567: PUSH
37568: LD_INT 4
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: IN
37576: IFFALSE 37597
// points := [ 3 , 2 , 1 ] ;
37578: LD_ADDR_VAR 0 9
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37597: LD_VAR 0 6
37601: PPUSH
37602: CALL_OW 257
37606: PUSH
37607: LD_INT 5
37609: EQUAL
37610: IFFALSE 37631
// points := [ 130 , 5 , 2 ] ;
37612: LD_ADDR_VAR 0 9
37616: PUSH
37617: LD_INT 130
37619: PUSH
37620: LD_INT 5
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37631: LD_VAR 0 6
37635: PPUSH
37636: CALL_OW 257
37640: PUSH
37641: LD_INT 8
37643: EQUAL
37644: IFFALSE 37665
// points := [ 35 , 35 , 30 ] ;
37646: LD_ADDR_VAR 0 9
37650: PUSH
37651: LD_INT 35
37653: PUSH
37654: LD_INT 35
37656: PUSH
37657: LD_INT 30
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37665: LD_VAR 0 6
37669: PPUSH
37670: CALL_OW 257
37674: PUSH
37675: LD_INT 9
37677: EQUAL
37678: IFFALSE 37699
// points := [ 20 , 55 , 40 ] ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_INT 20
37687: PUSH
37688: LD_INT 55
37690: PUSH
37691: LD_INT 40
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37699: LD_VAR 0 6
37703: PPUSH
37704: CALL_OW 257
37708: PUSH
37709: LD_INT 12
37711: PUSH
37712: LD_INT 16
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: IN
37719: IFFALSE 37740
// points := [ 5 , 3 , 2 ] ;
37721: LD_ADDR_VAR 0 9
37725: PUSH
37726: LD_INT 5
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37740: LD_VAR 0 6
37744: PPUSH
37745: CALL_OW 257
37749: PUSH
37750: LD_INT 17
37752: EQUAL
37753: IFFALSE 37774
// points := [ 100 , 50 , 75 ] ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_INT 100
37762: PUSH
37763: LD_INT 50
37765: PUSH
37766: LD_INT 75
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37774: LD_VAR 0 6
37778: PPUSH
37779: CALL_OW 257
37783: PUSH
37784: LD_INT 15
37786: EQUAL
37787: IFFALSE 37808
// points := [ 10 , 5 , 3 ] ;
37789: LD_ADDR_VAR 0 9
37793: PUSH
37794: LD_INT 10
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37808: LD_VAR 0 6
37812: PPUSH
37813: CALL_OW 257
37817: PUSH
37818: LD_INT 14
37820: EQUAL
37821: IFFALSE 37842
// points := [ 10 , 0 , 0 ] ;
37823: LD_ADDR_VAR 0 9
37827: PUSH
37828: LD_INT 10
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37842: LD_VAR 0 6
37846: PPUSH
37847: CALL_OW 257
37851: PUSH
37852: LD_INT 11
37854: EQUAL
37855: IFFALSE 37876
// points := [ 30 , 10 , 5 ] ;
37857: LD_ADDR_VAR 0 9
37861: PUSH
37862: LD_INT 30
37864: PUSH
37865: LD_INT 10
37867: PUSH
37868: LD_INT 5
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37876: LD_VAR 0 1
37880: PPUSH
37881: LD_INT 5
37883: PPUSH
37884: CALL_OW 321
37888: PUSH
37889: LD_INT 2
37891: EQUAL
37892: IFFALSE 37909
// bpoints := bpoints * 1.8 ;
37894: LD_ADDR_VAR 0 10
37898: PUSH
37899: LD_VAR 0 10
37903: PUSH
37904: LD_REAL  1.80000000000000E+0000
37907: MUL
37908: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 257
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: LD_INT 4
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: IN
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_INT 51
37945: PPUSH
37946: CALL_OW 321
37950: PUSH
37951: LD_INT 2
37953: EQUAL
37954: AND
37955: IFFALSE 37972
// bpoints := bpoints * 1.2 ;
37957: LD_ADDR_VAR 0 10
37961: PUSH
37962: LD_VAR 0 10
37966: PUSH
37967: LD_REAL  1.20000000000000E+0000
37970: MUL
37971: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 257
37981: PUSH
37982: LD_INT 5
37984: PUSH
37985: LD_INT 7
37987: PUSH
37988: LD_INT 9
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: IN
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: LD_INT 52
38004: PPUSH
38005: CALL_OW 321
38009: PUSH
38010: LD_INT 2
38012: EQUAL
38013: AND
38014: IFFALSE 38031
// bpoints := bpoints * 1.5 ;
38016: LD_ADDR_VAR 0 10
38020: PUSH
38021: LD_VAR 0 10
38025: PUSH
38026: LD_REAL  1.50000000000000E+0000
38029: MUL
38030: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38031: LD_VAR 0 1
38035: PPUSH
38036: LD_INT 66
38038: PPUSH
38039: CALL_OW 321
38043: PUSH
38044: LD_INT 2
38046: EQUAL
38047: IFFALSE 38064
// bpoints := bpoints * 1.1 ;
38049: LD_ADDR_VAR 0 10
38053: PUSH
38054: LD_VAR 0 10
38058: PUSH
38059: LD_REAL  1.10000000000000E+0000
38062: MUL
38063: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38064: LD_ADDR_VAR 0 10
38068: PUSH
38069: LD_VAR 0 10
38073: PUSH
38074: LD_VAR 0 6
38078: PPUSH
38079: LD_INT 1
38081: PPUSH
38082: CALL_OW 259
38086: PUSH
38087: LD_REAL  1.15000000000000E+0000
38090: MUL
38091: MUL
38092: ST_TO_ADDR
// end ; unit_vehicle :
38093: GO 38921
38095: LD_INT 2
38097: DOUBLE
38098: EQUAL
38099: IFTRUE 38103
38101: GO 38909
38103: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38104: LD_VAR 0 6
38108: PPUSH
38109: CALL_OW 264
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 42
38119: PUSH
38120: LD_INT 24
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: IN
38128: IFFALSE 38149
// points := [ 25 , 5 , 3 ] ;
38130: LD_ADDR_VAR 0 9
38134: PUSH
38135: LD_INT 25
38137: PUSH
38138: LD_INT 5
38140: PUSH
38141: LD_INT 3
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38149: LD_VAR 0 6
38153: PPUSH
38154: CALL_OW 264
38158: PUSH
38159: LD_INT 4
38161: PUSH
38162: LD_INT 43
38164: PUSH
38165: LD_INT 25
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: IN
38173: IFFALSE 38194
// points := [ 40 , 15 , 5 ] ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_INT 40
38182: PUSH
38183: LD_INT 15
38185: PUSH
38186: LD_INT 5
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38194: LD_VAR 0 6
38198: PPUSH
38199: CALL_OW 264
38203: PUSH
38204: LD_INT 3
38206: PUSH
38207: LD_INT 23
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: IN
38214: IFFALSE 38235
// points := [ 7 , 25 , 8 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 7
38223: PUSH
38224: LD_INT 25
38226: PUSH
38227: LD_INT 8
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38235: LD_VAR 0 6
38239: PPUSH
38240: CALL_OW 264
38244: PUSH
38245: LD_INT 5
38247: PUSH
38248: LD_INT 27
38250: PUSH
38251: LD_INT 44
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: IN
38259: IFFALSE 38280
// points := [ 14 , 50 , 16 ] ;
38261: LD_ADDR_VAR 0 9
38265: PUSH
38266: LD_INT 14
38268: PUSH
38269: LD_INT 50
38271: PUSH
38272: LD_INT 16
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38280: LD_VAR 0 6
38284: PPUSH
38285: CALL_OW 264
38289: PUSH
38290: LD_INT 6
38292: PUSH
38293: LD_INT 46
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: IN
38300: IFFALSE 38321
// points := [ 32 , 120 , 70 ] ;
38302: LD_ADDR_VAR 0 9
38306: PUSH
38307: LD_INT 32
38309: PUSH
38310: LD_INT 120
38312: PUSH
38313: LD_INT 70
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38321: LD_VAR 0 6
38325: PPUSH
38326: CALL_OW 264
38330: PUSH
38331: LD_INT 7
38333: PUSH
38334: LD_INT 28
38336: PUSH
38337: LD_INT 45
38339: PUSH
38340: LD_INT 92
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: IN
38349: IFFALSE 38370
// points := [ 35 , 20 , 45 ] ;
38351: LD_ADDR_VAR 0 9
38355: PUSH
38356: LD_INT 35
38358: PUSH
38359: LD_INT 20
38361: PUSH
38362: LD_INT 45
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38370: LD_VAR 0 6
38374: PPUSH
38375: CALL_OW 264
38379: PUSH
38380: LD_INT 47
38382: PUSH
38383: EMPTY
38384: LIST
38385: IN
38386: IFFALSE 38407
// points := [ 67 , 45 , 75 ] ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_INT 67
38395: PUSH
38396: LD_INT 45
38398: PUSH
38399: LD_INT 75
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38407: LD_VAR 0 6
38411: PPUSH
38412: CALL_OW 264
38416: PUSH
38417: LD_INT 26
38419: PUSH
38420: EMPTY
38421: LIST
38422: IN
38423: IFFALSE 38444
// points := [ 120 , 30 , 80 ] ;
38425: LD_ADDR_VAR 0 9
38429: PUSH
38430: LD_INT 120
38432: PUSH
38433: LD_INT 30
38435: PUSH
38436: LD_INT 80
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38444: LD_VAR 0 6
38448: PPUSH
38449: CALL_OW 264
38453: PUSH
38454: LD_INT 22
38456: PUSH
38457: EMPTY
38458: LIST
38459: IN
38460: IFFALSE 38481
// points := [ 40 , 1 , 1 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 40
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 264
38490: PUSH
38491: LD_INT 29
38493: PUSH
38494: EMPTY
38495: LIST
38496: IN
38497: IFFALSE 38518
// points := [ 70 , 200 , 400 ] ;
38499: LD_ADDR_VAR 0 9
38503: PUSH
38504: LD_INT 70
38506: PUSH
38507: LD_INT 200
38509: PUSH
38510: LD_INT 400
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38518: LD_VAR 0 6
38522: PPUSH
38523: CALL_OW 264
38527: PUSH
38528: LD_INT 14
38530: PUSH
38531: LD_INT 53
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: IN
38538: IFFALSE 38559
// points := [ 40 , 10 , 20 ] ;
38540: LD_ADDR_VAR 0 9
38544: PUSH
38545: LD_INT 40
38547: PUSH
38548: LD_INT 10
38550: PUSH
38551: LD_INT 20
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38559: LD_VAR 0 6
38563: PPUSH
38564: CALL_OW 264
38568: PUSH
38569: LD_INT 9
38571: PUSH
38572: EMPTY
38573: LIST
38574: IN
38575: IFFALSE 38596
// points := [ 5 , 70 , 20 ] ;
38577: LD_ADDR_VAR 0 9
38581: PUSH
38582: LD_INT 5
38584: PUSH
38585: LD_INT 70
38587: PUSH
38588: LD_INT 20
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38596: LD_VAR 0 6
38600: PPUSH
38601: CALL_OW 264
38605: PUSH
38606: LD_INT 10
38608: PUSH
38609: EMPTY
38610: LIST
38611: IN
38612: IFFALSE 38633
// points := [ 35 , 110 , 70 ] ;
38614: LD_ADDR_VAR 0 9
38618: PUSH
38619: LD_INT 35
38621: PUSH
38622: LD_INT 110
38624: PUSH
38625: LD_INT 70
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38633: LD_VAR 0 6
38637: PPUSH
38638: CALL_OW 265
38642: PUSH
38643: LD_INT 25
38645: EQUAL
38646: IFFALSE 38667
// points := [ 80 , 65 , 100 ] ;
38648: LD_ADDR_VAR 0 9
38652: PUSH
38653: LD_INT 80
38655: PUSH
38656: LD_INT 65
38658: PUSH
38659: LD_INT 100
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38667: LD_VAR 0 6
38671: PPUSH
38672: CALL_OW 263
38676: PUSH
38677: LD_INT 1
38679: EQUAL
38680: IFFALSE 38715
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38682: LD_ADDR_VAR 0 10
38686: PUSH
38687: LD_VAR 0 10
38691: PUSH
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 311
38701: PPUSH
38702: LD_INT 3
38704: PPUSH
38705: CALL_OW 259
38709: PUSH
38710: LD_INT 4
38712: MUL
38713: MUL
38714: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38715: LD_VAR 0 6
38719: PPUSH
38720: CALL_OW 263
38724: PUSH
38725: LD_INT 2
38727: EQUAL
38728: IFFALSE 38779
// begin j := IsControledBy ( i ) ;
38730: LD_ADDR_VAR 0 7
38734: PUSH
38735: LD_VAR 0 6
38739: PPUSH
38740: CALL_OW 312
38744: ST_TO_ADDR
// if j then
38745: LD_VAR 0 7
38749: IFFALSE 38779
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38751: LD_ADDR_VAR 0 10
38755: PUSH
38756: LD_VAR 0 10
38760: PUSH
38761: LD_VAR 0 7
38765: PPUSH
38766: LD_INT 3
38768: PPUSH
38769: CALL_OW 259
38773: PUSH
38774: LD_INT 3
38776: MUL
38777: MUL
38778: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 264
38788: PUSH
38789: LD_INT 5
38791: PUSH
38792: LD_INT 6
38794: PUSH
38795: LD_INT 46
38797: PUSH
38798: LD_INT 44
38800: PUSH
38801: LD_INT 47
38803: PUSH
38804: LD_INT 45
38806: PUSH
38807: LD_INT 28
38809: PUSH
38810: LD_INT 7
38812: PUSH
38813: LD_INT 27
38815: PUSH
38816: LD_INT 29
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: IN
38831: PUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: LD_INT 52
38839: PPUSH
38840: CALL_OW 321
38844: PUSH
38845: LD_INT 2
38847: EQUAL
38848: AND
38849: IFFALSE 38866
// bpoints := bpoints * 1.2 ;
38851: LD_ADDR_VAR 0 10
38855: PUSH
38856: LD_VAR 0 10
38860: PUSH
38861: LD_REAL  1.20000000000000E+0000
38864: MUL
38865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38866: LD_VAR 0 6
38870: PPUSH
38871: CALL_OW 264
38875: PUSH
38876: LD_INT 6
38878: PUSH
38879: LD_INT 46
38881: PUSH
38882: LD_INT 47
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: IN
38890: IFFALSE 38907
// bpoints := bpoints * 1.2 ;
38892: LD_ADDR_VAR 0 10
38896: PUSH
38897: LD_VAR 0 10
38901: PUSH
38902: LD_REAL  1.20000000000000E+0000
38905: MUL
38906: ST_TO_ADDR
// end ; unit_building :
38907: GO 38921
38909: LD_INT 3
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38920
38917: POP
// ; end ;
38918: GO 38921
38920: POP
// for j = 1 to 3 do
38921: LD_ADDR_VAR 0 7
38925: PUSH
38926: DOUBLE
38927: LD_INT 1
38929: DEC
38930: ST_TO_ADDR
38931: LD_INT 3
38933: PUSH
38934: FOR_TO
38935: IFFALSE 38988
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38937: LD_ADDR_VAR 0 5
38941: PUSH
38942: LD_VAR 0 5
38946: PPUSH
38947: LD_VAR 0 7
38951: PPUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_VAR 0 7
38961: ARRAY
38962: PUSH
38963: LD_VAR 0 9
38967: PUSH
38968: LD_VAR 0 7
38972: ARRAY
38973: PUSH
38974: LD_VAR 0 10
38978: MUL
38979: PLUS
38980: PPUSH
38981: CALL_OW 1
38985: ST_TO_ADDR
38986: GO 38934
38988: POP
38989: POP
// end ;
38990: GO 37469
38992: POP
38993: POP
// result := Replace ( result , 4 , tmp ) ;
38994: LD_ADDR_VAR 0 5
38998: PUSH
38999: LD_VAR 0 5
39003: PPUSH
39004: LD_INT 4
39006: PPUSH
39007: LD_VAR 0 8
39011: PPUSH
39012: CALL_OW 1
39016: ST_TO_ADDR
// end ;
39017: LD_VAR 0 5
39021: RET
// export function DangerAtRange ( unit , range ) ; begin
39022: LD_INT 0
39024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39025: LD_ADDR_VAR 0 3
39029: PUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 255
39039: PPUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 250
39049: PPUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 251
39059: PPUSH
39060: LD_VAR 0 2
39064: PPUSH
39065: CALL 37321 0 4
39069: ST_TO_ADDR
// end ;
39070: LD_VAR 0 3
39074: RET
// export function DangerInArea ( side , area ) ; begin
39075: LD_INT 0
39077: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39078: LD_ADDR_VAR 0 3
39082: PUSH
39083: LD_VAR 0 2
39087: PPUSH
39088: LD_INT 81
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PPUSH
39100: CALL_OW 70
39104: ST_TO_ADDR
// end ;
39105: LD_VAR 0 3
39109: RET
// export function IsExtension ( b ) ; begin
39110: LD_INT 0
39112: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39113: LD_ADDR_VAR 0 2
39117: PUSH
39118: LD_VAR 0 1
39122: PUSH
39123: LD_INT 23
39125: PUSH
39126: LD_INT 20
39128: PUSH
39129: LD_INT 22
39131: PUSH
39132: LD_INT 17
39134: PUSH
39135: LD_INT 24
39137: PUSH
39138: LD_INT 21
39140: PUSH
39141: LD_INT 19
39143: PUSH
39144: LD_INT 16
39146: PUSH
39147: LD_INT 25
39149: PUSH
39150: LD_INT 18
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: IN
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 2
39170: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
// result := [ ] ;
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: EMPTY
39182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39183: LD_ADDR_VAR 0 5
39187: PUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_INT 21
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PPUSH
39203: CALL_OW 70
39207: ST_TO_ADDR
// if not tmp then
39208: LD_VAR 0 5
39212: NOT
39213: IFFALSE 39217
// exit ;
39215: GO 39281
// if checkLink then
39217: LD_VAR 0 3
39221: IFFALSE 39271
// begin for i in tmp do
39223: LD_ADDR_VAR 0 6
39227: PUSH
39228: LD_VAR 0 5
39232: PUSH
39233: FOR_IN
39234: IFFALSE 39269
// if GetBase ( i ) <> base then
39236: LD_VAR 0 6
39240: PPUSH
39241: CALL_OW 274
39245: PUSH
39246: LD_VAR 0 1
39250: NONEQUAL
39251: IFFALSE 39267
// ComLinkToBase ( base , i ) ;
39253: LD_VAR 0 1
39257: PPUSH
39258: LD_VAR 0 6
39262: PPUSH
39263: CALL_OW 169
39267: GO 39233
39269: POP
39270: POP
// end ; result := tmp ;
39271: LD_ADDR_VAR 0 4
39275: PUSH
39276: LD_VAR 0 5
39280: ST_TO_ADDR
// end ;
39281: LD_VAR 0 4
39285: RET
// export function ComComplete ( units , b ) ; var i ; begin
39286: LD_INT 0
39288: PPUSH
39289: PPUSH
// if not units then
39290: LD_VAR 0 1
39294: NOT
39295: IFFALSE 39299
// exit ;
39297: GO 39389
// for i in units do
39299: LD_ADDR_VAR 0 4
39303: PUSH
39304: LD_VAR 0 1
39308: PUSH
39309: FOR_IN
39310: IFFALSE 39387
// if BuildingStatus ( b ) = bs_build then
39312: LD_VAR 0 2
39316: PPUSH
39317: CALL_OW 461
39321: PUSH
39322: LD_INT 1
39324: EQUAL
39325: IFFALSE 39385
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39327: LD_VAR 0 4
39331: PPUSH
39332: LD_STRING h
39334: PUSH
39335: LD_VAR 0 2
39339: PPUSH
39340: CALL_OW 250
39344: PUSH
39345: LD_VAR 0 2
39349: PPUSH
39350: CALL_OW 251
39354: PUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: PUSH
39378: EMPTY
39379: LIST
39380: PPUSH
39381: CALL_OW 446
39385: GO 39309
39387: POP
39388: POP
// end ;
39389: LD_VAR 0 3
39393: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39394: LD_INT 0
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39402: LD_VAR 0 1
39406: NOT
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: CALL_OW 263
39417: PUSH
39418: LD_INT 2
39420: NONEQUAL
39421: OR
39422: IFFALSE 39426
// exit ;
39424: GO 39742
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39426: LD_ADDR_VAR 0 6
39430: PUSH
39431: LD_INT 22
39433: PUSH
39434: LD_VAR 0 1
39438: PPUSH
39439: CALL_OW 255
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 36
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 34
39463: PUSH
39464: LD_INT 31
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 69
39484: ST_TO_ADDR
// if not tmp then
39485: LD_VAR 0 6
39489: NOT
39490: IFFALSE 39494
// exit ;
39492: GO 39742
// result := [ ] ;
39494: LD_ADDR_VAR 0 2
39498: PUSH
39499: EMPTY
39500: ST_TO_ADDR
// for i in tmp do
39501: LD_ADDR_VAR 0 3
39505: PUSH
39506: LD_VAR 0 6
39510: PUSH
39511: FOR_IN
39512: IFFALSE 39583
// begin t := UnitsInside ( i ) ;
39514: LD_ADDR_VAR 0 4
39518: PUSH
39519: LD_VAR 0 3
39523: PPUSH
39524: CALL_OW 313
39528: ST_TO_ADDR
// if t then
39529: LD_VAR 0 4
39533: IFFALSE 39581
// for j in t do
39535: LD_ADDR_VAR 0 7
39539: PUSH
39540: LD_VAR 0 4
39544: PUSH
39545: FOR_IN
39546: IFFALSE 39579
// result := Replace ( result , result + 1 , j ) ;
39548: LD_ADDR_VAR 0 2
39552: PUSH
39553: LD_VAR 0 2
39557: PPUSH
39558: LD_VAR 0 2
39562: PUSH
39563: LD_INT 1
39565: PLUS
39566: PPUSH
39567: LD_VAR 0 7
39571: PPUSH
39572: CALL_OW 1
39576: ST_TO_ADDR
39577: GO 39545
39579: POP
39580: POP
// end ;
39581: GO 39511
39583: POP
39584: POP
// if not result then
39585: LD_VAR 0 2
39589: NOT
39590: IFFALSE 39594
// exit ;
39592: GO 39742
// mech := result [ 1 ] ;
39594: LD_ADDR_VAR 0 5
39598: PUSH
39599: LD_VAR 0 2
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: ST_TO_ADDR
// if result > 1 then
39608: LD_VAR 0 2
39612: PUSH
39613: LD_INT 1
39615: GREATER
39616: IFFALSE 39728
// begin for i = 2 to result do
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: DOUBLE
39624: LD_INT 2
39626: DEC
39627: ST_TO_ADDR
39628: LD_VAR 0 2
39632: PUSH
39633: FOR_TO
39634: IFFALSE 39726
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39636: LD_ADDR_VAR 0 4
39640: PUSH
39641: LD_VAR 0 2
39645: PUSH
39646: LD_VAR 0 3
39650: ARRAY
39651: PPUSH
39652: LD_INT 3
39654: PPUSH
39655: CALL_OW 259
39659: PUSH
39660: LD_VAR 0 2
39664: PUSH
39665: LD_VAR 0 3
39669: ARRAY
39670: PPUSH
39671: CALL_OW 432
39675: MINUS
39676: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39677: LD_VAR 0 4
39681: PUSH
39682: LD_VAR 0 5
39686: PPUSH
39687: LD_INT 3
39689: PPUSH
39690: CALL_OW 259
39694: PUSH
39695: LD_VAR 0 5
39699: PPUSH
39700: CALL_OW 432
39704: MINUS
39705: GREATEREQUAL
39706: IFFALSE 39724
// mech := result [ i ] ;
39708: LD_ADDR_VAR 0 5
39712: PUSH
39713: LD_VAR 0 2
39717: PUSH
39718: LD_VAR 0 3
39722: ARRAY
39723: ST_TO_ADDR
// end ;
39724: GO 39633
39726: POP
39727: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39728: LD_VAR 0 1
39732: PPUSH
39733: LD_VAR 0 5
39737: PPUSH
39738: CALL_OW 135
// end ;
39742: LD_VAR 0 2
39746: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
// result := [ ] ;
39762: LD_ADDR_VAR 0 7
39766: PUSH
39767: EMPTY
39768: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 266
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: IN
39789: NOT
39790: IFFALSE 39794
// exit ;
39792: GO 41428
// if name then
39794: LD_VAR 0 3
39798: IFFALSE 39814
// SetBName ( base_dep , name ) ;
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_VAR 0 3
39809: PPUSH
39810: CALL_OW 500
// base := GetBase ( base_dep ) ;
39814: LD_ADDR_VAR 0 15
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 274
39828: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39829: LD_ADDR_VAR 0 16
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 255
39843: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39844: LD_ADDR_VAR 0 17
39848: PUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 248
39858: ST_TO_ADDR
// if sources then
39859: LD_VAR 0 5
39863: IFFALSE 39910
// for i = 1 to 3 do
39865: LD_ADDR_VAR 0 8
39869: PUSH
39870: DOUBLE
39871: LD_INT 1
39873: DEC
39874: ST_TO_ADDR
39875: LD_INT 3
39877: PUSH
39878: FOR_TO
39879: IFFALSE 39908
// AddResourceType ( base , i , sources [ i ] ) ;
39881: LD_VAR 0 15
39885: PPUSH
39886: LD_VAR 0 8
39890: PPUSH
39891: LD_VAR 0 5
39895: PUSH
39896: LD_VAR 0 8
39900: ARRAY
39901: PPUSH
39902: CALL_OW 276
39906: GO 39878
39908: POP
39909: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39910: LD_ADDR_VAR 0 18
39914: PUSH
39915: LD_VAR 0 15
39919: PPUSH
39920: LD_VAR 0 2
39924: PPUSH
39925: LD_INT 1
39927: PPUSH
39928: CALL 39171 0 3
39932: ST_TO_ADDR
// InitHc ;
39933: CALL_OW 19
// InitUc ;
39937: CALL_OW 18
// uc_side := side ;
39941: LD_ADDR_OWVAR 20
39945: PUSH
39946: LD_VAR 0 16
39950: ST_TO_ADDR
// uc_nation := nation ;
39951: LD_ADDR_OWVAR 21
39955: PUSH
39956: LD_VAR 0 17
39960: ST_TO_ADDR
// if buildings then
39961: LD_VAR 0 18
39965: IFFALSE 41287
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39967: LD_ADDR_VAR 0 19
39971: PUSH
39972: LD_VAR 0 18
39976: PPUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 30
39982: PUSH
39983: LD_INT 29
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 30
39992: PUSH
39993: LD_INT 30
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: PPUSH
40005: CALL_OW 72
40009: ST_TO_ADDR
// if tmp then
40010: LD_VAR 0 19
40014: IFFALSE 40062
// for i in tmp do
40016: LD_ADDR_VAR 0 8
40020: PUSH
40021: LD_VAR 0 19
40025: PUSH
40026: FOR_IN
40027: IFFALSE 40060
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40029: LD_VAR 0 8
40033: PPUSH
40034: CALL_OW 250
40038: PPUSH
40039: LD_VAR 0 8
40043: PPUSH
40044: CALL_OW 251
40048: PPUSH
40049: LD_VAR 0 16
40053: PPUSH
40054: CALL_OW 441
40058: GO 40026
40060: POP
40061: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40062: LD_VAR 0 18
40066: PPUSH
40067: LD_INT 2
40069: PUSH
40070: LD_INT 30
40072: PUSH
40073: LD_INT 32
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 30
40082: PUSH
40083: LD_INT 33
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: PPUSH
40095: CALL_OW 72
40099: IFFALSE 40187
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40101: LD_ADDR_VAR 0 8
40105: PUSH
40106: LD_VAR 0 18
40110: PPUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 30
40116: PUSH
40117: LD_INT 32
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 30
40126: PUSH
40127: LD_INT 33
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: PPUSH
40139: CALL_OW 72
40143: PUSH
40144: FOR_IN
40145: IFFALSE 40185
// begin if not GetBWeapon ( i ) then
40147: LD_VAR 0 8
40151: PPUSH
40152: CALL_OW 269
40156: NOT
40157: IFFALSE 40183
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40159: LD_VAR 0 8
40163: PPUSH
40164: LD_VAR 0 8
40168: PPUSH
40169: LD_VAR 0 2
40173: PPUSH
40174: CALL 41433 0 2
40178: PPUSH
40179: CALL_OW 431
// end ;
40183: GO 40144
40185: POP
40186: POP
// end ; for i = 1 to personel do
40187: LD_ADDR_VAR 0 8
40191: PUSH
40192: DOUBLE
40193: LD_INT 1
40195: DEC
40196: ST_TO_ADDR
40197: LD_VAR 0 6
40201: PUSH
40202: FOR_TO
40203: IFFALSE 41267
// begin if i > 4 then
40205: LD_VAR 0 8
40209: PUSH
40210: LD_INT 4
40212: GREATER
40213: IFFALSE 40217
// break ;
40215: GO 41267
// case i of 1 :
40217: LD_VAR 0 8
40221: PUSH
40222: LD_INT 1
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40310
40230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40231: LD_ADDR_VAR 0 12
40235: PUSH
40236: LD_VAR 0 18
40240: PPUSH
40241: LD_INT 22
40243: PUSH
40244: LD_VAR 0 16
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 58
40255: PUSH
40256: EMPTY
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 30
40264: PUSH
40265: LD_INT 32
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 30
40274: PUSH
40275: LD_INT 4
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: LD_INT 5
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: PPUSH
40303: CALL_OW 72
40307: ST_TO_ADDR
40308: GO 40532
40310: LD_INT 2
40312: DOUBLE
40313: EQUAL
40314: IFTRUE 40318
40316: GO 40380
40318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40319: LD_ADDR_VAR 0 12
40323: PUSH
40324: LD_VAR 0 18
40328: PPUSH
40329: LD_INT 22
40331: PUSH
40332: LD_VAR 0 16
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 30
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PPUSH
40373: CALL_OW 72
40377: ST_TO_ADDR
40378: GO 40532
40380: LD_INT 3
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40450
40388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40389: LD_ADDR_VAR 0 12
40393: PUSH
40394: LD_VAR 0 18
40398: PPUSH
40399: LD_INT 22
40401: PUSH
40402: LD_VAR 0 16
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 30
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 30
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PPUSH
40443: CALL_OW 72
40447: ST_TO_ADDR
40448: GO 40532
40450: LD_INT 4
40452: DOUBLE
40453: EQUAL
40454: IFTRUE 40458
40456: GO 40531
40458: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40459: LD_ADDR_VAR 0 12
40463: PUSH
40464: LD_VAR 0 18
40468: PPUSH
40469: LD_INT 22
40471: PUSH
40472: LD_VAR 0 16
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 30
40486: PUSH
40487: LD_INT 6
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 30
40496: PUSH
40497: LD_INT 7
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 30
40506: PUSH
40507: LD_INT 8
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PPUSH
40524: CALL_OW 72
40528: ST_TO_ADDR
40529: GO 40532
40531: POP
// if i = 1 then
40532: LD_VAR 0 8
40536: PUSH
40537: LD_INT 1
40539: EQUAL
40540: IFFALSE 40651
// begin tmp := [ ] ;
40542: LD_ADDR_VAR 0 19
40546: PUSH
40547: EMPTY
40548: ST_TO_ADDR
// for j in f do
40549: LD_ADDR_VAR 0 9
40553: PUSH
40554: LD_VAR 0 12
40558: PUSH
40559: FOR_IN
40560: IFFALSE 40633
// if GetBType ( j ) = b_bunker then
40562: LD_VAR 0 9
40566: PPUSH
40567: CALL_OW 266
40571: PUSH
40572: LD_INT 32
40574: EQUAL
40575: IFFALSE 40602
// tmp := Insert ( tmp , 1 , j ) else
40577: LD_ADDR_VAR 0 19
40581: PUSH
40582: LD_VAR 0 19
40586: PPUSH
40587: LD_INT 1
40589: PPUSH
40590: LD_VAR 0 9
40594: PPUSH
40595: CALL_OW 2
40599: ST_TO_ADDR
40600: GO 40631
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40602: LD_ADDR_VAR 0 19
40606: PUSH
40607: LD_VAR 0 19
40611: PPUSH
40612: LD_VAR 0 19
40616: PUSH
40617: LD_INT 1
40619: PLUS
40620: PPUSH
40621: LD_VAR 0 9
40625: PPUSH
40626: CALL_OW 2
40630: ST_TO_ADDR
40631: GO 40559
40633: POP
40634: POP
// if tmp then
40635: LD_VAR 0 19
40639: IFFALSE 40651
// f := tmp ;
40641: LD_ADDR_VAR 0 12
40645: PUSH
40646: LD_VAR 0 19
40650: ST_TO_ADDR
// end ; x := personel [ i ] ;
40651: LD_ADDR_VAR 0 13
40655: PUSH
40656: LD_VAR 0 6
40660: PUSH
40661: LD_VAR 0 8
40665: ARRAY
40666: ST_TO_ADDR
// if x = - 1 then
40667: LD_VAR 0 13
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: EQUAL
40676: IFFALSE 40885
// begin for j in f do
40678: LD_ADDR_VAR 0 9
40682: PUSH
40683: LD_VAR 0 12
40687: PUSH
40688: FOR_IN
40689: IFFALSE 40881
// repeat InitHc ;
40691: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40695: LD_VAR 0 9
40699: PPUSH
40700: CALL_OW 266
40704: PUSH
40705: LD_INT 5
40707: EQUAL
40708: IFFALSE 40778
// begin if UnitsInside ( j ) < 3 then
40710: LD_VAR 0 9
40714: PPUSH
40715: CALL_OW 313
40719: PUSH
40720: LD_INT 3
40722: LESS
40723: IFFALSE 40759
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40725: LD_INT 0
40727: PPUSH
40728: LD_INT 5
40730: PUSH
40731: LD_INT 8
40733: PUSH
40734: LD_INT 9
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: PUSH
40742: LD_VAR 0 17
40746: ARRAY
40747: PPUSH
40748: LD_VAR 0 4
40752: PPUSH
40753: CALL_OW 380
40757: GO 40776
// PrepareHuman ( false , i , skill ) ;
40759: LD_INT 0
40761: PPUSH
40762: LD_VAR 0 8
40766: PPUSH
40767: LD_VAR 0 4
40771: PPUSH
40772: CALL_OW 380
// end else
40776: GO 40795
// PrepareHuman ( false , i , skill ) ;
40778: LD_INT 0
40780: PPUSH
40781: LD_VAR 0 8
40785: PPUSH
40786: LD_VAR 0 4
40790: PPUSH
40791: CALL_OW 380
// un := CreateHuman ;
40795: LD_ADDR_VAR 0 14
40799: PUSH
40800: CALL_OW 44
40804: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40805: LD_ADDR_VAR 0 7
40809: PUSH
40810: LD_VAR 0 7
40814: PPUSH
40815: LD_INT 1
40817: PPUSH
40818: LD_VAR 0 14
40822: PPUSH
40823: CALL_OW 2
40827: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40828: LD_VAR 0 14
40832: PPUSH
40833: LD_VAR 0 9
40837: PPUSH
40838: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40842: LD_VAR 0 9
40846: PPUSH
40847: CALL_OW 313
40851: PUSH
40852: LD_INT 6
40854: EQUAL
40855: PUSH
40856: LD_VAR 0 9
40860: PPUSH
40861: CALL_OW 266
40865: PUSH
40866: LD_INT 32
40868: PUSH
40869: LD_INT 31
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: IN
40876: OR
40877: IFFALSE 40691
40879: GO 40688
40881: POP
40882: POP
// end else
40883: GO 41265
// for j = 1 to x do
40885: LD_ADDR_VAR 0 9
40889: PUSH
40890: DOUBLE
40891: LD_INT 1
40893: DEC
40894: ST_TO_ADDR
40895: LD_VAR 0 13
40899: PUSH
40900: FOR_TO
40901: IFFALSE 41263
// begin InitHc ;
40903: CALL_OW 19
// if not f then
40907: LD_VAR 0 12
40911: NOT
40912: IFFALSE 41001
// begin PrepareHuman ( false , i , skill ) ;
40914: LD_INT 0
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: LD_VAR 0 4
40926: PPUSH
40927: CALL_OW 380
// un := CreateHuman ;
40931: LD_ADDR_VAR 0 14
40935: PUSH
40936: CALL_OW 44
40940: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40941: LD_ADDR_VAR 0 7
40945: PUSH
40946: LD_VAR 0 7
40950: PPUSH
40951: LD_INT 1
40953: PPUSH
40954: LD_VAR 0 14
40958: PPUSH
40959: CALL_OW 2
40963: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40964: LD_VAR 0 14
40968: PPUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 250
40978: PPUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 251
40988: PPUSH
40989: LD_INT 10
40991: PPUSH
40992: LD_INT 0
40994: PPUSH
40995: CALL_OW 50
// continue ;
40999: GO 40900
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41001: LD_VAR 0 12
41005: PUSH
41006: LD_INT 1
41008: ARRAY
41009: PPUSH
41010: CALL_OW 313
41014: PUSH
41015: LD_VAR 0 12
41019: PUSH
41020: LD_INT 1
41022: ARRAY
41023: PPUSH
41024: CALL_OW 266
41028: PUSH
41029: LD_INT 32
41031: PUSH
41032: LD_INT 31
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: IN
41039: AND
41040: PUSH
41041: LD_VAR 0 12
41045: PUSH
41046: LD_INT 1
41048: ARRAY
41049: PPUSH
41050: CALL_OW 313
41054: PUSH
41055: LD_INT 6
41057: EQUAL
41058: OR
41059: IFFALSE 41079
// f := Delete ( f , 1 ) ;
41061: LD_ADDR_VAR 0 12
41065: PUSH
41066: LD_VAR 0 12
41070: PPUSH
41071: LD_INT 1
41073: PPUSH
41074: CALL_OW 3
41078: ST_TO_ADDR
// if not f then
41079: LD_VAR 0 12
41083: NOT
41084: IFFALSE 41102
// begin x := x + 2 ;
41086: LD_ADDR_VAR 0 13
41090: PUSH
41091: LD_VAR 0 13
41095: PUSH
41096: LD_INT 2
41098: PLUS
41099: ST_TO_ADDR
// continue ;
41100: GO 40900
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41102: LD_VAR 0 12
41106: PUSH
41107: LD_INT 1
41109: ARRAY
41110: PPUSH
41111: CALL_OW 266
41115: PUSH
41116: LD_INT 5
41118: EQUAL
41119: IFFALSE 41193
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41121: LD_VAR 0 12
41125: PUSH
41126: LD_INT 1
41128: ARRAY
41129: PPUSH
41130: CALL_OW 313
41134: PUSH
41135: LD_INT 3
41137: LESS
41138: IFFALSE 41174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41140: LD_INT 0
41142: PPUSH
41143: LD_INT 5
41145: PUSH
41146: LD_INT 8
41148: PUSH
41149: LD_INT 9
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: PUSH
41157: LD_VAR 0 17
41161: ARRAY
41162: PPUSH
41163: LD_VAR 0 4
41167: PPUSH
41168: CALL_OW 380
41172: GO 41191
// PrepareHuman ( false , i , skill ) ;
41174: LD_INT 0
41176: PPUSH
41177: LD_VAR 0 8
41181: PPUSH
41182: LD_VAR 0 4
41186: PPUSH
41187: CALL_OW 380
// end else
41191: GO 41210
// PrepareHuman ( false , i , skill ) ;
41193: LD_INT 0
41195: PPUSH
41196: LD_VAR 0 8
41200: PPUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: CALL_OW 380
// un := CreateHuman ;
41210: LD_ADDR_VAR 0 14
41214: PUSH
41215: CALL_OW 44
41219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41220: LD_ADDR_VAR 0 7
41224: PUSH
41225: LD_VAR 0 7
41229: PPUSH
41230: LD_INT 1
41232: PPUSH
41233: LD_VAR 0 14
41237: PPUSH
41238: CALL_OW 2
41242: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41243: LD_VAR 0 14
41247: PPUSH
41248: LD_VAR 0 12
41252: PUSH
41253: LD_INT 1
41255: ARRAY
41256: PPUSH
41257: CALL_OW 52
// end ;
41261: GO 40900
41263: POP
41264: POP
// end ;
41265: GO 40202
41267: POP
41268: POP
// result := result ^ buildings ;
41269: LD_ADDR_VAR 0 7
41273: PUSH
41274: LD_VAR 0 7
41278: PUSH
41279: LD_VAR 0 18
41283: ADD
41284: ST_TO_ADDR
// end else
41285: GO 41428
// begin for i = 1 to personel do
41287: LD_ADDR_VAR 0 8
41291: PUSH
41292: DOUBLE
41293: LD_INT 1
41295: DEC
41296: ST_TO_ADDR
41297: LD_VAR 0 6
41301: PUSH
41302: FOR_TO
41303: IFFALSE 41426
// begin if i > 4 then
41305: LD_VAR 0 8
41309: PUSH
41310: LD_INT 4
41312: GREATER
41313: IFFALSE 41317
// break ;
41315: GO 41426
// x := personel [ i ] ;
41317: LD_ADDR_VAR 0 13
41321: PUSH
41322: LD_VAR 0 6
41326: PUSH
41327: LD_VAR 0 8
41331: ARRAY
41332: ST_TO_ADDR
// if x = - 1 then
41333: LD_VAR 0 13
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: EQUAL
41342: IFFALSE 41346
// continue ;
41344: GO 41302
// PrepareHuman ( false , i , skill ) ;
41346: LD_INT 0
41348: PPUSH
41349: LD_VAR 0 8
41353: PPUSH
41354: LD_VAR 0 4
41358: PPUSH
41359: CALL_OW 380
// un := CreateHuman ;
41363: LD_ADDR_VAR 0 14
41367: PUSH
41368: CALL_OW 44
41372: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41373: LD_VAR 0 14
41377: PPUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 250
41387: PPUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 251
41397: PPUSH
41398: LD_INT 10
41400: PPUSH
41401: LD_INT 0
41403: PPUSH
41404: CALL_OW 50
// result := result ^ un ;
41408: LD_ADDR_VAR 0 7
41412: PUSH
41413: LD_VAR 0 7
41417: PUSH
41418: LD_VAR 0 14
41422: ADD
41423: ST_TO_ADDR
// end ;
41424: GO 41302
41426: POP
41427: POP
// end ; end ;
41428: LD_VAR 0 7
41432: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
// result := false ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 0
41458: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41459: LD_VAR 0 1
41463: NOT
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: CALL_OW 266
41474: PUSH
41475: LD_INT 32
41477: PUSH
41478: LD_INT 33
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: IN
41485: NOT
41486: OR
41487: IFFALSE 41491
// exit ;
41489: GO 42600
// nat := GetNation ( tower ) ;
41491: LD_ADDR_VAR 0 12
41495: PUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: CALL_OW 248
41505: ST_TO_ADDR
// side := GetSide ( tower ) ;
41506: LD_ADDR_VAR 0 16
41510: PUSH
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 255
41520: ST_TO_ADDR
// x := GetX ( tower ) ;
41521: LD_ADDR_VAR 0 10
41525: PUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: CALL_OW 250
41535: ST_TO_ADDR
// y := GetY ( tower ) ;
41536: LD_ADDR_VAR 0 11
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 251
41550: ST_TO_ADDR
// if not x or not y then
41551: LD_VAR 0 10
41555: NOT
41556: PUSH
41557: LD_VAR 0 11
41561: NOT
41562: OR
41563: IFFALSE 41567
// exit ;
41565: GO 42600
// weapon := 0 ;
41567: LD_ADDR_VAR 0 18
41571: PUSH
41572: LD_INT 0
41574: ST_TO_ADDR
// fac_list := [ ] ;
41575: LD_ADDR_VAR 0 17
41579: PUSH
41580: EMPTY
41581: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41582: LD_ADDR_VAR 0 6
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 274
41596: PPUSH
41597: LD_VAR 0 2
41601: PPUSH
41602: LD_INT 0
41604: PPUSH
41605: CALL 39171 0 3
41609: PPUSH
41610: LD_INT 30
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PPUSH
41620: CALL_OW 72
41624: ST_TO_ADDR
// if not factories then
41625: LD_VAR 0 6
41629: NOT
41630: IFFALSE 41634
// exit ;
41632: GO 42600
// for i in factories do
41634: LD_ADDR_VAR 0 8
41638: PUSH
41639: LD_VAR 0 6
41643: PUSH
41644: FOR_IN
41645: IFFALSE 41670
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41647: LD_ADDR_VAR 0 17
41651: PUSH
41652: LD_VAR 0 17
41656: PUSH
41657: LD_VAR 0 8
41661: PPUSH
41662: CALL_OW 478
41666: UNION
41667: ST_TO_ADDR
41668: GO 41644
41670: POP
41671: POP
// if not fac_list then
41672: LD_VAR 0 17
41676: NOT
41677: IFFALSE 41681
// exit ;
41679: GO 42600
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41681: LD_ADDR_VAR 0 5
41685: PUSH
41686: LD_INT 4
41688: PUSH
41689: LD_INT 5
41691: PUSH
41692: LD_INT 9
41694: PUSH
41695: LD_INT 10
41697: PUSH
41698: LD_INT 6
41700: PUSH
41701: LD_INT 7
41703: PUSH
41704: LD_INT 11
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 27
41718: PUSH
41719: LD_INT 28
41721: PUSH
41722: LD_INT 26
41724: PUSH
41725: LD_INT 30
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 43
41736: PUSH
41737: LD_INT 44
41739: PUSH
41740: LD_INT 46
41742: PUSH
41743: LD_INT 45
41745: PUSH
41746: LD_INT 47
41748: PUSH
41749: LD_INT 49
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: PUSH
41765: LD_VAR 0 12
41769: ARRAY
41770: ST_TO_ADDR
// list := list isect fac_list ;
41771: LD_ADDR_VAR 0 5
41775: PUSH
41776: LD_VAR 0 5
41780: PUSH
41781: LD_VAR 0 17
41785: ISECT
41786: ST_TO_ADDR
// if not list then
41787: LD_VAR 0 5
41791: NOT
41792: IFFALSE 41796
// exit ;
41794: GO 42600
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41796: LD_VAR 0 12
41800: PUSH
41801: LD_INT 3
41803: EQUAL
41804: PUSH
41805: LD_INT 49
41807: PUSH
41808: LD_VAR 0 5
41812: IN
41813: AND
41814: PUSH
41815: LD_INT 31
41817: PPUSH
41818: LD_VAR 0 16
41822: PPUSH
41823: CALL_OW 321
41827: PUSH
41828: LD_INT 2
41830: EQUAL
41831: AND
41832: IFFALSE 41892
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41834: LD_INT 22
41836: PUSH
41837: LD_VAR 0 16
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 35
41848: PUSH
41849: LD_INT 49
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 91
41858: PUSH
41859: LD_VAR 0 1
41863: PUSH
41864: LD_INT 10
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 69
41881: NOT
41882: IFFALSE 41892
// weapon := ru_time_lapser ;
41884: LD_ADDR_VAR 0 18
41888: PUSH
41889: LD_INT 49
41891: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41892: LD_VAR 0 12
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: IN
41907: PUSH
41908: LD_INT 11
41910: PUSH
41911: LD_VAR 0 5
41915: IN
41916: PUSH
41917: LD_INT 30
41919: PUSH
41920: LD_VAR 0 5
41924: IN
41925: OR
41926: AND
41927: PUSH
41928: LD_INT 6
41930: PPUSH
41931: LD_VAR 0 16
41935: PPUSH
41936: CALL_OW 321
41940: PUSH
41941: LD_INT 2
41943: EQUAL
41944: AND
41945: IFFALSE 42110
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41947: LD_INT 22
41949: PUSH
41950: LD_VAR 0 16
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 35
41964: PUSH
41965: LD_INT 11
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 35
41974: PUSH
41975: LD_INT 30
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 91
41989: PUSH
41990: LD_VAR 0 1
41994: PUSH
41995: LD_INT 18
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: PPUSH
42008: CALL_OW 69
42012: NOT
42013: PUSH
42014: LD_INT 22
42016: PUSH
42017: LD_VAR 0 16
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: LD_INT 30
42031: PUSH
42032: LD_INT 32
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 30
42041: PUSH
42042: LD_INT 33
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 91
42056: PUSH
42057: LD_VAR 0 1
42061: PUSH
42062: LD_INT 12
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: PPUSH
42078: CALL_OW 69
42082: PUSH
42083: LD_INT 2
42085: GREATER
42086: AND
42087: IFFALSE 42110
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42089: LD_ADDR_VAR 0 18
42093: PUSH
42094: LD_INT 11
42096: PUSH
42097: LD_INT 30
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_VAR 0 12
42108: ARRAY
42109: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42110: LD_VAR 0 18
42114: NOT
42115: PUSH
42116: LD_INT 40
42118: PPUSH
42119: LD_VAR 0 16
42123: PPUSH
42124: CALL_OW 321
42128: PUSH
42129: LD_INT 2
42131: EQUAL
42132: AND
42133: PUSH
42134: LD_INT 7
42136: PUSH
42137: LD_VAR 0 5
42141: IN
42142: PUSH
42143: LD_INT 28
42145: PUSH
42146: LD_VAR 0 5
42150: IN
42151: OR
42152: PUSH
42153: LD_INT 45
42155: PUSH
42156: LD_VAR 0 5
42160: IN
42161: OR
42162: AND
42163: IFFALSE 42417
// begin hex := GetHexInfo ( x , y ) ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: LD_VAR 0 10
42174: PPUSH
42175: LD_VAR 0 11
42179: PPUSH
42180: CALL_OW 546
42184: ST_TO_ADDR
// if hex [ 1 ] then
42185: LD_VAR 0 4
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: IFFALSE 42197
// exit ;
42195: GO 42600
// height := hex [ 2 ] ;
42197: LD_ADDR_VAR 0 15
42201: PUSH
42202: LD_VAR 0 4
42206: PUSH
42207: LD_INT 2
42209: ARRAY
42210: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42211: LD_ADDR_VAR 0 14
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 3
42224: PUSH
42225: LD_INT 5
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// for i in tmp do
42234: LD_ADDR_VAR 0 8
42238: PUSH
42239: LD_VAR 0 14
42243: PUSH
42244: FOR_IN
42245: IFFALSE 42415
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42247: LD_ADDR_VAR 0 9
42251: PUSH
42252: LD_VAR 0 10
42256: PPUSH
42257: LD_VAR 0 8
42261: PPUSH
42262: LD_INT 5
42264: PPUSH
42265: CALL_OW 272
42269: PUSH
42270: LD_VAR 0 11
42274: PPUSH
42275: LD_VAR 0 8
42279: PPUSH
42280: LD_INT 5
42282: PPUSH
42283: CALL_OW 273
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42292: LD_VAR 0 9
42296: PUSH
42297: LD_INT 1
42299: ARRAY
42300: PPUSH
42301: LD_VAR 0 9
42305: PUSH
42306: LD_INT 2
42308: ARRAY
42309: PPUSH
42310: CALL_OW 488
42314: IFFALSE 42413
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42316: LD_ADDR_VAR 0 4
42320: PUSH
42321: LD_VAR 0 9
42325: PUSH
42326: LD_INT 1
42328: ARRAY
42329: PPUSH
42330: LD_VAR 0 9
42334: PUSH
42335: LD_INT 2
42337: ARRAY
42338: PPUSH
42339: CALL_OW 546
42343: ST_TO_ADDR
// if hex [ 1 ] then
42344: LD_VAR 0 4
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: IFFALSE 42356
// continue ;
42354: GO 42244
// h := hex [ 2 ] ;
42356: LD_ADDR_VAR 0 13
42360: PUSH
42361: LD_VAR 0 4
42365: PUSH
42366: LD_INT 2
42368: ARRAY
42369: ST_TO_ADDR
// if h + 7 < height then
42370: LD_VAR 0 13
42374: PUSH
42375: LD_INT 7
42377: PLUS
42378: PUSH
42379: LD_VAR 0 15
42383: LESS
42384: IFFALSE 42413
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42386: LD_ADDR_VAR 0 18
42390: PUSH
42391: LD_INT 7
42393: PUSH
42394: LD_INT 28
42396: PUSH
42397: LD_INT 45
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: PUSH
42405: LD_VAR 0 12
42409: ARRAY
42410: ST_TO_ADDR
// break ;
42411: GO 42415
// end ; end ; end ;
42413: GO 42244
42415: POP
42416: POP
// end ; if not weapon then
42417: LD_VAR 0 18
42421: NOT
42422: IFFALSE 42482
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42424: LD_ADDR_VAR 0 5
42428: PUSH
42429: LD_VAR 0 5
42433: PUSH
42434: LD_INT 11
42436: PUSH
42437: LD_INT 30
42439: PUSH
42440: LD_INT 49
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: DIFF
42448: ST_TO_ADDR
// if not list then
42449: LD_VAR 0 5
42453: NOT
42454: IFFALSE 42458
// exit ;
42456: GO 42600
// weapon := list [ rand ( 1 , list ) ] ;
42458: LD_ADDR_VAR 0 18
42462: PUSH
42463: LD_VAR 0 5
42467: PUSH
42468: LD_INT 1
42470: PPUSH
42471: LD_VAR 0 5
42475: PPUSH
42476: CALL_OW 12
42480: ARRAY
42481: ST_TO_ADDR
// end ; if weapon then
42482: LD_VAR 0 18
42486: IFFALSE 42600
// begin tmp := CostOfWeapon ( weapon ) ;
42488: LD_ADDR_VAR 0 14
42492: PUSH
42493: LD_VAR 0 18
42497: PPUSH
42498: CALL_OW 451
42502: ST_TO_ADDR
// j := GetBase ( tower ) ;
42503: LD_ADDR_VAR 0 9
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 274
42517: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42518: LD_VAR 0 9
42522: PPUSH
42523: LD_INT 1
42525: PPUSH
42526: CALL_OW 275
42530: PUSH
42531: LD_VAR 0 14
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: GREATEREQUAL
42540: PUSH
42541: LD_VAR 0 9
42545: PPUSH
42546: LD_INT 2
42548: PPUSH
42549: CALL_OW 275
42553: PUSH
42554: LD_VAR 0 14
42558: PUSH
42559: LD_INT 2
42561: ARRAY
42562: GREATEREQUAL
42563: AND
42564: PUSH
42565: LD_VAR 0 9
42569: PPUSH
42570: LD_INT 3
42572: PPUSH
42573: CALL_OW 275
42577: PUSH
42578: LD_VAR 0 14
42582: PUSH
42583: LD_INT 3
42585: ARRAY
42586: GREATEREQUAL
42587: AND
42588: IFFALSE 42600
// result := weapon ;
42590: LD_ADDR_VAR 0 3
42594: PUSH
42595: LD_VAR 0 18
42599: ST_TO_ADDR
// end ; end ;
42600: LD_VAR 0 3
42604: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42605: LD_INT 0
42607: PPUSH
42608: PPUSH
// result := true ;
42609: LD_ADDR_VAR 0 3
42613: PUSH
42614: LD_INT 1
42616: ST_TO_ADDR
// if array1 = array2 then
42617: LD_VAR 0 1
42621: PUSH
42622: LD_VAR 0 2
42626: EQUAL
42627: IFFALSE 42687
// begin for i = 1 to array1 do
42629: LD_ADDR_VAR 0 4
42633: PUSH
42634: DOUBLE
42635: LD_INT 1
42637: DEC
42638: ST_TO_ADDR
42639: LD_VAR 0 1
42643: PUSH
42644: FOR_TO
42645: IFFALSE 42683
// if array1 [ i ] <> array2 [ i ] then
42647: LD_VAR 0 1
42651: PUSH
42652: LD_VAR 0 4
42656: ARRAY
42657: PUSH
42658: LD_VAR 0 2
42662: PUSH
42663: LD_VAR 0 4
42667: ARRAY
42668: NONEQUAL
42669: IFFALSE 42681
// begin result := false ;
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 0
42678: ST_TO_ADDR
// break ;
42679: GO 42683
// end ;
42681: GO 42644
42683: POP
42684: POP
// end else
42685: GO 42695
// result := false ;
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 0
42694: ST_TO_ADDR
// end ;
42695: LD_VAR 0 3
42699: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42700: LD_INT 0
42702: PPUSH
42703: PPUSH
// if not array1 or not array2 then
42704: LD_VAR 0 1
42708: NOT
42709: PUSH
42710: LD_VAR 0 2
42714: NOT
42715: OR
42716: IFFALSE 42720
// exit ;
42718: GO 42784
// result := true ;
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 1
42727: ST_TO_ADDR
// for i = 1 to array1 do
42728: LD_ADDR_VAR 0 4
42732: PUSH
42733: DOUBLE
42734: LD_INT 1
42736: DEC
42737: ST_TO_ADDR
42738: LD_VAR 0 1
42742: PUSH
42743: FOR_TO
42744: IFFALSE 42782
// if array1 [ i ] <> array2 [ i ] then
42746: LD_VAR 0 1
42750: PUSH
42751: LD_VAR 0 4
42755: ARRAY
42756: PUSH
42757: LD_VAR 0 2
42761: PUSH
42762: LD_VAR 0 4
42766: ARRAY
42767: NONEQUAL
42768: IFFALSE 42780
// begin result := false ;
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 0
42777: ST_TO_ADDR
// break ;
42778: GO 42782
// end ;
42780: GO 42743
42782: POP
42783: POP
// end ;
42784: LD_VAR 0 3
42788: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42789: LD_INT 0
42791: PPUSH
42792: PPUSH
42793: PPUSH
// pom := GetBase ( fac ) ;
42794: LD_ADDR_VAR 0 5
42798: PUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 274
42808: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42809: LD_ADDR_VAR 0 4
42813: PUSH
42814: LD_VAR 0 2
42818: PUSH
42819: LD_INT 1
42821: ARRAY
42822: PPUSH
42823: LD_VAR 0 2
42827: PUSH
42828: LD_INT 2
42830: ARRAY
42831: PPUSH
42832: LD_VAR 0 2
42836: PUSH
42837: LD_INT 3
42839: ARRAY
42840: PPUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_INT 4
42848: ARRAY
42849: PPUSH
42850: CALL_OW 449
42854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_VAR 0 5
42864: PPUSH
42865: LD_INT 1
42867: PPUSH
42868: CALL_OW 275
42872: PUSH
42873: LD_VAR 0 4
42877: PUSH
42878: LD_INT 1
42880: ARRAY
42881: GREATEREQUAL
42882: PUSH
42883: LD_VAR 0 5
42887: PPUSH
42888: LD_INT 2
42890: PPUSH
42891: CALL_OW 275
42895: PUSH
42896: LD_VAR 0 4
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: GREATEREQUAL
42905: AND
42906: PUSH
42907: LD_VAR 0 5
42911: PPUSH
42912: LD_INT 3
42914: PPUSH
42915: CALL_OW 275
42919: PUSH
42920: LD_VAR 0 4
42924: PUSH
42925: LD_INT 3
42927: ARRAY
42928: GREATEREQUAL
42929: AND
42930: ST_TO_ADDR
// end ;
42931: LD_VAR 0 3
42935: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42936: LD_INT 0
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
// pom := GetBase ( building ) ;
42942: LD_ADDR_VAR 0 3
42946: PUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 274
42956: ST_TO_ADDR
// if not pom then
42957: LD_VAR 0 3
42961: NOT
42962: IFFALSE 42966
// exit ;
42964: GO 43136
// btype := GetBType ( building ) ;
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: LD_VAR 0 1
42975: PPUSH
42976: CALL_OW 266
42980: ST_TO_ADDR
// if btype = b_armoury then
42981: LD_VAR 0 5
42985: PUSH
42986: LD_INT 4
42988: EQUAL
42989: IFFALSE 42999
// btype := b_barracks ;
42991: LD_ADDR_VAR 0 5
42995: PUSH
42996: LD_INT 5
42998: ST_TO_ADDR
// if btype = b_depot then
42999: LD_VAR 0 5
43003: PUSH
43004: LD_INT 0
43006: EQUAL
43007: IFFALSE 43017
// btype := b_warehouse ;
43009: LD_ADDR_VAR 0 5
43013: PUSH
43014: LD_INT 1
43016: ST_TO_ADDR
// if btype = b_workshop then
43017: LD_VAR 0 5
43021: PUSH
43022: LD_INT 2
43024: EQUAL
43025: IFFALSE 43035
// btype := b_factory ;
43027: LD_ADDR_VAR 0 5
43031: PUSH
43032: LD_INT 3
43034: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43035: LD_ADDR_VAR 0 4
43039: PUSH
43040: LD_VAR 0 5
43044: PPUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 248
43054: PPUSH
43055: CALL_OW 450
43059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43060: LD_ADDR_VAR 0 2
43064: PUSH
43065: LD_VAR 0 3
43069: PPUSH
43070: LD_INT 1
43072: PPUSH
43073: CALL_OW 275
43077: PUSH
43078: LD_VAR 0 4
43082: PUSH
43083: LD_INT 1
43085: ARRAY
43086: GREATEREQUAL
43087: PUSH
43088: LD_VAR 0 3
43092: PPUSH
43093: LD_INT 2
43095: PPUSH
43096: CALL_OW 275
43100: PUSH
43101: LD_VAR 0 4
43105: PUSH
43106: LD_INT 2
43108: ARRAY
43109: GREATEREQUAL
43110: AND
43111: PUSH
43112: LD_VAR 0 3
43116: PPUSH
43117: LD_INT 3
43119: PPUSH
43120: CALL_OW 275
43124: PUSH
43125: LD_VAR 0 4
43129: PUSH
43130: LD_INT 3
43132: ARRAY
43133: GREATEREQUAL
43134: AND
43135: ST_TO_ADDR
// end ;
43136: LD_VAR 0 2
43140: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43141: LD_INT 0
43143: PPUSH
43144: PPUSH
43145: PPUSH
// pom := GetBase ( building ) ;
43146: LD_ADDR_VAR 0 4
43150: PUSH
43151: LD_VAR 0 1
43155: PPUSH
43156: CALL_OW 274
43160: ST_TO_ADDR
// if not pom then
43161: LD_VAR 0 4
43165: NOT
43166: IFFALSE 43170
// exit ;
43168: GO 43271
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43170: LD_ADDR_VAR 0 5
43174: PUSH
43175: LD_VAR 0 2
43179: PPUSH
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 248
43189: PPUSH
43190: CALL_OW 450
43194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_VAR 0 4
43204: PPUSH
43205: LD_INT 1
43207: PPUSH
43208: CALL_OW 275
43212: PUSH
43213: LD_VAR 0 5
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: GREATEREQUAL
43222: PUSH
43223: LD_VAR 0 4
43227: PPUSH
43228: LD_INT 2
43230: PPUSH
43231: CALL_OW 275
43235: PUSH
43236: LD_VAR 0 5
43240: PUSH
43241: LD_INT 2
43243: ARRAY
43244: GREATEREQUAL
43245: AND
43246: PUSH
43247: LD_VAR 0 4
43251: PPUSH
43252: LD_INT 3
43254: PPUSH
43255: CALL_OW 275
43259: PUSH
43260: LD_VAR 0 5
43264: PUSH
43265: LD_INT 3
43267: ARRAY
43268: GREATEREQUAL
43269: AND
43270: ST_TO_ADDR
// end ;
43271: LD_VAR 0 3
43275: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43276: LD_INT 0
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
// result := false ;
43289: LD_ADDR_VAR 0 8
43293: PUSH
43294: LD_INT 0
43296: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43297: LD_VAR 0 5
43301: NOT
43302: PUSH
43303: LD_VAR 0 1
43307: NOT
43308: OR
43309: PUSH
43310: LD_VAR 0 2
43314: NOT
43315: OR
43316: PUSH
43317: LD_VAR 0 3
43321: NOT
43322: OR
43323: IFFALSE 43327
// exit ;
43325: GO 44141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43327: LD_ADDR_VAR 0 14
43331: PUSH
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: LD_VAR 0 3
43346: PPUSH
43347: LD_VAR 0 4
43351: PPUSH
43352: LD_VAR 0 5
43356: PUSH
43357: LD_INT 1
43359: ARRAY
43360: PPUSH
43361: CALL_OW 248
43365: PPUSH
43366: LD_INT 0
43368: PPUSH
43369: CALL 45374 0 6
43373: ST_TO_ADDR
// if not hexes then
43374: LD_VAR 0 14
43378: NOT
43379: IFFALSE 43383
// exit ;
43381: GO 44141
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43383: LD_ADDR_VAR 0 17
43387: PUSH
43388: LD_VAR 0 5
43392: PPUSH
43393: LD_INT 22
43395: PUSH
43396: LD_VAR 0 13
43400: PPUSH
43401: CALL_OW 255
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 30
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 30
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PPUSH
43442: CALL_OW 72
43446: ST_TO_ADDR
// for i = 1 to hexes do
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: DOUBLE
43453: LD_INT 1
43455: DEC
43456: ST_TO_ADDR
43457: LD_VAR 0 14
43461: PUSH
43462: FOR_TO
43463: IFFALSE 44139
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43465: LD_ADDR_VAR 0 13
43469: PUSH
43470: LD_VAR 0 14
43474: PUSH
43475: LD_VAR 0 9
43479: ARRAY
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: PPUSH
43485: LD_VAR 0 14
43489: PUSH
43490: LD_VAR 0 9
43494: ARRAY
43495: PUSH
43496: LD_INT 2
43498: ARRAY
43499: PPUSH
43500: CALL_OW 428
43504: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43505: LD_VAR 0 14
43509: PUSH
43510: LD_VAR 0 9
43514: ARRAY
43515: PUSH
43516: LD_INT 1
43518: ARRAY
43519: PPUSH
43520: LD_VAR 0 14
43524: PUSH
43525: LD_VAR 0 9
43529: ARRAY
43530: PUSH
43531: LD_INT 2
43533: ARRAY
43534: PPUSH
43535: CALL_OW 351
43539: PUSH
43540: LD_VAR 0 14
43544: PUSH
43545: LD_VAR 0 9
43549: ARRAY
43550: PUSH
43551: LD_INT 1
43553: ARRAY
43554: PPUSH
43555: LD_VAR 0 14
43559: PUSH
43560: LD_VAR 0 9
43564: ARRAY
43565: PUSH
43566: LD_INT 2
43568: ARRAY
43569: PPUSH
43570: CALL_OW 488
43574: NOT
43575: OR
43576: PUSH
43577: LD_VAR 0 13
43581: PPUSH
43582: CALL_OW 247
43586: PUSH
43587: LD_INT 3
43589: EQUAL
43590: OR
43591: IFFALSE 43597
// exit ;
43593: POP
43594: POP
43595: GO 44141
// if not tmp then
43597: LD_VAR 0 13
43601: NOT
43602: IFFALSE 43606
// continue ;
43604: GO 43462
// result := true ;
43606: LD_ADDR_VAR 0 8
43610: PUSH
43611: LD_INT 1
43613: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43614: LD_VAR 0 6
43618: PUSH
43619: LD_VAR 0 13
43623: PPUSH
43624: CALL_OW 247
43628: PUSH
43629: LD_INT 2
43631: EQUAL
43632: AND
43633: PUSH
43634: LD_VAR 0 13
43638: PPUSH
43639: CALL_OW 263
43643: PUSH
43644: LD_INT 1
43646: EQUAL
43647: AND
43648: IFFALSE 43812
// begin if IsDrivenBy ( tmp ) then
43650: LD_VAR 0 13
43654: PPUSH
43655: CALL_OW 311
43659: IFFALSE 43663
// continue ;
43661: GO 43462
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43663: LD_VAR 0 6
43667: PPUSH
43668: LD_INT 3
43670: PUSH
43671: LD_INT 60
43673: PUSH
43674: EMPTY
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 55
43686: PUSH
43687: EMPTY
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PPUSH
43698: CALL_OW 72
43702: IFFALSE 43810
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43704: LD_ADDR_VAR 0 18
43708: PUSH
43709: LD_VAR 0 6
43713: PPUSH
43714: LD_INT 3
43716: PUSH
43717: LD_INT 60
43719: PUSH
43720: EMPTY
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 55
43732: PUSH
43733: EMPTY
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PPUSH
43744: CALL_OW 72
43748: PUSH
43749: LD_INT 1
43751: ARRAY
43752: ST_TO_ADDR
// if IsInUnit ( driver ) then
43753: LD_VAR 0 18
43757: PPUSH
43758: CALL_OW 310
43762: IFFALSE 43773
// ComExit ( driver ) ;
43764: LD_VAR 0 18
43768: PPUSH
43769: CALL 69154 0 1
// AddComEnterUnit ( driver , tmp ) ;
43773: LD_VAR 0 18
43777: PPUSH
43778: LD_VAR 0 13
43782: PPUSH
43783: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43787: LD_VAR 0 18
43791: PPUSH
43792: LD_VAR 0 7
43796: PPUSH
43797: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43801: LD_VAR 0 18
43805: PPUSH
43806: CALL_OW 181
// end ; continue ;
43810: GO 43462
// end ; if not cleaners or not tmp in cleaners then
43812: LD_VAR 0 6
43816: NOT
43817: PUSH
43818: LD_VAR 0 13
43822: PUSH
43823: LD_VAR 0 6
43827: IN
43828: NOT
43829: OR
43830: IFFALSE 44137
// begin if dep then
43832: LD_VAR 0 17
43836: IFFALSE 43972
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43838: LD_ADDR_VAR 0 16
43842: PUSH
43843: LD_VAR 0 17
43847: PUSH
43848: LD_INT 1
43850: ARRAY
43851: PPUSH
43852: CALL_OW 250
43856: PPUSH
43857: LD_VAR 0 17
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: PPUSH
43866: CALL_OW 254
43870: PPUSH
43871: LD_INT 5
43873: PPUSH
43874: CALL_OW 272
43878: PUSH
43879: LD_VAR 0 17
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: PPUSH
43888: CALL_OW 251
43892: PPUSH
43893: LD_VAR 0 17
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: CALL_OW 254
43906: PPUSH
43907: LD_INT 5
43909: PPUSH
43910: CALL_OW 273
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43919: LD_VAR 0 16
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PPUSH
43928: LD_VAR 0 16
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: PPUSH
43937: CALL_OW 488
43941: IFFALSE 43972
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43943: LD_VAR 0 13
43947: PPUSH
43948: LD_VAR 0 16
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: PPUSH
43957: LD_VAR 0 16
43961: PUSH
43962: LD_INT 2
43964: ARRAY
43965: PPUSH
43966: CALL_OW 111
// continue ;
43970: GO 43462
// end ; end ; r := GetDir ( tmp ) ;
43972: LD_ADDR_VAR 0 15
43976: PUSH
43977: LD_VAR 0 13
43981: PPUSH
43982: CALL_OW 254
43986: ST_TO_ADDR
// if r = 5 then
43987: LD_VAR 0 15
43991: PUSH
43992: LD_INT 5
43994: EQUAL
43995: IFFALSE 44005
// r := 0 ;
43997: LD_ADDR_VAR 0 15
44001: PUSH
44002: LD_INT 0
44004: ST_TO_ADDR
// for j = r to 5 do
44005: LD_ADDR_VAR 0 10
44009: PUSH
44010: DOUBLE
44011: LD_VAR 0 15
44015: DEC
44016: ST_TO_ADDR
44017: LD_INT 5
44019: PUSH
44020: FOR_TO
44021: IFFALSE 44135
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44023: LD_ADDR_VAR 0 11
44027: PUSH
44028: LD_VAR 0 13
44032: PPUSH
44033: CALL_OW 250
44037: PPUSH
44038: LD_VAR 0 10
44042: PPUSH
44043: LD_INT 2
44045: PPUSH
44046: CALL_OW 272
44050: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44051: LD_ADDR_VAR 0 12
44055: PUSH
44056: LD_VAR 0 13
44060: PPUSH
44061: CALL_OW 251
44065: PPUSH
44066: LD_VAR 0 10
44070: PPUSH
44071: LD_INT 2
44073: PPUSH
44074: CALL_OW 273
44078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44079: LD_VAR 0 11
44083: PPUSH
44084: LD_VAR 0 12
44088: PPUSH
44089: CALL_OW 488
44093: PUSH
44094: LD_VAR 0 11
44098: PPUSH
44099: LD_VAR 0 12
44103: PPUSH
44104: CALL_OW 428
44108: NOT
44109: AND
44110: IFFALSE 44133
// begin ComMoveXY ( tmp , _x , _y ) ;
44112: LD_VAR 0 13
44116: PPUSH
44117: LD_VAR 0 11
44121: PPUSH
44122: LD_VAR 0 12
44126: PPUSH
44127: CALL_OW 111
// break ;
44131: GO 44135
// end ; end ;
44133: GO 44020
44135: POP
44136: POP
// end ; end ;
44137: GO 43462
44139: POP
44140: POP
// end ;
44141: LD_VAR 0 8
44145: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44146: LD_INT 0
44148: PPUSH
// result := true ;
44149: LD_ADDR_VAR 0 3
44153: PUSH
44154: LD_INT 1
44156: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44157: LD_VAR 0 2
44161: PUSH
44162: LD_INT 24
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44176
44168: LD_INT 33
44170: DOUBLE
44171: EQUAL
44172: IFTRUE 44176
44174: GO 44201
44176: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44177: LD_ADDR_VAR 0 3
44181: PUSH
44182: LD_INT 32
44184: PPUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: CALL_OW 321
44194: PUSH
44195: LD_INT 2
44197: EQUAL
44198: ST_TO_ADDR
44199: GO 44517
44201: LD_INT 20
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44209
44207: GO 44234
44209: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_INT 6
44217: PPUSH
44218: LD_VAR 0 1
44222: PPUSH
44223: CALL_OW 321
44227: PUSH
44228: LD_INT 2
44230: EQUAL
44231: ST_TO_ADDR
44232: GO 44517
44234: LD_INT 22
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44248
44240: LD_INT 36
44242: DOUBLE
44243: EQUAL
44244: IFTRUE 44248
44246: GO 44273
44248: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_INT 15
44256: PPUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 321
44266: PUSH
44267: LD_INT 2
44269: EQUAL
44270: ST_TO_ADDR
44271: GO 44517
44273: LD_INT 30
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44306
44281: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_INT 20
44289: PPUSH
44290: LD_VAR 0 1
44294: PPUSH
44295: CALL_OW 321
44299: PUSH
44300: LD_INT 2
44302: EQUAL
44303: ST_TO_ADDR
44304: GO 44517
44306: LD_INT 28
44308: DOUBLE
44309: EQUAL
44310: IFTRUE 44320
44312: LD_INT 21
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44345
44320: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 21
44328: PPUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 321
44338: PUSH
44339: LD_INT 2
44341: EQUAL
44342: ST_TO_ADDR
44343: GO 44517
44345: LD_INT 16
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44353
44351: GO 44378
44353: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44354: LD_ADDR_VAR 0 3
44358: PUSH
44359: LD_INT 84
44361: PPUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 321
44371: PUSH
44372: LD_INT 2
44374: EQUAL
44375: ST_TO_ADDR
44376: GO 44517
44378: LD_INT 19
44380: DOUBLE
44381: EQUAL
44382: IFTRUE 44392
44384: LD_INT 23
44386: DOUBLE
44387: EQUAL
44388: IFTRUE 44392
44390: GO 44417
44392: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_INT 83
44400: PPUSH
44401: LD_VAR 0 1
44405: PPUSH
44406: CALL_OW 321
44410: PUSH
44411: LD_INT 2
44413: EQUAL
44414: ST_TO_ADDR
44415: GO 44517
44417: LD_INT 17
44419: DOUBLE
44420: EQUAL
44421: IFTRUE 44425
44423: GO 44450
44425: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44426: LD_ADDR_VAR 0 3
44430: PUSH
44431: LD_INT 39
44433: PPUSH
44434: LD_VAR 0 1
44438: PPUSH
44439: CALL_OW 321
44443: PUSH
44444: LD_INT 2
44446: EQUAL
44447: ST_TO_ADDR
44448: GO 44517
44450: LD_INT 18
44452: DOUBLE
44453: EQUAL
44454: IFTRUE 44458
44456: GO 44483
44458: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44459: LD_ADDR_VAR 0 3
44463: PUSH
44464: LD_INT 40
44466: PPUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: CALL_OW 321
44476: PUSH
44477: LD_INT 2
44479: EQUAL
44480: ST_TO_ADDR
44481: GO 44517
44483: LD_INT 27
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44491
44489: GO 44516
44491: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: LD_INT 35
44499: PPUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 321
44509: PUSH
44510: LD_INT 2
44512: EQUAL
44513: ST_TO_ADDR
44514: GO 44517
44516: POP
// end ;
44517: LD_VAR 0 3
44521: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44522: LD_INT 0
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
// result := false ;
44535: LD_ADDR_VAR 0 6
44539: PUSH
44540: LD_INT 0
44542: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44543: LD_VAR 0 1
44547: NOT
44548: PUSH
44549: LD_VAR 0 1
44553: PPUSH
44554: CALL_OW 266
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: IN
44569: NOT
44570: OR
44571: PUSH
44572: LD_VAR 0 2
44576: NOT
44577: OR
44578: PUSH
44579: LD_VAR 0 5
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: LD_INT 4
44598: PUSH
44599: LD_INT 5
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: IN
44610: NOT
44611: OR
44612: PUSH
44613: LD_VAR 0 3
44617: PPUSH
44618: LD_VAR 0 4
44622: PPUSH
44623: CALL_OW 488
44627: NOT
44628: OR
44629: IFFALSE 44633
// exit ;
44631: GO 45369
// side := GetSide ( depot ) ;
44633: LD_ADDR_VAR 0 9
44637: PUSH
44638: LD_VAR 0 1
44642: PPUSH
44643: CALL_OW 255
44647: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44648: LD_VAR 0 9
44652: PPUSH
44653: LD_VAR 0 2
44657: PPUSH
44658: CALL 44146 0 2
44662: NOT
44663: IFFALSE 44667
// exit ;
44665: GO 45369
// pom := GetBase ( depot ) ;
44667: LD_ADDR_VAR 0 10
44671: PUSH
44672: LD_VAR 0 1
44676: PPUSH
44677: CALL_OW 274
44681: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44682: LD_ADDR_VAR 0 11
44686: PUSH
44687: LD_VAR 0 2
44691: PPUSH
44692: LD_VAR 0 1
44696: PPUSH
44697: CALL_OW 248
44701: PPUSH
44702: CALL_OW 450
44706: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44707: LD_VAR 0 10
44711: PPUSH
44712: LD_INT 1
44714: PPUSH
44715: CALL_OW 275
44719: PUSH
44720: LD_VAR 0 11
44724: PUSH
44725: LD_INT 1
44727: ARRAY
44728: GREATEREQUAL
44729: PUSH
44730: LD_VAR 0 10
44734: PPUSH
44735: LD_INT 2
44737: PPUSH
44738: CALL_OW 275
44742: PUSH
44743: LD_VAR 0 11
44747: PUSH
44748: LD_INT 2
44750: ARRAY
44751: GREATEREQUAL
44752: AND
44753: PUSH
44754: LD_VAR 0 10
44758: PPUSH
44759: LD_INT 3
44761: PPUSH
44762: CALL_OW 275
44766: PUSH
44767: LD_VAR 0 11
44771: PUSH
44772: LD_INT 3
44774: ARRAY
44775: GREATEREQUAL
44776: AND
44777: NOT
44778: IFFALSE 44782
// exit ;
44780: GO 45369
// if GetBType ( depot ) = b_depot then
44782: LD_VAR 0 1
44786: PPUSH
44787: CALL_OW 266
44791: PUSH
44792: LD_INT 0
44794: EQUAL
44795: IFFALSE 44807
// dist := 28 else
44797: LD_ADDR_VAR 0 14
44801: PUSH
44802: LD_INT 28
44804: ST_TO_ADDR
44805: GO 44815
// dist := 36 ;
44807: LD_ADDR_VAR 0 14
44811: PUSH
44812: LD_INT 36
44814: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44815: LD_VAR 0 1
44819: PPUSH
44820: LD_VAR 0 3
44824: PPUSH
44825: LD_VAR 0 4
44829: PPUSH
44830: CALL_OW 297
44834: PUSH
44835: LD_VAR 0 14
44839: GREATER
44840: IFFALSE 44844
// exit ;
44842: GO 45369
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44844: LD_ADDR_VAR 0 12
44848: PUSH
44849: LD_VAR 0 2
44853: PPUSH
44854: LD_VAR 0 3
44858: PPUSH
44859: LD_VAR 0 4
44863: PPUSH
44864: LD_VAR 0 5
44868: PPUSH
44869: LD_VAR 0 1
44873: PPUSH
44874: CALL_OW 248
44878: PPUSH
44879: LD_INT 0
44881: PPUSH
44882: CALL 45374 0 6
44886: ST_TO_ADDR
// if not hexes then
44887: LD_VAR 0 12
44891: NOT
44892: IFFALSE 44896
// exit ;
44894: GO 45369
// hex := GetHexInfo ( x , y ) ;
44896: LD_ADDR_VAR 0 15
44900: PUSH
44901: LD_VAR 0 3
44905: PPUSH
44906: LD_VAR 0 4
44910: PPUSH
44911: CALL_OW 546
44915: ST_TO_ADDR
// if hex [ 1 ] then
44916: LD_VAR 0 15
44920: PUSH
44921: LD_INT 1
44923: ARRAY
44924: IFFALSE 44928
// exit ;
44926: GO 45369
// height := hex [ 2 ] ;
44928: LD_ADDR_VAR 0 13
44932: PUSH
44933: LD_VAR 0 15
44937: PUSH
44938: LD_INT 2
44940: ARRAY
44941: ST_TO_ADDR
// for i = 1 to hexes do
44942: LD_ADDR_VAR 0 7
44946: PUSH
44947: DOUBLE
44948: LD_INT 1
44950: DEC
44951: ST_TO_ADDR
44952: LD_VAR 0 12
44956: PUSH
44957: FOR_TO
44958: IFFALSE 45288
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44960: LD_VAR 0 12
44964: PUSH
44965: LD_VAR 0 7
44969: ARRAY
44970: PUSH
44971: LD_INT 1
44973: ARRAY
44974: PPUSH
44975: LD_VAR 0 12
44979: PUSH
44980: LD_VAR 0 7
44984: ARRAY
44985: PUSH
44986: LD_INT 2
44988: ARRAY
44989: PPUSH
44990: CALL_OW 488
44994: NOT
44995: PUSH
44996: LD_VAR 0 12
45000: PUSH
45001: LD_VAR 0 7
45005: ARRAY
45006: PUSH
45007: LD_INT 1
45009: ARRAY
45010: PPUSH
45011: LD_VAR 0 12
45015: PUSH
45016: LD_VAR 0 7
45020: ARRAY
45021: PUSH
45022: LD_INT 2
45024: ARRAY
45025: PPUSH
45026: CALL_OW 428
45030: PUSH
45031: LD_INT 0
45033: GREATER
45034: OR
45035: PUSH
45036: LD_VAR 0 12
45040: PUSH
45041: LD_VAR 0 7
45045: ARRAY
45046: PUSH
45047: LD_INT 1
45049: ARRAY
45050: PPUSH
45051: LD_VAR 0 12
45055: PUSH
45056: LD_VAR 0 7
45060: ARRAY
45061: PUSH
45062: LD_INT 2
45064: ARRAY
45065: PPUSH
45066: CALL_OW 351
45070: OR
45071: IFFALSE 45077
// exit ;
45073: POP
45074: POP
45075: GO 45369
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45077: LD_ADDR_VAR 0 8
45081: PUSH
45082: LD_VAR 0 12
45086: PUSH
45087: LD_VAR 0 7
45091: ARRAY
45092: PUSH
45093: LD_INT 1
45095: ARRAY
45096: PPUSH
45097: LD_VAR 0 12
45101: PUSH
45102: LD_VAR 0 7
45106: ARRAY
45107: PUSH
45108: LD_INT 2
45110: ARRAY
45111: PPUSH
45112: CALL_OW 546
45116: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45117: LD_VAR 0 8
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: PUSH
45126: LD_VAR 0 8
45130: PUSH
45131: LD_INT 2
45133: ARRAY
45134: PUSH
45135: LD_VAR 0 13
45139: PUSH
45140: LD_INT 2
45142: PLUS
45143: GREATER
45144: OR
45145: PUSH
45146: LD_VAR 0 8
45150: PUSH
45151: LD_INT 2
45153: ARRAY
45154: PUSH
45155: LD_VAR 0 13
45159: PUSH
45160: LD_INT 2
45162: MINUS
45163: LESS
45164: OR
45165: PUSH
45166: LD_VAR 0 8
45170: PUSH
45171: LD_INT 3
45173: ARRAY
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 8
45180: PUSH
45181: LD_INT 9
45183: PUSH
45184: LD_INT 10
45186: PUSH
45187: LD_INT 11
45189: PUSH
45190: LD_INT 12
45192: PUSH
45193: LD_INT 13
45195: PUSH
45196: LD_INT 16
45198: PUSH
45199: LD_INT 17
45201: PUSH
45202: LD_INT 18
45204: PUSH
45205: LD_INT 19
45207: PUSH
45208: LD_INT 20
45210: PUSH
45211: LD_INT 21
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: IN
45229: NOT
45230: OR
45231: PUSH
45232: LD_VAR 0 8
45236: PUSH
45237: LD_INT 5
45239: ARRAY
45240: NOT
45241: OR
45242: PUSH
45243: LD_VAR 0 8
45247: PUSH
45248: LD_INT 6
45250: ARRAY
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 7
45260: PUSH
45261: LD_INT 9
45263: PUSH
45264: LD_INT 10
45266: PUSH
45267: LD_INT 11
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: IN
45278: NOT
45279: OR
45280: IFFALSE 45286
// exit ;
45282: POP
45283: POP
45284: GO 45369
// end ;
45286: GO 44957
45288: POP
45289: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45290: LD_VAR 0 9
45294: PPUSH
45295: LD_VAR 0 3
45299: PPUSH
45300: LD_VAR 0 4
45304: PPUSH
45305: LD_INT 20
45307: PPUSH
45308: CALL 37321 0 4
45312: PUSH
45313: LD_INT 4
45315: ARRAY
45316: IFFALSE 45320
// exit ;
45318: GO 45369
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 29
45327: PUSH
45328: LD_INT 30
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: IN
45335: PUSH
45336: LD_VAR 0 3
45340: PPUSH
45341: LD_VAR 0 4
45345: PPUSH
45346: LD_VAR 0 9
45350: PPUSH
45351: CALL_OW 440
45355: NOT
45356: AND
45357: IFFALSE 45361
// exit ;
45359: GO 45369
// result := true ;
45361: LD_ADDR_VAR 0 6
45365: PUSH
45366: LD_INT 1
45368: ST_TO_ADDR
// end ;
45369: LD_VAR 0 6
45373: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
// result = [ ] ;
45434: LD_ADDR_VAR 0 7
45438: PUSH
45439: EMPTY
45440: ST_TO_ADDR
// temp_list = [ ] ;
45441: LD_ADDR_VAR 0 9
45445: PUSH
45446: EMPTY
45447: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45448: LD_VAR 0 4
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 4
45467: PUSH
45468: LD_INT 5
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: IN
45479: NOT
45480: PUSH
45481: LD_VAR 0 1
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: IN
45496: PUSH
45497: LD_VAR 0 5
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: IN
45516: NOT
45517: AND
45518: OR
45519: IFFALSE 45523
// exit ;
45521: GO 63914
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45523: LD_VAR 0 1
45527: PUSH
45528: LD_INT 6
45530: PUSH
45531: LD_INT 7
45533: PUSH
45534: LD_INT 8
45536: PUSH
45537: LD_INT 13
45539: PUSH
45540: LD_INT 12
45542: PUSH
45543: LD_INT 15
45545: PUSH
45546: LD_INT 11
45548: PUSH
45549: LD_INT 14
45551: PUSH
45552: LD_INT 10
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: IN
45566: IFFALSE 45576
// btype = b_lab ;
45568: LD_ADDR_VAR 0 1
45572: PUSH
45573: LD_INT 6
45575: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45576: LD_VAR 0 6
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: IN
45595: NOT
45596: PUSH
45597: LD_VAR 0 1
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: LD_INT 6
45616: PUSH
45617: LD_INT 36
45619: PUSH
45620: LD_INT 4
45622: PUSH
45623: LD_INT 5
45625: PUSH
45626: LD_INT 31
45628: PUSH
45629: LD_INT 32
45631: PUSH
45632: LD_INT 33
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: IN
45648: NOT
45649: PUSH
45650: LD_VAR 0 6
45654: PUSH
45655: LD_INT 1
45657: EQUAL
45658: AND
45659: OR
45660: PUSH
45661: LD_VAR 0 1
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 3
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: IN
45676: NOT
45677: PUSH
45678: LD_VAR 0 6
45682: PUSH
45683: LD_INT 2
45685: EQUAL
45686: AND
45687: OR
45688: IFFALSE 45698
// mode = 0 ;
45690: LD_ADDR_VAR 0 6
45694: PUSH
45695: LD_INT 0
45697: ST_TO_ADDR
// case mode of 0 :
45698: LD_VAR 0 6
45702: PUSH
45703: LD_INT 0
45705: DOUBLE
45706: EQUAL
45707: IFTRUE 45711
45709: GO 57164
45711: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45712: LD_ADDR_VAR 0 11
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45905: LD_ADDR_VAR 0 12
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46101: LD_ADDR_VAR 0 13
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46300: LD_ADDR_VAR 0 14
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 3
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46496: LD_ADDR_VAR 0 15
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46689: LD_ADDR_VAR 0 16
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46882: LD_ADDR_VAR 0 17
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47112: LD_ADDR_VAR 0 18
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47342: LD_ADDR_VAR 0 19
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47572: LD_ADDR_VAR 0 20
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47802: LD_ADDR_VAR 0 21
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48032: LD_ADDR_VAR 0 22
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48262: LD_ADDR_VAR 0 23
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48542: LD_ADDR_VAR 0 24
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48818: LD_ADDR_VAR 0 25
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49092: LD_ADDR_VAR 0 26
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49368: LD_ADDR_VAR 0 27
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49648: LD_ADDR_VAR 0 28
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 3
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 3
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49930: LD_ADDR_VAR 0 29
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50209: LD_ADDR_VAR 0 30
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50487: LD_ADDR_VAR 0 31
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50765: LD_ADDR_VAR 0 32
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51043: LD_ADDR_VAR 0 33
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51322: LD_ADDR_VAR 0 34
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51602: LD_ADDR_VAR 0 35
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51714: LD_ADDR_VAR 0 36
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51826: LD_ADDR_VAR 0 37
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51938: LD_ADDR_VAR 0 38
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52050: LD_ADDR_VAR 0 39
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52162: LD_ADDR_VAR 0 40
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52274: LD_ADDR_VAR 0 41
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 3
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52624: LD_ADDR_VAR 0 42
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: LD_INT 3
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52974: LD_ADDR_VAR 0 43
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 3
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 3
53270: NEG
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53322: LD_ADDR_VAR 0 44
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: LD_INT 3
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53672: LD_ADDR_VAR 0 45
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54022: LD_ADDR_VAR 0 46
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 3
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54370: LD_ADDR_VAR 0 47
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54521: LD_ADDR_VAR 0 48
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54668: LD_ADDR_VAR 0 49
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54812: LD_ADDR_VAR 0 50
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54956: LD_ADDR_VAR 0 51
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55103: LD_ADDR_VAR 0 52
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55254: LD_ADDR_VAR 0 53
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55484: LD_ADDR_VAR 0 54
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55714: LD_ADDR_VAR 0 55
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55944: LD_ADDR_VAR 0 56
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56174: LD_ADDR_VAR 0 57
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56404: LD_ADDR_VAR 0 58
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56634: LD_ADDR_VAR 0 59
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56722: LD_ADDR_VAR 0 60
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56810: LD_ADDR_VAR 0 61
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56898: LD_ADDR_VAR 0 62
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56986: LD_ADDR_VAR 0 63
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57074: LD_ADDR_VAR 0 64
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// end ; 1 :
57162: GO 63059
57164: LD_INT 1
57166: DOUBLE
57167: EQUAL
57168: IFTRUE 57172
57170: GO 59795
57172: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57173: LD_ADDR_VAR 0 11
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57217: LD_ADDR_VAR 0 12
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57258: LD_ADDR_VAR 0 13
57262: PUSH
57263: LD_INT 3
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57298: LD_ADDR_VAR 0 14
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57339: LD_ADDR_VAR 0 15
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57383: LD_ADDR_VAR 0 16
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 3
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57429: LD_ADDR_VAR 0 17
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57473: LD_ADDR_VAR 0 18
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57514: LD_ADDR_VAR 0 19
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57554: LD_ADDR_VAR 0 20
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57595: LD_ADDR_VAR 0 21
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57639: LD_ADDR_VAR 0 22
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57685: LD_ADDR_VAR 0 23
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 4
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57729: LD_ADDR_VAR 0 24
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57770: LD_ADDR_VAR 0 25
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57810: LD_ADDR_VAR 0 26
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57851: LD_ADDR_VAR 0 27
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 4
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57895: LD_ADDR_VAR 0 28
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: NEG
57915: PUSH
57916: LD_INT 4
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 4
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57941: LD_ADDR_VAR 0 29
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 4
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 4
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 5
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 5
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 6
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 6
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 5
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58096: LD_ADDR_VAR 0 30
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 5
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 6
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 6
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58239: LD_ADDR_VAR 0 31
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 3
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 4
58326: PUSH
58327: LD_INT 5
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 6
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 6
58346: PUSH
58347: LD_INT 6
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 5
58356: PUSH
58357: LD_INT 6
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58378: LD_ADDR_VAR 0 32
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 3
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 5
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 5
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 6
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 6
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 5
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58521: LD_ADDR_VAR 0 33
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 4
58573: NEG
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 4
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 5
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 5
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 6
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 6
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58676: LD_ADDR_VAR 0 34
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 4
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: NEG
58744: PUSH
58745: LD_INT 4
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 4
58755: NEG
58756: PUSH
58757: LD_INT 5
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 5
58779: NEG
58780: PUSH
58781: LD_INT 5
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 5
58791: NEG
58792: PUSH
58793: LD_INT 6
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 6
58803: NEG
58804: PUSH
58805: LD_INT 5
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 6
58815: NEG
58816: PUSH
58817: LD_INT 6
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58839: LD_ADDR_VAR 0 41
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58883: LD_ADDR_VAR 0 42
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58924: LD_ADDR_VAR 0 43
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58964: LD_ADDR_VAR 0 44
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59005: LD_ADDR_VAR 0 45
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59049: LD_ADDR_VAR 0 46
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59095: LD_ADDR_VAR 0 47
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 3
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59128: LD_ADDR_VAR 0 48
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59159: LD_ADDR_VAR 0 49
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59188: LD_ADDR_VAR 0 50
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59217: LD_ADDR_VAR 0 51
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59248: LD_ADDR_VAR 0 52
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59281: LD_ADDR_VAR 0 53
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59325: LD_ADDR_VAR 0 54
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59366: LD_ADDR_VAR 0 55
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59406: LD_ADDR_VAR 0 56
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59447: LD_ADDR_VAR 0 57
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59491: LD_ADDR_VAR 0 58
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 3
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59537: LD_ADDR_VAR 0 59
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59581: LD_ADDR_VAR 0 60
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59622: LD_ADDR_VAR 0 61
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59662: LD_ADDR_VAR 0 62
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59703: LD_ADDR_VAR 0 63
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59747: LD_ADDR_VAR 0 64
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// end ; 2 :
59793: GO 63059
59795: LD_INT 2
59797: DOUBLE
59798: EQUAL
59799: IFTRUE 59803
59801: GO 63058
59803: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59804: LD_ADDR_VAR 0 29
59808: PUSH
59809: LD_INT 4
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 5
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 5
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 4
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: LD_INT 4
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 4
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 4
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: NEG
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: LD_INT 4
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: LD_INT 5
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 4
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 5
60249: NEG
60250: PUSH
60251: LD_INT 4
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: LD_INT 5
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 5
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 5
60285: NEG
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60342: LD_ADDR_VAR 0 30
60346: PUSH
60347: LD_INT 4
60349: PUSH
60350: LD_INT 4
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: PUSH
60370: LD_INT 4
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 5
60379: PUSH
60380: LD_INT 5
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: NEG
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 5
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 5
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: NEG
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: LD_INT 4
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 4
60694: NEG
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 4
60706: NEG
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 4
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 4
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 5
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: LD_INT 4
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 5
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 5
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60889: LD_ADDR_VAR 0 31
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 4
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 5
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 3
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 5
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 4
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 4
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: LD_INT 4
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: LD_INT 5
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: LD_INT 4
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 4
61139: NEG
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 5
61151: NEG
61152: PUSH
61153: LD_INT 4
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: LD_INT 5
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 5
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 5
61187: NEG
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 3
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 4
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: LD_INT 4
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 4
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 4
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 5
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 5
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 5
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61439: LD_ADDR_VAR 0 32
61443: PUSH
61444: LD_INT 4
61446: NEG
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 4
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 4
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 5
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 5
61525: NEG
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: LD_INT 3
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: LD_INT 4
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: NEG
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: LD_INT 4
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: NEG
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 4
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 5
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 5
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: LD_INT 5
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 4
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 4
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 4
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 4
61851: PUSH
61852: LD_INT 4
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 5
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 5
61881: PUSH
61882: LD_INT 5
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 4
61891: PUSH
61892: LD_INT 5
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: LD_INT 4
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 5
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 5
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61986: LD_ADDR_VAR 0 33
61990: PUSH
61991: LD_INT 4
61993: NEG
61994: PUSH
61995: LD_INT 4
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 4
62005: NEG
62006: PUSH
62007: LD_INT 5
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: NEG
62042: PUSH
62043: LD_INT 3
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 5
62053: NEG
62054: PUSH
62055: LD_INT 4
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 5
62065: NEG
62066: PUSH
62067: LD_INT 5
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 5
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 5
62089: NEG
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 3
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 4
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 4
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 4
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 4
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 4
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 5
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 4
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 5
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 4
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 4
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 4
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 4
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 4
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 5
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62524: LD_ADDR_VAR 0 34
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 5
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 4
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 5
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 5
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 4
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: LD_INT 4
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 4
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: LD_INT 4
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 5
62756: PUSH
62757: LD_INT 5
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 4
62766: PUSH
62767: LD_INT 5
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: LD_INT 4
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 5
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: LD_INT 5
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 4
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 4
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 3
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 4
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 3
62932: NEG
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 3
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 4
62954: NEG
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 5
62965: NEG
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 5
62976: NEG
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 5
62988: NEG
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 3
63000: NEG
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: ST_TO_ADDR
// end ; end ;
63056: GO 63059
63058: POP
// case btype of b_depot , b_warehouse :
63059: LD_VAR 0 1
63063: PUSH
63064: LD_INT 0
63066: DOUBLE
63067: EQUAL
63068: IFTRUE 63078
63070: LD_INT 1
63072: DOUBLE
63073: EQUAL
63074: IFTRUE 63078
63076: GO 63279
63078: POP
// case nation of nation_american :
63079: LD_VAR 0 5
63083: PUSH
63084: LD_INT 1
63086: DOUBLE
63087: EQUAL
63088: IFTRUE 63092
63090: GO 63148
63092: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63093: LD_ADDR_VAR 0 9
63097: PUSH
63098: LD_VAR 0 11
63102: PUSH
63103: LD_VAR 0 12
63107: PUSH
63108: LD_VAR 0 13
63112: PUSH
63113: LD_VAR 0 14
63117: PUSH
63118: LD_VAR 0 15
63122: PUSH
63123: LD_VAR 0 16
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: LD_VAR 0 4
63140: PUSH
63141: LD_INT 1
63143: PLUS
63144: ARRAY
63145: ST_TO_ADDR
63146: GO 63277
63148: LD_INT 2
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63156
63154: GO 63212
63156: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63157: LD_ADDR_VAR 0 9
63161: PUSH
63162: LD_VAR 0 17
63166: PUSH
63167: LD_VAR 0 18
63171: PUSH
63172: LD_VAR 0 19
63176: PUSH
63177: LD_VAR 0 20
63181: PUSH
63182: LD_VAR 0 21
63186: PUSH
63187: LD_VAR 0 22
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: PUSH
63200: LD_VAR 0 4
63204: PUSH
63205: LD_INT 1
63207: PLUS
63208: ARRAY
63209: ST_TO_ADDR
63210: GO 63277
63212: LD_INT 3
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63220
63218: GO 63276
63220: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63221: LD_ADDR_VAR 0 9
63225: PUSH
63226: LD_VAR 0 23
63230: PUSH
63231: LD_VAR 0 24
63235: PUSH
63236: LD_VAR 0 25
63240: PUSH
63241: LD_VAR 0 26
63245: PUSH
63246: LD_VAR 0 27
63250: PUSH
63251: LD_VAR 0 28
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: PUSH
63264: LD_VAR 0 4
63268: PUSH
63269: LD_INT 1
63271: PLUS
63272: ARRAY
63273: ST_TO_ADDR
63274: GO 63277
63276: POP
63277: GO 63832
63279: LD_INT 2
63281: DOUBLE
63282: EQUAL
63283: IFTRUE 63293
63285: LD_INT 3
63287: DOUBLE
63288: EQUAL
63289: IFTRUE 63293
63291: GO 63349
63293: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63294: LD_ADDR_VAR 0 9
63298: PUSH
63299: LD_VAR 0 29
63303: PUSH
63304: LD_VAR 0 30
63308: PUSH
63309: LD_VAR 0 31
63313: PUSH
63314: LD_VAR 0 32
63318: PUSH
63319: LD_VAR 0 33
63323: PUSH
63324: LD_VAR 0 34
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: LD_VAR 0 4
63341: PUSH
63342: LD_INT 1
63344: PLUS
63345: ARRAY
63346: ST_TO_ADDR
63347: GO 63832
63349: LD_INT 16
63351: DOUBLE
63352: EQUAL
63353: IFTRUE 63411
63355: LD_INT 17
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63411
63361: LD_INT 18
63363: DOUBLE
63364: EQUAL
63365: IFTRUE 63411
63367: LD_INT 19
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63411
63373: LD_INT 22
63375: DOUBLE
63376: EQUAL
63377: IFTRUE 63411
63379: LD_INT 20
63381: DOUBLE
63382: EQUAL
63383: IFTRUE 63411
63385: LD_INT 21
63387: DOUBLE
63388: EQUAL
63389: IFTRUE 63411
63391: LD_INT 23
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63411
63397: LD_INT 24
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63411
63403: LD_INT 25
63405: DOUBLE
63406: EQUAL
63407: IFTRUE 63411
63409: GO 63467
63411: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63412: LD_ADDR_VAR 0 9
63416: PUSH
63417: LD_VAR 0 35
63421: PUSH
63422: LD_VAR 0 36
63426: PUSH
63427: LD_VAR 0 37
63431: PUSH
63432: LD_VAR 0 38
63436: PUSH
63437: LD_VAR 0 39
63441: PUSH
63442: LD_VAR 0 40
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: PUSH
63455: LD_VAR 0 4
63459: PUSH
63460: LD_INT 1
63462: PLUS
63463: ARRAY
63464: ST_TO_ADDR
63465: GO 63832
63467: LD_INT 6
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63523
63473: LD_INT 7
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63523
63479: LD_INT 8
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63523
63485: LD_INT 13
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63523
63491: LD_INT 12
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63523
63497: LD_INT 15
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63523
63503: LD_INT 11
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63523
63509: LD_INT 14
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63523
63515: LD_INT 10
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63523
63521: GO 63579
63523: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63524: LD_ADDR_VAR 0 9
63528: PUSH
63529: LD_VAR 0 41
63533: PUSH
63534: LD_VAR 0 42
63538: PUSH
63539: LD_VAR 0 43
63543: PUSH
63544: LD_VAR 0 44
63548: PUSH
63549: LD_VAR 0 45
63553: PUSH
63554: LD_VAR 0 46
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: PUSH
63567: LD_VAR 0 4
63571: PUSH
63572: LD_INT 1
63574: PLUS
63575: ARRAY
63576: ST_TO_ADDR
63577: GO 63832
63579: LD_INT 36
63581: DOUBLE
63582: EQUAL
63583: IFTRUE 63587
63585: GO 63643
63587: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63588: LD_ADDR_VAR 0 9
63592: PUSH
63593: LD_VAR 0 47
63597: PUSH
63598: LD_VAR 0 48
63602: PUSH
63603: LD_VAR 0 49
63607: PUSH
63608: LD_VAR 0 50
63612: PUSH
63613: LD_VAR 0 51
63617: PUSH
63618: LD_VAR 0 52
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: PUSH
63631: LD_VAR 0 4
63635: PUSH
63636: LD_INT 1
63638: PLUS
63639: ARRAY
63640: ST_TO_ADDR
63641: GO 63832
63643: LD_INT 4
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63669
63649: LD_INT 5
63651: DOUBLE
63652: EQUAL
63653: IFTRUE 63669
63655: LD_INT 34
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63669
63661: LD_INT 37
63663: DOUBLE
63664: EQUAL
63665: IFTRUE 63669
63667: GO 63725
63669: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63670: LD_ADDR_VAR 0 9
63674: PUSH
63675: LD_VAR 0 53
63679: PUSH
63680: LD_VAR 0 54
63684: PUSH
63685: LD_VAR 0 55
63689: PUSH
63690: LD_VAR 0 56
63694: PUSH
63695: LD_VAR 0 57
63699: PUSH
63700: LD_VAR 0 58
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: PUSH
63713: LD_VAR 0 4
63717: PUSH
63718: LD_INT 1
63720: PLUS
63721: ARRAY
63722: ST_TO_ADDR
63723: GO 63832
63725: LD_INT 31
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63775
63731: LD_INT 32
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63775
63737: LD_INT 33
63739: DOUBLE
63740: EQUAL
63741: IFTRUE 63775
63743: LD_INT 27
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63775
63749: LD_INT 26
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63775
63755: LD_INT 28
63757: DOUBLE
63758: EQUAL
63759: IFTRUE 63775
63761: LD_INT 29
63763: DOUBLE
63764: EQUAL
63765: IFTRUE 63775
63767: LD_INT 30
63769: DOUBLE
63770: EQUAL
63771: IFTRUE 63775
63773: GO 63831
63775: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63776: LD_ADDR_VAR 0 9
63780: PUSH
63781: LD_VAR 0 59
63785: PUSH
63786: LD_VAR 0 60
63790: PUSH
63791: LD_VAR 0 61
63795: PUSH
63796: LD_VAR 0 62
63800: PUSH
63801: LD_VAR 0 63
63805: PUSH
63806: LD_VAR 0 64
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: LD_VAR 0 4
63823: PUSH
63824: LD_INT 1
63826: PLUS
63827: ARRAY
63828: ST_TO_ADDR
63829: GO 63832
63831: POP
// temp_list2 = [ ] ;
63832: LD_ADDR_VAR 0 10
63836: PUSH
63837: EMPTY
63838: ST_TO_ADDR
// for i in temp_list do
63839: LD_ADDR_VAR 0 8
63843: PUSH
63844: LD_VAR 0 9
63848: PUSH
63849: FOR_IN
63850: IFFALSE 63902
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63852: LD_ADDR_VAR 0 10
63856: PUSH
63857: LD_VAR 0 10
63861: PUSH
63862: LD_VAR 0 8
63866: PUSH
63867: LD_INT 1
63869: ARRAY
63870: PUSH
63871: LD_VAR 0 2
63875: PLUS
63876: PUSH
63877: LD_VAR 0 8
63881: PUSH
63882: LD_INT 2
63884: ARRAY
63885: PUSH
63886: LD_VAR 0 3
63890: PLUS
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: ADD
63899: ST_TO_ADDR
63900: GO 63849
63902: POP
63903: POP
// result = temp_list2 ;
63904: LD_ADDR_VAR 0 7
63908: PUSH
63909: LD_VAR 0 10
63913: ST_TO_ADDR
// end ;
63914: LD_VAR 0 7
63918: RET
// export function EnemyInRange ( unit , dist ) ; begin
63919: LD_INT 0
63921: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63922: LD_ADDR_VAR 0 3
63926: PUSH
63927: LD_VAR 0 1
63931: PPUSH
63932: CALL_OW 255
63936: PPUSH
63937: LD_VAR 0 1
63941: PPUSH
63942: CALL_OW 250
63946: PPUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: CALL_OW 251
63956: PPUSH
63957: LD_VAR 0 2
63961: PPUSH
63962: CALL 37321 0 4
63966: PUSH
63967: LD_INT 4
63969: ARRAY
63970: ST_TO_ADDR
// end ;
63971: LD_VAR 0 3
63975: RET
// export function PlayerSeeMe ( unit ) ; begin
63976: LD_INT 0
63978: PPUSH
// result := See ( your_side , unit ) ;
63979: LD_ADDR_VAR 0 2
63983: PUSH
63984: LD_OWVAR 2
63988: PPUSH
63989: LD_VAR 0 1
63993: PPUSH
63994: CALL_OW 292
63998: ST_TO_ADDR
// end ;
63999: LD_VAR 0 2
64003: RET
// export function ReverseDir ( unit ) ; begin
64004: LD_INT 0
64006: PPUSH
// if not unit then
64007: LD_VAR 0 1
64011: NOT
64012: IFFALSE 64016
// exit ;
64014: GO 64039
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64016: LD_ADDR_VAR 0 2
64020: PUSH
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 254
64030: PUSH
64031: LD_INT 3
64033: PLUS
64034: PUSH
64035: LD_INT 6
64037: MOD
64038: ST_TO_ADDR
// end ;
64039: LD_VAR 0 2
64043: RET
// export function ReverseArray ( array ) ; var i ; begin
64044: LD_INT 0
64046: PPUSH
64047: PPUSH
// if not array then
64048: LD_VAR 0 1
64052: NOT
64053: IFFALSE 64057
// exit ;
64055: GO 64112
// result := [ ] ;
64057: LD_ADDR_VAR 0 2
64061: PUSH
64062: EMPTY
64063: ST_TO_ADDR
// for i := array downto 1 do
64064: LD_ADDR_VAR 0 3
64068: PUSH
64069: DOUBLE
64070: LD_VAR 0 1
64074: INC
64075: ST_TO_ADDR
64076: LD_INT 1
64078: PUSH
64079: FOR_DOWNTO
64080: IFFALSE 64110
// result := Join ( result , array [ i ] ) ;
64082: LD_ADDR_VAR 0 2
64086: PUSH
64087: LD_VAR 0 2
64091: PPUSH
64092: LD_VAR 0 1
64096: PUSH
64097: LD_VAR 0 3
64101: ARRAY
64102: PPUSH
64103: CALL 68756 0 2
64107: ST_TO_ADDR
64108: GO 64079
64110: POP
64111: POP
// end ;
64112: LD_VAR 0 2
64116: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64117: LD_INT 0
64119: PPUSH
64120: PPUSH
64121: PPUSH
64122: PPUSH
64123: PPUSH
64124: PPUSH
// if not unit or not hexes then
64125: LD_VAR 0 1
64129: NOT
64130: PUSH
64131: LD_VAR 0 2
64135: NOT
64136: OR
64137: IFFALSE 64141
// exit ;
64139: GO 64264
// dist := 9999 ;
64141: LD_ADDR_VAR 0 5
64145: PUSH
64146: LD_INT 9999
64148: ST_TO_ADDR
// for i = 1 to hexes do
64149: LD_ADDR_VAR 0 4
64153: PUSH
64154: DOUBLE
64155: LD_INT 1
64157: DEC
64158: ST_TO_ADDR
64159: LD_VAR 0 2
64163: PUSH
64164: FOR_TO
64165: IFFALSE 64252
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64167: LD_ADDR_VAR 0 6
64171: PUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: LD_VAR 0 2
64181: PUSH
64182: LD_VAR 0 4
64186: ARRAY
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PPUSH
64192: LD_VAR 0 2
64196: PUSH
64197: LD_VAR 0 4
64201: ARRAY
64202: PUSH
64203: LD_INT 2
64205: ARRAY
64206: PPUSH
64207: CALL_OW 297
64211: ST_TO_ADDR
// if tdist < dist then
64212: LD_VAR 0 6
64216: PUSH
64217: LD_VAR 0 5
64221: LESS
64222: IFFALSE 64250
// begin hex := hexes [ i ] ;
64224: LD_ADDR_VAR 0 8
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_VAR 0 4
64238: ARRAY
64239: ST_TO_ADDR
// dist := tdist ;
64240: LD_ADDR_VAR 0 5
64244: PUSH
64245: LD_VAR 0 6
64249: ST_TO_ADDR
// end ; end ;
64250: GO 64164
64252: POP
64253: POP
// result := hex ;
64254: LD_ADDR_VAR 0 3
64258: PUSH
64259: LD_VAR 0 8
64263: ST_TO_ADDR
// end ;
64264: LD_VAR 0 3
64268: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64269: LD_INT 0
64271: PPUSH
64272: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64273: LD_VAR 0 1
64277: NOT
64278: PUSH
64279: LD_VAR 0 1
64283: PUSH
64284: LD_INT 21
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 23
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PPUSH
64308: CALL_OW 69
64312: IN
64313: NOT
64314: OR
64315: IFFALSE 64319
// exit ;
64317: GO 64366
// for i = 1 to 3 do
64319: LD_ADDR_VAR 0 3
64323: PUSH
64324: DOUBLE
64325: LD_INT 1
64327: DEC
64328: ST_TO_ADDR
64329: LD_INT 3
64331: PUSH
64332: FOR_TO
64333: IFFALSE 64364
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64335: LD_VAR 0 1
64339: PPUSH
64340: CALL_OW 250
64344: PPUSH
64345: LD_VAR 0 1
64349: PPUSH
64350: CALL_OW 251
64354: PPUSH
64355: LD_INT 1
64357: PPUSH
64358: CALL_OW 453
64362: GO 64332
64364: POP
64365: POP
// end ;
64366: LD_VAR 0 2
64370: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64371: LD_INT 0
64373: PPUSH
64374: PPUSH
64375: PPUSH
64376: PPUSH
64377: PPUSH
64378: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64379: LD_VAR 0 1
64383: NOT
64384: PUSH
64385: LD_VAR 0 2
64389: NOT
64390: OR
64391: PUSH
64392: LD_VAR 0 1
64396: PPUSH
64397: CALL_OW 314
64401: OR
64402: IFFALSE 64406
// exit ;
64404: GO 64873
// if GetLives ( i ) < 250 then
64406: LD_VAR 0 4
64410: PPUSH
64411: CALL_OW 256
64415: PUSH
64416: LD_INT 250
64418: LESS
64419: IFFALSE 64432
// begin ComAutodestruct ( i ) ;
64421: LD_VAR 0 4
64425: PPUSH
64426: CALL 64269 0 1
// exit ;
64430: GO 64873
// end ; x := GetX ( enemy_unit ) ;
64432: LD_ADDR_VAR 0 7
64436: PUSH
64437: LD_VAR 0 2
64441: PPUSH
64442: CALL_OW 250
64446: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64447: LD_ADDR_VAR 0 8
64451: PUSH
64452: LD_VAR 0 2
64456: PPUSH
64457: CALL_OW 251
64461: ST_TO_ADDR
// if not x or not y then
64462: LD_VAR 0 7
64466: NOT
64467: PUSH
64468: LD_VAR 0 8
64472: NOT
64473: OR
64474: IFFALSE 64478
// exit ;
64476: GO 64873
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64478: LD_ADDR_VAR 0 6
64482: PUSH
64483: LD_VAR 0 7
64487: PPUSH
64488: LD_INT 0
64490: PPUSH
64491: LD_INT 4
64493: PPUSH
64494: CALL_OW 272
64498: PUSH
64499: LD_VAR 0 8
64503: PPUSH
64504: LD_INT 0
64506: PPUSH
64507: LD_INT 4
64509: PPUSH
64510: CALL_OW 273
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_VAR 0 7
64523: PPUSH
64524: LD_INT 1
64526: PPUSH
64527: LD_INT 4
64529: PPUSH
64530: CALL_OW 272
64534: PUSH
64535: LD_VAR 0 8
64539: PPUSH
64540: LD_INT 1
64542: PPUSH
64543: LD_INT 4
64545: PPUSH
64546: CALL_OW 273
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_VAR 0 7
64559: PPUSH
64560: LD_INT 2
64562: PPUSH
64563: LD_INT 4
64565: PPUSH
64566: CALL_OW 272
64570: PUSH
64571: LD_VAR 0 8
64575: PPUSH
64576: LD_INT 2
64578: PPUSH
64579: LD_INT 4
64581: PPUSH
64582: CALL_OW 273
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_VAR 0 7
64595: PPUSH
64596: LD_INT 3
64598: PPUSH
64599: LD_INT 4
64601: PPUSH
64602: CALL_OW 272
64606: PUSH
64607: LD_VAR 0 8
64611: PPUSH
64612: LD_INT 3
64614: PPUSH
64615: LD_INT 4
64617: PPUSH
64618: CALL_OW 273
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_VAR 0 7
64631: PPUSH
64632: LD_INT 4
64634: PPUSH
64635: LD_INT 4
64637: PPUSH
64638: CALL_OW 272
64642: PUSH
64643: LD_VAR 0 8
64647: PPUSH
64648: LD_INT 4
64650: PPUSH
64651: LD_INT 4
64653: PPUSH
64654: CALL_OW 273
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 7
64667: PPUSH
64668: LD_INT 5
64670: PPUSH
64671: LD_INT 4
64673: PPUSH
64674: CALL_OW 272
64678: PUSH
64679: LD_VAR 0 8
64683: PPUSH
64684: LD_INT 5
64686: PPUSH
64687: LD_INT 4
64689: PPUSH
64690: CALL_OW 273
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// for i = tmp downto 1 do
64707: LD_ADDR_VAR 0 4
64711: PUSH
64712: DOUBLE
64713: LD_VAR 0 6
64717: INC
64718: ST_TO_ADDR
64719: LD_INT 1
64721: PUSH
64722: FOR_DOWNTO
64723: IFFALSE 64824
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64725: LD_VAR 0 6
64729: PUSH
64730: LD_VAR 0 4
64734: ARRAY
64735: PUSH
64736: LD_INT 1
64738: ARRAY
64739: PPUSH
64740: LD_VAR 0 6
64744: PUSH
64745: LD_VAR 0 4
64749: ARRAY
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: CALL_OW 488
64759: NOT
64760: PUSH
64761: LD_VAR 0 6
64765: PUSH
64766: LD_VAR 0 4
64770: ARRAY
64771: PUSH
64772: LD_INT 1
64774: ARRAY
64775: PPUSH
64776: LD_VAR 0 6
64780: PUSH
64781: LD_VAR 0 4
64785: ARRAY
64786: PUSH
64787: LD_INT 2
64789: ARRAY
64790: PPUSH
64791: CALL_OW 428
64795: PUSH
64796: LD_INT 0
64798: NONEQUAL
64799: OR
64800: IFFALSE 64822
// tmp := Delete ( tmp , i ) ;
64802: LD_ADDR_VAR 0 6
64806: PUSH
64807: LD_VAR 0 6
64811: PPUSH
64812: LD_VAR 0 4
64816: PPUSH
64817: CALL_OW 3
64821: ST_TO_ADDR
64822: GO 64722
64824: POP
64825: POP
// j := GetClosestHex ( unit , tmp ) ;
64826: LD_ADDR_VAR 0 5
64830: PUSH
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_VAR 0 6
64840: PPUSH
64841: CALL 64117 0 2
64845: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64846: LD_VAR 0 1
64850: PPUSH
64851: LD_VAR 0 5
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PPUSH
64860: LD_VAR 0 5
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: PPUSH
64869: CALL_OW 111
// end ;
64873: LD_VAR 0 3
64877: RET
// export function PrepareApemanSoldier ( ) ; begin
64878: LD_INT 0
64880: PPUSH
// uc_nation := 0 ;
64881: LD_ADDR_OWVAR 21
64885: PUSH
64886: LD_INT 0
64888: ST_TO_ADDR
// hc_sex := sex_male ;
64889: LD_ADDR_OWVAR 27
64893: PUSH
64894: LD_INT 1
64896: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64897: LD_ADDR_OWVAR 28
64901: PUSH
64902: LD_INT 15
64904: ST_TO_ADDR
// hc_gallery :=  ;
64905: LD_ADDR_OWVAR 33
64909: PUSH
64910: LD_STRING 
64912: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64913: LD_ADDR_OWVAR 31
64917: PUSH
64918: LD_INT 0
64920: PPUSH
64921: LD_INT 3
64923: PPUSH
64924: CALL_OW 12
64928: PUSH
64929: LD_INT 0
64931: PPUSH
64932: LD_INT 3
64934: PPUSH
64935: CALL_OW 12
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// end ;
64952: LD_VAR 0 1
64956: RET
// export function PrepareApemanEngineer ( ) ; begin
64957: LD_INT 0
64959: PPUSH
// uc_nation := 0 ;
64960: LD_ADDR_OWVAR 21
64964: PUSH
64965: LD_INT 0
64967: ST_TO_ADDR
// hc_sex := sex_male ;
64968: LD_ADDR_OWVAR 27
64972: PUSH
64973: LD_INT 1
64975: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64976: LD_ADDR_OWVAR 28
64980: PUSH
64981: LD_INT 16
64983: ST_TO_ADDR
// hc_gallery :=  ;
64984: LD_ADDR_OWVAR 33
64988: PUSH
64989: LD_STRING 
64991: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64992: LD_ADDR_OWVAR 31
64996: PUSH
64997: LD_INT 0
64999: PPUSH
65000: LD_INT 3
65002: PPUSH
65003: CALL_OW 12
65007: PUSH
65008: LD_INT 0
65010: PPUSH
65011: LD_INT 3
65013: PPUSH
65014: CALL_OW 12
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// end ;
65031: LD_VAR 0 1
65035: RET
// export function PrepareApeman ( agressivity ) ; begin
65036: LD_INT 0
65038: PPUSH
// uc_side := 0 ;
65039: LD_ADDR_OWVAR 20
65043: PUSH
65044: LD_INT 0
65046: ST_TO_ADDR
// uc_nation := 0 ;
65047: LD_ADDR_OWVAR 21
65051: PUSH
65052: LD_INT 0
65054: ST_TO_ADDR
// hc_sex := sex_male ;
65055: LD_ADDR_OWVAR 27
65059: PUSH
65060: LD_INT 1
65062: ST_TO_ADDR
// hc_class := class_apeman ;
65063: LD_ADDR_OWVAR 28
65067: PUSH
65068: LD_INT 12
65070: ST_TO_ADDR
// hc_gallery :=  ;
65071: LD_ADDR_OWVAR 33
65075: PUSH
65076: LD_STRING 
65078: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65079: LD_ADDR_OWVAR 35
65083: PUSH
65084: LD_VAR 0 1
65088: NEG
65089: PPUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: CALL_OW 12
65099: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65100: LD_ADDR_OWVAR 31
65104: PUSH
65105: LD_INT 0
65107: PPUSH
65108: LD_INT 3
65110: PPUSH
65111: CALL_OW 12
65115: PUSH
65116: LD_INT 0
65118: PPUSH
65119: LD_INT 3
65121: PPUSH
65122: CALL_OW 12
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: ST_TO_ADDR
// end ;
65139: LD_VAR 0 2
65143: RET
// export function PrepareTiger ( agressivity ) ; begin
65144: LD_INT 0
65146: PPUSH
// uc_side := 0 ;
65147: LD_ADDR_OWVAR 20
65151: PUSH
65152: LD_INT 0
65154: ST_TO_ADDR
// uc_nation := 0 ;
65155: LD_ADDR_OWVAR 21
65159: PUSH
65160: LD_INT 0
65162: ST_TO_ADDR
// hc_class := class_tiger ;
65163: LD_ADDR_OWVAR 28
65167: PUSH
65168: LD_INT 14
65170: ST_TO_ADDR
// hc_gallery :=  ;
65171: LD_ADDR_OWVAR 33
65175: PUSH
65176: LD_STRING 
65178: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65179: LD_ADDR_OWVAR 35
65183: PUSH
65184: LD_VAR 0 1
65188: NEG
65189: PPUSH
65190: LD_VAR 0 1
65194: PPUSH
65195: CALL_OW 12
65199: ST_TO_ADDR
// end ;
65200: LD_VAR 0 2
65204: RET
// export function PrepareEnchidna ( ) ; begin
65205: LD_INT 0
65207: PPUSH
// uc_side := 0 ;
65208: LD_ADDR_OWVAR 20
65212: PUSH
65213: LD_INT 0
65215: ST_TO_ADDR
// uc_nation := 0 ;
65216: LD_ADDR_OWVAR 21
65220: PUSH
65221: LD_INT 0
65223: ST_TO_ADDR
// hc_class := class_baggie ;
65224: LD_ADDR_OWVAR 28
65228: PUSH
65229: LD_INT 13
65231: ST_TO_ADDR
// hc_gallery :=  ;
65232: LD_ADDR_OWVAR 33
65236: PUSH
65237: LD_STRING 
65239: ST_TO_ADDR
// end ;
65240: LD_VAR 0 1
65244: RET
// export function PrepareFrog ( ) ; begin
65245: LD_INT 0
65247: PPUSH
// uc_side := 0 ;
65248: LD_ADDR_OWVAR 20
65252: PUSH
65253: LD_INT 0
65255: ST_TO_ADDR
// uc_nation := 0 ;
65256: LD_ADDR_OWVAR 21
65260: PUSH
65261: LD_INT 0
65263: ST_TO_ADDR
// hc_class := class_frog ;
65264: LD_ADDR_OWVAR 28
65268: PUSH
65269: LD_INT 19
65271: ST_TO_ADDR
// hc_gallery :=  ;
65272: LD_ADDR_OWVAR 33
65276: PUSH
65277: LD_STRING 
65279: ST_TO_ADDR
// end ;
65280: LD_VAR 0 1
65284: RET
// export function PrepareFish ( ) ; begin
65285: LD_INT 0
65287: PPUSH
// uc_side := 0 ;
65288: LD_ADDR_OWVAR 20
65292: PUSH
65293: LD_INT 0
65295: ST_TO_ADDR
// uc_nation := 0 ;
65296: LD_ADDR_OWVAR 21
65300: PUSH
65301: LD_INT 0
65303: ST_TO_ADDR
// hc_class := class_fish ;
65304: LD_ADDR_OWVAR 28
65308: PUSH
65309: LD_INT 20
65311: ST_TO_ADDR
// hc_gallery :=  ;
65312: LD_ADDR_OWVAR 33
65316: PUSH
65317: LD_STRING 
65319: ST_TO_ADDR
// end ;
65320: LD_VAR 0 1
65324: RET
// export function PrepareBird ( ) ; begin
65325: LD_INT 0
65327: PPUSH
// uc_side := 0 ;
65328: LD_ADDR_OWVAR 20
65332: PUSH
65333: LD_INT 0
65335: ST_TO_ADDR
// uc_nation := 0 ;
65336: LD_ADDR_OWVAR 21
65340: PUSH
65341: LD_INT 0
65343: ST_TO_ADDR
// hc_class := class_phororhacos ;
65344: LD_ADDR_OWVAR 28
65348: PUSH
65349: LD_INT 18
65351: ST_TO_ADDR
// hc_gallery :=  ;
65352: LD_ADDR_OWVAR 33
65356: PUSH
65357: LD_STRING 
65359: ST_TO_ADDR
// end ;
65360: LD_VAR 0 1
65364: RET
// export function PrepareHorse ( ) ; begin
65365: LD_INT 0
65367: PPUSH
// uc_side := 0 ;
65368: LD_ADDR_OWVAR 20
65372: PUSH
65373: LD_INT 0
65375: ST_TO_ADDR
// uc_nation := 0 ;
65376: LD_ADDR_OWVAR 21
65380: PUSH
65381: LD_INT 0
65383: ST_TO_ADDR
// hc_class := class_horse ;
65384: LD_ADDR_OWVAR 28
65388: PUSH
65389: LD_INT 21
65391: ST_TO_ADDR
// hc_gallery :=  ;
65392: LD_ADDR_OWVAR 33
65396: PUSH
65397: LD_STRING 
65399: ST_TO_ADDR
// end ;
65400: LD_VAR 0 1
65404: RET
// export function PrepareMastodont ( ) ; begin
65405: LD_INT 0
65407: PPUSH
// uc_side := 0 ;
65408: LD_ADDR_OWVAR 20
65412: PUSH
65413: LD_INT 0
65415: ST_TO_ADDR
// uc_nation := 0 ;
65416: LD_ADDR_OWVAR 21
65420: PUSH
65421: LD_INT 0
65423: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65424: LD_ADDR_OWVAR 37
65428: PUSH
65429: LD_INT 31
65431: ST_TO_ADDR
// vc_control := control_rider ;
65432: LD_ADDR_OWVAR 38
65436: PUSH
65437: LD_INT 4
65439: ST_TO_ADDR
// end ;
65440: LD_VAR 0 1
65444: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65445: LD_INT 0
65447: PPUSH
65448: PPUSH
65449: PPUSH
// uc_side = 0 ;
65450: LD_ADDR_OWVAR 20
65454: PUSH
65455: LD_INT 0
65457: ST_TO_ADDR
// uc_nation = 0 ;
65458: LD_ADDR_OWVAR 21
65462: PUSH
65463: LD_INT 0
65465: ST_TO_ADDR
// InitHc_All ( ) ;
65466: CALL_OW 584
// InitVc ;
65470: CALL_OW 20
// if mastodonts then
65474: LD_VAR 0 6
65478: IFFALSE 65545
// for i = 1 to mastodonts do
65480: LD_ADDR_VAR 0 11
65484: PUSH
65485: DOUBLE
65486: LD_INT 1
65488: DEC
65489: ST_TO_ADDR
65490: LD_VAR 0 6
65494: PUSH
65495: FOR_TO
65496: IFFALSE 65543
// begin vc_chassis := 31 ;
65498: LD_ADDR_OWVAR 37
65502: PUSH
65503: LD_INT 31
65505: ST_TO_ADDR
// vc_control := control_rider ;
65506: LD_ADDR_OWVAR 38
65510: PUSH
65511: LD_INT 4
65513: ST_TO_ADDR
// animal := CreateVehicle ;
65514: LD_ADDR_VAR 0 12
65518: PUSH
65519: CALL_OW 45
65523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65524: LD_VAR 0 12
65528: PPUSH
65529: LD_VAR 0 8
65533: PPUSH
65534: LD_INT 0
65536: PPUSH
65537: CALL 67673 0 3
// end ;
65541: GO 65495
65543: POP
65544: POP
// if horses then
65545: LD_VAR 0 5
65549: IFFALSE 65616
// for i = 1 to horses do
65551: LD_ADDR_VAR 0 11
65555: PUSH
65556: DOUBLE
65557: LD_INT 1
65559: DEC
65560: ST_TO_ADDR
65561: LD_VAR 0 5
65565: PUSH
65566: FOR_TO
65567: IFFALSE 65614
// begin hc_class := 21 ;
65569: LD_ADDR_OWVAR 28
65573: PUSH
65574: LD_INT 21
65576: ST_TO_ADDR
// hc_gallery :=  ;
65577: LD_ADDR_OWVAR 33
65581: PUSH
65582: LD_STRING 
65584: ST_TO_ADDR
// animal := CreateHuman ;
65585: LD_ADDR_VAR 0 12
65589: PUSH
65590: CALL_OW 44
65594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65595: LD_VAR 0 12
65599: PPUSH
65600: LD_VAR 0 8
65604: PPUSH
65605: LD_INT 0
65607: PPUSH
65608: CALL 67673 0 3
// end ;
65612: GO 65566
65614: POP
65615: POP
// if birds then
65616: LD_VAR 0 1
65620: IFFALSE 65687
// for i = 1 to birds do
65622: LD_ADDR_VAR 0 11
65626: PUSH
65627: DOUBLE
65628: LD_INT 1
65630: DEC
65631: ST_TO_ADDR
65632: LD_VAR 0 1
65636: PUSH
65637: FOR_TO
65638: IFFALSE 65685
// begin hc_class = 18 ;
65640: LD_ADDR_OWVAR 28
65644: PUSH
65645: LD_INT 18
65647: ST_TO_ADDR
// hc_gallery =  ;
65648: LD_ADDR_OWVAR 33
65652: PUSH
65653: LD_STRING 
65655: ST_TO_ADDR
// animal := CreateHuman ;
65656: LD_ADDR_VAR 0 12
65660: PUSH
65661: CALL_OW 44
65665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65666: LD_VAR 0 12
65670: PPUSH
65671: LD_VAR 0 8
65675: PPUSH
65676: LD_INT 0
65678: PPUSH
65679: CALL 67673 0 3
// end ;
65683: GO 65637
65685: POP
65686: POP
// if tigers then
65687: LD_VAR 0 2
65691: IFFALSE 65775
// for i = 1 to tigers do
65693: LD_ADDR_VAR 0 11
65697: PUSH
65698: DOUBLE
65699: LD_INT 1
65701: DEC
65702: ST_TO_ADDR
65703: LD_VAR 0 2
65707: PUSH
65708: FOR_TO
65709: IFFALSE 65773
// begin hc_class = class_tiger ;
65711: LD_ADDR_OWVAR 28
65715: PUSH
65716: LD_INT 14
65718: ST_TO_ADDR
// hc_gallery =  ;
65719: LD_ADDR_OWVAR 33
65723: PUSH
65724: LD_STRING 
65726: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65727: LD_ADDR_OWVAR 35
65731: PUSH
65732: LD_INT 7
65734: NEG
65735: PPUSH
65736: LD_INT 7
65738: PPUSH
65739: CALL_OW 12
65743: ST_TO_ADDR
// animal := CreateHuman ;
65744: LD_ADDR_VAR 0 12
65748: PUSH
65749: CALL_OW 44
65753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65754: LD_VAR 0 12
65758: PPUSH
65759: LD_VAR 0 8
65763: PPUSH
65764: LD_INT 0
65766: PPUSH
65767: CALL 67673 0 3
// end ;
65771: GO 65708
65773: POP
65774: POP
// if apemans then
65775: LD_VAR 0 3
65779: IFFALSE 65902
// for i = 1 to apemans do
65781: LD_ADDR_VAR 0 11
65785: PUSH
65786: DOUBLE
65787: LD_INT 1
65789: DEC
65790: ST_TO_ADDR
65791: LD_VAR 0 3
65795: PUSH
65796: FOR_TO
65797: IFFALSE 65900
// begin hc_class = class_apeman ;
65799: LD_ADDR_OWVAR 28
65803: PUSH
65804: LD_INT 12
65806: ST_TO_ADDR
// hc_gallery =  ;
65807: LD_ADDR_OWVAR 33
65811: PUSH
65812: LD_STRING 
65814: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65815: LD_ADDR_OWVAR 35
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PPUSH
65824: LD_INT 2
65826: PPUSH
65827: CALL_OW 12
65831: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65832: LD_ADDR_OWVAR 31
65836: PUSH
65837: LD_INT 1
65839: PPUSH
65840: LD_INT 3
65842: PPUSH
65843: CALL_OW 12
65847: PUSH
65848: LD_INT 1
65850: PPUSH
65851: LD_INT 3
65853: PPUSH
65854: CALL_OW 12
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: ST_TO_ADDR
// animal := CreateHuman ;
65871: LD_ADDR_VAR 0 12
65875: PUSH
65876: CALL_OW 44
65880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65881: LD_VAR 0 12
65885: PPUSH
65886: LD_VAR 0 8
65890: PPUSH
65891: LD_INT 0
65893: PPUSH
65894: CALL 67673 0 3
// end ;
65898: GO 65796
65900: POP
65901: POP
// if enchidnas then
65902: LD_VAR 0 4
65906: IFFALSE 65973
// for i = 1 to enchidnas do
65908: LD_ADDR_VAR 0 11
65912: PUSH
65913: DOUBLE
65914: LD_INT 1
65916: DEC
65917: ST_TO_ADDR
65918: LD_VAR 0 4
65922: PUSH
65923: FOR_TO
65924: IFFALSE 65971
// begin hc_class = 13 ;
65926: LD_ADDR_OWVAR 28
65930: PUSH
65931: LD_INT 13
65933: ST_TO_ADDR
// hc_gallery =  ;
65934: LD_ADDR_OWVAR 33
65938: PUSH
65939: LD_STRING 
65941: ST_TO_ADDR
// animal := CreateHuman ;
65942: LD_ADDR_VAR 0 12
65946: PUSH
65947: CALL_OW 44
65951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65952: LD_VAR 0 12
65956: PPUSH
65957: LD_VAR 0 8
65961: PPUSH
65962: LD_INT 0
65964: PPUSH
65965: CALL 67673 0 3
// end ;
65969: GO 65923
65971: POP
65972: POP
// if fishes then
65973: LD_VAR 0 7
65977: IFFALSE 66044
// for i = 1 to fishes do
65979: LD_ADDR_VAR 0 11
65983: PUSH
65984: DOUBLE
65985: LD_INT 1
65987: DEC
65988: ST_TO_ADDR
65989: LD_VAR 0 7
65993: PUSH
65994: FOR_TO
65995: IFFALSE 66042
// begin hc_class = 20 ;
65997: LD_ADDR_OWVAR 28
66001: PUSH
66002: LD_INT 20
66004: ST_TO_ADDR
// hc_gallery =  ;
66005: LD_ADDR_OWVAR 33
66009: PUSH
66010: LD_STRING 
66012: ST_TO_ADDR
// animal := CreateHuman ;
66013: LD_ADDR_VAR 0 12
66017: PUSH
66018: CALL_OW 44
66022: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66023: LD_VAR 0 12
66027: PPUSH
66028: LD_VAR 0 9
66032: PPUSH
66033: LD_INT 0
66035: PPUSH
66036: CALL 67673 0 3
// end ;
66040: GO 65994
66042: POP
66043: POP
// end ;
66044: LD_VAR 0 10
66048: RET
// export function WantHeal ( sci , unit ) ; begin
66049: LD_INT 0
66051: PPUSH
// if GetTaskList ( sci ) > 0 then
66052: LD_VAR 0 1
66056: PPUSH
66057: CALL_OW 437
66061: PUSH
66062: LD_INT 0
66064: GREATER
66065: IFFALSE 66135
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66067: LD_VAR 0 1
66071: PPUSH
66072: CALL_OW 437
66076: PUSH
66077: LD_INT 1
66079: ARRAY
66080: PUSH
66081: LD_INT 1
66083: ARRAY
66084: PUSH
66085: LD_STRING l
66087: EQUAL
66088: PUSH
66089: LD_VAR 0 1
66093: PPUSH
66094: CALL_OW 437
66098: PUSH
66099: LD_INT 1
66101: ARRAY
66102: PUSH
66103: LD_INT 4
66105: ARRAY
66106: PUSH
66107: LD_VAR 0 2
66111: EQUAL
66112: AND
66113: IFFALSE 66125
// result := true else
66115: LD_ADDR_VAR 0 3
66119: PUSH
66120: LD_INT 1
66122: ST_TO_ADDR
66123: GO 66133
// result := false ;
66125: LD_ADDR_VAR 0 3
66129: PUSH
66130: LD_INT 0
66132: ST_TO_ADDR
// end else
66133: GO 66143
// result := false ;
66135: LD_ADDR_VAR 0 3
66139: PUSH
66140: LD_INT 0
66142: ST_TO_ADDR
// end ;
66143: LD_VAR 0 3
66147: RET
// export function HealTarget ( sci ) ; begin
66148: LD_INT 0
66150: PPUSH
// if not sci then
66151: LD_VAR 0 1
66155: NOT
66156: IFFALSE 66160
// exit ;
66158: GO 66225
// result := 0 ;
66160: LD_ADDR_VAR 0 2
66164: PUSH
66165: LD_INT 0
66167: ST_TO_ADDR
// if GetTaskList ( sci ) then
66168: LD_VAR 0 1
66172: PPUSH
66173: CALL_OW 437
66177: IFFALSE 66225
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL_OW 437
66188: PUSH
66189: LD_INT 1
66191: ARRAY
66192: PUSH
66193: LD_INT 1
66195: ARRAY
66196: PUSH
66197: LD_STRING l
66199: EQUAL
66200: IFFALSE 66225
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66202: LD_ADDR_VAR 0 2
66206: PUSH
66207: LD_VAR 0 1
66211: PPUSH
66212: CALL_OW 437
66216: PUSH
66217: LD_INT 1
66219: ARRAY
66220: PUSH
66221: LD_INT 4
66223: ARRAY
66224: ST_TO_ADDR
// end ;
66225: LD_VAR 0 2
66229: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66230: LD_INT 0
66232: PPUSH
66233: PPUSH
66234: PPUSH
66235: PPUSH
// if not base_units then
66236: LD_VAR 0 1
66240: NOT
66241: IFFALSE 66245
// exit ;
66243: GO 66332
// result := false ;
66245: LD_ADDR_VAR 0 2
66249: PUSH
66250: LD_INT 0
66252: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66253: LD_ADDR_VAR 0 5
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: LD_INT 21
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PPUSH
66273: CALL_OW 72
66277: ST_TO_ADDR
// if not tmp then
66278: LD_VAR 0 5
66282: NOT
66283: IFFALSE 66287
// exit ;
66285: GO 66332
// for i in tmp do
66287: LD_ADDR_VAR 0 3
66291: PUSH
66292: LD_VAR 0 5
66296: PUSH
66297: FOR_IN
66298: IFFALSE 66330
// begin result := EnemyInRange ( i , 22 ) ;
66300: LD_ADDR_VAR 0 2
66304: PUSH
66305: LD_VAR 0 3
66309: PPUSH
66310: LD_INT 22
66312: PPUSH
66313: CALL 63919 0 2
66317: ST_TO_ADDR
// if result then
66318: LD_VAR 0 2
66322: IFFALSE 66328
// exit ;
66324: POP
66325: POP
66326: GO 66332
// end ;
66328: GO 66297
66330: POP
66331: POP
// end ;
66332: LD_VAR 0 2
66336: RET
// export function FilterByTag ( units , tag ) ; begin
66337: LD_INT 0
66339: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66340: LD_ADDR_VAR 0 3
66344: PUSH
66345: LD_VAR 0 1
66349: PPUSH
66350: LD_INT 120
66352: PUSH
66353: LD_VAR 0 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PPUSH
66362: CALL_OW 72
66366: ST_TO_ADDR
// end ;
66367: LD_VAR 0 3
66371: RET
// export function IsDriver ( un ) ; begin
66372: LD_INT 0
66374: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66375: LD_ADDR_VAR 0 2
66379: PUSH
66380: LD_VAR 0 1
66384: PUSH
66385: LD_INT 55
66387: PUSH
66388: EMPTY
66389: LIST
66390: PPUSH
66391: CALL_OW 69
66395: IN
66396: ST_TO_ADDR
// end ;
66397: LD_VAR 0 2
66401: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66402: LD_INT 0
66404: PPUSH
66405: PPUSH
// list := [ ] ;
66406: LD_ADDR_VAR 0 5
66410: PUSH
66411: EMPTY
66412: ST_TO_ADDR
// case d of 0 :
66413: LD_VAR 0 3
66417: PUSH
66418: LD_INT 0
66420: DOUBLE
66421: EQUAL
66422: IFTRUE 66426
66424: GO 66559
66426: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66427: LD_ADDR_VAR 0 5
66431: PUSH
66432: LD_VAR 0 1
66436: PUSH
66437: LD_INT 4
66439: MINUS
66440: PUSH
66441: LD_VAR 0 2
66445: PUSH
66446: LD_INT 4
66448: MINUS
66449: PUSH
66450: LD_INT 2
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: LIST
66457: PUSH
66458: LD_VAR 0 1
66462: PUSH
66463: LD_INT 3
66465: MINUS
66466: PUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 4
66487: PLUS
66488: PUSH
66489: LD_VAR 0 2
66493: PUSH
66494: LD_INT 4
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: PUSH
66502: LD_VAR 0 1
66506: PUSH
66507: LD_INT 3
66509: PLUS
66510: PUSH
66511: LD_VAR 0 2
66515: PUSH
66516: LD_INT 3
66518: PLUS
66519: PUSH
66520: LD_INT 5
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: LD_VAR 0 2
66537: PUSH
66538: LD_INT 4
66540: PLUS
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: ST_TO_ADDR
// end ; 1 :
66557: GO 67257
66559: LD_INT 1
66561: DOUBLE
66562: EQUAL
66563: IFTRUE 66567
66565: GO 66700
66567: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66568: LD_ADDR_VAR 0 5
66572: PUSH
66573: LD_VAR 0 1
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_INT 4
66585: MINUS
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: PUSH
66595: LD_VAR 0 1
66599: PUSH
66600: LD_INT 3
66602: MINUS
66603: PUSH
66604: LD_VAR 0 2
66608: PUSH
66609: LD_INT 3
66611: MINUS
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: LD_INT 4
66628: MINUS
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PUSH
66643: LD_VAR 0 1
66647: PUSH
66648: LD_VAR 0 2
66652: PUSH
66653: LD_INT 3
66655: PLUS
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: PUSH
66665: LD_VAR 0 1
66669: PUSH
66670: LD_INT 4
66672: PLUS
66673: PUSH
66674: LD_VAR 0 2
66678: PUSH
66679: LD_INT 4
66681: PLUS
66682: PUSH
66683: LD_INT 5
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: ST_TO_ADDR
// end ; 2 :
66698: GO 67257
66700: LD_INT 2
66702: DOUBLE
66703: EQUAL
66704: IFTRUE 66708
66706: GO 66837
66708: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66709: LD_ADDR_VAR 0 5
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: LD_VAR 0 2
66723: PUSH
66724: LD_INT 3
66726: MINUS
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_INT 4
66743: PLUS
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_VAR 0 1
66762: PUSH
66763: LD_VAR 0 2
66767: PUSH
66768: LD_INT 4
66770: PLUS
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: LIST
66779: PUSH
66780: LD_VAR 0 1
66784: PUSH
66785: LD_INT 3
66787: MINUS
66788: PUSH
66789: LD_VAR 0 2
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: PUSH
66802: LD_VAR 0 1
66806: PUSH
66807: LD_INT 4
66809: MINUS
66810: PUSH
66811: LD_VAR 0 2
66815: PUSH
66816: LD_INT 4
66818: MINUS
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// end ; 3 :
66835: GO 67257
66837: LD_INT 3
66839: DOUBLE
66840: EQUAL
66841: IFTRUE 66845
66843: GO 66978
66845: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66846: LD_ADDR_VAR 0 5
66850: PUSH
66851: LD_VAR 0 1
66855: PUSH
66856: LD_INT 3
66858: PLUS
66859: PUSH
66860: LD_VAR 0 2
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: PUSH
66873: LD_VAR 0 1
66877: PUSH
66878: LD_INT 4
66880: PLUS
66881: PUSH
66882: LD_VAR 0 2
66886: PUSH
66887: LD_INT 4
66889: PLUS
66890: PUSH
66891: LD_INT 5
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: PUSH
66899: LD_VAR 0 1
66903: PUSH
66904: LD_INT 4
66906: MINUS
66907: PUSH
66908: LD_VAR 0 2
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: PUSH
66921: LD_VAR 0 1
66925: PUSH
66926: LD_VAR 0 2
66930: PUSH
66931: LD_INT 4
66933: MINUS
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: LIST
66942: PUSH
66943: LD_VAR 0 1
66947: PUSH
66948: LD_INT 3
66950: MINUS
66951: PUSH
66952: LD_VAR 0 2
66956: PUSH
66957: LD_INT 3
66959: MINUS
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// end ; 4 :
66976: GO 67257
66978: LD_INT 4
66980: DOUBLE
66981: EQUAL
66982: IFTRUE 66986
66984: GO 67119
66986: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66987: LD_ADDR_VAR 0 5
66991: PUSH
66992: LD_VAR 0 1
66996: PUSH
66997: LD_VAR 0 2
67001: PUSH
67002: LD_INT 4
67004: PLUS
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: PUSH
67014: LD_VAR 0 1
67018: PUSH
67019: LD_INT 3
67021: PLUS
67022: PUSH
67023: LD_VAR 0 2
67027: PUSH
67028: LD_INT 3
67030: PLUS
67031: PUSH
67032: LD_INT 5
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_INT 4
67047: PLUS
67048: PUSH
67049: LD_VAR 0 2
67053: PUSH
67054: LD_INT 4
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_VAR 0 2
67071: PUSH
67072: LD_INT 3
67074: MINUS
67075: PUSH
67076: LD_INT 3
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: PUSH
67084: LD_VAR 0 1
67088: PUSH
67089: LD_INT 4
67091: MINUS
67092: PUSH
67093: LD_VAR 0 2
67097: PUSH
67098: LD_INT 4
67100: MINUS
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: ST_TO_ADDR
// end ; 5 :
67117: GO 67257
67119: LD_INT 5
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67127
67125: GO 67256
67127: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: LD_VAR 0 1
67137: PUSH
67138: LD_INT 4
67140: MINUS
67141: PUSH
67142: LD_VAR 0 2
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: LIST
67154: PUSH
67155: LD_VAR 0 1
67159: PUSH
67160: LD_VAR 0 2
67164: PUSH
67165: LD_INT 4
67167: MINUS
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: PUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_INT 4
67184: PLUS
67185: PUSH
67186: LD_VAR 0 2
67190: PUSH
67191: LD_INT 4
67193: PLUS
67194: PUSH
67195: LD_INT 5
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: PUSH
67203: LD_VAR 0 1
67207: PUSH
67208: LD_INT 3
67210: PLUS
67211: PUSH
67212: LD_VAR 0 2
67216: PUSH
67217: LD_INT 4
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: PUSH
67225: LD_VAR 0 1
67229: PUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_INT 3
67237: PLUS
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: ST_TO_ADDR
// end ; end ;
67254: GO 67257
67256: POP
// result := list ;
67257: LD_ADDR_VAR 0 4
67261: PUSH
67262: LD_VAR 0 5
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 4
67271: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67277: LD_VAR 0 1
67281: NOT
67282: PUSH
67283: LD_VAR 0 2
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: LD_INT 3
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: IN
67306: NOT
67307: OR
67308: IFFALSE 67312
// exit ;
67310: GO 67395
// tmp := [ ] ;
67312: LD_ADDR_VAR 0 5
67316: PUSH
67317: EMPTY
67318: ST_TO_ADDR
// for i in units do
67319: LD_ADDR_VAR 0 4
67323: PUSH
67324: LD_VAR 0 1
67328: PUSH
67329: FOR_IN
67330: IFFALSE 67364
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67332: LD_ADDR_VAR 0 5
67336: PUSH
67337: LD_VAR 0 5
67341: PPUSH
67342: LD_VAR 0 4
67346: PPUSH
67347: LD_VAR 0 2
67351: PPUSH
67352: CALL_OW 259
67356: PPUSH
67357: CALL 68756 0 2
67361: ST_TO_ADDR
67362: GO 67329
67364: POP
67365: POP
// if not tmp then
67366: LD_VAR 0 5
67370: NOT
67371: IFFALSE 67375
// exit ;
67373: GO 67395
// result := SortListByListDesc ( units , tmp ) ;
67375: LD_ADDR_VAR 0 3
67379: PUSH
67380: LD_VAR 0 1
67384: PPUSH
67385: LD_VAR 0 5
67389: PPUSH
67390: CALL_OW 77
67394: ST_TO_ADDR
// end ;
67395: LD_VAR 0 3
67399: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67400: LD_INT 0
67402: PPUSH
67403: PPUSH
67404: PPUSH
// result := false ;
67405: LD_ADDR_VAR 0 3
67409: PUSH
67410: LD_INT 0
67412: ST_TO_ADDR
// if not building then
67413: LD_VAR 0 2
67417: NOT
67418: IFFALSE 67422
// exit ;
67420: GO 67560
// x := GetX ( building ) ;
67422: LD_ADDR_VAR 0 4
67426: PUSH
67427: LD_VAR 0 2
67431: PPUSH
67432: CALL_OW 250
67436: ST_TO_ADDR
// y := GetY ( building ) ;
67437: LD_ADDR_VAR 0 5
67441: PUSH
67442: LD_VAR 0 2
67446: PPUSH
67447: CALL_OW 251
67451: ST_TO_ADDR
// if not x or not y then
67452: LD_VAR 0 4
67456: NOT
67457: PUSH
67458: LD_VAR 0 5
67462: NOT
67463: OR
67464: IFFALSE 67468
// exit ;
67466: GO 67560
// if GetTaskList ( unit ) then
67468: LD_VAR 0 1
67472: PPUSH
67473: CALL_OW 437
67477: IFFALSE 67560
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67479: LD_STRING e
67481: PUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 437
67491: PUSH
67492: LD_INT 1
67494: ARRAY
67495: PUSH
67496: LD_INT 1
67498: ARRAY
67499: EQUAL
67500: PUSH
67501: LD_VAR 0 4
67505: PUSH
67506: LD_VAR 0 1
67510: PPUSH
67511: CALL_OW 437
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: EQUAL
67524: AND
67525: PUSH
67526: LD_VAR 0 5
67530: PUSH
67531: LD_VAR 0 1
67535: PPUSH
67536: CALL_OW 437
67540: PUSH
67541: LD_INT 1
67543: ARRAY
67544: PUSH
67545: LD_INT 3
67547: ARRAY
67548: EQUAL
67549: AND
67550: IFFALSE 67560
// result := true end ;
67552: LD_ADDR_VAR 0 3
67556: PUSH
67557: LD_INT 1
67559: ST_TO_ADDR
// end ;
67560: LD_VAR 0 3
67564: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67565: LD_INT 0
67567: PPUSH
// result := false ;
67568: LD_ADDR_VAR 0 4
67572: PUSH
67573: LD_INT 0
67575: ST_TO_ADDR
// if GetTaskList ( unit ) then
67576: LD_VAR 0 1
67580: PPUSH
67581: CALL_OW 437
67585: IFFALSE 67668
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67587: LD_STRING M
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 437
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: PUSH
67604: LD_INT 1
67606: ARRAY
67607: EQUAL
67608: PUSH
67609: LD_VAR 0 2
67613: PUSH
67614: LD_VAR 0 1
67618: PPUSH
67619: CALL_OW 437
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: PUSH
67628: LD_INT 2
67630: ARRAY
67631: EQUAL
67632: AND
67633: PUSH
67634: LD_VAR 0 3
67638: PUSH
67639: LD_VAR 0 1
67643: PPUSH
67644: CALL_OW 437
67648: PUSH
67649: LD_INT 1
67651: ARRAY
67652: PUSH
67653: LD_INT 3
67655: ARRAY
67656: EQUAL
67657: AND
67658: IFFALSE 67668
// result := true ;
67660: LD_ADDR_VAR 0 4
67664: PUSH
67665: LD_INT 1
67667: ST_TO_ADDR
// end ; end ;
67668: LD_VAR 0 4
67672: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67673: LD_INT 0
67675: PPUSH
67676: PPUSH
67677: PPUSH
67678: PPUSH
// if not unit or not area then
67679: LD_VAR 0 1
67683: NOT
67684: PUSH
67685: LD_VAR 0 2
67689: NOT
67690: OR
67691: IFFALSE 67695
// exit ;
67693: GO 67859
// tmp := AreaToList ( area , i ) ;
67695: LD_ADDR_VAR 0 6
67699: PUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: LD_VAR 0 5
67709: PPUSH
67710: CALL_OW 517
67714: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67715: LD_ADDR_VAR 0 5
67719: PUSH
67720: DOUBLE
67721: LD_INT 1
67723: DEC
67724: ST_TO_ADDR
67725: LD_VAR 0 6
67729: PUSH
67730: LD_INT 1
67732: ARRAY
67733: PUSH
67734: FOR_TO
67735: IFFALSE 67857
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67737: LD_ADDR_VAR 0 7
67741: PUSH
67742: LD_VAR 0 6
67746: PUSH
67747: LD_INT 1
67749: ARRAY
67750: PUSH
67751: LD_VAR 0 5
67755: ARRAY
67756: PUSH
67757: LD_VAR 0 6
67761: PUSH
67762: LD_INT 2
67764: ARRAY
67765: PUSH
67766: LD_VAR 0 5
67770: ARRAY
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67776: LD_VAR 0 7
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: PPUSH
67785: LD_VAR 0 7
67789: PUSH
67790: LD_INT 2
67792: ARRAY
67793: PPUSH
67794: CALL_OW 428
67798: PUSH
67799: LD_INT 0
67801: EQUAL
67802: IFFALSE 67855
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67804: LD_VAR 0 1
67808: PPUSH
67809: LD_VAR 0 7
67813: PUSH
67814: LD_INT 1
67816: ARRAY
67817: PPUSH
67818: LD_VAR 0 7
67822: PUSH
67823: LD_INT 2
67825: ARRAY
67826: PPUSH
67827: LD_VAR 0 3
67831: PPUSH
67832: CALL_OW 48
// result := IsPlaced ( unit ) ;
67836: LD_ADDR_VAR 0 4
67840: PUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 305
67850: ST_TO_ADDR
// exit ;
67851: POP
67852: POP
67853: GO 67859
// end ; end ;
67855: GO 67734
67857: POP
67858: POP
// end ;
67859: LD_VAR 0 4
67863: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67864: LD_INT 0
67866: PPUSH
67867: PPUSH
67868: PPUSH
// if not side or side > 8 then
67869: LD_VAR 0 1
67873: NOT
67874: PUSH
67875: LD_VAR 0 1
67879: PUSH
67880: LD_INT 8
67882: GREATER
67883: OR
67884: IFFALSE 67888
// exit ;
67886: GO 68075
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67888: LD_ADDR_VAR 0 4
67892: PUSH
67893: LD_INT 22
67895: PUSH
67896: LD_VAR 0 1
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 21
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PPUSH
67919: CALL_OW 69
67923: ST_TO_ADDR
// if not tmp then
67924: LD_VAR 0 4
67928: NOT
67929: IFFALSE 67933
// exit ;
67931: GO 68075
// enable_addtolog := true ;
67933: LD_ADDR_OWVAR 81
67937: PUSH
67938: LD_INT 1
67940: ST_TO_ADDR
// AddToLog ( [ ) ;
67941: LD_STRING [
67943: PPUSH
67944: CALL_OW 561
// for i in tmp do
67948: LD_ADDR_VAR 0 3
67952: PUSH
67953: LD_VAR 0 4
67957: PUSH
67958: FOR_IN
67959: IFFALSE 68066
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67961: LD_STRING [
67963: PUSH
67964: LD_VAR 0 3
67968: PPUSH
67969: CALL_OW 266
67973: STR
67974: PUSH
67975: LD_STRING , 
67977: STR
67978: PUSH
67979: LD_VAR 0 3
67983: PPUSH
67984: CALL_OW 250
67988: STR
67989: PUSH
67990: LD_STRING , 
67992: STR
67993: PUSH
67994: LD_VAR 0 3
67998: PPUSH
67999: CALL_OW 251
68003: STR
68004: PUSH
68005: LD_STRING , 
68007: STR
68008: PUSH
68009: LD_VAR 0 3
68013: PPUSH
68014: CALL_OW 254
68018: STR
68019: PUSH
68020: LD_STRING , 
68022: STR
68023: PUSH
68024: LD_VAR 0 3
68028: PPUSH
68029: LD_INT 1
68031: PPUSH
68032: CALL_OW 268
68036: STR
68037: PUSH
68038: LD_STRING , 
68040: STR
68041: PUSH
68042: LD_VAR 0 3
68046: PPUSH
68047: LD_INT 2
68049: PPUSH
68050: CALL_OW 268
68054: STR
68055: PUSH
68056: LD_STRING ],
68058: STR
68059: PPUSH
68060: CALL_OW 561
// end ;
68064: GO 67958
68066: POP
68067: POP
// AddToLog ( ]; ) ;
68068: LD_STRING ];
68070: PPUSH
68071: CALL_OW 561
// end ;
68075: LD_VAR 0 2
68079: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68080: LD_INT 0
68082: PPUSH
68083: PPUSH
68084: PPUSH
68085: PPUSH
68086: PPUSH
// if not area or not rate or not max then
68087: LD_VAR 0 1
68091: NOT
68092: PUSH
68093: LD_VAR 0 2
68097: NOT
68098: OR
68099: PUSH
68100: LD_VAR 0 4
68104: NOT
68105: OR
68106: IFFALSE 68110
// exit ;
68108: GO 68299
// while 1 do
68110: LD_INT 1
68112: IFFALSE 68299
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68114: LD_ADDR_VAR 0 9
68118: PUSH
68119: LD_VAR 0 1
68123: PPUSH
68124: LD_INT 1
68126: PPUSH
68127: CALL_OW 287
68131: PUSH
68132: LD_INT 10
68134: MUL
68135: ST_TO_ADDR
// r := rate / 10 ;
68136: LD_ADDR_VAR 0 7
68140: PUSH
68141: LD_VAR 0 2
68145: PUSH
68146: LD_INT 10
68148: DIVREAL
68149: ST_TO_ADDR
// time := 1 1$00 ;
68150: LD_ADDR_VAR 0 8
68154: PUSH
68155: LD_INT 2100
68157: ST_TO_ADDR
// if amount < min then
68158: LD_VAR 0 9
68162: PUSH
68163: LD_VAR 0 3
68167: LESS
68168: IFFALSE 68186
// r := r * 2 else
68170: LD_ADDR_VAR 0 7
68174: PUSH
68175: LD_VAR 0 7
68179: PUSH
68180: LD_INT 2
68182: MUL
68183: ST_TO_ADDR
68184: GO 68212
// if amount > max then
68186: LD_VAR 0 9
68190: PUSH
68191: LD_VAR 0 4
68195: GREATER
68196: IFFALSE 68212
// r := r / 2 ;
68198: LD_ADDR_VAR 0 7
68202: PUSH
68203: LD_VAR 0 7
68207: PUSH
68208: LD_INT 2
68210: DIVREAL
68211: ST_TO_ADDR
// time := time / r ;
68212: LD_ADDR_VAR 0 8
68216: PUSH
68217: LD_VAR 0 8
68221: PUSH
68222: LD_VAR 0 7
68226: DIVREAL
68227: ST_TO_ADDR
// if time < 0 then
68228: LD_VAR 0 8
68232: PUSH
68233: LD_INT 0
68235: LESS
68236: IFFALSE 68253
// time := time * - 1 ;
68238: LD_ADDR_VAR 0 8
68242: PUSH
68243: LD_VAR 0 8
68247: PUSH
68248: LD_INT 1
68250: NEG
68251: MUL
68252: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68253: LD_VAR 0 8
68257: PUSH
68258: LD_INT 35
68260: PPUSH
68261: LD_INT 875
68263: PPUSH
68264: CALL_OW 12
68268: PLUS
68269: PPUSH
68270: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68274: LD_INT 1
68276: PPUSH
68277: LD_INT 5
68279: PPUSH
68280: CALL_OW 12
68284: PPUSH
68285: LD_VAR 0 1
68289: PPUSH
68290: LD_INT 1
68292: PPUSH
68293: CALL_OW 55
// end ;
68297: GO 68110
// end ;
68299: LD_VAR 0 5
68303: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68304: LD_INT 0
68306: PPUSH
68307: PPUSH
68308: PPUSH
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
// if not turrets or not factories then
68314: LD_VAR 0 1
68318: NOT
68319: PUSH
68320: LD_VAR 0 2
68324: NOT
68325: OR
68326: IFFALSE 68330
// exit ;
68328: GO 68637
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68330: LD_ADDR_VAR 0 10
68334: PUSH
68335: LD_INT 5
68337: PUSH
68338: LD_INT 6
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: LD_INT 4
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: LD_INT 5
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 24
68372: PUSH
68373: LD_INT 25
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 23
68382: PUSH
68383: LD_INT 27
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 42
68396: PUSH
68397: LD_INT 43
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 44
68406: PUSH
68407: LD_INT 46
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 45
68416: PUSH
68417: LD_INT 47
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: ST_TO_ADDR
// result := [ ] ;
68434: LD_ADDR_VAR 0 3
68438: PUSH
68439: EMPTY
68440: ST_TO_ADDR
// for i in turrets do
68441: LD_ADDR_VAR 0 4
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: FOR_IN
68452: IFFALSE 68635
// begin nat := GetNation ( i ) ;
68454: LD_ADDR_VAR 0 7
68458: PUSH
68459: LD_VAR 0 4
68463: PPUSH
68464: CALL_OW 248
68468: ST_TO_ADDR
// weapon := 0 ;
68469: LD_ADDR_VAR 0 8
68473: PUSH
68474: LD_INT 0
68476: ST_TO_ADDR
// if not nat then
68477: LD_VAR 0 7
68481: NOT
68482: IFFALSE 68486
// continue ;
68484: GO 68451
// for j in list [ nat ] do
68486: LD_ADDR_VAR 0 5
68490: PUSH
68491: LD_VAR 0 10
68495: PUSH
68496: LD_VAR 0 7
68500: ARRAY
68501: PUSH
68502: FOR_IN
68503: IFFALSE 68544
// if GetBWeapon ( i ) = j [ 1 ] then
68505: LD_VAR 0 4
68509: PPUSH
68510: CALL_OW 269
68514: PUSH
68515: LD_VAR 0 5
68519: PUSH
68520: LD_INT 1
68522: ARRAY
68523: EQUAL
68524: IFFALSE 68542
// begin weapon := j [ 2 ] ;
68526: LD_ADDR_VAR 0 8
68530: PUSH
68531: LD_VAR 0 5
68535: PUSH
68536: LD_INT 2
68538: ARRAY
68539: ST_TO_ADDR
// break ;
68540: GO 68544
// end ;
68542: GO 68502
68544: POP
68545: POP
// if not weapon then
68546: LD_VAR 0 8
68550: NOT
68551: IFFALSE 68555
// continue ;
68553: GO 68451
// for k in factories do
68555: LD_ADDR_VAR 0 6
68559: PUSH
68560: LD_VAR 0 2
68564: PUSH
68565: FOR_IN
68566: IFFALSE 68631
// begin weapons := AvailableWeaponList ( k ) ;
68568: LD_ADDR_VAR 0 9
68572: PUSH
68573: LD_VAR 0 6
68577: PPUSH
68578: CALL_OW 478
68582: ST_TO_ADDR
// if not weapons then
68583: LD_VAR 0 9
68587: NOT
68588: IFFALSE 68592
// continue ;
68590: GO 68565
// if weapon in weapons then
68592: LD_VAR 0 8
68596: PUSH
68597: LD_VAR 0 9
68601: IN
68602: IFFALSE 68629
// begin result := [ i , weapon ] ;
68604: LD_ADDR_VAR 0 3
68608: PUSH
68609: LD_VAR 0 4
68613: PUSH
68614: LD_VAR 0 8
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: ST_TO_ADDR
// exit ;
68623: POP
68624: POP
68625: POP
68626: POP
68627: GO 68637
// end ; end ;
68629: GO 68565
68631: POP
68632: POP
// end ;
68633: GO 68451
68635: POP
68636: POP
// end ;
68637: LD_VAR 0 3
68641: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68642: LD_INT 0
68644: PPUSH
// if not side or side > 8 then
68645: LD_VAR 0 3
68649: NOT
68650: PUSH
68651: LD_VAR 0 3
68655: PUSH
68656: LD_INT 8
68658: GREATER
68659: OR
68660: IFFALSE 68664
// exit ;
68662: GO 68723
// if not range then
68664: LD_VAR 0 4
68668: NOT
68669: IFFALSE 68680
// range := - 12 ;
68671: LD_ADDR_VAR 0 4
68675: PUSH
68676: LD_INT 12
68678: NEG
68679: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68680: LD_VAR 0 1
68684: PPUSH
68685: LD_VAR 0 2
68689: PPUSH
68690: LD_VAR 0 3
68694: PPUSH
68695: LD_VAR 0 4
68699: PPUSH
68700: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_VAR 0 2
68713: PPUSH
68714: LD_VAR 0 3
68718: PPUSH
68719: CALL_OW 331
// end ;
68723: LD_VAR 0 5
68727: RET
// export function Video ( mode ) ; begin
68728: LD_INT 0
68730: PPUSH
// ingame_video = mode ;
68731: LD_ADDR_OWVAR 52
68735: PUSH
68736: LD_VAR 0 1
68740: ST_TO_ADDR
// interface_hidden = mode ;
68741: LD_ADDR_OWVAR 54
68745: PUSH
68746: LD_VAR 0 1
68750: ST_TO_ADDR
// end ;
68751: LD_VAR 0 2
68755: RET
// export function Join ( array , element ) ; begin
68756: LD_INT 0
68758: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68759: LD_ADDR_VAR 0 3
68763: PUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: LD_VAR 0 1
68773: PUSH
68774: LD_INT 1
68776: PLUS
68777: PPUSH
68778: LD_VAR 0 2
68782: PPUSH
68783: CALL_OW 1
68787: ST_TO_ADDR
// end ;
68788: LD_VAR 0 3
68792: RET
// export function JoinUnion ( array , element ) ; begin
68793: LD_INT 0
68795: PPUSH
// result := array union element ;
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_VAR 0 1
68805: PUSH
68806: LD_VAR 0 2
68810: UNION
68811: ST_TO_ADDR
// end ;
68812: LD_VAR 0 3
68816: RET
// export function GetBehemoths ( side ) ; begin
68817: LD_INT 0
68819: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68820: LD_ADDR_VAR 0 2
68824: PUSH
68825: LD_INT 22
68827: PUSH
68828: LD_VAR 0 1
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 31
68839: PUSH
68840: LD_INT 25
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PPUSH
68851: CALL_OW 69
68855: ST_TO_ADDR
// end ;
68856: LD_VAR 0 2
68860: RET
// export function Shuffle ( array ) ; var i , index ; begin
68861: LD_INT 0
68863: PPUSH
68864: PPUSH
68865: PPUSH
// result := [ ] ;
68866: LD_ADDR_VAR 0 2
68870: PUSH
68871: EMPTY
68872: ST_TO_ADDR
// if not array then
68873: LD_VAR 0 1
68877: NOT
68878: IFFALSE 68882
// exit ;
68880: GO 68981
// Randomize ;
68882: CALL_OW 10
// for i = array downto 1 do
68886: LD_ADDR_VAR 0 3
68890: PUSH
68891: DOUBLE
68892: LD_VAR 0 1
68896: INC
68897: ST_TO_ADDR
68898: LD_INT 1
68900: PUSH
68901: FOR_DOWNTO
68902: IFFALSE 68979
// begin index := rand ( 1 , array ) ;
68904: LD_ADDR_VAR 0 4
68908: PUSH
68909: LD_INT 1
68911: PPUSH
68912: LD_VAR 0 1
68916: PPUSH
68917: CALL_OW 12
68921: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68922: LD_ADDR_VAR 0 2
68926: PUSH
68927: LD_VAR 0 2
68931: PPUSH
68932: LD_VAR 0 2
68936: PUSH
68937: LD_INT 1
68939: PLUS
68940: PPUSH
68941: LD_VAR 0 1
68945: PUSH
68946: LD_VAR 0 4
68950: ARRAY
68951: PPUSH
68952: CALL_OW 2
68956: ST_TO_ADDR
// array := Delete ( array , index ) ;
68957: LD_ADDR_VAR 0 1
68961: PUSH
68962: LD_VAR 0 1
68966: PPUSH
68967: LD_VAR 0 4
68971: PPUSH
68972: CALL_OW 3
68976: ST_TO_ADDR
// end ;
68977: GO 68901
68979: POP
68980: POP
// end ;
68981: LD_VAR 0 2
68985: RET
// export function GetBaseMaterials ( base ) ; begin
68986: LD_INT 0
68988: PPUSH
// result := [ 0 , 0 , 0 ] ;
68989: LD_ADDR_VAR 0 2
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// if not base then
69008: LD_VAR 0 1
69012: NOT
69013: IFFALSE 69017
// exit ;
69015: GO 69066
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69017: LD_ADDR_VAR 0 2
69021: PUSH
69022: LD_VAR 0 1
69026: PPUSH
69027: LD_INT 1
69029: PPUSH
69030: CALL_OW 275
69034: PUSH
69035: LD_VAR 0 1
69039: PPUSH
69040: LD_INT 2
69042: PPUSH
69043: CALL_OW 275
69047: PUSH
69048: LD_VAR 0 1
69052: PPUSH
69053: LD_INT 3
69055: PPUSH
69056: CALL_OW 275
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: LIST
69065: ST_TO_ADDR
// end ;
69066: LD_VAR 0 2
69070: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69071: LD_INT 0
69073: PPUSH
69074: PPUSH
// result := array ;
69075: LD_ADDR_VAR 0 3
69079: PUSH
69080: LD_VAR 0 1
69084: ST_TO_ADDR
// if size >= result then
69085: LD_VAR 0 2
69089: PUSH
69090: LD_VAR 0 3
69094: GREATEREQUAL
69095: IFFALSE 69099
// exit ;
69097: GO 69149
// if size then
69099: LD_VAR 0 2
69103: IFFALSE 69149
// for i := array downto size do
69105: LD_ADDR_VAR 0 4
69109: PUSH
69110: DOUBLE
69111: LD_VAR 0 1
69115: INC
69116: ST_TO_ADDR
69117: LD_VAR 0 2
69121: PUSH
69122: FOR_DOWNTO
69123: IFFALSE 69147
// result := Delete ( result , result ) ;
69125: LD_ADDR_VAR 0 3
69129: PUSH
69130: LD_VAR 0 3
69134: PPUSH
69135: LD_VAR 0 3
69139: PPUSH
69140: CALL_OW 3
69144: ST_TO_ADDR
69145: GO 69122
69147: POP
69148: POP
// end ;
69149: LD_VAR 0 3
69153: RET
// export function ComExit ( unit ) ; var tmp ; begin
69154: LD_INT 0
69156: PPUSH
69157: PPUSH
// if not IsInUnit ( unit ) then
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 310
69167: NOT
69168: IFFALSE 69172
// exit ;
69170: GO 69232
// tmp := IsInUnit ( unit ) ;
69172: LD_ADDR_VAR 0 3
69176: PUSH
69177: LD_VAR 0 1
69181: PPUSH
69182: CALL_OW 310
69186: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69187: LD_VAR 0 3
69191: PPUSH
69192: CALL_OW 247
69196: PUSH
69197: LD_INT 2
69199: EQUAL
69200: IFFALSE 69213
// ComExitVehicle ( unit ) else
69202: LD_VAR 0 1
69206: PPUSH
69207: CALL_OW 121
69211: GO 69222
// ComExitBuilding ( unit ) ;
69213: LD_VAR 0 1
69217: PPUSH
69218: CALL_OW 122
// result := tmp ;
69222: LD_ADDR_VAR 0 2
69226: PUSH
69227: LD_VAR 0 3
69231: ST_TO_ADDR
// end ;
69232: LD_VAR 0 2
69236: RET
// export function ComExitAll ( units ) ; var i ; begin
69237: LD_INT 0
69239: PPUSH
69240: PPUSH
// if not units then
69241: LD_VAR 0 1
69245: NOT
69246: IFFALSE 69250
// exit ;
69248: GO 69276
// for i in units do
69250: LD_ADDR_VAR 0 3
69254: PUSH
69255: LD_VAR 0 1
69259: PUSH
69260: FOR_IN
69261: IFFALSE 69274
// ComExit ( i ) ;
69263: LD_VAR 0 3
69267: PPUSH
69268: CALL 69154 0 1
69272: GO 69260
69274: POP
69275: POP
// end ;
69276: LD_VAR 0 2
69280: RET
// export function ResetHc ; begin
69281: LD_INT 0
69283: PPUSH
// InitHc ;
69284: CALL_OW 19
// hc_importance := 0 ;
69288: LD_ADDR_OWVAR 32
69292: PUSH
69293: LD_INT 0
69295: ST_TO_ADDR
// end ;
69296: LD_VAR 0 1
69300: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69301: LD_INT 0
69303: PPUSH
69304: PPUSH
69305: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69306: LD_ADDR_VAR 0 6
69310: PUSH
69311: LD_VAR 0 1
69315: PUSH
69316: LD_VAR 0 3
69320: PLUS
69321: PUSH
69322: LD_INT 2
69324: DIV
69325: ST_TO_ADDR
// if _x < 0 then
69326: LD_VAR 0 6
69330: PUSH
69331: LD_INT 0
69333: LESS
69334: IFFALSE 69351
// _x := _x * - 1 ;
69336: LD_ADDR_VAR 0 6
69340: PUSH
69341: LD_VAR 0 6
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: MUL
69350: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69351: LD_ADDR_VAR 0 7
69355: PUSH
69356: LD_VAR 0 2
69360: PUSH
69361: LD_VAR 0 4
69365: PLUS
69366: PUSH
69367: LD_INT 2
69369: DIV
69370: ST_TO_ADDR
// if _y < 0 then
69371: LD_VAR 0 7
69375: PUSH
69376: LD_INT 0
69378: LESS
69379: IFFALSE 69396
// _y := _y * - 1 ;
69381: LD_ADDR_VAR 0 7
69385: PUSH
69386: LD_VAR 0 7
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: MUL
69395: ST_TO_ADDR
// result := [ _x , _y ] ;
69396: LD_ADDR_VAR 0 5
69400: PUSH
69401: LD_VAR 0 6
69405: PUSH
69406: LD_VAR 0 7
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: ST_TO_ADDR
// end ;
69415: LD_VAR 0 5
69419: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69420: LD_INT 0
69422: PPUSH
69423: PPUSH
69424: PPUSH
69425: PPUSH
// task := GetTaskList ( unit ) ;
69426: LD_ADDR_VAR 0 7
69430: PUSH
69431: LD_VAR 0 1
69435: PPUSH
69436: CALL_OW 437
69440: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69441: LD_VAR 0 7
69445: NOT
69446: PUSH
69447: LD_VAR 0 1
69451: PPUSH
69452: LD_VAR 0 2
69456: PPUSH
69457: CALL_OW 308
69461: NOT
69462: AND
69463: IFFALSE 69467
// exit ;
69465: GO 69585
// if IsInArea ( unit , area ) then
69467: LD_VAR 0 1
69471: PPUSH
69472: LD_VAR 0 2
69476: PPUSH
69477: CALL_OW 308
69481: IFFALSE 69499
// begin ComMoveToArea ( unit , goAway ) ;
69483: LD_VAR 0 1
69487: PPUSH
69488: LD_VAR 0 3
69492: PPUSH
69493: CALL_OW 113
// exit ;
69497: GO 69585
// end ; if task [ 1 ] [ 1 ] <> M then
69499: LD_VAR 0 7
69503: PUSH
69504: LD_INT 1
69506: ARRAY
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PUSH
69512: LD_STRING M
69514: NONEQUAL
69515: IFFALSE 69519
// exit ;
69517: GO 69585
// x := task [ 1 ] [ 2 ] ;
69519: LD_ADDR_VAR 0 5
69523: PUSH
69524: LD_VAR 0 7
69528: PUSH
69529: LD_INT 1
69531: ARRAY
69532: PUSH
69533: LD_INT 2
69535: ARRAY
69536: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69537: LD_ADDR_VAR 0 6
69541: PUSH
69542: LD_VAR 0 7
69546: PUSH
69547: LD_INT 1
69549: ARRAY
69550: PUSH
69551: LD_INT 3
69553: ARRAY
69554: ST_TO_ADDR
// if InArea ( x , y , area ) then
69555: LD_VAR 0 5
69559: PPUSH
69560: LD_VAR 0 6
69564: PPUSH
69565: LD_VAR 0 2
69569: PPUSH
69570: CALL_OW 309
69574: IFFALSE 69585
// ComStop ( unit ) ;
69576: LD_VAR 0 1
69580: PPUSH
69581: CALL_OW 141
// end ;
69585: LD_VAR 0 4
69589: RET
// export function Abs ( value ) ; begin
69590: LD_INT 0
69592: PPUSH
// result := value ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: LD_VAR 0 1
69602: ST_TO_ADDR
// if value < 0 then
69603: LD_VAR 0 1
69607: PUSH
69608: LD_INT 0
69610: LESS
69611: IFFALSE 69628
// result := value * - 1 ;
69613: LD_ADDR_VAR 0 2
69617: PUSH
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 1
69625: NEG
69626: MUL
69627: ST_TO_ADDR
// end ;
69628: LD_VAR 0 2
69632: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
// if not unit or not building then
69643: LD_VAR 0 1
69647: NOT
69648: PUSH
69649: LD_VAR 0 2
69653: NOT
69654: OR
69655: IFFALSE 69659
// exit ;
69657: GO 69885
// x := GetX ( building ) ;
69659: LD_ADDR_VAR 0 4
69663: PUSH
69664: LD_VAR 0 2
69668: PPUSH
69669: CALL_OW 250
69673: ST_TO_ADDR
// y := GetY ( building ) ;
69674: LD_ADDR_VAR 0 6
69678: PUSH
69679: LD_VAR 0 2
69683: PPUSH
69684: CALL_OW 251
69688: ST_TO_ADDR
// d := GetDir ( building ) ;
69689: LD_ADDR_VAR 0 8
69693: PUSH
69694: LD_VAR 0 2
69698: PPUSH
69699: CALL_OW 254
69703: ST_TO_ADDR
// r := 4 ;
69704: LD_ADDR_VAR 0 9
69708: PUSH
69709: LD_INT 4
69711: ST_TO_ADDR
// for i := 1 to 5 do
69712: LD_ADDR_VAR 0 10
69716: PUSH
69717: DOUBLE
69718: LD_INT 1
69720: DEC
69721: ST_TO_ADDR
69722: LD_INT 5
69724: PUSH
69725: FOR_TO
69726: IFFALSE 69883
// begin _x := ShiftX ( x , d , r + i ) ;
69728: LD_ADDR_VAR 0 5
69732: PUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: LD_VAR 0 8
69742: PPUSH
69743: LD_VAR 0 9
69747: PUSH
69748: LD_VAR 0 10
69752: PLUS
69753: PPUSH
69754: CALL_OW 272
69758: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69759: LD_ADDR_VAR 0 7
69763: PUSH
69764: LD_VAR 0 6
69768: PPUSH
69769: LD_VAR 0 8
69773: PPUSH
69774: LD_VAR 0 9
69778: PUSH
69779: LD_VAR 0 10
69783: PLUS
69784: PPUSH
69785: CALL_OW 273
69789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69790: LD_VAR 0 5
69794: PPUSH
69795: LD_VAR 0 7
69799: PPUSH
69800: CALL_OW 488
69804: PUSH
69805: LD_VAR 0 5
69809: PPUSH
69810: LD_VAR 0 7
69814: PPUSH
69815: CALL_OW 428
69819: PPUSH
69820: CALL_OW 247
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: LD_INT 2
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: IN
69835: NOT
69836: AND
69837: IFFALSE 69881
// begin ComMoveXY ( unit , _x , _y ) ;
69839: LD_VAR 0 1
69843: PPUSH
69844: LD_VAR 0 5
69848: PPUSH
69849: LD_VAR 0 7
69853: PPUSH
69854: CALL_OW 111
// result := [ _x , _y ] ;
69858: LD_ADDR_VAR 0 3
69862: PUSH
69863: LD_VAR 0 5
69867: PUSH
69868: LD_VAR 0 7
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: ST_TO_ADDR
// exit ;
69877: POP
69878: POP
69879: GO 69885
// end ; end ;
69881: GO 69725
69883: POP
69884: POP
// end ;
69885: LD_VAR 0 3
69889: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69890: LD_INT 0
69892: PPUSH
69893: PPUSH
69894: PPUSH
// result := 0 ;
69895: LD_ADDR_VAR 0 3
69899: PUSH
69900: LD_INT 0
69902: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69903: LD_VAR 0 1
69907: PUSH
69908: LD_INT 0
69910: LESS
69911: PUSH
69912: LD_VAR 0 1
69916: PUSH
69917: LD_INT 8
69919: GREATER
69920: OR
69921: PUSH
69922: LD_VAR 0 2
69926: PUSH
69927: LD_INT 0
69929: LESS
69930: OR
69931: PUSH
69932: LD_VAR 0 2
69936: PUSH
69937: LD_INT 8
69939: GREATER
69940: OR
69941: IFFALSE 69945
// exit ;
69943: GO 70020
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69945: LD_ADDR_VAR 0 4
69949: PUSH
69950: LD_INT 22
69952: PUSH
69953: LD_VAR 0 2
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PPUSH
69962: CALL_OW 69
69966: PUSH
69967: FOR_IN
69968: IFFALSE 70018
// begin un := UnitShoot ( i ) ;
69970: LD_ADDR_VAR 0 5
69974: PUSH
69975: LD_VAR 0 4
69979: PPUSH
69980: CALL_OW 504
69984: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69985: LD_VAR 0 5
69989: PPUSH
69990: CALL_OW 255
69994: PUSH
69995: LD_VAR 0 1
69999: EQUAL
70000: IFFALSE 70016
// begin result := un ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_VAR 0 5
70011: ST_TO_ADDR
// exit ;
70012: POP
70013: POP
70014: GO 70020
// end ; end ;
70016: GO 69967
70018: POP
70019: POP
// end ;
70020: LD_VAR 0 3
70024: RET
// export function GetCargoBay ( units ) ; begin
70025: LD_INT 0
70027: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70028: LD_ADDR_VAR 0 2
70032: PUSH
70033: LD_VAR 0 1
70037: PPUSH
70038: LD_INT 2
70040: PUSH
70041: LD_INT 34
70043: PUSH
70044: LD_INT 12
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 34
70053: PUSH
70054: LD_INT 51
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 34
70063: PUSH
70064: LD_INT 32
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 34
70073: PUSH
70074: LD_INT 89
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: PPUSH
70088: CALL_OW 72
70092: ST_TO_ADDR
// end ;
70093: LD_VAR 0 2
70097: RET
// export function Negate ( value ) ; begin
70098: LD_INT 0
70100: PPUSH
// result := not value ;
70101: LD_ADDR_VAR 0 2
70105: PUSH
70106: LD_VAR 0 1
70110: NOT
70111: ST_TO_ADDR
// end ;
70112: LD_VAR 0 2
70116: RET
// export function Inc ( value ) ; begin
70117: LD_INT 0
70119: PPUSH
// result := value + 1 ;
70120: LD_ADDR_VAR 0 2
70124: PUSH
70125: LD_VAR 0 1
70129: PUSH
70130: LD_INT 1
70132: PLUS
70133: ST_TO_ADDR
// end ;
70134: LD_VAR 0 2
70138: RET
// export function Dec ( value ) ; begin
70139: LD_INT 0
70141: PPUSH
// result := value - 1 ;
70142: LD_ADDR_VAR 0 2
70146: PUSH
70147: LD_VAR 0 1
70151: PUSH
70152: LD_INT 1
70154: MINUS
70155: ST_TO_ADDR
// end ;
70156: LD_VAR 0 2
70160: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
70165: PPUSH
70166: PPUSH
70167: PPUSH
70168: PPUSH
70169: PPUSH
70170: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70171: LD_VAR 0 1
70175: PPUSH
70176: LD_VAR 0 2
70180: PPUSH
70181: CALL_OW 488
70185: NOT
70186: PUSH
70187: LD_VAR 0 3
70191: PPUSH
70192: LD_VAR 0 4
70196: PPUSH
70197: CALL_OW 488
70201: NOT
70202: OR
70203: IFFALSE 70216
// begin result := - 1 ;
70205: LD_ADDR_VAR 0 5
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: ST_TO_ADDR
// exit ;
70214: GO 70451
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70216: LD_ADDR_VAR 0 12
70220: PUSH
70221: LD_VAR 0 1
70225: PPUSH
70226: LD_VAR 0 2
70230: PPUSH
70231: LD_VAR 0 3
70235: PPUSH
70236: LD_VAR 0 4
70240: PPUSH
70241: CALL 69301 0 4
70245: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70246: LD_ADDR_VAR 0 11
70250: PUSH
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_VAR 0 2
70260: PPUSH
70261: LD_VAR 0 12
70265: PUSH
70266: LD_INT 1
70268: ARRAY
70269: PPUSH
70270: LD_VAR 0 12
70274: PUSH
70275: LD_INT 2
70277: ARRAY
70278: PPUSH
70279: CALL_OW 298
70283: ST_TO_ADDR
// distance := 9999 ;
70284: LD_ADDR_VAR 0 10
70288: PUSH
70289: LD_INT 9999
70291: ST_TO_ADDR
// for i := 0 to 5 do
70292: LD_ADDR_VAR 0 6
70296: PUSH
70297: DOUBLE
70298: LD_INT 0
70300: DEC
70301: ST_TO_ADDR
70302: LD_INT 5
70304: PUSH
70305: FOR_TO
70306: IFFALSE 70449
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70308: LD_ADDR_VAR 0 7
70312: PUSH
70313: LD_VAR 0 1
70317: PPUSH
70318: LD_VAR 0 6
70322: PPUSH
70323: LD_VAR 0 11
70327: PPUSH
70328: CALL_OW 272
70332: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70333: LD_ADDR_VAR 0 8
70337: PUSH
70338: LD_VAR 0 2
70342: PPUSH
70343: LD_VAR 0 6
70347: PPUSH
70348: LD_VAR 0 11
70352: PPUSH
70353: CALL_OW 273
70357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70358: LD_VAR 0 7
70362: PPUSH
70363: LD_VAR 0 8
70367: PPUSH
70368: CALL_OW 488
70372: NOT
70373: IFFALSE 70377
// continue ;
70375: GO 70305
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70377: LD_ADDR_VAR 0 9
70381: PUSH
70382: LD_VAR 0 12
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: PPUSH
70391: LD_VAR 0 12
70395: PUSH
70396: LD_INT 2
70398: ARRAY
70399: PPUSH
70400: LD_VAR 0 7
70404: PPUSH
70405: LD_VAR 0 8
70409: PPUSH
70410: CALL_OW 298
70414: ST_TO_ADDR
// if tmp < distance then
70415: LD_VAR 0 9
70419: PUSH
70420: LD_VAR 0 10
70424: LESS
70425: IFFALSE 70447
// begin result := i ;
70427: LD_ADDR_VAR 0 5
70431: PUSH
70432: LD_VAR 0 6
70436: ST_TO_ADDR
// distance := tmp ;
70437: LD_ADDR_VAR 0 10
70441: PUSH
70442: LD_VAR 0 9
70446: ST_TO_ADDR
// end ; end ;
70447: GO 70305
70449: POP
70450: POP
// end ;
70451: LD_VAR 0 5
70455: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70456: LD_INT 0
70458: PPUSH
70459: PPUSH
// if not driver or not IsInUnit ( driver ) then
70460: LD_VAR 0 1
70464: NOT
70465: PUSH
70466: LD_VAR 0 1
70470: PPUSH
70471: CALL_OW 310
70475: NOT
70476: OR
70477: IFFALSE 70481
// exit ;
70479: GO 70571
// vehicle := IsInUnit ( driver ) ;
70481: LD_ADDR_VAR 0 3
70485: PUSH
70486: LD_VAR 0 1
70490: PPUSH
70491: CALL_OW 310
70495: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70496: LD_VAR 0 1
70500: PPUSH
70501: LD_STRING \
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: LD_INT 0
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: PUSH
70531: LD_STRING E
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: LD_VAR 0 3
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PPUSH
70567: CALL_OW 446
// end ;
70571: LD_VAR 0 2
70575: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
// if not driver or not IsInUnit ( driver ) then
70580: LD_VAR 0 1
70584: NOT
70585: PUSH
70586: LD_VAR 0 1
70590: PPUSH
70591: CALL_OW 310
70595: NOT
70596: OR
70597: IFFALSE 70601
// exit ;
70599: GO 70691
// vehicle := IsInUnit ( driver ) ;
70601: LD_ADDR_VAR 0 3
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: CALL_OW 310
70615: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70616: LD_VAR 0 1
70620: PPUSH
70621: LD_STRING \
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 0
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: PUSH
70651: LD_STRING E
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: LD_VAR 0 3
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PPUSH
70687: CALL_OW 447
// end ;
70691: LD_VAR 0 2
70695: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70696: LD_INT 0
70698: PPUSH
70699: PPUSH
70700: PPUSH
// tmp := [ ] ;
70701: LD_ADDR_VAR 0 5
70705: PUSH
70706: EMPTY
70707: ST_TO_ADDR
// for i in units do
70708: LD_ADDR_VAR 0 4
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: FOR_IN
70719: IFFALSE 70757
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70721: LD_ADDR_VAR 0 5
70725: PUSH
70726: LD_VAR 0 5
70730: PPUSH
70731: LD_VAR 0 5
70735: PUSH
70736: LD_INT 1
70738: PLUS
70739: PPUSH
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 256
70749: PPUSH
70750: CALL_OW 2
70754: ST_TO_ADDR
70755: GO 70718
70757: POP
70758: POP
// if not tmp then
70759: LD_VAR 0 5
70763: NOT
70764: IFFALSE 70768
// exit ;
70766: GO 70816
// if asc then
70768: LD_VAR 0 2
70772: IFFALSE 70796
// result := SortListByListAsc ( units , tmp ) else
70774: LD_ADDR_VAR 0 3
70778: PUSH
70779: LD_VAR 0 1
70783: PPUSH
70784: LD_VAR 0 5
70788: PPUSH
70789: CALL_OW 76
70793: ST_TO_ADDR
70794: GO 70816
// result := SortListByListDesc ( units , tmp ) ;
70796: LD_ADDR_VAR 0 3
70800: PUSH
70801: LD_VAR 0 1
70805: PPUSH
70806: LD_VAR 0 5
70810: PPUSH
70811: CALL_OW 77
70815: ST_TO_ADDR
// end ;
70816: LD_VAR 0 3
70820: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70821: LD_INT 0
70823: PPUSH
70824: PPUSH
// task := GetTaskList ( mech ) ;
70825: LD_ADDR_VAR 0 4
70829: PUSH
70830: LD_VAR 0 1
70834: PPUSH
70835: CALL_OW 437
70839: ST_TO_ADDR
// if not task then
70840: LD_VAR 0 4
70844: NOT
70845: IFFALSE 70849
// exit ;
70847: GO 70891
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70849: LD_ADDR_VAR 0 3
70853: PUSH
70854: LD_VAR 0 4
70858: PUSH
70859: LD_INT 1
70861: ARRAY
70862: PUSH
70863: LD_INT 1
70865: ARRAY
70866: PUSH
70867: LD_STRING r
70869: EQUAL
70870: PUSH
70871: LD_VAR 0 4
70875: PUSH
70876: LD_INT 1
70878: ARRAY
70879: PUSH
70880: LD_INT 4
70882: ARRAY
70883: PUSH
70884: LD_VAR 0 2
70888: EQUAL
70889: AND
70890: ST_TO_ADDR
// end ;
70891: LD_VAR 0 3
70895: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70896: LD_INT 0
70898: PPUSH
// SetDir ( unit , d ) ;
70899: LD_VAR 0 1
70903: PPUSH
70904: LD_VAR 0 4
70908: PPUSH
70909: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70913: LD_VAR 0 1
70917: PPUSH
70918: LD_VAR 0 2
70922: PPUSH
70923: LD_VAR 0 3
70927: PPUSH
70928: LD_VAR 0 5
70932: PPUSH
70933: CALL_OW 48
// end ;
70937: LD_VAR 0 6
70941: RET
// export function ToNaturalNumber ( number ) ; begin
70942: LD_INT 0
70944: PPUSH
// result := number div 1 ;
70945: LD_ADDR_VAR 0 2
70949: PUSH
70950: LD_VAR 0 1
70954: PUSH
70955: LD_INT 1
70957: DIV
70958: ST_TO_ADDR
// if number < 0 then
70959: LD_VAR 0 1
70963: PUSH
70964: LD_INT 0
70966: LESS
70967: IFFALSE 70977
// result := 0 ;
70969: LD_ADDR_VAR 0 2
70973: PUSH
70974: LD_INT 0
70976: ST_TO_ADDR
// end ;
70977: LD_VAR 0 2
70981: RET
// export function SortByClass ( units , class ) ; var un ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
// if not units or not class then
70986: LD_VAR 0 1
70990: NOT
70991: PUSH
70992: LD_VAR 0 2
70996: NOT
70997: OR
70998: IFFALSE 71002
// exit ;
71000: GO 71097
// result := [ ] ;
71002: LD_ADDR_VAR 0 3
71006: PUSH
71007: EMPTY
71008: ST_TO_ADDR
// for un in units do
71009: LD_ADDR_VAR 0 4
71013: PUSH
71014: LD_VAR 0 1
71018: PUSH
71019: FOR_IN
71020: IFFALSE 71095
// if GetClass ( un ) = class then
71022: LD_VAR 0 4
71026: PPUSH
71027: CALL_OW 257
71031: PUSH
71032: LD_VAR 0 2
71036: EQUAL
71037: IFFALSE 71064
// result := Insert ( result , 1 , un ) else
71039: LD_ADDR_VAR 0 3
71043: PUSH
71044: LD_VAR 0 3
71048: PPUSH
71049: LD_INT 1
71051: PPUSH
71052: LD_VAR 0 4
71056: PPUSH
71057: CALL_OW 2
71061: ST_TO_ADDR
71062: GO 71093
// result := Replace ( result , result + 1 , un ) ;
71064: LD_ADDR_VAR 0 3
71068: PUSH
71069: LD_VAR 0 3
71073: PPUSH
71074: LD_VAR 0 3
71078: PUSH
71079: LD_INT 1
71081: PLUS
71082: PPUSH
71083: LD_VAR 0 4
71087: PPUSH
71088: CALL_OW 1
71092: ST_TO_ADDR
71093: GO 71019
71095: POP
71096: POP
// end ;
71097: LD_VAR 0 3
71101: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71102: LD_INT 0
71104: PPUSH
71105: PPUSH
71106: PPUSH
71107: PPUSH
71108: PPUSH
71109: PPUSH
71110: PPUSH
// result := [ ] ;
71111: LD_ADDR_VAR 0 4
71115: PUSH
71116: EMPTY
71117: ST_TO_ADDR
// if x - r < 0 then
71118: LD_VAR 0 1
71122: PUSH
71123: LD_VAR 0 3
71127: MINUS
71128: PUSH
71129: LD_INT 0
71131: LESS
71132: IFFALSE 71144
// min_x := 0 else
71134: LD_ADDR_VAR 0 8
71138: PUSH
71139: LD_INT 0
71141: ST_TO_ADDR
71142: GO 71160
// min_x := x - r ;
71144: LD_ADDR_VAR 0 8
71148: PUSH
71149: LD_VAR 0 1
71153: PUSH
71154: LD_VAR 0 3
71158: MINUS
71159: ST_TO_ADDR
// if y - r < 0 then
71160: LD_VAR 0 2
71164: PUSH
71165: LD_VAR 0 3
71169: MINUS
71170: PUSH
71171: LD_INT 0
71173: LESS
71174: IFFALSE 71186
// min_y := 0 else
71176: LD_ADDR_VAR 0 7
71180: PUSH
71181: LD_INT 0
71183: ST_TO_ADDR
71184: GO 71202
// min_y := y - r ;
71186: LD_ADDR_VAR 0 7
71190: PUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_VAR 0 3
71200: MINUS
71201: ST_TO_ADDR
// max_x := x + r ;
71202: LD_ADDR_VAR 0 9
71206: PUSH
71207: LD_VAR 0 1
71211: PUSH
71212: LD_VAR 0 3
71216: PLUS
71217: ST_TO_ADDR
// max_y := y + r ;
71218: LD_ADDR_VAR 0 10
71222: PUSH
71223: LD_VAR 0 2
71227: PUSH
71228: LD_VAR 0 3
71232: PLUS
71233: ST_TO_ADDR
// for _x = min_x to max_x do
71234: LD_ADDR_VAR 0 5
71238: PUSH
71239: DOUBLE
71240: LD_VAR 0 8
71244: DEC
71245: ST_TO_ADDR
71246: LD_VAR 0 9
71250: PUSH
71251: FOR_TO
71252: IFFALSE 71353
// for _y = min_y to max_y do
71254: LD_ADDR_VAR 0 6
71258: PUSH
71259: DOUBLE
71260: LD_VAR 0 7
71264: DEC
71265: ST_TO_ADDR
71266: LD_VAR 0 10
71270: PUSH
71271: FOR_TO
71272: IFFALSE 71349
// begin if not ValidHex ( _x , _y ) then
71274: LD_VAR 0 5
71278: PPUSH
71279: LD_VAR 0 6
71283: PPUSH
71284: CALL_OW 488
71288: NOT
71289: IFFALSE 71293
// continue ;
71291: GO 71271
// if GetResourceTypeXY ( _x , _y ) then
71293: LD_VAR 0 5
71297: PPUSH
71298: LD_VAR 0 6
71302: PPUSH
71303: CALL_OW 283
71307: IFFALSE 71347
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71309: LD_ADDR_VAR 0 4
71313: PUSH
71314: LD_VAR 0 4
71318: PPUSH
71319: LD_VAR 0 4
71323: PUSH
71324: LD_INT 1
71326: PLUS
71327: PPUSH
71328: LD_VAR 0 5
71332: PUSH
71333: LD_VAR 0 6
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PPUSH
71342: CALL_OW 1
71346: ST_TO_ADDR
// end ;
71347: GO 71271
71349: POP
71350: POP
71351: GO 71251
71353: POP
71354: POP
// end ;
71355: LD_VAR 0 4
71359: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71360: LD_INT 0
71362: PPUSH
71363: PPUSH
71364: PPUSH
71365: PPUSH
71366: PPUSH
71367: PPUSH
71368: PPUSH
71369: PPUSH
// if not units then
71370: LD_VAR 0 1
71374: NOT
71375: IFFALSE 71379
// exit ;
71377: GO 71903
// result := UnitFilter ( units , [ f_ok ] ) ;
71379: LD_ADDR_VAR 0 3
71383: PUSH
71384: LD_VAR 0 1
71388: PPUSH
71389: LD_INT 50
71391: PUSH
71392: EMPTY
71393: LIST
71394: PPUSH
71395: CALL_OW 72
71399: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71400: LD_ADDR_VAR 0 8
71404: PUSH
71405: LD_VAR 0 1
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PPUSH
71414: CALL_OW 255
71418: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71419: LD_ADDR_VAR 0 10
71423: PUSH
71424: LD_INT 29
71426: PUSH
71427: LD_INT 91
71429: PUSH
71430: LD_INT 49
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: ST_TO_ADDR
// if not result then
71438: LD_VAR 0 3
71442: NOT
71443: IFFALSE 71447
// exit ;
71445: GO 71903
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71447: LD_ADDR_VAR 0 5
71451: PUSH
71452: LD_INT 81
71454: PUSH
71455: LD_VAR 0 8
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PPUSH
71464: CALL_OW 69
71468: ST_TO_ADDR
// for i in result do
71469: LD_ADDR_VAR 0 4
71473: PUSH
71474: LD_VAR 0 3
71478: PUSH
71479: FOR_IN
71480: IFFALSE 71901
// begin tag := GetTag ( i ) + 1 ;
71482: LD_ADDR_VAR 0 9
71486: PUSH
71487: LD_VAR 0 4
71491: PPUSH
71492: CALL_OW 110
71496: PUSH
71497: LD_INT 1
71499: PLUS
71500: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71501: LD_ADDR_VAR 0 7
71505: PUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: CALL_OW 250
71515: PPUSH
71516: LD_VAR 0 4
71520: PPUSH
71521: CALL_OW 251
71525: PPUSH
71526: LD_INT 6
71528: PPUSH
71529: CALL 71102 0 3
71533: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71534: LD_VAR 0 4
71538: PPUSH
71539: CALL_OW 247
71543: PUSH
71544: LD_INT 2
71546: EQUAL
71547: PUSH
71548: LD_VAR 0 7
71552: AND
71553: PUSH
71554: LD_VAR 0 4
71558: PPUSH
71559: CALL_OW 264
71563: PUSH
71564: LD_VAR 0 10
71568: IN
71569: NOT
71570: AND
71571: IFFALSE 71610
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71573: LD_VAR 0 4
71577: PPUSH
71578: LD_VAR 0 7
71582: PUSH
71583: LD_INT 1
71585: ARRAY
71586: PUSH
71587: LD_INT 1
71589: ARRAY
71590: PPUSH
71591: LD_VAR 0 7
71595: PUSH
71596: LD_INT 1
71598: ARRAY
71599: PUSH
71600: LD_INT 2
71602: ARRAY
71603: PPUSH
71604: CALL_OW 116
71608: GO 71899
// if path > tag then
71610: LD_VAR 0 2
71614: PUSH
71615: LD_VAR 0 9
71619: GREATER
71620: IFFALSE 71828
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71622: LD_ADDR_VAR 0 6
71626: PUSH
71627: LD_VAR 0 5
71631: PPUSH
71632: LD_INT 91
71634: PUSH
71635: LD_VAR 0 4
71639: PUSH
71640: LD_INT 8
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: PPUSH
71648: CALL_OW 72
71652: ST_TO_ADDR
// if nearEnemy then
71653: LD_VAR 0 6
71657: IFFALSE 71726
// begin if GetWeapon ( i ) = ru_time_lapser then
71659: LD_VAR 0 4
71663: PPUSH
71664: CALL_OW 264
71668: PUSH
71669: LD_INT 49
71671: EQUAL
71672: IFFALSE 71700
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71674: LD_VAR 0 4
71678: PPUSH
71679: LD_VAR 0 6
71683: PPUSH
71684: LD_VAR 0 4
71688: PPUSH
71689: CALL_OW 74
71693: PPUSH
71694: CALL_OW 112
71698: GO 71724
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71700: LD_VAR 0 4
71704: PPUSH
71705: LD_VAR 0 6
71709: PPUSH
71710: LD_VAR 0 4
71714: PPUSH
71715: CALL_OW 74
71719: PPUSH
71720: CALL_OW 115
// end else
71724: GO 71826
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71726: LD_VAR 0 4
71730: PPUSH
71731: LD_VAR 0 2
71735: PUSH
71736: LD_VAR 0 9
71740: ARRAY
71741: PUSH
71742: LD_INT 1
71744: ARRAY
71745: PPUSH
71746: LD_VAR 0 2
71750: PUSH
71751: LD_VAR 0 9
71755: ARRAY
71756: PUSH
71757: LD_INT 2
71759: ARRAY
71760: PPUSH
71761: CALL_OW 297
71765: PUSH
71766: LD_INT 6
71768: GREATER
71769: IFFALSE 71812
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71771: LD_VAR 0 4
71775: PPUSH
71776: LD_VAR 0 2
71780: PUSH
71781: LD_VAR 0 9
71785: ARRAY
71786: PUSH
71787: LD_INT 1
71789: ARRAY
71790: PPUSH
71791: LD_VAR 0 2
71795: PUSH
71796: LD_VAR 0 9
71800: ARRAY
71801: PUSH
71802: LD_INT 2
71804: ARRAY
71805: PPUSH
71806: CALL_OW 114
71810: GO 71826
// SetTag ( i , tag ) ;
71812: LD_VAR 0 4
71816: PPUSH
71817: LD_VAR 0 9
71821: PPUSH
71822: CALL_OW 109
// end else
71826: GO 71899
// if enemy then
71828: LD_VAR 0 5
71832: IFFALSE 71899
// begin if GetWeapon ( i ) = ru_time_lapser then
71834: LD_VAR 0 4
71838: PPUSH
71839: CALL_OW 264
71843: PUSH
71844: LD_INT 49
71846: EQUAL
71847: IFFALSE 71875
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71849: LD_VAR 0 4
71853: PPUSH
71854: LD_VAR 0 5
71858: PPUSH
71859: LD_VAR 0 4
71863: PPUSH
71864: CALL_OW 74
71868: PPUSH
71869: CALL_OW 112
71873: GO 71899
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71875: LD_VAR 0 4
71879: PPUSH
71880: LD_VAR 0 5
71884: PPUSH
71885: LD_VAR 0 4
71889: PPUSH
71890: CALL_OW 74
71894: PPUSH
71895: CALL_OW 115
// end ; end ;
71899: GO 71479
71901: POP
71902: POP
// end ;
71903: LD_VAR 0 3
71907: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71908: LD_INT 0
71910: PPUSH
71911: PPUSH
71912: PPUSH
// if not unit or IsInUnit ( unit ) then
71913: LD_VAR 0 1
71917: NOT
71918: PUSH
71919: LD_VAR 0 1
71923: PPUSH
71924: CALL_OW 310
71928: OR
71929: IFFALSE 71933
// exit ;
71931: GO 72024
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71933: LD_ADDR_VAR 0 4
71937: PUSH
71938: LD_VAR 0 1
71942: PPUSH
71943: CALL_OW 250
71947: PPUSH
71948: LD_VAR 0 2
71952: PPUSH
71953: LD_INT 1
71955: PPUSH
71956: CALL_OW 272
71960: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71961: LD_ADDR_VAR 0 5
71965: PUSH
71966: LD_VAR 0 1
71970: PPUSH
71971: CALL_OW 251
71975: PPUSH
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_INT 1
71983: PPUSH
71984: CALL_OW 273
71988: ST_TO_ADDR
// if ValidHex ( x , y ) then
71989: LD_VAR 0 4
71993: PPUSH
71994: LD_VAR 0 5
71998: PPUSH
71999: CALL_OW 488
72003: IFFALSE 72024
// ComTurnXY ( unit , x , y ) ;
72005: LD_VAR 0 1
72009: PPUSH
72010: LD_VAR 0 4
72014: PPUSH
72015: LD_VAR 0 5
72019: PPUSH
72020: CALL_OW 118
// end ;
72024: LD_VAR 0 3
72028: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72029: LD_INT 0
72031: PPUSH
72032: PPUSH
// result := false ;
72033: LD_ADDR_VAR 0 3
72037: PUSH
72038: LD_INT 0
72040: ST_TO_ADDR
// if not units then
72041: LD_VAR 0 2
72045: NOT
72046: IFFALSE 72050
// exit ;
72048: GO 72095
// for i in units do
72050: LD_ADDR_VAR 0 4
72054: PUSH
72055: LD_VAR 0 2
72059: PUSH
72060: FOR_IN
72061: IFFALSE 72093
// if See ( side , i ) then
72063: LD_VAR 0 1
72067: PPUSH
72068: LD_VAR 0 4
72072: PPUSH
72073: CALL_OW 292
72077: IFFALSE 72091
// begin result := true ;
72079: LD_ADDR_VAR 0 3
72083: PUSH
72084: LD_INT 1
72086: ST_TO_ADDR
// exit ;
72087: POP
72088: POP
72089: GO 72095
// end ;
72091: GO 72060
72093: POP
72094: POP
// end ;
72095: LD_VAR 0 3
72099: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72100: LD_INT 0
72102: PPUSH
72103: PPUSH
72104: PPUSH
72105: PPUSH
// if not unit or not points then
72106: LD_VAR 0 1
72110: NOT
72111: PUSH
72112: LD_VAR 0 2
72116: NOT
72117: OR
72118: IFFALSE 72122
// exit ;
72120: GO 72212
// dist := 99999 ;
72122: LD_ADDR_VAR 0 5
72126: PUSH
72127: LD_INT 99999
72129: ST_TO_ADDR
// for i in points do
72130: LD_ADDR_VAR 0 4
72134: PUSH
72135: LD_VAR 0 2
72139: PUSH
72140: FOR_IN
72141: IFFALSE 72210
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72143: LD_ADDR_VAR 0 6
72147: PUSH
72148: LD_VAR 0 1
72152: PPUSH
72153: LD_VAR 0 4
72157: PUSH
72158: LD_INT 1
72160: ARRAY
72161: PPUSH
72162: LD_VAR 0 4
72166: PUSH
72167: LD_INT 2
72169: ARRAY
72170: PPUSH
72171: CALL_OW 297
72175: ST_TO_ADDR
// if tmpDist < dist then
72176: LD_VAR 0 6
72180: PUSH
72181: LD_VAR 0 5
72185: LESS
72186: IFFALSE 72208
// begin result := i ;
72188: LD_ADDR_VAR 0 3
72192: PUSH
72193: LD_VAR 0 4
72197: ST_TO_ADDR
// dist := tmpDist ;
72198: LD_ADDR_VAR 0 5
72202: PUSH
72203: LD_VAR 0 6
72207: ST_TO_ADDR
// end ; end ;
72208: GO 72140
72210: POP
72211: POP
// end ;
72212: LD_VAR 0 3
72216: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72217: LD_INT 0
72219: PPUSH
// uc_side := side ;
72220: LD_ADDR_OWVAR 20
72224: PUSH
72225: LD_VAR 0 1
72229: ST_TO_ADDR
// uc_nation := 3 ;
72230: LD_ADDR_OWVAR 21
72234: PUSH
72235: LD_INT 3
72237: ST_TO_ADDR
// vc_chassis := 25 ;
72238: LD_ADDR_OWVAR 37
72242: PUSH
72243: LD_INT 25
72245: ST_TO_ADDR
// vc_engine := engine_siberite ;
72246: LD_ADDR_OWVAR 39
72250: PUSH
72251: LD_INT 3
72253: ST_TO_ADDR
// vc_control := control_computer ;
72254: LD_ADDR_OWVAR 38
72258: PUSH
72259: LD_INT 3
72261: ST_TO_ADDR
// vc_weapon := 59 ;
72262: LD_ADDR_OWVAR 40
72266: PUSH
72267: LD_INT 59
72269: ST_TO_ADDR
// result := CreateVehicle ;
72270: LD_ADDR_VAR 0 5
72274: PUSH
72275: CALL_OW 45
72279: ST_TO_ADDR
// SetDir ( result , d ) ;
72280: LD_VAR 0 5
72284: PPUSH
72285: LD_VAR 0 4
72289: PPUSH
72290: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72294: LD_VAR 0 5
72298: PPUSH
72299: LD_VAR 0 2
72303: PPUSH
72304: LD_VAR 0 3
72308: PPUSH
72309: LD_INT 0
72311: PPUSH
72312: CALL_OW 48
// end ;
72316: LD_VAR 0 5
72320: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72321: LD_INT 0
72323: PPUSH
72324: PPUSH
72325: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72326: LD_ADDR_VAR 0 2
72330: PUSH
72331: LD_INT 0
72333: PUSH
72334: LD_INT 0
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: LD_INT 0
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72349: LD_VAR 0 1
72353: NOT
72354: PUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 264
72364: PUSH
72365: LD_INT 12
72367: PUSH
72368: LD_INT 51
72370: PUSH
72371: LD_INT 32
72373: PUSH
72374: LD_INT 89
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: IN
72383: NOT
72384: OR
72385: IFFALSE 72389
// exit ;
72387: GO 72487
// for i := 1 to 3 do
72389: LD_ADDR_VAR 0 3
72393: PUSH
72394: DOUBLE
72395: LD_INT 1
72397: DEC
72398: ST_TO_ADDR
72399: LD_INT 3
72401: PUSH
72402: FOR_TO
72403: IFFALSE 72485
// begin tmp := GetCargo ( cargo , i ) ;
72405: LD_ADDR_VAR 0 4
72409: PUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: LD_VAR 0 3
72419: PPUSH
72420: CALL_OW 289
72424: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72425: LD_ADDR_VAR 0 2
72429: PUSH
72430: LD_VAR 0 2
72434: PPUSH
72435: LD_VAR 0 3
72439: PPUSH
72440: LD_VAR 0 4
72444: PPUSH
72445: CALL_OW 1
72449: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72450: LD_ADDR_VAR 0 2
72454: PUSH
72455: LD_VAR 0 2
72459: PPUSH
72460: LD_INT 4
72462: PPUSH
72463: LD_VAR 0 2
72467: PUSH
72468: LD_INT 4
72470: ARRAY
72471: PUSH
72472: LD_VAR 0 4
72476: PLUS
72477: PPUSH
72478: CALL_OW 1
72482: ST_TO_ADDR
// end ;
72483: GO 72402
72485: POP
72486: POP
// end ;
72487: LD_VAR 0 2
72491: RET
// export function Length ( array ) ; begin
72492: LD_INT 0
72494: PPUSH
// result := array + 0 ;
72495: LD_ADDR_VAR 0 2
72499: PUSH
72500: LD_VAR 0 1
72504: PUSH
72505: LD_INT 0
72507: PLUS
72508: ST_TO_ADDR
// end ;
72509: LD_VAR 0 2
72513: RET
// export function PrepareArray ( array ) ; begin
72514: LD_INT 0
72516: PPUSH
// result := array diff 0 ;
72517: LD_ADDR_VAR 0 2
72521: PUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_INT 0
72529: DIFF
72530: ST_TO_ADDR
// if not result [ 1 ] then
72531: LD_VAR 0 2
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: NOT
72540: IFFALSE 72560
// result := Delete ( result , 1 ) ;
72542: LD_ADDR_VAR 0 2
72546: PUSH
72547: LD_VAR 0 2
72551: PPUSH
72552: LD_INT 1
72554: PPUSH
72555: CALL_OW 3
72559: ST_TO_ADDR
// end ;
72560: LD_VAR 0 2
72564: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72565: LD_INT 0
72567: PPUSH
72568: PPUSH
72569: PPUSH
72570: PPUSH
// sibRocketRange := 25 ;
72571: LD_ADDR_VAR 0 6
72575: PUSH
72576: LD_INT 25
72578: ST_TO_ADDR
// result := false ;
72579: LD_ADDR_VAR 0 4
72583: PUSH
72584: LD_INT 0
72586: ST_TO_ADDR
// for i := 0 to 5 do
72587: LD_ADDR_VAR 0 5
72591: PUSH
72592: DOUBLE
72593: LD_INT 0
72595: DEC
72596: ST_TO_ADDR
72597: LD_INT 5
72599: PUSH
72600: FOR_TO
72601: IFFALSE 72668
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72603: LD_VAR 0 1
72607: PPUSH
72608: LD_VAR 0 5
72612: PPUSH
72613: LD_VAR 0 6
72617: PPUSH
72618: CALL_OW 272
72622: PPUSH
72623: LD_VAR 0 2
72627: PPUSH
72628: LD_VAR 0 5
72632: PPUSH
72633: LD_VAR 0 6
72637: PPUSH
72638: CALL_OW 273
72642: PPUSH
72643: LD_VAR 0 3
72647: PPUSH
72648: CALL_OW 309
72652: IFFALSE 72666
// begin result := true ;
72654: LD_ADDR_VAR 0 4
72658: PUSH
72659: LD_INT 1
72661: ST_TO_ADDR
// exit ;
72662: POP
72663: POP
72664: GO 72670
// end ;
72666: GO 72600
72668: POP
72669: POP
// end ;
72670: LD_VAR 0 4
72674: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72675: LD_INT 0
72677: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72678: LD_VAR 0 1
72682: PPUSH
72683: LD_VAR 0 2
72687: PPUSH
72688: LD_INT 0
72690: PPUSH
72691: LD_INT 0
72693: PPUSH
72694: LD_INT 1
72696: PPUSH
72697: LD_INT 0
72699: PPUSH
72700: CALL_OW 587
// end ; end_of_file
72704: LD_VAR 0 3
72708: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72709: LD_VAR 0 1
72713: PUSH
72714: LD_INT 200
72716: DOUBLE
72717: GREATEREQUAL
72718: IFFALSE 72726
72720: LD_INT 299
72722: DOUBLE
72723: LESSEQUAL
72724: IFTRUE 72728
72726: GO 72760
72728: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72729: LD_VAR 0 1
72733: PPUSH
72734: LD_VAR 0 2
72738: PPUSH
72739: LD_VAR 0 3
72743: PPUSH
72744: LD_VAR 0 4
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: CALL 27375 0 5
72758: GO 72837
72760: LD_INT 300
72762: DOUBLE
72763: GREATEREQUAL
72764: IFFALSE 72772
72766: LD_INT 399
72768: DOUBLE
72769: LESSEQUAL
72770: IFTRUE 72774
72772: GO 72836
72774: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72775: LD_VAR 0 1
72779: PPUSH
72780: LD_VAR 0 2
72784: PPUSH
72785: LD_VAR 0 3
72789: PPUSH
72790: LD_VAR 0 4
72794: PPUSH
72795: LD_VAR 0 5
72799: PPUSH
72800: LD_VAR 0 6
72804: PPUSH
72805: LD_VAR 0 7
72809: PPUSH
72810: LD_VAR 0 8
72814: PPUSH
72815: LD_VAR 0 9
72819: PPUSH
72820: LD_VAR 0 10
72824: PPUSH
72825: LD_VAR 0 11
72829: PPUSH
72830: CALL 23708 0 11
72834: GO 72837
72836: POP
// end ;
72837: PPOPN 11
72839: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72840: LD_VAR 0 1
72844: PPUSH
72845: LD_VAR 0 2
72849: PPUSH
72850: LD_VAR 0 3
72854: PPUSH
72855: LD_VAR 0 4
72859: PPUSH
72860: LD_VAR 0 5
72864: PPUSH
72865: CALL 27111 0 5
// end ; end_of_file
72869: PPOPN 5
72871: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72872: LD_VAR 0 1
72876: PPUSH
72877: LD_VAR 0 2
72881: PPUSH
72882: LD_VAR 0 3
72886: PPUSH
72887: LD_VAR 0 4
72891: PPUSH
72892: LD_VAR 0 5
72896: PPUSH
72897: LD_VAR 0 6
72901: PPUSH
72902: CALL 11328 0 6
// end ;
72906: PPOPN 6
72908: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72909: LD_INT 0
72911: PPUSH
// begin if not units then
72912: LD_VAR 0 1
72916: NOT
72917: IFFALSE 72921
// exit ;
72919: GO 72921
// end ;
72921: PPOPN 7
72923: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72924: CALL 11222 0 0
// end ;
72928: PPOPN 1
72930: END
