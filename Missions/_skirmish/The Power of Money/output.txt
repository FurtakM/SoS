// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 27002 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 27122 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 27098 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 27106 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 67036 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// export globalGameSaveCounter ; every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// every 0 0$1 do
11222: GO 11224
11224: DISABLE
// begin globalGameSaveCounter := 0 ;
11225: LD_ADDR_EXP 26
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11233: LD_STRING setGameSaveCounter(0)
11235: PPUSH
11236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11240: LD_STRING initStreamRollete();
11242: PPUSH
11243: CALL_OW 559
// InitStreamMode ;
11247: CALL 12573 0 0
// DefineStreamItems ( false ) ;
11251: LD_INT 0
11253: PPUSH
11254: CALL 13037 0 1
// end ;
11258: END
// export function SOS_MapStart ( ) ; begin
11259: LD_INT 0
11261: PPUSH
// if streamModeActive then
11262: LD_EXP 27
11266: IFFALSE 11275
// DefineStreamItems ( true ) ;
11268: LD_INT 1
11270: PPUSH
11271: CALL 13037 0 1
// UpdateLuaVariables ( ) ;
11275: CALL 11292 0 0
// UpdateFactoryWaypoints ( ) ;
11279: CALL 25906 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11283: CALL 26163 0 0
// end ;
11287: LD_VAR 0 1
11291: RET
// function UpdateLuaVariables ( ) ; begin
11292: LD_INT 0
11294: PPUSH
// if globalGameSaveCounter then
11295: LD_EXP 26
11299: IFFALSE 11333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11301: LD_ADDR_EXP 26
11305: PUSH
11306: LD_EXP 26
11310: PPUSH
11311: CALL 70793 0 1
11315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11316: LD_STRING setGameSaveCounter(
11318: PUSH
11319: LD_EXP 26
11323: STR
11324: PUSH
11325: LD_STRING )
11327: STR
11328: PPUSH
11329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11333: LD_STRING setGameDifficulty(
11335: PUSH
11336: LD_OWVAR 67
11340: STR
11341: PUSH
11342: LD_STRING )
11344: STR
11345: PPUSH
11346: CALL_OW 559
// end ;
11350: LD_VAR 0 1
11354: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11355: LD_INT 0
11357: PPUSH
// if p2 = stream_mode then
11358: LD_VAR 0 2
11362: PUSH
11363: LD_INT 100
11365: EQUAL
11366: IFFALSE 12369
// begin if not StreamModeActive then
11368: LD_EXP 27
11372: NOT
11373: IFFALSE 11383
// StreamModeActive := true ;
11375: LD_ADDR_EXP 27
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 0 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 11397
// InitStreamMode ;
11393: CALL 12573 0 0
// if p3 = 1 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11415
// sRocket := true ;
11407: LD_ADDR_EXP 32
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 2 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 2
11422: EQUAL
11423: IFFALSE 11433
// sSpeed := true ;
11425: LD_ADDR_EXP 31
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 3 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 3
11440: EQUAL
11441: IFFALSE 11451
// sEngine := true ;
11443: LD_ADDR_EXP 33
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 4 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 4
11458: EQUAL
11459: IFFALSE 11469
// sSpec := true ;
11461: LD_ADDR_EXP 30
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 5 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 5
11476: EQUAL
11477: IFFALSE 11487
// sLevel := true ;
11479: LD_ADDR_EXP 34
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 6 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 6
11494: EQUAL
11495: IFFALSE 11505
// sArmoury := true ;
11497: LD_ADDR_EXP 35
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 7 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 7
11512: EQUAL
11513: IFFALSE 11523
// sRadar := true ;
11515: LD_ADDR_EXP 36
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 8 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 8
11530: EQUAL
11531: IFFALSE 11541
// sBunker := true ;
11533: LD_ADDR_EXP 37
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 9 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 9
11548: EQUAL
11549: IFFALSE 11559
// sHack := true ;
11551: LD_ADDR_EXP 38
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 10 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 10
11566: EQUAL
11567: IFFALSE 11577
// sFire := true ;
11569: LD_ADDR_EXP 39
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 11 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 11
11584: EQUAL
11585: IFFALSE 11595
// sRefresh := true ;
11587: LD_ADDR_EXP 40
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 12 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 12
11602: EQUAL
11603: IFFALSE 11613
// sExp := true ;
11605: LD_ADDR_EXP 41
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 13 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 13
11620: EQUAL
11621: IFFALSE 11631
// sDepot := true ;
11623: LD_ADDR_EXP 42
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 14 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 14
11638: EQUAL
11639: IFFALSE 11649
// sFlag := true ;
11641: LD_ADDR_EXP 43
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 15 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 15
11656: EQUAL
11657: IFFALSE 11667
// sKamikadze := true ;
11659: LD_ADDR_EXP 51
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 16 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 16
11674: EQUAL
11675: IFFALSE 11685
// sTroll := true ;
11677: LD_ADDR_EXP 52
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 17 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 17
11692: EQUAL
11693: IFFALSE 11703
// sSlow := true ;
11695: LD_ADDR_EXP 53
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 18 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 18
11710: EQUAL
11711: IFFALSE 11721
// sLack := true ;
11713: LD_ADDR_EXP 54
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 19 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 19
11728: EQUAL
11729: IFFALSE 11739
// sTank := true ;
11731: LD_ADDR_EXP 56
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 20 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 20
11746: EQUAL
11747: IFFALSE 11757
// sRemote := true ;
11749: LD_ADDR_EXP 57
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 21 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 21
11764: EQUAL
11765: IFFALSE 11775
// sPowell := true ;
11767: LD_ADDR_EXP 58
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 22 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 22
11782: EQUAL
11783: IFFALSE 11793
// sTeleport := true ;
11785: LD_ADDR_EXP 61
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 23 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 23
11800: EQUAL
11801: IFFALSE 11811
// sOilTower := true ;
11803: LD_ADDR_EXP 63
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 24 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 24
11818: EQUAL
11819: IFFALSE 11829
// sShovel := true ;
11821: LD_ADDR_EXP 64
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 25 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 25
11836: EQUAL
11837: IFFALSE 11847
// sSheik := true ;
11839: LD_ADDR_EXP 65
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 26 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 26
11854: EQUAL
11855: IFFALSE 11865
// sEarthquake := true ;
11857: LD_ADDR_EXP 67
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 27 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 27
11872: EQUAL
11873: IFFALSE 11883
// sAI := true ;
11875: LD_ADDR_EXP 68
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 28 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 28
11890: EQUAL
11891: IFFALSE 11901
// sCargo := true ;
11893: LD_ADDR_EXP 71
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 29 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 29
11908: EQUAL
11909: IFFALSE 11919
// sDLaser := true ;
11911: LD_ADDR_EXP 72
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 30 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 30
11926: EQUAL
11927: IFFALSE 11937
// sExchange := true ;
11929: LD_ADDR_EXP 73
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 31 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 31
11944: EQUAL
11945: IFFALSE 11955
// sFac := true ;
11947: LD_ADDR_EXP 74
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 32 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 32
11962: EQUAL
11963: IFFALSE 11973
// sPower := true ;
11965: LD_ADDR_EXP 75
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 33 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 33
11980: EQUAL
11981: IFFALSE 11991
// sRandom := true ;
11983: LD_ADDR_EXP 76
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 34 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 34
11998: EQUAL
11999: IFFALSE 12009
// sShield := true ;
12001: LD_ADDR_EXP 77
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 35 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 35
12016: EQUAL
12017: IFFALSE 12027
// sTime := true ;
12019: LD_ADDR_EXP 78
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 36 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 36
12034: EQUAL
12035: IFFALSE 12045
// sTools := true ;
12037: LD_ADDR_EXP 79
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 101 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 101
12052: EQUAL
12053: IFFALSE 12063
// sSold := true ;
12055: LD_ADDR_EXP 44
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if p3 = 102 then
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 102
12070: EQUAL
12071: IFFALSE 12081
// sDiff := true ;
12073: LD_ADDR_EXP 45
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// if p3 = 103 then
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 103
12088: EQUAL
12089: IFFALSE 12099
// sFog := true ;
12091: LD_ADDR_EXP 48
12095: PUSH
12096: LD_INT 1
12098: ST_TO_ADDR
// if p3 = 104 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_INT 104
12106: EQUAL
12107: IFFALSE 12117
// sReset := true ;
12109: LD_ADDR_EXP 49
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// if p3 = 105 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 105
12124: EQUAL
12125: IFFALSE 12135
// sSun := true ;
12127: LD_ADDR_EXP 50
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// if p3 = 106 then
12135: LD_VAR 0 3
12139: PUSH
12140: LD_INT 106
12142: EQUAL
12143: IFFALSE 12153
// sTiger := true ;
12145: LD_ADDR_EXP 46
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// if p3 = 107 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 107
12160: EQUAL
12161: IFFALSE 12171
// sBomb := true ;
12163: LD_ADDR_EXP 47
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if p3 = 108 then
12171: LD_VAR 0 3
12175: PUSH
12176: LD_INT 108
12178: EQUAL
12179: IFFALSE 12189
// sWound := true ;
12181: LD_ADDR_EXP 55
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// if p3 = 109 then
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 109
12196: EQUAL
12197: IFFALSE 12207
// sBetray := true ;
12199: LD_ADDR_EXP 59
12203: PUSH
12204: LD_INT 1
12206: ST_TO_ADDR
// if p3 = 110 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_INT 110
12214: EQUAL
12215: IFFALSE 12225
// sContamin := true ;
12217: LD_ADDR_EXP 60
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if p3 = 111 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 111
12232: EQUAL
12233: IFFALSE 12243
// sOil := true ;
12235: LD_ADDR_EXP 62
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// if p3 = 112 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 112
12250: EQUAL
12251: IFFALSE 12261
// sStu := true ;
12253: LD_ADDR_EXP 66
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// if p3 = 113 then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 113
12268: EQUAL
12269: IFFALSE 12279
// sBazooka := true ;
12271: LD_ADDR_EXP 69
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// if p3 = 114 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 114
12286: EQUAL
12287: IFFALSE 12297
// sMortar := true ;
12289: LD_ADDR_EXP 70
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// if p3 = 115 then
12297: LD_VAR 0 3
12301: PUSH
12302: LD_INT 115
12304: EQUAL
12305: IFFALSE 12315
// sRanger := true ;
12307: LD_ADDR_EXP 80
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// if p3 = 116 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 116
12322: EQUAL
12323: IFFALSE 12333
// sComputer := true ;
12325: LD_ADDR_EXP 81
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// if p3 = 117 then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_INT 117
12340: EQUAL
12341: IFFALSE 12351
// s30 := true ;
12343: LD_ADDR_EXP 82
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// if p3 = 118 then
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 118
12358: EQUAL
12359: IFFALSE 12369
// s60 := true ;
12361: LD_ADDR_EXP 83
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// end ; if p2 = hack_mode then
12369: LD_VAR 0 2
12373: PUSH
12374: LD_INT 101
12376: EQUAL
12377: IFFALSE 12505
// begin case p3 of 1 :
12379: LD_VAR 0 3
12383: PUSH
12384: LD_INT 1
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12399
12392: POP
// hHackUnlimitedResources ; 2 :
12393: CALL 24652 0 0
12397: GO 12505
12399: LD_INT 2
12401: DOUBLE
12402: EQUAL
12403: IFTRUE 12407
12405: GO 12414
12407: POP
// hHackSetLevel10 ; 3 :
12408: CALL 24785 0 0
12412: GO 12505
12414: LD_INT 3
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12429
12422: POP
// hHackSetLevel10YourUnits ; 4 :
12423: CALL 24870 0 0
12427: GO 12505
12429: LD_INT 4
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12444
12437: POP
// hHackInvincible ; 5 :
12438: CALL 25318 0 0
12442: GO 12505
12444: LD_INT 5
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12459
12452: POP
// hHackInvisible ; 6 :
12453: CALL 25429 0 0
12457: GO 12505
12459: LD_INT 6
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12474
12467: POP
// hHackChangeYourSide ; 7 :
12468: CALL 25486 0 0
12472: GO 12505
12474: LD_INT 7
12476: DOUBLE
12477: EQUAL
12478: IFTRUE 12482
12480: GO 12489
12482: POP
// hHackChangeUnitSide ; 8 :
12483: CALL 25528 0 0
12487: GO 12505
12489: LD_INT 8
12491: DOUBLE
12492: EQUAL
12493: IFTRUE 12497
12495: GO 12504
12497: POP
// hHackFog ; end ;
12498: CALL 25629 0 0
12502: GO 12505
12504: POP
// end ; if p2 = game_save_mode then
12505: LD_VAR 0 2
12509: PUSH
12510: LD_INT 102
12512: EQUAL
12513: IFFALSE 12568
// begin if p3 = 1 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: IFFALSE 12535
// globalGameSaveCounter := p4 ;
12525: LD_ADDR_EXP 26
12529: PUSH
12530: LD_VAR 0 4
12534: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 2
12542: EQUAL
12543: PUSH
12544: LD_EXP 26
12548: AND
12549: IFFALSE 12568
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12551: LD_STRING setGameSaveCounter(
12553: PUSH
12554: LD_EXP 26
12558: STR
12559: PUSH
12560: LD_STRING )
12562: STR
12563: PPUSH
12564: CALL_OW 559
// end ; end ;
12568: LD_VAR 0 7
12572: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12573: LD_INT 0
12575: PPUSH
// streamModeActive := false ;
12576: LD_ADDR_EXP 27
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// normalCounter := 36 ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 36
12591: ST_TO_ADDR
// hardcoreCounter := 18 ;
12592: LD_ADDR_EXP 29
12596: PUSH
12597: LD_INT 18
12599: ST_TO_ADDR
// sRocket := false ;
12600: LD_ADDR_EXP 32
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sSpeed := false ;
12608: LD_ADDR_EXP 31
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sEngine := false ;
12616: LD_ADDR_EXP 33
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sSpec := false ;
12624: LD_ADDR_EXP 30
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sLevel := false ;
12632: LD_ADDR_EXP 34
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sArmoury := false ;
12640: LD_ADDR_EXP 35
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sRadar := false ;
12648: LD_ADDR_EXP 36
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sBunker := false ;
12656: LD_ADDR_EXP 37
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sHack := false ;
12664: LD_ADDR_EXP 38
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sFire := false ;
12672: LD_ADDR_EXP 39
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sRefresh := false ;
12680: LD_ADDR_EXP 40
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sExp := false ;
12688: LD_ADDR_EXP 41
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sDepot := false ;
12696: LD_ADDR_EXP 42
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sFlag := false ;
12704: LD_ADDR_EXP 43
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sKamikadze := false ;
12712: LD_ADDR_EXP 51
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sTroll := false ;
12720: LD_ADDR_EXP 52
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sSlow := false ;
12728: LD_ADDR_EXP 53
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sLack := false ;
12736: LD_ADDR_EXP 54
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sTank := false ;
12744: LD_ADDR_EXP 56
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sRemote := false ;
12752: LD_ADDR_EXP 57
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sPowell := false ;
12760: LD_ADDR_EXP 58
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sTeleport := false ;
12768: LD_ADDR_EXP 61
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sOilTower := false ;
12776: LD_ADDR_EXP 63
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sShovel := false ;
12784: LD_ADDR_EXP 64
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sSheik := false ;
12792: LD_ADDR_EXP 65
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sEarthquake := false ;
12800: LD_ADDR_EXP 67
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sAI := false ;
12808: LD_ADDR_EXP 68
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sCargo := false ;
12816: LD_ADDR_EXP 71
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sDLaser := false ;
12824: LD_ADDR_EXP 72
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sExchange := false ;
12832: LD_ADDR_EXP 73
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sFac := false ;
12840: LD_ADDR_EXP 74
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sPower := false ;
12848: LD_ADDR_EXP 75
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sRandom := false ;
12856: LD_ADDR_EXP 76
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sShield := false ;
12864: LD_ADDR_EXP 77
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sTime := false ;
12872: LD_ADDR_EXP 78
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sTools := false ;
12880: LD_ADDR_EXP 79
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sSold := false ;
12888: LD_ADDR_EXP 44
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sDiff := false ;
12896: LD_ADDR_EXP 45
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sFog := false ;
12904: LD_ADDR_EXP 48
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sReset := false ;
12912: LD_ADDR_EXP 49
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sSun := false ;
12920: LD_ADDR_EXP 50
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sTiger := false ;
12928: LD_ADDR_EXP 46
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sBomb := false ;
12936: LD_ADDR_EXP 47
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sWound := false ;
12944: LD_ADDR_EXP 55
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sBetray := false ;
12952: LD_ADDR_EXP 59
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sContamin := false ;
12960: LD_ADDR_EXP 60
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sOil := false ;
12968: LD_ADDR_EXP 62
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sStu := false ;
12976: LD_ADDR_EXP 66
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sBazooka := false ;
12984: LD_ADDR_EXP 69
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sMortar := false ;
12992: LD_ADDR_EXP 70
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sRanger := false ;
13000: LD_ADDR_EXP 80
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sComputer := false ;
13008: LD_ADDR_EXP 81
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// s30 := false ;
13016: LD_ADDR_EXP 82
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// s60 := false ;
13024: LD_ADDR_EXP 83
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// end ;
13032: LD_VAR 0 1
13036: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// result := [ ] ;
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: EMPTY
13052: ST_TO_ADDR
// if campaign_id = 1 then
13053: LD_OWVAR 69
13057: PUSH
13058: LD_INT 1
13060: EQUAL
13061: IFFALSE 16227
// begin case mission_number of 1 :
13063: LD_OWVAR 70
13067: PUSH
13068: LD_INT 1
13070: DOUBLE
13071: EQUAL
13072: IFTRUE 13076
13074: GO 13152
13076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13077: LD_ADDR_VAR 0 2
13081: PUSH
13082: LD_INT 2
13084: PUSH
13085: LD_INT 4
13087: PUSH
13088: LD_INT 11
13090: PUSH
13091: LD_INT 12
13093: PUSH
13094: LD_INT 15
13096: PUSH
13097: LD_INT 16
13099: PUSH
13100: LD_INT 22
13102: PUSH
13103: LD_INT 23
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 101
13122: PUSH
13123: LD_INT 102
13125: PUSH
13126: LD_INT 106
13128: PUSH
13129: LD_INT 116
13131: PUSH
13132: LD_INT 117
13134: PUSH
13135: LD_INT 118
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: ST_TO_ADDR
13150: GO 16225
13152: LD_INT 2
13154: DOUBLE
13155: EQUAL
13156: IFTRUE 13160
13158: GO 13244
13160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 4
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 15
13180: PUSH
13181: LD_INT 16
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_INT 23
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 101
13206: PUSH
13207: LD_INT 102
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 108
13218: PUSH
13219: LD_INT 116
13221: PUSH
13222: LD_INT 117
13224: PUSH
13225: LD_INT 118
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 16225
13244: LD_INT 3
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13340
13252: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 15
13275: PUSH
13276: LD_INT 16
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: LD_INT 26
13284: PUSH
13285: LD_INT 36
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 116
13317: PUSH
13318: LD_INT 117
13320: PUSH
13321: LD_INT 118
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 16225
13340: LD_INT 4
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13444
13348: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 11
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 22
13380: PUSH
13381: LD_INT 23
13383: PUSH
13384: LD_INT 26
13386: PUSH
13387: LD_INT 36
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 101
13406: PUSH
13407: LD_INT 102
13409: PUSH
13410: LD_INT 105
13412: PUSH
13413: LD_INT 106
13415: PUSH
13416: LD_INT 108
13418: PUSH
13419: LD_INT 116
13421: PUSH
13422: LD_INT 117
13424: PUSH
13425: LD_INT 118
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
13442: GO 16225
13444: LD_INT 5
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13564
13452: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: LD_INT 5
13466: PUSH
13467: LD_INT 6
13469: PUSH
13470: LD_INT 8
13472: PUSH
13473: LD_INT 11
13475: PUSH
13476: LD_INT 12
13478: PUSH
13479: LD_INT 15
13481: PUSH
13482: LD_INT 16
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 23
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 101
13518: PUSH
13519: LD_INT 102
13521: PUSH
13522: LD_INT 105
13524: PUSH
13525: LD_INT 106
13527: PUSH
13528: LD_INT 108
13530: PUSH
13531: LD_INT 109
13533: PUSH
13534: LD_INT 112
13536: PUSH
13537: LD_INT 116
13539: PUSH
13540: LD_INT 117
13542: PUSH
13543: LD_INT 118
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 16225
13564: LD_INT 6
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13704
13572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: LD_INT 6
13589: PUSH
13590: LD_INT 8
13592: PUSH
13593: LD_INT 11
13595: PUSH
13596: LD_INT 12
13598: PUSH
13599: LD_INT 15
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 20
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 23
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 31
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 36
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 105
13664: PUSH
13665: LD_INT 106
13667: PUSH
13668: LD_INT 108
13670: PUSH
13671: LD_INT 109
13673: PUSH
13674: LD_INT 112
13676: PUSH
13677: LD_INT 116
13679: PUSH
13680: LD_INT 117
13682: PUSH
13683: LD_INT 118
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: ST_TO_ADDR
13702: GO 16225
13704: LD_INT 7
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13824
13712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: LD_INT 4
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: LD_INT 7
13729: PUSH
13730: LD_INT 11
13732: PUSH
13733: LD_INT 12
13735: PUSH
13736: LD_INT 15
13738: PUSH
13739: LD_INT 16
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 25
13756: PUSH
13757: LD_INT 26
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 101
13778: PUSH
13779: LD_INT 102
13781: PUSH
13782: LD_INT 103
13784: PUSH
13785: LD_INT 105
13787: PUSH
13788: LD_INT 106
13790: PUSH
13791: LD_INT 108
13793: PUSH
13794: LD_INT 112
13796: PUSH
13797: LD_INT 116
13799: PUSH
13800: LD_INT 117
13802: PUSH
13803: LD_INT 118
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: ST_TO_ADDR
13822: GO 16225
13824: LD_INT 8
13826: DOUBLE
13827: EQUAL
13828: IFTRUE 13832
13830: GO 13972
13832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 7
13852: PUSH
13853: LD_INT 8
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 15
13864: PUSH
13865: LD_INT 16
13867: PUSH
13868: LD_INT 20
13870: PUSH
13871: LD_INT 21
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 23
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 26
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: LD_INT 31
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 101
13922: PUSH
13923: LD_INT 102
13925: PUSH
13926: LD_INT 103
13928: PUSH
13929: LD_INT 105
13931: PUSH
13932: LD_INT 106
13934: PUSH
13935: LD_INT 108
13937: PUSH
13938: LD_INT 109
13940: PUSH
13941: LD_INT 112
13943: PUSH
13944: LD_INT 116
13946: PUSH
13947: LD_INT 117
13949: PUSH
13950: LD_INT 118
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: ST_TO_ADDR
13970: GO 16225
13972: LD_INT 9
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 14128
13980: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13981: LD_ADDR_VAR 0 2
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: LD_INT 6
13997: PUSH
13998: LD_INT 7
14000: PUSH
14001: LD_INT 8
14003: PUSH
14004: LD_INT 11
14006: PUSH
14007: LD_INT 12
14009: PUSH
14010: LD_INT 15
14012: PUSH
14013: LD_INT 16
14015: PUSH
14016: LD_INT 20
14018: PUSH
14019: LD_INT 21
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 23
14027: PUSH
14028: LD_INT 25
14030: PUSH
14031: LD_INT 26
14033: PUSH
14034: LD_INT 28
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_INT 31
14042: PUSH
14043: LD_INT 32
14045: PUSH
14046: LD_INT 36
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 101
14074: PUSH
14075: LD_INT 102
14077: PUSH
14078: LD_INT 103
14080: PUSH
14081: LD_INT 105
14083: PUSH
14084: LD_INT 106
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 112
14095: PUSH
14096: LD_INT 114
14098: PUSH
14099: LD_INT 116
14101: PUSH
14102: LD_INT 117
14104: PUSH
14105: LD_INT 118
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
14126: GO 16225
14128: LD_INT 10
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14332
14136: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 2
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: LD_INT 5
14150: PUSH
14151: LD_INT 6
14153: PUSH
14154: LD_INT 7
14156: PUSH
14157: LD_INT 8
14159: PUSH
14160: LD_INT 9
14162: PUSH
14163: LD_INT 10
14165: PUSH
14166: LD_INT 11
14168: PUSH
14169: LD_INT 12
14171: PUSH
14172: LD_INT 13
14174: PUSH
14175: LD_INT 14
14177: PUSH
14178: LD_INT 15
14180: PUSH
14181: LD_INT 16
14183: PUSH
14184: LD_INT 17
14186: PUSH
14187: LD_INT 18
14189: PUSH
14190: LD_INT 19
14192: PUSH
14193: LD_INT 20
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_INT 23
14204: PUSH
14205: LD_INT 24
14207: PUSH
14208: LD_INT 25
14210: PUSH
14211: LD_INT 26
14213: PUSH
14214: LD_INT 28
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 31
14222: PUSH
14223: LD_INT 32
14225: PUSH
14226: LD_INT 36
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 101
14262: PUSH
14263: LD_INT 102
14265: PUSH
14266: LD_INT 103
14268: PUSH
14269: LD_INT 104
14271: PUSH
14272: LD_INT 105
14274: PUSH
14275: LD_INT 106
14277: PUSH
14278: LD_INT 107
14280: PUSH
14281: LD_INT 108
14283: PUSH
14284: LD_INT 109
14286: PUSH
14287: LD_INT 110
14289: PUSH
14290: LD_INT 111
14292: PUSH
14293: LD_INT 112
14295: PUSH
14296: LD_INT 114
14298: PUSH
14299: LD_INT 116
14301: PUSH
14302: LD_INT 117
14304: PUSH
14305: LD_INT 118
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: ST_TO_ADDR
14330: GO 16225
14332: LD_INT 11
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14340
14338: GO 14544
14340: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14341: LD_ADDR_VAR 0 2
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 4
14354: PUSH
14355: LD_INT 5
14357: PUSH
14358: LD_INT 6
14360: PUSH
14361: LD_INT 7
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: LD_INT 9
14369: PUSH
14370: LD_INT 10
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 13
14381: PUSH
14382: LD_INT 14
14384: PUSH
14385: LD_INT 15
14387: PUSH
14388: LD_INT 16
14390: PUSH
14391: LD_INT 17
14393: PUSH
14394: LD_INT 18
14396: PUSH
14397: LD_INT 19
14399: PUSH
14400: LD_INT 20
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 34
14435: PUSH
14436: LD_INT 36
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 101
14474: PUSH
14475: LD_INT 102
14477: PUSH
14478: LD_INT 103
14480: PUSH
14481: LD_INT 104
14483: PUSH
14484: LD_INT 105
14486: PUSH
14487: LD_INT 106
14489: PUSH
14490: LD_INT 107
14492: PUSH
14493: LD_INT 108
14495: PUSH
14496: LD_INT 109
14498: PUSH
14499: LD_INT 110
14501: PUSH
14502: LD_INT 111
14504: PUSH
14505: LD_INT 112
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 116
14513: PUSH
14514: LD_INT 117
14516: PUSH
14517: LD_INT 118
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: ST_TO_ADDR
14542: GO 16225
14544: LD_INT 12
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14772
14552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14553: LD_ADDR_VAR 0 2
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: LD_INT 2
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 4
14569: PUSH
14570: LD_INT 5
14572: PUSH
14573: LD_INT 6
14575: PUSH
14576: LD_INT 7
14578: PUSH
14579: LD_INT 8
14581: PUSH
14582: LD_INT 9
14584: PUSH
14585: LD_INT 10
14587: PUSH
14588: LD_INT 11
14590: PUSH
14591: LD_INT 12
14593: PUSH
14594: LD_INT 13
14596: PUSH
14597: LD_INT 14
14599: PUSH
14600: LD_INT 15
14602: PUSH
14603: LD_INT 16
14605: PUSH
14606: LD_INT 17
14608: PUSH
14609: LD_INT 18
14611: PUSH
14612: LD_INT 19
14614: PUSH
14615: LD_INT 20
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 23
14626: PUSH
14627: LD_INT 24
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 26
14635: PUSH
14636: LD_INT 27
14638: PUSH
14639: LD_INT 28
14641: PUSH
14642: LD_INT 30
14644: PUSH
14645: LD_INT 31
14647: PUSH
14648: LD_INT 32
14650: PUSH
14651: LD_INT 33
14653: PUSH
14654: LD_INT 34
14656: PUSH
14657: LD_INT 36
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 101
14698: PUSH
14699: LD_INT 102
14701: PUSH
14702: LD_INT 103
14704: PUSH
14705: LD_INT 104
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 107
14716: PUSH
14717: LD_INT 108
14719: PUSH
14720: LD_INT 109
14722: PUSH
14723: LD_INT 110
14725: PUSH
14726: LD_INT 111
14728: PUSH
14729: LD_INT 112
14731: PUSH
14732: LD_INT 113
14734: PUSH
14735: LD_INT 114
14737: PUSH
14738: LD_INT 116
14740: PUSH
14741: LD_INT 117
14743: PUSH
14744: LD_INT 118
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 16225
14772: LD_INT 13
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14988
14780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: LD_INT 4
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 8
14803: PUSH
14804: LD_INT 9
14806: PUSH
14807: LD_INT 10
14809: PUSH
14810: LD_INT 11
14812: PUSH
14813: LD_INT 12
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 101
14914: PUSH
14915: LD_INT 102
14917: PUSH
14918: LD_INT 103
14920: PUSH
14921: LD_INT 104
14923: PUSH
14924: LD_INT 105
14926: PUSH
14927: LD_INT 106
14929: PUSH
14930: LD_INT 107
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 109
14938: PUSH
14939: LD_INT 110
14941: PUSH
14942: LD_INT 111
14944: PUSH
14945: LD_INT 112
14947: PUSH
14948: LD_INT 113
14950: PUSH
14951: LD_INT 114
14953: PUSH
14954: LD_INT 116
14956: PUSH
14957: LD_INT 117
14959: PUSH
14960: LD_INT 118
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: ST_TO_ADDR
14986: GO 16225
14988: LD_INT 14
14990: DOUBLE
14991: EQUAL
14992: IFTRUE 14996
14994: GO 15220
14996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: LD_INT 6
15019: PUSH
15020: LD_INT 7
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: LD_INT 9
15028: PUSH
15029: LD_INT 10
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: LD_INT 15
15046: PUSH
15047: LD_INT 16
15049: PUSH
15050: LD_INT 17
15052: PUSH
15053: LD_INT 18
15055: PUSH
15056: LD_INT 19
15058: PUSH
15059: LD_INT 20
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 23
15070: PUSH
15071: LD_INT 24
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 27
15082: PUSH
15083: LD_INT 28
15085: PUSH
15086: LD_INT 29
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 31
15094: PUSH
15095: LD_INT 32
15097: PUSH
15098: LD_INT 33
15100: PUSH
15101: LD_INT 34
15103: PUSH
15104: LD_INT 36
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 101
15146: PUSH
15147: LD_INT 102
15149: PUSH
15150: LD_INT 103
15152: PUSH
15153: LD_INT 104
15155: PUSH
15156: LD_INT 105
15158: PUSH
15159: LD_INT 106
15161: PUSH
15162: LD_INT 107
15164: PUSH
15165: LD_INT 108
15167: PUSH
15168: LD_INT 109
15170: PUSH
15171: LD_INT 110
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 112
15179: PUSH
15180: LD_INT 113
15182: PUSH
15183: LD_INT 114
15185: PUSH
15186: LD_INT 116
15188: PUSH
15189: LD_INT 117
15191: PUSH
15192: LD_INT 118
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: ST_TO_ADDR
15218: GO 16225
15220: LD_INT 15
15222: DOUBLE
15223: EQUAL
15224: IFTRUE 15228
15226: GO 15452
15228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 4
15245: PUSH
15246: LD_INT 5
15248: PUSH
15249: LD_INT 6
15251: PUSH
15252: LD_INT 7
15254: PUSH
15255: LD_INT 8
15257: PUSH
15258: LD_INT 9
15260: PUSH
15261: LD_INT 10
15263: PUSH
15264: LD_INT 11
15266: PUSH
15267: LD_INT 12
15269: PUSH
15270: LD_INT 13
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 29
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 31
15326: PUSH
15327: LD_INT 32
15329: PUSH
15330: LD_INT 33
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: LD_INT 36
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 101
15378: PUSH
15379: LD_INT 102
15381: PUSH
15382: LD_INT 103
15384: PUSH
15385: LD_INT 104
15387: PUSH
15388: LD_INT 105
15390: PUSH
15391: LD_INT 106
15393: PUSH
15394: LD_INT 107
15396: PUSH
15397: LD_INT 108
15399: PUSH
15400: LD_INT 109
15402: PUSH
15403: LD_INT 110
15405: PUSH
15406: LD_INT 111
15408: PUSH
15409: LD_INT 112
15411: PUSH
15412: LD_INT 113
15414: PUSH
15415: LD_INT 114
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: ST_TO_ADDR
15450: GO 16225
15452: LD_INT 16
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15596
15460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: LD_INT 5
15474: PUSH
15475: LD_INT 7
15477: PUSH
15478: LD_INT 11
15480: PUSH
15481: LD_INT 12
15483: PUSH
15484: LD_INT 15
15486: PUSH
15487: LD_INT 16
15489: PUSH
15490: LD_INT 20
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 23
15501: PUSH
15502: LD_INT 25
15504: PUSH
15505: LD_INT 26
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 31
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: LD_INT 33
15519: PUSH
15520: LD_INT 34
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 101
15546: PUSH
15547: LD_INT 102
15549: PUSH
15550: LD_INT 103
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 113
15564: PUSH
15565: LD_INT 114
15567: PUSH
15568: LD_INT 116
15570: PUSH
15571: LD_INT 117
15573: PUSH
15574: LD_INT 118
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 16225
15596: LD_INT 17
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15828
15604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: LD_INT 5
15624: PUSH
15625: LD_INT 6
15627: PUSH
15628: LD_INT 7
15630: PUSH
15631: LD_INT 8
15633: PUSH
15634: LD_INT 9
15636: PUSH
15637: LD_INT 10
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: LD_INT 13
15648: PUSH
15649: LD_INT 14
15651: PUSH
15652: LD_INT 15
15654: PUSH
15655: LD_INT 16
15657: PUSH
15658: LD_INT 17
15660: PUSH
15661: LD_INT 18
15663: PUSH
15664: LD_INT 19
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 24
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 26
15687: PUSH
15688: LD_INT 27
15690: PUSH
15691: LD_INT 28
15693: PUSH
15694: LD_INT 29
15696: PUSH
15697: LD_INT 30
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: LD_INT 34
15711: PUSH
15712: LD_INT 36
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 101
15754: PUSH
15755: LD_INT 102
15757: PUSH
15758: LD_INT 103
15760: PUSH
15761: LD_INT 104
15763: PUSH
15764: LD_INT 105
15766: PUSH
15767: LD_INT 106
15769: PUSH
15770: LD_INT 107
15772: PUSH
15773: LD_INT 108
15775: PUSH
15776: LD_INT 109
15778: PUSH
15779: LD_INT 110
15781: PUSH
15782: LD_INT 111
15784: PUSH
15785: LD_INT 112
15787: PUSH
15788: LD_INT 113
15790: PUSH
15791: LD_INT 114
15793: PUSH
15794: LD_INT 116
15796: PUSH
15797: LD_INT 117
15799: PUSH
15800: LD_INT 118
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
15826: GO 16225
15828: LD_INT 18
15830: DOUBLE
15831: EQUAL
15832: IFTRUE 15836
15834: GO 15984
15836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: LD_INT 4
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: LD_INT 7
15853: PUSH
15854: LD_INT 11
15856: PUSH
15857: LD_INT 12
15859: PUSH
15860: LD_INT 15
15862: PUSH
15863: LD_INT 16
15865: PUSH
15866: LD_INT 20
15868: PUSH
15869: LD_INT 21
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 23
15877: PUSH
15878: LD_INT 25
15880: PUSH
15881: LD_INT 26
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 31
15889: PUSH
15890: LD_INT 32
15892: PUSH
15893: LD_INT 33
15895: PUSH
15896: LD_INT 34
15898: PUSH
15899: LD_INT 35
15901: PUSH
15902: LD_INT 36
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 101
15930: PUSH
15931: LD_INT 102
15933: PUSH
15934: LD_INT 103
15936: PUSH
15937: LD_INT 106
15939: PUSH
15940: LD_INT 108
15942: PUSH
15943: LD_INT 112
15945: PUSH
15946: LD_INT 113
15948: PUSH
15949: LD_INT 114
15951: PUSH
15952: LD_INT 115
15954: PUSH
15955: LD_INT 116
15957: PUSH
15958: LD_INT 117
15960: PUSH
15961: LD_INT 118
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: ST_TO_ADDR
15982: GO 16225
15984: LD_INT 19
15986: DOUBLE
15987: EQUAL
15988: IFTRUE 15992
15990: GO 16224
15992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15993: LD_ADDR_VAR 0 2
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 4
16009: PUSH
16010: LD_INT 5
16012: PUSH
16013: LD_INT 6
16015: PUSH
16016: LD_INT 7
16018: PUSH
16019: LD_INT 8
16021: PUSH
16022: LD_INT 9
16024: PUSH
16025: LD_INT 10
16027: PUSH
16028: LD_INT 11
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: LD_INT 13
16036: PUSH
16037: LD_INT 14
16039: PUSH
16040: LD_INT 15
16042: PUSH
16043: LD_INT 16
16045: PUSH
16046: LD_INT 17
16048: PUSH
16049: LD_INT 18
16051: PUSH
16052: LD_INT 19
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_INT 23
16066: PUSH
16067: LD_INT 24
16069: PUSH
16070: LD_INT 25
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: LD_INT 27
16078: PUSH
16079: LD_INT 28
16081: PUSH
16082: LD_INT 29
16084: PUSH
16085: LD_INT 30
16087: PUSH
16088: LD_INT 31
16090: PUSH
16091: LD_INT 32
16093: PUSH
16094: LD_INT 33
16096: PUSH
16097: LD_INT 34
16099: PUSH
16100: LD_INT 35
16102: PUSH
16103: LD_INT 36
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 101
16146: PUSH
16147: LD_INT 102
16149: PUSH
16150: LD_INT 103
16152: PUSH
16153: LD_INT 104
16155: PUSH
16156: LD_INT 105
16158: PUSH
16159: LD_INT 106
16161: PUSH
16162: LD_INT 107
16164: PUSH
16165: LD_INT 108
16167: PUSH
16168: LD_INT 109
16170: PUSH
16171: LD_INT 110
16173: PUSH
16174: LD_INT 111
16176: PUSH
16177: LD_INT 112
16179: PUSH
16180: LD_INT 113
16182: PUSH
16183: LD_INT 114
16185: PUSH
16186: LD_INT 115
16188: PUSH
16189: LD_INT 116
16191: PUSH
16192: LD_INT 117
16194: PUSH
16195: LD_INT 118
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: ST_TO_ADDR
16222: GO 16225
16224: POP
// end else
16225: GO 16456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 4
16243: PUSH
16244: LD_INT 5
16246: PUSH
16247: LD_INT 6
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: LD_INT 8
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: LD_INT 10
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 12
16267: PUSH
16268: LD_INT 13
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 15
16276: PUSH
16277: LD_INT 16
16279: PUSH
16280: LD_INT 17
16282: PUSH
16283: LD_INT 18
16285: PUSH
16286: LD_INT 19
16288: PUSH
16289: LD_INT 20
16291: PUSH
16292: LD_INT 21
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 25
16306: PUSH
16307: LD_INT 26
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: LD_INT 28
16315: PUSH
16316: LD_INT 29
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 31
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 33
16330: PUSH
16331: LD_INT 34
16333: PUSH
16334: LD_INT 35
16336: PUSH
16337: LD_INT 36
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 101
16380: PUSH
16381: LD_INT 102
16383: PUSH
16384: LD_INT 103
16386: PUSH
16387: LD_INT 104
16389: PUSH
16390: LD_INT 105
16392: PUSH
16393: LD_INT 106
16395: PUSH
16396: LD_INT 107
16398: PUSH
16399: LD_INT 108
16401: PUSH
16402: LD_INT 109
16404: PUSH
16405: LD_INT 110
16407: PUSH
16408: LD_INT 111
16410: PUSH
16411: LD_INT 112
16413: PUSH
16414: LD_INT 113
16416: PUSH
16417: LD_INT 114
16419: PUSH
16420: LD_INT 115
16422: PUSH
16423: LD_INT 116
16425: PUSH
16426: LD_INT 117
16428: PUSH
16429: LD_INT 118
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// if result then
16456: LD_VAR 0 2
16460: IFFALSE 17246
// begin normal :=  ;
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: LD_STRING 
16469: ST_TO_ADDR
// hardcore :=  ;
16470: LD_ADDR_VAR 0 6
16474: PUSH
16475: LD_STRING 
16477: ST_TO_ADDR
// active :=  ;
16478: LD_ADDR_VAR 0 7
16482: PUSH
16483: LD_STRING 
16485: ST_TO_ADDR
// for i = 1 to normalCounter do
16486: LD_ADDR_VAR 0 8
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_EXP 28
16500: PUSH
16501: FOR_TO
16502: IFFALSE 16603
// begin tmp := 0 ;
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_STRING 0
16511: ST_TO_ADDR
// if result [ 1 ] then
16512: LD_VAR 0 2
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: IFFALSE 16585
// if result [ 1 ] [ 1 ] = i then
16522: LD_VAR 0 2
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PUSH
16535: LD_VAR 0 8
16539: EQUAL
16540: IFFALSE 16585
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_VAR 0 2
16559: PUSH
16560: LD_INT 1
16562: ARRAY
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 3
16571: PPUSH
16572: CALL_OW 1
16576: ST_TO_ADDR
// tmp := 1 ;
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: LD_STRING 1
16584: ST_TO_ADDR
// end ; normal := normal & tmp ;
16585: LD_ADDR_VAR 0 5
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 3
16599: STR
16600: ST_TO_ADDR
// end ;
16601: GO 16501
16603: POP
16604: POP
// for i = 1 to hardcoreCounter do
16605: LD_ADDR_VAR 0 8
16609: PUSH
16610: DOUBLE
16611: LD_INT 1
16613: DEC
16614: ST_TO_ADDR
16615: LD_EXP 29
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16726
// begin tmp := 0 ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_STRING 0
16630: ST_TO_ADDR
// if result [ 2 ] then
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: IFFALSE 16708
// if result [ 2 ] [ 1 ] = 100 + i then
16641: LD_VAR 0 2
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PUSH
16654: LD_INT 100
16656: PUSH
16657: LD_VAR 0 8
16661: PLUS
16662: EQUAL
16663: IFFALSE 16708
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_VAR 0 2
16674: PPUSH
16675: LD_INT 2
16677: PPUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_INT 2
16685: ARRAY
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 3
16694: PPUSH
16695: CALL_OW 1
16699: ST_TO_ADDR
// tmp := 1 ;
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_STRING 1
16707: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16708: LD_ADDR_VAR 0 6
16712: PUSH
16713: LD_VAR 0 6
16717: PUSH
16718: LD_VAR 0 3
16722: STR
16723: ST_TO_ADDR
// end ;
16724: GO 16620
16726: POP
16727: POP
// if isGameLoad then
16728: LD_VAR 0 1
16732: IFFALSE 17207
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_EXP 32
16743: PUSH
16744: LD_EXP 31
16748: PUSH
16749: LD_EXP 33
16753: PUSH
16754: LD_EXP 30
16758: PUSH
16759: LD_EXP 34
16763: PUSH
16764: LD_EXP 35
16768: PUSH
16769: LD_EXP 36
16773: PUSH
16774: LD_EXP 37
16778: PUSH
16779: LD_EXP 38
16783: PUSH
16784: LD_EXP 39
16788: PUSH
16789: LD_EXP 40
16793: PUSH
16794: LD_EXP 41
16798: PUSH
16799: LD_EXP 42
16803: PUSH
16804: LD_EXP 43
16808: PUSH
16809: LD_EXP 51
16813: PUSH
16814: LD_EXP 52
16818: PUSH
16819: LD_EXP 53
16823: PUSH
16824: LD_EXP 54
16828: PUSH
16829: LD_EXP 56
16833: PUSH
16834: LD_EXP 57
16838: PUSH
16839: LD_EXP 58
16843: PUSH
16844: LD_EXP 61
16848: PUSH
16849: LD_EXP 63
16853: PUSH
16854: LD_EXP 64
16858: PUSH
16859: LD_EXP 65
16863: PUSH
16864: LD_EXP 67
16868: PUSH
16869: LD_EXP 68
16873: PUSH
16874: LD_EXP 71
16878: PUSH
16879: LD_EXP 72
16883: PUSH
16884: LD_EXP 73
16888: PUSH
16889: LD_EXP 74
16893: PUSH
16894: LD_EXP 75
16898: PUSH
16899: LD_EXP 76
16903: PUSH
16904: LD_EXP 77
16908: PUSH
16909: LD_EXP 78
16913: PUSH
16914: LD_EXP 79
16918: PUSH
16919: LD_EXP 44
16923: PUSH
16924: LD_EXP 45
16928: PUSH
16929: LD_EXP 48
16933: PUSH
16934: LD_EXP 49
16938: PUSH
16939: LD_EXP 50
16943: PUSH
16944: LD_EXP 46
16948: PUSH
16949: LD_EXP 47
16953: PUSH
16954: LD_EXP 55
16958: PUSH
16959: LD_EXP 59
16963: PUSH
16964: LD_EXP 60
16968: PUSH
16969: LD_EXP 62
16973: PUSH
16974: LD_EXP 66
16978: PUSH
16979: LD_EXP 69
16983: PUSH
16984: LD_EXP 70
16988: PUSH
16989: LD_EXP 80
16993: PUSH
16994: LD_EXP 81
16998: PUSH
16999: LD_EXP 82
17003: PUSH
17004: LD_EXP 83
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// tmp :=  ;
17065: LD_ADDR_VAR 0 3
17069: PUSH
17070: LD_STRING 
17072: ST_TO_ADDR
// for i = 1 to normalCounter do
17073: LD_ADDR_VAR 0 8
17077: PUSH
17078: DOUBLE
17079: LD_INT 1
17081: DEC
17082: ST_TO_ADDR
17083: LD_EXP 28
17087: PUSH
17088: FOR_TO
17089: IFFALSE 17125
// begin if flags [ i ] then
17091: LD_VAR 0 4
17095: PUSH
17096: LD_VAR 0 8
17100: ARRAY
17101: IFFALSE 17123
// tmp := tmp & i & ; ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 3
17112: PUSH
17113: LD_VAR 0 8
17117: STR
17118: PUSH
17119: LD_STRING ;
17121: STR
17122: ST_TO_ADDR
// end ;
17123: GO 17088
17125: POP
17126: POP
// for i = 1 to hardcoreCounter do
17127: LD_ADDR_VAR 0 8
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 29
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17189
// begin if flags [ normalCounter + i ] then
17145: LD_VAR 0 4
17149: PUSH
17150: LD_EXP 28
17154: PUSH
17155: LD_VAR 0 8
17159: PLUS
17160: ARRAY
17161: IFFALSE 17187
// tmp := tmp & ( 100 + i ) & ; ;
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 100
17175: PUSH
17176: LD_VAR 0 8
17180: PLUS
17181: STR
17182: PUSH
17183: LD_STRING ;
17185: STR
17186: ST_TO_ADDR
// end ;
17187: GO 17142
17189: POP
17190: POP
// if tmp then
17191: LD_VAR 0 3
17195: IFFALSE 17207
// active := tmp ;
17197: LD_ADDR_VAR 0 7
17201: PUSH
17202: LD_VAR 0 3
17206: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17207: LD_STRING getStreamItemsFromMission("
17209: PUSH
17210: LD_VAR 0 5
17214: STR
17215: PUSH
17216: LD_STRING ","
17218: STR
17219: PUSH
17220: LD_VAR 0 6
17224: STR
17225: PUSH
17226: LD_STRING ","
17228: STR
17229: PUSH
17230: LD_VAR 0 7
17234: STR
17235: PUSH
17236: LD_STRING ")
17238: STR
17239: PPUSH
17240: CALL_OW 559
// end else
17244: GO 17253
// ToLua ( getStreamItemsFromMission("","","") ) ;
17246: LD_STRING getStreamItemsFromMission("","","")
17248: PPUSH
17249: CALL_OW 559
// end ;
17253: LD_VAR 0 2
17257: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 32
17267: AND
17268: IFFALSE 17392
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin enable ;
17277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: LD_INT 34
17300: PUSH
17301: LD_INT 7
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 34
17310: PUSH
17311: LD_INT 45
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 28
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 47
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: ST_TO_ADDR
// if not tmp then
17354: LD_VAR 0 2
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17392
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17390
// begin SetLives ( i , 0 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 0
17383: PPUSH
17384: CALL_OW 234
// end ;
17388: GO 17373
17390: POP
17391: POP
// end ;
17392: PPOPN 2
17394: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17395: LD_EXP 27
17399: PUSH
17400: LD_EXP 33
17404: AND
17405: IFFALSE 17489
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
17413: PPUSH
// begin enable ;
17414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_OWVAR 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 32
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 69
17450: ST_TO_ADDR
// if not tmp then
17451: LD_VAR 0 2
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17489
// for i in tmp do
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_VAR 0 2
17469: PUSH
17470: FOR_IN
17471: IFFALSE 17487
// begin SetLives ( i , 0 ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 234
// end ;
17485: GO 17470
17487: POP
17488: POP
// end ;
17489: PPOPN 2
17491: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17492: LD_EXP 27
17496: PUSH
17497: LD_EXP 30
17501: AND
17502: IFFALSE 17595
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin enable ;
17510: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17511: LD_ADDR_VAR 0 1
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: LD_OWVAR 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 5
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 25
17543: PUSH
17544: LD_INT 9
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 25
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PPUSH
17571: CALL_OW 69
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17593
// begin SetClass ( i , 1 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 336
// end ;
17591: GO 17576
17593: POP
17594: POP
// end ;
17595: PPOPN 1
17597: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17598: LD_EXP 27
17602: PUSH
17603: LD_EXP 31
17607: AND
17608: PUSH
17609: LD_OWVAR 65
17613: PUSH
17614: LD_INT 7
17616: LESS
17617: AND
17618: IFFALSE 17632
17620: GO 17622
17622: DISABLE
// begin enable ;
17623: ENABLE
// game_speed := 7 ;
17624: LD_ADDR_OWVAR 65
17628: PUSH
17629: LD_INT 7
17631: ST_TO_ADDR
// end ;
17632: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17633: LD_EXP 27
17637: PUSH
17638: LD_EXP 34
17642: AND
17643: IFFALSE 17845
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_INT 81
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PPUSH
17684: CALL_OW 69
17688: ST_TO_ADDR
// if not tmp then
17689: LD_VAR 0 3
17693: NOT
17694: IFFALSE 17698
// exit ;
17696: GO 17845
// if tmp > 5 then
17698: LD_VAR 0 3
17702: PUSH
17703: LD_INT 5
17705: GREATER
17706: IFFALSE 17718
// k := 5 else
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_INT 5
17715: ST_TO_ADDR
17716: GO 17728
// k := tmp ;
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: ST_TO_ADDR
// for i := 1 to k do
17728: LD_ADDR_VAR 0 1
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_VAR 0 2
17742: PUSH
17743: FOR_TO
17744: IFFALSE 17843
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 1
17755: ARRAY
17756: PPUSH
17757: LD_VAR 0 1
17761: PUSH
17762: LD_INT 4
17764: MOD
17765: PUSH
17766: LD_INT 1
17768: PLUS
17769: PPUSH
17770: CALL_OW 259
17774: PUSH
17775: LD_INT 10
17777: LESS
17778: IFFALSE 17841
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 1
17789: ARRAY
17790: PPUSH
17791: LD_VAR 0 1
17795: PUSH
17796: LD_INT 4
17798: MOD
17799: PUSH
17800: LD_INT 1
17802: PLUS
17803: PPUSH
17804: LD_VAR 0 3
17808: PUSH
17809: LD_VAR 0 1
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 1
17819: PUSH
17820: LD_INT 4
17822: MOD
17823: PUSH
17824: LD_INT 1
17826: PLUS
17827: PPUSH
17828: CALL_OW 259
17832: PUSH
17833: LD_INT 1
17835: PLUS
17836: PPUSH
17837: CALL_OW 237
17841: GO 17743
17843: POP
17844: POP
// end ;
17845: PPOPN 3
17847: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17848: LD_EXP 27
17852: PUSH
17853: LD_EXP 35
17857: AND
17858: IFFALSE 17878
17860: GO 17862
17862: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17863: LD_INT 4
17865: PPUSH
17866: LD_OWVAR 2
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 324
17878: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17879: LD_EXP 27
17883: PUSH
17884: LD_EXP 64
17888: AND
17889: IFFALSE 17909
17891: GO 17893
17893: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17894: LD_INT 19
17896: PPUSH
17897: LD_OWVAR 2
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: CALL_OW 324
17909: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17910: LD_EXP 27
17914: PUSH
17915: LD_EXP 36
17919: AND
17920: IFFALSE 18022
17922: GO 17924
17924: DISABLE
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
// begin enable ;
17929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 22
17937: PUSH
17938: LD_OWVAR 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: LD_INT 34
17952: PUSH
17953: LD_INT 11
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 34
17962: PUSH
17963: LD_INT 30
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18022
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18020
// begin SetLives ( i , 0 ) ;
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL_OW 234
// end ;
18018: GO 18003
18020: POP
18021: POP
// end ;
18022: PPOPN 2
18024: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18025: LD_EXP 27
18029: PUSH
18030: LD_EXP 37
18034: AND
18035: IFFALSE 18055
18037: GO 18039
18039: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18040: LD_INT 32
18042: PPUSH
18043: LD_OWVAR 2
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL_OW 324
18055: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18056: LD_EXP 27
18060: PUSH
18061: LD_EXP 38
18065: AND
18066: IFFALSE 18247
18068: GO 18070
18070: DISABLE
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
18075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_OWVAR 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 33
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 2
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18247
// side := 0 ;
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// for i := 1 to 8 do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_INT 8
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18191
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18145: LD_OWVAR 2
18149: PUSH
18150: LD_VAR 0 1
18154: NONEQUAL
18155: PUSH
18156: LD_OWVAR 2
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 81
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: AND
18175: IFFALSE 18189
// begin side := i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 1
18186: ST_TO_ADDR
// break ;
18187: GO 18191
// end ;
18189: GO 18142
18191: POP
18192: POP
// if not side then
18193: LD_VAR 0 3
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18247
// for i := 1 to tmp do
18202: LD_ADDR_VAR 0 1
18206: PUSH
18207: DOUBLE
18208: LD_INT 1
18210: DEC
18211: ST_TO_ADDR
18212: LD_VAR 0 2
18216: PUSH
18217: FOR_TO
18218: IFFALSE 18245
// if Prob ( 60 ) then
18220: LD_INT 60
18222: PPUSH
18223: CALL_OW 13
18227: IFFALSE 18243
// SetSide ( i , side ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: CALL_OW 235
18243: GO 18217
18245: POP
18246: POP
// end ;
18247: PPOPN 3
18249: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18250: LD_EXP 27
18254: PUSH
18255: LD_EXP 40
18259: AND
18260: IFFALSE 18379
18262: GO 18264
18264: DISABLE
18265: LD_INT 0
18267: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18268: LD_ADDR_VAR 0 1
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 21
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: LD_INT 23
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: PPUSH
18317: CALL_OW 69
18321: PUSH
18322: FOR_IN
18323: IFFALSE 18377
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 257
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: IN
18353: IFFALSE 18375
// SetClass ( un , rand ( 1 , 4 ) ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 1
18362: PPUSH
18363: LD_INT 4
18365: PPUSH
18366: CALL_OW 12
18370: PPUSH
18371: CALL_OW 336
18375: GO 18322
18377: POP
18378: POP
// end ;
18379: PPOPN 1
18381: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18382: LD_EXP 27
18386: PUSH
18387: LD_EXP 39
18391: AND
18392: IFFALSE 18471
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18400: LD_ADDR_VAR 0 1
18404: PUSH
18405: LD_INT 22
18407: PUSH
18408: LD_OWVAR 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: ST_TO_ADDR
// if not tmp then
18436: LD_VAR 0 1
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 18471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 1
18452: PPUSH
18453: LD_VAR 0 1
18457: PPUSH
18458: CALL_OW 12
18462: ARRAY
18463: PPUSH
18464: LD_INT 100
18466: PPUSH
18467: CALL_OW 234
// end ;
18471: PPOPN 1
18473: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18474: LD_EXP 27
18478: PUSH
18479: LD_EXP 41
18483: AND
18484: IFFALSE 18582
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18492: LD_ADDR_VAR 0 1
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: ST_TO_ADDR
// if not tmp then
18528: LD_VAR 0 1
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18582
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18537: LD_VAR 0 1
18541: PUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 12
18554: ARRAY
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_INT 4
18561: PPUSH
18562: CALL_OW 12
18566: PPUSH
18567: LD_INT 3000
18569: PPUSH
18570: LD_INT 9000
18572: PPUSH
18573: CALL_OW 12
18577: PPUSH
18578: CALL_OW 492
// end ;
18582: PPOPN 1
18584: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18585: LD_EXP 27
18589: PUSH
18590: LD_EXP 42
18594: AND
18595: IFFALSE 18615
18597: GO 18599
18599: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18600: LD_INT 1
18602: PPUSH
18603: LD_OWVAR 2
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: CALL_OW 324
18615: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18616: LD_EXP 27
18620: PUSH
18621: LD_EXP 43
18625: AND
18626: IFFALSE 18709
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 21
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: ST_TO_ADDR
// if not tmp then
18671: LD_VAR 0 2
18675: NOT
18676: IFFALSE 18680
// exit ;
18678: GO 18709
// for i in tmp do
18680: LD_ADDR_VAR 0 1
18684: PUSH
18685: LD_VAR 0 2
18689: PUSH
18690: FOR_IN
18691: IFFALSE 18707
// SetBLevel ( i , 10 ) ;
18693: LD_VAR 0 1
18697: PPUSH
18698: LD_INT 10
18700: PPUSH
18701: CALL_OW 241
18705: GO 18690
18707: POP
18708: POP
// end ;
18709: PPOPN 2
18711: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18712: LD_EXP 27
18716: PUSH
18717: LD_EXP 44
18721: AND
18722: IFFALSE 18833
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
18731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_OWVAR 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: ST_TO_ADDR
// if not tmp then
18768: LD_VAR 0 3
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 18833
// un := tmp [ rand ( 1 , tmp ) ] ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 3
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// if Crawls ( un ) then
18801: LD_VAR 0 2
18805: PPUSH
18806: CALL_OW 318
18810: IFFALSE 18821
// ComWalk ( un ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 5
18828: PPUSH
18829: CALL_OW 336
// end ;
18833: PPOPN 3
18835: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18836: LD_EXP 27
18840: PUSH
18841: LD_EXP 45
18845: AND
18846: PUSH
18847: LD_OWVAR 67
18851: PUSH
18852: LD_INT 4
18854: LESS
18855: AND
18856: IFFALSE 18875
18858: GO 18860
18860: DISABLE
// begin Difficulty := Difficulty + 1 ;
18861: LD_ADDR_OWVAR 67
18865: PUSH
18866: LD_OWVAR 67
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: ST_TO_ADDR
// end ;
18875: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18876: LD_EXP 27
18880: PUSH
18881: LD_EXP 46
18885: AND
18886: IFFALSE 18989
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
// begin for i := 1 to 5 do
18894: LD_ADDR_VAR 0 1
18898: PUSH
18899: DOUBLE
18900: LD_INT 1
18902: DEC
18903: ST_TO_ADDR
18904: LD_INT 5
18906: PUSH
18907: FOR_TO
18908: IFFALSE 18987
// begin uc_nation := nation_nature ;
18910: LD_ADDR_OWVAR 21
18914: PUSH
18915: LD_INT 0
18917: ST_TO_ADDR
// uc_side := 0 ;
18918: LD_ADDR_OWVAR 20
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18926: LD_ADDR_OWVAR 29
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
// hc_agressivity := 20 ;
18941: LD_ADDR_OWVAR 35
18945: PUSH
18946: LD_INT 20
18948: ST_TO_ADDR
// hc_class := class_tiger ;
18949: LD_ADDR_OWVAR 28
18953: PUSH
18954: LD_INT 14
18956: ST_TO_ADDR
// hc_gallery :=  ;
18957: LD_ADDR_OWVAR 33
18961: PUSH
18962: LD_STRING 
18964: ST_TO_ADDR
// hc_name :=  ;
18965: LD_ADDR_OWVAR 26
18969: PUSH
18970: LD_STRING 
18972: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18973: CALL_OW 44
18977: PPUSH
18978: LD_INT 0
18980: PPUSH
18981: CALL_OW 51
// end ;
18985: GO 18907
18987: POP
18988: POP
// end ;
18989: PPOPN 1
18991: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18992: LD_EXP 27
18996: PUSH
18997: LD_EXP 47
19001: AND
19002: IFFALSE 19011
19004: GO 19006
19006: DISABLE
// StreamSibBomb ;
19007: CALL 19012 0 0
19011: END
// export function StreamSibBomb ; var i , x , y ; begin
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
// result := false ;
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// for i := 1 to 16 do
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: DOUBLE
19032: LD_INT 1
19034: DEC
19035: ST_TO_ADDR
19036: LD_INT 16
19038: PUSH
19039: FOR_TO
19040: IFFALSE 19239
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_INT 10
19049: PUSH
19050: LD_INT 20
19052: PUSH
19053: LD_INT 30
19055: PUSH
19056: LD_INT 40
19058: PUSH
19059: LD_INT 50
19061: PUSH
19062: LD_INT 60
19064: PUSH
19065: LD_INT 70
19067: PUSH
19068: LD_INT 80
19070: PUSH
19071: LD_INT 90
19073: PUSH
19074: LD_INT 100
19076: PUSH
19077: LD_INT 110
19079: PUSH
19080: LD_INT 120
19082: PUSH
19083: LD_INT 130
19085: PUSH
19086: LD_INT 140
19088: PUSH
19089: LD_INT 150
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: PPUSH
19112: LD_INT 15
19114: PPUSH
19115: CALL_OW 12
19119: ARRAY
19120: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 10
19128: PUSH
19129: LD_INT 20
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 40
19137: PUSH
19138: LD_INT 50
19140: PUSH
19141: LD_INT 60
19143: PUSH
19144: LD_INT 70
19146: PUSH
19147: LD_INT 80
19149: PUSH
19150: LD_INT 90
19152: PUSH
19153: LD_INT 100
19155: PUSH
19156: LD_INT 110
19158: PUSH
19159: LD_INT 120
19161: PUSH
19162: LD_INT 130
19164: PUSH
19165: LD_INT 140
19167: PUSH
19168: LD_INT 150
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_INT 15
19193: PPUSH
19194: CALL_OW 12
19198: ARRAY
19199: ST_TO_ADDR
// if ValidHex ( x , y ) then
19200: LD_VAR 0 3
19204: PPUSH
19205: LD_VAR 0 4
19209: PPUSH
19210: CALL_OW 488
19214: IFFALSE 19237
// begin result := [ x , y ] ;
19216: LD_ADDR_VAR 0 1
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_VAR 0 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// break ;
19235: GO 19239
// end ; end ;
19237: GO 19039
19239: POP
19240: POP
// if result then
19241: LD_VAR 0 1
19245: IFFALSE 19305
// begin ToLua ( playSibBomb() ) ;
19247: LD_STRING playSibBomb()
19249: PPUSH
19250: CALL_OW 559
// wait ( 0 0$14 ) ;
19254: LD_INT 490
19256: PPUSH
19257: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19261: LD_VAR 0 1
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19283: LD_VAR 0 1
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: LD_VAR 0 1
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: PPUSH
19301: CALL_OW 429
// end ; end ;
19305: LD_VAR 0 1
19309: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19310: LD_EXP 27
19314: PUSH
19315: LD_EXP 49
19319: AND
19320: IFFALSE 19332
19322: GO 19324
19324: DISABLE
// YouLost (  ) ;
19325: LD_STRING 
19327: PPUSH
19328: CALL_OW 104
19332: END
// every 0 0$1 trigger StreamModeActive and sFog do
19333: LD_EXP 27
19337: PUSH
19338: LD_EXP 48
19342: AND
19343: IFFALSE 19357
19345: GO 19347
19347: DISABLE
// FogOff ( your_side ) ;
19348: LD_OWVAR 2
19352: PPUSH
19353: CALL_OW 344
19357: END
// every 0 0$1 trigger StreamModeActive and sSun do
19358: LD_EXP 27
19362: PUSH
19363: LD_EXP 50
19367: AND
19368: IFFALSE 19396
19370: GO 19372
19372: DISABLE
// begin solar_recharge_percent := 0 ;
19373: LD_ADDR_OWVAR 79
19377: PUSH
19378: LD_INT 0
19380: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19381: LD_INT 10500
19383: PPUSH
19384: CALL_OW 67
// solar_recharge_percent := 100 ;
19388: LD_ADDR_OWVAR 79
19392: PUSH
19393: LD_INT 100
19395: ST_TO_ADDR
// end ;
19396: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19397: LD_EXP 27
19401: PUSH
19402: LD_EXP 51
19406: AND
19407: IFFALSE 19646
19409: GO 19411
19411: DISABLE
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
// begin tmp := [ ] ;
19417: LD_ADDR_VAR 0 3
19421: PUSH
19422: EMPTY
19423: ST_TO_ADDR
// for i := 1 to 6 do
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: DOUBLE
19430: LD_INT 1
19432: DEC
19433: ST_TO_ADDR
19434: LD_INT 6
19436: PUSH
19437: FOR_TO
19438: IFFALSE 19543
// begin uc_nation := nation_nature ;
19440: LD_ADDR_OWVAR 21
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// uc_side := 0 ;
19448: LD_ADDR_OWVAR 20
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19456: LD_ADDR_OWVAR 29
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: LD_INT 12
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// hc_agressivity := 20 ;
19471: LD_ADDR_OWVAR 35
19475: PUSH
19476: LD_INT 20
19478: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19479: LD_ADDR_OWVAR 28
19483: PUSH
19484: LD_INT 17
19486: ST_TO_ADDR
// hc_gallery :=  ;
19487: LD_ADDR_OWVAR 33
19491: PUSH
19492: LD_STRING 
19494: ST_TO_ADDR
// hc_name :=  ;
19495: LD_ADDR_OWVAR 26
19499: PUSH
19500: LD_STRING 
19502: ST_TO_ADDR
// un := CreateHuman ;
19503: LD_ADDR_VAR 0 2
19507: PUSH
19508: CALL_OW 44
19512: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19513: LD_VAR 0 2
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL_OW 51
// tmp := tmp ^ un ;
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_VAR 0 3
19534: PUSH
19535: LD_VAR 0 2
19539: ADD
19540: ST_TO_ADDR
// end ;
19541: GO 19437
19543: POP
19544: POP
// repeat wait ( 0 0$1 ) ;
19545: LD_INT 35
19547: PPUSH
19548: CALL_OW 67
// for un in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 3
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19637
// begin if IsDead ( un ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 301
19574: IFFALSE 19594
// begin tmp := tmp diff un ;
19576: LD_ADDR_VAR 0 3
19580: PUSH
19581: LD_VAR 0 3
19585: PUSH
19586: LD_VAR 0 2
19590: DIFF
19591: ST_TO_ADDR
// continue ;
19592: GO 19562
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19594: LD_VAR 0 2
19598: PPUSH
19599: LD_INT 3
19601: PUSH
19602: LD_INT 22
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PPUSH
19621: LD_VAR 0 2
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// end ;
19635: GO 19562
19637: POP
19638: POP
// until not tmp ;
19639: LD_VAR 0 3
19643: NOT
19644: IFFALSE 19545
// end ;
19646: PPOPN 3
19648: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19649: LD_EXP 27
19653: PUSH
19654: LD_EXP 52
19658: AND
19659: IFFALSE 19713
19661: GO 19663
19663: DISABLE
// begin ToLua ( displayTroll(); ) ;
19664: LD_STRING displayTroll();
19666: PPUSH
19667: CALL_OW 559
// wait ( 3 3$00 ) ;
19671: LD_INT 6300
19673: PPUSH
19674: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19678: LD_STRING hideTroll();
19680: PPUSH
19681: CALL_OW 559
// wait ( 1 1$00 ) ;
19685: LD_INT 2100
19687: PPUSH
19688: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19692: LD_STRING displayTroll();
19694: PPUSH
19695: CALL_OW 559
// wait ( 1 1$00 ) ;
19699: LD_INT 2100
19701: PPUSH
19702: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19706: LD_STRING hideTroll();
19708: PPUSH
19709: CALL_OW 559
// end ;
19713: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19714: LD_EXP 27
19718: PUSH
19719: LD_EXP 53
19723: AND
19724: IFFALSE 19787
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
// begin p := 0 ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// repeat game_speed := 1 ;
19740: LD_ADDR_OWVAR 65
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19748: LD_INT 35
19750: PPUSH
19751: CALL_OW 67
// p := p + 1 ;
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// until p >= 60 ;
19769: LD_VAR 0 1
19773: PUSH
19774: LD_INT 60
19776: GREATEREQUAL
19777: IFFALSE 19740
// game_speed := 4 ;
19779: LD_ADDR_OWVAR 65
19783: PUSH
19784: LD_INT 4
19786: ST_TO_ADDR
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19790: LD_EXP 27
19794: PUSH
19795: LD_EXP 54
19799: AND
19800: IFFALSE 19946
19802: GO 19804
19804: DISABLE
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not depot then
19863: LD_VAR 0 1
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19946
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_VAR 0 1
19881: PUSH
19882: LD_INT 1
19884: PPUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 12
19894: ARRAY
19895: PPUSH
19896: CALL_OW 274
19900: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19901: LD_VAR 0 2
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 0
19911: PPUSH
19912: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_INT 2
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_INT 3
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: CALL_OW 277
// end ;
19946: PPOPN 2
19948: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19949: LD_EXP 27
19953: PUSH
19954: LD_EXP 55
19958: AND
19959: IFFALSE 20056
19961: GO 19963
19963: DISABLE
19964: LD_INT 0
19966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19967: LD_ADDR_VAR 0 1
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_OWVAR 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 21
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 3
19996: PUSH
19997: LD_INT 23
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: PPUSH
20016: CALL_OW 69
20020: ST_TO_ADDR
// if not tmp then
20021: LD_VAR 0 1
20025: NOT
20026: IFFALSE 20030
// exit ;
20028: GO 20056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 12
20047: ARRAY
20048: PPUSH
20049: LD_INT 200
20051: PPUSH
20052: CALL_OW 234
// end ;
20056: PPOPN 1
20058: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20059: LD_EXP 27
20063: PUSH
20064: LD_EXP 56
20068: AND
20069: IFFALSE 20148
20071: GO 20073
20073: DISABLE
20074: LD_INT 0
20076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_INT 22
20084: PUSH
20085: LD_OWVAR 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 69
20112: ST_TO_ADDR
// if not tmp then
20113: LD_VAR 0 1
20117: NOT
20118: IFFALSE 20122
// exit ;
20120: GO 20148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20122: LD_VAR 0 1
20126: PUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_VAR 0 1
20134: PPUSH
20135: CALL_OW 12
20139: ARRAY
20140: PPUSH
20141: LD_INT 60
20143: PPUSH
20144: CALL_OW 234
// end ;
20148: PPOPN 1
20150: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20151: LD_EXP 27
20155: PUSH
20156: LD_EXP 57
20160: AND
20161: IFFALSE 20260
20163: GO 20165
20165: DISABLE
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
// begin enable ;
20170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_INT 22
20178: PUSH
20179: LD_OWVAR 2
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 61
20190: PUSH
20191: EMPTY
20192: LIST
20193: PUSH
20194: LD_INT 33
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: ST_TO_ADDR
// if not tmp then
20214: LD_VAR 0 1
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 20260
// for i in tmp do
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_VAR 0 1
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20258
// if IsControledBy ( i ) then
20236: LD_VAR 0 2
20240: PPUSH
20241: CALL_OW 312
20245: IFFALSE 20256
// ComUnlink ( i ) ;
20247: LD_VAR 0 2
20251: PPUSH
20252: CALL_OW 136
20256: GO 20233
20258: POP
20259: POP
// end ;
20260: PPOPN 2
20262: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20263: LD_EXP 27
20267: PUSH
20268: LD_EXP 58
20272: AND
20273: IFFALSE 20413
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
// begin ToLua ( displayPowell(); ) ;
20282: LD_STRING displayPowell();
20284: PPUSH
20285: CALL_OW 559
// uc_side := 0 ;
20289: LD_ADDR_OWVAR 20
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// uc_nation := 2 ;
20297: LD_ADDR_OWVAR 21
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20305: LD_ADDR_OWVAR 37
20309: PUSH
20310: LD_INT 14
20312: ST_TO_ADDR
// vc_engine := engine_siberite ;
20313: LD_ADDR_OWVAR 39
20317: PUSH
20318: LD_INT 3
20320: ST_TO_ADDR
// vc_control := control_apeman ;
20321: LD_ADDR_OWVAR 38
20325: PUSH
20326: LD_INT 5
20328: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20329: LD_ADDR_OWVAR 40
20333: PUSH
20334: LD_INT 29
20336: ST_TO_ADDR
// un := CreateVehicle ;
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: CALL_OW 45
20346: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20359: LD_INT 35
20361: PPUSH
20362: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 69
20387: PPUSH
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 74
20397: PPUSH
20398: CALL_OW 115
// until IsDead ( un ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: CALL_OW 301
20411: IFFALSE 20359
// end ;
20413: PPOPN 2
20415: END
// every 0 0$1 trigger StreamModeActive and sStu do
20416: LD_EXP 27
20420: PUSH
20421: LD_EXP 66
20425: AND
20426: IFFALSE 20442
20428: GO 20430
20430: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20431: LD_STRING displayStucuk();
20433: PPUSH
20434: CALL_OW 559
// ResetFog ;
20438: CALL_OW 335
// end ;
20442: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20443: LD_EXP 27
20447: PUSH
20448: LD_EXP 59
20452: AND
20453: IFFALSE 20594
20455: GO 20457
20457: DISABLE
20458: LD_INT 0
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 21
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 2
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20594
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_VAR 0 2
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 2
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20543: LD_VAR 0 1
20547: PPUSH
20548: LD_OWVAR 3
20552: PUSH
20553: LD_VAR 0 1
20557: DIFF
20558: PPUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 74
20568: PPUSH
20569: CALL_OW 115
// wait ( 0 0$20 ) ;
20573: LD_INT 700
20575: PPUSH
20576: CALL_OW 67
// SetSide ( un , your_side ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_OWVAR 2
20589: PPUSH
20590: CALL_OW 235
// end ;
20594: PPOPN 2
20596: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20597: LD_EXP 27
20601: PUSH
20602: LD_EXP 60
20606: AND
20607: IFFALSE 20713
20609: GO 20611
20611: DISABLE
20612: LD_INT 0
20614: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_OWVAR 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 30
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: ST_TO_ADDR
// if not depot then
20669: LD_VAR 0 1
20673: NOT
20674: IFFALSE 20678
// exit ;
20676: GO 20713
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20678: LD_VAR 0 1
20682: PUSH
20683: LD_INT 1
20685: ARRAY
20686: PPUSH
20687: CALL_OW 250
20691: PPUSH
20692: LD_VAR 0 1
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: CALL_OW 251
20705: PPUSH
20706: LD_INT 70
20708: PPUSH
20709: CALL_OW 495
// end ;
20713: PPOPN 1
20715: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20716: LD_EXP 27
20720: PUSH
20721: LD_EXP 61
20725: AND
20726: IFFALSE 20937
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20738: LD_ADDR_VAR 0 5
20742: PUSH
20743: LD_INT 22
20745: PUSH
20746: LD_OWVAR 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 21
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 5
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20937
// for i in tmp do
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_VAR 0 5
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20935
// begin d := rand ( 0 , 5 ) ;
20796: LD_ADDR_VAR 0 4
20800: PUSH
20801: LD_INT 0
20803: PPUSH
20804: LD_INT 5
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20812: LD_ADDR_VAR 0 2
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 250
20826: PPUSH
20827: LD_VAR 0 4
20831: PPUSH
20832: LD_INT 3
20834: PPUSH
20835: LD_INT 12
20837: PPUSH
20838: CALL_OW 12
20842: PPUSH
20843: CALL_OW 272
20847: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 251
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_INT 3
20870: PPUSH
20871: LD_INT 12
20873: PPUSH
20874: CALL_OW 12
20878: PPUSH
20879: CALL_OW 273
20883: ST_TO_ADDR
// if ValidHex ( x , y ) then
20884: LD_VAR 0 2
20888: PPUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 488
20898: IFFALSE 20933
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20900: LD_VAR 0 1
20904: PPUSH
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 3
20917: PPUSH
20918: LD_INT 6
20920: PPUSH
20921: CALL_OW 12
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 483
// end ;
20933: GO 20793
20935: POP
20936: POP
// end ;
20937: PPOPN 5
20939: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20940: LD_EXP 27
20944: PUSH
20945: LD_EXP 62
20949: AND
20950: IFFALSE 21044
20952: GO 20954
20954: DISABLE
20955: LD_INT 0
20957: PPUSH
20958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20959: LD_ADDR_VAR 0 2
20963: PUSH
20964: LD_INT 22
20966: PUSH
20967: LD_OWVAR 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 32
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 69
21005: ST_TO_ADDR
// if not tmp then
21006: LD_VAR 0 2
21010: NOT
21011: IFFALSE 21015
// exit ;
21013: GO 21044
// for i in tmp do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_VAR 0 2
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21042
// SetFuel ( i , 0 ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_INT 0
21035: PPUSH
21036: CALL_OW 240
21040: GO 21025
21042: POP
21043: POP
// end ;
21044: PPOPN 2
21046: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21047: LD_EXP 27
21051: PUSH
21052: LD_EXP 63
21056: AND
21057: IFFALSE 21123
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21065: LD_ADDR_VAR 0 1
21069: PUSH
21070: LD_INT 22
21072: PUSH
21073: LD_OWVAR 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: LD_INT 29
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PPUSH
21096: CALL_OW 69
21100: ST_TO_ADDR
// if not tmp then
21101: LD_VAR 0 1
21105: NOT
21106: IFFALSE 21110
// exit ;
21108: GO 21123
// DestroyUnit ( tmp [ 1 ] ) ;
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 1
21117: ARRAY
21118: PPUSH
21119: CALL_OW 65
// end ;
21123: PPOPN 1
21125: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21126: LD_EXP 27
21130: PUSH
21131: LD_EXP 65
21135: AND
21136: IFFALSE 21265
21138: GO 21140
21140: DISABLE
21141: LD_INT 0
21143: PPUSH
// begin uc_side := 0 ;
21144: LD_ADDR_OWVAR 20
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// uc_nation := nation_arabian ;
21152: LD_ADDR_OWVAR 21
21156: PUSH
21157: LD_INT 2
21159: ST_TO_ADDR
// hc_gallery :=  ;
21160: LD_ADDR_OWVAR 33
21164: PUSH
21165: LD_STRING 
21167: ST_TO_ADDR
// hc_name :=  ;
21168: LD_ADDR_OWVAR 26
21172: PUSH
21173: LD_STRING 
21175: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21176: LD_INT 1
21178: PPUSH
21179: LD_INT 11
21181: PPUSH
21182: LD_INT 10
21184: PPUSH
21185: CALL_OW 380
// un := CreateHuman ;
21189: LD_ADDR_VAR 0 1
21193: PUSH
21194: CALL_OW 44
21198: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_INT 1
21206: PPUSH
21207: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21211: LD_INT 35
21213: PPUSH
21214: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 22
21225: PUSH
21226: LD_OWVAR 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 74
21249: PPUSH
21250: CALL_OW 115
// until IsDead ( un ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21211
// end ;
21265: PPOPN 1
21267: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21268: LD_EXP 27
21272: PUSH
21273: LD_EXP 67
21277: AND
21278: IFFALSE 21290
21280: GO 21282
21282: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21283: LD_STRING earthquake(getX(game), 0, 32)
21285: PPUSH
21286: CALL_OW 559
21290: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21291: LD_EXP 27
21295: PUSH
21296: LD_EXP 68
21300: AND
21301: IFFALSE 21392
21303: GO 21305
21305: DISABLE
21306: LD_INT 0
21308: PPUSH
// begin enable ;
21309: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21310: LD_ADDR_VAR 0 1
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 21
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 33
21339: PUSH
21340: LD_INT 3
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: ST_TO_ADDR
// if not tmp then
21357: LD_VAR 0 1
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21366: LD_VAR 0 1
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 12
21383: ARRAY
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: CALL_OW 234
// end ;
21392: PPOPN 1
21394: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21395: LD_EXP 27
21399: PUSH
21400: LD_EXP 69
21404: AND
21405: IFFALSE 21546
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
21414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_OWVAR 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 69
21450: ST_TO_ADDR
// if not tmp then
21451: LD_VAR 0 3
21455: NOT
21456: IFFALSE 21460
// exit ;
21458: GO 21546
// un := tmp [ rand ( 1 , tmp ) ] ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_VAR 0 3
21477: PPUSH
21478: CALL_OW 12
21482: ARRAY
21483: ST_TO_ADDR
// if Crawls ( un ) then
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 318
21493: IFFALSE 21504
// ComWalk ( un ) ;
21495: LD_VAR 0 2
21499: PPUSH
21500: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_INT 9
21511: PPUSH
21512: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21516: LD_INT 28
21518: PPUSH
21519: LD_OWVAR 2
21523: PPUSH
21524: LD_INT 2
21526: PPUSH
21527: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21531: LD_INT 29
21533: PPUSH
21534: LD_OWVAR 2
21538: PPUSH
21539: LD_INT 2
21541: PPUSH
21542: CALL_OW 322
// end ;
21546: PPOPN 3
21548: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21549: LD_EXP 27
21553: PUSH
21554: LD_EXP 70
21558: AND
21559: IFFALSE 21670
21561: GO 21563
21563: DISABLE
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 3
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21670
// un := tmp [ rand ( 1 , tmp ) ] ;
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 1
21626: PPUSH
21627: LD_VAR 0 3
21631: PPUSH
21632: CALL_OW 12
21636: ARRAY
21637: ST_TO_ADDR
// if Crawls ( un ) then
21638: LD_VAR 0 2
21642: PPUSH
21643: CALL_OW 318
21647: IFFALSE 21658
// ComWalk ( un ) ;
21649: LD_VAR 0 2
21653: PPUSH
21654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21658: LD_VAR 0 2
21662: PPUSH
21663: LD_INT 8
21665: PPUSH
21666: CALL_OW 336
// end ;
21670: PPOPN 3
21672: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21673: LD_EXP 27
21677: PUSH
21678: LD_EXP 71
21682: AND
21683: IFFALSE 21827
21685: GO 21687
21687: DISABLE
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 34
21724: PUSH
21725: LD_INT 12
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 51
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 34
21744: PUSH
21745: LD_INT 32
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: PPUSH
21763: CALL_OW 69
21767: ST_TO_ADDR
// if not tmp then
21768: LD_VAR 0 2
21772: NOT
21773: IFFALSE 21777
// exit ;
21775: GO 21827
// for i in tmp do
21777: LD_ADDR_VAR 0 1
21781: PUSH
21782: LD_VAR 0 2
21786: PUSH
21787: FOR_IN
21788: IFFALSE 21825
// if GetCargo ( i , mat_artifact ) = 0 then
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_INT 4
21797: PPUSH
21798: CALL_OW 289
21802: PUSH
21803: LD_INT 0
21805: EQUAL
21806: IFFALSE 21823
// SetCargo ( i , mat_siberit , 100 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 3
21815: PPUSH
21816: LD_INT 100
21818: PPUSH
21819: CALL_OW 290
21823: GO 21787
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21830: LD_EXP 27
21834: PUSH
21835: LD_EXP 72
21839: AND
21840: IFFALSE 22023
21842: GO 21844
21844: DISABLE
21845: LD_INT 0
21847: PPUSH
21848: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_OWVAR 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not tmp then
21871: LD_VAR 0 2
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 22023
// for i := 1 to 2 do
21880: LD_ADDR_VAR 0 1
21884: PUSH
21885: DOUBLE
21886: LD_INT 1
21888: DEC
21889: ST_TO_ADDR
21890: LD_INT 2
21892: PUSH
21893: FOR_TO
21894: IFFALSE 22021
// begin uc_side := your_side ;
21896: LD_ADDR_OWVAR 20
21900: PUSH
21901: LD_OWVAR 2
21905: ST_TO_ADDR
// uc_nation := nation_american ;
21906: LD_ADDR_OWVAR 21
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// vc_chassis := us_morphling ;
21914: LD_ADDR_OWVAR 37
21918: PUSH
21919: LD_INT 5
21921: ST_TO_ADDR
// vc_engine := engine_siberite ;
21922: LD_ADDR_OWVAR 39
21926: PUSH
21927: LD_INT 3
21929: ST_TO_ADDR
// vc_control := control_computer ;
21930: LD_ADDR_OWVAR 38
21934: PUSH
21935: LD_INT 3
21937: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21938: LD_ADDR_OWVAR 40
21942: PUSH
21943: LD_INT 10
21945: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21946: LD_VAR 0 2
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: CALL_OW 310
21959: NOT
21960: IFFALSE 22007
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21962: CALL_OW 45
21966: PPUSH
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: ARRAY
21975: PPUSH
21976: CALL_OW 250
21980: PPUSH
21981: LD_VAR 0 2
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: PPUSH
21990: CALL_OW 251
21994: PPUSH
21995: LD_INT 12
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: CALL_OW 50
22005: GO 22019
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22007: CALL_OW 45
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 51
// end ;
22019: GO 21893
22021: POP
22022: POP
// end ;
22023: PPOPN 2
22025: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22026: LD_EXP 27
22030: PUSH
22031: LD_EXP 73
22035: AND
22036: IFFALSE 22258
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22049: LD_ADDR_VAR 0 6
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: ST_TO_ADDR
// if not tmp then
22103: LD_VAR 0 6
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22258
// s1 := rand ( 1 , 4 ) ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_INT 4
22122: PPUSH
22123: CALL_OW 12
22127: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: LD_VAR 0 6
22137: PUSH
22138: LD_INT 1
22140: ARRAY
22141: PPUSH
22142: LD_VAR 0 2
22146: PPUSH
22147: CALL_OW 259
22151: ST_TO_ADDR
// if s1 = 1 then
22152: LD_VAR 0 2
22156: PUSH
22157: LD_INT 1
22159: EQUAL
22160: IFFALSE 22180
// s2 := rand ( 2 , 4 ) else
22162: LD_ADDR_VAR 0 3
22166: PUSH
22167: LD_INT 2
22169: PPUSH
22170: LD_INT 4
22172: PPUSH
22173: CALL_OW 12
22177: ST_TO_ADDR
22178: GO 22188
// s2 := 1 ;
22180: LD_ADDR_VAR 0 3
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22188: LD_ADDR_VAR 0 5
22192: PUSH
22193: LD_VAR 0 6
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: CALL_OW 259
22211: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22212: LD_VAR 0 6
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 5
22230: PPUSH
22231: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22235: LD_VAR 0 6
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_VAR 0 4
22253: PPUSH
22254: CALL_OW 237
// end ;
22258: PPOPN 6
22260: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22261: LD_EXP 27
22265: PUSH
22266: LD_EXP 74
22270: AND
22271: IFFALSE 22350
22273: GO 22275
22275: DISABLE
22276: LD_INT 0
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 30
22298: PUSH
22299: LD_INT 3
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: ST_TO_ADDR
// if not tmp then
22315: LD_VAR 0 1
22319: NOT
22320: IFFALSE 22324
// exit ;
22322: GO 22350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 12
22341: ARRAY
22342: PPUSH
22343: LD_INT 1
22345: PPUSH
22346: CALL_OW 234
// end ;
22350: PPOPN 1
22352: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22353: LD_EXP 27
22357: PUSH
22358: LD_EXP 75
22362: AND
22363: IFFALSE 22475
22365: GO 22367
22367: DISABLE
22368: LD_INT 0
22370: PPUSH
22371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22372: LD_ADDR_VAR 0 2
22376: PUSH
22377: LD_INT 22
22379: PUSH
22380: LD_OWVAR 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 27
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 30
22414: PUSH
22415: LD_INT 28
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: ST_TO_ADDR
// if not tmp then
22437: LD_VAR 0 2
22441: NOT
22442: IFFALSE 22446
// exit ;
22444: GO 22475
// for i in tmp do
22446: LD_ADDR_VAR 0 1
22450: PUSH
22451: LD_VAR 0 2
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22473
// SetLives ( i , 1 ) ;
22459: LD_VAR 0 1
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 234
22471: GO 22456
22473: POP
22474: POP
// end ;
22475: PPOPN 2
22477: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22478: LD_EXP 27
22482: PUSH
22483: LD_EXP 76
22487: AND
22488: IFFALSE 22775
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
// begin i := rand ( 1 , 7 ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 1
22505: PPUSH
22506: LD_INT 7
22508: PPUSH
22509: CALL_OW 12
22513: ST_TO_ADDR
// case i of 1 :
22514: LD_VAR 0 1
22518: PUSH
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22537
22527: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22528: LD_STRING earthquake(getX(game), 0, 32)
22530: PPUSH
22531: CALL_OW 559
22535: GO 22775
22537: LD_INT 2
22539: DOUBLE
22540: EQUAL
22541: IFTRUE 22545
22543: GO 22559
22545: POP
// begin ToLua ( displayStucuk(); ) ;
22546: LD_STRING displayStucuk();
22548: PPUSH
22549: CALL_OW 559
// ResetFog ;
22553: CALL_OW 335
// end ; 3 :
22557: GO 22775
22559: LD_INT 3
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22671
22567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22568: LD_ADDR_VAR 0 2
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 25
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 2
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22775
// un := tmp [ rand ( 1 , tmp ) ] ;
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_VAR 0 2
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 2
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: ST_TO_ADDR
// if Crawls ( un ) then
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 318
22646: IFFALSE 22657
// ComWalk ( un ) ;
22648: LD_VAR 0 3
22652: PPUSH
22653: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22657: LD_VAR 0 3
22661: PPUSH
22662: LD_INT 8
22664: PPUSH
22665: CALL_OW 336
// end ; 4 :
22669: GO 22775
22671: LD_INT 4
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22753
22679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_OWVAR 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 30
22699: PUSH
22700: LD_INT 29
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: ST_TO_ADDR
// if not tmp then
22716: LD_VAR 0 2
22720: NOT
22721: IFFALSE 22725
// exit ;
22723: GO 22775
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22725: LD_VAR 0 2
22729: PUSH
22730: LD_INT 1
22732: ARRAY
22733: PPUSH
22734: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22738: LD_VAR 0 2
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: CALL_OW 65
// end ; 5 .. 7 :
22751: GO 22775
22753: LD_INT 5
22755: DOUBLE
22756: GREATEREQUAL
22757: IFFALSE 22765
22759: LD_INT 7
22761: DOUBLE
22762: LESSEQUAL
22763: IFTRUE 22767
22765: GO 22774
22767: POP
// StreamSibBomb ; end ;
22768: CALL 19012 0 0
22772: GO 22775
22774: POP
// end ;
22775: PPOPN 3
22777: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22778: LD_EXP 27
22782: PUSH
22783: LD_EXP 77
22787: AND
22788: IFFALSE 22944
22790: GO 22792
22792: DISABLE
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22798: LD_ADDR_VAR 0 2
22802: PUSH
22803: LD_INT 81
22805: PUSH
22806: LD_OWVAR 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 21
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: ST_TO_ADDR
// if not tmp then
22852: LD_VAR 0 2
22856: NOT
22857: IFFALSE 22861
// exit ;
22859: GO 22944
// p := 0 ;
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: LD_INT 0
22868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22869: LD_INT 35
22871: PPUSH
22872: CALL_OW 67
// p := p + 1 ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_VAR 0 3
22885: PUSH
22886: LD_INT 1
22888: PLUS
22889: ST_TO_ADDR
// for i in tmp do
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_VAR 0 2
22899: PUSH
22900: FOR_IN
22901: IFFALSE 22932
// if GetLives ( i ) < 1000 then
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 256
22912: PUSH
22913: LD_INT 1000
22915: LESS
22916: IFFALSE 22930
// SetLives ( i , 1000 ) ;
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_INT 1000
22925: PPUSH
22926: CALL_OW 234
22930: GO 22900
22932: POP
22933: POP
// until p > 20 ;
22934: LD_VAR 0 3
22938: PUSH
22939: LD_INT 20
22941: GREATER
22942: IFFALSE 22869
// end ;
22944: PPOPN 3
22946: END
// every 0 0$1 trigger StreamModeActive and sTime do
22947: LD_EXP 27
22951: PUSH
22952: LD_EXP 78
22956: AND
22957: IFFALSE 22992
22959: GO 22961
22961: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22962: LD_INT 28
22964: PPUSH
22965: LD_OWVAR 2
22969: PPUSH
22970: LD_INT 2
22972: PPUSH
22973: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22977: LD_INT 30
22979: PPUSH
22980: LD_OWVAR 2
22984: PPUSH
22985: LD_INT 2
22987: PPUSH
22988: CALL_OW 322
// end ;
22992: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22993: LD_EXP 27
22997: PUSH
22998: LD_EXP 79
23002: AND
23003: IFFALSE 23124
23005: GO 23007
23007: DISABLE
23008: LD_INT 0
23010: PPUSH
23011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: LD_INT 22
23019: PUSH
23020: LD_OWVAR 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 21
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: LD_INT 23
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: ST_TO_ADDR
// if not tmp then
23066: LD_VAR 0 2
23070: NOT
23071: IFFALSE 23075
// exit ;
23073: GO 23124
// for i in tmp do
23075: LD_ADDR_VAR 0 1
23079: PUSH
23080: LD_VAR 0 2
23084: PUSH
23085: FOR_IN
23086: IFFALSE 23122
// begin if Crawls ( i ) then
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 318
23097: IFFALSE 23108
// ComWalk ( i ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 138
// SetClass ( i , 2 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 336
// end ;
23120: GO 23085
23122: POP
23123: POP
// end ;
23124: PPOPN 2
23126: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23127: LD_EXP 27
23131: PUSH
23132: LD_EXP 80
23136: AND
23137: IFFALSE 23425
23139: GO 23141
23141: DISABLE
23142: LD_INT 0
23144: PPUSH
23145: PPUSH
23146: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23147: LD_OWVAR 2
23151: PPUSH
23152: LD_INT 9
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: LD_INT 1
23160: PPUSH
23161: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23165: LD_INT 9
23167: PPUSH
23168: LD_OWVAR 2
23172: PPUSH
23173: CALL_OW 343
// uc_side := 9 ;
23177: LD_ADDR_OWVAR 20
23181: PUSH
23182: LD_INT 9
23184: ST_TO_ADDR
// uc_nation := 2 ;
23185: LD_ADDR_OWVAR 21
23189: PUSH
23190: LD_INT 2
23192: ST_TO_ADDR
// hc_name := Dark Warrior ;
23193: LD_ADDR_OWVAR 26
23197: PUSH
23198: LD_STRING Dark Warrior
23200: ST_TO_ADDR
// hc_gallery :=  ;
23201: LD_ADDR_OWVAR 33
23205: PUSH
23206: LD_STRING 
23208: ST_TO_ADDR
// hc_noskilllimit := true ;
23209: LD_ADDR_OWVAR 76
23213: PUSH
23214: LD_INT 1
23216: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23217: LD_ADDR_OWVAR 31
23221: PUSH
23222: LD_INT 30
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 30
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// un := CreateHuman ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: CALL_OW 44
23249: ST_TO_ADDR
// hc_noskilllimit := false ;
23250: LD_ADDR_OWVAR 76
23254: PUSH
23255: LD_INT 0
23257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 51
// ToLua ( playRanger() ) ;
23270: LD_STRING playRanger()
23272: PPUSH
23273: CALL_OW 559
// p := 0 ;
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 0
23284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23285: LD_INT 35
23287: PPUSH
23288: CALL_OW 67
// p := p + 1 ;
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 1
23304: PLUS
23305: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23306: LD_VAR 0 3
23310: PPUSH
23311: CALL_OW 256
23315: PUSH
23316: LD_INT 1000
23318: LESS
23319: IFFALSE 23333
// SetLives ( un , 1000 ) ;
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1000
23328: PPUSH
23329: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23333: LD_VAR 0 3
23337: PPUSH
23338: LD_INT 81
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 91
23352: PUSH
23353: LD_VAR 0 3
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PPUSH
23370: CALL_OW 69
23374: PPUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: CALL_OW 74
23384: PPUSH
23385: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23389: LD_VAR 0 2
23393: PUSH
23394: LD_INT 80
23396: GREATER
23397: PUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: CALL_OW 301
23407: OR
23408: IFFALSE 23285
// if un then
23410: LD_VAR 0 3
23414: IFFALSE 23425
// RemoveUnit ( un ) ;
23416: LD_VAR 0 3
23420: PPUSH
23421: CALL_OW 64
// end ;
23425: PPOPN 3
23427: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23428: LD_EXP 81
23432: IFFALSE 23548
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23442: LD_ADDR_VAR 0 2
23446: PUSH
23447: LD_INT 81
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 21
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23478: LD_STRING playComputer()
23480: PPUSH
23481: CALL_OW 559
// if not tmp then
23485: LD_VAR 0 2
23489: NOT
23490: IFFALSE 23494
// exit ;
23492: GO 23548
// for i in tmp do
23494: LD_ADDR_VAR 0 1
23498: PUSH
23499: LD_VAR 0 2
23503: PUSH
23504: FOR_IN
23505: IFFALSE 23546
// for j := 1 to 4 do
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: DOUBLE
23513: LD_INT 1
23515: DEC
23516: ST_TO_ADDR
23517: LD_INT 4
23519: PUSH
23520: FOR_TO
23521: IFFALSE 23542
// SetSkill ( i , j , 10 ) ;
23523: LD_VAR 0 1
23527: PPUSH
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_INT 10
23535: PPUSH
23536: CALL_OW 237
23540: GO 23520
23542: POP
23543: POP
23544: GO 23504
23546: POP
23547: POP
// end ;
23548: PPOPN 3
23550: END
// every 0 0$1 trigger s30 do var i , tmp ;
23551: LD_EXP 82
23555: IFFALSE 23624
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_INT 22
23571: PUSH
23572: LD_OWVAR 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: ST_TO_ADDR
// if not tmp then
23586: LD_VAR 0 2
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23624
// for i in tmp do
23595: LD_ADDR_VAR 0 1
23599: PUSH
23600: LD_VAR 0 2
23604: PUSH
23605: FOR_IN
23606: IFFALSE 23622
// SetLives ( i , 300 ) ;
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_INT 300
23615: PPUSH
23616: CALL_OW 234
23620: GO 23605
23622: POP
23623: POP
// end ;
23624: PPOPN 2
23626: END
// every 0 0$1 trigger s60 do var i , tmp ;
23627: LD_EXP 83
23631: IFFALSE 23700
23633: GO 23635
23635: DISABLE
23636: LD_INT 0
23638: PPUSH
23639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23640: LD_ADDR_VAR 0 2
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PPUSH
23657: CALL_OW 69
23661: ST_TO_ADDR
// if not tmp then
23662: LD_VAR 0 2
23666: NOT
23667: IFFALSE 23671
// exit ;
23669: GO 23700
// for i in tmp do
23671: LD_ADDR_VAR 0 1
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: FOR_IN
23682: IFFALSE 23698
// SetLives ( i , 600 ) ;
23684: LD_VAR 0 1
23688: PPUSH
23689: LD_INT 600
23691: PPUSH
23692: CALL_OW 234
23696: GO 23681
23698: POP
23699: POP
// end ;
23700: PPOPN 2
23702: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23703: LD_INT 0
23705: PPUSH
// case cmd of 301 :
23706: LD_VAR 0 1
23710: PUSH
23711: LD_INT 301
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23751
23719: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23720: LD_VAR 0 6
23724: PPUSH
23725: LD_VAR 0 7
23729: PPUSH
23730: LD_VAR 0 8
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: CALL 24960 0 5
23749: GO 23872
23751: LD_INT 302
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23796
23759: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23760: LD_VAR 0 6
23764: PPUSH
23765: LD_VAR 0 7
23769: PPUSH
23770: LD_VAR 0 8
23774: PPUSH
23775: LD_VAR 0 9
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: CALL 25051 0 6
23794: GO 23872
23796: LD_INT 303
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23841
23804: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23805: LD_VAR 0 6
23809: PPUSH
23810: LD_VAR 0 7
23814: PPUSH
23815: LD_VAR 0 8
23819: PPUSH
23820: LD_VAR 0 9
23824: PPUSH
23825: LD_VAR 0 4
23829: PPUSH
23830: LD_VAR 0 5
23834: PPUSH
23835: CALL 23877 0 6
23839: GO 23872
23841: LD_INT 304
23843: DOUBLE
23844: EQUAL
23845: IFTRUE 23849
23847: GO 23871
23849: POP
// hHackTeleport ( unit , x , y ) ; end ;
23850: LD_VAR 0 2
23854: PPUSH
23855: LD_VAR 0 4
23859: PPUSH
23860: LD_VAR 0 5
23864: PPUSH
23865: CALL 25644 0 3
23869: GO 23872
23871: POP
// end ;
23872: LD_VAR 0 12
23876: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23877: LD_INT 0
23879: PPUSH
23880: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 1
23888: LESS
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_INT 3
23897: GREATER
23898: OR
23899: PUSH
23900: LD_VAR 0 5
23904: PPUSH
23905: LD_VAR 0 6
23909: PPUSH
23910: CALL_OW 428
23914: OR
23915: IFFALSE 23919
// exit ;
23917: GO 24647
// uc_side := your_side ;
23919: LD_ADDR_OWVAR 20
23923: PUSH
23924: LD_OWVAR 2
23928: ST_TO_ADDR
// uc_nation := nation ;
23929: LD_ADDR_OWVAR 21
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// bc_level = 1 ;
23939: LD_ADDR_OWVAR 43
23943: PUSH
23944: LD_INT 1
23946: ST_TO_ADDR
// case btype of 1 :
23947: LD_VAR 0 2
23951: PUSH
23952: LD_INT 1
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23971
23960: POP
// bc_type := b_depot ; 2 :
23961: LD_ADDR_OWVAR 42
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
23969: GO 24591
23971: LD_INT 2
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 23990
23979: POP
// bc_type := b_warehouse ; 3 :
23980: LD_ADDR_OWVAR 42
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
23988: GO 24591
23990: LD_INT 3
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24009
23998: POP
// bc_type := b_lab ; 4 .. 9 :
23999: LD_ADDR_OWVAR 42
24003: PUSH
24004: LD_INT 6
24006: ST_TO_ADDR
24007: GO 24591
24009: LD_INT 4
24011: DOUBLE
24012: GREATEREQUAL
24013: IFFALSE 24021
24015: LD_INT 9
24017: DOUBLE
24018: LESSEQUAL
24019: IFTRUE 24023
24021: GO 24083
24023: POP
// begin bc_type := b_lab_half ;
24024: LD_ADDR_OWVAR 42
24028: PUSH
24029: LD_INT 7
24031: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24032: LD_ADDR_OWVAR 44
24036: PUSH
24037: LD_INT 10
24039: PUSH
24040: LD_INT 11
24042: PUSH
24043: LD_INT 12
24045: PUSH
24046: LD_INT 15
24048: PUSH
24049: LD_INT 14
24051: PUSH
24052: LD_INT 13
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 3
24070: MINUS
24071: ARRAY
24072: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24073: LD_ADDR_OWVAR 45
24077: PUSH
24078: LD_INT 9
24080: ST_TO_ADDR
// end ; 10 .. 13 :
24081: GO 24591
24083: LD_INT 10
24085: DOUBLE
24086: GREATEREQUAL
24087: IFFALSE 24095
24089: LD_INT 13
24091: DOUBLE
24092: LESSEQUAL
24093: IFTRUE 24097
24095: GO 24174
24097: POP
// begin bc_type := b_lab_full ;
24098: LD_ADDR_OWVAR 42
24102: PUSH
24103: LD_INT 8
24105: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24106: LD_ADDR_OWVAR 44
24110: PUSH
24111: LD_INT 10
24113: PUSH
24114: LD_INT 12
24116: PUSH
24117: LD_INT 14
24119: PUSH
24120: LD_INT 13
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_VAR 0 2
24133: PUSH
24134: LD_INT 9
24136: MINUS
24137: ARRAY
24138: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24139: LD_ADDR_OWVAR 45
24143: PUSH
24144: LD_INT 11
24146: PUSH
24147: LD_INT 15
24149: PUSH
24150: LD_INT 12
24152: PUSH
24153: LD_INT 15
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: PUSH
24162: LD_VAR 0 2
24166: PUSH
24167: LD_INT 9
24169: MINUS
24170: ARRAY
24171: ST_TO_ADDR
// end ; 14 :
24172: GO 24591
24174: LD_INT 14
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_workshop ; 15 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 2
24190: ST_TO_ADDR
24191: GO 24591
24193: LD_INT 15
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_factory ; 16 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 3
24209: ST_TO_ADDR
24210: GO 24591
24212: LD_INT 16
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_ext_gun ; 17 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 17
24228: ST_TO_ADDR
24229: GO 24591
24231: LD_INT 17
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24267
24239: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 19
24247: PUSH
24248: LD_INT 23
24250: PUSH
24251: LD_INT 19
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: ST_TO_ADDR
24265: GO 24591
24267: LD_INT 18
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24286
24275: POP
// bc_type := b_ext_radar ; 19 :
24276: LD_ADDR_OWVAR 42
24280: PUSH
24281: LD_INT 20
24283: ST_TO_ADDR
24284: GO 24591
24286: LD_INT 19
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24305
24294: POP
// bc_type := b_ext_radio ; 20 :
24295: LD_ADDR_OWVAR 42
24299: PUSH
24300: LD_INT 22
24302: ST_TO_ADDR
24303: GO 24591
24305: LD_INT 20
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24324
24313: POP
// bc_type := b_ext_siberium ; 21 :
24314: LD_ADDR_OWVAR 42
24318: PUSH
24319: LD_INT 21
24321: ST_TO_ADDR
24322: GO 24591
24324: LD_INT 21
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24343
24332: POP
// bc_type := b_ext_computer ; 22 :
24333: LD_ADDR_OWVAR 42
24337: PUSH
24338: LD_INT 24
24340: ST_TO_ADDR
24341: GO 24591
24343: LD_INT 22
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24362
24351: POP
// bc_type := b_ext_track ; 23 :
24352: LD_ADDR_OWVAR 42
24356: PUSH
24357: LD_INT 16
24359: ST_TO_ADDR
24360: GO 24591
24362: LD_INT 23
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24370
24368: GO 24381
24370: POP
// bc_type := b_ext_laser ; 24 :
24371: LD_ADDR_OWVAR 42
24375: PUSH
24376: LD_INT 25
24378: ST_TO_ADDR
24379: GO 24591
24381: LD_INT 24
24383: DOUBLE
24384: EQUAL
24385: IFTRUE 24389
24387: GO 24400
24389: POP
// bc_type := b_control_tower ; 25 :
24390: LD_ADDR_OWVAR 42
24394: PUSH
24395: LD_INT 36
24397: ST_TO_ADDR
24398: GO 24591
24400: LD_INT 25
24402: DOUBLE
24403: EQUAL
24404: IFTRUE 24408
24406: GO 24419
24408: POP
// bc_type := b_breastwork ; 26 :
24409: LD_ADDR_OWVAR 42
24413: PUSH
24414: LD_INT 31
24416: ST_TO_ADDR
24417: GO 24591
24419: LD_INT 26
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24438
24427: POP
// bc_type := b_bunker ; 27 :
24428: LD_ADDR_OWVAR 42
24432: PUSH
24433: LD_INT 32
24435: ST_TO_ADDR
24436: GO 24591
24438: LD_INT 27
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24457
24446: POP
// bc_type := b_turret ; 28 :
24447: LD_ADDR_OWVAR 42
24451: PUSH
24452: LD_INT 33
24454: ST_TO_ADDR
24455: GO 24591
24457: LD_INT 28
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24476
24465: POP
// bc_type := b_armoury ; 29 :
24466: LD_ADDR_OWVAR 42
24470: PUSH
24471: LD_INT 4
24473: ST_TO_ADDR
24474: GO 24591
24476: LD_INT 29
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24495
24484: POP
// bc_type := b_barracks ; 30 :
24485: LD_ADDR_OWVAR 42
24489: PUSH
24490: LD_INT 5
24492: ST_TO_ADDR
24493: GO 24591
24495: LD_INT 30
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24503
24501: GO 24514
24503: POP
// bc_type := b_solar_power ; 31 :
24504: LD_ADDR_OWVAR 42
24508: PUSH
24509: LD_INT 27
24511: ST_TO_ADDR
24512: GO 24591
24514: LD_INT 31
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24533
24522: POP
// bc_type := b_oil_power ; 32 :
24523: LD_ADDR_OWVAR 42
24527: PUSH
24528: LD_INT 26
24530: ST_TO_ADDR
24531: GO 24591
24533: LD_INT 32
24535: DOUBLE
24536: EQUAL
24537: IFTRUE 24541
24539: GO 24552
24541: POP
// bc_type := b_siberite_power ; 33 :
24542: LD_ADDR_OWVAR 42
24546: PUSH
24547: LD_INT 28
24549: ST_TO_ADDR
24550: GO 24591
24552: LD_INT 33
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24571
24560: POP
// bc_type := b_oil_mine ; 34 :
24561: LD_ADDR_OWVAR 42
24565: PUSH
24566: LD_INT 29
24568: ST_TO_ADDR
24569: GO 24591
24571: LD_INT 34
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24590
24579: POP
// bc_type := b_siberite_mine ; end ;
24580: LD_ADDR_OWVAR 42
24584: PUSH
24585: LD_INT 30
24587: ST_TO_ADDR
24588: GO 24591
24590: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24591: LD_ADDR_VAR 0 8
24595: PUSH
24596: LD_VAR 0 5
24600: PPUSH
24601: LD_VAR 0 6
24605: PPUSH
24606: LD_VAR 0 3
24610: PPUSH
24611: CALL_OW 47
24615: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24616: LD_OWVAR 42
24620: PUSH
24621: LD_INT 32
24623: PUSH
24624: LD_INT 33
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: IN
24631: IFFALSE 24647
// PlaceWeaponTurret ( b , weapon ) ;
24633: LD_VAR 0 8
24637: PPUSH
24638: LD_VAR 0 4
24642: PPUSH
24643: CALL_OW 431
// end ;
24647: LD_VAR 0 7
24651: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24652: LD_INT 0
24654: PPUSH
24655: PPUSH
24656: PPUSH
24657: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24658: LD_ADDR_VAR 0 4
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_OWVAR 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 30
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 30
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: ST_TO_ADDR
// if not tmp then
24712: LD_VAR 0 4
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24780
// for i in tmp do
24721: LD_ADDR_VAR 0 2
24725: PUSH
24726: LD_VAR 0 4
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24778
// for j = 1 to 3 do
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: DOUBLE
24740: LD_INT 1
24742: DEC
24743: ST_TO_ADDR
24744: LD_INT 3
24746: PUSH
24747: FOR_TO
24748: IFFALSE 24774
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24750: LD_VAR 0 2
24754: PPUSH
24755: CALL_OW 274
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 99999
24767: PPUSH
24768: CALL_OW 277
24772: GO 24747
24774: POP
24775: POP
24776: GO 24731
24778: POP
24779: POP
// end ;
24780: LD_VAR 0 1
24784: RET
// export function hHackSetLevel10 ; var i , j ; begin
24785: LD_INT 0
24787: PPUSH
24788: PPUSH
24789: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 69
24809: PUSH
24810: FOR_IN
24811: IFFALSE 24863
// if IsSelected ( i ) then
24813: LD_VAR 0 2
24817: PPUSH
24818: CALL_OW 306
24822: IFFALSE 24861
// begin for j := 1 to 4 do
24824: LD_ADDR_VAR 0 3
24828: PUSH
24829: DOUBLE
24830: LD_INT 1
24832: DEC
24833: ST_TO_ADDR
24834: LD_INT 4
24836: PUSH
24837: FOR_TO
24838: IFFALSE 24859
// SetSkill ( i , j , 10 ) ;
24840: LD_VAR 0 2
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: LD_INT 10
24852: PPUSH
24853: CALL_OW 237
24857: GO 24837
24859: POP
24860: POP
// end ;
24861: GO 24810
24863: POP
24864: POP
// end ;
24865: LD_VAR 0 1
24869: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
24874: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_INT 22
24882: PUSH
24883: LD_OWVAR 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 21
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PPUSH
24906: CALL_OW 69
24910: PUSH
24911: FOR_IN
24912: IFFALSE 24953
// begin for j := 1 to 4 do
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: DOUBLE
24920: LD_INT 1
24922: DEC
24923: ST_TO_ADDR
24924: LD_INT 4
24926: PUSH
24927: FOR_TO
24928: IFFALSE 24949
// SetSkill ( i , j , 10 ) ;
24930: LD_VAR 0 2
24934: PPUSH
24935: LD_VAR 0 3
24939: PPUSH
24940: LD_INT 10
24942: PPUSH
24943: CALL_OW 237
24947: GO 24927
24949: POP
24950: POP
// end ;
24951: GO 24911
24953: POP
24954: POP
// end ;
24955: LD_VAR 0 1
24959: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24960: LD_INT 0
24962: PPUSH
// uc_side := your_side ;
24963: LD_ADDR_OWVAR 20
24967: PUSH
24968: LD_OWVAR 2
24972: ST_TO_ADDR
// uc_nation := nation ;
24973: LD_ADDR_OWVAR 21
24977: PUSH
24978: LD_VAR 0 1
24982: ST_TO_ADDR
// InitHc ;
24983: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24987: LD_INT 0
24989: PPUSH
24990: LD_VAR 0 2
24994: PPUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25004: LD_VAR 0 4
25008: PPUSH
25009: LD_VAR 0 5
25013: PPUSH
25014: CALL_OW 428
25018: PUSH
25019: LD_INT 0
25021: EQUAL
25022: IFFALSE 25046
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25024: CALL_OW 44
25028: PPUSH
25029: LD_VAR 0 4
25033: PPUSH
25034: LD_VAR 0 5
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: CALL_OW 48
// end ;
25046: LD_VAR 0 6
25050: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
// uc_side := your_side ;
25055: LD_ADDR_OWVAR 20
25059: PUSH
25060: LD_OWVAR 2
25064: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25065: LD_VAR 0 1
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: IN
25092: IFFALSE 25104
// uc_nation := nation_american else
25094: LD_ADDR_OWVAR 21
25098: PUSH
25099: LD_INT 1
25101: ST_TO_ADDR
25102: GO 25147
// if chassis in [ 11 , 12 , 13 , 14 ] then
25104: LD_VAR 0 1
25108: PUSH
25109: LD_INT 11
25111: PUSH
25112: LD_INT 12
25114: PUSH
25115: LD_INT 13
25117: PUSH
25118: LD_INT 14
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: IN
25127: IFFALSE 25139
// uc_nation := nation_arabian else
25129: LD_ADDR_OWVAR 21
25133: PUSH
25134: LD_INT 2
25136: ST_TO_ADDR
25137: GO 25147
// uc_nation := nation_russian ;
25139: LD_ADDR_OWVAR 21
25143: PUSH
25144: LD_INT 3
25146: ST_TO_ADDR
// vc_chassis := chassis ;
25147: LD_ADDR_OWVAR 37
25151: PUSH
25152: LD_VAR 0 1
25156: ST_TO_ADDR
// vc_engine := engine ;
25157: LD_ADDR_OWVAR 39
25161: PUSH
25162: LD_VAR 0 2
25166: ST_TO_ADDR
// vc_control := control ;
25167: LD_ADDR_OWVAR 38
25171: PUSH
25172: LD_VAR 0 3
25176: ST_TO_ADDR
// vc_weapon := weapon ;
25177: LD_ADDR_OWVAR 40
25181: PUSH
25182: LD_VAR 0 4
25186: ST_TO_ADDR
// un := CreateVehicle ;
25187: LD_ADDR_VAR 0 8
25191: PUSH
25192: CALL_OW 45
25196: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25197: LD_VAR 0 8
25201: PPUSH
25202: LD_INT 0
25204: PPUSH
25205: LD_INT 5
25207: PPUSH
25208: CALL_OW 12
25212: PPUSH
25213: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25217: LD_VAR 0 8
25221: PPUSH
25222: LD_VAR 0 5
25226: PPUSH
25227: LD_VAR 0 6
25231: PPUSH
25232: LD_INT 1
25234: PPUSH
25235: CALL_OW 48
// end ;
25239: LD_VAR 0 7
25243: RET
// export hInvincible ; every 1 do
25244: GO 25246
25246: DISABLE
// hInvincible := [ ] ;
25247: LD_ADDR_EXP 84
25251: PUSH
25252: EMPTY
25253: ST_TO_ADDR
25254: END
// every 10 do var i ;
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
// begin enable ;
25261: ENABLE
// if not hInvincible then
25262: LD_EXP 84
25266: NOT
25267: IFFALSE 25271
// exit ;
25269: GO 25315
// for i in hInvincible do
25271: LD_ADDR_VAR 0 1
25275: PUSH
25276: LD_EXP 84
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25313
// if GetLives ( i ) < 1000 then
25284: LD_VAR 0 1
25288: PPUSH
25289: CALL_OW 256
25293: PUSH
25294: LD_INT 1000
25296: LESS
25297: IFFALSE 25311
// SetLives ( i , 1000 ) ;
25299: LD_VAR 0 1
25303: PPUSH
25304: LD_INT 1000
25306: PPUSH
25307: CALL_OW 234
25311: GO 25281
25313: POP
25314: POP
// end ;
25315: PPOPN 1
25317: END
// export function hHackInvincible ; var i ; begin
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25322: LD_ADDR_VAR 0 2
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: PPUSH
25355: CALL_OW 69
25359: PUSH
25360: FOR_IN
25361: IFFALSE 25422
// if IsSelected ( i ) then
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 306
25372: IFFALSE 25420
// begin if i in hInvincible then
25374: LD_VAR 0 2
25378: PUSH
25379: LD_EXP 84
25383: IN
25384: IFFALSE 25404
// hInvincible := hInvincible diff i else
25386: LD_ADDR_EXP 84
25390: PUSH
25391: LD_EXP 84
25395: PUSH
25396: LD_VAR 0 2
25400: DIFF
25401: ST_TO_ADDR
25402: GO 25420
// hInvincible := hInvincible union i ;
25404: LD_ADDR_EXP 84
25408: PUSH
25409: LD_EXP 84
25413: PUSH
25414: LD_VAR 0 2
25418: UNION
25419: ST_TO_ADDR
// end ;
25420: GO 25360
25422: POP
25423: POP
// end ;
25424: LD_VAR 0 1
25428: RET
// export function hHackInvisible ; var i , j ; begin
25429: LD_INT 0
25431: PPUSH
25432: PPUSH
25433: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_INT 21
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PPUSH
25449: CALL_OW 69
25453: PUSH
25454: FOR_IN
25455: IFFALSE 25479
// if IsSelected ( i ) then
25457: LD_VAR 0 2
25461: PPUSH
25462: CALL_OW 306
25466: IFFALSE 25477
// ComForceInvisible ( i ) ;
25468: LD_VAR 0 2
25472: PPUSH
25473: CALL_OW 496
25477: GO 25454
25479: POP
25480: POP
// end ;
25481: LD_VAR 0 1
25485: RET
// export function hHackChangeYourSide ; begin
25486: LD_INT 0
25488: PPUSH
// if your_side = 8 then
25489: LD_OWVAR 2
25493: PUSH
25494: LD_INT 8
25496: EQUAL
25497: IFFALSE 25509
// your_side := 0 else
25499: LD_ADDR_OWVAR 2
25503: PUSH
25504: LD_INT 0
25506: ST_TO_ADDR
25507: GO 25523
// your_side := your_side + 1 ;
25509: LD_ADDR_OWVAR 2
25513: PUSH
25514: LD_OWVAR 2
25518: PUSH
25519: LD_INT 1
25521: PLUS
25522: ST_TO_ADDR
// end ;
25523: LD_VAR 0 1
25527: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
25532: PPUSH
// for i in all_units do
25533: LD_ADDR_VAR 0 2
25537: PUSH
25538: LD_OWVAR 3
25542: PUSH
25543: FOR_IN
25544: IFFALSE 25622
// if IsSelected ( i ) then
25546: LD_VAR 0 2
25550: PPUSH
25551: CALL_OW 306
25555: IFFALSE 25620
// begin j := GetSide ( i ) ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: CALL_OW 255
25571: ST_TO_ADDR
// if j = 8 then
25572: LD_VAR 0 3
25576: PUSH
25577: LD_INT 8
25579: EQUAL
25580: IFFALSE 25592
// j := 0 else
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
25590: GO 25606
// j := j + 1 ;
25592: LD_ADDR_VAR 0 3
25596: PUSH
25597: LD_VAR 0 3
25601: PUSH
25602: LD_INT 1
25604: PLUS
25605: ST_TO_ADDR
// SetSide ( i , j ) ;
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: CALL_OW 235
// end ;
25620: GO 25543
25622: POP
25623: POP
// end ;
25624: LD_VAR 0 1
25628: RET
// export function hHackFog ; begin
25629: LD_INT 0
25631: PPUSH
// FogOff ( true ) ;
25632: LD_INT 1
25634: PPUSH
25635: CALL_OW 344
// end ;
25639: LD_VAR 0 1
25643: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25644: LD_INT 0
25646: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_VAR 0 2
25656: PPUSH
25657: LD_VAR 0 3
25661: PPUSH
25662: LD_INT 1
25664: PPUSH
25665: LD_INT 1
25667: PPUSH
25668: CALL_OW 483
// CenterOnXY ( x , y ) ;
25672: LD_VAR 0 2
25676: PPUSH
25677: LD_VAR 0 3
25681: PPUSH
25682: CALL_OW 84
// end ;
25686: LD_VAR 0 4
25690: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25691: LD_INT 0
25693: PPUSH
25694: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25695: LD_VAR 0 1
25699: NOT
25700: PUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: CALL_OW 488
25715: NOT
25716: OR
25717: PUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 266
25727: PUSH
25728: LD_INT 3
25730: NONEQUAL
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 247
25741: PUSH
25742: LD_INT 1
25744: EQUAL
25745: NOT
25746: AND
25747: OR
25748: IFFALSE 25752
// exit ;
25750: GO 25901
// if GetType ( factory ) = unit_human then
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 247
25761: PUSH
25762: LD_INT 1
25764: EQUAL
25765: IFFALSE 25782
// factory := IsInUnit ( factory ) ;
25767: LD_ADDR_VAR 0 1
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 310
25781: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 266
25791: PUSH
25792: LD_INT 3
25794: NONEQUAL
25795: IFFALSE 25799
// exit ;
25797: GO 25901
// if HexInfo ( x , y ) = factory then
25799: LD_VAR 0 2
25803: PPUSH
25804: LD_VAR 0 3
25808: PPUSH
25809: CALL_OW 428
25813: PUSH
25814: LD_VAR 0 1
25818: EQUAL
25819: IFFALSE 25846
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25821: LD_ADDR_EXP 85
25825: PUSH
25826: LD_EXP 85
25830: PPUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_INT 0
25838: PPUSH
25839: CALL_OW 1
25843: ST_TO_ADDR
25844: GO 25897
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25846: LD_ADDR_EXP 85
25850: PUSH
25851: LD_EXP 85
25855: PPUSH
25856: LD_VAR 0 1
25860: PPUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 255
25870: PUSH
25871: LD_VAR 0 1
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_VAR 0 3
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 1
25896: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25897: CALL 25906 0 0
// end ;
25901: LD_VAR 0 4
25905: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
25910: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25911: LD_STRING resetFactoryWaypoint();
25913: PPUSH
25914: CALL_OW 559
// if factoryWaypoints then
25918: LD_EXP 85
25922: IFFALSE 26048
// begin list := PrepareArray ( factoryWaypoints ) ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_EXP 85
25933: PPUSH
25934: CALL 73190 0 1
25938: ST_TO_ADDR
// for i := 1 to list do
25939: LD_ADDR_VAR 0 2
25943: PUSH
25944: DOUBLE
25945: LD_INT 1
25947: DEC
25948: ST_TO_ADDR
25949: LD_VAR 0 3
25953: PUSH
25954: FOR_TO
25955: IFFALSE 26046
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25957: LD_STRING setFactoryWaypointXY(
25959: PUSH
25960: LD_VAR 0 3
25964: PUSH
25965: LD_VAR 0 2
25969: ARRAY
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: STR
25975: PUSH
25976: LD_STRING ,
25978: STR
25979: PUSH
25980: LD_VAR 0 3
25984: PUSH
25985: LD_VAR 0 2
25989: ARRAY
25990: PUSH
25991: LD_INT 2
25993: ARRAY
25994: STR
25995: PUSH
25996: LD_STRING ,
25998: STR
25999: PUSH
26000: LD_VAR 0 3
26004: PUSH
26005: LD_VAR 0 2
26009: ARRAY
26010: PUSH
26011: LD_INT 3
26013: ARRAY
26014: STR
26015: PUSH
26016: LD_STRING ,
26018: STR
26019: PUSH
26020: LD_VAR 0 3
26024: PUSH
26025: LD_VAR 0 2
26029: ARRAY
26030: PUSH
26031: LD_INT 4
26033: ARRAY
26034: STR
26035: PUSH
26036: LD_STRING )
26038: STR
26039: PPUSH
26040: CALL_OW 559
26044: GO 25954
26046: POP
26047: POP
// end ; end ;
26048: LD_VAR 0 1
26052: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26053: LD_INT 0
26055: PPUSH
// if HexInfo ( x , y ) = warehouse then
26056: LD_VAR 0 2
26060: PPUSH
26061: LD_VAR 0 3
26065: PPUSH
26066: CALL_OW 428
26070: PUSH
26071: LD_VAR 0 1
26075: EQUAL
26076: IFFALSE 26103
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26078: LD_ADDR_EXP 86
26082: PUSH
26083: LD_EXP 86
26087: PPUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: LD_INT 0
26095: PPUSH
26096: CALL_OW 1
26100: ST_TO_ADDR
26101: GO 26154
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26103: LD_ADDR_EXP 86
26107: PUSH
26108: LD_EXP 86
26112: PPUSH
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 255
26127: PUSH
26128: LD_VAR 0 1
26132: PUSH
26133: LD_VAR 0 2
26137: PUSH
26138: LD_VAR 0 3
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: PPUSH
26149: CALL_OW 1
26153: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26154: CALL 26163 0 0
// end ;
26158: LD_VAR 0 4
26162: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26168: LD_STRING resetWarehouseGatheringPoints();
26170: PPUSH
26171: CALL_OW 559
// if warehouseGatheringPoints then
26175: LD_EXP 86
26179: IFFALSE 26305
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26181: LD_ADDR_VAR 0 3
26185: PUSH
26186: LD_EXP 86
26190: PPUSH
26191: CALL 73190 0 1
26195: ST_TO_ADDR
// for i := 1 to list do
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: DOUBLE
26202: LD_INT 1
26204: DEC
26205: ST_TO_ADDR
26206: LD_VAR 0 3
26210: PUSH
26211: FOR_TO
26212: IFFALSE 26303
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26214: LD_STRING setWarehouseGatheringPointXY(
26216: PUSH
26217: LD_VAR 0 3
26221: PUSH
26222: LD_VAR 0 2
26226: ARRAY
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: STR
26232: PUSH
26233: LD_STRING ,
26235: STR
26236: PUSH
26237: LD_VAR 0 3
26241: PUSH
26242: LD_VAR 0 2
26246: ARRAY
26247: PUSH
26248: LD_INT 2
26250: ARRAY
26251: STR
26252: PUSH
26253: LD_STRING ,
26255: STR
26256: PUSH
26257: LD_VAR 0 3
26261: PUSH
26262: LD_VAR 0 2
26266: ARRAY
26267: PUSH
26268: LD_INT 3
26270: ARRAY
26271: STR
26272: PUSH
26273: LD_STRING ,
26275: STR
26276: PUSH
26277: LD_VAR 0 3
26281: PUSH
26282: LD_VAR 0 2
26286: ARRAY
26287: PUSH
26288: LD_INT 4
26290: ARRAY
26291: STR
26292: PUSH
26293: LD_STRING )
26295: STR
26296: PPUSH
26297: CALL_OW 559
26301: GO 26211
26303: POP
26304: POP
// end ; end ;
26305: LD_VAR 0 1
26309: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26310: LD_EXP 86
26314: IFFALSE 26999
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// begin enable ;
26330: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_EXP 86
26340: PPUSH
26341: CALL 73190 0 1
26345: ST_TO_ADDR
// if not list then
26346: LD_VAR 0 3
26350: NOT
26351: IFFALSE 26355
// exit ;
26353: GO 26999
// for i := 1 to list do
26355: LD_ADDR_VAR 0 1
26359: PUSH
26360: DOUBLE
26361: LD_INT 1
26363: DEC
26364: ST_TO_ADDR
26365: LD_VAR 0 3
26369: PUSH
26370: FOR_TO
26371: IFFALSE 26997
// begin depot := list [ i ] [ 2 ] ;
26373: LD_ADDR_VAR 0 8
26377: PUSH
26378: LD_VAR 0 3
26382: PUSH
26383: LD_VAR 0 1
26387: ARRAY
26388: PUSH
26389: LD_INT 2
26391: ARRAY
26392: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26393: LD_ADDR_VAR 0 5
26397: PUSH
26398: LD_VAR 0 3
26402: PUSH
26403: LD_VAR 0 1
26407: ARRAY
26408: PUSH
26409: LD_INT 1
26411: ARRAY
26412: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26413: LD_VAR 0 8
26417: PPUSH
26418: CALL_OW 301
26422: PUSH
26423: LD_VAR 0 5
26427: PUSH
26428: LD_VAR 0 8
26432: PPUSH
26433: CALL_OW 255
26437: NONEQUAL
26438: OR
26439: IFFALSE 26468
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26441: LD_ADDR_EXP 86
26445: PUSH
26446: LD_EXP 86
26450: PPUSH
26451: LD_VAR 0 8
26455: PPUSH
26456: LD_INT 0
26458: PPUSH
26459: CALL_OW 1
26463: ST_TO_ADDR
// exit ;
26464: POP
26465: POP
26466: GO 26999
// end ; x := list [ i ] [ 3 ] ;
26468: LD_ADDR_VAR 0 6
26472: PUSH
26473: LD_VAR 0 3
26477: PUSH
26478: LD_VAR 0 1
26482: ARRAY
26483: PUSH
26484: LD_INT 3
26486: ARRAY
26487: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26488: LD_ADDR_VAR 0 7
26492: PUSH
26493: LD_VAR 0 3
26497: PUSH
26498: LD_VAR 0 1
26502: ARRAY
26503: PUSH
26504: LD_INT 4
26506: ARRAY
26507: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26508: LD_ADDR_VAR 0 9
26512: PUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: LD_VAR 0 7
26522: PPUSH
26523: LD_INT 16
26525: PPUSH
26526: CALL 71778 0 3
26530: ST_TO_ADDR
// if not cratesNearbyPoint then
26531: LD_VAR 0 9
26535: NOT
26536: IFFALSE 26542
// exit ;
26538: POP
26539: POP
26540: GO 26999
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26542: LD_ADDR_VAR 0 4
26546: PUSH
26547: LD_INT 22
26549: PUSH
26550: LD_VAR 0 5
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 60
26564: PUSH
26565: EMPTY
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 91
26574: PUSH
26575: LD_VAR 0 8
26579: PUSH
26580: LD_INT 6
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 25
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 25
26603: PUSH
26604: LD_INT 16
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: PUSH
26627: LD_VAR 0 8
26631: PPUSH
26632: CALL_OW 313
26636: PPUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 60
26642: PUSH
26643: EMPTY
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 25
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 25
26665: PUSH
26666: LD_INT 16
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 72
26686: UNION
26687: ST_TO_ADDR
// if tmp then
26688: LD_VAR 0 4
26692: IFFALSE 26772
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26694: LD_ADDR_VAR 0 4
26698: PUSH
26699: LD_VAR 0 4
26703: PPUSH
26704: LD_INT 3
26706: PPUSH
26707: CALL 69747 0 2
26711: ST_TO_ADDR
// for j in tmp do
26712: LD_ADDR_VAR 0 2
26716: PUSH
26717: LD_VAR 0 4
26721: PUSH
26722: FOR_IN
26723: IFFALSE 26766
// begin if IsInUnit ( j ) then
26725: LD_VAR 0 2
26729: PPUSH
26730: CALL_OW 310
26734: IFFALSE 26745
// ComExit ( j ) ;
26736: LD_VAR 0 2
26740: PPUSH
26741: CALL 69830 0 1
// AddComCollect ( j , x , y ) ;
26745: LD_VAR 0 2
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_VAR 0 7
26759: PPUSH
26760: CALL_OW 177
// end ;
26764: GO 26722
26766: POP
26767: POP
// exit ;
26768: POP
26769: POP
26770: GO 26999
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26772: LD_ADDR_VAR 0 4
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_VAR 0 5
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 91
26791: PUSH
26792: LD_VAR 0 8
26796: PUSH
26797: LD_INT 8
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 34
26810: PUSH
26811: LD_INT 12
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 34
26820: PUSH
26821: LD_INT 51
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 34
26830: PUSH
26831: LD_INT 32
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 34
26840: PUSH
26841: LD_INT 89
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: ST_TO_ADDR
// if tmp then
26865: LD_VAR 0 4
26869: IFFALSE 26995
// begin for j in tmp do
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_VAR 0 4
26880: PUSH
26881: FOR_IN
26882: IFFALSE 26993
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26884: LD_VAR 0 2
26888: PPUSH
26889: CALL_OW 262
26893: PUSH
26894: LD_INT 3
26896: EQUAL
26897: PUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: CALL_OW 261
26907: PUSH
26908: LD_INT 20
26910: GREATER
26911: OR
26912: PUSH
26913: LD_VAR 0 2
26917: PPUSH
26918: CALL_OW 314
26922: NOT
26923: AND
26924: PUSH
26925: LD_VAR 0 2
26929: PPUSH
26930: CALL_OW 263
26934: PUSH
26935: LD_INT 1
26937: NONEQUAL
26938: PUSH
26939: LD_VAR 0 2
26943: PPUSH
26944: CALL_OW 311
26948: OR
26949: AND
26950: IFFALSE 26991
// begin ComCollect ( j , x , y ) ;
26952: LD_VAR 0 2
26956: PPUSH
26957: LD_VAR 0 6
26961: PPUSH
26962: LD_VAR 0 7
26966: PPUSH
26967: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26971: LD_VAR 0 2
26975: PPUSH
26976: LD_VAR 0 8
26980: PPUSH
26981: CALL_OW 172
// exit ;
26985: POP
26986: POP
26987: POP
26988: POP
26989: GO 26999
// end ;
26991: GO 26881
26993: POP
26994: POP
// end ; end ;
26995: GO 26370
26997: POP
26998: POP
// end ; end_of_file
26999: PPOPN 9
27001: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27002: LD_INT 0
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27008: LD_VAR 0 1
27012: PPUSH
27013: CALL_OW 264
27017: PUSH
27018: LD_INT 91
27020: EQUAL
27021: IFFALSE 27093
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27023: LD_INT 68
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 255
27035: PPUSH
27036: CALL_OW 321
27040: PUSH
27041: LD_INT 2
27043: EQUAL
27044: IFFALSE 27056
// eff := 70 else
27046: LD_ADDR_VAR 0 4
27050: PUSH
27051: LD_INT 70
27053: ST_TO_ADDR
27054: GO 27064
// eff := 30 ;
27056: LD_ADDR_VAR 0 4
27060: PUSH
27061: LD_INT 30
27063: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 250
27073: PPUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 251
27083: PPUSH
27084: LD_VAR 0 4
27088: PPUSH
27089: CALL_OW 495
// end ; end ;
27093: LD_VAR 0 2
27097: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27098: LD_INT 0
27100: PPUSH
// end ;
27101: LD_VAR 0 4
27105: RET
// export function SOS_Command ( cmd ) ; begin
27106: LD_INT 0
27108: PPUSH
// end ;
27109: LD_VAR 0 2
27113: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27114: LD_INT 0
27116: PPUSH
// end ;
27117: LD_VAR 0 6
27121: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27122: LD_INT 0
27124: PPUSH
27125: PPUSH
// if not vehicle or not factory then
27126: LD_VAR 0 1
27130: NOT
27131: PUSH
27132: LD_VAR 0 2
27136: NOT
27137: OR
27138: IFFALSE 27142
// exit ;
27140: GO 27373
// if factoryWaypoints >= factory then
27142: LD_EXP 85
27146: PUSH
27147: LD_VAR 0 2
27151: GREATEREQUAL
27152: IFFALSE 27373
// if factoryWaypoints [ factory ] then
27154: LD_EXP 85
27158: PUSH
27159: LD_VAR 0 2
27163: ARRAY
27164: IFFALSE 27373
// begin if GetControl ( vehicle ) = control_manual then
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 263
27175: PUSH
27176: LD_INT 1
27178: EQUAL
27179: IFFALSE 27260
// begin driver := IsDrivenBy ( vehicle ) ;
27181: LD_ADDR_VAR 0 4
27185: PUSH
27186: LD_VAR 0 1
27190: PPUSH
27191: CALL_OW 311
27195: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27196: LD_VAR 0 4
27200: PPUSH
27201: LD_EXP 85
27205: PUSH
27206: LD_VAR 0 2
27210: ARRAY
27211: PUSH
27212: LD_INT 3
27214: ARRAY
27215: PPUSH
27216: LD_EXP 85
27220: PUSH
27221: LD_VAR 0 2
27225: ARRAY
27226: PUSH
27227: LD_INT 4
27229: ARRAY
27230: PPUSH
27231: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27235: LD_VAR 0 4
27239: PPUSH
27240: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 180
// end else
27258: GO 27373
// if GetControl ( vehicle ) = control_remote then
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 263
27269: PUSH
27270: LD_INT 2
27272: EQUAL
27273: IFFALSE 27334
// begin wait ( 0 0$2 ) ;
27275: LD_INT 70
27277: PPUSH
27278: CALL_OW 67
// if Connect ( vehicle ) then
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL 40038 0 1
27291: IFFALSE 27332
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_EXP 85
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: PUSH
27309: LD_INT 3
27311: ARRAY
27312: PPUSH
27313: LD_EXP 85
27317: PUSH
27318: LD_VAR 0 2
27322: ARRAY
27323: PUSH
27324: LD_INT 4
27326: ARRAY
27327: PPUSH
27328: CALL_OW 171
// end else
27332: GO 27373
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27334: LD_VAR 0 1
27338: PPUSH
27339: LD_EXP 85
27343: PUSH
27344: LD_VAR 0 2
27348: ARRAY
27349: PUSH
27350: LD_INT 3
27352: ARRAY
27353: PPUSH
27354: LD_EXP 85
27358: PUSH
27359: LD_VAR 0 2
27363: ARRAY
27364: PUSH
27365: LD_INT 4
27367: ARRAY
27368: PPUSH
27369: CALL_OW 171
// end ; end ;
27373: LD_VAR 0 3
27377: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27378: LD_INT 0
27380: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27381: LD_VAR 0 1
27385: PUSH
27386: LD_INT 250
27388: EQUAL
27389: PUSH
27390: LD_VAR 0 2
27394: PPUSH
27395: CALL_OW 264
27399: PUSH
27400: LD_INT 81
27402: EQUAL
27403: AND
27404: IFFALSE 27425
// MinerPlaceMine ( unit , x , y ) ;
27406: LD_VAR 0 2
27410: PPUSH
27411: LD_VAR 0 4
27415: PPUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: CALL 30249 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27425: LD_VAR 0 1
27429: PUSH
27430: LD_INT 251
27432: EQUAL
27433: PUSH
27434: LD_VAR 0 2
27438: PPUSH
27439: CALL_OW 264
27443: PUSH
27444: LD_INT 81
27446: EQUAL
27447: AND
27448: IFFALSE 27469
// MinerDetonateMine ( unit , x , y ) ;
27450: LD_VAR 0 2
27454: PPUSH
27455: LD_VAR 0 4
27459: PPUSH
27460: LD_VAR 0 5
27464: PPUSH
27465: CALL 30524 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27469: LD_VAR 0 1
27473: PUSH
27474: LD_INT 252
27476: EQUAL
27477: PUSH
27478: LD_VAR 0 2
27482: PPUSH
27483: CALL_OW 264
27487: PUSH
27488: LD_INT 81
27490: EQUAL
27491: AND
27492: IFFALSE 27513
// MinerCreateMinefield ( unit , x , y ) ;
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 4
27503: PPUSH
27504: LD_VAR 0 5
27508: PPUSH
27509: CALL 30941 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 253
27520: EQUAL
27521: PUSH
27522: LD_VAR 0 2
27526: PPUSH
27527: CALL_OW 257
27531: PUSH
27532: LD_INT 5
27534: EQUAL
27535: AND
27536: IFFALSE 27557
// ComBinocular ( unit , x , y ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: LD_VAR 0 4
27547: PPUSH
27548: LD_VAR 0 5
27552: PPUSH
27553: CALL 31310 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 254
27564: EQUAL
27565: PUSH
27566: LD_VAR 0 2
27570: PPUSH
27571: CALL_OW 264
27575: PUSH
27576: LD_INT 99
27578: EQUAL
27579: AND
27580: PUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: CALL_OW 263
27590: PUSH
27591: LD_INT 3
27593: EQUAL
27594: AND
27595: IFFALSE 27611
// HackDestroyVehicle ( unit , selectedUnit ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 3
27606: PPUSH
27607: CALL 29613 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 255
27618: EQUAL
27619: PUSH
27620: LD_VAR 0 2
27624: PPUSH
27625: CALL_OW 264
27629: PUSH
27630: LD_INT 14
27632: PUSH
27633: LD_INT 53
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: IN
27640: AND
27641: PUSH
27642: LD_VAR 0 4
27646: PPUSH
27647: LD_VAR 0 5
27651: PPUSH
27652: CALL_OW 488
27656: AND
27657: IFFALSE 27681
// CutTreeXYR ( unit , x , y , 12 ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_VAR 0 4
27668: PPUSH
27669: LD_VAR 0 5
27673: PPUSH
27674: LD_INT 12
27676: PPUSH
27677: CALL 27776 0 4
// if cmd = 256 then
27681: LD_VAR 0 1
27685: PUSH
27686: LD_INT 256
27688: EQUAL
27689: IFFALSE 27710
// SetFactoryWaypoint ( unit , x , y ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: LD_VAR 0 4
27700: PPUSH
27701: LD_VAR 0 5
27705: PPUSH
27706: CALL 25691 0 3
// if cmd = 257 then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_INT 257
27717: EQUAL
27718: IFFALSE 27739
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27720: LD_VAR 0 2
27724: PPUSH
27725: LD_VAR 0 4
27729: PPUSH
27730: LD_VAR 0 5
27734: PPUSH
27735: CALL 26053 0 3
// if cmd = 258 then
27739: LD_VAR 0 1
27743: PUSH
27744: LD_INT 258
27746: EQUAL
27747: IFFALSE 27771
// BurnTreeXYR ( unit , x , y , 8 ) ;
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_VAR 0 4
27758: PPUSH
27759: LD_VAR 0 5
27763: PPUSH
27764: LD_INT 8
27766: PPUSH
27767: CALL 28170 0 4
// end ;
27771: LD_VAR 0 6
27775: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27787: LD_VAR 0 1
27791: PPUSH
27792: CALL_OW 302
27796: NOT
27797: PUSH
27798: LD_VAR 0 2
27802: PPUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: CALL_OW 488
27812: NOT
27813: OR
27814: PUSH
27815: LD_VAR 0 4
27819: NOT
27820: OR
27821: IFFALSE 27825
// exit ;
27823: GO 28165
// list := [ ] ;
27825: LD_ADDR_VAR 0 13
27829: PUSH
27830: EMPTY
27831: ST_TO_ADDR
// if x - r < 0 then
27832: LD_VAR 0 2
27836: PUSH
27837: LD_VAR 0 4
27841: MINUS
27842: PUSH
27843: LD_INT 0
27845: LESS
27846: IFFALSE 27858
// min_x := 0 else
27848: LD_ADDR_VAR 0 7
27852: PUSH
27853: LD_INT 0
27855: ST_TO_ADDR
27856: GO 27874
// min_x := x - r ;
27858: LD_ADDR_VAR 0 7
27862: PUSH
27863: LD_VAR 0 2
27867: PUSH
27868: LD_VAR 0 4
27872: MINUS
27873: ST_TO_ADDR
// if y - r < 0 then
27874: LD_VAR 0 3
27878: PUSH
27879: LD_VAR 0 4
27883: MINUS
27884: PUSH
27885: LD_INT 0
27887: LESS
27888: IFFALSE 27900
// min_y := 0 else
27890: LD_ADDR_VAR 0 8
27894: PUSH
27895: LD_INT 0
27897: ST_TO_ADDR
27898: GO 27916
// min_y := y - r ;
27900: LD_ADDR_VAR 0 8
27904: PUSH
27905: LD_VAR 0 3
27909: PUSH
27910: LD_VAR 0 4
27914: MINUS
27915: ST_TO_ADDR
// max_x := x + r ;
27916: LD_ADDR_VAR 0 9
27920: PUSH
27921: LD_VAR 0 2
27925: PUSH
27926: LD_VAR 0 4
27930: PLUS
27931: ST_TO_ADDR
// max_y := y + r ;
27932: LD_ADDR_VAR 0 10
27936: PUSH
27937: LD_VAR 0 3
27941: PUSH
27942: LD_VAR 0 4
27946: PLUS
27947: ST_TO_ADDR
// for _x = min_x to max_x do
27948: LD_ADDR_VAR 0 11
27952: PUSH
27953: DOUBLE
27954: LD_VAR 0 7
27958: DEC
27959: ST_TO_ADDR
27960: LD_VAR 0 9
27964: PUSH
27965: FOR_TO
27966: IFFALSE 28083
// for _y = min_y to max_y do
27968: LD_ADDR_VAR 0 12
27972: PUSH
27973: DOUBLE
27974: LD_VAR 0 8
27978: DEC
27979: ST_TO_ADDR
27980: LD_VAR 0 10
27984: PUSH
27985: FOR_TO
27986: IFFALSE 28079
// begin if not ValidHex ( _x , _y ) then
27988: LD_VAR 0 11
27992: PPUSH
27993: LD_VAR 0 12
27997: PPUSH
27998: CALL_OW 488
28002: NOT
28003: IFFALSE 28007
// continue ;
28005: GO 27985
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28007: LD_VAR 0 11
28011: PPUSH
28012: LD_VAR 0 12
28016: PPUSH
28017: CALL_OW 351
28021: PUSH
28022: LD_VAR 0 11
28026: PPUSH
28027: LD_VAR 0 12
28031: PPUSH
28032: CALL_OW 554
28036: AND
28037: IFFALSE 28077
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28039: LD_ADDR_VAR 0 13
28043: PUSH
28044: LD_VAR 0 13
28048: PPUSH
28049: LD_VAR 0 13
28053: PUSH
28054: LD_INT 1
28056: PLUS
28057: PPUSH
28058: LD_VAR 0 11
28062: PUSH
28063: LD_VAR 0 12
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PPUSH
28072: CALL_OW 2
28076: ST_TO_ADDR
// end ;
28077: GO 27985
28079: POP
28080: POP
28081: GO 27965
28083: POP
28084: POP
// if not list then
28085: LD_VAR 0 13
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28165
// for i in list do
28094: LD_ADDR_VAR 0 6
28098: PUSH
28099: LD_VAR 0 13
28103: PUSH
28104: FOR_IN
28105: IFFALSE 28163
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28107: LD_VAR 0 1
28111: PPUSH
28112: LD_STRING M
28114: PUSH
28115: LD_VAR 0 6
28119: PUSH
28120: LD_INT 1
28122: ARRAY
28123: PUSH
28124: LD_VAR 0 6
28128: PUSH
28129: LD_INT 2
28131: ARRAY
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: PPUSH
28157: CALL_OW 447
28161: GO 28104
28163: POP
28164: POP
// end ;
28165: LD_VAR 0 5
28169: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 302
28190: NOT
28191: PUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: LD_VAR 0 3
28201: PPUSH
28202: CALL_OW 488
28206: NOT
28207: OR
28208: PUSH
28209: LD_VAR 0 4
28213: NOT
28214: OR
28215: IFFALSE 28219
// exit ;
28217: GO 28567
// list := [ ] ;
28219: LD_ADDR_VAR 0 13
28223: PUSH
28224: EMPTY
28225: ST_TO_ADDR
// if x - r < 0 then
28226: LD_VAR 0 2
28230: PUSH
28231: LD_VAR 0 4
28235: MINUS
28236: PUSH
28237: LD_INT 0
28239: LESS
28240: IFFALSE 28252
// min_x := 0 else
28242: LD_ADDR_VAR 0 7
28246: PUSH
28247: LD_INT 0
28249: ST_TO_ADDR
28250: GO 28268
// min_x := x - r ;
28252: LD_ADDR_VAR 0 7
28256: PUSH
28257: LD_VAR 0 2
28261: PUSH
28262: LD_VAR 0 4
28266: MINUS
28267: ST_TO_ADDR
// if y - r < 0 then
28268: LD_VAR 0 3
28272: PUSH
28273: LD_VAR 0 4
28277: MINUS
28278: PUSH
28279: LD_INT 0
28281: LESS
28282: IFFALSE 28294
// min_y := 0 else
28284: LD_ADDR_VAR 0 8
28288: PUSH
28289: LD_INT 0
28291: ST_TO_ADDR
28292: GO 28310
// min_y := y - r ;
28294: LD_ADDR_VAR 0 8
28298: PUSH
28299: LD_VAR 0 3
28303: PUSH
28304: LD_VAR 0 4
28308: MINUS
28309: ST_TO_ADDR
// max_x := x + r ;
28310: LD_ADDR_VAR 0 9
28314: PUSH
28315: LD_VAR 0 2
28319: PUSH
28320: LD_VAR 0 4
28324: PLUS
28325: ST_TO_ADDR
// max_y := y + r ;
28326: LD_ADDR_VAR 0 10
28330: PUSH
28331: LD_VAR 0 3
28335: PUSH
28336: LD_VAR 0 4
28340: PLUS
28341: ST_TO_ADDR
// for _x = min_x to max_x do
28342: LD_ADDR_VAR 0 11
28346: PUSH
28347: DOUBLE
28348: LD_VAR 0 7
28352: DEC
28353: ST_TO_ADDR
28354: LD_VAR 0 9
28358: PUSH
28359: FOR_TO
28360: IFFALSE 28477
// for _y = min_y to max_y do
28362: LD_ADDR_VAR 0 12
28366: PUSH
28367: DOUBLE
28368: LD_VAR 0 8
28372: DEC
28373: ST_TO_ADDR
28374: LD_VAR 0 10
28378: PUSH
28379: FOR_TO
28380: IFFALSE 28473
// begin if not ValidHex ( _x , _y ) then
28382: LD_VAR 0 11
28386: PPUSH
28387: LD_VAR 0 12
28391: PPUSH
28392: CALL_OW 488
28396: NOT
28397: IFFALSE 28401
// continue ;
28399: GO 28379
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28401: LD_VAR 0 11
28405: PPUSH
28406: LD_VAR 0 12
28410: PPUSH
28411: CALL_OW 351
28415: PUSH
28416: LD_VAR 0 11
28420: PPUSH
28421: LD_VAR 0 12
28425: PPUSH
28426: CALL_OW 554
28430: AND
28431: IFFALSE 28471
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28433: LD_ADDR_VAR 0 13
28437: PUSH
28438: LD_VAR 0 13
28442: PPUSH
28443: LD_VAR 0 13
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 11
28456: PUSH
28457: LD_VAR 0 12
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 2
28470: ST_TO_ADDR
// end ;
28471: GO 28379
28473: POP
28474: POP
28475: GO 28359
28477: POP
28478: POP
// if not list then
28479: LD_VAR 0 13
28483: NOT
28484: IFFALSE 28488
// exit ;
28486: GO 28567
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28488: LD_ADDR_VAR 0 13
28492: PUSH
28493: LD_VAR 0 1
28497: PPUSH
28498: LD_VAR 0 13
28502: PPUSH
28503: LD_INT 1
28505: PPUSH
28506: LD_INT 1
28508: PPUSH
28509: CALL 37180 0 4
28513: ST_TO_ADDR
// ComStop ( flame ) ;
28514: LD_VAR 0 1
28518: PPUSH
28519: CALL_OW 141
// for i in list do
28523: LD_ADDR_VAR 0 6
28527: PUSH
28528: LD_VAR 0 13
28532: PUSH
28533: FOR_IN
28534: IFFALSE 28565
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28536: LD_VAR 0 1
28540: PPUSH
28541: LD_VAR 0 6
28545: PUSH
28546: LD_INT 1
28548: ARRAY
28549: PPUSH
28550: LD_VAR 0 6
28554: PUSH
28555: LD_INT 2
28557: ARRAY
28558: PPUSH
28559: CALL_OW 176
28563: GO 28533
28565: POP
28566: POP
// end ;
28567: LD_VAR 0 5
28571: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28572: LD_EXP 88
28576: NOT
28577: IFFALSE 28627
28579: GO 28581
28581: DISABLE
// begin initHack := true ;
28582: LD_ADDR_EXP 88
28586: PUSH
28587: LD_INT 1
28589: ST_TO_ADDR
// hackTanks := [ ] ;
28590: LD_ADDR_EXP 89
28594: PUSH
28595: EMPTY
28596: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28597: LD_ADDR_EXP 90
28601: PUSH
28602: EMPTY
28603: ST_TO_ADDR
// hackLimit := 3 ;
28604: LD_ADDR_EXP 91
28608: PUSH
28609: LD_INT 3
28611: ST_TO_ADDR
// hackDist := 12 ;
28612: LD_ADDR_EXP 92
28616: PUSH
28617: LD_INT 12
28619: ST_TO_ADDR
// hackCounter := [ ] ;
28620: LD_ADDR_EXP 93
28624: PUSH
28625: EMPTY
28626: ST_TO_ADDR
// end ;
28627: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28628: LD_EXP 88
28632: PUSH
28633: LD_INT 34
28635: PUSH
28636: LD_INT 99
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PPUSH
28643: CALL_OW 69
28647: AND
28648: IFFALSE 28901
28650: GO 28652
28652: DISABLE
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
// begin enable ;
28657: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28658: LD_ADDR_VAR 0 1
28662: PUSH
28663: LD_INT 34
28665: PUSH
28666: LD_INT 99
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PPUSH
28673: CALL_OW 69
28677: PUSH
28678: FOR_IN
28679: IFFALSE 28899
// begin if not i in hackTanks then
28681: LD_VAR 0 1
28685: PUSH
28686: LD_EXP 89
28690: IN
28691: NOT
28692: IFFALSE 28775
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28694: LD_ADDR_EXP 89
28698: PUSH
28699: LD_EXP 89
28703: PPUSH
28704: LD_EXP 89
28708: PUSH
28709: LD_INT 1
28711: PLUS
28712: PPUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 1
28722: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28723: LD_ADDR_EXP 90
28727: PUSH
28728: LD_EXP 90
28732: PPUSH
28733: LD_EXP 90
28737: PUSH
28738: LD_INT 1
28740: PLUS
28741: PPUSH
28742: EMPTY
28743: PPUSH
28744: CALL_OW 1
28748: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28749: LD_ADDR_EXP 93
28753: PUSH
28754: LD_EXP 93
28758: PPUSH
28759: LD_EXP 93
28763: PUSH
28764: LD_INT 1
28766: PLUS
28767: PPUSH
28768: EMPTY
28769: PPUSH
28770: CALL_OW 1
28774: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 302
28784: NOT
28785: IFFALSE 28798
// begin HackUnlinkAll ( i ) ;
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL 28904 0 1
// continue ;
28796: GO 28678
// end ; HackCheckCapturedStatus ( i ) ;
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL 29347 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28807: LD_ADDR_VAR 0 2
28811: PUSH
28812: LD_INT 81
28814: PUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 255
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 33
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 91
28841: PUSH
28842: LD_VAR 0 1
28846: PUSH
28847: LD_EXP 92
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 50
28859: PUSH
28860: EMPTY
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 69
28873: ST_TO_ADDR
// if not tmp then
28874: LD_VAR 0 2
28878: NOT
28879: IFFALSE 28883
// continue ;
28881: GO 28678
// HackLink ( i , tmp ) ;
28883: LD_VAR 0 1
28887: PPUSH
28888: LD_VAR 0 2
28892: PPUSH
28893: CALL 29040 0 2
// end ;
28897: GO 28678
28899: POP
28900: POP
// end ;
28901: PPOPN 2
28903: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28904: LD_INT 0
28906: PPUSH
28907: PPUSH
28908: PPUSH
// if not hack in hackTanks then
28909: LD_VAR 0 1
28913: PUSH
28914: LD_EXP 89
28918: IN
28919: NOT
28920: IFFALSE 28924
// exit ;
28922: GO 29035
// index := GetElementIndex ( hackTanks , hack ) ;
28924: LD_ADDR_VAR 0 4
28928: PUSH
28929: LD_EXP 89
28933: PPUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL 36477 0 2
28943: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28944: LD_EXP 90
28948: PUSH
28949: LD_VAR 0 4
28953: ARRAY
28954: IFFALSE 29035
// begin for i in hackTanksCaptured [ index ] do
28956: LD_ADDR_VAR 0 3
28960: PUSH
28961: LD_EXP 90
28965: PUSH
28966: LD_VAR 0 4
28970: ARRAY
28971: PUSH
28972: FOR_IN
28973: IFFALSE 28999
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28975: LD_VAR 0 3
28979: PUSH
28980: LD_INT 1
28982: ARRAY
28983: PPUSH
28984: LD_VAR 0 3
28988: PUSH
28989: LD_INT 2
28991: ARRAY
28992: PPUSH
28993: CALL_OW 235
28997: GO 28972
28999: POP
29000: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29001: LD_ADDR_EXP 90
29005: PUSH
29006: LD_EXP 90
29010: PPUSH
29011: LD_VAR 0 4
29015: PPUSH
29016: EMPTY
29017: PPUSH
29018: CALL_OW 1
29022: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29023: LD_VAR 0 1
29027: PPUSH
29028: LD_INT 0
29030: PPUSH
29031: CALL_OW 505
// end ; end ;
29035: LD_VAR 0 2
29039: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29040: LD_INT 0
29042: PPUSH
29043: PPUSH
29044: PPUSH
// if not hack in hackTanks or not vehicles then
29045: LD_VAR 0 1
29049: PUSH
29050: LD_EXP 89
29054: IN
29055: NOT
29056: PUSH
29057: LD_VAR 0 2
29061: NOT
29062: OR
29063: IFFALSE 29067
// exit ;
29065: GO 29342
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29067: LD_ADDR_VAR 0 2
29071: PUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: LD_VAR 0 2
29081: PPUSH
29082: LD_INT 1
29084: PPUSH
29085: LD_INT 1
29087: PPUSH
29088: CALL 37127 0 4
29092: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29093: LD_ADDR_VAR 0 5
29097: PUSH
29098: LD_EXP 89
29102: PPUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: CALL 36477 0 2
29112: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29113: LD_EXP 90
29117: PUSH
29118: LD_VAR 0 5
29122: ARRAY
29123: PUSH
29124: LD_EXP 91
29128: LESS
29129: IFFALSE 29318
// begin for i := 1 to vehicles do
29131: LD_ADDR_VAR 0 4
29135: PUSH
29136: DOUBLE
29137: LD_INT 1
29139: DEC
29140: ST_TO_ADDR
29141: LD_VAR 0 2
29145: PUSH
29146: FOR_TO
29147: IFFALSE 29316
// begin if hackTanksCaptured [ index ] = hackLimit then
29149: LD_EXP 90
29153: PUSH
29154: LD_VAR 0 5
29158: ARRAY
29159: PUSH
29160: LD_EXP 91
29164: EQUAL
29165: IFFALSE 29169
// break ;
29167: GO 29316
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29169: LD_ADDR_EXP 93
29173: PUSH
29174: LD_EXP 93
29178: PPUSH
29179: LD_VAR 0 5
29183: PPUSH
29184: LD_EXP 93
29188: PUSH
29189: LD_VAR 0 5
29193: ARRAY
29194: PUSH
29195: LD_INT 1
29197: PLUS
29198: PPUSH
29199: CALL_OW 1
29203: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29204: LD_ADDR_EXP 90
29208: PUSH
29209: LD_EXP 90
29213: PPUSH
29214: LD_VAR 0 5
29218: PUSH
29219: LD_EXP 90
29223: PUSH
29224: LD_VAR 0 5
29228: ARRAY
29229: PUSH
29230: LD_INT 1
29232: PLUS
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: LD_VAR 0 2
29242: PUSH
29243: LD_VAR 0 4
29247: ARRAY
29248: PUSH
29249: LD_VAR 0 2
29253: PUSH
29254: LD_VAR 0 4
29258: ARRAY
29259: PPUSH
29260: CALL_OW 255
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL 36692 0 3
29273: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29274: LD_VAR 0 2
29278: PUSH
29279: LD_VAR 0 4
29283: ARRAY
29284: PPUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 255
29294: PPUSH
29295: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29299: LD_VAR 0 2
29303: PUSH
29304: LD_VAR 0 4
29308: ARRAY
29309: PPUSH
29310: CALL_OW 141
// end ;
29314: GO 29146
29316: POP
29317: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29318: LD_VAR 0 1
29322: PPUSH
29323: LD_EXP 90
29327: PUSH
29328: LD_VAR 0 5
29332: ARRAY
29333: PUSH
29334: LD_INT 0
29336: PLUS
29337: PPUSH
29338: CALL_OW 505
// end ;
29342: LD_VAR 0 3
29346: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29347: LD_INT 0
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
// if not hack in hackTanks then
29353: LD_VAR 0 1
29357: PUSH
29358: LD_EXP 89
29362: IN
29363: NOT
29364: IFFALSE 29368
// exit ;
29366: GO 29608
// index := GetElementIndex ( hackTanks , hack ) ;
29368: LD_ADDR_VAR 0 4
29372: PUSH
29373: LD_EXP 89
29377: PPUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL 36477 0 2
29387: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: DOUBLE
29394: LD_EXP 90
29398: PUSH
29399: LD_VAR 0 4
29403: ARRAY
29404: INC
29405: ST_TO_ADDR
29406: LD_INT 1
29408: PUSH
29409: FOR_DOWNTO
29410: IFFALSE 29582
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29412: LD_ADDR_VAR 0 5
29416: PUSH
29417: LD_EXP 90
29421: PUSH
29422: LD_VAR 0 4
29426: ARRAY
29427: PUSH
29428: LD_VAR 0 3
29432: ARRAY
29433: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29434: LD_VAR 0 5
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PPUSH
29443: CALL_OW 302
29447: NOT
29448: PUSH
29449: LD_VAR 0 5
29453: PUSH
29454: LD_INT 1
29456: ARRAY
29457: PPUSH
29458: CALL_OW 255
29462: PUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 255
29472: NONEQUAL
29473: OR
29474: IFFALSE 29580
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29476: LD_VAR 0 5
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: CALL_OW 305
29489: PUSH
29490: LD_VAR 0 5
29494: PUSH
29495: LD_INT 1
29497: ARRAY
29498: PPUSH
29499: CALL_OW 255
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 255
29513: EQUAL
29514: AND
29515: IFFALSE 29539
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29517: LD_VAR 0 5
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: LD_VAR 0 5
29530: PUSH
29531: LD_INT 2
29533: ARRAY
29534: PPUSH
29535: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29539: LD_ADDR_EXP 90
29543: PUSH
29544: LD_EXP 90
29548: PPUSH
29549: LD_VAR 0 4
29553: PPUSH
29554: LD_EXP 90
29558: PUSH
29559: LD_VAR 0 4
29563: ARRAY
29564: PPUSH
29565: LD_VAR 0 3
29569: PPUSH
29570: CALL_OW 3
29574: PPUSH
29575: CALL_OW 1
29579: ST_TO_ADDR
// end ; end ;
29580: GO 29409
29582: POP
29583: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_EXP 90
29593: PUSH
29594: LD_VAR 0 4
29598: ARRAY
29599: PUSH
29600: LD_INT 0
29602: PLUS
29603: PPUSH
29604: CALL_OW 505
// end ;
29608: LD_VAR 0 2
29612: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29613: LD_INT 0
29615: PPUSH
29616: PPUSH
29617: PPUSH
29618: PPUSH
// if not hack in hackTanks then
29619: LD_VAR 0 1
29623: PUSH
29624: LD_EXP 89
29628: IN
29629: NOT
29630: IFFALSE 29634
// exit ;
29632: GO 29719
// index := GetElementIndex ( hackTanks , hack ) ;
29634: LD_ADDR_VAR 0 5
29638: PUSH
29639: LD_EXP 89
29643: PPUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL 36477 0 2
29653: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29654: LD_ADDR_VAR 0 4
29658: PUSH
29659: DOUBLE
29660: LD_INT 1
29662: DEC
29663: ST_TO_ADDR
29664: LD_EXP 90
29668: PUSH
29669: LD_VAR 0 5
29673: ARRAY
29674: PUSH
29675: FOR_TO
29676: IFFALSE 29717
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29678: LD_EXP 90
29682: PUSH
29683: LD_VAR 0 5
29687: ARRAY
29688: PUSH
29689: LD_VAR 0 4
29693: ARRAY
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PUSH
29699: LD_VAR 0 2
29703: EQUAL
29704: IFFALSE 29715
// KillUnit ( vehicle ) ;
29706: LD_VAR 0 2
29710: PPUSH
29711: CALL_OW 66
29715: GO 29675
29717: POP
29718: POP
// end ;
29719: LD_VAR 0 3
29723: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29724: LD_EXP 94
29728: NOT
29729: IFFALSE 29764
29731: GO 29733
29733: DISABLE
// begin initMiner := true ;
29734: LD_ADDR_EXP 94
29738: PUSH
29739: LD_INT 1
29741: ST_TO_ADDR
// minersList := [ ] ;
29742: LD_ADDR_EXP 95
29746: PUSH
29747: EMPTY
29748: ST_TO_ADDR
// minerMinesList := [ ] ;
29749: LD_ADDR_EXP 96
29753: PUSH
29754: EMPTY
29755: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29756: LD_ADDR_EXP 97
29760: PUSH
29761: LD_INT 5
29763: ST_TO_ADDR
// end ;
29764: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29765: LD_EXP 94
29769: PUSH
29770: LD_INT 34
29772: PUSH
29773: LD_INT 81
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PPUSH
29780: CALL_OW 69
29784: AND
29785: IFFALSE 30246
29787: GO 29789
29789: DISABLE
29790: LD_INT 0
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
// begin enable ;
29796: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29797: LD_ADDR_VAR 0 1
29801: PUSH
29802: LD_INT 34
29804: PUSH
29805: LD_INT 81
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL_OW 69
29816: PUSH
29817: FOR_IN
29818: IFFALSE 29890
// begin if not i in minersList then
29820: LD_VAR 0 1
29824: PUSH
29825: LD_EXP 95
29829: IN
29830: NOT
29831: IFFALSE 29888
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29833: LD_ADDR_EXP 95
29837: PUSH
29838: LD_EXP 95
29842: PPUSH
29843: LD_EXP 95
29847: PUSH
29848: LD_INT 1
29850: PLUS
29851: PPUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 1
29861: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29862: LD_ADDR_EXP 96
29866: PUSH
29867: LD_EXP 96
29871: PPUSH
29872: LD_EXP 96
29876: PUSH
29877: LD_INT 1
29879: PLUS
29880: PPUSH
29881: EMPTY
29882: PPUSH
29883: CALL_OW 1
29887: ST_TO_ADDR
// end end ;
29888: GO 29817
29890: POP
29891: POP
// for i := minerMinesList downto 1 do
29892: LD_ADDR_VAR 0 1
29896: PUSH
29897: DOUBLE
29898: LD_EXP 96
29902: INC
29903: ST_TO_ADDR
29904: LD_INT 1
29906: PUSH
29907: FOR_DOWNTO
29908: IFFALSE 30244
// begin if IsLive ( minersList [ i ] ) then
29910: LD_EXP 95
29914: PUSH
29915: LD_VAR 0 1
29919: ARRAY
29920: PPUSH
29921: CALL_OW 300
29925: IFFALSE 29953
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29927: LD_EXP 95
29931: PUSH
29932: LD_VAR 0 1
29936: ARRAY
29937: PPUSH
29938: LD_EXP 96
29942: PUSH
29943: LD_VAR 0 1
29947: ARRAY
29948: PPUSH
29949: CALL_OW 505
// if not minerMinesList [ i ] then
29953: LD_EXP 96
29957: PUSH
29958: LD_VAR 0 1
29962: ARRAY
29963: NOT
29964: IFFALSE 29968
// continue ;
29966: GO 29907
// for j := minerMinesList [ i ] downto 1 do
29968: LD_ADDR_VAR 0 2
29972: PUSH
29973: DOUBLE
29974: LD_EXP 96
29978: PUSH
29979: LD_VAR 0 1
29983: ARRAY
29984: INC
29985: ST_TO_ADDR
29986: LD_INT 1
29988: PUSH
29989: FOR_DOWNTO
29990: IFFALSE 30240
// begin side := GetSide ( minersList [ i ] ) ;
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_EXP 95
30001: PUSH
30002: LD_VAR 0 1
30006: ARRAY
30007: PPUSH
30008: CALL_OW 255
30012: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30013: LD_ADDR_VAR 0 4
30017: PUSH
30018: LD_EXP 96
30022: PUSH
30023: LD_VAR 0 1
30027: ARRAY
30028: PUSH
30029: LD_VAR 0 2
30033: ARRAY
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: LD_EXP 96
30043: PUSH
30044: LD_VAR 0 1
30048: ARRAY
30049: PUSH
30050: LD_VAR 0 2
30054: ARRAY
30055: PUSH
30056: LD_INT 2
30058: ARRAY
30059: PPUSH
30060: CALL_OW 428
30064: ST_TO_ADDR
// if not tmp then
30065: LD_VAR 0 4
30069: NOT
30070: IFFALSE 30074
// continue ;
30072: GO 29989
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30074: LD_VAR 0 4
30078: PUSH
30079: LD_INT 81
30081: PUSH
30082: LD_VAR 0 3
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL_OW 69
30095: IN
30096: PUSH
30097: LD_EXP 96
30101: PUSH
30102: LD_VAR 0 1
30106: ARRAY
30107: PUSH
30108: LD_VAR 0 2
30112: ARRAY
30113: PUSH
30114: LD_INT 1
30116: ARRAY
30117: PPUSH
30118: LD_EXP 96
30122: PUSH
30123: LD_VAR 0 1
30127: ARRAY
30128: PUSH
30129: LD_VAR 0 2
30133: ARRAY
30134: PUSH
30135: LD_INT 2
30137: ARRAY
30138: PPUSH
30139: CALL_OW 458
30143: AND
30144: IFFALSE 30238
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30146: LD_EXP 96
30150: PUSH
30151: LD_VAR 0 1
30155: ARRAY
30156: PUSH
30157: LD_VAR 0 2
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_EXP 96
30171: PUSH
30172: LD_VAR 0 1
30176: ARRAY
30177: PUSH
30178: LD_VAR 0 2
30182: ARRAY
30183: PUSH
30184: LD_INT 2
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 3
30192: PPUSH
30193: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30197: LD_ADDR_EXP 96
30201: PUSH
30202: LD_EXP 96
30206: PPUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: LD_EXP 96
30216: PUSH
30217: LD_VAR 0 1
30221: ARRAY
30222: PPUSH
30223: LD_VAR 0 2
30227: PPUSH
30228: CALL_OW 3
30232: PPUSH
30233: CALL_OW 1
30237: ST_TO_ADDR
// end ; end ;
30238: GO 29989
30240: POP
30241: POP
// end ;
30242: GO 29907
30244: POP
30245: POP
// end ;
30246: PPOPN 4
30248: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
// result := false ;
30253: LD_ADDR_VAR 0 4
30257: PUSH
30258: LD_INT 0
30260: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30261: LD_VAR 0 1
30265: PPUSH
30266: CALL_OW 264
30270: PUSH
30271: LD_INT 81
30273: EQUAL
30274: NOT
30275: IFFALSE 30279
// exit ;
30277: GO 30519
// index := GetElementIndex ( minersList , unit ) ;
30279: LD_ADDR_VAR 0 5
30283: PUSH
30284: LD_EXP 95
30288: PPUSH
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL 36477 0 2
30298: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30299: LD_EXP 96
30303: PUSH
30304: LD_VAR 0 5
30308: ARRAY
30309: PUSH
30310: LD_EXP 97
30314: GREATEREQUAL
30315: IFFALSE 30319
// exit ;
30317: GO 30519
// ComMoveXY ( unit , x , y ) ;
30319: LD_VAR 0 1
30323: PPUSH
30324: LD_VAR 0 2
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30338: LD_INT 35
30340: PPUSH
30341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30345: LD_VAR 0 1
30349: PPUSH
30350: LD_VAR 0 2
30354: PPUSH
30355: LD_VAR 0 3
30359: PPUSH
30360: CALL 68229 0 3
30364: NOT
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 314
30375: AND
30376: IFFALSE 30380
// exit ;
30378: GO 30519
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30380: LD_VAR 0 2
30384: PPUSH
30385: LD_VAR 0 3
30389: PPUSH
30390: CALL_OW 428
30394: PUSH
30395: LD_VAR 0 1
30399: EQUAL
30400: PUSH
30401: LD_VAR 0 1
30405: PPUSH
30406: CALL_OW 314
30410: NOT
30411: AND
30412: IFFALSE 30338
// PlaySoundXY ( x , y , PlantMine ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_STRING PlantMine
30426: PPUSH
30427: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30431: LD_VAR 0 2
30435: PPUSH
30436: LD_VAR 0 3
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 255
30450: PPUSH
30451: LD_INT 0
30453: PPUSH
30454: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30458: LD_ADDR_EXP 96
30462: PUSH
30463: LD_EXP 96
30467: PPUSH
30468: LD_VAR 0 5
30472: PUSH
30473: LD_EXP 96
30477: PUSH
30478: LD_VAR 0 5
30482: ARRAY
30483: PUSH
30484: LD_INT 1
30486: PLUS
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PPUSH
30492: LD_VAR 0 2
30496: PUSH
30497: LD_VAR 0 3
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PPUSH
30506: CALL 36692 0 3
30510: ST_TO_ADDR
// result := true ;
30511: LD_ADDR_VAR 0 4
30515: PUSH
30516: LD_INT 1
30518: ST_TO_ADDR
// end ;
30519: LD_VAR 0 4
30523: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30524: LD_INT 0
30526: PPUSH
30527: PPUSH
30528: PPUSH
// if not unit in minersList then
30529: LD_VAR 0 1
30533: PUSH
30534: LD_EXP 95
30538: IN
30539: NOT
30540: IFFALSE 30544
// exit ;
30542: GO 30936
// index := GetElementIndex ( minersList , unit ) ;
30544: LD_ADDR_VAR 0 6
30548: PUSH
30549: LD_EXP 95
30553: PPUSH
30554: LD_VAR 0 1
30558: PPUSH
30559: CALL 36477 0 2
30563: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30564: LD_ADDR_VAR 0 5
30568: PUSH
30569: DOUBLE
30570: LD_EXP 96
30574: PUSH
30575: LD_VAR 0 6
30579: ARRAY
30580: INC
30581: ST_TO_ADDR
30582: LD_INT 1
30584: PUSH
30585: FOR_DOWNTO
30586: IFFALSE 30747
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30588: LD_EXP 96
30592: PUSH
30593: LD_VAR 0 6
30597: ARRAY
30598: PUSH
30599: LD_VAR 0 5
30603: ARRAY
30604: PUSH
30605: LD_INT 1
30607: ARRAY
30608: PUSH
30609: LD_VAR 0 2
30613: EQUAL
30614: PUSH
30615: LD_EXP 96
30619: PUSH
30620: LD_VAR 0 6
30624: ARRAY
30625: PUSH
30626: LD_VAR 0 5
30630: ARRAY
30631: PUSH
30632: LD_INT 2
30634: ARRAY
30635: PUSH
30636: LD_VAR 0 3
30640: EQUAL
30641: AND
30642: IFFALSE 30745
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30644: LD_EXP 96
30648: PUSH
30649: LD_VAR 0 6
30653: ARRAY
30654: PUSH
30655: LD_VAR 0 5
30659: ARRAY
30660: PUSH
30661: LD_INT 1
30663: ARRAY
30664: PPUSH
30665: LD_EXP 96
30669: PUSH
30670: LD_VAR 0 6
30674: ARRAY
30675: PUSH
30676: LD_VAR 0 5
30680: ARRAY
30681: PUSH
30682: LD_INT 2
30684: ARRAY
30685: PPUSH
30686: LD_VAR 0 1
30690: PPUSH
30691: CALL_OW 255
30695: PPUSH
30696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30700: LD_ADDR_EXP 96
30704: PUSH
30705: LD_EXP 96
30709: PPUSH
30710: LD_VAR 0 6
30714: PPUSH
30715: LD_EXP 96
30719: PUSH
30720: LD_VAR 0 6
30724: ARRAY
30725: PPUSH
30726: LD_VAR 0 5
30730: PPUSH
30731: CALL_OW 3
30735: PPUSH
30736: CALL_OW 1
30740: ST_TO_ADDR
// exit ;
30741: POP
30742: POP
30743: GO 30936
// end ; end ;
30745: GO 30585
30747: POP
30748: POP
// for i := minerMinesList [ index ] downto 1 do
30749: LD_ADDR_VAR 0 5
30753: PUSH
30754: DOUBLE
30755: LD_EXP 96
30759: PUSH
30760: LD_VAR 0 6
30764: ARRAY
30765: INC
30766: ST_TO_ADDR
30767: LD_INT 1
30769: PUSH
30770: FOR_DOWNTO
30771: IFFALSE 30934
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30773: LD_EXP 96
30777: PUSH
30778: LD_VAR 0 6
30782: ARRAY
30783: PUSH
30784: LD_VAR 0 5
30788: ARRAY
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: LD_EXP 96
30798: PUSH
30799: LD_VAR 0 6
30803: ARRAY
30804: PUSH
30805: LD_VAR 0 5
30809: ARRAY
30810: PUSH
30811: LD_INT 2
30813: ARRAY
30814: PPUSH
30815: LD_VAR 0 2
30819: PPUSH
30820: LD_VAR 0 3
30824: PPUSH
30825: CALL_OW 298
30829: PUSH
30830: LD_INT 6
30832: LESS
30833: IFFALSE 30932
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30835: LD_EXP 96
30839: PUSH
30840: LD_VAR 0 6
30844: ARRAY
30845: PUSH
30846: LD_VAR 0 5
30850: ARRAY
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: PPUSH
30856: LD_EXP 96
30860: PUSH
30861: LD_VAR 0 6
30865: ARRAY
30866: PUSH
30867: LD_VAR 0 5
30871: ARRAY
30872: PUSH
30873: LD_INT 2
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL_OW 255
30886: PPUSH
30887: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30891: LD_ADDR_EXP 96
30895: PUSH
30896: LD_EXP 96
30900: PPUSH
30901: LD_VAR 0 6
30905: PPUSH
30906: LD_EXP 96
30910: PUSH
30911: LD_VAR 0 6
30915: ARRAY
30916: PPUSH
30917: LD_VAR 0 5
30921: PPUSH
30922: CALL_OW 3
30926: PPUSH
30927: CALL_OW 1
30931: ST_TO_ADDR
// end ; end ;
30932: GO 30770
30934: POP
30935: POP
// end ;
30936: LD_VAR 0 4
30940: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30941: LD_INT 0
30943: PPUSH
30944: PPUSH
30945: PPUSH
30946: PPUSH
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 264
30961: PUSH
30962: LD_INT 81
30964: EQUAL
30965: NOT
30966: PUSH
30967: LD_VAR 0 1
30971: PUSH
30972: LD_EXP 95
30976: IN
30977: NOT
30978: OR
30979: IFFALSE 30983
// exit ;
30981: GO 31305
// index := GetElementIndex ( minersList , unit ) ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_EXP 95
30992: PPUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL 36477 0 2
31002: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31003: LD_ADDR_VAR 0 8
31007: PUSH
31008: LD_EXP 97
31012: PUSH
31013: LD_EXP 96
31017: PUSH
31018: LD_VAR 0 6
31022: ARRAY
31023: MINUS
31024: ST_TO_ADDR
// if not minesFreeAmount then
31025: LD_VAR 0 8
31029: NOT
31030: IFFALSE 31034
// exit ;
31032: GO 31305
// tmp := [ ] ;
31034: LD_ADDR_VAR 0 7
31038: PUSH
31039: EMPTY
31040: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31041: LD_ADDR_VAR 0 5
31045: PUSH
31046: DOUBLE
31047: LD_INT 1
31049: DEC
31050: ST_TO_ADDR
31051: LD_VAR 0 8
31055: PUSH
31056: FOR_TO
31057: IFFALSE 31252
// begin _d := rand ( 0 , 5 ) ;
31059: LD_ADDR_VAR 0 11
31063: PUSH
31064: LD_INT 0
31066: PPUSH
31067: LD_INT 5
31069: PPUSH
31070: CALL_OW 12
31074: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31075: LD_ADDR_VAR 0 12
31079: PUSH
31080: LD_INT 2
31082: PPUSH
31083: LD_INT 6
31085: PPUSH
31086: CALL_OW 12
31090: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31091: LD_ADDR_VAR 0 9
31095: PUSH
31096: LD_VAR 0 2
31100: PPUSH
31101: LD_VAR 0 11
31105: PPUSH
31106: LD_VAR 0 12
31110: PPUSH
31111: CALL_OW 272
31115: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31116: LD_ADDR_VAR 0 10
31120: PUSH
31121: LD_VAR 0 3
31125: PPUSH
31126: LD_VAR 0 11
31130: PPUSH
31131: LD_VAR 0 12
31135: PPUSH
31136: CALL_OW 273
31140: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31141: LD_VAR 0 9
31145: PPUSH
31146: LD_VAR 0 10
31150: PPUSH
31151: CALL_OW 488
31155: PUSH
31156: LD_VAR 0 9
31160: PUSH
31161: LD_VAR 0 10
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_VAR 0 7
31174: IN
31175: NOT
31176: AND
31177: PUSH
31178: LD_VAR 0 9
31182: PPUSH
31183: LD_VAR 0 10
31187: PPUSH
31188: CALL_OW 458
31192: NOT
31193: AND
31194: IFFALSE 31236
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31196: LD_ADDR_VAR 0 7
31200: PUSH
31201: LD_VAR 0 7
31205: PPUSH
31206: LD_VAR 0 7
31210: PUSH
31211: LD_INT 1
31213: PLUS
31214: PPUSH
31215: LD_VAR 0 9
31219: PUSH
31220: LD_VAR 0 10
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PPUSH
31229: CALL_OW 1
31233: ST_TO_ADDR
31234: GO 31250
// i := i - 1 ;
31236: LD_ADDR_VAR 0 5
31240: PUSH
31241: LD_VAR 0 5
31245: PUSH
31246: LD_INT 1
31248: MINUS
31249: ST_TO_ADDR
// end ;
31250: GO 31056
31252: POP
31253: POP
// for i in tmp do
31254: LD_ADDR_VAR 0 5
31258: PUSH
31259: LD_VAR 0 7
31263: PUSH
31264: FOR_IN
31265: IFFALSE 31303
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_VAR 0 5
31276: PUSH
31277: LD_INT 1
31279: ARRAY
31280: PPUSH
31281: LD_VAR 0 5
31285: PUSH
31286: LD_INT 2
31288: ARRAY
31289: PPUSH
31290: CALL 30249 0 3
31294: NOT
31295: IFFALSE 31301
// exit ;
31297: POP
31298: POP
31299: GO 31305
31301: GO 31264
31303: POP
31304: POP
// end ;
31305: LD_VAR 0 4
31309: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
// if not GetClass ( unit ) = class_sniper then
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 257
31328: PUSH
31329: LD_INT 5
31331: EQUAL
31332: NOT
31333: IFFALSE 31337
// exit ;
31335: GO 31725
// dist := 8 ;
31337: LD_ADDR_VAR 0 5
31341: PUSH
31342: LD_INT 8
31344: ST_TO_ADDR
// viewRange := 12 ;
31345: LD_ADDR_VAR 0 7
31349: PUSH
31350: LD_INT 12
31352: ST_TO_ADDR
// side := GetSide ( unit ) ;
31353: LD_ADDR_VAR 0 6
31357: PUSH
31358: LD_VAR 0 1
31362: PPUSH
31363: CALL_OW 255
31367: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31368: LD_INT 61
31370: PPUSH
31371: LD_VAR 0 6
31375: PPUSH
31376: CALL_OW 321
31380: PUSH
31381: LD_INT 2
31383: EQUAL
31384: IFFALSE 31394
// viewRange := 16 ;
31386: LD_ADDR_VAR 0 7
31390: PUSH
31391: LD_INT 16
31393: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31394: LD_VAR 0 1
31398: PPUSH
31399: LD_VAR 0 2
31403: PPUSH
31404: LD_VAR 0 3
31408: PPUSH
31409: CALL_OW 297
31413: PUSH
31414: LD_VAR 0 5
31418: GREATER
31419: IFFALSE 31498
// begin ComMoveXY ( unit , x , y ) ;
31421: LD_VAR 0 1
31425: PPUSH
31426: LD_VAR 0 2
31430: PPUSH
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31440: LD_INT 35
31442: PPUSH
31443: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31447: LD_VAR 0 1
31451: PPUSH
31452: LD_VAR 0 2
31456: PPUSH
31457: LD_VAR 0 3
31461: PPUSH
31462: CALL 68229 0 3
31466: NOT
31467: IFFALSE 31471
// exit ;
31469: GO 31725
// until GetDistUnitXY ( unit , x , y ) < dist ;
31471: LD_VAR 0 1
31475: PPUSH
31476: LD_VAR 0 2
31480: PPUSH
31481: LD_VAR 0 3
31485: PPUSH
31486: CALL_OW 297
31490: PUSH
31491: LD_VAR 0 5
31495: LESS
31496: IFFALSE 31440
// end ; ComTurnXY ( unit , x , y ) ;
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_VAR 0 2
31507: PPUSH
31508: LD_VAR 0 3
31512: PPUSH
31513: CALL_OW 118
// wait ( 5 ) ;
31517: LD_INT 5
31519: PPUSH
31520: CALL_OW 67
// _d := GetDir ( unit ) ;
31524: LD_ADDR_VAR 0 10
31528: PUSH
31529: LD_VAR 0 1
31533: PPUSH
31534: CALL_OW 254
31538: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31539: LD_ADDR_VAR 0 8
31543: PUSH
31544: LD_VAR 0 1
31548: PPUSH
31549: CALL_OW 250
31553: PPUSH
31554: LD_VAR 0 10
31558: PPUSH
31559: LD_VAR 0 5
31563: PPUSH
31564: CALL_OW 272
31568: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31569: LD_ADDR_VAR 0 9
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: CALL_OW 251
31583: PPUSH
31584: LD_VAR 0 10
31588: PPUSH
31589: LD_VAR 0 5
31593: PPUSH
31594: CALL_OW 273
31598: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31599: LD_VAR 0 8
31603: PPUSH
31604: LD_VAR 0 9
31608: PPUSH
31609: CALL_OW 488
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31725
// ComAnimCustom ( unit , 1 ) ;
31618: LD_VAR 0 1
31622: PPUSH
31623: LD_INT 1
31625: PPUSH
31626: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31630: LD_VAR 0 8
31634: PPUSH
31635: LD_VAR 0 9
31639: PPUSH
31640: LD_VAR 0 6
31644: PPUSH
31645: LD_VAR 0 7
31649: PPUSH
31650: CALL_OW 330
// repeat wait ( 1 ) ;
31654: LD_INT 1
31656: PPUSH
31657: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 316
31670: PUSH
31671: LD_VAR 0 1
31675: PPUSH
31676: CALL_OW 314
31680: OR
31681: PUSH
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 302
31691: NOT
31692: OR
31693: PUSH
31694: LD_VAR 0 1
31698: PPUSH
31699: CALL_OW 301
31703: OR
31704: IFFALSE 31654
// RemoveSeeing ( _x , _y , side ) ;
31706: LD_VAR 0 8
31710: PPUSH
31711: LD_VAR 0 9
31715: PPUSH
31716: LD_VAR 0 6
31720: PPUSH
31721: CALL_OW 331
// end ; end_of_file
31725: LD_VAR 0 4
31729: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31730: LD_INT 0
31732: PPUSH
31733: PPUSH
// if exist_mode then
31734: LD_VAR 0 2
31738: IFFALSE 31763
// unit := CreateCharacter ( prefix & ident ) else
31740: LD_ADDR_VAR 0 5
31744: PUSH
31745: LD_VAR 0 3
31749: PUSH
31750: LD_VAR 0 1
31754: STR
31755: PPUSH
31756: CALL_OW 34
31760: ST_TO_ADDR
31761: GO 31778
// unit := NewCharacter ( ident ) ;
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_VAR 0 1
31772: PPUSH
31773: CALL_OW 25
31777: ST_TO_ADDR
// result := unit ;
31778: LD_ADDR_VAR 0 4
31782: PUSH
31783: LD_VAR 0 5
31787: ST_TO_ADDR
// end ;
31788: LD_VAR 0 4
31792: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31793: LD_INT 0
31795: PPUSH
31796: PPUSH
// if not side or not nation then
31797: LD_VAR 0 1
31801: NOT
31802: PUSH
31803: LD_VAR 0 2
31807: NOT
31808: OR
31809: IFFALSE 31813
// exit ;
31811: GO 32581
// case nation of nation_american :
31813: LD_VAR 0 2
31817: PUSH
31818: LD_INT 1
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 32040
31826: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31827: LD_ADDR_VAR 0 4
31831: PUSH
31832: LD_INT 35
31834: PUSH
31835: LD_INT 45
31837: PUSH
31838: LD_INT 46
31840: PUSH
31841: LD_INT 47
31843: PUSH
31844: LD_INT 82
31846: PUSH
31847: LD_INT 83
31849: PUSH
31850: LD_INT 84
31852: PUSH
31853: LD_INT 85
31855: PUSH
31856: LD_INT 86
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 6
31867: PUSH
31868: LD_INT 15
31870: PUSH
31871: LD_INT 16
31873: PUSH
31874: LD_INT 7
31876: PUSH
31877: LD_INT 12
31879: PUSH
31880: LD_INT 13
31882: PUSH
31883: LD_INT 10
31885: PUSH
31886: LD_INT 14
31888: PUSH
31889: LD_INT 20
31891: PUSH
31892: LD_INT 21
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_INT 25
31900: PUSH
31901: LD_INT 32
31903: PUSH
31904: LD_INT 27
31906: PUSH
31907: LD_INT 36
31909: PUSH
31910: LD_INT 69
31912: PUSH
31913: LD_INT 39
31915: PUSH
31916: LD_INT 34
31918: PUSH
31919: LD_INT 40
31921: PUSH
31922: LD_INT 48
31924: PUSH
31925: LD_INT 49
31927: PUSH
31928: LD_INT 50
31930: PUSH
31931: LD_INT 51
31933: PUSH
31934: LD_INT 52
31936: PUSH
31937: LD_INT 53
31939: PUSH
31940: LD_INT 54
31942: PUSH
31943: LD_INT 55
31945: PUSH
31946: LD_INT 56
31948: PUSH
31949: LD_INT 57
31951: PUSH
31952: LD_INT 58
31954: PUSH
31955: LD_INT 59
31957: PUSH
31958: LD_INT 60
31960: PUSH
31961: LD_INT 61
31963: PUSH
31964: LD_INT 62
31966: PUSH
31967: LD_INT 80
31969: PUSH
31970: LD_INT 82
31972: PUSH
31973: LD_INT 83
31975: PUSH
31976: LD_INT 84
31978: PUSH
31979: LD_INT 85
31981: PUSH
31982: LD_INT 86
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32505
32040: LD_INT 2
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32274
32048: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32049: LD_ADDR_VAR 0 4
32053: PUSH
32054: LD_INT 35
32056: PUSH
32057: LD_INT 45
32059: PUSH
32060: LD_INT 46
32062: PUSH
32063: LD_INT 47
32065: PUSH
32066: LD_INT 82
32068: PUSH
32069: LD_INT 83
32071: PUSH
32072: LD_INT 84
32074: PUSH
32075: LD_INT 85
32077: PUSH
32078: LD_INT 87
32080: PUSH
32081: LD_INT 70
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 11
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: LD_INT 6
32101: PUSH
32102: LD_INT 15
32104: PUSH
32105: LD_INT 18
32107: PUSH
32108: LD_INT 7
32110: PUSH
32111: LD_INT 17
32113: PUSH
32114: LD_INT 8
32116: PUSH
32117: LD_INT 20
32119: PUSH
32120: LD_INT 21
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_INT 72
32128: PUSH
32129: LD_INT 26
32131: PUSH
32132: LD_INT 69
32134: PUSH
32135: LD_INT 39
32137: PUSH
32138: LD_INT 40
32140: PUSH
32141: LD_INT 41
32143: PUSH
32144: LD_INT 42
32146: PUSH
32147: LD_INT 43
32149: PUSH
32150: LD_INT 48
32152: PUSH
32153: LD_INT 49
32155: PUSH
32156: LD_INT 50
32158: PUSH
32159: LD_INT 51
32161: PUSH
32162: LD_INT 52
32164: PUSH
32165: LD_INT 53
32167: PUSH
32168: LD_INT 54
32170: PUSH
32171: LD_INT 55
32173: PUSH
32174: LD_INT 56
32176: PUSH
32177: LD_INT 60
32179: PUSH
32180: LD_INT 61
32182: PUSH
32183: LD_INT 62
32185: PUSH
32186: LD_INT 66
32188: PUSH
32189: LD_INT 67
32191: PUSH
32192: LD_INT 68
32194: PUSH
32195: LD_INT 81
32197: PUSH
32198: LD_INT 82
32200: PUSH
32201: LD_INT 83
32203: PUSH
32204: LD_INT 84
32206: PUSH
32207: LD_INT 85
32209: PUSH
32210: LD_INT 87
32212: PUSH
32213: LD_INT 88
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
32272: GO 32505
32274: LD_INT 3
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32504
32282: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_INT 46
32290: PUSH
32291: LD_INT 47
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 82
32302: PUSH
32303: LD_INT 83
32305: PUSH
32306: LD_INT 84
32308: PUSH
32309: LD_INT 85
32311: PUSH
32312: LD_INT 86
32314: PUSH
32315: LD_INT 11
32317: PUSH
32318: LD_INT 9
32320: PUSH
32321: LD_INT 20
32323: PUSH
32324: LD_INT 19
32326: PUSH
32327: LD_INT 21
32329: PUSH
32330: LD_INT 24
32332: PUSH
32333: LD_INT 22
32335: PUSH
32336: LD_INT 25
32338: PUSH
32339: LD_INT 28
32341: PUSH
32342: LD_INT 29
32344: PUSH
32345: LD_INT 30
32347: PUSH
32348: LD_INT 31
32350: PUSH
32351: LD_INT 37
32353: PUSH
32354: LD_INT 38
32356: PUSH
32357: LD_INT 32
32359: PUSH
32360: LD_INT 27
32362: PUSH
32363: LD_INT 33
32365: PUSH
32366: LD_INT 69
32368: PUSH
32369: LD_INT 39
32371: PUSH
32372: LD_INT 34
32374: PUSH
32375: LD_INT 40
32377: PUSH
32378: LD_INT 71
32380: PUSH
32381: LD_INT 23
32383: PUSH
32384: LD_INT 44
32386: PUSH
32387: LD_INT 48
32389: PUSH
32390: LD_INT 49
32392: PUSH
32393: LD_INT 50
32395: PUSH
32396: LD_INT 51
32398: PUSH
32399: LD_INT 52
32401: PUSH
32402: LD_INT 53
32404: PUSH
32405: LD_INT 54
32407: PUSH
32408: LD_INT 55
32410: PUSH
32411: LD_INT 56
32413: PUSH
32414: LD_INT 57
32416: PUSH
32417: LD_INT 58
32419: PUSH
32420: LD_INT 59
32422: PUSH
32423: LD_INT 63
32425: PUSH
32426: LD_INT 64
32428: PUSH
32429: LD_INT 65
32431: PUSH
32432: LD_INT 82
32434: PUSH
32435: LD_INT 83
32437: PUSH
32438: LD_INT 84
32440: PUSH
32441: LD_INT 85
32443: PUSH
32444: LD_INT 86
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: ST_TO_ADDR
32502: GO 32505
32504: POP
// if state > - 1 and state < 3 then
32505: LD_VAR 0 3
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: GREATER
32514: PUSH
32515: LD_VAR 0 3
32519: PUSH
32520: LD_INT 3
32522: LESS
32523: AND
32524: IFFALSE 32581
// for i in result do
32526: LD_ADDR_VAR 0 5
32530: PUSH
32531: LD_VAR 0 4
32535: PUSH
32536: FOR_IN
32537: IFFALSE 32579
// if GetTech ( i , side ) <> state then
32539: LD_VAR 0 5
32543: PPUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 321
32553: PUSH
32554: LD_VAR 0 3
32558: NONEQUAL
32559: IFFALSE 32577
// result := result diff i ;
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 4
32570: PUSH
32571: LD_VAR 0 5
32575: DIFF
32576: ST_TO_ADDR
32577: GO 32536
32579: POP
32580: POP
// end ;
32581: LD_VAR 0 4
32585: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32586: LD_INT 0
32588: PPUSH
32589: PPUSH
32590: PPUSH
// result := true ;
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_INT 1
32598: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 2
32608: PPUSH
32609: CALL_OW 480
32613: ST_TO_ADDR
// if not tmp then
32614: LD_VAR 0 5
32618: NOT
32619: IFFALSE 32623
// exit ;
32621: GO 32672
// for i in tmp do
32623: LD_ADDR_VAR 0 4
32627: PUSH
32628: LD_VAR 0 5
32632: PUSH
32633: FOR_IN
32634: IFFALSE 32670
// if GetTech ( i , side ) <> state_researched then
32636: LD_VAR 0 4
32640: PPUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 321
32650: PUSH
32651: LD_INT 2
32653: NONEQUAL
32654: IFFALSE 32668
// begin result := false ;
32656: LD_ADDR_VAR 0 3
32660: PUSH
32661: LD_INT 0
32663: ST_TO_ADDR
// exit ;
32664: POP
32665: POP
32666: GO 32672
// end ;
32668: GO 32633
32670: POP
32671: POP
// end ;
32672: LD_VAR 0 3
32676: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32677: LD_INT 0
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
32690: PPUSH
32691: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32692: LD_VAR 0 1
32696: NOT
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 257
32707: PUSH
32708: LD_INT 9
32710: NONEQUAL
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33289
// side := GetSide ( unit ) ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 255
32730: ST_TO_ADDR
// tech_space := tech_spacanom ;
32731: LD_ADDR_VAR 0 12
32735: PUSH
32736: LD_INT 29
32738: ST_TO_ADDR
// tech_time := tech_taurad ;
32739: LD_ADDR_VAR 0 13
32743: PUSH
32744: LD_INT 28
32746: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32747: LD_ADDR_VAR 0 11
32751: PUSH
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 310
32761: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32762: LD_VAR 0 11
32766: PPUSH
32767: CALL_OW 247
32771: PUSH
32772: LD_INT 2
32774: EQUAL
32775: IFFALSE 32779
// exit ;
32777: GO 33289
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32779: LD_ADDR_VAR 0 8
32783: PUSH
32784: LD_INT 81
32786: PUSH
32787: LD_VAR 0 9
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 21
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PPUSH
32817: CALL_OW 69
32821: ST_TO_ADDR
// if not tmp then
32822: LD_VAR 0 8
32826: NOT
32827: IFFALSE 32831
// exit ;
32829: GO 33289
// if in_unit then
32831: LD_VAR 0 11
32835: IFFALSE 32859
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32837: LD_ADDR_VAR 0 10
32841: PUSH
32842: LD_VAR 0 8
32846: PPUSH
32847: LD_VAR 0 11
32851: PPUSH
32852: CALL_OW 74
32856: ST_TO_ADDR
32857: GO 32879
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32859: LD_ADDR_VAR 0 10
32863: PUSH
32864: LD_VAR 0 8
32868: PPUSH
32869: LD_VAR 0 1
32873: PPUSH
32874: CALL_OW 74
32878: ST_TO_ADDR
// if not enemy then
32879: LD_VAR 0 10
32883: NOT
32884: IFFALSE 32888
// exit ;
32886: GO 33289
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32888: LD_VAR 0 11
32892: PUSH
32893: LD_VAR 0 11
32897: PPUSH
32898: LD_VAR 0 10
32902: PPUSH
32903: CALL_OW 296
32907: PUSH
32908: LD_INT 13
32910: GREATER
32911: AND
32912: PUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: LD_VAR 0 10
32922: PPUSH
32923: CALL_OW 296
32927: PUSH
32928: LD_INT 12
32930: GREATER
32931: OR
32932: IFFALSE 32936
// exit ;
32934: GO 33289
// missile := [ 1 ] ;
32936: LD_ADDR_VAR 0 14
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32947: LD_VAR 0 9
32951: PPUSH
32952: LD_VAR 0 12
32956: PPUSH
32957: CALL_OW 325
32961: IFFALSE 32990
// missile := Replace ( missile , missile + 1 , 2 ) ;
32963: LD_ADDR_VAR 0 14
32967: PUSH
32968: LD_VAR 0 14
32972: PPUSH
32973: LD_VAR 0 14
32977: PUSH
32978: LD_INT 1
32980: PLUS
32981: PPUSH
32982: LD_INT 2
32984: PPUSH
32985: CALL_OW 1
32989: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32990: LD_VAR 0 9
32994: PPUSH
32995: LD_VAR 0 13
32999: PPUSH
33000: CALL_OW 325
33004: PUSH
33005: LD_VAR 0 10
33009: PPUSH
33010: CALL_OW 255
33014: PPUSH
33015: LD_VAR 0 13
33019: PPUSH
33020: CALL_OW 325
33024: NOT
33025: AND
33026: IFFALSE 33055
// missile := Replace ( missile , missile + 1 , 3 ) ;
33028: LD_ADDR_VAR 0 14
33032: PUSH
33033: LD_VAR 0 14
33037: PPUSH
33038: LD_VAR 0 14
33042: PUSH
33043: LD_INT 1
33045: PLUS
33046: PPUSH
33047: LD_INT 3
33049: PPUSH
33050: CALL_OW 1
33054: ST_TO_ADDR
// if missile < 2 then
33055: LD_VAR 0 14
33059: PUSH
33060: LD_INT 2
33062: LESS
33063: IFFALSE 33067
// exit ;
33065: GO 33289
// x := GetX ( enemy ) ;
33067: LD_ADDR_VAR 0 4
33071: PUSH
33072: LD_VAR 0 10
33076: PPUSH
33077: CALL_OW 250
33081: ST_TO_ADDR
// y := GetY ( enemy ) ;
33082: LD_ADDR_VAR 0 5
33086: PUSH
33087: LD_VAR 0 10
33091: PPUSH
33092: CALL_OW 251
33096: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 1
33109: NEG
33110: PPUSH
33111: LD_INT 1
33113: PPUSH
33114: CALL_OW 12
33118: PLUS
33119: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33120: LD_ADDR_VAR 0 7
33124: PUSH
33125: LD_VAR 0 5
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PPUSH
33134: LD_INT 1
33136: PPUSH
33137: CALL_OW 12
33141: PLUS
33142: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33143: LD_VAR 0 6
33147: PPUSH
33148: LD_VAR 0 7
33152: PPUSH
33153: CALL_OW 488
33157: NOT
33158: IFFALSE 33180
// begin _x := x ;
33160: LD_ADDR_VAR 0 6
33164: PUSH
33165: LD_VAR 0 4
33169: ST_TO_ADDR
// _y := y ;
33170: LD_ADDR_VAR 0 7
33174: PUSH
33175: LD_VAR 0 5
33179: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33180: LD_ADDR_VAR 0 3
33184: PUSH
33185: LD_INT 1
33187: PPUSH
33188: LD_VAR 0 14
33192: PPUSH
33193: CALL_OW 12
33197: ST_TO_ADDR
// case i of 1 :
33198: LD_VAR 0 3
33202: PUSH
33203: LD_INT 1
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33228
33211: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33212: LD_VAR 0 1
33216: PPUSH
33217: LD_VAR 0 10
33221: PPUSH
33222: CALL_OW 115
33226: GO 33289
33228: LD_INT 2
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33258
33236: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33237: LD_VAR 0 1
33241: PPUSH
33242: LD_VAR 0 6
33246: PPUSH
33247: LD_VAR 0 7
33251: PPUSH
33252: CALL_OW 153
33256: GO 33289
33258: LD_INT 3
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33288
33266: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33267: LD_VAR 0 1
33271: PPUSH
33272: LD_VAR 0 6
33276: PPUSH
33277: LD_VAR 0 7
33281: PPUSH
33282: CALL_OW 154
33286: GO 33289
33288: POP
// end ;
33289: LD_VAR 0 2
33293: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
// if not unit or not building then
33302: LD_VAR 0 1
33306: NOT
33307: PUSH
33308: LD_VAR 0 2
33312: NOT
33313: OR
33314: IFFALSE 33318
// exit ;
33316: GO 33476
// x := GetX ( building ) ;
33318: LD_ADDR_VAR 0 5
33322: PUSH
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 250
33332: ST_TO_ADDR
// y := GetY ( building ) ;
33333: LD_ADDR_VAR 0 6
33337: PUSH
33338: LD_VAR 0 2
33342: PPUSH
33343: CALL_OW 251
33347: ST_TO_ADDR
// for i = 0 to 5 do
33348: LD_ADDR_VAR 0 4
33352: PUSH
33353: DOUBLE
33354: LD_INT 0
33356: DEC
33357: ST_TO_ADDR
33358: LD_INT 5
33360: PUSH
33361: FOR_TO
33362: IFFALSE 33474
// begin _x := ShiftX ( x , i , 3 ) ;
33364: LD_ADDR_VAR 0 7
33368: PUSH
33369: LD_VAR 0 5
33373: PPUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: LD_INT 3
33381: PPUSH
33382: CALL_OW 272
33386: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33387: LD_ADDR_VAR 0 8
33391: PUSH
33392: LD_VAR 0 6
33396: PPUSH
33397: LD_VAR 0 4
33401: PPUSH
33402: LD_INT 3
33404: PPUSH
33405: CALL_OW 273
33409: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33410: LD_VAR 0 7
33414: PPUSH
33415: LD_VAR 0 8
33419: PPUSH
33420: CALL_OW 488
33424: NOT
33425: IFFALSE 33429
// continue ;
33427: GO 33361
// if HexInfo ( _x , _y ) = 0 then
33429: LD_VAR 0 7
33433: PPUSH
33434: LD_VAR 0 8
33438: PPUSH
33439: CALL_OW 428
33443: PUSH
33444: LD_INT 0
33446: EQUAL
33447: IFFALSE 33472
// begin ComMoveXY ( unit , _x , _y ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_VAR 0 7
33458: PPUSH
33459: LD_VAR 0 8
33463: PPUSH
33464: CALL_OW 111
// exit ;
33468: POP
33469: POP
33470: GO 33476
// end ; end ;
33472: GO 33361
33474: POP
33475: POP
// end ;
33476: LD_VAR 0 3
33480: RET
// export function ScanBase ( side , base_area ) ; begin
33481: LD_INT 0
33483: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33484: LD_ADDR_VAR 0 3
33488: PUSH
33489: LD_VAR 0 2
33493: PPUSH
33494: LD_INT 81
33496: PUSH
33497: LD_VAR 0 1
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 70
33510: ST_TO_ADDR
// end ;
33511: LD_VAR 0 3
33515: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
// result := false ;
33522: LD_ADDR_VAR 0 2
33526: PUSH
33527: LD_INT 0
33529: ST_TO_ADDR
// side := GetSide ( unit ) ;
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 255
33544: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33545: LD_ADDR_VAR 0 4
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 248
33559: ST_TO_ADDR
// case nat of 1 :
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 1
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33584
33573: POP
// tech := tech_lassight ; 2 :
33574: LD_ADDR_VAR 0 5
33578: PUSH
33579: LD_INT 12
33581: ST_TO_ADDR
33582: GO 33623
33584: LD_INT 2
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33603
33592: POP
// tech := tech_mortar ; 3 :
33593: LD_ADDR_VAR 0 5
33597: PUSH
33598: LD_INT 41
33600: ST_TO_ADDR
33601: GO 33623
33603: LD_INT 3
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33622
33611: POP
// tech := tech_bazooka ; end ;
33612: LD_ADDR_VAR 0 5
33616: PUSH
33617: LD_INT 44
33619: ST_TO_ADDR
33620: GO 33623
33622: POP
// if Researched ( side , tech ) then
33623: LD_VAR 0 3
33627: PPUSH
33628: LD_VAR 0 5
33632: PPUSH
33633: CALL_OW 325
33637: IFFALSE 33664
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33639: LD_ADDR_VAR 0 2
33643: PUSH
33644: LD_INT 5
33646: PUSH
33647: LD_INT 8
33649: PUSH
33650: LD_INT 9
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: LD_VAR 0 4
33662: ARRAY
33663: ST_TO_ADDR
// end ;
33664: LD_VAR 0 2
33668: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33669: LD_INT 0
33671: PPUSH
33672: PPUSH
33673: PPUSH
// if not mines then
33674: LD_VAR 0 2
33678: NOT
33679: IFFALSE 33683
// exit ;
33681: GO 33827
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33683: LD_ADDR_VAR 0 5
33687: PUSH
33688: LD_INT 81
33690: PUSH
33691: LD_VAR 0 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: PUSH
33703: LD_INT 21
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PPUSH
33721: CALL_OW 69
33725: ST_TO_ADDR
// for i in mines do
33726: LD_ADDR_VAR 0 4
33730: PUSH
33731: LD_VAR 0 2
33735: PUSH
33736: FOR_IN
33737: IFFALSE 33825
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33739: LD_VAR 0 4
33743: PUSH
33744: LD_INT 1
33746: ARRAY
33747: PPUSH
33748: LD_VAR 0 4
33752: PUSH
33753: LD_INT 2
33755: ARRAY
33756: PPUSH
33757: CALL_OW 458
33761: NOT
33762: IFFALSE 33766
// continue ;
33764: GO 33736
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33766: LD_VAR 0 4
33770: PUSH
33771: LD_INT 1
33773: ARRAY
33774: PPUSH
33775: LD_VAR 0 4
33779: PUSH
33780: LD_INT 2
33782: ARRAY
33783: PPUSH
33784: CALL_OW 428
33788: PUSH
33789: LD_VAR 0 5
33793: IN
33794: IFFALSE 33823
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33796: LD_VAR 0 4
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: LD_VAR 0 4
33809: PUSH
33810: LD_INT 2
33812: ARRAY
33813: PPUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 456
// end ;
33823: GO 33736
33825: POP
33826: POP
// end ;
33827: LD_VAR 0 3
33831: RET
// export function Count ( array ) ; begin
33832: LD_INT 0
33834: PPUSH
// result := array + 0 ;
33835: LD_ADDR_VAR 0 2
33839: PUSH
33840: LD_VAR 0 1
33844: PUSH
33845: LD_INT 0
33847: PLUS
33848: ST_TO_ADDR
// end ;
33849: LD_VAR 0 2
33853: RET
// export function IsEmpty ( building ) ; begin
33854: LD_INT 0
33856: PPUSH
// if not building then
33857: LD_VAR 0 1
33861: NOT
33862: IFFALSE 33866
// exit ;
33864: GO 33909
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33866: LD_ADDR_VAR 0 2
33870: PUSH
33871: LD_VAR 0 1
33875: PUSH
33876: LD_INT 22
33878: PUSH
33879: LD_VAR 0 1
33883: PPUSH
33884: CALL_OW 255
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 58
33895: PUSH
33896: EMPTY
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PPUSH
33903: CALL_OW 69
33907: IN
33908: ST_TO_ADDR
// end ;
33909: LD_VAR 0 2
33913: RET
// export function IsNotFull ( building ) ; var places ; begin
33914: LD_INT 0
33916: PPUSH
33917: PPUSH
// if not building then
33918: LD_VAR 0 1
33922: NOT
33923: IFFALSE 33927
// exit ;
33925: GO 33955
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33927: LD_ADDR_VAR 0 2
33931: PUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_INT 3
33939: PUSH
33940: LD_INT 62
33942: PUSH
33943: EMPTY
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PPUSH
33950: CALL_OW 72
33954: ST_TO_ADDR
// end ;
33955: LD_VAR 0 2
33959: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33960: LD_INT 0
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
// tmp := [ ] ;
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: EMPTY
33972: ST_TO_ADDR
// list := [ ] ;
33973: LD_ADDR_VAR 0 5
33977: PUSH
33978: EMPTY
33979: ST_TO_ADDR
// for i = 16 to 25 do
33980: LD_ADDR_VAR 0 4
33984: PUSH
33985: DOUBLE
33986: LD_INT 16
33988: DEC
33989: ST_TO_ADDR
33990: LD_INT 25
33992: PUSH
33993: FOR_TO
33994: IFFALSE 34067
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33996: LD_ADDR_VAR 0 3
34000: PUSH
34001: LD_VAR 0 3
34005: PUSH
34006: LD_INT 22
34008: PUSH
34009: LD_VAR 0 1
34013: PPUSH
34014: CALL_OW 255
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 91
34025: PUSH
34026: LD_VAR 0 1
34030: PUSH
34031: LD_INT 6
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 30
34041: PUSH
34042: LD_VAR 0 4
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: PPUSH
34059: CALL_OW 69
34063: ADD
34064: ST_TO_ADDR
34065: GO 33993
34067: POP
34068: POP
// for i = 1 to tmp do
34069: LD_ADDR_VAR 0 4
34073: PUSH
34074: DOUBLE
34075: LD_INT 1
34077: DEC
34078: ST_TO_ADDR
34079: LD_VAR 0 3
34083: PUSH
34084: FOR_TO
34085: IFFALSE 34173
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34087: LD_ADDR_VAR 0 5
34091: PUSH
34092: LD_VAR 0 5
34096: PUSH
34097: LD_VAR 0 3
34101: PUSH
34102: LD_VAR 0 4
34106: ARRAY
34107: PPUSH
34108: CALL_OW 266
34112: PUSH
34113: LD_VAR 0 3
34117: PUSH
34118: LD_VAR 0 4
34122: ARRAY
34123: PPUSH
34124: CALL_OW 250
34128: PUSH
34129: LD_VAR 0 3
34133: PUSH
34134: LD_VAR 0 4
34138: ARRAY
34139: PPUSH
34140: CALL_OW 251
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: LD_VAR 0 4
34154: ARRAY
34155: PPUSH
34156: CALL_OW 254
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: PUSH
34167: EMPTY
34168: LIST
34169: ADD
34170: ST_TO_ADDR
34171: GO 34084
34173: POP
34174: POP
// result := list ;
34175: LD_ADDR_VAR 0 2
34179: PUSH
34180: LD_VAR 0 5
34184: ST_TO_ADDR
// end ;
34185: LD_VAR 0 2
34189: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34190: LD_INT 0
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
// if not factory then
34199: LD_VAR 0 1
34203: NOT
34204: IFFALSE 34208
// exit ;
34206: GO 34801
// if control = control_apeman then
34208: LD_VAR 0 4
34212: PUSH
34213: LD_INT 5
34215: EQUAL
34216: IFFALSE 34325
// begin tmp := UnitsInside ( factory ) ;
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 313
34232: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34233: LD_VAR 0 8
34237: PPUSH
34238: LD_INT 25
34240: PUSH
34241: LD_INT 12
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PPUSH
34248: CALL_OW 72
34252: NOT
34253: IFFALSE 34263
// control := control_manual ;
34255: LD_ADDR_VAR 0 4
34259: PUSH
34260: LD_INT 1
34262: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34263: LD_ADDR_VAR 0 8
34267: PUSH
34268: LD_VAR 0 1
34272: PPUSH
34273: CALL 33960 0 1
34277: ST_TO_ADDR
// if tmp then
34278: LD_VAR 0 8
34282: IFFALSE 34325
// begin for i in tmp do
34284: LD_ADDR_VAR 0 7
34288: PUSH
34289: LD_VAR 0 8
34293: PUSH
34294: FOR_IN
34295: IFFALSE 34323
// if i [ 1 ] = b_ext_radio then
34297: LD_VAR 0 7
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PUSH
34306: LD_INT 22
34308: EQUAL
34309: IFFALSE 34321
// begin control := control_remote ;
34311: LD_ADDR_VAR 0 4
34315: PUSH
34316: LD_INT 2
34318: ST_TO_ADDR
// break ;
34319: GO 34323
// end ;
34321: GO 34294
34323: POP
34324: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34325: LD_VAR 0 1
34329: PPUSH
34330: LD_VAR 0 2
34334: PPUSH
34335: LD_VAR 0 3
34339: PPUSH
34340: LD_VAR 0 4
34344: PPUSH
34345: LD_VAR 0 5
34349: PPUSH
34350: CALL_OW 448
34354: IFFALSE 34389
// begin result := [ chassis , engine , control , weapon ] ;
34356: LD_ADDR_VAR 0 6
34360: PUSH
34361: LD_VAR 0 2
34365: PUSH
34366: LD_VAR 0 3
34370: PUSH
34371: LD_VAR 0 4
34375: PUSH
34376: LD_VAR 0 5
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
// exit ;
34387: GO 34801
// end ; _chassis := AvailableChassisList ( factory ) ;
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 475
34403: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34404: LD_ADDR_VAR 0 11
34408: PUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 476
34418: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34419: LD_ADDR_VAR 0 12
34423: PUSH
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 477
34433: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34434: LD_ADDR_VAR 0 10
34438: PUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 478
34448: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34449: LD_VAR 0 9
34453: NOT
34454: PUSH
34455: LD_VAR 0 11
34459: NOT
34460: OR
34461: PUSH
34462: LD_VAR 0 12
34466: NOT
34467: OR
34468: PUSH
34469: LD_VAR 0 10
34473: NOT
34474: OR
34475: IFFALSE 34510
// begin result := [ chassis , engine , control , weapon ] ;
34477: LD_ADDR_VAR 0 6
34481: PUSH
34482: LD_VAR 0 2
34486: PUSH
34487: LD_VAR 0 3
34491: PUSH
34492: LD_VAR 0 4
34496: PUSH
34497: LD_VAR 0 5
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
// exit ;
34508: GO 34801
// end ; if not chassis in _chassis then
34510: LD_VAR 0 2
34514: PUSH
34515: LD_VAR 0 9
34519: IN
34520: NOT
34521: IFFALSE 34547
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34523: LD_ADDR_VAR 0 2
34527: PUSH
34528: LD_VAR 0 9
34532: PUSH
34533: LD_INT 1
34535: PPUSH
34536: LD_VAR 0 9
34540: PPUSH
34541: CALL_OW 12
34545: ARRAY
34546: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34547: LD_VAR 0 2
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: CALL 34806 0 2
34561: NOT
34562: IFFALSE 34621
// repeat engine := _engine [ 1 ] ;
34564: LD_ADDR_VAR 0 3
34568: PUSH
34569: LD_VAR 0 11
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34578: LD_ADDR_VAR 0 11
34582: PUSH
34583: LD_VAR 0 11
34587: PPUSH
34588: LD_INT 1
34590: PPUSH
34591: CALL_OW 3
34595: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34596: LD_VAR 0 2
34600: PPUSH
34601: LD_VAR 0 3
34605: PPUSH
34606: CALL 34806 0 2
34610: PUSH
34611: LD_VAR 0 11
34615: PUSH
34616: EMPTY
34617: EQUAL
34618: OR
34619: IFFALSE 34564
// if not control in _control then
34621: LD_VAR 0 4
34625: PUSH
34626: LD_VAR 0 12
34630: IN
34631: NOT
34632: IFFALSE 34658
// control := _control [ rand ( 1 , _control ) ] ;
34634: LD_ADDR_VAR 0 4
34638: PUSH
34639: LD_VAR 0 12
34643: PUSH
34644: LD_INT 1
34646: PPUSH
34647: LD_VAR 0 12
34651: PPUSH
34652: CALL_OW 12
34656: ARRAY
34657: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34658: LD_VAR 0 2
34662: PPUSH
34663: LD_VAR 0 5
34667: PPUSH
34668: CALL 35026 0 2
34672: NOT
34673: IFFALSE 34732
// repeat weapon := _weapon [ 1 ] ;
34675: LD_ADDR_VAR 0 5
34679: PUSH
34680: LD_VAR 0 10
34684: PUSH
34685: LD_INT 1
34687: ARRAY
34688: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34689: LD_ADDR_VAR 0 10
34693: PUSH
34694: LD_VAR 0 10
34698: PPUSH
34699: LD_INT 1
34701: PPUSH
34702: CALL_OW 3
34706: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34707: LD_VAR 0 2
34711: PPUSH
34712: LD_VAR 0 5
34716: PPUSH
34717: CALL 35026 0 2
34721: PUSH
34722: LD_VAR 0 10
34726: PUSH
34727: EMPTY
34728: EQUAL
34729: OR
34730: IFFALSE 34675
// result := [ ] ;
34732: LD_ADDR_VAR 0 6
34736: PUSH
34737: EMPTY
34738: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34739: LD_VAR 0 1
34743: PPUSH
34744: LD_VAR 0 2
34748: PPUSH
34749: LD_VAR 0 3
34753: PPUSH
34754: LD_VAR 0 4
34758: PPUSH
34759: LD_VAR 0 5
34763: PPUSH
34764: CALL_OW 448
34768: IFFALSE 34801
// result := [ chassis , engine , control , weapon ] ;
34770: LD_ADDR_VAR 0 6
34774: PUSH
34775: LD_VAR 0 2
34779: PUSH
34780: LD_VAR 0 3
34784: PUSH
34785: LD_VAR 0 4
34789: PUSH
34790: LD_VAR 0 5
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
// end ;
34801: LD_VAR 0 6
34805: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34806: LD_INT 0
34808: PPUSH
// if not chassis or not engine then
34809: LD_VAR 0 1
34813: NOT
34814: PUSH
34815: LD_VAR 0 2
34819: NOT
34820: OR
34821: IFFALSE 34825
// exit ;
34823: GO 35021
// case engine of engine_solar :
34825: LD_VAR 0 2
34829: PUSH
34830: LD_INT 2
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34838
34836: GO 34876
34838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34839: LD_ADDR_VAR 0 3
34843: PUSH
34844: LD_INT 11
34846: PUSH
34847: LD_INT 12
34849: PUSH
34850: LD_INT 13
34852: PUSH
34853: LD_INT 14
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
34874: GO 35005
34876: LD_INT 1
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 34946
34884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_INT 11
34892: PUSH
34893: LD_INT 12
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: LD_INT 14
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: LD_INT 4
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: LD_INT 21
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 22
34925: PUSH
34926: LD_INT 24
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
34944: GO 35005
34946: LD_INT 3
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 35004
34954: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_INT 13
34962: PUSH
34963: LD_INT 14
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: LD_INT 5
34977: PUSH
34978: LD_INT 21
34980: PUSH
34981: LD_INT 22
34983: PUSH
34984: LD_INT 23
34986: PUSH
34987: LD_INT 24
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35005
35004: POP
// result := ( chassis in result ) ;
35005: LD_ADDR_VAR 0 3
35009: PUSH
35010: LD_VAR 0 1
35014: PUSH
35015: LD_VAR 0 3
35019: IN
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 3
35025: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35026: LD_INT 0
35028: PPUSH
// if not chassis or not weapon then
35029: LD_VAR 0 1
35033: NOT
35034: PUSH
35035: LD_VAR 0 2
35039: NOT
35040: OR
35041: IFFALSE 35045
// exit ;
35043: GO 36105
// case weapon of us_machine_gun :
35045: LD_VAR 0 2
35049: PUSH
35050: LD_INT 2
35052: DOUBLE
35053: EQUAL
35054: IFTRUE 35058
35056: GO 35088
35058: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35059: LD_ADDR_VAR 0 3
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: LD_INT 4
35075: PUSH
35076: LD_INT 5
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
35086: GO 36089
35088: LD_INT 3
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35126
35096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35097: LD_ADDR_VAR 0 3
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 3
35110: PUSH
35111: LD_INT 4
35113: PUSH
35114: LD_INT 5
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
35124: GO 36089
35126: LD_INT 11
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35164
35134: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35135: LD_ADDR_VAR 0 3
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 4
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
35162: GO 36089
35164: LD_INT 4
35166: DOUBLE
35167: EQUAL
35168: IFTRUE 35172
35170: GO 35198
35172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35173: LD_ADDR_VAR 0 3
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: LD_INT 3
35183: PUSH
35184: LD_INT 4
35186: PUSH
35187: LD_INT 5
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
35196: GO 36089
35198: LD_INT 5
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35206
35204: GO 35232
35206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35207: LD_ADDR_VAR 0 3
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 3
35217: PUSH
35218: LD_INT 4
35220: PUSH
35221: LD_INT 5
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: ST_TO_ADDR
35230: GO 36089
35232: LD_INT 9
35234: DOUBLE
35235: EQUAL
35236: IFTRUE 35240
35238: GO 35266
35240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35241: LD_ADDR_VAR 0 3
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: LD_INT 3
35251: PUSH
35252: LD_INT 4
35254: PUSH
35255: LD_INT 5
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: ST_TO_ADDR
35264: GO 36089
35266: LD_INT 7
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35274
35272: GO 35300
35274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35275: LD_ADDR_VAR 0 3
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: LD_INT 4
35288: PUSH
35289: LD_INT 5
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
35298: GO 36089
35300: LD_INT 12
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35334
35308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35309: LD_ADDR_VAR 0 3
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: LD_INT 4
35322: PUSH
35323: LD_INT 5
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
35332: GO 36089
35334: LD_INT 13
35336: DOUBLE
35337: EQUAL
35338: IFTRUE 35342
35340: GO 35368
35342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35343: LD_ADDR_VAR 0 3
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: LD_INT 5
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
35366: GO 36089
35368: LD_INT 14
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35394
35376: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: LD_INT 5
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: ST_TO_ADDR
35392: GO 36089
35394: LD_INT 6
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35420
35402: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_INT 4
35410: PUSH
35411: LD_INT 5
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: ST_TO_ADDR
35418: GO 36089
35420: LD_INT 10
35422: DOUBLE
35423: EQUAL
35424: IFTRUE 35428
35426: GO 35446
35428: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35429: LD_ADDR_VAR 0 3
35433: PUSH
35434: LD_INT 4
35436: PUSH
35437: LD_INT 5
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: ST_TO_ADDR
35444: GO 36089
35446: LD_INT 22
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35454
35452: GO 35480
35454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35455: LD_ADDR_VAR 0 3
35459: PUSH
35460: LD_INT 11
35462: PUSH
35463: LD_INT 12
35465: PUSH
35466: LD_INT 13
35468: PUSH
35469: LD_INT 14
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: ST_TO_ADDR
35478: GO 36089
35480: LD_INT 23
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35488
35486: GO 35514
35488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35489: LD_ADDR_VAR 0 3
35493: PUSH
35494: LD_INT 11
35496: PUSH
35497: LD_INT 12
35499: PUSH
35500: LD_INT 13
35502: PUSH
35503: LD_INT 14
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
35512: GO 36089
35514: LD_INT 24
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35548
35522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35523: LD_ADDR_VAR 0 3
35527: PUSH
35528: LD_INT 11
35530: PUSH
35531: LD_INT 12
35533: PUSH
35534: LD_INT 13
35536: PUSH
35537: LD_INT 14
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: ST_TO_ADDR
35546: GO 36089
35548: LD_INT 30
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35582
35556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_INT 11
35564: PUSH
35565: LD_INT 12
35567: PUSH
35568: LD_INT 13
35570: PUSH
35571: LD_INT 14
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
35580: GO 36089
35582: LD_INT 25
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35608
35590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_INT 13
35598: PUSH
35599: LD_INT 14
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: ST_TO_ADDR
35606: GO 36089
35608: LD_INT 27
35610: DOUBLE
35611: EQUAL
35612: IFTRUE 35616
35614: GO 35634
35616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: LD_INT 13
35624: PUSH
35625: LD_INT 14
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: ST_TO_ADDR
35632: GO 36089
35634: LD_INT 92
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35642
35640: GO 35668
35642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35643: LD_ADDR_VAR 0 3
35647: PUSH
35648: LD_INT 11
35650: PUSH
35651: LD_INT 12
35653: PUSH
35654: LD_INT 13
35656: PUSH
35657: LD_INT 14
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: ST_TO_ADDR
35666: GO 36089
35668: LD_INT 28
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35676
35674: GO 35694
35676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35677: LD_ADDR_VAR 0 3
35681: PUSH
35682: LD_INT 13
35684: PUSH
35685: LD_INT 14
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: ST_TO_ADDR
35692: GO 36089
35694: LD_INT 29
35696: DOUBLE
35697: EQUAL
35698: IFTRUE 35702
35700: GO 35720
35702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35703: LD_ADDR_VAR 0 3
35707: PUSH
35708: LD_INT 13
35710: PUSH
35711: LD_INT 14
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: ST_TO_ADDR
35718: GO 36089
35720: LD_INT 31
35722: DOUBLE
35723: EQUAL
35724: IFTRUE 35728
35726: GO 35746
35728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35729: LD_ADDR_VAR 0 3
35733: PUSH
35734: LD_INT 13
35736: PUSH
35737: LD_INT 14
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: ST_TO_ADDR
35744: GO 36089
35746: LD_INT 26
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35754
35752: GO 35772
35754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35755: LD_ADDR_VAR 0 3
35759: PUSH
35760: LD_INT 13
35762: PUSH
35763: LD_INT 14
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: ST_TO_ADDR
35770: GO 36089
35772: LD_INT 42
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35780
35778: GO 35806
35780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35781: LD_ADDR_VAR 0 3
35785: PUSH
35786: LD_INT 21
35788: PUSH
35789: LD_INT 22
35791: PUSH
35792: LD_INT 23
35794: PUSH
35795: LD_INT 24
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: ST_TO_ADDR
35804: GO 36089
35806: LD_INT 43
35808: DOUBLE
35809: EQUAL
35810: IFTRUE 35814
35812: GO 35840
35814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35815: LD_ADDR_VAR 0 3
35819: PUSH
35820: LD_INT 21
35822: PUSH
35823: LD_INT 22
35825: PUSH
35826: LD_INT 23
35828: PUSH
35829: LD_INT 24
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
35838: GO 36089
35840: LD_INT 44
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35848
35846: GO 35874
35848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35849: LD_ADDR_VAR 0 3
35853: PUSH
35854: LD_INT 21
35856: PUSH
35857: LD_INT 22
35859: PUSH
35860: LD_INT 23
35862: PUSH
35863: LD_INT 24
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
35872: GO 36089
35874: LD_INT 45
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35882
35880: GO 35908
35882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_INT 21
35890: PUSH
35891: LD_INT 22
35893: PUSH
35894: LD_INT 23
35896: PUSH
35897: LD_INT 24
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
35906: GO 36089
35908: LD_INT 49
35910: DOUBLE
35911: EQUAL
35912: IFTRUE 35916
35914: GO 35942
35916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: LD_INT 21
35924: PUSH
35925: LD_INT 22
35927: PUSH
35928: LD_INT 23
35930: PUSH
35931: LD_INT 24
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: ST_TO_ADDR
35940: GO 36089
35942: LD_INT 51
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35950
35948: GO 35976
35950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35951: LD_ADDR_VAR 0 3
35955: PUSH
35956: LD_INT 21
35958: PUSH
35959: LD_INT 22
35961: PUSH
35962: LD_INT 23
35964: PUSH
35965: LD_INT 24
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: ST_TO_ADDR
35974: GO 36089
35976: LD_INT 52
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35984
35982: GO 36010
35984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35985: LD_ADDR_VAR 0 3
35989: PUSH
35990: LD_INT 21
35992: PUSH
35993: LD_INT 22
35995: PUSH
35996: LD_INT 23
35998: PUSH
35999: LD_INT 24
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
36008: GO 36089
36010: LD_INT 53
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36018
36016: GO 36036
36018: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36019: LD_ADDR_VAR 0 3
36023: PUSH
36024: LD_INT 23
36026: PUSH
36027: LD_INT 24
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: ST_TO_ADDR
36034: GO 36089
36036: LD_INT 46
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36044
36042: GO 36062
36044: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36045: LD_ADDR_VAR 0 3
36049: PUSH
36050: LD_INT 23
36052: PUSH
36053: LD_INT 24
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: ST_TO_ADDR
36060: GO 36089
36062: LD_INT 47
36064: DOUBLE
36065: EQUAL
36066: IFTRUE 36070
36068: GO 36088
36070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36071: LD_ADDR_VAR 0 3
36075: PUSH
36076: LD_INT 23
36078: PUSH
36079: LD_INT 24
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: ST_TO_ADDR
36086: GO 36089
36088: POP
// result := ( chassis in result ) ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_VAR 0 1
36098: PUSH
36099: LD_VAR 0 3
36103: IN
36104: ST_TO_ADDR
// end ;
36105: LD_VAR 0 3
36109: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36110: LD_INT 0
36112: PPUSH
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
// result := array ;
36119: LD_ADDR_VAR 0 5
36123: PUSH
36124: LD_VAR 0 1
36128: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36129: LD_VAR 0 1
36133: NOT
36134: PUSH
36135: LD_VAR 0 2
36139: NOT
36140: OR
36141: PUSH
36142: LD_VAR 0 3
36146: NOT
36147: OR
36148: PUSH
36149: LD_VAR 0 2
36153: PUSH
36154: LD_VAR 0 1
36158: GREATER
36159: OR
36160: PUSH
36161: LD_VAR 0 3
36165: PUSH
36166: LD_VAR 0 1
36170: GREATER
36171: OR
36172: IFFALSE 36176
// exit ;
36174: GO 36472
// if direction then
36176: LD_VAR 0 4
36180: IFFALSE 36244
// begin d := 1 ;
36182: LD_ADDR_VAR 0 9
36186: PUSH
36187: LD_INT 1
36189: ST_TO_ADDR
// if i_from > i_to then
36190: LD_VAR 0 2
36194: PUSH
36195: LD_VAR 0 3
36199: GREATER
36200: IFFALSE 36226
// length := ( array - i_from ) + i_to else
36202: LD_ADDR_VAR 0 11
36206: PUSH
36207: LD_VAR 0 1
36211: PUSH
36212: LD_VAR 0 2
36216: MINUS
36217: PUSH
36218: LD_VAR 0 3
36222: PLUS
36223: ST_TO_ADDR
36224: GO 36242
// length := i_to - i_from ;
36226: LD_ADDR_VAR 0 11
36230: PUSH
36231: LD_VAR 0 3
36235: PUSH
36236: LD_VAR 0 2
36240: MINUS
36241: ST_TO_ADDR
// end else
36242: GO 36305
// begin d := - 1 ;
36244: LD_ADDR_VAR 0 9
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: ST_TO_ADDR
// if i_from > i_to then
36253: LD_VAR 0 2
36257: PUSH
36258: LD_VAR 0 3
36262: GREATER
36263: IFFALSE 36283
// length := i_from - i_to else
36265: LD_ADDR_VAR 0 11
36269: PUSH
36270: LD_VAR 0 2
36274: PUSH
36275: LD_VAR 0 3
36279: MINUS
36280: ST_TO_ADDR
36281: GO 36305
// length := ( array - i_to ) + i_from ;
36283: LD_ADDR_VAR 0 11
36287: PUSH
36288: LD_VAR 0 1
36292: PUSH
36293: LD_VAR 0 3
36297: MINUS
36298: PUSH
36299: LD_VAR 0 2
36303: PLUS
36304: ST_TO_ADDR
// end ; if not length then
36305: LD_VAR 0 11
36309: NOT
36310: IFFALSE 36314
// exit ;
36312: GO 36472
// tmp := array ;
36314: LD_ADDR_VAR 0 10
36318: PUSH
36319: LD_VAR 0 1
36323: ST_TO_ADDR
// for i = 1 to length do
36324: LD_ADDR_VAR 0 6
36328: PUSH
36329: DOUBLE
36330: LD_INT 1
36332: DEC
36333: ST_TO_ADDR
36334: LD_VAR 0 11
36338: PUSH
36339: FOR_TO
36340: IFFALSE 36460
// begin for j = 1 to array do
36342: LD_ADDR_VAR 0 7
36346: PUSH
36347: DOUBLE
36348: LD_INT 1
36350: DEC
36351: ST_TO_ADDR
36352: LD_VAR 0 1
36356: PUSH
36357: FOR_TO
36358: IFFALSE 36446
// begin k := j + d ;
36360: LD_ADDR_VAR 0 8
36364: PUSH
36365: LD_VAR 0 7
36369: PUSH
36370: LD_VAR 0 9
36374: PLUS
36375: ST_TO_ADDR
// if k > array then
36376: LD_VAR 0 8
36380: PUSH
36381: LD_VAR 0 1
36385: GREATER
36386: IFFALSE 36396
// k := 1 ;
36388: LD_ADDR_VAR 0 8
36392: PUSH
36393: LD_INT 1
36395: ST_TO_ADDR
// if not k then
36396: LD_VAR 0 8
36400: NOT
36401: IFFALSE 36413
// k := array ;
36403: LD_ADDR_VAR 0 8
36407: PUSH
36408: LD_VAR 0 1
36412: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36413: LD_ADDR_VAR 0 10
36417: PUSH
36418: LD_VAR 0 10
36422: PPUSH
36423: LD_VAR 0 8
36427: PPUSH
36428: LD_VAR 0 1
36432: PUSH
36433: LD_VAR 0 7
36437: ARRAY
36438: PPUSH
36439: CALL_OW 1
36443: ST_TO_ADDR
// end ;
36444: GO 36357
36446: POP
36447: POP
// array := tmp ;
36448: LD_ADDR_VAR 0 1
36452: PUSH
36453: LD_VAR 0 10
36457: ST_TO_ADDR
// end ;
36458: GO 36339
36460: POP
36461: POP
// result := array ;
36462: LD_ADDR_VAR 0 5
36466: PUSH
36467: LD_VAR 0 1
36471: ST_TO_ADDR
// end ;
36472: LD_VAR 0 5
36476: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36477: LD_INT 0
36479: PPUSH
36480: PPUSH
// result := 0 ;
36481: LD_ADDR_VAR 0 3
36485: PUSH
36486: LD_INT 0
36488: ST_TO_ADDR
// if not array or not value in array then
36489: LD_VAR 0 1
36493: NOT
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_VAR 0 1
36504: IN
36505: NOT
36506: OR
36507: IFFALSE 36511
// exit ;
36509: GO 36565
// for i = 1 to array do
36511: LD_ADDR_VAR 0 4
36515: PUSH
36516: DOUBLE
36517: LD_INT 1
36519: DEC
36520: ST_TO_ADDR
36521: LD_VAR 0 1
36525: PUSH
36526: FOR_TO
36527: IFFALSE 36563
// if value = array [ i ] then
36529: LD_VAR 0 2
36533: PUSH
36534: LD_VAR 0 1
36538: PUSH
36539: LD_VAR 0 4
36543: ARRAY
36544: EQUAL
36545: IFFALSE 36561
// begin result := i ;
36547: LD_ADDR_VAR 0 3
36551: PUSH
36552: LD_VAR 0 4
36556: ST_TO_ADDR
// exit ;
36557: POP
36558: POP
36559: GO 36565
// end ;
36561: GO 36526
36563: POP
36564: POP
// end ;
36565: LD_VAR 0 3
36569: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36570: LD_INT 0
36572: PPUSH
// vc_chassis := chassis ;
36573: LD_ADDR_OWVAR 37
36577: PUSH
36578: LD_VAR 0 1
36582: ST_TO_ADDR
// vc_engine := engine ;
36583: LD_ADDR_OWVAR 39
36587: PUSH
36588: LD_VAR 0 2
36592: ST_TO_ADDR
// vc_control := control ;
36593: LD_ADDR_OWVAR 38
36597: PUSH
36598: LD_VAR 0 3
36602: ST_TO_ADDR
// vc_weapon := weapon ;
36603: LD_ADDR_OWVAR 40
36607: PUSH
36608: LD_VAR 0 4
36612: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36613: LD_ADDR_OWVAR 41
36617: PUSH
36618: LD_VAR 0 5
36622: ST_TO_ADDR
// end ;
36623: LD_VAR 0 6
36627: RET
// export function WantPlant ( unit ) ; var task ; begin
36628: LD_INT 0
36630: PPUSH
36631: PPUSH
// result := false ;
36632: LD_ADDR_VAR 0 2
36636: PUSH
36637: LD_INT 0
36639: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36640: LD_ADDR_VAR 0 3
36644: PUSH
36645: LD_VAR 0 1
36649: PPUSH
36650: CALL_OW 437
36654: ST_TO_ADDR
// if task then
36655: LD_VAR 0 3
36659: IFFALSE 36687
// if task [ 1 ] [ 1 ] = p then
36661: LD_VAR 0 3
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: PUSH
36670: LD_INT 1
36672: ARRAY
36673: PUSH
36674: LD_STRING p
36676: EQUAL
36677: IFFALSE 36687
// result := true ;
36679: LD_ADDR_VAR 0 2
36683: PUSH
36684: LD_INT 1
36686: ST_TO_ADDR
// end ;
36687: LD_VAR 0 2
36691: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36692: LD_INT 0
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
// if pos < 1 then
36698: LD_VAR 0 2
36702: PUSH
36703: LD_INT 1
36705: LESS
36706: IFFALSE 36710
// exit ;
36708: GO 37013
// if pos = 1 then
36710: LD_VAR 0 2
36714: PUSH
36715: LD_INT 1
36717: EQUAL
36718: IFFALSE 36751
// result := Replace ( arr , pos [ 1 ] , value ) else
36720: LD_ADDR_VAR 0 4
36724: PUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: LD_VAR 0 2
36734: PUSH
36735: LD_INT 1
36737: ARRAY
36738: PPUSH
36739: LD_VAR 0 3
36743: PPUSH
36744: CALL_OW 1
36748: ST_TO_ADDR
36749: GO 37013
// begin tmp := arr ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_VAR 0 1
36760: ST_TO_ADDR
// s_arr := [ tmp ] ;
36761: LD_ADDR_VAR 0 7
36765: PUSH
36766: LD_VAR 0 6
36770: PUSH
36771: EMPTY
36772: LIST
36773: ST_TO_ADDR
// for i = 1 to pos - 1 do
36774: LD_ADDR_VAR 0 5
36778: PUSH
36779: DOUBLE
36780: LD_INT 1
36782: DEC
36783: ST_TO_ADDR
36784: LD_VAR 0 2
36788: PUSH
36789: LD_INT 1
36791: MINUS
36792: PUSH
36793: FOR_TO
36794: IFFALSE 36839
// begin tmp := tmp [ pos [ i ] ] ;
36796: LD_ADDR_VAR 0 6
36800: PUSH
36801: LD_VAR 0 6
36805: PUSH
36806: LD_VAR 0 2
36810: PUSH
36811: LD_VAR 0 5
36815: ARRAY
36816: ARRAY
36817: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36818: LD_ADDR_VAR 0 7
36822: PUSH
36823: LD_VAR 0 7
36827: PUSH
36828: LD_VAR 0 6
36832: PUSH
36833: EMPTY
36834: LIST
36835: ADD
36836: ST_TO_ADDR
// end ;
36837: GO 36793
36839: POP
36840: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36841: LD_ADDR_VAR 0 6
36845: PUSH
36846: LD_VAR 0 6
36850: PPUSH
36851: LD_VAR 0 2
36855: PUSH
36856: LD_VAR 0 2
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 3
36866: PPUSH
36867: CALL_OW 1
36871: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36872: LD_ADDR_VAR 0 7
36876: PUSH
36877: LD_VAR 0 7
36881: PPUSH
36882: LD_VAR 0 7
36886: PPUSH
36887: LD_VAR 0 6
36891: PPUSH
36892: CALL_OW 1
36896: ST_TO_ADDR
// for i = s_arr downto 2 do
36897: LD_ADDR_VAR 0 5
36901: PUSH
36902: DOUBLE
36903: LD_VAR 0 7
36907: INC
36908: ST_TO_ADDR
36909: LD_INT 2
36911: PUSH
36912: FOR_DOWNTO
36913: IFFALSE 36997
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36915: LD_ADDR_VAR 0 6
36919: PUSH
36920: LD_VAR 0 7
36924: PUSH
36925: LD_VAR 0 5
36929: PUSH
36930: LD_INT 1
36932: MINUS
36933: ARRAY
36934: PPUSH
36935: LD_VAR 0 2
36939: PUSH
36940: LD_VAR 0 5
36944: PUSH
36945: LD_INT 1
36947: MINUS
36948: ARRAY
36949: PPUSH
36950: LD_VAR 0 7
36954: PUSH
36955: LD_VAR 0 5
36959: ARRAY
36960: PPUSH
36961: CALL_OW 1
36965: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: LD_VAR 0 7
36975: PPUSH
36976: LD_VAR 0 5
36980: PUSH
36981: LD_INT 1
36983: MINUS
36984: PPUSH
36985: LD_VAR 0 6
36989: PPUSH
36990: CALL_OW 1
36994: ST_TO_ADDR
// end ;
36995: GO 36912
36997: POP
36998: POP
// result := s_arr [ 1 ] ;
36999: LD_ADDR_VAR 0 4
37003: PUSH
37004: LD_VAR 0 7
37008: PUSH
37009: LD_INT 1
37011: ARRAY
37012: ST_TO_ADDR
// end ; end ;
37013: LD_VAR 0 4
37017: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
// if not list then
37022: LD_VAR 0 1
37026: NOT
37027: IFFALSE 37031
// exit ;
37029: GO 37122
// i := list [ pos1 ] ;
37031: LD_ADDR_VAR 0 5
37035: PUSH
37036: LD_VAR 0 1
37040: PUSH
37041: LD_VAR 0 2
37045: ARRAY
37046: ST_TO_ADDR
// if not i then
37047: LD_VAR 0 5
37051: NOT
37052: IFFALSE 37056
// exit ;
37054: GO 37122
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37056: LD_ADDR_VAR 0 1
37060: PUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_VAR 0 3
37080: ARRAY
37081: PPUSH
37082: CALL_OW 1
37086: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37087: LD_ADDR_VAR 0 1
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: LD_VAR 0 3
37101: PPUSH
37102: LD_VAR 0 5
37106: PPUSH
37107: CALL_OW 1
37111: ST_TO_ADDR
// result := list ;
37112: LD_ADDR_VAR 0 4
37116: PUSH
37117: LD_VAR 0 1
37121: ST_TO_ADDR
// end ;
37122: LD_VAR 0 4
37126: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37127: LD_INT 0
37129: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37130: LD_ADDR_VAR 0 5
37134: PUSH
37135: LD_VAR 0 1
37139: PPUSH
37140: CALL_OW 250
37144: PPUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 251
37154: PPUSH
37155: LD_VAR 0 2
37159: PPUSH
37160: LD_VAR 0 3
37164: PPUSH
37165: LD_VAR 0 4
37169: PPUSH
37170: CALL 37548 0 5
37174: ST_TO_ADDR
// end ;
37175: LD_VAR 0 5
37179: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37180: LD_INT 0
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
// if not list or not unit then
37186: LD_VAR 0 2
37190: NOT
37191: PUSH
37192: LD_VAR 0 1
37196: NOT
37197: OR
37198: IFFALSE 37202
// exit ;
37200: GO 37543
// result := [ ] ;
37202: LD_ADDR_VAR 0 5
37206: PUSH
37207: EMPTY
37208: ST_TO_ADDR
// for i in list do
37209: LD_ADDR_VAR 0 6
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: FOR_IN
37220: IFFALSE 37438
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37222: LD_ADDR_VAR 0 8
37226: PUSH
37227: LD_VAR 0 1
37231: PPUSH
37232: LD_VAR 0 6
37236: PUSH
37237: LD_INT 1
37239: ARRAY
37240: PPUSH
37241: LD_VAR 0 6
37245: PUSH
37246: LD_INT 2
37248: ARRAY
37249: PPUSH
37250: CALL_OW 297
37254: ST_TO_ADDR
// if not Count ( result ) then
37255: LD_VAR 0 5
37259: PPUSH
37260: CALL 33832 0 1
37264: NOT
37265: IFFALSE 37298
// begin result := Join ( result , [ i , tmp ] ) ;
37267: LD_ADDR_VAR 0 5
37271: PUSH
37272: LD_VAR 0 5
37276: PPUSH
37277: LD_VAR 0 6
37281: PUSH
37282: LD_VAR 0 8
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PPUSH
37291: CALL 69432 0 2
37295: ST_TO_ADDR
// continue ;
37296: GO 37219
// end ; if result [ result ] [ 2 ] <= tmp then
37298: LD_VAR 0 5
37302: PUSH
37303: LD_VAR 0 5
37307: ARRAY
37308: PUSH
37309: LD_INT 2
37311: ARRAY
37312: PUSH
37313: LD_VAR 0 8
37317: LESSEQUAL
37318: IFFALSE 37351
// result := Join ( result , [ i , tmp ] ) else
37320: LD_ADDR_VAR 0 5
37324: PUSH
37325: LD_VAR 0 5
37329: PPUSH
37330: LD_VAR 0 6
37334: PUSH
37335: LD_VAR 0 8
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PPUSH
37344: CALL 69432 0 2
37348: ST_TO_ADDR
37349: GO 37436
// begin for j := 1 to Count ( result ) do
37351: LD_ADDR_VAR 0 7
37355: PUSH
37356: DOUBLE
37357: LD_INT 1
37359: DEC
37360: ST_TO_ADDR
37361: LD_VAR 0 5
37365: PPUSH
37366: CALL 33832 0 1
37370: PUSH
37371: FOR_TO
37372: IFFALSE 37434
// begin if tmp < result [ j ] [ 2 ] then
37374: LD_VAR 0 8
37378: PUSH
37379: LD_VAR 0 5
37383: PUSH
37384: LD_VAR 0 7
37388: ARRAY
37389: PUSH
37390: LD_INT 2
37392: ARRAY
37393: LESS
37394: IFFALSE 37432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37396: LD_ADDR_VAR 0 5
37400: PUSH
37401: LD_VAR 0 5
37405: PPUSH
37406: LD_VAR 0 7
37410: PPUSH
37411: LD_VAR 0 6
37415: PUSH
37416: LD_VAR 0 8
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL_OW 2
37429: ST_TO_ADDR
// break ;
37430: GO 37434
// end ; end ;
37432: GO 37371
37434: POP
37435: POP
// end ; end ;
37436: GO 37219
37438: POP
37439: POP
// if result and not asc then
37440: LD_VAR 0 5
37444: PUSH
37445: LD_VAR 0 3
37449: NOT
37450: AND
37451: IFFALSE 37468
// result := ReverseArray ( result ) ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_VAR 0 5
37462: PPUSH
37463: CALL 64708 0 1
37467: ST_TO_ADDR
// tmp := [ ] ;
37468: LD_ADDR_VAR 0 8
37472: PUSH
37473: EMPTY
37474: ST_TO_ADDR
// if mode then
37475: LD_VAR 0 4
37479: IFFALSE 37543
// begin for i := 1 to result do
37481: LD_ADDR_VAR 0 6
37485: PUSH
37486: DOUBLE
37487: LD_INT 1
37489: DEC
37490: ST_TO_ADDR
37491: LD_VAR 0 5
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37531
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37499: LD_ADDR_VAR 0 8
37503: PUSH
37504: LD_VAR 0 8
37508: PPUSH
37509: LD_VAR 0 5
37513: PUSH
37514: LD_VAR 0 6
37518: ARRAY
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: CALL 69432 0 2
37528: ST_TO_ADDR
37529: GO 37496
37531: POP
37532: POP
// result := tmp ;
37533: LD_ADDR_VAR 0 5
37537: PUSH
37538: LD_VAR 0 8
37542: ST_TO_ADDR
// end ; end ;
37543: LD_VAR 0 5
37547: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
// if not list then
37554: LD_VAR 0 3
37558: NOT
37559: IFFALSE 37563
// exit ;
37561: GO 37951
// result := [ ] ;
37563: LD_ADDR_VAR 0 6
37567: PUSH
37568: EMPTY
37569: ST_TO_ADDR
// for i in list do
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: LD_VAR 0 3
37579: PUSH
37580: FOR_IN
37581: IFFALSE 37783
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37583: LD_ADDR_VAR 0 9
37587: PUSH
37588: LD_VAR 0 7
37592: PPUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_VAR 0 2
37602: PPUSH
37603: CALL_OW 297
37607: ST_TO_ADDR
// if not result then
37608: LD_VAR 0 6
37612: NOT
37613: IFFALSE 37639
// result := [ [ i , tmp ] ] else
37615: LD_ADDR_VAR 0 6
37619: PUSH
37620: LD_VAR 0 7
37624: PUSH
37625: LD_VAR 0 9
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: ST_TO_ADDR
37637: GO 37781
// begin if result [ result ] [ 2 ] < tmp then
37639: LD_VAR 0 6
37643: PUSH
37644: LD_VAR 0 6
37648: ARRAY
37649: PUSH
37650: LD_INT 2
37652: ARRAY
37653: PUSH
37654: LD_VAR 0 9
37658: LESS
37659: IFFALSE 37701
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37661: LD_ADDR_VAR 0 6
37665: PUSH
37666: LD_VAR 0 6
37670: PPUSH
37671: LD_VAR 0 6
37675: PUSH
37676: LD_INT 1
37678: PLUS
37679: PPUSH
37680: LD_VAR 0 7
37684: PUSH
37685: LD_VAR 0 9
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PPUSH
37694: CALL_OW 2
37698: ST_TO_ADDR
37699: GO 37781
// for j = 1 to result do
37701: LD_ADDR_VAR 0 8
37705: PUSH
37706: DOUBLE
37707: LD_INT 1
37709: DEC
37710: ST_TO_ADDR
37711: LD_VAR 0 6
37715: PUSH
37716: FOR_TO
37717: IFFALSE 37779
// begin if tmp < result [ j ] [ 2 ] then
37719: LD_VAR 0 9
37723: PUSH
37724: LD_VAR 0 6
37728: PUSH
37729: LD_VAR 0 8
37733: ARRAY
37734: PUSH
37735: LD_INT 2
37737: ARRAY
37738: LESS
37739: IFFALSE 37777
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37741: LD_ADDR_VAR 0 6
37745: PUSH
37746: LD_VAR 0 6
37750: PPUSH
37751: LD_VAR 0 8
37755: PPUSH
37756: LD_VAR 0 7
37760: PUSH
37761: LD_VAR 0 9
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PPUSH
37770: CALL_OW 2
37774: ST_TO_ADDR
// break ;
37775: GO 37779
// end ; end ;
37777: GO 37716
37779: POP
37780: POP
// end ; end ;
37781: GO 37580
37783: POP
37784: POP
// if result and not asc then
37785: LD_VAR 0 6
37789: PUSH
37790: LD_VAR 0 4
37794: NOT
37795: AND
37796: IFFALSE 37871
// begin tmp := result ;
37798: LD_ADDR_VAR 0 9
37802: PUSH
37803: LD_VAR 0 6
37807: ST_TO_ADDR
// for i = tmp downto 1 do
37808: LD_ADDR_VAR 0 7
37812: PUSH
37813: DOUBLE
37814: LD_VAR 0 9
37818: INC
37819: ST_TO_ADDR
37820: LD_INT 1
37822: PUSH
37823: FOR_DOWNTO
37824: IFFALSE 37869
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37826: LD_ADDR_VAR 0 6
37830: PUSH
37831: LD_VAR 0 6
37835: PPUSH
37836: LD_VAR 0 9
37840: PUSH
37841: LD_VAR 0 7
37845: MINUS
37846: PUSH
37847: LD_INT 1
37849: PLUS
37850: PPUSH
37851: LD_VAR 0 9
37855: PUSH
37856: LD_VAR 0 7
37860: ARRAY
37861: PPUSH
37862: CALL_OW 1
37866: ST_TO_ADDR
37867: GO 37823
37869: POP
37870: POP
// end ; tmp := [ ] ;
37871: LD_ADDR_VAR 0 9
37875: PUSH
37876: EMPTY
37877: ST_TO_ADDR
// if mode then
37878: LD_VAR 0 5
37882: IFFALSE 37951
// begin for i = 1 to result do
37884: LD_ADDR_VAR 0 7
37888: PUSH
37889: DOUBLE
37890: LD_INT 1
37892: DEC
37893: ST_TO_ADDR
37894: LD_VAR 0 6
37898: PUSH
37899: FOR_TO
37900: IFFALSE 37939
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: LD_VAR 0 9
37911: PPUSH
37912: LD_VAR 0 7
37916: PPUSH
37917: LD_VAR 0 6
37921: PUSH
37922: LD_VAR 0 7
37926: ARRAY
37927: PUSH
37928: LD_INT 1
37930: ARRAY
37931: PPUSH
37932: CALL_OW 1
37936: ST_TO_ADDR
37937: GO 37899
37939: POP
37940: POP
// result := tmp ;
37941: LD_ADDR_VAR 0 6
37945: PUSH
37946: LD_VAR 0 9
37950: ST_TO_ADDR
// end ; end ;
37951: LD_VAR 0 6
37955: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37964: LD_ADDR_VAR 0 5
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// if not x or not y then
37986: LD_VAR 0 2
37990: NOT
37991: PUSH
37992: LD_VAR 0 3
37996: NOT
37997: OR
37998: IFFALSE 38002
// exit ;
38000: GO 39652
// if not range then
38002: LD_VAR 0 4
38006: NOT
38007: IFFALSE 38017
// range := 10 ;
38009: LD_ADDR_VAR 0 4
38013: PUSH
38014: LD_INT 10
38016: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38017: LD_ADDR_VAR 0 8
38021: PUSH
38022: LD_INT 81
38024: PUSH
38025: LD_VAR 0 1
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 92
38036: PUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 3
38046: PUSH
38047: LD_VAR 0 4
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: LD_INT 21
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: PPUSH
38080: CALL_OW 69
38084: ST_TO_ADDR
// if not tmp then
38085: LD_VAR 0 8
38089: NOT
38090: IFFALSE 38094
// exit ;
38092: GO 39652
// for i in tmp do
38094: LD_ADDR_VAR 0 6
38098: PUSH
38099: LD_VAR 0 8
38103: PUSH
38104: FOR_IN
38105: IFFALSE 39627
// begin points := [ 0 , 0 , 0 ] ;
38107: LD_ADDR_VAR 0 9
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// bpoints := 1 ;
38126: LD_ADDR_VAR 0 10
38130: PUSH
38131: LD_INT 1
38133: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38134: LD_VAR 0 6
38138: PPUSH
38139: CALL_OW 247
38143: PUSH
38144: LD_INT 1
38146: DOUBLE
38147: EQUAL
38148: IFTRUE 38152
38150: GO 38730
38152: POP
// begin if GetClass ( i ) = 1 then
38153: LD_VAR 0 6
38157: PPUSH
38158: CALL_OW 257
38162: PUSH
38163: LD_INT 1
38165: EQUAL
38166: IFFALSE 38187
// points := [ 10 , 5 , 3 ] ;
38168: LD_ADDR_VAR 0 9
38172: PUSH
38173: LD_INT 10
38175: PUSH
38176: LD_INT 5
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38187: LD_VAR 0 6
38191: PPUSH
38192: CALL_OW 257
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: IN
38211: IFFALSE 38232
// points := [ 3 , 2 , 1 ] ;
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38232: LD_VAR 0 6
38236: PPUSH
38237: CALL_OW 257
38241: PUSH
38242: LD_INT 5
38244: EQUAL
38245: IFFALSE 38266
// points := [ 130 , 5 , 2 ] ;
38247: LD_ADDR_VAR 0 9
38251: PUSH
38252: LD_INT 130
38254: PUSH
38255: LD_INT 5
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38266: LD_VAR 0 6
38270: PPUSH
38271: CALL_OW 257
38275: PUSH
38276: LD_INT 8
38278: EQUAL
38279: IFFALSE 38300
// points := [ 35 , 35 , 30 ] ;
38281: LD_ADDR_VAR 0 9
38285: PUSH
38286: LD_INT 35
38288: PUSH
38289: LD_INT 35
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38300: LD_VAR 0 6
38304: PPUSH
38305: CALL_OW 257
38309: PUSH
38310: LD_INT 9
38312: EQUAL
38313: IFFALSE 38334
// points := [ 20 , 55 , 40 ] ;
38315: LD_ADDR_VAR 0 9
38319: PUSH
38320: LD_INT 20
38322: PUSH
38323: LD_INT 55
38325: PUSH
38326: LD_INT 40
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38334: LD_VAR 0 6
38338: PPUSH
38339: CALL_OW 257
38343: PUSH
38344: LD_INT 12
38346: PUSH
38347: LD_INT 16
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: IN
38354: IFFALSE 38375
// points := [ 5 , 3 , 2 ] ;
38356: LD_ADDR_VAR 0 9
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38375: LD_VAR 0 6
38379: PPUSH
38380: CALL_OW 257
38384: PUSH
38385: LD_INT 17
38387: EQUAL
38388: IFFALSE 38409
// points := [ 100 , 50 , 75 ] ;
38390: LD_ADDR_VAR 0 9
38394: PUSH
38395: LD_INT 100
38397: PUSH
38398: LD_INT 50
38400: PUSH
38401: LD_INT 75
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38409: LD_VAR 0 6
38413: PPUSH
38414: CALL_OW 257
38418: PUSH
38419: LD_INT 15
38421: EQUAL
38422: IFFALSE 38443
// points := [ 10 , 5 , 3 ] ;
38424: LD_ADDR_VAR 0 9
38428: PUSH
38429: LD_INT 10
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL_OW 257
38452: PUSH
38453: LD_INT 14
38455: EQUAL
38456: IFFALSE 38477
// points := [ 10 , 0 , 0 ] ;
38458: LD_ADDR_VAR 0 9
38462: PUSH
38463: LD_INT 10
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38477: LD_VAR 0 6
38481: PPUSH
38482: CALL_OW 257
38486: PUSH
38487: LD_INT 11
38489: EQUAL
38490: IFFALSE 38511
// points := [ 30 , 10 , 5 ] ;
38492: LD_ADDR_VAR 0 9
38496: PUSH
38497: LD_INT 30
38499: PUSH
38500: LD_INT 10
38502: PUSH
38503: LD_INT 5
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38511: LD_VAR 0 1
38515: PPUSH
38516: LD_INT 5
38518: PPUSH
38519: CALL_OW 321
38523: PUSH
38524: LD_INT 2
38526: EQUAL
38527: IFFALSE 38544
// bpoints := bpoints * 1.8 ;
38529: LD_ADDR_VAR 0 10
38533: PUSH
38534: LD_VAR 0 10
38538: PUSH
38539: LD_REAL  1.80000000000000E+0000
38542: MUL
38543: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38544: LD_VAR 0 6
38548: PPUSH
38549: CALL_OW 257
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 3
38562: PUSH
38563: LD_INT 4
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: IN
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_INT 51
38580: PPUSH
38581: CALL_OW 321
38585: PUSH
38586: LD_INT 2
38588: EQUAL
38589: AND
38590: IFFALSE 38607
// bpoints := bpoints * 1.2 ;
38592: LD_ADDR_VAR 0 10
38596: PUSH
38597: LD_VAR 0 10
38601: PUSH
38602: LD_REAL  1.20000000000000E+0000
38605: MUL
38606: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38607: LD_VAR 0 6
38611: PPUSH
38612: CALL_OW 257
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: LD_INT 7
38622: PUSH
38623: LD_INT 9
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: IN
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_INT 52
38639: PPUSH
38640: CALL_OW 321
38644: PUSH
38645: LD_INT 2
38647: EQUAL
38648: AND
38649: IFFALSE 38666
// bpoints := bpoints * 1.5 ;
38651: LD_ADDR_VAR 0 10
38655: PUSH
38656: LD_VAR 0 10
38660: PUSH
38661: LD_REAL  1.50000000000000E+0000
38664: MUL
38665: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38666: LD_VAR 0 1
38670: PPUSH
38671: LD_INT 66
38673: PPUSH
38674: CALL_OW 321
38678: PUSH
38679: LD_INT 2
38681: EQUAL
38682: IFFALSE 38699
// bpoints := bpoints * 1.1 ;
38684: LD_ADDR_VAR 0 10
38688: PUSH
38689: LD_VAR 0 10
38693: PUSH
38694: LD_REAL  1.10000000000000E+0000
38697: MUL
38698: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38699: LD_ADDR_VAR 0 10
38703: PUSH
38704: LD_VAR 0 10
38708: PUSH
38709: LD_VAR 0 6
38713: PPUSH
38714: LD_INT 1
38716: PPUSH
38717: CALL_OW 259
38721: PUSH
38722: LD_REAL  1.15000000000000E+0000
38725: MUL
38726: MUL
38727: ST_TO_ADDR
// end ; unit_vehicle :
38728: GO 39556
38730: LD_INT 2
38732: DOUBLE
38733: EQUAL
38734: IFTRUE 38738
38736: GO 39544
38738: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38739: LD_VAR 0 6
38743: PPUSH
38744: CALL_OW 264
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 42
38754: PUSH
38755: LD_INT 24
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: IN
38763: IFFALSE 38784
// points := [ 25 , 5 , 3 ] ;
38765: LD_ADDR_VAR 0 9
38769: PUSH
38770: LD_INT 25
38772: PUSH
38773: LD_INT 5
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38784: LD_VAR 0 6
38788: PPUSH
38789: CALL_OW 264
38793: PUSH
38794: LD_INT 4
38796: PUSH
38797: LD_INT 43
38799: PUSH
38800: LD_INT 25
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: IN
38808: IFFALSE 38829
// points := [ 40 , 15 , 5 ] ;
38810: LD_ADDR_VAR 0 9
38814: PUSH
38815: LD_INT 40
38817: PUSH
38818: LD_INT 15
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38829: LD_VAR 0 6
38833: PPUSH
38834: CALL_OW 264
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: LD_INT 23
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: IN
38849: IFFALSE 38870
// points := [ 7 , 25 , 8 ] ;
38851: LD_ADDR_VAR 0 9
38855: PUSH
38856: LD_INT 7
38858: PUSH
38859: LD_INT 25
38861: PUSH
38862: LD_INT 8
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38870: LD_VAR 0 6
38874: PPUSH
38875: CALL_OW 264
38879: PUSH
38880: LD_INT 5
38882: PUSH
38883: LD_INT 27
38885: PUSH
38886: LD_INT 44
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: IN
38894: IFFALSE 38915
// points := [ 14 , 50 , 16 ] ;
38896: LD_ADDR_VAR 0 9
38900: PUSH
38901: LD_INT 14
38903: PUSH
38904: LD_INT 50
38906: PUSH
38907: LD_INT 16
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38915: LD_VAR 0 6
38919: PPUSH
38920: CALL_OW 264
38924: PUSH
38925: LD_INT 6
38927: PUSH
38928: LD_INT 46
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: IN
38935: IFFALSE 38956
// points := [ 32 , 120 , 70 ] ;
38937: LD_ADDR_VAR 0 9
38941: PUSH
38942: LD_INT 32
38944: PUSH
38945: LD_INT 120
38947: PUSH
38948: LD_INT 70
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38956: LD_VAR 0 6
38960: PPUSH
38961: CALL_OW 264
38965: PUSH
38966: LD_INT 7
38968: PUSH
38969: LD_INT 28
38971: PUSH
38972: LD_INT 45
38974: PUSH
38975: LD_INT 92
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: IN
38984: IFFALSE 39005
// points := [ 35 , 20 , 45 ] ;
38986: LD_ADDR_VAR 0 9
38990: PUSH
38991: LD_INT 35
38993: PUSH
38994: LD_INT 20
38996: PUSH
38997: LD_INT 45
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39005: LD_VAR 0 6
39009: PPUSH
39010: CALL_OW 264
39014: PUSH
39015: LD_INT 47
39017: PUSH
39018: EMPTY
39019: LIST
39020: IN
39021: IFFALSE 39042
// points := [ 67 , 45 , 75 ] ;
39023: LD_ADDR_VAR 0 9
39027: PUSH
39028: LD_INT 67
39030: PUSH
39031: LD_INT 45
39033: PUSH
39034: LD_INT 75
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39042: LD_VAR 0 6
39046: PPUSH
39047: CALL_OW 264
39051: PUSH
39052: LD_INT 26
39054: PUSH
39055: EMPTY
39056: LIST
39057: IN
39058: IFFALSE 39079
// points := [ 120 , 30 , 80 ] ;
39060: LD_ADDR_VAR 0 9
39064: PUSH
39065: LD_INT 120
39067: PUSH
39068: LD_INT 30
39070: PUSH
39071: LD_INT 80
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39079: LD_VAR 0 6
39083: PPUSH
39084: CALL_OW 264
39088: PUSH
39089: LD_INT 22
39091: PUSH
39092: EMPTY
39093: LIST
39094: IN
39095: IFFALSE 39116
// points := [ 40 , 1 , 1 ] ;
39097: LD_ADDR_VAR 0 9
39101: PUSH
39102: LD_INT 40
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39116: LD_VAR 0 6
39120: PPUSH
39121: CALL_OW 264
39125: PUSH
39126: LD_INT 29
39128: PUSH
39129: EMPTY
39130: LIST
39131: IN
39132: IFFALSE 39153
// points := [ 70 , 200 , 400 ] ;
39134: LD_ADDR_VAR 0 9
39138: PUSH
39139: LD_INT 70
39141: PUSH
39142: LD_INT 200
39144: PUSH
39145: LD_INT 400
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39153: LD_VAR 0 6
39157: PPUSH
39158: CALL_OW 264
39162: PUSH
39163: LD_INT 14
39165: PUSH
39166: LD_INT 53
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: IN
39173: IFFALSE 39194
// points := [ 40 , 10 , 20 ] ;
39175: LD_ADDR_VAR 0 9
39179: PUSH
39180: LD_INT 40
39182: PUSH
39183: LD_INT 10
39185: PUSH
39186: LD_INT 20
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39194: LD_VAR 0 6
39198: PPUSH
39199: CALL_OW 264
39203: PUSH
39204: LD_INT 9
39206: PUSH
39207: EMPTY
39208: LIST
39209: IN
39210: IFFALSE 39231
// points := [ 5 , 70 , 20 ] ;
39212: LD_ADDR_VAR 0 9
39216: PUSH
39217: LD_INT 5
39219: PUSH
39220: LD_INT 70
39222: PUSH
39223: LD_INT 20
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39231: LD_VAR 0 6
39235: PPUSH
39236: CALL_OW 264
39240: PUSH
39241: LD_INT 10
39243: PUSH
39244: EMPTY
39245: LIST
39246: IN
39247: IFFALSE 39268
// points := [ 35 , 110 , 70 ] ;
39249: LD_ADDR_VAR 0 9
39253: PUSH
39254: LD_INT 35
39256: PUSH
39257: LD_INT 110
39259: PUSH
39260: LD_INT 70
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39268: LD_VAR 0 6
39272: PPUSH
39273: CALL_OW 265
39277: PUSH
39278: LD_INT 25
39280: EQUAL
39281: IFFALSE 39302
// points := [ 80 , 65 , 100 ] ;
39283: LD_ADDR_VAR 0 9
39287: PUSH
39288: LD_INT 80
39290: PUSH
39291: LD_INT 65
39293: PUSH
39294: LD_INT 100
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39302: LD_VAR 0 6
39306: PPUSH
39307: CALL_OW 263
39311: PUSH
39312: LD_INT 1
39314: EQUAL
39315: IFFALSE 39350
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39317: LD_ADDR_VAR 0 10
39321: PUSH
39322: LD_VAR 0 10
39326: PUSH
39327: LD_VAR 0 6
39331: PPUSH
39332: CALL_OW 311
39336: PPUSH
39337: LD_INT 3
39339: PPUSH
39340: CALL_OW 259
39344: PUSH
39345: LD_INT 4
39347: MUL
39348: MUL
39349: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39350: LD_VAR 0 6
39354: PPUSH
39355: CALL_OW 263
39359: PUSH
39360: LD_INT 2
39362: EQUAL
39363: IFFALSE 39414
// begin j := IsControledBy ( i ) ;
39365: LD_ADDR_VAR 0 7
39369: PUSH
39370: LD_VAR 0 6
39374: PPUSH
39375: CALL_OW 312
39379: ST_TO_ADDR
// if j then
39380: LD_VAR 0 7
39384: IFFALSE 39414
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39386: LD_ADDR_VAR 0 10
39390: PUSH
39391: LD_VAR 0 10
39395: PUSH
39396: LD_VAR 0 7
39400: PPUSH
39401: LD_INT 3
39403: PPUSH
39404: CALL_OW 259
39408: PUSH
39409: LD_INT 3
39411: MUL
39412: MUL
39413: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39414: LD_VAR 0 6
39418: PPUSH
39419: CALL_OW 264
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: LD_INT 6
39429: PUSH
39430: LD_INT 46
39432: PUSH
39433: LD_INT 44
39435: PUSH
39436: LD_INT 47
39438: PUSH
39439: LD_INT 45
39441: PUSH
39442: LD_INT 28
39444: PUSH
39445: LD_INT 7
39447: PUSH
39448: LD_INT 27
39450: PUSH
39451: LD_INT 29
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: IN
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: LD_INT 52
39474: PPUSH
39475: CALL_OW 321
39479: PUSH
39480: LD_INT 2
39482: EQUAL
39483: AND
39484: IFFALSE 39501
// bpoints := bpoints * 1.2 ;
39486: LD_ADDR_VAR 0 10
39490: PUSH
39491: LD_VAR 0 10
39495: PUSH
39496: LD_REAL  1.20000000000000E+0000
39499: MUL
39500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39501: LD_VAR 0 6
39505: PPUSH
39506: CALL_OW 264
39510: PUSH
39511: LD_INT 6
39513: PUSH
39514: LD_INT 46
39516: PUSH
39517: LD_INT 47
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: IN
39525: IFFALSE 39542
// bpoints := bpoints * 1.2 ;
39527: LD_ADDR_VAR 0 10
39531: PUSH
39532: LD_VAR 0 10
39536: PUSH
39537: LD_REAL  1.20000000000000E+0000
39540: MUL
39541: ST_TO_ADDR
// end ; unit_building :
39542: GO 39556
39544: LD_INT 3
39546: DOUBLE
39547: EQUAL
39548: IFTRUE 39552
39550: GO 39555
39552: POP
// ; end ;
39553: GO 39556
39555: POP
// for j = 1 to 3 do
39556: LD_ADDR_VAR 0 7
39560: PUSH
39561: DOUBLE
39562: LD_INT 1
39564: DEC
39565: ST_TO_ADDR
39566: LD_INT 3
39568: PUSH
39569: FOR_TO
39570: IFFALSE 39623
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39572: LD_ADDR_VAR 0 5
39576: PUSH
39577: LD_VAR 0 5
39581: PPUSH
39582: LD_VAR 0 7
39586: PPUSH
39587: LD_VAR 0 5
39591: PUSH
39592: LD_VAR 0 7
39596: ARRAY
39597: PUSH
39598: LD_VAR 0 9
39602: PUSH
39603: LD_VAR 0 7
39607: ARRAY
39608: PUSH
39609: LD_VAR 0 10
39613: MUL
39614: PLUS
39615: PPUSH
39616: CALL_OW 1
39620: ST_TO_ADDR
39621: GO 39569
39623: POP
39624: POP
// end ;
39625: GO 38104
39627: POP
39628: POP
// result := Replace ( result , 4 , tmp ) ;
39629: LD_ADDR_VAR 0 5
39633: PUSH
39634: LD_VAR 0 5
39638: PPUSH
39639: LD_INT 4
39641: PPUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: CALL_OW 1
39651: ST_TO_ADDR
// end ;
39652: LD_VAR 0 5
39656: RET
// export function DangerAtRange ( unit , range ) ; begin
39657: LD_INT 0
39659: PPUSH
// if not unit then
39660: LD_VAR 0 1
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 39714
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 255
39683: PPUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: CALL_OW 250
39693: PPUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 251
39703: PPUSH
39704: LD_VAR 0 2
39708: PPUSH
39709: CALL 37956 0 4
39713: ST_TO_ADDR
// end ;
39714: LD_VAR 0 3
39718: RET
// export function DangerInArea ( side , area ) ; begin
39719: LD_INT 0
39721: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_VAR 0 2
39731: PPUSH
39732: LD_INT 81
39734: PUSH
39735: LD_VAR 0 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PPUSH
39744: CALL_OW 70
39748: ST_TO_ADDR
// end ;
39749: LD_VAR 0 3
39753: RET
// export function IsExtension ( b ) ; begin
39754: LD_INT 0
39756: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39757: LD_ADDR_VAR 0 2
39761: PUSH
39762: LD_VAR 0 1
39766: PUSH
39767: LD_INT 23
39769: PUSH
39770: LD_INT 20
39772: PUSH
39773: LD_INT 22
39775: PUSH
39776: LD_INT 17
39778: PUSH
39779: LD_INT 24
39781: PUSH
39782: LD_INT 21
39784: PUSH
39785: LD_INT 19
39787: PUSH
39788: LD_INT 16
39790: PUSH
39791: LD_INT 25
39793: PUSH
39794: LD_INT 18
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: IN
39809: ST_TO_ADDR
// end ;
39810: LD_VAR 0 2
39814: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39815: LD_INT 0
39817: PPUSH
39818: PPUSH
39819: PPUSH
// result := [ ] ;
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: EMPTY
39826: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39827: LD_ADDR_VAR 0 5
39831: PUSH
39832: LD_VAR 0 2
39836: PPUSH
39837: LD_INT 21
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PPUSH
39847: CALL_OW 70
39851: ST_TO_ADDR
// if not tmp then
39852: LD_VAR 0 5
39856: NOT
39857: IFFALSE 39861
// exit ;
39859: GO 39925
// if checkLink then
39861: LD_VAR 0 3
39865: IFFALSE 39915
// begin for i in tmp do
39867: LD_ADDR_VAR 0 6
39871: PUSH
39872: LD_VAR 0 5
39876: PUSH
39877: FOR_IN
39878: IFFALSE 39913
// if GetBase ( i ) <> base then
39880: LD_VAR 0 6
39884: PPUSH
39885: CALL_OW 274
39889: PUSH
39890: LD_VAR 0 1
39894: NONEQUAL
39895: IFFALSE 39911
// ComLinkToBase ( base , i ) ;
39897: LD_VAR 0 1
39901: PPUSH
39902: LD_VAR 0 6
39906: PPUSH
39907: CALL_OW 169
39911: GO 39877
39913: POP
39914: POP
// end ; result := tmp ;
39915: LD_ADDR_VAR 0 4
39919: PUSH
39920: LD_VAR 0 5
39924: ST_TO_ADDR
// end ;
39925: LD_VAR 0 4
39929: RET
// export function ComComplete ( units , b ) ; var i ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
// if not units then
39934: LD_VAR 0 1
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40033
// for i in units do
39943: LD_ADDR_VAR 0 4
39947: PUSH
39948: LD_VAR 0 1
39952: PUSH
39953: FOR_IN
39954: IFFALSE 40031
// if BuildingStatus ( b ) = bs_build then
39956: LD_VAR 0 2
39960: PPUSH
39961: CALL_OW 461
39965: PUSH
39966: LD_INT 1
39968: EQUAL
39969: IFFALSE 40029
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39971: LD_VAR 0 4
39975: PPUSH
39976: LD_STRING h
39978: PUSH
39979: LD_VAR 0 2
39983: PPUSH
39984: CALL_OW 250
39988: PUSH
39989: LD_VAR 0 2
39993: PPUSH
39994: CALL_OW 251
39998: PUSH
39999: LD_VAR 0 2
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: PPUSH
40025: CALL_OW 446
40029: GO 39953
40031: POP
40032: POP
// end ;
40033: LD_VAR 0 3
40037: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40046: LD_VAR 0 1
40050: NOT
40051: PUSH
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 263
40061: PUSH
40062: LD_INT 2
40064: NONEQUAL
40065: OR
40066: IFFALSE 40070
// exit ;
40068: GO 40386
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40070: LD_ADDR_VAR 0 6
40074: PUSH
40075: LD_INT 22
40077: PUSH
40078: LD_VAR 0 1
40082: PPUSH
40083: CALL_OW 255
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 30
40097: PUSH
40098: LD_INT 36
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 34
40107: PUSH
40108: LD_INT 31
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 69
40128: ST_TO_ADDR
// if not tmp then
40129: LD_VAR 0 6
40133: NOT
40134: IFFALSE 40138
// exit ;
40136: GO 40386
// result := [ ] ;
40138: LD_ADDR_VAR 0 2
40142: PUSH
40143: EMPTY
40144: ST_TO_ADDR
// for i in tmp do
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_VAR 0 6
40154: PUSH
40155: FOR_IN
40156: IFFALSE 40227
// begin t := UnitsInside ( i ) ;
40158: LD_ADDR_VAR 0 4
40162: PUSH
40163: LD_VAR 0 3
40167: PPUSH
40168: CALL_OW 313
40172: ST_TO_ADDR
// if t then
40173: LD_VAR 0 4
40177: IFFALSE 40225
// for j in t do
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 4
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40223
// result := Replace ( result , result + 1 , j ) ;
40192: LD_ADDR_VAR 0 2
40196: PUSH
40197: LD_VAR 0 2
40201: PPUSH
40202: LD_VAR 0 2
40206: PUSH
40207: LD_INT 1
40209: PLUS
40210: PPUSH
40211: LD_VAR 0 7
40215: PPUSH
40216: CALL_OW 1
40220: ST_TO_ADDR
40221: GO 40189
40223: POP
40224: POP
// end ;
40225: GO 40155
40227: POP
40228: POP
// if not result then
40229: LD_VAR 0 2
40233: NOT
40234: IFFALSE 40238
// exit ;
40236: GO 40386
// mech := result [ 1 ] ;
40238: LD_ADDR_VAR 0 5
40242: PUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_INT 1
40250: ARRAY
40251: ST_TO_ADDR
// if result > 1 then
40252: LD_VAR 0 2
40256: PUSH
40257: LD_INT 1
40259: GREATER
40260: IFFALSE 40372
// begin for i = 2 to result do
40262: LD_ADDR_VAR 0 3
40266: PUSH
40267: DOUBLE
40268: LD_INT 2
40270: DEC
40271: ST_TO_ADDR
40272: LD_VAR 0 2
40276: PUSH
40277: FOR_TO
40278: IFFALSE 40370
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40280: LD_ADDR_VAR 0 4
40284: PUSH
40285: LD_VAR 0 2
40289: PUSH
40290: LD_VAR 0 3
40294: ARRAY
40295: PPUSH
40296: LD_INT 3
40298: PPUSH
40299: CALL_OW 259
40303: PUSH
40304: LD_VAR 0 2
40308: PUSH
40309: LD_VAR 0 3
40313: ARRAY
40314: PPUSH
40315: CALL_OW 432
40319: MINUS
40320: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40321: LD_VAR 0 4
40325: PUSH
40326: LD_VAR 0 5
40330: PPUSH
40331: LD_INT 3
40333: PPUSH
40334: CALL_OW 259
40338: PUSH
40339: LD_VAR 0 5
40343: PPUSH
40344: CALL_OW 432
40348: MINUS
40349: GREATEREQUAL
40350: IFFALSE 40368
// mech := result [ i ] ;
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: LD_VAR 0 2
40361: PUSH
40362: LD_VAR 0 3
40366: ARRAY
40367: ST_TO_ADDR
// end ;
40368: GO 40277
40370: POP
40371: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40372: LD_VAR 0 1
40376: PPUSH
40377: LD_VAR 0 5
40381: PPUSH
40382: CALL_OW 135
// end ;
40386: LD_VAR 0 2
40390: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40391: LD_INT 0
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
// result := [ ] ;
40406: LD_ADDR_VAR 0 7
40410: PUSH
40411: EMPTY
40412: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 266
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: IN
40433: NOT
40434: IFFALSE 40438
// exit ;
40436: GO 42072
// if name then
40438: LD_VAR 0 3
40442: IFFALSE 40458
// SetBName ( base_dep , name ) ;
40444: LD_VAR 0 1
40448: PPUSH
40449: LD_VAR 0 3
40453: PPUSH
40454: CALL_OW 500
// base := GetBase ( base_dep ) ;
40458: LD_ADDR_VAR 0 15
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 274
40472: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40473: LD_ADDR_VAR 0 16
40477: PUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: CALL_OW 255
40487: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40488: LD_ADDR_VAR 0 17
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 248
40502: ST_TO_ADDR
// if sources then
40503: LD_VAR 0 5
40507: IFFALSE 40554
// for i = 1 to 3 do
40509: LD_ADDR_VAR 0 8
40513: PUSH
40514: DOUBLE
40515: LD_INT 1
40517: DEC
40518: ST_TO_ADDR
40519: LD_INT 3
40521: PUSH
40522: FOR_TO
40523: IFFALSE 40552
// AddResourceType ( base , i , sources [ i ] ) ;
40525: LD_VAR 0 15
40529: PPUSH
40530: LD_VAR 0 8
40534: PPUSH
40535: LD_VAR 0 5
40539: PUSH
40540: LD_VAR 0 8
40544: ARRAY
40545: PPUSH
40546: CALL_OW 276
40550: GO 40522
40552: POP
40553: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40554: LD_ADDR_VAR 0 18
40558: PUSH
40559: LD_VAR 0 15
40563: PPUSH
40564: LD_VAR 0 2
40568: PPUSH
40569: LD_INT 1
40571: PPUSH
40572: CALL 39815 0 3
40576: ST_TO_ADDR
// InitHc ;
40577: CALL_OW 19
// InitUc ;
40581: CALL_OW 18
// uc_side := side ;
40585: LD_ADDR_OWVAR 20
40589: PUSH
40590: LD_VAR 0 16
40594: ST_TO_ADDR
// uc_nation := nation ;
40595: LD_ADDR_OWVAR 21
40599: PUSH
40600: LD_VAR 0 17
40604: ST_TO_ADDR
// if buildings then
40605: LD_VAR 0 18
40609: IFFALSE 41931
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40611: LD_ADDR_VAR 0 19
40615: PUSH
40616: LD_VAR 0 18
40620: PPUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 30
40626: PUSH
40627: LD_INT 29
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 30
40636: PUSH
40637: LD_INT 30
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: PPUSH
40649: CALL_OW 72
40653: ST_TO_ADDR
// if tmp then
40654: LD_VAR 0 19
40658: IFFALSE 40706
// for i in tmp do
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 19
40669: PUSH
40670: FOR_IN
40671: IFFALSE 40704
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40673: LD_VAR 0 8
40677: PPUSH
40678: CALL_OW 250
40682: PPUSH
40683: LD_VAR 0 8
40687: PPUSH
40688: CALL_OW 251
40692: PPUSH
40693: LD_VAR 0 16
40697: PPUSH
40698: CALL_OW 441
40702: GO 40670
40704: POP
40705: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40706: LD_VAR 0 18
40710: PPUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 30
40716: PUSH
40717: LD_INT 32
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 30
40726: PUSH
40727: LD_INT 33
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: PPUSH
40739: CALL_OW 72
40743: IFFALSE 40831
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40745: LD_ADDR_VAR 0 8
40749: PUSH
40750: LD_VAR 0 18
40754: PPUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 30
40760: PUSH
40761: LD_INT 32
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 30
40770: PUSH
40771: LD_INT 33
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 72
40787: PUSH
40788: FOR_IN
40789: IFFALSE 40829
// begin if not GetBWeapon ( i ) then
40791: LD_VAR 0 8
40795: PPUSH
40796: CALL_OW 269
40800: NOT
40801: IFFALSE 40827
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40803: LD_VAR 0 8
40807: PPUSH
40808: LD_VAR 0 8
40812: PPUSH
40813: LD_VAR 0 2
40817: PPUSH
40818: CALL 42077 0 2
40822: PPUSH
40823: CALL_OW 431
// end ;
40827: GO 40788
40829: POP
40830: POP
// end ; for i = 1 to personel do
40831: LD_ADDR_VAR 0 8
40835: PUSH
40836: DOUBLE
40837: LD_INT 1
40839: DEC
40840: ST_TO_ADDR
40841: LD_VAR 0 6
40845: PUSH
40846: FOR_TO
40847: IFFALSE 41911
// begin if i > 4 then
40849: LD_VAR 0 8
40853: PUSH
40854: LD_INT 4
40856: GREATER
40857: IFFALSE 40861
// break ;
40859: GO 41911
// case i of 1 :
40861: LD_VAR 0 8
40865: PUSH
40866: LD_INT 1
40868: DOUBLE
40869: EQUAL
40870: IFTRUE 40874
40872: GO 40954
40874: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40875: LD_ADDR_VAR 0 12
40879: PUSH
40880: LD_VAR 0 18
40884: PPUSH
40885: LD_INT 22
40887: PUSH
40888: LD_VAR 0 16
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 58
40899: PUSH
40900: EMPTY
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 30
40908: PUSH
40909: LD_INT 32
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 30
40918: PUSH
40919: LD_INT 4
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 30
40928: PUSH
40929: LD_INT 5
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: PPUSH
40947: CALL_OW 72
40951: ST_TO_ADDR
40952: GO 41176
40954: LD_INT 2
40956: DOUBLE
40957: EQUAL
40958: IFTRUE 40962
40960: GO 41024
40962: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40963: LD_ADDR_VAR 0 12
40967: PUSH
40968: LD_VAR 0 18
40972: PPUSH
40973: LD_INT 22
40975: PUSH
40976: LD_VAR 0 16
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 30
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 30
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PPUSH
41017: CALL_OW 72
41021: ST_TO_ADDR
41022: GO 41176
41024: LD_INT 3
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41094
41032: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41033: LD_ADDR_VAR 0 12
41037: PUSH
41038: LD_VAR 0 18
41042: PPUSH
41043: LD_INT 22
41045: PUSH
41046: LD_VAR 0 16
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 30
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 30
41070: PUSH
41071: LD_INT 3
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PPUSH
41087: CALL_OW 72
41091: ST_TO_ADDR
41092: GO 41176
41094: LD_INT 4
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41102
41100: GO 41175
41102: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41103: LD_ADDR_VAR 0 12
41107: PUSH
41108: LD_VAR 0 18
41112: PPUSH
41113: LD_INT 22
41115: PUSH
41116: LD_VAR 0 16
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 30
41130: PUSH
41131: LD_INT 6
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 30
41140: PUSH
41141: LD_INT 7
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 30
41150: PUSH
41151: LD_INT 8
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PPUSH
41168: CALL_OW 72
41172: ST_TO_ADDR
41173: GO 41176
41175: POP
// if i = 1 then
41176: LD_VAR 0 8
41180: PUSH
41181: LD_INT 1
41183: EQUAL
41184: IFFALSE 41295
// begin tmp := [ ] ;
41186: LD_ADDR_VAR 0 19
41190: PUSH
41191: EMPTY
41192: ST_TO_ADDR
// for j in f do
41193: LD_ADDR_VAR 0 9
41197: PUSH
41198: LD_VAR 0 12
41202: PUSH
41203: FOR_IN
41204: IFFALSE 41277
// if GetBType ( j ) = b_bunker then
41206: LD_VAR 0 9
41210: PPUSH
41211: CALL_OW 266
41215: PUSH
41216: LD_INT 32
41218: EQUAL
41219: IFFALSE 41246
// tmp := Insert ( tmp , 1 , j ) else
41221: LD_ADDR_VAR 0 19
41225: PUSH
41226: LD_VAR 0 19
41230: PPUSH
41231: LD_INT 1
41233: PPUSH
41234: LD_VAR 0 9
41238: PPUSH
41239: CALL_OW 2
41243: ST_TO_ADDR
41244: GO 41275
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41246: LD_ADDR_VAR 0 19
41250: PUSH
41251: LD_VAR 0 19
41255: PPUSH
41256: LD_VAR 0 19
41260: PUSH
41261: LD_INT 1
41263: PLUS
41264: PPUSH
41265: LD_VAR 0 9
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
41275: GO 41203
41277: POP
41278: POP
// if tmp then
41279: LD_VAR 0 19
41283: IFFALSE 41295
// f := tmp ;
41285: LD_ADDR_VAR 0 12
41289: PUSH
41290: LD_VAR 0 19
41294: ST_TO_ADDR
// end ; x := personel [ i ] ;
41295: LD_ADDR_VAR 0 13
41299: PUSH
41300: LD_VAR 0 6
41304: PUSH
41305: LD_VAR 0 8
41309: ARRAY
41310: ST_TO_ADDR
// if x = - 1 then
41311: LD_VAR 0 13
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: EQUAL
41320: IFFALSE 41529
// begin for j in f do
41322: LD_ADDR_VAR 0 9
41326: PUSH
41327: LD_VAR 0 12
41331: PUSH
41332: FOR_IN
41333: IFFALSE 41525
// repeat InitHc ;
41335: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41339: LD_VAR 0 9
41343: PPUSH
41344: CALL_OW 266
41348: PUSH
41349: LD_INT 5
41351: EQUAL
41352: IFFALSE 41422
// begin if UnitsInside ( j ) < 3 then
41354: LD_VAR 0 9
41358: PPUSH
41359: CALL_OW 313
41363: PUSH
41364: LD_INT 3
41366: LESS
41367: IFFALSE 41403
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41369: LD_INT 0
41371: PPUSH
41372: LD_INT 5
41374: PUSH
41375: LD_INT 8
41377: PUSH
41378: LD_INT 9
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: PUSH
41386: LD_VAR 0 17
41390: ARRAY
41391: PPUSH
41392: LD_VAR 0 4
41396: PPUSH
41397: CALL_OW 380
41401: GO 41420
// PrepareHuman ( false , i , skill ) ;
41403: LD_INT 0
41405: PPUSH
41406: LD_VAR 0 8
41410: PPUSH
41411: LD_VAR 0 4
41415: PPUSH
41416: CALL_OW 380
// end else
41420: GO 41439
// PrepareHuman ( false , i , skill ) ;
41422: LD_INT 0
41424: PPUSH
41425: LD_VAR 0 8
41429: PPUSH
41430: LD_VAR 0 4
41434: PPUSH
41435: CALL_OW 380
// un := CreateHuman ;
41439: LD_ADDR_VAR 0 14
41443: PUSH
41444: CALL_OW 44
41448: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41449: LD_ADDR_VAR 0 7
41453: PUSH
41454: LD_VAR 0 7
41458: PPUSH
41459: LD_INT 1
41461: PPUSH
41462: LD_VAR 0 14
41466: PPUSH
41467: CALL_OW 2
41471: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41472: LD_VAR 0 14
41476: PPUSH
41477: LD_VAR 0 9
41481: PPUSH
41482: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41486: LD_VAR 0 9
41490: PPUSH
41491: CALL_OW 313
41495: PUSH
41496: LD_INT 6
41498: EQUAL
41499: PUSH
41500: LD_VAR 0 9
41504: PPUSH
41505: CALL_OW 266
41509: PUSH
41510: LD_INT 32
41512: PUSH
41513: LD_INT 31
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: IN
41520: OR
41521: IFFALSE 41335
41523: GO 41332
41525: POP
41526: POP
// end else
41527: GO 41909
// for j = 1 to x do
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: DOUBLE
41535: LD_INT 1
41537: DEC
41538: ST_TO_ADDR
41539: LD_VAR 0 13
41543: PUSH
41544: FOR_TO
41545: IFFALSE 41907
// begin InitHc ;
41547: CALL_OW 19
// if not f then
41551: LD_VAR 0 12
41555: NOT
41556: IFFALSE 41645
// begin PrepareHuman ( false , i , skill ) ;
41558: LD_INT 0
41560: PPUSH
41561: LD_VAR 0 8
41565: PPUSH
41566: LD_VAR 0 4
41570: PPUSH
41571: CALL_OW 380
// un := CreateHuman ;
41575: LD_ADDR_VAR 0 14
41579: PUSH
41580: CALL_OW 44
41584: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41585: LD_ADDR_VAR 0 7
41589: PUSH
41590: LD_VAR 0 7
41594: PPUSH
41595: LD_INT 1
41597: PPUSH
41598: LD_VAR 0 14
41602: PPUSH
41603: CALL_OW 2
41607: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41608: LD_VAR 0 14
41612: PPUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL_OW 250
41622: PPUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 251
41632: PPUSH
41633: LD_INT 10
41635: PPUSH
41636: LD_INT 0
41638: PPUSH
41639: CALL_OW 50
// continue ;
41643: GO 41544
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41645: LD_VAR 0 12
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PPUSH
41654: CALL_OW 313
41658: PUSH
41659: LD_VAR 0 12
41663: PUSH
41664: LD_INT 1
41666: ARRAY
41667: PPUSH
41668: CALL_OW 266
41672: PUSH
41673: LD_INT 32
41675: PUSH
41676: LD_INT 31
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: IN
41683: AND
41684: PUSH
41685: LD_VAR 0 12
41689: PUSH
41690: LD_INT 1
41692: ARRAY
41693: PPUSH
41694: CALL_OW 313
41698: PUSH
41699: LD_INT 6
41701: EQUAL
41702: OR
41703: IFFALSE 41723
// f := Delete ( f , 1 ) ;
41705: LD_ADDR_VAR 0 12
41709: PUSH
41710: LD_VAR 0 12
41714: PPUSH
41715: LD_INT 1
41717: PPUSH
41718: CALL_OW 3
41722: ST_TO_ADDR
// if not f then
41723: LD_VAR 0 12
41727: NOT
41728: IFFALSE 41746
// begin x := x + 2 ;
41730: LD_ADDR_VAR 0 13
41734: PUSH
41735: LD_VAR 0 13
41739: PUSH
41740: LD_INT 2
41742: PLUS
41743: ST_TO_ADDR
// continue ;
41744: GO 41544
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41746: LD_VAR 0 12
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: CALL_OW 266
41759: PUSH
41760: LD_INT 5
41762: EQUAL
41763: IFFALSE 41837
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41765: LD_VAR 0 12
41769: PUSH
41770: LD_INT 1
41772: ARRAY
41773: PPUSH
41774: CALL_OW 313
41778: PUSH
41779: LD_INT 3
41781: LESS
41782: IFFALSE 41818
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41784: LD_INT 0
41786: PPUSH
41787: LD_INT 5
41789: PUSH
41790: LD_INT 8
41792: PUSH
41793: LD_INT 9
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: PUSH
41801: LD_VAR 0 17
41805: ARRAY
41806: PPUSH
41807: LD_VAR 0 4
41811: PPUSH
41812: CALL_OW 380
41816: GO 41835
// PrepareHuman ( false , i , skill ) ;
41818: LD_INT 0
41820: PPUSH
41821: LD_VAR 0 8
41825: PPUSH
41826: LD_VAR 0 4
41830: PPUSH
41831: CALL_OW 380
// end else
41835: GO 41854
// PrepareHuman ( false , i , skill ) ;
41837: LD_INT 0
41839: PPUSH
41840: LD_VAR 0 8
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL_OW 380
// un := CreateHuman ;
41854: LD_ADDR_VAR 0 14
41858: PUSH
41859: CALL_OW 44
41863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41864: LD_ADDR_VAR 0 7
41868: PUSH
41869: LD_VAR 0 7
41873: PPUSH
41874: LD_INT 1
41876: PPUSH
41877: LD_VAR 0 14
41881: PPUSH
41882: CALL_OW 2
41886: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41887: LD_VAR 0 14
41891: PPUSH
41892: LD_VAR 0 12
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: CALL_OW 52
// end ;
41905: GO 41544
41907: POP
41908: POP
// end ;
41909: GO 40846
41911: POP
41912: POP
// result := result ^ buildings ;
41913: LD_ADDR_VAR 0 7
41917: PUSH
41918: LD_VAR 0 7
41922: PUSH
41923: LD_VAR 0 18
41927: ADD
41928: ST_TO_ADDR
// end else
41929: GO 42072
// begin for i = 1 to personel do
41931: LD_ADDR_VAR 0 8
41935: PUSH
41936: DOUBLE
41937: LD_INT 1
41939: DEC
41940: ST_TO_ADDR
41941: LD_VAR 0 6
41945: PUSH
41946: FOR_TO
41947: IFFALSE 42070
// begin if i > 4 then
41949: LD_VAR 0 8
41953: PUSH
41954: LD_INT 4
41956: GREATER
41957: IFFALSE 41961
// break ;
41959: GO 42070
// x := personel [ i ] ;
41961: LD_ADDR_VAR 0 13
41965: PUSH
41966: LD_VAR 0 6
41970: PUSH
41971: LD_VAR 0 8
41975: ARRAY
41976: ST_TO_ADDR
// if x = - 1 then
41977: LD_VAR 0 13
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: EQUAL
41986: IFFALSE 41990
// continue ;
41988: GO 41946
// PrepareHuman ( false , i , skill ) ;
41990: LD_INT 0
41992: PPUSH
41993: LD_VAR 0 8
41997: PPUSH
41998: LD_VAR 0 4
42002: PPUSH
42003: CALL_OW 380
// un := CreateHuman ;
42007: LD_ADDR_VAR 0 14
42011: PUSH
42012: CALL_OW 44
42016: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42017: LD_VAR 0 14
42021: PPUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: CALL_OW 250
42031: PPUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 251
42041: PPUSH
42042: LD_INT 10
42044: PPUSH
42045: LD_INT 0
42047: PPUSH
42048: CALL_OW 50
// result := result ^ un ;
42052: LD_ADDR_VAR 0 7
42056: PUSH
42057: LD_VAR 0 7
42061: PUSH
42062: LD_VAR 0 14
42066: ADD
42067: ST_TO_ADDR
// end ;
42068: GO 41946
42070: POP
42071: POP
// end ; end ;
42072: LD_VAR 0 7
42076: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42077: LD_INT 0
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
// result := false ;
42095: LD_ADDR_VAR 0 3
42099: PUSH
42100: LD_INT 0
42102: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42103: LD_VAR 0 1
42107: NOT
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 266
42118: PUSH
42119: LD_INT 32
42121: PUSH
42122: LD_INT 33
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: IN
42129: NOT
42130: OR
42131: IFFALSE 42135
// exit ;
42133: GO 43244
// nat := GetNation ( tower ) ;
42135: LD_ADDR_VAR 0 12
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 248
42149: ST_TO_ADDR
// side := GetSide ( tower ) ;
42150: LD_ADDR_VAR 0 16
42154: PUSH
42155: LD_VAR 0 1
42159: PPUSH
42160: CALL_OW 255
42164: ST_TO_ADDR
// x := GetX ( tower ) ;
42165: LD_ADDR_VAR 0 10
42169: PUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: CALL_OW 250
42179: ST_TO_ADDR
// y := GetY ( tower ) ;
42180: LD_ADDR_VAR 0 11
42184: PUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 251
42194: ST_TO_ADDR
// if not x or not y then
42195: LD_VAR 0 10
42199: NOT
42200: PUSH
42201: LD_VAR 0 11
42205: NOT
42206: OR
42207: IFFALSE 42211
// exit ;
42209: GO 43244
// weapon := 0 ;
42211: LD_ADDR_VAR 0 18
42215: PUSH
42216: LD_INT 0
42218: ST_TO_ADDR
// fac_list := [ ] ;
42219: LD_ADDR_VAR 0 17
42223: PUSH
42224: EMPTY
42225: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42226: LD_ADDR_VAR 0 6
42230: PUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 274
42240: PPUSH
42241: LD_VAR 0 2
42245: PPUSH
42246: LD_INT 0
42248: PPUSH
42249: CALL 39815 0 3
42253: PPUSH
42254: LD_INT 30
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 72
42268: ST_TO_ADDR
// if not factories then
42269: LD_VAR 0 6
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 43244
// for i in factories do
42278: LD_ADDR_VAR 0 8
42282: PUSH
42283: LD_VAR 0 6
42287: PUSH
42288: FOR_IN
42289: IFFALSE 42314
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42291: LD_ADDR_VAR 0 17
42295: PUSH
42296: LD_VAR 0 17
42300: PUSH
42301: LD_VAR 0 8
42305: PPUSH
42306: CALL_OW 478
42310: UNION
42311: ST_TO_ADDR
42312: GO 42288
42314: POP
42315: POP
// if not fac_list then
42316: LD_VAR 0 17
42320: NOT
42321: IFFALSE 42325
// exit ;
42323: GO 43244
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42325: LD_ADDR_VAR 0 5
42329: PUSH
42330: LD_INT 4
42332: PUSH
42333: LD_INT 5
42335: PUSH
42336: LD_INT 9
42338: PUSH
42339: LD_INT 10
42341: PUSH
42342: LD_INT 6
42344: PUSH
42345: LD_INT 7
42347: PUSH
42348: LD_INT 11
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 27
42362: PUSH
42363: LD_INT 28
42365: PUSH
42366: LD_INT 26
42368: PUSH
42369: LD_INT 30
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 43
42380: PUSH
42381: LD_INT 44
42383: PUSH
42384: LD_INT 46
42386: PUSH
42387: LD_INT 45
42389: PUSH
42390: LD_INT 47
42392: PUSH
42393: LD_INT 49
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: LD_VAR 0 12
42413: ARRAY
42414: ST_TO_ADDR
// list := list isect fac_list ;
42415: LD_ADDR_VAR 0 5
42419: PUSH
42420: LD_VAR 0 5
42424: PUSH
42425: LD_VAR 0 17
42429: ISECT
42430: ST_TO_ADDR
// if not list then
42431: LD_VAR 0 5
42435: NOT
42436: IFFALSE 42440
// exit ;
42438: GO 43244
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42440: LD_VAR 0 12
42444: PUSH
42445: LD_INT 3
42447: EQUAL
42448: PUSH
42449: LD_INT 49
42451: PUSH
42452: LD_VAR 0 5
42456: IN
42457: AND
42458: PUSH
42459: LD_INT 31
42461: PPUSH
42462: LD_VAR 0 16
42466: PPUSH
42467: CALL_OW 321
42471: PUSH
42472: LD_INT 2
42474: EQUAL
42475: AND
42476: IFFALSE 42536
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42478: LD_INT 22
42480: PUSH
42481: LD_VAR 0 16
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 35
42492: PUSH
42493: LD_INT 49
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 91
42502: PUSH
42503: LD_VAR 0 1
42507: PUSH
42508: LD_INT 10
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: PPUSH
42521: CALL_OW 69
42525: NOT
42526: IFFALSE 42536
// weapon := ru_time_lapser ;
42528: LD_ADDR_VAR 0 18
42532: PUSH
42533: LD_INT 49
42535: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42536: LD_VAR 0 12
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: IN
42551: PUSH
42552: LD_INT 11
42554: PUSH
42555: LD_VAR 0 5
42559: IN
42560: PUSH
42561: LD_INT 30
42563: PUSH
42564: LD_VAR 0 5
42568: IN
42569: OR
42570: AND
42571: PUSH
42572: LD_INT 6
42574: PPUSH
42575: LD_VAR 0 16
42579: PPUSH
42580: CALL_OW 321
42584: PUSH
42585: LD_INT 2
42587: EQUAL
42588: AND
42589: IFFALSE 42754
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42591: LD_INT 22
42593: PUSH
42594: LD_VAR 0 16
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 35
42608: PUSH
42609: LD_INT 11
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 35
42618: PUSH
42619: LD_INT 30
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 91
42633: PUSH
42634: LD_VAR 0 1
42638: PUSH
42639: LD_INT 18
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: PPUSH
42652: CALL_OW 69
42656: NOT
42657: PUSH
42658: LD_INT 22
42660: PUSH
42661: LD_VAR 0 16
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 30
42675: PUSH
42676: LD_INT 32
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 30
42685: PUSH
42686: LD_INT 33
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 91
42700: PUSH
42701: LD_VAR 0 1
42705: PUSH
42706: LD_INT 12
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: PPUSH
42722: CALL_OW 69
42726: PUSH
42727: LD_INT 2
42729: GREATER
42730: AND
42731: IFFALSE 42754
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42733: LD_ADDR_VAR 0 18
42737: PUSH
42738: LD_INT 11
42740: PUSH
42741: LD_INT 30
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_VAR 0 12
42752: ARRAY
42753: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42754: LD_VAR 0 18
42758: NOT
42759: PUSH
42760: LD_INT 40
42762: PPUSH
42763: LD_VAR 0 16
42767: PPUSH
42768: CALL_OW 321
42772: PUSH
42773: LD_INT 2
42775: EQUAL
42776: AND
42777: PUSH
42778: LD_INT 7
42780: PUSH
42781: LD_VAR 0 5
42785: IN
42786: PUSH
42787: LD_INT 28
42789: PUSH
42790: LD_VAR 0 5
42794: IN
42795: OR
42796: PUSH
42797: LD_INT 45
42799: PUSH
42800: LD_VAR 0 5
42804: IN
42805: OR
42806: AND
42807: IFFALSE 43061
// begin hex := GetHexInfo ( x , y ) ;
42809: LD_ADDR_VAR 0 4
42813: PUSH
42814: LD_VAR 0 10
42818: PPUSH
42819: LD_VAR 0 11
42823: PPUSH
42824: CALL_OW 546
42828: ST_TO_ADDR
// if hex [ 1 ] then
42829: LD_VAR 0 4
42833: PUSH
42834: LD_INT 1
42836: ARRAY
42837: IFFALSE 42841
// exit ;
42839: GO 43244
// height := hex [ 2 ] ;
42841: LD_ADDR_VAR 0 15
42845: PUSH
42846: LD_VAR 0 4
42850: PUSH
42851: LD_INT 2
42853: ARRAY
42854: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42855: LD_ADDR_VAR 0 14
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: LD_INT 5
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// for i in tmp do
42878: LD_ADDR_VAR 0 8
42882: PUSH
42883: LD_VAR 0 14
42887: PUSH
42888: FOR_IN
42889: IFFALSE 43059
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42891: LD_ADDR_VAR 0 9
42895: PUSH
42896: LD_VAR 0 10
42900: PPUSH
42901: LD_VAR 0 8
42905: PPUSH
42906: LD_INT 5
42908: PPUSH
42909: CALL_OW 272
42913: PUSH
42914: LD_VAR 0 11
42918: PPUSH
42919: LD_VAR 0 8
42923: PPUSH
42924: LD_INT 5
42926: PPUSH
42927: CALL_OW 273
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42936: LD_VAR 0 9
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PPUSH
42945: LD_VAR 0 9
42949: PUSH
42950: LD_INT 2
42952: ARRAY
42953: PPUSH
42954: CALL_OW 488
42958: IFFALSE 43057
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: LD_VAR 0 9
42969: PUSH
42970: LD_INT 1
42972: ARRAY
42973: PPUSH
42974: LD_VAR 0 9
42978: PUSH
42979: LD_INT 2
42981: ARRAY
42982: PPUSH
42983: CALL_OW 546
42987: ST_TO_ADDR
// if hex [ 1 ] then
42988: LD_VAR 0 4
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: IFFALSE 43000
// continue ;
42998: GO 42888
// h := hex [ 2 ] ;
43000: LD_ADDR_VAR 0 13
43004: PUSH
43005: LD_VAR 0 4
43009: PUSH
43010: LD_INT 2
43012: ARRAY
43013: ST_TO_ADDR
// if h + 7 < height then
43014: LD_VAR 0 13
43018: PUSH
43019: LD_INT 7
43021: PLUS
43022: PUSH
43023: LD_VAR 0 15
43027: LESS
43028: IFFALSE 43057
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43030: LD_ADDR_VAR 0 18
43034: PUSH
43035: LD_INT 7
43037: PUSH
43038: LD_INT 28
43040: PUSH
43041: LD_INT 45
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: PUSH
43049: LD_VAR 0 12
43053: ARRAY
43054: ST_TO_ADDR
// break ;
43055: GO 43059
// end ; end ; end ;
43057: GO 42888
43059: POP
43060: POP
// end ; if not weapon then
43061: LD_VAR 0 18
43065: NOT
43066: IFFALSE 43126
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43068: LD_ADDR_VAR 0 5
43072: PUSH
43073: LD_VAR 0 5
43077: PUSH
43078: LD_INT 11
43080: PUSH
43081: LD_INT 30
43083: PUSH
43084: LD_INT 49
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: DIFF
43092: ST_TO_ADDR
// if not list then
43093: LD_VAR 0 5
43097: NOT
43098: IFFALSE 43102
// exit ;
43100: GO 43244
// weapon := list [ rand ( 1 , list ) ] ;
43102: LD_ADDR_VAR 0 18
43106: PUSH
43107: LD_VAR 0 5
43111: PUSH
43112: LD_INT 1
43114: PPUSH
43115: LD_VAR 0 5
43119: PPUSH
43120: CALL_OW 12
43124: ARRAY
43125: ST_TO_ADDR
// end ; if weapon then
43126: LD_VAR 0 18
43130: IFFALSE 43244
// begin tmp := CostOfWeapon ( weapon ) ;
43132: LD_ADDR_VAR 0 14
43136: PUSH
43137: LD_VAR 0 18
43141: PPUSH
43142: CALL_OW 451
43146: ST_TO_ADDR
// j := GetBase ( tower ) ;
43147: LD_ADDR_VAR 0 9
43151: PUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 274
43161: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43162: LD_VAR 0 9
43166: PPUSH
43167: LD_INT 1
43169: PPUSH
43170: CALL_OW 275
43174: PUSH
43175: LD_VAR 0 14
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: GREATEREQUAL
43184: PUSH
43185: LD_VAR 0 9
43189: PPUSH
43190: LD_INT 2
43192: PPUSH
43193: CALL_OW 275
43197: PUSH
43198: LD_VAR 0 14
43202: PUSH
43203: LD_INT 2
43205: ARRAY
43206: GREATEREQUAL
43207: AND
43208: PUSH
43209: LD_VAR 0 9
43213: PPUSH
43214: LD_INT 3
43216: PPUSH
43217: CALL_OW 275
43221: PUSH
43222: LD_VAR 0 14
43226: PUSH
43227: LD_INT 3
43229: ARRAY
43230: GREATEREQUAL
43231: AND
43232: IFFALSE 43244
// result := weapon ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_VAR 0 18
43243: ST_TO_ADDR
// end ; end ;
43244: LD_VAR 0 3
43248: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
// result := true ;
43253: LD_ADDR_VAR 0 3
43257: PUSH
43258: LD_INT 1
43260: ST_TO_ADDR
// if array1 = array2 then
43261: LD_VAR 0 1
43265: PUSH
43266: LD_VAR 0 2
43270: EQUAL
43271: IFFALSE 43331
// begin for i = 1 to array1 do
43273: LD_ADDR_VAR 0 4
43277: PUSH
43278: DOUBLE
43279: LD_INT 1
43281: DEC
43282: ST_TO_ADDR
43283: LD_VAR 0 1
43287: PUSH
43288: FOR_TO
43289: IFFALSE 43327
// if array1 [ i ] <> array2 [ i ] then
43291: LD_VAR 0 1
43295: PUSH
43296: LD_VAR 0 4
43300: ARRAY
43301: PUSH
43302: LD_VAR 0 2
43306: PUSH
43307: LD_VAR 0 4
43311: ARRAY
43312: NONEQUAL
43313: IFFALSE 43325
// begin result := false ;
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_INT 0
43322: ST_TO_ADDR
// break ;
43323: GO 43327
// end ;
43325: GO 43288
43327: POP
43328: POP
// end else
43329: GO 43339
// result := false ;
43331: LD_ADDR_VAR 0 3
43335: PUSH
43336: LD_INT 0
43338: ST_TO_ADDR
// end ;
43339: LD_VAR 0 3
43343: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43344: LD_INT 0
43346: PPUSH
43347: PPUSH
// if not array1 or not array2 then
43348: LD_VAR 0 1
43352: NOT
43353: PUSH
43354: LD_VAR 0 2
43358: NOT
43359: OR
43360: IFFALSE 43364
// exit ;
43362: GO 43428
// result := true ;
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_INT 1
43371: ST_TO_ADDR
// for i = 1 to array1 do
43372: LD_ADDR_VAR 0 4
43376: PUSH
43377: DOUBLE
43378: LD_INT 1
43380: DEC
43381: ST_TO_ADDR
43382: LD_VAR 0 1
43386: PUSH
43387: FOR_TO
43388: IFFALSE 43426
// if array1 [ i ] <> array2 [ i ] then
43390: LD_VAR 0 1
43394: PUSH
43395: LD_VAR 0 4
43399: ARRAY
43400: PUSH
43401: LD_VAR 0 2
43405: PUSH
43406: LD_VAR 0 4
43410: ARRAY
43411: NONEQUAL
43412: IFFALSE 43424
// begin result := false ;
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 0
43421: ST_TO_ADDR
// break ;
43422: GO 43426
// end ;
43424: GO 43387
43426: POP
43427: POP
// end ;
43428: LD_VAR 0 3
43432: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43433: LD_INT 0
43435: PPUSH
43436: PPUSH
43437: PPUSH
// pom := GetBase ( fac ) ;
43438: LD_ADDR_VAR 0 5
43442: PUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 274
43452: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43453: LD_ADDR_VAR 0 4
43457: PUSH
43458: LD_VAR 0 2
43462: PUSH
43463: LD_INT 1
43465: ARRAY
43466: PPUSH
43467: LD_VAR 0 2
43471: PUSH
43472: LD_INT 2
43474: ARRAY
43475: PPUSH
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 3
43483: ARRAY
43484: PPUSH
43485: LD_VAR 0 2
43489: PUSH
43490: LD_INT 4
43492: ARRAY
43493: PPUSH
43494: CALL_OW 449
43498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_VAR 0 5
43508: PPUSH
43509: LD_INT 1
43511: PPUSH
43512: CALL_OW 275
43516: PUSH
43517: LD_VAR 0 4
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: GREATEREQUAL
43526: PUSH
43527: LD_VAR 0 5
43531: PPUSH
43532: LD_INT 2
43534: PPUSH
43535: CALL_OW 275
43539: PUSH
43540: LD_VAR 0 4
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: GREATEREQUAL
43549: AND
43550: PUSH
43551: LD_VAR 0 5
43555: PPUSH
43556: LD_INT 3
43558: PPUSH
43559: CALL_OW 275
43563: PUSH
43564: LD_VAR 0 4
43568: PUSH
43569: LD_INT 3
43571: ARRAY
43572: GREATEREQUAL
43573: AND
43574: ST_TO_ADDR
// end ;
43575: LD_VAR 0 3
43579: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43580: LD_INT 0
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
// pom := GetBase ( building ) ;
43586: LD_ADDR_VAR 0 3
43590: PUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 274
43600: ST_TO_ADDR
// if not pom then
43601: LD_VAR 0 3
43605: NOT
43606: IFFALSE 43610
// exit ;
43608: GO 43780
// btype := GetBType ( building ) ;
43610: LD_ADDR_VAR 0 5
43614: PUSH
43615: LD_VAR 0 1
43619: PPUSH
43620: CALL_OW 266
43624: ST_TO_ADDR
// if btype = b_armoury then
43625: LD_VAR 0 5
43629: PUSH
43630: LD_INT 4
43632: EQUAL
43633: IFFALSE 43643
// btype := b_barracks ;
43635: LD_ADDR_VAR 0 5
43639: PUSH
43640: LD_INT 5
43642: ST_TO_ADDR
// if btype = b_depot then
43643: LD_VAR 0 5
43647: PUSH
43648: LD_INT 0
43650: EQUAL
43651: IFFALSE 43661
// btype := b_warehouse ;
43653: LD_ADDR_VAR 0 5
43657: PUSH
43658: LD_INT 1
43660: ST_TO_ADDR
// if btype = b_workshop then
43661: LD_VAR 0 5
43665: PUSH
43666: LD_INT 2
43668: EQUAL
43669: IFFALSE 43679
// btype := b_factory ;
43671: LD_ADDR_VAR 0 5
43675: PUSH
43676: LD_INT 3
43678: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43679: LD_ADDR_VAR 0 4
43683: PUSH
43684: LD_VAR 0 5
43688: PPUSH
43689: LD_VAR 0 1
43693: PPUSH
43694: CALL_OW 248
43698: PPUSH
43699: CALL_OW 450
43703: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43704: LD_ADDR_VAR 0 2
43708: PUSH
43709: LD_VAR 0 3
43713: PPUSH
43714: LD_INT 1
43716: PPUSH
43717: CALL_OW 275
43721: PUSH
43722: LD_VAR 0 4
43726: PUSH
43727: LD_INT 1
43729: ARRAY
43730: GREATEREQUAL
43731: PUSH
43732: LD_VAR 0 3
43736: PPUSH
43737: LD_INT 2
43739: PPUSH
43740: CALL_OW 275
43744: PUSH
43745: LD_VAR 0 4
43749: PUSH
43750: LD_INT 2
43752: ARRAY
43753: GREATEREQUAL
43754: AND
43755: PUSH
43756: LD_VAR 0 3
43760: PPUSH
43761: LD_INT 3
43763: PPUSH
43764: CALL_OW 275
43768: PUSH
43769: LD_VAR 0 4
43773: PUSH
43774: LD_INT 3
43776: ARRAY
43777: GREATEREQUAL
43778: AND
43779: ST_TO_ADDR
// end ;
43780: LD_VAR 0 2
43784: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
// pom := GetBase ( building ) ;
43790: LD_ADDR_VAR 0 4
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 274
43804: ST_TO_ADDR
// if not pom then
43805: LD_VAR 0 4
43809: NOT
43810: IFFALSE 43814
// exit ;
43812: GO 43915
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43814: LD_ADDR_VAR 0 5
43818: PUSH
43819: LD_VAR 0 2
43823: PPUSH
43824: LD_VAR 0 1
43828: PPUSH
43829: CALL_OW 248
43833: PPUSH
43834: CALL_OW 450
43838: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: LD_INT 1
43851: PPUSH
43852: CALL_OW 275
43856: PUSH
43857: LD_VAR 0 5
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: GREATEREQUAL
43866: PUSH
43867: LD_VAR 0 4
43871: PPUSH
43872: LD_INT 2
43874: PPUSH
43875: CALL_OW 275
43879: PUSH
43880: LD_VAR 0 5
43884: PUSH
43885: LD_INT 2
43887: ARRAY
43888: GREATEREQUAL
43889: AND
43890: PUSH
43891: LD_VAR 0 4
43895: PPUSH
43896: LD_INT 3
43898: PPUSH
43899: CALL_OW 275
43903: PUSH
43904: LD_VAR 0 5
43908: PUSH
43909: LD_INT 3
43911: ARRAY
43912: GREATEREQUAL
43913: AND
43914: ST_TO_ADDR
// end ;
43915: LD_VAR 0 3
43919: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43920: LD_INT 0
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
// result := false ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_INT 0
43940: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43941: LD_VAR 0 5
43945: NOT
43946: PUSH
43947: LD_VAR 0 1
43951: NOT
43952: OR
43953: PUSH
43954: LD_VAR 0 2
43958: NOT
43959: OR
43960: PUSH
43961: LD_VAR 0 3
43965: NOT
43966: OR
43967: IFFALSE 43971
// exit ;
43969: GO 44785
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43971: LD_ADDR_VAR 0 14
43975: PUSH
43976: LD_VAR 0 1
43980: PPUSH
43981: LD_VAR 0 2
43985: PPUSH
43986: LD_VAR 0 3
43990: PPUSH
43991: LD_VAR 0 4
43995: PPUSH
43996: LD_VAR 0 5
44000: PUSH
44001: LD_INT 1
44003: ARRAY
44004: PPUSH
44005: CALL_OW 248
44009: PPUSH
44010: LD_INT 0
44012: PPUSH
44013: CALL 46038 0 6
44017: ST_TO_ADDR
// if not hexes then
44018: LD_VAR 0 14
44022: NOT
44023: IFFALSE 44027
// exit ;
44025: GO 44785
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44027: LD_ADDR_VAR 0 17
44031: PUSH
44032: LD_VAR 0 5
44036: PPUSH
44037: LD_INT 22
44039: PUSH
44040: LD_VAR 0 13
44044: PPUSH
44045: CALL_OW 255
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 30
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 30
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PPUSH
44086: CALL_OW 72
44090: ST_TO_ADDR
// for i = 1 to hexes do
44091: LD_ADDR_VAR 0 9
44095: PUSH
44096: DOUBLE
44097: LD_INT 1
44099: DEC
44100: ST_TO_ADDR
44101: LD_VAR 0 14
44105: PUSH
44106: FOR_TO
44107: IFFALSE 44783
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44109: LD_ADDR_VAR 0 13
44113: PUSH
44114: LD_VAR 0 14
44118: PUSH
44119: LD_VAR 0 9
44123: ARRAY
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: PPUSH
44129: LD_VAR 0 14
44133: PUSH
44134: LD_VAR 0 9
44138: ARRAY
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: PPUSH
44144: CALL_OW 428
44148: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44149: LD_VAR 0 14
44153: PUSH
44154: LD_VAR 0 9
44158: ARRAY
44159: PUSH
44160: LD_INT 1
44162: ARRAY
44163: PPUSH
44164: LD_VAR 0 14
44168: PUSH
44169: LD_VAR 0 9
44173: ARRAY
44174: PUSH
44175: LD_INT 2
44177: ARRAY
44178: PPUSH
44179: CALL_OW 351
44183: PUSH
44184: LD_VAR 0 14
44188: PUSH
44189: LD_VAR 0 9
44193: ARRAY
44194: PUSH
44195: LD_INT 1
44197: ARRAY
44198: PPUSH
44199: LD_VAR 0 14
44203: PUSH
44204: LD_VAR 0 9
44208: ARRAY
44209: PUSH
44210: LD_INT 2
44212: ARRAY
44213: PPUSH
44214: CALL_OW 488
44218: NOT
44219: OR
44220: PUSH
44221: LD_VAR 0 13
44225: PPUSH
44226: CALL_OW 247
44230: PUSH
44231: LD_INT 3
44233: EQUAL
44234: OR
44235: IFFALSE 44241
// exit ;
44237: POP
44238: POP
44239: GO 44785
// if not tmp then
44241: LD_VAR 0 13
44245: NOT
44246: IFFALSE 44250
// continue ;
44248: GO 44106
// result := true ;
44250: LD_ADDR_VAR 0 8
44254: PUSH
44255: LD_INT 1
44257: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44258: LD_VAR 0 6
44262: PUSH
44263: LD_VAR 0 13
44267: PPUSH
44268: CALL_OW 247
44272: PUSH
44273: LD_INT 2
44275: EQUAL
44276: AND
44277: PUSH
44278: LD_VAR 0 13
44282: PPUSH
44283: CALL_OW 263
44287: PUSH
44288: LD_INT 1
44290: EQUAL
44291: AND
44292: IFFALSE 44456
// begin if IsDrivenBy ( tmp ) then
44294: LD_VAR 0 13
44298: PPUSH
44299: CALL_OW 311
44303: IFFALSE 44307
// continue ;
44305: GO 44106
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44307: LD_VAR 0 6
44311: PPUSH
44312: LD_INT 3
44314: PUSH
44315: LD_INT 60
44317: PUSH
44318: EMPTY
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: LD_INT 55
44330: PUSH
44331: EMPTY
44332: LIST
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PPUSH
44342: CALL_OW 72
44346: IFFALSE 44454
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44348: LD_ADDR_VAR 0 18
44352: PUSH
44353: LD_VAR 0 6
44357: PPUSH
44358: LD_INT 3
44360: PUSH
44361: LD_INT 60
44363: PUSH
44364: EMPTY
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 55
44376: PUSH
44377: EMPTY
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PPUSH
44388: CALL_OW 72
44392: PUSH
44393: LD_INT 1
44395: ARRAY
44396: ST_TO_ADDR
// if IsInUnit ( driver ) then
44397: LD_VAR 0 18
44401: PPUSH
44402: CALL_OW 310
44406: IFFALSE 44417
// ComExit ( driver ) ;
44408: LD_VAR 0 18
44412: PPUSH
44413: CALL 69830 0 1
// AddComEnterUnit ( driver , tmp ) ;
44417: LD_VAR 0 18
44421: PPUSH
44422: LD_VAR 0 13
44426: PPUSH
44427: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44431: LD_VAR 0 18
44435: PPUSH
44436: LD_VAR 0 7
44440: PPUSH
44441: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44445: LD_VAR 0 18
44449: PPUSH
44450: CALL_OW 181
// end ; continue ;
44454: GO 44106
// end ; if not cleaners or not tmp in cleaners then
44456: LD_VAR 0 6
44460: NOT
44461: PUSH
44462: LD_VAR 0 13
44466: PUSH
44467: LD_VAR 0 6
44471: IN
44472: NOT
44473: OR
44474: IFFALSE 44781
// begin if dep then
44476: LD_VAR 0 17
44480: IFFALSE 44616
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44482: LD_ADDR_VAR 0 16
44486: PUSH
44487: LD_VAR 0 17
44491: PUSH
44492: LD_INT 1
44494: ARRAY
44495: PPUSH
44496: CALL_OW 250
44500: PPUSH
44501: LD_VAR 0 17
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PPUSH
44510: CALL_OW 254
44514: PPUSH
44515: LD_INT 5
44517: PPUSH
44518: CALL_OW 272
44522: PUSH
44523: LD_VAR 0 17
44527: PUSH
44528: LD_INT 1
44530: ARRAY
44531: PPUSH
44532: CALL_OW 251
44536: PPUSH
44537: LD_VAR 0 17
44541: PUSH
44542: LD_INT 1
44544: ARRAY
44545: PPUSH
44546: CALL_OW 254
44550: PPUSH
44551: LD_INT 5
44553: PPUSH
44554: CALL_OW 273
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44563: LD_VAR 0 16
44567: PUSH
44568: LD_INT 1
44570: ARRAY
44571: PPUSH
44572: LD_VAR 0 16
44576: PUSH
44577: LD_INT 2
44579: ARRAY
44580: PPUSH
44581: CALL_OW 488
44585: IFFALSE 44616
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44587: LD_VAR 0 13
44591: PPUSH
44592: LD_VAR 0 16
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: PPUSH
44601: LD_VAR 0 16
44605: PUSH
44606: LD_INT 2
44608: ARRAY
44609: PPUSH
44610: CALL_OW 111
// continue ;
44614: GO 44106
// end ; end ; r := GetDir ( tmp ) ;
44616: LD_ADDR_VAR 0 15
44620: PUSH
44621: LD_VAR 0 13
44625: PPUSH
44626: CALL_OW 254
44630: ST_TO_ADDR
// if r = 5 then
44631: LD_VAR 0 15
44635: PUSH
44636: LD_INT 5
44638: EQUAL
44639: IFFALSE 44649
// r := 0 ;
44641: LD_ADDR_VAR 0 15
44645: PUSH
44646: LD_INT 0
44648: ST_TO_ADDR
// for j = r to 5 do
44649: LD_ADDR_VAR 0 10
44653: PUSH
44654: DOUBLE
44655: LD_VAR 0 15
44659: DEC
44660: ST_TO_ADDR
44661: LD_INT 5
44663: PUSH
44664: FOR_TO
44665: IFFALSE 44779
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44667: LD_ADDR_VAR 0 11
44671: PUSH
44672: LD_VAR 0 13
44676: PPUSH
44677: CALL_OW 250
44681: PPUSH
44682: LD_VAR 0 10
44686: PPUSH
44687: LD_INT 2
44689: PPUSH
44690: CALL_OW 272
44694: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44695: LD_ADDR_VAR 0 12
44699: PUSH
44700: LD_VAR 0 13
44704: PPUSH
44705: CALL_OW 251
44709: PPUSH
44710: LD_VAR 0 10
44714: PPUSH
44715: LD_INT 2
44717: PPUSH
44718: CALL_OW 273
44722: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44723: LD_VAR 0 11
44727: PPUSH
44728: LD_VAR 0 12
44732: PPUSH
44733: CALL_OW 488
44737: PUSH
44738: LD_VAR 0 11
44742: PPUSH
44743: LD_VAR 0 12
44747: PPUSH
44748: CALL_OW 428
44752: NOT
44753: AND
44754: IFFALSE 44777
// begin ComMoveXY ( tmp , _x , _y ) ;
44756: LD_VAR 0 13
44760: PPUSH
44761: LD_VAR 0 11
44765: PPUSH
44766: LD_VAR 0 12
44770: PPUSH
44771: CALL_OW 111
// break ;
44775: GO 44779
// end ; end ;
44777: GO 44664
44779: POP
44780: POP
// end ; end ;
44781: GO 44106
44783: POP
44784: POP
// end ;
44785: LD_VAR 0 8
44789: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44790: LD_INT 0
44792: PPUSH
// result := true ;
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_INT 1
44800: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44801: LD_VAR 0 2
44805: PUSH
44806: LD_INT 24
44808: DOUBLE
44809: EQUAL
44810: IFTRUE 44820
44812: LD_INT 33
44814: DOUBLE
44815: EQUAL
44816: IFTRUE 44820
44818: GO 44845
44820: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44821: LD_ADDR_VAR 0 3
44825: PUSH
44826: LD_INT 32
44828: PPUSH
44829: LD_VAR 0 1
44833: PPUSH
44834: CALL_OW 321
44838: PUSH
44839: LD_INT 2
44841: EQUAL
44842: ST_TO_ADDR
44843: GO 45161
44845: LD_INT 20
44847: DOUBLE
44848: EQUAL
44849: IFTRUE 44853
44851: GO 44878
44853: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44854: LD_ADDR_VAR 0 3
44858: PUSH
44859: LD_INT 6
44861: PPUSH
44862: LD_VAR 0 1
44866: PPUSH
44867: CALL_OW 321
44871: PUSH
44872: LD_INT 2
44874: EQUAL
44875: ST_TO_ADDR
44876: GO 45161
44878: LD_INT 22
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44892
44884: LD_INT 36
44886: DOUBLE
44887: EQUAL
44888: IFTRUE 44892
44890: GO 44917
44892: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44893: LD_ADDR_VAR 0 3
44897: PUSH
44898: LD_INT 15
44900: PPUSH
44901: LD_VAR 0 1
44905: PPUSH
44906: CALL_OW 321
44910: PUSH
44911: LD_INT 2
44913: EQUAL
44914: ST_TO_ADDR
44915: GO 45161
44917: LD_INT 30
44919: DOUBLE
44920: EQUAL
44921: IFTRUE 44925
44923: GO 44950
44925: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44926: LD_ADDR_VAR 0 3
44930: PUSH
44931: LD_INT 20
44933: PPUSH
44934: LD_VAR 0 1
44938: PPUSH
44939: CALL_OW 321
44943: PUSH
44944: LD_INT 2
44946: EQUAL
44947: ST_TO_ADDR
44948: GO 45161
44950: LD_INT 28
44952: DOUBLE
44953: EQUAL
44954: IFTRUE 44964
44956: LD_INT 21
44958: DOUBLE
44959: EQUAL
44960: IFTRUE 44964
44962: GO 44989
44964: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44965: LD_ADDR_VAR 0 3
44969: PUSH
44970: LD_INT 21
44972: PPUSH
44973: LD_VAR 0 1
44977: PPUSH
44978: CALL_OW 321
44982: PUSH
44983: LD_INT 2
44985: EQUAL
44986: ST_TO_ADDR
44987: GO 45161
44989: LD_INT 16
44991: DOUBLE
44992: EQUAL
44993: IFTRUE 44997
44995: GO 45022
44997: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_INT 84
45005: PPUSH
45006: LD_VAR 0 1
45010: PPUSH
45011: CALL_OW 321
45015: PUSH
45016: LD_INT 2
45018: EQUAL
45019: ST_TO_ADDR
45020: GO 45161
45022: LD_INT 19
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45036
45028: LD_INT 23
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45061
45036: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_INT 83
45044: PPUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 321
45054: PUSH
45055: LD_INT 2
45057: EQUAL
45058: ST_TO_ADDR
45059: GO 45161
45061: LD_INT 17
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45094
45069: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45070: LD_ADDR_VAR 0 3
45074: PUSH
45075: LD_INT 39
45077: PPUSH
45078: LD_VAR 0 1
45082: PPUSH
45083: CALL_OW 321
45087: PUSH
45088: LD_INT 2
45090: EQUAL
45091: ST_TO_ADDR
45092: GO 45161
45094: LD_INT 18
45096: DOUBLE
45097: EQUAL
45098: IFTRUE 45102
45100: GO 45127
45102: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45103: LD_ADDR_VAR 0 3
45107: PUSH
45108: LD_INT 40
45110: PPUSH
45111: LD_VAR 0 1
45115: PPUSH
45116: CALL_OW 321
45120: PUSH
45121: LD_INT 2
45123: EQUAL
45124: ST_TO_ADDR
45125: GO 45161
45127: LD_INT 27
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45160
45135: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 35
45143: PPUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: CALL_OW 321
45153: PUSH
45154: LD_INT 2
45156: EQUAL
45157: ST_TO_ADDR
45158: GO 45161
45160: POP
// end ;
45161: LD_VAR 0 3
45165: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45166: LD_INT 0
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
// result := false ;
45179: LD_ADDR_VAR 0 6
45183: PUSH
45184: LD_INT 0
45186: ST_TO_ADDR
// if btype = b_depot then
45187: LD_VAR 0 2
45191: PUSH
45192: LD_INT 0
45194: EQUAL
45195: IFFALSE 45207
// begin result := true ;
45197: LD_ADDR_VAR 0 6
45201: PUSH
45202: LD_INT 1
45204: ST_TO_ADDR
// exit ;
45205: GO 46033
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45207: LD_VAR 0 1
45211: NOT
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 266
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: IN
45233: NOT
45234: OR
45235: PUSH
45236: LD_VAR 0 2
45240: NOT
45241: OR
45242: PUSH
45243: LD_VAR 0 5
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: LD_INT 4
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: IN
45274: NOT
45275: OR
45276: PUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: CALL_OW 488
45291: NOT
45292: OR
45293: IFFALSE 45297
// exit ;
45295: GO 46033
// side := GetSide ( depot ) ;
45297: LD_ADDR_VAR 0 9
45301: PUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 255
45311: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45312: LD_VAR 0 9
45316: PPUSH
45317: LD_VAR 0 2
45321: PPUSH
45322: CALL 44790 0 2
45326: NOT
45327: IFFALSE 45331
// exit ;
45329: GO 46033
// pom := GetBase ( depot ) ;
45331: LD_ADDR_VAR 0 10
45335: PUSH
45336: LD_VAR 0 1
45340: PPUSH
45341: CALL_OW 274
45345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45346: LD_ADDR_VAR 0 11
45350: PUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: CALL_OW 248
45365: PPUSH
45366: CALL_OW 450
45370: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45371: LD_VAR 0 10
45375: PPUSH
45376: LD_INT 1
45378: PPUSH
45379: CALL_OW 275
45383: PUSH
45384: LD_VAR 0 11
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: GREATEREQUAL
45393: PUSH
45394: LD_VAR 0 10
45398: PPUSH
45399: LD_INT 2
45401: PPUSH
45402: CALL_OW 275
45406: PUSH
45407: LD_VAR 0 11
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: GREATEREQUAL
45416: AND
45417: PUSH
45418: LD_VAR 0 10
45422: PPUSH
45423: LD_INT 3
45425: PPUSH
45426: CALL_OW 275
45430: PUSH
45431: LD_VAR 0 11
45435: PUSH
45436: LD_INT 3
45438: ARRAY
45439: GREATEREQUAL
45440: AND
45441: NOT
45442: IFFALSE 45446
// exit ;
45444: GO 46033
// if GetBType ( depot ) = b_depot then
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 266
45455: PUSH
45456: LD_INT 0
45458: EQUAL
45459: IFFALSE 45471
// dist := 28 else
45461: LD_ADDR_VAR 0 14
45465: PUSH
45466: LD_INT 28
45468: ST_TO_ADDR
45469: GO 45479
// dist := 36 ;
45471: LD_ADDR_VAR 0 14
45475: PUSH
45476: LD_INT 36
45478: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45479: LD_VAR 0 1
45483: PPUSH
45484: LD_VAR 0 3
45488: PPUSH
45489: LD_VAR 0 4
45493: PPUSH
45494: CALL_OW 297
45498: PUSH
45499: LD_VAR 0 14
45503: GREATER
45504: IFFALSE 45508
// exit ;
45506: GO 46033
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45508: LD_ADDR_VAR 0 12
45512: PUSH
45513: LD_VAR 0 2
45517: PPUSH
45518: LD_VAR 0 3
45522: PPUSH
45523: LD_VAR 0 4
45527: PPUSH
45528: LD_VAR 0 5
45532: PPUSH
45533: LD_VAR 0 1
45537: PPUSH
45538: CALL_OW 248
45542: PPUSH
45543: LD_INT 0
45545: PPUSH
45546: CALL 46038 0 6
45550: ST_TO_ADDR
// if not hexes then
45551: LD_VAR 0 12
45555: NOT
45556: IFFALSE 45560
// exit ;
45558: GO 46033
// hex := GetHexInfo ( x , y ) ;
45560: LD_ADDR_VAR 0 15
45564: PUSH
45565: LD_VAR 0 3
45569: PPUSH
45570: LD_VAR 0 4
45574: PPUSH
45575: CALL_OW 546
45579: ST_TO_ADDR
// if hex [ 1 ] then
45580: LD_VAR 0 15
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: IFFALSE 45592
// exit ;
45590: GO 46033
// height := hex [ 2 ] ;
45592: LD_ADDR_VAR 0 13
45596: PUSH
45597: LD_VAR 0 15
45601: PUSH
45602: LD_INT 2
45604: ARRAY
45605: ST_TO_ADDR
// for i = 1 to hexes do
45606: LD_ADDR_VAR 0 7
45610: PUSH
45611: DOUBLE
45612: LD_INT 1
45614: DEC
45615: ST_TO_ADDR
45616: LD_VAR 0 12
45620: PUSH
45621: FOR_TO
45622: IFFALSE 45952
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45624: LD_VAR 0 12
45628: PUSH
45629: LD_VAR 0 7
45633: ARRAY
45634: PUSH
45635: LD_INT 1
45637: ARRAY
45638: PPUSH
45639: LD_VAR 0 12
45643: PUSH
45644: LD_VAR 0 7
45648: ARRAY
45649: PUSH
45650: LD_INT 2
45652: ARRAY
45653: PPUSH
45654: CALL_OW 488
45658: NOT
45659: PUSH
45660: LD_VAR 0 12
45664: PUSH
45665: LD_VAR 0 7
45669: ARRAY
45670: PUSH
45671: LD_INT 1
45673: ARRAY
45674: PPUSH
45675: LD_VAR 0 12
45679: PUSH
45680: LD_VAR 0 7
45684: ARRAY
45685: PUSH
45686: LD_INT 2
45688: ARRAY
45689: PPUSH
45690: CALL_OW 428
45694: PUSH
45695: LD_INT 0
45697: GREATER
45698: OR
45699: PUSH
45700: LD_VAR 0 12
45704: PUSH
45705: LD_VAR 0 7
45709: ARRAY
45710: PUSH
45711: LD_INT 1
45713: ARRAY
45714: PPUSH
45715: LD_VAR 0 12
45719: PUSH
45720: LD_VAR 0 7
45724: ARRAY
45725: PUSH
45726: LD_INT 2
45728: ARRAY
45729: PPUSH
45730: CALL_OW 351
45734: OR
45735: IFFALSE 45741
// exit ;
45737: POP
45738: POP
45739: GO 46033
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45741: LD_ADDR_VAR 0 8
45745: PUSH
45746: LD_VAR 0 12
45750: PUSH
45751: LD_VAR 0 7
45755: ARRAY
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PPUSH
45761: LD_VAR 0 12
45765: PUSH
45766: LD_VAR 0 7
45770: ARRAY
45771: PUSH
45772: LD_INT 2
45774: ARRAY
45775: PPUSH
45776: CALL_OW 546
45780: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45781: LD_VAR 0 8
45785: PUSH
45786: LD_INT 1
45788: ARRAY
45789: PUSH
45790: LD_VAR 0 8
45794: PUSH
45795: LD_INT 2
45797: ARRAY
45798: PUSH
45799: LD_VAR 0 13
45803: PUSH
45804: LD_INT 2
45806: PLUS
45807: GREATER
45808: OR
45809: PUSH
45810: LD_VAR 0 8
45814: PUSH
45815: LD_INT 2
45817: ARRAY
45818: PUSH
45819: LD_VAR 0 13
45823: PUSH
45824: LD_INT 2
45826: MINUS
45827: LESS
45828: OR
45829: PUSH
45830: LD_VAR 0 8
45834: PUSH
45835: LD_INT 3
45837: ARRAY
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 8
45844: PUSH
45845: LD_INT 9
45847: PUSH
45848: LD_INT 10
45850: PUSH
45851: LD_INT 11
45853: PUSH
45854: LD_INT 12
45856: PUSH
45857: LD_INT 13
45859: PUSH
45860: LD_INT 16
45862: PUSH
45863: LD_INT 17
45865: PUSH
45866: LD_INT 18
45868: PUSH
45869: LD_INT 19
45871: PUSH
45872: LD_INT 20
45874: PUSH
45875: LD_INT 21
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: IN
45893: NOT
45894: OR
45895: PUSH
45896: LD_VAR 0 8
45900: PUSH
45901: LD_INT 5
45903: ARRAY
45904: NOT
45905: OR
45906: PUSH
45907: LD_VAR 0 8
45911: PUSH
45912: LD_INT 6
45914: ARRAY
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 7
45924: PUSH
45925: LD_INT 9
45927: PUSH
45928: LD_INT 10
45930: PUSH
45931: LD_INT 11
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: IN
45942: NOT
45943: OR
45944: IFFALSE 45950
// exit ;
45946: POP
45947: POP
45948: GO 46033
// end ;
45950: GO 45621
45952: POP
45953: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45954: LD_VAR 0 9
45958: PPUSH
45959: LD_VAR 0 3
45963: PPUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 20
45971: PPUSH
45972: CALL 37956 0 4
45976: PUSH
45977: LD_INT 4
45979: ARRAY
45980: IFFALSE 45984
// exit ;
45982: GO 46033
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45984: LD_VAR 0 2
45988: PUSH
45989: LD_INT 29
45991: PUSH
45992: LD_INT 30
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: IN
45999: PUSH
46000: LD_VAR 0 3
46004: PPUSH
46005: LD_VAR 0 4
46009: PPUSH
46010: LD_VAR 0 9
46014: PPUSH
46015: CALL_OW 440
46019: NOT
46020: AND
46021: IFFALSE 46025
// exit ;
46023: GO 46033
// result := true ;
46025: LD_ADDR_VAR 0 6
46029: PUSH
46030: LD_INT 1
46032: ST_TO_ADDR
// end ;
46033: LD_VAR 0 6
46037: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46038: LD_INT 0
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
// result = [ ] ;
46098: LD_ADDR_VAR 0 7
46102: PUSH
46103: EMPTY
46104: ST_TO_ADDR
// temp_list = [ ] ;
46105: LD_ADDR_VAR 0 9
46109: PUSH
46110: EMPTY
46111: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46112: LD_VAR 0 4
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: LD_INT 4
46131: PUSH
46132: LD_INT 5
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: IN
46143: NOT
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: IN
46160: PUSH
46161: LD_VAR 0 5
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: IN
46180: NOT
46181: AND
46182: OR
46183: IFFALSE 46187
// exit ;
46185: GO 64578
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46187: LD_VAR 0 1
46191: PUSH
46192: LD_INT 6
46194: PUSH
46195: LD_INT 7
46197: PUSH
46198: LD_INT 8
46200: PUSH
46201: LD_INT 13
46203: PUSH
46204: LD_INT 12
46206: PUSH
46207: LD_INT 15
46209: PUSH
46210: LD_INT 11
46212: PUSH
46213: LD_INT 14
46215: PUSH
46216: LD_INT 10
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: IN
46230: IFFALSE 46240
// btype = b_lab ;
46232: LD_ADDR_VAR 0 1
46236: PUSH
46237: LD_INT 6
46239: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46240: LD_VAR 0 6
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: IN
46259: NOT
46260: PUSH
46261: LD_VAR 0 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: LD_INT 6
46280: PUSH
46281: LD_INT 36
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: LD_INT 31
46292: PUSH
46293: LD_INT 32
46295: PUSH
46296: LD_INT 33
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: IN
46312: NOT
46313: PUSH
46314: LD_VAR 0 6
46318: PUSH
46319: LD_INT 1
46321: EQUAL
46322: AND
46323: OR
46324: PUSH
46325: LD_VAR 0 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: IN
46340: NOT
46341: PUSH
46342: LD_VAR 0 6
46346: PUSH
46347: LD_INT 2
46349: EQUAL
46350: AND
46351: OR
46352: IFFALSE 46362
// mode = 0 ;
46354: LD_ADDR_VAR 0 6
46358: PUSH
46359: LD_INT 0
46361: ST_TO_ADDR
// case mode of 0 :
46362: LD_VAR 0 6
46366: PUSH
46367: LD_INT 0
46369: DOUBLE
46370: EQUAL
46371: IFTRUE 46375
46373: GO 57828
46375: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46376: LD_ADDR_VAR 0 11
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46569: LD_ADDR_VAR 0 12
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 3
46726: NEG
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46765: LD_ADDR_VAR 0 13
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46964: LD_ADDR_VAR 0 14
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47160: LD_ADDR_VAR 0 15
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47353: LD_ADDR_VAR 0 16
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47546: LD_ADDR_VAR 0 17
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47776: LD_ADDR_VAR 0 18
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48006: LD_ADDR_VAR 0 19
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48236: LD_ADDR_VAR 0 20
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48466: LD_ADDR_VAR 0 21
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48696: LD_ADDR_VAR 0 22
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48926: LD_ADDR_VAR 0 23
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49206: LD_ADDR_VAR 0 24
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49482: LD_ADDR_VAR 0 25
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 3
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49756: LD_ADDR_VAR 0 26
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50032: LD_ADDR_VAR 0 27
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50312: LD_ADDR_VAR 0 28
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50594: LD_ADDR_VAR 0 29
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50873: LD_ADDR_VAR 0 30
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51151: LD_ADDR_VAR 0 31
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51429: LD_ADDR_VAR 0 32
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51707: LD_ADDR_VAR 0 33
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51986: LD_ADDR_VAR 0 34
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52266: LD_ADDR_VAR 0 35
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52378: LD_ADDR_VAR 0 36
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52490: LD_ADDR_VAR 0 37
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52602: LD_ADDR_VAR 0 38
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52714: LD_ADDR_VAR 0 39
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52826: LD_ADDR_VAR 0 40
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52938: LD_ADDR_VAR 0 41
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53288: LD_ADDR_VAR 0 42
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53638: LD_ADDR_VAR 0 43
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53986: LD_ADDR_VAR 0 44
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54336: LD_ADDR_VAR 0 45
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54686: LD_ADDR_VAR 0 46
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55034: LD_ADDR_VAR 0 47
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55185: LD_ADDR_VAR 0 48
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55332: LD_ADDR_VAR 0 49
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55476: LD_ADDR_VAR 0 50
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55620: LD_ADDR_VAR 0 51
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55767: LD_ADDR_VAR 0 52
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55918: LD_ADDR_VAR 0 53
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56148: LD_ADDR_VAR 0 54
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56378: LD_ADDR_VAR 0 55
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56608: LD_ADDR_VAR 0 56
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56838: LD_ADDR_VAR 0 57
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57068: LD_ADDR_VAR 0 58
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57298: LD_ADDR_VAR 0 59
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57386: LD_ADDR_VAR 0 60
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57474: LD_ADDR_VAR 0 61
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57562: LD_ADDR_VAR 0 62
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57650: LD_ADDR_VAR 0 63
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57738: LD_ADDR_VAR 0 64
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// end ; 1 :
57826: GO 63723
57828: LD_INT 1
57830: DOUBLE
57831: EQUAL
57832: IFTRUE 57836
57834: GO 60459
57836: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57837: LD_ADDR_VAR 0 11
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57881: LD_ADDR_VAR 0 12
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57922: LD_ADDR_VAR 0 13
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57962: LD_ADDR_VAR 0 14
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58003: LD_ADDR_VAR 0 15
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58047: LD_ADDR_VAR 0 16
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58093: LD_ADDR_VAR 0 17
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58137: LD_ADDR_VAR 0 18
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58178: LD_ADDR_VAR 0 19
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58218: LD_ADDR_VAR 0 20
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58259: LD_ADDR_VAR 0 21
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58303: LD_ADDR_VAR 0 22
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58349: LD_ADDR_VAR 0 23
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58393: LD_ADDR_VAR 0 24
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58434: LD_ADDR_VAR 0 25
58438: PUSH
58439: LD_INT 3
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58474: LD_ADDR_VAR 0 26
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58515: LD_ADDR_VAR 0 27
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58559: LD_ADDR_VAR 0 28
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58605: LD_ADDR_VAR 0 29
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 5
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 4
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 6
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 6
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 5
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58760: LD_ADDR_VAR 0 30
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 5
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 5
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 6
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 6
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58903: LD_ADDR_VAR 0 31
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 4
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 4
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 6
59000: PUSH
59001: LD_INT 5
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 6
59010: PUSH
59011: LD_INT 6
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: PUSH
59021: LD_INT 6
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59042: LD_ADDR_VAR 0 32
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 5
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 6
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 6
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59185: LD_ADDR_VAR 0 33
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 5
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 5
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 6
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 6
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59340: LD_ADDR_VAR 0 34
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: LD_INT 4
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 4
59407: NEG
59408: PUSH
59409: LD_INT 4
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: LD_INT 5
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: LD_INT 4
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 5
59443: NEG
59444: PUSH
59445: LD_INT 5
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 5
59455: NEG
59456: PUSH
59457: LD_INT 6
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 6
59467: NEG
59468: PUSH
59469: LD_INT 5
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 6
59479: NEG
59480: PUSH
59481: LD_INT 6
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59503: LD_ADDR_VAR 0 41
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 2
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59547: LD_ADDR_VAR 0 42
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59588: LD_ADDR_VAR 0 43
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59628: LD_ADDR_VAR 0 44
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59669: LD_ADDR_VAR 0 45
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59713: LD_ADDR_VAR 0 46
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59759: LD_ADDR_VAR 0 47
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59792: LD_ADDR_VAR 0 48
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59823: LD_ADDR_VAR 0 49
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59852: LD_ADDR_VAR 0 50
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59881: LD_ADDR_VAR 0 51
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59912: LD_ADDR_VAR 0 52
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59945: LD_ADDR_VAR 0 53
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59989: LD_ADDR_VAR 0 54
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60030: LD_ADDR_VAR 0 55
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60070: LD_ADDR_VAR 0 56
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60111: LD_ADDR_VAR 0 57
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60155: LD_ADDR_VAR 0 58
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: LD_INT 3
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60201: LD_ADDR_VAR 0 59
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60245: LD_ADDR_VAR 0 60
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60286: LD_ADDR_VAR 0 61
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60326: LD_ADDR_VAR 0 62
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60367: LD_ADDR_VAR 0 63
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60411: LD_ADDR_VAR 0 64
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// end ; 2 :
60457: GO 63723
60459: LD_INT 2
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60467
60465: GO 63722
60467: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60468: LD_ADDR_VAR 0 29
60472: PUSH
60473: LD_INT 4
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 5
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 5
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 4
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 4
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 4
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: LD_INT 4
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 3
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 5
60913: NEG
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 5
60925: NEG
60926: PUSH
60927: LD_INT 5
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 5
60949: NEG
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61006: LD_ADDR_VAR 0 30
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 5
61033: PUSH
61034: LD_INT 4
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 4
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 5
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 5
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: LD_INT 3
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: NEG
61371: PUSH
61372: LD_INT 4
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 5
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 4
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 5
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61553: LD_ADDR_VAR 0 31
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 3
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 5
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 5
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 5
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 4
61709: NEG
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 2
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: LD_INT 4
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: LD_INT 5
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: LD_INT 4
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: NEG
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 5
61815: NEG
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 5
61827: NEG
61828: PUSH
61829: LD_INT 5
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 4
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 4
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 4
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 5
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 5
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 5
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62103: LD_ADDR_VAR 0 32
62107: PUSH
62108: LD_INT 4
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 5
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 5
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 4
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: LD_INT 4
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 4
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 4
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 5
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 4
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 5
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 5
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 4
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 4
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 4
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 4
62515: PUSH
62516: LD_INT 4
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 4
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: LD_INT 4
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 5
62545: PUSH
62546: LD_INT 5
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: PUSH
62556: LD_INT 5
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: LD_INT 4
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 5
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 5
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62650: LD_ADDR_VAR 0 33
62654: PUSH
62655: LD_INT 4
62657: NEG
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 4
62669: NEG
62670: PUSH
62671: LD_INT 5
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: LD_INT 4
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 5
62717: NEG
62718: PUSH
62719: LD_INT 4
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 5
62729: NEG
62730: PUSH
62731: LD_INT 5
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 5
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 4
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 3
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 4
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 5
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: LD_INT 2
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 5
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 4
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: LD_INT 4
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: PUSH
63031: LD_INT 2
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 4
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 3
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 5
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 5
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63188: LD_ADDR_VAR 0 34
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 5
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 4
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 3
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 5
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 4
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 4
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: LD_INT 4
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 5
63410: PUSH
63411: LD_INT 4
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 5
63420: PUSH
63421: LD_INT 5
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 4
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 3
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: LD_INT 5
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 4
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 4
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 4
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 5
63629: NEG
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 5
63640: NEG
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 5
63652: NEG
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// end ; end ;
63720: GO 63723
63722: POP
// case btype of b_depot , b_warehouse :
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 0
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63742
63734: LD_INT 1
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 63943
63742: POP
// case nation of nation_american :
63743: LD_VAR 0 5
63747: PUSH
63748: LD_INT 1
63750: DOUBLE
63751: EQUAL
63752: IFTRUE 63756
63754: GO 63812
63756: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63757: LD_ADDR_VAR 0 9
63761: PUSH
63762: LD_VAR 0 11
63766: PUSH
63767: LD_VAR 0 12
63771: PUSH
63772: LD_VAR 0 13
63776: PUSH
63777: LD_VAR 0 14
63781: PUSH
63782: LD_VAR 0 15
63786: PUSH
63787: LD_VAR 0 16
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: PUSH
63800: LD_VAR 0 4
63804: PUSH
63805: LD_INT 1
63807: PLUS
63808: ARRAY
63809: ST_TO_ADDR
63810: GO 63941
63812: LD_INT 2
63814: DOUBLE
63815: EQUAL
63816: IFTRUE 63820
63818: GO 63876
63820: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63821: LD_ADDR_VAR 0 9
63825: PUSH
63826: LD_VAR 0 17
63830: PUSH
63831: LD_VAR 0 18
63835: PUSH
63836: LD_VAR 0 19
63840: PUSH
63841: LD_VAR 0 20
63845: PUSH
63846: LD_VAR 0 21
63850: PUSH
63851: LD_VAR 0 22
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 4
63868: PUSH
63869: LD_INT 1
63871: PLUS
63872: ARRAY
63873: ST_TO_ADDR
63874: GO 63941
63876: LD_INT 3
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63884
63882: GO 63940
63884: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63885: LD_ADDR_VAR 0 9
63889: PUSH
63890: LD_VAR 0 23
63894: PUSH
63895: LD_VAR 0 24
63899: PUSH
63900: LD_VAR 0 25
63904: PUSH
63905: LD_VAR 0 26
63909: PUSH
63910: LD_VAR 0 27
63914: PUSH
63915: LD_VAR 0 28
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: PUSH
63928: LD_VAR 0 4
63932: PUSH
63933: LD_INT 1
63935: PLUS
63936: ARRAY
63937: ST_TO_ADDR
63938: GO 63941
63940: POP
63941: GO 64496
63943: LD_INT 2
63945: DOUBLE
63946: EQUAL
63947: IFTRUE 63957
63949: LD_INT 3
63951: DOUBLE
63952: EQUAL
63953: IFTRUE 63957
63955: GO 64013
63957: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63958: LD_ADDR_VAR 0 9
63962: PUSH
63963: LD_VAR 0 29
63967: PUSH
63968: LD_VAR 0 30
63972: PUSH
63973: LD_VAR 0 31
63977: PUSH
63978: LD_VAR 0 32
63982: PUSH
63983: LD_VAR 0 33
63987: PUSH
63988: LD_VAR 0 34
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 4
64005: PUSH
64006: LD_INT 1
64008: PLUS
64009: ARRAY
64010: ST_TO_ADDR
64011: GO 64496
64013: LD_INT 16
64015: DOUBLE
64016: EQUAL
64017: IFTRUE 64075
64019: LD_INT 17
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64075
64025: LD_INT 18
64027: DOUBLE
64028: EQUAL
64029: IFTRUE 64075
64031: LD_INT 19
64033: DOUBLE
64034: EQUAL
64035: IFTRUE 64075
64037: LD_INT 22
64039: DOUBLE
64040: EQUAL
64041: IFTRUE 64075
64043: LD_INT 20
64045: DOUBLE
64046: EQUAL
64047: IFTRUE 64075
64049: LD_INT 21
64051: DOUBLE
64052: EQUAL
64053: IFTRUE 64075
64055: LD_INT 23
64057: DOUBLE
64058: EQUAL
64059: IFTRUE 64075
64061: LD_INT 24
64063: DOUBLE
64064: EQUAL
64065: IFTRUE 64075
64067: LD_INT 25
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64075
64073: GO 64131
64075: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64076: LD_ADDR_VAR 0 9
64080: PUSH
64081: LD_VAR 0 35
64085: PUSH
64086: LD_VAR 0 36
64090: PUSH
64091: LD_VAR 0 37
64095: PUSH
64096: LD_VAR 0 38
64100: PUSH
64101: LD_VAR 0 39
64105: PUSH
64106: LD_VAR 0 40
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: LD_INT 1
64126: PLUS
64127: ARRAY
64128: ST_TO_ADDR
64129: GO 64496
64131: LD_INT 6
64133: DOUBLE
64134: EQUAL
64135: IFTRUE 64187
64137: LD_INT 7
64139: DOUBLE
64140: EQUAL
64141: IFTRUE 64187
64143: LD_INT 8
64145: DOUBLE
64146: EQUAL
64147: IFTRUE 64187
64149: LD_INT 13
64151: DOUBLE
64152: EQUAL
64153: IFTRUE 64187
64155: LD_INT 12
64157: DOUBLE
64158: EQUAL
64159: IFTRUE 64187
64161: LD_INT 15
64163: DOUBLE
64164: EQUAL
64165: IFTRUE 64187
64167: LD_INT 11
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64187
64173: LD_INT 14
64175: DOUBLE
64176: EQUAL
64177: IFTRUE 64187
64179: LD_INT 10
64181: DOUBLE
64182: EQUAL
64183: IFTRUE 64187
64185: GO 64243
64187: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64188: LD_ADDR_VAR 0 9
64192: PUSH
64193: LD_VAR 0 41
64197: PUSH
64198: LD_VAR 0 42
64202: PUSH
64203: LD_VAR 0 43
64207: PUSH
64208: LD_VAR 0 44
64212: PUSH
64213: LD_VAR 0 45
64217: PUSH
64218: LD_VAR 0 46
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: PUSH
64231: LD_VAR 0 4
64235: PUSH
64236: LD_INT 1
64238: PLUS
64239: ARRAY
64240: ST_TO_ADDR
64241: GO 64496
64243: LD_INT 36
64245: DOUBLE
64246: EQUAL
64247: IFTRUE 64251
64249: GO 64307
64251: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64252: LD_ADDR_VAR 0 9
64256: PUSH
64257: LD_VAR 0 47
64261: PUSH
64262: LD_VAR 0 48
64266: PUSH
64267: LD_VAR 0 49
64271: PUSH
64272: LD_VAR 0 50
64276: PUSH
64277: LD_VAR 0 51
64281: PUSH
64282: LD_VAR 0 52
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_VAR 0 4
64299: PUSH
64300: LD_INT 1
64302: PLUS
64303: ARRAY
64304: ST_TO_ADDR
64305: GO 64496
64307: LD_INT 4
64309: DOUBLE
64310: EQUAL
64311: IFTRUE 64333
64313: LD_INT 5
64315: DOUBLE
64316: EQUAL
64317: IFTRUE 64333
64319: LD_INT 34
64321: DOUBLE
64322: EQUAL
64323: IFTRUE 64333
64325: LD_INT 37
64327: DOUBLE
64328: EQUAL
64329: IFTRUE 64333
64331: GO 64389
64333: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64334: LD_ADDR_VAR 0 9
64338: PUSH
64339: LD_VAR 0 53
64343: PUSH
64344: LD_VAR 0 54
64348: PUSH
64349: LD_VAR 0 55
64353: PUSH
64354: LD_VAR 0 56
64358: PUSH
64359: LD_VAR 0 57
64363: PUSH
64364: LD_VAR 0 58
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: PUSH
64377: LD_VAR 0 4
64381: PUSH
64382: LD_INT 1
64384: PLUS
64385: ARRAY
64386: ST_TO_ADDR
64387: GO 64496
64389: LD_INT 31
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64439
64395: LD_INT 32
64397: DOUBLE
64398: EQUAL
64399: IFTRUE 64439
64401: LD_INT 33
64403: DOUBLE
64404: EQUAL
64405: IFTRUE 64439
64407: LD_INT 27
64409: DOUBLE
64410: EQUAL
64411: IFTRUE 64439
64413: LD_INT 26
64415: DOUBLE
64416: EQUAL
64417: IFTRUE 64439
64419: LD_INT 28
64421: DOUBLE
64422: EQUAL
64423: IFTRUE 64439
64425: LD_INT 29
64427: DOUBLE
64428: EQUAL
64429: IFTRUE 64439
64431: LD_INT 30
64433: DOUBLE
64434: EQUAL
64435: IFTRUE 64439
64437: GO 64495
64439: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64440: LD_ADDR_VAR 0 9
64444: PUSH
64445: LD_VAR 0 59
64449: PUSH
64450: LD_VAR 0 60
64454: PUSH
64455: LD_VAR 0 61
64459: PUSH
64460: LD_VAR 0 62
64464: PUSH
64465: LD_VAR 0 63
64469: PUSH
64470: LD_VAR 0 64
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 4
64487: PUSH
64488: LD_INT 1
64490: PLUS
64491: ARRAY
64492: ST_TO_ADDR
64493: GO 64496
64495: POP
// temp_list2 = [ ] ;
64496: LD_ADDR_VAR 0 10
64500: PUSH
64501: EMPTY
64502: ST_TO_ADDR
// for i in temp_list do
64503: LD_ADDR_VAR 0 8
64507: PUSH
64508: LD_VAR 0 9
64512: PUSH
64513: FOR_IN
64514: IFFALSE 64566
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64516: LD_ADDR_VAR 0 10
64520: PUSH
64521: LD_VAR 0 10
64525: PUSH
64526: LD_VAR 0 8
64530: PUSH
64531: LD_INT 1
64533: ARRAY
64534: PUSH
64535: LD_VAR 0 2
64539: PLUS
64540: PUSH
64541: LD_VAR 0 8
64545: PUSH
64546: LD_INT 2
64548: ARRAY
64549: PUSH
64550: LD_VAR 0 3
64554: PLUS
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: ADD
64563: ST_TO_ADDR
64564: GO 64513
64566: POP
64567: POP
// result = temp_list2 ;
64568: LD_ADDR_VAR 0 7
64572: PUSH
64573: LD_VAR 0 10
64577: ST_TO_ADDR
// end ;
64578: LD_VAR 0 7
64582: RET
// export function EnemyInRange ( unit , dist ) ; begin
64583: LD_INT 0
64585: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64586: LD_ADDR_VAR 0 3
64590: PUSH
64591: LD_VAR 0 1
64595: PPUSH
64596: CALL_OW 255
64600: PPUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 250
64610: PPUSH
64611: LD_VAR 0 1
64615: PPUSH
64616: CALL_OW 251
64620: PPUSH
64621: LD_VAR 0 2
64625: PPUSH
64626: CALL 37956 0 4
64630: PUSH
64631: LD_INT 4
64633: ARRAY
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 3
64639: RET
// export function PlayerSeeMe ( unit ) ; begin
64640: LD_INT 0
64642: PPUSH
// result := See ( your_side , unit ) ;
64643: LD_ADDR_VAR 0 2
64647: PUSH
64648: LD_OWVAR 2
64652: PPUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL_OW 292
64662: ST_TO_ADDR
// end ;
64663: LD_VAR 0 2
64667: RET
// export function ReverseDir ( unit ) ; begin
64668: LD_INT 0
64670: PPUSH
// if not unit then
64671: LD_VAR 0 1
64675: NOT
64676: IFFALSE 64680
// exit ;
64678: GO 64703
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64680: LD_ADDR_VAR 0 2
64684: PUSH
64685: LD_VAR 0 1
64689: PPUSH
64690: CALL_OW 254
64694: PUSH
64695: LD_INT 3
64697: PLUS
64698: PUSH
64699: LD_INT 6
64701: MOD
64702: ST_TO_ADDR
// end ;
64703: LD_VAR 0 2
64707: RET
// export function ReverseArray ( array ) ; var i ; begin
64708: LD_INT 0
64710: PPUSH
64711: PPUSH
// if not array then
64712: LD_VAR 0 1
64716: NOT
64717: IFFALSE 64721
// exit ;
64719: GO 64776
// result := [ ] ;
64721: LD_ADDR_VAR 0 2
64725: PUSH
64726: EMPTY
64727: ST_TO_ADDR
// for i := array downto 1 do
64728: LD_ADDR_VAR 0 3
64732: PUSH
64733: DOUBLE
64734: LD_VAR 0 1
64738: INC
64739: ST_TO_ADDR
64740: LD_INT 1
64742: PUSH
64743: FOR_DOWNTO
64744: IFFALSE 64774
// result := Join ( result , array [ i ] ) ;
64746: LD_ADDR_VAR 0 2
64750: PUSH
64751: LD_VAR 0 2
64755: PPUSH
64756: LD_VAR 0 1
64760: PUSH
64761: LD_VAR 0 3
64765: ARRAY
64766: PPUSH
64767: CALL 69432 0 2
64771: ST_TO_ADDR
64772: GO 64743
64774: POP
64775: POP
// end ;
64776: LD_VAR 0 2
64780: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
// if not unit or not hexes then
64789: LD_VAR 0 1
64793: NOT
64794: PUSH
64795: LD_VAR 0 2
64799: NOT
64800: OR
64801: IFFALSE 64805
// exit ;
64803: GO 64928
// dist := 9999 ;
64805: LD_ADDR_VAR 0 5
64809: PUSH
64810: LD_INT 9999
64812: ST_TO_ADDR
// for i = 1 to hexes do
64813: LD_ADDR_VAR 0 4
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_VAR 0 2
64827: PUSH
64828: FOR_TO
64829: IFFALSE 64916
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64831: LD_ADDR_VAR 0 6
64835: PUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: LD_VAR 0 2
64845: PUSH
64846: LD_VAR 0 4
64850: ARRAY
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PPUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_VAR 0 4
64865: ARRAY
64866: PUSH
64867: LD_INT 2
64869: ARRAY
64870: PPUSH
64871: CALL_OW 297
64875: ST_TO_ADDR
// if tdist < dist then
64876: LD_VAR 0 6
64880: PUSH
64881: LD_VAR 0 5
64885: LESS
64886: IFFALSE 64914
// begin hex := hexes [ i ] ;
64888: LD_ADDR_VAR 0 8
64892: PUSH
64893: LD_VAR 0 2
64897: PUSH
64898: LD_VAR 0 4
64902: ARRAY
64903: ST_TO_ADDR
// dist := tdist ;
64904: LD_ADDR_VAR 0 5
64908: PUSH
64909: LD_VAR 0 6
64913: ST_TO_ADDR
// end ; end ;
64914: GO 64828
64916: POP
64917: POP
// result := hex ;
64918: LD_ADDR_VAR 0 3
64922: PUSH
64923: LD_VAR 0 8
64927: ST_TO_ADDR
// end ;
64928: LD_VAR 0 3
64932: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64933: LD_INT 0
64935: PPUSH
64936: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64937: LD_VAR 0 1
64941: NOT
64942: PUSH
64943: LD_VAR 0 1
64947: PUSH
64948: LD_INT 21
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 23
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PPUSH
64972: CALL_OW 69
64976: IN
64977: NOT
64978: OR
64979: IFFALSE 64983
// exit ;
64981: GO 65030
// for i = 1 to 3 do
64983: LD_ADDR_VAR 0 3
64987: PUSH
64988: DOUBLE
64989: LD_INT 1
64991: DEC
64992: ST_TO_ADDR
64993: LD_INT 3
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65028
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64999: LD_VAR 0 1
65003: PPUSH
65004: CALL_OW 250
65008: PPUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 251
65018: PPUSH
65019: LD_INT 1
65021: PPUSH
65022: CALL_OW 453
65026: GO 64996
65028: POP
65029: POP
// end ;
65030: LD_VAR 0 2
65034: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65035: LD_INT 0
65037: PPUSH
65038: PPUSH
65039: PPUSH
65040: PPUSH
65041: PPUSH
65042: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65043: LD_VAR 0 1
65047: NOT
65048: PUSH
65049: LD_VAR 0 2
65053: NOT
65054: OR
65055: PUSH
65056: LD_VAR 0 1
65060: PPUSH
65061: CALL_OW 314
65065: OR
65066: IFFALSE 65070
// exit ;
65068: GO 65537
// if GetLives ( i ) < 250 then
65070: LD_VAR 0 4
65074: PPUSH
65075: CALL_OW 256
65079: PUSH
65080: LD_INT 250
65082: LESS
65083: IFFALSE 65096
// begin ComAutodestruct ( i ) ;
65085: LD_VAR 0 4
65089: PPUSH
65090: CALL 64933 0 1
// exit ;
65094: GO 65537
// end ; x := GetX ( enemy_unit ) ;
65096: LD_ADDR_VAR 0 7
65100: PUSH
65101: LD_VAR 0 2
65105: PPUSH
65106: CALL_OW 250
65110: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65111: LD_ADDR_VAR 0 8
65115: PUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: CALL_OW 251
65125: ST_TO_ADDR
// if not x or not y then
65126: LD_VAR 0 7
65130: NOT
65131: PUSH
65132: LD_VAR 0 8
65136: NOT
65137: OR
65138: IFFALSE 65142
// exit ;
65140: GO 65537
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65142: LD_ADDR_VAR 0 6
65146: PUSH
65147: LD_VAR 0 7
65151: PPUSH
65152: LD_INT 0
65154: PPUSH
65155: LD_INT 4
65157: PPUSH
65158: CALL_OW 272
65162: PUSH
65163: LD_VAR 0 8
65167: PPUSH
65168: LD_INT 0
65170: PPUSH
65171: LD_INT 4
65173: PPUSH
65174: CALL_OW 273
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_VAR 0 7
65187: PPUSH
65188: LD_INT 1
65190: PPUSH
65191: LD_INT 4
65193: PPUSH
65194: CALL_OW 272
65198: PUSH
65199: LD_VAR 0 8
65203: PPUSH
65204: LD_INT 1
65206: PPUSH
65207: LD_INT 4
65209: PPUSH
65210: CALL_OW 273
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_VAR 0 7
65223: PPUSH
65224: LD_INT 2
65226: PPUSH
65227: LD_INT 4
65229: PPUSH
65230: CALL_OW 272
65234: PUSH
65235: LD_VAR 0 8
65239: PPUSH
65240: LD_INT 2
65242: PPUSH
65243: LD_INT 4
65245: PPUSH
65246: CALL_OW 273
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_VAR 0 7
65259: PPUSH
65260: LD_INT 3
65262: PPUSH
65263: LD_INT 4
65265: PPUSH
65266: CALL_OW 272
65270: PUSH
65271: LD_VAR 0 8
65275: PPUSH
65276: LD_INT 3
65278: PPUSH
65279: LD_INT 4
65281: PPUSH
65282: CALL_OW 273
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_VAR 0 7
65295: PPUSH
65296: LD_INT 4
65298: PPUSH
65299: LD_INT 4
65301: PPUSH
65302: CALL_OW 272
65306: PUSH
65307: LD_VAR 0 8
65311: PPUSH
65312: LD_INT 4
65314: PPUSH
65315: LD_INT 4
65317: PPUSH
65318: CALL_OW 273
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_VAR 0 7
65331: PPUSH
65332: LD_INT 5
65334: PPUSH
65335: LD_INT 4
65337: PPUSH
65338: CALL_OW 272
65342: PUSH
65343: LD_VAR 0 8
65347: PPUSH
65348: LD_INT 5
65350: PPUSH
65351: LD_INT 4
65353: PPUSH
65354: CALL_OW 273
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// for i = tmp downto 1 do
65371: LD_ADDR_VAR 0 4
65375: PUSH
65376: DOUBLE
65377: LD_VAR 0 6
65381: INC
65382: ST_TO_ADDR
65383: LD_INT 1
65385: PUSH
65386: FOR_DOWNTO
65387: IFFALSE 65488
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65389: LD_VAR 0 6
65393: PUSH
65394: LD_VAR 0 4
65398: ARRAY
65399: PUSH
65400: LD_INT 1
65402: ARRAY
65403: PPUSH
65404: LD_VAR 0 6
65408: PUSH
65409: LD_VAR 0 4
65413: ARRAY
65414: PUSH
65415: LD_INT 2
65417: ARRAY
65418: PPUSH
65419: CALL_OW 488
65423: NOT
65424: PUSH
65425: LD_VAR 0 6
65429: PUSH
65430: LD_VAR 0 4
65434: ARRAY
65435: PUSH
65436: LD_INT 1
65438: ARRAY
65439: PPUSH
65440: LD_VAR 0 6
65444: PUSH
65445: LD_VAR 0 4
65449: ARRAY
65450: PUSH
65451: LD_INT 2
65453: ARRAY
65454: PPUSH
65455: CALL_OW 428
65459: PUSH
65460: LD_INT 0
65462: NONEQUAL
65463: OR
65464: IFFALSE 65486
// tmp := Delete ( tmp , i ) ;
65466: LD_ADDR_VAR 0 6
65470: PUSH
65471: LD_VAR 0 6
65475: PPUSH
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL_OW 3
65485: ST_TO_ADDR
65486: GO 65386
65488: POP
65489: POP
// j := GetClosestHex ( unit , tmp ) ;
65490: LD_ADDR_VAR 0 5
65494: PUSH
65495: LD_VAR 0 1
65499: PPUSH
65500: LD_VAR 0 6
65504: PPUSH
65505: CALL 64781 0 2
65509: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65510: LD_VAR 0 1
65514: PPUSH
65515: LD_VAR 0 5
65519: PUSH
65520: LD_INT 1
65522: ARRAY
65523: PPUSH
65524: LD_VAR 0 5
65528: PUSH
65529: LD_INT 2
65531: ARRAY
65532: PPUSH
65533: CALL_OW 111
// end ;
65537: LD_VAR 0 3
65541: RET
// export function PrepareApemanSoldier ( ) ; begin
65542: LD_INT 0
65544: PPUSH
// uc_nation := 0 ;
65545: LD_ADDR_OWVAR 21
65549: PUSH
65550: LD_INT 0
65552: ST_TO_ADDR
// hc_sex := sex_male ;
65553: LD_ADDR_OWVAR 27
65557: PUSH
65558: LD_INT 1
65560: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65561: LD_ADDR_OWVAR 28
65565: PUSH
65566: LD_INT 15
65568: ST_TO_ADDR
// hc_gallery :=  ;
65569: LD_ADDR_OWVAR 33
65573: PUSH
65574: LD_STRING 
65576: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65577: LD_ADDR_OWVAR 31
65581: PUSH
65582: LD_INT 0
65584: PPUSH
65585: LD_INT 3
65587: PPUSH
65588: CALL_OW 12
65592: PUSH
65593: LD_INT 0
65595: PPUSH
65596: LD_INT 3
65598: PPUSH
65599: CALL_OW 12
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: ST_TO_ADDR
// end ;
65616: LD_VAR 0 1
65620: RET
// export function PrepareApemanEngineer ( ) ; begin
65621: LD_INT 0
65623: PPUSH
// uc_nation := 0 ;
65624: LD_ADDR_OWVAR 21
65628: PUSH
65629: LD_INT 0
65631: ST_TO_ADDR
// hc_sex := sex_male ;
65632: LD_ADDR_OWVAR 27
65636: PUSH
65637: LD_INT 1
65639: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65640: LD_ADDR_OWVAR 28
65644: PUSH
65645: LD_INT 16
65647: ST_TO_ADDR
// hc_gallery :=  ;
65648: LD_ADDR_OWVAR 33
65652: PUSH
65653: LD_STRING 
65655: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65656: LD_ADDR_OWVAR 31
65660: PUSH
65661: LD_INT 0
65663: PPUSH
65664: LD_INT 3
65666: PPUSH
65667: CALL_OW 12
65671: PUSH
65672: LD_INT 0
65674: PPUSH
65675: LD_INT 3
65677: PPUSH
65678: CALL_OW 12
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// end ;
65695: LD_VAR 0 1
65699: RET
// export function PrepareApeman ( agressivity ) ; begin
65700: LD_INT 0
65702: PPUSH
// uc_side := 0 ;
65703: LD_ADDR_OWVAR 20
65707: PUSH
65708: LD_INT 0
65710: ST_TO_ADDR
// uc_nation := 0 ;
65711: LD_ADDR_OWVAR 21
65715: PUSH
65716: LD_INT 0
65718: ST_TO_ADDR
// hc_sex := sex_male ;
65719: LD_ADDR_OWVAR 27
65723: PUSH
65724: LD_INT 1
65726: ST_TO_ADDR
// hc_class := class_apeman ;
65727: LD_ADDR_OWVAR 28
65731: PUSH
65732: LD_INT 12
65734: ST_TO_ADDR
// hc_gallery :=  ;
65735: LD_ADDR_OWVAR 33
65739: PUSH
65740: LD_STRING 
65742: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65743: LD_ADDR_OWVAR 35
65747: PUSH
65748: LD_VAR 0 1
65752: NEG
65753: PPUSH
65754: LD_VAR 0 1
65758: PPUSH
65759: CALL_OW 12
65763: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65764: LD_ADDR_OWVAR 31
65768: PUSH
65769: LD_INT 0
65771: PPUSH
65772: LD_INT 3
65774: PPUSH
65775: CALL_OW 12
65779: PUSH
65780: LD_INT 0
65782: PPUSH
65783: LD_INT 3
65785: PPUSH
65786: CALL_OW 12
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// end ;
65803: LD_VAR 0 2
65807: RET
// export function PrepareTiger ( agressivity ) ; begin
65808: LD_INT 0
65810: PPUSH
// uc_side := 0 ;
65811: LD_ADDR_OWVAR 20
65815: PUSH
65816: LD_INT 0
65818: ST_TO_ADDR
// uc_nation := 0 ;
65819: LD_ADDR_OWVAR 21
65823: PUSH
65824: LD_INT 0
65826: ST_TO_ADDR
// hc_class := class_tiger ;
65827: LD_ADDR_OWVAR 28
65831: PUSH
65832: LD_INT 14
65834: ST_TO_ADDR
// hc_gallery :=  ;
65835: LD_ADDR_OWVAR 33
65839: PUSH
65840: LD_STRING 
65842: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65843: LD_ADDR_OWVAR 35
65847: PUSH
65848: LD_VAR 0 1
65852: NEG
65853: PPUSH
65854: LD_VAR 0 1
65858: PPUSH
65859: CALL_OW 12
65863: ST_TO_ADDR
// end ;
65864: LD_VAR 0 2
65868: RET
// export function PrepareEnchidna ( ) ; begin
65869: LD_INT 0
65871: PPUSH
// uc_side := 0 ;
65872: LD_ADDR_OWVAR 20
65876: PUSH
65877: LD_INT 0
65879: ST_TO_ADDR
// uc_nation := 0 ;
65880: LD_ADDR_OWVAR 21
65884: PUSH
65885: LD_INT 0
65887: ST_TO_ADDR
// hc_class := class_baggie ;
65888: LD_ADDR_OWVAR 28
65892: PUSH
65893: LD_INT 13
65895: ST_TO_ADDR
// hc_gallery :=  ;
65896: LD_ADDR_OWVAR 33
65900: PUSH
65901: LD_STRING 
65903: ST_TO_ADDR
// end ;
65904: LD_VAR 0 1
65908: RET
// export function PrepareFrog ( ) ; begin
65909: LD_INT 0
65911: PPUSH
// uc_side := 0 ;
65912: LD_ADDR_OWVAR 20
65916: PUSH
65917: LD_INT 0
65919: ST_TO_ADDR
// uc_nation := 0 ;
65920: LD_ADDR_OWVAR 21
65924: PUSH
65925: LD_INT 0
65927: ST_TO_ADDR
// hc_class := class_frog ;
65928: LD_ADDR_OWVAR 28
65932: PUSH
65933: LD_INT 19
65935: ST_TO_ADDR
// hc_gallery :=  ;
65936: LD_ADDR_OWVAR 33
65940: PUSH
65941: LD_STRING 
65943: ST_TO_ADDR
// end ;
65944: LD_VAR 0 1
65948: RET
// export function PrepareFish ( ) ; begin
65949: LD_INT 0
65951: PPUSH
// uc_side := 0 ;
65952: LD_ADDR_OWVAR 20
65956: PUSH
65957: LD_INT 0
65959: ST_TO_ADDR
// uc_nation := 0 ;
65960: LD_ADDR_OWVAR 21
65964: PUSH
65965: LD_INT 0
65967: ST_TO_ADDR
// hc_class := class_fish ;
65968: LD_ADDR_OWVAR 28
65972: PUSH
65973: LD_INT 20
65975: ST_TO_ADDR
// hc_gallery :=  ;
65976: LD_ADDR_OWVAR 33
65980: PUSH
65981: LD_STRING 
65983: ST_TO_ADDR
// end ;
65984: LD_VAR 0 1
65988: RET
// export function PrepareBird ( ) ; begin
65989: LD_INT 0
65991: PPUSH
// uc_side := 0 ;
65992: LD_ADDR_OWVAR 20
65996: PUSH
65997: LD_INT 0
65999: ST_TO_ADDR
// uc_nation := 0 ;
66000: LD_ADDR_OWVAR 21
66004: PUSH
66005: LD_INT 0
66007: ST_TO_ADDR
// hc_class := class_phororhacos ;
66008: LD_ADDR_OWVAR 28
66012: PUSH
66013: LD_INT 18
66015: ST_TO_ADDR
// hc_gallery :=  ;
66016: LD_ADDR_OWVAR 33
66020: PUSH
66021: LD_STRING 
66023: ST_TO_ADDR
// end ;
66024: LD_VAR 0 1
66028: RET
// export function PrepareHorse ( ) ; begin
66029: LD_INT 0
66031: PPUSH
// uc_side := 0 ;
66032: LD_ADDR_OWVAR 20
66036: PUSH
66037: LD_INT 0
66039: ST_TO_ADDR
// uc_nation := 0 ;
66040: LD_ADDR_OWVAR 21
66044: PUSH
66045: LD_INT 0
66047: ST_TO_ADDR
// hc_class := class_horse ;
66048: LD_ADDR_OWVAR 28
66052: PUSH
66053: LD_INT 21
66055: ST_TO_ADDR
// hc_gallery :=  ;
66056: LD_ADDR_OWVAR 33
66060: PUSH
66061: LD_STRING 
66063: ST_TO_ADDR
// end ;
66064: LD_VAR 0 1
66068: RET
// export function PrepareMastodont ( ) ; begin
66069: LD_INT 0
66071: PPUSH
// uc_side := 0 ;
66072: LD_ADDR_OWVAR 20
66076: PUSH
66077: LD_INT 0
66079: ST_TO_ADDR
// uc_nation := 0 ;
66080: LD_ADDR_OWVAR 21
66084: PUSH
66085: LD_INT 0
66087: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66088: LD_ADDR_OWVAR 37
66092: PUSH
66093: LD_INT 31
66095: ST_TO_ADDR
// vc_control := control_rider ;
66096: LD_ADDR_OWVAR 38
66100: PUSH
66101: LD_INT 4
66103: ST_TO_ADDR
// end ;
66104: LD_VAR 0 1
66108: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66109: LD_INT 0
66111: PPUSH
66112: PPUSH
66113: PPUSH
// uc_side = 0 ;
66114: LD_ADDR_OWVAR 20
66118: PUSH
66119: LD_INT 0
66121: ST_TO_ADDR
// uc_nation = 0 ;
66122: LD_ADDR_OWVAR 21
66126: PUSH
66127: LD_INT 0
66129: ST_TO_ADDR
// InitHc_All ( ) ;
66130: CALL_OW 584
// InitVc ;
66134: CALL_OW 20
// if mastodonts then
66138: LD_VAR 0 6
66142: IFFALSE 66209
// for i = 1 to mastodonts do
66144: LD_ADDR_VAR 0 11
66148: PUSH
66149: DOUBLE
66150: LD_INT 1
66152: DEC
66153: ST_TO_ADDR
66154: LD_VAR 0 6
66158: PUSH
66159: FOR_TO
66160: IFFALSE 66207
// begin vc_chassis := 31 ;
66162: LD_ADDR_OWVAR 37
66166: PUSH
66167: LD_INT 31
66169: ST_TO_ADDR
// vc_control := control_rider ;
66170: LD_ADDR_OWVAR 38
66174: PUSH
66175: LD_INT 4
66177: ST_TO_ADDR
// animal := CreateVehicle ;
66178: LD_ADDR_VAR 0 12
66182: PUSH
66183: CALL_OW 45
66187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66188: LD_VAR 0 12
66192: PPUSH
66193: LD_VAR 0 8
66197: PPUSH
66198: LD_INT 0
66200: PPUSH
66201: CALL 68337 0 3
// end ;
66205: GO 66159
66207: POP
66208: POP
// if horses then
66209: LD_VAR 0 5
66213: IFFALSE 66280
// for i = 1 to horses do
66215: LD_ADDR_VAR 0 11
66219: PUSH
66220: DOUBLE
66221: LD_INT 1
66223: DEC
66224: ST_TO_ADDR
66225: LD_VAR 0 5
66229: PUSH
66230: FOR_TO
66231: IFFALSE 66278
// begin hc_class := 21 ;
66233: LD_ADDR_OWVAR 28
66237: PUSH
66238: LD_INT 21
66240: ST_TO_ADDR
// hc_gallery :=  ;
66241: LD_ADDR_OWVAR 33
66245: PUSH
66246: LD_STRING 
66248: ST_TO_ADDR
// animal := CreateHuman ;
66249: LD_ADDR_VAR 0 12
66253: PUSH
66254: CALL_OW 44
66258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66259: LD_VAR 0 12
66263: PPUSH
66264: LD_VAR 0 8
66268: PPUSH
66269: LD_INT 0
66271: PPUSH
66272: CALL 68337 0 3
// end ;
66276: GO 66230
66278: POP
66279: POP
// if birds then
66280: LD_VAR 0 1
66284: IFFALSE 66351
// for i = 1 to birds do
66286: LD_ADDR_VAR 0 11
66290: PUSH
66291: DOUBLE
66292: LD_INT 1
66294: DEC
66295: ST_TO_ADDR
66296: LD_VAR 0 1
66300: PUSH
66301: FOR_TO
66302: IFFALSE 66349
// begin hc_class := 18 ;
66304: LD_ADDR_OWVAR 28
66308: PUSH
66309: LD_INT 18
66311: ST_TO_ADDR
// hc_gallery =  ;
66312: LD_ADDR_OWVAR 33
66316: PUSH
66317: LD_STRING 
66319: ST_TO_ADDR
// animal := CreateHuman ;
66320: LD_ADDR_VAR 0 12
66324: PUSH
66325: CALL_OW 44
66329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66330: LD_VAR 0 12
66334: PPUSH
66335: LD_VAR 0 8
66339: PPUSH
66340: LD_INT 0
66342: PPUSH
66343: CALL 68337 0 3
// end ;
66347: GO 66301
66349: POP
66350: POP
// if tigers then
66351: LD_VAR 0 2
66355: IFFALSE 66439
// for i = 1 to tigers do
66357: LD_ADDR_VAR 0 11
66361: PUSH
66362: DOUBLE
66363: LD_INT 1
66365: DEC
66366: ST_TO_ADDR
66367: LD_VAR 0 2
66371: PUSH
66372: FOR_TO
66373: IFFALSE 66437
// begin hc_class = class_tiger ;
66375: LD_ADDR_OWVAR 28
66379: PUSH
66380: LD_INT 14
66382: ST_TO_ADDR
// hc_gallery =  ;
66383: LD_ADDR_OWVAR 33
66387: PUSH
66388: LD_STRING 
66390: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66391: LD_ADDR_OWVAR 35
66395: PUSH
66396: LD_INT 7
66398: NEG
66399: PPUSH
66400: LD_INT 7
66402: PPUSH
66403: CALL_OW 12
66407: ST_TO_ADDR
// animal := CreateHuman ;
66408: LD_ADDR_VAR 0 12
66412: PUSH
66413: CALL_OW 44
66417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66418: LD_VAR 0 12
66422: PPUSH
66423: LD_VAR 0 8
66427: PPUSH
66428: LD_INT 0
66430: PPUSH
66431: CALL 68337 0 3
// end ;
66435: GO 66372
66437: POP
66438: POP
// if apemans then
66439: LD_VAR 0 3
66443: IFFALSE 66566
// for i = 1 to apemans do
66445: LD_ADDR_VAR 0 11
66449: PUSH
66450: DOUBLE
66451: LD_INT 1
66453: DEC
66454: ST_TO_ADDR
66455: LD_VAR 0 3
66459: PUSH
66460: FOR_TO
66461: IFFALSE 66564
// begin hc_class = class_apeman ;
66463: LD_ADDR_OWVAR 28
66467: PUSH
66468: LD_INT 12
66470: ST_TO_ADDR
// hc_gallery =  ;
66471: LD_ADDR_OWVAR 33
66475: PUSH
66476: LD_STRING 
66478: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66479: LD_ADDR_OWVAR 35
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PPUSH
66488: LD_INT 2
66490: PPUSH
66491: CALL_OW 12
66495: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66496: LD_ADDR_OWVAR 31
66500: PUSH
66501: LD_INT 1
66503: PPUSH
66504: LD_INT 3
66506: PPUSH
66507: CALL_OW 12
66511: PUSH
66512: LD_INT 1
66514: PPUSH
66515: LD_INT 3
66517: PPUSH
66518: CALL_OW 12
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// animal := CreateHuman ;
66535: LD_ADDR_VAR 0 12
66539: PUSH
66540: CALL_OW 44
66544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66545: LD_VAR 0 12
66549: PPUSH
66550: LD_VAR 0 8
66554: PPUSH
66555: LD_INT 0
66557: PPUSH
66558: CALL 68337 0 3
// end ;
66562: GO 66460
66564: POP
66565: POP
// if enchidnas then
66566: LD_VAR 0 4
66570: IFFALSE 66637
// for i = 1 to enchidnas do
66572: LD_ADDR_VAR 0 11
66576: PUSH
66577: DOUBLE
66578: LD_INT 1
66580: DEC
66581: ST_TO_ADDR
66582: LD_VAR 0 4
66586: PUSH
66587: FOR_TO
66588: IFFALSE 66635
// begin hc_class = 13 ;
66590: LD_ADDR_OWVAR 28
66594: PUSH
66595: LD_INT 13
66597: ST_TO_ADDR
// hc_gallery =  ;
66598: LD_ADDR_OWVAR 33
66602: PUSH
66603: LD_STRING 
66605: ST_TO_ADDR
// animal := CreateHuman ;
66606: LD_ADDR_VAR 0 12
66610: PUSH
66611: CALL_OW 44
66615: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66616: LD_VAR 0 12
66620: PPUSH
66621: LD_VAR 0 8
66625: PPUSH
66626: LD_INT 0
66628: PPUSH
66629: CALL 68337 0 3
// end ;
66633: GO 66587
66635: POP
66636: POP
// if fishes then
66637: LD_VAR 0 7
66641: IFFALSE 66708
// for i = 1 to fishes do
66643: LD_ADDR_VAR 0 11
66647: PUSH
66648: DOUBLE
66649: LD_INT 1
66651: DEC
66652: ST_TO_ADDR
66653: LD_VAR 0 7
66657: PUSH
66658: FOR_TO
66659: IFFALSE 66706
// begin hc_class = 20 ;
66661: LD_ADDR_OWVAR 28
66665: PUSH
66666: LD_INT 20
66668: ST_TO_ADDR
// hc_gallery =  ;
66669: LD_ADDR_OWVAR 33
66673: PUSH
66674: LD_STRING 
66676: ST_TO_ADDR
// animal := CreateHuman ;
66677: LD_ADDR_VAR 0 12
66681: PUSH
66682: CALL_OW 44
66686: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66687: LD_VAR 0 12
66691: PPUSH
66692: LD_VAR 0 9
66696: PPUSH
66697: LD_INT 0
66699: PPUSH
66700: CALL 68337 0 3
// end ;
66704: GO 66658
66706: POP
66707: POP
// end ;
66708: LD_VAR 0 10
66712: RET
// export function WantHeal ( sci , unit ) ; begin
66713: LD_INT 0
66715: PPUSH
// if GetTaskList ( sci ) > 0 then
66716: LD_VAR 0 1
66720: PPUSH
66721: CALL_OW 437
66725: PUSH
66726: LD_INT 0
66728: GREATER
66729: IFFALSE 66799
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66731: LD_VAR 0 1
66735: PPUSH
66736: CALL_OW 437
66740: PUSH
66741: LD_INT 1
66743: ARRAY
66744: PUSH
66745: LD_INT 1
66747: ARRAY
66748: PUSH
66749: LD_STRING l
66751: EQUAL
66752: PUSH
66753: LD_VAR 0 1
66757: PPUSH
66758: CALL_OW 437
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: PUSH
66767: LD_INT 4
66769: ARRAY
66770: PUSH
66771: LD_VAR 0 2
66775: EQUAL
66776: AND
66777: IFFALSE 66789
// result := true else
66779: LD_ADDR_VAR 0 3
66783: PUSH
66784: LD_INT 1
66786: ST_TO_ADDR
66787: GO 66797
// result := false ;
66789: LD_ADDR_VAR 0 3
66793: PUSH
66794: LD_INT 0
66796: ST_TO_ADDR
// end else
66797: GO 66807
// result := false ;
66799: LD_ADDR_VAR 0 3
66803: PUSH
66804: LD_INT 0
66806: ST_TO_ADDR
// end ;
66807: LD_VAR 0 3
66811: RET
// export function HealTarget ( sci ) ; begin
66812: LD_INT 0
66814: PPUSH
// if not sci then
66815: LD_VAR 0 1
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66889
// result := 0 ;
66824: LD_ADDR_VAR 0 2
66828: PUSH
66829: LD_INT 0
66831: ST_TO_ADDR
// if GetTaskList ( sci ) then
66832: LD_VAR 0 1
66836: PPUSH
66837: CALL_OW 437
66841: IFFALSE 66889
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66843: LD_VAR 0 1
66847: PPUSH
66848: CALL_OW 437
66852: PUSH
66853: LD_INT 1
66855: ARRAY
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PUSH
66861: LD_STRING l
66863: EQUAL
66864: IFFALSE 66889
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66866: LD_ADDR_VAR 0 2
66870: PUSH
66871: LD_VAR 0 1
66875: PPUSH
66876: CALL_OW 437
66880: PUSH
66881: LD_INT 1
66883: ARRAY
66884: PUSH
66885: LD_INT 4
66887: ARRAY
66888: ST_TO_ADDR
// end ;
66889: LD_VAR 0 2
66893: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66894: LD_INT 0
66896: PPUSH
66897: PPUSH
66898: PPUSH
66899: PPUSH
// if not base_units then
66900: LD_VAR 0 1
66904: NOT
66905: IFFALSE 66909
// exit ;
66907: GO 66996
// result := false ;
66909: LD_ADDR_VAR 0 2
66913: PUSH
66914: LD_INT 0
66916: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66917: LD_ADDR_VAR 0 5
66921: PUSH
66922: LD_VAR 0 1
66926: PPUSH
66927: LD_INT 21
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PPUSH
66937: CALL_OW 72
66941: ST_TO_ADDR
// if not tmp then
66942: LD_VAR 0 5
66946: NOT
66947: IFFALSE 66951
// exit ;
66949: GO 66996
// for i in tmp do
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_VAR 0 5
66960: PUSH
66961: FOR_IN
66962: IFFALSE 66994
// begin result := EnemyInRange ( i , 22 ) ;
66964: LD_ADDR_VAR 0 2
66968: PUSH
66969: LD_VAR 0 3
66973: PPUSH
66974: LD_INT 22
66976: PPUSH
66977: CALL 64583 0 2
66981: ST_TO_ADDR
// if result then
66982: LD_VAR 0 2
66986: IFFALSE 66992
// exit ;
66988: POP
66989: POP
66990: GO 66996
// end ;
66992: GO 66961
66994: POP
66995: POP
// end ;
66996: LD_VAR 0 2
67000: RET
// export function FilterByTag ( units , tag ) ; begin
67001: LD_INT 0
67003: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67004: LD_ADDR_VAR 0 3
67008: PUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_INT 120
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PPUSH
67026: CALL_OW 72
67030: ST_TO_ADDR
// end ;
67031: LD_VAR 0 3
67035: RET
// export function IsDriver ( un ) ; begin
67036: LD_INT 0
67038: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67039: LD_ADDR_VAR 0 2
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_INT 55
67051: PUSH
67052: EMPTY
67053: LIST
67054: PPUSH
67055: CALL_OW 69
67059: IN
67060: ST_TO_ADDR
// end ;
67061: LD_VAR 0 2
67065: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67066: LD_INT 0
67068: PPUSH
67069: PPUSH
// list := [ ] ;
67070: LD_ADDR_VAR 0 5
67074: PUSH
67075: EMPTY
67076: ST_TO_ADDR
// case d of 0 :
67077: LD_VAR 0 3
67081: PUSH
67082: LD_INT 0
67084: DOUBLE
67085: EQUAL
67086: IFTRUE 67090
67088: GO 67223
67090: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67091: LD_ADDR_VAR 0 5
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_INT 4
67103: MINUS
67104: PUSH
67105: LD_VAR 0 2
67109: PUSH
67110: LD_INT 4
67112: MINUS
67113: PUSH
67114: LD_INT 2
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: PUSH
67122: LD_VAR 0 1
67126: PUSH
67127: LD_INT 3
67129: MINUS
67130: PUSH
67131: LD_VAR 0 2
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: PUSH
67144: LD_VAR 0 1
67148: PUSH
67149: LD_INT 4
67151: PLUS
67152: PUSH
67153: LD_VAR 0 2
67157: PUSH
67158: LD_INT 4
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: PUSH
67166: LD_VAR 0 1
67170: PUSH
67171: LD_INT 3
67173: PLUS
67174: PUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 3
67182: PLUS
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: PUSH
67192: LD_VAR 0 1
67196: PUSH
67197: LD_VAR 0 2
67201: PUSH
67202: LD_INT 4
67204: PLUS
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// end ; 1 :
67221: GO 67921
67223: LD_INT 1
67225: DOUBLE
67226: EQUAL
67227: IFTRUE 67231
67229: GO 67364
67231: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67232: LD_ADDR_VAR 0 5
67236: PUSH
67237: LD_VAR 0 1
67241: PUSH
67242: LD_VAR 0 2
67246: PUSH
67247: LD_INT 4
67249: MINUS
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: LD_VAR 0 1
67263: PUSH
67264: LD_INT 3
67266: MINUS
67267: PUSH
67268: LD_VAR 0 2
67272: PUSH
67273: LD_INT 3
67275: MINUS
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: PUSH
67285: LD_VAR 0 1
67289: PUSH
67290: LD_INT 4
67292: MINUS
67293: PUSH
67294: LD_VAR 0 2
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: LIST
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_VAR 0 2
67316: PUSH
67317: LD_INT 3
67319: PLUS
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: PUSH
67329: LD_VAR 0 1
67333: PUSH
67334: LD_INT 4
67336: PLUS
67337: PUSH
67338: LD_VAR 0 2
67342: PUSH
67343: LD_INT 4
67345: PLUS
67346: PUSH
67347: LD_INT 5
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// end ; 2 :
67362: GO 67921
67364: LD_INT 2
67366: DOUBLE
67367: EQUAL
67368: IFTRUE 67372
67370: GO 67501
67372: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67373: LD_ADDR_VAR 0 5
67377: PUSH
67378: LD_VAR 0 1
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_INT 3
67390: MINUS
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: LD_INT 4
67407: PLUS
67408: PUSH
67409: LD_VAR 0 2
67413: PUSH
67414: LD_INT 4
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: PUSH
67422: LD_VAR 0 1
67426: PUSH
67427: LD_VAR 0 2
67431: PUSH
67432: LD_INT 4
67434: PLUS
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PUSH
67444: LD_VAR 0 1
67448: PUSH
67449: LD_INT 3
67451: MINUS
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: PUSH
67466: LD_VAR 0 1
67470: PUSH
67471: LD_INT 4
67473: MINUS
67474: PUSH
67475: LD_VAR 0 2
67479: PUSH
67480: LD_INT 4
67482: MINUS
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: ST_TO_ADDR
// end ; 3 :
67499: GO 67921
67501: LD_INT 3
67503: DOUBLE
67504: EQUAL
67505: IFTRUE 67509
67507: GO 67642
67509: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67510: LD_ADDR_VAR 0 5
67514: PUSH
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 3
67522: PLUS
67523: PUSH
67524: LD_VAR 0 2
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: PUSH
67537: LD_VAR 0 1
67541: PUSH
67542: LD_INT 4
67544: PLUS
67545: PUSH
67546: LD_VAR 0 2
67550: PUSH
67551: LD_INT 4
67553: PLUS
67554: PUSH
67555: LD_INT 5
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: LIST
67562: PUSH
67563: LD_VAR 0 1
67567: PUSH
67568: LD_INT 4
67570: MINUS
67571: PUSH
67572: LD_VAR 0 2
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: PUSH
67585: LD_VAR 0 1
67589: PUSH
67590: LD_VAR 0 2
67594: PUSH
67595: LD_INT 4
67597: MINUS
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: LIST
67606: PUSH
67607: LD_VAR 0 1
67611: PUSH
67612: LD_INT 3
67614: MINUS
67615: PUSH
67616: LD_VAR 0 2
67620: PUSH
67621: LD_INT 3
67623: MINUS
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: ST_TO_ADDR
// end ; 4 :
67640: GO 67921
67642: LD_INT 4
67644: DOUBLE
67645: EQUAL
67646: IFTRUE 67650
67648: GO 67783
67650: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67651: LD_ADDR_VAR 0 5
67655: PUSH
67656: LD_VAR 0 1
67660: PUSH
67661: LD_VAR 0 2
67665: PUSH
67666: LD_INT 4
67668: PLUS
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: PUSH
67678: LD_VAR 0 1
67682: PUSH
67683: LD_INT 3
67685: PLUS
67686: PUSH
67687: LD_VAR 0 2
67691: PUSH
67692: LD_INT 3
67694: PLUS
67695: PUSH
67696: LD_INT 5
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: PUSH
67704: LD_VAR 0 1
67708: PUSH
67709: LD_INT 4
67711: PLUS
67712: PUSH
67713: LD_VAR 0 2
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: LIST
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_VAR 0 2
67735: PUSH
67736: LD_INT 3
67738: MINUS
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: LIST
67747: PUSH
67748: LD_VAR 0 1
67752: PUSH
67753: LD_INT 4
67755: MINUS
67756: PUSH
67757: LD_VAR 0 2
67761: PUSH
67762: LD_INT 4
67764: MINUS
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// end ; 5 :
67781: GO 67921
67783: LD_INT 5
67785: DOUBLE
67786: EQUAL
67787: IFTRUE 67791
67789: GO 67920
67791: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67792: LD_ADDR_VAR 0 5
67796: PUSH
67797: LD_VAR 0 1
67801: PUSH
67802: LD_INT 4
67804: MINUS
67805: PUSH
67806: LD_VAR 0 2
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: PUSH
67819: LD_VAR 0 1
67823: PUSH
67824: LD_VAR 0 2
67828: PUSH
67829: LD_INT 4
67831: MINUS
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: PUSH
67841: LD_VAR 0 1
67845: PUSH
67846: LD_INT 4
67848: PLUS
67849: PUSH
67850: LD_VAR 0 2
67854: PUSH
67855: LD_INT 4
67857: PLUS
67858: PUSH
67859: LD_INT 5
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 3
67874: PLUS
67875: PUSH
67876: LD_VAR 0 2
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: PUSH
67889: LD_VAR 0 1
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_INT 3
67901: PLUS
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: ST_TO_ADDR
// end ; end ;
67918: GO 67921
67920: POP
// result := list ;
67921: LD_ADDR_VAR 0 4
67925: PUSH
67926: LD_VAR 0 5
67930: ST_TO_ADDR
// end ;
67931: LD_VAR 0 4
67935: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67941: LD_VAR 0 1
67945: NOT
67946: PUSH
67947: LD_VAR 0 2
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: LD_INT 4
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: IN
67970: NOT
67971: OR
67972: IFFALSE 67976
// exit ;
67974: GO 68059
// tmp := [ ] ;
67976: LD_ADDR_VAR 0 5
67980: PUSH
67981: EMPTY
67982: ST_TO_ADDR
// for i in units do
67983: LD_ADDR_VAR 0 4
67987: PUSH
67988: LD_VAR 0 1
67992: PUSH
67993: FOR_IN
67994: IFFALSE 68028
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67996: LD_ADDR_VAR 0 5
68000: PUSH
68001: LD_VAR 0 5
68005: PPUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: LD_VAR 0 2
68015: PPUSH
68016: CALL_OW 259
68020: PPUSH
68021: CALL 69432 0 2
68025: ST_TO_ADDR
68026: GO 67993
68028: POP
68029: POP
// if not tmp then
68030: LD_VAR 0 5
68034: NOT
68035: IFFALSE 68039
// exit ;
68037: GO 68059
// result := SortListByListDesc ( units , tmp ) ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: LD_VAR 0 5
68053: PPUSH
68054: CALL_OW 77
68058: ST_TO_ADDR
// end ;
68059: LD_VAR 0 3
68063: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68064: LD_INT 0
68066: PPUSH
68067: PPUSH
68068: PPUSH
// result := false ;
68069: LD_ADDR_VAR 0 3
68073: PUSH
68074: LD_INT 0
68076: ST_TO_ADDR
// if not building then
68077: LD_VAR 0 2
68081: NOT
68082: IFFALSE 68086
// exit ;
68084: GO 68224
// x := GetX ( building ) ;
68086: LD_ADDR_VAR 0 4
68090: PUSH
68091: LD_VAR 0 2
68095: PPUSH
68096: CALL_OW 250
68100: ST_TO_ADDR
// y := GetY ( building ) ;
68101: LD_ADDR_VAR 0 5
68105: PUSH
68106: LD_VAR 0 2
68110: PPUSH
68111: CALL_OW 251
68115: ST_TO_ADDR
// if not x or not y then
68116: LD_VAR 0 4
68120: NOT
68121: PUSH
68122: LD_VAR 0 5
68126: NOT
68127: OR
68128: IFFALSE 68132
// exit ;
68130: GO 68224
// if GetTaskList ( unit ) then
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 437
68141: IFFALSE 68224
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68143: LD_STRING e
68145: PUSH
68146: LD_VAR 0 1
68150: PPUSH
68151: CALL_OW 437
68155: PUSH
68156: LD_INT 1
68158: ARRAY
68159: PUSH
68160: LD_INT 1
68162: ARRAY
68163: EQUAL
68164: PUSH
68165: LD_VAR 0 4
68169: PUSH
68170: LD_VAR 0 1
68174: PPUSH
68175: CALL_OW 437
68179: PUSH
68180: LD_INT 1
68182: ARRAY
68183: PUSH
68184: LD_INT 2
68186: ARRAY
68187: EQUAL
68188: AND
68189: PUSH
68190: LD_VAR 0 5
68194: PUSH
68195: LD_VAR 0 1
68199: PPUSH
68200: CALL_OW 437
68204: PUSH
68205: LD_INT 1
68207: ARRAY
68208: PUSH
68209: LD_INT 3
68211: ARRAY
68212: EQUAL
68213: AND
68214: IFFALSE 68224
// result := true end ;
68216: LD_ADDR_VAR 0 3
68220: PUSH
68221: LD_INT 1
68223: ST_TO_ADDR
// end ;
68224: LD_VAR 0 3
68228: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68229: LD_INT 0
68231: PPUSH
// result := false ;
68232: LD_ADDR_VAR 0 4
68236: PUSH
68237: LD_INT 0
68239: ST_TO_ADDR
// if GetTaskList ( unit ) then
68240: LD_VAR 0 1
68244: PPUSH
68245: CALL_OW 437
68249: IFFALSE 68332
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68251: LD_STRING M
68253: PUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: CALL_OW 437
68263: PUSH
68264: LD_INT 1
68266: ARRAY
68267: PUSH
68268: LD_INT 1
68270: ARRAY
68271: EQUAL
68272: PUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_VAR 0 1
68282: PPUSH
68283: CALL_OW 437
68287: PUSH
68288: LD_INT 1
68290: ARRAY
68291: PUSH
68292: LD_INT 2
68294: ARRAY
68295: EQUAL
68296: AND
68297: PUSH
68298: LD_VAR 0 3
68302: PUSH
68303: LD_VAR 0 1
68307: PPUSH
68308: CALL_OW 437
68312: PUSH
68313: LD_INT 1
68315: ARRAY
68316: PUSH
68317: LD_INT 3
68319: ARRAY
68320: EQUAL
68321: AND
68322: IFFALSE 68332
// result := true ;
68324: LD_ADDR_VAR 0 4
68328: PUSH
68329: LD_INT 1
68331: ST_TO_ADDR
// end ; end ;
68332: LD_VAR 0 4
68336: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68337: LD_INT 0
68339: PPUSH
68340: PPUSH
68341: PPUSH
68342: PPUSH
// if not unit or not area then
68343: LD_VAR 0 1
68347: NOT
68348: PUSH
68349: LD_VAR 0 2
68353: NOT
68354: OR
68355: IFFALSE 68359
// exit ;
68357: GO 68535
// tmp := AreaToList ( area , i ) ;
68359: LD_ADDR_VAR 0 6
68363: PUSH
68364: LD_VAR 0 2
68368: PPUSH
68369: LD_VAR 0 5
68373: PPUSH
68374: CALL_OW 517
68378: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68379: LD_ADDR_VAR 0 5
68383: PUSH
68384: DOUBLE
68385: LD_INT 1
68387: DEC
68388: ST_TO_ADDR
68389: LD_VAR 0 6
68393: PUSH
68394: LD_INT 1
68396: ARRAY
68397: PUSH
68398: FOR_TO
68399: IFFALSE 68533
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68401: LD_ADDR_VAR 0 7
68405: PUSH
68406: LD_VAR 0 6
68410: PUSH
68411: LD_INT 1
68413: ARRAY
68414: PUSH
68415: LD_VAR 0 5
68419: ARRAY
68420: PUSH
68421: LD_VAR 0 6
68425: PUSH
68426: LD_INT 2
68428: ARRAY
68429: PUSH
68430: LD_VAR 0 5
68434: ARRAY
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68440: LD_INT 92
68442: PUSH
68443: LD_VAR 0 7
68447: PUSH
68448: LD_INT 1
68450: ARRAY
68451: PUSH
68452: LD_VAR 0 7
68456: PUSH
68457: LD_INT 2
68459: ARRAY
68460: PUSH
68461: LD_INT 2
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: PPUSH
68470: CALL_OW 69
68474: PUSH
68475: LD_INT 0
68477: EQUAL
68478: IFFALSE 68531
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68480: LD_VAR 0 1
68484: PPUSH
68485: LD_VAR 0 7
68489: PUSH
68490: LD_INT 1
68492: ARRAY
68493: PPUSH
68494: LD_VAR 0 7
68498: PUSH
68499: LD_INT 2
68501: ARRAY
68502: PPUSH
68503: LD_VAR 0 3
68507: PPUSH
68508: CALL_OW 48
// result := IsPlaced ( unit ) ;
68512: LD_ADDR_VAR 0 4
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: CALL_OW 305
68526: ST_TO_ADDR
// exit ;
68527: POP
68528: POP
68529: GO 68535
// end ; end ;
68531: GO 68398
68533: POP
68534: POP
// end ;
68535: LD_VAR 0 4
68539: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68540: LD_INT 0
68542: PPUSH
68543: PPUSH
68544: PPUSH
// if not side or side > 8 then
68545: LD_VAR 0 1
68549: NOT
68550: PUSH
68551: LD_VAR 0 1
68555: PUSH
68556: LD_INT 8
68558: GREATER
68559: OR
68560: IFFALSE 68564
// exit ;
68562: GO 68751
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68564: LD_ADDR_VAR 0 4
68568: PUSH
68569: LD_INT 22
68571: PUSH
68572: LD_VAR 0 1
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 21
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PPUSH
68595: CALL_OW 69
68599: ST_TO_ADDR
// if not tmp then
68600: LD_VAR 0 4
68604: NOT
68605: IFFALSE 68609
// exit ;
68607: GO 68751
// enable_addtolog := true ;
68609: LD_ADDR_OWVAR 81
68613: PUSH
68614: LD_INT 1
68616: ST_TO_ADDR
// AddToLog ( [ ) ;
68617: LD_STRING [
68619: PPUSH
68620: CALL_OW 561
// for i in tmp do
68624: LD_ADDR_VAR 0 3
68628: PUSH
68629: LD_VAR 0 4
68633: PUSH
68634: FOR_IN
68635: IFFALSE 68742
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68637: LD_STRING [
68639: PUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: CALL_OW 266
68649: STR
68650: PUSH
68651: LD_STRING , 
68653: STR
68654: PUSH
68655: LD_VAR 0 3
68659: PPUSH
68660: CALL_OW 250
68664: STR
68665: PUSH
68666: LD_STRING , 
68668: STR
68669: PUSH
68670: LD_VAR 0 3
68674: PPUSH
68675: CALL_OW 251
68679: STR
68680: PUSH
68681: LD_STRING , 
68683: STR
68684: PUSH
68685: LD_VAR 0 3
68689: PPUSH
68690: CALL_OW 254
68694: STR
68695: PUSH
68696: LD_STRING , 
68698: STR
68699: PUSH
68700: LD_VAR 0 3
68704: PPUSH
68705: LD_INT 1
68707: PPUSH
68708: CALL_OW 268
68712: STR
68713: PUSH
68714: LD_STRING , 
68716: STR
68717: PUSH
68718: LD_VAR 0 3
68722: PPUSH
68723: LD_INT 2
68725: PPUSH
68726: CALL_OW 268
68730: STR
68731: PUSH
68732: LD_STRING ],
68734: STR
68735: PPUSH
68736: CALL_OW 561
// end ;
68740: GO 68634
68742: POP
68743: POP
// AddToLog ( ]; ) ;
68744: LD_STRING ];
68746: PPUSH
68747: CALL_OW 561
// end ;
68751: LD_VAR 0 2
68755: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68756: LD_INT 0
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
// if not area or not rate or not max then
68763: LD_VAR 0 1
68767: NOT
68768: PUSH
68769: LD_VAR 0 2
68773: NOT
68774: OR
68775: PUSH
68776: LD_VAR 0 4
68780: NOT
68781: OR
68782: IFFALSE 68786
// exit ;
68784: GO 68975
// while 1 do
68786: LD_INT 1
68788: IFFALSE 68975
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68790: LD_ADDR_VAR 0 9
68794: PUSH
68795: LD_VAR 0 1
68799: PPUSH
68800: LD_INT 1
68802: PPUSH
68803: CALL_OW 287
68807: PUSH
68808: LD_INT 10
68810: MUL
68811: ST_TO_ADDR
// r := rate / 10 ;
68812: LD_ADDR_VAR 0 7
68816: PUSH
68817: LD_VAR 0 2
68821: PUSH
68822: LD_INT 10
68824: DIVREAL
68825: ST_TO_ADDR
// time := 1 1$00 ;
68826: LD_ADDR_VAR 0 8
68830: PUSH
68831: LD_INT 2100
68833: ST_TO_ADDR
// if amount < min then
68834: LD_VAR 0 9
68838: PUSH
68839: LD_VAR 0 3
68843: LESS
68844: IFFALSE 68862
// r := r * 2 else
68846: LD_ADDR_VAR 0 7
68850: PUSH
68851: LD_VAR 0 7
68855: PUSH
68856: LD_INT 2
68858: MUL
68859: ST_TO_ADDR
68860: GO 68888
// if amount > max then
68862: LD_VAR 0 9
68866: PUSH
68867: LD_VAR 0 4
68871: GREATER
68872: IFFALSE 68888
// r := r / 2 ;
68874: LD_ADDR_VAR 0 7
68878: PUSH
68879: LD_VAR 0 7
68883: PUSH
68884: LD_INT 2
68886: DIVREAL
68887: ST_TO_ADDR
// time := time / r ;
68888: LD_ADDR_VAR 0 8
68892: PUSH
68893: LD_VAR 0 8
68897: PUSH
68898: LD_VAR 0 7
68902: DIVREAL
68903: ST_TO_ADDR
// if time < 0 then
68904: LD_VAR 0 8
68908: PUSH
68909: LD_INT 0
68911: LESS
68912: IFFALSE 68929
// time := time * - 1 ;
68914: LD_ADDR_VAR 0 8
68918: PUSH
68919: LD_VAR 0 8
68923: PUSH
68924: LD_INT 1
68926: NEG
68927: MUL
68928: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68929: LD_VAR 0 8
68933: PUSH
68934: LD_INT 35
68936: PPUSH
68937: LD_INT 875
68939: PPUSH
68940: CALL_OW 12
68944: PLUS
68945: PPUSH
68946: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68950: LD_INT 1
68952: PPUSH
68953: LD_INT 5
68955: PPUSH
68956: CALL_OW 12
68960: PPUSH
68961: LD_VAR 0 1
68965: PPUSH
68966: LD_INT 1
68968: PPUSH
68969: CALL_OW 55
// end ;
68973: GO 68786
// end ;
68975: LD_VAR 0 5
68979: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68980: LD_INT 0
68982: PPUSH
68983: PPUSH
68984: PPUSH
68985: PPUSH
68986: PPUSH
68987: PPUSH
68988: PPUSH
68989: PPUSH
// if not turrets or not factories then
68990: LD_VAR 0 1
68994: NOT
68995: PUSH
68996: LD_VAR 0 2
69000: NOT
69001: OR
69002: IFFALSE 69006
// exit ;
69004: GO 69313
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69006: LD_ADDR_VAR 0 10
69010: PUSH
69011: LD_INT 5
69013: PUSH
69014: LD_INT 6
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: PUSH
69024: LD_INT 4
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: LD_INT 5
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 24
69048: PUSH
69049: LD_INT 25
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 23
69058: PUSH
69059: LD_INT 27
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 42
69072: PUSH
69073: LD_INT 43
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 44
69082: PUSH
69083: LD_INT 46
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 45
69092: PUSH
69093: LD_INT 47
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: LIST
69109: ST_TO_ADDR
// result := [ ] ;
69110: LD_ADDR_VAR 0 3
69114: PUSH
69115: EMPTY
69116: ST_TO_ADDR
// for i in turrets do
69117: LD_ADDR_VAR 0 4
69121: PUSH
69122: LD_VAR 0 1
69126: PUSH
69127: FOR_IN
69128: IFFALSE 69311
// begin nat := GetNation ( i ) ;
69130: LD_ADDR_VAR 0 7
69134: PUSH
69135: LD_VAR 0 4
69139: PPUSH
69140: CALL_OW 248
69144: ST_TO_ADDR
// weapon := 0 ;
69145: LD_ADDR_VAR 0 8
69149: PUSH
69150: LD_INT 0
69152: ST_TO_ADDR
// if not nat then
69153: LD_VAR 0 7
69157: NOT
69158: IFFALSE 69162
// continue ;
69160: GO 69127
// for j in list [ nat ] do
69162: LD_ADDR_VAR 0 5
69166: PUSH
69167: LD_VAR 0 10
69171: PUSH
69172: LD_VAR 0 7
69176: ARRAY
69177: PUSH
69178: FOR_IN
69179: IFFALSE 69220
// if GetBWeapon ( i ) = j [ 1 ] then
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 269
69190: PUSH
69191: LD_VAR 0 5
69195: PUSH
69196: LD_INT 1
69198: ARRAY
69199: EQUAL
69200: IFFALSE 69218
// begin weapon := j [ 2 ] ;
69202: LD_ADDR_VAR 0 8
69206: PUSH
69207: LD_VAR 0 5
69211: PUSH
69212: LD_INT 2
69214: ARRAY
69215: ST_TO_ADDR
// break ;
69216: GO 69220
// end ;
69218: GO 69178
69220: POP
69221: POP
// if not weapon then
69222: LD_VAR 0 8
69226: NOT
69227: IFFALSE 69231
// continue ;
69229: GO 69127
// for k in factories do
69231: LD_ADDR_VAR 0 6
69235: PUSH
69236: LD_VAR 0 2
69240: PUSH
69241: FOR_IN
69242: IFFALSE 69307
// begin weapons := AvailableWeaponList ( k ) ;
69244: LD_ADDR_VAR 0 9
69248: PUSH
69249: LD_VAR 0 6
69253: PPUSH
69254: CALL_OW 478
69258: ST_TO_ADDR
// if not weapons then
69259: LD_VAR 0 9
69263: NOT
69264: IFFALSE 69268
// continue ;
69266: GO 69241
// if weapon in weapons then
69268: LD_VAR 0 8
69272: PUSH
69273: LD_VAR 0 9
69277: IN
69278: IFFALSE 69305
// begin result := [ i , weapon ] ;
69280: LD_ADDR_VAR 0 3
69284: PUSH
69285: LD_VAR 0 4
69289: PUSH
69290: LD_VAR 0 8
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: ST_TO_ADDR
// exit ;
69299: POP
69300: POP
69301: POP
69302: POP
69303: GO 69313
// end ; end ;
69305: GO 69241
69307: POP
69308: POP
// end ;
69309: GO 69127
69311: POP
69312: POP
// end ;
69313: LD_VAR 0 3
69317: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69318: LD_INT 0
69320: PPUSH
// if not side or side > 8 then
69321: LD_VAR 0 3
69325: NOT
69326: PUSH
69327: LD_VAR 0 3
69331: PUSH
69332: LD_INT 8
69334: GREATER
69335: OR
69336: IFFALSE 69340
// exit ;
69338: GO 69399
// if not range then
69340: LD_VAR 0 4
69344: NOT
69345: IFFALSE 69356
// range := - 12 ;
69347: LD_ADDR_VAR 0 4
69351: PUSH
69352: LD_INT 12
69354: NEG
69355: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69356: LD_VAR 0 1
69360: PPUSH
69361: LD_VAR 0 2
69365: PPUSH
69366: LD_VAR 0 3
69370: PPUSH
69371: LD_VAR 0 4
69375: PPUSH
69376: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69380: LD_VAR 0 1
69384: PPUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: LD_VAR 0 3
69394: PPUSH
69395: CALL_OW 331
// end ;
69399: LD_VAR 0 5
69403: RET
// export function Video ( mode ) ; begin
69404: LD_INT 0
69406: PPUSH
// ingame_video = mode ;
69407: LD_ADDR_OWVAR 52
69411: PUSH
69412: LD_VAR 0 1
69416: ST_TO_ADDR
// interface_hidden = mode ;
69417: LD_ADDR_OWVAR 54
69421: PUSH
69422: LD_VAR 0 1
69426: ST_TO_ADDR
// end ;
69427: LD_VAR 0 2
69431: RET
// export function Join ( array , element ) ; begin
69432: LD_INT 0
69434: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69435: LD_ADDR_VAR 0 3
69439: PUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: LD_VAR 0 1
69449: PUSH
69450: LD_INT 1
69452: PLUS
69453: PPUSH
69454: LD_VAR 0 2
69458: PPUSH
69459: CALL_OW 1
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 3
69468: RET
// export function JoinUnion ( array , element ) ; begin
69469: LD_INT 0
69471: PPUSH
// result := array union element ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_VAR 0 1
69481: PUSH
69482: LD_VAR 0 2
69486: UNION
69487: ST_TO_ADDR
// end ;
69488: LD_VAR 0 3
69492: RET
// export function GetBehemoths ( side ) ; begin
69493: LD_INT 0
69495: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69496: LD_ADDR_VAR 0 2
69500: PUSH
69501: LD_INT 22
69503: PUSH
69504: LD_VAR 0 1
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 31
69515: PUSH
69516: LD_INT 25
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PPUSH
69527: CALL_OW 69
69531: ST_TO_ADDR
// end ;
69532: LD_VAR 0 2
69536: RET
// export function Shuffle ( array ) ; var i , index ; begin
69537: LD_INT 0
69539: PPUSH
69540: PPUSH
69541: PPUSH
// result := [ ] ;
69542: LD_ADDR_VAR 0 2
69546: PUSH
69547: EMPTY
69548: ST_TO_ADDR
// if not array then
69549: LD_VAR 0 1
69553: NOT
69554: IFFALSE 69558
// exit ;
69556: GO 69657
// Randomize ;
69558: CALL_OW 10
// for i = array downto 1 do
69562: LD_ADDR_VAR 0 3
69566: PUSH
69567: DOUBLE
69568: LD_VAR 0 1
69572: INC
69573: ST_TO_ADDR
69574: LD_INT 1
69576: PUSH
69577: FOR_DOWNTO
69578: IFFALSE 69655
// begin index := rand ( 1 , array ) ;
69580: LD_ADDR_VAR 0 4
69584: PUSH
69585: LD_INT 1
69587: PPUSH
69588: LD_VAR 0 1
69592: PPUSH
69593: CALL_OW 12
69597: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69598: LD_ADDR_VAR 0 2
69602: PUSH
69603: LD_VAR 0 2
69607: PPUSH
69608: LD_VAR 0 2
69612: PUSH
69613: LD_INT 1
69615: PLUS
69616: PPUSH
69617: LD_VAR 0 1
69621: PUSH
69622: LD_VAR 0 4
69626: ARRAY
69627: PPUSH
69628: CALL_OW 2
69632: ST_TO_ADDR
// array := Delete ( array , index ) ;
69633: LD_ADDR_VAR 0 1
69637: PUSH
69638: LD_VAR 0 1
69642: PPUSH
69643: LD_VAR 0 4
69647: PPUSH
69648: CALL_OW 3
69652: ST_TO_ADDR
// end ;
69653: GO 69577
69655: POP
69656: POP
// end ;
69657: LD_VAR 0 2
69661: RET
// export function GetBaseMaterials ( base ) ; begin
69662: LD_INT 0
69664: PPUSH
// result := [ 0 , 0 , 0 ] ;
69665: LD_ADDR_VAR 0 2
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: LD_INT 0
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: LIST
69683: ST_TO_ADDR
// if not base then
69684: LD_VAR 0 1
69688: NOT
69689: IFFALSE 69693
// exit ;
69691: GO 69742
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69693: LD_ADDR_VAR 0 2
69697: PUSH
69698: LD_VAR 0 1
69702: PPUSH
69703: LD_INT 1
69705: PPUSH
69706: CALL_OW 275
69710: PUSH
69711: LD_VAR 0 1
69715: PPUSH
69716: LD_INT 2
69718: PPUSH
69719: CALL_OW 275
69723: PUSH
69724: LD_VAR 0 1
69728: PPUSH
69729: LD_INT 3
69731: PPUSH
69732: CALL_OW 275
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: ST_TO_ADDR
// end ;
69742: LD_VAR 0 2
69746: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69747: LD_INT 0
69749: PPUSH
69750: PPUSH
// result := array ;
69751: LD_ADDR_VAR 0 3
69755: PUSH
69756: LD_VAR 0 1
69760: ST_TO_ADDR
// if size >= result then
69761: LD_VAR 0 2
69765: PUSH
69766: LD_VAR 0 3
69770: GREATEREQUAL
69771: IFFALSE 69775
// exit ;
69773: GO 69825
// if size then
69775: LD_VAR 0 2
69779: IFFALSE 69825
// for i := array downto size do
69781: LD_ADDR_VAR 0 4
69785: PUSH
69786: DOUBLE
69787: LD_VAR 0 1
69791: INC
69792: ST_TO_ADDR
69793: LD_VAR 0 2
69797: PUSH
69798: FOR_DOWNTO
69799: IFFALSE 69823
// result := Delete ( result , result ) ;
69801: LD_ADDR_VAR 0 3
69805: PUSH
69806: LD_VAR 0 3
69810: PPUSH
69811: LD_VAR 0 3
69815: PPUSH
69816: CALL_OW 3
69820: ST_TO_ADDR
69821: GO 69798
69823: POP
69824: POP
// end ;
69825: LD_VAR 0 3
69829: RET
// export function ComExit ( unit ) ; var tmp ; begin
69830: LD_INT 0
69832: PPUSH
69833: PPUSH
// if not IsInUnit ( unit ) then
69834: LD_VAR 0 1
69838: PPUSH
69839: CALL_OW 310
69843: NOT
69844: IFFALSE 69848
// exit ;
69846: GO 69908
// tmp := IsInUnit ( unit ) ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 1
69857: PPUSH
69858: CALL_OW 310
69862: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69863: LD_VAR 0 3
69867: PPUSH
69868: CALL_OW 247
69872: PUSH
69873: LD_INT 2
69875: EQUAL
69876: IFFALSE 69889
// ComExitVehicle ( unit ) else
69878: LD_VAR 0 1
69882: PPUSH
69883: CALL_OW 121
69887: GO 69898
// ComExitBuilding ( unit ) ;
69889: LD_VAR 0 1
69893: PPUSH
69894: CALL_OW 122
// result := tmp ;
69898: LD_ADDR_VAR 0 2
69902: PUSH
69903: LD_VAR 0 3
69907: ST_TO_ADDR
// end ;
69908: LD_VAR 0 2
69912: RET
// export function ComExitAll ( units ) ; var i ; begin
69913: LD_INT 0
69915: PPUSH
69916: PPUSH
// if not units then
69917: LD_VAR 0 1
69921: NOT
69922: IFFALSE 69926
// exit ;
69924: GO 69952
// for i in units do
69926: LD_ADDR_VAR 0 3
69930: PUSH
69931: LD_VAR 0 1
69935: PUSH
69936: FOR_IN
69937: IFFALSE 69950
// ComExit ( i ) ;
69939: LD_VAR 0 3
69943: PPUSH
69944: CALL 69830 0 1
69948: GO 69936
69950: POP
69951: POP
// end ;
69952: LD_VAR 0 2
69956: RET
// export function ResetHc ; begin
69957: LD_INT 0
69959: PPUSH
// InitHc ;
69960: CALL_OW 19
// hc_importance := 0 ;
69964: LD_ADDR_OWVAR 32
69968: PUSH
69969: LD_INT 0
69971: ST_TO_ADDR
// end ;
69972: LD_VAR 0 1
69976: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69977: LD_INT 0
69979: PPUSH
69980: PPUSH
69981: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69982: LD_ADDR_VAR 0 6
69986: PUSH
69987: LD_VAR 0 1
69991: PUSH
69992: LD_VAR 0 3
69996: PLUS
69997: PUSH
69998: LD_INT 2
70000: DIV
70001: ST_TO_ADDR
// if _x < 0 then
70002: LD_VAR 0 6
70006: PUSH
70007: LD_INT 0
70009: LESS
70010: IFFALSE 70027
// _x := _x * - 1 ;
70012: LD_ADDR_VAR 0 6
70016: PUSH
70017: LD_VAR 0 6
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: MUL
70026: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70027: LD_ADDR_VAR 0 7
70031: PUSH
70032: LD_VAR 0 2
70036: PUSH
70037: LD_VAR 0 4
70041: PLUS
70042: PUSH
70043: LD_INT 2
70045: DIV
70046: ST_TO_ADDR
// if _y < 0 then
70047: LD_VAR 0 7
70051: PUSH
70052: LD_INT 0
70054: LESS
70055: IFFALSE 70072
// _y := _y * - 1 ;
70057: LD_ADDR_VAR 0 7
70061: PUSH
70062: LD_VAR 0 7
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: MUL
70071: ST_TO_ADDR
// result := [ _x , _y ] ;
70072: LD_ADDR_VAR 0 5
70076: PUSH
70077: LD_VAR 0 6
70081: PUSH
70082: LD_VAR 0 7
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: ST_TO_ADDR
// end ;
70091: LD_VAR 0 5
70095: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70096: LD_INT 0
70098: PPUSH
70099: PPUSH
70100: PPUSH
70101: PPUSH
// task := GetTaskList ( unit ) ;
70102: LD_ADDR_VAR 0 7
70106: PUSH
70107: LD_VAR 0 1
70111: PPUSH
70112: CALL_OW 437
70116: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70117: LD_VAR 0 7
70121: NOT
70122: PUSH
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_VAR 0 2
70132: PPUSH
70133: CALL_OW 308
70137: NOT
70138: AND
70139: IFFALSE 70143
// exit ;
70141: GO 70261
// if IsInArea ( unit , area ) then
70143: LD_VAR 0 1
70147: PPUSH
70148: LD_VAR 0 2
70152: PPUSH
70153: CALL_OW 308
70157: IFFALSE 70175
// begin ComMoveToArea ( unit , goAway ) ;
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 3
70168: PPUSH
70169: CALL_OW 113
// exit ;
70173: GO 70261
// end ; if task [ 1 ] [ 1 ] <> M then
70175: LD_VAR 0 7
70179: PUSH
70180: LD_INT 1
70182: ARRAY
70183: PUSH
70184: LD_INT 1
70186: ARRAY
70187: PUSH
70188: LD_STRING M
70190: NONEQUAL
70191: IFFALSE 70195
// exit ;
70193: GO 70261
// x := task [ 1 ] [ 2 ] ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_VAR 0 7
70204: PUSH
70205: LD_INT 1
70207: ARRAY
70208: PUSH
70209: LD_INT 2
70211: ARRAY
70212: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70213: LD_ADDR_VAR 0 6
70217: PUSH
70218: LD_VAR 0 7
70222: PUSH
70223: LD_INT 1
70225: ARRAY
70226: PUSH
70227: LD_INT 3
70229: ARRAY
70230: ST_TO_ADDR
// if InArea ( x , y , area ) then
70231: LD_VAR 0 5
70235: PPUSH
70236: LD_VAR 0 6
70240: PPUSH
70241: LD_VAR 0 2
70245: PPUSH
70246: CALL_OW 309
70250: IFFALSE 70261
// ComStop ( unit ) ;
70252: LD_VAR 0 1
70256: PPUSH
70257: CALL_OW 141
// end ;
70261: LD_VAR 0 4
70265: RET
// export function Abs ( value ) ; begin
70266: LD_INT 0
70268: PPUSH
// result := value ;
70269: LD_ADDR_VAR 0 2
70273: PUSH
70274: LD_VAR 0 1
70278: ST_TO_ADDR
// if value < 0 then
70279: LD_VAR 0 1
70283: PUSH
70284: LD_INT 0
70286: LESS
70287: IFFALSE 70304
// result := value * - 1 ;
70289: LD_ADDR_VAR 0 2
70293: PUSH
70294: LD_VAR 0 1
70298: PUSH
70299: LD_INT 1
70301: NEG
70302: MUL
70303: ST_TO_ADDR
// end ;
70304: LD_VAR 0 2
70308: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70309: LD_INT 0
70311: PPUSH
70312: PPUSH
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
// if not unit or not building then
70319: LD_VAR 0 1
70323: NOT
70324: PUSH
70325: LD_VAR 0 2
70329: NOT
70330: OR
70331: IFFALSE 70335
// exit ;
70333: GO 70561
// x := GetX ( building ) ;
70335: LD_ADDR_VAR 0 4
70339: PUSH
70340: LD_VAR 0 2
70344: PPUSH
70345: CALL_OW 250
70349: ST_TO_ADDR
// y := GetY ( building ) ;
70350: LD_ADDR_VAR 0 6
70354: PUSH
70355: LD_VAR 0 2
70359: PPUSH
70360: CALL_OW 251
70364: ST_TO_ADDR
// d := GetDir ( building ) ;
70365: LD_ADDR_VAR 0 8
70369: PUSH
70370: LD_VAR 0 2
70374: PPUSH
70375: CALL_OW 254
70379: ST_TO_ADDR
// r := 4 ;
70380: LD_ADDR_VAR 0 9
70384: PUSH
70385: LD_INT 4
70387: ST_TO_ADDR
// for i := 1 to 5 do
70388: LD_ADDR_VAR 0 10
70392: PUSH
70393: DOUBLE
70394: LD_INT 1
70396: DEC
70397: ST_TO_ADDR
70398: LD_INT 5
70400: PUSH
70401: FOR_TO
70402: IFFALSE 70559
// begin _x := ShiftX ( x , d , r + i ) ;
70404: LD_ADDR_VAR 0 5
70408: PUSH
70409: LD_VAR 0 4
70413: PPUSH
70414: LD_VAR 0 8
70418: PPUSH
70419: LD_VAR 0 9
70423: PUSH
70424: LD_VAR 0 10
70428: PLUS
70429: PPUSH
70430: CALL_OW 272
70434: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70435: LD_ADDR_VAR 0 7
70439: PUSH
70440: LD_VAR 0 6
70444: PPUSH
70445: LD_VAR 0 8
70449: PPUSH
70450: LD_VAR 0 9
70454: PUSH
70455: LD_VAR 0 10
70459: PLUS
70460: PPUSH
70461: CALL_OW 273
70465: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70466: LD_VAR 0 5
70470: PPUSH
70471: LD_VAR 0 7
70475: PPUSH
70476: CALL_OW 488
70480: PUSH
70481: LD_VAR 0 5
70485: PPUSH
70486: LD_VAR 0 7
70490: PPUSH
70491: CALL_OW 428
70495: PPUSH
70496: CALL_OW 247
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: LD_INT 2
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: IN
70511: NOT
70512: AND
70513: IFFALSE 70557
// begin ComMoveXY ( unit , _x , _y ) ;
70515: LD_VAR 0 1
70519: PPUSH
70520: LD_VAR 0 5
70524: PPUSH
70525: LD_VAR 0 7
70529: PPUSH
70530: CALL_OW 111
// result := [ _x , _y ] ;
70534: LD_ADDR_VAR 0 3
70538: PUSH
70539: LD_VAR 0 5
70543: PUSH
70544: LD_VAR 0 7
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: ST_TO_ADDR
// exit ;
70553: POP
70554: POP
70555: GO 70561
// end ; end ;
70557: GO 70401
70559: POP
70560: POP
// end ;
70561: LD_VAR 0 3
70565: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70566: LD_INT 0
70568: PPUSH
70569: PPUSH
70570: PPUSH
// result := 0 ;
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: LD_INT 0
70578: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70579: LD_VAR 0 1
70583: PUSH
70584: LD_INT 0
70586: LESS
70587: PUSH
70588: LD_VAR 0 1
70592: PUSH
70593: LD_INT 8
70595: GREATER
70596: OR
70597: PUSH
70598: LD_VAR 0 2
70602: PUSH
70603: LD_INT 0
70605: LESS
70606: OR
70607: PUSH
70608: LD_VAR 0 2
70612: PUSH
70613: LD_INT 8
70615: GREATER
70616: OR
70617: IFFALSE 70621
// exit ;
70619: GO 70696
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70621: LD_ADDR_VAR 0 4
70625: PUSH
70626: LD_INT 22
70628: PUSH
70629: LD_VAR 0 2
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PPUSH
70638: CALL_OW 69
70642: PUSH
70643: FOR_IN
70644: IFFALSE 70694
// begin un := UnitShoot ( i ) ;
70646: LD_ADDR_VAR 0 5
70650: PUSH
70651: LD_VAR 0 4
70655: PPUSH
70656: CALL_OW 504
70660: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70661: LD_VAR 0 5
70665: PPUSH
70666: CALL_OW 255
70670: PUSH
70671: LD_VAR 0 1
70675: EQUAL
70676: IFFALSE 70692
// begin result := un ;
70678: LD_ADDR_VAR 0 3
70682: PUSH
70683: LD_VAR 0 5
70687: ST_TO_ADDR
// exit ;
70688: POP
70689: POP
70690: GO 70696
// end ; end ;
70692: GO 70643
70694: POP
70695: POP
// end ;
70696: LD_VAR 0 3
70700: RET
// export function GetCargoBay ( units ) ; begin
70701: LD_INT 0
70703: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70704: LD_ADDR_VAR 0 2
70708: PUSH
70709: LD_VAR 0 1
70713: PPUSH
70714: LD_INT 2
70716: PUSH
70717: LD_INT 34
70719: PUSH
70720: LD_INT 12
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 34
70729: PUSH
70730: LD_INT 51
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 34
70739: PUSH
70740: LD_INT 32
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 34
70749: PUSH
70750: LD_INT 89
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: PPUSH
70764: CALL_OW 72
70768: ST_TO_ADDR
// end ;
70769: LD_VAR 0 2
70773: RET
// export function Negate ( value ) ; begin
70774: LD_INT 0
70776: PPUSH
// result := not value ;
70777: LD_ADDR_VAR 0 2
70781: PUSH
70782: LD_VAR 0 1
70786: NOT
70787: ST_TO_ADDR
// end ;
70788: LD_VAR 0 2
70792: RET
// export function Inc ( value ) ; begin
70793: LD_INT 0
70795: PPUSH
// result := value + 1 ;
70796: LD_ADDR_VAR 0 2
70800: PUSH
70801: LD_VAR 0 1
70805: PUSH
70806: LD_INT 1
70808: PLUS
70809: ST_TO_ADDR
// end ;
70810: LD_VAR 0 2
70814: RET
// export function Dec ( value ) ; begin
70815: LD_INT 0
70817: PPUSH
// result := value - 1 ;
70818: LD_ADDR_VAR 0 2
70822: PUSH
70823: LD_VAR 0 1
70827: PUSH
70828: LD_INT 1
70830: MINUS
70831: ST_TO_ADDR
// end ;
70832: LD_VAR 0 2
70836: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70837: LD_INT 0
70839: PPUSH
70840: PPUSH
70841: PPUSH
70842: PPUSH
70843: PPUSH
70844: PPUSH
70845: PPUSH
70846: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70847: LD_VAR 0 1
70851: PPUSH
70852: LD_VAR 0 2
70856: PPUSH
70857: CALL_OW 488
70861: NOT
70862: PUSH
70863: LD_VAR 0 3
70867: PPUSH
70868: LD_VAR 0 4
70872: PPUSH
70873: CALL_OW 488
70877: NOT
70878: OR
70879: IFFALSE 70892
// begin result := - 1 ;
70881: LD_ADDR_VAR 0 5
70885: PUSH
70886: LD_INT 1
70888: NEG
70889: ST_TO_ADDR
// exit ;
70890: GO 71127
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70892: LD_ADDR_VAR 0 12
70896: PUSH
70897: LD_VAR 0 1
70901: PPUSH
70902: LD_VAR 0 2
70906: PPUSH
70907: LD_VAR 0 3
70911: PPUSH
70912: LD_VAR 0 4
70916: PPUSH
70917: CALL 69977 0 4
70921: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70922: LD_ADDR_VAR 0 11
70926: PUSH
70927: LD_VAR 0 1
70931: PPUSH
70932: LD_VAR 0 2
70936: PPUSH
70937: LD_VAR 0 12
70941: PUSH
70942: LD_INT 1
70944: ARRAY
70945: PPUSH
70946: LD_VAR 0 12
70950: PUSH
70951: LD_INT 2
70953: ARRAY
70954: PPUSH
70955: CALL_OW 298
70959: ST_TO_ADDR
// distance := 9999 ;
70960: LD_ADDR_VAR 0 10
70964: PUSH
70965: LD_INT 9999
70967: ST_TO_ADDR
// for i := 0 to 5 do
70968: LD_ADDR_VAR 0 6
70972: PUSH
70973: DOUBLE
70974: LD_INT 0
70976: DEC
70977: ST_TO_ADDR
70978: LD_INT 5
70980: PUSH
70981: FOR_TO
70982: IFFALSE 71125
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70984: LD_ADDR_VAR 0 7
70988: PUSH
70989: LD_VAR 0 1
70993: PPUSH
70994: LD_VAR 0 6
70998: PPUSH
70999: LD_VAR 0 11
71003: PPUSH
71004: CALL_OW 272
71008: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71009: LD_ADDR_VAR 0 8
71013: PUSH
71014: LD_VAR 0 2
71018: PPUSH
71019: LD_VAR 0 6
71023: PPUSH
71024: LD_VAR 0 11
71028: PPUSH
71029: CALL_OW 273
71033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71034: LD_VAR 0 7
71038: PPUSH
71039: LD_VAR 0 8
71043: PPUSH
71044: CALL_OW 488
71048: NOT
71049: IFFALSE 71053
// continue ;
71051: GO 70981
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71053: LD_ADDR_VAR 0 9
71057: PUSH
71058: LD_VAR 0 12
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: PPUSH
71067: LD_VAR 0 12
71071: PUSH
71072: LD_INT 2
71074: ARRAY
71075: PPUSH
71076: LD_VAR 0 7
71080: PPUSH
71081: LD_VAR 0 8
71085: PPUSH
71086: CALL_OW 298
71090: ST_TO_ADDR
// if tmp < distance then
71091: LD_VAR 0 9
71095: PUSH
71096: LD_VAR 0 10
71100: LESS
71101: IFFALSE 71123
// begin result := i ;
71103: LD_ADDR_VAR 0 5
71107: PUSH
71108: LD_VAR 0 6
71112: ST_TO_ADDR
// distance := tmp ;
71113: LD_ADDR_VAR 0 10
71117: PUSH
71118: LD_VAR 0 9
71122: ST_TO_ADDR
// end ; end ;
71123: GO 70981
71125: POP
71126: POP
// end ;
71127: LD_VAR 0 5
71131: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71132: LD_INT 0
71134: PPUSH
71135: PPUSH
// if not driver or not IsInUnit ( driver ) then
71136: LD_VAR 0 1
71140: NOT
71141: PUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: CALL_OW 310
71151: NOT
71152: OR
71153: IFFALSE 71157
// exit ;
71155: GO 71247
// vehicle := IsInUnit ( driver ) ;
71157: LD_ADDR_VAR 0 3
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 310
71171: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71172: LD_VAR 0 1
71176: PPUSH
71177: LD_STRING \
71179: PUSH
71180: LD_INT 0
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: LD_INT 0
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: PUSH
71207: LD_STRING E
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: LD_VAR 0 3
71220: PUSH
71221: LD_INT 0
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PPUSH
71243: CALL_OW 446
// end ;
71247: LD_VAR 0 2
71251: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71252: LD_INT 0
71254: PPUSH
71255: PPUSH
// if not driver or not IsInUnit ( driver ) then
71256: LD_VAR 0 1
71260: NOT
71261: PUSH
71262: LD_VAR 0 1
71266: PPUSH
71267: CALL_OW 310
71271: NOT
71272: OR
71273: IFFALSE 71277
// exit ;
71275: GO 71367
// vehicle := IsInUnit ( driver ) ;
71277: LD_ADDR_VAR 0 3
71281: PUSH
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 310
71291: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71292: LD_VAR 0 1
71296: PPUSH
71297: LD_STRING \
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: LD_INT 0
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: PUSH
71327: LD_STRING E
71329: PUSH
71330: LD_INT 0
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: LD_VAR 0 3
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PPUSH
71363: CALL_OW 447
// end ;
71367: LD_VAR 0 2
71371: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71372: LD_INT 0
71374: PPUSH
71375: PPUSH
71376: PPUSH
// tmp := [ ] ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: EMPTY
71383: ST_TO_ADDR
// for i in units do
71384: LD_ADDR_VAR 0 4
71388: PUSH
71389: LD_VAR 0 1
71393: PUSH
71394: FOR_IN
71395: IFFALSE 71433
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71397: LD_ADDR_VAR 0 5
71401: PUSH
71402: LD_VAR 0 5
71406: PPUSH
71407: LD_VAR 0 5
71411: PUSH
71412: LD_INT 1
71414: PLUS
71415: PPUSH
71416: LD_VAR 0 4
71420: PPUSH
71421: CALL_OW 256
71425: PPUSH
71426: CALL_OW 2
71430: ST_TO_ADDR
71431: GO 71394
71433: POP
71434: POP
// if not tmp then
71435: LD_VAR 0 5
71439: NOT
71440: IFFALSE 71444
// exit ;
71442: GO 71492
// if asc then
71444: LD_VAR 0 2
71448: IFFALSE 71472
// result := SortListByListAsc ( units , tmp ) else
71450: LD_ADDR_VAR 0 3
71454: PUSH
71455: LD_VAR 0 1
71459: PPUSH
71460: LD_VAR 0 5
71464: PPUSH
71465: CALL_OW 76
71469: ST_TO_ADDR
71470: GO 71492
// result := SortListByListDesc ( units , tmp ) ;
71472: LD_ADDR_VAR 0 3
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 5
71486: PPUSH
71487: CALL_OW 77
71491: ST_TO_ADDR
// end ;
71492: LD_VAR 0 3
71496: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71497: LD_INT 0
71499: PPUSH
71500: PPUSH
// task := GetTaskList ( mech ) ;
71501: LD_ADDR_VAR 0 4
71505: PUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: CALL_OW 437
71515: ST_TO_ADDR
// if not task then
71516: LD_VAR 0 4
71520: NOT
71521: IFFALSE 71525
// exit ;
71523: GO 71567
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71525: LD_ADDR_VAR 0 3
71529: PUSH
71530: LD_VAR 0 4
71534: PUSH
71535: LD_INT 1
71537: ARRAY
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_STRING r
71545: EQUAL
71546: PUSH
71547: LD_VAR 0 4
71551: PUSH
71552: LD_INT 1
71554: ARRAY
71555: PUSH
71556: LD_INT 4
71558: ARRAY
71559: PUSH
71560: LD_VAR 0 2
71564: EQUAL
71565: AND
71566: ST_TO_ADDR
// end ;
71567: LD_VAR 0 3
71571: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71572: LD_INT 0
71574: PPUSH
// SetDir ( unit , d ) ;
71575: LD_VAR 0 1
71579: PPUSH
71580: LD_VAR 0 4
71584: PPUSH
71585: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71589: LD_VAR 0 1
71593: PPUSH
71594: LD_VAR 0 2
71598: PPUSH
71599: LD_VAR 0 3
71603: PPUSH
71604: LD_VAR 0 5
71608: PPUSH
71609: CALL_OW 48
// end ;
71613: LD_VAR 0 6
71617: RET
// export function ToNaturalNumber ( number ) ; begin
71618: LD_INT 0
71620: PPUSH
// result := number div 1 ;
71621: LD_ADDR_VAR 0 2
71625: PUSH
71626: LD_VAR 0 1
71630: PUSH
71631: LD_INT 1
71633: DIV
71634: ST_TO_ADDR
// if number < 0 then
71635: LD_VAR 0 1
71639: PUSH
71640: LD_INT 0
71642: LESS
71643: IFFALSE 71653
// result := 0 ;
71645: LD_ADDR_VAR 0 2
71649: PUSH
71650: LD_INT 0
71652: ST_TO_ADDR
// end ;
71653: LD_VAR 0 2
71657: RET
// export function SortByClass ( units , class ) ; var un ; begin
71658: LD_INT 0
71660: PPUSH
71661: PPUSH
// if not units or not class then
71662: LD_VAR 0 1
71666: NOT
71667: PUSH
71668: LD_VAR 0 2
71672: NOT
71673: OR
71674: IFFALSE 71678
// exit ;
71676: GO 71773
// result := [ ] ;
71678: LD_ADDR_VAR 0 3
71682: PUSH
71683: EMPTY
71684: ST_TO_ADDR
// for un in units do
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_VAR 0 1
71694: PUSH
71695: FOR_IN
71696: IFFALSE 71771
// if GetClass ( un ) = class then
71698: LD_VAR 0 4
71702: PPUSH
71703: CALL_OW 257
71707: PUSH
71708: LD_VAR 0 2
71712: EQUAL
71713: IFFALSE 71740
// result := Insert ( result , 1 , un ) else
71715: LD_ADDR_VAR 0 3
71719: PUSH
71720: LD_VAR 0 3
71724: PPUSH
71725: LD_INT 1
71727: PPUSH
71728: LD_VAR 0 4
71732: PPUSH
71733: CALL_OW 2
71737: ST_TO_ADDR
71738: GO 71769
// result := Replace ( result , result + 1 , un ) ;
71740: LD_ADDR_VAR 0 3
71744: PUSH
71745: LD_VAR 0 3
71749: PPUSH
71750: LD_VAR 0 3
71754: PUSH
71755: LD_INT 1
71757: PLUS
71758: PPUSH
71759: LD_VAR 0 4
71763: PPUSH
71764: CALL_OW 1
71768: ST_TO_ADDR
71769: GO 71695
71771: POP
71772: POP
// end ;
71773: LD_VAR 0 3
71777: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71778: LD_INT 0
71780: PPUSH
71781: PPUSH
71782: PPUSH
71783: PPUSH
71784: PPUSH
71785: PPUSH
71786: PPUSH
// result := [ ] ;
71787: LD_ADDR_VAR 0 4
71791: PUSH
71792: EMPTY
71793: ST_TO_ADDR
// if x - r < 0 then
71794: LD_VAR 0 1
71798: PUSH
71799: LD_VAR 0 3
71803: MINUS
71804: PUSH
71805: LD_INT 0
71807: LESS
71808: IFFALSE 71820
// min_x := 0 else
71810: LD_ADDR_VAR 0 8
71814: PUSH
71815: LD_INT 0
71817: ST_TO_ADDR
71818: GO 71836
// min_x := x - r ;
71820: LD_ADDR_VAR 0 8
71824: PUSH
71825: LD_VAR 0 1
71829: PUSH
71830: LD_VAR 0 3
71834: MINUS
71835: ST_TO_ADDR
// if y - r < 0 then
71836: LD_VAR 0 2
71840: PUSH
71841: LD_VAR 0 3
71845: MINUS
71846: PUSH
71847: LD_INT 0
71849: LESS
71850: IFFALSE 71862
// min_y := 0 else
71852: LD_ADDR_VAR 0 7
71856: PUSH
71857: LD_INT 0
71859: ST_TO_ADDR
71860: GO 71878
// min_y := y - r ;
71862: LD_ADDR_VAR 0 7
71866: PUSH
71867: LD_VAR 0 2
71871: PUSH
71872: LD_VAR 0 3
71876: MINUS
71877: ST_TO_ADDR
// max_x := x + r ;
71878: LD_ADDR_VAR 0 9
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: LD_VAR 0 3
71892: PLUS
71893: ST_TO_ADDR
// max_y := y + r ;
71894: LD_ADDR_VAR 0 10
71898: PUSH
71899: LD_VAR 0 2
71903: PUSH
71904: LD_VAR 0 3
71908: PLUS
71909: ST_TO_ADDR
// for _x = min_x to max_x do
71910: LD_ADDR_VAR 0 5
71914: PUSH
71915: DOUBLE
71916: LD_VAR 0 8
71920: DEC
71921: ST_TO_ADDR
71922: LD_VAR 0 9
71926: PUSH
71927: FOR_TO
71928: IFFALSE 72029
// for _y = min_y to max_y do
71930: LD_ADDR_VAR 0 6
71934: PUSH
71935: DOUBLE
71936: LD_VAR 0 7
71940: DEC
71941: ST_TO_ADDR
71942: LD_VAR 0 10
71946: PUSH
71947: FOR_TO
71948: IFFALSE 72025
// begin if not ValidHex ( _x , _y ) then
71950: LD_VAR 0 5
71954: PPUSH
71955: LD_VAR 0 6
71959: PPUSH
71960: CALL_OW 488
71964: NOT
71965: IFFALSE 71969
// continue ;
71967: GO 71947
// if GetResourceTypeXY ( _x , _y ) then
71969: LD_VAR 0 5
71973: PPUSH
71974: LD_VAR 0 6
71978: PPUSH
71979: CALL_OW 283
71983: IFFALSE 72023
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71985: LD_ADDR_VAR 0 4
71989: PUSH
71990: LD_VAR 0 4
71994: PPUSH
71995: LD_VAR 0 4
71999: PUSH
72000: LD_INT 1
72002: PLUS
72003: PPUSH
72004: LD_VAR 0 5
72008: PUSH
72009: LD_VAR 0 6
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PPUSH
72018: CALL_OW 1
72022: ST_TO_ADDR
// end ;
72023: GO 71947
72025: POP
72026: POP
72027: GO 71927
72029: POP
72030: POP
// end ;
72031: LD_VAR 0 4
72035: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72036: LD_INT 0
72038: PPUSH
72039: PPUSH
72040: PPUSH
72041: PPUSH
72042: PPUSH
72043: PPUSH
72044: PPUSH
72045: PPUSH
// if not units then
72046: LD_VAR 0 1
72050: NOT
72051: IFFALSE 72055
// exit ;
72053: GO 72579
// result := UnitFilter ( units , [ f_ok ] ) ;
72055: LD_ADDR_VAR 0 3
72059: PUSH
72060: LD_VAR 0 1
72064: PPUSH
72065: LD_INT 50
72067: PUSH
72068: EMPTY
72069: LIST
72070: PPUSH
72071: CALL_OW 72
72075: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72076: LD_ADDR_VAR 0 8
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_INT 1
72088: ARRAY
72089: PPUSH
72090: CALL_OW 255
72094: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72095: LD_ADDR_VAR 0 10
72099: PUSH
72100: LD_INT 29
72102: PUSH
72103: LD_INT 91
72105: PUSH
72106: LD_INT 49
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: LIST
72113: ST_TO_ADDR
// if not result then
72114: LD_VAR 0 3
72118: NOT
72119: IFFALSE 72123
// exit ;
72121: GO 72579
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72123: LD_ADDR_VAR 0 5
72127: PUSH
72128: LD_INT 81
72130: PUSH
72131: LD_VAR 0 8
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PPUSH
72140: CALL_OW 69
72144: ST_TO_ADDR
// for i in result do
72145: LD_ADDR_VAR 0 4
72149: PUSH
72150: LD_VAR 0 3
72154: PUSH
72155: FOR_IN
72156: IFFALSE 72577
// begin tag := GetTag ( i ) + 1 ;
72158: LD_ADDR_VAR 0 9
72162: PUSH
72163: LD_VAR 0 4
72167: PPUSH
72168: CALL_OW 110
72172: PUSH
72173: LD_INT 1
72175: PLUS
72176: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72177: LD_ADDR_VAR 0 7
72181: PUSH
72182: LD_VAR 0 4
72186: PPUSH
72187: CALL_OW 250
72191: PPUSH
72192: LD_VAR 0 4
72196: PPUSH
72197: CALL_OW 251
72201: PPUSH
72202: LD_INT 6
72204: PPUSH
72205: CALL 71778 0 3
72209: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72210: LD_VAR 0 4
72214: PPUSH
72215: CALL_OW 247
72219: PUSH
72220: LD_INT 2
72222: EQUAL
72223: PUSH
72224: LD_VAR 0 7
72228: AND
72229: PUSH
72230: LD_VAR 0 4
72234: PPUSH
72235: CALL_OW 264
72239: PUSH
72240: LD_VAR 0 10
72244: IN
72245: NOT
72246: AND
72247: IFFALSE 72286
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72249: LD_VAR 0 4
72253: PPUSH
72254: LD_VAR 0 7
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PUSH
72263: LD_INT 1
72265: ARRAY
72266: PPUSH
72267: LD_VAR 0 7
72271: PUSH
72272: LD_INT 1
72274: ARRAY
72275: PUSH
72276: LD_INT 2
72278: ARRAY
72279: PPUSH
72280: CALL_OW 116
72284: GO 72575
// if path > tag then
72286: LD_VAR 0 2
72290: PUSH
72291: LD_VAR 0 9
72295: GREATER
72296: IFFALSE 72504
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72298: LD_ADDR_VAR 0 6
72302: PUSH
72303: LD_VAR 0 5
72307: PPUSH
72308: LD_INT 91
72310: PUSH
72311: LD_VAR 0 4
72315: PUSH
72316: LD_INT 8
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: LIST
72323: PPUSH
72324: CALL_OW 72
72328: ST_TO_ADDR
// if nearEnemy then
72329: LD_VAR 0 6
72333: IFFALSE 72402
// begin if GetWeapon ( i ) = ru_time_lapser then
72335: LD_VAR 0 4
72339: PPUSH
72340: CALL_OW 264
72344: PUSH
72345: LD_INT 49
72347: EQUAL
72348: IFFALSE 72376
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72350: LD_VAR 0 4
72354: PPUSH
72355: LD_VAR 0 6
72359: PPUSH
72360: LD_VAR 0 4
72364: PPUSH
72365: CALL_OW 74
72369: PPUSH
72370: CALL_OW 112
72374: GO 72400
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72376: LD_VAR 0 4
72380: PPUSH
72381: LD_VAR 0 6
72385: PPUSH
72386: LD_VAR 0 4
72390: PPUSH
72391: CALL_OW 74
72395: PPUSH
72396: CALL 73504 0 2
// end else
72400: GO 72502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72402: LD_VAR 0 4
72406: PPUSH
72407: LD_VAR 0 2
72411: PUSH
72412: LD_VAR 0 9
72416: ARRAY
72417: PUSH
72418: LD_INT 1
72420: ARRAY
72421: PPUSH
72422: LD_VAR 0 2
72426: PUSH
72427: LD_VAR 0 9
72431: ARRAY
72432: PUSH
72433: LD_INT 2
72435: ARRAY
72436: PPUSH
72437: CALL_OW 297
72441: PUSH
72442: LD_INT 6
72444: GREATER
72445: IFFALSE 72488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72447: LD_VAR 0 4
72451: PPUSH
72452: LD_VAR 0 2
72456: PUSH
72457: LD_VAR 0 9
72461: ARRAY
72462: PUSH
72463: LD_INT 1
72465: ARRAY
72466: PPUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_VAR 0 9
72476: ARRAY
72477: PUSH
72478: LD_INT 2
72480: ARRAY
72481: PPUSH
72482: CALL_OW 114
72486: GO 72502
// SetTag ( i , tag ) ;
72488: LD_VAR 0 4
72492: PPUSH
72493: LD_VAR 0 9
72497: PPUSH
72498: CALL_OW 109
// end else
72502: GO 72575
// if enemy then
72504: LD_VAR 0 5
72508: IFFALSE 72575
// begin if GetWeapon ( i ) = ru_time_lapser then
72510: LD_VAR 0 4
72514: PPUSH
72515: CALL_OW 264
72519: PUSH
72520: LD_INT 49
72522: EQUAL
72523: IFFALSE 72551
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72525: LD_VAR 0 4
72529: PPUSH
72530: LD_VAR 0 5
72534: PPUSH
72535: LD_VAR 0 4
72539: PPUSH
72540: CALL_OW 74
72544: PPUSH
72545: CALL_OW 112
72549: GO 72575
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72551: LD_VAR 0 4
72555: PPUSH
72556: LD_VAR 0 5
72560: PPUSH
72561: LD_VAR 0 4
72565: PPUSH
72566: CALL_OW 74
72570: PPUSH
72571: CALL 73504 0 2
// end ; end ;
72575: GO 72155
72577: POP
72578: POP
// end ;
72579: LD_VAR 0 3
72583: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72584: LD_INT 0
72586: PPUSH
72587: PPUSH
72588: PPUSH
// if not unit or IsInUnit ( unit ) then
72589: LD_VAR 0 1
72593: NOT
72594: PUSH
72595: LD_VAR 0 1
72599: PPUSH
72600: CALL_OW 310
72604: OR
72605: IFFALSE 72609
// exit ;
72607: GO 72700
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72609: LD_ADDR_VAR 0 4
72613: PUSH
72614: LD_VAR 0 1
72618: PPUSH
72619: CALL_OW 250
72623: PPUSH
72624: LD_VAR 0 2
72628: PPUSH
72629: LD_INT 1
72631: PPUSH
72632: CALL_OW 272
72636: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72637: LD_ADDR_VAR 0 5
72641: PUSH
72642: LD_VAR 0 1
72646: PPUSH
72647: CALL_OW 251
72651: PPUSH
72652: LD_VAR 0 2
72656: PPUSH
72657: LD_INT 1
72659: PPUSH
72660: CALL_OW 273
72664: ST_TO_ADDR
// if ValidHex ( x , y ) then
72665: LD_VAR 0 4
72669: PPUSH
72670: LD_VAR 0 5
72674: PPUSH
72675: CALL_OW 488
72679: IFFALSE 72700
// ComTurnXY ( unit , x , y ) ;
72681: LD_VAR 0 1
72685: PPUSH
72686: LD_VAR 0 4
72690: PPUSH
72691: LD_VAR 0 5
72695: PPUSH
72696: CALL_OW 118
// end ;
72700: LD_VAR 0 3
72704: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72705: LD_INT 0
72707: PPUSH
72708: PPUSH
// result := false ;
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: LD_INT 0
72716: ST_TO_ADDR
// if not units then
72717: LD_VAR 0 2
72721: NOT
72722: IFFALSE 72726
// exit ;
72724: GO 72771
// for i in units do
72726: LD_ADDR_VAR 0 4
72730: PUSH
72731: LD_VAR 0 2
72735: PUSH
72736: FOR_IN
72737: IFFALSE 72769
// if See ( side , i ) then
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 4
72748: PPUSH
72749: CALL_OW 292
72753: IFFALSE 72767
// begin result := true ;
72755: LD_ADDR_VAR 0 3
72759: PUSH
72760: LD_INT 1
72762: ST_TO_ADDR
// exit ;
72763: POP
72764: POP
72765: GO 72771
// end ;
72767: GO 72736
72769: POP
72770: POP
// end ;
72771: LD_VAR 0 3
72775: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72776: LD_INT 0
72778: PPUSH
72779: PPUSH
72780: PPUSH
72781: PPUSH
// if not unit or not points then
72782: LD_VAR 0 1
72786: NOT
72787: PUSH
72788: LD_VAR 0 2
72792: NOT
72793: OR
72794: IFFALSE 72798
// exit ;
72796: GO 72888
// dist := 99999 ;
72798: LD_ADDR_VAR 0 5
72802: PUSH
72803: LD_INT 99999
72805: ST_TO_ADDR
// for i in points do
72806: LD_ADDR_VAR 0 4
72810: PUSH
72811: LD_VAR 0 2
72815: PUSH
72816: FOR_IN
72817: IFFALSE 72886
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72819: LD_ADDR_VAR 0 6
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: LD_VAR 0 4
72833: PUSH
72834: LD_INT 1
72836: ARRAY
72837: PPUSH
72838: LD_VAR 0 4
72842: PUSH
72843: LD_INT 2
72845: ARRAY
72846: PPUSH
72847: CALL_OW 297
72851: ST_TO_ADDR
// if tmpDist < dist then
72852: LD_VAR 0 6
72856: PUSH
72857: LD_VAR 0 5
72861: LESS
72862: IFFALSE 72884
// begin result := i ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_VAR 0 4
72873: ST_TO_ADDR
// dist := tmpDist ;
72874: LD_ADDR_VAR 0 5
72878: PUSH
72879: LD_VAR 0 6
72883: ST_TO_ADDR
// end ; end ;
72884: GO 72816
72886: POP
72887: POP
// end ;
72888: LD_VAR 0 3
72892: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72893: LD_INT 0
72895: PPUSH
// uc_side := side ;
72896: LD_ADDR_OWVAR 20
72900: PUSH
72901: LD_VAR 0 1
72905: ST_TO_ADDR
// uc_nation := 3 ;
72906: LD_ADDR_OWVAR 21
72910: PUSH
72911: LD_INT 3
72913: ST_TO_ADDR
// vc_chassis := 25 ;
72914: LD_ADDR_OWVAR 37
72918: PUSH
72919: LD_INT 25
72921: ST_TO_ADDR
// vc_engine := engine_siberite ;
72922: LD_ADDR_OWVAR 39
72926: PUSH
72927: LD_INT 3
72929: ST_TO_ADDR
// vc_control := control_computer ;
72930: LD_ADDR_OWVAR 38
72934: PUSH
72935: LD_INT 3
72937: ST_TO_ADDR
// vc_weapon := 59 ;
72938: LD_ADDR_OWVAR 40
72942: PUSH
72943: LD_INT 59
72945: ST_TO_ADDR
// result := CreateVehicle ;
72946: LD_ADDR_VAR 0 5
72950: PUSH
72951: CALL_OW 45
72955: ST_TO_ADDR
// SetDir ( result , d ) ;
72956: LD_VAR 0 5
72960: PPUSH
72961: LD_VAR 0 4
72965: PPUSH
72966: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72970: LD_VAR 0 5
72974: PPUSH
72975: LD_VAR 0 2
72979: PPUSH
72980: LD_VAR 0 3
72984: PPUSH
72985: LD_INT 0
72987: PPUSH
72988: CALL_OW 48
// end ;
72992: LD_VAR 0 5
72996: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72997: LD_INT 0
72999: PPUSH
73000: PPUSH
73001: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73002: LD_ADDR_VAR 0 2
73006: PUSH
73007: LD_INT 0
73009: PUSH
73010: LD_INT 0
73012: PUSH
73013: LD_INT 0
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73025: LD_VAR 0 1
73029: NOT
73030: PUSH
73031: LD_VAR 0 1
73035: PPUSH
73036: CALL_OW 264
73040: PUSH
73041: LD_INT 12
73043: PUSH
73044: LD_INT 51
73046: PUSH
73047: LD_INT 32
73049: PUSH
73050: LD_INT 89
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: IN
73059: NOT
73060: OR
73061: IFFALSE 73065
// exit ;
73063: GO 73163
// for i := 1 to 3 do
73065: LD_ADDR_VAR 0 3
73069: PUSH
73070: DOUBLE
73071: LD_INT 1
73073: DEC
73074: ST_TO_ADDR
73075: LD_INT 3
73077: PUSH
73078: FOR_TO
73079: IFFALSE 73161
// begin tmp := GetCargo ( cargo , i ) ;
73081: LD_ADDR_VAR 0 4
73085: PUSH
73086: LD_VAR 0 1
73090: PPUSH
73091: LD_VAR 0 3
73095: PPUSH
73096: CALL_OW 289
73100: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73101: LD_ADDR_VAR 0 2
73105: PUSH
73106: LD_VAR 0 2
73110: PPUSH
73111: LD_VAR 0 3
73115: PPUSH
73116: LD_VAR 0 4
73120: PPUSH
73121: CALL_OW 1
73125: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73126: LD_ADDR_VAR 0 2
73130: PUSH
73131: LD_VAR 0 2
73135: PPUSH
73136: LD_INT 4
73138: PPUSH
73139: LD_VAR 0 2
73143: PUSH
73144: LD_INT 4
73146: ARRAY
73147: PUSH
73148: LD_VAR 0 4
73152: PLUS
73153: PPUSH
73154: CALL_OW 1
73158: ST_TO_ADDR
// end ;
73159: GO 73078
73161: POP
73162: POP
// end ;
73163: LD_VAR 0 2
73167: RET
// export function Length ( array ) ; begin
73168: LD_INT 0
73170: PPUSH
// result := array + 0 ;
73171: LD_ADDR_VAR 0 2
73175: PUSH
73176: LD_VAR 0 1
73180: PUSH
73181: LD_INT 0
73183: PLUS
73184: ST_TO_ADDR
// end ;
73185: LD_VAR 0 2
73189: RET
// export function PrepareArray ( array ) ; begin
73190: LD_INT 0
73192: PPUSH
// result := array diff 0 ;
73193: LD_ADDR_VAR 0 2
73197: PUSH
73198: LD_VAR 0 1
73202: PUSH
73203: LD_INT 0
73205: DIFF
73206: ST_TO_ADDR
// if not result [ 1 ] then
73207: LD_VAR 0 2
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: NOT
73216: IFFALSE 73236
// result := Delete ( result , 1 ) ;
73218: LD_ADDR_VAR 0 2
73222: PUSH
73223: LD_VAR 0 2
73227: PPUSH
73228: LD_INT 1
73230: PPUSH
73231: CALL_OW 3
73235: ST_TO_ADDR
// end ;
73236: LD_VAR 0 2
73240: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73241: LD_INT 0
73243: PPUSH
73244: PPUSH
73245: PPUSH
73246: PPUSH
// sibRocketRange := 25 ;
73247: LD_ADDR_VAR 0 6
73251: PUSH
73252: LD_INT 25
73254: ST_TO_ADDR
// result := false ;
73255: LD_ADDR_VAR 0 4
73259: PUSH
73260: LD_INT 0
73262: ST_TO_ADDR
// for i := 0 to 5 do
73263: LD_ADDR_VAR 0 5
73267: PUSH
73268: DOUBLE
73269: LD_INT 0
73271: DEC
73272: ST_TO_ADDR
73273: LD_INT 5
73275: PUSH
73276: FOR_TO
73277: IFFALSE 73344
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73279: LD_VAR 0 1
73283: PPUSH
73284: LD_VAR 0 5
73288: PPUSH
73289: LD_VAR 0 6
73293: PPUSH
73294: CALL_OW 272
73298: PPUSH
73299: LD_VAR 0 2
73303: PPUSH
73304: LD_VAR 0 5
73308: PPUSH
73309: LD_VAR 0 6
73313: PPUSH
73314: CALL_OW 273
73318: PPUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: CALL_OW 309
73328: IFFALSE 73342
// begin result := true ;
73330: LD_ADDR_VAR 0 4
73334: PUSH
73335: LD_INT 1
73337: ST_TO_ADDR
// exit ;
73338: POP
73339: POP
73340: GO 73346
// end ;
73342: GO 73276
73344: POP
73345: POP
// end ;
73346: LD_VAR 0 4
73350: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73351: LD_INT 0
73353: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73354: LD_VAR 0 1
73358: PPUSH
73359: LD_VAR 0 2
73363: PPUSH
73364: LD_INT 0
73366: PPUSH
73367: LD_INT 0
73369: PPUSH
73370: LD_INT 1
73372: PPUSH
73373: LD_INT 0
73375: PPUSH
73376: CALL_OW 587
// end ;
73380: LD_VAR 0 3
73384: RET
// export function CenterOnNow ( unit ) ; begin
73385: LD_INT 0
73387: PPUSH
// result := IsInUnit ( unit ) ;
73388: LD_ADDR_VAR 0 2
73392: PUSH
73393: LD_VAR 0 1
73397: PPUSH
73398: CALL_OW 310
73402: ST_TO_ADDR
// if not result then
73403: LD_VAR 0 2
73407: NOT
73408: IFFALSE 73420
// result := unit ;
73410: LD_ADDR_VAR 0 2
73414: PUSH
73415: LD_VAR 0 1
73419: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73420: LD_VAR 0 1
73424: PPUSH
73425: CALL_OW 87
// end ;
73429: LD_VAR 0 2
73433: RET
// export function ComMoveHex ( unit , hex ) ; begin
73434: LD_INT 0
73436: PPUSH
// if not hex then
73437: LD_VAR 0 2
73441: NOT
73442: IFFALSE 73446
// exit ;
73444: GO 73499
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73446: LD_VAR 0 2
73450: PUSH
73451: LD_INT 1
73453: ARRAY
73454: PPUSH
73455: LD_VAR 0 2
73459: PUSH
73460: LD_INT 2
73462: ARRAY
73463: PPUSH
73464: CALL_OW 428
73468: IFFALSE 73472
// exit ;
73470: GO 73499
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73472: LD_VAR 0 1
73476: PPUSH
73477: LD_VAR 0 2
73481: PUSH
73482: LD_INT 1
73484: ARRAY
73485: PPUSH
73486: LD_VAR 0 2
73490: PUSH
73491: LD_INT 2
73493: ARRAY
73494: PPUSH
73495: CALL_OW 111
// end ;
73499: LD_VAR 0 3
73503: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73504: LD_INT 0
73506: PPUSH
73507: PPUSH
73508: PPUSH
// if not unit or not enemy then
73509: LD_VAR 0 1
73513: NOT
73514: PUSH
73515: LD_VAR 0 2
73519: NOT
73520: OR
73521: IFFALSE 73525
// exit ;
73523: GO 73649
// x := GetX ( enemy ) ;
73525: LD_ADDR_VAR 0 4
73529: PUSH
73530: LD_VAR 0 2
73534: PPUSH
73535: CALL_OW 250
73539: ST_TO_ADDR
// y := GetY ( enemy ) ;
73540: LD_ADDR_VAR 0 5
73544: PUSH
73545: LD_VAR 0 2
73549: PPUSH
73550: CALL_OW 251
73554: ST_TO_ADDR
// if ValidHex ( x , y ) then
73555: LD_VAR 0 4
73559: PPUSH
73560: LD_VAR 0 5
73564: PPUSH
73565: CALL_OW 488
73569: IFFALSE 73649
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73571: LD_VAR 0 2
73575: PPUSH
73576: CALL_OW 247
73580: PUSH
73581: LD_INT 3
73583: PUSH
73584: LD_INT 2
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: IN
73591: PUSH
73592: LD_VAR 0 1
73596: PPUSH
73597: CALL_OW 255
73601: PPUSH
73602: LD_VAR 0 2
73606: PPUSH
73607: CALL_OW 292
73611: AND
73612: IFFALSE 73630
// ComAttackUnit ( unit , enemy ) else
73614: LD_VAR 0 1
73618: PPUSH
73619: LD_VAR 0 2
73623: PPUSH
73624: CALL_OW 115
73628: GO 73649
// ComAgressiveMove ( unit , x , y ) ;
73630: LD_VAR 0 1
73634: PPUSH
73635: LD_VAR 0 4
73639: PPUSH
73640: LD_VAR 0 5
73644: PPUSH
73645: CALL_OW 114
// end ; end_of_file
73649: LD_VAR 0 3
73653: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73654: LD_VAR 0 1
73658: PUSH
73659: LD_INT 200
73661: DOUBLE
73662: GREATEREQUAL
73663: IFFALSE 73671
73665: LD_INT 299
73667: DOUBLE
73668: LESSEQUAL
73669: IFTRUE 73673
73671: GO 73705
73673: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73674: LD_VAR 0 1
73678: PPUSH
73679: LD_VAR 0 2
73683: PPUSH
73684: LD_VAR 0 3
73688: PPUSH
73689: LD_VAR 0 4
73693: PPUSH
73694: LD_VAR 0 5
73698: PPUSH
73699: CALL 27378 0 5
73703: GO 73782
73705: LD_INT 300
73707: DOUBLE
73708: GREATEREQUAL
73709: IFFALSE 73717
73711: LD_INT 399
73713: DOUBLE
73714: LESSEQUAL
73715: IFTRUE 73719
73717: GO 73781
73719: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73720: LD_VAR 0 1
73724: PPUSH
73725: LD_VAR 0 2
73729: PPUSH
73730: LD_VAR 0 3
73734: PPUSH
73735: LD_VAR 0 4
73739: PPUSH
73740: LD_VAR 0 5
73744: PPUSH
73745: LD_VAR 0 6
73749: PPUSH
73750: LD_VAR 0 7
73754: PPUSH
73755: LD_VAR 0 8
73759: PPUSH
73760: LD_VAR 0 9
73764: PPUSH
73765: LD_VAR 0 10
73769: PPUSH
73770: LD_VAR 0 11
73774: PPUSH
73775: CALL 23703 0 11
73779: GO 73782
73781: POP
// end ;
73782: PPOPN 11
73784: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73785: LD_VAR 0 1
73789: PPUSH
73790: LD_VAR 0 2
73794: PPUSH
73795: LD_VAR 0 3
73799: PPUSH
73800: LD_VAR 0 4
73804: PPUSH
73805: LD_VAR 0 5
73809: PPUSH
73810: CALL 27114 0 5
// end ; end_of_file
73814: PPOPN 5
73816: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_VAR 0 2
73826: PPUSH
73827: LD_VAR 0 3
73831: PPUSH
73832: LD_VAR 0 4
73836: PPUSH
73837: LD_VAR 0 5
73841: PPUSH
73842: LD_VAR 0 6
73846: PPUSH
73847: CALL 11355 0 6
// end ;
73851: PPOPN 6
73853: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73854: LD_INT 0
73856: PPUSH
// begin if not units then
73857: LD_VAR 0 1
73861: NOT
73862: IFFALSE 73866
// exit ;
73864: GO 73866
// end ;
73866: PPOPN 7
73868: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73869: CALL 11259 0 0
// end ;
73873: PPOPN 1
73875: END
