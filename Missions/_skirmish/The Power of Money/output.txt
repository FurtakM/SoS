// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 27019 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 27139 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 27115 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 27123 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 67208 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// export globalGameSaveCounter ; every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// every 0 0$1 do
11222: GO 11224
11224: DISABLE
// begin globalGameSaveCounter := 0 ;
11225: LD_ADDR_EXP 26
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11233: LD_STRING setGameSaveCounter(0)
11235: PPUSH
11236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11240: LD_STRING initStreamRollete();
11242: PPUSH
11243: CALL_OW 559
// InitStreamMode ;
11247: CALL 12590 0 0
// DefineStreamItems ( false ) ;
11251: LD_INT 0
11253: PPUSH
11254: CALL 13054 0 1
// end ;
11258: END
// export function SOS_MapStart ( ) ; begin
11259: LD_INT 0
11261: PPUSH
// if streamModeActive then
11262: LD_EXP 27
11266: IFFALSE 11275
// DefineStreamItems ( true ) ;
11268: LD_INT 1
11270: PPUSH
11271: CALL 13054 0 1
// UpdateLuaVariables ( ) ;
11275: CALL 11292 0 0
// UpdateFactoryWaypoints ( ) ;
11279: CALL 25923 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11283: CALL 26180 0 0
// end ;
11287: LD_VAR 0 1
11291: RET
// function UpdateLuaVariables ( ) ; begin
11292: LD_INT 0
11294: PPUSH
// if globalGameSaveCounter then
11295: LD_EXP 26
11299: IFFALSE 11333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11301: LD_ADDR_EXP 26
11305: PUSH
11306: LD_EXP 26
11310: PPUSH
11311: CALL 70965 0 1
11315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11316: LD_STRING setGameSaveCounter(
11318: PUSH
11319: LD_EXP 26
11323: STR
11324: PUSH
11325: LD_STRING )
11327: STR
11328: PPUSH
11329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11333: LD_STRING setGameDifficulty(
11335: PUSH
11336: LD_OWVAR 67
11340: STR
11341: PUSH
11342: LD_STRING )
11344: STR
11345: PPUSH
11346: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11350: LD_STRING displayDifficulty(
11352: PUSH
11353: LD_OWVAR 67
11357: STR
11358: PUSH
11359: LD_STRING )
11361: STR
11362: PPUSH
11363: CALL_OW 559
// end ;
11367: LD_VAR 0 1
11371: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11372: LD_INT 0
11374: PPUSH
// if p2 = stream_mode then
11375: LD_VAR 0 2
11379: PUSH
11380: LD_INT 100
11382: EQUAL
11383: IFFALSE 12386
// begin if not StreamModeActive then
11385: LD_EXP 27
11389: NOT
11390: IFFALSE 11400
// StreamModeActive := true ;
11392: LD_ADDR_EXP 27
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// if p3 = 0 then
11400: LD_VAR 0 3
11404: PUSH
11405: LD_INT 0
11407: EQUAL
11408: IFFALSE 11414
// InitStreamMode ;
11410: CALL 12590 0 0
// if p3 = 1 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 1
11421: EQUAL
11422: IFFALSE 11432
// sRocket := true ;
11424: LD_ADDR_EXP 32
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 2 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: IFFALSE 11450
// sSpeed := true ;
11442: LD_ADDR_EXP 31
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 3 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 3
11457: EQUAL
11458: IFFALSE 11468
// sEngine := true ;
11460: LD_ADDR_EXP 33
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 4 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 4
11475: EQUAL
11476: IFFALSE 11486
// sSpec := true ;
11478: LD_ADDR_EXP 30
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 5 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 5
11493: EQUAL
11494: IFFALSE 11504
// sLevel := true ;
11496: LD_ADDR_EXP 34
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 6 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 6
11511: EQUAL
11512: IFFALSE 11522
// sArmoury := true ;
11514: LD_ADDR_EXP 35
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 7 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 7
11529: EQUAL
11530: IFFALSE 11540
// sRadar := true ;
11532: LD_ADDR_EXP 36
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 8 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 8
11547: EQUAL
11548: IFFALSE 11558
// sBunker := true ;
11550: LD_ADDR_EXP 37
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 9 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 9
11565: EQUAL
11566: IFFALSE 11576
// sHack := true ;
11568: LD_ADDR_EXP 38
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 10 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 10
11583: EQUAL
11584: IFFALSE 11594
// sFire := true ;
11586: LD_ADDR_EXP 39
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 11 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 11
11601: EQUAL
11602: IFFALSE 11612
// sRefresh := true ;
11604: LD_ADDR_EXP 40
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 12 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 12
11619: EQUAL
11620: IFFALSE 11630
// sExp := true ;
11622: LD_ADDR_EXP 41
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 13 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 13
11637: EQUAL
11638: IFFALSE 11648
// sDepot := true ;
11640: LD_ADDR_EXP 42
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 14 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 14
11655: EQUAL
11656: IFFALSE 11666
// sFlag := true ;
11658: LD_ADDR_EXP 43
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 15 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 15
11673: EQUAL
11674: IFFALSE 11684
// sKamikadze := true ;
11676: LD_ADDR_EXP 51
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 16 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 16
11691: EQUAL
11692: IFFALSE 11702
// sTroll := true ;
11694: LD_ADDR_EXP 52
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 17 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 17
11709: EQUAL
11710: IFFALSE 11720
// sSlow := true ;
11712: LD_ADDR_EXP 53
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 18 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 18
11727: EQUAL
11728: IFFALSE 11738
// sLack := true ;
11730: LD_ADDR_EXP 54
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 19 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 19
11745: EQUAL
11746: IFFALSE 11756
// sTank := true ;
11748: LD_ADDR_EXP 56
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 20 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 20
11763: EQUAL
11764: IFFALSE 11774
// sRemote := true ;
11766: LD_ADDR_EXP 57
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 21 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 21
11781: EQUAL
11782: IFFALSE 11792
// sPowell := true ;
11784: LD_ADDR_EXP 58
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 22 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 22
11799: EQUAL
11800: IFFALSE 11810
// sTeleport := true ;
11802: LD_ADDR_EXP 61
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 23 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 23
11817: EQUAL
11818: IFFALSE 11828
// sOilTower := true ;
11820: LD_ADDR_EXP 63
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 24 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 24
11835: EQUAL
11836: IFFALSE 11846
// sShovel := true ;
11838: LD_ADDR_EXP 64
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 25 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 25
11853: EQUAL
11854: IFFALSE 11864
// sSheik := true ;
11856: LD_ADDR_EXP 65
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 26 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 26
11871: EQUAL
11872: IFFALSE 11882
// sEarthquake := true ;
11874: LD_ADDR_EXP 67
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 27 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 27
11889: EQUAL
11890: IFFALSE 11900
// sAI := true ;
11892: LD_ADDR_EXP 68
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 28 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 28
11907: EQUAL
11908: IFFALSE 11918
// sCargo := true ;
11910: LD_ADDR_EXP 71
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 29 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 29
11925: EQUAL
11926: IFFALSE 11936
// sDLaser := true ;
11928: LD_ADDR_EXP 72
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 30 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 30
11943: EQUAL
11944: IFFALSE 11954
// sExchange := true ;
11946: LD_ADDR_EXP 73
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 31 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 31
11961: EQUAL
11962: IFFALSE 11972
// sFac := true ;
11964: LD_ADDR_EXP 74
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 32 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 32
11979: EQUAL
11980: IFFALSE 11990
// sPower := true ;
11982: LD_ADDR_EXP 75
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 33 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 33
11997: EQUAL
11998: IFFALSE 12008
// sRandom := true ;
12000: LD_ADDR_EXP 76
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 34 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 34
12015: EQUAL
12016: IFFALSE 12026
// sShield := true ;
12018: LD_ADDR_EXP 77
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 35 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 35
12033: EQUAL
12034: IFFALSE 12044
// sTime := true ;
12036: LD_ADDR_EXP 78
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 36 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 36
12051: EQUAL
12052: IFFALSE 12062
// sTools := true ;
12054: LD_ADDR_EXP 79
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 101 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 101
12069: EQUAL
12070: IFFALSE 12080
// sSold := true ;
12072: LD_ADDR_EXP 44
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 102 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 102
12087: EQUAL
12088: IFFALSE 12098
// sDiff := true ;
12090: LD_ADDR_EXP 45
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 103 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 103
12105: EQUAL
12106: IFFALSE 12116
// sFog := true ;
12108: LD_ADDR_EXP 48
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 104 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 104
12123: EQUAL
12124: IFFALSE 12134
// sReset := true ;
12126: LD_ADDR_EXP 49
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 105 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 105
12141: EQUAL
12142: IFFALSE 12152
// sSun := true ;
12144: LD_ADDR_EXP 50
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 106 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 106
12159: EQUAL
12160: IFFALSE 12170
// sTiger := true ;
12162: LD_ADDR_EXP 46
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// if p3 = 107 then
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 107
12177: EQUAL
12178: IFFALSE 12188
// sBomb := true ;
12180: LD_ADDR_EXP 47
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// if p3 = 108 then
12188: LD_VAR 0 3
12192: PUSH
12193: LD_INT 108
12195: EQUAL
12196: IFFALSE 12206
// sWound := true ;
12198: LD_ADDR_EXP 55
12202: PUSH
12203: LD_INT 1
12205: ST_TO_ADDR
// if p3 = 109 then
12206: LD_VAR 0 3
12210: PUSH
12211: LD_INT 109
12213: EQUAL
12214: IFFALSE 12224
// sBetray := true ;
12216: LD_ADDR_EXP 59
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// if p3 = 110 then
12224: LD_VAR 0 3
12228: PUSH
12229: LD_INT 110
12231: EQUAL
12232: IFFALSE 12242
// sContamin := true ;
12234: LD_ADDR_EXP 60
12238: PUSH
12239: LD_INT 1
12241: ST_TO_ADDR
// if p3 = 111 then
12242: LD_VAR 0 3
12246: PUSH
12247: LD_INT 111
12249: EQUAL
12250: IFFALSE 12260
// sOil := true ;
12252: LD_ADDR_EXP 62
12256: PUSH
12257: LD_INT 1
12259: ST_TO_ADDR
// if p3 = 112 then
12260: LD_VAR 0 3
12264: PUSH
12265: LD_INT 112
12267: EQUAL
12268: IFFALSE 12278
// sStu := true ;
12270: LD_ADDR_EXP 66
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// if p3 = 113 then
12278: LD_VAR 0 3
12282: PUSH
12283: LD_INT 113
12285: EQUAL
12286: IFFALSE 12296
// sBazooka := true ;
12288: LD_ADDR_EXP 69
12292: PUSH
12293: LD_INT 1
12295: ST_TO_ADDR
// if p3 = 114 then
12296: LD_VAR 0 3
12300: PUSH
12301: LD_INT 114
12303: EQUAL
12304: IFFALSE 12314
// sMortar := true ;
12306: LD_ADDR_EXP 70
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// if p3 = 115 then
12314: LD_VAR 0 3
12318: PUSH
12319: LD_INT 115
12321: EQUAL
12322: IFFALSE 12332
// sRanger := true ;
12324: LD_ADDR_EXP 80
12328: PUSH
12329: LD_INT 1
12331: ST_TO_ADDR
// if p3 = 116 then
12332: LD_VAR 0 3
12336: PUSH
12337: LD_INT 116
12339: EQUAL
12340: IFFALSE 12350
// sComputer := true ;
12342: LD_ADDR_EXP 81
12346: PUSH
12347: LD_INT 1
12349: ST_TO_ADDR
// if p3 = 117 then
12350: LD_VAR 0 3
12354: PUSH
12355: LD_INT 117
12357: EQUAL
12358: IFFALSE 12368
// s30 := true ;
12360: LD_ADDR_EXP 82
12364: PUSH
12365: LD_INT 1
12367: ST_TO_ADDR
// if p3 = 118 then
12368: LD_VAR 0 3
12372: PUSH
12373: LD_INT 118
12375: EQUAL
12376: IFFALSE 12386
// s60 := true ;
12378: LD_ADDR_EXP 83
12382: PUSH
12383: LD_INT 1
12385: ST_TO_ADDR
// end ; if p2 = hack_mode then
12386: LD_VAR 0 2
12390: PUSH
12391: LD_INT 101
12393: EQUAL
12394: IFFALSE 12522
// begin case p3 of 1 :
12396: LD_VAR 0 3
12400: PUSH
12401: LD_INT 1
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12416
12409: POP
// hHackUnlimitedResources ; 2 :
12410: CALL 24669 0 0
12414: GO 12522
12416: LD_INT 2
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12431
12424: POP
// hHackSetLevel10 ; 3 :
12425: CALL 24802 0 0
12429: GO 12522
12431: LD_INT 3
12433: DOUBLE
12434: EQUAL
12435: IFTRUE 12439
12437: GO 12446
12439: POP
// hHackSetLevel10YourUnits ; 4 :
12440: CALL 24887 0 0
12444: GO 12522
12446: LD_INT 4
12448: DOUBLE
12449: EQUAL
12450: IFTRUE 12454
12452: GO 12461
12454: POP
// hHackInvincible ; 5 :
12455: CALL 25335 0 0
12459: GO 12522
12461: LD_INT 5
12463: DOUBLE
12464: EQUAL
12465: IFTRUE 12469
12467: GO 12476
12469: POP
// hHackInvisible ; 6 :
12470: CALL 25446 0 0
12474: GO 12522
12476: LD_INT 6
12478: DOUBLE
12479: EQUAL
12480: IFTRUE 12484
12482: GO 12491
12484: POP
// hHackChangeYourSide ; 7 :
12485: CALL 25503 0 0
12489: GO 12522
12491: LD_INT 7
12493: DOUBLE
12494: EQUAL
12495: IFTRUE 12499
12497: GO 12506
12499: POP
// hHackChangeUnitSide ; 8 :
12500: CALL 25545 0 0
12504: GO 12522
12506: LD_INT 8
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12521
12514: POP
// hHackFog ; end ;
12515: CALL 25646 0 0
12519: GO 12522
12521: POP
// end ; if p2 = game_save_mode then
12522: LD_VAR 0 2
12526: PUSH
12527: LD_INT 102
12529: EQUAL
12530: IFFALSE 12585
// begin if p3 = 1 then
12532: LD_VAR 0 3
12536: PUSH
12537: LD_INT 1
12539: EQUAL
12540: IFFALSE 12552
// globalGameSaveCounter := p4 ;
12542: LD_ADDR_EXP 26
12546: PUSH
12547: LD_VAR 0 4
12551: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 2
12559: EQUAL
12560: PUSH
12561: LD_EXP 26
12565: AND
12566: IFFALSE 12585
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12568: LD_STRING setGameSaveCounter(
12570: PUSH
12571: LD_EXP 26
12575: STR
12576: PUSH
12577: LD_STRING )
12579: STR
12580: PPUSH
12581: CALL_OW 559
// end ; end ;
12585: LD_VAR 0 7
12589: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12590: LD_INT 0
12592: PPUSH
// streamModeActive := false ;
12593: LD_ADDR_EXP 27
12597: PUSH
12598: LD_INT 0
12600: ST_TO_ADDR
// normalCounter := 36 ;
12601: LD_ADDR_EXP 28
12605: PUSH
12606: LD_INT 36
12608: ST_TO_ADDR
// hardcoreCounter := 18 ;
12609: LD_ADDR_EXP 29
12613: PUSH
12614: LD_INT 18
12616: ST_TO_ADDR
// sRocket := false ;
12617: LD_ADDR_EXP 32
12621: PUSH
12622: LD_INT 0
12624: ST_TO_ADDR
// sSpeed := false ;
12625: LD_ADDR_EXP 31
12629: PUSH
12630: LD_INT 0
12632: ST_TO_ADDR
// sEngine := false ;
12633: LD_ADDR_EXP 33
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
// sSpec := false ;
12641: LD_ADDR_EXP 30
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// sLevel := false ;
12649: LD_ADDR_EXP 34
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// sArmoury := false ;
12657: LD_ADDR_EXP 35
12661: PUSH
12662: LD_INT 0
12664: ST_TO_ADDR
// sRadar := false ;
12665: LD_ADDR_EXP 36
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// sBunker := false ;
12673: LD_ADDR_EXP 37
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// sHack := false ;
12681: LD_ADDR_EXP 38
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// sFire := false ;
12689: LD_ADDR_EXP 39
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// sRefresh := false ;
12697: LD_ADDR_EXP 40
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// sExp := false ;
12705: LD_ADDR_EXP 41
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// sDepot := false ;
12713: LD_ADDR_EXP 42
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sFlag := false ;
12721: LD_ADDR_EXP 43
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sKamikadze := false ;
12729: LD_ADDR_EXP 51
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sTroll := false ;
12737: LD_ADDR_EXP 52
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sSlow := false ;
12745: LD_ADDR_EXP 53
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sLack := false ;
12753: LD_ADDR_EXP 54
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sTank := false ;
12761: LD_ADDR_EXP 56
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sRemote := false ;
12769: LD_ADDR_EXP 57
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sPowell := false ;
12777: LD_ADDR_EXP 58
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sTeleport := false ;
12785: LD_ADDR_EXP 61
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sOilTower := false ;
12793: LD_ADDR_EXP 63
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sShovel := false ;
12801: LD_ADDR_EXP 64
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sSheik := false ;
12809: LD_ADDR_EXP 65
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sEarthquake := false ;
12817: LD_ADDR_EXP 67
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// sAI := false ;
12825: LD_ADDR_EXP 68
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// sCargo := false ;
12833: LD_ADDR_EXP 71
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// sDLaser := false ;
12841: LD_ADDR_EXP 72
12845: PUSH
12846: LD_INT 0
12848: ST_TO_ADDR
// sExchange := false ;
12849: LD_ADDR_EXP 73
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// sFac := false ;
12857: LD_ADDR_EXP 74
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// sPower := false ;
12865: LD_ADDR_EXP 75
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// sRandom := false ;
12873: LD_ADDR_EXP 76
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// sShield := false ;
12881: LD_ADDR_EXP 77
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// sTime := false ;
12889: LD_ADDR_EXP 78
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// sTools := false ;
12897: LD_ADDR_EXP 79
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// sSold := false ;
12905: LD_ADDR_EXP 44
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// sDiff := false ;
12913: LD_ADDR_EXP 45
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// sFog := false ;
12921: LD_ADDR_EXP 48
12925: PUSH
12926: LD_INT 0
12928: ST_TO_ADDR
// sReset := false ;
12929: LD_ADDR_EXP 49
12933: PUSH
12934: LD_INT 0
12936: ST_TO_ADDR
// sSun := false ;
12937: LD_ADDR_EXP 50
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
// sTiger := false ;
12945: LD_ADDR_EXP 46
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// sBomb := false ;
12953: LD_ADDR_EXP 47
12957: PUSH
12958: LD_INT 0
12960: ST_TO_ADDR
// sWound := false ;
12961: LD_ADDR_EXP 55
12965: PUSH
12966: LD_INT 0
12968: ST_TO_ADDR
// sBetray := false ;
12969: LD_ADDR_EXP 59
12973: PUSH
12974: LD_INT 0
12976: ST_TO_ADDR
// sContamin := false ;
12977: LD_ADDR_EXP 60
12981: PUSH
12982: LD_INT 0
12984: ST_TO_ADDR
// sOil := false ;
12985: LD_ADDR_EXP 62
12989: PUSH
12990: LD_INT 0
12992: ST_TO_ADDR
// sStu := false ;
12993: LD_ADDR_EXP 66
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// sBazooka := false ;
13001: LD_ADDR_EXP 69
13005: PUSH
13006: LD_INT 0
13008: ST_TO_ADDR
// sMortar := false ;
13009: LD_ADDR_EXP 70
13013: PUSH
13014: LD_INT 0
13016: ST_TO_ADDR
// sRanger := false ;
13017: LD_ADDR_EXP 80
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// sComputer := false ;
13025: LD_ADDR_EXP 81
13029: PUSH
13030: LD_INT 0
13032: ST_TO_ADDR
// s30 := false ;
13033: LD_ADDR_EXP 82
13037: PUSH
13038: LD_INT 0
13040: ST_TO_ADDR
// s60 := false ;
13041: LD_ADDR_EXP 83
13045: PUSH
13046: LD_INT 0
13048: ST_TO_ADDR
// end ;
13049: LD_VAR 0 1
13053: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13054: LD_INT 0
13056: PPUSH
13057: PPUSH
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// result := [ ] ;
13063: LD_ADDR_VAR 0 2
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// if campaign_id = 1 then
13070: LD_OWVAR 69
13074: PUSH
13075: LD_INT 1
13077: EQUAL
13078: IFFALSE 16244
// begin case mission_number of 1 :
13080: LD_OWVAR 70
13084: PUSH
13085: LD_INT 1
13087: DOUBLE
13088: EQUAL
13089: IFTRUE 13093
13091: GO 13169
13093: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: LD_INT 2
13101: PUSH
13102: LD_INT 4
13104: PUSH
13105: LD_INT 11
13107: PUSH
13108: LD_INT 12
13110: PUSH
13111: LD_INT 15
13113: PUSH
13114: LD_INT 16
13116: PUSH
13117: LD_INT 22
13119: PUSH
13120: LD_INT 23
13122: PUSH
13123: LD_INT 26
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 101
13139: PUSH
13140: LD_INT 102
13142: PUSH
13143: LD_INT 106
13145: PUSH
13146: LD_INT 116
13148: PUSH
13149: LD_INT 117
13151: PUSH
13152: LD_INT 118
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: ST_TO_ADDR
13167: GO 16242
13169: LD_INT 2
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13261
13177: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13178: LD_ADDR_VAR 0 2
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: LD_INT 4
13188: PUSH
13189: LD_INT 11
13191: PUSH
13192: LD_INT 12
13194: PUSH
13195: LD_INT 15
13197: PUSH
13198: LD_INT 16
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_INT 23
13206: PUSH
13207: LD_INT 26
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 101
13223: PUSH
13224: LD_INT 102
13226: PUSH
13227: LD_INT 105
13229: PUSH
13230: LD_INT 106
13232: PUSH
13233: LD_INT 108
13235: PUSH
13236: LD_INT 116
13238: PUSH
13239: LD_INT 117
13241: PUSH
13242: LD_INT 118
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: ST_TO_ADDR
13259: GO 16242
13261: LD_INT 3
13263: DOUBLE
13264: EQUAL
13265: IFTRUE 13269
13267: GO 13357
13269: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 15
13292: PUSH
13293: LD_INT 16
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_INT 26
13301: PUSH
13302: LD_INT 36
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 101
13319: PUSH
13320: LD_INT 102
13322: PUSH
13323: LD_INT 105
13325: PUSH
13326: LD_INT 106
13328: PUSH
13329: LD_INT 108
13331: PUSH
13332: LD_INT 116
13334: PUSH
13335: LD_INT 117
13337: PUSH
13338: LD_INT 118
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: ST_TO_ADDR
13355: GO 16242
13357: LD_INT 4
13359: DOUBLE
13360: EQUAL
13361: IFTRUE 13365
13363: GO 13461
13365: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13366: LD_ADDR_VAR 0 2
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 4
13376: PUSH
13377: LD_INT 5
13379: PUSH
13380: LD_INT 8
13382: PUSH
13383: LD_INT 11
13385: PUSH
13386: LD_INT 12
13388: PUSH
13389: LD_INT 15
13391: PUSH
13392: LD_INT 16
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 23
13400: PUSH
13401: LD_INT 26
13403: PUSH
13404: LD_INT 36
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 101
13423: PUSH
13424: LD_INT 102
13426: PUSH
13427: LD_INT 105
13429: PUSH
13430: LD_INT 106
13432: PUSH
13433: LD_INT 108
13435: PUSH
13436: LD_INT 116
13438: PUSH
13439: LD_INT 117
13441: PUSH
13442: LD_INT 118
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: ST_TO_ADDR
13459: GO 16242
13461: LD_INT 5
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13581
13469: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: LD_INT 4
13480: PUSH
13481: LD_INT 5
13483: PUSH
13484: LD_INT 6
13486: PUSH
13487: LD_INT 8
13489: PUSH
13490: LD_INT 11
13492: PUSH
13493: LD_INT 12
13495: PUSH
13496: LD_INT 15
13498: PUSH
13499: LD_INT 16
13501: PUSH
13502: LD_INT 22
13504: PUSH
13505: LD_INT 23
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 26
13513: PUSH
13514: LD_INT 36
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 101
13535: PUSH
13536: LD_INT 102
13538: PUSH
13539: LD_INT 105
13541: PUSH
13542: LD_INT 106
13544: PUSH
13545: LD_INT 108
13547: PUSH
13548: LD_INT 109
13550: PUSH
13551: LD_INT 112
13553: PUSH
13554: LD_INT 116
13556: PUSH
13557: LD_INT 117
13559: PUSH
13560: LD_INT 118
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: ST_TO_ADDR
13579: GO 16242
13581: LD_INT 6
13583: DOUBLE
13584: EQUAL
13585: IFTRUE 13589
13587: GO 13721
13589: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13590: LD_ADDR_VAR 0 2
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: LD_INT 4
13600: PUSH
13601: LD_INT 5
13603: PUSH
13604: LD_INT 6
13606: PUSH
13607: LD_INT 8
13609: PUSH
13610: LD_INT 11
13612: PUSH
13613: LD_INT 12
13615: PUSH
13616: LD_INT 15
13618: PUSH
13619: LD_INT 16
13621: PUSH
13622: LD_INT 20
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 22
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 26
13639: PUSH
13640: LD_INT 30
13642: PUSH
13643: LD_INT 31
13645: PUSH
13646: LD_INT 32
13648: PUSH
13649: LD_INT 36
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 105
13681: PUSH
13682: LD_INT 106
13684: PUSH
13685: LD_INT 108
13687: PUSH
13688: LD_INT 109
13690: PUSH
13691: LD_INT 112
13693: PUSH
13694: LD_INT 116
13696: PUSH
13697: LD_INT 117
13699: PUSH
13700: LD_INT 118
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 16242
13721: LD_INT 7
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13841
13729: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: LD_INT 5
13743: PUSH
13744: LD_INT 7
13746: PUSH
13747: LD_INT 11
13749: PUSH
13750: LD_INT 12
13752: PUSH
13753: LD_INT 15
13755: PUSH
13756: LD_INT 16
13758: PUSH
13759: LD_INT 20
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 25
13773: PUSH
13774: LD_INT 26
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 101
13795: PUSH
13796: LD_INT 102
13798: PUSH
13799: LD_INT 103
13801: PUSH
13802: LD_INT 105
13804: PUSH
13805: LD_INT 106
13807: PUSH
13808: LD_INT 108
13810: PUSH
13811: LD_INT 112
13813: PUSH
13814: LD_INT 116
13816: PUSH
13817: LD_INT 117
13819: PUSH
13820: LD_INT 118
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: ST_TO_ADDR
13839: GO 16242
13841: LD_INT 8
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13849
13847: GO 13989
13849: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13850: LD_ADDR_VAR 0 2
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: LD_INT 4
13860: PUSH
13861: LD_INT 5
13863: PUSH
13864: LD_INT 6
13866: PUSH
13867: LD_INT 7
13869: PUSH
13870: LD_INT 8
13872: PUSH
13873: LD_INT 11
13875: PUSH
13876: LD_INT 12
13878: PUSH
13879: LD_INT 15
13881: PUSH
13882: LD_INT 16
13884: PUSH
13885: LD_INT 20
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_INT 23
13896: PUSH
13897: LD_INT 25
13899: PUSH
13900: LD_INT 26
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 31
13908: PUSH
13909: LD_INT 32
13911: PUSH
13912: LD_INT 36
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 101
13939: PUSH
13940: LD_INT 102
13942: PUSH
13943: LD_INT 103
13945: PUSH
13946: LD_INT 105
13948: PUSH
13949: LD_INT 106
13951: PUSH
13952: LD_INT 108
13954: PUSH
13955: LD_INT 109
13957: PUSH
13958: LD_INT 112
13960: PUSH
13961: LD_INT 116
13963: PUSH
13964: LD_INT 117
13966: PUSH
13967: LD_INT 118
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: ST_TO_ADDR
13987: GO 16242
13989: LD_INT 9
13991: DOUBLE
13992: EQUAL
13993: IFTRUE 13997
13995: GO 14145
13997: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13998: LD_ADDR_VAR 0 2
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 4
14008: PUSH
14009: LD_INT 5
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: LD_INT 7
14017: PUSH
14018: LD_INT 8
14020: PUSH
14021: LD_INT 11
14023: PUSH
14024: LD_INT 12
14026: PUSH
14027: LD_INT 15
14029: PUSH
14030: LD_INT 16
14032: PUSH
14033: LD_INT 20
14035: PUSH
14036: LD_INT 21
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_INT 23
14044: PUSH
14045: LD_INT 25
14047: PUSH
14048: LD_INT 26
14050: PUSH
14051: LD_INT 28
14053: PUSH
14054: LD_INT 30
14056: PUSH
14057: LD_INT 31
14059: PUSH
14060: LD_INT 32
14062: PUSH
14063: LD_INT 36
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 101
14091: PUSH
14092: LD_INT 102
14094: PUSH
14095: LD_INT 103
14097: PUSH
14098: LD_INT 105
14100: PUSH
14101: LD_INT 106
14103: PUSH
14104: LD_INT 108
14106: PUSH
14107: LD_INT 109
14109: PUSH
14110: LD_INT 112
14112: PUSH
14113: LD_INT 114
14115: PUSH
14116: LD_INT 116
14118: PUSH
14119: LD_INT 117
14121: PUSH
14122: LD_INT 118
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
14143: GO 16242
14145: LD_INT 10
14147: DOUBLE
14148: EQUAL
14149: IFTRUE 14153
14151: GO 14349
14153: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: LD_INT 5
14167: PUSH
14168: LD_INT 6
14170: PUSH
14171: LD_INT 7
14173: PUSH
14174: LD_INT 8
14176: PUSH
14177: LD_INT 9
14179: PUSH
14180: LD_INT 10
14182: PUSH
14183: LD_INT 11
14185: PUSH
14186: LD_INT 12
14188: PUSH
14189: LD_INT 13
14191: PUSH
14192: LD_INT 14
14194: PUSH
14195: LD_INT 15
14197: PUSH
14198: LD_INT 16
14200: PUSH
14201: LD_INT 17
14203: PUSH
14204: LD_INT 18
14206: PUSH
14207: LD_INT 19
14209: PUSH
14210: LD_INT 20
14212: PUSH
14213: LD_INT 21
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_INT 23
14221: PUSH
14222: LD_INT 24
14224: PUSH
14225: LD_INT 25
14227: PUSH
14228: LD_INT 26
14230: PUSH
14231: LD_INT 28
14233: PUSH
14234: LD_INT 30
14236: PUSH
14237: LD_INT 31
14239: PUSH
14240: LD_INT 32
14242: PUSH
14243: LD_INT 36
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 101
14279: PUSH
14280: LD_INT 102
14282: PUSH
14283: LD_INT 103
14285: PUSH
14286: LD_INT 104
14288: PUSH
14289: LD_INT 105
14291: PUSH
14292: LD_INT 106
14294: PUSH
14295: LD_INT 107
14297: PUSH
14298: LD_INT 108
14300: PUSH
14301: LD_INT 109
14303: PUSH
14304: LD_INT 110
14306: PUSH
14307: LD_INT 111
14309: PUSH
14310: LD_INT 112
14312: PUSH
14313: LD_INT 114
14315: PUSH
14316: LD_INT 116
14318: PUSH
14319: LD_INT 117
14321: PUSH
14322: LD_INT 118
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: ST_TO_ADDR
14347: GO 16242
14349: LD_INT 11
14351: DOUBLE
14352: EQUAL
14353: IFTRUE 14357
14355: GO 14561
14357: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14358: LD_ADDR_VAR 0 2
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 4
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: LD_INT 6
14377: PUSH
14378: LD_INT 7
14380: PUSH
14381: LD_INT 8
14383: PUSH
14384: LD_INT 9
14386: PUSH
14387: LD_INT 10
14389: PUSH
14390: LD_INT 11
14392: PUSH
14393: LD_INT 12
14395: PUSH
14396: LD_INT 13
14398: PUSH
14399: LD_INT 14
14401: PUSH
14402: LD_INT 15
14404: PUSH
14405: LD_INT 16
14407: PUSH
14408: LD_INT 17
14410: PUSH
14411: LD_INT 18
14413: PUSH
14414: LD_INT 19
14416: PUSH
14417: LD_INT 20
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 26
14437: PUSH
14438: LD_INT 28
14440: PUSH
14441: LD_INT 30
14443: PUSH
14444: LD_INT 31
14446: PUSH
14447: LD_INT 32
14449: PUSH
14450: LD_INT 34
14452: PUSH
14453: LD_INT 36
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 103
14497: PUSH
14498: LD_INT 104
14500: PUSH
14501: LD_INT 105
14503: PUSH
14504: LD_INT 106
14506: PUSH
14507: LD_INT 107
14509: PUSH
14510: LD_INT 108
14512: PUSH
14513: LD_INT 109
14515: PUSH
14516: LD_INT 110
14518: PUSH
14519: LD_INT 111
14521: PUSH
14522: LD_INT 112
14524: PUSH
14525: LD_INT 114
14527: PUSH
14528: LD_INT 116
14530: PUSH
14531: LD_INT 117
14533: PUSH
14534: LD_INT 118
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: ST_TO_ADDR
14559: GO 16242
14561: LD_INT 12
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14789
14569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 7
14595: PUSH
14596: LD_INT 8
14598: PUSH
14599: LD_INT 9
14601: PUSH
14602: LD_INT 10
14604: PUSH
14605: LD_INT 11
14607: PUSH
14608: LD_INT 12
14610: PUSH
14611: LD_INT 13
14613: PUSH
14614: LD_INT 14
14616: PUSH
14617: LD_INT 15
14619: PUSH
14620: LD_INT 16
14622: PUSH
14623: LD_INT 17
14625: PUSH
14626: LD_INT 18
14628: PUSH
14629: LD_INT 19
14631: PUSH
14632: LD_INT 20
14634: PUSH
14635: LD_INT 21
14637: PUSH
14638: LD_INT 22
14640: PUSH
14641: LD_INT 23
14643: PUSH
14644: LD_INT 24
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 26
14652: PUSH
14653: LD_INT 27
14655: PUSH
14656: LD_INT 28
14658: PUSH
14659: LD_INT 30
14661: PUSH
14662: LD_INT 31
14664: PUSH
14665: LD_INT 32
14667: PUSH
14668: LD_INT 33
14670: PUSH
14671: LD_INT 34
14673: PUSH
14674: LD_INT 36
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 101
14715: PUSH
14716: LD_INT 102
14718: PUSH
14719: LD_INT 103
14721: PUSH
14722: LD_INT 104
14724: PUSH
14725: LD_INT 105
14727: PUSH
14728: LD_INT 106
14730: PUSH
14731: LD_INT 107
14733: PUSH
14734: LD_INT 108
14736: PUSH
14737: LD_INT 109
14739: PUSH
14740: LD_INT 110
14742: PUSH
14743: LD_INT 111
14745: PUSH
14746: LD_INT 112
14748: PUSH
14749: LD_INT 113
14751: PUSH
14752: LD_INT 114
14754: PUSH
14755: LD_INT 116
14757: PUSH
14758: LD_INT 117
14760: PUSH
14761: LD_INT 118
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: ST_TO_ADDR
14787: GO 16242
14789: LD_INT 13
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 15005
14797: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: LD_INT 5
14817: PUSH
14818: LD_INT 8
14820: PUSH
14821: LD_INT 9
14823: PUSH
14824: LD_INT 10
14826: PUSH
14827: LD_INT 11
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: LD_INT 14
14835: PUSH
14836: LD_INT 15
14838: PUSH
14839: LD_INT 16
14841: PUSH
14842: LD_INT 17
14844: PUSH
14845: LD_INT 18
14847: PUSH
14848: LD_INT 19
14850: PUSH
14851: LD_INT 20
14853: PUSH
14854: LD_INT 21
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_INT 23
14862: PUSH
14863: LD_INT 24
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 26
14871: PUSH
14872: LD_INT 27
14874: PUSH
14875: LD_INT 28
14877: PUSH
14878: LD_INT 30
14880: PUSH
14881: LD_INT 31
14883: PUSH
14884: LD_INT 32
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 34
14892: PUSH
14893: LD_INT 36
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 101
14931: PUSH
14932: LD_INT 102
14934: PUSH
14935: LD_INT 103
14937: PUSH
14938: LD_INT 104
14940: PUSH
14941: LD_INT 105
14943: PUSH
14944: LD_INT 106
14946: PUSH
14947: LD_INT 107
14949: PUSH
14950: LD_INT 108
14952: PUSH
14953: LD_INT 109
14955: PUSH
14956: LD_INT 110
14958: PUSH
14959: LD_INT 111
14961: PUSH
14962: LD_INT 112
14964: PUSH
14965: LD_INT 113
14967: PUSH
14968: LD_INT 114
14970: PUSH
14971: LD_INT 116
14973: PUSH
14974: LD_INT 117
14976: PUSH
14977: LD_INT 118
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: ST_TO_ADDR
15003: GO 16242
15005: LD_INT 14
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15237
15013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: LD_INT 4
15030: PUSH
15031: LD_INT 5
15033: PUSH
15034: LD_INT 6
15036: PUSH
15037: LD_INT 7
15039: PUSH
15040: LD_INT 8
15042: PUSH
15043: LD_INT 9
15045: PUSH
15046: LD_INT 10
15048: PUSH
15049: LD_INT 11
15051: PUSH
15052: LD_INT 12
15054: PUSH
15055: LD_INT 13
15057: PUSH
15058: LD_INT 14
15060: PUSH
15061: LD_INT 15
15063: PUSH
15064: LD_INT 16
15066: PUSH
15067: LD_INT 17
15069: PUSH
15070: LD_INT 18
15072: PUSH
15073: LD_INT 19
15075: PUSH
15076: LD_INT 20
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 22
15084: PUSH
15085: LD_INT 23
15087: PUSH
15088: LD_INT 24
15090: PUSH
15091: LD_INT 25
15093: PUSH
15094: LD_INT 26
15096: PUSH
15097: LD_INT 27
15099: PUSH
15100: LD_INT 28
15102: PUSH
15103: LD_INT 29
15105: PUSH
15106: LD_INT 30
15108: PUSH
15109: LD_INT 31
15111: PUSH
15112: LD_INT 32
15114: PUSH
15115: LD_INT 33
15117: PUSH
15118: LD_INT 34
15120: PUSH
15121: LD_INT 36
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 101
15163: PUSH
15164: LD_INT 102
15166: PUSH
15167: LD_INT 103
15169: PUSH
15170: LD_INT 104
15172: PUSH
15173: LD_INT 105
15175: PUSH
15176: LD_INT 106
15178: PUSH
15179: LD_INT 107
15181: PUSH
15182: LD_INT 108
15184: PUSH
15185: LD_INT 109
15187: PUSH
15188: LD_INT 110
15190: PUSH
15191: LD_INT 111
15193: PUSH
15194: LD_INT 112
15196: PUSH
15197: LD_INT 113
15199: PUSH
15200: LD_INT 114
15202: PUSH
15203: LD_INT 116
15205: PUSH
15206: LD_INT 117
15208: PUSH
15209: LD_INT 118
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: ST_TO_ADDR
15235: GO 16242
15237: LD_INT 15
15239: DOUBLE
15240: EQUAL
15241: IFTRUE 15245
15243: GO 15469
15245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15246: LD_ADDR_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: LD_INT 3
15259: PUSH
15260: LD_INT 4
15262: PUSH
15263: LD_INT 5
15265: PUSH
15266: LD_INT 6
15268: PUSH
15269: LD_INT 7
15271: PUSH
15272: LD_INT 8
15274: PUSH
15275: LD_INT 9
15277: PUSH
15278: LD_INT 10
15280: PUSH
15281: LD_INT 11
15283: PUSH
15284: LD_INT 12
15286: PUSH
15287: LD_INT 13
15289: PUSH
15290: LD_INT 14
15292: PUSH
15293: LD_INT 15
15295: PUSH
15296: LD_INT 16
15298: PUSH
15299: LD_INT 17
15301: PUSH
15302: LD_INT 18
15304: PUSH
15305: LD_INT 19
15307: PUSH
15308: LD_INT 20
15310: PUSH
15311: LD_INT 21
15313: PUSH
15314: LD_INT 22
15316: PUSH
15317: LD_INT 23
15319: PUSH
15320: LD_INT 24
15322: PUSH
15323: LD_INT 25
15325: PUSH
15326: LD_INT 26
15328: PUSH
15329: LD_INT 27
15331: PUSH
15332: LD_INT 28
15334: PUSH
15335: LD_INT 29
15337: PUSH
15338: LD_INT 30
15340: PUSH
15341: LD_INT 31
15343: PUSH
15344: LD_INT 32
15346: PUSH
15347: LD_INT 33
15349: PUSH
15350: LD_INT 34
15352: PUSH
15353: LD_INT 36
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 101
15395: PUSH
15396: LD_INT 102
15398: PUSH
15399: LD_INT 103
15401: PUSH
15402: LD_INT 104
15404: PUSH
15405: LD_INT 105
15407: PUSH
15408: LD_INT 106
15410: PUSH
15411: LD_INT 107
15413: PUSH
15414: LD_INT 108
15416: PUSH
15417: LD_INT 109
15419: PUSH
15420: LD_INT 110
15422: PUSH
15423: LD_INT 111
15425: PUSH
15426: LD_INT 112
15428: PUSH
15429: LD_INT 113
15431: PUSH
15432: LD_INT 114
15434: PUSH
15435: LD_INT 116
15437: PUSH
15438: LD_INT 117
15440: PUSH
15441: LD_INT 118
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: ST_TO_ADDR
15467: GO 16242
15469: LD_INT 16
15471: DOUBLE
15472: EQUAL
15473: IFTRUE 15477
15475: GO 15613
15477: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15478: LD_ADDR_VAR 0 2
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: LD_INT 4
15488: PUSH
15489: LD_INT 5
15491: PUSH
15492: LD_INT 7
15494: PUSH
15495: LD_INT 11
15497: PUSH
15498: LD_INT 12
15500: PUSH
15501: LD_INT 15
15503: PUSH
15504: LD_INT 16
15506: PUSH
15507: LD_INT 20
15509: PUSH
15510: LD_INT 21
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_INT 23
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 26
15524: PUSH
15525: LD_INT 30
15527: PUSH
15528: LD_INT 31
15530: PUSH
15531: LD_INT 32
15533: PUSH
15534: LD_INT 33
15536: PUSH
15537: LD_INT 34
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 101
15563: PUSH
15564: LD_INT 102
15566: PUSH
15567: LD_INT 103
15569: PUSH
15570: LD_INT 106
15572: PUSH
15573: LD_INT 108
15575: PUSH
15576: LD_INT 112
15578: PUSH
15579: LD_INT 113
15581: PUSH
15582: LD_INT 114
15584: PUSH
15585: LD_INT 116
15587: PUSH
15588: LD_INT 117
15590: PUSH
15591: LD_INT 118
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: ST_TO_ADDR
15611: GO 16242
15613: LD_INT 17
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15845
15621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15622: LD_ADDR_VAR 0 2
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: LD_INT 2
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: LD_INT 4
15638: PUSH
15639: LD_INT 5
15641: PUSH
15642: LD_INT 6
15644: PUSH
15645: LD_INT 7
15647: PUSH
15648: LD_INT 8
15650: PUSH
15651: LD_INT 9
15653: PUSH
15654: LD_INT 10
15656: PUSH
15657: LD_INT 11
15659: PUSH
15660: LD_INT 12
15662: PUSH
15663: LD_INT 13
15665: PUSH
15666: LD_INT 14
15668: PUSH
15669: LD_INT 15
15671: PUSH
15672: LD_INT 16
15674: PUSH
15675: LD_INT 17
15677: PUSH
15678: LD_INT 18
15680: PUSH
15681: LD_INT 19
15683: PUSH
15684: LD_INT 20
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 22
15692: PUSH
15693: LD_INT 23
15695: PUSH
15696: LD_INT 24
15698: PUSH
15699: LD_INT 25
15701: PUSH
15702: LD_INT 26
15704: PUSH
15705: LD_INT 27
15707: PUSH
15708: LD_INT 28
15710: PUSH
15711: LD_INT 29
15713: PUSH
15714: LD_INT 30
15716: PUSH
15717: LD_INT 31
15719: PUSH
15720: LD_INT 32
15722: PUSH
15723: LD_INT 33
15725: PUSH
15726: LD_INT 34
15728: PUSH
15729: LD_INT 36
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 101
15771: PUSH
15772: LD_INT 102
15774: PUSH
15775: LD_INT 103
15777: PUSH
15778: LD_INT 104
15780: PUSH
15781: LD_INT 105
15783: PUSH
15784: LD_INT 106
15786: PUSH
15787: LD_INT 107
15789: PUSH
15790: LD_INT 108
15792: PUSH
15793: LD_INT 109
15795: PUSH
15796: LD_INT 110
15798: PUSH
15799: LD_INT 111
15801: PUSH
15802: LD_INT 112
15804: PUSH
15805: LD_INT 113
15807: PUSH
15808: LD_INT 114
15810: PUSH
15811: LD_INT 116
15813: PUSH
15814: LD_INT 117
15816: PUSH
15817: LD_INT 118
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: ST_TO_ADDR
15843: GO 16242
15845: LD_INT 18
15847: DOUBLE
15848: EQUAL
15849: IFTRUE 15853
15851: GO 16001
15853: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15854: LD_ADDR_VAR 0 2
15858: PUSH
15859: LD_INT 2
15861: PUSH
15862: LD_INT 4
15864: PUSH
15865: LD_INT 5
15867: PUSH
15868: LD_INT 7
15870: PUSH
15871: LD_INT 11
15873: PUSH
15874: LD_INT 12
15876: PUSH
15877: LD_INT 15
15879: PUSH
15880: LD_INT 16
15882: PUSH
15883: LD_INT 20
15885: PUSH
15886: LD_INT 21
15888: PUSH
15889: LD_INT 22
15891: PUSH
15892: LD_INT 23
15894: PUSH
15895: LD_INT 25
15897: PUSH
15898: LD_INT 26
15900: PUSH
15901: LD_INT 30
15903: PUSH
15904: LD_INT 31
15906: PUSH
15907: LD_INT 32
15909: PUSH
15910: LD_INT 33
15912: PUSH
15913: LD_INT 34
15915: PUSH
15916: LD_INT 35
15918: PUSH
15919: LD_INT 36
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 101
15947: PUSH
15948: LD_INT 102
15950: PUSH
15951: LD_INT 103
15953: PUSH
15954: LD_INT 106
15956: PUSH
15957: LD_INT 108
15959: PUSH
15960: LD_INT 112
15962: PUSH
15963: LD_INT 113
15965: PUSH
15966: LD_INT 114
15968: PUSH
15969: LD_INT 115
15971: PUSH
15972: LD_INT 116
15974: PUSH
15975: LD_INT 117
15977: PUSH
15978: LD_INT 118
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
15999: GO 16242
16001: LD_INT 19
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16241
16009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16010: LD_ADDR_VAR 0 2
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: LD_INT 2
16020: PUSH
16021: LD_INT 3
16023: PUSH
16024: LD_INT 4
16026: PUSH
16027: LD_INT 5
16029: PUSH
16030: LD_INT 6
16032: PUSH
16033: LD_INT 7
16035: PUSH
16036: LD_INT 8
16038: PUSH
16039: LD_INT 9
16041: PUSH
16042: LD_INT 10
16044: PUSH
16045: LD_INT 11
16047: PUSH
16048: LD_INT 12
16050: PUSH
16051: LD_INT 13
16053: PUSH
16054: LD_INT 14
16056: PUSH
16057: LD_INT 15
16059: PUSH
16060: LD_INT 16
16062: PUSH
16063: LD_INT 17
16065: PUSH
16066: LD_INT 18
16068: PUSH
16069: LD_INT 19
16071: PUSH
16072: LD_INT 20
16074: PUSH
16075: LD_INT 21
16077: PUSH
16078: LD_INT 22
16080: PUSH
16081: LD_INT 23
16083: PUSH
16084: LD_INT 24
16086: PUSH
16087: LD_INT 25
16089: PUSH
16090: LD_INT 26
16092: PUSH
16093: LD_INT 27
16095: PUSH
16096: LD_INT 28
16098: PUSH
16099: LD_INT 29
16101: PUSH
16102: LD_INT 30
16104: PUSH
16105: LD_INT 31
16107: PUSH
16108: LD_INT 32
16110: PUSH
16111: LD_INT 33
16113: PUSH
16114: LD_INT 34
16116: PUSH
16117: LD_INT 35
16119: PUSH
16120: LD_INT 36
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 101
16163: PUSH
16164: LD_INT 102
16166: PUSH
16167: LD_INT 103
16169: PUSH
16170: LD_INT 104
16172: PUSH
16173: LD_INT 105
16175: PUSH
16176: LD_INT 106
16178: PUSH
16179: LD_INT 107
16181: PUSH
16182: LD_INT 108
16184: PUSH
16185: LD_INT 109
16187: PUSH
16188: LD_INT 110
16190: PUSH
16191: LD_INT 111
16193: PUSH
16194: LD_INT 112
16196: PUSH
16197: LD_INT 113
16199: PUSH
16200: LD_INT 114
16202: PUSH
16203: LD_INT 115
16205: PUSH
16206: LD_INT 116
16208: PUSH
16209: LD_INT 117
16211: PUSH
16212: LD_INT 118
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: ST_TO_ADDR
16239: GO 16242
16241: POP
// end else
16242: GO 16473
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16244: LD_ADDR_VAR 0 2
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: LD_INT 4
16260: PUSH
16261: LD_INT 5
16263: PUSH
16264: LD_INT 6
16266: PUSH
16267: LD_INT 7
16269: PUSH
16270: LD_INT 8
16272: PUSH
16273: LD_INT 9
16275: PUSH
16276: LD_INT 10
16278: PUSH
16279: LD_INT 11
16281: PUSH
16282: LD_INT 12
16284: PUSH
16285: LD_INT 13
16287: PUSH
16288: LD_INT 14
16290: PUSH
16291: LD_INT 15
16293: PUSH
16294: LD_INT 16
16296: PUSH
16297: LD_INT 17
16299: PUSH
16300: LD_INT 18
16302: PUSH
16303: LD_INT 19
16305: PUSH
16306: LD_INT 20
16308: PUSH
16309: LD_INT 21
16311: PUSH
16312: LD_INT 22
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 24
16320: PUSH
16321: LD_INT 25
16323: PUSH
16324: LD_INT 26
16326: PUSH
16327: LD_INT 27
16329: PUSH
16330: LD_INT 28
16332: PUSH
16333: LD_INT 29
16335: PUSH
16336: LD_INT 30
16338: PUSH
16339: LD_INT 31
16341: PUSH
16342: LD_INT 32
16344: PUSH
16345: LD_INT 33
16347: PUSH
16348: LD_INT 34
16350: PUSH
16351: LD_INT 35
16353: PUSH
16354: LD_INT 36
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 101
16397: PUSH
16398: LD_INT 102
16400: PUSH
16401: LD_INT 103
16403: PUSH
16404: LD_INT 104
16406: PUSH
16407: LD_INT 105
16409: PUSH
16410: LD_INT 106
16412: PUSH
16413: LD_INT 107
16415: PUSH
16416: LD_INT 108
16418: PUSH
16419: LD_INT 109
16421: PUSH
16422: LD_INT 110
16424: PUSH
16425: LD_INT 111
16427: PUSH
16428: LD_INT 112
16430: PUSH
16431: LD_INT 113
16433: PUSH
16434: LD_INT 114
16436: PUSH
16437: LD_INT 115
16439: PUSH
16440: LD_INT 116
16442: PUSH
16443: LD_INT 117
16445: PUSH
16446: LD_INT 118
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ST_TO_ADDR
// if result then
16473: LD_VAR 0 2
16477: IFFALSE 17263
// begin normal :=  ;
16479: LD_ADDR_VAR 0 5
16483: PUSH
16484: LD_STRING 
16486: ST_TO_ADDR
// hardcore :=  ;
16487: LD_ADDR_VAR 0 6
16491: PUSH
16492: LD_STRING 
16494: ST_TO_ADDR
// active :=  ;
16495: LD_ADDR_VAR 0 7
16499: PUSH
16500: LD_STRING 
16502: ST_TO_ADDR
// for i = 1 to normalCounter do
16503: LD_ADDR_VAR 0 8
16507: PUSH
16508: DOUBLE
16509: LD_INT 1
16511: DEC
16512: ST_TO_ADDR
16513: LD_EXP 28
16517: PUSH
16518: FOR_TO
16519: IFFALSE 16620
// begin tmp := 0 ;
16521: LD_ADDR_VAR 0 3
16525: PUSH
16526: LD_STRING 0
16528: ST_TO_ADDR
// if result [ 1 ] then
16529: LD_VAR 0 2
16533: PUSH
16534: LD_INT 1
16536: ARRAY
16537: IFFALSE 16602
// if result [ 1 ] [ 1 ] = i then
16539: LD_VAR 0 2
16543: PUSH
16544: LD_INT 1
16546: ARRAY
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PUSH
16552: LD_VAR 0 8
16556: EQUAL
16557: IFFALSE 16602
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: LD_VAR 0 2
16576: PUSH
16577: LD_INT 1
16579: ARRAY
16580: PPUSH
16581: LD_INT 1
16583: PPUSH
16584: CALL_OW 3
16588: PPUSH
16589: CALL_OW 1
16593: ST_TO_ADDR
// tmp := 1 ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_STRING 1
16601: ST_TO_ADDR
// end ; normal := normal & tmp ;
16602: LD_ADDR_VAR 0 5
16606: PUSH
16607: LD_VAR 0 5
16611: PUSH
16612: LD_VAR 0 3
16616: STR
16617: ST_TO_ADDR
// end ;
16618: GO 16518
16620: POP
16621: POP
// for i = 1 to hardcoreCounter do
16622: LD_ADDR_VAR 0 8
16626: PUSH
16627: DOUBLE
16628: LD_INT 1
16630: DEC
16631: ST_TO_ADDR
16632: LD_EXP 29
16636: PUSH
16637: FOR_TO
16638: IFFALSE 16743
// begin tmp := 0 ;
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: LD_STRING 0
16647: ST_TO_ADDR
// if result [ 2 ] then
16648: LD_VAR 0 2
16652: PUSH
16653: LD_INT 2
16655: ARRAY
16656: IFFALSE 16725
// if result [ 2 ] [ 1 ] = 100 + i then
16658: LD_VAR 0 2
16662: PUSH
16663: LD_INT 2
16665: ARRAY
16666: PUSH
16667: LD_INT 1
16669: ARRAY
16670: PUSH
16671: LD_INT 100
16673: PUSH
16674: LD_VAR 0 8
16678: PLUS
16679: EQUAL
16680: IFFALSE 16725
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16682: LD_ADDR_VAR 0 2
16686: PUSH
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 2
16694: PPUSH
16695: LD_VAR 0 2
16699: PUSH
16700: LD_INT 2
16702: ARRAY
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 3
16711: PPUSH
16712: CALL_OW 1
16716: ST_TO_ADDR
// tmp := 1 ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_STRING 1
16724: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16725: LD_ADDR_VAR 0 6
16729: PUSH
16730: LD_VAR 0 6
16734: PUSH
16735: LD_VAR 0 3
16739: STR
16740: ST_TO_ADDR
// end ;
16741: GO 16637
16743: POP
16744: POP
// if isGameLoad then
16745: LD_VAR 0 1
16749: IFFALSE 17224
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16751: LD_ADDR_VAR 0 4
16755: PUSH
16756: LD_EXP 32
16760: PUSH
16761: LD_EXP 31
16765: PUSH
16766: LD_EXP 33
16770: PUSH
16771: LD_EXP 30
16775: PUSH
16776: LD_EXP 34
16780: PUSH
16781: LD_EXP 35
16785: PUSH
16786: LD_EXP 36
16790: PUSH
16791: LD_EXP 37
16795: PUSH
16796: LD_EXP 38
16800: PUSH
16801: LD_EXP 39
16805: PUSH
16806: LD_EXP 40
16810: PUSH
16811: LD_EXP 41
16815: PUSH
16816: LD_EXP 42
16820: PUSH
16821: LD_EXP 43
16825: PUSH
16826: LD_EXP 51
16830: PUSH
16831: LD_EXP 52
16835: PUSH
16836: LD_EXP 53
16840: PUSH
16841: LD_EXP 54
16845: PUSH
16846: LD_EXP 56
16850: PUSH
16851: LD_EXP 57
16855: PUSH
16856: LD_EXP 58
16860: PUSH
16861: LD_EXP 61
16865: PUSH
16866: LD_EXP 63
16870: PUSH
16871: LD_EXP 64
16875: PUSH
16876: LD_EXP 65
16880: PUSH
16881: LD_EXP 67
16885: PUSH
16886: LD_EXP 68
16890: PUSH
16891: LD_EXP 71
16895: PUSH
16896: LD_EXP 72
16900: PUSH
16901: LD_EXP 73
16905: PUSH
16906: LD_EXP 74
16910: PUSH
16911: LD_EXP 75
16915: PUSH
16916: LD_EXP 76
16920: PUSH
16921: LD_EXP 77
16925: PUSH
16926: LD_EXP 78
16930: PUSH
16931: LD_EXP 79
16935: PUSH
16936: LD_EXP 44
16940: PUSH
16941: LD_EXP 45
16945: PUSH
16946: LD_EXP 48
16950: PUSH
16951: LD_EXP 49
16955: PUSH
16956: LD_EXP 50
16960: PUSH
16961: LD_EXP 46
16965: PUSH
16966: LD_EXP 47
16970: PUSH
16971: LD_EXP 55
16975: PUSH
16976: LD_EXP 59
16980: PUSH
16981: LD_EXP 60
16985: PUSH
16986: LD_EXP 62
16990: PUSH
16991: LD_EXP 66
16995: PUSH
16996: LD_EXP 69
17000: PUSH
17001: LD_EXP 70
17005: PUSH
17006: LD_EXP 80
17010: PUSH
17011: LD_EXP 81
17015: PUSH
17016: LD_EXP 82
17020: PUSH
17021: LD_EXP 83
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
// tmp :=  ;
17082: LD_ADDR_VAR 0 3
17086: PUSH
17087: LD_STRING 
17089: ST_TO_ADDR
// for i = 1 to normalCounter do
17090: LD_ADDR_VAR 0 8
17094: PUSH
17095: DOUBLE
17096: LD_INT 1
17098: DEC
17099: ST_TO_ADDR
17100: LD_EXP 28
17104: PUSH
17105: FOR_TO
17106: IFFALSE 17142
// begin if flags [ i ] then
17108: LD_VAR 0 4
17112: PUSH
17113: LD_VAR 0 8
17117: ARRAY
17118: IFFALSE 17140
// tmp := tmp & i & ; ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_VAR 0 3
17129: PUSH
17130: LD_VAR 0 8
17134: STR
17135: PUSH
17136: LD_STRING ;
17138: STR
17139: ST_TO_ADDR
// end ;
17140: GO 17105
17142: POP
17143: POP
// for i = 1 to hardcoreCounter do
17144: LD_ADDR_VAR 0 8
17148: PUSH
17149: DOUBLE
17150: LD_INT 1
17152: DEC
17153: ST_TO_ADDR
17154: LD_EXP 29
17158: PUSH
17159: FOR_TO
17160: IFFALSE 17206
// begin if flags [ normalCounter + i ] then
17162: LD_VAR 0 4
17166: PUSH
17167: LD_EXP 28
17171: PUSH
17172: LD_VAR 0 8
17176: PLUS
17177: ARRAY
17178: IFFALSE 17204
// tmp := tmp & ( 100 + i ) & ; ;
17180: LD_ADDR_VAR 0 3
17184: PUSH
17185: LD_VAR 0 3
17189: PUSH
17190: LD_INT 100
17192: PUSH
17193: LD_VAR 0 8
17197: PLUS
17198: STR
17199: PUSH
17200: LD_STRING ;
17202: STR
17203: ST_TO_ADDR
// end ;
17204: GO 17159
17206: POP
17207: POP
// if tmp then
17208: LD_VAR 0 3
17212: IFFALSE 17224
// active := tmp ;
17214: LD_ADDR_VAR 0 7
17218: PUSH
17219: LD_VAR 0 3
17223: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17224: LD_STRING getStreamItemsFromMission("
17226: PUSH
17227: LD_VAR 0 5
17231: STR
17232: PUSH
17233: LD_STRING ","
17235: STR
17236: PUSH
17237: LD_VAR 0 6
17241: STR
17242: PUSH
17243: LD_STRING ","
17245: STR
17246: PUSH
17247: LD_VAR 0 7
17251: STR
17252: PUSH
17253: LD_STRING ")
17255: STR
17256: PPUSH
17257: CALL_OW 559
// end else
17261: GO 17270
// ToLua ( getStreamItemsFromMission("","","") ) ;
17263: LD_STRING getStreamItemsFromMission("","","")
17265: PPUSH
17266: CALL_OW 559
// end ;
17270: LD_VAR 0 2
17274: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17275: LD_EXP 27
17279: PUSH
17280: LD_EXP 32
17284: AND
17285: IFFALSE 17409
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
// begin enable ;
17294: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: LD_INT 22
17302: PUSH
17303: LD_OWVAR 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: LD_INT 7
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 34
17327: PUSH
17328: LD_INT 45
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 34
17337: PUSH
17338: LD_INT 28
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 34
17347: PUSH
17348: LD_INT 47
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PPUSH
17366: CALL_OW 69
17370: ST_TO_ADDR
// if not tmp then
17371: LD_VAR 0 2
17375: NOT
17376: IFFALSE 17380
// exit ;
17378: GO 17409
// for i in tmp do
17380: LD_ADDR_VAR 0 1
17384: PUSH
17385: LD_VAR 0 2
17389: PUSH
17390: FOR_IN
17391: IFFALSE 17407
// begin SetLives ( i , 0 ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 234
// end ;
17405: GO 17390
17407: POP
17408: POP
// end ;
17409: PPOPN 2
17411: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17412: LD_EXP 27
17416: PUSH
17417: LD_EXP 33
17421: AND
17422: IFFALSE 17506
17424: GO 17426
17426: DISABLE
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
// begin enable ;
17431: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17432: LD_ADDR_VAR 0 2
17436: PUSH
17437: LD_INT 22
17439: PUSH
17440: LD_OWVAR 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 32
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 69
17467: ST_TO_ADDR
// if not tmp then
17468: LD_VAR 0 2
17472: NOT
17473: IFFALSE 17477
// exit ;
17475: GO 17506
// for i in tmp do
17477: LD_ADDR_VAR 0 1
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: FOR_IN
17488: IFFALSE 17504
// begin SetLives ( i , 0 ) ;
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_INT 0
17497: PPUSH
17498: CALL_OW 234
// end ;
17502: GO 17487
17504: POP
17505: POP
// end ;
17506: PPOPN 2
17508: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17509: LD_EXP 27
17513: PUSH
17514: LD_EXP 30
17518: AND
17519: IFFALSE 17612
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
// begin enable ;
17527: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_OWVAR 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: LD_INT 25
17550: PUSH
17551: LD_INT 5
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 25
17560: PUSH
17561: LD_INT 9
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 25
17570: PUSH
17571: LD_INT 8
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17610
// begin SetClass ( i , 1 ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 336
// end ;
17608: GO 17593
17610: POP
17611: POP
// end ;
17612: PPOPN 1
17614: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17615: LD_EXP 27
17619: PUSH
17620: LD_EXP 31
17624: AND
17625: PUSH
17626: LD_OWVAR 65
17630: PUSH
17631: LD_INT 7
17633: LESS
17634: AND
17635: IFFALSE 17649
17637: GO 17639
17639: DISABLE
// begin enable ;
17640: ENABLE
// game_speed := 7 ;
17641: LD_ADDR_OWVAR 65
17645: PUSH
17646: LD_INT 7
17648: ST_TO_ADDR
// end ;
17649: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17650: LD_EXP 27
17654: PUSH
17655: LD_EXP 34
17659: AND
17660: IFFALSE 17862
17662: GO 17664
17664: DISABLE
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
17669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17670: LD_ADDR_VAR 0 3
17674: PUSH
17675: LD_INT 81
17677: PUSH
17678: LD_OWVAR 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 21
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PPUSH
17701: CALL_OW 69
17705: ST_TO_ADDR
// if not tmp then
17706: LD_VAR 0 3
17710: NOT
17711: IFFALSE 17715
// exit ;
17713: GO 17862
// if tmp > 5 then
17715: LD_VAR 0 3
17719: PUSH
17720: LD_INT 5
17722: GREATER
17723: IFFALSE 17735
// k := 5 else
17725: LD_ADDR_VAR 0 2
17729: PUSH
17730: LD_INT 5
17732: ST_TO_ADDR
17733: GO 17745
// k := tmp ;
17735: LD_ADDR_VAR 0 2
17739: PUSH
17740: LD_VAR 0 3
17744: ST_TO_ADDR
// for i := 1 to k do
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_VAR 0 2
17759: PUSH
17760: FOR_TO
17761: IFFALSE 17860
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17763: LD_VAR 0 3
17767: PUSH
17768: LD_VAR 0 1
17772: ARRAY
17773: PPUSH
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 4
17781: MOD
17782: PUSH
17783: LD_INT 1
17785: PLUS
17786: PPUSH
17787: CALL_OW 259
17791: PUSH
17792: LD_INT 10
17794: LESS
17795: IFFALSE 17858
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17797: LD_VAR 0 3
17801: PUSH
17802: LD_VAR 0 1
17806: ARRAY
17807: PPUSH
17808: LD_VAR 0 1
17812: PUSH
17813: LD_INT 4
17815: MOD
17816: PUSH
17817: LD_INT 1
17819: PLUS
17820: PPUSH
17821: LD_VAR 0 3
17825: PUSH
17826: LD_VAR 0 1
17830: ARRAY
17831: PPUSH
17832: LD_VAR 0 1
17836: PUSH
17837: LD_INT 4
17839: MOD
17840: PUSH
17841: LD_INT 1
17843: PLUS
17844: PPUSH
17845: CALL_OW 259
17849: PUSH
17850: LD_INT 1
17852: PLUS
17853: PPUSH
17854: CALL_OW 237
17858: GO 17760
17860: POP
17861: POP
// end ;
17862: PPOPN 3
17864: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17865: LD_EXP 27
17869: PUSH
17870: LD_EXP 35
17874: AND
17875: IFFALSE 17895
17877: GO 17879
17879: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17880: LD_INT 4
17882: PPUSH
17883: LD_OWVAR 2
17887: PPUSH
17888: LD_INT 0
17890: PPUSH
17891: CALL_OW 324
17895: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17896: LD_EXP 27
17900: PUSH
17901: LD_EXP 64
17905: AND
17906: IFFALSE 17926
17908: GO 17910
17910: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17911: LD_INT 19
17913: PPUSH
17914: LD_OWVAR 2
17918: PPUSH
17919: LD_INT 0
17921: PPUSH
17922: CALL_OW 324
17926: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17927: LD_EXP 27
17931: PUSH
17932: LD_EXP 36
17936: AND
17937: IFFALSE 18039
17939: GO 17941
17941: DISABLE
17942: LD_INT 0
17944: PPUSH
17945: PPUSH
// begin enable ;
17946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17947: LD_ADDR_VAR 0 2
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_OWVAR 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: LD_INT 34
17969: PUSH
17970: LD_INT 11
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 34
17979: PUSH
17980: LD_INT 30
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: ST_TO_ADDR
// if not tmp then
18001: LD_VAR 0 2
18005: NOT
18006: IFFALSE 18010
// exit ;
18008: GO 18039
// for i in tmp do
18010: LD_ADDR_VAR 0 1
18014: PUSH
18015: LD_VAR 0 2
18019: PUSH
18020: FOR_IN
18021: IFFALSE 18037
// begin SetLives ( i , 0 ) ;
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_INT 0
18030: PPUSH
18031: CALL_OW 234
// end ;
18035: GO 18020
18037: POP
18038: POP
// end ;
18039: PPOPN 2
18041: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18042: LD_EXP 27
18046: PUSH
18047: LD_EXP 37
18051: AND
18052: IFFALSE 18072
18054: GO 18056
18056: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18057: LD_INT 32
18059: PPUSH
18060: LD_OWVAR 2
18064: PPUSH
18065: LD_INT 0
18067: PPUSH
18068: CALL_OW 324
18072: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18073: LD_EXP 27
18077: PUSH
18078: LD_EXP 38
18082: AND
18083: IFFALSE 18264
18085: GO 18087
18087: DISABLE
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
18092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: LD_INT 22
18100: PUSH
18101: LD_OWVAR 2
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 33
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: ST_TO_ADDR
// if not tmp then
18129: LD_VAR 0 2
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 18264
// side := 0 ;
18138: LD_ADDR_VAR 0 3
18142: PUSH
18143: LD_INT 0
18145: ST_TO_ADDR
// for i := 1 to 8 do
18146: LD_ADDR_VAR 0 1
18150: PUSH
18151: DOUBLE
18152: LD_INT 1
18154: DEC
18155: ST_TO_ADDR
18156: LD_INT 8
18158: PUSH
18159: FOR_TO
18160: IFFALSE 18208
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18162: LD_OWVAR 2
18166: PUSH
18167: LD_VAR 0 1
18171: NONEQUAL
18172: PUSH
18173: LD_OWVAR 2
18177: PPUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 81
18187: PUSH
18188: LD_INT 2
18190: EQUAL
18191: AND
18192: IFFALSE 18206
// begin side := i ;
18194: LD_ADDR_VAR 0 3
18198: PUSH
18199: LD_VAR 0 1
18203: ST_TO_ADDR
// break ;
18204: GO 18208
// end ;
18206: GO 18159
18208: POP
18209: POP
// if not side then
18210: LD_VAR 0 3
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18264
// for i := 1 to tmp do
18219: LD_ADDR_VAR 0 1
18223: PUSH
18224: DOUBLE
18225: LD_INT 1
18227: DEC
18228: ST_TO_ADDR
18229: LD_VAR 0 2
18233: PUSH
18234: FOR_TO
18235: IFFALSE 18262
// if Prob ( 60 ) then
18237: LD_INT 60
18239: PPUSH
18240: CALL_OW 13
18244: IFFALSE 18260
// SetSide ( i , side ) ;
18246: LD_VAR 0 1
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: CALL_OW 235
18260: GO 18234
18262: POP
18263: POP
// end ;
18264: PPOPN 3
18266: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18267: LD_EXP 27
18271: PUSH
18272: LD_EXP 40
18276: AND
18277: IFFALSE 18396
18279: GO 18281
18281: DISABLE
18282: LD_INT 0
18284: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: LD_INT 22
18292: PUSH
18293: LD_OWVAR 2
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 21
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 3
18314: PUSH
18315: LD_INT 23
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: PUSH
18339: FOR_IN
18340: IFFALSE 18394
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18342: LD_VAR 0 1
18346: PPUSH
18347: CALL_OW 257
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: LD_INT 4
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: IN
18370: IFFALSE 18392
// SetClass ( un , rand ( 1 , 4 ) ) ;
18372: LD_VAR 0 1
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_INT 4
18382: PPUSH
18383: CALL_OW 12
18387: PPUSH
18388: CALL_OW 336
18392: GO 18339
18394: POP
18395: POP
// end ;
18396: PPOPN 1
18398: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18399: LD_EXP 27
18403: PUSH
18404: LD_EXP 39
18408: AND
18409: IFFALSE 18488
18411: GO 18413
18413: DISABLE
18414: LD_INT 0
18416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18417: LD_ADDR_VAR 0 1
18421: PUSH
18422: LD_INT 22
18424: PUSH
18425: LD_OWVAR 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 21
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 69
18452: ST_TO_ADDR
// if not tmp then
18453: LD_VAR 0 1
18457: NOT
18458: IFFALSE 18462
// exit ;
18460: GO 18488
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18462: LD_VAR 0 1
18466: PUSH
18467: LD_INT 1
18469: PPUSH
18470: LD_VAR 0 1
18474: PPUSH
18475: CALL_OW 12
18479: ARRAY
18480: PPUSH
18481: LD_INT 100
18483: PPUSH
18484: CALL_OW 234
// end ;
18488: PPOPN 1
18490: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18491: LD_EXP 27
18495: PUSH
18496: LD_EXP 41
18500: AND
18501: IFFALSE 18599
18503: GO 18505
18505: DISABLE
18506: LD_INT 0
18508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18509: LD_ADDR_VAR 0 1
18513: PUSH
18514: LD_INT 22
18516: PUSH
18517: LD_OWVAR 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: ST_TO_ADDR
// if not tmp then
18545: LD_VAR 0 1
18549: NOT
18550: IFFALSE 18554
// exit ;
18552: GO 18599
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18554: LD_VAR 0 1
18558: PUSH
18559: LD_INT 1
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 12
18571: ARRAY
18572: PPUSH
18573: LD_INT 1
18575: PPUSH
18576: LD_INT 4
18578: PPUSH
18579: CALL_OW 12
18583: PPUSH
18584: LD_INT 3000
18586: PPUSH
18587: LD_INT 9000
18589: PPUSH
18590: CALL_OW 12
18594: PPUSH
18595: CALL_OW 492
// end ;
18599: PPOPN 1
18601: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18602: LD_EXP 27
18606: PUSH
18607: LD_EXP 42
18611: AND
18612: IFFALSE 18632
18614: GO 18616
18616: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18617: LD_INT 1
18619: PPUSH
18620: LD_OWVAR 2
18624: PPUSH
18625: LD_INT 0
18627: PPUSH
18628: CALL_OW 324
18632: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18633: LD_EXP 27
18637: PUSH
18638: LD_EXP 43
18642: AND
18643: IFFALSE 18726
18645: GO 18647
18647: DISABLE
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 22
18659: PUSH
18660: LD_OWVAR 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 21
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: ST_TO_ADDR
// if not tmp then
18688: LD_VAR 0 2
18692: NOT
18693: IFFALSE 18697
// exit ;
18695: GO 18726
// for i in tmp do
18697: LD_ADDR_VAR 0 1
18701: PUSH
18702: LD_VAR 0 2
18706: PUSH
18707: FOR_IN
18708: IFFALSE 18724
// SetBLevel ( i , 10 ) ;
18710: LD_VAR 0 1
18714: PPUSH
18715: LD_INT 10
18717: PPUSH
18718: CALL_OW 241
18722: GO 18707
18724: POP
18725: POP
// end ;
18726: PPOPN 2
18728: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18729: LD_EXP 27
18733: PUSH
18734: LD_EXP 44
18738: AND
18739: IFFALSE 18850
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
18748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18749: LD_ADDR_VAR 0 3
18753: PUSH
18754: LD_INT 22
18756: PUSH
18757: LD_OWVAR 2
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 25
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: ST_TO_ADDR
// if not tmp then
18785: LD_VAR 0 3
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 18850
// un := tmp [ rand ( 1 , tmp ) ] ;
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_VAR 0 3
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_VAR 0 3
18811: PPUSH
18812: CALL_OW 12
18816: ARRAY
18817: ST_TO_ADDR
// if Crawls ( un ) then
18818: LD_VAR 0 2
18822: PPUSH
18823: CALL_OW 318
18827: IFFALSE 18838
// ComWalk ( un ) ;
18829: LD_VAR 0 2
18833: PPUSH
18834: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18838: LD_VAR 0 2
18842: PPUSH
18843: LD_INT 5
18845: PPUSH
18846: CALL_OW 336
// end ;
18850: PPOPN 3
18852: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18853: LD_EXP 27
18857: PUSH
18858: LD_EXP 45
18862: AND
18863: PUSH
18864: LD_OWVAR 67
18868: PUSH
18869: LD_INT 4
18871: LESS
18872: AND
18873: IFFALSE 18892
18875: GO 18877
18877: DISABLE
// begin Difficulty := Difficulty + 1 ;
18878: LD_ADDR_OWVAR 67
18882: PUSH
18883: LD_OWVAR 67
18887: PUSH
18888: LD_INT 1
18890: PLUS
18891: ST_TO_ADDR
// end ;
18892: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18893: LD_EXP 27
18897: PUSH
18898: LD_EXP 46
18902: AND
18903: IFFALSE 19006
18905: GO 18907
18907: DISABLE
18908: LD_INT 0
18910: PPUSH
// begin for i := 1 to 5 do
18911: LD_ADDR_VAR 0 1
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_INT 5
18923: PUSH
18924: FOR_TO
18925: IFFALSE 19004
// begin uc_nation := nation_nature ;
18927: LD_ADDR_OWVAR 21
18931: PUSH
18932: LD_INT 0
18934: ST_TO_ADDR
// uc_side := 0 ;
18935: LD_ADDR_OWVAR 20
18939: PUSH
18940: LD_INT 0
18942: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18943: LD_ADDR_OWVAR 29
18947: PUSH
18948: LD_INT 12
18950: PUSH
18951: LD_INT 12
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: ST_TO_ADDR
// hc_agressivity := 20 ;
18958: LD_ADDR_OWVAR 35
18962: PUSH
18963: LD_INT 20
18965: ST_TO_ADDR
// hc_class := class_tiger ;
18966: LD_ADDR_OWVAR 28
18970: PUSH
18971: LD_INT 14
18973: ST_TO_ADDR
// hc_gallery :=  ;
18974: LD_ADDR_OWVAR 33
18978: PUSH
18979: LD_STRING 
18981: ST_TO_ADDR
// hc_name :=  ;
18982: LD_ADDR_OWVAR 26
18986: PUSH
18987: LD_STRING 
18989: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18990: CALL_OW 44
18994: PPUSH
18995: LD_INT 0
18997: PPUSH
18998: CALL_OW 51
// end ;
19002: GO 18924
19004: POP
19005: POP
// end ;
19006: PPOPN 1
19008: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19009: LD_EXP 27
19013: PUSH
19014: LD_EXP 47
19018: AND
19019: IFFALSE 19028
19021: GO 19023
19023: DISABLE
// StreamSibBomb ;
19024: CALL 19029 0 0
19028: END
// export function StreamSibBomb ; var i , x , y ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
19033: PPUSH
19034: PPUSH
// result := false ;
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_INT 0
19042: ST_TO_ADDR
// for i := 1 to 16 do
19043: LD_ADDR_VAR 0 2
19047: PUSH
19048: DOUBLE
19049: LD_INT 1
19051: DEC
19052: ST_TO_ADDR
19053: LD_INT 16
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19256
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19059: LD_ADDR_VAR 0 3
19063: PUSH
19064: LD_INT 10
19066: PUSH
19067: LD_INT 20
19069: PUSH
19070: LD_INT 30
19072: PUSH
19073: LD_INT 40
19075: PUSH
19076: LD_INT 50
19078: PUSH
19079: LD_INT 60
19081: PUSH
19082: LD_INT 70
19084: PUSH
19085: LD_INT 80
19087: PUSH
19088: LD_INT 90
19090: PUSH
19091: LD_INT 100
19093: PUSH
19094: LD_INT 110
19096: PUSH
19097: LD_INT 120
19099: PUSH
19100: LD_INT 130
19102: PUSH
19103: LD_INT 140
19105: PUSH
19106: LD_INT 150
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: PPUSH
19129: LD_INT 15
19131: PPUSH
19132: CALL_OW 12
19136: ARRAY
19137: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19138: LD_ADDR_VAR 0 4
19142: PUSH
19143: LD_INT 10
19145: PUSH
19146: LD_INT 20
19148: PUSH
19149: LD_INT 30
19151: PUSH
19152: LD_INT 40
19154: PUSH
19155: LD_INT 50
19157: PUSH
19158: LD_INT 60
19160: PUSH
19161: LD_INT 70
19163: PUSH
19164: LD_INT 80
19166: PUSH
19167: LD_INT 90
19169: PUSH
19170: LD_INT 100
19172: PUSH
19173: LD_INT 110
19175: PUSH
19176: LD_INT 120
19178: PUSH
19179: LD_INT 130
19181: PUSH
19182: LD_INT 140
19184: PUSH
19185: LD_INT 150
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PPUSH
19208: LD_INT 15
19210: PPUSH
19211: CALL_OW 12
19215: ARRAY
19216: ST_TO_ADDR
// if ValidHex ( x , y ) then
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_VAR 0 4
19226: PPUSH
19227: CALL_OW 488
19231: IFFALSE 19254
// begin result := [ x , y ] ;
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_VAR 0 3
19242: PUSH
19243: LD_VAR 0 4
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: ST_TO_ADDR
// break ;
19252: GO 19256
// end ; end ;
19254: GO 19056
19256: POP
19257: POP
// if result then
19258: LD_VAR 0 1
19262: IFFALSE 19322
// begin ToLua ( playSibBomb() ) ;
19264: LD_STRING playSibBomb()
19266: PPUSH
19267: CALL_OW 559
// wait ( 0 0$14 ) ;
19271: LD_INT 490
19273: PPUSH
19274: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19278: LD_VAR 0 1
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PPUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_INT 2
19294: ARRAY
19295: PPUSH
19296: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19300: LD_VAR 0 1
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 1
19313: PUSH
19314: LD_INT 2
19316: ARRAY
19317: PPUSH
19318: CALL_OW 429
// end ; end ;
19322: LD_VAR 0 1
19326: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19327: LD_EXP 27
19331: PUSH
19332: LD_EXP 49
19336: AND
19337: IFFALSE 19349
19339: GO 19341
19341: DISABLE
// YouLost (  ) ;
19342: LD_STRING 
19344: PPUSH
19345: CALL_OW 104
19349: END
// every 0 0$1 trigger StreamModeActive and sFog do
19350: LD_EXP 27
19354: PUSH
19355: LD_EXP 48
19359: AND
19360: IFFALSE 19374
19362: GO 19364
19364: DISABLE
// FogOff ( your_side ) ;
19365: LD_OWVAR 2
19369: PPUSH
19370: CALL_OW 344
19374: END
// every 0 0$1 trigger StreamModeActive and sSun do
19375: LD_EXP 27
19379: PUSH
19380: LD_EXP 50
19384: AND
19385: IFFALSE 19413
19387: GO 19389
19389: DISABLE
// begin solar_recharge_percent := 0 ;
19390: LD_ADDR_OWVAR 79
19394: PUSH
19395: LD_INT 0
19397: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19398: LD_INT 10500
19400: PPUSH
19401: CALL_OW 67
// solar_recharge_percent := 100 ;
19405: LD_ADDR_OWVAR 79
19409: PUSH
19410: LD_INT 100
19412: ST_TO_ADDR
// end ;
19413: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19414: LD_EXP 27
19418: PUSH
19419: LD_EXP 51
19423: AND
19424: IFFALSE 19663
19426: GO 19428
19428: DISABLE
19429: LD_INT 0
19431: PPUSH
19432: PPUSH
19433: PPUSH
// begin tmp := [ ] ;
19434: LD_ADDR_VAR 0 3
19438: PUSH
19439: EMPTY
19440: ST_TO_ADDR
// for i := 1 to 6 do
19441: LD_ADDR_VAR 0 1
19445: PUSH
19446: DOUBLE
19447: LD_INT 1
19449: DEC
19450: ST_TO_ADDR
19451: LD_INT 6
19453: PUSH
19454: FOR_TO
19455: IFFALSE 19560
// begin uc_nation := nation_nature ;
19457: LD_ADDR_OWVAR 21
19461: PUSH
19462: LD_INT 0
19464: ST_TO_ADDR
// uc_side := 0 ;
19465: LD_ADDR_OWVAR 20
19469: PUSH
19470: LD_INT 0
19472: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19473: LD_ADDR_OWVAR 29
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: LD_INT 12
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: ST_TO_ADDR
// hc_agressivity := 20 ;
19488: LD_ADDR_OWVAR 35
19492: PUSH
19493: LD_INT 20
19495: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19496: LD_ADDR_OWVAR 28
19500: PUSH
19501: LD_INT 17
19503: ST_TO_ADDR
// hc_gallery :=  ;
19504: LD_ADDR_OWVAR 33
19508: PUSH
19509: LD_STRING 
19511: ST_TO_ADDR
// hc_name :=  ;
19512: LD_ADDR_OWVAR 26
19516: PUSH
19517: LD_STRING 
19519: ST_TO_ADDR
// un := CreateHuman ;
19520: LD_ADDR_VAR 0 2
19524: PUSH
19525: CALL_OW 44
19529: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19530: LD_VAR 0 2
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 51
// tmp := tmp ^ un ;
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_VAR 0 3
19551: PUSH
19552: LD_VAR 0 2
19556: ADD
19557: ST_TO_ADDR
// end ;
19558: GO 19454
19560: POP
19561: POP
// repeat wait ( 0 0$1 ) ;
19562: LD_INT 35
19564: PPUSH
19565: CALL_OW 67
// for un in tmp do
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19654
// begin if IsDead ( un ) then
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 301
19591: IFFALSE 19611
// begin tmp := tmp diff un ;
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_VAR 0 3
19602: PUSH
19603: LD_VAR 0 2
19607: DIFF
19608: ST_TO_ADDR
// continue ;
19609: GO 19579
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19611: LD_VAR 0 2
19615: PPUSH
19616: LD_INT 3
19618: PUSH
19619: LD_INT 22
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: PPUSH
19638: LD_VAR 0 2
19642: PPUSH
19643: CALL_OW 74
19647: PPUSH
19648: CALL_OW 115
// end ;
19652: GO 19579
19654: POP
19655: POP
// until not tmp ;
19656: LD_VAR 0 3
19660: NOT
19661: IFFALSE 19562
// end ;
19663: PPOPN 3
19665: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19666: LD_EXP 27
19670: PUSH
19671: LD_EXP 52
19675: AND
19676: IFFALSE 19730
19678: GO 19680
19680: DISABLE
// begin ToLua ( displayTroll(); ) ;
19681: LD_STRING displayTroll();
19683: PPUSH
19684: CALL_OW 559
// wait ( 3 3$00 ) ;
19688: LD_INT 6300
19690: PPUSH
19691: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19695: LD_STRING hideTroll();
19697: PPUSH
19698: CALL_OW 559
// wait ( 1 1$00 ) ;
19702: LD_INT 2100
19704: PPUSH
19705: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19709: LD_STRING displayTroll();
19711: PPUSH
19712: CALL_OW 559
// wait ( 1 1$00 ) ;
19716: LD_INT 2100
19718: PPUSH
19719: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19723: LD_STRING hideTroll();
19725: PPUSH
19726: CALL_OW 559
// end ;
19730: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19731: LD_EXP 27
19735: PUSH
19736: LD_EXP 53
19740: AND
19741: IFFALSE 19804
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
// begin p := 0 ;
19749: LD_ADDR_VAR 0 1
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// repeat game_speed := 1 ;
19757: LD_ADDR_OWVAR 65
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19765: LD_INT 35
19767: PPUSH
19768: CALL_OW 67
// p := p + 1 ;
19772: LD_ADDR_VAR 0 1
19776: PUSH
19777: LD_VAR 0 1
19781: PUSH
19782: LD_INT 1
19784: PLUS
19785: ST_TO_ADDR
// until p >= 60 ;
19786: LD_VAR 0 1
19790: PUSH
19791: LD_INT 60
19793: GREATEREQUAL
19794: IFFALSE 19757
// game_speed := 4 ;
19796: LD_ADDR_OWVAR 65
19800: PUSH
19801: LD_INT 4
19803: ST_TO_ADDR
// end ;
19804: PPOPN 1
19806: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19807: LD_EXP 27
19811: PUSH
19812: LD_EXP 54
19816: AND
19817: IFFALSE 19963
19819: GO 19821
19821: DISABLE
19822: LD_INT 0
19824: PPUSH
19825: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19826: LD_ADDR_VAR 0 1
19830: PUSH
19831: LD_INT 22
19833: PUSH
19834: LD_OWVAR 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 30
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PPUSH
19875: CALL_OW 69
19879: ST_TO_ADDR
// if not depot then
19880: LD_VAR 0 1
19884: NOT
19885: IFFALSE 19889
// exit ;
19887: GO 19963
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: LD_VAR 0 1
19898: PUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_VAR 0 1
19906: PPUSH
19907: CALL_OW 12
19911: ARRAY
19912: PPUSH
19913: CALL_OW 274
19917: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19918: LD_VAR 0 2
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19933: LD_VAR 0 2
19937: PPUSH
19938: LD_INT 2
19940: PPUSH
19941: LD_INT 0
19943: PPUSH
19944: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_INT 3
19955: PPUSH
19956: LD_INT 0
19958: PPUSH
19959: CALL_OW 277
// end ;
19963: PPOPN 2
19965: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19966: LD_EXP 27
19970: PUSH
19971: LD_EXP 55
19975: AND
19976: IFFALSE 20073
19978: GO 19980
19980: DISABLE
19981: LD_INT 0
19983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 21
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 3
20013: PUSH
20014: LD_INT 23
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 69
20037: ST_TO_ADDR
// if not tmp then
20038: LD_VAR 0 1
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20047: LD_VAR 0 1
20051: PUSH
20052: LD_INT 1
20054: PPUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 12
20064: ARRAY
20065: PPUSH
20066: LD_INT 200
20068: PPUSH
20069: CALL_OW 234
// end ;
20073: PPOPN 1
20075: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20076: LD_EXP 27
20080: PUSH
20081: LD_EXP 56
20085: AND
20086: IFFALSE 20165
20088: GO 20090
20090: DISABLE
20091: LD_INT 0
20093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20094: LD_ADDR_VAR 0 1
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_OWVAR 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 21
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: ST_TO_ADDR
// if not tmp then
20130: LD_VAR 0 1
20134: NOT
20135: IFFALSE 20139
// exit ;
20137: GO 20165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20139: LD_VAR 0 1
20143: PUSH
20144: LD_INT 1
20146: PPUSH
20147: LD_VAR 0 1
20151: PPUSH
20152: CALL_OW 12
20156: ARRAY
20157: PPUSH
20158: LD_INT 60
20160: PPUSH
20161: CALL_OW 234
// end ;
20165: PPOPN 1
20167: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20168: LD_EXP 27
20172: PUSH
20173: LD_EXP 57
20177: AND
20178: IFFALSE 20277
20180: GO 20182
20182: DISABLE
20183: LD_INT 0
20185: PPUSH
20186: PPUSH
// begin enable ;
20187: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20188: LD_ADDR_VAR 0 1
20192: PUSH
20193: LD_INT 22
20195: PUSH
20196: LD_OWVAR 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 61
20207: PUSH
20208: EMPTY
20209: LIST
20210: PUSH
20211: LD_INT 33
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: PPUSH
20226: CALL_OW 69
20230: ST_TO_ADDR
// if not tmp then
20231: LD_VAR 0 1
20235: NOT
20236: IFFALSE 20240
// exit ;
20238: GO 20277
// for i in tmp do
20240: LD_ADDR_VAR 0 2
20244: PUSH
20245: LD_VAR 0 1
20249: PUSH
20250: FOR_IN
20251: IFFALSE 20275
// if IsControledBy ( i ) then
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 312
20262: IFFALSE 20273
// ComUnlink ( i ) ;
20264: LD_VAR 0 2
20268: PPUSH
20269: CALL_OW 136
20273: GO 20250
20275: POP
20276: POP
// end ;
20277: PPOPN 2
20279: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20280: LD_EXP 27
20284: PUSH
20285: LD_EXP 58
20289: AND
20290: IFFALSE 20430
20292: GO 20294
20294: DISABLE
20295: LD_INT 0
20297: PPUSH
20298: PPUSH
// begin ToLua ( displayPowell(); ) ;
20299: LD_STRING displayPowell();
20301: PPUSH
20302: CALL_OW 559
// uc_side := 0 ;
20306: LD_ADDR_OWVAR 20
20310: PUSH
20311: LD_INT 0
20313: ST_TO_ADDR
// uc_nation := 2 ;
20314: LD_ADDR_OWVAR 21
20318: PUSH
20319: LD_INT 2
20321: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20322: LD_ADDR_OWVAR 37
20326: PUSH
20327: LD_INT 14
20329: ST_TO_ADDR
// vc_engine := engine_siberite ;
20330: LD_ADDR_OWVAR 39
20334: PUSH
20335: LD_INT 3
20337: ST_TO_ADDR
// vc_control := control_apeman ;
20338: LD_ADDR_OWVAR 38
20342: PUSH
20343: LD_INT 5
20345: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20346: LD_ADDR_OWVAR 40
20350: PUSH
20351: LD_INT 29
20353: ST_TO_ADDR
// un := CreateVehicle ;
20354: LD_ADDR_VAR 0 2
20358: PUSH
20359: CALL_OW 45
20363: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20364: LD_VAR 0 2
20368: PPUSH
20369: LD_INT 1
20371: PPUSH
20372: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20376: LD_INT 35
20378: PPUSH
20379: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20383: LD_VAR 0 2
20387: PPUSH
20388: LD_INT 22
20390: PUSH
20391: LD_OWVAR 2
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PPUSH
20400: CALL_OW 69
20404: PPUSH
20405: LD_VAR 0 2
20409: PPUSH
20410: CALL_OW 74
20414: PPUSH
20415: CALL_OW 115
// until IsDead ( un ) ;
20419: LD_VAR 0 2
20423: PPUSH
20424: CALL_OW 301
20428: IFFALSE 20376
// end ;
20430: PPOPN 2
20432: END
// every 0 0$1 trigger StreamModeActive and sStu do
20433: LD_EXP 27
20437: PUSH
20438: LD_EXP 66
20442: AND
20443: IFFALSE 20459
20445: GO 20447
20447: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20448: LD_STRING displayStucuk();
20450: PPUSH
20451: CALL_OW 559
// ResetFog ;
20455: CALL_OW 335
// end ;
20459: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20460: LD_EXP 27
20464: PUSH
20465: LD_EXP 59
20469: AND
20470: IFFALSE 20611
20472: GO 20474
20474: DISABLE
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20479: LD_ADDR_VAR 0 2
20483: PUSH
20484: LD_INT 22
20486: PUSH
20487: LD_OWVAR 2
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 21
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 69
20514: ST_TO_ADDR
// if not tmp then
20515: LD_VAR 0 2
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 20611
// un := tmp [ rand ( 1 , tmp ) ] ;
20524: LD_ADDR_VAR 0 1
20528: PUSH
20529: LD_VAR 0 2
20533: PUSH
20534: LD_INT 1
20536: PPUSH
20537: LD_VAR 0 2
20541: PPUSH
20542: CALL_OW 12
20546: ARRAY
20547: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_INT 0
20555: PPUSH
20556: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20560: LD_VAR 0 1
20564: PPUSH
20565: LD_OWVAR 3
20569: PUSH
20570: LD_VAR 0 1
20574: DIFF
20575: PPUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 74
20585: PPUSH
20586: CALL_OW 115
// wait ( 0 0$20 ) ;
20590: LD_INT 700
20592: PPUSH
20593: CALL_OW 67
// SetSide ( un , your_side ) ;
20597: LD_VAR 0 1
20601: PPUSH
20602: LD_OWVAR 2
20606: PPUSH
20607: CALL_OW 235
// end ;
20611: PPOPN 2
20613: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20614: LD_EXP 27
20618: PUSH
20619: LD_EXP 60
20623: AND
20624: IFFALSE 20730
20626: GO 20628
20628: DISABLE
20629: LD_INT 0
20631: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20632: LD_ADDR_VAR 0 1
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_OWVAR 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 30
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 30
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: ST_TO_ADDR
// if not depot then
20686: LD_VAR 0 1
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20730
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20695: LD_VAR 0 1
20699: PUSH
20700: LD_INT 1
20702: ARRAY
20703: PPUSH
20704: CALL_OW 250
20708: PPUSH
20709: LD_VAR 0 1
20713: PUSH
20714: LD_INT 1
20716: ARRAY
20717: PPUSH
20718: CALL_OW 251
20722: PPUSH
20723: LD_INT 70
20725: PPUSH
20726: CALL_OW 495
// end ;
20730: PPOPN 1
20732: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20733: LD_EXP 27
20737: PUSH
20738: LD_EXP 61
20742: AND
20743: IFFALSE 20954
20745: GO 20747
20747: DISABLE
20748: LD_INT 0
20750: PPUSH
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20755: LD_ADDR_VAR 0 5
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_OWVAR 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: ST_TO_ADDR
// if not tmp then
20791: LD_VAR 0 5
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20954
// for i in tmp do
20800: LD_ADDR_VAR 0 1
20804: PUSH
20805: LD_VAR 0 5
20809: PUSH
20810: FOR_IN
20811: IFFALSE 20952
// begin d := rand ( 0 , 5 ) ;
20813: LD_ADDR_VAR 0 4
20817: PUSH
20818: LD_INT 0
20820: PPUSH
20821: LD_INT 5
20823: PPUSH
20824: CALL_OW 12
20828: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20829: LD_ADDR_VAR 0 2
20833: PUSH
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 250
20843: PPUSH
20844: LD_VAR 0 4
20848: PPUSH
20849: LD_INT 3
20851: PPUSH
20852: LD_INT 12
20854: PPUSH
20855: CALL_OW 12
20859: PPUSH
20860: CALL_OW 272
20864: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 251
20879: PPUSH
20880: LD_VAR 0 4
20884: PPUSH
20885: LD_INT 3
20887: PPUSH
20888: LD_INT 12
20890: PPUSH
20891: CALL_OW 12
20895: PPUSH
20896: CALL_OW 273
20900: ST_TO_ADDR
// if ValidHex ( x , y ) then
20901: LD_VAR 0 2
20905: PPUSH
20906: LD_VAR 0 3
20910: PPUSH
20911: CALL_OW 488
20915: IFFALSE 20950
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20917: LD_VAR 0 1
20921: PPUSH
20922: LD_VAR 0 2
20926: PPUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: LD_INT 3
20934: PPUSH
20935: LD_INT 6
20937: PPUSH
20938: CALL_OW 12
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: CALL_OW 483
// end ;
20950: GO 20810
20952: POP
20953: POP
// end ;
20954: PPOPN 5
20956: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20957: LD_EXP 27
20961: PUSH
20962: LD_EXP 62
20966: AND
20967: IFFALSE 21061
20969: GO 20971
20971: DISABLE
20972: LD_INT 0
20974: PPUSH
20975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20976: LD_ADDR_VAR 0 2
20980: PUSH
20981: LD_INT 22
20983: PUSH
20984: LD_OWVAR 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 32
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: ST_TO_ADDR
// if not tmp then
21023: LD_VAR 0 2
21027: NOT
21028: IFFALSE 21032
// exit ;
21030: GO 21061
// for i in tmp do
21032: LD_ADDR_VAR 0 1
21036: PUSH
21037: LD_VAR 0 2
21041: PUSH
21042: FOR_IN
21043: IFFALSE 21059
// SetFuel ( i , 0 ) ;
21045: LD_VAR 0 1
21049: PPUSH
21050: LD_INT 0
21052: PPUSH
21053: CALL_OW 240
21057: GO 21042
21059: POP
21060: POP
// end ;
21061: PPOPN 2
21063: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21064: LD_EXP 27
21068: PUSH
21069: LD_EXP 63
21073: AND
21074: IFFALSE 21140
21076: GO 21078
21078: DISABLE
21079: LD_INT 0
21081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21082: LD_ADDR_VAR 0 1
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 29
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PPUSH
21113: CALL_OW 69
21117: ST_TO_ADDR
// if not tmp then
21118: LD_VAR 0 1
21122: NOT
21123: IFFALSE 21127
// exit ;
21125: GO 21140
// DestroyUnit ( tmp [ 1 ] ) ;
21127: LD_VAR 0 1
21131: PUSH
21132: LD_INT 1
21134: ARRAY
21135: PPUSH
21136: CALL_OW 65
// end ;
21140: PPOPN 1
21142: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21143: LD_EXP 27
21147: PUSH
21148: LD_EXP 65
21152: AND
21153: IFFALSE 21282
21155: GO 21157
21157: DISABLE
21158: LD_INT 0
21160: PPUSH
// begin uc_side := 0 ;
21161: LD_ADDR_OWVAR 20
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// uc_nation := nation_arabian ;
21169: LD_ADDR_OWVAR 21
21173: PUSH
21174: LD_INT 2
21176: ST_TO_ADDR
// hc_gallery :=  ;
21177: LD_ADDR_OWVAR 33
21181: PUSH
21182: LD_STRING 
21184: ST_TO_ADDR
// hc_name :=  ;
21185: LD_ADDR_OWVAR 26
21189: PUSH
21190: LD_STRING 
21192: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21193: LD_INT 1
21195: PPUSH
21196: LD_INT 11
21198: PPUSH
21199: LD_INT 10
21201: PPUSH
21202: CALL_OW 380
// un := CreateHuman ;
21206: LD_ADDR_VAR 0 1
21210: PUSH
21211: CALL_OW 44
21215: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21216: LD_VAR 0 1
21220: PPUSH
21221: LD_INT 1
21223: PPUSH
21224: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21228: LD_INT 35
21230: PPUSH
21231: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21235: LD_VAR 0 1
21239: PPUSH
21240: LD_INT 22
21242: PUSH
21243: LD_OWVAR 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: PPUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 74
21266: PPUSH
21267: CALL_OW 115
// until IsDead ( un ) ;
21271: LD_VAR 0 1
21275: PPUSH
21276: CALL_OW 301
21280: IFFALSE 21228
// end ;
21282: PPOPN 1
21284: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21285: LD_EXP 27
21289: PUSH
21290: LD_EXP 67
21294: AND
21295: IFFALSE 21307
21297: GO 21299
21299: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21300: LD_STRING earthquake(getX(game), 0, 32)
21302: PPUSH
21303: CALL_OW 559
21307: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21308: LD_EXP 27
21312: PUSH
21313: LD_EXP 68
21317: AND
21318: IFFALSE 21409
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
// begin enable ;
21326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21327: LD_ADDR_VAR 0 1
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 21
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 33
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: ST_TO_ADDR
// if not tmp then
21374: LD_VAR 0 1
21378: NOT
21379: IFFALSE 21383
// exit ;
21381: GO 21409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21383: LD_VAR 0 1
21387: PUSH
21388: LD_INT 1
21390: PPUSH
21391: LD_VAR 0 1
21395: PPUSH
21396: CALL_OW 12
21400: ARRAY
21401: PPUSH
21402: LD_INT 1
21404: PPUSH
21405: CALL_OW 234
// end ;
21409: PPOPN 1
21411: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21412: LD_EXP 27
21416: PUSH
21417: LD_EXP 69
21421: AND
21422: IFFALSE 21563
21424: GO 21426
21426: DISABLE
21427: LD_INT 0
21429: PPUSH
21430: PPUSH
21431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21432: LD_ADDR_VAR 0 3
21436: PUSH
21437: LD_INT 22
21439: PUSH
21440: LD_OWVAR 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 25
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PPUSH
21463: CALL_OW 69
21467: ST_TO_ADDR
// if not tmp then
21468: LD_VAR 0 3
21472: NOT
21473: IFFALSE 21477
// exit ;
21475: GO 21563
// un := tmp [ rand ( 1 , tmp ) ] ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_VAR 0 3
21486: PUSH
21487: LD_INT 1
21489: PPUSH
21490: LD_VAR 0 3
21494: PPUSH
21495: CALL_OW 12
21499: ARRAY
21500: ST_TO_ADDR
// if Crawls ( un ) then
21501: LD_VAR 0 2
21505: PPUSH
21506: CALL_OW 318
21510: IFFALSE 21521
// ComWalk ( un ) ;
21512: LD_VAR 0 2
21516: PPUSH
21517: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21521: LD_VAR 0 2
21525: PPUSH
21526: LD_INT 9
21528: PPUSH
21529: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21533: LD_INT 28
21535: PPUSH
21536: LD_OWVAR 2
21540: PPUSH
21541: LD_INT 2
21543: PPUSH
21544: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21548: LD_INT 29
21550: PPUSH
21551: LD_OWVAR 2
21555: PPUSH
21556: LD_INT 2
21558: PPUSH
21559: CALL_OW 322
// end ;
21563: PPOPN 3
21565: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21566: LD_EXP 27
21570: PUSH
21571: LD_EXP 70
21575: AND
21576: IFFALSE 21687
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
21585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: LD_INT 22
21593: PUSH
21594: LD_OWVAR 2
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 25
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: ST_TO_ADDR
// if not tmp then
21622: LD_VAR 0 3
21626: NOT
21627: IFFALSE 21631
// exit ;
21629: GO 21687
// un := tmp [ rand ( 1 , tmp ) ] ;
21631: LD_ADDR_VAR 0 2
21635: PUSH
21636: LD_VAR 0 3
21640: PUSH
21641: LD_INT 1
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 12
21653: ARRAY
21654: ST_TO_ADDR
// if Crawls ( un ) then
21655: LD_VAR 0 2
21659: PPUSH
21660: CALL_OW 318
21664: IFFALSE 21675
// ComWalk ( un ) ;
21666: LD_VAR 0 2
21670: PPUSH
21671: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_INT 8
21682: PPUSH
21683: CALL_OW 336
// end ;
21687: PPOPN 3
21689: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21690: LD_EXP 27
21694: PUSH
21695: LD_EXP 71
21699: AND
21700: IFFALSE 21844
21702: GO 21704
21704: DISABLE
21705: LD_INT 0
21707: PPUSH
21708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: LD_INT 22
21716: PUSH
21717: LD_OWVAR 2
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 21
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 12
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 34
21751: PUSH
21752: LD_INT 51
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 34
21761: PUSH
21762: LD_INT 32
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: PPUSH
21780: CALL_OW 69
21784: ST_TO_ADDR
// if not tmp then
21785: LD_VAR 0 2
21789: NOT
21790: IFFALSE 21794
// exit ;
21792: GO 21844
// for i in tmp do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: LD_VAR 0 2
21803: PUSH
21804: FOR_IN
21805: IFFALSE 21842
// if GetCargo ( i , mat_artifact ) = 0 then
21807: LD_VAR 0 1
21811: PPUSH
21812: LD_INT 4
21814: PPUSH
21815: CALL_OW 289
21819: PUSH
21820: LD_INT 0
21822: EQUAL
21823: IFFALSE 21840
// SetCargo ( i , mat_siberit , 100 ) ;
21825: LD_VAR 0 1
21829: PPUSH
21830: LD_INT 3
21832: PPUSH
21833: LD_INT 100
21835: PPUSH
21836: CALL_OW 290
21840: GO 21804
21842: POP
21843: POP
// end ;
21844: PPOPN 2
21846: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21847: LD_EXP 27
21851: PUSH
21852: LD_EXP 72
21856: AND
21857: IFFALSE 22040
21859: GO 21861
21861: DISABLE
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_INT 22
21873: PUSH
21874: LD_OWVAR 2
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PPUSH
21883: CALL_OW 69
21887: ST_TO_ADDR
// if not tmp then
21888: LD_VAR 0 2
21892: NOT
21893: IFFALSE 21897
// exit ;
21895: GO 22040
// for i := 1 to 2 do
21897: LD_ADDR_VAR 0 1
21901: PUSH
21902: DOUBLE
21903: LD_INT 1
21905: DEC
21906: ST_TO_ADDR
21907: LD_INT 2
21909: PUSH
21910: FOR_TO
21911: IFFALSE 22038
// begin uc_side := your_side ;
21913: LD_ADDR_OWVAR 20
21917: PUSH
21918: LD_OWVAR 2
21922: ST_TO_ADDR
// uc_nation := nation_american ;
21923: LD_ADDR_OWVAR 21
21927: PUSH
21928: LD_INT 1
21930: ST_TO_ADDR
// vc_chassis := us_morphling ;
21931: LD_ADDR_OWVAR 37
21935: PUSH
21936: LD_INT 5
21938: ST_TO_ADDR
// vc_engine := engine_siberite ;
21939: LD_ADDR_OWVAR 39
21943: PUSH
21944: LD_INT 3
21946: ST_TO_ADDR
// vc_control := control_computer ;
21947: LD_ADDR_OWVAR 38
21951: PUSH
21952: LD_INT 3
21954: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21955: LD_ADDR_OWVAR 40
21959: PUSH
21960: LD_INT 10
21962: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21963: LD_VAR 0 2
21967: PUSH
21968: LD_INT 1
21970: ARRAY
21971: PPUSH
21972: CALL_OW 310
21976: NOT
21977: IFFALSE 22024
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21979: CALL_OW 45
21983: PPUSH
21984: LD_VAR 0 2
21988: PUSH
21989: LD_INT 1
21991: ARRAY
21992: PPUSH
21993: CALL_OW 250
21997: PPUSH
21998: LD_VAR 0 2
22002: PUSH
22003: LD_INT 1
22005: ARRAY
22006: PPUSH
22007: CALL_OW 251
22011: PPUSH
22012: LD_INT 12
22014: PPUSH
22015: LD_INT 1
22017: PPUSH
22018: CALL_OW 50
22022: GO 22036
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22024: CALL_OW 45
22028: PPUSH
22029: LD_INT 1
22031: PPUSH
22032: CALL_OW 51
// end ;
22036: GO 21910
22038: POP
22039: POP
// end ;
22040: PPOPN 2
22042: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22043: LD_EXP 27
22047: PUSH
22048: LD_EXP 73
22052: AND
22053: IFFALSE 22275
22055: GO 22057
22057: DISABLE
22058: LD_INT 0
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22066: LD_ADDR_VAR 0 6
22070: PUSH
22071: LD_INT 22
22073: PUSH
22074: LD_OWVAR 2
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: PPUSH
22115: CALL_OW 69
22119: ST_TO_ADDR
// if not tmp then
22120: LD_VAR 0 6
22124: NOT
22125: IFFALSE 22129
// exit ;
22127: GO 22275
// s1 := rand ( 1 , 4 ) ;
22129: LD_ADDR_VAR 0 2
22133: PUSH
22134: LD_INT 1
22136: PPUSH
22137: LD_INT 4
22139: PPUSH
22140: CALL_OW 12
22144: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22145: LD_ADDR_VAR 0 4
22149: PUSH
22150: LD_VAR 0 6
22154: PUSH
22155: LD_INT 1
22157: ARRAY
22158: PPUSH
22159: LD_VAR 0 2
22163: PPUSH
22164: CALL_OW 259
22168: ST_TO_ADDR
// if s1 = 1 then
22169: LD_VAR 0 2
22173: PUSH
22174: LD_INT 1
22176: EQUAL
22177: IFFALSE 22197
// s2 := rand ( 2 , 4 ) else
22179: LD_ADDR_VAR 0 3
22183: PUSH
22184: LD_INT 2
22186: PPUSH
22187: LD_INT 4
22189: PPUSH
22190: CALL_OW 12
22194: ST_TO_ADDR
22195: GO 22205
// s2 := 1 ;
22197: LD_ADDR_VAR 0 3
22201: PUSH
22202: LD_INT 1
22204: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22205: LD_ADDR_VAR 0 5
22209: PUSH
22210: LD_VAR 0 6
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PPUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: CALL_OW 259
22228: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22229: LD_VAR 0 6
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: PPUSH
22238: LD_VAR 0 2
22242: PPUSH
22243: LD_VAR 0 5
22247: PPUSH
22248: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22252: LD_VAR 0 6
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: PPUSH
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_VAR 0 4
22270: PPUSH
22271: CALL_OW 237
// end ;
22275: PPOPN 6
22277: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22278: LD_EXP 27
22282: PUSH
22283: LD_EXP 74
22287: AND
22288: IFFALSE 22367
22290: GO 22292
22292: DISABLE
22293: LD_INT 0
22295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22296: LD_ADDR_VAR 0 1
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_OWVAR 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PPUSH
22327: CALL_OW 69
22331: ST_TO_ADDR
// if not tmp then
22332: LD_VAR 0 1
22336: NOT
22337: IFFALSE 22341
// exit ;
22339: GO 22367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22341: LD_VAR 0 1
22345: PUSH
22346: LD_INT 1
22348: PPUSH
22349: LD_VAR 0 1
22353: PPUSH
22354: CALL_OW 12
22358: ARRAY
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: CALL_OW 234
// end ;
22367: PPOPN 1
22369: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22370: LD_EXP 27
22374: PUSH
22375: LD_EXP 75
22379: AND
22380: IFFALSE 22492
22382: GO 22384
22384: DISABLE
22385: LD_INT 0
22387: PPUSH
22388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22389: LD_ADDR_VAR 0 2
22393: PUSH
22394: LD_INT 22
22396: PUSH
22397: LD_OWVAR 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 27
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 26
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 30
22431: PUSH
22432: LD_INT 28
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PPUSH
22449: CALL_OW 69
22453: ST_TO_ADDR
// if not tmp then
22454: LD_VAR 0 2
22458: NOT
22459: IFFALSE 22463
// exit ;
22461: GO 22492
// for i in tmp do
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_VAR 0 2
22472: PUSH
22473: FOR_IN
22474: IFFALSE 22490
// SetLives ( i , 1 ) ;
22476: LD_VAR 0 1
22480: PPUSH
22481: LD_INT 1
22483: PPUSH
22484: CALL_OW 234
22488: GO 22473
22490: POP
22491: POP
// end ;
22492: PPOPN 2
22494: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22495: LD_EXP 27
22499: PUSH
22500: LD_EXP 76
22504: AND
22505: IFFALSE 22792
22507: GO 22509
22509: DISABLE
22510: LD_INT 0
22512: PPUSH
22513: PPUSH
22514: PPUSH
// begin i := rand ( 1 , 7 ) ;
22515: LD_ADDR_VAR 0 1
22519: PUSH
22520: LD_INT 1
22522: PPUSH
22523: LD_INT 7
22525: PPUSH
22526: CALL_OW 12
22530: ST_TO_ADDR
// case i of 1 :
22531: LD_VAR 0 1
22535: PUSH
22536: LD_INT 1
22538: DOUBLE
22539: EQUAL
22540: IFTRUE 22544
22542: GO 22554
22544: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22545: LD_STRING earthquake(getX(game), 0, 32)
22547: PPUSH
22548: CALL_OW 559
22552: GO 22792
22554: LD_INT 2
22556: DOUBLE
22557: EQUAL
22558: IFTRUE 22562
22560: GO 22576
22562: POP
// begin ToLua ( displayStucuk(); ) ;
22563: LD_STRING displayStucuk();
22565: PPUSH
22566: CALL_OW 559
// ResetFog ;
22570: CALL_OW 335
// end ; 3 :
22574: GO 22792
22576: LD_INT 3
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22688
22584: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_INT 22
22592: PUSH
22593: LD_OWVAR 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 25
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PPUSH
22616: CALL_OW 69
22620: ST_TO_ADDR
// if not tmp then
22621: LD_VAR 0 2
22625: NOT
22626: IFFALSE 22630
// exit ;
22628: GO 22792
// un := tmp [ rand ( 1 , tmp ) ] ;
22630: LD_ADDR_VAR 0 3
22634: PUSH
22635: LD_VAR 0 2
22639: PUSH
22640: LD_INT 1
22642: PPUSH
22643: LD_VAR 0 2
22647: PPUSH
22648: CALL_OW 12
22652: ARRAY
22653: ST_TO_ADDR
// if Crawls ( un ) then
22654: LD_VAR 0 3
22658: PPUSH
22659: CALL_OW 318
22663: IFFALSE 22674
// ComWalk ( un ) ;
22665: LD_VAR 0 3
22669: PPUSH
22670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22674: LD_VAR 0 3
22678: PPUSH
22679: LD_INT 8
22681: PPUSH
22682: CALL_OW 336
// end ; 4 :
22686: GO 22792
22688: LD_INT 4
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22770
22696: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22697: LD_ADDR_VAR 0 2
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_OWVAR 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 30
22716: PUSH
22717: LD_INT 29
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 69
22732: ST_TO_ADDR
// if not tmp then
22733: LD_VAR 0 2
22737: NOT
22738: IFFALSE 22742
// exit ;
22740: GO 22792
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22742: LD_VAR 0 2
22746: PUSH
22747: LD_INT 1
22749: ARRAY
22750: PPUSH
22751: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22755: LD_VAR 0 2
22759: PUSH
22760: LD_INT 1
22762: ARRAY
22763: PPUSH
22764: CALL_OW 65
// end ; 5 .. 7 :
22768: GO 22792
22770: LD_INT 5
22772: DOUBLE
22773: GREATEREQUAL
22774: IFFALSE 22782
22776: LD_INT 7
22778: DOUBLE
22779: LESSEQUAL
22780: IFTRUE 22784
22782: GO 22791
22784: POP
// StreamSibBomb ; end ;
22785: CALL 19029 0 0
22789: GO 22792
22791: POP
// end ;
22792: PPOPN 3
22794: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22795: LD_EXP 27
22799: PUSH
22800: LD_EXP 77
22804: AND
22805: IFFALSE 22961
22807: GO 22809
22809: DISABLE
22810: LD_INT 0
22812: PPUSH
22813: PPUSH
22814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22815: LD_ADDR_VAR 0 2
22819: PUSH
22820: LD_INT 81
22822: PUSH
22823: LD_OWVAR 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 21
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 21
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL_OW 69
22868: ST_TO_ADDR
// if not tmp then
22869: LD_VAR 0 2
22873: NOT
22874: IFFALSE 22878
// exit ;
22876: GO 22961
// p := 0 ;
22878: LD_ADDR_VAR 0 3
22882: PUSH
22883: LD_INT 0
22885: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22886: LD_INT 35
22888: PPUSH
22889: CALL_OW 67
// p := p + 1 ;
22893: LD_ADDR_VAR 0 3
22897: PUSH
22898: LD_VAR 0 3
22902: PUSH
22903: LD_INT 1
22905: PLUS
22906: ST_TO_ADDR
// for i in tmp do
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_VAR 0 2
22916: PUSH
22917: FOR_IN
22918: IFFALSE 22949
// if GetLives ( i ) < 1000 then
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 256
22929: PUSH
22930: LD_INT 1000
22932: LESS
22933: IFFALSE 22947
// SetLives ( i , 1000 ) ;
22935: LD_VAR 0 1
22939: PPUSH
22940: LD_INT 1000
22942: PPUSH
22943: CALL_OW 234
22947: GO 22917
22949: POP
22950: POP
// until p > 20 ;
22951: LD_VAR 0 3
22955: PUSH
22956: LD_INT 20
22958: GREATER
22959: IFFALSE 22886
// end ;
22961: PPOPN 3
22963: END
// every 0 0$1 trigger StreamModeActive and sTime do
22964: LD_EXP 27
22968: PUSH
22969: LD_EXP 78
22973: AND
22974: IFFALSE 23009
22976: GO 22978
22978: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22979: LD_INT 28
22981: PPUSH
22982: LD_OWVAR 2
22986: PPUSH
22987: LD_INT 2
22989: PPUSH
22990: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22994: LD_INT 30
22996: PPUSH
22997: LD_OWVAR 2
23001: PPUSH
23002: LD_INT 2
23004: PPUSH
23005: CALL_OW 322
// end ;
23009: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23010: LD_EXP 27
23014: PUSH
23015: LD_EXP 79
23019: AND
23020: IFFALSE 23141
23022: GO 23024
23024: DISABLE
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23029: LD_ADDR_VAR 0 2
23033: PUSH
23034: LD_INT 22
23036: PUSH
23037: LD_OWVAR 2
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 21
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 3
23058: PUSH
23059: LD_INT 23
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: PPUSH
23078: CALL_OW 69
23082: ST_TO_ADDR
// if not tmp then
23083: LD_VAR 0 2
23087: NOT
23088: IFFALSE 23092
// exit ;
23090: GO 23141
// for i in tmp do
23092: LD_ADDR_VAR 0 1
23096: PUSH
23097: LD_VAR 0 2
23101: PUSH
23102: FOR_IN
23103: IFFALSE 23139
// begin if Crawls ( i ) then
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 318
23114: IFFALSE 23125
// ComWalk ( i ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 138
// SetClass ( i , 2 ) ;
23125: LD_VAR 0 1
23129: PPUSH
23130: LD_INT 2
23132: PPUSH
23133: CALL_OW 336
// end ;
23137: GO 23102
23139: POP
23140: POP
// end ;
23141: PPOPN 2
23143: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23144: LD_EXP 27
23148: PUSH
23149: LD_EXP 80
23153: AND
23154: IFFALSE 23442
23156: GO 23158
23158: DISABLE
23159: LD_INT 0
23161: PPUSH
23162: PPUSH
23163: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23164: LD_OWVAR 2
23168: PPUSH
23169: LD_INT 9
23171: PPUSH
23172: LD_INT 1
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23182: LD_INT 9
23184: PPUSH
23185: LD_OWVAR 2
23189: PPUSH
23190: CALL_OW 343
// uc_side := 9 ;
23194: LD_ADDR_OWVAR 20
23198: PUSH
23199: LD_INT 9
23201: ST_TO_ADDR
// uc_nation := 2 ;
23202: LD_ADDR_OWVAR 21
23206: PUSH
23207: LD_INT 2
23209: ST_TO_ADDR
// hc_name := Dark Warrior ;
23210: LD_ADDR_OWVAR 26
23214: PUSH
23215: LD_STRING Dark Warrior
23217: ST_TO_ADDR
// hc_gallery :=  ;
23218: LD_ADDR_OWVAR 33
23222: PUSH
23223: LD_STRING 
23225: ST_TO_ADDR
// hc_noskilllimit := true ;
23226: LD_ADDR_OWVAR 76
23230: PUSH
23231: LD_INT 1
23233: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23234: LD_ADDR_OWVAR 31
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 30
23247: PUSH
23248: LD_INT 30
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: ST_TO_ADDR
// un := CreateHuman ;
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: CALL_OW 44
23266: ST_TO_ADDR
// hc_noskilllimit := false ;
23267: LD_ADDR_OWVAR 76
23271: PUSH
23272: LD_INT 0
23274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23275: LD_VAR 0 3
23279: PPUSH
23280: LD_INT 1
23282: PPUSH
23283: CALL_OW 51
// ToLua ( playRanger() ) ;
23287: LD_STRING playRanger()
23289: PPUSH
23290: CALL_OW 559
// p := 0 ;
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 0
23301: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23302: LD_INT 35
23304: PPUSH
23305: CALL_OW 67
// p := p + 1 ;
23309: LD_ADDR_VAR 0 2
23313: PUSH
23314: LD_VAR 0 2
23318: PUSH
23319: LD_INT 1
23321: PLUS
23322: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23323: LD_VAR 0 3
23327: PPUSH
23328: CALL_OW 256
23332: PUSH
23333: LD_INT 1000
23335: LESS
23336: IFFALSE 23350
// SetLives ( un , 1000 ) ;
23338: LD_VAR 0 3
23342: PPUSH
23343: LD_INT 1000
23345: PPUSH
23346: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23350: LD_VAR 0 3
23354: PPUSH
23355: LD_INT 81
23357: PUSH
23358: LD_OWVAR 2
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 91
23369: PUSH
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 30
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PPUSH
23387: CALL_OW 69
23391: PPUSH
23392: LD_VAR 0 3
23396: PPUSH
23397: CALL_OW 74
23401: PPUSH
23402: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23406: LD_VAR 0 2
23410: PUSH
23411: LD_INT 80
23413: GREATER
23414: PUSH
23415: LD_VAR 0 3
23419: PPUSH
23420: CALL_OW 301
23424: OR
23425: IFFALSE 23302
// if un then
23427: LD_VAR 0 3
23431: IFFALSE 23442
// RemoveUnit ( un ) ;
23433: LD_VAR 0 3
23437: PPUSH
23438: CALL_OW 64
// end ;
23442: PPOPN 3
23444: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23445: LD_EXP 81
23449: IFFALSE 23565
23451: GO 23453
23453: DISABLE
23454: LD_INT 0
23456: PPUSH
23457: PPUSH
23458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_INT 81
23466: PUSH
23467: LD_OWVAR 2
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 21
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23495: LD_STRING playComputer()
23497: PPUSH
23498: CALL_OW 559
// if not tmp then
23502: LD_VAR 0 2
23506: NOT
23507: IFFALSE 23511
// exit ;
23509: GO 23565
// for i in tmp do
23511: LD_ADDR_VAR 0 1
23515: PUSH
23516: LD_VAR 0 2
23520: PUSH
23521: FOR_IN
23522: IFFALSE 23563
// for j := 1 to 4 do
23524: LD_ADDR_VAR 0 3
23528: PUSH
23529: DOUBLE
23530: LD_INT 1
23532: DEC
23533: ST_TO_ADDR
23534: LD_INT 4
23536: PUSH
23537: FOR_TO
23538: IFFALSE 23559
// SetSkill ( i , j , 10 ) ;
23540: LD_VAR 0 1
23544: PPUSH
23545: LD_VAR 0 3
23549: PPUSH
23550: LD_INT 10
23552: PPUSH
23553: CALL_OW 237
23557: GO 23537
23559: POP
23560: POP
23561: GO 23521
23563: POP
23564: POP
// end ;
23565: PPOPN 3
23567: END
// every 0 0$1 trigger s30 do var i , tmp ;
23568: LD_EXP 82
23572: IFFALSE 23641
23574: GO 23576
23576: DISABLE
23577: LD_INT 0
23579: PPUSH
23580: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 22
23588: PUSH
23589: LD_OWVAR 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: ST_TO_ADDR
// if not tmp then
23603: LD_VAR 0 2
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 23641
// for i in tmp do
23612: LD_ADDR_VAR 0 1
23616: PUSH
23617: LD_VAR 0 2
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23639
// SetLives ( i , 300 ) ;
23625: LD_VAR 0 1
23629: PPUSH
23630: LD_INT 300
23632: PPUSH
23633: CALL_OW 234
23637: GO 23622
23639: POP
23640: POP
// end ;
23641: PPOPN 2
23643: END
// every 0 0$1 trigger s60 do var i , tmp ;
23644: LD_EXP 83
23648: IFFALSE 23717
23650: GO 23652
23652: DISABLE
23653: LD_INT 0
23655: PPUSH
23656: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23657: LD_ADDR_VAR 0 2
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_OWVAR 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PPUSH
23674: CALL_OW 69
23678: ST_TO_ADDR
// if not tmp then
23679: LD_VAR 0 2
23683: NOT
23684: IFFALSE 23688
// exit ;
23686: GO 23717
// for i in tmp do
23688: LD_ADDR_VAR 0 1
23692: PUSH
23693: LD_VAR 0 2
23697: PUSH
23698: FOR_IN
23699: IFFALSE 23715
// SetLives ( i , 600 ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_INT 600
23708: PPUSH
23709: CALL_OW 234
23713: GO 23698
23715: POP
23716: POP
// end ;
23717: PPOPN 2
23719: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23720: LD_INT 0
23722: PPUSH
// case cmd of 301 :
23723: LD_VAR 0 1
23727: PUSH
23728: LD_INT 301
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23768
23736: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23737: LD_VAR 0 6
23741: PPUSH
23742: LD_VAR 0 7
23746: PPUSH
23747: LD_VAR 0 8
23751: PPUSH
23752: LD_VAR 0 4
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: CALL 24977 0 5
23766: GO 23889
23768: LD_INT 302
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23813
23776: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23777: LD_VAR 0 6
23781: PPUSH
23782: LD_VAR 0 7
23786: PPUSH
23787: LD_VAR 0 8
23791: PPUSH
23792: LD_VAR 0 9
23796: PPUSH
23797: LD_VAR 0 4
23801: PPUSH
23802: LD_VAR 0 5
23806: PPUSH
23807: CALL 25068 0 6
23811: GO 23889
23813: LD_INT 303
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23858
23821: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23822: LD_VAR 0 6
23826: PPUSH
23827: LD_VAR 0 7
23831: PPUSH
23832: LD_VAR 0 8
23836: PPUSH
23837: LD_VAR 0 9
23841: PPUSH
23842: LD_VAR 0 4
23846: PPUSH
23847: LD_VAR 0 5
23851: PPUSH
23852: CALL 23894 0 6
23856: GO 23889
23858: LD_INT 304
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23888
23866: POP
// hHackTeleport ( unit , x , y ) ; end ;
23867: LD_VAR 0 2
23871: PPUSH
23872: LD_VAR 0 4
23876: PPUSH
23877: LD_VAR 0 5
23881: PPUSH
23882: CALL 25661 0 3
23886: GO 23889
23888: POP
// end ;
23889: LD_VAR 0 12
23893: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23894: LD_INT 0
23896: PPUSH
23897: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23898: LD_VAR 0 1
23902: PUSH
23903: LD_INT 1
23905: LESS
23906: PUSH
23907: LD_VAR 0 1
23911: PUSH
23912: LD_INT 3
23914: GREATER
23915: OR
23916: PUSH
23917: LD_VAR 0 5
23921: PPUSH
23922: LD_VAR 0 6
23926: PPUSH
23927: CALL_OW 428
23931: OR
23932: IFFALSE 23936
// exit ;
23934: GO 24664
// uc_side := your_side ;
23936: LD_ADDR_OWVAR 20
23940: PUSH
23941: LD_OWVAR 2
23945: ST_TO_ADDR
// uc_nation := nation ;
23946: LD_ADDR_OWVAR 21
23950: PUSH
23951: LD_VAR 0 1
23955: ST_TO_ADDR
// bc_level = 1 ;
23956: LD_ADDR_OWVAR 43
23960: PUSH
23961: LD_INT 1
23963: ST_TO_ADDR
// case btype of 1 :
23964: LD_VAR 0 2
23968: PUSH
23969: LD_INT 1
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23977
23975: GO 23988
23977: POP
// bc_type := b_depot ; 2 :
23978: LD_ADDR_OWVAR 42
23982: PUSH
23983: LD_INT 0
23985: ST_TO_ADDR
23986: GO 24608
23988: LD_INT 2
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24007
23996: POP
// bc_type := b_warehouse ; 3 :
23997: LD_ADDR_OWVAR 42
24001: PUSH
24002: LD_INT 1
24004: ST_TO_ADDR
24005: GO 24608
24007: LD_INT 3
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24026
24015: POP
// bc_type := b_lab ; 4 .. 9 :
24016: LD_ADDR_OWVAR 42
24020: PUSH
24021: LD_INT 6
24023: ST_TO_ADDR
24024: GO 24608
24026: LD_INT 4
24028: DOUBLE
24029: GREATEREQUAL
24030: IFFALSE 24038
24032: LD_INT 9
24034: DOUBLE
24035: LESSEQUAL
24036: IFTRUE 24040
24038: GO 24100
24040: POP
// begin bc_type := b_lab_half ;
24041: LD_ADDR_OWVAR 42
24045: PUSH
24046: LD_INT 7
24048: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24049: LD_ADDR_OWVAR 44
24053: PUSH
24054: LD_INT 10
24056: PUSH
24057: LD_INT 11
24059: PUSH
24060: LD_INT 12
24062: PUSH
24063: LD_INT 15
24065: PUSH
24066: LD_INT 14
24068: PUSH
24069: LD_INT 13
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: PUSH
24080: LD_VAR 0 2
24084: PUSH
24085: LD_INT 3
24087: MINUS
24088: ARRAY
24089: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24090: LD_ADDR_OWVAR 45
24094: PUSH
24095: LD_INT 9
24097: ST_TO_ADDR
// end ; 10 .. 13 :
24098: GO 24608
24100: LD_INT 10
24102: DOUBLE
24103: GREATEREQUAL
24104: IFFALSE 24112
24106: LD_INT 13
24108: DOUBLE
24109: LESSEQUAL
24110: IFTRUE 24114
24112: GO 24191
24114: POP
// begin bc_type := b_lab_full ;
24115: LD_ADDR_OWVAR 42
24119: PUSH
24120: LD_INT 8
24122: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24123: LD_ADDR_OWVAR 44
24127: PUSH
24128: LD_INT 10
24130: PUSH
24131: LD_INT 12
24133: PUSH
24134: LD_INT 14
24136: PUSH
24137: LD_INT 13
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: PUSH
24146: LD_VAR 0 2
24150: PUSH
24151: LD_INT 9
24153: MINUS
24154: ARRAY
24155: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24156: LD_ADDR_OWVAR 45
24160: PUSH
24161: LD_INT 11
24163: PUSH
24164: LD_INT 15
24166: PUSH
24167: LD_INT 12
24169: PUSH
24170: LD_INT 15
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: PUSH
24179: LD_VAR 0 2
24183: PUSH
24184: LD_INT 9
24186: MINUS
24187: ARRAY
24188: ST_TO_ADDR
// end ; 14 :
24189: GO 24608
24191: LD_INT 14
24193: DOUBLE
24194: EQUAL
24195: IFTRUE 24199
24197: GO 24210
24199: POP
// bc_type := b_workshop ; 15 :
24200: LD_ADDR_OWVAR 42
24204: PUSH
24205: LD_INT 2
24207: ST_TO_ADDR
24208: GO 24608
24210: LD_INT 15
24212: DOUBLE
24213: EQUAL
24214: IFTRUE 24218
24216: GO 24229
24218: POP
// bc_type := b_factory ; 16 :
24219: LD_ADDR_OWVAR 42
24223: PUSH
24224: LD_INT 3
24226: ST_TO_ADDR
24227: GO 24608
24229: LD_INT 16
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24248
24237: POP
// bc_type := b_ext_gun ; 17 :
24238: LD_ADDR_OWVAR 42
24242: PUSH
24243: LD_INT 17
24245: ST_TO_ADDR
24246: GO 24608
24248: LD_INT 17
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24284
24256: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24257: LD_ADDR_OWVAR 42
24261: PUSH
24262: LD_INT 19
24264: PUSH
24265: LD_INT 23
24267: PUSH
24268: LD_INT 19
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: PUSH
24276: LD_VAR 0 1
24280: ARRAY
24281: ST_TO_ADDR
24282: GO 24608
24284: LD_INT 18
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24303
24292: POP
// bc_type := b_ext_radar ; 19 :
24293: LD_ADDR_OWVAR 42
24297: PUSH
24298: LD_INT 20
24300: ST_TO_ADDR
24301: GO 24608
24303: LD_INT 19
24305: DOUBLE
24306: EQUAL
24307: IFTRUE 24311
24309: GO 24322
24311: POP
// bc_type := b_ext_radio ; 20 :
24312: LD_ADDR_OWVAR 42
24316: PUSH
24317: LD_INT 22
24319: ST_TO_ADDR
24320: GO 24608
24322: LD_INT 20
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24341
24330: POP
// bc_type := b_ext_siberium ; 21 :
24331: LD_ADDR_OWVAR 42
24335: PUSH
24336: LD_INT 21
24338: ST_TO_ADDR
24339: GO 24608
24341: LD_INT 21
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24360
24349: POP
// bc_type := b_ext_computer ; 22 :
24350: LD_ADDR_OWVAR 42
24354: PUSH
24355: LD_INT 24
24357: ST_TO_ADDR
24358: GO 24608
24360: LD_INT 22
24362: DOUBLE
24363: EQUAL
24364: IFTRUE 24368
24366: GO 24379
24368: POP
// bc_type := b_ext_track ; 23 :
24369: LD_ADDR_OWVAR 42
24373: PUSH
24374: LD_INT 16
24376: ST_TO_ADDR
24377: GO 24608
24379: LD_INT 23
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24398
24387: POP
// bc_type := b_ext_laser ; 24 :
24388: LD_ADDR_OWVAR 42
24392: PUSH
24393: LD_INT 25
24395: ST_TO_ADDR
24396: GO 24608
24398: LD_INT 24
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24417
24406: POP
// bc_type := b_control_tower ; 25 :
24407: LD_ADDR_OWVAR 42
24411: PUSH
24412: LD_INT 36
24414: ST_TO_ADDR
24415: GO 24608
24417: LD_INT 25
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24436
24425: POP
// bc_type := b_breastwork ; 26 :
24426: LD_ADDR_OWVAR 42
24430: PUSH
24431: LD_INT 31
24433: ST_TO_ADDR
24434: GO 24608
24436: LD_INT 26
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24455
24444: POP
// bc_type := b_bunker ; 27 :
24445: LD_ADDR_OWVAR 42
24449: PUSH
24450: LD_INT 32
24452: ST_TO_ADDR
24453: GO 24608
24455: LD_INT 27
24457: DOUBLE
24458: EQUAL
24459: IFTRUE 24463
24461: GO 24474
24463: POP
// bc_type := b_turret ; 28 :
24464: LD_ADDR_OWVAR 42
24468: PUSH
24469: LD_INT 33
24471: ST_TO_ADDR
24472: GO 24608
24474: LD_INT 28
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24493
24482: POP
// bc_type := b_armoury ; 29 :
24483: LD_ADDR_OWVAR 42
24487: PUSH
24488: LD_INT 4
24490: ST_TO_ADDR
24491: GO 24608
24493: LD_INT 29
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24501
24499: GO 24512
24501: POP
// bc_type := b_barracks ; 30 :
24502: LD_ADDR_OWVAR 42
24506: PUSH
24507: LD_INT 5
24509: ST_TO_ADDR
24510: GO 24608
24512: LD_INT 30
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24531
24520: POP
// bc_type := b_solar_power ; 31 :
24521: LD_ADDR_OWVAR 42
24525: PUSH
24526: LD_INT 27
24528: ST_TO_ADDR
24529: GO 24608
24531: LD_INT 31
24533: DOUBLE
24534: EQUAL
24535: IFTRUE 24539
24537: GO 24550
24539: POP
// bc_type := b_oil_power ; 32 :
24540: LD_ADDR_OWVAR 42
24544: PUSH
24545: LD_INT 26
24547: ST_TO_ADDR
24548: GO 24608
24550: LD_INT 32
24552: DOUBLE
24553: EQUAL
24554: IFTRUE 24558
24556: GO 24569
24558: POP
// bc_type := b_siberite_power ; 33 :
24559: LD_ADDR_OWVAR 42
24563: PUSH
24564: LD_INT 28
24566: ST_TO_ADDR
24567: GO 24608
24569: LD_INT 33
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24588
24577: POP
// bc_type := b_oil_mine ; 34 :
24578: LD_ADDR_OWVAR 42
24582: PUSH
24583: LD_INT 29
24585: ST_TO_ADDR
24586: GO 24608
24588: LD_INT 34
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24607
24596: POP
// bc_type := b_siberite_mine ; end ;
24597: LD_ADDR_OWVAR 42
24601: PUSH
24602: LD_INT 30
24604: ST_TO_ADDR
24605: GO 24608
24607: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24608: LD_ADDR_VAR 0 8
24612: PUSH
24613: LD_VAR 0 5
24617: PPUSH
24618: LD_VAR 0 6
24622: PPUSH
24623: LD_VAR 0 3
24627: PPUSH
24628: CALL_OW 47
24632: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24633: LD_OWVAR 42
24637: PUSH
24638: LD_INT 32
24640: PUSH
24641: LD_INT 33
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: IN
24648: IFFALSE 24664
// PlaceWeaponTurret ( b , weapon ) ;
24650: LD_VAR 0 8
24654: PPUSH
24655: LD_VAR 0 4
24659: PPUSH
24660: CALL_OW 431
// end ;
24664: LD_VAR 0 7
24668: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24675: LD_ADDR_VAR 0 4
24679: PUSH
24680: LD_INT 22
24682: PUSH
24683: LD_OWVAR 2
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: LD_INT 30
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 30
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 69
24728: ST_TO_ADDR
// if not tmp then
24729: LD_VAR 0 4
24733: NOT
24734: IFFALSE 24738
// exit ;
24736: GO 24797
// for i in tmp do
24738: LD_ADDR_VAR 0 2
24742: PUSH
24743: LD_VAR 0 4
24747: PUSH
24748: FOR_IN
24749: IFFALSE 24795
// for j = 1 to 3 do
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: DOUBLE
24757: LD_INT 1
24759: DEC
24760: ST_TO_ADDR
24761: LD_INT 3
24763: PUSH
24764: FOR_TO
24765: IFFALSE 24791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24767: LD_VAR 0 2
24771: PPUSH
24772: CALL_OW 274
24776: PPUSH
24777: LD_VAR 0 3
24781: PPUSH
24782: LD_INT 99999
24784: PPUSH
24785: CALL_OW 277
24789: GO 24764
24791: POP
24792: POP
24793: GO 24748
24795: POP
24796: POP
// end ;
24797: LD_VAR 0 1
24801: RET
// export function hHackSetLevel10 ; var i , j ; begin
24802: LD_INT 0
24804: PPUSH
24805: PPUSH
24806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24807: LD_ADDR_VAR 0 2
24811: PUSH
24812: LD_INT 21
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: PUSH
24827: FOR_IN
24828: IFFALSE 24880
// if IsSelected ( i ) then
24830: LD_VAR 0 2
24834: PPUSH
24835: CALL_OW 306
24839: IFFALSE 24878
// begin for j := 1 to 4 do
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: DOUBLE
24847: LD_INT 1
24849: DEC
24850: ST_TO_ADDR
24851: LD_INT 4
24853: PUSH
24854: FOR_TO
24855: IFFALSE 24876
// SetSkill ( i , j , 10 ) ;
24857: LD_VAR 0 2
24861: PPUSH
24862: LD_VAR 0 3
24866: PPUSH
24867: LD_INT 10
24869: PPUSH
24870: CALL_OW 237
24874: GO 24854
24876: POP
24877: POP
// end ;
24878: GO 24827
24880: POP
24881: POP
// end ;
24882: LD_VAR 0 1
24886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24887: LD_INT 0
24889: PPUSH
24890: PPUSH
24891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24892: LD_ADDR_VAR 0 2
24896: PUSH
24897: LD_INT 22
24899: PUSH
24900: LD_OWVAR 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 21
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PPUSH
24923: CALL_OW 69
24927: PUSH
24928: FOR_IN
24929: IFFALSE 24970
// begin for j := 1 to 4 do
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: DOUBLE
24937: LD_INT 1
24939: DEC
24940: ST_TO_ADDR
24941: LD_INT 4
24943: PUSH
24944: FOR_TO
24945: IFFALSE 24966
// SetSkill ( i , j , 10 ) ;
24947: LD_VAR 0 2
24951: PPUSH
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 10
24959: PPUSH
24960: CALL_OW 237
24964: GO 24944
24966: POP
24967: POP
// end ;
24968: GO 24928
24970: POP
24971: POP
// end ;
24972: LD_VAR 0 1
24976: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24977: LD_INT 0
24979: PPUSH
// uc_side := your_side ;
24980: LD_ADDR_OWVAR 20
24984: PUSH
24985: LD_OWVAR 2
24989: ST_TO_ADDR
// uc_nation := nation ;
24990: LD_ADDR_OWVAR 21
24994: PUSH
24995: LD_VAR 0 1
24999: ST_TO_ADDR
// InitHc ;
25000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25004: LD_INT 0
25006: PPUSH
25007: LD_VAR 0 2
25011: PPUSH
25012: LD_VAR 0 3
25016: PPUSH
25017: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25021: LD_VAR 0 4
25025: PPUSH
25026: LD_VAR 0 5
25030: PPUSH
25031: CALL_OW 428
25035: PUSH
25036: LD_INT 0
25038: EQUAL
25039: IFFALSE 25063
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25041: CALL_OW 44
25045: PPUSH
25046: LD_VAR 0 4
25050: PPUSH
25051: LD_VAR 0 5
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 48
// end ;
25063: LD_VAR 0 6
25067: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25068: LD_INT 0
25070: PPUSH
25071: PPUSH
// uc_side := your_side ;
25072: LD_ADDR_OWVAR 20
25076: PUSH
25077: LD_OWVAR 2
25081: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25082: LD_VAR 0 1
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: LD_INT 4
25098: PUSH
25099: LD_INT 5
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: IN
25109: IFFALSE 25121
// uc_nation := nation_american else
25111: LD_ADDR_OWVAR 21
25115: PUSH
25116: LD_INT 1
25118: ST_TO_ADDR
25119: GO 25164
// if chassis in [ 11 , 12 , 13 , 14 ] then
25121: LD_VAR 0 1
25125: PUSH
25126: LD_INT 11
25128: PUSH
25129: LD_INT 12
25131: PUSH
25132: LD_INT 13
25134: PUSH
25135: LD_INT 14
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: IN
25144: IFFALSE 25156
// uc_nation := nation_arabian else
25146: LD_ADDR_OWVAR 21
25150: PUSH
25151: LD_INT 2
25153: ST_TO_ADDR
25154: GO 25164
// uc_nation := nation_russian ;
25156: LD_ADDR_OWVAR 21
25160: PUSH
25161: LD_INT 3
25163: ST_TO_ADDR
// vc_chassis := chassis ;
25164: LD_ADDR_OWVAR 37
25168: PUSH
25169: LD_VAR 0 1
25173: ST_TO_ADDR
// vc_engine := engine ;
25174: LD_ADDR_OWVAR 39
25178: PUSH
25179: LD_VAR 0 2
25183: ST_TO_ADDR
// vc_control := control ;
25184: LD_ADDR_OWVAR 38
25188: PUSH
25189: LD_VAR 0 3
25193: ST_TO_ADDR
// vc_weapon := weapon ;
25194: LD_ADDR_OWVAR 40
25198: PUSH
25199: LD_VAR 0 4
25203: ST_TO_ADDR
// un := CreateVehicle ;
25204: LD_ADDR_VAR 0 8
25208: PUSH
25209: CALL_OW 45
25213: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25214: LD_VAR 0 8
25218: PPUSH
25219: LD_INT 0
25221: PPUSH
25222: LD_INT 5
25224: PPUSH
25225: CALL_OW 12
25229: PPUSH
25230: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25234: LD_VAR 0 8
25238: PPUSH
25239: LD_VAR 0 5
25243: PPUSH
25244: LD_VAR 0 6
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 48
// end ;
25256: LD_VAR 0 7
25260: RET
// export hInvincible ; every 1 do
25261: GO 25263
25263: DISABLE
// hInvincible := [ ] ;
25264: LD_ADDR_EXP 84
25268: PUSH
25269: EMPTY
25270: ST_TO_ADDR
25271: END
// every 10 do var i ;
25272: GO 25274
25274: DISABLE
25275: LD_INT 0
25277: PPUSH
// begin enable ;
25278: ENABLE
// if not hInvincible then
25279: LD_EXP 84
25283: NOT
25284: IFFALSE 25288
// exit ;
25286: GO 25332
// for i in hInvincible do
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: LD_EXP 84
25297: PUSH
25298: FOR_IN
25299: IFFALSE 25330
// if GetLives ( i ) < 1000 then
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 256
25310: PUSH
25311: LD_INT 1000
25313: LESS
25314: IFFALSE 25328
// SetLives ( i , 1000 ) ;
25316: LD_VAR 0 1
25320: PPUSH
25321: LD_INT 1000
25323: PPUSH
25324: CALL_OW 234
25328: GO 25298
25330: POP
25331: POP
// end ;
25332: PPOPN 1
25334: END
// export function hHackInvincible ; var i ; begin
25335: LD_INT 0
25337: PPUSH
25338: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 21
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 21
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25439
// if IsSelected ( i ) then
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 306
25389: IFFALSE 25437
// begin if i in hInvincible then
25391: LD_VAR 0 2
25395: PUSH
25396: LD_EXP 84
25400: IN
25401: IFFALSE 25421
// hInvincible := hInvincible diff i else
25403: LD_ADDR_EXP 84
25407: PUSH
25408: LD_EXP 84
25412: PUSH
25413: LD_VAR 0 2
25417: DIFF
25418: ST_TO_ADDR
25419: GO 25437
// hInvincible := hInvincible union i ;
25421: LD_ADDR_EXP 84
25425: PUSH
25426: LD_EXP 84
25430: PUSH
25431: LD_VAR 0 2
25435: UNION
25436: ST_TO_ADDR
// end ;
25437: GO 25377
25439: POP
25440: POP
// end ;
25441: LD_VAR 0 1
25445: RET
// export function hHackInvisible ; var i , j ; begin
25446: LD_INT 0
25448: PPUSH
25449: PPUSH
25450: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25451: LD_ADDR_VAR 0 2
25455: PUSH
25456: LD_INT 21
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PPUSH
25466: CALL_OW 69
25470: PUSH
25471: FOR_IN
25472: IFFALSE 25496
// if IsSelected ( i ) then
25474: LD_VAR 0 2
25478: PPUSH
25479: CALL_OW 306
25483: IFFALSE 25494
// ComForceInvisible ( i ) ;
25485: LD_VAR 0 2
25489: PPUSH
25490: CALL_OW 496
25494: GO 25471
25496: POP
25497: POP
// end ;
25498: LD_VAR 0 1
25502: RET
// export function hHackChangeYourSide ; begin
25503: LD_INT 0
25505: PPUSH
// if your_side = 8 then
25506: LD_OWVAR 2
25510: PUSH
25511: LD_INT 8
25513: EQUAL
25514: IFFALSE 25526
// your_side := 0 else
25516: LD_ADDR_OWVAR 2
25520: PUSH
25521: LD_INT 0
25523: ST_TO_ADDR
25524: GO 25540
// your_side := your_side + 1 ;
25526: LD_ADDR_OWVAR 2
25530: PUSH
25531: LD_OWVAR 2
25535: PUSH
25536: LD_INT 1
25538: PLUS
25539: ST_TO_ADDR
// end ;
25540: LD_VAR 0 1
25544: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25545: LD_INT 0
25547: PPUSH
25548: PPUSH
25549: PPUSH
// for i in all_units do
25550: LD_ADDR_VAR 0 2
25554: PUSH
25555: LD_OWVAR 3
25559: PUSH
25560: FOR_IN
25561: IFFALSE 25639
// if IsSelected ( i ) then
25563: LD_VAR 0 2
25567: PPUSH
25568: CALL_OW 306
25572: IFFALSE 25637
// begin j := GetSide ( i ) ;
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_VAR 0 2
25583: PPUSH
25584: CALL_OW 255
25588: ST_TO_ADDR
// if j = 8 then
25589: LD_VAR 0 3
25593: PUSH
25594: LD_INT 8
25596: EQUAL
25597: IFFALSE 25609
// j := 0 else
25599: LD_ADDR_VAR 0 3
25603: PUSH
25604: LD_INT 0
25606: ST_TO_ADDR
25607: GO 25623
// j := j + 1 ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_VAR 0 3
25618: PUSH
25619: LD_INT 1
25621: PLUS
25622: ST_TO_ADDR
// SetSide ( i , j ) ;
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: CALL_OW 235
// end ;
25637: GO 25560
25639: POP
25640: POP
// end ;
25641: LD_VAR 0 1
25645: RET
// export function hHackFog ; begin
25646: LD_INT 0
25648: PPUSH
// FogOff ( true ) ;
25649: LD_INT 1
25651: PPUSH
25652: CALL_OW 344
// end ;
25656: LD_VAR 0 1
25660: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25661: LD_INT 0
25663: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25664: LD_VAR 0 1
25668: PPUSH
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: LD_INT 1
25681: PPUSH
25682: LD_INT 1
25684: PPUSH
25685: CALL_OW 483
// CenterOnXY ( x , y ) ;
25689: LD_VAR 0 2
25693: PPUSH
25694: LD_VAR 0 3
25698: PPUSH
25699: CALL_OW 84
// end ;
25703: LD_VAR 0 4
25707: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25708: LD_INT 0
25710: PPUSH
25711: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25712: LD_VAR 0 1
25716: NOT
25717: PUSH
25718: LD_VAR 0 2
25722: PPUSH
25723: LD_VAR 0 3
25727: PPUSH
25728: CALL_OW 488
25732: NOT
25733: OR
25734: PUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL_OW 266
25744: PUSH
25745: LD_INT 3
25747: NONEQUAL
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 247
25758: PUSH
25759: LD_INT 1
25761: EQUAL
25762: NOT
25763: AND
25764: OR
25765: IFFALSE 25769
// exit ;
25767: GO 25918
// if GetType ( factory ) = unit_human then
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 247
25778: PUSH
25779: LD_INT 1
25781: EQUAL
25782: IFFALSE 25799
// factory := IsInUnit ( factory ) ;
25784: LD_ADDR_VAR 0 1
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 310
25798: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25799: LD_VAR 0 1
25803: PPUSH
25804: CALL_OW 266
25808: PUSH
25809: LD_INT 3
25811: NONEQUAL
25812: IFFALSE 25816
// exit ;
25814: GO 25918
// if HexInfo ( x , y ) = factory then
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 428
25830: PUSH
25831: LD_VAR 0 1
25835: EQUAL
25836: IFFALSE 25863
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25838: LD_ADDR_EXP 85
25842: PUSH
25843: LD_EXP 85
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_INT 0
25855: PPUSH
25856: CALL_OW 1
25860: ST_TO_ADDR
25861: GO 25914
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25863: LD_ADDR_EXP 85
25867: PUSH
25868: LD_EXP 85
25872: PPUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_VAR 0 1
25882: PPUSH
25883: CALL_OW 255
25887: PUSH
25888: LD_VAR 0 1
25892: PUSH
25893: LD_VAR 0 2
25897: PUSH
25898: LD_VAR 0 3
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: PPUSH
25909: CALL_OW 1
25913: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25914: CALL 25923 0 0
// end ;
25918: LD_VAR 0 4
25922: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
25927: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25928: LD_STRING resetFactoryWaypoint();
25930: PPUSH
25931: CALL_OW 559
// if factoryWaypoints then
25935: LD_EXP 85
25939: IFFALSE 26065
// begin list := PrepareArray ( factoryWaypoints ) ;
25941: LD_ADDR_VAR 0 3
25945: PUSH
25946: LD_EXP 85
25950: PPUSH
25951: CALL 73362 0 1
25955: ST_TO_ADDR
// for i := 1 to list do
25956: LD_ADDR_VAR 0 2
25960: PUSH
25961: DOUBLE
25962: LD_INT 1
25964: DEC
25965: ST_TO_ADDR
25966: LD_VAR 0 3
25970: PUSH
25971: FOR_TO
25972: IFFALSE 26063
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25974: LD_STRING setFactoryWaypointXY(
25976: PUSH
25977: LD_VAR 0 3
25981: PUSH
25982: LD_VAR 0 2
25986: ARRAY
25987: PUSH
25988: LD_INT 1
25990: ARRAY
25991: STR
25992: PUSH
25993: LD_STRING ,
25995: STR
25996: PUSH
25997: LD_VAR 0 3
26001: PUSH
26002: LD_VAR 0 2
26006: ARRAY
26007: PUSH
26008: LD_INT 2
26010: ARRAY
26011: STR
26012: PUSH
26013: LD_STRING ,
26015: STR
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: ARRAY
26027: PUSH
26028: LD_INT 3
26030: ARRAY
26031: STR
26032: PUSH
26033: LD_STRING ,
26035: STR
26036: PUSH
26037: LD_VAR 0 3
26041: PUSH
26042: LD_VAR 0 2
26046: ARRAY
26047: PUSH
26048: LD_INT 4
26050: ARRAY
26051: STR
26052: PUSH
26053: LD_STRING )
26055: STR
26056: PPUSH
26057: CALL_OW 559
26061: GO 25971
26063: POP
26064: POP
// end ; end ;
26065: LD_VAR 0 1
26069: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26070: LD_INT 0
26072: PPUSH
// if HexInfo ( x , y ) = warehouse then
26073: LD_VAR 0 2
26077: PPUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: CALL_OW 428
26087: PUSH
26088: LD_VAR 0 1
26092: EQUAL
26093: IFFALSE 26120
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26095: LD_ADDR_EXP 86
26099: PUSH
26100: LD_EXP 86
26104: PPUSH
26105: LD_VAR 0 1
26109: PPUSH
26110: LD_INT 0
26112: PPUSH
26113: CALL_OW 1
26117: ST_TO_ADDR
26118: GO 26171
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26120: LD_ADDR_EXP 86
26124: PUSH
26125: LD_EXP 86
26129: PPUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: LD_VAR 0 1
26139: PPUSH
26140: CALL_OW 255
26144: PUSH
26145: LD_VAR 0 1
26149: PUSH
26150: LD_VAR 0 2
26154: PUSH
26155: LD_VAR 0 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: PPUSH
26166: CALL_OW 1
26170: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26171: CALL 26180 0 0
// end ;
26175: LD_VAR 0 4
26179: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26180: LD_INT 0
26182: PPUSH
26183: PPUSH
26184: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26185: LD_STRING resetWarehouseGatheringPoints();
26187: PPUSH
26188: CALL_OW 559
// if warehouseGatheringPoints then
26192: LD_EXP 86
26196: IFFALSE 26322
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26198: LD_ADDR_VAR 0 3
26202: PUSH
26203: LD_EXP 86
26207: PPUSH
26208: CALL 73362 0 1
26212: ST_TO_ADDR
// for i := 1 to list do
26213: LD_ADDR_VAR 0 2
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_VAR 0 3
26227: PUSH
26228: FOR_TO
26229: IFFALSE 26320
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26231: LD_STRING setWarehouseGatheringPointXY(
26233: PUSH
26234: LD_VAR 0 3
26238: PUSH
26239: LD_VAR 0 2
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: STR
26249: PUSH
26250: LD_STRING ,
26252: STR
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 2
26263: ARRAY
26264: PUSH
26265: LD_INT 2
26267: ARRAY
26268: STR
26269: PUSH
26270: LD_STRING ,
26272: STR
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 2
26283: ARRAY
26284: PUSH
26285: LD_INT 3
26287: ARRAY
26288: STR
26289: PUSH
26290: LD_STRING ,
26292: STR
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 2
26303: ARRAY
26304: PUSH
26305: LD_INT 4
26307: ARRAY
26308: STR
26309: PUSH
26310: LD_STRING )
26312: STR
26313: PPUSH
26314: CALL_OW 559
26318: GO 26228
26320: POP
26321: POP
// end ; end ;
26322: LD_VAR 0 1
26326: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26327: LD_EXP 86
26331: IFFALSE 27016
26333: GO 26335
26335: DISABLE
26336: LD_INT 0
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
// begin enable ;
26347: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_EXP 86
26357: PPUSH
26358: CALL 73362 0 1
26362: ST_TO_ADDR
// if not list then
26363: LD_VAR 0 3
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 27016
// for i := 1 to list do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_VAR 0 3
26386: PUSH
26387: FOR_TO
26388: IFFALSE 27014
// begin depot := list [ i ] [ 2 ] ;
26390: LD_ADDR_VAR 0 8
26394: PUSH
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 1
26404: ARRAY
26405: PUSH
26406: LD_INT 2
26408: ARRAY
26409: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26410: LD_ADDR_VAR 0 5
26414: PUSH
26415: LD_VAR 0 3
26419: PUSH
26420: LD_VAR 0 1
26424: ARRAY
26425: PUSH
26426: LD_INT 1
26428: ARRAY
26429: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26430: LD_VAR 0 8
26434: PPUSH
26435: CALL_OW 301
26439: PUSH
26440: LD_VAR 0 5
26444: PUSH
26445: LD_VAR 0 8
26449: PPUSH
26450: CALL_OW 255
26454: NONEQUAL
26455: OR
26456: IFFALSE 26485
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26458: LD_ADDR_EXP 86
26462: PUSH
26463: LD_EXP 86
26467: PPUSH
26468: LD_VAR 0 8
26472: PPUSH
26473: LD_INT 0
26475: PPUSH
26476: CALL_OW 1
26480: ST_TO_ADDR
// exit ;
26481: POP
26482: POP
26483: GO 27016
// end ; x := list [ i ] [ 3 ] ;
26485: LD_ADDR_VAR 0 6
26489: PUSH
26490: LD_VAR 0 3
26494: PUSH
26495: LD_VAR 0 1
26499: ARRAY
26500: PUSH
26501: LD_INT 3
26503: ARRAY
26504: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26505: LD_ADDR_VAR 0 7
26509: PUSH
26510: LD_VAR 0 3
26514: PUSH
26515: LD_VAR 0 1
26519: ARRAY
26520: PUSH
26521: LD_INT 4
26523: ARRAY
26524: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26525: LD_ADDR_VAR 0 9
26529: PUSH
26530: LD_VAR 0 6
26534: PPUSH
26535: LD_VAR 0 7
26539: PPUSH
26540: LD_INT 16
26542: PPUSH
26543: CALL 71950 0 3
26547: ST_TO_ADDR
// if not cratesNearbyPoint then
26548: LD_VAR 0 9
26552: NOT
26553: IFFALSE 26559
// exit ;
26555: POP
26556: POP
26557: GO 27016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26559: LD_ADDR_VAR 0 4
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_VAR 0 5
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 3
26578: PUSH
26579: LD_INT 60
26581: PUSH
26582: EMPTY
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 91
26591: PUSH
26592: LD_VAR 0 8
26596: PUSH
26597: LD_INT 6
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: PUSH
26608: LD_INT 25
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 25
26620: PUSH
26621: LD_INT 16
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: PPUSH
26639: CALL_OW 69
26643: PUSH
26644: LD_VAR 0 8
26648: PPUSH
26649: CALL_OW 313
26653: PPUSH
26654: LD_INT 3
26656: PUSH
26657: LD_INT 60
26659: PUSH
26660: EMPTY
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 25
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 25
26682: PUSH
26683: LD_INT 16
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 72
26703: UNION
26704: ST_TO_ADDR
// if tmp then
26705: LD_VAR 0 4
26709: IFFALSE 26789
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26711: LD_ADDR_VAR 0 4
26715: PUSH
26716: LD_VAR 0 4
26720: PPUSH
26721: LD_INT 3
26723: PPUSH
26724: CALL 69919 0 2
26728: ST_TO_ADDR
// for j in tmp do
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_VAR 0 4
26738: PUSH
26739: FOR_IN
26740: IFFALSE 26783
// begin if IsInUnit ( j ) then
26742: LD_VAR 0 2
26746: PPUSH
26747: CALL_OW 310
26751: IFFALSE 26762
// ComExit ( j ) ;
26753: LD_VAR 0 2
26757: PPUSH
26758: CALL 70002 0 1
// AddComCollect ( j , x , y ) ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 6
26771: PPUSH
26772: LD_VAR 0 7
26776: PPUSH
26777: CALL_OW 177
// end ;
26781: GO 26739
26783: POP
26784: POP
// exit ;
26785: POP
26786: POP
26787: GO 27016
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26789: LD_ADDR_VAR 0 4
26793: PUSH
26794: LD_INT 22
26796: PUSH
26797: LD_VAR 0 5
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 91
26808: PUSH
26809: LD_VAR 0 8
26813: PUSH
26814: LD_INT 8
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: PUSH
26825: LD_INT 34
26827: PUSH
26828: LD_INT 12
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 34
26837: PUSH
26838: LD_INT 51
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 34
26847: PUSH
26848: LD_INT 32
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 34
26857: PUSH
26858: LD_INT 89
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: ST_TO_ADDR
// if tmp then
26882: LD_VAR 0 4
26886: IFFALSE 27012
// begin for j in tmp do
26888: LD_ADDR_VAR 0 2
26892: PUSH
26893: LD_VAR 0 4
26897: PUSH
26898: FOR_IN
26899: IFFALSE 27010
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26901: LD_VAR 0 2
26905: PPUSH
26906: CALL_OW 262
26910: PUSH
26911: LD_INT 3
26913: EQUAL
26914: PUSH
26915: LD_VAR 0 2
26919: PPUSH
26920: CALL_OW 261
26924: PUSH
26925: LD_INT 20
26927: GREATER
26928: OR
26929: PUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: CALL_OW 314
26939: NOT
26940: AND
26941: PUSH
26942: LD_VAR 0 2
26946: PPUSH
26947: CALL_OW 263
26951: PUSH
26952: LD_INT 1
26954: NONEQUAL
26955: PUSH
26956: LD_VAR 0 2
26960: PPUSH
26961: CALL_OW 311
26965: OR
26966: AND
26967: IFFALSE 27008
// begin ComCollect ( j , x , y ) ;
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_VAR 0 6
26978: PPUSH
26979: LD_VAR 0 7
26983: PPUSH
26984: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26988: LD_VAR 0 2
26992: PPUSH
26993: LD_VAR 0 8
26997: PPUSH
26998: CALL_OW 172
// exit ;
27002: POP
27003: POP
27004: POP
27005: POP
27006: GO 27016
// end ;
27008: GO 26898
27010: POP
27011: POP
// end ; end ;
27012: GO 26387
27014: POP
27015: POP
// end ; end_of_file
27016: PPOPN 9
27018: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27019: LD_INT 0
27021: PPUSH
27022: PPUSH
27023: PPUSH
27024: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL_OW 264
27034: PUSH
27035: LD_INT 91
27037: EQUAL
27038: IFFALSE 27110
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27040: LD_INT 68
27042: PPUSH
27043: LD_VAR 0 1
27047: PPUSH
27048: CALL_OW 255
27052: PPUSH
27053: CALL_OW 321
27057: PUSH
27058: LD_INT 2
27060: EQUAL
27061: IFFALSE 27073
// eff := 70 else
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_INT 70
27070: ST_TO_ADDR
27071: GO 27081
// eff := 30 ;
27073: LD_ADDR_VAR 0 4
27077: PUSH
27078: LD_INT 30
27080: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 250
27090: PPUSH
27091: LD_VAR 0 1
27095: PPUSH
27096: CALL_OW 251
27100: PPUSH
27101: LD_VAR 0 4
27105: PPUSH
27106: CALL_OW 495
// end ; end ;
27110: LD_VAR 0 2
27114: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27115: LD_INT 0
27117: PPUSH
// end ;
27118: LD_VAR 0 4
27122: RET
// export function SOS_Command ( cmd ) ; begin
27123: LD_INT 0
27125: PPUSH
// end ;
27126: LD_VAR 0 2
27130: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27131: LD_INT 0
27133: PPUSH
// end ;
27134: LD_VAR 0 6
27138: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27139: LD_INT 0
27141: PPUSH
27142: PPUSH
// if not vehicle or not factory then
27143: LD_VAR 0 1
27147: NOT
27148: PUSH
27149: LD_VAR 0 2
27153: NOT
27154: OR
27155: IFFALSE 27159
// exit ;
27157: GO 27390
// if factoryWaypoints >= factory then
27159: LD_EXP 85
27163: PUSH
27164: LD_VAR 0 2
27168: GREATEREQUAL
27169: IFFALSE 27390
// if factoryWaypoints [ factory ] then
27171: LD_EXP 85
27175: PUSH
27176: LD_VAR 0 2
27180: ARRAY
27181: IFFALSE 27390
// begin if GetControl ( vehicle ) = control_manual then
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 263
27192: PUSH
27193: LD_INT 1
27195: EQUAL
27196: IFFALSE 27277
// begin driver := IsDrivenBy ( vehicle ) ;
27198: LD_ADDR_VAR 0 4
27202: PUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 311
27212: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27213: LD_VAR 0 4
27217: PPUSH
27218: LD_EXP 85
27222: PUSH
27223: LD_VAR 0 2
27227: ARRAY
27228: PUSH
27229: LD_INT 3
27231: ARRAY
27232: PPUSH
27233: LD_EXP 85
27237: PUSH
27238: LD_VAR 0 2
27242: ARRAY
27243: PUSH
27244: LD_INT 4
27246: ARRAY
27247: PPUSH
27248: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27252: LD_VAR 0 4
27256: PPUSH
27257: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27261: LD_VAR 0 4
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL_OW 180
// end else
27275: GO 27390
// if GetControl ( vehicle ) = control_remote then
27277: LD_VAR 0 1
27281: PPUSH
27282: CALL_OW 263
27286: PUSH
27287: LD_INT 2
27289: EQUAL
27290: IFFALSE 27351
// begin wait ( 0 0$2 ) ;
27292: LD_INT 70
27294: PPUSH
27295: CALL_OW 67
// if Connect ( vehicle ) then
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL 40221 0 1
27308: IFFALSE 27349
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_EXP 85
27319: PUSH
27320: LD_VAR 0 2
27324: ARRAY
27325: PUSH
27326: LD_INT 3
27328: ARRAY
27329: PPUSH
27330: LD_EXP 85
27334: PUSH
27335: LD_VAR 0 2
27339: ARRAY
27340: PUSH
27341: LD_INT 4
27343: ARRAY
27344: PPUSH
27345: CALL_OW 171
// end else
27349: GO 27390
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27351: LD_VAR 0 1
27355: PPUSH
27356: LD_EXP 85
27360: PUSH
27361: LD_VAR 0 2
27365: ARRAY
27366: PUSH
27367: LD_INT 3
27369: ARRAY
27370: PPUSH
27371: LD_EXP 85
27375: PUSH
27376: LD_VAR 0 2
27380: ARRAY
27381: PUSH
27382: LD_INT 4
27384: ARRAY
27385: PPUSH
27386: CALL_OW 171
// end ; end ;
27390: LD_VAR 0 3
27394: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27395: LD_INT 0
27397: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27398: LD_VAR 0 1
27402: PUSH
27403: LD_INT 250
27405: EQUAL
27406: PUSH
27407: LD_VAR 0 2
27411: PPUSH
27412: CALL_OW 264
27416: PUSH
27417: LD_INT 81
27419: EQUAL
27420: AND
27421: IFFALSE 27442
// MinerPlaceMine ( unit , x , y ) ;
27423: LD_VAR 0 2
27427: PPUSH
27428: LD_VAR 0 4
27432: PPUSH
27433: LD_VAR 0 5
27437: PPUSH
27438: CALL 30432 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27442: LD_VAR 0 1
27446: PUSH
27447: LD_INT 251
27449: EQUAL
27450: PUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 264
27460: PUSH
27461: LD_INT 81
27463: EQUAL
27464: AND
27465: IFFALSE 27486
// MinerDetonateMine ( unit , x , y ) ;
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 4
27476: PPUSH
27477: LD_VAR 0 5
27481: PPUSH
27482: CALL 30707 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27486: LD_VAR 0 1
27490: PUSH
27491: LD_INT 252
27493: EQUAL
27494: PUSH
27495: LD_VAR 0 2
27499: PPUSH
27500: CALL_OW 264
27504: PUSH
27505: LD_INT 81
27507: EQUAL
27508: AND
27509: IFFALSE 27530
// MinerCreateMinefield ( unit , x , y ) ;
27511: LD_VAR 0 2
27515: PPUSH
27516: LD_VAR 0 4
27520: PPUSH
27521: LD_VAR 0 5
27525: PPUSH
27526: CALL 31124 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27530: LD_VAR 0 1
27534: PUSH
27535: LD_INT 253
27537: EQUAL
27538: PUSH
27539: LD_VAR 0 2
27543: PPUSH
27544: CALL_OW 257
27548: PUSH
27549: LD_INT 5
27551: EQUAL
27552: AND
27553: IFFALSE 27574
// ComBinocular ( unit , x , y ) ;
27555: LD_VAR 0 2
27559: PPUSH
27560: LD_VAR 0 4
27564: PPUSH
27565: LD_VAR 0 5
27569: PPUSH
27570: CALL 31493 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27574: LD_VAR 0 1
27578: PUSH
27579: LD_INT 254
27581: EQUAL
27582: PUSH
27583: LD_VAR 0 2
27587: PPUSH
27588: CALL_OW 264
27592: PUSH
27593: LD_INT 99
27595: EQUAL
27596: AND
27597: PUSH
27598: LD_VAR 0 3
27602: PPUSH
27603: CALL_OW 263
27607: PUSH
27608: LD_INT 3
27610: EQUAL
27611: AND
27612: IFFALSE 27628
// HackDestroyVehicle ( unit , selectedUnit ) ;
27614: LD_VAR 0 2
27618: PPUSH
27619: LD_VAR 0 3
27623: PPUSH
27624: CALL 29796 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 255
27635: EQUAL
27636: PUSH
27637: LD_VAR 0 2
27641: PPUSH
27642: CALL_OW 264
27646: PUSH
27647: LD_INT 14
27649: PUSH
27650: LD_INT 53
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: IN
27657: AND
27658: PUSH
27659: LD_VAR 0 4
27663: PPUSH
27664: LD_VAR 0 5
27668: PPUSH
27669: CALL_OW 488
27673: AND
27674: IFFALSE 27698
// CutTreeXYR ( unit , x , y , 12 ) ;
27676: LD_VAR 0 2
27680: PPUSH
27681: LD_VAR 0 4
27685: PPUSH
27686: LD_VAR 0 5
27690: PPUSH
27691: LD_INT 12
27693: PPUSH
27694: CALL 27793 0 4
// if cmd = 256 then
27698: LD_VAR 0 1
27702: PUSH
27703: LD_INT 256
27705: EQUAL
27706: IFFALSE 27727
// SetFactoryWaypoint ( unit , x , y ) ;
27708: LD_VAR 0 2
27712: PPUSH
27713: LD_VAR 0 4
27717: PPUSH
27718: LD_VAR 0 5
27722: PPUSH
27723: CALL 25708 0 3
// if cmd = 257 then
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 257
27734: EQUAL
27735: IFFALSE 27756
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27737: LD_VAR 0 2
27741: PPUSH
27742: LD_VAR 0 4
27746: PPUSH
27747: LD_VAR 0 5
27751: PPUSH
27752: CALL 26070 0 3
// if cmd = 258 then
27756: LD_VAR 0 1
27760: PUSH
27761: LD_INT 258
27763: EQUAL
27764: IFFALSE 27788
// BurnTreeXYR ( unit , x , y , 8 ) ;
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_VAR 0 4
27775: PPUSH
27776: LD_VAR 0 5
27780: PPUSH
27781: LD_INT 8
27783: PPUSH
27784: CALL 28187 0 4
// end ;
27788: LD_VAR 0 6
27792: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
27802: PPUSH
27803: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27804: LD_VAR 0 1
27808: PPUSH
27809: CALL_OW 302
27813: NOT
27814: PUSH
27815: LD_VAR 0 2
27819: PPUSH
27820: LD_VAR 0 3
27824: PPUSH
27825: CALL_OW 488
27829: NOT
27830: OR
27831: PUSH
27832: LD_VAR 0 4
27836: NOT
27837: OR
27838: IFFALSE 27842
// exit ;
27840: GO 28182
// list := [ ] ;
27842: LD_ADDR_VAR 0 13
27846: PUSH
27847: EMPTY
27848: ST_TO_ADDR
// if x - r < 0 then
27849: LD_VAR 0 2
27853: PUSH
27854: LD_VAR 0 4
27858: MINUS
27859: PUSH
27860: LD_INT 0
27862: LESS
27863: IFFALSE 27875
// min_x := 0 else
27865: LD_ADDR_VAR 0 7
27869: PUSH
27870: LD_INT 0
27872: ST_TO_ADDR
27873: GO 27891
// min_x := x - r ;
27875: LD_ADDR_VAR 0 7
27879: PUSH
27880: LD_VAR 0 2
27884: PUSH
27885: LD_VAR 0 4
27889: MINUS
27890: ST_TO_ADDR
// if y - r < 0 then
27891: LD_VAR 0 3
27895: PUSH
27896: LD_VAR 0 4
27900: MINUS
27901: PUSH
27902: LD_INT 0
27904: LESS
27905: IFFALSE 27917
// min_y := 0 else
27907: LD_ADDR_VAR 0 8
27911: PUSH
27912: LD_INT 0
27914: ST_TO_ADDR
27915: GO 27933
// min_y := y - r ;
27917: LD_ADDR_VAR 0 8
27921: PUSH
27922: LD_VAR 0 3
27926: PUSH
27927: LD_VAR 0 4
27931: MINUS
27932: ST_TO_ADDR
// max_x := x + r ;
27933: LD_ADDR_VAR 0 9
27937: PUSH
27938: LD_VAR 0 2
27942: PUSH
27943: LD_VAR 0 4
27947: PLUS
27948: ST_TO_ADDR
// max_y := y + r ;
27949: LD_ADDR_VAR 0 10
27953: PUSH
27954: LD_VAR 0 3
27958: PUSH
27959: LD_VAR 0 4
27963: PLUS
27964: ST_TO_ADDR
// for _x = min_x to max_x do
27965: LD_ADDR_VAR 0 11
27969: PUSH
27970: DOUBLE
27971: LD_VAR 0 7
27975: DEC
27976: ST_TO_ADDR
27977: LD_VAR 0 9
27981: PUSH
27982: FOR_TO
27983: IFFALSE 28100
// for _y = min_y to max_y do
27985: LD_ADDR_VAR 0 12
27989: PUSH
27990: DOUBLE
27991: LD_VAR 0 8
27995: DEC
27996: ST_TO_ADDR
27997: LD_VAR 0 10
28001: PUSH
28002: FOR_TO
28003: IFFALSE 28096
// begin if not ValidHex ( _x , _y ) then
28005: LD_VAR 0 11
28009: PPUSH
28010: LD_VAR 0 12
28014: PPUSH
28015: CALL_OW 488
28019: NOT
28020: IFFALSE 28024
// continue ;
28022: GO 28002
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28024: LD_VAR 0 11
28028: PPUSH
28029: LD_VAR 0 12
28033: PPUSH
28034: CALL_OW 351
28038: PUSH
28039: LD_VAR 0 11
28043: PPUSH
28044: LD_VAR 0 12
28048: PPUSH
28049: CALL_OW 554
28053: AND
28054: IFFALSE 28094
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28056: LD_ADDR_VAR 0 13
28060: PUSH
28061: LD_VAR 0 13
28065: PPUSH
28066: LD_VAR 0 13
28070: PUSH
28071: LD_INT 1
28073: PLUS
28074: PPUSH
28075: LD_VAR 0 11
28079: PUSH
28080: LD_VAR 0 12
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PPUSH
28089: CALL_OW 2
28093: ST_TO_ADDR
// end ;
28094: GO 28002
28096: POP
28097: POP
28098: GO 27982
28100: POP
28101: POP
// if not list then
28102: LD_VAR 0 13
28106: NOT
28107: IFFALSE 28111
// exit ;
28109: GO 28182
// for i in list do
28111: LD_ADDR_VAR 0 6
28115: PUSH
28116: LD_VAR 0 13
28120: PUSH
28121: FOR_IN
28122: IFFALSE 28180
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28124: LD_VAR 0 1
28128: PPUSH
28129: LD_STRING M
28131: PUSH
28132: LD_VAR 0 6
28136: PUSH
28137: LD_INT 1
28139: ARRAY
28140: PUSH
28141: LD_VAR 0 6
28145: PUSH
28146: LD_INT 2
28148: ARRAY
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: PPUSH
28174: CALL_OW 447
28178: GO 28121
28180: POP
28181: POP
// end ;
28182: LD_VAR 0 5
28186: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28187: LD_INT 0
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 302
28208: NOT
28209: PUSH
28210: LD_VAR 0 2
28214: PPUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: CALL_OW 488
28224: NOT
28225: OR
28226: PUSH
28227: LD_VAR 0 4
28231: NOT
28232: OR
28233: IFFALSE 28237
// exit ;
28235: GO 28750
// list := [ ] ;
28237: LD_ADDR_VAR 0 13
28241: PUSH
28242: EMPTY
28243: ST_TO_ADDR
// if x - r < 0 then
28244: LD_VAR 0 2
28248: PUSH
28249: LD_VAR 0 4
28253: MINUS
28254: PUSH
28255: LD_INT 0
28257: LESS
28258: IFFALSE 28270
// min_x := 0 else
28260: LD_ADDR_VAR 0 7
28264: PUSH
28265: LD_INT 0
28267: ST_TO_ADDR
28268: GO 28286
// min_x := x - r ;
28270: LD_ADDR_VAR 0 7
28274: PUSH
28275: LD_VAR 0 2
28279: PUSH
28280: LD_VAR 0 4
28284: MINUS
28285: ST_TO_ADDR
// if y - r < 0 then
28286: LD_VAR 0 3
28290: PUSH
28291: LD_VAR 0 4
28295: MINUS
28296: PUSH
28297: LD_INT 0
28299: LESS
28300: IFFALSE 28312
// min_y := 0 else
28302: LD_ADDR_VAR 0 8
28306: PUSH
28307: LD_INT 0
28309: ST_TO_ADDR
28310: GO 28328
// min_y := y - r ;
28312: LD_ADDR_VAR 0 8
28316: PUSH
28317: LD_VAR 0 3
28321: PUSH
28322: LD_VAR 0 4
28326: MINUS
28327: ST_TO_ADDR
// max_x := x + r ;
28328: LD_ADDR_VAR 0 9
28332: PUSH
28333: LD_VAR 0 2
28337: PUSH
28338: LD_VAR 0 4
28342: PLUS
28343: ST_TO_ADDR
// max_y := y + r ;
28344: LD_ADDR_VAR 0 10
28348: PUSH
28349: LD_VAR 0 3
28353: PUSH
28354: LD_VAR 0 4
28358: PLUS
28359: ST_TO_ADDR
// for _x = min_x to max_x do
28360: LD_ADDR_VAR 0 11
28364: PUSH
28365: DOUBLE
28366: LD_VAR 0 7
28370: DEC
28371: ST_TO_ADDR
28372: LD_VAR 0 9
28376: PUSH
28377: FOR_TO
28378: IFFALSE 28495
// for _y = min_y to max_y do
28380: LD_ADDR_VAR 0 12
28384: PUSH
28385: DOUBLE
28386: LD_VAR 0 8
28390: DEC
28391: ST_TO_ADDR
28392: LD_VAR 0 10
28396: PUSH
28397: FOR_TO
28398: IFFALSE 28491
// begin if not ValidHex ( _x , _y ) then
28400: LD_VAR 0 11
28404: PPUSH
28405: LD_VAR 0 12
28409: PPUSH
28410: CALL_OW 488
28414: NOT
28415: IFFALSE 28419
// continue ;
28417: GO 28397
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28419: LD_VAR 0 11
28423: PPUSH
28424: LD_VAR 0 12
28428: PPUSH
28429: CALL_OW 351
28433: PUSH
28434: LD_VAR 0 11
28438: PPUSH
28439: LD_VAR 0 12
28443: PPUSH
28444: CALL_OW 554
28448: AND
28449: IFFALSE 28489
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28451: LD_ADDR_VAR 0 13
28455: PUSH
28456: LD_VAR 0 13
28460: PPUSH
28461: LD_VAR 0 13
28465: PUSH
28466: LD_INT 1
28468: PLUS
28469: PPUSH
28470: LD_VAR 0 11
28474: PUSH
28475: LD_VAR 0 12
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 2
28488: ST_TO_ADDR
// end ;
28489: GO 28397
28491: POP
28492: POP
28493: GO 28377
28495: POP
28496: POP
// if not list then
28497: LD_VAR 0 13
28501: NOT
28502: IFFALSE 28506
// exit ;
28504: GO 28750
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28506: LD_ADDR_VAR 0 13
28510: PUSH
28511: LD_VAR 0 1
28515: PPUSH
28516: LD_VAR 0 13
28520: PPUSH
28521: LD_INT 1
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: CALL 37363 0 4
28531: ST_TO_ADDR
// ComStop ( flame ) ;
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 141
// for i in list do
28541: LD_ADDR_VAR 0 6
28545: PUSH
28546: LD_VAR 0 13
28550: PUSH
28551: FOR_IN
28552: IFFALSE 28583
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28554: LD_VAR 0 1
28558: PPUSH
28559: LD_VAR 0 6
28563: PUSH
28564: LD_INT 1
28566: ARRAY
28567: PPUSH
28568: LD_VAR 0 6
28572: PUSH
28573: LD_INT 2
28575: ARRAY
28576: PPUSH
28577: CALL_OW 176
28581: GO 28551
28583: POP
28584: POP
// repeat wait ( 0 0$1 ) ;
28585: LD_INT 35
28587: PPUSH
28588: CALL_OW 67
// task := GetTaskList ( flame ) ;
28592: LD_ADDR_VAR 0 14
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 437
28606: ST_TO_ADDR
// if not task then
28607: LD_VAR 0 14
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28750
// if task [ 1 ] [ 1 ] <> | then
28616: LD_VAR 0 14
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PUSH
28625: LD_INT 1
28627: ARRAY
28628: PUSH
28629: LD_STRING |
28631: NONEQUAL
28632: IFFALSE 28636
// exit ;
28634: GO 28750
// _x := task [ 1 ] [ 2 ] ;
28636: LD_ADDR_VAR 0 11
28640: PUSH
28641: LD_VAR 0 14
28645: PUSH
28646: LD_INT 1
28648: ARRAY
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28654: LD_ADDR_VAR 0 12
28658: PUSH
28659: LD_VAR 0 14
28663: PUSH
28664: LD_INT 1
28666: ARRAY
28667: PUSH
28668: LD_INT 3
28670: ARRAY
28671: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28672: LD_VAR 0 11
28676: PPUSH
28677: LD_VAR 0 12
28681: PPUSH
28682: CALL_OW 351
28686: NOT
28687: PUSH
28688: LD_VAR 0 11
28692: PPUSH
28693: LD_VAR 0 12
28697: PPUSH
28698: CALL_OW 554
28702: NOT
28703: OR
28704: IFFALSE 28738
// begin task := Delete ( task , 1 ) ;
28706: LD_ADDR_VAR 0 14
28710: PUSH
28711: LD_VAR 0 14
28715: PPUSH
28716: LD_INT 1
28718: PPUSH
28719: CALL_OW 3
28723: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28724: LD_VAR 0 1
28728: PPUSH
28729: LD_VAR 0 14
28733: PPUSH
28734: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 314
28747: NOT
28748: IFFALSE 28585
// end ;
28750: LD_VAR 0 5
28754: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28755: LD_EXP 88
28759: NOT
28760: IFFALSE 28810
28762: GO 28764
28764: DISABLE
// begin initHack := true ;
28765: LD_ADDR_EXP 88
28769: PUSH
28770: LD_INT 1
28772: ST_TO_ADDR
// hackTanks := [ ] ;
28773: LD_ADDR_EXP 89
28777: PUSH
28778: EMPTY
28779: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28780: LD_ADDR_EXP 90
28784: PUSH
28785: EMPTY
28786: ST_TO_ADDR
// hackLimit := 3 ;
28787: LD_ADDR_EXP 91
28791: PUSH
28792: LD_INT 3
28794: ST_TO_ADDR
// hackDist := 12 ;
28795: LD_ADDR_EXP 92
28799: PUSH
28800: LD_INT 12
28802: ST_TO_ADDR
// hackCounter := [ ] ;
28803: LD_ADDR_EXP 93
28807: PUSH
28808: EMPTY
28809: ST_TO_ADDR
// end ;
28810: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28811: LD_EXP 88
28815: PUSH
28816: LD_INT 34
28818: PUSH
28819: LD_INT 99
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 69
28830: AND
28831: IFFALSE 29084
28833: GO 28835
28835: DISABLE
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
// begin enable ;
28840: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28841: LD_ADDR_VAR 0 1
28845: PUSH
28846: LD_INT 34
28848: PUSH
28849: LD_INT 99
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PPUSH
28856: CALL_OW 69
28860: PUSH
28861: FOR_IN
28862: IFFALSE 29082
// begin if not i in hackTanks then
28864: LD_VAR 0 1
28868: PUSH
28869: LD_EXP 89
28873: IN
28874: NOT
28875: IFFALSE 28958
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28877: LD_ADDR_EXP 89
28881: PUSH
28882: LD_EXP 89
28886: PPUSH
28887: LD_EXP 89
28891: PUSH
28892: LD_INT 1
28894: PLUS
28895: PPUSH
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 1
28905: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28906: LD_ADDR_EXP 90
28910: PUSH
28911: LD_EXP 90
28915: PPUSH
28916: LD_EXP 90
28920: PUSH
28921: LD_INT 1
28923: PLUS
28924: PPUSH
28925: EMPTY
28926: PPUSH
28927: CALL_OW 1
28931: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28932: LD_ADDR_EXP 93
28936: PUSH
28937: LD_EXP 93
28941: PPUSH
28942: LD_EXP 93
28946: PUSH
28947: LD_INT 1
28949: PLUS
28950: PPUSH
28951: EMPTY
28952: PPUSH
28953: CALL_OW 1
28957: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 302
28967: NOT
28968: IFFALSE 28981
// begin HackUnlinkAll ( i ) ;
28970: LD_VAR 0 1
28974: PPUSH
28975: CALL 29087 0 1
// continue ;
28979: GO 28861
// end ; HackCheckCapturedStatus ( i ) ;
28981: LD_VAR 0 1
28985: PPUSH
28986: CALL 29530 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28990: LD_ADDR_VAR 0 2
28994: PUSH
28995: LD_INT 81
28997: PUSH
28998: LD_VAR 0 1
29002: PPUSH
29003: CALL_OW 255
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 33
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 91
29024: PUSH
29025: LD_VAR 0 1
29029: PUSH
29030: LD_EXP 92
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 50
29042: PUSH
29043: EMPTY
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: PPUSH
29052: CALL_OW 69
29056: ST_TO_ADDR
// if not tmp then
29057: LD_VAR 0 2
29061: NOT
29062: IFFALSE 29066
// continue ;
29064: GO 28861
// HackLink ( i , tmp ) ;
29066: LD_VAR 0 1
29070: PPUSH
29071: LD_VAR 0 2
29075: PPUSH
29076: CALL 29223 0 2
// end ;
29080: GO 28861
29082: POP
29083: POP
// end ;
29084: PPOPN 2
29086: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29087: LD_INT 0
29089: PPUSH
29090: PPUSH
29091: PPUSH
// if not hack in hackTanks then
29092: LD_VAR 0 1
29096: PUSH
29097: LD_EXP 89
29101: IN
29102: NOT
29103: IFFALSE 29107
// exit ;
29105: GO 29218
// index := GetElementIndex ( hackTanks , hack ) ;
29107: LD_ADDR_VAR 0 4
29111: PUSH
29112: LD_EXP 89
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL 36660 0 2
29126: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29127: LD_EXP 90
29131: PUSH
29132: LD_VAR 0 4
29136: ARRAY
29137: IFFALSE 29218
// begin for i in hackTanksCaptured [ index ] do
29139: LD_ADDR_VAR 0 3
29143: PUSH
29144: LD_EXP 90
29148: PUSH
29149: LD_VAR 0 4
29153: ARRAY
29154: PUSH
29155: FOR_IN
29156: IFFALSE 29182
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29158: LD_VAR 0 3
29162: PUSH
29163: LD_INT 1
29165: ARRAY
29166: PPUSH
29167: LD_VAR 0 3
29171: PUSH
29172: LD_INT 2
29174: ARRAY
29175: PPUSH
29176: CALL_OW 235
29180: GO 29155
29182: POP
29183: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29184: LD_ADDR_EXP 90
29188: PUSH
29189: LD_EXP 90
29193: PPUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: EMPTY
29200: PPUSH
29201: CALL_OW 1
29205: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29206: LD_VAR 0 1
29210: PPUSH
29211: LD_INT 0
29213: PPUSH
29214: CALL_OW 505
// end ; end ;
29218: LD_VAR 0 2
29222: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29223: LD_INT 0
29225: PPUSH
29226: PPUSH
29227: PPUSH
// if not hack in hackTanks or not vehicles then
29228: LD_VAR 0 1
29232: PUSH
29233: LD_EXP 89
29237: IN
29238: NOT
29239: PUSH
29240: LD_VAR 0 2
29244: NOT
29245: OR
29246: IFFALSE 29250
// exit ;
29248: GO 29525
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29250: LD_ADDR_VAR 0 2
29254: PUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: LD_VAR 0 2
29264: PPUSH
29265: LD_INT 1
29267: PPUSH
29268: LD_INT 1
29270: PPUSH
29271: CALL 37310 0 4
29275: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_EXP 89
29285: PPUSH
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL 36660 0 2
29295: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29296: LD_EXP 90
29300: PUSH
29301: LD_VAR 0 5
29305: ARRAY
29306: PUSH
29307: LD_EXP 91
29311: LESS
29312: IFFALSE 29501
// begin for i := 1 to vehicles do
29314: LD_ADDR_VAR 0 4
29318: PUSH
29319: DOUBLE
29320: LD_INT 1
29322: DEC
29323: ST_TO_ADDR
29324: LD_VAR 0 2
29328: PUSH
29329: FOR_TO
29330: IFFALSE 29499
// begin if hackTanksCaptured [ index ] = hackLimit then
29332: LD_EXP 90
29336: PUSH
29337: LD_VAR 0 5
29341: ARRAY
29342: PUSH
29343: LD_EXP 91
29347: EQUAL
29348: IFFALSE 29352
// break ;
29350: GO 29499
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29352: LD_ADDR_EXP 93
29356: PUSH
29357: LD_EXP 93
29361: PPUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: LD_EXP 93
29371: PUSH
29372: LD_VAR 0 5
29376: ARRAY
29377: PUSH
29378: LD_INT 1
29380: PLUS
29381: PPUSH
29382: CALL_OW 1
29386: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29387: LD_ADDR_EXP 90
29391: PUSH
29392: LD_EXP 90
29396: PPUSH
29397: LD_VAR 0 5
29401: PUSH
29402: LD_EXP 90
29406: PUSH
29407: LD_VAR 0 5
29411: ARRAY
29412: PUSH
29413: LD_INT 1
29415: PLUS
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PPUSH
29421: LD_VAR 0 2
29425: PUSH
29426: LD_VAR 0 4
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 2
29436: PUSH
29437: LD_VAR 0 4
29441: ARRAY
29442: PPUSH
29443: CALL_OW 255
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PPUSH
29452: CALL 36875 0 3
29456: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29457: LD_VAR 0 2
29461: PUSH
29462: LD_VAR 0 4
29466: ARRAY
29467: PPUSH
29468: LD_VAR 0 1
29472: PPUSH
29473: CALL_OW 255
29477: PPUSH
29478: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29482: LD_VAR 0 2
29486: PUSH
29487: LD_VAR 0 4
29491: ARRAY
29492: PPUSH
29493: CALL_OW 141
// end ;
29497: GO 29329
29499: POP
29500: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29501: LD_VAR 0 1
29505: PPUSH
29506: LD_EXP 90
29510: PUSH
29511: LD_VAR 0 5
29515: ARRAY
29516: PUSH
29517: LD_INT 0
29519: PLUS
29520: PPUSH
29521: CALL_OW 505
// end ;
29525: LD_VAR 0 3
29529: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29530: LD_INT 0
29532: PPUSH
29533: PPUSH
29534: PPUSH
29535: PPUSH
// if not hack in hackTanks then
29536: LD_VAR 0 1
29540: PUSH
29541: LD_EXP 89
29545: IN
29546: NOT
29547: IFFALSE 29551
// exit ;
29549: GO 29791
// index := GetElementIndex ( hackTanks , hack ) ;
29551: LD_ADDR_VAR 0 4
29555: PUSH
29556: LD_EXP 89
29560: PPUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: CALL 36660 0 2
29570: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29571: LD_ADDR_VAR 0 3
29575: PUSH
29576: DOUBLE
29577: LD_EXP 90
29581: PUSH
29582: LD_VAR 0 4
29586: ARRAY
29587: INC
29588: ST_TO_ADDR
29589: LD_INT 1
29591: PUSH
29592: FOR_DOWNTO
29593: IFFALSE 29765
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29595: LD_ADDR_VAR 0 5
29599: PUSH
29600: LD_EXP 90
29604: PUSH
29605: LD_VAR 0 4
29609: ARRAY
29610: PUSH
29611: LD_VAR 0 3
29615: ARRAY
29616: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29617: LD_VAR 0 5
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: PPUSH
29626: CALL_OW 302
29630: NOT
29631: PUSH
29632: LD_VAR 0 5
29636: PUSH
29637: LD_INT 1
29639: ARRAY
29640: PPUSH
29641: CALL_OW 255
29645: PUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 255
29655: NONEQUAL
29656: OR
29657: IFFALSE 29763
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29659: LD_VAR 0 5
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PPUSH
29668: CALL_OW 305
29672: PUSH
29673: LD_VAR 0 5
29677: PUSH
29678: LD_INT 1
29680: ARRAY
29681: PPUSH
29682: CALL_OW 255
29686: PUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 255
29696: EQUAL
29697: AND
29698: IFFALSE 29722
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29700: LD_VAR 0 5
29704: PUSH
29705: LD_INT 1
29707: ARRAY
29708: PPUSH
29709: LD_VAR 0 5
29713: PUSH
29714: LD_INT 2
29716: ARRAY
29717: PPUSH
29718: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29722: LD_ADDR_EXP 90
29726: PUSH
29727: LD_EXP 90
29731: PPUSH
29732: LD_VAR 0 4
29736: PPUSH
29737: LD_EXP 90
29741: PUSH
29742: LD_VAR 0 4
29746: ARRAY
29747: PPUSH
29748: LD_VAR 0 3
29752: PPUSH
29753: CALL_OW 3
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
// end ; end ;
29763: GO 29592
29765: POP
29766: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_EXP 90
29776: PUSH
29777: LD_VAR 0 4
29781: ARRAY
29782: PUSH
29783: LD_INT 0
29785: PLUS
29786: PPUSH
29787: CALL_OW 505
// end ;
29791: LD_VAR 0 2
29795: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29796: LD_INT 0
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
// if not hack in hackTanks then
29802: LD_VAR 0 1
29806: PUSH
29807: LD_EXP 89
29811: IN
29812: NOT
29813: IFFALSE 29817
// exit ;
29815: GO 29902
// index := GetElementIndex ( hackTanks , hack ) ;
29817: LD_ADDR_VAR 0 5
29821: PUSH
29822: LD_EXP 89
29826: PPUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL 36660 0 2
29836: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29837: LD_ADDR_VAR 0 4
29841: PUSH
29842: DOUBLE
29843: LD_INT 1
29845: DEC
29846: ST_TO_ADDR
29847: LD_EXP 90
29851: PUSH
29852: LD_VAR 0 5
29856: ARRAY
29857: PUSH
29858: FOR_TO
29859: IFFALSE 29900
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29861: LD_EXP 90
29865: PUSH
29866: LD_VAR 0 5
29870: ARRAY
29871: PUSH
29872: LD_VAR 0 4
29876: ARRAY
29877: PUSH
29878: LD_INT 1
29880: ARRAY
29881: PUSH
29882: LD_VAR 0 2
29886: EQUAL
29887: IFFALSE 29898
// KillUnit ( vehicle ) ;
29889: LD_VAR 0 2
29893: PPUSH
29894: CALL_OW 66
29898: GO 29858
29900: POP
29901: POP
// end ;
29902: LD_VAR 0 3
29906: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29907: LD_EXP 94
29911: NOT
29912: IFFALSE 29947
29914: GO 29916
29916: DISABLE
// begin initMiner := true ;
29917: LD_ADDR_EXP 94
29921: PUSH
29922: LD_INT 1
29924: ST_TO_ADDR
// minersList := [ ] ;
29925: LD_ADDR_EXP 95
29929: PUSH
29930: EMPTY
29931: ST_TO_ADDR
// minerMinesList := [ ] ;
29932: LD_ADDR_EXP 96
29936: PUSH
29937: EMPTY
29938: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29939: LD_ADDR_EXP 97
29943: PUSH
29944: LD_INT 5
29946: ST_TO_ADDR
// end ;
29947: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29948: LD_EXP 94
29952: PUSH
29953: LD_INT 34
29955: PUSH
29956: LD_INT 81
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: AND
29968: IFFALSE 30429
29970: GO 29972
29972: DISABLE
29973: LD_INT 0
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
// begin enable ;
29979: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29980: LD_ADDR_VAR 0 1
29984: PUSH
29985: LD_INT 34
29987: PUSH
29988: LD_INT 81
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PPUSH
29995: CALL_OW 69
29999: PUSH
30000: FOR_IN
30001: IFFALSE 30073
// begin if not i in minersList then
30003: LD_VAR 0 1
30007: PUSH
30008: LD_EXP 95
30012: IN
30013: NOT
30014: IFFALSE 30071
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30016: LD_ADDR_EXP 95
30020: PUSH
30021: LD_EXP 95
30025: PPUSH
30026: LD_EXP 95
30030: PUSH
30031: LD_INT 1
30033: PLUS
30034: PPUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 1
30044: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30045: LD_ADDR_EXP 96
30049: PUSH
30050: LD_EXP 96
30054: PPUSH
30055: LD_EXP 96
30059: PUSH
30060: LD_INT 1
30062: PLUS
30063: PPUSH
30064: EMPTY
30065: PPUSH
30066: CALL_OW 1
30070: ST_TO_ADDR
// end end ;
30071: GO 30000
30073: POP
30074: POP
// for i := minerMinesList downto 1 do
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: DOUBLE
30081: LD_EXP 96
30085: INC
30086: ST_TO_ADDR
30087: LD_INT 1
30089: PUSH
30090: FOR_DOWNTO
30091: IFFALSE 30427
// begin if IsLive ( minersList [ i ] ) then
30093: LD_EXP 95
30097: PUSH
30098: LD_VAR 0 1
30102: ARRAY
30103: PPUSH
30104: CALL_OW 300
30108: IFFALSE 30136
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30110: LD_EXP 95
30114: PUSH
30115: LD_VAR 0 1
30119: ARRAY
30120: PPUSH
30121: LD_EXP 96
30125: PUSH
30126: LD_VAR 0 1
30130: ARRAY
30131: PPUSH
30132: CALL_OW 505
// if not minerMinesList [ i ] then
30136: LD_EXP 96
30140: PUSH
30141: LD_VAR 0 1
30145: ARRAY
30146: NOT
30147: IFFALSE 30151
// continue ;
30149: GO 30090
// for j := minerMinesList [ i ] downto 1 do
30151: LD_ADDR_VAR 0 2
30155: PUSH
30156: DOUBLE
30157: LD_EXP 96
30161: PUSH
30162: LD_VAR 0 1
30166: ARRAY
30167: INC
30168: ST_TO_ADDR
30169: LD_INT 1
30171: PUSH
30172: FOR_DOWNTO
30173: IFFALSE 30423
// begin side := GetSide ( minersList [ i ] ) ;
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_EXP 95
30184: PUSH
30185: LD_VAR 0 1
30189: ARRAY
30190: PPUSH
30191: CALL_OW 255
30195: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30196: LD_ADDR_VAR 0 4
30200: PUSH
30201: LD_EXP 96
30205: PUSH
30206: LD_VAR 0 1
30210: ARRAY
30211: PUSH
30212: LD_VAR 0 2
30216: ARRAY
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: LD_EXP 96
30226: PUSH
30227: LD_VAR 0 1
30231: ARRAY
30232: PUSH
30233: LD_VAR 0 2
30237: ARRAY
30238: PUSH
30239: LD_INT 2
30241: ARRAY
30242: PPUSH
30243: CALL_OW 428
30247: ST_TO_ADDR
// if not tmp then
30248: LD_VAR 0 4
30252: NOT
30253: IFFALSE 30257
// continue ;
30255: GO 30172
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30257: LD_VAR 0 4
30261: PUSH
30262: LD_INT 81
30264: PUSH
30265: LD_VAR 0 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PPUSH
30274: CALL_OW 69
30278: IN
30279: PUSH
30280: LD_EXP 96
30284: PUSH
30285: LD_VAR 0 1
30289: ARRAY
30290: PUSH
30291: LD_VAR 0 2
30295: ARRAY
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: PPUSH
30301: LD_EXP 96
30305: PUSH
30306: LD_VAR 0 1
30310: ARRAY
30311: PUSH
30312: LD_VAR 0 2
30316: ARRAY
30317: PUSH
30318: LD_INT 2
30320: ARRAY
30321: PPUSH
30322: CALL_OW 458
30326: AND
30327: IFFALSE 30421
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30329: LD_EXP 96
30333: PUSH
30334: LD_VAR 0 1
30338: ARRAY
30339: PUSH
30340: LD_VAR 0 2
30344: ARRAY
30345: PUSH
30346: LD_INT 1
30348: ARRAY
30349: PPUSH
30350: LD_EXP 96
30354: PUSH
30355: LD_VAR 0 1
30359: ARRAY
30360: PUSH
30361: LD_VAR 0 2
30365: ARRAY
30366: PUSH
30367: LD_INT 2
30369: ARRAY
30370: PPUSH
30371: LD_VAR 0 3
30375: PPUSH
30376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30380: LD_ADDR_EXP 96
30384: PUSH
30385: LD_EXP 96
30389: PPUSH
30390: LD_VAR 0 1
30394: PPUSH
30395: LD_EXP 96
30399: PUSH
30400: LD_VAR 0 1
30404: ARRAY
30405: PPUSH
30406: LD_VAR 0 2
30410: PPUSH
30411: CALL_OW 3
30415: PPUSH
30416: CALL_OW 1
30420: ST_TO_ADDR
// end ; end ;
30421: GO 30172
30423: POP
30424: POP
// end ;
30425: GO 30090
30427: POP
30428: POP
// end ;
30429: PPOPN 4
30431: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
// result := false ;
30436: LD_ADDR_VAR 0 4
30440: PUSH
30441: LD_INT 0
30443: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30444: LD_VAR 0 1
30448: PPUSH
30449: CALL_OW 264
30453: PUSH
30454: LD_INT 81
30456: EQUAL
30457: NOT
30458: IFFALSE 30462
// exit ;
30460: GO 30702
// index := GetElementIndex ( minersList , unit ) ;
30462: LD_ADDR_VAR 0 5
30466: PUSH
30467: LD_EXP 95
30471: PPUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL 36660 0 2
30481: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30482: LD_EXP 96
30486: PUSH
30487: LD_VAR 0 5
30491: ARRAY
30492: PUSH
30493: LD_EXP 97
30497: GREATEREQUAL
30498: IFFALSE 30502
// exit ;
30500: GO 30702
// ComMoveXY ( unit , x , y ) ;
30502: LD_VAR 0 1
30506: PPUSH
30507: LD_VAR 0 2
30511: PPUSH
30512: LD_VAR 0 3
30516: PPUSH
30517: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30521: LD_INT 35
30523: PPUSH
30524: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_VAR 0 2
30537: PPUSH
30538: LD_VAR 0 3
30542: PPUSH
30543: CALL 68401 0 3
30547: NOT
30548: PUSH
30549: LD_VAR 0 1
30553: PPUSH
30554: CALL_OW 314
30558: AND
30559: IFFALSE 30563
// exit ;
30561: GO 30702
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30563: LD_VAR 0 2
30567: PPUSH
30568: LD_VAR 0 3
30572: PPUSH
30573: CALL_OW 428
30577: PUSH
30578: LD_VAR 0 1
30582: EQUAL
30583: PUSH
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 314
30593: NOT
30594: AND
30595: IFFALSE 30521
// PlaySoundXY ( x , y , PlantMine ) ;
30597: LD_VAR 0 2
30601: PPUSH
30602: LD_VAR 0 3
30606: PPUSH
30607: LD_STRING PlantMine
30609: PPUSH
30610: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30614: LD_VAR 0 2
30618: PPUSH
30619: LD_VAR 0 3
30623: PPUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 255
30633: PPUSH
30634: LD_INT 0
30636: PPUSH
30637: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30641: LD_ADDR_EXP 96
30645: PUSH
30646: LD_EXP 96
30650: PPUSH
30651: LD_VAR 0 5
30655: PUSH
30656: LD_EXP 96
30660: PUSH
30661: LD_VAR 0 5
30665: ARRAY
30666: PUSH
30667: LD_INT 1
30669: PLUS
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: LD_VAR 0 2
30679: PUSH
30680: LD_VAR 0 3
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL 36875 0 3
30693: ST_TO_ADDR
// result := true ;
30694: LD_ADDR_VAR 0 4
30698: PUSH
30699: LD_INT 1
30701: ST_TO_ADDR
// end ;
30702: LD_VAR 0 4
30706: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30707: LD_INT 0
30709: PPUSH
30710: PPUSH
30711: PPUSH
// if not unit in minersList then
30712: LD_VAR 0 1
30716: PUSH
30717: LD_EXP 95
30721: IN
30722: NOT
30723: IFFALSE 30727
// exit ;
30725: GO 31119
// index := GetElementIndex ( minersList , unit ) ;
30727: LD_ADDR_VAR 0 6
30731: PUSH
30732: LD_EXP 95
30736: PPUSH
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL 36660 0 2
30746: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30747: LD_ADDR_VAR 0 5
30751: PUSH
30752: DOUBLE
30753: LD_EXP 96
30757: PUSH
30758: LD_VAR 0 6
30762: ARRAY
30763: INC
30764: ST_TO_ADDR
30765: LD_INT 1
30767: PUSH
30768: FOR_DOWNTO
30769: IFFALSE 30930
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30771: LD_EXP 96
30775: PUSH
30776: LD_VAR 0 6
30780: ARRAY
30781: PUSH
30782: LD_VAR 0 5
30786: ARRAY
30787: PUSH
30788: LD_INT 1
30790: ARRAY
30791: PUSH
30792: LD_VAR 0 2
30796: EQUAL
30797: PUSH
30798: LD_EXP 96
30802: PUSH
30803: LD_VAR 0 6
30807: ARRAY
30808: PUSH
30809: LD_VAR 0 5
30813: ARRAY
30814: PUSH
30815: LD_INT 2
30817: ARRAY
30818: PUSH
30819: LD_VAR 0 3
30823: EQUAL
30824: AND
30825: IFFALSE 30928
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30827: LD_EXP 96
30831: PUSH
30832: LD_VAR 0 6
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 5
30842: ARRAY
30843: PUSH
30844: LD_INT 1
30846: ARRAY
30847: PPUSH
30848: LD_EXP 96
30852: PUSH
30853: LD_VAR 0 6
30857: ARRAY
30858: PUSH
30859: LD_VAR 0 5
30863: ARRAY
30864: PUSH
30865: LD_INT 2
30867: ARRAY
30868: PPUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 255
30878: PPUSH
30879: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30883: LD_ADDR_EXP 96
30887: PUSH
30888: LD_EXP 96
30892: PPUSH
30893: LD_VAR 0 6
30897: PPUSH
30898: LD_EXP 96
30902: PUSH
30903: LD_VAR 0 6
30907: ARRAY
30908: PPUSH
30909: LD_VAR 0 5
30913: PPUSH
30914: CALL_OW 3
30918: PPUSH
30919: CALL_OW 1
30923: ST_TO_ADDR
// exit ;
30924: POP
30925: POP
30926: GO 31119
// end ; end ;
30928: GO 30768
30930: POP
30931: POP
// for i := minerMinesList [ index ] downto 1 do
30932: LD_ADDR_VAR 0 5
30936: PUSH
30937: DOUBLE
30938: LD_EXP 96
30942: PUSH
30943: LD_VAR 0 6
30947: ARRAY
30948: INC
30949: ST_TO_ADDR
30950: LD_INT 1
30952: PUSH
30953: FOR_DOWNTO
30954: IFFALSE 31117
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30956: LD_EXP 96
30960: PUSH
30961: LD_VAR 0 6
30965: ARRAY
30966: PUSH
30967: LD_VAR 0 5
30971: ARRAY
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: LD_EXP 96
30981: PUSH
30982: LD_VAR 0 6
30986: ARRAY
30987: PUSH
30988: LD_VAR 0 5
30992: ARRAY
30993: PUSH
30994: LD_INT 2
30996: ARRAY
30997: PPUSH
30998: LD_VAR 0 2
31002: PPUSH
31003: LD_VAR 0 3
31007: PPUSH
31008: CALL_OW 298
31012: PUSH
31013: LD_INT 6
31015: LESS
31016: IFFALSE 31115
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31018: LD_EXP 96
31022: PUSH
31023: LD_VAR 0 6
31027: ARRAY
31028: PUSH
31029: LD_VAR 0 5
31033: ARRAY
31034: PUSH
31035: LD_INT 1
31037: ARRAY
31038: PPUSH
31039: LD_EXP 96
31043: PUSH
31044: LD_VAR 0 6
31048: ARRAY
31049: PUSH
31050: LD_VAR 0 5
31054: ARRAY
31055: PUSH
31056: LD_INT 2
31058: ARRAY
31059: PPUSH
31060: LD_VAR 0 1
31064: PPUSH
31065: CALL_OW 255
31069: PPUSH
31070: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31074: LD_ADDR_EXP 96
31078: PUSH
31079: LD_EXP 96
31083: PPUSH
31084: LD_VAR 0 6
31088: PPUSH
31089: LD_EXP 96
31093: PUSH
31094: LD_VAR 0 6
31098: ARRAY
31099: PPUSH
31100: LD_VAR 0 5
31104: PPUSH
31105: CALL_OW 3
31109: PPUSH
31110: CALL_OW 1
31114: ST_TO_ADDR
// end ; end ;
31115: GO 30953
31117: POP
31118: POP
// end ;
31119: LD_VAR 0 4
31123: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
31132: PPUSH
31133: PPUSH
31134: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31135: LD_VAR 0 1
31139: PPUSH
31140: CALL_OW 264
31144: PUSH
31145: LD_INT 81
31147: EQUAL
31148: NOT
31149: PUSH
31150: LD_VAR 0 1
31154: PUSH
31155: LD_EXP 95
31159: IN
31160: NOT
31161: OR
31162: IFFALSE 31166
// exit ;
31164: GO 31488
// index := GetElementIndex ( minersList , unit ) ;
31166: LD_ADDR_VAR 0 6
31170: PUSH
31171: LD_EXP 95
31175: PPUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL 36660 0 2
31185: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31186: LD_ADDR_VAR 0 8
31190: PUSH
31191: LD_EXP 97
31195: PUSH
31196: LD_EXP 96
31200: PUSH
31201: LD_VAR 0 6
31205: ARRAY
31206: MINUS
31207: ST_TO_ADDR
// if not minesFreeAmount then
31208: LD_VAR 0 8
31212: NOT
31213: IFFALSE 31217
// exit ;
31215: GO 31488
// tmp := [ ] ;
31217: LD_ADDR_VAR 0 7
31221: PUSH
31222: EMPTY
31223: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31224: LD_ADDR_VAR 0 5
31228: PUSH
31229: DOUBLE
31230: LD_INT 1
31232: DEC
31233: ST_TO_ADDR
31234: LD_VAR 0 8
31238: PUSH
31239: FOR_TO
31240: IFFALSE 31435
// begin _d := rand ( 0 , 5 ) ;
31242: LD_ADDR_VAR 0 11
31246: PUSH
31247: LD_INT 0
31249: PPUSH
31250: LD_INT 5
31252: PPUSH
31253: CALL_OW 12
31257: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31258: LD_ADDR_VAR 0 12
31262: PUSH
31263: LD_INT 2
31265: PPUSH
31266: LD_INT 6
31268: PPUSH
31269: CALL_OW 12
31273: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31274: LD_ADDR_VAR 0 9
31278: PUSH
31279: LD_VAR 0 2
31283: PPUSH
31284: LD_VAR 0 11
31288: PPUSH
31289: LD_VAR 0 12
31293: PPUSH
31294: CALL_OW 272
31298: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31299: LD_ADDR_VAR 0 10
31303: PUSH
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_VAR 0 11
31313: PPUSH
31314: LD_VAR 0 12
31318: PPUSH
31319: CALL_OW 273
31323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31324: LD_VAR 0 9
31328: PPUSH
31329: LD_VAR 0 10
31333: PPUSH
31334: CALL_OW 488
31338: PUSH
31339: LD_VAR 0 9
31343: PUSH
31344: LD_VAR 0 10
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_VAR 0 7
31357: IN
31358: NOT
31359: AND
31360: PUSH
31361: LD_VAR 0 9
31365: PPUSH
31366: LD_VAR 0 10
31370: PPUSH
31371: CALL_OW 458
31375: NOT
31376: AND
31377: IFFALSE 31419
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31379: LD_ADDR_VAR 0 7
31383: PUSH
31384: LD_VAR 0 7
31388: PPUSH
31389: LD_VAR 0 7
31393: PUSH
31394: LD_INT 1
31396: PLUS
31397: PPUSH
31398: LD_VAR 0 9
31402: PUSH
31403: LD_VAR 0 10
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 1
31416: ST_TO_ADDR
31417: GO 31433
// i := i - 1 ;
31419: LD_ADDR_VAR 0 5
31423: PUSH
31424: LD_VAR 0 5
31428: PUSH
31429: LD_INT 1
31431: MINUS
31432: ST_TO_ADDR
// end ;
31433: GO 31239
31435: POP
31436: POP
// for i in tmp do
31437: LD_ADDR_VAR 0 5
31441: PUSH
31442: LD_VAR 0 7
31446: PUSH
31447: FOR_IN
31448: IFFALSE 31486
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31450: LD_VAR 0 1
31454: PPUSH
31455: LD_VAR 0 5
31459: PUSH
31460: LD_INT 1
31462: ARRAY
31463: PPUSH
31464: LD_VAR 0 5
31468: PUSH
31469: LD_INT 2
31471: ARRAY
31472: PPUSH
31473: CALL 30432 0 3
31477: NOT
31478: IFFALSE 31484
// exit ;
31480: POP
31481: POP
31482: GO 31488
31484: GO 31447
31486: POP
31487: POP
// end ;
31488: LD_VAR 0 4
31492: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31493: LD_INT 0
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
// if not GetClass ( unit ) = class_sniper then
31502: LD_VAR 0 1
31506: PPUSH
31507: CALL_OW 257
31511: PUSH
31512: LD_INT 5
31514: EQUAL
31515: NOT
31516: IFFALSE 31520
// exit ;
31518: GO 31908
// dist := 8 ;
31520: LD_ADDR_VAR 0 5
31524: PUSH
31525: LD_INT 8
31527: ST_TO_ADDR
// viewRange := 12 ;
31528: LD_ADDR_VAR 0 7
31532: PUSH
31533: LD_INT 12
31535: ST_TO_ADDR
// side := GetSide ( unit ) ;
31536: LD_ADDR_VAR 0 6
31540: PUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 255
31550: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31551: LD_INT 61
31553: PPUSH
31554: LD_VAR 0 6
31558: PPUSH
31559: CALL_OW 321
31563: PUSH
31564: LD_INT 2
31566: EQUAL
31567: IFFALSE 31577
// viewRange := 16 ;
31569: LD_ADDR_VAR 0 7
31573: PUSH
31574: LD_INT 16
31576: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31577: LD_VAR 0 1
31581: PPUSH
31582: LD_VAR 0 2
31586: PPUSH
31587: LD_VAR 0 3
31591: PPUSH
31592: CALL_OW 297
31596: PUSH
31597: LD_VAR 0 5
31601: GREATER
31602: IFFALSE 31681
// begin ComMoveXY ( unit , x , y ) ;
31604: LD_VAR 0 1
31608: PPUSH
31609: LD_VAR 0 2
31613: PPUSH
31614: LD_VAR 0 3
31618: PPUSH
31619: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31623: LD_INT 35
31625: PPUSH
31626: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31630: LD_VAR 0 1
31634: PPUSH
31635: LD_VAR 0 2
31639: PPUSH
31640: LD_VAR 0 3
31644: PPUSH
31645: CALL 68401 0 3
31649: NOT
31650: IFFALSE 31654
// exit ;
31652: GO 31908
// until GetDistUnitXY ( unit , x , y ) < dist ;
31654: LD_VAR 0 1
31658: PPUSH
31659: LD_VAR 0 2
31663: PPUSH
31664: LD_VAR 0 3
31668: PPUSH
31669: CALL_OW 297
31673: PUSH
31674: LD_VAR 0 5
31678: LESS
31679: IFFALSE 31623
// end ; ComTurnXY ( unit , x , y ) ;
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_VAR 0 2
31690: PPUSH
31691: LD_VAR 0 3
31695: PPUSH
31696: CALL_OW 118
// wait ( 5 ) ;
31700: LD_INT 5
31702: PPUSH
31703: CALL_OW 67
// _d := GetDir ( unit ) ;
31707: LD_ADDR_VAR 0 10
31711: PUSH
31712: LD_VAR 0 1
31716: PPUSH
31717: CALL_OW 254
31721: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31722: LD_ADDR_VAR 0 8
31726: PUSH
31727: LD_VAR 0 1
31731: PPUSH
31732: CALL_OW 250
31736: PPUSH
31737: LD_VAR 0 10
31741: PPUSH
31742: LD_VAR 0 5
31746: PPUSH
31747: CALL_OW 272
31751: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31752: LD_ADDR_VAR 0 9
31756: PUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 251
31766: PPUSH
31767: LD_VAR 0 10
31771: PPUSH
31772: LD_VAR 0 5
31776: PPUSH
31777: CALL_OW 273
31781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31782: LD_VAR 0 8
31786: PPUSH
31787: LD_VAR 0 9
31791: PPUSH
31792: CALL_OW 488
31796: NOT
31797: IFFALSE 31801
// exit ;
31799: GO 31908
// ComAnimCustom ( unit , 1 ) ;
31801: LD_VAR 0 1
31805: PPUSH
31806: LD_INT 1
31808: PPUSH
31809: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31813: LD_VAR 0 8
31817: PPUSH
31818: LD_VAR 0 9
31822: PPUSH
31823: LD_VAR 0 6
31827: PPUSH
31828: LD_VAR 0 7
31832: PPUSH
31833: CALL_OW 330
// repeat wait ( 1 ) ;
31837: LD_INT 1
31839: PPUSH
31840: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 316
31853: PUSH
31854: LD_VAR 0 1
31858: PPUSH
31859: CALL_OW 314
31863: OR
31864: PUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: CALL_OW 302
31874: NOT
31875: OR
31876: PUSH
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 301
31886: OR
31887: IFFALSE 31837
// RemoveSeeing ( _x , _y , side ) ;
31889: LD_VAR 0 8
31893: PPUSH
31894: LD_VAR 0 9
31898: PPUSH
31899: LD_VAR 0 6
31903: PPUSH
31904: CALL_OW 331
// end ; end_of_file
31908: LD_VAR 0 4
31912: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31913: LD_INT 0
31915: PPUSH
31916: PPUSH
// if exist_mode then
31917: LD_VAR 0 2
31921: IFFALSE 31946
// unit := CreateCharacter ( prefix & ident ) else
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: LD_VAR 0 3
31932: PUSH
31933: LD_VAR 0 1
31937: STR
31938: PPUSH
31939: CALL_OW 34
31943: ST_TO_ADDR
31944: GO 31961
// unit := NewCharacter ( ident ) ;
31946: LD_ADDR_VAR 0 5
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 25
31960: ST_TO_ADDR
// result := unit ;
31961: LD_ADDR_VAR 0 4
31965: PUSH
31966: LD_VAR 0 5
31970: ST_TO_ADDR
// end ;
31971: LD_VAR 0 4
31975: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31976: LD_INT 0
31978: PPUSH
31979: PPUSH
// if not side or not nation then
31980: LD_VAR 0 1
31984: NOT
31985: PUSH
31986: LD_VAR 0 2
31990: NOT
31991: OR
31992: IFFALSE 31996
// exit ;
31994: GO 32764
// case nation of nation_american :
31996: LD_VAR 0 2
32000: PUSH
32001: LD_INT 1
32003: DOUBLE
32004: EQUAL
32005: IFTRUE 32009
32007: GO 32223
32009: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32010: LD_ADDR_VAR 0 4
32014: PUSH
32015: LD_INT 35
32017: PUSH
32018: LD_INT 45
32020: PUSH
32021: LD_INT 46
32023: PUSH
32024: LD_INT 47
32026: PUSH
32027: LD_INT 82
32029: PUSH
32030: LD_INT 83
32032: PUSH
32033: LD_INT 84
32035: PUSH
32036: LD_INT 85
32038: PUSH
32039: LD_INT 86
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 6
32050: PUSH
32051: LD_INT 15
32053: PUSH
32054: LD_INT 16
32056: PUSH
32057: LD_INT 7
32059: PUSH
32060: LD_INT 12
32062: PUSH
32063: LD_INT 13
32065: PUSH
32066: LD_INT 10
32068: PUSH
32069: LD_INT 14
32071: PUSH
32072: LD_INT 20
32074: PUSH
32075: LD_INT 21
32077: PUSH
32078: LD_INT 22
32080: PUSH
32081: LD_INT 25
32083: PUSH
32084: LD_INT 32
32086: PUSH
32087: LD_INT 27
32089: PUSH
32090: LD_INT 36
32092: PUSH
32093: LD_INT 69
32095: PUSH
32096: LD_INT 39
32098: PUSH
32099: LD_INT 34
32101: PUSH
32102: LD_INT 40
32104: PUSH
32105: LD_INT 48
32107: PUSH
32108: LD_INT 49
32110: PUSH
32111: LD_INT 50
32113: PUSH
32114: LD_INT 51
32116: PUSH
32117: LD_INT 52
32119: PUSH
32120: LD_INT 53
32122: PUSH
32123: LD_INT 54
32125: PUSH
32126: LD_INT 55
32128: PUSH
32129: LD_INT 56
32131: PUSH
32132: LD_INT 57
32134: PUSH
32135: LD_INT 58
32137: PUSH
32138: LD_INT 59
32140: PUSH
32141: LD_INT 60
32143: PUSH
32144: LD_INT 61
32146: PUSH
32147: LD_INT 62
32149: PUSH
32150: LD_INT 80
32152: PUSH
32153: LD_INT 82
32155: PUSH
32156: LD_INT 83
32158: PUSH
32159: LD_INT 84
32161: PUSH
32162: LD_INT 85
32164: PUSH
32165: LD_INT 86
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
32221: GO 32688
32223: LD_INT 2
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32457
32231: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32232: LD_ADDR_VAR 0 4
32236: PUSH
32237: LD_INT 35
32239: PUSH
32240: LD_INT 45
32242: PUSH
32243: LD_INT 46
32245: PUSH
32246: LD_INT 47
32248: PUSH
32249: LD_INT 82
32251: PUSH
32252: LD_INT 83
32254: PUSH
32255: LD_INT 84
32257: PUSH
32258: LD_INT 85
32260: PUSH
32261: LD_INT 87
32263: PUSH
32264: LD_INT 70
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 11
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 4
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: LD_INT 6
32284: PUSH
32285: LD_INT 15
32287: PUSH
32288: LD_INT 18
32290: PUSH
32291: LD_INT 7
32293: PUSH
32294: LD_INT 17
32296: PUSH
32297: LD_INT 8
32299: PUSH
32300: LD_INT 20
32302: PUSH
32303: LD_INT 21
32305: PUSH
32306: LD_INT 22
32308: PUSH
32309: LD_INT 72
32311: PUSH
32312: LD_INT 26
32314: PUSH
32315: LD_INT 69
32317: PUSH
32318: LD_INT 39
32320: PUSH
32321: LD_INT 40
32323: PUSH
32324: LD_INT 41
32326: PUSH
32327: LD_INT 42
32329: PUSH
32330: LD_INT 43
32332: PUSH
32333: LD_INT 48
32335: PUSH
32336: LD_INT 49
32338: PUSH
32339: LD_INT 50
32341: PUSH
32342: LD_INT 51
32344: PUSH
32345: LD_INT 52
32347: PUSH
32348: LD_INT 53
32350: PUSH
32351: LD_INT 54
32353: PUSH
32354: LD_INT 55
32356: PUSH
32357: LD_INT 56
32359: PUSH
32360: LD_INT 60
32362: PUSH
32363: LD_INT 61
32365: PUSH
32366: LD_INT 62
32368: PUSH
32369: LD_INT 66
32371: PUSH
32372: LD_INT 67
32374: PUSH
32375: LD_INT 68
32377: PUSH
32378: LD_INT 81
32380: PUSH
32381: LD_INT 82
32383: PUSH
32384: LD_INT 83
32386: PUSH
32387: LD_INT 84
32389: PUSH
32390: LD_INT 85
32392: PUSH
32393: LD_INT 87
32395: PUSH
32396: LD_INT 88
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: ST_TO_ADDR
32455: GO 32688
32457: LD_INT 3
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32687
32465: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32466: LD_ADDR_VAR 0 4
32470: PUSH
32471: LD_INT 46
32473: PUSH
32474: LD_INT 47
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 82
32485: PUSH
32486: LD_INT 83
32488: PUSH
32489: LD_INT 84
32491: PUSH
32492: LD_INT 85
32494: PUSH
32495: LD_INT 86
32497: PUSH
32498: LD_INT 11
32500: PUSH
32501: LD_INT 9
32503: PUSH
32504: LD_INT 20
32506: PUSH
32507: LD_INT 19
32509: PUSH
32510: LD_INT 21
32512: PUSH
32513: LD_INT 24
32515: PUSH
32516: LD_INT 22
32518: PUSH
32519: LD_INT 25
32521: PUSH
32522: LD_INT 28
32524: PUSH
32525: LD_INT 29
32527: PUSH
32528: LD_INT 30
32530: PUSH
32531: LD_INT 31
32533: PUSH
32534: LD_INT 37
32536: PUSH
32537: LD_INT 38
32539: PUSH
32540: LD_INT 32
32542: PUSH
32543: LD_INT 27
32545: PUSH
32546: LD_INT 33
32548: PUSH
32549: LD_INT 69
32551: PUSH
32552: LD_INT 39
32554: PUSH
32555: LD_INT 34
32557: PUSH
32558: LD_INT 40
32560: PUSH
32561: LD_INT 71
32563: PUSH
32564: LD_INT 23
32566: PUSH
32567: LD_INT 44
32569: PUSH
32570: LD_INT 48
32572: PUSH
32573: LD_INT 49
32575: PUSH
32576: LD_INT 50
32578: PUSH
32579: LD_INT 51
32581: PUSH
32582: LD_INT 52
32584: PUSH
32585: LD_INT 53
32587: PUSH
32588: LD_INT 54
32590: PUSH
32591: LD_INT 55
32593: PUSH
32594: LD_INT 56
32596: PUSH
32597: LD_INT 57
32599: PUSH
32600: LD_INT 58
32602: PUSH
32603: LD_INT 59
32605: PUSH
32606: LD_INT 63
32608: PUSH
32609: LD_INT 64
32611: PUSH
32612: LD_INT 65
32614: PUSH
32615: LD_INT 82
32617: PUSH
32618: LD_INT 83
32620: PUSH
32621: LD_INT 84
32623: PUSH
32624: LD_INT 85
32626: PUSH
32627: LD_INT 86
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
32685: GO 32688
32687: POP
// if state > - 1 and state < 3 then
32688: LD_VAR 0 3
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: GREATER
32697: PUSH
32698: LD_VAR 0 3
32702: PUSH
32703: LD_INT 3
32705: LESS
32706: AND
32707: IFFALSE 32764
// for i in result do
32709: LD_ADDR_VAR 0 5
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: FOR_IN
32720: IFFALSE 32762
// if GetTech ( i , side ) <> state then
32722: LD_VAR 0 5
32726: PPUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 321
32736: PUSH
32737: LD_VAR 0 3
32741: NONEQUAL
32742: IFFALSE 32760
// result := result diff i ;
32744: LD_ADDR_VAR 0 4
32748: PUSH
32749: LD_VAR 0 4
32753: PUSH
32754: LD_VAR 0 5
32758: DIFF
32759: ST_TO_ADDR
32760: GO 32719
32762: POP
32763: POP
// end ;
32764: LD_VAR 0 4
32768: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32769: LD_INT 0
32771: PPUSH
32772: PPUSH
32773: PPUSH
// result := true ;
32774: LD_ADDR_VAR 0 3
32778: PUSH
32779: LD_INT 1
32781: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32782: LD_ADDR_VAR 0 5
32786: PUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: CALL_OW 480
32796: ST_TO_ADDR
// if not tmp then
32797: LD_VAR 0 5
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 32855
// for i in tmp do
32806: LD_ADDR_VAR 0 4
32810: PUSH
32811: LD_VAR 0 5
32815: PUSH
32816: FOR_IN
32817: IFFALSE 32853
// if GetTech ( i , side ) <> state_researched then
32819: LD_VAR 0 4
32823: PPUSH
32824: LD_VAR 0 1
32828: PPUSH
32829: CALL_OW 321
32833: PUSH
32834: LD_INT 2
32836: NONEQUAL
32837: IFFALSE 32851
// begin result := false ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_INT 0
32846: ST_TO_ADDR
// exit ;
32847: POP
32848: POP
32849: GO 32855
// end ;
32851: GO 32816
32853: POP
32854: POP
// end ;
32855: LD_VAR 0 3
32859: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
32874: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32875: LD_VAR 0 1
32879: NOT
32880: PUSH
32881: LD_VAR 0 1
32885: PPUSH
32886: CALL_OW 257
32890: PUSH
32891: LD_INT 9
32893: NONEQUAL
32894: OR
32895: IFFALSE 32899
// exit ;
32897: GO 33472
// side := GetSide ( unit ) ;
32899: LD_ADDR_VAR 0 9
32903: PUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 255
32913: ST_TO_ADDR
// tech_space := tech_spacanom ;
32914: LD_ADDR_VAR 0 12
32918: PUSH
32919: LD_INT 29
32921: ST_TO_ADDR
// tech_time := tech_taurad ;
32922: LD_ADDR_VAR 0 13
32926: PUSH
32927: LD_INT 28
32929: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32930: LD_ADDR_VAR 0 11
32934: PUSH
32935: LD_VAR 0 1
32939: PPUSH
32940: CALL_OW 310
32944: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32945: LD_VAR 0 11
32949: PPUSH
32950: CALL_OW 247
32954: PUSH
32955: LD_INT 2
32957: EQUAL
32958: IFFALSE 32962
// exit ;
32960: GO 33472
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32962: LD_ADDR_VAR 0 8
32966: PUSH
32967: LD_INT 81
32969: PUSH
32970: LD_VAR 0 9
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 3
32981: PUSH
32982: LD_INT 21
32984: PUSH
32985: LD_INT 3
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PPUSH
33000: CALL_OW 69
33004: ST_TO_ADDR
// if not tmp then
33005: LD_VAR 0 8
33009: NOT
33010: IFFALSE 33014
// exit ;
33012: GO 33472
// if in_unit then
33014: LD_VAR 0 11
33018: IFFALSE 33042
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33020: LD_ADDR_VAR 0 10
33024: PUSH
33025: LD_VAR 0 8
33029: PPUSH
33030: LD_VAR 0 11
33034: PPUSH
33035: CALL_OW 74
33039: ST_TO_ADDR
33040: GO 33062
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33042: LD_ADDR_VAR 0 10
33046: PUSH
33047: LD_VAR 0 8
33051: PPUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 74
33061: ST_TO_ADDR
// if not enemy then
33062: LD_VAR 0 10
33066: NOT
33067: IFFALSE 33071
// exit ;
33069: GO 33472
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33071: LD_VAR 0 11
33075: PUSH
33076: LD_VAR 0 11
33080: PPUSH
33081: LD_VAR 0 10
33085: PPUSH
33086: CALL_OW 296
33090: PUSH
33091: LD_INT 13
33093: GREATER
33094: AND
33095: PUSH
33096: LD_VAR 0 1
33100: PPUSH
33101: LD_VAR 0 10
33105: PPUSH
33106: CALL_OW 296
33110: PUSH
33111: LD_INT 12
33113: GREATER
33114: OR
33115: IFFALSE 33119
// exit ;
33117: GO 33472
// missile := [ 1 ] ;
33119: LD_ADDR_VAR 0 14
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33130: LD_VAR 0 9
33134: PPUSH
33135: LD_VAR 0 12
33139: PPUSH
33140: CALL_OW 325
33144: IFFALSE 33173
// missile := Replace ( missile , missile + 1 , 2 ) ;
33146: LD_ADDR_VAR 0 14
33150: PUSH
33151: LD_VAR 0 14
33155: PPUSH
33156: LD_VAR 0 14
33160: PUSH
33161: LD_INT 1
33163: PLUS
33164: PPUSH
33165: LD_INT 2
33167: PPUSH
33168: CALL_OW 1
33172: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33173: LD_VAR 0 9
33177: PPUSH
33178: LD_VAR 0 13
33182: PPUSH
33183: CALL_OW 325
33187: PUSH
33188: LD_VAR 0 10
33192: PPUSH
33193: CALL_OW 255
33197: PPUSH
33198: LD_VAR 0 13
33202: PPUSH
33203: CALL_OW 325
33207: NOT
33208: AND
33209: IFFALSE 33238
// missile := Replace ( missile , missile + 1 , 3 ) ;
33211: LD_ADDR_VAR 0 14
33215: PUSH
33216: LD_VAR 0 14
33220: PPUSH
33221: LD_VAR 0 14
33225: PUSH
33226: LD_INT 1
33228: PLUS
33229: PPUSH
33230: LD_INT 3
33232: PPUSH
33233: CALL_OW 1
33237: ST_TO_ADDR
// if missile < 2 then
33238: LD_VAR 0 14
33242: PUSH
33243: LD_INT 2
33245: LESS
33246: IFFALSE 33250
// exit ;
33248: GO 33472
// x := GetX ( enemy ) ;
33250: LD_ADDR_VAR 0 4
33254: PUSH
33255: LD_VAR 0 10
33259: PPUSH
33260: CALL_OW 250
33264: ST_TO_ADDR
// y := GetY ( enemy ) ;
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: LD_VAR 0 10
33274: PPUSH
33275: CALL_OW 251
33279: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33280: LD_ADDR_VAR 0 6
33284: PUSH
33285: LD_VAR 0 4
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PPUSH
33294: LD_INT 1
33296: PPUSH
33297: CALL_OW 12
33301: PLUS
33302: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33303: LD_ADDR_VAR 0 7
33307: PUSH
33308: LD_VAR 0 5
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PPUSH
33317: LD_INT 1
33319: PPUSH
33320: CALL_OW 12
33324: PLUS
33325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33326: LD_VAR 0 6
33330: PPUSH
33331: LD_VAR 0 7
33335: PPUSH
33336: CALL_OW 488
33340: NOT
33341: IFFALSE 33363
// begin _x := x ;
33343: LD_ADDR_VAR 0 6
33347: PUSH
33348: LD_VAR 0 4
33352: ST_TO_ADDR
// _y := y ;
33353: LD_ADDR_VAR 0 7
33357: PUSH
33358: LD_VAR 0 5
33362: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33363: LD_ADDR_VAR 0 3
33367: PUSH
33368: LD_INT 1
33370: PPUSH
33371: LD_VAR 0 14
33375: PPUSH
33376: CALL_OW 12
33380: ST_TO_ADDR
// case i of 1 :
33381: LD_VAR 0 3
33385: PUSH
33386: LD_INT 1
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33411
33394: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33395: LD_VAR 0 1
33399: PPUSH
33400: LD_VAR 0 10
33404: PPUSH
33405: CALL_OW 115
33409: GO 33472
33411: LD_INT 2
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33441
33419: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33420: LD_VAR 0 1
33424: PPUSH
33425: LD_VAR 0 6
33429: PPUSH
33430: LD_VAR 0 7
33434: PPUSH
33435: CALL_OW 153
33439: GO 33472
33441: LD_INT 3
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33471
33449: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33450: LD_VAR 0 1
33454: PPUSH
33455: LD_VAR 0 6
33459: PPUSH
33460: LD_VAR 0 7
33464: PPUSH
33465: CALL_OW 154
33469: GO 33472
33471: POP
// end ;
33472: LD_VAR 0 2
33476: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33477: LD_INT 0
33479: PPUSH
33480: PPUSH
33481: PPUSH
33482: PPUSH
33483: PPUSH
33484: PPUSH
// if not unit or not building then
33485: LD_VAR 0 1
33489: NOT
33490: PUSH
33491: LD_VAR 0 2
33495: NOT
33496: OR
33497: IFFALSE 33501
// exit ;
33499: GO 33659
// x := GetX ( building ) ;
33501: LD_ADDR_VAR 0 5
33505: PUSH
33506: LD_VAR 0 2
33510: PPUSH
33511: CALL_OW 250
33515: ST_TO_ADDR
// y := GetY ( building ) ;
33516: LD_ADDR_VAR 0 6
33520: PUSH
33521: LD_VAR 0 2
33525: PPUSH
33526: CALL_OW 251
33530: ST_TO_ADDR
// for i = 0 to 5 do
33531: LD_ADDR_VAR 0 4
33535: PUSH
33536: DOUBLE
33537: LD_INT 0
33539: DEC
33540: ST_TO_ADDR
33541: LD_INT 5
33543: PUSH
33544: FOR_TO
33545: IFFALSE 33657
// begin _x := ShiftX ( x , i , 3 ) ;
33547: LD_ADDR_VAR 0 7
33551: PUSH
33552: LD_VAR 0 5
33556: PPUSH
33557: LD_VAR 0 4
33561: PPUSH
33562: LD_INT 3
33564: PPUSH
33565: CALL_OW 272
33569: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33570: LD_ADDR_VAR 0 8
33574: PUSH
33575: LD_VAR 0 6
33579: PPUSH
33580: LD_VAR 0 4
33584: PPUSH
33585: LD_INT 3
33587: PPUSH
33588: CALL_OW 273
33592: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33593: LD_VAR 0 7
33597: PPUSH
33598: LD_VAR 0 8
33602: PPUSH
33603: CALL_OW 488
33607: NOT
33608: IFFALSE 33612
// continue ;
33610: GO 33544
// if HexInfo ( _x , _y ) = 0 then
33612: LD_VAR 0 7
33616: PPUSH
33617: LD_VAR 0 8
33621: PPUSH
33622: CALL_OW 428
33626: PUSH
33627: LD_INT 0
33629: EQUAL
33630: IFFALSE 33655
// begin ComMoveXY ( unit , _x , _y ) ;
33632: LD_VAR 0 1
33636: PPUSH
33637: LD_VAR 0 7
33641: PPUSH
33642: LD_VAR 0 8
33646: PPUSH
33647: CALL_OW 111
// exit ;
33651: POP
33652: POP
33653: GO 33659
// end ; end ;
33655: GO 33544
33657: POP
33658: POP
// end ;
33659: LD_VAR 0 3
33663: RET
// export function ScanBase ( side , base_area ) ; begin
33664: LD_INT 0
33666: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_VAR 0 2
33676: PPUSH
33677: LD_INT 81
33679: PUSH
33680: LD_VAR 0 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PPUSH
33689: CALL_OW 70
33693: ST_TO_ADDR
// end ;
33694: LD_VAR 0 3
33698: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
// result := false ;
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_INT 0
33712: ST_TO_ADDR
// side := GetSide ( unit ) ;
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 255
33727: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_VAR 0 1
33737: PPUSH
33738: CALL_OW 248
33742: ST_TO_ADDR
// case nat of 1 :
33743: LD_VAR 0 4
33747: PUSH
33748: LD_INT 1
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33767
33756: POP
// tech := tech_lassight ; 2 :
33757: LD_ADDR_VAR 0 5
33761: PUSH
33762: LD_INT 12
33764: ST_TO_ADDR
33765: GO 33806
33767: LD_INT 2
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33786
33775: POP
// tech := tech_mortar ; 3 :
33776: LD_ADDR_VAR 0 5
33780: PUSH
33781: LD_INT 41
33783: ST_TO_ADDR
33784: GO 33806
33786: LD_INT 3
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33805
33794: POP
// tech := tech_bazooka ; end ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_INT 44
33802: ST_TO_ADDR
33803: GO 33806
33805: POP
// if Researched ( side , tech ) then
33806: LD_VAR 0 3
33810: PPUSH
33811: LD_VAR 0 5
33815: PPUSH
33816: CALL_OW 325
33820: IFFALSE 33847
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33822: LD_ADDR_VAR 0 2
33826: PUSH
33827: LD_INT 5
33829: PUSH
33830: LD_INT 8
33832: PUSH
33833: LD_INT 9
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: PUSH
33841: LD_VAR 0 4
33845: ARRAY
33846: ST_TO_ADDR
// end ;
33847: LD_VAR 0 2
33851: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33852: LD_INT 0
33854: PPUSH
33855: PPUSH
33856: PPUSH
// if not mines then
33857: LD_VAR 0 2
33861: NOT
33862: IFFALSE 33866
// exit ;
33864: GO 34010
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33866: LD_ADDR_VAR 0 5
33870: PUSH
33871: LD_INT 81
33873: PUSH
33874: LD_VAR 0 1
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 3
33885: PUSH
33886: LD_INT 21
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: ST_TO_ADDR
// for i in mines do
33909: LD_ADDR_VAR 0 4
33913: PUSH
33914: LD_VAR 0 2
33918: PUSH
33919: FOR_IN
33920: IFFALSE 34008
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33922: LD_VAR 0 4
33926: PUSH
33927: LD_INT 1
33929: ARRAY
33930: PPUSH
33931: LD_VAR 0 4
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: PPUSH
33940: CALL_OW 458
33944: NOT
33945: IFFALSE 33949
// continue ;
33947: GO 33919
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33949: LD_VAR 0 4
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: PPUSH
33958: LD_VAR 0 4
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PPUSH
33967: CALL_OW 428
33971: PUSH
33972: LD_VAR 0 5
33976: IN
33977: IFFALSE 34006
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: PPUSH
33988: LD_VAR 0 4
33992: PUSH
33993: LD_INT 2
33995: ARRAY
33996: PPUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: CALL_OW 456
// end ;
34006: GO 33919
34008: POP
34009: POP
// end ;
34010: LD_VAR 0 3
34014: RET
// export function Count ( array ) ; begin
34015: LD_INT 0
34017: PPUSH
// result := array + 0 ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_VAR 0 1
34027: PUSH
34028: LD_INT 0
34030: PLUS
34031: ST_TO_ADDR
// end ;
34032: LD_VAR 0 2
34036: RET
// export function IsEmpty ( building ) ; begin
34037: LD_INT 0
34039: PPUSH
// if not building then
34040: LD_VAR 0 1
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34092
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34049: LD_ADDR_VAR 0 2
34053: PUSH
34054: LD_VAR 0 1
34058: PUSH
34059: LD_INT 22
34061: PUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 255
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 58
34078: PUSH
34079: EMPTY
34080: LIST
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PPUSH
34086: CALL_OW 69
34090: IN
34091: ST_TO_ADDR
// end ;
34092: LD_VAR 0 2
34096: RET
// export function IsNotFull ( building ) ; var places ; begin
34097: LD_INT 0
34099: PPUSH
34100: PPUSH
// if not building then
34101: LD_VAR 0 1
34105: NOT
34106: IFFALSE 34110
// exit ;
34108: GO 34138
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34110: LD_ADDR_VAR 0 2
34114: PUSH
34115: LD_VAR 0 1
34119: PPUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 62
34125: PUSH
34126: EMPTY
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PPUSH
34133: CALL_OW 72
34137: ST_TO_ADDR
// end ;
34138: LD_VAR 0 2
34142: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34143: LD_INT 0
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
// tmp := [ ] ;
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: EMPTY
34155: ST_TO_ADDR
// list := [ ] ;
34156: LD_ADDR_VAR 0 5
34160: PUSH
34161: EMPTY
34162: ST_TO_ADDR
// for i = 16 to 25 do
34163: LD_ADDR_VAR 0 4
34167: PUSH
34168: DOUBLE
34169: LD_INT 16
34171: DEC
34172: ST_TO_ADDR
34173: LD_INT 25
34175: PUSH
34176: FOR_TO
34177: IFFALSE 34250
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34179: LD_ADDR_VAR 0 3
34183: PUSH
34184: LD_VAR 0 3
34188: PUSH
34189: LD_INT 22
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL_OW 255
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 91
34208: PUSH
34209: LD_VAR 0 1
34213: PUSH
34214: LD_INT 6
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 30
34224: PUSH
34225: LD_VAR 0 4
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: PUSH
34239: EMPTY
34240: LIST
34241: PPUSH
34242: CALL_OW 69
34246: ADD
34247: ST_TO_ADDR
34248: GO 34176
34250: POP
34251: POP
// for i = 1 to tmp do
34252: LD_ADDR_VAR 0 4
34256: PUSH
34257: DOUBLE
34258: LD_INT 1
34260: DEC
34261: ST_TO_ADDR
34262: LD_VAR 0 3
34266: PUSH
34267: FOR_TO
34268: IFFALSE 34356
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34270: LD_ADDR_VAR 0 5
34274: PUSH
34275: LD_VAR 0 5
34279: PUSH
34280: LD_VAR 0 3
34284: PUSH
34285: LD_VAR 0 4
34289: ARRAY
34290: PPUSH
34291: CALL_OW 266
34295: PUSH
34296: LD_VAR 0 3
34300: PUSH
34301: LD_VAR 0 4
34305: ARRAY
34306: PPUSH
34307: CALL_OW 250
34311: PUSH
34312: LD_VAR 0 3
34316: PUSH
34317: LD_VAR 0 4
34321: ARRAY
34322: PPUSH
34323: CALL_OW 251
34327: PUSH
34328: LD_VAR 0 3
34332: PUSH
34333: LD_VAR 0 4
34337: ARRAY
34338: PPUSH
34339: CALL_OW 254
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: ADD
34353: ST_TO_ADDR
34354: GO 34267
34356: POP
34357: POP
// result := list ;
34358: LD_ADDR_VAR 0 2
34362: PUSH
34363: LD_VAR 0 5
34367: ST_TO_ADDR
// end ;
34368: LD_VAR 0 2
34372: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34373: LD_INT 0
34375: PPUSH
34376: PPUSH
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
34381: PPUSH
// if not factory then
34382: LD_VAR 0 1
34386: NOT
34387: IFFALSE 34391
// exit ;
34389: GO 34984
// if control = control_apeman then
34391: LD_VAR 0 4
34395: PUSH
34396: LD_INT 5
34398: EQUAL
34399: IFFALSE 34508
// begin tmp := UnitsInside ( factory ) ;
34401: LD_ADDR_VAR 0 8
34405: PUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 313
34415: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34416: LD_VAR 0 8
34420: PPUSH
34421: LD_INT 25
34423: PUSH
34424: LD_INT 12
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PPUSH
34431: CALL_OW 72
34435: NOT
34436: IFFALSE 34446
// control := control_manual ;
34438: LD_ADDR_VAR 0 4
34442: PUSH
34443: LD_INT 1
34445: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34446: LD_ADDR_VAR 0 8
34450: PUSH
34451: LD_VAR 0 1
34455: PPUSH
34456: CALL 34143 0 1
34460: ST_TO_ADDR
// if tmp then
34461: LD_VAR 0 8
34465: IFFALSE 34508
// begin for i in tmp do
34467: LD_ADDR_VAR 0 7
34471: PUSH
34472: LD_VAR 0 8
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34506
// if i [ 1 ] = b_ext_radio then
34480: LD_VAR 0 7
34484: PUSH
34485: LD_INT 1
34487: ARRAY
34488: PUSH
34489: LD_INT 22
34491: EQUAL
34492: IFFALSE 34504
// begin control := control_remote ;
34494: LD_ADDR_VAR 0 4
34498: PUSH
34499: LD_INT 2
34501: ST_TO_ADDR
// break ;
34502: GO 34506
// end ;
34504: GO 34477
34506: POP
34507: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34508: LD_VAR 0 1
34512: PPUSH
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_VAR 0 3
34522: PPUSH
34523: LD_VAR 0 4
34527: PPUSH
34528: LD_VAR 0 5
34532: PPUSH
34533: CALL_OW 448
34537: IFFALSE 34572
// begin result := [ chassis , engine , control , weapon ] ;
34539: LD_ADDR_VAR 0 6
34543: PUSH
34544: LD_VAR 0 2
34548: PUSH
34549: LD_VAR 0 3
34553: PUSH
34554: LD_VAR 0 4
34558: PUSH
34559: LD_VAR 0 5
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// exit ;
34570: GO 34984
// end ; _chassis := AvailableChassisList ( factory ) ;
34572: LD_ADDR_VAR 0 9
34576: PUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: CALL_OW 475
34586: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34587: LD_ADDR_VAR 0 11
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 476
34601: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34602: LD_ADDR_VAR 0 12
34606: PUSH
34607: LD_VAR 0 1
34611: PPUSH
34612: CALL_OW 477
34616: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34617: LD_ADDR_VAR 0 10
34621: PUSH
34622: LD_VAR 0 1
34626: PPUSH
34627: CALL_OW 478
34631: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34632: LD_VAR 0 9
34636: NOT
34637: PUSH
34638: LD_VAR 0 11
34642: NOT
34643: OR
34644: PUSH
34645: LD_VAR 0 12
34649: NOT
34650: OR
34651: PUSH
34652: LD_VAR 0 10
34656: NOT
34657: OR
34658: IFFALSE 34693
// begin result := [ chassis , engine , control , weapon ] ;
34660: LD_ADDR_VAR 0 6
34664: PUSH
34665: LD_VAR 0 2
34669: PUSH
34670: LD_VAR 0 3
34674: PUSH
34675: LD_VAR 0 4
34679: PUSH
34680: LD_VAR 0 5
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: ST_TO_ADDR
// exit ;
34691: GO 34984
// end ; if not chassis in _chassis then
34693: LD_VAR 0 2
34697: PUSH
34698: LD_VAR 0 9
34702: IN
34703: NOT
34704: IFFALSE 34730
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34706: LD_ADDR_VAR 0 2
34710: PUSH
34711: LD_VAR 0 9
34715: PUSH
34716: LD_INT 1
34718: PPUSH
34719: LD_VAR 0 9
34723: PPUSH
34724: CALL_OW 12
34728: ARRAY
34729: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_VAR 0 3
34739: PPUSH
34740: CALL 34989 0 2
34744: NOT
34745: IFFALSE 34804
// repeat engine := _engine [ 1 ] ;
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_VAR 0 11
34756: PUSH
34757: LD_INT 1
34759: ARRAY
34760: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34761: LD_ADDR_VAR 0 11
34765: PUSH
34766: LD_VAR 0 11
34770: PPUSH
34771: LD_INT 1
34773: PPUSH
34774: CALL_OW 3
34778: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34779: LD_VAR 0 2
34783: PPUSH
34784: LD_VAR 0 3
34788: PPUSH
34789: CALL 34989 0 2
34793: PUSH
34794: LD_VAR 0 11
34798: PUSH
34799: EMPTY
34800: EQUAL
34801: OR
34802: IFFALSE 34747
// if not control in _control then
34804: LD_VAR 0 4
34808: PUSH
34809: LD_VAR 0 12
34813: IN
34814: NOT
34815: IFFALSE 34841
// control := _control [ rand ( 1 , _control ) ] ;
34817: LD_ADDR_VAR 0 4
34821: PUSH
34822: LD_VAR 0 12
34826: PUSH
34827: LD_INT 1
34829: PPUSH
34830: LD_VAR 0 12
34834: PPUSH
34835: CALL_OW 12
34839: ARRAY
34840: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34841: LD_VAR 0 2
34845: PPUSH
34846: LD_VAR 0 5
34850: PPUSH
34851: CALL 35209 0 2
34855: NOT
34856: IFFALSE 34915
// repeat weapon := _weapon [ 1 ] ;
34858: LD_ADDR_VAR 0 5
34862: PUSH
34863: LD_VAR 0 10
34867: PUSH
34868: LD_INT 1
34870: ARRAY
34871: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34872: LD_ADDR_VAR 0 10
34876: PUSH
34877: LD_VAR 0 10
34881: PPUSH
34882: LD_INT 1
34884: PPUSH
34885: CALL_OW 3
34889: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34890: LD_VAR 0 2
34894: PPUSH
34895: LD_VAR 0 5
34899: PPUSH
34900: CALL 35209 0 2
34904: PUSH
34905: LD_VAR 0 10
34909: PUSH
34910: EMPTY
34911: EQUAL
34912: OR
34913: IFFALSE 34858
// result := [ ] ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: EMPTY
34921: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 2
34931: PPUSH
34932: LD_VAR 0 3
34936: PPUSH
34937: LD_VAR 0 4
34941: PPUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: CALL_OW 448
34951: IFFALSE 34984
// result := [ chassis , engine , control , weapon ] ;
34953: LD_ADDR_VAR 0 6
34957: PUSH
34958: LD_VAR 0 2
34962: PUSH
34963: LD_VAR 0 3
34967: PUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_VAR 0 5
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
// end ;
34984: LD_VAR 0 6
34988: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34989: LD_INT 0
34991: PPUSH
// if not chassis or not engine then
34992: LD_VAR 0 1
34996: NOT
34997: PUSH
34998: LD_VAR 0 2
35002: NOT
35003: OR
35004: IFFALSE 35008
// exit ;
35006: GO 35204
// case engine of engine_solar :
35008: LD_VAR 0 2
35012: PUSH
35013: LD_INT 2
35015: DOUBLE
35016: EQUAL
35017: IFTRUE 35021
35019: GO 35059
35021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_INT 11
35029: PUSH
35030: LD_INT 12
35032: PUSH
35033: LD_INT 13
35035: PUSH
35036: LD_INT 14
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
35057: GO 35188
35059: LD_INT 1
35061: DOUBLE
35062: EQUAL
35063: IFTRUE 35067
35065: GO 35129
35067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: LD_INT 11
35075: PUSH
35076: LD_INT 12
35078: PUSH
35079: LD_INT 13
35081: PUSH
35082: LD_INT 14
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: LD_INT 5
35099: PUSH
35100: LD_INT 21
35102: PUSH
35103: LD_INT 23
35105: PUSH
35106: LD_INT 22
35108: PUSH
35109: LD_INT 24
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
35127: GO 35188
35129: LD_INT 3
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35187
35137: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 13
35145: PUSH
35146: LD_INT 14
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 4
35157: PUSH
35158: LD_INT 5
35160: PUSH
35161: LD_INT 21
35163: PUSH
35164: LD_INT 22
35166: PUSH
35167: LD_INT 23
35169: PUSH
35170: LD_INT 24
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
35185: GO 35188
35187: POP
// result := ( chassis in result ) ;
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_VAR 0 1
35197: PUSH
35198: LD_VAR 0 3
35202: IN
35203: ST_TO_ADDR
// end ;
35204: LD_VAR 0 3
35208: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35209: LD_INT 0
35211: PPUSH
// if not chassis or not weapon then
35212: LD_VAR 0 1
35216: NOT
35217: PUSH
35218: LD_VAR 0 2
35222: NOT
35223: OR
35224: IFFALSE 35228
// exit ;
35226: GO 36288
// case weapon of us_machine_gun :
35228: LD_VAR 0 2
35232: PUSH
35233: LD_INT 2
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35241
35239: GO 35271
35241: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35242: LD_ADDR_VAR 0 3
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
35269: GO 36272
35271: LD_INT 3
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35309
35279: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 3
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: LD_INT 5
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
35307: GO 36272
35309: LD_INT 11
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35317
35315: GO 35347
35317: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35318: LD_ADDR_VAR 0 3
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: LD_INT 3
35331: PUSH
35332: LD_INT 4
35334: PUSH
35335: LD_INT 5
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
35345: GO 36272
35347: LD_INT 4
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35381
35355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 4
35369: PUSH
35370: LD_INT 5
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
35379: GO 36272
35381: LD_INT 5
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35389
35387: GO 35415
35389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 4
35403: PUSH
35404: LD_INT 5
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
35413: GO 36272
35415: LD_INT 9
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35449
35423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: LD_INT 5
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
35447: GO 36272
35449: LD_INT 7
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35483
35457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: LD_INT 5
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 36272
35483: LD_INT 12
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35517
35491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: LD_INT 5
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
35515: GO 36272
35517: LD_INT 13
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35551
35525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 4
35539: PUSH
35540: LD_INT 5
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
35549: GO 36272
35551: LD_INT 14
35553: DOUBLE
35554: EQUAL
35555: IFTRUE 35559
35557: GO 35577
35559: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35560: LD_ADDR_VAR 0 3
35564: PUSH
35565: LD_INT 4
35567: PUSH
35568: LD_INT 5
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: ST_TO_ADDR
35575: GO 36272
35577: LD_INT 6
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35585
35583: GO 35603
35585: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35586: LD_ADDR_VAR 0 3
35590: PUSH
35591: LD_INT 4
35593: PUSH
35594: LD_INT 5
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: ST_TO_ADDR
35601: GO 36272
35603: LD_INT 10
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35611
35609: GO 35629
35611: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35612: LD_ADDR_VAR 0 3
35616: PUSH
35617: LD_INT 4
35619: PUSH
35620: LD_INT 5
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: ST_TO_ADDR
35627: GO 36272
35629: LD_INT 22
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35637
35635: GO 35663
35637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_INT 11
35645: PUSH
35646: LD_INT 12
35648: PUSH
35649: LD_INT 13
35651: PUSH
35652: LD_INT 14
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
35661: GO 36272
35663: LD_INT 23
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35697
35671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 11
35679: PUSH
35680: LD_INT 12
35682: PUSH
35683: LD_INT 13
35685: PUSH
35686: LD_INT 14
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
35695: GO 36272
35697: LD_INT 24
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35705
35703: GO 35731
35705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35706: LD_ADDR_VAR 0 3
35710: PUSH
35711: LD_INT 11
35713: PUSH
35714: LD_INT 12
35716: PUSH
35717: LD_INT 13
35719: PUSH
35720: LD_INT 14
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
35729: GO 36272
35731: LD_INT 30
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 35765
35739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35740: LD_ADDR_VAR 0 3
35744: PUSH
35745: LD_INT 11
35747: PUSH
35748: LD_INT 12
35750: PUSH
35751: LD_INT 13
35753: PUSH
35754: LD_INT 14
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: ST_TO_ADDR
35763: GO 36272
35765: LD_INT 25
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35773
35771: GO 35791
35773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35774: LD_ADDR_VAR 0 3
35778: PUSH
35779: LD_INT 13
35781: PUSH
35782: LD_INT 14
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: ST_TO_ADDR
35789: GO 36272
35791: LD_INT 27
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35799
35797: GO 35817
35799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35800: LD_ADDR_VAR 0 3
35804: PUSH
35805: LD_INT 13
35807: PUSH
35808: LD_INT 14
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: ST_TO_ADDR
35815: GO 36272
35817: LD_INT 92
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35825
35823: GO 35851
35825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35826: LD_ADDR_VAR 0 3
35830: PUSH
35831: LD_INT 11
35833: PUSH
35834: LD_INT 12
35836: PUSH
35837: LD_INT 13
35839: PUSH
35840: LD_INT 14
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: ST_TO_ADDR
35849: GO 36272
35851: LD_INT 28
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35859
35857: GO 35877
35859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35860: LD_ADDR_VAR 0 3
35864: PUSH
35865: LD_INT 13
35867: PUSH
35868: LD_INT 14
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: ST_TO_ADDR
35875: GO 36272
35877: LD_INT 29
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35903
35885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_INT 13
35893: PUSH
35894: LD_INT 14
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: ST_TO_ADDR
35901: GO 36272
35903: LD_INT 31
35905: DOUBLE
35906: EQUAL
35907: IFTRUE 35911
35909: GO 35929
35911: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35912: LD_ADDR_VAR 0 3
35916: PUSH
35917: LD_INT 13
35919: PUSH
35920: LD_INT 14
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 36272
35929: LD_INT 26
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 35955
35937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35938: LD_ADDR_VAR 0 3
35942: PUSH
35943: LD_INT 13
35945: PUSH
35946: LD_INT 14
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: ST_TO_ADDR
35953: GO 36272
35955: LD_INT 42
35957: DOUBLE
35958: EQUAL
35959: IFTRUE 35963
35961: GO 35989
35963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: LD_INT 21
35971: PUSH
35972: LD_INT 22
35974: PUSH
35975: LD_INT 23
35977: PUSH
35978: LD_INT 24
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
35987: GO 36272
35989: LD_INT 43
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 35997
35995: GO 36023
35997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_INT 21
36005: PUSH
36006: LD_INT 22
36008: PUSH
36009: LD_INT 23
36011: PUSH
36012: LD_INT 24
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
36021: GO 36272
36023: LD_INT 44
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36031
36029: GO 36057
36031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36032: LD_ADDR_VAR 0 3
36036: PUSH
36037: LD_INT 21
36039: PUSH
36040: LD_INT 22
36042: PUSH
36043: LD_INT 23
36045: PUSH
36046: LD_INT 24
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
36055: GO 36272
36057: LD_INT 45
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36091
36065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_INT 21
36073: PUSH
36074: LD_INT 22
36076: PUSH
36077: LD_INT 23
36079: PUSH
36080: LD_INT 24
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
36089: GO 36272
36091: LD_INT 49
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36125
36099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 21
36107: PUSH
36108: LD_INT 22
36110: PUSH
36111: LD_INT 23
36113: PUSH
36114: LD_INT 24
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
36123: GO 36272
36125: LD_INT 51
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36159
36133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36134: LD_ADDR_VAR 0 3
36138: PUSH
36139: LD_INT 21
36141: PUSH
36142: LD_INT 22
36144: PUSH
36145: LD_INT 23
36147: PUSH
36148: LD_INT 24
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
36157: GO 36272
36159: LD_INT 52
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36193
36167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_INT 21
36175: PUSH
36176: LD_INT 22
36178: PUSH
36179: LD_INT 23
36181: PUSH
36182: LD_INT 24
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
36191: GO 36272
36193: LD_INT 53
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36219
36201: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 24
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: ST_TO_ADDR
36217: GO 36272
36219: LD_INT 46
36221: DOUBLE
36222: EQUAL
36223: IFTRUE 36227
36225: GO 36245
36227: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36228: LD_ADDR_VAR 0 3
36232: PUSH
36233: LD_INT 23
36235: PUSH
36236: LD_INT 24
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: ST_TO_ADDR
36243: GO 36272
36245: LD_INT 47
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36253
36251: GO 36271
36253: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 23
36261: PUSH
36262: LD_INT 24
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: ST_TO_ADDR
36269: GO 36272
36271: POP
// result := ( chassis in result ) ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: LD_VAR 0 3
36286: IN
36287: ST_TO_ADDR
// end ;
36288: LD_VAR 0 3
36292: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36293: LD_INT 0
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
// result := array ;
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_VAR 0 1
36311: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36312: LD_VAR 0 1
36316: NOT
36317: PUSH
36318: LD_VAR 0 2
36322: NOT
36323: OR
36324: PUSH
36325: LD_VAR 0 3
36329: NOT
36330: OR
36331: PUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_VAR 0 1
36341: GREATER
36342: OR
36343: PUSH
36344: LD_VAR 0 3
36348: PUSH
36349: LD_VAR 0 1
36353: GREATER
36354: OR
36355: IFFALSE 36359
// exit ;
36357: GO 36655
// if direction then
36359: LD_VAR 0 4
36363: IFFALSE 36427
// begin d := 1 ;
36365: LD_ADDR_VAR 0 9
36369: PUSH
36370: LD_INT 1
36372: ST_TO_ADDR
// if i_from > i_to then
36373: LD_VAR 0 2
36377: PUSH
36378: LD_VAR 0 3
36382: GREATER
36383: IFFALSE 36409
// length := ( array - i_from ) + i_to else
36385: LD_ADDR_VAR 0 11
36389: PUSH
36390: LD_VAR 0 1
36394: PUSH
36395: LD_VAR 0 2
36399: MINUS
36400: PUSH
36401: LD_VAR 0 3
36405: PLUS
36406: ST_TO_ADDR
36407: GO 36425
// length := i_to - i_from ;
36409: LD_ADDR_VAR 0 11
36413: PUSH
36414: LD_VAR 0 3
36418: PUSH
36419: LD_VAR 0 2
36423: MINUS
36424: ST_TO_ADDR
// end else
36425: GO 36488
// begin d := - 1 ;
36427: LD_ADDR_VAR 0 9
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: ST_TO_ADDR
// if i_from > i_to then
36436: LD_VAR 0 2
36440: PUSH
36441: LD_VAR 0 3
36445: GREATER
36446: IFFALSE 36466
// length := i_from - i_to else
36448: LD_ADDR_VAR 0 11
36452: PUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_VAR 0 3
36462: MINUS
36463: ST_TO_ADDR
36464: GO 36488
// length := ( array - i_to ) + i_from ;
36466: LD_ADDR_VAR 0 11
36470: PUSH
36471: LD_VAR 0 1
36475: PUSH
36476: LD_VAR 0 3
36480: MINUS
36481: PUSH
36482: LD_VAR 0 2
36486: PLUS
36487: ST_TO_ADDR
// end ; if not length then
36488: LD_VAR 0 11
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36655
// tmp := array ;
36497: LD_ADDR_VAR 0 10
36501: PUSH
36502: LD_VAR 0 1
36506: ST_TO_ADDR
// for i = 1 to length do
36507: LD_ADDR_VAR 0 6
36511: PUSH
36512: DOUBLE
36513: LD_INT 1
36515: DEC
36516: ST_TO_ADDR
36517: LD_VAR 0 11
36521: PUSH
36522: FOR_TO
36523: IFFALSE 36643
// begin for j = 1 to array do
36525: LD_ADDR_VAR 0 7
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 1
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36629
// begin k := j + d ;
36543: LD_ADDR_VAR 0 8
36547: PUSH
36548: LD_VAR 0 7
36552: PUSH
36553: LD_VAR 0 9
36557: PLUS
36558: ST_TO_ADDR
// if k > array then
36559: LD_VAR 0 8
36563: PUSH
36564: LD_VAR 0 1
36568: GREATER
36569: IFFALSE 36579
// k := 1 ;
36571: LD_ADDR_VAR 0 8
36575: PUSH
36576: LD_INT 1
36578: ST_TO_ADDR
// if not k then
36579: LD_VAR 0 8
36583: NOT
36584: IFFALSE 36596
// k := array ;
36586: LD_ADDR_VAR 0 8
36590: PUSH
36591: LD_VAR 0 1
36595: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36596: LD_ADDR_VAR 0 10
36600: PUSH
36601: LD_VAR 0 10
36605: PPUSH
36606: LD_VAR 0 8
36610: PPUSH
36611: LD_VAR 0 1
36615: PUSH
36616: LD_VAR 0 7
36620: ARRAY
36621: PPUSH
36622: CALL_OW 1
36626: ST_TO_ADDR
// end ;
36627: GO 36540
36629: POP
36630: POP
// array := tmp ;
36631: LD_ADDR_VAR 0 1
36635: PUSH
36636: LD_VAR 0 10
36640: ST_TO_ADDR
// end ;
36641: GO 36522
36643: POP
36644: POP
// result := array ;
36645: LD_ADDR_VAR 0 5
36649: PUSH
36650: LD_VAR 0 1
36654: ST_TO_ADDR
// end ;
36655: LD_VAR 0 5
36659: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
// result := 0 ;
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// if not array or not value in array then
36672: LD_VAR 0 1
36676: NOT
36677: PUSH
36678: LD_VAR 0 2
36682: PUSH
36683: LD_VAR 0 1
36687: IN
36688: NOT
36689: OR
36690: IFFALSE 36694
// exit ;
36692: GO 36748
// for i = 1 to array do
36694: LD_ADDR_VAR 0 4
36698: PUSH
36699: DOUBLE
36700: LD_INT 1
36702: DEC
36703: ST_TO_ADDR
36704: LD_VAR 0 1
36708: PUSH
36709: FOR_TO
36710: IFFALSE 36746
// if value = array [ i ] then
36712: LD_VAR 0 2
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_VAR 0 4
36726: ARRAY
36727: EQUAL
36728: IFFALSE 36744
// begin result := i ;
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_VAR 0 4
36739: ST_TO_ADDR
// exit ;
36740: POP
36741: POP
36742: GO 36748
// end ;
36744: GO 36709
36746: POP
36747: POP
// end ;
36748: LD_VAR 0 3
36752: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36753: LD_INT 0
36755: PPUSH
// vc_chassis := chassis ;
36756: LD_ADDR_OWVAR 37
36760: PUSH
36761: LD_VAR 0 1
36765: ST_TO_ADDR
// vc_engine := engine ;
36766: LD_ADDR_OWVAR 39
36770: PUSH
36771: LD_VAR 0 2
36775: ST_TO_ADDR
// vc_control := control ;
36776: LD_ADDR_OWVAR 38
36780: PUSH
36781: LD_VAR 0 3
36785: ST_TO_ADDR
// vc_weapon := weapon ;
36786: LD_ADDR_OWVAR 40
36790: PUSH
36791: LD_VAR 0 4
36795: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36796: LD_ADDR_OWVAR 41
36800: PUSH
36801: LD_VAR 0 5
36805: ST_TO_ADDR
// end ;
36806: LD_VAR 0 6
36810: RET
// export function WantPlant ( unit ) ; var task ; begin
36811: LD_INT 0
36813: PPUSH
36814: PPUSH
// result := false ;
36815: LD_ADDR_VAR 0 2
36819: PUSH
36820: LD_INT 0
36822: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36823: LD_ADDR_VAR 0 3
36827: PUSH
36828: LD_VAR 0 1
36832: PPUSH
36833: CALL_OW 437
36837: ST_TO_ADDR
// if task then
36838: LD_VAR 0 3
36842: IFFALSE 36870
// if task [ 1 ] [ 1 ] = p then
36844: LD_VAR 0 3
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PUSH
36857: LD_STRING p
36859: EQUAL
36860: IFFALSE 36870
// result := true ;
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_INT 1
36869: ST_TO_ADDR
// end ;
36870: LD_VAR 0 2
36874: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36875: LD_INT 0
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
// if pos < 1 then
36881: LD_VAR 0 2
36885: PUSH
36886: LD_INT 1
36888: LESS
36889: IFFALSE 36893
// exit ;
36891: GO 37196
// if pos = 1 then
36893: LD_VAR 0 2
36897: PUSH
36898: LD_INT 1
36900: EQUAL
36901: IFFALSE 36934
// result := Replace ( arr , pos [ 1 ] , value ) else
36903: LD_ADDR_VAR 0 4
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 3
36926: PPUSH
36927: CALL_OW 1
36931: ST_TO_ADDR
36932: GO 37196
// begin tmp := arr ;
36934: LD_ADDR_VAR 0 6
36938: PUSH
36939: LD_VAR 0 1
36943: ST_TO_ADDR
// s_arr := [ tmp ] ;
36944: LD_ADDR_VAR 0 7
36948: PUSH
36949: LD_VAR 0 6
36953: PUSH
36954: EMPTY
36955: LIST
36956: ST_TO_ADDR
// for i = 1 to pos - 1 do
36957: LD_ADDR_VAR 0 5
36961: PUSH
36962: DOUBLE
36963: LD_INT 1
36965: DEC
36966: ST_TO_ADDR
36967: LD_VAR 0 2
36971: PUSH
36972: LD_INT 1
36974: MINUS
36975: PUSH
36976: FOR_TO
36977: IFFALSE 37022
// begin tmp := tmp [ pos [ i ] ] ;
36979: LD_ADDR_VAR 0 6
36983: PUSH
36984: LD_VAR 0 6
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_VAR 0 5
36998: ARRAY
36999: ARRAY
37000: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37001: LD_ADDR_VAR 0 7
37005: PUSH
37006: LD_VAR 0 7
37010: PUSH
37011: LD_VAR 0 6
37015: PUSH
37016: EMPTY
37017: LIST
37018: ADD
37019: ST_TO_ADDR
// end ;
37020: GO 36976
37022: POP
37023: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37024: LD_ADDR_VAR 0 6
37028: PUSH
37029: LD_VAR 0 6
37033: PPUSH
37034: LD_VAR 0 2
37038: PUSH
37039: LD_VAR 0 2
37043: ARRAY
37044: PPUSH
37045: LD_VAR 0 3
37049: PPUSH
37050: CALL_OW 1
37054: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37055: LD_ADDR_VAR 0 7
37059: PUSH
37060: LD_VAR 0 7
37064: PPUSH
37065: LD_VAR 0 7
37069: PPUSH
37070: LD_VAR 0 6
37074: PPUSH
37075: CALL_OW 1
37079: ST_TO_ADDR
// for i = s_arr downto 2 do
37080: LD_ADDR_VAR 0 5
37084: PUSH
37085: DOUBLE
37086: LD_VAR 0 7
37090: INC
37091: ST_TO_ADDR
37092: LD_INT 2
37094: PUSH
37095: FOR_DOWNTO
37096: IFFALSE 37180
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37098: LD_ADDR_VAR 0 6
37102: PUSH
37103: LD_VAR 0 7
37107: PUSH
37108: LD_VAR 0 5
37112: PUSH
37113: LD_INT 1
37115: MINUS
37116: ARRAY
37117: PPUSH
37118: LD_VAR 0 2
37122: PUSH
37123: LD_VAR 0 5
37127: PUSH
37128: LD_INT 1
37130: MINUS
37131: ARRAY
37132: PPUSH
37133: LD_VAR 0 7
37137: PUSH
37138: LD_VAR 0 5
37142: ARRAY
37143: PPUSH
37144: CALL_OW 1
37148: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37149: LD_ADDR_VAR 0 7
37153: PUSH
37154: LD_VAR 0 7
37158: PPUSH
37159: LD_VAR 0 5
37163: PUSH
37164: LD_INT 1
37166: MINUS
37167: PPUSH
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 1
37177: ST_TO_ADDR
// end ;
37178: GO 37095
37180: POP
37181: POP
// result := s_arr [ 1 ] ;
37182: LD_ADDR_VAR 0 4
37186: PUSH
37187: LD_VAR 0 7
37191: PUSH
37192: LD_INT 1
37194: ARRAY
37195: ST_TO_ADDR
// end ; end ;
37196: LD_VAR 0 4
37200: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37201: LD_INT 0
37203: PPUSH
37204: PPUSH
// if not list then
37205: LD_VAR 0 1
37209: NOT
37210: IFFALSE 37214
// exit ;
37212: GO 37305
// i := list [ pos1 ] ;
37214: LD_ADDR_VAR 0 5
37218: PUSH
37219: LD_VAR 0 1
37223: PUSH
37224: LD_VAR 0 2
37228: ARRAY
37229: ST_TO_ADDR
// if not i then
37230: LD_VAR 0 5
37234: NOT
37235: IFFALSE 37239
// exit ;
37237: GO 37305
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37239: LD_ADDR_VAR 0 1
37243: PUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: LD_VAR 0 2
37253: PPUSH
37254: LD_VAR 0 1
37258: PUSH
37259: LD_VAR 0 3
37263: ARRAY
37264: PPUSH
37265: CALL_OW 1
37269: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37270: LD_ADDR_VAR 0 1
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: LD_VAR 0 3
37284: PPUSH
37285: LD_VAR 0 5
37289: PPUSH
37290: CALL_OW 1
37294: ST_TO_ADDR
// result := list ;
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: LD_VAR 0 1
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 4
37309: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37310: LD_INT 0
37312: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 250
37327: PPUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 251
37337: PPUSH
37338: LD_VAR 0 2
37342: PPUSH
37343: LD_VAR 0 3
37347: PPUSH
37348: LD_VAR 0 4
37352: PPUSH
37353: CALL 37731 0 5
37357: ST_TO_ADDR
// end ;
37358: LD_VAR 0 5
37362: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37363: LD_INT 0
37365: PPUSH
37366: PPUSH
37367: PPUSH
37368: PPUSH
// if not list or not unit then
37369: LD_VAR 0 2
37373: NOT
37374: PUSH
37375: LD_VAR 0 1
37379: NOT
37380: OR
37381: IFFALSE 37385
// exit ;
37383: GO 37726
// result := [ ] ;
37385: LD_ADDR_VAR 0 5
37389: PUSH
37390: EMPTY
37391: ST_TO_ADDR
// for i in list do
37392: LD_ADDR_VAR 0 6
37396: PUSH
37397: LD_VAR 0 2
37401: PUSH
37402: FOR_IN
37403: IFFALSE 37621
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37405: LD_ADDR_VAR 0 8
37409: PUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: LD_VAR 0 6
37419: PUSH
37420: LD_INT 1
37422: ARRAY
37423: PPUSH
37424: LD_VAR 0 6
37428: PUSH
37429: LD_INT 2
37431: ARRAY
37432: PPUSH
37433: CALL_OW 297
37437: ST_TO_ADDR
// if not Count ( result ) then
37438: LD_VAR 0 5
37442: PPUSH
37443: CALL 34015 0 1
37447: NOT
37448: IFFALSE 37481
// begin result := Join ( result , [ i , tmp ] ) ;
37450: LD_ADDR_VAR 0 5
37454: PUSH
37455: LD_VAR 0 5
37459: PPUSH
37460: LD_VAR 0 6
37464: PUSH
37465: LD_VAR 0 8
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PPUSH
37474: CALL 69604 0 2
37478: ST_TO_ADDR
// continue ;
37479: GO 37402
// end ; if result [ result ] [ 2 ] <= tmp then
37481: LD_VAR 0 5
37485: PUSH
37486: LD_VAR 0 5
37490: ARRAY
37491: PUSH
37492: LD_INT 2
37494: ARRAY
37495: PUSH
37496: LD_VAR 0 8
37500: LESSEQUAL
37501: IFFALSE 37534
// result := Join ( result , [ i , tmp ] ) else
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_VAR 0 5
37512: PPUSH
37513: LD_VAR 0 6
37517: PUSH
37518: LD_VAR 0 8
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PPUSH
37527: CALL 69604 0 2
37531: ST_TO_ADDR
37532: GO 37619
// begin for j := 1 to Count ( result ) do
37534: LD_ADDR_VAR 0 7
37538: PUSH
37539: DOUBLE
37540: LD_INT 1
37542: DEC
37543: ST_TO_ADDR
37544: LD_VAR 0 5
37548: PPUSH
37549: CALL 34015 0 1
37553: PUSH
37554: FOR_TO
37555: IFFALSE 37617
// begin if tmp < result [ j ] [ 2 ] then
37557: LD_VAR 0 8
37561: PUSH
37562: LD_VAR 0 5
37566: PUSH
37567: LD_VAR 0 7
37571: ARRAY
37572: PUSH
37573: LD_INT 2
37575: ARRAY
37576: LESS
37577: IFFALSE 37615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_VAR 0 5
37588: PPUSH
37589: LD_VAR 0 7
37593: PPUSH
37594: LD_VAR 0 6
37598: PUSH
37599: LD_VAR 0 8
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PPUSH
37608: CALL_OW 2
37612: ST_TO_ADDR
// break ;
37613: GO 37617
// end ; end ;
37615: GO 37554
37617: POP
37618: POP
// end ; end ;
37619: GO 37402
37621: POP
37622: POP
// if result and not asc then
37623: LD_VAR 0 5
37627: PUSH
37628: LD_VAR 0 3
37632: NOT
37633: AND
37634: IFFALSE 37651
// result := ReverseArray ( result ) ;
37636: LD_ADDR_VAR 0 5
37640: PUSH
37641: LD_VAR 0 5
37645: PPUSH
37646: CALL 64891 0 1
37650: ST_TO_ADDR
// tmp := [ ] ;
37651: LD_ADDR_VAR 0 8
37655: PUSH
37656: EMPTY
37657: ST_TO_ADDR
// if mode then
37658: LD_VAR 0 4
37662: IFFALSE 37726
// begin for i := 1 to result do
37664: LD_ADDR_VAR 0 6
37668: PUSH
37669: DOUBLE
37670: LD_INT 1
37672: DEC
37673: ST_TO_ADDR
37674: LD_VAR 0 5
37678: PUSH
37679: FOR_TO
37680: IFFALSE 37714
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37682: LD_ADDR_VAR 0 8
37686: PUSH
37687: LD_VAR 0 8
37691: PPUSH
37692: LD_VAR 0 5
37696: PUSH
37697: LD_VAR 0 6
37701: ARRAY
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PPUSH
37707: CALL 69604 0 2
37711: ST_TO_ADDR
37712: GO 37679
37714: POP
37715: POP
// result := tmp ;
37716: LD_ADDR_VAR 0 5
37720: PUSH
37721: LD_VAR 0 8
37725: ST_TO_ADDR
// end ; end ;
37726: LD_VAR 0 5
37730: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
// if not list then
37737: LD_VAR 0 3
37741: NOT
37742: IFFALSE 37746
// exit ;
37744: GO 38134
// result := [ ] ;
37746: LD_ADDR_VAR 0 6
37750: PUSH
37751: EMPTY
37752: ST_TO_ADDR
// for i in list do
37753: LD_ADDR_VAR 0 7
37757: PUSH
37758: LD_VAR 0 3
37762: PUSH
37763: FOR_IN
37764: IFFALSE 37966
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37766: LD_ADDR_VAR 0 9
37770: PUSH
37771: LD_VAR 0 7
37775: PPUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: LD_VAR 0 2
37785: PPUSH
37786: CALL_OW 297
37790: ST_TO_ADDR
// if not result then
37791: LD_VAR 0 6
37795: NOT
37796: IFFALSE 37822
// result := [ [ i , tmp ] ] else
37798: LD_ADDR_VAR 0 6
37802: PUSH
37803: LD_VAR 0 7
37807: PUSH
37808: LD_VAR 0 9
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: ST_TO_ADDR
37820: GO 37964
// begin if result [ result ] [ 2 ] < tmp then
37822: LD_VAR 0 6
37826: PUSH
37827: LD_VAR 0 6
37831: ARRAY
37832: PUSH
37833: LD_INT 2
37835: ARRAY
37836: PUSH
37837: LD_VAR 0 9
37841: LESS
37842: IFFALSE 37884
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37844: LD_ADDR_VAR 0 6
37848: PUSH
37849: LD_VAR 0 6
37853: PPUSH
37854: LD_VAR 0 6
37858: PUSH
37859: LD_INT 1
37861: PLUS
37862: PPUSH
37863: LD_VAR 0 7
37867: PUSH
37868: LD_VAR 0 9
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PPUSH
37877: CALL_OW 2
37881: ST_TO_ADDR
37882: GO 37964
// for j = 1 to result do
37884: LD_ADDR_VAR 0 8
37888: PUSH
37889: DOUBLE
37890: LD_INT 1
37892: DEC
37893: ST_TO_ADDR
37894: LD_VAR 0 6
37898: PUSH
37899: FOR_TO
37900: IFFALSE 37962
// begin if tmp < result [ j ] [ 2 ] then
37902: LD_VAR 0 9
37906: PUSH
37907: LD_VAR 0 6
37911: PUSH
37912: LD_VAR 0 8
37916: ARRAY
37917: PUSH
37918: LD_INT 2
37920: ARRAY
37921: LESS
37922: IFFALSE 37960
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37924: LD_ADDR_VAR 0 6
37928: PUSH
37929: LD_VAR 0 6
37933: PPUSH
37934: LD_VAR 0 8
37938: PPUSH
37939: LD_VAR 0 7
37943: PUSH
37944: LD_VAR 0 9
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 2
37957: ST_TO_ADDR
// break ;
37958: GO 37962
// end ; end ;
37960: GO 37899
37962: POP
37963: POP
// end ; end ;
37964: GO 37763
37966: POP
37967: POP
// if result and not asc then
37968: LD_VAR 0 6
37972: PUSH
37973: LD_VAR 0 4
37977: NOT
37978: AND
37979: IFFALSE 38054
// begin tmp := result ;
37981: LD_ADDR_VAR 0 9
37985: PUSH
37986: LD_VAR 0 6
37990: ST_TO_ADDR
// for i = tmp downto 1 do
37991: LD_ADDR_VAR 0 7
37995: PUSH
37996: DOUBLE
37997: LD_VAR 0 9
38001: INC
38002: ST_TO_ADDR
38003: LD_INT 1
38005: PUSH
38006: FOR_DOWNTO
38007: IFFALSE 38052
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38009: LD_ADDR_VAR 0 6
38013: PUSH
38014: LD_VAR 0 6
38018: PPUSH
38019: LD_VAR 0 9
38023: PUSH
38024: LD_VAR 0 7
38028: MINUS
38029: PUSH
38030: LD_INT 1
38032: PLUS
38033: PPUSH
38034: LD_VAR 0 9
38038: PUSH
38039: LD_VAR 0 7
38043: ARRAY
38044: PPUSH
38045: CALL_OW 1
38049: ST_TO_ADDR
38050: GO 38006
38052: POP
38053: POP
// end ; tmp := [ ] ;
38054: LD_ADDR_VAR 0 9
38058: PUSH
38059: EMPTY
38060: ST_TO_ADDR
// if mode then
38061: LD_VAR 0 5
38065: IFFALSE 38134
// begin for i = 1 to result do
38067: LD_ADDR_VAR 0 7
38071: PUSH
38072: DOUBLE
38073: LD_INT 1
38075: DEC
38076: ST_TO_ADDR
38077: LD_VAR 0 6
38081: PUSH
38082: FOR_TO
38083: IFFALSE 38122
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38085: LD_ADDR_VAR 0 9
38089: PUSH
38090: LD_VAR 0 9
38094: PPUSH
38095: LD_VAR 0 7
38099: PPUSH
38100: LD_VAR 0 6
38104: PUSH
38105: LD_VAR 0 7
38109: ARRAY
38110: PUSH
38111: LD_INT 1
38113: ARRAY
38114: PPUSH
38115: CALL_OW 1
38119: ST_TO_ADDR
38120: GO 38082
38122: POP
38123: POP
// result := tmp ;
38124: LD_ADDR_VAR 0 6
38128: PUSH
38129: LD_VAR 0 9
38133: ST_TO_ADDR
// end ; end ;
38134: LD_VAR 0 6
38138: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38147: LD_ADDR_VAR 0 5
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: ST_TO_ADDR
// if not x or not y then
38169: LD_VAR 0 2
38173: NOT
38174: PUSH
38175: LD_VAR 0 3
38179: NOT
38180: OR
38181: IFFALSE 38185
// exit ;
38183: GO 39835
// if not range then
38185: LD_VAR 0 4
38189: NOT
38190: IFFALSE 38200
// range := 10 ;
38192: LD_ADDR_VAR 0 4
38196: PUSH
38197: LD_INT 10
38199: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38200: LD_ADDR_VAR 0 8
38204: PUSH
38205: LD_INT 81
38207: PUSH
38208: LD_VAR 0 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 92
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_VAR 0 3
38229: PUSH
38230: LD_VAR 0 4
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: LD_INT 21
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PPUSH
38263: CALL_OW 69
38267: ST_TO_ADDR
// if not tmp then
38268: LD_VAR 0 8
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 39835
// for i in tmp do
38277: LD_ADDR_VAR 0 6
38281: PUSH
38282: LD_VAR 0 8
38286: PUSH
38287: FOR_IN
38288: IFFALSE 39810
// begin points := [ 0 , 0 , 0 ] ;
38290: LD_ADDR_VAR 0 9
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// bpoints := 1 ;
38309: LD_ADDR_VAR 0 10
38313: PUSH
38314: LD_INT 1
38316: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38317: LD_VAR 0 6
38321: PPUSH
38322: CALL_OW 247
38326: PUSH
38327: LD_INT 1
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38335
38333: GO 38913
38335: POP
// begin if GetClass ( i ) = 1 then
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 257
38345: PUSH
38346: LD_INT 1
38348: EQUAL
38349: IFFALSE 38370
// points := [ 10 , 5 , 3 ] ;
38351: LD_ADDR_VAR 0 9
38355: PUSH
38356: LD_INT 10
38358: PUSH
38359: LD_INT 5
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38370: LD_VAR 0 6
38374: PPUSH
38375: CALL_OW 257
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: IN
38394: IFFALSE 38415
// points := [ 3 , 2 , 1 ] ;
38396: LD_ADDR_VAR 0 9
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38415: LD_VAR 0 6
38419: PPUSH
38420: CALL_OW 257
38424: PUSH
38425: LD_INT 5
38427: EQUAL
38428: IFFALSE 38449
// points := [ 130 , 5 , 2 ] ;
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: LD_INT 130
38437: PUSH
38438: LD_INT 5
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38449: LD_VAR 0 6
38453: PPUSH
38454: CALL_OW 257
38458: PUSH
38459: LD_INT 8
38461: EQUAL
38462: IFFALSE 38483
// points := [ 35 , 35 , 30 ] ;
38464: LD_ADDR_VAR 0 9
38468: PUSH
38469: LD_INT 35
38471: PUSH
38472: LD_INT 35
38474: PUSH
38475: LD_INT 30
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38483: LD_VAR 0 6
38487: PPUSH
38488: CALL_OW 257
38492: PUSH
38493: LD_INT 9
38495: EQUAL
38496: IFFALSE 38517
// points := [ 20 , 55 , 40 ] ;
38498: LD_ADDR_VAR 0 9
38502: PUSH
38503: LD_INT 20
38505: PUSH
38506: LD_INT 55
38508: PUSH
38509: LD_INT 40
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38517: LD_VAR 0 6
38521: PPUSH
38522: CALL_OW 257
38526: PUSH
38527: LD_INT 12
38529: PUSH
38530: LD_INT 16
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: IN
38537: IFFALSE 38558
// points := [ 5 , 3 , 2 ] ;
38539: LD_ADDR_VAR 0 9
38543: PUSH
38544: LD_INT 5
38546: PUSH
38547: LD_INT 3
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38558: LD_VAR 0 6
38562: PPUSH
38563: CALL_OW 257
38567: PUSH
38568: LD_INT 17
38570: EQUAL
38571: IFFALSE 38592
// points := [ 100 , 50 , 75 ] ;
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: LD_INT 100
38580: PUSH
38581: LD_INT 50
38583: PUSH
38584: LD_INT 75
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38592: LD_VAR 0 6
38596: PPUSH
38597: CALL_OW 257
38601: PUSH
38602: LD_INT 15
38604: EQUAL
38605: IFFALSE 38626
// points := [ 10 , 5 , 3 ] ;
38607: LD_ADDR_VAR 0 9
38611: PUSH
38612: LD_INT 10
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38626: LD_VAR 0 6
38630: PPUSH
38631: CALL_OW 257
38635: PUSH
38636: LD_INT 14
38638: EQUAL
38639: IFFALSE 38660
// points := [ 10 , 0 , 0 ] ;
38641: LD_ADDR_VAR 0 9
38645: PUSH
38646: LD_INT 10
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38660: LD_VAR 0 6
38664: PPUSH
38665: CALL_OW 257
38669: PUSH
38670: LD_INT 11
38672: EQUAL
38673: IFFALSE 38694
// points := [ 30 , 10 , 5 ] ;
38675: LD_ADDR_VAR 0 9
38679: PUSH
38680: LD_INT 30
38682: PUSH
38683: LD_INT 10
38685: PUSH
38686: LD_INT 5
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38694: LD_VAR 0 1
38698: PPUSH
38699: LD_INT 5
38701: PPUSH
38702: CALL_OW 321
38706: PUSH
38707: LD_INT 2
38709: EQUAL
38710: IFFALSE 38727
// bpoints := bpoints * 1.8 ;
38712: LD_ADDR_VAR 0 10
38716: PUSH
38717: LD_VAR 0 10
38721: PUSH
38722: LD_REAL  1.80000000000000E+0000
38725: MUL
38726: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38727: LD_VAR 0 6
38731: PPUSH
38732: CALL_OW 257
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 4
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: IN
38755: PUSH
38756: LD_VAR 0 1
38760: PPUSH
38761: LD_INT 51
38763: PPUSH
38764: CALL_OW 321
38768: PUSH
38769: LD_INT 2
38771: EQUAL
38772: AND
38773: IFFALSE 38790
// bpoints := bpoints * 1.2 ;
38775: LD_ADDR_VAR 0 10
38779: PUSH
38780: LD_VAR 0 10
38784: PUSH
38785: LD_REAL  1.20000000000000E+0000
38788: MUL
38789: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38790: LD_VAR 0 6
38794: PPUSH
38795: CALL_OW 257
38799: PUSH
38800: LD_INT 5
38802: PUSH
38803: LD_INT 7
38805: PUSH
38806: LD_INT 9
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: IN
38814: PUSH
38815: LD_VAR 0 1
38819: PPUSH
38820: LD_INT 52
38822: PPUSH
38823: CALL_OW 321
38827: PUSH
38828: LD_INT 2
38830: EQUAL
38831: AND
38832: IFFALSE 38849
// bpoints := bpoints * 1.5 ;
38834: LD_ADDR_VAR 0 10
38838: PUSH
38839: LD_VAR 0 10
38843: PUSH
38844: LD_REAL  1.50000000000000E+0000
38847: MUL
38848: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38849: LD_VAR 0 1
38853: PPUSH
38854: LD_INT 66
38856: PPUSH
38857: CALL_OW 321
38861: PUSH
38862: LD_INT 2
38864: EQUAL
38865: IFFALSE 38882
// bpoints := bpoints * 1.1 ;
38867: LD_ADDR_VAR 0 10
38871: PUSH
38872: LD_VAR 0 10
38876: PUSH
38877: LD_REAL  1.10000000000000E+0000
38880: MUL
38881: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38882: LD_ADDR_VAR 0 10
38886: PUSH
38887: LD_VAR 0 10
38891: PUSH
38892: LD_VAR 0 6
38896: PPUSH
38897: LD_INT 1
38899: PPUSH
38900: CALL_OW 259
38904: PUSH
38905: LD_REAL  1.15000000000000E+0000
38908: MUL
38909: MUL
38910: ST_TO_ADDR
// end ; unit_vehicle :
38911: GO 39739
38913: LD_INT 2
38915: DOUBLE
38916: EQUAL
38917: IFTRUE 38921
38919: GO 39727
38921: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38922: LD_VAR 0 6
38926: PPUSH
38927: CALL_OW 264
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 42
38937: PUSH
38938: LD_INT 24
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: IN
38946: IFFALSE 38967
// points := [ 25 , 5 , 3 ] ;
38948: LD_ADDR_VAR 0 9
38952: PUSH
38953: LD_INT 25
38955: PUSH
38956: LD_INT 5
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38967: LD_VAR 0 6
38971: PPUSH
38972: CALL_OW 264
38976: PUSH
38977: LD_INT 4
38979: PUSH
38980: LD_INT 43
38982: PUSH
38983: LD_INT 25
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: IN
38991: IFFALSE 39012
// points := [ 40 , 15 , 5 ] ;
38993: LD_ADDR_VAR 0 9
38997: PUSH
38998: LD_INT 40
39000: PUSH
39001: LD_INT 15
39003: PUSH
39004: LD_INT 5
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39012: LD_VAR 0 6
39016: PPUSH
39017: CALL_OW 264
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: LD_INT 23
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: IN
39032: IFFALSE 39053
// points := [ 7 , 25 , 8 ] ;
39034: LD_ADDR_VAR 0 9
39038: PUSH
39039: LD_INT 7
39041: PUSH
39042: LD_INT 25
39044: PUSH
39045: LD_INT 8
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39053: LD_VAR 0 6
39057: PPUSH
39058: CALL_OW 264
39062: PUSH
39063: LD_INT 5
39065: PUSH
39066: LD_INT 27
39068: PUSH
39069: LD_INT 44
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: IN
39077: IFFALSE 39098
// points := [ 14 , 50 , 16 ] ;
39079: LD_ADDR_VAR 0 9
39083: PUSH
39084: LD_INT 14
39086: PUSH
39087: LD_INT 50
39089: PUSH
39090: LD_INT 16
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39098: LD_VAR 0 6
39102: PPUSH
39103: CALL_OW 264
39107: PUSH
39108: LD_INT 6
39110: PUSH
39111: LD_INT 46
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: IN
39118: IFFALSE 39139
// points := [ 32 , 120 , 70 ] ;
39120: LD_ADDR_VAR 0 9
39124: PUSH
39125: LD_INT 32
39127: PUSH
39128: LD_INT 120
39130: PUSH
39131: LD_INT 70
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39139: LD_VAR 0 6
39143: PPUSH
39144: CALL_OW 264
39148: PUSH
39149: LD_INT 7
39151: PUSH
39152: LD_INT 28
39154: PUSH
39155: LD_INT 45
39157: PUSH
39158: LD_INT 92
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: IN
39167: IFFALSE 39188
// points := [ 35 , 20 , 45 ] ;
39169: LD_ADDR_VAR 0 9
39173: PUSH
39174: LD_INT 35
39176: PUSH
39177: LD_INT 20
39179: PUSH
39180: LD_INT 45
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39188: LD_VAR 0 6
39192: PPUSH
39193: CALL_OW 264
39197: PUSH
39198: LD_INT 47
39200: PUSH
39201: EMPTY
39202: LIST
39203: IN
39204: IFFALSE 39225
// points := [ 67 , 45 , 75 ] ;
39206: LD_ADDR_VAR 0 9
39210: PUSH
39211: LD_INT 67
39213: PUSH
39214: LD_INT 45
39216: PUSH
39217: LD_INT 75
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39225: LD_VAR 0 6
39229: PPUSH
39230: CALL_OW 264
39234: PUSH
39235: LD_INT 26
39237: PUSH
39238: EMPTY
39239: LIST
39240: IN
39241: IFFALSE 39262
// points := [ 120 , 30 , 80 ] ;
39243: LD_ADDR_VAR 0 9
39247: PUSH
39248: LD_INT 120
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 80
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39262: LD_VAR 0 6
39266: PPUSH
39267: CALL_OW 264
39271: PUSH
39272: LD_INT 22
39274: PUSH
39275: EMPTY
39276: LIST
39277: IN
39278: IFFALSE 39299
// points := [ 40 , 1 , 1 ] ;
39280: LD_ADDR_VAR 0 9
39284: PUSH
39285: LD_INT 40
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39299: LD_VAR 0 6
39303: PPUSH
39304: CALL_OW 264
39308: PUSH
39309: LD_INT 29
39311: PUSH
39312: EMPTY
39313: LIST
39314: IN
39315: IFFALSE 39336
// points := [ 70 , 200 , 400 ] ;
39317: LD_ADDR_VAR 0 9
39321: PUSH
39322: LD_INT 70
39324: PUSH
39325: LD_INT 200
39327: PUSH
39328: LD_INT 400
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39336: LD_VAR 0 6
39340: PPUSH
39341: CALL_OW 264
39345: PUSH
39346: LD_INT 14
39348: PUSH
39349: LD_INT 53
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: IN
39356: IFFALSE 39377
// points := [ 40 , 10 , 20 ] ;
39358: LD_ADDR_VAR 0 9
39362: PUSH
39363: LD_INT 40
39365: PUSH
39366: LD_INT 10
39368: PUSH
39369: LD_INT 20
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39377: LD_VAR 0 6
39381: PPUSH
39382: CALL_OW 264
39386: PUSH
39387: LD_INT 9
39389: PUSH
39390: EMPTY
39391: LIST
39392: IN
39393: IFFALSE 39414
// points := [ 5 , 70 , 20 ] ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: LD_INT 5
39402: PUSH
39403: LD_INT 70
39405: PUSH
39406: LD_INT 20
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39414: LD_VAR 0 6
39418: PPUSH
39419: CALL_OW 264
39423: PUSH
39424: LD_INT 10
39426: PUSH
39427: EMPTY
39428: LIST
39429: IN
39430: IFFALSE 39451
// points := [ 35 , 110 , 70 ] ;
39432: LD_ADDR_VAR 0 9
39436: PUSH
39437: LD_INT 35
39439: PUSH
39440: LD_INT 110
39442: PUSH
39443: LD_INT 70
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39451: LD_VAR 0 6
39455: PPUSH
39456: CALL_OW 265
39460: PUSH
39461: LD_INT 25
39463: EQUAL
39464: IFFALSE 39485
// points := [ 80 , 65 , 100 ] ;
39466: LD_ADDR_VAR 0 9
39470: PUSH
39471: LD_INT 80
39473: PUSH
39474: LD_INT 65
39476: PUSH
39477: LD_INT 100
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39485: LD_VAR 0 6
39489: PPUSH
39490: CALL_OW 263
39494: PUSH
39495: LD_INT 1
39497: EQUAL
39498: IFFALSE 39533
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39500: LD_ADDR_VAR 0 10
39504: PUSH
39505: LD_VAR 0 10
39509: PUSH
39510: LD_VAR 0 6
39514: PPUSH
39515: CALL_OW 311
39519: PPUSH
39520: LD_INT 3
39522: PPUSH
39523: CALL_OW 259
39527: PUSH
39528: LD_INT 4
39530: MUL
39531: MUL
39532: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39533: LD_VAR 0 6
39537: PPUSH
39538: CALL_OW 263
39542: PUSH
39543: LD_INT 2
39545: EQUAL
39546: IFFALSE 39597
// begin j := IsControledBy ( i ) ;
39548: LD_ADDR_VAR 0 7
39552: PUSH
39553: LD_VAR 0 6
39557: PPUSH
39558: CALL_OW 312
39562: ST_TO_ADDR
// if j then
39563: LD_VAR 0 7
39567: IFFALSE 39597
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39569: LD_ADDR_VAR 0 10
39573: PUSH
39574: LD_VAR 0 10
39578: PUSH
39579: LD_VAR 0 7
39583: PPUSH
39584: LD_INT 3
39586: PPUSH
39587: CALL_OW 259
39591: PUSH
39592: LD_INT 3
39594: MUL
39595: MUL
39596: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39597: LD_VAR 0 6
39601: PPUSH
39602: CALL_OW 264
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: LD_INT 6
39612: PUSH
39613: LD_INT 46
39615: PUSH
39616: LD_INT 44
39618: PUSH
39619: LD_INT 47
39621: PUSH
39622: LD_INT 45
39624: PUSH
39625: LD_INT 28
39627: PUSH
39628: LD_INT 7
39630: PUSH
39631: LD_INT 27
39633: PUSH
39634: LD_INT 29
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: IN
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: LD_INT 52
39657: PPUSH
39658: CALL_OW 321
39662: PUSH
39663: LD_INT 2
39665: EQUAL
39666: AND
39667: IFFALSE 39684
// bpoints := bpoints * 1.2 ;
39669: LD_ADDR_VAR 0 10
39673: PUSH
39674: LD_VAR 0 10
39678: PUSH
39679: LD_REAL  1.20000000000000E+0000
39682: MUL
39683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39684: LD_VAR 0 6
39688: PPUSH
39689: CALL_OW 264
39693: PUSH
39694: LD_INT 6
39696: PUSH
39697: LD_INT 46
39699: PUSH
39700: LD_INT 47
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: IN
39708: IFFALSE 39725
// bpoints := bpoints * 1.2 ;
39710: LD_ADDR_VAR 0 10
39714: PUSH
39715: LD_VAR 0 10
39719: PUSH
39720: LD_REAL  1.20000000000000E+0000
39723: MUL
39724: ST_TO_ADDR
// end ; unit_building :
39725: GO 39739
39727: LD_INT 3
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39738
39735: POP
// ; end ;
39736: GO 39739
39738: POP
// for j = 1 to 3 do
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: DOUBLE
39745: LD_INT 1
39747: DEC
39748: ST_TO_ADDR
39749: LD_INT 3
39751: PUSH
39752: FOR_TO
39753: IFFALSE 39806
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39755: LD_ADDR_VAR 0 5
39759: PUSH
39760: LD_VAR 0 5
39764: PPUSH
39765: LD_VAR 0 7
39769: PPUSH
39770: LD_VAR 0 5
39774: PUSH
39775: LD_VAR 0 7
39779: ARRAY
39780: PUSH
39781: LD_VAR 0 9
39785: PUSH
39786: LD_VAR 0 7
39790: ARRAY
39791: PUSH
39792: LD_VAR 0 10
39796: MUL
39797: PLUS
39798: PPUSH
39799: CALL_OW 1
39803: ST_TO_ADDR
39804: GO 39752
39806: POP
39807: POP
// end ;
39808: GO 38287
39810: POP
39811: POP
// result := Replace ( result , 4 , tmp ) ;
39812: LD_ADDR_VAR 0 5
39816: PUSH
39817: LD_VAR 0 5
39821: PPUSH
39822: LD_INT 4
39824: PPUSH
39825: LD_VAR 0 8
39829: PPUSH
39830: CALL_OW 1
39834: ST_TO_ADDR
// end ;
39835: LD_VAR 0 5
39839: RET
// export function DangerAtRange ( unit , range ) ; begin
39840: LD_INT 0
39842: PPUSH
// if not unit then
39843: LD_VAR 0 1
39847: NOT
39848: IFFALSE 39852
// exit ;
39850: GO 39897
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 255
39866: PPUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 250
39876: PPUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 251
39886: PPUSH
39887: LD_VAR 0 2
39891: PPUSH
39892: CALL 38139 0 4
39896: ST_TO_ADDR
// end ;
39897: LD_VAR 0 3
39901: RET
// export function DangerInArea ( side , area ) ; begin
39902: LD_INT 0
39904: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_VAR 0 2
39914: PPUSH
39915: LD_INT 81
39917: PUSH
39918: LD_VAR 0 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PPUSH
39927: CALL_OW 70
39931: ST_TO_ADDR
// end ;
39932: LD_VAR 0 3
39936: RET
// export function IsExtension ( b ) ; begin
39937: LD_INT 0
39939: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39940: LD_ADDR_VAR 0 2
39944: PUSH
39945: LD_VAR 0 1
39949: PUSH
39950: LD_INT 23
39952: PUSH
39953: LD_INT 20
39955: PUSH
39956: LD_INT 22
39958: PUSH
39959: LD_INT 17
39961: PUSH
39962: LD_INT 24
39964: PUSH
39965: LD_INT 21
39967: PUSH
39968: LD_INT 19
39970: PUSH
39971: LD_INT 16
39973: PUSH
39974: LD_INT 25
39976: PUSH
39977: LD_INT 18
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: IN
39992: ST_TO_ADDR
// end ;
39993: LD_VAR 0 2
39997: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39998: LD_INT 0
40000: PPUSH
40001: PPUSH
40002: PPUSH
// result := [ ] ;
40003: LD_ADDR_VAR 0 4
40007: PUSH
40008: EMPTY
40009: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40010: LD_ADDR_VAR 0 5
40014: PUSH
40015: LD_VAR 0 2
40019: PPUSH
40020: LD_INT 21
40022: PUSH
40023: LD_INT 3
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PPUSH
40030: CALL_OW 70
40034: ST_TO_ADDR
// if not tmp then
40035: LD_VAR 0 5
40039: NOT
40040: IFFALSE 40044
// exit ;
40042: GO 40108
// if checkLink then
40044: LD_VAR 0 3
40048: IFFALSE 40098
// begin for i in tmp do
40050: LD_ADDR_VAR 0 6
40054: PUSH
40055: LD_VAR 0 5
40059: PUSH
40060: FOR_IN
40061: IFFALSE 40096
// if GetBase ( i ) <> base then
40063: LD_VAR 0 6
40067: PPUSH
40068: CALL_OW 274
40072: PUSH
40073: LD_VAR 0 1
40077: NONEQUAL
40078: IFFALSE 40094
// ComLinkToBase ( base , i ) ;
40080: LD_VAR 0 1
40084: PPUSH
40085: LD_VAR 0 6
40089: PPUSH
40090: CALL_OW 169
40094: GO 40060
40096: POP
40097: POP
// end ; result := tmp ;
40098: LD_ADDR_VAR 0 4
40102: PUSH
40103: LD_VAR 0 5
40107: ST_TO_ADDR
// end ;
40108: LD_VAR 0 4
40112: RET
// export function ComComplete ( units , b ) ; var i ; begin
40113: LD_INT 0
40115: PPUSH
40116: PPUSH
// if not units then
40117: LD_VAR 0 1
40121: NOT
40122: IFFALSE 40126
// exit ;
40124: GO 40216
// for i in units do
40126: LD_ADDR_VAR 0 4
40130: PUSH
40131: LD_VAR 0 1
40135: PUSH
40136: FOR_IN
40137: IFFALSE 40214
// if BuildingStatus ( b ) = bs_build then
40139: LD_VAR 0 2
40143: PPUSH
40144: CALL_OW 461
40148: PUSH
40149: LD_INT 1
40151: EQUAL
40152: IFFALSE 40212
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40154: LD_VAR 0 4
40158: PPUSH
40159: LD_STRING h
40161: PUSH
40162: LD_VAR 0 2
40166: PPUSH
40167: CALL_OW 250
40171: PUSH
40172: LD_VAR 0 2
40176: PPUSH
40177: CALL_OW 251
40181: PUSH
40182: LD_VAR 0 2
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: PPUSH
40208: CALL_OW 446
40212: GO 40136
40214: POP
40215: POP
// end ;
40216: LD_VAR 0 3
40220: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40221: LD_INT 0
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40229: LD_VAR 0 1
40233: NOT
40234: PUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 263
40244: PUSH
40245: LD_INT 2
40247: NONEQUAL
40248: OR
40249: IFFALSE 40253
// exit ;
40251: GO 40569
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40253: LD_ADDR_VAR 0 6
40257: PUSH
40258: LD_INT 22
40260: PUSH
40261: LD_VAR 0 1
40265: PPUSH
40266: CALL_OW 255
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 30
40280: PUSH
40281: LD_INT 36
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 34
40290: PUSH
40291: LD_INT 31
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PPUSH
40307: CALL_OW 69
40311: ST_TO_ADDR
// if not tmp then
40312: LD_VAR 0 6
40316: NOT
40317: IFFALSE 40321
// exit ;
40319: GO 40569
// result := [ ] ;
40321: LD_ADDR_VAR 0 2
40325: PUSH
40326: EMPTY
40327: ST_TO_ADDR
// for i in tmp do
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_VAR 0 6
40337: PUSH
40338: FOR_IN
40339: IFFALSE 40410
// begin t := UnitsInside ( i ) ;
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: LD_VAR 0 3
40350: PPUSH
40351: CALL_OW 313
40355: ST_TO_ADDR
// if t then
40356: LD_VAR 0 4
40360: IFFALSE 40408
// for j in t do
40362: LD_ADDR_VAR 0 7
40366: PUSH
40367: LD_VAR 0 4
40371: PUSH
40372: FOR_IN
40373: IFFALSE 40406
// result := Replace ( result , result + 1 , j ) ;
40375: LD_ADDR_VAR 0 2
40379: PUSH
40380: LD_VAR 0 2
40384: PPUSH
40385: LD_VAR 0 2
40389: PUSH
40390: LD_INT 1
40392: PLUS
40393: PPUSH
40394: LD_VAR 0 7
40398: PPUSH
40399: CALL_OW 1
40403: ST_TO_ADDR
40404: GO 40372
40406: POP
40407: POP
// end ;
40408: GO 40338
40410: POP
40411: POP
// if not result then
40412: LD_VAR 0 2
40416: NOT
40417: IFFALSE 40421
// exit ;
40419: GO 40569
// mech := result [ 1 ] ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 2
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: ST_TO_ADDR
// if result > 1 then
40435: LD_VAR 0 2
40439: PUSH
40440: LD_INT 1
40442: GREATER
40443: IFFALSE 40555
// begin for i = 2 to result do
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: DOUBLE
40451: LD_INT 2
40453: DEC
40454: ST_TO_ADDR
40455: LD_VAR 0 2
40459: PUSH
40460: FOR_TO
40461: IFFALSE 40553
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40463: LD_ADDR_VAR 0 4
40467: PUSH
40468: LD_VAR 0 2
40472: PUSH
40473: LD_VAR 0 3
40477: ARRAY
40478: PPUSH
40479: LD_INT 3
40481: PPUSH
40482: CALL_OW 259
40486: PUSH
40487: LD_VAR 0 2
40491: PUSH
40492: LD_VAR 0 3
40496: ARRAY
40497: PPUSH
40498: CALL_OW 432
40502: MINUS
40503: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40504: LD_VAR 0 4
40508: PUSH
40509: LD_VAR 0 5
40513: PPUSH
40514: LD_INT 3
40516: PPUSH
40517: CALL_OW 259
40521: PUSH
40522: LD_VAR 0 5
40526: PPUSH
40527: CALL_OW 432
40531: MINUS
40532: GREATEREQUAL
40533: IFFALSE 40551
// mech := result [ i ] ;
40535: LD_ADDR_VAR 0 5
40539: PUSH
40540: LD_VAR 0 2
40544: PUSH
40545: LD_VAR 0 3
40549: ARRAY
40550: ST_TO_ADDR
// end ;
40551: GO 40460
40553: POP
40554: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40555: LD_VAR 0 1
40559: PPUSH
40560: LD_VAR 0 5
40564: PPUSH
40565: CALL_OW 135
// end ;
40569: LD_VAR 0 2
40573: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
// result := [ ] ;
40589: LD_ADDR_VAR 0 7
40593: PUSH
40594: EMPTY
40595: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 266
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: IN
40616: NOT
40617: IFFALSE 40621
// exit ;
40619: GO 42255
// if name then
40621: LD_VAR 0 3
40625: IFFALSE 40641
// SetBName ( base_dep , name ) ;
40627: LD_VAR 0 1
40631: PPUSH
40632: LD_VAR 0 3
40636: PPUSH
40637: CALL_OW 500
// base := GetBase ( base_dep ) ;
40641: LD_ADDR_VAR 0 15
40645: PUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 274
40655: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40656: LD_ADDR_VAR 0 16
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 255
40670: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40671: LD_ADDR_VAR 0 17
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 248
40685: ST_TO_ADDR
// if sources then
40686: LD_VAR 0 5
40690: IFFALSE 40737
// for i = 1 to 3 do
40692: LD_ADDR_VAR 0 8
40696: PUSH
40697: DOUBLE
40698: LD_INT 1
40700: DEC
40701: ST_TO_ADDR
40702: LD_INT 3
40704: PUSH
40705: FOR_TO
40706: IFFALSE 40735
// AddResourceType ( base , i , sources [ i ] ) ;
40708: LD_VAR 0 15
40712: PPUSH
40713: LD_VAR 0 8
40717: PPUSH
40718: LD_VAR 0 5
40722: PUSH
40723: LD_VAR 0 8
40727: ARRAY
40728: PPUSH
40729: CALL_OW 276
40733: GO 40705
40735: POP
40736: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40737: LD_ADDR_VAR 0 18
40741: PUSH
40742: LD_VAR 0 15
40746: PPUSH
40747: LD_VAR 0 2
40751: PPUSH
40752: LD_INT 1
40754: PPUSH
40755: CALL 39998 0 3
40759: ST_TO_ADDR
// InitHc ;
40760: CALL_OW 19
// InitUc ;
40764: CALL_OW 18
// uc_side := side ;
40768: LD_ADDR_OWVAR 20
40772: PUSH
40773: LD_VAR 0 16
40777: ST_TO_ADDR
// uc_nation := nation ;
40778: LD_ADDR_OWVAR 21
40782: PUSH
40783: LD_VAR 0 17
40787: ST_TO_ADDR
// if buildings then
40788: LD_VAR 0 18
40792: IFFALSE 42114
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40794: LD_ADDR_VAR 0 19
40798: PUSH
40799: LD_VAR 0 18
40803: PPUSH
40804: LD_INT 2
40806: PUSH
40807: LD_INT 30
40809: PUSH
40810: LD_INT 29
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 30
40819: PUSH
40820: LD_INT 30
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: PPUSH
40832: CALL_OW 72
40836: ST_TO_ADDR
// if tmp then
40837: LD_VAR 0 19
40841: IFFALSE 40889
// for i in tmp do
40843: LD_ADDR_VAR 0 8
40847: PUSH
40848: LD_VAR 0 19
40852: PUSH
40853: FOR_IN
40854: IFFALSE 40887
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40856: LD_VAR 0 8
40860: PPUSH
40861: CALL_OW 250
40865: PPUSH
40866: LD_VAR 0 8
40870: PPUSH
40871: CALL_OW 251
40875: PPUSH
40876: LD_VAR 0 16
40880: PPUSH
40881: CALL_OW 441
40885: GO 40853
40887: POP
40888: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40889: LD_VAR 0 18
40893: PPUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 30
40899: PUSH
40900: LD_INT 32
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 30
40909: PUSH
40910: LD_INT 33
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: PPUSH
40922: CALL_OW 72
40926: IFFALSE 41014
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40928: LD_ADDR_VAR 0 8
40932: PUSH
40933: LD_VAR 0 18
40937: PPUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 30
40943: PUSH
40944: LD_INT 32
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 30
40953: PUSH
40954: LD_INT 33
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: PPUSH
40966: CALL_OW 72
40970: PUSH
40971: FOR_IN
40972: IFFALSE 41012
// begin if not GetBWeapon ( i ) then
40974: LD_VAR 0 8
40978: PPUSH
40979: CALL_OW 269
40983: NOT
40984: IFFALSE 41010
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40986: LD_VAR 0 8
40990: PPUSH
40991: LD_VAR 0 8
40995: PPUSH
40996: LD_VAR 0 2
41000: PPUSH
41001: CALL 42260 0 2
41005: PPUSH
41006: CALL_OW 431
// end ;
41010: GO 40971
41012: POP
41013: POP
// end ; for i = 1 to personel do
41014: LD_ADDR_VAR 0 8
41018: PUSH
41019: DOUBLE
41020: LD_INT 1
41022: DEC
41023: ST_TO_ADDR
41024: LD_VAR 0 6
41028: PUSH
41029: FOR_TO
41030: IFFALSE 42094
// begin if i > 4 then
41032: LD_VAR 0 8
41036: PUSH
41037: LD_INT 4
41039: GREATER
41040: IFFALSE 41044
// break ;
41042: GO 42094
// case i of 1 :
41044: LD_VAR 0 8
41048: PUSH
41049: LD_INT 1
41051: DOUBLE
41052: EQUAL
41053: IFTRUE 41057
41055: GO 41137
41057: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41058: LD_ADDR_VAR 0 12
41062: PUSH
41063: LD_VAR 0 18
41067: PPUSH
41068: LD_INT 22
41070: PUSH
41071: LD_VAR 0 16
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 58
41082: PUSH
41083: EMPTY
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 30
41091: PUSH
41092: LD_INT 32
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 30
41101: PUSH
41102: LD_INT 4
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 5
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: PPUSH
41130: CALL_OW 72
41134: ST_TO_ADDR
41135: GO 41359
41137: LD_INT 2
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41207
41145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41146: LD_ADDR_VAR 0 12
41150: PUSH
41151: LD_VAR 0 18
41155: PPUSH
41156: LD_INT 22
41158: PUSH
41159: LD_VAR 0 16
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: LD_INT 30
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 30
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PPUSH
41200: CALL_OW 72
41204: ST_TO_ADDR
41205: GO 41359
41207: LD_INT 3
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41277
41215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41216: LD_ADDR_VAR 0 12
41220: PUSH
41221: LD_VAR 0 18
41225: PPUSH
41226: LD_INT 22
41228: PUSH
41229: LD_VAR 0 16
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 30
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 30
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PPUSH
41270: CALL_OW 72
41274: ST_TO_ADDR
41275: GO 41359
41277: LD_INT 4
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41285
41283: GO 41358
41285: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41286: LD_ADDR_VAR 0 12
41290: PUSH
41291: LD_VAR 0 18
41295: PPUSH
41296: LD_INT 22
41298: PUSH
41299: LD_VAR 0 16
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 30
41313: PUSH
41314: LD_INT 6
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 30
41323: PUSH
41324: LD_INT 7
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 30
41333: PUSH
41334: LD_INT 8
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PPUSH
41351: CALL_OW 72
41355: ST_TO_ADDR
41356: GO 41359
41358: POP
// if i = 1 then
41359: LD_VAR 0 8
41363: PUSH
41364: LD_INT 1
41366: EQUAL
41367: IFFALSE 41478
// begin tmp := [ ] ;
41369: LD_ADDR_VAR 0 19
41373: PUSH
41374: EMPTY
41375: ST_TO_ADDR
// for j in f do
41376: LD_ADDR_VAR 0 9
41380: PUSH
41381: LD_VAR 0 12
41385: PUSH
41386: FOR_IN
41387: IFFALSE 41460
// if GetBType ( j ) = b_bunker then
41389: LD_VAR 0 9
41393: PPUSH
41394: CALL_OW 266
41398: PUSH
41399: LD_INT 32
41401: EQUAL
41402: IFFALSE 41429
// tmp := Insert ( tmp , 1 , j ) else
41404: LD_ADDR_VAR 0 19
41408: PUSH
41409: LD_VAR 0 19
41413: PPUSH
41414: LD_INT 1
41416: PPUSH
41417: LD_VAR 0 9
41421: PPUSH
41422: CALL_OW 2
41426: ST_TO_ADDR
41427: GO 41458
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41429: LD_ADDR_VAR 0 19
41433: PUSH
41434: LD_VAR 0 19
41438: PPUSH
41439: LD_VAR 0 19
41443: PUSH
41444: LD_INT 1
41446: PLUS
41447: PPUSH
41448: LD_VAR 0 9
41452: PPUSH
41453: CALL_OW 2
41457: ST_TO_ADDR
41458: GO 41386
41460: POP
41461: POP
// if tmp then
41462: LD_VAR 0 19
41466: IFFALSE 41478
// f := tmp ;
41468: LD_ADDR_VAR 0 12
41472: PUSH
41473: LD_VAR 0 19
41477: ST_TO_ADDR
// end ; x := personel [ i ] ;
41478: LD_ADDR_VAR 0 13
41482: PUSH
41483: LD_VAR 0 6
41487: PUSH
41488: LD_VAR 0 8
41492: ARRAY
41493: ST_TO_ADDR
// if x = - 1 then
41494: LD_VAR 0 13
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: EQUAL
41503: IFFALSE 41712
// begin for j in f do
41505: LD_ADDR_VAR 0 9
41509: PUSH
41510: LD_VAR 0 12
41514: PUSH
41515: FOR_IN
41516: IFFALSE 41708
// repeat InitHc ;
41518: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41522: LD_VAR 0 9
41526: PPUSH
41527: CALL_OW 266
41531: PUSH
41532: LD_INT 5
41534: EQUAL
41535: IFFALSE 41605
// begin if UnitsInside ( j ) < 3 then
41537: LD_VAR 0 9
41541: PPUSH
41542: CALL_OW 313
41546: PUSH
41547: LD_INT 3
41549: LESS
41550: IFFALSE 41586
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41552: LD_INT 0
41554: PPUSH
41555: LD_INT 5
41557: PUSH
41558: LD_INT 8
41560: PUSH
41561: LD_INT 9
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: PUSH
41569: LD_VAR 0 17
41573: ARRAY
41574: PPUSH
41575: LD_VAR 0 4
41579: PPUSH
41580: CALL_OW 380
41584: GO 41603
// PrepareHuman ( false , i , skill ) ;
41586: LD_INT 0
41588: PPUSH
41589: LD_VAR 0 8
41593: PPUSH
41594: LD_VAR 0 4
41598: PPUSH
41599: CALL_OW 380
// end else
41603: GO 41622
// PrepareHuman ( false , i , skill ) ;
41605: LD_INT 0
41607: PPUSH
41608: LD_VAR 0 8
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: CALL_OW 380
// un := CreateHuman ;
41622: LD_ADDR_VAR 0 14
41626: PUSH
41627: CALL_OW 44
41631: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41632: LD_ADDR_VAR 0 7
41636: PUSH
41637: LD_VAR 0 7
41641: PPUSH
41642: LD_INT 1
41644: PPUSH
41645: LD_VAR 0 14
41649: PPUSH
41650: CALL_OW 2
41654: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41655: LD_VAR 0 14
41659: PPUSH
41660: LD_VAR 0 9
41664: PPUSH
41665: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41669: LD_VAR 0 9
41673: PPUSH
41674: CALL_OW 313
41678: PUSH
41679: LD_INT 6
41681: EQUAL
41682: PUSH
41683: LD_VAR 0 9
41687: PPUSH
41688: CALL_OW 266
41692: PUSH
41693: LD_INT 32
41695: PUSH
41696: LD_INT 31
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: IN
41703: OR
41704: IFFALSE 41518
41706: GO 41515
41708: POP
41709: POP
// end else
41710: GO 42092
// for j = 1 to x do
41712: LD_ADDR_VAR 0 9
41716: PUSH
41717: DOUBLE
41718: LD_INT 1
41720: DEC
41721: ST_TO_ADDR
41722: LD_VAR 0 13
41726: PUSH
41727: FOR_TO
41728: IFFALSE 42090
// begin InitHc ;
41730: CALL_OW 19
// if not f then
41734: LD_VAR 0 12
41738: NOT
41739: IFFALSE 41828
// begin PrepareHuman ( false , i , skill ) ;
41741: LD_INT 0
41743: PPUSH
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_VAR 0 4
41753: PPUSH
41754: CALL_OW 380
// un := CreateHuman ;
41758: LD_ADDR_VAR 0 14
41762: PUSH
41763: CALL_OW 44
41767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41768: LD_ADDR_VAR 0 7
41772: PUSH
41773: LD_VAR 0 7
41777: PPUSH
41778: LD_INT 1
41780: PPUSH
41781: LD_VAR 0 14
41785: PPUSH
41786: CALL_OW 2
41790: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41791: LD_VAR 0 14
41795: PPUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 250
41805: PPUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 251
41815: PPUSH
41816: LD_INT 10
41818: PPUSH
41819: LD_INT 0
41821: PPUSH
41822: CALL_OW 50
// continue ;
41826: GO 41727
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41828: LD_VAR 0 12
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PPUSH
41837: CALL_OW 313
41841: PUSH
41842: LD_VAR 0 12
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: PPUSH
41851: CALL_OW 266
41855: PUSH
41856: LD_INT 32
41858: PUSH
41859: LD_INT 31
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: IN
41866: AND
41867: PUSH
41868: LD_VAR 0 12
41872: PUSH
41873: LD_INT 1
41875: ARRAY
41876: PPUSH
41877: CALL_OW 313
41881: PUSH
41882: LD_INT 6
41884: EQUAL
41885: OR
41886: IFFALSE 41906
// f := Delete ( f , 1 ) ;
41888: LD_ADDR_VAR 0 12
41892: PUSH
41893: LD_VAR 0 12
41897: PPUSH
41898: LD_INT 1
41900: PPUSH
41901: CALL_OW 3
41905: ST_TO_ADDR
// if not f then
41906: LD_VAR 0 12
41910: NOT
41911: IFFALSE 41929
// begin x := x + 2 ;
41913: LD_ADDR_VAR 0 13
41917: PUSH
41918: LD_VAR 0 13
41922: PUSH
41923: LD_INT 2
41925: PLUS
41926: ST_TO_ADDR
// continue ;
41927: GO 41727
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41929: LD_VAR 0 12
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: PPUSH
41938: CALL_OW 266
41942: PUSH
41943: LD_INT 5
41945: EQUAL
41946: IFFALSE 42020
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41948: LD_VAR 0 12
41952: PUSH
41953: LD_INT 1
41955: ARRAY
41956: PPUSH
41957: CALL_OW 313
41961: PUSH
41962: LD_INT 3
41964: LESS
41965: IFFALSE 42001
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41967: LD_INT 0
41969: PPUSH
41970: LD_INT 5
41972: PUSH
41973: LD_INT 8
41975: PUSH
41976: LD_INT 9
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: PUSH
41984: LD_VAR 0 17
41988: ARRAY
41989: PPUSH
41990: LD_VAR 0 4
41994: PPUSH
41995: CALL_OW 380
41999: GO 42018
// PrepareHuman ( false , i , skill ) ;
42001: LD_INT 0
42003: PPUSH
42004: LD_VAR 0 8
42008: PPUSH
42009: LD_VAR 0 4
42013: PPUSH
42014: CALL_OW 380
// end else
42018: GO 42037
// PrepareHuman ( false , i , skill ) ;
42020: LD_INT 0
42022: PPUSH
42023: LD_VAR 0 8
42027: PPUSH
42028: LD_VAR 0 4
42032: PPUSH
42033: CALL_OW 380
// un := CreateHuman ;
42037: LD_ADDR_VAR 0 14
42041: PUSH
42042: CALL_OW 44
42046: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42047: LD_ADDR_VAR 0 7
42051: PUSH
42052: LD_VAR 0 7
42056: PPUSH
42057: LD_INT 1
42059: PPUSH
42060: LD_VAR 0 14
42064: PPUSH
42065: CALL_OW 2
42069: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42070: LD_VAR 0 14
42074: PPUSH
42075: LD_VAR 0 12
42079: PUSH
42080: LD_INT 1
42082: ARRAY
42083: PPUSH
42084: CALL_OW 52
// end ;
42088: GO 41727
42090: POP
42091: POP
// end ;
42092: GO 41029
42094: POP
42095: POP
// result := result ^ buildings ;
42096: LD_ADDR_VAR 0 7
42100: PUSH
42101: LD_VAR 0 7
42105: PUSH
42106: LD_VAR 0 18
42110: ADD
42111: ST_TO_ADDR
// end else
42112: GO 42255
// begin for i = 1 to personel do
42114: LD_ADDR_VAR 0 8
42118: PUSH
42119: DOUBLE
42120: LD_INT 1
42122: DEC
42123: ST_TO_ADDR
42124: LD_VAR 0 6
42128: PUSH
42129: FOR_TO
42130: IFFALSE 42253
// begin if i > 4 then
42132: LD_VAR 0 8
42136: PUSH
42137: LD_INT 4
42139: GREATER
42140: IFFALSE 42144
// break ;
42142: GO 42253
// x := personel [ i ] ;
42144: LD_ADDR_VAR 0 13
42148: PUSH
42149: LD_VAR 0 6
42153: PUSH
42154: LD_VAR 0 8
42158: ARRAY
42159: ST_TO_ADDR
// if x = - 1 then
42160: LD_VAR 0 13
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: EQUAL
42169: IFFALSE 42173
// continue ;
42171: GO 42129
// PrepareHuman ( false , i , skill ) ;
42173: LD_INT 0
42175: PPUSH
42176: LD_VAR 0 8
42180: PPUSH
42181: LD_VAR 0 4
42185: PPUSH
42186: CALL_OW 380
// un := CreateHuman ;
42190: LD_ADDR_VAR 0 14
42194: PUSH
42195: CALL_OW 44
42199: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42200: LD_VAR 0 14
42204: PPUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 250
42214: PPUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: CALL_OW 251
42224: PPUSH
42225: LD_INT 10
42227: PPUSH
42228: LD_INT 0
42230: PPUSH
42231: CALL_OW 50
// result := result ^ un ;
42235: LD_ADDR_VAR 0 7
42239: PUSH
42240: LD_VAR 0 7
42244: PUSH
42245: LD_VAR 0 14
42249: ADD
42250: ST_TO_ADDR
// end ;
42251: GO 42129
42253: POP
42254: POP
// end ; end ;
42255: LD_VAR 0 7
42259: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42260: LD_INT 0
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
// result := false ;
42278: LD_ADDR_VAR 0 3
42282: PUSH
42283: LD_INT 0
42285: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42286: LD_VAR 0 1
42290: NOT
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 266
42301: PUSH
42302: LD_INT 32
42304: PUSH
42305: LD_INT 33
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: IN
42312: NOT
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 43427
// nat := GetNation ( tower ) ;
42318: LD_ADDR_VAR 0 12
42322: PUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 248
42332: ST_TO_ADDR
// side := GetSide ( tower ) ;
42333: LD_ADDR_VAR 0 16
42337: PUSH
42338: LD_VAR 0 1
42342: PPUSH
42343: CALL_OW 255
42347: ST_TO_ADDR
// x := GetX ( tower ) ;
42348: LD_ADDR_VAR 0 10
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 250
42362: ST_TO_ADDR
// y := GetY ( tower ) ;
42363: LD_ADDR_VAR 0 11
42367: PUSH
42368: LD_VAR 0 1
42372: PPUSH
42373: CALL_OW 251
42377: ST_TO_ADDR
// if not x or not y then
42378: LD_VAR 0 10
42382: NOT
42383: PUSH
42384: LD_VAR 0 11
42388: NOT
42389: OR
42390: IFFALSE 42394
// exit ;
42392: GO 43427
// weapon := 0 ;
42394: LD_ADDR_VAR 0 18
42398: PUSH
42399: LD_INT 0
42401: ST_TO_ADDR
// fac_list := [ ] ;
42402: LD_ADDR_VAR 0 17
42406: PUSH
42407: EMPTY
42408: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42409: LD_ADDR_VAR 0 6
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 274
42423: PPUSH
42424: LD_VAR 0 2
42428: PPUSH
42429: LD_INT 0
42431: PPUSH
42432: CALL 39998 0 3
42436: PPUSH
42437: LD_INT 30
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PPUSH
42447: CALL_OW 72
42451: ST_TO_ADDR
// if not factories then
42452: LD_VAR 0 6
42456: NOT
42457: IFFALSE 42461
// exit ;
42459: GO 43427
// for i in factories do
42461: LD_ADDR_VAR 0 8
42465: PUSH
42466: LD_VAR 0 6
42470: PUSH
42471: FOR_IN
42472: IFFALSE 42497
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42474: LD_ADDR_VAR 0 17
42478: PUSH
42479: LD_VAR 0 17
42483: PUSH
42484: LD_VAR 0 8
42488: PPUSH
42489: CALL_OW 478
42493: UNION
42494: ST_TO_ADDR
42495: GO 42471
42497: POP
42498: POP
// if not fac_list then
42499: LD_VAR 0 17
42503: NOT
42504: IFFALSE 42508
// exit ;
42506: GO 43427
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42508: LD_ADDR_VAR 0 5
42512: PUSH
42513: LD_INT 4
42515: PUSH
42516: LD_INT 5
42518: PUSH
42519: LD_INT 9
42521: PUSH
42522: LD_INT 10
42524: PUSH
42525: LD_INT 6
42527: PUSH
42528: LD_INT 7
42530: PUSH
42531: LD_INT 11
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 27
42545: PUSH
42546: LD_INT 28
42548: PUSH
42549: LD_INT 26
42551: PUSH
42552: LD_INT 30
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 43
42563: PUSH
42564: LD_INT 44
42566: PUSH
42567: LD_INT 46
42569: PUSH
42570: LD_INT 45
42572: PUSH
42573: LD_INT 47
42575: PUSH
42576: LD_INT 49
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: PUSH
42592: LD_VAR 0 12
42596: ARRAY
42597: ST_TO_ADDR
// list := list isect fac_list ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: LD_VAR 0 5
42607: PUSH
42608: LD_VAR 0 17
42612: ISECT
42613: ST_TO_ADDR
// if not list then
42614: LD_VAR 0 5
42618: NOT
42619: IFFALSE 42623
// exit ;
42621: GO 43427
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42623: LD_VAR 0 12
42627: PUSH
42628: LD_INT 3
42630: EQUAL
42631: PUSH
42632: LD_INT 49
42634: PUSH
42635: LD_VAR 0 5
42639: IN
42640: AND
42641: PUSH
42642: LD_INT 31
42644: PPUSH
42645: LD_VAR 0 16
42649: PPUSH
42650: CALL_OW 321
42654: PUSH
42655: LD_INT 2
42657: EQUAL
42658: AND
42659: IFFALSE 42719
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42661: LD_INT 22
42663: PUSH
42664: LD_VAR 0 16
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 35
42675: PUSH
42676: LD_INT 49
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 91
42685: PUSH
42686: LD_VAR 0 1
42690: PUSH
42691: LD_INT 10
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: PPUSH
42704: CALL_OW 69
42708: NOT
42709: IFFALSE 42719
// weapon := ru_time_lapser ;
42711: LD_ADDR_VAR 0 18
42715: PUSH
42716: LD_INT 49
42718: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42719: LD_VAR 0 12
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: IN
42734: PUSH
42735: LD_INT 11
42737: PUSH
42738: LD_VAR 0 5
42742: IN
42743: PUSH
42744: LD_INT 30
42746: PUSH
42747: LD_VAR 0 5
42751: IN
42752: OR
42753: AND
42754: PUSH
42755: LD_INT 6
42757: PPUSH
42758: LD_VAR 0 16
42762: PPUSH
42763: CALL_OW 321
42767: PUSH
42768: LD_INT 2
42770: EQUAL
42771: AND
42772: IFFALSE 42937
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42774: LD_INT 22
42776: PUSH
42777: LD_VAR 0 16
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: LD_INT 35
42791: PUSH
42792: LD_INT 11
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 35
42801: PUSH
42802: LD_INT 30
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 91
42816: PUSH
42817: LD_VAR 0 1
42821: PUSH
42822: LD_INT 18
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: PPUSH
42835: CALL_OW 69
42839: NOT
42840: PUSH
42841: LD_INT 22
42843: PUSH
42844: LD_VAR 0 16
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: LD_INT 30
42858: PUSH
42859: LD_INT 32
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: LD_INT 33
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 91
42883: PUSH
42884: LD_VAR 0 1
42888: PUSH
42889: LD_INT 12
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: PPUSH
42905: CALL_OW 69
42909: PUSH
42910: LD_INT 2
42912: GREATER
42913: AND
42914: IFFALSE 42937
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42916: LD_ADDR_VAR 0 18
42920: PUSH
42921: LD_INT 11
42923: PUSH
42924: LD_INT 30
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_VAR 0 12
42935: ARRAY
42936: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42937: LD_VAR 0 18
42941: NOT
42942: PUSH
42943: LD_INT 40
42945: PPUSH
42946: LD_VAR 0 16
42950: PPUSH
42951: CALL_OW 321
42955: PUSH
42956: LD_INT 2
42958: EQUAL
42959: AND
42960: PUSH
42961: LD_INT 7
42963: PUSH
42964: LD_VAR 0 5
42968: IN
42969: PUSH
42970: LD_INT 28
42972: PUSH
42973: LD_VAR 0 5
42977: IN
42978: OR
42979: PUSH
42980: LD_INT 45
42982: PUSH
42983: LD_VAR 0 5
42987: IN
42988: OR
42989: AND
42990: IFFALSE 43244
// begin hex := GetHexInfo ( x , y ) ;
42992: LD_ADDR_VAR 0 4
42996: PUSH
42997: LD_VAR 0 10
43001: PPUSH
43002: LD_VAR 0 11
43006: PPUSH
43007: CALL_OW 546
43011: ST_TO_ADDR
// if hex [ 1 ] then
43012: LD_VAR 0 4
43016: PUSH
43017: LD_INT 1
43019: ARRAY
43020: IFFALSE 43024
// exit ;
43022: GO 43427
// height := hex [ 2 ] ;
43024: LD_ADDR_VAR 0 15
43028: PUSH
43029: LD_VAR 0 4
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43038: LD_ADDR_VAR 0 14
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 5
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
// for i in tmp do
43061: LD_ADDR_VAR 0 8
43065: PUSH
43066: LD_VAR 0 14
43070: PUSH
43071: FOR_IN
43072: IFFALSE 43242
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43074: LD_ADDR_VAR 0 9
43078: PUSH
43079: LD_VAR 0 10
43083: PPUSH
43084: LD_VAR 0 8
43088: PPUSH
43089: LD_INT 5
43091: PPUSH
43092: CALL_OW 272
43096: PUSH
43097: LD_VAR 0 11
43101: PPUSH
43102: LD_VAR 0 8
43106: PPUSH
43107: LD_INT 5
43109: PPUSH
43110: CALL_OW 273
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43119: LD_VAR 0 9
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: PPUSH
43128: LD_VAR 0 9
43132: PUSH
43133: LD_INT 2
43135: ARRAY
43136: PPUSH
43137: CALL_OW 488
43141: IFFALSE 43240
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43143: LD_ADDR_VAR 0 4
43147: PUSH
43148: LD_VAR 0 9
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: LD_VAR 0 9
43161: PUSH
43162: LD_INT 2
43164: ARRAY
43165: PPUSH
43166: CALL_OW 546
43170: ST_TO_ADDR
// if hex [ 1 ] then
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: IFFALSE 43183
// continue ;
43181: GO 43071
// h := hex [ 2 ] ;
43183: LD_ADDR_VAR 0 13
43187: PUSH
43188: LD_VAR 0 4
43192: PUSH
43193: LD_INT 2
43195: ARRAY
43196: ST_TO_ADDR
// if h + 7 < height then
43197: LD_VAR 0 13
43201: PUSH
43202: LD_INT 7
43204: PLUS
43205: PUSH
43206: LD_VAR 0 15
43210: LESS
43211: IFFALSE 43240
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43213: LD_ADDR_VAR 0 18
43217: PUSH
43218: LD_INT 7
43220: PUSH
43221: LD_INT 28
43223: PUSH
43224: LD_INT 45
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: PUSH
43232: LD_VAR 0 12
43236: ARRAY
43237: ST_TO_ADDR
// break ;
43238: GO 43242
// end ; end ; end ;
43240: GO 43071
43242: POP
43243: POP
// end ; if not weapon then
43244: LD_VAR 0 18
43248: NOT
43249: IFFALSE 43309
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43251: LD_ADDR_VAR 0 5
43255: PUSH
43256: LD_VAR 0 5
43260: PUSH
43261: LD_INT 11
43263: PUSH
43264: LD_INT 30
43266: PUSH
43267: LD_INT 49
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: DIFF
43275: ST_TO_ADDR
// if not list then
43276: LD_VAR 0 5
43280: NOT
43281: IFFALSE 43285
// exit ;
43283: GO 43427
// weapon := list [ rand ( 1 , list ) ] ;
43285: LD_ADDR_VAR 0 18
43289: PUSH
43290: LD_VAR 0 5
43294: PUSH
43295: LD_INT 1
43297: PPUSH
43298: LD_VAR 0 5
43302: PPUSH
43303: CALL_OW 12
43307: ARRAY
43308: ST_TO_ADDR
// end ; if weapon then
43309: LD_VAR 0 18
43313: IFFALSE 43427
// begin tmp := CostOfWeapon ( weapon ) ;
43315: LD_ADDR_VAR 0 14
43319: PUSH
43320: LD_VAR 0 18
43324: PPUSH
43325: CALL_OW 451
43329: ST_TO_ADDR
// j := GetBase ( tower ) ;
43330: LD_ADDR_VAR 0 9
43334: PUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 274
43344: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43345: LD_VAR 0 9
43349: PPUSH
43350: LD_INT 1
43352: PPUSH
43353: CALL_OW 275
43357: PUSH
43358: LD_VAR 0 14
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: GREATEREQUAL
43367: PUSH
43368: LD_VAR 0 9
43372: PPUSH
43373: LD_INT 2
43375: PPUSH
43376: CALL_OW 275
43380: PUSH
43381: LD_VAR 0 14
43385: PUSH
43386: LD_INT 2
43388: ARRAY
43389: GREATEREQUAL
43390: AND
43391: PUSH
43392: LD_VAR 0 9
43396: PPUSH
43397: LD_INT 3
43399: PPUSH
43400: CALL_OW 275
43404: PUSH
43405: LD_VAR 0 14
43409: PUSH
43410: LD_INT 3
43412: ARRAY
43413: GREATEREQUAL
43414: AND
43415: IFFALSE 43427
// result := weapon ;
43417: LD_ADDR_VAR 0 3
43421: PUSH
43422: LD_VAR 0 18
43426: ST_TO_ADDR
// end ; end ;
43427: LD_VAR 0 3
43431: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43432: LD_INT 0
43434: PPUSH
43435: PPUSH
// result := true ;
43436: LD_ADDR_VAR 0 3
43440: PUSH
43441: LD_INT 1
43443: ST_TO_ADDR
// if array1 = array2 then
43444: LD_VAR 0 1
43448: PUSH
43449: LD_VAR 0 2
43453: EQUAL
43454: IFFALSE 43514
// begin for i = 1 to array1 do
43456: LD_ADDR_VAR 0 4
43460: PUSH
43461: DOUBLE
43462: LD_INT 1
43464: DEC
43465: ST_TO_ADDR
43466: LD_VAR 0 1
43470: PUSH
43471: FOR_TO
43472: IFFALSE 43510
// if array1 [ i ] <> array2 [ i ] then
43474: LD_VAR 0 1
43478: PUSH
43479: LD_VAR 0 4
43483: ARRAY
43484: PUSH
43485: LD_VAR 0 2
43489: PUSH
43490: LD_VAR 0 4
43494: ARRAY
43495: NONEQUAL
43496: IFFALSE 43508
// begin result := false ;
43498: LD_ADDR_VAR 0 3
43502: PUSH
43503: LD_INT 0
43505: ST_TO_ADDR
// break ;
43506: GO 43510
// end ;
43508: GO 43471
43510: POP
43511: POP
// end else
43512: GO 43522
// result := false ;
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_INT 0
43521: ST_TO_ADDR
// end ;
43522: LD_VAR 0 3
43526: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43527: LD_INT 0
43529: PPUSH
43530: PPUSH
// if not array1 or not array2 then
43531: LD_VAR 0 1
43535: NOT
43536: PUSH
43537: LD_VAR 0 2
43541: NOT
43542: OR
43543: IFFALSE 43547
// exit ;
43545: GO 43611
// result := true ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_INT 1
43554: ST_TO_ADDR
// for i = 1 to array1 do
43555: LD_ADDR_VAR 0 4
43559: PUSH
43560: DOUBLE
43561: LD_INT 1
43563: DEC
43564: ST_TO_ADDR
43565: LD_VAR 0 1
43569: PUSH
43570: FOR_TO
43571: IFFALSE 43609
// if array1 [ i ] <> array2 [ i ] then
43573: LD_VAR 0 1
43577: PUSH
43578: LD_VAR 0 4
43582: ARRAY
43583: PUSH
43584: LD_VAR 0 2
43588: PUSH
43589: LD_VAR 0 4
43593: ARRAY
43594: NONEQUAL
43595: IFFALSE 43607
// begin result := false ;
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 0
43604: ST_TO_ADDR
// break ;
43605: GO 43609
// end ;
43607: GO 43570
43609: POP
43610: POP
// end ;
43611: LD_VAR 0 3
43615: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43616: LD_INT 0
43618: PPUSH
43619: PPUSH
43620: PPUSH
// pom := GetBase ( fac ) ;
43621: LD_ADDR_VAR 0 5
43625: PUSH
43626: LD_VAR 0 1
43630: PPUSH
43631: CALL_OW 274
43635: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43636: LD_ADDR_VAR 0 4
43640: PUSH
43641: LD_VAR 0 2
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PPUSH
43650: LD_VAR 0 2
43654: PUSH
43655: LD_INT 2
43657: ARRAY
43658: PPUSH
43659: LD_VAR 0 2
43663: PUSH
43664: LD_INT 3
43666: ARRAY
43667: PPUSH
43668: LD_VAR 0 2
43672: PUSH
43673: LD_INT 4
43675: ARRAY
43676: PPUSH
43677: CALL_OW 449
43681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43682: LD_ADDR_VAR 0 3
43686: PUSH
43687: LD_VAR 0 5
43691: PPUSH
43692: LD_INT 1
43694: PPUSH
43695: CALL_OW 275
43699: PUSH
43700: LD_VAR 0 4
43704: PUSH
43705: LD_INT 1
43707: ARRAY
43708: GREATEREQUAL
43709: PUSH
43710: LD_VAR 0 5
43714: PPUSH
43715: LD_INT 2
43717: PPUSH
43718: CALL_OW 275
43722: PUSH
43723: LD_VAR 0 4
43727: PUSH
43728: LD_INT 2
43730: ARRAY
43731: GREATEREQUAL
43732: AND
43733: PUSH
43734: LD_VAR 0 5
43738: PPUSH
43739: LD_INT 3
43741: PPUSH
43742: CALL_OW 275
43746: PUSH
43747: LD_VAR 0 4
43751: PUSH
43752: LD_INT 3
43754: ARRAY
43755: GREATEREQUAL
43756: AND
43757: ST_TO_ADDR
// end ;
43758: LD_VAR 0 3
43762: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43763: LD_INT 0
43765: PPUSH
43766: PPUSH
43767: PPUSH
43768: PPUSH
// pom := GetBase ( building ) ;
43769: LD_ADDR_VAR 0 3
43773: PUSH
43774: LD_VAR 0 1
43778: PPUSH
43779: CALL_OW 274
43783: ST_TO_ADDR
// if not pom then
43784: LD_VAR 0 3
43788: NOT
43789: IFFALSE 43793
// exit ;
43791: GO 43963
// btype := GetBType ( building ) ;
43793: LD_ADDR_VAR 0 5
43797: PUSH
43798: LD_VAR 0 1
43802: PPUSH
43803: CALL_OW 266
43807: ST_TO_ADDR
// if btype = b_armoury then
43808: LD_VAR 0 5
43812: PUSH
43813: LD_INT 4
43815: EQUAL
43816: IFFALSE 43826
// btype := b_barracks ;
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_INT 5
43825: ST_TO_ADDR
// if btype = b_depot then
43826: LD_VAR 0 5
43830: PUSH
43831: LD_INT 0
43833: EQUAL
43834: IFFALSE 43844
// btype := b_warehouse ;
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: LD_INT 1
43843: ST_TO_ADDR
// if btype = b_workshop then
43844: LD_VAR 0 5
43848: PUSH
43849: LD_INT 2
43851: EQUAL
43852: IFFALSE 43862
// btype := b_factory ;
43854: LD_ADDR_VAR 0 5
43858: PUSH
43859: LD_INT 3
43861: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43862: LD_ADDR_VAR 0 4
43866: PUSH
43867: LD_VAR 0 5
43871: PPUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 248
43881: PPUSH
43882: CALL_OW 450
43886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43887: LD_ADDR_VAR 0 2
43891: PUSH
43892: LD_VAR 0 3
43896: PPUSH
43897: LD_INT 1
43899: PPUSH
43900: CALL_OW 275
43904: PUSH
43905: LD_VAR 0 4
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: GREATEREQUAL
43914: PUSH
43915: LD_VAR 0 3
43919: PPUSH
43920: LD_INT 2
43922: PPUSH
43923: CALL_OW 275
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: GREATEREQUAL
43937: AND
43938: PUSH
43939: LD_VAR 0 3
43943: PPUSH
43944: LD_INT 3
43946: PPUSH
43947: CALL_OW 275
43951: PUSH
43952: LD_VAR 0 4
43956: PUSH
43957: LD_INT 3
43959: ARRAY
43960: GREATEREQUAL
43961: AND
43962: ST_TO_ADDR
// end ;
43963: LD_VAR 0 2
43967: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43968: LD_INT 0
43970: PPUSH
43971: PPUSH
43972: PPUSH
// pom := GetBase ( building ) ;
43973: LD_ADDR_VAR 0 4
43977: PUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: CALL_OW 274
43987: ST_TO_ADDR
// if not pom then
43988: LD_VAR 0 4
43992: NOT
43993: IFFALSE 43997
// exit ;
43995: GO 44098
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43997: LD_ADDR_VAR 0 5
44001: PUSH
44002: LD_VAR 0 2
44006: PPUSH
44007: LD_VAR 0 1
44011: PPUSH
44012: CALL_OW 248
44016: PPUSH
44017: CALL_OW 450
44021: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44022: LD_ADDR_VAR 0 3
44026: PUSH
44027: LD_VAR 0 4
44031: PPUSH
44032: LD_INT 1
44034: PPUSH
44035: CALL_OW 275
44039: PUSH
44040: LD_VAR 0 5
44044: PUSH
44045: LD_INT 1
44047: ARRAY
44048: GREATEREQUAL
44049: PUSH
44050: LD_VAR 0 4
44054: PPUSH
44055: LD_INT 2
44057: PPUSH
44058: CALL_OW 275
44062: PUSH
44063: LD_VAR 0 5
44067: PUSH
44068: LD_INT 2
44070: ARRAY
44071: GREATEREQUAL
44072: AND
44073: PUSH
44074: LD_VAR 0 4
44078: PPUSH
44079: LD_INT 3
44081: PPUSH
44082: CALL_OW 275
44086: PUSH
44087: LD_VAR 0 5
44091: PUSH
44092: LD_INT 3
44094: ARRAY
44095: GREATEREQUAL
44096: AND
44097: ST_TO_ADDR
// end ;
44098: LD_VAR 0 3
44102: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44103: LD_INT 0
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
// result := false ;
44116: LD_ADDR_VAR 0 8
44120: PUSH
44121: LD_INT 0
44123: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44124: LD_VAR 0 5
44128: NOT
44129: PUSH
44130: LD_VAR 0 1
44134: NOT
44135: OR
44136: PUSH
44137: LD_VAR 0 2
44141: NOT
44142: OR
44143: PUSH
44144: LD_VAR 0 3
44148: NOT
44149: OR
44150: IFFALSE 44154
// exit ;
44152: GO 44968
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44154: LD_ADDR_VAR 0 14
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: LD_VAR 0 2
44168: PPUSH
44169: LD_VAR 0 3
44173: PPUSH
44174: LD_VAR 0 4
44178: PPUSH
44179: LD_VAR 0 5
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PPUSH
44188: CALL_OW 248
44192: PPUSH
44193: LD_INT 0
44195: PPUSH
44196: CALL 46221 0 6
44200: ST_TO_ADDR
// if not hexes then
44201: LD_VAR 0 14
44205: NOT
44206: IFFALSE 44210
// exit ;
44208: GO 44968
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44210: LD_ADDR_VAR 0 17
44214: PUSH
44215: LD_VAR 0 5
44219: PPUSH
44220: LD_INT 22
44222: PUSH
44223: LD_VAR 0 13
44227: PPUSH
44228: CALL_OW 255
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 30
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 30
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PPUSH
44269: CALL_OW 72
44273: ST_TO_ADDR
// for i = 1 to hexes do
44274: LD_ADDR_VAR 0 9
44278: PUSH
44279: DOUBLE
44280: LD_INT 1
44282: DEC
44283: ST_TO_ADDR
44284: LD_VAR 0 14
44288: PUSH
44289: FOR_TO
44290: IFFALSE 44966
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44292: LD_ADDR_VAR 0 13
44296: PUSH
44297: LD_VAR 0 14
44301: PUSH
44302: LD_VAR 0 9
44306: ARRAY
44307: PUSH
44308: LD_INT 1
44310: ARRAY
44311: PPUSH
44312: LD_VAR 0 14
44316: PUSH
44317: LD_VAR 0 9
44321: ARRAY
44322: PUSH
44323: LD_INT 2
44325: ARRAY
44326: PPUSH
44327: CALL_OW 428
44331: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44332: LD_VAR 0 14
44336: PUSH
44337: LD_VAR 0 9
44341: ARRAY
44342: PUSH
44343: LD_INT 1
44345: ARRAY
44346: PPUSH
44347: LD_VAR 0 14
44351: PUSH
44352: LD_VAR 0 9
44356: ARRAY
44357: PUSH
44358: LD_INT 2
44360: ARRAY
44361: PPUSH
44362: CALL_OW 351
44366: PUSH
44367: LD_VAR 0 14
44371: PUSH
44372: LD_VAR 0 9
44376: ARRAY
44377: PUSH
44378: LD_INT 1
44380: ARRAY
44381: PPUSH
44382: LD_VAR 0 14
44386: PUSH
44387: LD_VAR 0 9
44391: ARRAY
44392: PUSH
44393: LD_INT 2
44395: ARRAY
44396: PPUSH
44397: CALL_OW 488
44401: NOT
44402: OR
44403: PUSH
44404: LD_VAR 0 13
44408: PPUSH
44409: CALL_OW 247
44413: PUSH
44414: LD_INT 3
44416: EQUAL
44417: OR
44418: IFFALSE 44424
// exit ;
44420: POP
44421: POP
44422: GO 44968
// if not tmp then
44424: LD_VAR 0 13
44428: NOT
44429: IFFALSE 44433
// continue ;
44431: GO 44289
// result := true ;
44433: LD_ADDR_VAR 0 8
44437: PUSH
44438: LD_INT 1
44440: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44441: LD_VAR 0 6
44445: PUSH
44446: LD_VAR 0 13
44450: PPUSH
44451: CALL_OW 247
44455: PUSH
44456: LD_INT 2
44458: EQUAL
44459: AND
44460: PUSH
44461: LD_VAR 0 13
44465: PPUSH
44466: CALL_OW 263
44470: PUSH
44471: LD_INT 1
44473: EQUAL
44474: AND
44475: IFFALSE 44639
// begin if IsDrivenBy ( tmp ) then
44477: LD_VAR 0 13
44481: PPUSH
44482: CALL_OW 311
44486: IFFALSE 44490
// continue ;
44488: GO 44289
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44490: LD_VAR 0 6
44494: PPUSH
44495: LD_INT 3
44497: PUSH
44498: LD_INT 60
44500: PUSH
44501: EMPTY
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: LD_INT 55
44513: PUSH
44514: EMPTY
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PPUSH
44525: CALL_OW 72
44529: IFFALSE 44637
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44531: LD_ADDR_VAR 0 18
44535: PUSH
44536: LD_VAR 0 6
44540: PPUSH
44541: LD_INT 3
44543: PUSH
44544: LD_INT 60
44546: PUSH
44547: EMPTY
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: LD_INT 55
44559: PUSH
44560: EMPTY
44561: LIST
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PPUSH
44571: CALL_OW 72
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: ST_TO_ADDR
// if IsInUnit ( driver ) then
44580: LD_VAR 0 18
44584: PPUSH
44585: CALL_OW 310
44589: IFFALSE 44600
// ComExit ( driver ) ;
44591: LD_VAR 0 18
44595: PPUSH
44596: CALL 70002 0 1
// AddComEnterUnit ( driver , tmp ) ;
44600: LD_VAR 0 18
44604: PPUSH
44605: LD_VAR 0 13
44609: PPUSH
44610: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44614: LD_VAR 0 18
44618: PPUSH
44619: LD_VAR 0 7
44623: PPUSH
44624: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44628: LD_VAR 0 18
44632: PPUSH
44633: CALL_OW 181
// end ; continue ;
44637: GO 44289
// end ; if not cleaners or not tmp in cleaners then
44639: LD_VAR 0 6
44643: NOT
44644: PUSH
44645: LD_VAR 0 13
44649: PUSH
44650: LD_VAR 0 6
44654: IN
44655: NOT
44656: OR
44657: IFFALSE 44964
// begin if dep then
44659: LD_VAR 0 17
44663: IFFALSE 44799
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44665: LD_ADDR_VAR 0 16
44669: PUSH
44670: LD_VAR 0 17
44674: PUSH
44675: LD_INT 1
44677: ARRAY
44678: PPUSH
44679: CALL_OW 250
44683: PPUSH
44684: LD_VAR 0 17
44688: PUSH
44689: LD_INT 1
44691: ARRAY
44692: PPUSH
44693: CALL_OW 254
44697: PPUSH
44698: LD_INT 5
44700: PPUSH
44701: CALL_OW 272
44705: PUSH
44706: LD_VAR 0 17
44710: PUSH
44711: LD_INT 1
44713: ARRAY
44714: PPUSH
44715: CALL_OW 251
44719: PPUSH
44720: LD_VAR 0 17
44724: PUSH
44725: LD_INT 1
44727: ARRAY
44728: PPUSH
44729: CALL_OW 254
44733: PPUSH
44734: LD_INT 5
44736: PPUSH
44737: CALL_OW 273
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44746: LD_VAR 0 16
44750: PUSH
44751: LD_INT 1
44753: ARRAY
44754: PPUSH
44755: LD_VAR 0 16
44759: PUSH
44760: LD_INT 2
44762: ARRAY
44763: PPUSH
44764: CALL_OW 488
44768: IFFALSE 44799
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44770: LD_VAR 0 13
44774: PPUSH
44775: LD_VAR 0 16
44779: PUSH
44780: LD_INT 1
44782: ARRAY
44783: PPUSH
44784: LD_VAR 0 16
44788: PUSH
44789: LD_INT 2
44791: ARRAY
44792: PPUSH
44793: CALL_OW 111
// continue ;
44797: GO 44289
// end ; end ; r := GetDir ( tmp ) ;
44799: LD_ADDR_VAR 0 15
44803: PUSH
44804: LD_VAR 0 13
44808: PPUSH
44809: CALL_OW 254
44813: ST_TO_ADDR
// if r = 5 then
44814: LD_VAR 0 15
44818: PUSH
44819: LD_INT 5
44821: EQUAL
44822: IFFALSE 44832
// r := 0 ;
44824: LD_ADDR_VAR 0 15
44828: PUSH
44829: LD_INT 0
44831: ST_TO_ADDR
// for j = r to 5 do
44832: LD_ADDR_VAR 0 10
44836: PUSH
44837: DOUBLE
44838: LD_VAR 0 15
44842: DEC
44843: ST_TO_ADDR
44844: LD_INT 5
44846: PUSH
44847: FOR_TO
44848: IFFALSE 44962
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44850: LD_ADDR_VAR 0 11
44854: PUSH
44855: LD_VAR 0 13
44859: PPUSH
44860: CALL_OW 250
44864: PPUSH
44865: LD_VAR 0 10
44869: PPUSH
44870: LD_INT 2
44872: PPUSH
44873: CALL_OW 272
44877: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44878: LD_ADDR_VAR 0 12
44882: PUSH
44883: LD_VAR 0 13
44887: PPUSH
44888: CALL_OW 251
44892: PPUSH
44893: LD_VAR 0 10
44897: PPUSH
44898: LD_INT 2
44900: PPUSH
44901: CALL_OW 273
44905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44906: LD_VAR 0 11
44910: PPUSH
44911: LD_VAR 0 12
44915: PPUSH
44916: CALL_OW 488
44920: PUSH
44921: LD_VAR 0 11
44925: PPUSH
44926: LD_VAR 0 12
44930: PPUSH
44931: CALL_OW 428
44935: NOT
44936: AND
44937: IFFALSE 44960
// begin ComMoveXY ( tmp , _x , _y ) ;
44939: LD_VAR 0 13
44943: PPUSH
44944: LD_VAR 0 11
44948: PPUSH
44949: LD_VAR 0 12
44953: PPUSH
44954: CALL_OW 111
// break ;
44958: GO 44962
// end ; end ;
44960: GO 44847
44962: POP
44963: POP
// end ; end ;
44964: GO 44289
44966: POP
44967: POP
// end ;
44968: LD_VAR 0 8
44972: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44973: LD_INT 0
44975: PPUSH
// result := true ;
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 24
44991: DOUBLE
44992: EQUAL
44993: IFTRUE 45003
44995: LD_INT 33
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45028
45003: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 32
45011: PPUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: CALL_OW 321
45021: PUSH
45022: LD_INT 2
45024: EQUAL
45025: ST_TO_ADDR
45026: GO 45344
45028: LD_INT 20
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45036
45034: GO 45061
45036: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45037: LD_ADDR_VAR 0 3
45041: PUSH
45042: LD_INT 6
45044: PPUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 321
45054: PUSH
45055: LD_INT 2
45057: EQUAL
45058: ST_TO_ADDR
45059: GO 45344
45061: LD_INT 22
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45075
45067: LD_INT 36
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45100
45075: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_INT 15
45083: PPUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 321
45093: PUSH
45094: LD_INT 2
45096: EQUAL
45097: ST_TO_ADDR
45098: GO 45344
45100: LD_INT 30
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45133
45108: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 20
45116: PPUSH
45117: LD_VAR 0 1
45121: PPUSH
45122: CALL_OW 321
45126: PUSH
45127: LD_INT 2
45129: EQUAL
45130: ST_TO_ADDR
45131: GO 45344
45133: LD_INT 28
45135: DOUBLE
45136: EQUAL
45137: IFTRUE 45147
45139: LD_INT 21
45141: DOUBLE
45142: EQUAL
45143: IFTRUE 45147
45145: GO 45172
45147: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45148: LD_ADDR_VAR 0 3
45152: PUSH
45153: LD_INT 21
45155: PPUSH
45156: LD_VAR 0 1
45160: PPUSH
45161: CALL_OW 321
45165: PUSH
45166: LD_INT 2
45168: EQUAL
45169: ST_TO_ADDR
45170: GO 45344
45172: LD_INT 16
45174: DOUBLE
45175: EQUAL
45176: IFTRUE 45180
45178: GO 45205
45180: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 84
45188: PPUSH
45189: LD_VAR 0 1
45193: PPUSH
45194: CALL_OW 321
45198: PUSH
45199: LD_INT 2
45201: EQUAL
45202: ST_TO_ADDR
45203: GO 45344
45205: LD_INT 19
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45219
45211: LD_INT 23
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45219
45217: GO 45244
45219: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45220: LD_ADDR_VAR 0 3
45224: PUSH
45225: LD_INT 83
45227: PPUSH
45228: LD_VAR 0 1
45232: PPUSH
45233: CALL_OW 321
45237: PUSH
45238: LD_INT 2
45240: EQUAL
45241: ST_TO_ADDR
45242: GO 45344
45244: LD_INT 17
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45277
45252: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 39
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 321
45270: PUSH
45271: LD_INT 2
45273: EQUAL
45274: ST_TO_ADDR
45275: GO 45344
45277: LD_INT 18
45279: DOUBLE
45280: EQUAL
45281: IFTRUE 45285
45283: GO 45310
45285: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45286: LD_ADDR_VAR 0 3
45290: PUSH
45291: LD_INT 40
45293: PPUSH
45294: LD_VAR 0 1
45298: PPUSH
45299: CALL_OW 321
45303: PUSH
45304: LD_INT 2
45306: EQUAL
45307: ST_TO_ADDR
45308: GO 45344
45310: LD_INT 27
45312: DOUBLE
45313: EQUAL
45314: IFTRUE 45318
45316: GO 45343
45318: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_INT 35
45326: PPUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: CALL_OW 321
45336: PUSH
45337: LD_INT 2
45339: EQUAL
45340: ST_TO_ADDR
45341: GO 45344
45343: POP
// end ;
45344: LD_VAR 0 3
45348: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45349: LD_INT 0
45351: PPUSH
45352: PPUSH
45353: PPUSH
45354: PPUSH
45355: PPUSH
45356: PPUSH
45357: PPUSH
45358: PPUSH
45359: PPUSH
45360: PPUSH
45361: PPUSH
// result := false ;
45362: LD_ADDR_VAR 0 6
45366: PUSH
45367: LD_INT 0
45369: ST_TO_ADDR
// if btype = b_depot then
45370: LD_VAR 0 2
45374: PUSH
45375: LD_INT 0
45377: EQUAL
45378: IFFALSE 45390
// begin result := true ;
45380: LD_ADDR_VAR 0 6
45384: PUSH
45385: LD_INT 1
45387: ST_TO_ADDR
// exit ;
45388: GO 46216
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45390: LD_VAR 0 1
45394: NOT
45395: PUSH
45396: LD_VAR 0 1
45400: PPUSH
45401: CALL_OW 266
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: IN
45416: NOT
45417: OR
45418: PUSH
45419: LD_VAR 0 2
45423: NOT
45424: OR
45425: PUSH
45426: LD_VAR 0 5
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 4
45445: PUSH
45446: LD_INT 5
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: IN
45457: NOT
45458: OR
45459: PUSH
45460: LD_VAR 0 3
45464: PPUSH
45465: LD_VAR 0 4
45469: PPUSH
45470: CALL_OW 488
45474: NOT
45475: OR
45476: IFFALSE 45480
// exit ;
45478: GO 46216
// side := GetSide ( depot ) ;
45480: LD_ADDR_VAR 0 9
45484: PUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: CALL_OW 255
45494: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45495: LD_VAR 0 9
45499: PPUSH
45500: LD_VAR 0 2
45504: PPUSH
45505: CALL 44973 0 2
45509: NOT
45510: IFFALSE 45514
// exit ;
45512: GO 46216
// pom := GetBase ( depot ) ;
45514: LD_ADDR_VAR 0 10
45518: PUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 274
45528: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45529: LD_ADDR_VAR 0 11
45533: PUSH
45534: LD_VAR 0 2
45538: PPUSH
45539: LD_VAR 0 1
45543: PPUSH
45544: CALL_OW 248
45548: PPUSH
45549: CALL_OW 450
45553: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45554: LD_VAR 0 10
45558: PPUSH
45559: LD_INT 1
45561: PPUSH
45562: CALL_OW 275
45566: PUSH
45567: LD_VAR 0 11
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: GREATEREQUAL
45576: PUSH
45577: LD_VAR 0 10
45581: PPUSH
45582: LD_INT 2
45584: PPUSH
45585: CALL_OW 275
45589: PUSH
45590: LD_VAR 0 11
45594: PUSH
45595: LD_INT 2
45597: ARRAY
45598: GREATEREQUAL
45599: AND
45600: PUSH
45601: LD_VAR 0 10
45605: PPUSH
45606: LD_INT 3
45608: PPUSH
45609: CALL_OW 275
45613: PUSH
45614: LD_VAR 0 11
45618: PUSH
45619: LD_INT 3
45621: ARRAY
45622: GREATEREQUAL
45623: AND
45624: NOT
45625: IFFALSE 45629
// exit ;
45627: GO 46216
// if GetBType ( depot ) = b_depot then
45629: LD_VAR 0 1
45633: PPUSH
45634: CALL_OW 266
45638: PUSH
45639: LD_INT 0
45641: EQUAL
45642: IFFALSE 45654
// dist := 28 else
45644: LD_ADDR_VAR 0 14
45648: PUSH
45649: LD_INT 28
45651: ST_TO_ADDR
45652: GO 45662
// dist := 36 ;
45654: LD_ADDR_VAR 0 14
45658: PUSH
45659: LD_INT 36
45661: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45662: LD_VAR 0 1
45666: PPUSH
45667: LD_VAR 0 3
45671: PPUSH
45672: LD_VAR 0 4
45676: PPUSH
45677: CALL_OW 297
45681: PUSH
45682: LD_VAR 0 14
45686: GREATER
45687: IFFALSE 45691
// exit ;
45689: GO 46216
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45691: LD_ADDR_VAR 0 12
45695: PUSH
45696: LD_VAR 0 2
45700: PPUSH
45701: LD_VAR 0 3
45705: PPUSH
45706: LD_VAR 0 4
45710: PPUSH
45711: LD_VAR 0 5
45715: PPUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 248
45725: PPUSH
45726: LD_INT 0
45728: PPUSH
45729: CALL 46221 0 6
45733: ST_TO_ADDR
// if not hexes then
45734: LD_VAR 0 12
45738: NOT
45739: IFFALSE 45743
// exit ;
45741: GO 46216
// hex := GetHexInfo ( x , y ) ;
45743: LD_ADDR_VAR 0 15
45747: PUSH
45748: LD_VAR 0 3
45752: PPUSH
45753: LD_VAR 0 4
45757: PPUSH
45758: CALL_OW 546
45762: ST_TO_ADDR
// if hex [ 1 ] then
45763: LD_VAR 0 15
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: IFFALSE 45775
// exit ;
45773: GO 46216
// height := hex [ 2 ] ;
45775: LD_ADDR_VAR 0 13
45779: PUSH
45780: LD_VAR 0 15
45784: PUSH
45785: LD_INT 2
45787: ARRAY
45788: ST_TO_ADDR
// for i = 1 to hexes do
45789: LD_ADDR_VAR 0 7
45793: PUSH
45794: DOUBLE
45795: LD_INT 1
45797: DEC
45798: ST_TO_ADDR
45799: LD_VAR 0 12
45803: PUSH
45804: FOR_TO
45805: IFFALSE 46135
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45807: LD_VAR 0 12
45811: PUSH
45812: LD_VAR 0 7
45816: ARRAY
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: PPUSH
45822: LD_VAR 0 12
45826: PUSH
45827: LD_VAR 0 7
45831: ARRAY
45832: PUSH
45833: LD_INT 2
45835: ARRAY
45836: PPUSH
45837: CALL_OW 488
45841: NOT
45842: PUSH
45843: LD_VAR 0 12
45847: PUSH
45848: LD_VAR 0 7
45852: ARRAY
45853: PUSH
45854: LD_INT 1
45856: ARRAY
45857: PPUSH
45858: LD_VAR 0 12
45862: PUSH
45863: LD_VAR 0 7
45867: ARRAY
45868: PUSH
45869: LD_INT 2
45871: ARRAY
45872: PPUSH
45873: CALL_OW 428
45877: PUSH
45878: LD_INT 0
45880: GREATER
45881: OR
45882: PUSH
45883: LD_VAR 0 12
45887: PUSH
45888: LD_VAR 0 7
45892: ARRAY
45893: PUSH
45894: LD_INT 1
45896: ARRAY
45897: PPUSH
45898: LD_VAR 0 12
45902: PUSH
45903: LD_VAR 0 7
45907: ARRAY
45908: PUSH
45909: LD_INT 2
45911: ARRAY
45912: PPUSH
45913: CALL_OW 351
45917: OR
45918: IFFALSE 45924
// exit ;
45920: POP
45921: POP
45922: GO 46216
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45924: LD_ADDR_VAR 0 8
45928: PUSH
45929: LD_VAR 0 12
45933: PUSH
45934: LD_VAR 0 7
45938: ARRAY
45939: PUSH
45940: LD_INT 1
45942: ARRAY
45943: PPUSH
45944: LD_VAR 0 12
45948: PUSH
45949: LD_VAR 0 7
45953: ARRAY
45954: PUSH
45955: LD_INT 2
45957: ARRAY
45958: PPUSH
45959: CALL_OW 546
45963: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45964: LD_VAR 0 8
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PUSH
45973: LD_VAR 0 8
45977: PUSH
45978: LD_INT 2
45980: ARRAY
45981: PUSH
45982: LD_VAR 0 13
45986: PUSH
45987: LD_INT 2
45989: PLUS
45990: GREATER
45991: OR
45992: PUSH
45993: LD_VAR 0 8
45997: PUSH
45998: LD_INT 2
46000: ARRAY
46001: PUSH
46002: LD_VAR 0 13
46006: PUSH
46007: LD_INT 2
46009: MINUS
46010: LESS
46011: OR
46012: PUSH
46013: LD_VAR 0 8
46017: PUSH
46018: LD_INT 3
46020: ARRAY
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 8
46027: PUSH
46028: LD_INT 9
46030: PUSH
46031: LD_INT 10
46033: PUSH
46034: LD_INT 11
46036: PUSH
46037: LD_INT 12
46039: PUSH
46040: LD_INT 13
46042: PUSH
46043: LD_INT 16
46045: PUSH
46046: LD_INT 17
46048: PUSH
46049: LD_INT 18
46051: PUSH
46052: LD_INT 19
46054: PUSH
46055: LD_INT 20
46057: PUSH
46058: LD_INT 21
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: IN
46076: NOT
46077: OR
46078: PUSH
46079: LD_VAR 0 8
46083: PUSH
46084: LD_INT 5
46086: ARRAY
46087: NOT
46088: OR
46089: PUSH
46090: LD_VAR 0 8
46094: PUSH
46095: LD_INT 6
46097: ARRAY
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 7
46107: PUSH
46108: LD_INT 9
46110: PUSH
46111: LD_INT 10
46113: PUSH
46114: LD_INT 11
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: IN
46125: NOT
46126: OR
46127: IFFALSE 46133
// exit ;
46129: POP
46130: POP
46131: GO 46216
// end ;
46133: GO 45804
46135: POP
46136: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46137: LD_VAR 0 9
46141: PPUSH
46142: LD_VAR 0 3
46146: PPUSH
46147: LD_VAR 0 4
46151: PPUSH
46152: LD_INT 20
46154: PPUSH
46155: CALL 38139 0 4
46159: PUSH
46160: LD_INT 4
46162: ARRAY
46163: IFFALSE 46167
// exit ;
46165: GO 46216
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46167: LD_VAR 0 2
46171: PUSH
46172: LD_INT 29
46174: PUSH
46175: LD_INT 30
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: IN
46182: PUSH
46183: LD_VAR 0 3
46187: PPUSH
46188: LD_VAR 0 4
46192: PPUSH
46193: LD_VAR 0 9
46197: PPUSH
46198: CALL_OW 440
46202: NOT
46203: AND
46204: IFFALSE 46208
// exit ;
46206: GO 46216
// result := true ;
46208: LD_ADDR_VAR 0 6
46212: PUSH
46213: LD_INT 1
46215: ST_TO_ADDR
// end ;
46216: LD_VAR 0 6
46220: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46221: LD_INT 0
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
// result = [ ] ;
46281: LD_ADDR_VAR 0 7
46285: PUSH
46286: EMPTY
46287: ST_TO_ADDR
// temp_list = [ ] ;
46288: LD_ADDR_VAR 0 9
46292: PUSH
46293: EMPTY
46294: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46295: LD_VAR 0 4
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: LD_INT 4
46314: PUSH
46315: LD_INT 5
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: IN
46326: NOT
46327: PUSH
46328: LD_VAR 0 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: IN
46343: PUSH
46344: LD_VAR 0 5
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: IN
46363: NOT
46364: AND
46365: OR
46366: IFFALSE 46370
// exit ;
46368: GO 64761
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46370: LD_VAR 0 1
46374: PUSH
46375: LD_INT 6
46377: PUSH
46378: LD_INT 7
46380: PUSH
46381: LD_INT 8
46383: PUSH
46384: LD_INT 13
46386: PUSH
46387: LD_INT 12
46389: PUSH
46390: LD_INT 15
46392: PUSH
46393: LD_INT 11
46395: PUSH
46396: LD_INT 14
46398: PUSH
46399: LD_INT 10
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: IN
46413: IFFALSE 46423
// btype = b_lab ;
46415: LD_ADDR_VAR 0 1
46419: PUSH
46420: LD_INT 6
46422: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46423: LD_VAR 0 6
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: IN
46442: NOT
46443: PUSH
46444: LD_VAR 0 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 6
46463: PUSH
46464: LD_INT 36
46466: PUSH
46467: LD_INT 4
46469: PUSH
46470: LD_INT 5
46472: PUSH
46473: LD_INT 31
46475: PUSH
46476: LD_INT 32
46478: PUSH
46479: LD_INT 33
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: IN
46495: NOT
46496: PUSH
46497: LD_VAR 0 6
46501: PUSH
46502: LD_INT 1
46504: EQUAL
46505: AND
46506: OR
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: IN
46523: NOT
46524: PUSH
46525: LD_VAR 0 6
46529: PUSH
46530: LD_INT 2
46532: EQUAL
46533: AND
46534: OR
46535: IFFALSE 46545
// mode = 0 ;
46537: LD_ADDR_VAR 0 6
46541: PUSH
46542: LD_INT 0
46544: ST_TO_ADDR
// case mode of 0 :
46545: LD_VAR 0 6
46549: PUSH
46550: LD_INT 0
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 58011
46558: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46559: LD_ADDR_VAR 0 11
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46752: LD_ADDR_VAR 0 12
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46948: LD_ADDR_VAR 0 13
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47147: LD_ADDR_VAR 0 14
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47343: LD_ADDR_VAR 0 15
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47536: LD_ADDR_VAR 0 16
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47729: LD_ADDR_VAR 0 17
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47959: LD_ADDR_VAR 0 18
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48189: LD_ADDR_VAR 0 19
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48419: LD_ADDR_VAR 0 20
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48649: LD_ADDR_VAR 0 21
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48879: LD_ADDR_VAR 0 22
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49109: LD_ADDR_VAR 0 23
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49389: LD_ADDR_VAR 0 24
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49665: LD_ADDR_VAR 0 25
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49939: LD_ADDR_VAR 0 26
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50215: LD_ADDR_VAR 0 27
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50495: LD_ADDR_VAR 0 28
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50777: LD_ADDR_VAR 0 29
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51056: LD_ADDR_VAR 0 30
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51334: LD_ADDR_VAR 0 31
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51612: LD_ADDR_VAR 0 32
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51890: LD_ADDR_VAR 0 33
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52169: LD_ADDR_VAR 0 34
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52449: LD_ADDR_VAR 0 35
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52561: LD_ADDR_VAR 0 36
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52673: LD_ADDR_VAR 0 37
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52785: LD_ADDR_VAR 0 38
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52897: LD_ADDR_VAR 0 39
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53009: LD_ADDR_VAR 0 40
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53121: LD_ADDR_VAR 0 41
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53471: LD_ADDR_VAR 0 42
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53821: LD_ADDR_VAR 0 43
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 3
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54169: LD_ADDR_VAR 0 44
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54519: LD_ADDR_VAR 0 45
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54869: LD_ADDR_VAR 0 46
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55217: LD_ADDR_VAR 0 47
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55368: LD_ADDR_VAR 0 48
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55515: LD_ADDR_VAR 0 49
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55659: LD_ADDR_VAR 0 50
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55803: LD_ADDR_VAR 0 51
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55950: LD_ADDR_VAR 0 52
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56101: LD_ADDR_VAR 0 53
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56331: LD_ADDR_VAR 0 54
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56561: LD_ADDR_VAR 0 55
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56791: LD_ADDR_VAR 0 56
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57021: LD_ADDR_VAR 0 57
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57251: LD_ADDR_VAR 0 58
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57481: LD_ADDR_VAR 0 59
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57569: LD_ADDR_VAR 0 60
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57657: LD_ADDR_VAR 0 61
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57745: LD_ADDR_VAR 0 62
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57833: LD_ADDR_VAR 0 63
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57921: LD_ADDR_VAR 0 64
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// end ; 1 :
58009: GO 63906
58011: LD_INT 1
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58019
58017: GO 60642
58019: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58020: LD_ADDR_VAR 0 11
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58064: LD_ADDR_VAR 0 12
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58105: LD_ADDR_VAR 0 13
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58145: LD_ADDR_VAR 0 14
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58186: LD_ADDR_VAR 0 15
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58230: LD_ADDR_VAR 0 16
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58276: LD_ADDR_VAR 0 17
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58320: LD_ADDR_VAR 0 18
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58361: LD_ADDR_VAR 0 19
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58401: LD_ADDR_VAR 0 20
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58442: LD_ADDR_VAR 0 21
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58486: LD_ADDR_VAR 0 22
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58532: LD_ADDR_VAR 0 23
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 4
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58576: LD_ADDR_VAR 0 24
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58617: LD_ADDR_VAR 0 25
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58657: LD_ADDR_VAR 0 26
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58698: LD_ADDR_VAR 0 27
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 4
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58742: LD_ADDR_VAR 0 28
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: LD_INT 4
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 4
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58788: LD_ADDR_VAR 0 29
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 4
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 4
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 5
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 4
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 6
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 6
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 5
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58943: LD_ADDR_VAR 0 30
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 4
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 4
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 5
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 5
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 6
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 6
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59086: LD_ADDR_VAR 0 31
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 5
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 6
59183: PUSH
59184: LD_INT 5
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 6
59193: PUSH
59194: LD_INT 6
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: LD_INT 6
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59225: LD_ADDR_VAR 0 32
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 5
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 6
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 6
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59368: LD_ADDR_VAR 0 33
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 3
59386: NEG
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 4
59420: NEG
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 5
59454: NEG
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 5
59465: NEG
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 5
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 6
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 6
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59523: LD_ADDR_VAR 0 34
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 4
59578: NEG
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: LD_INT 5
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 5
59614: NEG
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 5
59626: NEG
59627: PUSH
59628: LD_INT 5
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: NEG
59639: PUSH
59640: LD_INT 6
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 6
59650: NEG
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 6
59662: NEG
59663: PUSH
59664: LD_INT 6
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59686: LD_ADDR_VAR 0 41
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59730: LD_ADDR_VAR 0 42
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: LIST
59770: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59771: LD_ADDR_VAR 0 43
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59811: LD_ADDR_VAR 0 44
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59852: LD_ADDR_VAR 0 45
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59896: LD_ADDR_VAR 0 46
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59942: LD_ADDR_VAR 0 47
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59975: LD_ADDR_VAR 0 48
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60006: LD_ADDR_VAR 0 49
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60035: LD_ADDR_VAR 0 50
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60064: LD_ADDR_VAR 0 51
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60095: LD_ADDR_VAR 0 52
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60128: LD_ADDR_VAR 0 53
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60172: LD_ADDR_VAR 0 54
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60213: LD_ADDR_VAR 0 55
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 3
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 3
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60253: LD_ADDR_VAR 0 56
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60294: LD_ADDR_VAR 0 57
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60338: LD_ADDR_VAR 0 58
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60384: LD_ADDR_VAR 0 59
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60428: LD_ADDR_VAR 0 60
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60469: LD_ADDR_VAR 0 61
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60509: LD_ADDR_VAR 0 62
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60550: LD_ADDR_VAR 0 63
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60594: LD_ADDR_VAR 0 64
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: ST_TO_ADDR
// end ; 2 :
60640: GO 63906
60642: LD_INT 2
60644: DOUBLE
60645: EQUAL
60646: IFTRUE 60650
60648: GO 63905
60650: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60651: LD_ADDR_VAR 0 29
60655: PUSH
60656: LD_INT 4
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 4
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 5
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 5
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 4
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 3
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 4
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: LD_INT 4
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 3
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 5
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 5
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: NEG
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 4
60990: NEG
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 4
61001: NEG
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 4
61036: NEG
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 4
61048: NEG
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: NEG
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 5
61096: NEG
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 5
61108: NEG
61109: PUSH
61110: LD_INT 5
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: LD_INT 5
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 5
61132: NEG
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61189: LD_ADDR_VAR 0 30
61193: PUSH
61194: LD_INT 4
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 4
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 5
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 5
61226: PUSH
61227: LD_INT 5
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: LD_INT 5
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 5
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 4
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 4
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 4
61379: NEG
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 4
61390: NEG
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 5
61435: NEG
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 5
61458: NEG
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 4
61541: NEG
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: NEG
61554: PUSH
61555: LD_INT 4
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: LD_INT 4
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 4
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 5
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 4
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 4
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 5
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61736: LD_ADDR_VAR 0 31
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 4
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 5
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 5
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 4
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: LD_INT 5
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 3
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 4
61938: NEG
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 4
61950: NEG
61951: PUSH
61952: LD_INT 5
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: NEG
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 3
61974: NEG
61975: PUSH
61976: LD_INT 3
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: NEG
61987: PUSH
61988: LD_INT 3
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: NEG
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 5
62010: NEG
62011: PUSH
62012: LD_INT 5
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 3
62022: NEG
62023: PUSH
62024: LD_INT 5
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 5
62034: NEG
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 4
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 3
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 4
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 5
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 4
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 5
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62286: LD_ADDR_VAR 0 32
62290: PUSH
62291: LD_INT 4
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 4
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: NEG
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 4
62338: NEG
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 5
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: NEG
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 3
62407: NEG
62408: PUSH
62409: LD_INT 4
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 4
62455: NEG
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 4
62467: NEG
62468: PUSH
62469: LD_INT 4
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 4
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: NEG
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 4
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 5
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 4
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 3
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 4
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 5
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 5
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 4
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 4
62698: PUSH
62699: LD_INT 4
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 4
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 5
62718: PUSH
62719: LD_INT 4
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 5
62728: PUSH
62729: LD_INT 5
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: LD_INT 4
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 5
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: LD_INT 5
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62833: LD_ADDR_VAR 0 33
62837: PUSH
62838: LD_INT 4
62840: NEG
62841: PUSH
62842: LD_INT 4
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 4
62852: NEG
62853: PUSH
62854: LD_INT 5
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: NEG
62865: PUSH
62866: LD_INT 4
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: NEG
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 4
62888: NEG
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 5
62900: NEG
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 5
62912: NEG
62913: PUSH
62914: LD_INT 5
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: LD_INT 5
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 5
62936: NEG
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 4
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 3
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 4
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 4
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 4
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 4
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 5
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 5
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 4
63173: PUSH
63174: LD_INT 4
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: LD_INT 4
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: LD_INT 4
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 4
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 5
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 5
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 4
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 3
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 5
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63371: LD_ADDR_VAR 0 34
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 4
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_INT 5
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 4
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 3
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 3
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 4
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 5
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: LD_INT 5
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 4
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: PUSH
63574: LD_INT 4
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: LD_INT 4
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 5
63603: PUSH
63604: LD_INT 5
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 5
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: LD_INT 3
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 5
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 4
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 3
63779: NEG
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 5
63812: NEG
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 5
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 5
63835: NEG
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// end ; end ;
63903: GO 63906
63905: POP
// case btype of b_depot , b_warehouse :
63906: LD_VAR 0 1
63910: PUSH
63911: LD_INT 0
63913: DOUBLE
63914: EQUAL
63915: IFTRUE 63925
63917: LD_INT 1
63919: DOUBLE
63920: EQUAL
63921: IFTRUE 63925
63923: GO 64126
63925: POP
// case nation of nation_american :
63926: LD_VAR 0 5
63930: PUSH
63931: LD_INT 1
63933: DOUBLE
63934: EQUAL
63935: IFTRUE 63939
63937: GO 63995
63939: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63940: LD_ADDR_VAR 0 9
63944: PUSH
63945: LD_VAR 0 11
63949: PUSH
63950: LD_VAR 0 12
63954: PUSH
63955: LD_VAR 0 13
63959: PUSH
63960: LD_VAR 0 14
63964: PUSH
63965: LD_VAR 0 15
63969: PUSH
63970: LD_VAR 0 16
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: LD_VAR 0 4
63987: PUSH
63988: LD_INT 1
63990: PLUS
63991: ARRAY
63992: ST_TO_ADDR
63993: GO 64124
63995: LD_INT 2
63997: DOUBLE
63998: EQUAL
63999: IFTRUE 64003
64001: GO 64059
64003: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64004: LD_ADDR_VAR 0 9
64008: PUSH
64009: LD_VAR 0 17
64013: PUSH
64014: LD_VAR 0 18
64018: PUSH
64019: LD_VAR 0 19
64023: PUSH
64024: LD_VAR 0 20
64028: PUSH
64029: LD_VAR 0 21
64033: PUSH
64034: LD_VAR 0 22
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 4
64051: PUSH
64052: LD_INT 1
64054: PLUS
64055: ARRAY
64056: ST_TO_ADDR
64057: GO 64124
64059: LD_INT 3
64061: DOUBLE
64062: EQUAL
64063: IFTRUE 64067
64065: GO 64123
64067: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64068: LD_ADDR_VAR 0 9
64072: PUSH
64073: LD_VAR 0 23
64077: PUSH
64078: LD_VAR 0 24
64082: PUSH
64083: LD_VAR 0 25
64087: PUSH
64088: LD_VAR 0 26
64092: PUSH
64093: LD_VAR 0 27
64097: PUSH
64098: LD_VAR 0 28
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 4
64115: PUSH
64116: LD_INT 1
64118: PLUS
64119: ARRAY
64120: ST_TO_ADDR
64121: GO 64124
64123: POP
64124: GO 64679
64126: LD_INT 2
64128: DOUBLE
64129: EQUAL
64130: IFTRUE 64140
64132: LD_INT 3
64134: DOUBLE
64135: EQUAL
64136: IFTRUE 64140
64138: GO 64196
64140: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64141: LD_ADDR_VAR 0 9
64145: PUSH
64146: LD_VAR 0 29
64150: PUSH
64151: LD_VAR 0 30
64155: PUSH
64156: LD_VAR 0 31
64160: PUSH
64161: LD_VAR 0 32
64165: PUSH
64166: LD_VAR 0 33
64170: PUSH
64171: LD_VAR 0 34
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: PUSH
64184: LD_VAR 0 4
64188: PUSH
64189: LD_INT 1
64191: PLUS
64192: ARRAY
64193: ST_TO_ADDR
64194: GO 64679
64196: LD_INT 16
64198: DOUBLE
64199: EQUAL
64200: IFTRUE 64258
64202: LD_INT 17
64204: DOUBLE
64205: EQUAL
64206: IFTRUE 64258
64208: LD_INT 18
64210: DOUBLE
64211: EQUAL
64212: IFTRUE 64258
64214: LD_INT 19
64216: DOUBLE
64217: EQUAL
64218: IFTRUE 64258
64220: LD_INT 22
64222: DOUBLE
64223: EQUAL
64224: IFTRUE 64258
64226: LD_INT 20
64228: DOUBLE
64229: EQUAL
64230: IFTRUE 64258
64232: LD_INT 21
64234: DOUBLE
64235: EQUAL
64236: IFTRUE 64258
64238: LD_INT 23
64240: DOUBLE
64241: EQUAL
64242: IFTRUE 64258
64244: LD_INT 24
64246: DOUBLE
64247: EQUAL
64248: IFTRUE 64258
64250: LD_INT 25
64252: DOUBLE
64253: EQUAL
64254: IFTRUE 64258
64256: GO 64314
64258: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64259: LD_ADDR_VAR 0 9
64263: PUSH
64264: LD_VAR 0 35
64268: PUSH
64269: LD_VAR 0 36
64273: PUSH
64274: LD_VAR 0 37
64278: PUSH
64279: LD_VAR 0 38
64283: PUSH
64284: LD_VAR 0 39
64288: PUSH
64289: LD_VAR 0 40
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: PUSH
64302: LD_VAR 0 4
64306: PUSH
64307: LD_INT 1
64309: PLUS
64310: ARRAY
64311: ST_TO_ADDR
64312: GO 64679
64314: LD_INT 6
64316: DOUBLE
64317: EQUAL
64318: IFTRUE 64370
64320: LD_INT 7
64322: DOUBLE
64323: EQUAL
64324: IFTRUE 64370
64326: LD_INT 8
64328: DOUBLE
64329: EQUAL
64330: IFTRUE 64370
64332: LD_INT 13
64334: DOUBLE
64335: EQUAL
64336: IFTRUE 64370
64338: LD_INT 12
64340: DOUBLE
64341: EQUAL
64342: IFTRUE 64370
64344: LD_INT 15
64346: DOUBLE
64347: EQUAL
64348: IFTRUE 64370
64350: LD_INT 11
64352: DOUBLE
64353: EQUAL
64354: IFTRUE 64370
64356: LD_INT 14
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64370
64362: LD_INT 10
64364: DOUBLE
64365: EQUAL
64366: IFTRUE 64370
64368: GO 64426
64370: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64371: LD_ADDR_VAR 0 9
64375: PUSH
64376: LD_VAR 0 41
64380: PUSH
64381: LD_VAR 0 42
64385: PUSH
64386: LD_VAR 0 43
64390: PUSH
64391: LD_VAR 0 44
64395: PUSH
64396: LD_VAR 0 45
64400: PUSH
64401: LD_VAR 0 46
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: PUSH
64414: LD_VAR 0 4
64418: PUSH
64419: LD_INT 1
64421: PLUS
64422: ARRAY
64423: ST_TO_ADDR
64424: GO 64679
64426: LD_INT 36
64428: DOUBLE
64429: EQUAL
64430: IFTRUE 64434
64432: GO 64490
64434: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64435: LD_ADDR_VAR 0 9
64439: PUSH
64440: LD_VAR 0 47
64444: PUSH
64445: LD_VAR 0 48
64449: PUSH
64450: LD_VAR 0 49
64454: PUSH
64455: LD_VAR 0 50
64459: PUSH
64460: LD_VAR 0 51
64464: PUSH
64465: LD_VAR 0 52
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 4
64482: PUSH
64483: LD_INT 1
64485: PLUS
64486: ARRAY
64487: ST_TO_ADDR
64488: GO 64679
64490: LD_INT 4
64492: DOUBLE
64493: EQUAL
64494: IFTRUE 64516
64496: LD_INT 5
64498: DOUBLE
64499: EQUAL
64500: IFTRUE 64516
64502: LD_INT 34
64504: DOUBLE
64505: EQUAL
64506: IFTRUE 64516
64508: LD_INT 37
64510: DOUBLE
64511: EQUAL
64512: IFTRUE 64516
64514: GO 64572
64516: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64517: LD_ADDR_VAR 0 9
64521: PUSH
64522: LD_VAR 0 53
64526: PUSH
64527: LD_VAR 0 54
64531: PUSH
64532: LD_VAR 0 55
64536: PUSH
64537: LD_VAR 0 56
64541: PUSH
64542: LD_VAR 0 57
64546: PUSH
64547: LD_VAR 0 58
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_VAR 0 4
64564: PUSH
64565: LD_INT 1
64567: PLUS
64568: ARRAY
64569: ST_TO_ADDR
64570: GO 64679
64572: LD_INT 31
64574: DOUBLE
64575: EQUAL
64576: IFTRUE 64622
64578: LD_INT 32
64580: DOUBLE
64581: EQUAL
64582: IFTRUE 64622
64584: LD_INT 33
64586: DOUBLE
64587: EQUAL
64588: IFTRUE 64622
64590: LD_INT 27
64592: DOUBLE
64593: EQUAL
64594: IFTRUE 64622
64596: LD_INT 26
64598: DOUBLE
64599: EQUAL
64600: IFTRUE 64622
64602: LD_INT 28
64604: DOUBLE
64605: EQUAL
64606: IFTRUE 64622
64608: LD_INT 29
64610: DOUBLE
64611: EQUAL
64612: IFTRUE 64622
64614: LD_INT 30
64616: DOUBLE
64617: EQUAL
64618: IFTRUE 64622
64620: GO 64678
64622: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64623: LD_ADDR_VAR 0 9
64627: PUSH
64628: LD_VAR 0 59
64632: PUSH
64633: LD_VAR 0 60
64637: PUSH
64638: LD_VAR 0 61
64642: PUSH
64643: LD_VAR 0 62
64647: PUSH
64648: LD_VAR 0 63
64652: PUSH
64653: LD_VAR 0 64
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: PUSH
64666: LD_VAR 0 4
64670: PUSH
64671: LD_INT 1
64673: PLUS
64674: ARRAY
64675: ST_TO_ADDR
64676: GO 64679
64678: POP
// temp_list2 = [ ] ;
64679: LD_ADDR_VAR 0 10
64683: PUSH
64684: EMPTY
64685: ST_TO_ADDR
// for i in temp_list do
64686: LD_ADDR_VAR 0 8
64690: PUSH
64691: LD_VAR 0 9
64695: PUSH
64696: FOR_IN
64697: IFFALSE 64749
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64699: LD_ADDR_VAR 0 10
64703: PUSH
64704: LD_VAR 0 10
64708: PUSH
64709: LD_VAR 0 8
64713: PUSH
64714: LD_INT 1
64716: ARRAY
64717: PUSH
64718: LD_VAR 0 2
64722: PLUS
64723: PUSH
64724: LD_VAR 0 8
64728: PUSH
64729: LD_INT 2
64731: ARRAY
64732: PUSH
64733: LD_VAR 0 3
64737: PLUS
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: EMPTY
64744: LIST
64745: ADD
64746: ST_TO_ADDR
64747: GO 64696
64749: POP
64750: POP
// result = temp_list2 ;
64751: LD_ADDR_VAR 0 7
64755: PUSH
64756: LD_VAR 0 10
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 7
64765: RET
// export function EnemyInRange ( unit , dist ) ; begin
64766: LD_INT 0
64768: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64769: LD_ADDR_VAR 0 3
64773: PUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 255
64783: PPUSH
64784: LD_VAR 0 1
64788: PPUSH
64789: CALL_OW 250
64793: PPUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: CALL_OW 251
64803: PPUSH
64804: LD_VAR 0 2
64808: PPUSH
64809: CALL 38139 0 4
64813: PUSH
64814: LD_INT 4
64816: ARRAY
64817: ST_TO_ADDR
// end ;
64818: LD_VAR 0 3
64822: RET
// export function PlayerSeeMe ( unit ) ; begin
64823: LD_INT 0
64825: PPUSH
// result := See ( your_side , unit ) ;
64826: LD_ADDR_VAR 0 2
64830: PUSH
64831: LD_OWVAR 2
64835: PPUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: CALL_OW 292
64845: ST_TO_ADDR
// end ;
64846: LD_VAR 0 2
64850: RET
// export function ReverseDir ( unit ) ; begin
64851: LD_INT 0
64853: PPUSH
// if not unit then
64854: LD_VAR 0 1
64858: NOT
64859: IFFALSE 64863
// exit ;
64861: GO 64886
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64863: LD_ADDR_VAR 0 2
64867: PUSH
64868: LD_VAR 0 1
64872: PPUSH
64873: CALL_OW 254
64877: PUSH
64878: LD_INT 3
64880: PLUS
64881: PUSH
64882: LD_INT 6
64884: MOD
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 2
64890: RET
// export function ReverseArray ( array ) ; var i ; begin
64891: LD_INT 0
64893: PPUSH
64894: PPUSH
// if not array then
64895: LD_VAR 0 1
64899: NOT
64900: IFFALSE 64904
// exit ;
64902: GO 64959
// result := [ ] ;
64904: LD_ADDR_VAR 0 2
64908: PUSH
64909: EMPTY
64910: ST_TO_ADDR
// for i := array downto 1 do
64911: LD_ADDR_VAR 0 3
64915: PUSH
64916: DOUBLE
64917: LD_VAR 0 1
64921: INC
64922: ST_TO_ADDR
64923: LD_INT 1
64925: PUSH
64926: FOR_DOWNTO
64927: IFFALSE 64957
// result := Join ( result , array [ i ] ) ;
64929: LD_ADDR_VAR 0 2
64933: PUSH
64934: LD_VAR 0 2
64938: PPUSH
64939: LD_VAR 0 1
64943: PUSH
64944: LD_VAR 0 3
64948: ARRAY
64949: PPUSH
64950: CALL 69604 0 2
64954: ST_TO_ADDR
64955: GO 64926
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 2
64963: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
// if not unit or not hexes then
64972: LD_VAR 0 1
64976: NOT
64977: PUSH
64978: LD_VAR 0 2
64982: NOT
64983: OR
64984: IFFALSE 64988
// exit ;
64986: GO 65111
// dist := 9999 ;
64988: LD_ADDR_VAR 0 5
64992: PUSH
64993: LD_INT 9999
64995: ST_TO_ADDR
// for i = 1 to hexes do
64996: LD_ADDR_VAR 0 4
65000: PUSH
65001: DOUBLE
65002: LD_INT 1
65004: DEC
65005: ST_TO_ADDR
65006: LD_VAR 0 2
65010: PUSH
65011: FOR_TO
65012: IFFALSE 65099
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65014: LD_ADDR_VAR 0 6
65018: PUSH
65019: LD_VAR 0 1
65023: PPUSH
65024: LD_VAR 0 2
65028: PUSH
65029: LD_VAR 0 4
65033: ARRAY
65034: PUSH
65035: LD_INT 1
65037: ARRAY
65038: PPUSH
65039: LD_VAR 0 2
65043: PUSH
65044: LD_VAR 0 4
65048: ARRAY
65049: PUSH
65050: LD_INT 2
65052: ARRAY
65053: PPUSH
65054: CALL_OW 297
65058: ST_TO_ADDR
// if tdist < dist then
65059: LD_VAR 0 6
65063: PUSH
65064: LD_VAR 0 5
65068: LESS
65069: IFFALSE 65097
// begin hex := hexes [ i ] ;
65071: LD_ADDR_VAR 0 8
65075: PUSH
65076: LD_VAR 0 2
65080: PUSH
65081: LD_VAR 0 4
65085: ARRAY
65086: ST_TO_ADDR
// dist := tdist ;
65087: LD_ADDR_VAR 0 5
65091: PUSH
65092: LD_VAR 0 6
65096: ST_TO_ADDR
// end ; end ;
65097: GO 65011
65099: POP
65100: POP
// result := hex ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_VAR 0 8
65110: ST_TO_ADDR
// end ;
65111: LD_VAR 0 3
65115: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65116: LD_INT 0
65118: PPUSH
65119: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65120: LD_VAR 0 1
65124: NOT
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_INT 21
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 23
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PPUSH
65155: CALL_OW 69
65159: IN
65160: NOT
65161: OR
65162: IFFALSE 65166
// exit ;
65164: GO 65213
// for i = 1 to 3 do
65166: LD_ADDR_VAR 0 3
65170: PUSH
65171: DOUBLE
65172: LD_INT 1
65174: DEC
65175: ST_TO_ADDR
65176: LD_INT 3
65178: PUSH
65179: FOR_TO
65180: IFFALSE 65211
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65182: LD_VAR 0 1
65186: PPUSH
65187: CALL_OW 250
65191: PPUSH
65192: LD_VAR 0 1
65196: PPUSH
65197: CALL_OW 251
65201: PPUSH
65202: LD_INT 1
65204: PPUSH
65205: CALL_OW 453
65209: GO 65179
65211: POP
65212: POP
// end ;
65213: LD_VAR 0 2
65217: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65218: LD_INT 0
65220: PPUSH
65221: PPUSH
65222: PPUSH
65223: PPUSH
65224: PPUSH
65225: PPUSH
// if not unit or not enemy_unit then
65226: LD_VAR 0 1
65230: NOT
65231: PUSH
65232: LD_VAR 0 2
65236: NOT
65237: OR
65238: IFFALSE 65242
// exit ;
65240: GO 65709
// if GetLives ( i ) < 250 then
65242: LD_VAR 0 4
65246: PPUSH
65247: CALL_OW 256
65251: PUSH
65252: LD_INT 250
65254: LESS
65255: IFFALSE 65268
// begin ComAutodestruct ( i ) ;
65257: LD_VAR 0 4
65261: PPUSH
65262: CALL 65116 0 1
// exit ;
65266: GO 65709
// end ; x := GetX ( enemy_unit ) ;
65268: LD_ADDR_VAR 0 7
65272: PUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: CALL_OW 250
65282: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65283: LD_ADDR_VAR 0 8
65287: PUSH
65288: LD_VAR 0 2
65292: PPUSH
65293: CALL_OW 251
65297: ST_TO_ADDR
// if not x or not y then
65298: LD_VAR 0 7
65302: NOT
65303: PUSH
65304: LD_VAR 0 8
65308: NOT
65309: OR
65310: IFFALSE 65314
// exit ;
65312: GO 65709
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65314: LD_ADDR_VAR 0 6
65318: PUSH
65319: LD_VAR 0 7
65323: PPUSH
65324: LD_INT 0
65326: PPUSH
65327: LD_INT 4
65329: PPUSH
65330: CALL_OW 272
65334: PUSH
65335: LD_VAR 0 8
65339: PPUSH
65340: LD_INT 0
65342: PPUSH
65343: LD_INT 4
65345: PPUSH
65346: CALL_OW 273
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_VAR 0 7
65359: PPUSH
65360: LD_INT 1
65362: PPUSH
65363: LD_INT 4
65365: PPUSH
65366: CALL_OW 272
65370: PUSH
65371: LD_VAR 0 8
65375: PPUSH
65376: LD_INT 1
65378: PPUSH
65379: LD_INT 4
65381: PPUSH
65382: CALL_OW 273
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_VAR 0 7
65395: PPUSH
65396: LD_INT 2
65398: PPUSH
65399: LD_INT 4
65401: PPUSH
65402: CALL_OW 272
65406: PUSH
65407: LD_VAR 0 8
65411: PPUSH
65412: LD_INT 2
65414: PPUSH
65415: LD_INT 4
65417: PPUSH
65418: CALL_OW 273
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_VAR 0 7
65431: PPUSH
65432: LD_INT 3
65434: PPUSH
65435: LD_INT 4
65437: PPUSH
65438: CALL_OW 272
65442: PUSH
65443: LD_VAR 0 8
65447: PPUSH
65448: LD_INT 3
65450: PPUSH
65451: LD_INT 4
65453: PPUSH
65454: CALL_OW 273
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_VAR 0 7
65467: PPUSH
65468: LD_INT 4
65470: PPUSH
65471: LD_INT 4
65473: PPUSH
65474: CALL_OW 272
65478: PUSH
65479: LD_VAR 0 8
65483: PPUSH
65484: LD_INT 4
65486: PPUSH
65487: LD_INT 4
65489: PPUSH
65490: CALL_OW 273
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_VAR 0 7
65503: PPUSH
65504: LD_INT 5
65506: PPUSH
65507: LD_INT 4
65509: PPUSH
65510: CALL_OW 272
65514: PUSH
65515: LD_VAR 0 8
65519: PPUSH
65520: LD_INT 5
65522: PPUSH
65523: LD_INT 4
65525: PPUSH
65526: CALL_OW 273
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: ST_TO_ADDR
// for i = tmp downto 1 do
65543: LD_ADDR_VAR 0 4
65547: PUSH
65548: DOUBLE
65549: LD_VAR 0 6
65553: INC
65554: ST_TO_ADDR
65555: LD_INT 1
65557: PUSH
65558: FOR_DOWNTO
65559: IFFALSE 65660
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65561: LD_VAR 0 6
65565: PUSH
65566: LD_VAR 0 4
65570: ARRAY
65571: PUSH
65572: LD_INT 1
65574: ARRAY
65575: PPUSH
65576: LD_VAR 0 6
65580: PUSH
65581: LD_VAR 0 4
65585: ARRAY
65586: PUSH
65587: LD_INT 2
65589: ARRAY
65590: PPUSH
65591: CALL_OW 488
65595: NOT
65596: PUSH
65597: LD_VAR 0 6
65601: PUSH
65602: LD_VAR 0 4
65606: ARRAY
65607: PUSH
65608: LD_INT 1
65610: ARRAY
65611: PPUSH
65612: LD_VAR 0 6
65616: PUSH
65617: LD_VAR 0 4
65621: ARRAY
65622: PUSH
65623: LD_INT 2
65625: ARRAY
65626: PPUSH
65627: CALL_OW 428
65631: PUSH
65632: LD_INT 0
65634: NONEQUAL
65635: OR
65636: IFFALSE 65658
// tmp := Delete ( tmp , i ) ;
65638: LD_ADDR_VAR 0 6
65642: PUSH
65643: LD_VAR 0 6
65647: PPUSH
65648: LD_VAR 0 4
65652: PPUSH
65653: CALL_OW 3
65657: ST_TO_ADDR
65658: GO 65558
65660: POP
65661: POP
// j := GetClosestHex ( unit , tmp ) ;
65662: LD_ADDR_VAR 0 5
65666: PUSH
65667: LD_VAR 0 1
65671: PPUSH
65672: LD_VAR 0 6
65676: PPUSH
65677: CALL 64964 0 2
65681: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_VAR 0 5
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PPUSH
65696: LD_VAR 0 5
65700: PUSH
65701: LD_INT 2
65703: ARRAY
65704: PPUSH
65705: CALL_OW 111
// end ;
65709: LD_VAR 0 3
65713: RET
// export function PrepareApemanSoldier ( ) ; begin
65714: LD_INT 0
65716: PPUSH
// uc_nation := 0 ;
65717: LD_ADDR_OWVAR 21
65721: PUSH
65722: LD_INT 0
65724: ST_TO_ADDR
// hc_sex := sex_male ;
65725: LD_ADDR_OWVAR 27
65729: PUSH
65730: LD_INT 1
65732: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65733: LD_ADDR_OWVAR 28
65737: PUSH
65738: LD_INT 15
65740: ST_TO_ADDR
// hc_gallery :=  ;
65741: LD_ADDR_OWVAR 33
65745: PUSH
65746: LD_STRING 
65748: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65749: LD_ADDR_OWVAR 31
65753: PUSH
65754: LD_INT 0
65756: PPUSH
65757: LD_INT 3
65759: PPUSH
65760: CALL_OW 12
65764: PUSH
65765: LD_INT 0
65767: PPUSH
65768: LD_INT 3
65770: PPUSH
65771: CALL_OW 12
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: ST_TO_ADDR
// end ;
65788: LD_VAR 0 1
65792: RET
// export function PrepareApemanEngineer ( ) ; begin
65793: LD_INT 0
65795: PPUSH
// uc_nation := 0 ;
65796: LD_ADDR_OWVAR 21
65800: PUSH
65801: LD_INT 0
65803: ST_TO_ADDR
// hc_sex := sex_male ;
65804: LD_ADDR_OWVAR 27
65808: PUSH
65809: LD_INT 1
65811: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65812: LD_ADDR_OWVAR 28
65816: PUSH
65817: LD_INT 16
65819: ST_TO_ADDR
// hc_gallery :=  ;
65820: LD_ADDR_OWVAR 33
65824: PUSH
65825: LD_STRING 
65827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65828: LD_ADDR_OWVAR 31
65832: PUSH
65833: LD_INT 0
65835: PPUSH
65836: LD_INT 3
65838: PPUSH
65839: CALL_OW 12
65843: PUSH
65844: LD_INT 0
65846: PPUSH
65847: LD_INT 3
65849: PPUSH
65850: CALL_OW 12
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 1
65871: RET
// export function PrepareApeman ( agressivity ) ; begin
65872: LD_INT 0
65874: PPUSH
// uc_side := 0 ;
65875: LD_ADDR_OWVAR 20
65879: PUSH
65880: LD_INT 0
65882: ST_TO_ADDR
// uc_nation := 0 ;
65883: LD_ADDR_OWVAR 21
65887: PUSH
65888: LD_INT 0
65890: ST_TO_ADDR
// hc_sex := sex_male ;
65891: LD_ADDR_OWVAR 27
65895: PUSH
65896: LD_INT 1
65898: ST_TO_ADDR
// hc_class := class_apeman ;
65899: LD_ADDR_OWVAR 28
65903: PUSH
65904: LD_INT 12
65906: ST_TO_ADDR
// hc_gallery :=  ;
65907: LD_ADDR_OWVAR 33
65911: PUSH
65912: LD_STRING 
65914: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65915: LD_ADDR_OWVAR 35
65919: PUSH
65920: LD_VAR 0 1
65924: NEG
65925: PPUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 12
65935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65936: LD_ADDR_OWVAR 31
65940: PUSH
65941: LD_INT 0
65943: PPUSH
65944: LD_INT 3
65946: PPUSH
65947: CALL_OW 12
65951: PUSH
65952: LD_INT 0
65954: PPUSH
65955: LD_INT 3
65957: PPUSH
65958: CALL_OW 12
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// end ;
65975: LD_VAR 0 2
65979: RET
// export function PrepareTiger ( agressivity ) ; begin
65980: LD_INT 0
65982: PPUSH
// uc_side := 0 ;
65983: LD_ADDR_OWVAR 20
65987: PUSH
65988: LD_INT 0
65990: ST_TO_ADDR
// uc_nation := 0 ;
65991: LD_ADDR_OWVAR 21
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// hc_class := class_tiger ;
65999: LD_ADDR_OWVAR 28
66003: PUSH
66004: LD_INT 14
66006: ST_TO_ADDR
// hc_gallery :=  ;
66007: LD_ADDR_OWVAR 33
66011: PUSH
66012: LD_STRING 
66014: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66015: LD_ADDR_OWVAR 35
66019: PUSH
66020: LD_VAR 0 1
66024: NEG
66025: PPUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: CALL_OW 12
66035: ST_TO_ADDR
// end ;
66036: LD_VAR 0 2
66040: RET
// export function PrepareEnchidna ( ) ; begin
66041: LD_INT 0
66043: PPUSH
// uc_side := 0 ;
66044: LD_ADDR_OWVAR 20
66048: PUSH
66049: LD_INT 0
66051: ST_TO_ADDR
// uc_nation := 0 ;
66052: LD_ADDR_OWVAR 21
66056: PUSH
66057: LD_INT 0
66059: ST_TO_ADDR
// hc_class := class_baggie ;
66060: LD_ADDR_OWVAR 28
66064: PUSH
66065: LD_INT 13
66067: ST_TO_ADDR
// hc_gallery :=  ;
66068: LD_ADDR_OWVAR 33
66072: PUSH
66073: LD_STRING 
66075: ST_TO_ADDR
// end ;
66076: LD_VAR 0 1
66080: RET
// export function PrepareFrog ( ) ; begin
66081: LD_INT 0
66083: PPUSH
// uc_side := 0 ;
66084: LD_ADDR_OWVAR 20
66088: PUSH
66089: LD_INT 0
66091: ST_TO_ADDR
// uc_nation := 0 ;
66092: LD_ADDR_OWVAR 21
66096: PUSH
66097: LD_INT 0
66099: ST_TO_ADDR
// hc_class := class_frog ;
66100: LD_ADDR_OWVAR 28
66104: PUSH
66105: LD_INT 19
66107: ST_TO_ADDR
// hc_gallery :=  ;
66108: LD_ADDR_OWVAR 33
66112: PUSH
66113: LD_STRING 
66115: ST_TO_ADDR
// end ;
66116: LD_VAR 0 1
66120: RET
// export function PrepareFish ( ) ; begin
66121: LD_INT 0
66123: PPUSH
// uc_side := 0 ;
66124: LD_ADDR_OWVAR 20
66128: PUSH
66129: LD_INT 0
66131: ST_TO_ADDR
// uc_nation := 0 ;
66132: LD_ADDR_OWVAR 21
66136: PUSH
66137: LD_INT 0
66139: ST_TO_ADDR
// hc_class := class_fish ;
66140: LD_ADDR_OWVAR 28
66144: PUSH
66145: LD_INT 20
66147: ST_TO_ADDR
// hc_gallery :=  ;
66148: LD_ADDR_OWVAR 33
66152: PUSH
66153: LD_STRING 
66155: ST_TO_ADDR
// end ;
66156: LD_VAR 0 1
66160: RET
// export function PrepareBird ( ) ; begin
66161: LD_INT 0
66163: PPUSH
// uc_side := 0 ;
66164: LD_ADDR_OWVAR 20
66168: PUSH
66169: LD_INT 0
66171: ST_TO_ADDR
// uc_nation := 0 ;
66172: LD_ADDR_OWVAR 21
66176: PUSH
66177: LD_INT 0
66179: ST_TO_ADDR
// hc_class := class_phororhacos ;
66180: LD_ADDR_OWVAR 28
66184: PUSH
66185: LD_INT 18
66187: ST_TO_ADDR
// hc_gallery :=  ;
66188: LD_ADDR_OWVAR 33
66192: PUSH
66193: LD_STRING 
66195: ST_TO_ADDR
// end ;
66196: LD_VAR 0 1
66200: RET
// export function PrepareHorse ( ) ; begin
66201: LD_INT 0
66203: PPUSH
// uc_side := 0 ;
66204: LD_ADDR_OWVAR 20
66208: PUSH
66209: LD_INT 0
66211: ST_TO_ADDR
// uc_nation := 0 ;
66212: LD_ADDR_OWVAR 21
66216: PUSH
66217: LD_INT 0
66219: ST_TO_ADDR
// hc_class := class_horse ;
66220: LD_ADDR_OWVAR 28
66224: PUSH
66225: LD_INT 21
66227: ST_TO_ADDR
// hc_gallery :=  ;
66228: LD_ADDR_OWVAR 33
66232: PUSH
66233: LD_STRING 
66235: ST_TO_ADDR
// end ;
66236: LD_VAR 0 1
66240: RET
// export function PrepareMastodont ( ) ; begin
66241: LD_INT 0
66243: PPUSH
// uc_side := 0 ;
66244: LD_ADDR_OWVAR 20
66248: PUSH
66249: LD_INT 0
66251: ST_TO_ADDR
// uc_nation := 0 ;
66252: LD_ADDR_OWVAR 21
66256: PUSH
66257: LD_INT 0
66259: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66260: LD_ADDR_OWVAR 37
66264: PUSH
66265: LD_INT 31
66267: ST_TO_ADDR
// vc_control := control_rider ;
66268: LD_ADDR_OWVAR 38
66272: PUSH
66273: LD_INT 4
66275: ST_TO_ADDR
// end ;
66276: LD_VAR 0 1
66280: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66281: LD_INT 0
66283: PPUSH
66284: PPUSH
66285: PPUSH
// uc_side = 0 ;
66286: LD_ADDR_OWVAR 20
66290: PUSH
66291: LD_INT 0
66293: ST_TO_ADDR
// uc_nation = 0 ;
66294: LD_ADDR_OWVAR 21
66298: PUSH
66299: LD_INT 0
66301: ST_TO_ADDR
// InitHc_All ( ) ;
66302: CALL_OW 584
// InitVc ;
66306: CALL_OW 20
// if mastodonts then
66310: LD_VAR 0 6
66314: IFFALSE 66381
// for i = 1 to mastodonts do
66316: LD_ADDR_VAR 0 11
66320: PUSH
66321: DOUBLE
66322: LD_INT 1
66324: DEC
66325: ST_TO_ADDR
66326: LD_VAR 0 6
66330: PUSH
66331: FOR_TO
66332: IFFALSE 66379
// begin vc_chassis := 31 ;
66334: LD_ADDR_OWVAR 37
66338: PUSH
66339: LD_INT 31
66341: ST_TO_ADDR
// vc_control := control_rider ;
66342: LD_ADDR_OWVAR 38
66346: PUSH
66347: LD_INT 4
66349: ST_TO_ADDR
// animal := CreateVehicle ;
66350: LD_ADDR_VAR 0 12
66354: PUSH
66355: CALL_OW 45
66359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66360: LD_VAR 0 12
66364: PPUSH
66365: LD_VAR 0 8
66369: PPUSH
66370: LD_INT 0
66372: PPUSH
66373: CALL 68509 0 3
// end ;
66377: GO 66331
66379: POP
66380: POP
// if horses then
66381: LD_VAR 0 5
66385: IFFALSE 66452
// for i = 1 to horses do
66387: LD_ADDR_VAR 0 11
66391: PUSH
66392: DOUBLE
66393: LD_INT 1
66395: DEC
66396: ST_TO_ADDR
66397: LD_VAR 0 5
66401: PUSH
66402: FOR_TO
66403: IFFALSE 66450
// begin hc_class := 21 ;
66405: LD_ADDR_OWVAR 28
66409: PUSH
66410: LD_INT 21
66412: ST_TO_ADDR
// hc_gallery :=  ;
66413: LD_ADDR_OWVAR 33
66417: PUSH
66418: LD_STRING 
66420: ST_TO_ADDR
// animal := CreateHuman ;
66421: LD_ADDR_VAR 0 12
66425: PUSH
66426: CALL_OW 44
66430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66431: LD_VAR 0 12
66435: PPUSH
66436: LD_VAR 0 8
66440: PPUSH
66441: LD_INT 0
66443: PPUSH
66444: CALL 68509 0 3
// end ;
66448: GO 66402
66450: POP
66451: POP
// if birds then
66452: LD_VAR 0 1
66456: IFFALSE 66523
// for i = 1 to birds do
66458: LD_ADDR_VAR 0 11
66462: PUSH
66463: DOUBLE
66464: LD_INT 1
66466: DEC
66467: ST_TO_ADDR
66468: LD_VAR 0 1
66472: PUSH
66473: FOR_TO
66474: IFFALSE 66521
// begin hc_class := 18 ;
66476: LD_ADDR_OWVAR 28
66480: PUSH
66481: LD_INT 18
66483: ST_TO_ADDR
// hc_gallery =  ;
66484: LD_ADDR_OWVAR 33
66488: PUSH
66489: LD_STRING 
66491: ST_TO_ADDR
// animal := CreateHuman ;
66492: LD_ADDR_VAR 0 12
66496: PUSH
66497: CALL_OW 44
66501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66502: LD_VAR 0 12
66506: PPUSH
66507: LD_VAR 0 8
66511: PPUSH
66512: LD_INT 0
66514: PPUSH
66515: CALL 68509 0 3
// end ;
66519: GO 66473
66521: POP
66522: POP
// if tigers then
66523: LD_VAR 0 2
66527: IFFALSE 66611
// for i = 1 to tigers do
66529: LD_ADDR_VAR 0 11
66533: PUSH
66534: DOUBLE
66535: LD_INT 1
66537: DEC
66538: ST_TO_ADDR
66539: LD_VAR 0 2
66543: PUSH
66544: FOR_TO
66545: IFFALSE 66609
// begin hc_class = class_tiger ;
66547: LD_ADDR_OWVAR 28
66551: PUSH
66552: LD_INT 14
66554: ST_TO_ADDR
// hc_gallery =  ;
66555: LD_ADDR_OWVAR 33
66559: PUSH
66560: LD_STRING 
66562: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66563: LD_ADDR_OWVAR 35
66567: PUSH
66568: LD_INT 7
66570: NEG
66571: PPUSH
66572: LD_INT 7
66574: PPUSH
66575: CALL_OW 12
66579: ST_TO_ADDR
// animal := CreateHuman ;
66580: LD_ADDR_VAR 0 12
66584: PUSH
66585: CALL_OW 44
66589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66590: LD_VAR 0 12
66594: PPUSH
66595: LD_VAR 0 8
66599: PPUSH
66600: LD_INT 0
66602: PPUSH
66603: CALL 68509 0 3
// end ;
66607: GO 66544
66609: POP
66610: POP
// if apemans then
66611: LD_VAR 0 3
66615: IFFALSE 66738
// for i = 1 to apemans do
66617: LD_ADDR_VAR 0 11
66621: PUSH
66622: DOUBLE
66623: LD_INT 1
66625: DEC
66626: ST_TO_ADDR
66627: LD_VAR 0 3
66631: PUSH
66632: FOR_TO
66633: IFFALSE 66736
// begin hc_class = class_apeman ;
66635: LD_ADDR_OWVAR 28
66639: PUSH
66640: LD_INT 12
66642: ST_TO_ADDR
// hc_gallery =  ;
66643: LD_ADDR_OWVAR 33
66647: PUSH
66648: LD_STRING 
66650: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66651: LD_ADDR_OWVAR 35
66655: PUSH
66656: LD_INT 2
66658: NEG
66659: PPUSH
66660: LD_INT 2
66662: PPUSH
66663: CALL_OW 12
66667: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66668: LD_ADDR_OWVAR 31
66672: PUSH
66673: LD_INT 1
66675: PPUSH
66676: LD_INT 3
66678: PPUSH
66679: CALL_OW 12
66683: PUSH
66684: LD_INT 1
66686: PPUSH
66687: LD_INT 3
66689: PPUSH
66690: CALL_OW 12
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// animal := CreateHuman ;
66707: LD_ADDR_VAR 0 12
66711: PUSH
66712: CALL_OW 44
66716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66717: LD_VAR 0 12
66721: PPUSH
66722: LD_VAR 0 8
66726: PPUSH
66727: LD_INT 0
66729: PPUSH
66730: CALL 68509 0 3
// end ;
66734: GO 66632
66736: POP
66737: POP
// if enchidnas then
66738: LD_VAR 0 4
66742: IFFALSE 66809
// for i = 1 to enchidnas do
66744: LD_ADDR_VAR 0 11
66748: PUSH
66749: DOUBLE
66750: LD_INT 1
66752: DEC
66753: ST_TO_ADDR
66754: LD_VAR 0 4
66758: PUSH
66759: FOR_TO
66760: IFFALSE 66807
// begin hc_class = 13 ;
66762: LD_ADDR_OWVAR 28
66766: PUSH
66767: LD_INT 13
66769: ST_TO_ADDR
// hc_gallery =  ;
66770: LD_ADDR_OWVAR 33
66774: PUSH
66775: LD_STRING 
66777: ST_TO_ADDR
// animal := CreateHuman ;
66778: LD_ADDR_VAR 0 12
66782: PUSH
66783: CALL_OW 44
66787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66788: LD_VAR 0 12
66792: PPUSH
66793: LD_VAR 0 8
66797: PPUSH
66798: LD_INT 0
66800: PPUSH
66801: CALL 68509 0 3
// end ;
66805: GO 66759
66807: POP
66808: POP
// if fishes then
66809: LD_VAR 0 7
66813: IFFALSE 66880
// for i = 1 to fishes do
66815: LD_ADDR_VAR 0 11
66819: PUSH
66820: DOUBLE
66821: LD_INT 1
66823: DEC
66824: ST_TO_ADDR
66825: LD_VAR 0 7
66829: PUSH
66830: FOR_TO
66831: IFFALSE 66878
// begin hc_class = 20 ;
66833: LD_ADDR_OWVAR 28
66837: PUSH
66838: LD_INT 20
66840: ST_TO_ADDR
// hc_gallery =  ;
66841: LD_ADDR_OWVAR 33
66845: PUSH
66846: LD_STRING 
66848: ST_TO_ADDR
// animal := CreateHuman ;
66849: LD_ADDR_VAR 0 12
66853: PUSH
66854: CALL_OW 44
66858: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66859: LD_VAR 0 12
66863: PPUSH
66864: LD_VAR 0 9
66868: PPUSH
66869: LD_INT 0
66871: PPUSH
66872: CALL 68509 0 3
// end ;
66876: GO 66830
66878: POP
66879: POP
// end ;
66880: LD_VAR 0 10
66884: RET
// export function WantHeal ( sci , unit ) ; begin
66885: LD_INT 0
66887: PPUSH
// if GetTaskList ( sci ) > 0 then
66888: LD_VAR 0 1
66892: PPUSH
66893: CALL_OW 437
66897: PUSH
66898: LD_INT 0
66900: GREATER
66901: IFFALSE 66971
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66903: LD_VAR 0 1
66907: PPUSH
66908: CALL_OW 437
66912: PUSH
66913: LD_INT 1
66915: ARRAY
66916: PUSH
66917: LD_INT 1
66919: ARRAY
66920: PUSH
66921: LD_STRING l
66923: EQUAL
66924: PUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: CALL_OW 437
66934: PUSH
66935: LD_INT 1
66937: ARRAY
66938: PUSH
66939: LD_INT 4
66941: ARRAY
66942: PUSH
66943: LD_VAR 0 2
66947: EQUAL
66948: AND
66949: IFFALSE 66961
// result := true else
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_INT 1
66958: ST_TO_ADDR
66959: GO 66969
// result := false ;
66961: LD_ADDR_VAR 0 3
66965: PUSH
66966: LD_INT 0
66968: ST_TO_ADDR
// end else
66969: GO 66979
// result := false ;
66971: LD_ADDR_VAR 0 3
66975: PUSH
66976: LD_INT 0
66978: ST_TO_ADDR
// end ;
66979: LD_VAR 0 3
66983: RET
// export function HealTarget ( sci ) ; begin
66984: LD_INT 0
66986: PPUSH
// if not sci then
66987: LD_VAR 0 1
66991: NOT
66992: IFFALSE 66996
// exit ;
66994: GO 67061
// result := 0 ;
66996: LD_ADDR_VAR 0 2
67000: PUSH
67001: LD_INT 0
67003: ST_TO_ADDR
// if GetTaskList ( sci ) then
67004: LD_VAR 0 1
67008: PPUSH
67009: CALL_OW 437
67013: IFFALSE 67061
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67015: LD_VAR 0 1
67019: PPUSH
67020: CALL_OW 437
67024: PUSH
67025: LD_INT 1
67027: ARRAY
67028: PUSH
67029: LD_INT 1
67031: ARRAY
67032: PUSH
67033: LD_STRING l
67035: EQUAL
67036: IFFALSE 67061
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67038: LD_ADDR_VAR 0 2
67042: PUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 437
67052: PUSH
67053: LD_INT 1
67055: ARRAY
67056: PUSH
67057: LD_INT 4
67059: ARRAY
67060: ST_TO_ADDR
// end ;
67061: LD_VAR 0 2
67065: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67066: LD_INT 0
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
// if not base_units then
67072: LD_VAR 0 1
67076: NOT
67077: IFFALSE 67081
// exit ;
67079: GO 67168
// result := false ;
67081: LD_ADDR_VAR 0 2
67085: PUSH
67086: LD_INT 0
67088: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67089: LD_ADDR_VAR 0 5
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_INT 21
67101: PUSH
67102: LD_INT 3
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PPUSH
67109: CALL_OW 72
67113: ST_TO_ADDR
// if not tmp then
67114: LD_VAR 0 5
67118: NOT
67119: IFFALSE 67123
// exit ;
67121: GO 67168
// for i in tmp do
67123: LD_ADDR_VAR 0 3
67127: PUSH
67128: LD_VAR 0 5
67132: PUSH
67133: FOR_IN
67134: IFFALSE 67166
// begin result := EnemyInRange ( i , 22 ) ;
67136: LD_ADDR_VAR 0 2
67140: PUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: LD_INT 22
67148: PPUSH
67149: CALL 64766 0 2
67153: ST_TO_ADDR
// if result then
67154: LD_VAR 0 2
67158: IFFALSE 67164
// exit ;
67160: POP
67161: POP
67162: GO 67168
// end ;
67164: GO 67133
67166: POP
67167: POP
// end ;
67168: LD_VAR 0 2
67172: RET
// export function FilterByTag ( units , tag ) ; begin
67173: LD_INT 0
67175: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67176: LD_ADDR_VAR 0 3
67180: PUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: LD_INT 120
67188: PUSH
67189: LD_VAR 0 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PPUSH
67198: CALL_OW 72
67202: ST_TO_ADDR
// end ;
67203: LD_VAR 0 3
67207: RET
// export function IsDriver ( un ) ; begin
67208: LD_INT 0
67210: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67211: LD_ADDR_VAR 0 2
67215: PUSH
67216: LD_VAR 0 1
67220: PUSH
67221: LD_INT 55
67223: PUSH
67224: EMPTY
67225: LIST
67226: PPUSH
67227: CALL_OW 69
67231: IN
67232: ST_TO_ADDR
// end ;
67233: LD_VAR 0 2
67237: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67238: LD_INT 0
67240: PPUSH
67241: PPUSH
// list := [ ] ;
67242: LD_ADDR_VAR 0 5
67246: PUSH
67247: EMPTY
67248: ST_TO_ADDR
// case d of 0 :
67249: LD_VAR 0 3
67253: PUSH
67254: LD_INT 0
67256: DOUBLE
67257: EQUAL
67258: IFTRUE 67262
67260: GO 67395
67262: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67263: LD_ADDR_VAR 0 5
67267: PUSH
67268: LD_VAR 0 1
67272: PUSH
67273: LD_INT 4
67275: MINUS
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: LD_INT 4
67284: MINUS
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: LD_VAR 0 1
67298: PUSH
67299: LD_INT 3
67301: MINUS
67302: PUSH
67303: LD_VAR 0 2
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: LD_VAR 0 1
67320: PUSH
67321: LD_INT 4
67323: PLUS
67324: PUSH
67325: LD_VAR 0 2
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: PUSH
67338: LD_VAR 0 1
67342: PUSH
67343: LD_INT 3
67345: PLUS
67346: PUSH
67347: LD_VAR 0 2
67351: PUSH
67352: LD_INT 3
67354: PLUS
67355: PUSH
67356: LD_INT 5
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: LIST
67363: PUSH
67364: LD_VAR 0 1
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 4
67376: PLUS
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: ST_TO_ADDR
// end ; 1 :
67393: GO 68093
67395: LD_INT 1
67397: DOUBLE
67398: EQUAL
67399: IFTRUE 67403
67401: GO 67536
67403: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67404: LD_ADDR_VAR 0 5
67408: PUSH
67409: LD_VAR 0 1
67413: PUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_INT 4
67421: MINUS
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: PUSH
67431: LD_VAR 0 1
67435: PUSH
67436: LD_INT 3
67438: MINUS
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: LD_INT 3
67447: MINUS
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_INT 4
67464: MINUS
67465: PUSH
67466: LD_VAR 0 2
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_VAR 0 1
67483: PUSH
67484: LD_VAR 0 2
67488: PUSH
67489: LD_INT 3
67491: PLUS
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_INT 4
67508: PLUS
67509: PUSH
67510: LD_VAR 0 2
67514: PUSH
67515: LD_INT 4
67517: PLUS
67518: PUSH
67519: LD_INT 5
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: ST_TO_ADDR
// end ; 2 :
67534: GO 68093
67536: LD_INT 2
67538: DOUBLE
67539: EQUAL
67540: IFTRUE 67544
67542: GO 67673
67544: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67545: LD_ADDR_VAR 0 5
67549: PUSH
67550: LD_VAR 0 1
67554: PUSH
67555: LD_VAR 0 2
67559: PUSH
67560: LD_INT 3
67562: MINUS
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: PUSH
67572: LD_VAR 0 1
67576: PUSH
67577: LD_INT 4
67579: PLUS
67580: PUSH
67581: LD_VAR 0 2
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: LD_VAR 0 1
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_INT 4
67606: PLUS
67607: PUSH
67608: LD_INT 0
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_INT 3
67623: MINUS
67624: PUSH
67625: LD_VAR 0 2
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: LD_INT 4
67645: MINUS
67646: PUSH
67647: LD_VAR 0 2
67651: PUSH
67652: LD_INT 4
67654: MINUS
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: ST_TO_ADDR
// end ; 3 :
67671: GO 68093
67673: LD_INT 3
67675: DOUBLE
67676: EQUAL
67677: IFTRUE 67681
67679: GO 67814
67681: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67682: LD_ADDR_VAR 0 5
67686: PUSH
67687: LD_VAR 0 1
67691: PUSH
67692: LD_INT 3
67694: PLUS
67695: PUSH
67696: LD_VAR 0 2
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: PUSH
67709: LD_VAR 0 1
67713: PUSH
67714: LD_INT 4
67716: PLUS
67717: PUSH
67718: LD_VAR 0 2
67722: PUSH
67723: LD_INT 4
67725: PLUS
67726: PUSH
67727: LD_INT 5
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: LIST
67734: PUSH
67735: LD_VAR 0 1
67739: PUSH
67740: LD_INT 4
67742: MINUS
67743: PUSH
67744: LD_VAR 0 2
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: LIST
67756: PUSH
67757: LD_VAR 0 1
67761: PUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_INT 4
67769: MINUS
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: LIST
67778: PUSH
67779: LD_VAR 0 1
67783: PUSH
67784: LD_INT 3
67786: MINUS
67787: PUSH
67788: LD_VAR 0 2
67792: PUSH
67793: LD_INT 3
67795: MINUS
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: ST_TO_ADDR
// end ; 4 :
67812: GO 68093
67814: LD_INT 4
67816: DOUBLE
67817: EQUAL
67818: IFTRUE 67822
67820: GO 67955
67822: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67823: LD_ADDR_VAR 0 5
67827: PUSH
67828: LD_VAR 0 1
67832: PUSH
67833: LD_VAR 0 2
67837: PUSH
67838: LD_INT 4
67840: PLUS
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: PUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 3
67857: PLUS
67858: PUSH
67859: LD_VAR 0 2
67863: PUSH
67864: LD_INT 3
67866: PLUS
67867: PUSH
67868: LD_INT 5
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: PUSH
67876: LD_VAR 0 1
67880: PUSH
67881: LD_INT 4
67883: PLUS
67884: PUSH
67885: LD_VAR 0 2
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: LD_VAR 0 1
67902: PUSH
67903: LD_VAR 0 2
67907: PUSH
67908: LD_INT 3
67910: MINUS
67911: PUSH
67912: LD_INT 3
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: LIST
67919: PUSH
67920: LD_VAR 0 1
67924: PUSH
67925: LD_INT 4
67927: MINUS
67928: PUSH
67929: LD_VAR 0 2
67933: PUSH
67934: LD_INT 4
67936: MINUS
67937: PUSH
67938: LD_INT 2
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// end ; 5 :
67953: GO 68093
67955: LD_INT 5
67957: DOUBLE
67958: EQUAL
67959: IFTRUE 67963
67961: GO 68092
67963: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67964: LD_ADDR_VAR 0 5
67968: PUSH
67969: LD_VAR 0 1
67973: PUSH
67974: LD_INT 4
67976: MINUS
67977: PUSH
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: PUSH
67991: LD_VAR 0 1
67995: PUSH
67996: LD_VAR 0 2
68000: PUSH
68001: LD_INT 4
68003: MINUS
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: PUSH
68013: LD_VAR 0 1
68017: PUSH
68018: LD_INT 4
68020: PLUS
68021: PUSH
68022: LD_VAR 0 2
68026: PUSH
68027: LD_INT 4
68029: PLUS
68030: PUSH
68031: LD_INT 5
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: PUSH
68039: LD_VAR 0 1
68043: PUSH
68044: LD_INT 3
68046: PLUS
68047: PUSH
68048: LD_VAR 0 2
68052: PUSH
68053: LD_INT 4
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: PUSH
68061: LD_VAR 0 1
68065: PUSH
68066: LD_VAR 0 2
68070: PUSH
68071: LD_INT 3
68073: PLUS
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: ST_TO_ADDR
// end ; end ;
68090: GO 68093
68092: POP
// result := list ;
68093: LD_ADDR_VAR 0 4
68097: PUSH
68098: LD_VAR 0 5
68102: ST_TO_ADDR
// end ;
68103: LD_VAR 0 4
68107: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68108: LD_INT 0
68110: PPUSH
68111: PPUSH
68112: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68113: LD_VAR 0 1
68117: NOT
68118: PUSH
68119: LD_VAR 0 2
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: LD_INT 2
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 4
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: IN
68142: NOT
68143: OR
68144: IFFALSE 68148
// exit ;
68146: GO 68231
// tmp := [ ] ;
68148: LD_ADDR_VAR 0 5
68152: PUSH
68153: EMPTY
68154: ST_TO_ADDR
// for i in units do
68155: LD_ADDR_VAR 0 4
68159: PUSH
68160: LD_VAR 0 1
68164: PUSH
68165: FOR_IN
68166: IFFALSE 68200
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68168: LD_ADDR_VAR 0 5
68172: PUSH
68173: LD_VAR 0 5
68177: PPUSH
68178: LD_VAR 0 4
68182: PPUSH
68183: LD_VAR 0 2
68187: PPUSH
68188: CALL_OW 259
68192: PPUSH
68193: CALL 69604 0 2
68197: ST_TO_ADDR
68198: GO 68165
68200: POP
68201: POP
// if not tmp then
68202: LD_VAR 0 5
68206: NOT
68207: IFFALSE 68211
// exit ;
68209: GO 68231
// result := SortListByListDesc ( units , tmp ) ;
68211: LD_ADDR_VAR 0 3
68215: PUSH
68216: LD_VAR 0 1
68220: PPUSH
68221: LD_VAR 0 5
68225: PPUSH
68226: CALL_OW 77
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 3
68235: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68236: LD_INT 0
68238: PPUSH
68239: PPUSH
68240: PPUSH
// result := false ;
68241: LD_ADDR_VAR 0 3
68245: PUSH
68246: LD_INT 0
68248: ST_TO_ADDR
// if not building then
68249: LD_VAR 0 2
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68396
// x := GetX ( building ) ;
68258: LD_ADDR_VAR 0 4
68262: PUSH
68263: LD_VAR 0 2
68267: PPUSH
68268: CALL_OW 250
68272: ST_TO_ADDR
// y := GetY ( building ) ;
68273: LD_ADDR_VAR 0 5
68277: PUSH
68278: LD_VAR 0 2
68282: PPUSH
68283: CALL_OW 251
68287: ST_TO_ADDR
// if not x or not y then
68288: LD_VAR 0 4
68292: NOT
68293: PUSH
68294: LD_VAR 0 5
68298: NOT
68299: OR
68300: IFFALSE 68304
// exit ;
68302: GO 68396
// if GetTaskList ( unit ) then
68304: LD_VAR 0 1
68308: PPUSH
68309: CALL_OW 437
68313: IFFALSE 68396
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68315: LD_STRING e
68317: PUSH
68318: LD_VAR 0 1
68322: PPUSH
68323: CALL_OW 437
68327: PUSH
68328: LD_INT 1
68330: ARRAY
68331: PUSH
68332: LD_INT 1
68334: ARRAY
68335: EQUAL
68336: PUSH
68337: LD_VAR 0 4
68341: PUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 437
68351: PUSH
68352: LD_INT 1
68354: ARRAY
68355: PUSH
68356: LD_INT 2
68358: ARRAY
68359: EQUAL
68360: AND
68361: PUSH
68362: LD_VAR 0 5
68366: PUSH
68367: LD_VAR 0 1
68371: PPUSH
68372: CALL_OW 437
68376: PUSH
68377: LD_INT 1
68379: ARRAY
68380: PUSH
68381: LD_INT 3
68383: ARRAY
68384: EQUAL
68385: AND
68386: IFFALSE 68396
// result := true end ;
68388: LD_ADDR_VAR 0 3
68392: PUSH
68393: LD_INT 1
68395: ST_TO_ADDR
// end ;
68396: LD_VAR 0 3
68400: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68401: LD_INT 0
68403: PPUSH
// result := false ;
68404: LD_ADDR_VAR 0 4
68408: PUSH
68409: LD_INT 0
68411: ST_TO_ADDR
// if GetTaskList ( unit ) then
68412: LD_VAR 0 1
68416: PPUSH
68417: CALL_OW 437
68421: IFFALSE 68504
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68423: LD_STRING M
68425: PUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: CALL_OW 437
68435: PUSH
68436: LD_INT 1
68438: ARRAY
68439: PUSH
68440: LD_INT 1
68442: ARRAY
68443: EQUAL
68444: PUSH
68445: LD_VAR 0 2
68449: PUSH
68450: LD_VAR 0 1
68454: PPUSH
68455: CALL_OW 437
68459: PUSH
68460: LD_INT 1
68462: ARRAY
68463: PUSH
68464: LD_INT 2
68466: ARRAY
68467: EQUAL
68468: AND
68469: PUSH
68470: LD_VAR 0 3
68474: PUSH
68475: LD_VAR 0 1
68479: PPUSH
68480: CALL_OW 437
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PUSH
68489: LD_INT 3
68491: ARRAY
68492: EQUAL
68493: AND
68494: IFFALSE 68504
// result := true ;
68496: LD_ADDR_VAR 0 4
68500: PUSH
68501: LD_INT 1
68503: ST_TO_ADDR
// end ; end ;
68504: LD_VAR 0 4
68508: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68509: LD_INT 0
68511: PPUSH
68512: PPUSH
68513: PPUSH
68514: PPUSH
// if not unit or not area then
68515: LD_VAR 0 1
68519: NOT
68520: PUSH
68521: LD_VAR 0 2
68525: NOT
68526: OR
68527: IFFALSE 68531
// exit ;
68529: GO 68707
// tmp := AreaToList ( area , i ) ;
68531: LD_ADDR_VAR 0 6
68535: PUSH
68536: LD_VAR 0 2
68540: PPUSH
68541: LD_VAR 0 5
68545: PPUSH
68546: CALL_OW 517
68550: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68551: LD_ADDR_VAR 0 5
68555: PUSH
68556: DOUBLE
68557: LD_INT 1
68559: DEC
68560: ST_TO_ADDR
68561: LD_VAR 0 6
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: PUSH
68570: FOR_TO
68571: IFFALSE 68705
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68573: LD_ADDR_VAR 0 7
68577: PUSH
68578: LD_VAR 0 6
68582: PUSH
68583: LD_INT 1
68585: ARRAY
68586: PUSH
68587: LD_VAR 0 5
68591: ARRAY
68592: PUSH
68593: LD_VAR 0 6
68597: PUSH
68598: LD_INT 2
68600: ARRAY
68601: PUSH
68602: LD_VAR 0 5
68606: ARRAY
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68612: LD_INT 92
68614: PUSH
68615: LD_VAR 0 7
68619: PUSH
68620: LD_INT 1
68622: ARRAY
68623: PUSH
68624: LD_VAR 0 7
68628: PUSH
68629: LD_INT 2
68631: ARRAY
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: PPUSH
68642: CALL_OW 69
68646: PUSH
68647: LD_INT 0
68649: EQUAL
68650: IFFALSE 68703
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68652: LD_VAR 0 1
68656: PPUSH
68657: LD_VAR 0 7
68661: PUSH
68662: LD_INT 1
68664: ARRAY
68665: PPUSH
68666: LD_VAR 0 7
68670: PUSH
68671: LD_INT 2
68673: ARRAY
68674: PPUSH
68675: LD_VAR 0 3
68679: PPUSH
68680: CALL_OW 48
// result := IsPlaced ( unit ) ;
68684: LD_ADDR_VAR 0 4
68688: PUSH
68689: LD_VAR 0 1
68693: PPUSH
68694: CALL_OW 305
68698: ST_TO_ADDR
// exit ;
68699: POP
68700: POP
68701: GO 68707
// end ; end ;
68703: GO 68570
68705: POP
68706: POP
// end ;
68707: LD_VAR 0 4
68711: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68712: LD_INT 0
68714: PPUSH
68715: PPUSH
68716: PPUSH
// if not side or side > 8 then
68717: LD_VAR 0 1
68721: NOT
68722: PUSH
68723: LD_VAR 0 1
68727: PUSH
68728: LD_INT 8
68730: GREATER
68731: OR
68732: IFFALSE 68736
// exit ;
68734: GO 68923
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: LD_INT 22
68743: PUSH
68744: LD_VAR 0 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 21
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PPUSH
68767: CALL_OW 69
68771: ST_TO_ADDR
// if not tmp then
68772: LD_VAR 0 4
68776: NOT
68777: IFFALSE 68781
// exit ;
68779: GO 68923
// enable_addtolog := true ;
68781: LD_ADDR_OWVAR 81
68785: PUSH
68786: LD_INT 1
68788: ST_TO_ADDR
// AddToLog ( [ ) ;
68789: LD_STRING [
68791: PPUSH
68792: CALL_OW 561
// for i in tmp do
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_VAR 0 4
68805: PUSH
68806: FOR_IN
68807: IFFALSE 68914
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68809: LD_STRING [
68811: PUSH
68812: LD_VAR 0 3
68816: PPUSH
68817: CALL_OW 266
68821: STR
68822: PUSH
68823: LD_STRING , 
68825: STR
68826: PUSH
68827: LD_VAR 0 3
68831: PPUSH
68832: CALL_OW 250
68836: STR
68837: PUSH
68838: LD_STRING , 
68840: STR
68841: PUSH
68842: LD_VAR 0 3
68846: PPUSH
68847: CALL_OW 251
68851: STR
68852: PUSH
68853: LD_STRING , 
68855: STR
68856: PUSH
68857: LD_VAR 0 3
68861: PPUSH
68862: CALL_OW 254
68866: STR
68867: PUSH
68868: LD_STRING , 
68870: STR
68871: PUSH
68872: LD_VAR 0 3
68876: PPUSH
68877: LD_INT 1
68879: PPUSH
68880: CALL_OW 268
68884: STR
68885: PUSH
68886: LD_STRING , 
68888: STR
68889: PUSH
68890: LD_VAR 0 3
68894: PPUSH
68895: LD_INT 2
68897: PPUSH
68898: CALL_OW 268
68902: STR
68903: PUSH
68904: LD_STRING ],
68906: STR
68907: PPUSH
68908: CALL_OW 561
// end ;
68912: GO 68806
68914: POP
68915: POP
// AddToLog ( ]; ) ;
68916: LD_STRING ];
68918: PPUSH
68919: CALL_OW 561
// end ;
68923: LD_VAR 0 2
68927: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68928: LD_INT 0
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
68934: PPUSH
// if not area or not rate or not max then
68935: LD_VAR 0 1
68939: NOT
68940: PUSH
68941: LD_VAR 0 2
68945: NOT
68946: OR
68947: PUSH
68948: LD_VAR 0 4
68952: NOT
68953: OR
68954: IFFALSE 68958
// exit ;
68956: GO 69147
// while 1 do
68958: LD_INT 1
68960: IFFALSE 69147
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68962: LD_ADDR_VAR 0 9
68966: PUSH
68967: LD_VAR 0 1
68971: PPUSH
68972: LD_INT 1
68974: PPUSH
68975: CALL_OW 287
68979: PUSH
68980: LD_INT 10
68982: MUL
68983: ST_TO_ADDR
// r := rate / 10 ;
68984: LD_ADDR_VAR 0 7
68988: PUSH
68989: LD_VAR 0 2
68993: PUSH
68994: LD_INT 10
68996: DIVREAL
68997: ST_TO_ADDR
// time := 1 1$00 ;
68998: LD_ADDR_VAR 0 8
69002: PUSH
69003: LD_INT 2100
69005: ST_TO_ADDR
// if amount < min then
69006: LD_VAR 0 9
69010: PUSH
69011: LD_VAR 0 3
69015: LESS
69016: IFFALSE 69034
// r := r * 2 else
69018: LD_ADDR_VAR 0 7
69022: PUSH
69023: LD_VAR 0 7
69027: PUSH
69028: LD_INT 2
69030: MUL
69031: ST_TO_ADDR
69032: GO 69060
// if amount > max then
69034: LD_VAR 0 9
69038: PUSH
69039: LD_VAR 0 4
69043: GREATER
69044: IFFALSE 69060
// r := r / 2 ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_VAR 0 7
69055: PUSH
69056: LD_INT 2
69058: DIVREAL
69059: ST_TO_ADDR
// time := time / r ;
69060: LD_ADDR_VAR 0 8
69064: PUSH
69065: LD_VAR 0 8
69069: PUSH
69070: LD_VAR 0 7
69074: DIVREAL
69075: ST_TO_ADDR
// if time < 0 then
69076: LD_VAR 0 8
69080: PUSH
69081: LD_INT 0
69083: LESS
69084: IFFALSE 69101
// time := time * - 1 ;
69086: LD_ADDR_VAR 0 8
69090: PUSH
69091: LD_VAR 0 8
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: MUL
69100: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69101: LD_VAR 0 8
69105: PUSH
69106: LD_INT 35
69108: PPUSH
69109: LD_INT 875
69111: PPUSH
69112: CALL_OW 12
69116: PLUS
69117: PPUSH
69118: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69122: LD_INT 1
69124: PPUSH
69125: LD_INT 5
69127: PPUSH
69128: CALL_OW 12
69132: PPUSH
69133: LD_VAR 0 1
69137: PPUSH
69138: LD_INT 1
69140: PPUSH
69141: CALL_OW 55
// end ;
69145: GO 68958
// end ;
69147: LD_VAR 0 5
69151: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69152: LD_INT 0
69154: PPUSH
69155: PPUSH
69156: PPUSH
69157: PPUSH
69158: PPUSH
69159: PPUSH
69160: PPUSH
69161: PPUSH
// if not turrets or not factories then
69162: LD_VAR 0 1
69166: NOT
69167: PUSH
69168: LD_VAR 0 2
69172: NOT
69173: OR
69174: IFFALSE 69178
// exit ;
69176: GO 69485
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69178: LD_ADDR_VAR 0 10
69182: PUSH
69183: LD_INT 5
69185: PUSH
69186: LD_INT 6
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 2
69195: PUSH
69196: LD_INT 4
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: PUSH
69206: LD_INT 5
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 24
69220: PUSH
69221: LD_INT 25
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 23
69230: PUSH
69231: LD_INT 27
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 42
69244: PUSH
69245: LD_INT 43
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 44
69254: PUSH
69255: LD_INT 46
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 45
69264: PUSH
69265: LD_INT 47
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: ST_TO_ADDR
// result := [ ] ;
69282: LD_ADDR_VAR 0 3
69286: PUSH
69287: EMPTY
69288: ST_TO_ADDR
// for i in turrets do
69289: LD_ADDR_VAR 0 4
69293: PUSH
69294: LD_VAR 0 1
69298: PUSH
69299: FOR_IN
69300: IFFALSE 69483
// begin nat := GetNation ( i ) ;
69302: LD_ADDR_VAR 0 7
69306: PUSH
69307: LD_VAR 0 4
69311: PPUSH
69312: CALL_OW 248
69316: ST_TO_ADDR
// weapon := 0 ;
69317: LD_ADDR_VAR 0 8
69321: PUSH
69322: LD_INT 0
69324: ST_TO_ADDR
// if not nat then
69325: LD_VAR 0 7
69329: NOT
69330: IFFALSE 69334
// continue ;
69332: GO 69299
// for j in list [ nat ] do
69334: LD_ADDR_VAR 0 5
69338: PUSH
69339: LD_VAR 0 10
69343: PUSH
69344: LD_VAR 0 7
69348: ARRAY
69349: PUSH
69350: FOR_IN
69351: IFFALSE 69392
// if GetBWeapon ( i ) = j [ 1 ] then
69353: LD_VAR 0 4
69357: PPUSH
69358: CALL_OW 269
69362: PUSH
69363: LD_VAR 0 5
69367: PUSH
69368: LD_INT 1
69370: ARRAY
69371: EQUAL
69372: IFFALSE 69390
// begin weapon := j [ 2 ] ;
69374: LD_ADDR_VAR 0 8
69378: PUSH
69379: LD_VAR 0 5
69383: PUSH
69384: LD_INT 2
69386: ARRAY
69387: ST_TO_ADDR
// break ;
69388: GO 69392
// end ;
69390: GO 69350
69392: POP
69393: POP
// if not weapon then
69394: LD_VAR 0 8
69398: NOT
69399: IFFALSE 69403
// continue ;
69401: GO 69299
// for k in factories do
69403: LD_ADDR_VAR 0 6
69407: PUSH
69408: LD_VAR 0 2
69412: PUSH
69413: FOR_IN
69414: IFFALSE 69479
// begin weapons := AvailableWeaponList ( k ) ;
69416: LD_ADDR_VAR 0 9
69420: PUSH
69421: LD_VAR 0 6
69425: PPUSH
69426: CALL_OW 478
69430: ST_TO_ADDR
// if not weapons then
69431: LD_VAR 0 9
69435: NOT
69436: IFFALSE 69440
// continue ;
69438: GO 69413
// if weapon in weapons then
69440: LD_VAR 0 8
69444: PUSH
69445: LD_VAR 0 9
69449: IN
69450: IFFALSE 69477
// begin result := [ i , weapon ] ;
69452: LD_ADDR_VAR 0 3
69456: PUSH
69457: LD_VAR 0 4
69461: PUSH
69462: LD_VAR 0 8
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: ST_TO_ADDR
// exit ;
69471: POP
69472: POP
69473: POP
69474: POP
69475: GO 69485
// end ; end ;
69477: GO 69413
69479: POP
69480: POP
// end ;
69481: GO 69299
69483: POP
69484: POP
// end ;
69485: LD_VAR 0 3
69489: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69490: LD_INT 0
69492: PPUSH
// if not side or side > 8 then
69493: LD_VAR 0 3
69497: NOT
69498: PUSH
69499: LD_VAR 0 3
69503: PUSH
69504: LD_INT 8
69506: GREATER
69507: OR
69508: IFFALSE 69512
// exit ;
69510: GO 69571
// if not range then
69512: LD_VAR 0 4
69516: NOT
69517: IFFALSE 69528
// range := - 12 ;
69519: LD_ADDR_VAR 0 4
69523: PUSH
69524: LD_INT 12
69526: NEG
69527: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69528: LD_VAR 0 1
69532: PPUSH
69533: LD_VAR 0 2
69537: PPUSH
69538: LD_VAR 0 3
69542: PPUSH
69543: LD_VAR 0 4
69547: PPUSH
69548: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69552: LD_VAR 0 1
69556: PPUSH
69557: LD_VAR 0 2
69561: PPUSH
69562: LD_VAR 0 3
69566: PPUSH
69567: CALL_OW 331
// end ;
69571: LD_VAR 0 5
69575: RET
// export function Video ( mode ) ; begin
69576: LD_INT 0
69578: PPUSH
// ingame_video = mode ;
69579: LD_ADDR_OWVAR 52
69583: PUSH
69584: LD_VAR 0 1
69588: ST_TO_ADDR
// interface_hidden = mode ;
69589: LD_ADDR_OWVAR 54
69593: PUSH
69594: LD_VAR 0 1
69598: ST_TO_ADDR
// end ;
69599: LD_VAR 0 2
69603: RET
// export function Join ( array , element ) ; begin
69604: LD_INT 0
69606: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69607: LD_ADDR_VAR 0 3
69611: PUSH
69612: LD_VAR 0 1
69616: PPUSH
69617: LD_VAR 0 1
69621: PUSH
69622: LD_INT 1
69624: PLUS
69625: PPUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: CALL_OW 1
69635: ST_TO_ADDR
// end ;
69636: LD_VAR 0 3
69640: RET
// export function JoinUnion ( array , element ) ; begin
69641: LD_INT 0
69643: PPUSH
// result := array union element ;
69644: LD_ADDR_VAR 0 3
69648: PUSH
69649: LD_VAR 0 1
69653: PUSH
69654: LD_VAR 0 2
69658: UNION
69659: ST_TO_ADDR
// end ;
69660: LD_VAR 0 3
69664: RET
// export function GetBehemoths ( side ) ; begin
69665: LD_INT 0
69667: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69668: LD_ADDR_VAR 0 2
69672: PUSH
69673: LD_INT 22
69675: PUSH
69676: LD_VAR 0 1
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 31
69687: PUSH
69688: LD_INT 25
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PPUSH
69699: CALL_OW 69
69703: ST_TO_ADDR
// end ;
69704: LD_VAR 0 2
69708: RET
// export function Shuffle ( array ) ; var i , index ; begin
69709: LD_INT 0
69711: PPUSH
69712: PPUSH
69713: PPUSH
// result := [ ] ;
69714: LD_ADDR_VAR 0 2
69718: PUSH
69719: EMPTY
69720: ST_TO_ADDR
// if not array then
69721: LD_VAR 0 1
69725: NOT
69726: IFFALSE 69730
// exit ;
69728: GO 69829
// Randomize ;
69730: CALL_OW 10
// for i = array downto 1 do
69734: LD_ADDR_VAR 0 3
69738: PUSH
69739: DOUBLE
69740: LD_VAR 0 1
69744: INC
69745: ST_TO_ADDR
69746: LD_INT 1
69748: PUSH
69749: FOR_DOWNTO
69750: IFFALSE 69827
// begin index := rand ( 1 , array ) ;
69752: LD_ADDR_VAR 0 4
69756: PUSH
69757: LD_INT 1
69759: PPUSH
69760: LD_VAR 0 1
69764: PPUSH
69765: CALL_OW 12
69769: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69770: LD_ADDR_VAR 0 2
69774: PUSH
69775: LD_VAR 0 2
69779: PPUSH
69780: LD_VAR 0 2
69784: PUSH
69785: LD_INT 1
69787: PLUS
69788: PPUSH
69789: LD_VAR 0 1
69793: PUSH
69794: LD_VAR 0 4
69798: ARRAY
69799: PPUSH
69800: CALL_OW 2
69804: ST_TO_ADDR
// array := Delete ( array , index ) ;
69805: LD_ADDR_VAR 0 1
69809: PUSH
69810: LD_VAR 0 1
69814: PPUSH
69815: LD_VAR 0 4
69819: PPUSH
69820: CALL_OW 3
69824: ST_TO_ADDR
// end ;
69825: GO 69749
69827: POP
69828: POP
// end ;
69829: LD_VAR 0 2
69833: RET
// export function GetBaseMaterials ( base ) ; begin
69834: LD_INT 0
69836: PPUSH
// result := [ 0 , 0 , 0 ] ;
69837: LD_ADDR_VAR 0 2
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 0
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: LIST
69855: ST_TO_ADDR
// if not base then
69856: LD_VAR 0 1
69860: NOT
69861: IFFALSE 69865
// exit ;
69863: GO 69914
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69865: LD_ADDR_VAR 0 2
69869: PUSH
69870: LD_VAR 0 1
69874: PPUSH
69875: LD_INT 1
69877: PPUSH
69878: CALL_OW 275
69882: PUSH
69883: LD_VAR 0 1
69887: PPUSH
69888: LD_INT 2
69890: PPUSH
69891: CALL_OW 275
69895: PUSH
69896: LD_VAR 0 1
69900: PPUSH
69901: LD_INT 3
69903: PPUSH
69904: CALL_OW 275
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: LIST
69913: ST_TO_ADDR
// end ;
69914: LD_VAR 0 2
69918: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69919: LD_INT 0
69921: PPUSH
69922: PPUSH
// result := array ;
69923: LD_ADDR_VAR 0 3
69927: PUSH
69928: LD_VAR 0 1
69932: ST_TO_ADDR
// if size >= result then
69933: LD_VAR 0 2
69937: PUSH
69938: LD_VAR 0 3
69942: GREATEREQUAL
69943: IFFALSE 69947
// exit ;
69945: GO 69997
// if size then
69947: LD_VAR 0 2
69951: IFFALSE 69997
// for i := array downto size do
69953: LD_ADDR_VAR 0 4
69957: PUSH
69958: DOUBLE
69959: LD_VAR 0 1
69963: INC
69964: ST_TO_ADDR
69965: LD_VAR 0 2
69969: PUSH
69970: FOR_DOWNTO
69971: IFFALSE 69995
// result := Delete ( result , result ) ;
69973: LD_ADDR_VAR 0 3
69977: PUSH
69978: LD_VAR 0 3
69982: PPUSH
69983: LD_VAR 0 3
69987: PPUSH
69988: CALL_OW 3
69992: ST_TO_ADDR
69993: GO 69970
69995: POP
69996: POP
// end ;
69997: LD_VAR 0 3
70001: RET
// export function ComExit ( unit ) ; var tmp ; begin
70002: LD_INT 0
70004: PPUSH
70005: PPUSH
// if not IsInUnit ( unit ) then
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 310
70015: NOT
70016: IFFALSE 70020
// exit ;
70018: GO 70080
// tmp := IsInUnit ( unit ) ;
70020: LD_ADDR_VAR 0 3
70024: PUSH
70025: LD_VAR 0 1
70029: PPUSH
70030: CALL_OW 310
70034: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70035: LD_VAR 0 3
70039: PPUSH
70040: CALL_OW 247
70044: PUSH
70045: LD_INT 2
70047: EQUAL
70048: IFFALSE 70061
// ComExitVehicle ( unit ) else
70050: LD_VAR 0 1
70054: PPUSH
70055: CALL_OW 121
70059: GO 70070
// ComExitBuilding ( unit ) ;
70061: LD_VAR 0 1
70065: PPUSH
70066: CALL_OW 122
// result := tmp ;
70070: LD_ADDR_VAR 0 2
70074: PUSH
70075: LD_VAR 0 3
70079: ST_TO_ADDR
// end ;
70080: LD_VAR 0 2
70084: RET
// export function ComExitAll ( units ) ; var i ; begin
70085: LD_INT 0
70087: PPUSH
70088: PPUSH
// if not units then
70089: LD_VAR 0 1
70093: NOT
70094: IFFALSE 70098
// exit ;
70096: GO 70124
// for i in units do
70098: LD_ADDR_VAR 0 3
70102: PUSH
70103: LD_VAR 0 1
70107: PUSH
70108: FOR_IN
70109: IFFALSE 70122
// ComExit ( i ) ;
70111: LD_VAR 0 3
70115: PPUSH
70116: CALL 70002 0 1
70120: GO 70108
70122: POP
70123: POP
// end ;
70124: LD_VAR 0 2
70128: RET
// export function ResetHc ; begin
70129: LD_INT 0
70131: PPUSH
// InitHc ;
70132: CALL_OW 19
// hc_importance := 0 ;
70136: LD_ADDR_OWVAR 32
70140: PUSH
70141: LD_INT 0
70143: ST_TO_ADDR
// end ;
70144: LD_VAR 0 1
70148: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70149: LD_INT 0
70151: PPUSH
70152: PPUSH
70153: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70154: LD_ADDR_VAR 0 6
70158: PUSH
70159: LD_VAR 0 1
70163: PUSH
70164: LD_VAR 0 3
70168: PLUS
70169: PUSH
70170: LD_INT 2
70172: DIV
70173: ST_TO_ADDR
// if _x < 0 then
70174: LD_VAR 0 6
70178: PUSH
70179: LD_INT 0
70181: LESS
70182: IFFALSE 70199
// _x := _x * - 1 ;
70184: LD_ADDR_VAR 0 6
70188: PUSH
70189: LD_VAR 0 6
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: MUL
70198: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70199: LD_ADDR_VAR 0 7
70203: PUSH
70204: LD_VAR 0 2
70208: PUSH
70209: LD_VAR 0 4
70213: PLUS
70214: PUSH
70215: LD_INT 2
70217: DIV
70218: ST_TO_ADDR
// if _y < 0 then
70219: LD_VAR 0 7
70223: PUSH
70224: LD_INT 0
70226: LESS
70227: IFFALSE 70244
// _y := _y * - 1 ;
70229: LD_ADDR_VAR 0 7
70233: PUSH
70234: LD_VAR 0 7
70238: PUSH
70239: LD_INT 1
70241: NEG
70242: MUL
70243: ST_TO_ADDR
// result := [ _x , _y ] ;
70244: LD_ADDR_VAR 0 5
70248: PUSH
70249: LD_VAR 0 6
70253: PUSH
70254: LD_VAR 0 7
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: ST_TO_ADDR
// end ;
70263: LD_VAR 0 5
70267: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70268: LD_INT 0
70270: PPUSH
70271: PPUSH
70272: PPUSH
70273: PPUSH
// task := GetTaskList ( unit ) ;
70274: LD_ADDR_VAR 0 7
70278: PUSH
70279: LD_VAR 0 1
70283: PPUSH
70284: CALL_OW 437
70288: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70289: LD_VAR 0 7
70293: NOT
70294: PUSH
70295: LD_VAR 0 1
70299: PPUSH
70300: LD_VAR 0 2
70304: PPUSH
70305: CALL_OW 308
70309: NOT
70310: AND
70311: IFFALSE 70315
// exit ;
70313: GO 70433
// if IsInArea ( unit , area ) then
70315: LD_VAR 0 1
70319: PPUSH
70320: LD_VAR 0 2
70324: PPUSH
70325: CALL_OW 308
70329: IFFALSE 70347
// begin ComMoveToArea ( unit , goAway ) ;
70331: LD_VAR 0 1
70335: PPUSH
70336: LD_VAR 0 3
70340: PPUSH
70341: CALL_OW 113
// exit ;
70345: GO 70433
// end ; if task [ 1 ] [ 1 ] <> M then
70347: LD_VAR 0 7
70351: PUSH
70352: LD_INT 1
70354: ARRAY
70355: PUSH
70356: LD_INT 1
70358: ARRAY
70359: PUSH
70360: LD_STRING M
70362: NONEQUAL
70363: IFFALSE 70367
// exit ;
70365: GO 70433
// x := task [ 1 ] [ 2 ] ;
70367: LD_ADDR_VAR 0 5
70371: PUSH
70372: LD_VAR 0 7
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_INT 2
70383: ARRAY
70384: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70385: LD_ADDR_VAR 0 6
70389: PUSH
70390: LD_VAR 0 7
70394: PUSH
70395: LD_INT 1
70397: ARRAY
70398: PUSH
70399: LD_INT 3
70401: ARRAY
70402: ST_TO_ADDR
// if InArea ( x , y , area ) then
70403: LD_VAR 0 5
70407: PPUSH
70408: LD_VAR 0 6
70412: PPUSH
70413: LD_VAR 0 2
70417: PPUSH
70418: CALL_OW 309
70422: IFFALSE 70433
// ComStop ( unit ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: CALL_OW 141
// end ;
70433: LD_VAR 0 4
70437: RET
// export function Abs ( value ) ; begin
70438: LD_INT 0
70440: PPUSH
// result := value ;
70441: LD_ADDR_VAR 0 2
70445: PUSH
70446: LD_VAR 0 1
70450: ST_TO_ADDR
// if value < 0 then
70451: LD_VAR 0 1
70455: PUSH
70456: LD_INT 0
70458: LESS
70459: IFFALSE 70476
// result := value * - 1 ;
70461: LD_ADDR_VAR 0 2
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: LD_INT 1
70473: NEG
70474: MUL
70475: ST_TO_ADDR
// end ;
70476: LD_VAR 0 2
70480: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70481: LD_INT 0
70483: PPUSH
70484: PPUSH
70485: PPUSH
70486: PPUSH
70487: PPUSH
70488: PPUSH
70489: PPUSH
70490: PPUSH
// if not unit or not building then
70491: LD_VAR 0 1
70495: NOT
70496: PUSH
70497: LD_VAR 0 2
70501: NOT
70502: OR
70503: IFFALSE 70507
// exit ;
70505: GO 70733
// x := GetX ( building ) ;
70507: LD_ADDR_VAR 0 4
70511: PUSH
70512: LD_VAR 0 2
70516: PPUSH
70517: CALL_OW 250
70521: ST_TO_ADDR
// y := GetY ( building ) ;
70522: LD_ADDR_VAR 0 6
70526: PUSH
70527: LD_VAR 0 2
70531: PPUSH
70532: CALL_OW 251
70536: ST_TO_ADDR
// d := GetDir ( building ) ;
70537: LD_ADDR_VAR 0 8
70541: PUSH
70542: LD_VAR 0 2
70546: PPUSH
70547: CALL_OW 254
70551: ST_TO_ADDR
// r := 4 ;
70552: LD_ADDR_VAR 0 9
70556: PUSH
70557: LD_INT 4
70559: ST_TO_ADDR
// for i := 1 to 5 do
70560: LD_ADDR_VAR 0 10
70564: PUSH
70565: DOUBLE
70566: LD_INT 1
70568: DEC
70569: ST_TO_ADDR
70570: LD_INT 5
70572: PUSH
70573: FOR_TO
70574: IFFALSE 70731
// begin _x := ShiftX ( x , d , r + i ) ;
70576: LD_ADDR_VAR 0 5
70580: PUSH
70581: LD_VAR 0 4
70585: PPUSH
70586: LD_VAR 0 8
70590: PPUSH
70591: LD_VAR 0 9
70595: PUSH
70596: LD_VAR 0 10
70600: PLUS
70601: PPUSH
70602: CALL_OW 272
70606: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70607: LD_ADDR_VAR 0 7
70611: PUSH
70612: LD_VAR 0 6
70616: PPUSH
70617: LD_VAR 0 8
70621: PPUSH
70622: LD_VAR 0 9
70626: PUSH
70627: LD_VAR 0 10
70631: PLUS
70632: PPUSH
70633: CALL_OW 273
70637: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70638: LD_VAR 0 5
70642: PPUSH
70643: LD_VAR 0 7
70647: PPUSH
70648: CALL_OW 488
70652: PUSH
70653: LD_VAR 0 5
70657: PPUSH
70658: LD_VAR 0 7
70662: PPUSH
70663: CALL_OW 428
70667: PPUSH
70668: CALL_OW 247
70672: PUSH
70673: LD_INT 3
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: IN
70683: NOT
70684: AND
70685: IFFALSE 70729
// begin ComMoveXY ( unit , _x , _y ) ;
70687: LD_VAR 0 1
70691: PPUSH
70692: LD_VAR 0 5
70696: PPUSH
70697: LD_VAR 0 7
70701: PPUSH
70702: CALL_OW 111
// result := [ _x , _y ] ;
70706: LD_ADDR_VAR 0 3
70710: PUSH
70711: LD_VAR 0 5
70715: PUSH
70716: LD_VAR 0 7
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: ST_TO_ADDR
// exit ;
70725: POP
70726: POP
70727: GO 70733
// end ; end ;
70729: GO 70573
70731: POP
70732: POP
// end ;
70733: LD_VAR 0 3
70737: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70738: LD_INT 0
70740: PPUSH
70741: PPUSH
70742: PPUSH
// result := 0 ;
70743: LD_ADDR_VAR 0 3
70747: PUSH
70748: LD_INT 0
70750: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70751: LD_VAR 0 1
70755: PUSH
70756: LD_INT 0
70758: LESS
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 8
70767: GREATER
70768: OR
70769: PUSH
70770: LD_VAR 0 2
70774: PUSH
70775: LD_INT 0
70777: LESS
70778: OR
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_INT 8
70787: GREATER
70788: OR
70789: IFFALSE 70793
// exit ;
70791: GO 70868
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70793: LD_ADDR_VAR 0 4
70797: PUSH
70798: LD_INT 22
70800: PUSH
70801: LD_VAR 0 2
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PPUSH
70810: CALL_OW 69
70814: PUSH
70815: FOR_IN
70816: IFFALSE 70866
// begin un := UnitShoot ( i ) ;
70818: LD_ADDR_VAR 0 5
70822: PUSH
70823: LD_VAR 0 4
70827: PPUSH
70828: CALL_OW 504
70832: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70833: LD_VAR 0 5
70837: PPUSH
70838: CALL_OW 255
70842: PUSH
70843: LD_VAR 0 1
70847: EQUAL
70848: IFFALSE 70864
// begin result := un ;
70850: LD_ADDR_VAR 0 3
70854: PUSH
70855: LD_VAR 0 5
70859: ST_TO_ADDR
// exit ;
70860: POP
70861: POP
70862: GO 70868
// end ; end ;
70864: GO 70815
70866: POP
70867: POP
// end ;
70868: LD_VAR 0 3
70872: RET
// export function GetCargoBay ( units ) ; begin
70873: LD_INT 0
70875: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70876: LD_ADDR_VAR 0 2
70880: PUSH
70881: LD_VAR 0 1
70885: PPUSH
70886: LD_INT 2
70888: PUSH
70889: LD_INT 34
70891: PUSH
70892: LD_INT 12
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 34
70901: PUSH
70902: LD_INT 51
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 34
70911: PUSH
70912: LD_INT 32
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 34
70921: PUSH
70922: LD_INT 89
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: PPUSH
70936: CALL_OW 72
70940: ST_TO_ADDR
// end ;
70941: LD_VAR 0 2
70945: RET
// export function Negate ( value ) ; begin
70946: LD_INT 0
70948: PPUSH
// result := not value ;
70949: LD_ADDR_VAR 0 2
70953: PUSH
70954: LD_VAR 0 1
70958: NOT
70959: ST_TO_ADDR
// end ;
70960: LD_VAR 0 2
70964: RET
// export function Inc ( value ) ; begin
70965: LD_INT 0
70967: PPUSH
// result := value + 1 ;
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_VAR 0 1
70977: PUSH
70978: LD_INT 1
70980: PLUS
70981: ST_TO_ADDR
// end ;
70982: LD_VAR 0 2
70986: RET
// export function Dec ( value ) ; begin
70987: LD_INT 0
70989: PPUSH
// result := value - 1 ;
70990: LD_ADDR_VAR 0 2
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 1
71002: MINUS
71003: ST_TO_ADDR
// end ;
71004: LD_VAR 0 2
71008: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71009: LD_INT 0
71011: PPUSH
71012: PPUSH
71013: PPUSH
71014: PPUSH
71015: PPUSH
71016: PPUSH
71017: PPUSH
71018: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71019: LD_VAR 0 1
71023: PPUSH
71024: LD_VAR 0 2
71028: PPUSH
71029: CALL_OW 488
71033: NOT
71034: PUSH
71035: LD_VAR 0 3
71039: PPUSH
71040: LD_VAR 0 4
71044: PPUSH
71045: CALL_OW 488
71049: NOT
71050: OR
71051: IFFALSE 71064
// begin result := - 1 ;
71053: LD_ADDR_VAR 0 5
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: ST_TO_ADDR
// exit ;
71062: GO 71299
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71064: LD_ADDR_VAR 0 12
71068: PUSH
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: LD_VAR 0 3
71083: PPUSH
71084: LD_VAR 0 4
71088: PPUSH
71089: CALL 70149 0 4
71093: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71094: LD_ADDR_VAR 0 11
71098: PUSH
71099: LD_VAR 0 1
71103: PPUSH
71104: LD_VAR 0 2
71108: PPUSH
71109: LD_VAR 0 12
71113: PUSH
71114: LD_INT 1
71116: ARRAY
71117: PPUSH
71118: LD_VAR 0 12
71122: PUSH
71123: LD_INT 2
71125: ARRAY
71126: PPUSH
71127: CALL_OW 298
71131: ST_TO_ADDR
// distance := 9999 ;
71132: LD_ADDR_VAR 0 10
71136: PUSH
71137: LD_INT 9999
71139: ST_TO_ADDR
// for i := 0 to 5 do
71140: LD_ADDR_VAR 0 6
71144: PUSH
71145: DOUBLE
71146: LD_INT 0
71148: DEC
71149: ST_TO_ADDR
71150: LD_INT 5
71152: PUSH
71153: FOR_TO
71154: IFFALSE 71297
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71156: LD_ADDR_VAR 0 7
71160: PUSH
71161: LD_VAR 0 1
71165: PPUSH
71166: LD_VAR 0 6
71170: PPUSH
71171: LD_VAR 0 11
71175: PPUSH
71176: CALL_OW 272
71180: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71181: LD_ADDR_VAR 0 8
71185: PUSH
71186: LD_VAR 0 2
71190: PPUSH
71191: LD_VAR 0 6
71195: PPUSH
71196: LD_VAR 0 11
71200: PPUSH
71201: CALL_OW 273
71205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71206: LD_VAR 0 7
71210: PPUSH
71211: LD_VAR 0 8
71215: PPUSH
71216: CALL_OW 488
71220: NOT
71221: IFFALSE 71225
// continue ;
71223: GO 71153
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71225: LD_ADDR_VAR 0 9
71229: PUSH
71230: LD_VAR 0 12
71234: PUSH
71235: LD_INT 1
71237: ARRAY
71238: PPUSH
71239: LD_VAR 0 12
71243: PUSH
71244: LD_INT 2
71246: ARRAY
71247: PPUSH
71248: LD_VAR 0 7
71252: PPUSH
71253: LD_VAR 0 8
71257: PPUSH
71258: CALL_OW 298
71262: ST_TO_ADDR
// if tmp < distance then
71263: LD_VAR 0 9
71267: PUSH
71268: LD_VAR 0 10
71272: LESS
71273: IFFALSE 71295
// begin result := i ;
71275: LD_ADDR_VAR 0 5
71279: PUSH
71280: LD_VAR 0 6
71284: ST_TO_ADDR
// distance := tmp ;
71285: LD_ADDR_VAR 0 10
71289: PUSH
71290: LD_VAR 0 9
71294: ST_TO_ADDR
// end ; end ;
71295: GO 71153
71297: POP
71298: POP
// end ;
71299: LD_VAR 0 5
71303: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71304: LD_INT 0
71306: PPUSH
71307: PPUSH
// if not driver or not IsInUnit ( driver ) then
71308: LD_VAR 0 1
71312: NOT
71313: PUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 310
71323: NOT
71324: OR
71325: IFFALSE 71329
// exit ;
71327: GO 71419
// vehicle := IsInUnit ( driver ) ;
71329: LD_ADDR_VAR 0 3
71333: PUSH
71334: LD_VAR 0 1
71338: PPUSH
71339: CALL_OW 310
71343: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71344: LD_VAR 0 1
71348: PPUSH
71349: LD_STRING \
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: PUSH
71379: LD_STRING E
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_VAR 0 3
71392: PUSH
71393: LD_INT 0
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PPUSH
71415: CALL_OW 446
// end ;
71419: LD_VAR 0 2
71423: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71424: LD_INT 0
71426: PPUSH
71427: PPUSH
// if not driver or not IsInUnit ( driver ) then
71428: LD_VAR 0 1
71432: NOT
71433: PUSH
71434: LD_VAR 0 1
71438: PPUSH
71439: CALL_OW 310
71443: NOT
71444: OR
71445: IFFALSE 71449
// exit ;
71447: GO 71539
// vehicle := IsInUnit ( driver ) ;
71449: LD_ADDR_VAR 0 3
71453: PUSH
71454: LD_VAR 0 1
71458: PPUSH
71459: CALL_OW 310
71463: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71464: LD_VAR 0 1
71468: PPUSH
71469: LD_STRING \
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: LD_INT 0
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: PUSH
71499: LD_STRING E
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_VAR 0 3
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PPUSH
71535: CALL_OW 447
// end ;
71539: LD_VAR 0 2
71543: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71544: LD_INT 0
71546: PPUSH
71547: PPUSH
71548: PPUSH
// tmp := [ ] ;
71549: LD_ADDR_VAR 0 5
71553: PUSH
71554: EMPTY
71555: ST_TO_ADDR
// for i in units do
71556: LD_ADDR_VAR 0 4
71560: PUSH
71561: LD_VAR 0 1
71565: PUSH
71566: FOR_IN
71567: IFFALSE 71605
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71569: LD_ADDR_VAR 0 5
71573: PUSH
71574: LD_VAR 0 5
71578: PPUSH
71579: LD_VAR 0 5
71583: PUSH
71584: LD_INT 1
71586: PLUS
71587: PPUSH
71588: LD_VAR 0 4
71592: PPUSH
71593: CALL_OW 256
71597: PPUSH
71598: CALL_OW 2
71602: ST_TO_ADDR
71603: GO 71566
71605: POP
71606: POP
// if not tmp then
71607: LD_VAR 0 5
71611: NOT
71612: IFFALSE 71616
// exit ;
71614: GO 71664
// if asc then
71616: LD_VAR 0 2
71620: IFFALSE 71644
// result := SortListByListAsc ( units , tmp ) else
71622: LD_ADDR_VAR 0 3
71626: PUSH
71627: LD_VAR 0 1
71631: PPUSH
71632: LD_VAR 0 5
71636: PPUSH
71637: CALL_OW 76
71641: ST_TO_ADDR
71642: GO 71664
// result := SortListByListDesc ( units , tmp ) ;
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: LD_VAR 0 5
71658: PPUSH
71659: CALL_OW 77
71663: ST_TO_ADDR
// end ;
71664: LD_VAR 0 3
71668: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71669: LD_INT 0
71671: PPUSH
71672: PPUSH
// task := GetTaskList ( mech ) ;
71673: LD_ADDR_VAR 0 4
71677: PUSH
71678: LD_VAR 0 1
71682: PPUSH
71683: CALL_OW 437
71687: ST_TO_ADDR
// if not task then
71688: LD_VAR 0 4
71692: NOT
71693: IFFALSE 71697
// exit ;
71695: GO 71739
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71697: LD_ADDR_VAR 0 3
71701: PUSH
71702: LD_VAR 0 4
71706: PUSH
71707: LD_INT 1
71709: ARRAY
71710: PUSH
71711: LD_INT 1
71713: ARRAY
71714: PUSH
71715: LD_STRING r
71717: EQUAL
71718: PUSH
71719: LD_VAR 0 4
71723: PUSH
71724: LD_INT 1
71726: ARRAY
71727: PUSH
71728: LD_INT 4
71730: ARRAY
71731: PUSH
71732: LD_VAR 0 2
71736: EQUAL
71737: AND
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 3
71743: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71744: LD_INT 0
71746: PPUSH
// SetDir ( unit , d ) ;
71747: LD_VAR 0 1
71751: PPUSH
71752: LD_VAR 0 4
71756: PPUSH
71757: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71761: LD_VAR 0 1
71765: PPUSH
71766: LD_VAR 0 2
71770: PPUSH
71771: LD_VAR 0 3
71775: PPUSH
71776: LD_VAR 0 5
71780: PPUSH
71781: CALL_OW 48
// end ;
71785: LD_VAR 0 6
71789: RET
// export function ToNaturalNumber ( number ) ; begin
71790: LD_INT 0
71792: PPUSH
// result := number div 1 ;
71793: LD_ADDR_VAR 0 2
71797: PUSH
71798: LD_VAR 0 1
71802: PUSH
71803: LD_INT 1
71805: DIV
71806: ST_TO_ADDR
// if number < 0 then
71807: LD_VAR 0 1
71811: PUSH
71812: LD_INT 0
71814: LESS
71815: IFFALSE 71825
// result := 0 ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_INT 0
71824: ST_TO_ADDR
// end ;
71825: LD_VAR 0 2
71829: RET
// export function SortByClass ( units , class ) ; var un ; begin
71830: LD_INT 0
71832: PPUSH
71833: PPUSH
// if not units or not class then
71834: LD_VAR 0 1
71838: NOT
71839: PUSH
71840: LD_VAR 0 2
71844: NOT
71845: OR
71846: IFFALSE 71850
// exit ;
71848: GO 71945
// result := [ ] ;
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: EMPTY
71856: ST_TO_ADDR
// for un in units do
71857: LD_ADDR_VAR 0 4
71861: PUSH
71862: LD_VAR 0 1
71866: PUSH
71867: FOR_IN
71868: IFFALSE 71943
// if GetClass ( un ) = class then
71870: LD_VAR 0 4
71874: PPUSH
71875: CALL_OW 257
71879: PUSH
71880: LD_VAR 0 2
71884: EQUAL
71885: IFFALSE 71912
// result := Insert ( result , 1 , un ) else
71887: LD_ADDR_VAR 0 3
71891: PUSH
71892: LD_VAR 0 3
71896: PPUSH
71897: LD_INT 1
71899: PPUSH
71900: LD_VAR 0 4
71904: PPUSH
71905: CALL_OW 2
71909: ST_TO_ADDR
71910: GO 71941
// result := Replace ( result , result + 1 , un ) ;
71912: LD_ADDR_VAR 0 3
71916: PUSH
71917: LD_VAR 0 3
71921: PPUSH
71922: LD_VAR 0 3
71926: PUSH
71927: LD_INT 1
71929: PLUS
71930: PPUSH
71931: LD_VAR 0 4
71935: PPUSH
71936: CALL_OW 1
71940: ST_TO_ADDR
71941: GO 71867
71943: POP
71944: POP
// end ;
71945: LD_VAR 0 3
71949: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71950: LD_INT 0
71952: PPUSH
71953: PPUSH
71954: PPUSH
71955: PPUSH
71956: PPUSH
71957: PPUSH
71958: PPUSH
// result := [ ] ;
71959: LD_ADDR_VAR 0 4
71963: PUSH
71964: EMPTY
71965: ST_TO_ADDR
// if x - r < 0 then
71966: LD_VAR 0 1
71970: PUSH
71971: LD_VAR 0 3
71975: MINUS
71976: PUSH
71977: LD_INT 0
71979: LESS
71980: IFFALSE 71992
// min_x := 0 else
71982: LD_ADDR_VAR 0 8
71986: PUSH
71987: LD_INT 0
71989: ST_TO_ADDR
71990: GO 72008
// min_x := x - r ;
71992: LD_ADDR_VAR 0 8
71996: PUSH
71997: LD_VAR 0 1
72001: PUSH
72002: LD_VAR 0 3
72006: MINUS
72007: ST_TO_ADDR
// if y - r < 0 then
72008: LD_VAR 0 2
72012: PUSH
72013: LD_VAR 0 3
72017: MINUS
72018: PUSH
72019: LD_INT 0
72021: LESS
72022: IFFALSE 72034
// min_y := 0 else
72024: LD_ADDR_VAR 0 7
72028: PUSH
72029: LD_INT 0
72031: ST_TO_ADDR
72032: GO 72050
// min_y := y - r ;
72034: LD_ADDR_VAR 0 7
72038: PUSH
72039: LD_VAR 0 2
72043: PUSH
72044: LD_VAR 0 3
72048: MINUS
72049: ST_TO_ADDR
// max_x := x + r ;
72050: LD_ADDR_VAR 0 9
72054: PUSH
72055: LD_VAR 0 1
72059: PUSH
72060: LD_VAR 0 3
72064: PLUS
72065: ST_TO_ADDR
// max_y := y + r ;
72066: LD_ADDR_VAR 0 10
72070: PUSH
72071: LD_VAR 0 2
72075: PUSH
72076: LD_VAR 0 3
72080: PLUS
72081: ST_TO_ADDR
// for _x = min_x to max_x do
72082: LD_ADDR_VAR 0 5
72086: PUSH
72087: DOUBLE
72088: LD_VAR 0 8
72092: DEC
72093: ST_TO_ADDR
72094: LD_VAR 0 9
72098: PUSH
72099: FOR_TO
72100: IFFALSE 72201
// for _y = min_y to max_y do
72102: LD_ADDR_VAR 0 6
72106: PUSH
72107: DOUBLE
72108: LD_VAR 0 7
72112: DEC
72113: ST_TO_ADDR
72114: LD_VAR 0 10
72118: PUSH
72119: FOR_TO
72120: IFFALSE 72197
// begin if not ValidHex ( _x , _y ) then
72122: LD_VAR 0 5
72126: PPUSH
72127: LD_VAR 0 6
72131: PPUSH
72132: CALL_OW 488
72136: NOT
72137: IFFALSE 72141
// continue ;
72139: GO 72119
// if GetResourceTypeXY ( _x , _y ) then
72141: LD_VAR 0 5
72145: PPUSH
72146: LD_VAR 0 6
72150: PPUSH
72151: CALL_OW 283
72155: IFFALSE 72195
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72157: LD_ADDR_VAR 0 4
72161: PUSH
72162: LD_VAR 0 4
72166: PPUSH
72167: LD_VAR 0 4
72171: PUSH
72172: LD_INT 1
72174: PLUS
72175: PPUSH
72176: LD_VAR 0 5
72180: PUSH
72181: LD_VAR 0 6
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PPUSH
72190: CALL_OW 1
72194: ST_TO_ADDR
// end ;
72195: GO 72119
72197: POP
72198: POP
72199: GO 72099
72201: POP
72202: POP
// end ;
72203: LD_VAR 0 4
72207: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72208: LD_INT 0
72210: PPUSH
72211: PPUSH
72212: PPUSH
72213: PPUSH
72214: PPUSH
72215: PPUSH
72216: PPUSH
72217: PPUSH
// if not units then
72218: LD_VAR 0 1
72222: NOT
72223: IFFALSE 72227
// exit ;
72225: GO 72751
// result := UnitFilter ( units , [ f_ok ] ) ;
72227: LD_ADDR_VAR 0 3
72231: PUSH
72232: LD_VAR 0 1
72236: PPUSH
72237: LD_INT 50
72239: PUSH
72240: EMPTY
72241: LIST
72242: PPUSH
72243: CALL_OW 72
72247: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72248: LD_ADDR_VAR 0 8
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_INT 1
72260: ARRAY
72261: PPUSH
72262: CALL_OW 255
72266: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72267: LD_ADDR_VAR 0 10
72271: PUSH
72272: LD_INT 29
72274: PUSH
72275: LD_INT 91
72277: PUSH
72278: LD_INT 49
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: LIST
72285: ST_TO_ADDR
// if not result then
72286: LD_VAR 0 3
72290: NOT
72291: IFFALSE 72295
// exit ;
72293: GO 72751
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72295: LD_ADDR_VAR 0 5
72299: PUSH
72300: LD_INT 81
72302: PUSH
72303: LD_VAR 0 8
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PPUSH
72312: CALL_OW 69
72316: ST_TO_ADDR
// for i in result do
72317: LD_ADDR_VAR 0 4
72321: PUSH
72322: LD_VAR 0 3
72326: PUSH
72327: FOR_IN
72328: IFFALSE 72749
// begin tag := GetTag ( i ) + 1 ;
72330: LD_ADDR_VAR 0 9
72334: PUSH
72335: LD_VAR 0 4
72339: PPUSH
72340: CALL_OW 110
72344: PUSH
72345: LD_INT 1
72347: PLUS
72348: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72349: LD_ADDR_VAR 0 7
72353: PUSH
72354: LD_VAR 0 4
72358: PPUSH
72359: CALL_OW 250
72363: PPUSH
72364: LD_VAR 0 4
72368: PPUSH
72369: CALL_OW 251
72373: PPUSH
72374: LD_INT 6
72376: PPUSH
72377: CALL 71950 0 3
72381: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72382: LD_VAR 0 4
72386: PPUSH
72387: CALL_OW 247
72391: PUSH
72392: LD_INT 2
72394: EQUAL
72395: PUSH
72396: LD_VAR 0 7
72400: AND
72401: PUSH
72402: LD_VAR 0 4
72406: PPUSH
72407: CALL_OW 264
72411: PUSH
72412: LD_VAR 0 10
72416: IN
72417: NOT
72418: AND
72419: IFFALSE 72458
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72421: LD_VAR 0 4
72425: PPUSH
72426: LD_VAR 0 7
72430: PUSH
72431: LD_INT 1
72433: ARRAY
72434: PUSH
72435: LD_INT 1
72437: ARRAY
72438: PPUSH
72439: LD_VAR 0 7
72443: PUSH
72444: LD_INT 1
72446: ARRAY
72447: PUSH
72448: LD_INT 2
72450: ARRAY
72451: PPUSH
72452: CALL_OW 116
72456: GO 72747
// if path > tag then
72458: LD_VAR 0 2
72462: PUSH
72463: LD_VAR 0 9
72467: GREATER
72468: IFFALSE 72676
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72470: LD_ADDR_VAR 0 6
72474: PUSH
72475: LD_VAR 0 5
72479: PPUSH
72480: LD_INT 91
72482: PUSH
72483: LD_VAR 0 4
72487: PUSH
72488: LD_INT 8
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: PPUSH
72496: CALL_OW 72
72500: ST_TO_ADDR
// if nearEnemy then
72501: LD_VAR 0 6
72505: IFFALSE 72574
// begin if GetWeapon ( i ) = ru_time_lapser then
72507: LD_VAR 0 4
72511: PPUSH
72512: CALL_OW 264
72516: PUSH
72517: LD_INT 49
72519: EQUAL
72520: IFFALSE 72548
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72522: LD_VAR 0 4
72526: PPUSH
72527: LD_VAR 0 6
72531: PPUSH
72532: LD_VAR 0 4
72536: PPUSH
72537: CALL_OW 74
72541: PPUSH
72542: CALL_OW 112
72546: GO 72572
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72548: LD_VAR 0 4
72552: PPUSH
72553: LD_VAR 0 6
72557: PPUSH
72558: LD_VAR 0 4
72562: PPUSH
72563: CALL_OW 74
72567: PPUSH
72568: CALL 73676 0 2
// end else
72572: GO 72674
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72574: LD_VAR 0 4
72578: PPUSH
72579: LD_VAR 0 2
72583: PUSH
72584: LD_VAR 0 9
72588: ARRAY
72589: PUSH
72590: LD_INT 1
72592: ARRAY
72593: PPUSH
72594: LD_VAR 0 2
72598: PUSH
72599: LD_VAR 0 9
72603: ARRAY
72604: PUSH
72605: LD_INT 2
72607: ARRAY
72608: PPUSH
72609: CALL_OW 297
72613: PUSH
72614: LD_INT 6
72616: GREATER
72617: IFFALSE 72660
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72619: LD_VAR 0 4
72623: PPUSH
72624: LD_VAR 0 2
72628: PUSH
72629: LD_VAR 0 9
72633: ARRAY
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PPUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_VAR 0 9
72648: ARRAY
72649: PUSH
72650: LD_INT 2
72652: ARRAY
72653: PPUSH
72654: CALL_OW 114
72658: GO 72674
// SetTag ( i , tag ) ;
72660: LD_VAR 0 4
72664: PPUSH
72665: LD_VAR 0 9
72669: PPUSH
72670: CALL_OW 109
// end else
72674: GO 72747
// if enemy then
72676: LD_VAR 0 5
72680: IFFALSE 72747
// begin if GetWeapon ( i ) = ru_time_lapser then
72682: LD_VAR 0 4
72686: PPUSH
72687: CALL_OW 264
72691: PUSH
72692: LD_INT 49
72694: EQUAL
72695: IFFALSE 72723
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72697: LD_VAR 0 4
72701: PPUSH
72702: LD_VAR 0 5
72706: PPUSH
72707: LD_VAR 0 4
72711: PPUSH
72712: CALL_OW 74
72716: PPUSH
72717: CALL_OW 112
72721: GO 72747
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72723: LD_VAR 0 4
72727: PPUSH
72728: LD_VAR 0 5
72732: PPUSH
72733: LD_VAR 0 4
72737: PPUSH
72738: CALL_OW 74
72742: PPUSH
72743: CALL 73676 0 2
// end ; end ;
72747: GO 72327
72749: POP
72750: POP
// end ;
72751: LD_VAR 0 3
72755: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72756: LD_INT 0
72758: PPUSH
72759: PPUSH
72760: PPUSH
// if not unit or IsInUnit ( unit ) then
72761: LD_VAR 0 1
72765: NOT
72766: PUSH
72767: LD_VAR 0 1
72771: PPUSH
72772: CALL_OW 310
72776: OR
72777: IFFALSE 72781
// exit ;
72779: GO 72872
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72781: LD_ADDR_VAR 0 4
72785: PUSH
72786: LD_VAR 0 1
72790: PPUSH
72791: CALL_OW 250
72795: PPUSH
72796: LD_VAR 0 2
72800: PPUSH
72801: LD_INT 1
72803: PPUSH
72804: CALL_OW 272
72808: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72809: LD_ADDR_VAR 0 5
72813: PUSH
72814: LD_VAR 0 1
72818: PPUSH
72819: CALL_OW 251
72823: PPUSH
72824: LD_VAR 0 2
72828: PPUSH
72829: LD_INT 1
72831: PPUSH
72832: CALL_OW 273
72836: ST_TO_ADDR
// if ValidHex ( x , y ) then
72837: LD_VAR 0 4
72841: PPUSH
72842: LD_VAR 0 5
72846: PPUSH
72847: CALL_OW 488
72851: IFFALSE 72872
// ComTurnXY ( unit , x , y ) ;
72853: LD_VAR 0 1
72857: PPUSH
72858: LD_VAR 0 4
72862: PPUSH
72863: LD_VAR 0 5
72867: PPUSH
72868: CALL_OW 118
// end ;
72872: LD_VAR 0 3
72876: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72877: LD_INT 0
72879: PPUSH
72880: PPUSH
// result := false ;
72881: LD_ADDR_VAR 0 3
72885: PUSH
72886: LD_INT 0
72888: ST_TO_ADDR
// if not units then
72889: LD_VAR 0 2
72893: NOT
72894: IFFALSE 72898
// exit ;
72896: GO 72943
// for i in units do
72898: LD_ADDR_VAR 0 4
72902: PUSH
72903: LD_VAR 0 2
72907: PUSH
72908: FOR_IN
72909: IFFALSE 72941
// if See ( side , i ) then
72911: LD_VAR 0 1
72915: PPUSH
72916: LD_VAR 0 4
72920: PPUSH
72921: CALL_OW 292
72925: IFFALSE 72939
// begin result := true ;
72927: LD_ADDR_VAR 0 3
72931: PUSH
72932: LD_INT 1
72934: ST_TO_ADDR
// exit ;
72935: POP
72936: POP
72937: GO 72943
// end ;
72939: GO 72908
72941: POP
72942: POP
// end ;
72943: LD_VAR 0 3
72947: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72948: LD_INT 0
72950: PPUSH
72951: PPUSH
72952: PPUSH
72953: PPUSH
// if not unit or not points then
72954: LD_VAR 0 1
72958: NOT
72959: PUSH
72960: LD_VAR 0 2
72964: NOT
72965: OR
72966: IFFALSE 72970
// exit ;
72968: GO 73060
// dist := 99999 ;
72970: LD_ADDR_VAR 0 5
72974: PUSH
72975: LD_INT 99999
72977: ST_TO_ADDR
// for i in points do
72978: LD_ADDR_VAR 0 4
72982: PUSH
72983: LD_VAR 0 2
72987: PUSH
72988: FOR_IN
72989: IFFALSE 73058
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72991: LD_ADDR_VAR 0 6
72995: PUSH
72996: LD_VAR 0 1
73000: PPUSH
73001: LD_VAR 0 4
73005: PUSH
73006: LD_INT 1
73008: ARRAY
73009: PPUSH
73010: LD_VAR 0 4
73014: PUSH
73015: LD_INT 2
73017: ARRAY
73018: PPUSH
73019: CALL_OW 297
73023: ST_TO_ADDR
// if tmpDist < dist then
73024: LD_VAR 0 6
73028: PUSH
73029: LD_VAR 0 5
73033: LESS
73034: IFFALSE 73056
// begin result := i ;
73036: LD_ADDR_VAR 0 3
73040: PUSH
73041: LD_VAR 0 4
73045: ST_TO_ADDR
// dist := tmpDist ;
73046: LD_ADDR_VAR 0 5
73050: PUSH
73051: LD_VAR 0 6
73055: ST_TO_ADDR
// end ; end ;
73056: GO 72988
73058: POP
73059: POP
// end ;
73060: LD_VAR 0 3
73064: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73065: LD_INT 0
73067: PPUSH
// uc_side := side ;
73068: LD_ADDR_OWVAR 20
73072: PUSH
73073: LD_VAR 0 1
73077: ST_TO_ADDR
// uc_nation := 3 ;
73078: LD_ADDR_OWVAR 21
73082: PUSH
73083: LD_INT 3
73085: ST_TO_ADDR
// vc_chassis := 25 ;
73086: LD_ADDR_OWVAR 37
73090: PUSH
73091: LD_INT 25
73093: ST_TO_ADDR
// vc_engine := engine_siberite ;
73094: LD_ADDR_OWVAR 39
73098: PUSH
73099: LD_INT 3
73101: ST_TO_ADDR
// vc_control := control_computer ;
73102: LD_ADDR_OWVAR 38
73106: PUSH
73107: LD_INT 3
73109: ST_TO_ADDR
// vc_weapon := 59 ;
73110: LD_ADDR_OWVAR 40
73114: PUSH
73115: LD_INT 59
73117: ST_TO_ADDR
// result := CreateVehicle ;
73118: LD_ADDR_VAR 0 5
73122: PUSH
73123: CALL_OW 45
73127: ST_TO_ADDR
// SetDir ( result , d ) ;
73128: LD_VAR 0 5
73132: PPUSH
73133: LD_VAR 0 4
73137: PPUSH
73138: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73142: LD_VAR 0 5
73146: PPUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: LD_VAR 0 3
73156: PPUSH
73157: LD_INT 0
73159: PPUSH
73160: CALL_OW 48
// end ;
73164: LD_VAR 0 5
73168: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73169: LD_INT 0
73171: PPUSH
73172: PPUSH
73173: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73174: LD_ADDR_VAR 0 2
73178: PUSH
73179: LD_INT 0
73181: PUSH
73182: LD_INT 0
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73197: LD_VAR 0 1
73201: NOT
73202: PUSH
73203: LD_VAR 0 1
73207: PPUSH
73208: CALL_OW 264
73212: PUSH
73213: LD_INT 12
73215: PUSH
73216: LD_INT 51
73218: PUSH
73219: LD_INT 32
73221: PUSH
73222: LD_INT 89
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: IN
73231: NOT
73232: OR
73233: IFFALSE 73237
// exit ;
73235: GO 73335
// for i := 1 to 3 do
73237: LD_ADDR_VAR 0 3
73241: PUSH
73242: DOUBLE
73243: LD_INT 1
73245: DEC
73246: ST_TO_ADDR
73247: LD_INT 3
73249: PUSH
73250: FOR_TO
73251: IFFALSE 73333
// begin tmp := GetCargo ( cargo , i ) ;
73253: LD_ADDR_VAR 0 4
73257: PUSH
73258: LD_VAR 0 1
73262: PPUSH
73263: LD_VAR 0 3
73267: PPUSH
73268: CALL_OW 289
73272: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73273: LD_ADDR_VAR 0 2
73277: PUSH
73278: LD_VAR 0 2
73282: PPUSH
73283: LD_VAR 0 3
73287: PPUSH
73288: LD_VAR 0 4
73292: PPUSH
73293: CALL_OW 1
73297: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73298: LD_ADDR_VAR 0 2
73302: PUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: LD_INT 4
73310: PPUSH
73311: LD_VAR 0 2
73315: PUSH
73316: LD_INT 4
73318: ARRAY
73319: PUSH
73320: LD_VAR 0 4
73324: PLUS
73325: PPUSH
73326: CALL_OW 1
73330: ST_TO_ADDR
// end ;
73331: GO 73250
73333: POP
73334: POP
// end ;
73335: LD_VAR 0 2
73339: RET
// export function Length ( array ) ; begin
73340: LD_INT 0
73342: PPUSH
// result := array + 0 ;
73343: LD_ADDR_VAR 0 2
73347: PUSH
73348: LD_VAR 0 1
73352: PUSH
73353: LD_INT 0
73355: PLUS
73356: ST_TO_ADDR
// end ;
73357: LD_VAR 0 2
73361: RET
// export function PrepareArray ( array ) ; begin
73362: LD_INT 0
73364: PPUSH
// result := array diff 0 ;
73365: LD_ADDR_VAR 0 2
73369: PUSH
73370: LD_VAR 0 1
73374: PUSH
73375: LD_INT 0
73377: DIFF
73378: ST_TO_ADDR
// if not result [ 1 ] then
73379: LD_VAR 0 2
73383: PUSH
73384: LD_INT 1
73386: ARRAY
73387: NOT
73388: IFFALSE 73408
// result := Delete ( result , 1 ) ;
73390: LD_ADDR_VAR 0 2
73394: PUSH
73395: LD_VAR 0 2
73399: PPUSH
73400: LD_INT 1
73402: PPUSH
73403: CALL_OW 3
73407: ST_TO_ADDR
// end ;
73408: LD_VAR 0 2
73412: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73413: LD_INT 0
73415: PPUSH
73416: PPUSH
73417: PPUSH
73418: PPUSH
// sibRocketRange := 25 ;
73419: LD_ADDR_VAR 0 6
73423: PUSH
73424: LD_INT 25
73426: ST_TO_ADDR
// result := false ;
73427: LD_ADDR_VAR 0 4
73431: PUSH
73432: LD_INT 0
73434: ST_TO_ADDR
// for i := 0 to 5 do
73435: LD_ADDR_VAR 0 5
73439: PUSH
73440: DOUBLE
73441: LD_INT 0
73443: DEC
73444: ST_TO_ADDR
73445: LD_INT 5
73447: PUSH
73448: FOR_TO
73449: IFFALSE 73516
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73451: LD_VAR 0 1
73455: PPUSH
73456: LD_VAR 0 5
73460: PPUSH
73461: LD_VAR 0 6
73465: PPUSH
73466: CALL_OW 272
73470: PPUSH
73471: LD_VAR 0 2
73475: PPUSH
73476: LD_VAR 0 5
73480: PPUSH
73481: LD_VAR 0 6
73485: PPUSH
73486: CALL_OW 273
73490: PPUSH
73491: LD_VAR 0 3
73495: PPUSH
73496: CALL_OW 309
73500: IFFALSE 73514
// begin result := true ;
73502: LD_ADDR_VAR 0 4
73506: PUSH
73507: LD_INT 1
73509: ST_TO_ADDR
// exit ;
73510: POP
73511: POP
73512: GO 73518
// end ;
73514: GO 73448
73516: POP
73517: POP
// end ;
73518: LD_VAR 0 4
73522: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73523: LD_INT 0
73525: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73526: LD_VAR 0 1
73530: PPUSH
73531: LD_VAR 0 2
73535: PPUSH
73536: LD_INT 0
73538: PPUSH
73539: LD_INT 0
73541: PPUSH
73542: LD_INT 1
73544: PPUSH
73545: LD_INT 0
73547: PPUSH
73548: CALL_OW 587
// end ;
73552: LD_VAR 0 3
73556: RET
// export function CenterOnNow ( unit ) ; begin
73557: LD_INT 0
73559: PPUSH
// result := IsInUnit ( unit ) ;
73560: LD_ADDR_VAR 0 2
73564: PUSH
73565: LD_VAR 0 1
73569: PPUSH
73570: CALL_OW 310
73574: ST_TO_ADDR
// if not result then
73575: LD_VAR 0 2
73579: NOT
73580: IFFALSE 73592
// result := unit ;
73582: LD_ADDR_VAR 0 2
73586: PUSH
73587: LD_VAR 0 1
73591: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73592: LD_VAR 0 1
73596: PPUSH
73597: CALL_OW 87
// end ;
73601: LD_VAR 0 2
73605: RET
// export function ComMoveHex ( unit , hex ) ; begin
73606: LD_INT 0
73608: PPUSH
// if not hex then
73609: LD_VAR 0 2
73613: NOT
73614: IFFALSE 73618
// exit ;
73616: GO 73671
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73618: LD_VAR 0 2
73622: PUSH
73623: LD_INT 1
73625: ARRAY
73626: PPUSH
73627: LD_VAR 0 2
73631: PUSH
73632: LD_INT 2
73634: ARRAY
73635: PPUSH
73636: CALL_OW 428
73640: IFFALSE 73644
// exit ;
73642: GO 73671
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73644: LD_VAR 0 1
73648: PPUSH
73649: LD_VAR 0 2
73653: PUSH
73654: LD_INT 1
73656: ARRAY
73657: PPUSH
73658: LD_VAR 0 2
73662: PUSH
73663: LD_INT 2
73665: ARRAY
73666: PPUSH
73667: CALL_OW 111
// end ;
73671: LD_VAR 0 3
73675: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73676: LD_INT 0
73678: PPUSH
73679: PPUSH
73680: PPUSH
// if not unit or not enemy then
73681: LD_VAR 0 1
73685: NOT
73686: PUSH
73687: LD_VAR 0 2
73691: NOT
73692: OR
73693: IFFALSE 73697
// exit ;
73695: GO 73821
// x := GetX ( enemy ) ;
73697: LD_ADDR_VAR 0 4
73701: PUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: CALL_OW 250
73711: ST_TO_ADDR
// y := GetY ( enemy ) ;
73712: LD_ADDR_VAR 0 5
73716: PUSH
73717: LD_VAR 0 2
73721: PPUSH
73722: CALL_OW 251
73726: ST_TO_ADDR
// if ValidHex ( x , y ) then
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 5
73736: PPUSH
73737: CALL_OW 488
73741: IFFALSE 73821
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73743: LD_VAR 0 2
73747: PPUSH
73748: CALL_OW 247
73752: PUSH
73753: LD_INT 3
73755: PUSH
73756: LD_INT 2
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: IN
73763: PUSH
73764: LD_VAR 0 1
73768: PPUSH
73769: CALL_OW 255
73773: PPUSH
73774: LD_VAR 0 2
73778: PPUSH
73779: CALL_OW 292
73783: OR
73784: IFFALSE 73802
// ComAttackUnit ( unit , enemy ) else
73786: LD_VAR 0 1
73790: PPUSH
73791: LD_VAR 0 2
73795: PPUSH
73796: CALL_OW 115
73800: GO 73821
// ComAgressiveMove ( unit , x , y ) ;
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_VAR 0 4
73811: PPUSH
73812: LD_VAR 0 5
73816: PPUSH
73817: CALL_OW 114
// end ;
73821: LD_VAR 0 3
73825: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73826: LD_INT 0
73828: PPUSH
73829: PPUSH
73830: PPUSH
// list := AreaToList ( area , 0 ) ;
73831: LD_ADDR_VAR 0 5
73835: PUSH
73836: LD_VAR 0 1
73840: PPUSH
73841: LD_INT 0
73843: PPUSH
73844: CALL_OW 517
73848: ST_TO_ADDR
// if not list then
73849: LD_VAR 0 5
73853: NOT
73854: IFFALSE 73858
// exit ;
73856: GO 73988
// if all then
73858: LD_VAR 0 2
73862: IFFALSE 73950
// begin for i := 1 to list [ 1 ] do
73864: LD_ADDR_VAR 0 4
73868: PUSH
73869: DOUBLE
73870: LD_INT 1
73872: DEC
73873: ST_TO_ADDR
73874: LD_VAR 0 5
73878: PUSH
73879: LD_INT 1
73881: ARRAY
73882: PUSH
73883: FOR_TO
73884: IFFALSE 73946
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73886: LD_ADDR_VAR 0 3
73890: PUSH
73891: LD_VAR 0 3
73895: PPUSH
73896: LD_VAR 0 3
73900: PUSH
73901: LD_INT 1
73903: PLUS
73904: PPUSH
73905: LD_VAR 0 5
73909: PUSH
73910: LD_INT 1
73912: ARRAY
73913: PUSH
73914: LD_VAR 0 4
73918: ARRAY
73919: PUSH
73920: LD_VAR 0 5
73924: PUSH
73925: LD_INT 2
73927: ARRAY
73928: PUSH
73929: LD_VAR 0 4
73933: ARRAY
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PPUSH
73939: CALL_OW 1
73943: ST_TO_ADDR
73944: GO 73883
73946: POP
73947: POP
// exit ;
73948: GO 73988
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73950: LD_ADDR_VAR 0 3
73954: PUSH
73955: LD_VAR 0 5
73959: PUSH
73960: LD_INT 1
73962: ARRAY
73963: PUSH
73964: LD_INT 1
73966: ARRAY
73967: PUSH
73968: LD_VAR 0 5
73972: PUSH
73973: LD_INT 2
73975: ARRAY
73976: PUSH
73977: LD_INT 1
73979: ARRAY
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: EMPTY
73986: LIST
73987: ST_TO_ADDR
// end ;
73988: LD_VAR 0 3
73992: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73993: LD_INT 0
73995: PPUSH
73996: PPUSH
// list := AreaToList ( area , 0 ) ;
73997: LD_ADDR_VAR 0 4
74001: PUSH
74002: LD_VAR 0 1
74006: PPUSH
74007: LD_INT 0
74009: PPUSH
74010: CALL_OW 517
74014: ST_TO_ADDR
// if not list then
74015: LD_VAR 0 4
74019: NOT
74020: IFFALSE 74024
// exit ;
74022: GO 74065
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74024: LD_ADDR_VAR 0 3
74028: PUSH
74029: LD_VAR 0 4
74033: PUSH
74034: LD_INT 1
74036: ARRAY
74037: PUSH
74038: LD_INT 1
74040: ARRAY
74041: PUSH
74042: LD_VAR 0 4
74046: PUSH
74047: LD_INT 2
74049: ARRAY
74050: PUSH
74051: LD_INT 1
74053: ARRAY
74054: PUSH
74055: LD_VAR 0 2
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: LIST
74064: ST_TO_ADDR
// end ;
74065: LD_VAR 0 3
74069: RET
// export function First ( array ) ; begin
74070: LD_INT 0
74072: PPUSH
// if not array then
74073: LD_VAR 0 1
74077: NOT
74078: IFFALSE 74082
// exit ;
74080: GO 74096
// result := array [ 1 ] ;
74082: LD_ADDR_VAR 0 2
74086: PUSH
74087: LD_VAR 0 1
74091: PUSH
74092: LD_INT 1
74094: ARRAY
74095: ST_TO_ADDR
// end ;
74096: LD_VAR 0 2
74100: RET
// export function Last ( array ) ; begin
74101: LD_INT 0
74103: PPUSH
// if not array then
74104: LD_VAR 0 1
74108: NOT
74109: IFFALSE 74113
// exit ;
74111: GO 74129
// result := array [ array ] ;
74113: LD_ADDR_VAR 0 2
74117: PUSH
74118: LD_VAR 0 1
74122: PUSH
74123: LD_VAR 0 1
74127: ARRAY
74128: ST_TO_ADDR
// end ;
74129: LD_VAR 0 2
74133: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74134: LD_INT 0
74136: PPUSH
74137: PPUSH
// result := [ ] ;
74138: LD_ADDR_VAR 0 5
74142: PUSH
74143: EMPTY
74144: ST_TO_ADDR
// if not array then
74145: LD_VAR 0 1
74149: NOT
74150: IFFALSE 74154
// exit ;
74152: GO 74266
// for i := 1 to array do
74154: LD_ADDR_VAR 0 6
74158: PUSH
74159: DOUBLE
74160: LD_INT 1
74162: DEC
74163: ST_TO_ADDR
74164: LD_VAR 0 1
74168: PUSH
74169: FOR_TO
74170: IFFALSE 74264
// if array [ i ] [ index ] = value then
74172: LD_VAR 0 1
74176: PUSH
74177: LD_VAR 0 6
74181: ARRAY
74182: PUSH
74183: LD_VAR 0 2
74187: ARRAY
74188: PUSH
74189: LD_VAR 0 3
74193: EQUAL
74194: IFFALSE 74262
// begin if indexColumn then
74196: LD_VAR 0 4
74200: IFFALSE 74236
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74202: LD_ADDR_VAR 0 5
74206: PUSH
74207: LD_VAR 0 5
74211: PPUSH
74212: LD_VAR 0 1
74216: PUSH
74217: LD_VAR 0 6
74221: ARRAY
74222: PUSH
74223: LD_VAR 0 4
74227: ARRAY
74228: PPUSH
74229: CALL 69604 0 2
74233: ST_TO_ADDR
74234: GO 74262
// result := Join ( result , array [ i ] ) ;
74236: LD_ADDR_VAR 0 5
74240: PUSH
74241: LD_VAR 0 5
74245: PPUSH
74246: LD_VAR 0 1
74250: PUSH
74251: LD_VAR 0 6
74255: ARRAY
74256: PPUSH
74257: CALL 69604 0 2
74261: ST_TO_ADDR
// end ;
74262: GO 74169
74264: POP
74265: POP
// end ;
74266: LD_VAR 0 5
74270: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74271: LD_INT 0
74273: PPUSH
74274: PPUSH
74275: PPUSH
// if btype = b_depot then
74276: LD_VAR 0 2
74280: PUSH
74281: LD_INT 0
74283: EQUAL
74284: IFFALSE 74296
// begin result := true ;
74286: LD_ADDR_VAR 0 3
74290: PUSH
74291: LD_INT 1
74293: ST_TO_ADDR
// exit ;
74294: GO 74412
// end ; pom := GetBase ( depot ) ;
74296: LD_ADDR_VAR 0 4
74300: PUSH
74301: LD_VAR 0 1
74305: PPUSH
74306: CALL_OW 274
74310: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74311: LD_ADDR_VAR 0 5
74315: PUSH
74316: LD_VAR 0 2
74320: PPUSH
74321: LD_VAR 0 1
74325: PPUSH
74326: CALL_OW 248
74330: PPUSH
74331: CALL_OW 450
74335: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74336: LD_ADDR_VAR 0 3
74340: PUSH
74341: LD_VAR 0 4
74345: PPUSH
74346: LD_INT 1
74348: PPUSH
74349: CALL_OW 275
74353: PUSH
74354: LD_VAR 0 5
74358: PUSH
74359: LD_INT 1
74361: ARRAY
74362: GREATEREQUAL
74363: PUSH
74364: LD_VAR 0 4
74368: PPUSH
74369: LD_INT 2
74371: PPUSH
74372: CALL_OW 275
74376: PUSH
74377: LD_VAR 0 5
74381: PUSH
74382: LD_INT 2
74384: ARRAY
74385: GREATEREQUAL
74386: AND
74387: PUSH
74388: LD_VAR 0 4
74392: PPUSH
74393: LD_INT 3
74395: PPUSH
74396: CALL_OW 275
74400: PUSH
74401: LD_VAR 0 5
74405: PUSH
74406: LD_INT 3
74408: ARRAY
74409: GREATEREQUAL
74410: AND
74411: ST_TO_ADDR
// end ;
74412: LD_VAR 0 3
74416: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74417: LD_INT 0
74419: PPUSH
// if not vehicles or not parkingPoint then
74420: LD_VAR 0 1
74424: NOT
74425: PUSH
74426: LD_VAR 0 2
74430: NOT
74431: OR
74432: IFFALSE 74436
// exit ;
74434: GO 74534
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74436: LD_ADDR_VAR 0 1
74440: PUSH
74441: LD_VAR 0 1
74445: PPUSH
74446: LD_INT 50
74448: PUSH
74449: EMPTY
74450: LIST
74451: PUSH
74452: LD_INT 3
74454: PUSH
74455: LD_INT 92
74457: PUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_INT 1
74465: ARRAY
74466: PUSH
74467: LD_VAR 0 2
74471: PUSH
74472: LD_INT 2
74474: ARRAY
74475: PUSH
74476: LD_INT 8
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PPUSH
74493: CALL_OW 72
74497: ST_TO_ADDR
// if not vehicles then
74498: LD_VAR 0 1
74502: NOT
74503: IFFALSE 74507
// exit ;
74505: GO 74534
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74507: LD_VAR 0 1
74511: PPUSH
74512: LD_VAR 0 2
74516: PUSH
74517: LD_INT 1
74519: ARRAY
74520: PPUSH
74521: LD_VAR 0 2
74525: PUSH
74526: LD_INT 2
74528: ARRAY
74529: PPUSH
74530: CALL_OW 111
// end ;
74534: LD_VAR 0 3
74538: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74539: LD_INT 0
74541: PPUSH
74542: PPUSH
74543: PPUSH
// if not side or not area then
74544: LD_VAR 0 1
74548: NOT
74549: PUSH
74550: LD_VAR 0 2
74554: NOT
74555: OR
74556: IFFALSE 74560
// exit ;
74558: GO 74679
// tmp := AreaToList ( area , 0 ) ;
74560: LD_ADDR_VAR 0 5
74564: PUSH
74565: LD_VAR 0 2
74569: PPUSH
74570: LD_INT 0
74572: PPUSH
74573: CALL_OW 517
74577: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74578: LD_ADDR_VAR 0 4
74582: PUSH
74583: DOUBLE
74584: LD_INT 1
74586: DEC
74587: ST_TO_ADDR
74588: LD_VAR 0 5
74592: PUSH
74593: LD_INT 1
74595: ARRAY
74596: PUSH
74597: FOR_TO
74598: IFFALSE 74677
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74600: LD_VAR 0 5
74604: PUSH
74605: LD_INT 1
74607: ARRAY
74608: PUSH
74609: LD_VAR 0 4
74613: ARRAY
74614: PPUSH
74615: LD_VAR 0 5
74619: PUSH
74620: LD_INT 2
74622: ARRAY
74623: PUSH
74624: LD_VAR 0 4
74628: ARRAY
74629: PPUSH
74630: CALL_OW 351
74634: IFFALSE 74675
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74636: LD_VAR 0 5
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: PUSH
74645: LD_VAR 0 4
74649: ARRAY
74650: PPUSH
74651: LD_VAR 0 5
74655: PUSH
74656: LD_INT 2
74658: ARRAY
74659: PUSH
74660: LD_VAR 0 4
74664: ARRAY
74665: PPUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: CALL_OW 244
// end ;
74675: GO 74597
74677: POP
74678: POP
// end ; end_of_file
74679: LD_VAR 0 3
74683: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74684: LD_VAR 0 1
74688: PUSH
74689: LD_INT 200
74691: DOUBLE
74692: GREATEREQUAL
74693: IFFALSE 74701
74695: LD_INT 299
74697: DOUBLE
74698: LESSEQUAL
74699: IFTRUE 74703
74701: GO 74735
74703: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74704: LD_VAR 0 1
74708: PPUSH
74709: LD_VAR 0 2
74713: PPUSH
74714: LD_VAR 0 3
74718: PPUSH
74719: LD_VAR 0 4
74723: PPUSH
74724: LD_VAR 0 5
74728: PPUSH
74729: CALL 27395 0 5
74733: GO 74812
74735: LD_INT 300
74737: DOUBLE
74738: GREATEREQUAL
74739: IFFALSE 74747
74741: LD_INT 399
74743: DOUBLE
74744: LESSEQUAL
74745: IFTRUE 74749
74747: GO 74811
74749: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74750: LD_VAR 0 1
74754: PPUSH
74755: LD_VAR 0 2
74759: PPUSH
74760: LD_VAR 0 3
74764: PPUSH
74765: LD_VAR 0 4
74769: PPUSH
74770: LD_VAR 0 5
74774: PPUSH
74775: LD_VAR 0 6
74779: PPUSH
74780: LD_VAR 0 7
74784: PPUSH
74785: LD_VAR 0 8
74789: PPUSH
74790: LD_VAR 0 9
74794: PPUSH
74795: LD_VAR 0 10
74799: PPUSH
74800: LD_VAR 0 11
74804: PPUSH
74805: CALL 23720 0 11
74809: GO 74812
74811: POP
// end ;
74812: PPOPN 11
74814: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74815: LD_VAR 0 1
74819: PPUSH
74820: LD_VAR 0 2
74824: PPUSH
74825: LD_VAR 0 3
74829: PPUSH
74830: LD_VAR 0 4
74834: PPUSH
74835: LD_VAR 0 5
74839: PPUSH
74840: CALL 27131 0 5
// end ; end_of_file
74844: PPOPN 5
74846: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74847: LD_VAR 0 1
74851: PPUSH
74852: LD_VAR 0 2
74856: PPUSH
74857: LD_VAR 0 3
74861: PPUSH
74862: LD_VAR 0 4
74866: PPUSH
74867: LD_VAR 0 5
74871: PPUSH
74872: LD_VAR 0 6
74876: PPUSH
74877: CALL 11372 0 6
// end ;
74881: PPOPN 6
74883: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74884: LD_INT 0
74886: PPUSH
// begin if not units then
74887: LD_VAR 0 1
74891: NOT
74892: IFFALSE 74896
// exit ;
74894: GO 74896
// end ;
74896: PPOPN 7
74898: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74899: CALL 11259 0 0
// end ;
74903: PPOPN 1
74905: END
